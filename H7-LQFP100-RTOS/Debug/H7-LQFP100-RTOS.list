
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bfe0  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0801c280  0801c280  0002c280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801c748  0801c748  0002c748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801c750  0801c750  0002c750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801c754  0801c754  0002c754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000140  24000000  0801c758  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00006c34  24000140  0801c898  00030140  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24006d74  0801c898  00036d74  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 10 .debug_info   000435e6  00000000  00000000  0003016e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00008234  00000000  00000000  00073754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002d60  00000000  00000000  0007b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002a10  00000000  00000000  0007e6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0004740b  00000000  00000000  000810f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000457aa  00000000  00000000  000c8503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00198483  00000000  00000000  0010dcad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002a6130  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000c38c  00000000  00000000  002a6180  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000140 	.word	0x24000140
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801c268 	.word	0x0801c268

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000144 	.word	0x24000144
 80002dc:	0801c268 	.word	0x0801c268

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	; 0x28
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005ea:	f107 031c 	add.w	r3, r7, #28
 80005ee:	2200      	movs	r2, #0
 80005f0:	601a      	str	r2, [r3, #0]
 80005f2:	605a      	str	r2, [r3, #4]
 80005f4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]
 8000604:	615a      	str	r2, [r3, #20]
 8000606:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000608:	4b7a      	ldr	r3, [pc, #488]	; (80007f4 <MX_ADC1_Init+0x210>)
 800060a:	4a7b      	ldr	r2, [pc, #492]	; (80007f8 <MX_ADC1_Init+0x214>)
 800060c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800060e:	4b79      	ldr	r3, [pc, #484]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000610:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000614:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000616:	4b77      	ldr	r3, [pc, #476]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000618:	2208      	movs	r2, #8
 800061a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800061c:	4b75      	ldr	r3, [pc, #468]	; (80007f4 <MX_ADC1_Init+0x210>)
 800061e:	2201      	movs	r2, #1
 8000620:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000622:	4b74      	ldr	r3, [pc, #464]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000624:	2204      	movs	r2, #4
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000628:	4b72      	ldr	r3, [pc, #456]	; (80007f4 <MX_ADC1_Init+0x210>)
 800062a:	2200      	movs	r2, #0
 800062c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800062e:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000630:	2201      	movs	r2, #1
 8000632:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 8000634:	4b6f      	ldr	r3, [pc, #444]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000636:	220b      	movs	r2, #11
 8000638:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800063a:	4b6e      	ldr	r3, [pc, #440]	; (80007f4 <MX_ADC1_Init+0x210>)
 800063c:	2200      	movs	r2, #0
 800063e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000640:	4b6c      	ldr	r3, [pc, #432]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000642:	2200      	movs	r2, #0
 8000644:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000646:	4b6b      	ldr	r3, [pc, #428]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000648:	2200      	movs	r2, #0
 800064a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800064c:	4b69      	ldr	r3, [pc, #420]	; (80007f4 <MX_ADC1_Init+0x210>)
 800064e:	2203      	movs	r2, #3
 8000650:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000652:	4b68      	ldr	r3, [pc, #416]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000654:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000658:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800065a:	4b66      	ldr	r3, [pc, #408]	; (80007f4 <MX_ADC1_Init+0x210>)
 800065c:	2200      	movs	r2, #0
 800065e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000660:	4b64      	ldr	r3, [pc, #400]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000668:	4862      	ldr	r0, [pc, #392]	; (80007f4 <MX_ADC1_Init+0x210>)
 800066a:	f006 fc09 	bl	8006e80 <HAL_ADC_Init>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000674:	f003 fbac 	bl	8003dd0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000678:	2300      	movs	r3, #0
 800067a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	485c      	ldr	r0, [pc, #368]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000684:	f007 fd24 	bl	80080d0 <HAL_ADCEx_MultiModeConfigChannel>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800068e:	f003 fb9f 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000692:	4b5a      	ldr	r3, [pc, #360]	; (80007fc <MX_ADC1_Init+0x218>)
 8000694:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000696:	2306      	movs	r3, #6
 8000698:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800069a:	2307      	movs	r3, #7
 800069c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800069e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006a2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006a4:	2304      	movs	r3, #4
 80006a6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 80006ac:	2300      	movs	r3, #0
 80006ae:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b0:	463b      	mov	r3, r7
 80006b2:	4619      	mov	r1, r3
 80006b4:	484f      	ldr	r0, [pc, #316]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006b6:	f006 fe67 	bl	8007388 <HAL_ADC_ConfigChannel>
 80006ba:	4603      	mov	r3, r0
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d001      	beq.n	80006c4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 80006c0:	f003 fb86 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80006c4:	4b4e      	ldr	r3, [pc, #312]	; (8000800 <MX_ADC1_Init+0x21c>)
 80006c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006c8:	230c      	movs	r3, #12
 80006ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4848      	ldr	r0, [pc, #288]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006d2:	f006 fe59 	bl	8007388 <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 80006dc:	f003 fb78 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80006e0:	4b48      	ldr	r3, [pc, #288]	; (8000804 <MX_ADC1_Init+0x220>)
 80006e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80006e4:	2312      	movs	r3, #18
 80006e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e8:	463b      	mov	r3, r7
 80006ea:	4619      	mov	r1, r3
 80006ec:	4841      	ldr	r0, [pc, #260]	; (80007f4 <MX_ADC1_Init+0x210>)
 80006ee:	f006 fe4b 	bl	8007388 <HAL_ADC_ConfigChannel>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 80006f8:	f003 fb6a 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80006fc:	4b42      	ldr	r3, [pc, #264]	; (8000808 <MX_ADC1_Init+0x224>)
 80006fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000700:	2318      	movs	r3, #24
 8000702:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	4619      	mov	r1, r3
 8000708:	483a      	ldr	r0, [pc, #232]	; (80007f4 <MX_ADC1_Init+0x210>)
 800070a:	f006 fe3d 	bl	8007388 <HAL_ADC_ConfigChannel>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 8000714:	f003 fb5c 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000718:	4b3c      	ldr	r3, [pc, #240]	; (800080c <MX_ADC1_Init+0x228>)
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 800071c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000720:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000722:	463b      	mov	r3, r7
 8000724:	4619      	mov	r1, r3
 8000726:	4833      	ldr	r0, [pc, #204]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000728:	f006 fe2e 	bl	8007388 <HAL_ADC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 8000732:	f003 fb4d 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000736:	4b36      	ldr	r3, [pc, #216]	; (8000810 <MX_ADC1_Init+0x22c>)
 8000738:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 800073a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800073e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000740:	463b      	mov	r3, r7
 8000742:	4619      	mov	r1, r3
 8000744:	482b      	ldr	r0, [pc, #172]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000746:	f006 fe1f 	bl	8007388 <HAL_ADC_ConfigChannel>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 8000750:	f003 fb3e 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000754:	4b2f      	ldr	r3, [pc, #188]	; (8000814 <MX_ADC1_Init+0x230>)
 8000756:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8000758:	f44f 7386 	mov.w	r3, #268	; 0x10c
 800075c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800075e:	463b      	mov	r3, r7
 8000760:	4619      	mov	r1, r3
 8000762:	4824      	ldr	r0, [pc, #144]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000764:	f006 fe10 	bl	8007388 <HAL_ADC_ConfigChannel>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 800076e:	f003 fb2f 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8000772:	4b29      	ldr	r3, [pc, #164]	; (8000818 <MX_ADC1_Init+0x234>)
 8000774:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000776:	f44f 7389 	mov.w	r3, #274	; 0x112
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	4619      	mov	r1, r3
 8000780:	481c      	ldr	r0, [pc, #112]	; (80007f4 <MX_ADC1_Init+0x210>)
 8000782:	f006 fe01 	bl	8007388 <HAL_ADC_ConfigChannel>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 800078c:	f003 fb20 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8000790:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_ADC1_Init+0x238>)
 8000792:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8000794:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000798:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800079a:	463b      	mov	r3, r7
 800079c:	4619      	mov	r1, r3
 800079e:	4815      	ldr	r0, [pc, #84]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007a0:	f006 fdf2 	bl	8007388 <HAL_ADC_ConfigChannel>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 80007aa:	f003 fb11 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80007ae:	4b1c      	ldr	r3, [pc, #112]	; (8000820 <MX_ADC1_Init+0x23c>)
 80007b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80007b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007b6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b8:	463b      	mov	r3, r7
 80007ba:	4619      	mov	r1, r3
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007be:	f006 fde3 	bl	8007388 <HAL_ADC_ConfigChannel>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 80007c8:	f003 fb02 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 80007cc:	4b15      	ldr	r3, [pc, #84]	; (8000824 <MX_ADC1_Init+0x240>)
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 80007d0:	f240 2306 	movw	r3, #518	; 0x206
 80007d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_ADC1_Init+0x210>)
 80007dc:	f006 fdd4 	bl	8007388 <HAL_ADC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 80007e6:	f003 faf3 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3728      	adds	r7, #40	; 0x28
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2400015c 	.word	0x2400015c
 80007f8:	40022000 	.word	0x40022000
 80007fc:	0c900008 	.word	0x0c900008
 8000800:	10c00010 	.word	0x10c00010
 8000804:	14f00020 	.word	0x14f00020
 8000808:	1d500080 	.word	0x1d500080
 800080c:	21800100 	.word	0x21800100
 8000810:	25b00200 	.word	0x25b00200
 8000814:	2a000400 	.word	0x2a000400
 8000818:	2e300800 	.word	0x2e300800
 800081c:	3ac04000 	.word	0x3ac04000
 8000820:	3ef08000 	.word	0x3ef08000
 8000824:	47520000 	.word	0x47520000

08000828 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]
 800083a:	611a      	str	r2, [r3, #16]
 800083c:	615a      	str	r2, [r3, #20]
 800083e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000840:	4b3d      	ldr	r3, [pc, #244]	; (8000938 <MX_ADC3_Init+0x110>)
 8000842:	4a3e      	ldr	r2, [pc, #248]	; (800093c <MX_ADC3_Init+0x114>)
 8000844:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b3c      	ldr	r3, [pc, #240]	; (8000938 <MX_ADC3_Init+0x110>)
 8000848:	2208      	movs	r2, #8
 800084a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b3a      	ldr	r3, [pc, #232]	; (8000938 <MX_ADC3_Init+0x110>)
 800084e:	2201      	movs	r2, #1
 8000850:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000852:	4b39      	ldr	r3, [pc, #228]	; (8000938 <MX_ADC3_Init+0x110>)
 8000854:	2204      	movs	r2, #4
 8000856:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <MX_ADC3_Init+0x110>)
 800085a:	2200      	movs	r2, #0
 800085c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 800085e:	4b36      	ldr	r3, [pc, #216]	; (8000938 <MX_ADC3_Init+0x110>)
 8000860:	2201      	movs	r2, #1
 8000862:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <MX_ADC3_Init+0x110>)
 8000866:	2204      	movs	r2, #4
 8000868:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800086a:	4b33      	ldr	r3, [pc, #204]	; (8000938 <MX_ADC3_Init+0x110>)
 800086c:	2200      	movs	r2, #0
 800086e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000870:	4b31      	ldr	r3, [pc, #196]	; (8000938 <MX_ADC3_Init+0x110>)
 8000872:	2200      	movs	r2, #0
 8000874:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000876:	4b30      	ldr	r3, [pc, #192]	; (8000938 <MX_ADC3_Init+0x110>)
 8000878:	2200      	movs	r2, #0
 800087a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800087c:	4b2e      	ldr	r3, [pc, #184]	; (8000938 <MX_ADC3_Init+0x110>)
 800087e:	2203      	movs	r2, #3
 8000880:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000882:	4b2d      	ldr	r3, [pc, #180]	; (8000938 <MX_ADC3_Init+0x110>)
 8000884:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000888:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800088a:	4b2b      	ldr	r3, [pc, #172]	; (8000938 <MX_ADC3_Init+0x110>)
 800088c:	2200      	movs	r2, #0
 800088e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <MX_ADC3_Init+0x110>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000898:	4827      	ldr	r0, [pc, #156]	; (8000938 <MX_ADC3_Init+0x110>)
 800089a:	f006 faf1 	bl	8006e80 <HAL_ADC_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 80008a4:	f003 fa94 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80008a8:	4b25      	ldr	r3, [pc, #148]	; (8000940 <MX_ADC3_Init+0x118>)
 80008aa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80008ac:	2306      	movs	r3, #6
 80008ae:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80008b0:	2307      	movs	r3, #7
 80008b2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80008b4:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80008b8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80008ba:	2304      	movs	r3, #4
 80008bc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80008c2:	2300      	movs	r3, #0
 80008c4:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	4619      	mov	r1, r3
 80008ca:	481b      	ldr	r0, [pc, #108]	; (8000938 <MX_ADC3_Init+0x110>)
 80008cc:	f006 fd5c 	bl	8007388 <HAL_ADC_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 80008d6:	f003 fa7b 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <MX_ADC3_Init+0x11c>)
 80008dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008de:	230c      	movs	r3, #12
 80008e0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	4814      	ldr	r0, [pc, #80]	; (8000938 <MX_ADC3_Init+0x110>)
 80008e8:	f006 fd4e 	bl	8007388 <HAL_ADC_ConfigChannel>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 80008f2:	f003 fa6d 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008f6:	2301      	movs	r3, #1
 80008f8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80008fa:	2312      	movs	r3, #18
 80008fc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80008fe:	1d3b      	adds	r3, r7, #4
 8000900:	4619      	mov	r1, r3
 8000902:	480d      	ldr	r0, [pc, #52]	; (8000938 <MX_ADC3_Init+0x110>)
 8000904:	f006 fd40 	bl	8007388 <HAL_ADC_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800090e:	f003 fa5f 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <MX_ADC3_Init+0x120>)
 8000914:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000916:	2318      	movs	r3, #24
 8000918:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	4619      	mov	r1, r3
 800091e:	4806      	ldr	r0, [pc, #24]	; (8000938 <MX_ADC3_Init+0x110>)
 8000920:	f006 fd32 	bl	8007388 <HAL_ADC_ConfigChannel>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 800092a:	f003 fa51 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	3720      	adds	r7, #32
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	240001c0 	.word	0x240001c0
 800093c:	58026000 	.word	0x58026000
 8000940:	cb840000 	.word	0xcb840000
 8000944:	cfb80000 	.word	0xcfb80000
 8000948:	04300002 	.word	0x04300002

0800094c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08e      	sub	sp, #56	; 0x38
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a7b      	ldr	r2, [pc, #492]	; (8000b58 <HAL_ADC_MspInit+0x20c>)
 800096a:	4293      	cmp	r3, r2
 800096c:	f040 8091 	bne.w	8000a92 <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000970:	4b7a      	ldr	r3, [pc, #488]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000976:	4a79      	ldr	r2, [pc, #484]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000978:	f043 0320 	orr.w	r3, r3, #32
 800097c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000980:	4b76      	ldr	r3, [pc, #472]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000986:	f003 0320 	and.w	r3, r3, #32
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	4b73      	ldr	r3, [pc, #460]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000994:	4a71      	ldr	r2, [pc, #452]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000996:	f043 0304 	orr.w	r3, r3, #4
 800099a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800099e:	4b6f      	ldr	r3, [pc, #444]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009a4:	f003 0304 	and.w	r3, r3, #4
 80009a8:	61fb      	str	r3, [r7, #28]
 80009aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b6b      	ldr	r3, [pc, #428]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009b2:	4a6a      	ldr	r2, [pc, #424]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009bc:	4b67      	ldr	r3, [pc, #412]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	61bb      	str	r3, [r7, #24]
 80009c8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	4b64      	ldr	r3, [pc, #400]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009d0:	4a62      	ldr	r2, [pc, #392]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009d2:	f043 0302 	orr.w	r3, r3, #2
 80009d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80009da:	4b60      	ldr	r3, [pc, #384]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 80009dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80009e0:	f003 0302 	and.w	r3, r3, #2
 80009e4:	617b      	str	r3, [r7, #20]
 80009e6:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80009e8:	2333      	movs	r3, #51	; 0x33
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ec:	2303      	movs	r3, #3
 80009ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4859      	ldr	r0, [pc, #356]	; (8000b60 <HAL_ADC_MspInit+0x214>)
 80009fc:	f00b fc52 	bl	800c2a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8000a00:	23ce      	movs	r3, #206	; 0xce
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	4854      	ldr	r0, [pc, #336]	; (8000b64 <HAL_ADC_MspInit+0x218>)
 8000a14:	f00b fc46 	bl	800c2a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a18:	2303      	movs	r3, #3
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	484f      	ldr	r0, [pc, #316]	; (8000b68 <HAL_ADC_MspInit+0x21c>)
 8000a2c:	f00b fc3a 	bl	800c2a4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8000a30:	4b4e      	ldr	r3, [pc, #312]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a32:	4a4f      	ldr	r2, [pc, #316]	; (8000b70 <HAL_ADC_MspInit+0x224>)
 8000a34:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000a36:	4b4d      	ldr	r3, [pc, #308]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a38:	2209      	movs	r2, #9
 8000a3a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a3c:	4b4b      	ldr	r3, [pc, #300]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a42:	4b4a      	ldr	r3, [pc, #296]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000a48:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000a50:	4b46      	ldr	r3, [pc, #280]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a52:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000a56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000a58:	4b44      	ldr	r3, [pc, #272]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a5a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000a60:	4b42      	ldr	r3, [pc, #264]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000a66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000a68:	4b40      	ldr	r3, [pc, #256]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000a6e:	4b3f      	ldr	r3, [pc, #252]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000a74:	483d      	ldr	r0, [pc, #244]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a76:	f008 f8ef 	bl	8008c58 <HAL_DMA_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8000a80:	f003 f9a6 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a88:	64da      	str	r2, [r3, #76]	; 0x4c
 8000a8a:	4a38      	ldr	r2, [pc, #224]	; (8000b6c <HAL_ADC_MspInit+0x220>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000a90:	e05e      	b.n	8000b50 <HAL_ADC_MspInit+0x204>
  else if(adcHandle->Instance==ADC3)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a37      	ldr	r2, [pc, #220]	; (8000b74 <HAL_ADC_MspInit+0x228>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d159      	bne.n	8000b50 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000a9c:	4b2f      	ldr	r3, [pc, #188]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000a9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aa2:	4a2e      	ldr	r2, [pc, #184]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aac:	4b2b      	ldr	r3, [pc, #172]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000aae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b28      	ldr	r3, [pc, #160]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000abc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac0:	4a26      	ldr	r2, [pc, #152]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aca:	4b24      	ldr	r3, [pc, #144]	; (8000b5c <HAL_ADC_MspInit+0x210>)
 8000acc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad0:	f003 0304 	and.w	r3, r3, #4
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8000ad8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8000adc:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8000ae0:	f005 ffaa 	bl	8006a38 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8000ae4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000ae8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8000aec:	f005 ffa4 	bl	8006a38 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8000af0:	4b21      	ldr	r3, [pc, #132]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af2:	4a22      	ldr	r2, [pc, #136]	; (8000b7c <HAL_ADC_MspInit+0x230>)
 8000af4:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8000af6:	4b20      	ldr	r3, [pc, #128]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000af8:	2273      	movs	r2, #115	; 0x73
 8000afa:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000afc:	4b1e      	ldr	r3, [pc, #120]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b02:	4b1d      	ldr	r3, [pc, #116]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000b08:	4b1b      	ldr	r3, [pc, #108]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b0e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b10:	4b19      	ldr	r3, [pc, #100]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b16:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b18:	4b17      	ldr	r3, [pc, #92]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b1e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000b20:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b22:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b26:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000b28:	4b13      	ldr	r3, [pc, #76]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b2e:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000b34:	4810      	ldr	r0, [pc, #64]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b36:	f008 f88f 	bl	8008c58 <HAL_DMA_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8000b40:	f003 f946 	bl	8003dd0 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a0c      	ldr	r2, [pc, #48]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <HAL_ADC_MspInit+0x22c>)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40022000 	.word	0x40022000
 8000b5c:	58024400 	.word	0x58024400
 8000b60:	58020800 	.word	0x58020800
 8000b64:	58020000 	.word	0x58020000
 8000b68:	58020400 	.word	0x58020400
 8000b6c:	24000224 	.word	0x24000224
 8000b70:	40020010 	.word	0x40020010
 8000b74:	58026000 	.word	0x58026000
 8000b78:	2400029c 	.word	0x2400029c
 8000b7c:	40020028 	.word	0x40020028

08000b80 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DMA_HandleTypeDef hdma_dac1_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b86:	1d3b      	adds	r3, r7, #4
 8000b88:	2224      	movs	r2, #36	; 0x24
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f01a fe65 	bl	801b85c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b94:	4a12      	ldr	r2, [pc, #72]	; (8000be0 <MX_DAC1_Init+0x60>)
 8000b96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000b98:	4810      	ldr	r0, [pc, #64]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000b9a:	f007 fc57 	bl	800844c <HAL_DAC_Init>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ba4:	f003 f914 	bl	8003dd0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8000bac:	230a      	movs	r3, #10
 8000bae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000bbc:	1d3b      	adds	r3, r7, #4
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_DAC1_Init+0x5c>)
 8000bc4:	f007 fe72 	bl	80088ac <HAL_DAC_ConfigChannel>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8000bce:	f003 f8ff 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	24000314 	.word	0x24000314
 8000be0:	40007400 	.word	0x40007400

08000be4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b08a      	sub	sp, #40	; 0x28
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bec:	f107 0314 	add.w	r3, r7, #20
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]
 8000bf4:	605a      	str	r2, [r3, #4]
 8000bf6:	609a      	str	r2, [r3, #8]
 8000bf8:	60da      	str	r2, [r3, #12]
 8000bfa:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4a34      	ldr	r2, [pc, #208]	; (8000cd4 <HAL_DAC_MspInit+0xf0>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d161      	bne.n	8000cca <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c08:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c0c:	4a32      	ldr	r2, [pc, #200]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c0e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c12:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000c16:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c20:	613b      	str	r3, [r7, #16]
 8000c22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c24:	4b2c      	ldr	r3, [pc, #176]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	4a2b      	ldr	r2, [pc, #172]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c2c:	f043 0301 	orr.w	r3, r3, #1
 8000c30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c34:	4b28      	ldr	r3, [pc, #160]	; (8000cd8 <HAL_DAC_MspInit+0xf4>)
 8000c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3a:	f003 0301 	and.w	r3, r3, #1
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c42:	2310      	movs	r3, #16
 8000c44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c46:	2303      	movs	r3, #3
 8000c48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4821      	ldr	r0, [pc, #132]	; (8000cdc <HAL_DAC_MspInit+0xf8>)
 8000c56:	f00b fb25 	bl	800c2a4 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8000c5a:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c5c:	4a21      	ldr	r2, [pc, #132]	; (8000ce4 <HAL_DAC_MspInit+0x100>)
 8000c5e:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8000c60:	4b1f      	ldr	r3, [pc, #124]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c62:	2243      	movs	r2, #67	; 0x43
 8000c64:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c68:	2240      	movs	r2, #64	; 0x40
 8000c6a:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c7a:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c82:	4b17      	ldr	r3, [pc, #92]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c8c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c90:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000c92:	4b13      	ldr	r3, [pc, #76]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c98:	4b11      	ldr	r3, [pc, #68]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8000c9e:	4810      	ldr	r0, [pc, #64]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000ca0:	f007 ffda 	bl	8008c58 <HAL_DMA_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8000caa:	f003 f891 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4a0b      	ldr	r2, [pc, #44]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb2:	609a      	str	r2, [r3, #8]
 8000cb4:	4a0a      	ldr	r2, [pc, #40]	; (8000ce0 <HAL_DAC_MspInit+0xfc>)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2105      	movs	r1, #5
 8000cbe:	2036      	movs	r0, #54	; 0x36
 8000cc0:	f007 fb9c 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000cc4:	2036      	movs	r0, #54	; 0x36
 8000cc6:	f007 fbb3 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40007400 	.word	0x40007400
 8000cd8:	58024400 	.word	0x58024400
 8000cdc:	58020000 	.word	0x58020000
 8000ce0:	24000328 	.word	0x24000328
 8000ce4:	40020088 	.word	0x40020088

08000ce8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cee:	4b29      	ldr	r3, [pc, #164]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000cf4:	4a27      	ldr	r2, [pc, #156]	; (8000d94 <MX_DMA_Init+0xac>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000cfe:	4b25      	ldr	r3, [pc, #148]	; (8000d94 <MX_DMA_Init+0xac>)
 8000d00:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	2105      	movs	r1, #5
 8000d10:	200b      	movs	r0, #11
 8000d12:	f007 fb73 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d16:	200b      	movs	r0, #11
 8000d18:	f007 fb8a 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2105      	movs	r1, #5
 8000d20:	200c      	movs	r0, #12
 8000d22:	f007 fb6b 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000d26:	200c      	movs	r0, #12
 8000d28:	f007 fb82 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	2105      	movs	r1, #5
 8000d30:	200d      	movs	r0, #13
 8000d32:	f007 fb63 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000d36:	200d      	movs	r0, #13
 8000d38:	f007 fb7a 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2105      	movs	r1, #5
 8000d40:	200e      	movs	r0, #14
 8000d42:	f007 fb5b 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000d46:	200e      	movs	r0, #14
 8000d48:	f007 fb72 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	2105      	movs	r1, #5
 8000d50:	200f      	movs	r0, #15
 8000d52:	f007 fb53 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000d56:	200f      	movs	r0, #15
 8000d58:	f007 fb6a 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2105      	movs	r1, #5
 8000d60:	2010      	movs	r0, #16
 8000d62:	f007 fb4b 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000d66:	2010      	movs	r0, #16
 8000d68:	f007 fb62 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2105      	movs	r1, #5
 8000d70:	2011      	movs	r0, #17
 8000d72:	f007 fb43 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000d76:	2011      	movs	r0, #17
 8000d78:	f007 fb5a 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2105      	movs	r1, #5
 8000d80:	202f      	movs	r0, #47	; 0x2f
 8000d82:	f007 fb3b 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000d86:	202f      	movs	r0, #47	; 0x2f
 8000d88:	f007 fb52 	bl	8008430 <HAL_NVIC_EnableIRQ>

}
 8000d8c:	bf00      	nop
 8000d8e:	3708      	adds	r7, #8
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	58024400 	.word	0x58024400

08000d98 <EE_Init>:
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */

uint16_t EE_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	; 0x48
 8000d9c:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000d9e:	2306      	movs	r3, #6
 8000da0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8000da4:	2306      	movs	r3, #6
 8000da6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  uint16_t VarIdx = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000db0:	2300      	movs	r3, #0
 8000db2:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000db4:	2300      	movs	r3, #0
 8000db6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t x = -1;
 8000db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dbc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	637b      	str	r3, [r7, #52]	; 0x34
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2220      	movs	r2, #32
 8000dc8:	2100      	movs	r1, #0
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f01a fd46 	bl	801b85c <memset>

  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000dd0:	4bb7      	ldr	r3, [pc, #732]	; (80010b0 <EE_Init+0x318>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000dd8:	4bb6      	ldr	r3, [pc, #728]	; (80010b4 <EE_Init+0x31c>)
 8000dda:	881b      	ldrh	r3, [r3, #0]
 8000ddc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000de0:	2300      	movs	r3, #0
 8000de2:	623b      	str	r3, [r7, #32]
  pEraseInit.Banks = FLASH_BANK_2 ;
 8000de4:	2302      	movs	r3, #2
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Sector = PAGE0_ID;
 8000de8:	2306      	movs	r3, #6
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.NbSectors = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000df0:	2320      	movs	r3, #32
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30

  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 8000df4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8000df8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d00d      	beq.n	8000e1c <EE_Init+0x84>
 8000e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e04:	f280 8430 	bge.w	8001668 <EE_Init+0x8d0>
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	f000 82ca 	beq.w	80013a2 <EE_Init+0x60a>
 8000e0e:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000e12:	4293      	cmp	r3, r2
 8000e14:	f000 810f 	beq.w	8001036 <EE_Init+0x29e>
 8000e18:	f000 bc26 	b.w	8001668 <EE_Init+0x8d0>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 8000e1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d154      	bne.n	8000ece <EE_Init+0x136>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000e24:	48a2      	ldr	r0, [pc, #648]	; (80010b0 <EE_Init+0x318>)
 8000e26:	f000 fc45 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	f040 8428 	bne.w	8001682 <EE_Init+0x8ea>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000e32:	f3bf 8f4f 	dsb	sy
}
 8000e36:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e38:	f3bf 8f6f 	isb	sy
}
 8000e3c:	bf00      	nop
__STATIC_FORCEINLINE void SCB_DisableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000e3e:	4b9e      	ldr	r3, [pc, #632]	; (80010b8 <EE_Init+0x320>)
 8000e40:	695b      	ldr	r3, [r3, #20]
 8000e42:	4a9d      	ldr	r2, [pc, #628]	; (80010b8 <EE_Init+0x320>)
 8000e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000e48:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e4a:	4b9b      	ldr	r3, [pc, #620]	; (80010b8 <EE_Init+0x320>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e52:	f3bf 8f4f 	dsb	sy
}
 8000e56:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e58:	f3bf 8f6f 	isb	sy
}
 8000e5c:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000e5e:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000e60:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4611      	mov	r1, r2
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f00b f878 	bl	800bf60 <HAL_FLASHEx_Erase>
 8000e70:	4603      	mov	r3, r0
 8000e72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000e76:	4b90      	ldr	r3, [pc, #576]	; (80010b8 <EE_Init+0x320>)
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d11b      	bne.n	8000eba <EE_Init+0x122>
  __ASM volatile ("dsb 0xF":::"memory");
 8000e82:	f3bf 8f4f 	dsb	sy
}
 8000e86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e88:	f3bf 8f6f 	isb	sy
}
 8000e8c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000e8e:	4b8a      	ldr	r3, [pc, #552]	; (80010b8 <EE_Init+0x320>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000e96:	f3bf 8f4f 	dsb	sy
}
 8000e9a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000e9c:	f3bf 8f6f 	isb	sy
}
 8000ea0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000ea2:	4b85      	ldr	r3, [pc, #532]	; (80010b8 <EE_Init+0x320>)
 8000ea4:	695b      	ldr	r3, [r3, #20]
 8000ea6:	4a84      	ldr	r2, [pc, #528]	; (80010b8 <EE_Init+0x320>)
 8000ea8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000eac:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000eae:	f3bf 8f4f 	dsb	sy
}
 8000eb2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eb4:	f3bf 8f6f 	isb	sy
}
 8000eb8:	e000      	b.n	8000ebc <EE_Init+0x124>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000eba:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000ebc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	f000 83de 	beq.w	8001682 <EE_Init+0x8ea>
          {
            return FlashStatus;
 8000ec6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	e3e1      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000ece:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000ed2:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	f040 809f 	bne.w	800101a <EE_Init+0x282>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000edc:	4874      	ldr	r0, [pc, #464]	; (80010b0 <EE_Init+0x318>)
 8000ede:	f000 fbe9 	bl	80016b4 <EE_VerifyPageFullyErased>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d14c      	bne.n	8000f82 <EE_Init+0x1ea>
  __ASM volatile ("dsb 0xF":::"memory");
 8000ee8:	f3bf 8f4f 	dsb	sy
}
 8000eec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000eee:	f3bf 8f6f 	isb	sy
}
 8000ef2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000ef4:	4b70      	ldr	r3, [pc, #448]	; (80010b8 <EE_Init+0x320>)
 8000ef6:	695b      	ldr	r3, [r3, #20]
 8000ef8:	4a6f      	ldr	r2, [pc, #444]	; (80010b8 <EE_Init+0x320>)
 8000efa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000efe:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f00:	4b6d      	ldr	r3, [pc, #436]	; (80010b8 <EE_Init+0x320>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f08:	f3bf 8f4f 	dsb	sy
}
 8000f0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f0e:	f3bf 8f6f 	isb	sy
}
 8000f12:	bf00      	nop
}
 8000f14:	bf00      	nop
        {
		  SCB_DisableICache();
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000f16:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8000f1a:	f107 0320 	add.w	r3, r7, #32
 8000f1e:	4611      	mov	r1, r2
 8000f20:	4618      	mov	r0, r3
 8000f22:	f00b f81d 	bl	800bf60 <HAL_FLASHEx_Erase>
 8000f26:	4603      	mov	r3, r0
 8000f28:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f2c:	4b62      	ldr	r3, [pc, #392]	; (80010b8 <EE_Init+0x320>)
 8000f2e:	695b      	ldr	r3, [r3, #20]
 8000f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d11b      	bne.n	8000f70 <EE_Init+0x1d8>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f38:	f3bf 8f4f 	dsb	sy
}
 8000f3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f3e:	f3bf 8f6f 	isb	sy
}
 8000f42:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f44:	4b5c      	ldr	r3, [pc, #368]	; (80010b8 <EE_Init+0x320>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000f4c:	f3bf 8f4f 	dsb	sy
}
 8000f50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f52:	f3bf 8f6f 	isb	sy
}
 8000f56:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000f58:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <EE_Init+0x320>)
 8000f5a:	695b      	ldr	r3, [r3, #20]
 8000f5c:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <EE_Init+0x320>)
 8000f5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f62:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000f64:	f3bf 8f4f 	dsb	sy
}
 8000f68:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f6a:	f3bf 8f6f 	isb	sy
}
 8000f6e:	e000      	b.n	8000f72 <EE_Init+0x1da>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000f70:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000f72:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d003      	beq.n	8000f82 <EE_Init+0x1ea>
          {
            return FlashStatus;
 8000f7a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	e387      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 8000f82:	f3bf 8f4f 	dsb	sy
}
 8000f86:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f88:	f3bf 8f6f 	isb	sy
}
 8000f8c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8000f8e:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <EE_Init+0x320>)
 8000f90:	695b      	ldr	r3, [r3, #20]
 8000f92:	4a49      	ldr	r2, [pc, #292]	; (80010b8 <EE_Init+0x320>)
 8000f94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000f98:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000f9a:	4b47      	ldr	r3, [pc, #284]	; (80010b8 <EE_Init+0x320>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fa2:	f3bf 8f4f 	dsb	sy
}
 8000fa6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fa8:	f3bf 8f6f 	isb	sy
}
 8000fac:	bf00      	nop
}
 8000fae:	bf00      	nop
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 8000fb0:	463b      	mov	r3, r7
 8000fb2:	461a      	mov	r2, r3
 8000fb4:	493f      	ldr	r1, [pc, #252]	; (80010b4 <EE_Init+0x31c>)
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f00a fca4 	bl	800b904 <HAL_FLASH_Program>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000fc2:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <EE_Init+0x320>)
 8000fc4:	695b      	ldr	r3, [r3, #20]
 8000fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d11b      	bne.n	8001006 <EE_Init+0x26e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000fce:	f3bf 8f4f 	dsb	sy
}
 8000fd2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fd4:	f3bf 8f6f 	isb	sy
}
 8000fd8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <EE_Init+0x320>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000fe2:	f3bf 8f4f 	dsb	sy
}
 8000fe6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000fe8:	f3bf 8f6f 	isb	sy
}
 8000fec:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000fee:	4b32      	ldr	r3, [pc, #200]	; (80010b8 <EE_Init+0x320>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	4a31      	ldr	r2, [pc, #196]	; (80010b8 <EE_Init+0x320>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ffa:	f3bf 8f4f 	dsb	sy
}
 8000ffe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001000:	f3bf 8f6f 	isb	sy
}
 8001004:	e000      	b.n	8001008 <EE_Init+0x270>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001006:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001008:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800100c:	2b00      	cmp	r3, #0
 800100e:	f000 8338 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 8001012:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001016:	b29b      	uxth	r3, r3
 8001018:	e33b      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800101a:	f000 fbdf 	bl	80017dc <EE_Format>
 800101e:	4603      	mov	r3, r0
 8001020:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001024:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 832a 	beq.w	8001682 <EE_Init+0x8ea>
        {
          return FlashStatus;
 800102e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001032:	b29b      	uxth	r3, r3
 8001034:	e32d      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 8001036:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800103a:	2b00      	cmp	r3, #0
 800103c:	f040 80f5 	bne.w	800122a <EE_Init+0x492>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001040:	2300      	movs	r3, #0
 8001042:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001046:	e044      	b.n	80010d2 <EE_Init+0x33a>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <EE_Init+0x324>)
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	b29a      	uxth	r2, r3
 800104e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001052:	491b      	ldr	r1, [pc, #108]	; (80010c0 <EE_Init+0x328>)
 8001054:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001058:	429a      	cmp	r2, r3
 800105a:	d103      	bne.n	8001064 <EE_Init+0x2cc>
          {
            x = VarIdx;
 800105c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001060:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 8001064:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8001068:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 800106c:	429a      	cmp	r2, r3
 800106e:	d02b      	beq.n	80010c8 <EE_Init+0x330>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001070:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <EE_Init+0x328>)
 8001076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800107a:	4912      	ldr	r1, [pc, #72]	; (80010c4 <EE_Init+0x32c>)
 800107c:	4618      	mov	r0, r3
 800107e:	f000 fb43 	bl	8001708 <EE_ReadVariable>
 8001082:	4603      	mov	r3, r0
 8001084:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 8001086:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8001088:	2b01      	cmp	r3, #1
 800108a:	d01d      	beq.n	80010c8 <EE_Init+0x330>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 800108c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001090:	4a0b      	ldr	r2, [pc, #44]	; (80010c0 <EE_Init+0x328>)
 8001092:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001096:	4a0b      	ldr	r2, [pc, #44]	; (80010c4 <EE_Init+0x32c>)
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	4611      	mov	r1, r2
 800109c:	4618      	mov	r0, r3
 800109e:	f000 fcf7 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80010a2:	4603      	mov	r3, r0
 80010a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80010a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d00d      	beq.n	80010c8 <EE_Init+0x330>
              {
                return EepromStatus;
 80010ac:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80010ae:	e2f0      	b.n	8001692 <EE_Init+0x8fa>
 80010b0:	081c0000 	.word	0x081c0000
 80010b4:	081e0000 	.word	0x081e0000
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	081c0006 	.word	0x081c0006
 80010c0:	24000000 	.word	0x24000000
 80010c4:	240003a0 	.word	0x240003a0
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80010c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010cc:	3301      	adds	r3, #1
 80010ce:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80010d2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80010d6:	2b1e      	cmp	r3, #30
 80010d8:	d9b6      	bls.n	8001048 <EE_Init+0x2b0>
  __ASM volatile ("dsb 0xF":::"memory");
 80010da:	f3bf 8f4f 	dsb	sy
}
 80010de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80010e0:	f3bf 8f6f 	isb	sy
}
 80010e4:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80010e6:	4bb8      	ldr	r3, [pc, #736]	; (80013c8 <EE_Init+0x630>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4ab7      	ldr	r2, [pc, #732]	; (80013c8 <EE_Init+0x630>)
 80010ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80010f0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80010f2:	4bb5      	ldr	r3, [pc, #724]	; (80013c8 <EE_Init+0x630>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80010fa:	f3bf 8f4f 	dsb	sy
}
 80010fe:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001100:	f3bf 8f6f 	isb	sy
}
 8001104:	bf00      	nop
}
 8001106:	bf00      	nop
            }
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 8001108:	463b      	mov	r3, r7
 800110a:	461a      	mov	r2, r3
 800110c:	49af      	ldr	r1, [pc, #700]	; (80013cc <EE_Init+0x634>)
 800110e:	2001      	movs	r0, #1
 8001110:	f00a fbf8 	bl	800b904 <HAL_FLASH_Program>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800111a:	4bab      	ldr	r3, [pc, #684]	; (80013c8 <EE_Init+0x630>)
 800111c:	695b      	ldr	r3, [r3, #20]
 800111e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001122:	2b00      	cmp	r3, #0
 8001124:	d11b      	bne.n	800115e <EE_Init+0x3c6>
  __ASM volatile ("dsb 0xF":::"memory");
 8001126:	f3bf 8f4f 	dsb	sy
}
 800112a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800112c:	f3bf 8f6f 	isb	sy
}
 8001130:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001132:	4ba5      	ldr	r3, [pc, #660]	; (80013c8 <EE_Init+0x630>)
 8001134:	2200      	movs	r2, #0
 8001136:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800113a:	f3bf 8f4f 	dsb	sy
}
 800113e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001140:	f3bf 8f6f 	isb	sy
}
 8001144:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001146:	4ba0      	ldr	r3, [pc, #640]	; (80013c8 <EE_Init+0x630>)
 8001148:	695b      	ldr	r3, [r3, #20]
 800114a:	4a9f      	ldr	r2, [pc, #636]	; (80013c8 <EE_Init+0x630>)
 800114c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001150:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001152:	f3bf 8f4f 	dsb	sy
}
 8001156:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001158:	f3bf 8f6f 	isb	sy
}
 800115c:	e000      	b.n	8001160 <EE_Init+0x3c8>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800115e:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001160:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001164:	2b00      	cmp	r3, #0
 8001166:	d003      	beq.n	8001170 <EE_Init+0x3d8>
        {
          return FlashStatus;
 8001168:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800116c:	b29b      	uxth	r3, r3
 800116e:	e290      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE1_ID;
 8001170:	2307      	movs	r3, #7
 8001172:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 8001174:	2302      	movs	r3, #2
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001178:	2301      	movs	r3, #1
 800117a:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800117c:	2320      	movs	r3, #32
 800117e:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001180:	4893      	ldr	r0, [pc, #588]	; (80013d0 <EE_Init+0x638>)
 8001182:	f000 fa97 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	f040 827c 	bne.w	8001686 <EE_Init+0x8ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800118e:	f3bf 8f4f 	dsb	sy
}
 8001192:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001194:	f3bf 8f6f 	isb	sy
}
 8001198:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800119a:	4b8b      	ldr	r3, [pc, #556]	; (80013c8 <EE_Init+0x630>)
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4a8a      	ldr	r2, [pc, #552]	; (80013c8 <EE_Init+0x630>)
 80011a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80011a4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011a6:	4b88      	ldr	r3, [pc, #544]	; (80013c8 <EE_Init+0x630>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011ae:	f3bf 8f4f 	dsb	sy
}
 80011b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011b4:	f3bf 8f6f 	isb	sy
}
 80011b8:	bf00      	nop
}
 80011ba:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80011bc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4611      	mov	r1, r2
 80011c6:	4618      	mov	r0, r3
 80011c8:	f00a feca 	bl	800bf60 <HAL_FLASHEx_Erase>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d2:	4b7d      	ldr	r3, [pc, #500]	; (80013c8 <EE_Init+0x630>)
 80011d4:	695b      	ldr	r3, [r3, #20]
 80011d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d11b      	bne.n	8001216 <EE_Init+0x47e>
  __ASM volatile ("dsb 0xF":::"memory");
 80011de:	f3bf 8f4f 	dsb	sy
}
 80011e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e4:	f3bf 8f6f 	isb	sy
}
 80011e8:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ea:	4b77      	ldr	r3, [pc, #476]	; (80013c8 <EE_Init+0x630>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f2:	f3bf 8f4f 	dsb	sy
}
 80011f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011f8:	f3bf 8f6f 	isb	sy
}
 80011fc:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80011fe:	4b72      	ldr	r3, [pc, #456]	; (80013c8 <EE_Init+0x630>)
 8001200:	695b      	ldr	r3, [r3, #20]
 8001202:	4a71      	ldr	r2, [pc, #452]	; (80013c8 <EE_Init+0x630>)
 8001204:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001208:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120a:	f3bf 8f4f 	dsb	sy
}
 800120e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001210:	f3bf 8f6f 	isb	sy
}
 8001214:	e000      	b.n	8001218 <EE_Init+0x480>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001216:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001218:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800121c:	2b00      	cmp	r3, #0
 800121e:	f000 8232 	beq.w	8001686 <EE_Init+0x8ee>
          {
            return FlashStatus;
 8001222:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001226:	b29b      	uxth	r3, r3
 8001228:	e233      	b.n	8001692 <EE_Init+0x8fa>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800122a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800122e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001232:	4293      	cmp	r3, r2
 8001234:	f040 80a7 	bne.w	8001386 <EE_Init+0x5ee>
      {
        pEraseInit.Sector = PAGE1_ID;
 8001238:	2307      	movs	r3, #7
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 800123c:	2302      	movs	r3, #2
 800123e:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 8001240:	2301      	movs	r3, #1
 8001242:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001244:	2320      	movs	r3, #32
 8001246:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001248:	4861      	ldr	r0, [pc, #388]	; (80013d0 <EE_Init+0x638>)
 800124a:	f000 fa33 	bl	80016b4 <EE_VerifyPageFullyErased>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d14c      	bne.n	80012ee <EE_Init+0x556>
  __ASM volatile ("dsb 0xF":::"memory");
 8001254:	f3bf 8f4f 	dsb	sy
}
 8001258:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800125a:	f3bf 8f6f 	isb	sy
}
 800125e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001260:	4b59      	ldr	r3, [pc, #356]	; (80013c8 <EE_Init+0x630>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <EE_Init+0x630>)
 8001266:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800126a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800126c:	4b56      	ldr	r3, [pc, #344]	; (80013c8 <EE_Init+0x630>)
 800126e:	2200      	movs	r2, #0
 8001270:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001274:	f3bf 8f4f 	dsb	sy
}
 8001278:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800127a:	f3bf 8f6f 	isb	sy
}
 800127e:	bf00      	nop
}
 8001280:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001282:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4611      	mov	r1, r2
 800128c:	4618      	mov	r0, r3
 800128e:	f00a fe67 	bl	800bf60 <HAL_FLASHEx_Erase>
 8001292:	4603      	mov	r3, r0
 8001294:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001298:	4b4b      	ldr	r3, [pc, #300]	; (80013c8 <EE_Init+0x630>)
 800129a:	695b      	ldr	r3, [r3, #20]
 800129c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <EE_Init+0x544>
  __ASM volatile ("dsb 0xF":::"memory");
 80012a4:	f3bf 8f4f 	dsb	sy
}
 80012a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012aa:	f3bf 8f6f 	isb	sy
}
 80012ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80012b0:	4b45      	ldr	r3, [pc, #276]	; (80013c8 <EE_Init+0x630>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80012b8:	f3bf 8f4f 	dsb	sy
}
 80012bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012be:	f3bf 8f6f 	isb	sy
}
 80012c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80012c4:	4b40      	ldr	r3, [pc, #256]	; (80013c8 <EE_Init+0x630>)
 80012c6:	695b      	ldr	r3, [r3, #20]
 80012c8:	4a3f      	ldr	r2, [pc, #252]	; (80013c8 <EE_Init+0x630>)
 80012ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80012d0:	f3bf 8f4f 	dsb	sy
}
 80012d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012d6:	f3bf 8f6f 	isb	sy
}
 80012da:	e000      	b.n	80012de <EE_Init+0x546>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80012dc:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80012de:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <EE_Init+0x556>
          {
            return FlashStatus;
 80012e6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	e1d1      	b.n	8001692 <EE_Init+0x8fa>
  __ASM volatile ("dsb 0xF":::"memory");
 80012ee:	f3bf 8f4f 	dsb	sy
}
 80012f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012f4:	f3bf 8f6f 	isb	sy
}
 80012f8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80012fa:	4b33      	ldr	r3, [pc, #204]	; (80013c8 <EE_Init+0x630>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a32      	ldr	r2, [pc, #200]	; (80013c8 <EE_Init+0x630>)
 8001300:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001304:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001306:	4b30      	ldr	r3, [pc, #192]	; (80013c8 <EE_Init+0x630>)
 8001308:	2200      	movs	r2, #0
 800130a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800130e:	f3bf 8f4f 	dsb	sy
}
 8001312:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001314:	f3bf 8f6f 	isb	sy
}
 8001318:	bf00      	nop
}
 800131a:	bf00      	nop
          }
        }
        /* Mark Page0 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS, ((uint32_t)valid));
 800131c:	463b      	mov	r3, r7
 800131e:	461a      	mov	r2, r3
 8001320:	492a      	ldr	r1, [pc, #168]	; (80013cc <EE_Init+0x634>)
 8001322:	2001      	movs	r0, #1
 8001324:	f00a faee 	bl	800b904 <HAL_FLASH_Program>
 8001328:	4603      	mov	r3, r0
 800132a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800132e:	4b26      	ldr	r3, [pc, #152]	; (80013c8 <EE_Init+0x630>)
 8001330:	695b      	ldr	r3, [r3, #20]
 8001332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d11b      	bne.n	8001372 <EE_Init+0x5da>
  __ASM volatile ("dsb 0xF":::"memory");
 800133a:	f3bf 8f4f 	dsb	sy
}
 800133e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001340:	f3bf 8f6f 	isb	sy
}
 8001344:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001346:	4b20      	ldr	r3, [pc, #128]	; (80013c8 <EE_Init+0x630>)
 8001348:	2200      	movs	r2, #0
 800134a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800134e:	f3bf 8f4f 	dsb	sy
}
 8001352:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001354:	f3bf 8f6f 	isb	sy
}
 8001358:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <EE_Init+0x630>)
 800135c:	695b      	ldr	r3, [r3, #20]
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <EE_Init+0x630>)
 8001360:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001364:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001366:	f3bf 8f4f 	dsb	sy
}
 800136a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800136c:	f3bf 8f6f 	isb	sy
}
 8001370:	e000      	b.n	8001374 <EE_Init+0x5dc>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001372:	bf00      	nop
		SCB_EnableICache();
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001374:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8184 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800137e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001382:	b29b      	uxth	r3, r3
 8001384:	e185      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 8001386:	f000 fa29 	bl	80017dc <EE_Format>
 800138a:	4603      	mov	r3, r0
 800138c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8001390:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001394:	2b00      	cmp	r3, #0
 8001396:	f000 8176 	beq.w	8001686 <EE_Init+0x8ee>
        {
          return FlashStatus;
 800139a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800139e:	b29b      	uxth	r3, r3
 80013a0:	e177      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 80013a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d114      	bne.n	80013d4 <EE_Init+0x63c>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80013aa:	f000 fa17 	bl	80017dc <EE_Format>
 80013ae:	4603      	mov	r3, r0
 80013b0:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80013b4:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 8166 	beq.w	800168a <EE_Init+0x8f2>
        {
          return FlashStatus;
 80013be:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	e165      	b.n	8001692 <EE_Init+0x8fa>
 80013c6:	bf00      	nop
 80013c8:	e000ed00 	.word	0xe000ed00
 80013cc:	081c0000 	.word	0x081c0000
 80013d0:	081e0000 	.word	0x081e0000
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 80013d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80013d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013dc:	4293      	cmp	r3, r2
 80013de:	d15c      	bne.n	800149a <EE_Init+0x702>
      {
        pEraseInit.Sector = PAGE1_ID;
 80013e0:	2307      	movs	r3, #7
 80013e2:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80013e4:	2302      	movs	r3, #2
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80013e8:	2301      	movs	r3, #1
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80013ec:	2320      	movs	r3, #32
 80013ee:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80013f0:	48aa      	ldr	r0, [pc, #680]	; (800169c <EE_Init+0x904>)
 80013f2:	f000 f95f 	bl	80016b4 <EE_VerifyPageFullyErased>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	f040 8146 	bne.w	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80013fe:	f3bf 8f4f 	dsb	sy
}
 8001402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001404:	f3bf 8f6f 	isb	sy
}
 8001408:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 800140a:	4ba5      	ldr	r3, [pc, #660]	; (80016a0 <EE_Init+0x908>)
 800140c:	695b      	ldr	r3, [r3, #20]
 800140e:	4aa4      	ldr	r2, [pc, #656]	; (80016a0 <EE_Init+0x908>)
 8001410:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001414:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001416:	4ba2      	ldr	r3, [pc, #648]	; (80016a0 <EE_Init+0x908>)
 8001418:	2200      	movs	r2, #0
 800141a:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800141e:	f3bf 8f4f 	dsb	sy
}
 8001422:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001424:	f3bf 8f6f 	isb	sy
}
 8001428:	bf00      	nop
}
 800142a:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800142c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001430:	f107 0320 	add.w	r3, r7, #32
 8001434:	4611      	mov	r1, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f00a fd92 	bl	800bf60 <HAL_FLASHEx_Erase>
 800143c:	4603      	mov	r3, r0
 800143e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001442:	4b97      	ldr	r3, [pc, #604]	; (80016a0 <EE_Init+0x908>)
 8001444:	695b      	ldr	r3, [r3, #20]
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d11b      	bne.n	8001486 <EE_Init+0x6ee>
  __ASM volatile ("dsb 0xF":::"memory");
 800144e:	f3bf 8f4f 	dsb	sy
}
 8001452:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001454:	f3bf 8f6f 	isb	sy
}
 8001458:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800145a:	4b91      	ldr	r3, [pc, #580]	; (80016a0 <EE_Init+0x908>)
 800145c:	2200      	movs	r2, #0
 800145e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001462:	f3bf 8f4f 	dsb	sy
}
 8001466:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001468:	f3bf 8f6f 	isb	sy
}
 800146c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800146e:	4b8c      	ldr	r3, [pc, #560]	; (80016a0 <EE_Init+0x908>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	4a8b      	ldr	r2, [pc, #556]	; (80016a0 <EE_Init+0x908>)
 8001474:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001478:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800147a:	f3bf 8f4f 	dsb	sy
}
 800147e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001480:	f3bf 8f6f 	isb	sy
}
 8001484:	e000      	b.n	8001488 <EE_Init+0x6f0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001486:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001488:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800148c:	2b00      	cmp	r3, #0
 800148e:	f000 80fc 	beq.w	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001492:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001496:	b29b      	uxth	r3, r3
 8001498:	e0fb      	b.n	8001692 <EE_Init+0x8fa>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800149a:	2300      	movs	r3, #0
 800149c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80014a0:	e038      	b.n	8001514 <EE_Init+0x77c>
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80014a2:	4b80      	ldr	r3, [pc, #512]	; (80016a4 <EE_Init+0x90c>)
 80014a4:	881b      	ldrh	r3, [r3, #0]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ac:	497e      	ldr	r1, [pc, #504]	; (80016a8 <EE_Init+0x910>)
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	429a      	cmp	r2, r3
 80014b4:	d103      	bne.n	80014be <EE_Init+0x726>
          {
            x = VarIdx;
 80014b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ba:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
          }
          if (VarIdx != x)
 80014be:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80014c2:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d01f      	beq.n	800150a <EE_Init+0x772>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80014ca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ce:	4a76      	ldr	r2, [pc, #472]	; (80016a8 <EE_Init+0x910>)
 80014d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014d4:	4975      	ldr	r1, [pc, #468]	; (80016ac <EE_Init+0x914>)
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 f916 	bl	8001708 <EE_ReadVariable>
 80014dc:	4603      	mov	r3, r0
 80014de:	87bb      	strh	r3, [r7, #60]	; 0x3c
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80014e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80014e2:	2b01      	cmp	r3, #1
 80014e4:	d011      	beq.n	800150a <EE_Init+0x772>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80014e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80014ea:	4a6f      	ldr	r2, [pc, #444]	; (80016a8 <EE_Init+0x910>)
 80014ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014f0:	4a6e      	ldr	r2, [pc, #440]	; (80016ac <EE_Init+0x914>)
 80014f2:	8812      	ldrh	r2, [r2, #0]
 80014f4:	4611      	mov	r1, r2
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 faca 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80014fc:	4603      	mov	r3, r0
 80014fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 8001500:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <EE_Init+0x772>
              {
                return EepromStatus;
 8001506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001508:	e0c3      	b.n	8001692 <EE_Init+0x8fa>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 800150a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800150e:	3301      	adds	r3, #1
 8001510:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8001514:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001518:	2b1e      	cmp	r3, #30
 800151a:	d9c2      	bls.n	80014a2 <EE_Init+0x70a>
  __ASM volatile ("dsb 0xF":::"memory");
 800151c:	f3bf 8f4f 	dsb	sy
}
 8001520:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001522:	f3bf 8f6f 	isb	sy
}
 8001526:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001528:	4b5d      	ldr	r3, [pc, #372]	; (80016a0 <EE_Init+0x908>)
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	4a5c      	ldr	r2, [pc, #368]	; (80016a0 <EE_Init+0x908>)
 800152e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001532:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001534:	4b5a      	ldr	r3, [pc, #360]	; (80016a0 <EE_Init+0x908>)
 8001536:	2200      	movs	r2, #0
 8001538:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800153c:	f3bf 8f4f 	dsb	sy
}
 8001540:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001542:	f3bf 8f6f 	isb	sy
}
 8001546:	bf00      	nop
}
 8001548:	bf00      	nop
            }
          }
        }
        /* Mark Page1 as valid */
		SCB_DisableICache();
        FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE1_BASE_ADDRESS, ((uint32_t)valid));
 800154a:	463b      	mov	r3, r7
 800154c:	461a      	mov	r2, r3
 800154e:	4953      	ldr	r1, [pc, #332]	; (800169c <EE_Init+0x904>)
 8001550:	2001      	movs	r0, #1
 8001552:	f00a f9d7 	bl	800b904 <HAL_FLASH_Program>
 8001556:	4603      	mov	r3, r0
 8001558:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800155c:	4b50      	ldr	r3, [pc, #320]	; (80016a0 <EE_Init+0x908>)
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d11b      	bne.n	80015a0 <EE_Init+0x808>
  __ASM volatile ("dsb 0xF":::"memory");
 8001568:	f3bf 8f4f 	dsb	sy
}
 800156c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156e:	f3bf 8f6f 	isb	sy
}
 8001572:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001574:	4b4a      	ldr	r3, [pc, #296]	; (80016a0 <EE_Init+0x908>)
 8001576:	2200      	movs	r2, #0
 8001578:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800157c:	f3bf 8f4f 	dsb	sy
}
 8001580:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001582:	f3bf 8f6f 	isb	sy
}
 8001586:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001588:	4b45      	ldr	r3, [pc, #276]	; (80016a0 <EE_Init+0x908>)
 800158a:	695b      	ldr	r3, [r3, #20]
 800158c:	4a44      	ldr	r2, [pc, #272]	; (80016a0 <EE_Init+0x908>)
 800158e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001592:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001594:	f3bf 8f4f 	dsb	sy
}
 8001598:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800159a:	f3bf 8f6f 	isb	sy
}
 800159e:	e000      	b.n	80015a2 <EE_Init+0x80a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80015a0:	bf00      	nop
		SCB_EnableICache();

        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80015a2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d003      	beq.n	80015b2 <EE_Init+0x81a>
        {
          return FlashStatus;
 80015aa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	e06f      	b.n	8001692 <EE_Init+0x8fa>
        }
        pEraseInit.Sector = PAGE0_ID;
 80015b2:	2306      	movs	r3, #6
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
        pEraseInit.Banks = FLASH_BANK_2 ;
 80015b6:	2302      	movs	r3, #2
 80015b8:	627b      	str	r3, [r7, #36]	; 0x24
        pEraseInit.NbSectors = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80015be:	2320      	movs	r3, #32
 80015c0:	633b      	str	r3, [r7, #48]	; 0x30
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80015c2:	483b      	ldr	r0, [pc, #236]	; (80016b0 <EE_Init+0x918>)
 80015c4:	f000 f876 	bl	80016b4 <EE_VerifyPageFullyErased>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d15d      	bne.n	800168a <EE_Init+0x8f2>
  __ASM volatile ("dsb 0xF":::"memory");
 80015ce:	f3bf 8f4f 	dsb	sy
}
 80015d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015d4:	f3bf 8f6f 	isb	sy
}
 80015d8:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80015da:	4b31      	ldr	r3, [pc, #196]	; (80016a0 <EE_Init+0x908>)
 80015dc:	695b      	ldr	r3, [r3, #20]
 80015de:	4a30      	ldr	r2, [pc, #192]	; (80016a0 <EE_Init+0x908>)
 80015e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80015e4:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80015e6:	4b2e      	ldr	r3, [pc, #184]	; (80016a0 <EE_Init+0x908>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80015ee:	f3bf 8f4f 	dsb	sy
}
 80015f2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015f4:	f3bf 8f6f 	isb	sy
}
 80015f8:	bf00      	nop
}
 80015fa:	bf00      	nop
        {
          SCB_DisableICache();
		  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80015fc:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4611      	mov	r1, r2
 8001606:	4618      	mov	r0, r3
 8001608:	f00a fcaa 	bl	800bf60 <HAL_FLASHEx_Erase>
 800160c:	4603      	mov	r3, r0
 800160e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001612:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <EE_Init+0x908>)
 8001614:	695b      	ldr	r3, [r3, #20]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d11b      	bne.n	8001656 <EE_Init+0x8be>
  __ASM volatile ("dsb 0xF":::"memory");
 800161e:	f3bf 8f4f 	dsb	sy
}
 8001622:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001624:	f3bf 8f6f 	isb	sy
}
 8001628:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <EE_Init+0x908>)
 800162c:	2200      	movs	r2, #0
 800162e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001632:	f3bf 8f4f 	dsb	sy
}
 8001636:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001638:	f3bf 8f6f 	isb	sy
}
 800163c:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <EE_Init+0x908>)
 8001640:	695b      	ldr	r3, [r3, #20]
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <EE_Init+0x908>)
 8001644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001648:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800164a:	f3bf 8f4f 	dsb	sy
}
 800164e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001650:	f3bf 8f6f 	isb	sy
}
 8001654:	e000      	b.n	8001658 <EE_Init+0x8c0>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001656:	bf00      	nop
		  SCB_EnableICache();
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8001658:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800165c:	2b00      	cmp	r3, #0
 800165e:	d014      	beq.n	800168a <EE_Init+0x8f2>
          {
            return FlashStatus;
 8001660:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001664:	b29b      	uxth	r3, r3
 8001666:	e014      	b.n	8001692 <EE_Init+0x8fa>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 8001668:	f000 f8b8 	bl	80017dc <EE_Format>
 800166c:	4603      	mov	r3, r0
 800166e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001672:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8001676:	2b00      	cmp	r3, #0
 8001678:	d009      	beq.n	800168e <EE_Init+0x8f6>
      {
        return FlashStatus;
 800167a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800167e:	b29b      	uxth	r3, r3
 8001680:	e007      	b.n	8001692 <EE_Init+0x8fa>
      break;
 8001682:	bf00      	nop
 8001684:	e004      	b.n	8001690 <EE_Init+0x8f8>
      break;
 8001686:	bf00      	nop
 8001688:	e002      	b.n	8001690 <EE_Init+0x8f8>
      break;
 800168a:	bf00      	nop
 800168c:	e000      	b.n	8001690 <EE_Init+0x8f8>
      }
      break;
 800168e:	bf00      	nop
  }

  return HAL_OK;
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3748      	adds	r7, #72	; 0x48
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	081e0000 	.word	0x081e0000
 80016a0:	e000ed00 	.word	0xe000ed00
 80016a4:	081e0006 	.word	0x081e0006
 80016a8:	24000000 	.word	0x24000000
 80016ac:	240003a0 	.word	0x240003a0
 80016b0:	081c0000 	.word	0x081c0000

080016b4 <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b087      	sub	sp, #28
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  uint32_t EndAddress;
  uint32_t ReadStatus = 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	617b      	str	r3, [r7, #20]
  uint16_t AddressValue = 0x5555;
 80016c0:	f245 5355 	movw	r3, #21845	; 0x5555
 80016c4:	827b      	strh	r3, [r7, #18]

  /* Compute page end-address */
  EndAddress = (uint32_t)(Address + (PAGE_SIZE - 4U));
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	4b0e      	ldr	r3, [pc, #56]	; (8001704 <EE_VerifyPageFullyErased+0x50>)
 80016ca:	4413      	add	r3, r2
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from end */
  while (Address <= EndAddress)
 80016ce:	e00d      	b.n	80016ec <EE_VerifyPageFullyErased+0x38>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	827b      	strh	r3, [r7, #18]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80016d6:	8a7b      	ldrh	r3, [r7, #18]
 80016d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016dc:	4293      	cmp	r3, r2
 80016de:	d002      	beq.n	80016e6 <EE_VerifyPageFullyErased+0x32>
    {

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

      break;
 80016e4:	e006      	b.n	80016f4 <EE_VerifyPageFullyErased+0x40>
    }
    /* Next address location */
    Address = Address + 4;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	3304      	adds	r3, #4
 80016ea:	607b      	str	r3, [r7, #4]
  while (Address <= EndAddress)
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d9ed      	bls.n	80016d0 <EE_VerifyPageFullyErased+0x1c>
  }

  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	b29b      	uxth	r3, r3
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	371c      	adds	r7, #28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	0001fffc 	.word	0x0001fffc

08001708 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 8001714:	2300      	movs	r3, #0
 8001716:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 8001718:	f245 5355 	movw	r3, #21845	; 0x5555
 800171c:	81bb      	strh	r3, [r7, #12]
 800171e:	2301      	movs	r3, #1
 8001720:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 8001722:	4b1b      	ldr	r3, [pc, #108]	; (8001790 <EE_ReadVariable+0x88>)
 8001724:	613b      	str	r3, [r7, #16]
 8001726:	4b1a      	ldr	r3, [pc, #104]	; (8001790 <EE_ReadVariable+0x88>)
 8001728:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 800172a:	2000      	movs	r0, #0
 800172c:	f000 f96a 	bl	8001a04 <EE_FindValidPage>
 8001730:	4603      	mov	r3, r0
 8001732:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001734:	89fb      	ldrh	r3, [r7, #14]
 8001736:	2bab      	cmp	r3, #171	; 0xab
 8001738:	d101      	bne.n	800173e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800173a:	23ab      	movs	r3, #171	; 0xab
 800173c:	e024      	b.n	8001788 <EE_ReadVariable+0x80>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001744:	045b      	lsls	r3, r3, #17
 8001746:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 32) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	3301      	adds	r3, #1
 800174c:	045a      	lsls	r2, r3, #17
 800174e:	4b11      	ldr	r3, [pc, #68]	; (8001794 <EE_ReadVariable+0x8c>)
 8001750:	4413      	add	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 32))
 8001754:	e012      	b.n	800177c <EE_ReadVariable+0x74>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	881b      	ldrh	r3, [r3, #0]
 800175a:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800175c:	89ba      	ldrh	r2, [r7, #12]
 800175e:	88fb      	ldrh	r3, [r7, #6]
 8001760:	429a      	cmp	r2, r3
 8001762:	d108      	bne.n	8001776 <EE_ReadVariable+0x6e>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 32));
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	3b20      	subs	r3, #32
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	b29a      	uxth	r2, r3
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	82fb      	strh	r3, [r7, #22]

      break;
 8001774:	e007      	b.n	8001786 <EE_ReadVariable+0x7e>
    }
    else
    {
      /* Next address location */
      Address = Address - 64;
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	3b40      	subs	r3, #64	; 0x40
 800177a:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 32))
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	3320      	adds	r3, #32
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	429a      	cmp	r2, r3
 8001784:	d8e7      	bhi.n	8001756 <EE_ReadVariable+0x4e>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8001786:	8afb      	ldrh	r3, [r7, #22]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	081c0000 	.word	0x081c0000
 8001794:	081bffe0 	.word	0x081bffe0

08001798 <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af00      	add	r7, sp, #0
 800179e:	4603      	mov	r3, r0
 80017a0:	460a      	mov	r2, r1
 80017a2:	80fb      	strh	r3, [r7, #6]
 80017a4:	4613      	mov	r3, r2
 80017a6:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 80017a8:	2300      	movs	r3, #0
 80017aa:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 80017ac:	88ba      	ldrh	r2, [r7, #4]
 80017ae:	88fb      	ldrh	r3, [r7, #6]
 80017b0:	4611      	mov	r1, r2
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f96c 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 80017b8:	4603      	mov	r3, r0
 80017ba:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 80017bc:	89fb      	ldrh	r3, [r7, #14]
 80017be:	2b80      	cmp	r3, #128	; 0x80
 80017c0:	d107      	bne.n	80017d2 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 80017c2:	88ba      	ldrh	r2, [r7, #4]
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	4611      	mov	r1, r2
 80017c8:	4618      	mov	r0, r3
 80017ca:	f000 fa13 	bl	8001bf4 <EE_PageTransfer>
 80017ce:	4603      	mov	r3, r0
 80017d0:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80017d2:	89fb      	ldrh	r3, [r7, #14]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}

080017dc <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formatting
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b090      	sub	sp, #64	; 0x40
 80017e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t SectorError = 0;
 80017e8:	2300      	movs	r3, #0
 80017ea:	63bb      	str	r3, [r7, #56]	; 0x38
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 80017ec:	1d3b      	adds	r3, r7, #4
 80017ee:	2220      	movs	r2, #32
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f01a f832 	bl	801b85c <memset>

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
  pEraseInit.Banks = FLASH_BANK_2 ;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
  pEraseInit.Sector = PAGE0_ID;
 8001800:	2306      	movs	r3, #6
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
  pEraseInit.NbSectors = 1;
 8001804:	2301      	movs	r3, #1
 8001806:	633b      	str	r3, [r7, #48]	; 0x30
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001808:	2320      	movs	r3, #32
 800180a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800180c:	487a      	ldr	r0, [pc, #488]	; (80019f8 <EE_Format+0x21c>)
 800180e:	f7ff ff51 	bl	80016b4 <EE_VerifyPageFullyErased>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d14b      	bne.n	80018b0 <EE_Format+0xd4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001818:	f3bf 8f4f 	dsb	sy
}
 800181c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800181e:	f3bf 8f6f 	isb	sy
}
 8001822:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <EE_Format+0x220>)
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	4a74      	ldr	r2, [pc, #464]	; (80019fc <EE_Format+0x220>)
 800182a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800182e:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001830:	4b72      	ldr	r3, [pc, #456]	; (80019fc <EE_Format+0x220>)
 8001832:	2200      	movs	r2, #0
 8001834:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001838:	f3bf 8f4f 	dsb	sy
}
 800183c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800183e:	f3bf 8f6f 	isb	sy
}
 8001842:	bf00      	nop
}
 8001844:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001846:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800184a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800184e:	4611      	mov	r1, r2
 8001850:	4618      	mov	r0, r3
 8001852:	f00a fb85 	bl	800bf60 <HAL_FLASHEx_Erase>
 8001856:	4603      	mov	r3, r0
 8001858:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <EE_Format+0x220>)
 800185e:	695b      	ldr	r3, [r3, #20]
 8001860:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d11b      	bne.n	80018a0 <EE_Format+0xc4>
  __ASM volatile ("dsb 0xF":::"memory");
 8001868:	f3bf 8f4f 	dsb	sy
}
 800186c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800186e:	f3bf 8f6f 	isb	sy
}
 8001872:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001874:	4b61      	ldr	r3, [pc, #388]	; (80019fc <EE_Format+0x220>)
 8001876:	2200      	movs	r2, #0
 8001878:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800187c:	f3bf 8f4f 	dsb	sy
}
 8001880:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001882:	f3bf 8f6f 	isb	sy
}
 8001886:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001888:	4b5c      	ldr	r3, [pc, #368]	; (80019fc <EE_Format+0x220>)
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	4a5b      	ldr	r2, [pc, #364]	; (80019fc <EE_Format+0x220>)
 800188e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001892:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001894:	f3bf 8f4f 	dsb	sy
}
 8001898:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800189a:	f3bf 8f6f 	isb	sy
}
 800189e:	e000      	b.n	80018a2 <EE_Format+0xc6>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018a0:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80018a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <EE_Format+0xd4>
    {
      return FlashStatus;
 80018aa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80018ae:	e09e      	b.n	80019ee <EE_Format+0x212>
  __ASM volatile ("dsb 0xF":::"memory");
 80018b0:	f3bf 8f4f 	dsb	sy
}
 80018b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018b6:	f3bf 8f6f 	isb	sy
}
 80018ba:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 80018bc:	4b4f      	ldr	r3, [pc, #316]	; (80019fc <EE_Format+0x220>)
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <EE_Format+0x220>)
 80018c2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80018c6:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80018c8:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <EE_Format+0x220>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80018d0:	f3bf 8f4f 	dsb	sy
}
 80018d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018d6:	f3bf 8f6f 	isb	sy
}
 80018da:	bf00      	nop
}
 80018dc:	bf00      	nop
    }
  }

  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, PAGE0_BASE_ADDRESS,((uint32_t)valid));
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	461a      	mov	r2, r3
 80018e2:	4945      	ldr	r1, [pc, #276]	; (80019f8 <EE_Format+0x21c>)
 80018e4:	2001      	movs	r0, #1
 80018e6:	f00a f80d 	bl	800b904 <HAL_FLASH_Program>
 80018ea:	4603      	mov	r3, r0
 80018ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80018f0:	4b42      	ldr	r3, [pc, #264]	; (80019fc <EE_Format+0x220>)
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d11b      	bne.n	8001934 <EE_Format+0x158>
  __ASM volatile ("dsb 0xF":::"memory");
 80018fc:	f3bf 8f4f 	dsb	sy
}
 8001900:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001902:	f3bf 8f6f 	isb	sy
}
 8001906:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001908:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <EE_Format+0x220>)
 800190a:	2200      	movs	r2, #0
 800190c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001910:	f3bf 8f4f 	dsb	sy
}
 8001914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001916:	f3bf 8f6f 	isb	sy
}
 800191a:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800191c:	4b37      	ldr	r3, [pc, #220]	; (80019fc <EE_Format+0x220>)
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	4a36      	ldr	r2, [pc, #216]	; (80019fc <EE_Format+0x220>)
 8001922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001926:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001928:	f3bf 8f4f 	dsb	sy
}
 800192c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800192e:	f3bf 8f6f 	isb	sy
}
 8001932:	e000      	b.n	8001936 <EE_Format+0x15a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001934:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001936:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800193a:	2b00      	cmp	r3, #0
 800193c:	d002      	beq.n	8001944 <EE_Format+0x168>
  {
    return FlashStatus;
 800193e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001942:	e054      	b.n	80019ee <EE_Format+0x212>
  }

  pEraseInit.Sector = PAGE1_ID;
 8001944:	2307      	movs	r3, #7
 8001946:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8001948:	482d      	ldr	r0, [pc, #180]	; (8001a00 <EE_Format+0x224>)
 800194a:	f7ff feb3 	bl	80016b4 <EE_VerifyPageFullyErased>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d14b      	bne.n	80019ec <EE_Format+0x210>
  __ASM volatile ("dsb 0xF":::"memory");
 8001954:	f3bf 8f4f 	dsb	sy
}
 8001958:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800195a:	f3bf 8f6f 	isb	sy
}
 800195e:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001960:	4b26      	ldr	r3, [pc, #152]	; (80019fc <EE_Format+0x220>)
 8001962:	695b      	ldr	r3, [r3, #20]
 8001964:	4a25      	ldr	r2, [pc, #148]	; (80019fc <EE_Format+0x220>)
 8001966:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800196a:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <EE_Format+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001974:	f3bf 8f4f 	dsb	sy
}
 8001978:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800197a:	f3bf 8f6f 	isb	sy
}
 800197e:	bf00      	nop
}
 8001980:	bf00      	nop
  {
    SCB_DisableICache();
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001982:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001986:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198a:	4611      	mov	r1, r2
 800198c:	4618      	mov	r0, r3
 800198e:	f00a fae7 	bl	800bf60 <HAL_FLASHEx_Erase>
 8001992:	4603      	mov	r3, r0
 8001994:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <EE_Format+0x220>)
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11b      	bne.n	80019dc <EE_Format+0x200>
  __ASM volatile ("dsb 0xF":::"memory");
 80019a4:	f3bf 8f4f 	dsb	sy
}
 80019a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019aa:	f3bf 8f6f 	isb	sy
}
 80019ae:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <EE_Format+0x220>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80019b8:	f3bf 8f4f 	dsb	sy
}
 80019bc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019be:	f3bf 8f6f 	isb	sy
}
 80019c2:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80019c4:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <EE_Format+0x220>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <EE_Format+0x220>)
 80019ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ce:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	e000      	b.n	80019de <EE_Format+0x202>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80019dc:	bf00      	nop
    SCB_EnableICache();
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80019de:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <EE_Format+0x210>
    {
      return FlashStatus;
 80019e6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80019ea:	e000      	b.n	80019ee <EE_Format+0x212>
    }
  }

  return HAL_OK;
 80019ec:	2300      	movs	r3, #0
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	3740      	adds	r7, #64	; 0x40
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}
 80019f6:	bf00      	nop
 80019f8:	081c0000 	.word	0x081c0000
 80019fc:	e000ed00 	.word	0xe000ed00
 8001a00:	081e0000 	.word	0x081e0000

08001a04 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8001a0e:	2306      	movs	r3, #6
 8001a10:	81fb      	strh	r3, [r7, #14]
 8001a12:	2306      	movs	r3, #6
 8001a14:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <EE_FindValidPage+0x84>)
 8001a18:	881b      	ldrh	r3, [r3, #0]
 8001a1a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8001a1c:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <EE_FindValidPage+0x88>)
 8001a1e:	881b      	ldrh	r3, [r3, #0]
 8001a20:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d01b      	beq.n	8001a60 <EE_FindValidPage+0x5c>
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d125      	bne.n	8001a78 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8001a2c:	89bb      	ldrh	r3, [r7, #12]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d108      	bne.n	8001a44 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8001a32:	89fb      	ldrh	r3, [r7, #14]
 8001a34:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d101      	bne.n	8001a40 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e01c      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8001a40:	2301      	movs	r3, #1
 8001a42:	e01a      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8001a44:	89fb      	ldrh	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d108      	bne.n	8001a5c <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8001a4a:	89bb      	ldrh	r3, [r7, #12]
 8001a4c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d101      	bne.n	8001a58 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8001a54:	2301      	movs	r3, #1
 8001a56:	e010      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e00e      	b.n	8001a7a <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8001a5c:	23ab      	movs	r3, #171	; 0xab
 8001a5e:	e00c      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8001a60:	89fb      	ldrh	r3, [r7, #14]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d101      	bne.n	8001a6a <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8001a66:	2300      	movs	r3, #0
 8001a68:	e007      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8001a6a:	89bb      	ldrh	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8001a70:	2301      	movs	r3, #1
 8001a72:	e002      	b.n	8001a7a <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8001a74:	23ab      	movs	r3, #171	; 0xab
 8001a76:	e000      	b.n	8001a7a <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8001a78:	2300      	movs	r3, #0
  }
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr
 8001a86:	bf00      	nop
 8001a88:	081c0000 	.word	0x081c0000
 8001a8c:	081e0000 	.word	0x081e0000

08001a90 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	460a      	mov	r2, r1
 8001a9a:	80fb      	strh	r3, [r7, #6]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  uint16_t ValidPage = PAGE0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <EE_VerifyPageFullWriteVariable+0x154>)
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	4b4d      	ldr	r3, [pc, #308]	; (8001be8 <EE_VerifyPageFullWriteVariable+0x158>)
 8001ab2:	64fb      	str	r3, [r7, #76]	; 0x4c

  uint32_t data32[8] = {Data};
 8001ab4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab8:	2220      	movs	r2, #32
 8001aba:	2100      	movs	r1, #0
 8001abc:	4618      	mov	r0, r3
 8001abe:	f019 fecd 	bl	801b85c <memset>
 8001ac2:	88bb      	ldrh	r3, [r7, #4]
 8001ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t VirtAddress1[8] = {VirtAddress};
 8001ac6:	f107 030c 	add.w	r3, r7, #12
 8001aca:	2220      	movs	r2, #32
 8001acc:	2100      	movs	r1, #0
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f019 fec4 	bl	801b85c <memset>
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	60fb      	str	r3, [r7, #12]
  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ff93 	bl	8001a04 <EE_FindValidPage>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8001ae4:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001ae8:	2bab      	cmp	r3, #171	; 0xab
 8001aea:	d101      	bne.n	8001af0 <EE_VerifyPageFullWriteVariable+0x60>
  {
    return  NO_VALID_PAGE;
 8001aec:	23ab      	movs	r3, #171	; 0xab
 8001aee:	e075      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8001af0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001af4:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8001af8:	045b      	lsls	r3, r3, #17
 8001afa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8001afc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8001b00:	3301      	adds	r3, #1
 8001b02:	045a      	lsls	r2, r3, #17
 8001b04:	4b39      	ldr	r3, [pc, #228]	; (8001bec <EE_VerifyPageFullWriteVariable+0x15c>)
 8001b06:	4413      	add	r3, r2
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("dsb 0xF":::"memory");
 8001b0a:	f3bf 8f4f 	dsb	sy
}
 8001b0e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b10:	f3bf 8f6f 	isb	sy
}
 8001b14:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b18:	695b      	ldr	r3, [r3, #20]
 8001b1a:	4a35      	ldr	r2, [pc, #212]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b1c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001b20:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001b22:	4b33      	ldr	r3, [pc, #204]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001b2a:	f3bf 8f4f 	dsb	sy
}
 8001b2e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001b30:	f3bf 8f6f 	isb	sy
}
 8001b34:	bf00      	nop
}
 8001b36:	bf00      	nop

  SCB_DisableICache();

  /* Check each active page address starting from beginning */
  while (Address < PageEndAddress)
 8001b38:	e028      	b.n	8001b8c <EE_VerifyPageFullWriteVariable+0xfc>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8001b3a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001b42:	d120      	bne.n	8001b86 <EE_VerifyPageFullWriteVariable+0xf6>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address, ((uint32_t)data32));
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	461a      	mov	r2, r3
 8001b4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	f009 fed9 	bl	800b904 <HAL_FLASH_Program>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8001b58:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <EE_VerifyPageFullWriteVariable+0xd8>
      {
        return FlashStatus;
 8001b60:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b64:	b29b      	uxth	r3, r3
 8001b66:	e039      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
      }
      /* Set variable virtual address */
     FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, Address + 32, ((uint32_t)VirtAddress1));
 8001b68:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b6a:	3320      	adds	r3, #32
 8001b6c:	f107 020c 	add.w	r2, r7, #12
 8001b70:	4619      	mov	r1, r3
 8001b72:	2001      	movs	r0, #1
 8001b74:	f009 fec6 	bl	800b904 <HAL_FLASH_Program>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

      /* Return program operation status */
     return FlashStatus;
 8001b7e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8001b82:	b29b      	uxth	r3, r3
 8001b84:	e02a      	b.n	8001bdc <EE_VerifyPageFullWriteVariable+0x14c>
    }
    else
    {
      /* Next address location */
      Address = Address + 64;
 8001b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001b88:	3340      	adds	r3, #64	; 0x40
 8001b8a:	657b      	str	r3, [r7, #84]	; 0x54
  while (Address < PageEndAddress)
 8001b8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001b8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d3d2      	bcc.n	8001b3a <EE_VerifyPageFullWriteVariable+0xaa>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001b94:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d11b      	bne.n	8001bd8 <EE_VerifyPageFullWriteVariable+0x148>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ba0:	f3bf 8f4f 	dsb	sy
}
 8001ba4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ba6:	f3bf 8f6f 	isb	sy
}
 8001baa:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001bac:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001bb4:	f3bf 8f4f 	dsb	sy
}
 8001bb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bba:	f3bf 8f6f 	isb	sy
}
 8001bbe:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc2:	695b      	ldr	r3, [r3, #20]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <EE_VerifyPageFullWriteVariable+0x160>)
 8001bc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bca:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001bcc:	f3bf 8f4f 	dsb	sy
}
 8001bd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001bd2:	f3bf 8f6f 	isb	sy
}
 8001bd6:	e000      	b.n	8001bda <EE_VerifyPageFullWriteVariable+0x14a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001bd8:	bf00      	nop
    }
  }
  SCB_EnableICache();

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8001bda:	2380      	movs	r3, #128	; 0x80
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3758      	adds	r7, #88	; 0x58
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	081c0000 	.word	0x081c0000
 8001be8:	081e0000 	.word	0x081e0000
 8001bec:	081bffff 	.word	0x081bffff
 8001bf0:	e000ed00 	.word	0xe000ed00

08001bf4 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b09c      	sub	sp, #112	; 0x70
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	460a      	mov	r2, r1
 8001bfe:	80fb      	strh	r3, [r7, #6]
 8001c00:	4613      	mov	r3, r2
 8001c02:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8001c0a:	4bc3      	ldr	r3, [pc, #780]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint16_t OldPageId=0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8001c14:	2300      	movs	r3, #0
 8001c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8001c20:	2300      	movs	r3, #0
 8001c22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8001c26:	2300      	movs	r3, #0
 8001c28:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
  uint32_t SectorError = 0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  FLASH_EraseInitTypeDef pEraseInit;
  uint32_t valid[8] = {0x0000};
 8001c30:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c34:	2220      	movs	r2, #32
 8001c36:	2100      	movs	r1, #0
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f019 fe0f 	bl	801b85c <memset>
  uint32_t receive[8] = {0xEEEE};
 8001c3e:	f107 0308 	add.w	r3, r7, #8
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f019 fe08 	bl	801b85c <memset>
 8001c4c:	f64e 63ee 	movw	r3, #61166	; 0xeeee
 8001c50:	60bb      	str	r3, [r7, #8]
  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8001c52:	2000      	movs	r0, #0
 8001c54:	f7ff fed6 	bl	8001a04 <EE_FindValidPage>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  if (ValidPage == PAGE1)       /* Page1 valid */
 8001c5e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c62:	2b01      	cmp	r3, #1
 8001c64:	d105      	bne.n	8001c72 <EE_PageTransfer+0x7e>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8001c66:	4bac      	ldr	r3, [pc, #688]	; (8001f18 <EE_PageTransfer+0x324>)
 8001c68:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8001c6a:	2307      	movs	r3, #7
 8001c6c:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c70:	e00b      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8001c72:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d105      	bne.n	8001c86 <EE_PageTransfer+0x92>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8001c7a:	4ba8      	ldr	r3, [pc, #672]	; (8001f1c <EE_PageTransfer+0x328>)
 8001c7c:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8001c7e:	2306      	movs	r3, #6
 8001c80:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a
 8001c84:	e001      	b.n	8001c8a <EE_PageTransfer+0x96>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8001c86:	23ab      	movs	r3, #171	; 0xab
 8001c88:	e142      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001c8a:	f3bf 8f4f 	dsb	sy
}
 8001c8e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c90:	f3bf 8f6f 	isb	sy
}
 8001c94:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001c96:	4ba2      	ldr	r3, [pc, #648]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	4aa1      	ldr	r2, [pc, #644]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001c9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001ca0:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ca2:	4b9f      	ldr	r3, [pc, #636]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001caa:	f3bf 8f4f 	dsb	sy
}
 8001cae:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cb0:	f3bf 8f6f 	isb	sy
}
 8001cb4:	bf00      	nop
}
 8001cb6:	bf00      	nop
  }

  /* Set the new Page status to RECEIVE_DATA status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)receive));
 8001cb8:	f107 0308 	add.w	r3, r7, #8
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001cc0:	2001      	movs	r0, #1
 8001cc2:	f009 fe1f 	bl	800b904 <HAL_FLASH_Program>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ccc:	4b94      	ldr	r3, [pc, #592]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cce:	695b      	ldr	r3, [r3, #20]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d11b      	bne.n	8001d10 <EE_PageTransfer+0x11c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cd8:	f3bf 8f4f 	dsb	sy
}
 8001cdc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cde:	f3bf 8f6f 	isb	sy
}
 8001ce2:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ce4:	4b8e      	ldr	r3, [pc, #568]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001cec:	f3bf 8f4f 	dsb	sy
}
 8001cf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001cf2:	f3bf 8f6f 	isb	sy
}
 8001cf6:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001cf8:	4b89      	ldr	r3, [pc, #548]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	4a88      	ldr	r2, [pc, #544]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d02:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001d04:	f3bf 8f4f 	dsb	sy
}
 8001d08:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001d0a:	f3bf 8f6f 	isb	sy
}
 8001d0e:	e000      	b.n	8001d12 <EE_PageTransfer+0x11e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001d10:	bf00      	nop
  SCB_EnableICache();

  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001d12:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <EE_PageTransfer+0x12e>
  {
    return FlashStatus;
 8001d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	e0f6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8001d22:	88ba      	ldrh	r2, [r7, #4]
 8001d24:	88fb      	ldrh	r3, [r7, #6]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff feb1 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8001d34:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d002      	beq.n	8001d42 <EE_PageTransfer+0x14e>
  {
    return EepromStatus;
 8001d3c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d40:	e0e6      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001d42:	2300      	movs	r3, #0
 8001d44:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001d48:	e031      	b.n	8001dae <EE_PageTransfer+0x1ba>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8001d4a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d4e:	4a75      	ldr	r2, [pc, #468]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d54:	88fa      	ldrh	r2, [r7, #6]
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d024      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8001d5a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d5e:	4a71      	ldr	r2, [pc, #452]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d64:	4970      	ldr	r1, [pc, #448]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fcce 	bl	8001708 <EE_ReadVariable>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8001d72:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d014      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8001d7a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001d7e:	4a69      	ldr	r2, [pc, #420]	; (8001f24 <EE_PageTransfer+0x330>)
 8001d80:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001d84:	4a68      	ldr	r2, [pc, #416]	; (8001f28 <EE_PageTransfer+0x334>)
 8001d86:	8812      	ldrh	r2, [r2, #0]
 8001d88:	4611      	mov	r1, r2
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fe80 	bl	8001a90 <EE_VerifyPageFullWriteVariable>
 8001d90:	4603      	mov	r3, r0
 8001d92:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8001d96:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <EE_PageTransfer+0x1b0>
        {
          return EepromStatus;
 8001d9e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001da2:	e0b5      	b.n	8001f10 <EE_PageTransfer+0x31c>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8001da4:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001da8:	3301      	adds	r3, #1
 8001daa:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
 8001dae:	f8b7 3068 	ldrh.w	r3, [r7, #104]	; 0x68
 8001db2:	2b1e      	cmp	r3, #30
 8001db4:	d9c9      	bls.n	8001d4a <EE_PageTransfer+0x156>
        }
      }
    }
  }

  HAL_FLASH_Unlock();
 8001db6:	f009 fffd 	bl	800bdb4 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <EE_PageTransfer+0x338>)
 8001dbc:	f44f 028e 	mov.w	r2, #4653056	; 0x470000
 8001dc0:	615a      	str	r2, [r3, #20]
                         FLASH_FLAG_PGSERR | FLASH_FLAG_WRPERR);

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  pEraseInit.Banks = FLASH_BANK_2 ;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  pEraseInit.Sector = OldPageId;
 8001dca:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8001dce:	653b      	str	r3, [r7, #80]	; 0x50
  pEraseInit.NbSectors = 1;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	657b      	str	r3, [r7, #84]	; 0x54
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("dsb 0xF":::"memory");
 8001dd8:	f3bf 8f4f 	dsb	sy
}
 8001ddc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dde:	f3bf 8f6f 	isb	sy
}
 8001de2:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001de4:	4b4e      	ldr	r3, [pc, #312]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001de6:	695b      	ldr	r3, [r3, #20]
 8001de8:	4a4d      	ldr	r2, [pc, #308]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001dea:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001dee:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001df0:	4b4b      	ldr	r3, [pc, #300]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001df8:	f3bf 8f4f 	dsb	sy
}
 8001dfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001dfe:	f3bf 8f6f 	isb	sy
}
 8001e02:	bf00      	nop
}
 8001e04:	bf00      	nop

  /* Erase the old Page: Set old Page status to ERASED status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8001e06:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8001e0a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f00a f8a5 	bl	800bf60 <HAL_FLASHEx_Erase>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e1c:	4b40      	ldr	r3, [pc, #256]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e1e:	695b      	ldr	r3, [r3, #20]
 8001e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d11b      	bne.n	8001e60 <EE_PageTransfer+0x26c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e28:	f3bf 8f4f 	dsb	sy
}
 8001e2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e2e:	f3bf 8f6f 	isb	sy
}
 8001e32:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e34:	4b3a      	ldr	r3, [pc, #232]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e3c:	f3bf 8f4f 	dsb	sy
}
 8001e40:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e42:	f3bf 8f6f 	isb	sy
}
 8001e46:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001e48:	4b35      	ldr	r3, [pc, #212]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	4a34      	ldr	r2, [pc, #208]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e52:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001e54:	f3bf 8f4f 	dsb	sy
}
 8001e58:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e5a:	f3bf 8f6f 	isb	sy
}
 8001e5e:	e000      	b.n	8001e62 <EE_PageTransfer+0x26e>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001e60:	bf00      	nop
  SCB_EnableICache();
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001e62:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <EE_PageTransfer+0x27e>
  {
    return FlashStatus;
 8001e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e6e:	b29b      	uxth	r3, r3
 8001e70:	e04e      	b.n	8001f10 <EE_PageTransfer+0x31c>
  __ASM volatile ("dsb 0xF":::"memory");
 8001e72:	f3bf 8f4f 	dsb	sy
}
 8001e76:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e78:	f3bf 8f6f 	isb	sy
}
 8001e7c:	bf00      	nop
    SCB->CCR &= ~(uint32_t)SCB_CCR_IC_Msk;  /* disable I-Cache */
 8001e7e:	4b28      	ldr	r3, [pc, #160]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	4a27      	ldr	r2, [pc, #156]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001e88:	6153      	str	r3, [r2, #20]
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001e8a:	4b25      	ldr	r3, [pc, #148]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001e92:	f3bf 8f4f 	dsb	sy
}
 8001e96:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001e98:	f3bf 8f6f 	isb	sy
}
 8001e9c:	bf00      	nop
}
 8001e9e:	bf00      	nop
  }

  /* Set new Page status to VALID_PAGE status */
  SCB_DisableICache();
  FlashStatus = HAL_FLASH_Program(FLASH_TYPEPROGRAM_FLASHWORD, NewPageAddress, ((uint32_t)valid));
 8001ea0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f009 fd2b 	bl	800b904 <HAL_FLASH_Program>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001eb4:	4b1a      	ldr	r3, [pc, #104]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d11b      	bne.n	8001ef8 <EE_PageTransfer+0x304>
  __ASM volatile ("dsb 0xF":::"memory");
 8001ec0:	f3bf 8f4f 	dsb	sy
}
 8001ec4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ec6:	f3bf 8f6f 	isb	sy
}
 8001eca:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8001ecc:	4b14      	ldr	r3, [pc, #80]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8001ed4:	f3bf 8f4f 	dsb	sy
}
 8001ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001eda:	f3bf 8f6f 	isb	sy
}
 8001ede:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee2:	695b      	ldr	r3, [r3, #20]
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <EE_PageTransfer+0x32c>)
 8001ee6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001eea:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eec:	f3bf 8f4f 	dsb	sy
}
 8001ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001ef2:	f3bf 8f6f 	isb	sy
}
 8001ef6:	e000      	b.n	8001efa <EE_PageTransfer+0x306>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8001ef8:	bf00      	nop
  SCB_EnableICache();
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <EE_PageTransfer+0x316>
  {
    return FlashStatus;
 8001f02:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	e002      	b.n	8001f10 <EE_PageTransfer+0x31c>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8001f0a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001f0e:	b29b      	uxth	r3, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3770      	adds	r7, #112	; 0x70
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	081c0000 	.word	0x081c0000
 8001f1c:	081e0000 	.word	0x081e0000
 8001f20:	e000ed00 	.word	0xe000ed00
 8001f24:	24000000 	.word	0x24000000
 8001f28:	240003a0 	.word	0x240003a0
 8001f2c:	52002000 	.word	0x52002000

08001f30 <handle_error>:
 * set the previous error to whatever error we are currently handling, send an error packet,
 * and enter IDLE mode. Additional actions are taken depending on the error category.
 *
 * @param error Error given by the caller.
 */
void handle_error(ERROR_STRUCT error) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	463b      	mov	r3, r7
 8001f38:	e883 0003 	stmia.w	r3, {r0, r1}
#ifdef ERROR_HANDLING_ENABLED
	// Turn off all power supply rails
	emergency_shutdown();
 8001f3c:	f000 fb3a 	bl	80025b4 <emergency_shutdown>

	// If error was caused by flash ECC...
	if ((error.detail == ED_single_bit_error_flash) || (error.detail == ED_double_bit_error_flash)) {
 8001f40:	787b      	ldrb	r3, [r7, #1]
 8001f42:	2b18      	cmp	r3, #24
 8001f44:	d002      	beq.n	8001f4c <handle_error+0x1c>
 8001f46:	787b      	ldrb	r3, [r7, #1]
 8001f48:	2b19      	cmp	r3, #25
 8001f4a:	d11f      	bne.n	8001f8c <handle_error+0x5c>
		// Erase user flash, reinit EE, reset error counters, increment error counter, set previous error
		local_cpy[error.category]++;
 8001f4c:	783b      	ldrb	r3, [r7, #0]
 8001f4e:	4a1e      	ldr	r2, [pc, #120]	; (8001fc8 <handle_error+0x98>)
 8001f50:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f54:	3201      	adds	r2, #1
 8001f56:	b291      	uxth	r1, r2
 8001f58:	4a1b      	ldr	r2, [pc, #108]	; (8001fc8 <handle_error+0x98>)
 8001f5a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		local_cpy[error.detail]++;
 8001f5e:	787b      	ldrb	r3, [r7, #1]
 8001f60:	4a19      	ldr	r2, [pc, #100]	; (8001fc8 <handle_error+0x98>)
 8001f62:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001f66:	3201      	adds	r2, #1
 8001f68:	b291      	uxth	r1, r2
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <handle_error+0x98>)
 8001f6c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		flash_mass_erase();
 8001f70:	f000 f830 	bl	8001fd4 <flash_mass_erase>
		EE_Init();
 8001f74:	f7fe ff10 	bl	8000d98 <EE_Init>
		reset_error_counters();
 8001f78:	f000 f8c8 	bl	800210c <reset_error_counters>
		update_error_counter();
 8001f7c:	f000 f8a0 	bl	80020c0 <update_error_counter>
		set_previous_error(error);
 8001f80:	463b      	mov	r3, r7
 8001f82:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f86:	f000 f8e1 	bl	800214c <set_previous_error>
 8001f8a:	e009      	b.n	8001fa0 <handle_error+0x70>
	}
	// Otherwise, just increment error counter and set previous error
	else {
		increment_error_counter(error);
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f92:	f000 f875 	bl	8002080 <increment_error_counter>
		set_previous_error(error);
 8001f96:	463b      	mov	r3, r7
 8001f98:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f9c:	f000 f8d6 	bl	800214c <set_previous_error>
	}

	// Wait until all power supply rails are off, then send current error packet + junk data
	while(!IDLING){};
 8001fa0:	bf00      	nop
 8001fa2:	4b0a      	ldr	r3, [pc, #40]	; (8001fcc <handle_error+0x9c>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d0fa      	beq.n	8001fa2 <handle_error+0x72>
	send_current_error_packet(error);
 8001fac:	463b      	mov	r3, r7
 8001fae:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001fb2:	f000 fa99 	bl	80024e8 <send_current_error_packet>
	send_junk_packet();
 8001fb6:	f000 fad3 	bl	8002560 <send_junk_packet>

	HAL_TIM_Base_Start_IT(&htim3);
 8001fba:	4805      	ldr	r0, [pc, #20]	; (8001fd0 <handle_error+0xa0>)
 8001fbc:	f011 fed8 	bl	8013d70 <HAL_TIM_Base_Start_IT>

#endif
}
 8001fc0:	bf00      	nop
 8001fc2:	3708      	adds	r7, #8
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	240003a4 	.word	0x240003a4
 8001fcc:	240000c4 	.word	0x240000c4
 8001fd0:	2400217c 	.word	0x2400217c

08001fd4 <flash_mass_erase>:

void flash_mass_erase() {
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8001fda:	f009 feeb 	bl	800bdb4 <HAL_FLASH_Unlock>

	static FLASH_EraseInitTypeDef EraseInitStruct;
	/* Fill EraseInit structure*/
	uint32_t SECTORError = 0;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	607b      	str	r3, [r7, #4]
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	; (800201c <flash_mass_erase+0x48>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	601a      	str	r2, [r3, #0]
	EraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	; (800201c <flash_mass_erase+0x48>)
 8001fea:	2220      	movs	r2, #32
 8001fec:	611a      	str	r2, [r3, #16]
	EraseInitStruct.Banks = FLASH_BANK_2;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	; (800201c <flash_mass_erase+0x48>)
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	605a      	str	r2, [r3, #4]
	EraseInitStruct.Sector = FLASH_SECTOR_0;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	; (800201c <flash_mass_erase+0x48>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbSectors = FLASH_SECTOR_TOTAL;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	; (800201c <flash_mass_erase+0x48>)
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	60da      	str	r2, [r3, #12]

	if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK) {
 8002000:	1d3b      	adds	r3, r7, #4
 8002002:	4619      	mov	r1, r3
 8002004:	4805      	ldr	r0, [pc, #20]	; (800201c <flash_mass_erase+0x48>)
 8002006:	f009 ffab 	bl	800bf60 <HAL_FLASHEx_Erase>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <flash_mass_erase+0x40>
		Error_Handler();
 8002010:	f001 fede 	bl	8003dd0 <Error_Handler>
	}
}
 8002014:	bf00      	nop
 8002016:	3708      	adds	r7, #8
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}
 800201c:	240003e0 	.word	0x240003e0

08002020 <error_counter_init>:

/**
 * @breif Initializes the EE, reads the error counters from the EE, and stores them in local_cpy.
 */
void error_counter_init() {
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002026:	f009 fec5 	bl	800bdb4 <HAL_FLASH_Unlock>
	if (EE_Init() != EE_OK) {
 800202a:	f7fe feb5 	bl	8000d98 <EE_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <error_counter_init+0x18>
		Error_Handler();
 8002034:	f001 fecc 	bl	8003dd0 <Error_Handler>
	}

	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002038:	2300      	movs	r3, #0
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	e013      	b.n	8002066 <error_counter_init+0x46>
		if ((EE_ReadVariable(VirtAddVarTab[i], &local_cpy[i])) != HAL_OK) {
 800203e:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <error_counter_init+0x58>)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	005b      	lsls	r3, r3, #1
 800204a:	490c      	ldr	r1, [pc, #48]	; (800207c <error_counter_init+0x5c>)
 800204c:	440b      	add	r3, r1
 800204e:	4619      	mov	r1, r3
 8002050:	4610      	mov	r0, r2
 8002052:	f7ff fb59 	bl	8001708 <EE_ReadVariable>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d001      	beq.n	8002060 <error_counter_init+0x40>
			Error_Handler();
 800205c:	f001 feb8 	bl	8003dd0 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3301      	adds	r3, #1
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b1c      	cmp	r3, #28
 800206a:	dde8      	ble.n	800203e <error_counter_init+0x1e>
		}
	}
}
 800206c:	bf00      	nop
 800206e:	bf00      	nop
 8002070:	3708      	adds	r7, #8
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	24000000 	.word	0x24000000
 800207c:	240003a4 	.word	0x240003a4

08002080 <increment_error_counter>:
 * local_cpy array. To see what index a particular error is stored in, just check the value
 * each category or detail is assigned in the header file.
 *
 * @param error Error given by the caller.
 */
void increment_error_counter(ERROR_STRUCT error) {
 8002080:	b580      	push	{r7, lr}
 8002082:	b082      	sub	sp, #8
 8002084:	af00      	add	r7, sp, #0
 8002086:	463b      	mov	r3, r7
 8002088:	e883 0003 	stmia.w	r3, {r0, r1}
	local_cpy[error.category]++;
 800208c:	783b      	ldrb	r3, [r7, #0]
 800208e:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <increment_error_counter+0x3c>)
 8002090:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002094:	3201      	adds	r2, #1
 8002096:	b291      	uxth	r1, r2
 8002098:	4a08      	ldr	r2, [pc, #32]	; (80020bc <increment_error_counter+0x3c>)
 800209a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	local_cpy[error.detail]++;
 800209e:	787b      	ldrb	r3, [r7, #1]
 80020a0:	4a06      	ldr	r2, [pc, #24]	; (80020bc <increment_error_counter+0x3c>)
 80020a2:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020a6:	3201      	adds	r2, #1
 80020a8:	b291      	uxth	r1, r2
 80020aa:	4a04      	ldr	r2, [pc, #16]	; (80020bc <increment_error_counter+0x3c>)
 80020ac:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	update_error_counter();
 80020b0:	f000 f806 	bl	80020c0 <update_error_counter>
}
 80020b4:	bf00      	nop
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	240003a4 	.word	0x240003a4

080020c0 <update_error_counter>:

/**
 * @brief Writes the contents of local_cpy to the EE, excluding the previous error codes.
 */
void update_error_counter(){
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020c6:	2300      	movs	r3, #0
 80020c8:	607b      	str	r3, [r7, #4]
 80020ca:	e013      	b.n	80020f4 <update_error_counter+0x34>
		if ((EE_WriteVariable(VirtAddVarTab[i], local_cpy[i])) != HAL_OK) {
 80020cc:	4a0d      	ldr	r2, [pc, #52]	; (8002104 <update_error_counter+0x44>)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80020d4:	490c      	ldr	r1, [pc, #48]	; (8002108 <update_error_counter+0x48>)
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f7ff fb5a 	bl	8001798 <EE_WriteVariable>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <update_error_counter+0x2e>
			Error_Handler();
 80020ea:	f001 fe71 	bl	8003dd0 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3301      	adds	r3, #1
 80020f2:	607b      	str	r3, [r7, #4]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b1c      	cmp	r3, #28
 80020f8:	dde8      	ble.n	80020cc <update_error_counter+0xc>
		}
	}
}
 80020fa:	bf00      	nop
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	24000000 	.word	0x24000000
 8002108:	240003a4 	.word	0x240003a4

0800210c <reset_error_counters>:

/**
 * @brief Resets all error counters in the EE to 0.
 */
void reset_error_counters() {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002112:	2300      	movs	r3, #0
 8002114:	607b      	str	r3, [r7, #4]
 8002116:	e00f      	b.n	8002138 <reset_error_counters+0x2c>
		if ((EE_WriteVariable(VirtAddVarTab[i], 0)) != HAL_OK) {
 8002118:	4a0b      	ldr	r2, [pc, #44]	; (8002148 <reset_error_counters+0x3c>)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002120:	2100      	movs	r1, #0
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fb38 	bl	8001798 <EE_WriteVariable>
 8002128:	4603      	mov	r3, r0
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <reset_error_counters+0x26>
			Error_Handler();
 800212e:	f001 fe4f 	bl	8003dd0 <Error_Handler>
	for (int i = 0; i < NUM_ERROR_COUNTERS; i++) {
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	3301      	adds	r3, #1
 8002136:	607b      	str	r3, [r7, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b1c      	cmp	r3, #28
 800213c:	ddec      	ble.n	8002118 <reset_error_counters+0xc>
		}
	}
}
 800213e:	bf00      	nop
 8002140:	bf00      	nop
 8002142:	3708      	adds	r7, #8
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	24000000 	.word	0x24000000

0800214c <set_previous_error>:
/**
 * @brief Sets previous error code in the EE.
 *
 * @param error Previous error code in EE is set to this.
 */
void set_previous_error(ERROR_STRUCT error) {
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	463b      	mov	r3, r7
 8002154:	e883 0003 	stmia.w	r3, {r0, r1}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], error.category)) != HAL_OK) {
 8002158:	4b0e      	ldr	r3, [pc, #56]	; (8002194 <set_previous_error+0x48>)
 800215a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800215c:	783a      	ldrb	r2, [r7, #0]
 800215e:	b292      	uxth	r2, r2
 8002160:	4611      	mov	r1, r2
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fb18 	bl	8001798 <EE_WriteVariable>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <set_previous_error+0x26>
		Error_Handler();
 800216e:	f001 fe2f 	bl	8003dd0 <Error_Handler>
	}
	if ((EE_WriteVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], error.detail)) != HAL_OK) {
 8002172:	4b08      	ldr	r3, [pc, #32]	; (8002194 <set_previous_error+0x48>)
 8002174:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002176:	787a      	ldrb	r2, [r7, #1]
 8002178:	b292      	uxth	r2, r2
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff fb0b 	bl	8001798 <EE_WriteVariable>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <set_previous_error+0x40>
		Error_Handler();
 8002188:	f001 fe22 	bl	8003dd0 <Error_Handler>
	}
}
 800218c:	bf00      	nop
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	24000000 	.word	0x24000000

08002198 <get_previous_error>:
/**
 * @brief Reads the previous error codes from EE
 *
 * @return Error populated with retrieved category and detail.
 */
ERROR_STRUCT get_previous_error() {
 8002198:	b580      	push	{r7, lr}
 800219a:	b086      	sub	sp, #24
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT prev_error;
	uint16_t category;
	uint16_t detail;

	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_CATEGORY_INDEX], &category)) != HAL_OK) {
 80021a0:	4b15      	ldr	r3, [pc, #84]	; (80021f8 <get_previous_error+0x60>)
 80021a2:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80021a4:	f107 020e 	add.w	r2, r7, #14
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f7ff faac 	bl	8001708 <EE_ReadVariable>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <get_previous_error+0x22>
		Error_Handler();
 80021b6:	f001 fe0b 	bl	8003dd0 <Error_Handler>
	}
	if ((EE_ReadVariable(VirtAddVarTab[PREV_ERROR_DETAIL_INDEX], &detail)) != HAL_OK) {
 80021ba:	4b0f      	ldr	r3, [pc, #60]	; (80021f8 <get_previous_error+0x60>)
 80021bc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80021be:	f107 020c 	add.w	r2, r7, #12
 80021c2:	4611      	mov	r1, r2
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7ff fa9f 	bl	8001708 <EE_ReadVariable>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <get_previous_error+0x3c>
		Error_Handler();
 80021d0:	f001 fdfe 	bl	8003dd0 <Error_Handler>
	}

	prev_error.category = category;
 80021d4:	89fb      	ldrh	r3, [r7, #14]
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	743b      	strb	r3, [r7, #16]
	prev_error.detail = detail;
 80021da:	89bb      	ldrh	r3, [r7, #12]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	747b      	strb	r3, [r7, #17]

	return prev_error;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	461a      	mov	r2, r3
 80021e4:	f107 0310 	add.w	r3, r7, #16
 80021e8:	cb03      	ldmia	r3!, {r0, r1}
 80021ea:	6010      	str	r0, [r2, #0]
 80021ec:	6051      	str	r1, [r2, #4]
}
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	24000000 	.word	0x24000000

080021fc <send_error_counter_packet>:
 * @brief Creates and sends a packet containing all 27 error counters.
 *
 * There is an error counter for every single category and detail.
 * This type of packet is only sent during sync.
 */
void send_error_counter_packet() {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b090      	sub	sp, #64	; 0x40
 8002200:	af00      	add	r7, sp, #0
	uint8_t buffer[ERROR_COUNTER_PACKET_SIZE];

	buffer[0] = ERROR_COUNTER_PACKET_SYNC;
 8002202:	23cc      	movs	r3, #204	; 0xcc
 8002204:	713b      	strb	r3, [r7, #4]
	buffer[1] = ERROR_COUNTER_PACKET_SYNC;
 8002206:	23cc      	movs	r3, #204	; 0xcc
 8002208:	717b      	strb	r3, [r7, #5]
	buffer[2] = ((local_cpy[EC_power_supply_rail] & 0xFF00) >> 8);
 800220a:	4b9b      	ldr	r3, [pc, #620]	; (8002478 <send_error_counter_packet+0x27c>)
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	b29b      	uxth	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	71bb      	strb	r3, [r7, #6]
	buffer[3] = (local_cpy[EC_power_supply_rail] & 0xFF);
 8002216:	4b98      	ldr	r3, [pc, #608]	; (8002478 <send_error_counter_packet+0x27c>)
 8002218:	881b      	ldrh	r3, [r3, #0]
 800221a:	b2db      	uxtb	r3, r3
 800221c:	71fb      	strb	r3, [r7, #7]
	buffer[4] = ((local_cpy[EC_seu] & 0xFF00) >> 8);
 800221e:	4b96      	ldr	r3, [pc, #600]	; (8002478 <send_error_counter_packet+0x27c>)
 8002220:	885b      	ldrh	r3, [r3, #2]
 8002222:	0a1b      	lsrs	r3, r3, #8
 8002224:	b29b      	uxth	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	723b      	strb	r3, [r7, #8]
	buffer[5] = (local_cpy[EC_seu] & 0xFF);
 800222a:	4b93      	ldr	r3, [pc, #588]	; (8002478 <send_error_counter_packet+0x27c>)
 800222c:	885b      	ldrh	r3, [r3, #2]
 800222e:	b2db      	uxtb	r3, r3
 8002230:	727b      	strb	r3, [r7, #9]
	buffer[6] = ((local_cpy[EC_peripheral] & 0xFF00) >> 8);
 8002232:	4b91      	ldr	r3, [pc, #580]	; (8002478 <send_error_counter_packet+0x27c>)
 8002234:	889b      	ldrh	r3, [r3, #4]
 8002236:	0a1b      	lsrs	r3, r3, #8
 8002238:	b29b      	uxth	r3, r3
 800223a:	b2db      	uxtb	r3, r3
 800223c:	72bb      	strb	r3, [r7, #10]
	buffer[7] = (local_cpy[EC_peripheral] & 0xFF);
 800223e:	4b8e      	ldr	r3, [pc, #568]	; (8002478 <send_error_counter_packet+0x27c>)
 8002240:	889b      	ldrh	r3, [r3, #4]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	72fb      	strb	r3, [r7, #11]
	buffer[8] = ((local_cpy[EC_brownout] & 0xFF00) >> 8);
 8002246:	4b8c      	ldr	r3, [pc, #560]	; (8002478 <send_error_counter_packet+0x27c>)
 8002248:	88db      	ldrh	r3, [r3, #6]
 800224a:	0a1b      	lsrs	r3, r3, #8
 800224c:	b29b      	uxth	r3, r3
 800224e:	b2db      	uxtb	r3, r3
 8002250:	733b      	strb	r3, [r7, #12]
	buffer[9] = (local_cpy[EC_brownout] & 0xFF);
 8002252:	4b89      	ldr	r3, [pc, #548]	; (8002478 <send_error_counter_packet+0x27c>)
 8002254:	88db      	ldrh	r3, [r3, #6]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	737b      	strb	r3, [r7, #13]
	buffer[10] = ((local_cpy[EC_watchdog] & 0xFF00) >> 8);
 800225a:	4b87      	ldr	r3, [pc, #540]	; (8002478 <send_error_counter_packet+0x27c>)
 800225c:	891b      	ldrh	r3, [r3, #8]
 800225e:	0a1b      	lsrs	r3, r3, #8
 8002260:	b29b      	uxth	r3, r3
 8002262:	b2db      	uxtb	r3, r3
 8002264:	73bb      	strb	r3, [r7, #14]
	buffer[11] = (local_cpy[EC_watchdog] & 0xFF);
 8002266:	4b84      	ldr	r3, [pc, #528]	; (8002478 <send_error_counter_packet+0x27c>)
 8002268:	891b      	ldrh	r3, [r3, #8]
 800226a:	b2db      	uxtb	r3, r3
 800226c:	73fb      	strb	r3, [r7, #15]
	buffer[12] = ((local_cpy[EC_UNDEFINED] & 0xFF00) >> 8);
 800226e:	4b82      	ldr	r3, [pc, #520]	; (8002478 <send_error_counter_packet+0x27c>)
 8002270:	895b      	ldrh	r3, [r3, #10]
 8002272:	0a1b      	lsrs	r3, r3, #8
 8002274:	b29b      	uxth	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	743b      	strb	r3, [r7, #16]
	buffer[13] = (local_cpy[EC_UNDEFINED] & 0xFF);
 800227a:	4b7f      	ldr	r3, [pc, #508]	; (8002478 <send_error_counter_packet+0x27c>)
 800227c:	895b      	ldrh	r3, [r3, #10]
 800227e:	b2db      	uxtb	r3, r3
 8002280:	747b      	strb	r3, [r7, #17]
	buffer[14] = ((local_cpy[ED_vsense] & 0xFF00) >> 8);
 8002282:	4b7d      	ldr	r3, [pc, #500]	; (8002478 <send_error_counter_packet+0x27c>)
 8002284:	899b      	ldrh	r3, [r3, #12]
 8002286:	0a1b      	lsrs	r3, r3, #8
 8002288:	b29b      	uxth	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	74bb      	strb	r3, [r7, #18]
	buffer[15] = (local_cpy[ED_vsense] & 0xFF);
 800228e:	4b7a      	ldr	r3, [pc, #488]	; (8002478 <send_error_counter_packet+0x27c>)
 8002290:	899b      	ldrh	r3, [r3, #12]
 8002292:	b2db      	uxtb	r3, r3
 8002294:	74fb      	strb	r3, [r7, #19]
	buffer[16] = ((local_cpy[ED_vrefint] & 0xFF00) >> 8);
 8002296:	4b78      	ldr	r3, [pc, #480]	; (8002478 <send_error_counter_packet+0x27c>)
 8002298:	89db      	ldrh	r3, [r3, #14]
 800229a:	0a1b      	lsrs	r3, r3, #8
 800229c:	b29b      	uxth	r3, r3
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	753b      	strb	r3, [r7, #20]
	buffer[17] = (local_cpy[ED_vrefint] & 0xFF);
 80022a2:	4b75      	ldr	r3, [pc, #468]	; (8002478 <send_error_counter_packet+0x27c>)
 80022a4:	89db      	ldrh	r3, [r3, #14]
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	757b      	strb	r3, [r7, #21]
	buffer[18] = ((local_cpy[ED_TEMP1] & 0xFF00) >> 8);
 80022aa:	4b73      	ldr	r3, [pc, #460]	; (8002478 <send_error_counter_packet+0x27c>)
 80022ac:	8a1b      	ldrh	r3, [r3, #16]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	b29b      	uxth	r3, r3
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	75bb      	strb	r3, [r7, #22]
	buffer[19] = (local_cpy[ED_TEMP1] & 0xFF);
 80022b6:	4b70      	ldr	r3, [pc, #448]	; (8002478 <send_error_counter_packet+0x27c>)
 80022b8:	8a1b      	ldrh	r3, [r3, #16]
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	75fb      	strb	r3, [r7, #23]
	buffer[20] = ((local_cpy[ED_TEMP2] & 0xFF00) >> 8);
 80022be:	4b6e      	ldr	r3, [pc, #440]	; (8002478 <send_error_counter_packet+0x27c>)
 80022c0:	8a5b      	ldrh	r3, [r3, #18]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	763b      	strb	r3, [r7, #24]
	buffer[21] = (local_cpy[ED_TEMP2] & 0xFF);
 80022ca:	4b6b      	ldr	r3, [pc, #428]	; (8002478 <send_error_counter_packet+0x27c>)
 80022cc:	8a5b      	ldrh	r3, [r3, #18]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	767b      	strb	r3, [r7, #25]
	buffer[22] = ((local_cpy[ED_TEMP3] & 0xFF00) >> 8);
 80022d2:	4b69      	ldr	r3, [pc, #420]	; (8002478 <send_error_counter_packet+0x27c>)
 80022d4:	8a9b      	ldrh	r3, [r3, #20]
 80022d6:	0a1b      	lsrs	r3, r3, #8
 80022d8:	b29b      	uxth	r3, r3
 80022da:	b2db      	uxtb	r3, r3
 80022dc:	76bb      	strb	r3, [r7, #26]
	buffer[23] = (local_cpy[ED_TEMP3] & 0xFF);
 80022de:	4b66      	ldr	r3, [pc, #408]	; (8002478 <send_error_counter_packet+0x27c>)
 80022e0:	8a9b      	ldrh	r3, [r3, #20]
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	76fb      	strb	r3, [r7, #27]
	buffer[24] = ((local_cpy[ED_TEMP4] & 0xFF00) >> 8);
 80022e6:	4b64      	ldr	r3, [pc, #400]	; (8002478 <send_error_counter_packet+0x27c>)
 80022e8:	8adb      	ldrh	r3, [r3, #22]
 80022ea:	0a1b      	lsrs	r3, r3, #8
 80022ec:	b29b      	uxth	r3, r3
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	773b      	strb	r3, [r7, #28]
	buffer[25] = (local_cpy[ED_TEMP4] & 0xFF);
 80022f2:	4b61      	ldr	r3, [pc, #388]	; (8002478 <send_error_counter_packet+0x27c>)
 80022f4:	8adb      	ldrh	r3, [r3, #22]
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	777b      	strb	r3, [r7, #29]
	buffer[26] = ((local_cpy[ED_busvmon] & 0xFF00) >> 8);
 80022fa:	4b5f      	ldr	r3, [pc, #380]	; (8002478 <send_error_counter_packet+0x27c>)
 80022fc:	8b1b      	ldrh	r3, [r3, #24]
 80022fe:	0a1b      	lsrs	r3, r3, #8
 8002300:	b29b      	uxth	r3, r3
 8002302:	b2db      	uxtb	r3, r3
 8002304:	77bb      	strb	r3, [r7, #30]
	buffer[27] = (local_cpy[ED_busvmon] & 0xFF);
 8002306:	4b5c      	ldr	r3, [pc, #368]	; (8002478 <send_error_counter_packet+0x27c>)
 8002308:	8b1b      	ldrh	r3, [r3, #24]
 800230a:	b2db      	uxtb	r3, r3
 800230c:	77fb      	strb	r3, [r7, #31]
	buffer[28] = ((local_cpy[ED_busimon] & 0xFF00) >> 8);
 800230e:	4b5a      	ldr	r3, [pc, #360]	; (8002478 <send_error_counter_packet+0x27c>)
 8002310:	8b5b      	ldrh	r3, [r3, #26]
 8002312:	0a1b      	lsrs	r3, r3, #8
 8002314:	b29b      	uxth	r3, r3
 8002316:	b2db      	uxtb	r3, r3
 8002318:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[29] = (local_cpy[ED_busimon] & 0xFF);
 800231c:	4b56      	ldr	r3, [pc, #344]	; (8002478 <send_error_counter_packet+0x27c>)
 800231e:	8b5b      	ldrh	r3, [r3, #26]
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[30] = ((local_cpy[ED_2v5] & 0xFF00) >> 8);
 8002326:	4b54      	ldr	r3, [pc, #336]	; (8002478 <send_error_counter_packet+0x27c>)
 8002328:	8b9b      	ldrh	r3, [r3, #28]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	b29b      	uxth	r3, r3
 800232e:	b2db      	uxtb	r3, r3
 8002330:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[31] = (local_cpy[ED_2v5] & 0xFF);
 8002334:	4b50      	ldr	r3, [pc, #320]	; (8002478 <send_error_counter_packet+0x27c>)
 8002336:	8b9b      	ldrh	r3, [r3, #28]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[32] = ((local_cpy[ED_3v3] & 0xFF00) >> 8);
 800233e:	4b4e      	ldr	r3, [pc, #312]	; (8002478 <send_error_counter_packet+0x27c>)
 8002340:	8bdb      	ldrh	r3, [r3, #30]
 8002342:	0a1b      	lsrs	r3, r3, #8
 8002344:	b29b      	uxth	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[33] = (local_cpy[ED_3v3] & 0xFF);
 800234c:	4b4a      	ldr	r3, [pc, #296]	; (8002478 <send_error_counter_packet+0x27c>)
 800234e:	8bdb      	ldrh	r3, [r3, #30]
 8002350:	b2db      	uxtb	r3, r3
 8002352:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[34] = ((local_cpy[ED_5v] & 0xFF00) >> 8);
 8002356:	4b48      	ldr	r3, [pc, #288]	; (8002478 <send_error_counter_packet+0x27c>)
 8002358:	8c1b      	ldrh	r3, [r3, #32]
 800235a:	0a1b      	lsrs	r3, r3, #8
 800235c:	b29b      	uxth	r3, r3
 800235e:	b2db      	uxtb	r3, r3
 8002360:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[35] = (local_cpy[ED_5v] & 0xFF);
 8002364:	4b44      	ldr	r3, [pc, #272]	; (8002478 <send_error_counter_packet+0x27c>)
 8002366:	8c1b      	ldrh	r3, [r3, #32]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[36] = ((local_cpy[ED_n3v3] & 0xFF00) >> 8);
 800236e:	4b42      	ldr	r3, [pc, #264]	; (8002478 <send_error_counter_packet+0x27c>)
 8002370:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	b29b      	uxth	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[37] = (local_cpy[ED_n3v3] & 0xFF);
 800237c:	4b3e      	ldr	r3, [pc, #248]	; (8002478 <send_error_counter_packet+0x27c>)
 800237e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002380:	b2db      	uxtb	r3, r3
 8002382:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[38] = ((local_cpy[ED_n5v] & 0xFF00) >> 8);
 8002386:	4b3c      	ldr	r3, [pc, #240]	; (8002478 <send_error_counter_packet+0x27c>)
 8002388:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800238a:	0a1b      	lsrs	r3, r3, #8
 800238c:	b29b      	uxth	r3, r3
 800238e:	b2db      	uxtb	r3, r3
 8002390:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[39] = (local_cpy[ED_n5v] & 0xFF);
 8002394:	4b38      	ldr	r3, [pc, #224]	; (8002478 <send_error_counter_packet+0x27c>)
 8002396:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002398:	b2db      	uxtb	r3, r3
 800239a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[40] = ((local_cpy[ED_15v] & 0xFF00) >> 8);
 800239e:	4b36      	ldr	r3, [pc, #216]	; (8002478 <send_error_counter_packet+0x27c>)
 80023a0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	b29b      	uxth	r3, r3
 80023a6:	b2db      	uxtb	r3, r3
 80023a8:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[41] = (local_cpy[ED_15v] & 0xFF);
 80023ac:	4b32      	ldr	r3, [pc, #200]	; (8002478 <send_error_counter_packet+0x27c>)
 80023ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[42] = ((local_cpy[ED_5vref] & 0xFF00) >> 8);
 80023b6:	4b30      	ldr	r3, [pc, #192]	; (8002478 <send_error_counter_packet+0x27c>)
 80023b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ba:	0a1b      	lsrs	r3, r3, #8
 80023bc:	b29b      	uxth	r3, r3
 80023be:	b2db      	uxtb	r3, r3
 80023c0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[43] = (local_cpy[ED_5vref] & 0xFF);
 80023c4:	4b2c      	ldr	r3, [pc, #176]	; (8002478 <send_error_counter_packet+0x27c>)
 80023c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[44] = ((local_cpy[ED_n200v] & 0xFF00) >> 8);
 80023ce:	4b2a      	ldr	r3, [pc, #168]	; (8002478 <send_error_counter_packet+0x27c>)
 80023d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d2:	0a1b      	lsrs	r3, r3, #8
 80023d4:	b29b      	uxth	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[45] = (local_cpy[ED_n200v] & 0xFF);
 80023dc:	4b26      	ldr	r3, [pc, #152]	; (8002478 <send_error_counter_packet+0x27c>)
 80023de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[46] = ((local_cpy[ED_n800v] & 0xFF00) >> 8);
 80023e6:	4b24      	ldr	r3, [pc, #144]	; (8002478 <send_error_counter_packet+0x27c>)
 80023e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[47] = (local_cpy[ED_n800v] & 0xFF);
 80023f4:	4b20      	ldr	r3, [pc, #128]	; (8002478 <send_error_counter_packet+0x27c>)
 80023f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[48] = ((local_cpy[ED_TMP1] & 0xFF00) >> 8);
 80023fe:	4b1e      	ldr	r3, [pc, #120]	; (8002478 <send_error_counter_packet+0x27c>)
 8002400:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002402:	0a1b      	lsrs	r3, r3, #8
 8002404:	b29b      	uxth	r3, r3
 8002406:	b2db      	uxtb	r3, r3
 8002408:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[49] = (local_cpy[ED_TMP1] & 0xFF);
 800240c:	4b1a      	ldr	r3, [pc, #104]	; (8002478 <send_error_counter_packet+0x27c>)
 800240e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002410:	b2db      	uxtb	r3, r3
 8002412:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[50] = ((local_cpy[ED_single_bit_error_flash] & 0xFF00) >> 8);
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <send_error_counter_packet+0x27c>)
 8002418:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800241a:	0a1b      	lsrs	r3, r3, #8
 800241c:	b29b      	uxth	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[51] = (local_cpy[ED_single_bit_error_flash] & 0xFF);
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <send_error_counter_packet+0x27c>)
 8002426:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[52] = ((local_cpy[ED_double_bit_error_flash] & 0xFF00) >> 8);
 800242e:	4b12      	ldr	r3, [pc, #72]	; (8002478 <send_error_counter_packet+0x27c>)
 8002430:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002432:	0a1b      	lsrs	r3, r3, #8
 8002434:	b29b      	uxth	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[53] = (local_cpy[ED_double_bit_error_flash] & 0xFF);
 800243c:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <send_error_counter_packet+0x27c>)
 800243e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002440:	b2db      	uxtb	r3, r3
 8002442:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[54] = ((local_cpy[ED_single_bit_error_ram] & 0xFF00) >> 8);
 8002446:	4b0c      	ldr	r3, [pc, #48]	; (8002478 <send_error_counter_packet+0x27c>)
 8002448:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	b29b      	uxth	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[55] = (local_cpy[ED_single_bit_error_ram] & 0xFF);
 8002454:	4b08      	ldr	r3, [pc, #32]	; (8002478 <send_error_counter_packet+0x27c>)
 8002456:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8002458:	b2db      	uxtb	r3, r3
 800245a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[56] = ((local_cpy[ED_double_bit_error_ram] & 0xFF00) >> 8);
 800245e:	4b06      	ldr	r3, [pc, #24]	; (8002478 <send_error_counter_packet+0x27c>)
 8002460:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002462:	0a1b      	lsrs	r3, r3, #8
 8002464:	b29b      	uxth	r3, r3
 8002466:	b2db      	uxtb	r3, r3
 8002468:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[57] = (local_cpy[ED_double_bit_error_ram] & 0xFF);
 800246c:	4b02      	ldr	r3, [pc, #8]	; (8002478 <send_error_counter_packet+0x27c>)
 800246e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002476:	e001      	b.n	800247c <send_error_counter_packet+0x280>
 8002478:	240003a4 	.word	0x240003a4
	buffer[58] = ((local_cpy[ED_UNDEFINED] & 0xFF00) >> 8);
 800247c:	4b0a      	ldr	r3, [pc, #40]	; (80024a8 <send_error_counter_packet+0x2ac>)
 800247e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	b29b      	uxth	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[59] = (local_cpy[ED_UNDEFINED] & 0xFF);
 800248a:	4b07      	ldr	r3, [pc, #28]	; (80024a8 <send_error_counter_packet+0x2ac>)
 800248c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	HAL_UART_Transmit(&huart1, buffer, ERROR_COUNTER_PACKET_SIZE, 100);
 8002494:	1d39      	adds	r1, r7, #4
 8002496:	2364      	movs	r3, #100	; 0x64
 8002498:	223c      	movs	r2, #60	; 0x3c
 800249a:	4804      	ldr	r0, [pc, #16]	; (80024ac <send_error_counter_packet+0x2b0>)
 800249c:	f013 f86a 	bl	8015574 <HAL_UART_Transmit>
}
 80024a0:	bf00      	nop
 80024a2:	3740      	adds	r7, #64	; 0x40
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	240003a4 	.word	0x240003a4
 80024ac:	240021c8 	.word	0x240021c8

080024b0 <send_previous_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the previous error.
 *
 * This type of packet is only sent on request.
 */
void send_previous_error_packet() {
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
	ERROR_STRUCT prev_error;
	uint8_t buffer[PREV_ERROR_PACKET_SIZE];

	prev_error = get_previous_error();
 80024b6:	f107 0308 	add.w	r3, r7, #8
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7ff fe6c 	bl	8002198 <get_previous_error>

	buffer[0] = PREV_ERROR_PACKET_SYNC;
 80024c0:	23aa      	movs	r3, #170	; 0xaa
 80024c2:	713b      	strb	r3, [r7, #4]
	buffer[1] = PREV_ERROR_PACKET_SYNC;
 80024c4:	23aa      	movs	r3, #170	; 0xaa
 80024c6:	717b      	strb	r3, [r7, #5]
	buffer[2] = prev_error.category;
 80024c8:	7a3b      	ldrb	r3, [r7, #8]
 80024ca:	71bb      	strb	r3, [r7, #6]
	buffer[3] = prev_error.detail;
 80024cc:	7a7b      	ldrb	r3, [r7, #9]
 80024ce:	71fb      	strb	r3, [r7, #7]

	HAL_UART_Transmit(&huart1, buffer, PREV_ERROR_PACKET_SIZE, 100);
 80024d0:	1d39      	adds	r1, r7, #4
 80024d2:	2364      	movs	r3, #100	; 0x64
 80024d4:	2204      	movs	r2, #4
 80024d6:	4803      	ldr	r0, [pc, #12]	; (80024e4 <send_previous_error_packet+0x34>)
 80024d8:	f013 f84c 	bl	8015574 <HAL_UART_Transmit>
}
 80024dc:	bf00      	nop
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	240021c8 	.word	0x240021c8

080024e8 <send_current_error_packet>:
/**
 * @brief Creates and sends a packet containing the error codes for the current error.
 *
 * This type of packet is only sent when handle_error() is called.
 */
void send_current_error_packet(ERROR_STRUCT error) {
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b086      	sub	sp, #24
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	463b      	mov	r3, r7
 80024f0:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buffer[CURRENT_ERROR_PACKET_SIZE];

	// If the error isn't a power supply rail, set the out of bounds values to 0
	if (error.category != EC_power_supply_rail) {
 80024f4:	783b      	ldrb	r3, [r7, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <send_current_error_packet+0x1e>
		error.OOB_1 = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	807b      	strh	r3, [r7, #2]
		error.OOB_2 = 0;
 80024fe:	2300      	movs	r3, #0
 8002500:	80bb      	strh	r3, [r7, #4]
		error.OOB_3 = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	80fb      	strh	r3, [r7, #6]
	}

	buffer[0] = CURRENT_ERROR_PACKET_SYNC;
 8002506:	23bb      	movs	r3, #187	; 0xbb
 8002508:	733b      	strb	r3, [r7, #12]
	buffer[1] = CURRENT_ERROR_PACKET_SYNC;
 800250a:	23bb      	movs	r3, #187	; 0xbb
 800250c:	737b      	strb	r3, [r7, #13]
	buffer[2] = error.category;
 800250e:	783b      	ldrb	r3, [r7, #0]
 8002510:	73bb      	strb	r3, [r7, #14]
	buffer[3] = error.detail;
 8002512:	787b      	ldrb	r3, [r7, #1]
 8002514:	73fb      	strb	r3, [r7, #15]
	buffer[4] = ((error.OOB_1 & 0xFF00) >> 8);
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	b29b      	uxth	r3, r3
 800251c:	b2db      	uxtb	r3, r3
 800251e:	743b      	strb	r3, [r7, #16]
	buffer[5] = (error.OOB_1 & 0xFF);
 8002520:	887b      	ldrh	r3, [r7, #2]
 8002522:	b2db      	uxtb	r3, r3
 8002524:	747b      	strb	r3, [r7, #17]
	buffer[6] = ((error.OOB_2 & 0xFF00) >> 8);
 8002526:	88bb      	ldrh	r3, [r7, #4]
 8002528:	0a1b      	lsrs	r3, r3, #8
 800252a:	b29b      	uxth	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	74bb      	strb	r3, [r7, #18]
	buffer[7] = (error.OOB_2 & 0xFF);
 8002530:	88bb      	ldrh	r3, [r7, #4]
 8002532:	b2db      	uxtb	r3, r3
 8002534:	74fb      	strb	r3, [r7, #19]
	buffer[8] = ((error.OOB_3 & 0xFF00) >> 8);
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	0a1b      	lsrs	r3, r3, #8
 800253a:	b29b      	uxth	r3, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	753b      	strb	r3, [r7, #20]
	buffer[9] = (error.OOB_3 & 0xFF);
 8002540:	88fb      	ldrh	r3, [r7, #6]
 8002542:	b2db      	uxtb	r3, r3
 8002544:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, CURRENT_ERROR_PACKET_SIZE, 100);
 8002546:	f107 010c 	add.w	r1, r7, #12
 800254a:	2364      	movs	r3, #100	; 0x64
 800254c:	220a      	movs	r2, #10
 800254e:	4803      	ldr	r0, [pc, #12]	; (800255c <send_current_error_packet+0x74>)
 8002550:	f013 f810 	bl	8015574 <HAL_UART_Transmit>
}
 8002554:	bf00      	nop
 8002556:	3718      	adds	r7, #24
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	240021c8 	.word	0x240021c8

08002560 <send_junk_packet>:
/**
 * @brief Creates and sends a junk packet containing all 0xCE.
 *
 * Used to clear out the buffer on the OBC.
 */
void send_junk_packet() {	// TODO: Figure out if we still need this.
 8002560:	b580      	push	{r7, lr}
 8002562:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 8002566:	af00      	add	r7, sp, #0
	uint8_t buffer[JUNK_PACKET_SIZE];

	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 8002568:	2300      	movs	r3, #0
 800256a:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800256e:	e00d      	b.n	800258c <send_junk_packet+0x2c>
		buffer[i] = 0xCE;
 8002570:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8002574:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 8002578:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 800257c:	4413      	add	r3, r2
 800257e:	22ce      	movs	r2, #206	; 0xce
 8002580:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < JUNK_PACKET_SIZE; i++) {
 8002582:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002586:	3301      	adds	r3, #1
 8002588:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 800258c:	f8d7 3404 	ldr.w	r3, [r7, #1028]	; 0x404
 8002590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002594:	dbec      	blt.n	8002570 <send_junk_packet+0x10>
	}

	HAL_UART_Transmit(&huart1, buffer, JUNK_PACKET_SIZE, 100);
 8002596:	1d39      	adds	r1, r7, #4
 8002598:	2364      	movs	r3, #100	; 0x64
 800259a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800259e:	4804      	ldr	r0, [pc, #16]	; (80025b0 <send_junk_packet+0x50>)
 80025a0:	f012 ffe8 	bl	8015574 <HAL_UART_Transmit>
}
 80025a4:	bf00      	nop
 80025a6:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	240021c8 	.word	0x240021c8

080025b4 <emergency_shutdown>:


void emergency_shutdown() {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
	ERPA_ENABLED = 0;
 80025ba:	4b21      	ldr	r3, [pc, #132]	; (8002640 <emergency_shutdown+0x8c>)
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
	TIM2->CCR4 = 0;
 80025c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80025c4:	2200      	movs	r2, #0
 80025c6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 80025c8:	2100      	movs	r1, #0
 80025ca:	481e      	ldr	r0, [pc, #120]	; (8002644 <emergency_shutdown+0x90>)
 80025cc:	f011 fda2 	bl	8014114 <HAL_TIM_OC_Stop_IT>
	HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 80025d0:	210c      	movs	r1, #12
 80025d2:	481d      	ldr	r0, [pc, #116]	; (8002648 <emergency_shutdown+0x94>)
 80025d4:	f011 fd9e 	bl	8014114 <HAL_TIM_OC_Stop_IT>

	HK_ENABLED = 0;
 80025d8:	4b1c      	ldr	r3, [pc, #112]	; (800264c <emergency_shutdown+0x98>)
 80025da:	2200      	movs	r2, #0
 80025dc:	701a      	strb	r2, [r3, #0]
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 80025de:	2100      	movs	r1, #0
 80025e0:	481b      	ldr	r0, [pc, #108]	; (8002650 <emergency_shutdown+0x9c>)
 80025e2:	f006 f86d 	bl	80086c0 <HAL_DAC_Stop_DMA>


	// Telling rail monitor which voltages are now disabled
	for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 80025e6:	2311      	movs	r3, #17
 80025e8:	607b      	str	r3, [r7, #4]
 80025ea:	e008      	b.n	80025fe <emergency_shutdown+0x4a>
		set_rail_monitor_enable(i, 0);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	2100      	movs	r1, #0
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 ff52 	bl	800649c <set_rail_monitor_enable>
	for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	607b      	str	r3, [r7, #4]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2b05      	cmp	r3, #5
 8002602:	dcf3      	bgt.n	80025ec <emergency_shutdown+0x38>
	}

	// Disabling all voltages
	for (int i = 8; i >= 0; i--) {
 8002604:	2308      	movs	r3, #8
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	e00f      	b.n	800262a <emergency_shutdown+0x76>
		HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <emergency_shutdown+0xa0>)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002612:	4a10      	ldr	r2, [pc, #64]	; (8002654 <emergency_shutdown+0xa0>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4413      	add	r3, r2
 800261a:	889b      	ldrh	r3, [r3, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	4619      	mov	r1, r3
 8002620:	f00a f808 	bl	800c634 <HAL_GPIO_WritePin>
	for (int i = 8; i >= 0; i--) {
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	3b01      	subs	r3, #1
 8002628:	603b      	str	r3, [r7, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	daec      	bge.n	800260a <emergency_shutdown+0x56>
	}
	IDLING = 1;
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <emergency_shutdown+0xa4>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
}
 8002636:	bf00      	nop
 8002638:	3708      	adds	r7, #8
 800263a:	46bd      	mov	sp, r7
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	24001d55 	.word	0x24001d55
 8002644:	240020e4 	.word	0x240020e4
 8002648:	24002130 	.word	0x24002130
 800264c:	24001d54 	.word	0x24001d54
 8002650:	24000314 	.word	0x24000314
 8002654:	0801c65c 	.word	0x0801c65c
 8002658:	240000c4 	.word	0x240000c4

0800265c <vApplicationTickHook>:
void vApplicationTickHook(void);
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	uptime_millis++;
 8002660:	4b04      	ldr	r3, [pc, #16]	; (8002674 <vApplicationTickHook+0x18>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	3301      	adds	r3, #1
 8002666:	4a03      	ldr	r2, [pc, #12]	; (8002674 <vApplicationTickHook+0x18>)
 8002668:	6013      	str	r3, [r2, #0]

}
 800266a:	bf00      	nop
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr
 8002674:	24001d58 	.word	0x24001d58

08002678 <vApplicationStackOverflowHook>:
/* USER CODE END 3 */

/* USER CODE BEGIN 4 */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr
	...

08002690 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002690:	b580      	push	{r7, lr}
 8002692:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8002694:	4a28      	ldr	r2, [pc, #160]	; (8002738 <MX_FREERTOS_Init+0xa8>)
 8002696:	2100      	movs	r1, #0
 8002698:	4828      	ldr	r0, [pc, #160]	; (800273c <MX_FREERTOS_Init+0xac>)
 800269a:	f015 fdc3 	bl	8018224 <osThreadNew>
 800269e:	4603      	mov	r3, r0
 80026a0:	4a27      	ldr	r2, [pc, #156]	; (8002740 <MX_FREERTOS_Init+0xb0>)
 80026a2:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 80026a4:	4a27      	ldr	r2, [pc, #156]	; (8002744 <MX_FREERTOS_Init+0xb4>)
 80026a6:	2100      	movs	r1, #0
 80026a8:	4827      	ldr	r0, [pc, #156]	; (8002748 <MX_FREERTOS_Init+0xb8>)
 80026aa:	f015 fdbb 	bl	8018224 <osThreadNew>
 80026ae:	4603      	mov	r3, r0
 80026b0:	4a26      	ldr	r2, [pc, #152]	; (800274c <MX_FREERTOS_Init+0xbc>)
 80026b2:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 80026b4:	4a26      	ldr	r2, [pc, #152]	; (8002750 <MX_FREERTOS_Init+0xc0>)
 80026b6:	2100      	movs	r1, #0
 80026b8:	4826      	ldr	r0, [pc, #152]	; (8002754 <MX_FREERTOS_Init+0xc4>)
 80026ba:	f015 fdb3 	bl	8018224 <osThreadNew>
 80026be:	4603      	mov	r3, r0
 80026c0:	4a25      	ldr	r2, [pc, #148]	; (8002758 <MX_FREERTOS_Init+0xc8>)
 80026c2:	6013      	str	r3, [r2, #0]

  /* creation of AUTOINIT_task */
  AUTOINIT_taskHandle = osThreadNew(AUTOINIT_init, NULL, &AUTOINIT_task_attributes);
 80026c4:	4a25      	ldr	r2, [pc, #148]	; (800275c <MX_FREERTOS_Init+0xcc>)
 80026c6:	2100      	movs	r1, #0
 80026c8:	4825      	ldr	r0, [pc, #148]	; (8002760 <MX_FREERTOS_Init+0xd0>)
 80026ca:	f015 fdab 	bl	8018224 <osThreadNew>
 80026ce:	4603      	mov	r3, r0
 80026d0:	4a24      	ldr	r2, [pc, #144]	; (8002764 <MX_FREERTOS_Init+0xd4>)
 80026d2:	6013      	str	r3, [r2, #0]

  /* creation of AUTODEINIT_task */
  AUTODEINIT_taskHandle = osThreadNew(AUTODEINIT_init, NULL, &AUTODEINIT_task_attributes);
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <MX_FREERTOS_Init+0xd8>)
 80026d6:	2100      	movs	r1, #0
 80026d8:	4824      	ldr	r0, [pc, #144]	; (800276c <MX_FREERTOS_Init+0xdc>)
 80026da:	f015 fda3 	bl	8018224 <osThreadNew>
 80026de:	4603      	mov	r3, r0
 80026e0:	4a23      	ldr	r2, [pc, #140]	; (8002770 <MX_FREERTOS_Init+0xe0>)
 80026e2:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 80026e4:	4a23      	ldr	r2, [pc, #140]	; (8002774 <MX_FREERTOS_Init+0xe4>)
 80026e6:	2100      	movs	r1, #0
 80026e8:	4823      	ldr	r0, [pc, #140]	; (8002778 <MX_FREERTOS_Init+0xe8>)
 80026ea:	f015 fd9b 	bl	8018224 <osThreadNew>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4a22      	ldr	r2, [pc, #136]	; (800277c <MX_FREERTOS_Init+0xec>)
 80026f2:	6013      	str	r3, [r2, #0]

  /* creation of STOP_task */
  STOP_taskHandle = osThreadNew(STOP_init, NULL, &STOP_task_attributes);
 80026f4:	4a22      	ldr	r2, [pc, #136]	; (8002780 <MX_FREERTOS_Init+0xf0>)
 80026f6:	2100      	movs	r1, #0
 80026f8:	4822      	ldr	r0, [pc, #136]	; (8002784 <MX_FREERTOS_Init+0xf4>)
 80026fa:	f015 fd93 	bl	8018224 <osThreadNew>
 80026fe:	4603      	mov	r3, r0
 8002700:	4a21      	ldr	r2, [pc, #132]	; (8002788 <MX_FREERTOS_Init+0xf8>)
 8002702:	6013      	str	r3, [r2, #0]

  /* creation of Science_task */
  Science_taskHandle = osThreadNew(Science_init, NULL, &Science_task_attributes);
 8002704:	4a21      	ldr	r2, [pc, #132]	; (800278c <MX_FREERTOS_Init+0xfc>)
 8002706:	2100      	movs	r1, #0
 8002708:	4821      	ldr	r0, [pc, #132]	; (8002790 <MX_FREERTOS_Init+0x100>)
 800270a:	f015 fd8b 	bl	8018224 <osThreadNew>
 800270e:	4603      	mov	r3, r0
 8002710:	4a20      	ldr	r2, [pc, #128]	; (8002794 <MX_FREERTOS_Init+0x104>)
 8002712:	6013      	str	r3, [r2, #0]

  /* creation of Idle_task */
  Idle_taskHandle = osThreadNew(Idle_init, NULL, &Idle_task_attributes);
 8002714:	4a20      	ldr	r2, [pc, #128]	; (8002798 <MX_FREERTOS_Init+0x108>)
 8002716:	2100      	movs	r1, #0
 8002718:	4820      	ldr	r0, [pc, #128]	; (800279c <MX_FREERTOS_Init+0x10c>)
 800271a:	f015 fd83 	bl	8018224 <osThreadNew>
 800271e:	4603      	mov	r3, r0
 8002720:	4a1f      	ldr	r2, [pc, #124]	; (80027a0 <MX_FREERTOS_Init+0x110>)
 8002722:	6013      	str	r3, [r2, #0]

  /* creation of Sync_task */
  Sync_taskHandle = osThreadNew(Sync_init, NULL, &Sync_task_attributes);
 8002724:	4a1f      	ldr	r2, [pc, #124]	; (80027a4 <MX_FREERTOS_Init+0x114>)
 8002726:	2100      	movs	r1, #0
 8002728:	481f      	ldr	r0, [pc, #124]	; (80027a8 <MX_FREERTOS_Init+0x118>)
 800272a:	f015 fd7b 	bl	8018224 <osThreadNew>
 800272e:	4603      	mov	r3, r0
 8002730:	4a1e      	ldr	r2, [pc, #120]	; (80027ac <MX_FREERTOS_Init+0x11c>)
 8002732:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002734:	bf00      	nop
 8002736:	bd80      	pop	{r7, pc}
 8002738:	0801c4f4 	.word	0x0801c4f4
 800273c:	080027b1 	.word	0x080027b1
 8002740:	240003f4 	.word	0x240003f4
 8002744:	0801c518 	.word	0x0801c518
 8002748:	080027d9 	.word	0x080027d9
 800274c:	24000654 	.word	0x24000654
 8002750:	0801c53c 	.word	0x0801c53c
 8002754:	08002801 	.word	0x08002801
 8002758:	240008b4 	.word	0x240008b4
 800275c:	0801c560 	.word	0x0801c560
 8002760:	08002829 	.word	0x08002829
 8002764:	24000b14 	.word	0x24000b14
 8002768:	0801c584 	.word	0x0801c584
 800276c:	080028a1 	.word	0x080028a1
 8002770:	24000d74 	.word	0x24000d74
 8002774:	0801c5a8 	.word	0x0801c5a8
 8002778:	08002919 	.word	0x08002919
 800277c:	24000fd4 	.word	0x24000fd4
 8002780:	0801c5cc 	.word	0x0801c5cc
 8002784:	0800298d 	.word	0x0800298d
 8002788:	24001234 	.word	0x24001234
 800278c:	0801c5f0 	.word	0x0801c5f0
 8002790:	080029dd 	.word	0x080029dd
 8002794:	24001494 	.word	0x24001494
 8002798:	0801c614 	.word	0x0801c614
 800279c:	08002add 	.word	0x08002add
 80027a0:	240016f4 	.word	0x240016f4
 80027a4:	0801c638 	.word	0x0801c638
 80027a8:	08002bb1 	.word	0x08002bb1
 80027ac:	24001954 	.word	0x24001954

080027b0 <PMT_init>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN PMT_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <PMT_init+0x24>)
 80027ba:	6818      	ldr	r0, [r3, #0]
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027c0:	2200      	movs	r2, #0
 80027c2:	2101      	movs	r1, #1
 80027c4:	f015 fef2 	bl	80185ac <osEventFlagsWait>

		create_pmt_packet();
 80027c8:	f001 fb12 	bl	8003df0 <create_pmt_packet>

		osThreadYield();
 80027cc:	f015 fdbc 	bl	8018348 <osThreadYield>
		osEventFlagsWait(packet_event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80027d0:	e7f2      	b.n	80027b8 <PMT_init+0x8>
 80027d2:	bf00      	nop
 80027d4:	24001d08 	.word	0x24001d08

080027d8 <ERPA_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <ERPA_init+0x24>)
 80027e2:	6818      	ldr	r0, [r3, #0]
 80027e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80027e8:	2200      	movs	r2, #0
 80027ea:	2102      	movs	r1, #2
 80027ec:	f015 fede 	bl	80185ac <osEventFlagsWait>

		create_erpa_packet();
 80027f0:	f001 fb44 	bl	8003e7c <create_erpa_packet>

		osThreadYield();
 80027f4:	f015 fda8 	bl	8018348 <osThreadYield>
		osEventFlagsWait(packet_event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80027f8:	e7f2      	b.n	80027e0 <ERPA_init+0x8>
 80027fa:	bf00      	nop
 80027fc:	24001d08 	.word	0x24001d08

08002800 <HK_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */
  /* Infinite loop */
	for (;;) {
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002808:	4b06      	ldr	r3, [pc, #24]	; (8002824 <HK_init+0x24>)
 800280a:	6818      	ldr	r0, [r3, #0]
 800280c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002810:	2200      	movs	r2, #0
 8002812:	2104      	movs	r1, #4
 8002814:	f015 feca 	bl	80185ac <osEventFlagsWait>

		create_hk_packet();
 8002818:	f001 fb8e 	bl	8003f38 <create_hk_packet>

		osThreadYield();
 800281c:	f015 fd94 	bl	8018348 <osThreadYield>
		osEventFlagsWait(packet_event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002820:	e7f2      	b.n	8002808 <HK_init+0x8>
 8002822:	bf00      	nop
 8002824:	24001d08 	.word	0x24001d08

08002828 <AUTOINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTOINIT_init */
void AUTOINIT_init(void *argument)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTOINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002830:	4b19      	ldr	r3, [pc, #100]	; (8002898 <AUTOINIT_init+0x70>)
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002838:	2200      	movs	r2, #0
 800283a:	2104      	movs	r1, #4
 800283c:	f015 feb6 	bl	80185ac <osEventFlagsWait>

		// Enabling all voltages from SDN1 to 15V (inclusive)
		for (int i = 0; i < 7; i++) {
 8002840:	2300      	movs	r3, #0
 8002842:	60fb      	str	r3, [r7, #12]
 8002844:	e012      	b.n	800286c <AUTOINIT_init+0x44>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002846:	4a15      	ldr	r2, [pc, #84]	; (800289c <AUTOINIT_init+0x74>)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 800284e:	4a13      	ldr	r2, [pc, #76]	; (800289c <AUTOINIT_init+0x74>)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	00db      	lsls	r3, r3, #3
 8002854:	4413      	add	r3, r2
 8002856:	889b      	ldrh	r3, [r3, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	4619      	mov	r1, r3
 800285c:	f009 feea 	bl	800c634 <HAL_GPIO_WritePin>
			osDelay(100);
 8002860:	2064      	movs	r0, #100	; 0x64
 8002862:	f015 fdd3 	bl	801840c <osDelay>
		for (int i = 0; i < 7; i++) {
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	3301      	adds	r3, #1
 800286a:	60fb      	str	r3, [r7, #12]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2b06      	cmp	r3, #6
 8002870:	dde9      	ble.n	8002846 <AUTOINIT_init+0x1e>
		}

		// Telling rail monitor which rails are now enabled
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002872:	2308      	movs	r3, #8
 8002874:	60bb      	str	r3, [r7, #8]
 8002876:	e008      	b.n	800288a <AUTOINIT_init+0x62>
			set_rail_monitor_enable(i, 1);
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	2101      	movs	r1, #1
 800287e:	4618      	mov	r0, r3
 8002880:	f003 fe0c 	bl	800649c <set_rail_monitor_enable>
		for (int i = RAIL_2v5; i <= RAIL_15v; i++){
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3301      	adds	r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2b0d      	cmp	r3, #13
 800288e:	ddf3      	ble.n	8002878 <AUTOINIT_init+0x50>
		}
		osThreadYield();
 8002890:	f015 fd5a 	bl	8018348 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTOINIT_FLAG, osFlagsWaitAny, osWaitForever);
 8002894:	e7cc      	b.n	8002830 <AUTOINIT_init+0x8>
 8002896:	bf00      	nop
 8002898:	24001d0c 	.word	0x24001d0c
 800289c:	0801c65c 	.word	0x0801c65c

080028a0 <AUTODEINIT_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_AUTODEINIT_init */
void AUTODEINIT_init(void *argument)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN AUTODEINIT_init */
  /* Infinite loop */
	for (;;) {

		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 80028a8:	4b19      	ldr	r3, [pc, #100]	; (8002910 <AUTODEINIT_init+0x70>)
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028b0:	2200      	movs	r2, #0
 80028b2:	2108      	movs	r1, #8
 80028b4:	f015 fe7a 	bl	80185ac <osEventFlagsWait>

		// Telling rail monitor which rails are now disabled
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80028b8:	230d      	movs	r3, #13
 80028ba:	60fb      	str	r3, [r7, #12]
 80028bc:	e008      	b.n	80028d0 <AUTODEINIT_init+0x30>
			set_rail_monitor_enable(i, 0);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2100      	movs	r1, #0
 80028c4:	4618      	mov	r0, r3
 80028c6:	f003 fde9 	bl	800649c <set_rail_monitor_enable>
		for (int i = RAIL_15v; i >= RAIL_2v5; i--){
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3b01      	subs	r3, #1
 80028ce:	60fb      	str	r3, [r7, #12]
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2b07      	cmp	r3, #7
 80028d4:	dcf3      	bgt.n	80028be <AUTODEINIT_init+0x1e>
		}

		// Disabling all voltages from 15V to SDN1 (inclusive)
		for (int i = 6; i >= 0; i--) {
 80028d6:	2306      	movs	r3, #6
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	e012      	b.n	8002902 <AUTODEINIT_init+0x62>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <AUTODEINIT_init+0x74>)
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80028e4:	4a0b      	ldr	r2, [pc, #44]	; (8002914 <AUTODEINIT_init+0x74>)
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4413      	add	r3, r2
 80028ec:	889b      	ldrh	r3, [r3, #4]
 80028ee:	2200      	movs	r2, #0
 80028f0:	4619      	mov	r1, r3
 80028f2:	f009 fe9f 	bl	800c634 <HAL_GPIO_WritePin>
			osDelay(100);
 80028f6:	2064      	movs	r0, #100	; 0x64
 80028f8:	f015 fd88 	bl	801840c <osDelay>
		for (int i = 6; i >= 0; i--) {
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3b01      	subs	r3, #1
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	2b00      	cmp	r3, #0
 8002906:	dae9      	bge.n	80028dc <AUTODEINIT_init+0x3c>
		}


		osThreadYield();
 8002908:	f015 fd1e 	bl	8018348 <osThreadYield>
		osEventFlagsWait(utility_event_flags, AUTODEINIT_FLAG, osFlagsWaitAny, osWaitForever);
 800290c:	e7cc      	b.n	80028a8 <AUTODEINIT_init+0x8>
 800290e:	bf00      	nop
 8002910:	24001d0c 	.word	0x24001d0c
 8002914:	0801c65c 	.word	0x0801c65c

08002918 <Voltage_Monitor_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	uint8_t rails_in_bound = 1;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002924:	4b16      	ldr	r3, [pc, #88]	; (8002980 <Voltage_Monitor_init+0x68>)
 8002926:	6818      	ldr	r0, [r3, #0]
 8002928:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800292c:	2200      	movs	r2, #0
 800292e:	2101      	movs	r1, #1
 8002930:	f015 fe3c 	bl	80185ac <osEventFlagsWait>
	  set_rail_monitor();
 8002934:	f003 fdce 	bl	80064d4 <set_rail_monitor>
	  rails_in_bound = monitor_rails();
 8002938:	f003 feb6 	bl	80066a8 <monitor_rails>
 800293c:	4603      	mov	r3, r0
 800293e:	73fb      	strb	r3, [r7, #15]
	  if (!rails_in_bound && !IDLING) {
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ee      	bne.n	8002924 <Voltage_Monitor_init+0xc>
 8002946:	4b0f      	ldr	r3, [pc, #60]	; (8002984 <Voltage_Monitor_init+0x6c>)
 8002948:	781b      	ldrb	r3, [r3, #0]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e9      	bne.n	8002924 <Voltage_Monitor_init+0xc>
		  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 8002950:	4b0d      	ldr	r3, [pc, #52]	; (8002988 <Voltage_Monitor_init+0x70>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2102      	movs	r1, #2
 8002956:	4618      	mov	r0, r3
 8002958:	f015 fdb2 	bl	80184c0 <osEventFlagsSet>
		  while (!IDLING) {};
 800295c:	bf00      	nop
 800295e:	4b09      	ldr	r3, [pc, #36]	; (8002984 <Voltage_Monitor_init+0x6c>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b00      	cmp	r3, #0
 8002966:	d0fa      	beq.n	800295e <Voltage_Monitor_init+0x46>
		  osDelay(1000);
 8002968:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800296c:	f015 fd4e 	bl	801840c <osDelay>
		  osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 8002970:	4b05      	ldr	r3, [pc, #20]	; (8002988 <Voltage_Monitor_init+0x70>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	2101      	movs	r1, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f015 fda2 	bl	80184c0 <osEventFlagsSet>
	  osEventFlagsWait(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID, osFlagsWaitAny, osWaitForever);
 800297c:	e7d2      	b.n	8002924 <Voltage_Monitor_init+0xc>
 800297e:	bf00      	nop
 8002980:	24001d0c 	.word	0x24001d0c
 8002984:	240000c4 	.word	0x240000c4
 8002988:	24001d10 	.word	0x24001d10

0800298c <STOP_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_STOP_init */
void STOP_init(void *argument)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN STOP_init */
  /* Infinite loop */
  for(;;)
  {
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 8002994:	4b0e      	ldr	r3, [pc, #56]	; (80029d0 <STOP_init+0x44>)
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800299c:	2200      	movs	r2, #0
 800299e:	2102      	movs	r1, #2
 80029a0:	f015 fe04 	bl	80185ac <osEventFlagsWait>
	  osEventFlagsClear(utility_event_flags, STOP_FLAG);
 80029a4:	4b0a      	ldr	r3, [pc, #40]	; (80029d0 <STOP_init+0x44>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2102      	movs	r1, #2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f015 fdcc 	bl	8018548 <osEventFlagsClear>

	  osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 80029b0:	4b08      	ldr	r3, [pc, #32]	; (80029d4 <STOP_init+0x48>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	2102      	movs	r1, #2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f015 fd82 	bl	80184c0 <osEventFlagsSet>
	  while (!IDLING) {};
 80029bc:	bf00      	nop
 80029be:	4b06      	ldr	r3, [pc, #24]	; (80029d8 <STOP_init+0x4c>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d0fa      	beq.n	80029be <STOP_init+0x32>

	  enter_stop();
 80029c8:	f001 f9c6 	bl	8003d58 <enter_stop>
	  osEventFlagsWait(utility_event_flags, STOP_FLAG, osFlagsWaitAny,osWaitForever);
 80029cc:	e7e2      	b.n	8002994 <STOP_init+0x8>
 80029ce:	bf00      	nop
 80029d0:	24001d0c 	.word	0x24001d0c
 80029d4:	24001d10 	.word	0x24001d10
 80029d8:	240000c4 	.word	0x240000c4

080029dc <Science_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Science_init */
void Science_init(void *argument)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b086      	sub	sp, #24
 80029e0:	af02      	add	r7, sp, #8
 80029e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Science_init */

	/* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 80029e4:	4b32      	ldr	r3, [pc, #200]	; (8002ab0 <Science_init+0xd4>)
 80029e6:	6818      	ldr	r0, [r3, #0]
 80029e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ec:	2200      	movs	r2, #0
 80029ee:	2101      	movs	r1, #1
 80029f0:	f015 fddc 	bl	80185ac <osEventFlagsWait>
		osThreadSuspend(Voltage_MonitorHandle);
 80029f4:	4b2f      	ldr	r3, [pc, #188]	; (8002ab4 <Science_init+0xd8>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f015 fcc5 	bl	8018388 <osThreadSuspend>
		IDLING = 0;
 80029fe:	4b2e      	ldr	r3, [pc, #184]	; (8002ab8 <Science_init+0xdc>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
		// Enabling all voltages
		for (int i = 0; i < 9; i++) {
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e012      	b.n	8002a30 <Science_init+0x54>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_SET);
 8002a0a:	4a2c      	ldr	r2, [pc, #176]	; (8002abc <Science_init+0xe0>)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002a12:	4a2a      	ldr	r2, [pc, #168]	; (8002abc <Science_init+0xe0>)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	4413      	add	r3, r2
 8002a1a:	889b      	ldrh	r3, [r3, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	4619      	mov	r1, r3
 8002a20:	f009 fe08 	bl	800c634 <HAL_GPIO_WritePin>
			osDelay(100);
 8002a24:	2064      	movs	r0, #100	; 0x64
 8002a26:	f015 fcf1 	bl	801840c <osDelay>
		for (int i = 0; i < 9; i++) {
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	dde9      	ble.n	8002a0a <Science_init+0x2e>
		}

		// Telling rail monitor which voltages are now enabled
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++) {
 8002a36:	2306      	movs	r3, #6
 8002a38:	60bb      	str	r3, [r7, #8]
 8002a3a:	e008      	b.n	8002a4e <Science_init+0x72>
			set_rail_monitor_enable(i, 1);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	2101      	movs	r1, #1
 8002a42:	4618      	mov	r0, r3
 8002a44:	f003 fd2a 	bl	800649c <set_rail_monitor_enable>
		for (int i = RAIL_busvmon; i <= RAIL_TMP1; i++) {
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	2b11      	cmp	r3, #17
 8002a52:	ddf3      	ble.n	8002a3c <Science_init+0x60>
		}
		osThreadResume(Voltage_MonitorHandle);
 8002a54:	4b17      	ldr	r3, [pc, #92]	; (8002ab4 <Science_init+0xd8>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f015 fcb6 	bl	80183ca <osThreadResume>
  __ASM volatile ("cpsid i" : : : "memory");
 8002a5e:	b672      	cpsid	i
}
 8002a60:	bf00      	nop

		__disable_irq();

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);	// Enable auto sweep (doesn't start until ERPA timer is started)
 8002a62:	2300      	movs	r3, #0
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	2320      	movs	r3, #32
 8002a68:	4a15      	ldr	r2, [pc, #84]	; (8002ac0 <Science_init+0xe4>)
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	4815      	ldr	r0, [pc, #84]	; (8002ac4 <Science_init+0xe8>)
 8002a6e:	f005 fd67 	bl	8008540 <HAL_DAC_Start_DMA>
		HK_ENABLED = 1;
 8002a72:	4b15      	ldr	r3, [pc, #84]	; (8002ac8 <Science_init+0xec>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	701a      	strb	r2, [r3, #0]
		ERPA_ENABLED = 1;
 8002a78:	4b14      	ldr	r3, [pc, #80]	; (8002acc <Science_init+0xf0>)
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	701a      	strb	r2, [r3, #0]
		uptime_millis = 0;
 8002a7e:	4b14      	ldr	r3, [pc, #80]	; (8002ad0 <Science_init+0xf4>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	601a      	str	r2, [r3, #0]
		reset_packet_sequence_numbers();
 8002a84:	f001 fb9a 	bl	80041bc <reset_packet_sequence_numbers>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8002a88:	4b12      	ldr	r3, [pc, #72]	; (8002ad4 <Science_init+0xf8>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	2104      	movs	r1, #4
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f015 fd16 	bl	80184c0 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 8002a94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a98:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002a9c:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);			// PMT packet on
 8002a9e:	2100      	movs	r1, #0
 8002aa0:	480d      	ldr	r0, [pc, #52]	; (8002ad8 <Science_init+0xfc>)
 8002aa2:	f011 f9dd 	bl	8013e60 <HAL_TIM_OC_Start_IT>
  __ASM volatile ("cpsie i" : : : "memory");
 8002aa6:	b662      	cpsie	i
}
 8002aa8:	bf00      	nop

		__enable_irq();

		// Yield thread control
		osThreadYield();
 8002aaa:	f015 fc4d 	bl	8018348 <osThreadYield>
		osEventFlagsWait(mode_event_flags, SCIENCE_FLAG, osFlagsWaitAny, osWaitForever);
 8002aae:	e799      	b.n	80029e4 <Science_init+0x8>
 8002ab0:	24001d10 	.word	0x24001d10
 8002ab4:	24000fd4 	.word	0x24000fd4
 8002ab8:	240000c4 	.word	0x240000c4
 8002abc:	0801c65c 	.word	0x0801c65c
 8002ac0:	24000040 	.word	0x24000040
 8002ac4:	24000314 	.word	0x24000314
 8002ac8:	24001d54 	.word	0x24001d54
 8002acc:	24001d55 	.word	0x24001d55
 8002ad0:	24001d58 	.word	0x24001d58
 8002ad4:	24001d08 	.word	0x24001d08
 8002ad8:	240020e4 	.word	0x240020e4

08002adc <Idle_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Idle_init */
void Idle_init(void *argument)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Idle_init */

  /* Infinite loop */
  for(;;)
  {
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002ae4:	4b2a      	ldr	r3, [pc, #168]	; (8002b90 <Idle_init+0xb4>)
 8002ae6:	6818      	ldr	r0, [r3, #0]
 8002ae8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aec:	2200      	movs	r2, #0
 8002aee:	2102      	movs	r1, #2
 8002af0:	f015 fd5c 	bl	80185ac <osEventFlagsWait>

		ERPA_ENABLED = 0;
 8002af4:	4b27      	ldr	r3, [pc, #156]	; (8002b94 <Idle_init+0xb8>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8002afa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002afe:	2200      	movs	r2, #0
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);			// PMT packet off
 8002b02:	2100      	movs	r1, #0
 8002b04:	4824      	ldr	r0, [pc, #144]	; (8002b98 <Idle_init+0xbc>)
 8002b06:	f011 fb05 	bl	8014114 <HAL_TIM_OC_Stop_IT>
		HK_ENABLED = 0;
 8002b0a:	4b24      	ldr	r3, [pc, #144]	; (8002b9c <Idle_init+0xc0>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	701a      	strb	r2, [r3, #0]
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);			// Disable auto sweep
 8002b10:	2100      	movs	r1, #0
 8002b12:	4823      	ldr	r0, [pc, #140]	; (8002ba0 <Idle_init+0xc4>)
 8002b14:	f005 fdd4 	bl	80086c0 <HAL_DAC_Stop_DMA>
		osThreadSuspend(Voltage_MonitorHandle);
 8002b18:	4b22      	ldr	r3, [pc, #136]	; (8002ba4 <Idle_init+0xc8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f015 fc33 	bl	8018388 <osThreadSuspend>

		// Telling rail monitor which voltages are now disabled
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 8002b22:	2311      	movs	r3, #17
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	e008      	b.n	8002b3a <Idle_init+0x5e>
			set_rail_monitor_enable(i, 0);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	b2db      	uxtb	r3, r3
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f003 fcb4 	bl	800649c <set_rail_monitor_enable>
		for (int i = RAIL_TMP1; i >= RAIL_busvmon; i--) {
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	3b01      	subs	r3, #1
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	dcf3      	bgt.n	8002b28 <Idle_init+0x4c>
		}

		// Disabling all voltages
		for (int i = 8; i >= 0; i--) {
 8002b40:	2308      	movs	r3, #8
 8002b42:	60bb      	str	r3, [r7, #8]
 8002b44:	e012      	b.n	8002b6c <Idle_init+0x90>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 8002b46:	4a18      	ldr	r2, [pc, #96]	; (8002ba8 <Idle_init+0xcc>)
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8002b4e:	4a16      	ldr	r2, [pc, #88]	; (8002ba8 <Idle_init+0xcc>)
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	00db      	lsls	r3, r3, #3
 8002b54:	4413      	add	r3, r2
 8002b56:	889b      	ldrh	r3, [r3, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	f009 fd6a 	bl	800c634 <HAL_GPIO_WritePin>
			osDelay(100);
 8002b60:	2064      	movs	r0, #100	; 0x64
 8002b62:	f015 fc53 	bl	801840c <osDelay>
		for (int i = 8; i >= 0; i--) {
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	60bb      	str	r3, [r7, #8]
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	dae9      	bge.n	8002b46 <Idle_init+0x6a>
		}
		osDelay(3500);		// TODO: Reduce to 1000 for assembled instrument
 8002b72:	f640 50ac 	movw	r0, #3500	; 0xdac
 8002b76:	f015 fc49 	bl	801840c <osDelay>
		IDLING = 1;
 8002b7a:	4b0c      	ldr	r3, [pc, #48]	; (8002bac <Idle_init+0xd0>)
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	701a      	strb	r2, [r3, #0]
		osThreadResume(Voltage_MonitorHandle);
 8002b80:	4b08      	ldr	r3, [pc, #32]	; (8002ba4 <Idle_init+0xc8>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f015 fc20 	bl	80183ca <osThreadResume>

		// Yield thread control
		osThreadYield();
 8002b8a:	f015 fbdd 	bl	8018348 <osThreadYield>
		osEventFlagsWait(mode_event_flags, IDLE_FLAG, osFlagsWaitAny, osWaitForever);
 8002b8e:	e7a9      	b.n	8002ae4 <Idle_init+0x8>
 8002b90:	24001d10 	.word	0x24001d10
 8002b94:	24001d55 	.word	0x24001d55
 8002b98:	240020e4 	.word	0x240020e4
 8002b9c:	24001d54 	.word	0x24001d54
 8002ba0:	24000314 	.word	0x24000314
 8002ba4:	24000fd4 	.word	0x24000fd4
 8002ba8:	0801c65c 	.word	0x0801c65c
 8002bac:	240000c4 	.word	0x240000c4

08002bb0 <Sync_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Sync_init */
void Sync_init(void *argument)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Sync_init */
  /* Infinite loop */
  for(;;)
  {
	  	osEventFlagsWait(mode_event_flags, SYNC_FLAG, osFlagsWaitAny, osWaitForever);
 8002bb8:	4b14      	ldr	r3, [pc, #80]	; (8002c0c <Sync_init+0x5c>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	2104      	movs	r1, #4
 8002bc4:	f015 fcf2 	bl	80185ac <osEventFlagsWait>
	  	send_ACK();
 8002bc8:	f001 f852 	bl	8003c70 <send_ACK>

	  	uint8_t key;

	  	// Wait for 0xFF to be received
	  	HAL_UART_AbortReceive(&huart1);
 8002bcc:	4810      	ldr	r0, [pc, #64]	; (8002c10 <Sync_init+0x60>)
 8002bce:	f012 fe73 	bl	80158b8 <HAL_UART_AbortReceive>
	  	do {
	  		HAL_UART_Receive(&huart1, UART_RX_BUFFER, 9, 100);
 8002bd2:	2364      	movs	r3, #100	; 0x64
 8002bd4:	2209      	movs	r2, #9
 8002bd6:	490f      	ldr	r1, [pc, #60]	; (8002c14 <Sync_init+0x64>)
 8002bd8:	480d      	ldr	r0, [pc, #52]	; (8002c10 <Sync_init+0x60>)
 8002bda:	f012 fd59 	bl	8015690 <HAL_UART_Receive>
	  		key = UART_RX_BUFFER[0];
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <Sync_init+0x64>)
 8002be0:	781b      	ldrb	r3, [r3, #0]
 8002be2:	73fb      	strb	r3, [r7, #15]
	  	} while (key != 0xFF);
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2bff      	cmp	r3, #255	; 0xff
 8002be8:	d1f3      	bne.n	8002bd2 <Sync_init+0x22>
	  	calibrateRTC(UART_RX_BUFFER);
 8002bea:	480a      	ldr	r0, [pc, #40]	; (8002c14 <Sync_init+0x64>)
 8002bec:	f002 ffec 	bl	8005bc8 <calibrateRTC>
	  	osDelay(10);
 8002bf0:	200a      	movs	r0, #10
 8002bf2:	f015 fc0b 	bl	801840c <osDelay>
	  	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	4906      	ldr	r1, [pc, #24]	; (8002c14 <Sync_init+0x64>)
 8002bfa:	4805      	ldr	r0, [pc, #20]	; (8002c10 <Sync_init+0x60>)
 8002bfc:	f012 fe10 	bl	8015820 <HAL_UART_Receive_IT>
	  	send_error_counter_packet();
 8002c00:	f7ff fafc 	bl	80021fc <send_error_counter_packet>
	    get_reset_cause();
 8002c04:	f000 feca 	bl	800399c <get_reset_cause>
  {
 8002c08:	e7d6      	b.n	8002bb8 <Sync_init+0x8>
 8002c0a:	bf00      	nop
 8002c0c:	24001d10 	.word	0x24001d10
 8002c10:	240021c8 	.word	0x240021c8
 8002c14:	24001d14 	.word	0x24001d14

08002c18 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	; 0x28
 8002c1c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c1e:	f107 0314 	add.w	r3, r7, #20
 8002c22:	2200      	movs	r2, #0
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	605a      	str	r2, [r3, #4]
 8002c28:	609a      	str	r2, [r3, #8]
 8002c2a:	60da      	str	r2, [r3, #12]
 8002c2c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c2e:	4b34      	ldr	r3, [pc, #208]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c34:	4a32      	ldr	r2, [pc, #200]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c36:	f043 0304 	orr.w	r3, r3, #4
 8002c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c3e:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	613b      	str	r3, [r7, #16]
 8002c4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002c4c:	4b2c      	ldr	r3, [pc, #176]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c52:	4a2b      	ldr	r2, [pc, #172]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c5c:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c6a:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c70:	4a23      	ldr	r2, [pc, #140]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c7a:	4b21      	ldr	r3, [pc, #132]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c88:	4b1d      	ldr	r3, [pc, #116]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8e:	4a1c      	ldr	r2, [pc, #112]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c98:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <MX_GPIO_Init+0xe8>)
 8002c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	607b      	str	r3, [r7, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8002cac:	4815      	ldr	r0, [pc, #84]	; (8002d04 <MX_GPIO_Init+0xec>)
 8002cae:	f009 fcc1 	bl	800c634 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2164      	movs	r1, #100	; 0x64
 8002cb6:	4814      	ldr	r0, [pc, #80]	; (8002d08 <MX_GPIO_Init+0xf0>)
 8002cb8:	f009 fcbc 	bl	800c634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8002cbc:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8002cc0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cc6:	2302      	movs	r3, #2
 8002cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cce:	f107 0314 	add.w	r3, r7, #20
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	480b      	ldr	r0, [pc, #44]	; (8002d04 <MX_GPIO_Init+0xec>)
 8002cd6:	f009 fae5 	bl	800c2a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8002cda:	2364      	movs	r3, #100	; 0x64
 8002cdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ce2:	2302      	movs	r3, #2
 8002ce4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cea:	f107 0314 	add.w	r3, r7, #20
 8002cee:	4619      	mov	r1, r3
 8002cf0:	4805      	ldr	r0, [pc, #20]	; (8002d08 <MX_GPIO_Init+0xf0>)
 8002cf2:	f009 fad7 	bl	800c2a4 <HAL_GPIO_Init>

}
 8002cf6:	bf00      	nop
 8002cf8:	3728      	adds	r7, #40	; 0x28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	58024400 	.word	0x58024400
 8002d04:	58020800 	.word	0x58020800
 8002d08:	58020400 	.word	0x58020400

08002d0c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d10:	4b1c      	ldr	r3, [pc, #112]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d12:	4a1d      	ldr	r2, [pc, #116]	; (8002d88 <MX_I2C1_Init+0x7c>)
 8002d14:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100517;
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d18:	4a1c      	ldr	r2, [pc, #112]	; (8002d8c <MX_I2C1_Init+0x80>)
 8002d1a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d1c:	4b19      	ldr	r3, [pc, #100]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d28:	4b16      	ldr	r3, [pc, #88]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d34:	4b13      	ldr	r3, [pc, #76]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d40:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d46:	480f      	ldr	r0, [pc, #60]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d48:	f009 fc8e 	bl	800c668 <HAL_I2C_Init>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d52:	f001 f83d 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d56:	2100      	movs	r1, #0
 8002d58:	480a      	ldr	r0, [pc, #40]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d5a:	f00b ff2d 	bl	800ebb8 <HAL_I2CEx_ConfigAnalogFilter>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d64:	f001 f834 	bl	8003dd0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d68:	2100      	movs	r1, #0
 8002d6a:	4806      	ldr	r0, [pc, #24]	; (8002d84 <MX_I2C1_Init+0x78>)
 8002d6c:	f00b ff6f 	bl	800ec4e <HAL_I2CEx_ConfigDigitalFilter>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d76:	f001 f82b 	bl	8003dd0 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f00b ffb4 	bl	800ece8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002d80:	bf00      	nop
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	24001bb4 	.word	0x24001bb4
 8002d88:	40005400 	.word	0x40005400
 8002d8c:	00100517 	.word	0x00100517

08002d90 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b0ba      	sub	sp, #232	; 0xe8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d98:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
 8002da0:	605a      	str	r2, [r3, #4]
 8002da2:	609a      	str	r2, [r3, #8]
 8002da4:	60da      	str	r2, [r3, #12]
 8002da6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	22c0      	movs	r2, #192	; 0xc0
 8002dae:	2100      	movs	r1, #0
 8002db0:	4618      	mov	r0, r3
 8002db2:	f018 fd53 	bl	801b85c <memset>
  if(i2cHandle->Instance==I2C1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a5d      	ldr	r2, [pc, #372]	; (8002f30 <HAL_I2C_MspInit+0x1a0>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	f040 80b3 	bne.w	8002f28 <HAL_I2C_MspInit+0x198>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002dc2:	f04f 0208 	mov.w	r2, #8
 8002dc6:	f04f 0300 	mov.w	r3, #0
 8002dca:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f00d f9b3 	bl	8010144 <HAL_RCCEx_PeriphCLKConfig>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_MspInit+0x58>
    {
      Error_Handler();
 8002de4:	f000 fff4 	bl	8003dd0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002de8:	4b52      	ldr	r3, [pc, #328]	; (8002f34 <HAL_I2C_MspInit+0x1a4>)
 8002dea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dee:	4a51      	ldr	r2, [pc, #324]	; (8002f34 <HAL_I2C_MspInit+0x1a4>)
 8002df0:	f043 0302 	orr.w	r3, r3, #2
 8002df4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002df8:	4b4e      	ldr	r3, [pc, #312]	; (8002f34 <HAL_I2C_MspInit+0x1a4>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	60fb      	str	r3, [r7, #12]
 8002e04:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e06:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002e0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e0e:	2312      	movs	r3, #18
 8002e10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e14:	2300      	movs	r3, #0
 8002e16:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e20:	2304      	movs	r3, #4
 8002e22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4842      	ldr	r0, [pc, #264]	; (8002f38 <HAL_I2C_MspInit+0x1a8>)
 8002e2e:	f009 fa39 	bl	800c2a4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e32:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_I2C_MspInit+0x1a4>)
 8002e34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e38:	4a3e      	ldr	r2, [pc, #248]	; (8002f34 <HAL_I2C_MspInit+0x1a4>)
 8002e3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002e3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e42:	4b3c      	ldr	r3, [pc, #240]	; (8002f34 <HAL_I2C_MspInit+0x1a4>)
 8002e44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4c:	60bb      	str	r3, [r7, #8]
 8002e4e:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002e50:	4b3a      	ldr	r3, [pc, #232]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e52:	4a3b      	ldr	r2, [pc, #236]	; (8002f40 <HAL_I2C_MspInit+0x1b0>)
 8002e54:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8002e56:	4b39      	ldr	r3, [pc, #228]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e58:	2222      	movs	r2, #34	; 0x22
 8002e5a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e5c:	4b37      	ldr	r3, [pc, #220]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e5e:	2240      	movs	r2, #64	; 0x40
 8002e60:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e62:	4b36      	ldr	r3, [pc, #216]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e68:	4b34      	ldr	r3, [pc, #208]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e70:	4b32      	ldr	r3, [pc, #200]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e76:	4b31      	ldr	r3, [pc, #196]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8002e7c:	4b2f      	ldr	r3, [pc, #188]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002e82:	4b2e      	ldr	r3, [pc, #184]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e84:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002e88:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e8a:	4b2c      	ldr	r3, [pc, #176]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002e90:	482a      	ldr	r0, [pc, #168]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002e92:	f005 fee1 	bl	8008c58 <HAL_DMA_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_I2C_MspInit+0x110>
    {
      Error_Handler();
 8002e9c:	f000 ff98 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a26      	ldr	r2, [pc, #152]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002ea4:	639a      	str	r2, [r3, #56]	; 0x38
 8002ea6:	4a25      	ldr	r2, [pc, #148]	; (8002f3c <HAL_I2C_MspInit+0x1ac>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream7;
 8002eac:	4b25      	ldr	r3, [pc, #148]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002eae:	4a26      	ldr	r2, [pc, #152]	; (8002f48 <HAL_I2C_MspInit+0x1b8>)
 8002eb0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8002eb2:	4b24      	ldr	r3, [pc, #144]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002eb4:	2221      	movs	r2, #33	; 0x21
 8002eb6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb8:	4b22      	ldr	r3, [pc, #136]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002eba:	2200      	movs	r2, #0
 8002ebc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ebe:	4b21      	ldr	r3, [pc, #132]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ec4:	4b1f      	ldr	r3, [pc, #124]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002ec6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002eca:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ecc:	4b1d      	ldr	r3, [pc, #116]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ed2:	4b1c      	ldr	r3, [pc, #112]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002ed8:	4b1a      	ldr	r3, [pc, #104]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ede:	4b19      	ldr	r3, [pc, #100]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002ee0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002ee4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ee6:	4b17      	ldr	r3, [pc, #92]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002eec:	4815      	ldr	r0, [pc, #84]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002eee:	f005 feb3 	bl	8008c58 <HAL_DMA_Init>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d001      	beq.n	8002efc <HAL_I2C_MspInit+0x16c>
    {
      Error_Handler();
 8002ef8:	f000 ff6a 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002f00:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f02:	4a10      	ldr	r2, [pc, #64]	; (8002f44 <HAL_I2C_MspInit+0x1b4>)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002f08:	2200      	movs	r2, #0
 8002f0a:	2105      	movs	r1, #5
 8002f0c:	201f      	movs	r0, #31
 8002f0e:	f005 fa75 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002f12:	201f      	movs	r0, #31
 8002f14:	f005 fa8c 	bl	8008430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2105      	movs	r1, #5
 8002f1c:	2020      	movs	r0, #32
 8002f1e:	f005 fa6d 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002f22:	2020      	movs	r0, #32
 8002f24:	f005 fa84 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002f28:	bf00      	nop
 8002f2a:	37e8      	adds	r7, #232	; 0xe8
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	bd80      	pop	{r7, pc}
 8002f30:	40005400 	.word	0x40005400
 8002f34:	58024400 	.word	0x58024400
 8002f38:	58020400 	.word	0x58020400
 8002f3c:	24001c08 	.word	0x24001c08
 8002f40:	400200a0 	.word	0x400200a0
 8002f44:	24001c80 	.word	0x24001c80
 8002f48:	400200b8 	.word	0x400200b8

08002f4c <MX_IWDG1_Init>:

IWDG_HandleTypeDef hiwdg1;

/* IWDG1 init function */
void MX_IWDG1_Init(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG1_Init 0 */

  /* USER CODE BEGIN IWDG1_Init 1 */

  /* USER CODE END IWDG1_Init 1 */
  hiwdg1.Instance = IWDG1;
 8002f50:	4b0b      	ldr	r3, [pc, #44]	; (8002f80 <MX_IWDG1_Init+0x34>)
 8002f52:	4a0c      	ldr	r2, [pc, #48]	; (8002f84 <MX_IWDG1_Init+0x38>)
 8002f54:	601a      	str	r2, [r3, #0]
  hiwdg1.Init.Prescaler = IWDG_PRESCALER_64;
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <MX_IWDG1_Init+0x34>)
 8002f58:	2204      	movs	r2, #4
 8002f5a:	605a      	str	r2, [r3, #4]
  hiwdg1.Init.Window = 2499;
 8002f5c:	4b08      	ldr	r3, [pc, #32]	; (8002f80 <MX_IWDG1_Init+0x34>)
 8002f5e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002f62:	60da      	str	r2, [r3, #12]
  hiwdg1.Init.Reload = 2499;
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <MX_IWDG1_Init+0x34>)
 8002f66:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8002f6a:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg1) != HAL_OK)
 8002f6c:	4804      	ldr	r0, [pc, #16]	; (8002f80 <MX_IWDG1_Init+0x34>)
 8002f6e:	f00b fedf 	bl	800ed30 <HAL_IWDG_Init>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d001      	beq.n	8002f7c <MX_IWDG1_Init+0x30>
  {
    Error_Handler();
 8002f78:	f000 ff2a 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG1_Init 2 */

  /* USER CODE END IWDG1_Init 2 */

}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	24001cf8 	.word	0x24001cf8
 8002f84:	58004800 	.word	0x58004800

08002f88 <__NVIC_SystemReset>:
{
 8002f88:	b480      	push	{r7}
 8002f8a:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002f8c:	f3bf 8f4f 	dsb	sy
}
 8002f90:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002f92:	4b06      	ldr	r3, [pc, #24]	; (8002fac <__NVIC_SystemReset+0x24>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002f9a:	4904      	ldr	r1, [pc, #16]	; (8002fac <__NVIC_SystemReset+0x24>)
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <__NVIC_SystemReset+0x28>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002fa2:	f3bf 8f4f 	dsb	sy
}
 8002fa6:	bf00      	nop
    __NOP();
 8002fa8:	bf00      	nop
 8002faa:	e7fd      	b.n	8002fa8 <__NVIC_SystemReset+0x20>
 8002fac:	e000ed00 	.word	0xe000ed00
 8002fb0:	05fa0004 	.word	0x05fa0004

08002fb4 <HAL_FLASHEx_EccCorrectionCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_FLASHEx_EccCorrectionCallback() {
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;
	error.category = EC_seu;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	703b      	strb	r3, [r7, #0]
	error.detail = ED_single_bit_error_flash;
 8002fbe:	2318      	movs	r3, #24
 8002fc0:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8002fc2:	463b      	mov	r3, r7
 8002fc4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fc8:	f7fe ffb2 	bl	8001f30 <handle_error>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_FLASHEx_EccDetectionCallback>:

void HAL_FLASHEx_EccDetectionCallback() {
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;
	error.category = EC_seu;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	703b      	strb	r3, [r7, #0]
	error.detail = ED_double_bit_error_flash;
 8002fde:	2319      	movs	r3, #25
 8002fe0:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8002fe2:	463b      	mov	r3, r7
 8002fe4:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002fe8:	f7fe ffa2 	bl	8001f30 <handle_error>
}
 8002fec:	bf00      	nop
 8002fee:	3708      	adds	r7, #8
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <HAL_TIM_OC_DelayElapsedCallback>:

void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b082      	sub	sp, #8
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	4a20      	ldr	r2, [pc, #128]	; (8003080 <HAL_TIM_OC_DelayElapsedCallback+0x8c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d106      	bne.n	8003012 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 8003004:	4b1f      	ldr	r3, [pc, #124]	; (8003084 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2101      	movs	r1, #1
 800300a:	4618      	mov	r0, r3
 800300c:	f015 fa58 	bl	80184c0 <osEventFlagsSet>


	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8003010:	e032      	b.n	8003078 <HAL_TIM_OC_DelayElapsedCallback+0x84>
	else if (htim == &htim2) {
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1c      	ldr	r2, [pc, #112]	; (8003088 <HAL_TIM_OC_DelayElapsedCallback+0x94>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d12b      	bne.n	8003072 <HAL_TIM_OC_DelayElapsedCallback+0x7e>
		if (ERPA_ENABLED) {
 800301a:	4b1c      	ldr	r3, [pc, #112]	; (800308c <HAL_TIM_OC_DelayElapsedCallback+0x98>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d005      	beq.n	8003030 <HAL_TIM_OC_DelayElapsedCallback+0x3c>
			osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 8003024:	4b17      	ldr	r3, [pc, #92]	; (8003084 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2102      	movs	r1, #2
 800302a:	4618      	mov	r0, r3
 800302c:	f015 fa48 	bl	80184c0 <osEventFlagsSet>
		if (HK_100_ms_counter == 32) {
 8003030:	4b17      	ldr	r3, [pc, #92]	; (8003090 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b2db      	uxtb	r3, r3
 8003036:	2b20      	cmp	r3, #32
 8003038:	d113      	bne.n	8003062 <HAL_TIM_OC_DelayElapsedCallback+0x6e>
			osEventFlagsSet(utility_event_flags, VOLTAGE_MONITOR_FLAG_ID);
 800303a:	4b16      	ldr	r3, [pc, #88]	; (8003094 <HAL_TIM_OC_DelayElapsedCallback+0xa0>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2101      	movs	r1, #1
 8003040:	4618      	mov	r0, r3
 8003042:	f015 fa3d 	bl	80184c0 <osEventFlagsSet>
			if (HK_ENABLED){
 8003046:	4b14      	ldr	r3, [pc, #80]	; (8003098 <HAL_TIM_OC_DelayElapsedCallback+0xa4>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d005      	beq.n	800305c <HAL_TIM_OC_DelayElapsedCallback+0x68>
				osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8003050:	4b0c      	ldr	r3, [pc, #48]	; (8003084 <HAL_TIM_OC_DelayElapsedCallback+0x90>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2104      	movs	r1, #4
 8003056:	4618      	mov	r0, r3
 8003058:	f015 fa32 	bl	80184c0 <osEventFlagsSet>
			HK_100_ms_counter = 0;
 800305c:	4b0c      	ldr	r3, [pc, #48]	; (8003090 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
		HK_100_ms_counter++;
 8003062:	4b0b      	ldr	r3, [pc, #44]	; (8003090 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3301      	adds	r3, #1
 800306a:	b2da      	uxtb	r2, r3
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <HAL_TIM_OC_DelayElapsedCallback+0x9c>)
 800306e:	701a      	strb	r2, [r3, #0]
}
 8003070:	e002      	b.n	8003078 <HAL_TIM_OC_DelayElapsedCallback+0x84>
		printf("Unknown Timer Interrupt\n");
 8003072:	480a      	ldr	r0, [pc, #40]	; (800309c <HAL_TIM_OC_DelayElapsedCallback+0xa8>)
 8003074:	f018 fc68 	bl	801b948 <puts>
}
 8003078:	bf00      	nop
 800307a:	3708      	adds	r7, #8
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	240020e4 	.word	0x240020e4
 8003084:	24001d08 	.word	0x24001d08
 8003088:	24002130 	.word	0x24002130
 800308c:	24001d55 	.word	0x24001d55
 8003090:	24001d5c 	.word	0x24001d5c
 8003094:	24001d0c 	.word	0x24001d0c
 8003098:	24001d54 	.word	0x24001d54
 800309c:	0801c304 	.word	0x0801c304

080030a0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b088      	sub	sp, #32
 80030a4:	af02      	add	r7, sp, #8
 80030a6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80030a8:	2201      	movs	r2, #1
 80030aa:	49f7      	ldr	r1, [pc, #988]	; (8003488 <HAL_UART_RxCpltCallback+0x3e8>)
 80030ac:	48f7      	ldr	r0, [pc, #988]	; (800348c <HAL_UART_RxCpltCallback+0x3ec>)
 80030ae:	f012 fbb7 	bl	8015820 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 80030b2:	4bf5      	ldr	r3, [pc, #980]	; (8003488 <HAL_UART_RxCpltCallback+0x3e8>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2bef      	cmp	r3, #239	; 0xef
 80030bc:	f200 8442 	bhi.w	8003944 <HAL_UART_RxCpltCallback+0x8a4>
 80030c0:	a201      	add	r2, pc, #4	; (adr r2, 80030c8 <HAL_UART_RxCpltCallback+0x28>)
 80030c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c6:	bf00      	nop
 80030c8:	080034a5 	.word	0x080034a5
 80030cc:	080034d5 	.word	0x080034d5
 80030d0:	08003545 	.word	0x08003545
 80030d4:	0800357f 	.word	0x0800357f
 80030d8:	080035b7 	.word	0x080035b7
 80030dc:	080035f1 	.word	0x080035f1
 80030e0:	0800362d 	.word	0x0800362d
 80030e4:	08003669 	.word	0x08003669
 80030e8:	080036a3 	.word	0x080036a3
 80030ec:	080036d7 	.word	0x080036d7
 80030f0:	0800370b 	.word	0x0800370b
 80030f4:	0800373d 	.word	0x0800373d
 80030f8:	08003767 	.word	0x08003767
 80030fc:	08003843 	.word	0x08003843
 8003100:	080038ab 	.word	0x080038ab
 8003104:	080038d3 	.word	0x080038d3
 8003108:	08003491 	.word	0x08003491
 800310c:	080034b9 	.word	0x080034b9
 8003110:	08003527 	.word	0x08003527
 8003114:	08003563 	.word	0x08003563
 8003118:	0800359b 	.word	0x0800359b
 800311c:	080035d3 	.word	0x080035d3
 8003120:	0800360f 	.word	0x0800360f
 8003124:	0800364b 	.word	0x0800364b
 8003128:	08003687 	.word	0x08003687
 800312c:	080036bf 	.word	0x080036bf
 8003130:	080036e7 	.word	0x080036e7
 8003134:	08003721 	.word	0x08003721
 8003138:	0800374d 	.word	0x0800374d
 800313c:	08003801 	.word	0x08003801
 8003140:	08003883 	.word	0x08003883
 8003144:	08003945 	.word	0x08003945
 8003148:	08003945 	.word	0x08003945
 800314c:	08003945 	.word	0x08003945
 8003150:	08003945 	.word	0x08003945
 8003154:	08003945 	.word	0x08003945
 8003158:	08003945 	.word	0x08003945
 800315c:	08003945 	.word	0x08003945
 8003160:	08003945 	.word	0x08003945
 8003164:	08003945 	.word	0x08003945
 8003168:	08003945 	.word	0x08003945
 800316c:	08003945 	.word	0x08003945
 8003170:	08003945 	.word	0x08003945
 8003174:	08003945 	.word	0x08003945
 8003178:	08003945 	.word	0x08003945
 800317c:	08003945 	.word	0x08003945
 8003180:	08003945 	.word	0x08003945
 8003184:	08003945 	.word	0x08003945
 8003188:	08003945 	.word	0x08003945
 800318c:	08003945 	.word	0x08003945
 8003190:	08003945 	.word	0x08003945
 8003194:	08003945 	.word	0x08003945
 8003198:	08003945 	.word	0x08003945
 800319c:	08003945 	.word	0x08003945
 80031a0:	08003945 	.word	0x08003945
 80031a4:	08003945 	.word	0x08003945
 80031a8:	08003945 	.word	0x08003945
 80031ac:	08003945 	.word	0x08003945
 80031b0:	08003945 	.word	0x08003945
 80031b4:	08003945 	.word	0x08003945
 80031b8:	08003945 	.word	0x08003945
 80031bc:	08003945 	.word	0x08003945
 80031c0:	08003945 	.word	0x08003945
 80031c4:	08003945 	.word	0x08003945
 80031c8:	08003945 	.word	0x08003945
 80031cc:	08003945 	.word	0x08003945
 80031d0:	08003945 	.word	0x08003945
 80031d4:	08003945 	.word	0x08003945
 80031d8:	08003945 	.word	0x08003945
 80031dc:	08003945 	.word	0x08003945
 80031e0:	08003945 	.word	0x08003945
 80031e4:	08003945 	.word	0x08003945
 80031e8:	08003945 	.word	0x08003945
 80031ec:	08003945 	.word	0x08003945
 80031f0:	08003945 	.word	0x08003945
 80031f4:	08003945 	.word	0x08003945
 80031f8:	08003945 	.word	0x08003945
 80031fc:	08003945 	.word	0x08003945
 8003200:	08003945 	.word	0x08003945
 8003204:	08003945 	.word	0x08003945
 8003208:	08003945 	.word	0x08003945
 800320c:	08003945 	.word	0x08003945
 8003210:	08003945 	.word	0x08003945
 8003214:	08003945 	.word	0x08003945
 8003218:	08003945 	.word	0x08003945
 800321c:	08003945 	.word	0x08003945
 8003220:	08003945 	.word	0x08003945
 8003224:	08003945 	.word	0x08003945
 8003228:	08003945 	.word	0x08003945
 800322c:	08003945 	.word	0x08003945
 8003230:	08003945 	.word	0x08003945
 8003234:	08003945 	.word	0x08003945
 8003238:	08003945 	.word	0x08003945
 800323c:	08003945 	.word	0x08003945
 8003240:	08003945 	.word	0x08003945
 8003244:	08003945 	.word	0x08003945
 8003248:	08003945 	.word	0x08003945
 800324c:	08003945 	.word	0x08003945
 8003250:	08003945 	.word	0x08003945
 8003254:	08003945 	.word	0x08003945
 8003258:	08003945 	.word	0x08003945
 800325c:	08003945 	.word	0x08003945
 8003260:	08003945 	.word	0x08003945
 8003264:	08003945 	.word	0x08003945
 8003268:	08003945 	.word	0x08003945
 800326c:	08003945 	.word	0x08003945
 8003270:	08003945 	.word	0x08003945
 8003274:	08003945 	.word	0x08003945
 8003278:	08003945 	.word	0x08003945
 800327c:	08003945 	.word	0x08003945
 8003280:	08003945 	.word	0x08003945
 8003284:	08003945 	.word	0x08003945
 8003288:	08003945 	.word	0x08003945
 800328c:	08003945 	.word	0x08003945
 8003290:	08003945 	.word	0x08003945
 8003294:	08003945 	.word	0x08003945
 8003298:	08003945 	.word	0x08003945
 800329c:	08003945 	.word	0x08003945
 80032a0:	08003945 	.word	0x08003945
 80032a4:	08003945 	.word	0x08003945
 80032a8:	08003945 	.word	0x08003945
 80032ac:	08003945 	.word	0x08003945
 80032b0:	08003945 	.word	0x08003945
 80032b4:	08003945 	.word	0x08003945
 80032b8:	08003945 	.word	0x08003945
 80032bc:	08003945 	.word	0x08003945
 80032c0:	08003945 	.word	0x08003945
 80032c4:	08003945 	.word	0x08003945
 80032c8:	08003945 	.word	0x08003945
 80032cc:	08003945 	.word	0x08003945
 80032d0:	08003945 	.word	0x08003945
 80032d4:	08003945 	.word	0x08003945
 80032d8:	08003945 	.word	0x08003945
 80032dc:	08003945 	.word	0x08003945
 80032e0:	08003945 	.word	0x08003945
 80032e4:	08003945 	.word	0x08003945
 80032e8:	08003945 	.word	0x08003945
 80032ec:	08003945 	.word	0x08003945
 80032f0:	08003945 	.word	0x08003945
 80032f4:	08003945 	.word	0x08003945
 80032f8:	08003945 	.word	0x08003945
 80032fc:	08003945 	.word	0x08003945
 8003300:	08003945 	.word	0x08003945
 8003304:	08003945 	.word	0x08003945
 8003308:	08003945 	.word	0x08003945
 800330c:	08003945 	.word	0x08003945
 8003310:	08003945 	.word	0x08003945
 8003314:	08003945 	.word	0x08003945
 8003318:	08003945 	.word	0x08003945
 800331c:	08003945 	.word	0x08003945
 8003320:	08003945 	.word	0x08003945
 8003324:	08003945 	.word	0x08003945
 8003328:	08003945 	.word	0x08003945
 800332c:	08003945 	.word	0x08003945
 8003330:	08003945 	.word	0x08003945
 8003334:	08003945 	.word	0x08003945
 8003338:	08003945 	.word	0x08003945
 800333c:	08003945 	.word	0x08003945
 8003340:	08003945 	.word	0x08003945
 8003344:	08003945 	.word	0x08003945
 8003348:	08003945 	.word	0x08003945
 800334c:	08003945 	.word	0x08003945
 8003350:	08003945 	.word	0x08003945
 8003354:	08003945 	.word	0x08003945
 8003358:	08003945 	.word	0x08003945
 800335c:	08003945 	.word	0x08003945
 8003360:	08003945 	.word	0x08003945
 8003364:	08003945 	.word	0x08003945
 8003368:	08003945 	.word	0x08003945
 800336c:	08003945 	.word	0x08003945
 8003370:	08003945 	.word	0x08003945
 8003374:	08003945 	.word	0x08003945
 8003378:	08003945 	.word	0x08003945
 800337c:	08003945 	.word	0x08003945
 8003380:	08003945 	.word	0x08003945
 8003384:	0800390f 	.word	0x0800390f
 8003388:	08003945 	.word	0x08003945
 800338c:	08003945 	.word	0x08003945
 8003390:	08003945 	.word	0x08003945
 8003394:	08003945 	.word	0x08003945
 8003398:	08003945 	.word	0x08003945
 800339c:	08003945 	.word	0x08003945
 80033a0:	08003945 	.word	0x08003945
 80033a4:	08003945 	.word	0x08003945
 80033a8:	08003945 	.word	0x08003945
 80033ac:	08003945 	.word	0x08003945
 80033b0:	08003945 	.word	0x08003945
 80033b4:	08003945 	.word	0x08003945
 80033b8:	08003945 	.word	0x08003945
 80033bc:	08003945 	.word	0x08003945
 80033c0:	08003945 	.word	0x08003945
 80033c4:	0800391d 	.word	0x0800391d
 80033c8:	08003945 	.word	0x08003945
 80033cc:	08003945 	.word	0x08003945
 80033d0:	08003945 	.word	0x08003945
 80033d4:	08003945 	.word	0x08003945
 80033d8:	08003945 	.word	0x08003945
 80033dc:	08003945 	.word	0x08003945
 80033e0:	08003945 	.word	0x08003945
 80033e4:	08003945 	.word	0x08003945
 80033e8:	08003945 	.word	0x08003945
 80033ec:	08003945 	.word	0x08003945
 80033f0:	08003945 	.word	0x08003945
 80033f4:	08003945 	.word	0x08003945
 80033f8:	08003945 	.word	0x08003945
 80033fc:	08003945 	.word	0x08003945
 8003400:	08003945 	.word	0x08003945
 8003404:	0800392b 	.word	0x0800392b
 8003408:	080038fb 	.word	0x080038fb
 800340c:	08003945 	.word	0x08003945
 8003410:	08003945 	.word	0x08003945
 8003414:	08003945 	.word	0x08003945
 8003418:	08003945 	.word	0x08003945
 800341c:	08003945 	.word	0x08003945
 8003420:	08003945 	.word	0x08003945
 8003424:	08003945 	.word	0x08003945
 8003428:	08003945 	.word	0x08003945
 800342c:	08003945 	.word	0x08003945
 8003430:	08003945 	.word	0x08003945
 8003434:	08003945 	.word	0x08003945
 8003438:	08003945 	.word	0x08003945
 800343c:	08003945 	.word	0x08003945
 8003440:	08003945 	.word	0x08003945
 8003444:	08003939 	.word	0x08003939
 8003448:	080038e7 	.word	0x080038e7
 800344c:	08003945 	.word	0x08003945
 8003450:	08003945 	.word	0x08003945
 8003454:	08003945 	.word	0x08003945
 8003458:	08003945 	.word	0x08003945
 800345c:	08003945 	.word	0x08003945
 8003460:	08003945 	.word	0x08003945
 8003464:	08003945 	.word	0x08003945
 8003468:	08003945 	.word	0x08003945
 800346c:	08003945 	.word	0x08003945
 8003470:	08003945 	.word	0x08003945
 8003474:	08003945 	.word	0x08003945
 8003478:	08003945 	.word	0x08003945
 800347c:	08003945 	.word	0x08003945
 8003480:	08003945 	.word	0x08003945
 8003484:	0800393f 	.word	0x0800393f
 8003488:	24001d14 	.word	0x24001d14
 800348c:	240021c8 	.word	0x240021c8
	case 0x10: {
		printf("SDN1 ON\n");
 8003490:	48b8      	ldr	r0, [pc, #736]	; (8003774 <HAL_UART_RxCpltCallback+0x6d4>)
 8003492:	f018 fa59 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8003496:	4bb8      	ldr	r3, [pc, #736]	; (8003778 <HAL_UART_RxCpltCallback+0x6d8>)
 8003498:	2104      	movs	r1, #4
 800349a:	2201      	movs	r2, #1
 800349c:	4618      	mov	r0, r3
 800349e:	f009 f8c9 	bl	800c634 <HAL_GPIO_WritePin>
		break;
 80034a2:	e25a      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 80034a4:	48b5      	ldr	r0, [pc, #724]	; (800377c <HAL_UART_RxCpltCallback+0x6dc>)
 80034a6:	f018 fa4f 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET);
 80034aa:	4bb3      	ldr	r3, [pc, #716]	; (8003778 <HAL_UART_RxCpltCallback+0x6d8>)
 80034ac:	2104      	movs	r1, #4
 80034ae:	2200      	movs	r2, #0
 80034b0:	4618      	mov	r0, r3
 80034b2:	f009 f8bf 	bl	800c634 <HAL_GPIO_WritePin>
		break;
 80034b6:	e250      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 80034b8:	48b1      	ldr	r0, [pc, #708]	; (8003780 <HAL_UART_RxCpltCallback+0x6e0>)
 80034ba:	f018 fa45 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 80034be:	4bae      	ldr	r3, [pc, #696]	; (8003778 <HAL_UART_RxCpltCallback+0x6d8>)
 80034c0:	2120      	movs	r1, #32
 80034c2:	2201      	movs	r2, #1
 80034c4:	4618      	mov	r0, r3
 80034c6:	f009 f8b5 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_2v5, 1);
 80034ca:	2101      	movs	r1, #1
 80034cc:	2008      	movs	r0, #8
 80034ce:	f002 ffe5 	bl	800649c <set_rail_monitor_enable>
		break;
 80034d2:	e242      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 80034d4:	48ab      	ldr	r0, [pc, #684]	; (8003784 <HAL_UART_RxCpltCallback+0x6e4>)
 80034d6:	f018 fa37 	bl	801b948 <puts>

		// Turning off all voltage enables (including high voltages) in order from highest to lowest, including SYS_ON
		for (int i = 8; i > 0; i--) {
 80034da:	2308      	movs	r3, #8
 80034dc:	617b      	str	r3, [r7, #20]
 80034de:	e00f      	b.n	8003500 <HAL_UART_RxCpltCallback+0x460>
			HAL_GPIO_WritePin(gpios[i].gpio, gpios[i].pin, GPIO_PIN_RESET);
 80034e0:	4aa9      	ldr	r2, [pc, #676]	; (8003788 <HAL_UART_RxCpltCallback+0x6e8>)
 80034e2:	697b      	ldr	r3, [r7, #20]
 80034e4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80034e8:	4aa7      	ldr	r2, [pc, #668]	; (8003788 <HAL_UART_RxCpltCallback+0x6e8>)
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	4413      	add	r3, r2
 80034f0:	889b      	ldrh	r3, [r3, #4]
 80034f2:	2200      	movs	r2, #0
 80034f4:	4619      	mov	r1, r3
 80034f6:	f009 f89d 	bl	800c634 <HAL_GPIO_WritePin>
		for (int i = 8; i > 0; i--) {
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	3b01      	subs	r3, #1
 80034fe:	617b      	str	r3, [r7, #20]
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	dcec      	bgt.n	80034e0 <HAL_UART_RxCpltCallback+0x440>
		}

		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003506:	2310      	movs	r3, #16
 8003508:	613b      	str	r3, [r7, #16]
 800350a:	e008      	b.n	800351e <HAL_UART_RxCpltCallback+0x47e>
			set_rail_monitor_enable(i, 0);
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2100      	movs	r1, #0
 8003512:	4618      	mov	r0, r3
 8003514:	f002 ffc2 	bl	800649c <set_rail_monitor_enable>
		for (int i = RAIL_n800v; i >= RAIL_2v5; i--) {
 8003518:	693b      	ldr	r3, [r7, #16]
 800351a:	3b01      	subs	r3, #1
 800351c:	613b      	str	r3, [r7, #16]
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	2b07      	cmp	r3, #7
 8003522:	dcf3      	bgt.n	800350c <HAL_UART_RxCpltCallback+0x46c>
		}

		break;
 8003524:	e219      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8003526:	4899      	ldr	r0, [pc, #612]	; (800378c <HAL_UART_RxCpltCallback+0x6ec>)
 8003528:	f018 fa0e 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 800352c:	4b98      	ldr	r3, [pc, #608]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 800352e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003532:	2201      	movs	r2, #1
 8003534:	4618      	mov	r0, r3
 8003536:	f009 f87d 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 1);
 800353a:	2101      	movs	r1, #1
 800353c:	2009      	movs	r0, #9
 800353e:	f002 ffad 	bl	800649c <set_rail_monitor_enable>

		break;
 8003542:	e20a      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8003544:	4893      	ldr	r0, [pc, #588]	; (8003794 <HAL_UART_RxCpltCallback+0x6f4>)
 8003546:	f018 f9ff 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 800354a:	4b91      	ldr	r3, [pc, #580]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 800354c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003550:	2200      	movs	r2, #0
 8003552:	4618      	mov	r0, r3
 8003554:	f009 f86e 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_3v3, 0);
 8003558:	2100      	movs	r1, #0
 800355a:	2009      	movs	r0, #9
 800355c:	f002 ff9e 	bl	800649c <set_rail_monitor_enable>
		break;
 8003560:	e1fb      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8003562:	488d      	ldr	r0, [pc, #564]	; (8003798 <HAL_UART_RxCpltCallback+0x6f8>)
 8003564:	f018 f9f0 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8003568:	4b89      	ldr	r3, [pc, #548]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 800356a:	2180      	movs	r1, #128	; 0x80
 800356c:	2201      	movs	r2, #1
 800356e:	4618      	mov	r0, r3
 8003570:	f009 f860 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 1);
 8003574:	2101      	movs	r1, #1
 8003576:	200a      	movs	r0, #10
 8003578:	f002 ff90 	bl	800649c <set_rail_monitor_enable>

		break;
 800357c:	e1ed      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 800357e:	4887      	ldr	r0, [pc, #540]	; (800379c <HAL_UART_RxCpltCallback+0x6fc>)
 8003580:	f018 f9e2 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8003584:	4b82      	ldr	r3, [pc, #520]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 8003586:	2180      	movs	r1, #128	; 0x80
 8003588:	2200      	movs	r2, #0
 800358a:	4618      	mov	r0, r3
 800358c:	f009 f852 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_5v, 0);
 8003590:	2100      	movs	r1, #0
 8003592:	200a      	movs	r0, #10
 8003594:	f002 ff82 	bl	800649c <set_rail_monitor_enable>
		break;
 8003598:	e1df      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 800359a:	4881      	ldr	r0, [pc, #516]	; (80037a0 <HAL_UART_RxCpltCallback+0x700>)
 800359c:	f018 f9d4 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 80035a0:	4b7b      	ldr	r3, [pc, #492]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 80035a2:	2140      	movs	r1, #64	; 0x40
 80035a4:	2201      	movs	r2, #1
 80035a6:	4618      	mov	r0, r3
 80035a8:	f009 f844 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 1);
 80035ac:	2101      	movs	r1, #1
 80035ae:	200b      	movs	r0, #11
 80035b0:	f002 ff74 	bl	800649c <set_rail_monitor_enable>

		break;
 80035b4:	e1d1      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 80035b6:	487b      	ldr	r0, [pc, #492]	; (80037a4 <HAL_UART_RxCpltCallback+0x704>)
 80035b8:	f018 f9c6 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 80035bc:	4b74      	ldr	r3, [pc, #464]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 80035be:	2140      	movs	r1, #64	; 0x40
 80035c0:	2200      	movs	r2, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f009 f836 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n3v3, 0);
 80035c8:	2100      	movs	r1, #0
 80035ca:	200b      	movs	r0, #11
 80035cc:	f002 ff66 	bl	800649c <set_rail_monitor_enable>
		break;
 80035d0:	e1c3      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 80035d2:	4875      	ldr	r0, [pc, #468]	; (80037a8 <HAL_UART_RxCpltCallback+0x708>)
 80035d4:	f018 f9b8 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 80035d8:	4b6d      	ldr	r3, [pc, #436]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 80035da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035de:	2201      	movs	r2, #1
 80035e0:	4618      	mov	r0, r3
 80035e2:	f009 f827 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 1);
 80035e6:	2101      	movs	r1, #1
 80035e8:	200c      	movs	r0, #12
 80035ea:	f002 ff57 	bl	800649c <set_rail_monitor_enable>

		break;
 80035ee:	e1b4      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 80035f0:	486e      	ldr	r0, [pc, #440]	; (80037ac <HAL_UART_RxCpltCallback+0x70c>)
 80035f2:	f018 f9a9 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 80035f6:	4b66      	ldr	r3, [pc, #408]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 80035f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035fc:	2200      	movs	r2, #0
 80035fe:	4618      	mov	r0, r3
 8003600:	f009 f818 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n5v, 0);
 8003604:	2100      	movs	r1, #0
 8003606:	200c      	movs	r0, #12
 8003608:	f002 ff48 	bl	800649c <set_rail_monitor_enable>
		break;
 800360c:	e1a5      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 800360e:	4868      	ldr	r0, [pc, #416]	; (80037b0 <HAL_UART_RxCpltCallback+0x710>)
 8003610:	f018 f99a 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8003614:	4b5e      	ldr	r3, [pc, #376]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 8003616:	f44f 7100 	mov.w	r1, #512	; 0x200
 800361a:	2201      	movs	r2, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f009 f809 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 1);
 8003622:	2101      	movs	r1, #1
 8003624:	200d      	movs	r0, #13
 8003626:	f002 ff39 	bl	800649c <set_rail_monitor_enable>

		break;
 800362a:	e196      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 800362c:	4861      	ldr	r0, [pc, #388]	; (80037b4 <HAL_UART_RxCpltCallback+0x714>)
 800362e:	f018 f98b 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8003632:	4b57      	ldr	r3, [pc, #348]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 8003634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003638:	2200      	movs	r2, #0
 800363a:	4618      	mov	r0, r3
 800363c:	f008 fffa 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_15v, 0);
 8003640:	2100      	movs	r1, #0
 8003642:	200d      	movs	r0, #13
 8003644:	f002 ff2a 	bl	800649c <set_rail_monitor_enable>
		break;
 8003648:	e187      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 800364a:	485b      	ldr	r0, [pc, #364]	; (80037b8 <HAL_UART_RxCpltCallback+0x718>)
 800364c:	f018 f97c 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8003650:	4b4f      	ldr	r3, [pc, #316]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 8003652:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003656:	2201      	movs	r2, #1
 8003658:	4618      	mov	r0, r3
 800365a:	f008 ffeb 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 1);
 800365e:	2101      	movs	r1, #1
 8003660:	200f      	movs	r0, #15
 8003662:	f002 ff1b 	bl	800649c <set_rail_monitor_enable>

		break;
 8003666:	e178      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8003668:	4854      	ldr	r0, [pc, #336]	; (80037bc <HAL_UART_RxCpltCallback+0x71c>)
 800366a:	f018 f96d 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 800366e:	4b48      	ldr	r3, [pc, #288]	; (8003790 <HAL_UART_RxCpltCallback+0x6f0>)
 8003670:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003674:	2200      	movs	r2, #0
 8003676:	4618      	mov	r0, r3
 8003678:	f008 ffdc 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n200v, 0);
 800367c:	2100      	movs	r1, #0
 800367e:	200f      	movs	r0, #15
 8003680:	f002 ff0c 	bl	800649c <set_rail_monitor_enable>
		break;
 8003684:	e169      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8003686:	484e      	ldr	r0, [pc, #312]	; (80037c0 <HAL_UART_RxCpltCallback+0x720>)
 8003688:	f018 f95e 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 800368c:	4b3a      	ldr	r3, [pc, #232]	; (8003778 <HAL_UART_RxCpltCallback+0x6d8>)
 800368e:	2140      	movs	r1, #64	; 0x40
 8003690:	2201      	movs	r2, #1
 8003692:	4618      	mov	r0, r3
 8003694:	f008 ffce 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 1);
 8003698:	2101      	movs	r1, #1
 800369a:	2010      	movs	r0, #16
 800369c:	f002 fefe 	bl	800649c <set_rail_monitor_enable>

		break;
 80036a0:	e15b      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 80036a2:	4848      	ldr	r0, [pc, #288]	; (80037c4 <HAL_UART_RxCpltCallback+0x724>)
 80036a4:	f018 f950 	bl	801b948 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 80036a8:	4b33      	ldr	r3, [pc, #204]	; (8003778 <HAL_UART_RxCpltCallback+0x6d8>)
 80036aa:	2140      	movs	r1, #64	; 0x40
 80036ac:	2200      	movs	r2, #0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f008 ffc0 	bl	800c634 <HAL_GPIO_WritePin>
		set_rail_monitor_enable(RAIL_n800v, 0);
 80036b4:	2100      	movs	r1, #0
 80036b6:	2010      	movs	r0, #16
 80036b8:	f002 fef0 	bl	800649c <set_rail_monitor_enable>
		break;
 80036bc:	e14d      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 80036be:	4842      	ldr	r0, [pc, #264]	; (80037c8 <HAL_UART_RxCpltCallback+0x728>)
 80036c0:	f018 f942 	bl	801b948 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 80036c4:	2300      	movs	r3, #0
 80036c6:	9300      	str	r3, [sp, #0]
 80036c8:	2320      	movs	r3, #32
 80036ca:	4a40      	ldr	r2, [pc, #256]	; (80037cc <HAL_UART_RxCpltCallback+0x72c>)
 80036cc:	2100      	movs	r1, #0
 80036ce:	4840      	ldr	r0, [pc, #256]	; (80037d0 <HAL_UART_RxCpltCallback+0x730>)
 80036d0:	f004 ff36 	bl	8008540 <HAL_DAC_Start_DMA>
		break;
 80036d4:	e141      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 80036d6:	483f      	ldr	r0, [pc, #252]	; (80037d4 <HAL_UART_RxCpltCallback+0x734>)
 80036d8:	f018 f936 	bl	801b948 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80036dc:	2100      	movs	r1, #0
 80036de:	483c      	ldr	r0, [pc, #240]	; (80037d0 <HAL_UART_RxCpltCallback+0x730>)
 80036e0:	f004 ffee 	bl	80086c0 <HAL_DAC_Stop_DMA>
		break;
 80036e4:	e139      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 80036e6:	483c      	ldr	r0, [pc, #240]	; (80037d8 <HAL_UART_RxCpltCallback+0x738>)
 80036e8:	f018 f92e 	bl	801b948 <puts>
		osEventFlagsSet(packet_event_flags, ERPA_FLAG_ID);
 80036ec:	4b3b      	ldr	r3, [pc, #236]	; (80037dc <HAL_UART_RxCpltCallback+0x73c>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2102      	movs	r1, #2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f014 fee4 	bl	80184c0 <osEventFlagsSet>
		TIM2->CCR4 = 312;
 80036f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036fc:	f44f 729c 	mov.w	r2, #312	; 0x138
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
		ERPA_ENABLED = 1;
 8003702:	4b37      	ldr	r3, [pc, #220]	; (80037e0 <HAL_UART_RxCpltCallback+0x740>)
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
		break;
 8003708:	e127      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 800370a:	4836      	ldr	r0, [pc, #216]	; (80037e4 <HAL_UART_RxCpltCallback+0x744>)
 800370c:	f018 f91c 	bl	801b948 <puts>
		ERPA_ENABLED = 0;
 8003710:	4b33      	ldr	r3, [pc, #204]	; (80037e0 <HAL_UART_RxCpltCallback+0x740>)
 8003712:	2200      	movs	r2, #0
 8003714:	701a      	strb	r2, [r3, #0]
		TIM2->CCR4 = 0;
 8003716:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800371a:	2200      	movs	r2, #0
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800371e:	e11c      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8003720:	4831      	ldr	r0, [pc, #196]	; (80037e8 <HAL_UART_RxCpltCallback+0x748>)
 8003722:	f018 f911 	bl	801b948 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8003726:	2100      	movs	r1, #0
 8003728:	4830      	ldr	r0, [pc, #192]	; (80037ec <HAL_UART_RxCpltCallback+0x74c>)
 800372a:	f010 fb99 	bl	8013e60 <HAL_TIM_OC_Start_IT>
		osEventFlagsSet(packet_event_flags, PMT_FLAG_ID);
 800372e:	4b2b      	ldr	r3, [pc, #172]	; (80037dc <HAL_UART_RxCpltCallback+0x73c>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2101      	movs	r1, #1
 8003734:	4618      	mov	r0, r3
 8003736:	f014 fec3 	bl	80184c0 <osEventFlagsSet>
		break;
 800373a:	e10e      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 800373c:	482c      	ldr	r0, [pc, #176]	; (80037f0 <HAL_UART_RxCpltCallback+0x750>)
 800373e:	f018 f903 	bl	801b948 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8003742:	2100      	movs	r1, #0
 8003744:	4829      	ldr	r0, [pc, #164]	; (80037ec <HAL_UART_RxCpltCallback+0x74c>)
 8003746:	f010 fce5 	bl	8014114 <HAL_TIM_OC_Stop_IT>
		break;
 800374a:	e106      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x1C: {
		printf("HK ON \n");
 800374c:	4829      	ldr	r0, [pc, #164]	; (80037f4 <HAL_UART_RxCpltCallback+0x754>)
 800374e:	f018 f8fb 	bl	801b948 <puts>
		osEventFlagsSet(packet_event_flags, HK_FLAG_ID);
 8003752:	4b22      	ldr	r3, [pc, #136]	; (80037dc <HAL_UART_RxCpltCallback+0x73c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2104      	movs	r1, #4
 8003758:	4618      	mov	r0, r3
 800375a:	f014 feb1 	bl	80184c0 <osEventFlagsSet>
		HK_ENABLED = 1;
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <HAL_UART_RxCpltCallback+0x758>)
 8003760:	2201      	movs	r2, #1
 8003762:	701a      	strb	r2, [r3, #0]
		break;
 8003764:	e0f9      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8003766:	4825      	ldr	r0, [pc, #148]	; (80037fc <HAL_UART_RxCpltCallback+0x75c>)
 8003768:	f018 f8ee 	bl	801b948 <puts>
		HK_ENABLED = 0;
 800376c:	4b22      	ldr	r3, [pc, #136]	; (80037f8 <HAL_UART_RxCpltCallback+0x758>)
 800376e:	2200      	movs	r2, #0
 8003770:	701a      	strb	r2, [r3, #0]
		break;
 8003772:	e0f2      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
 8003774:	0801c31c 	.word	0x0801c31c
 8003778:	58020400 	.word	0x58020400
 800377c:	0801c324 	.word	0x0801c324
 8003780:	0801c330 	.word	0x0801c330
 8003784:	0801c33c 	.word	0x0801c33c
 8003788:	0801c65c 	.word	0x0801c65c
 800378c:	0801c348 	.word	0x0801c348
 8003790:	58020800 	.word	0x58020800
 8003794:	0801c354 	.word	0x0801c354
 8003798:	0801c364 	.word	0x0801c364
 800379c:	0801c370 	.word	0x0801c370
 80037a0:	0801c37c 	.word	0x0801c37c
 80037a4:	0801c388 	.word	0x0801c388
 80037a8:	0801c398 	.word	0x0801c398
 80037ac:	0801c3a4 	.word	0x0801c3a4
 80037b0:	0801c3b0 	.word	0x0801c3b0
 80037b4:	0801c3bc 	.word	0x0801c3bc
 80037b8:	0801c3c8 	.word	0x0801c3c8
 80037bc:	0801c3d8 	.word	0x0801c3d8
 80037c0:	0801c3e8 	.word	0x0801c3e8
 80037c4:	0801c3f4 	.word	0x0801c3f4
 80037c8:	0801c404 	.word	0x0801c404
 80037cc:	24000040 	.word	0x24000040
 80037d0:	24000314 	.word	0x24000314
 80037d4:	0801c414 	.word	0x0801c414
 80037d8:	0801c424 	.word	0x0801c424
 80037dc:	24001d08 	.word	0x24001d08
 80037e0:	24001d55 	.word	0x24001d55
 80037e4:	0801c42c 	.word	0x0801c42c
 80037e8:	0801c438 	.word	0x0801c438
 80037ec:	240020e4 	.word	0x240020e4
 80037f0:	0801c440 	.word	0x0801c440
 80037f4:	0801c448 	.word	0x0801c448
 80037f8:	24001d54 	.word	0x24001d54
 80037fc:	0801c450 	.word	0x0801c450
	}
	case 0x1D: {
		printf("Step Up\n");
 8003800:	4858      	ldr	r0, [pc, #352]	; (8003964 <HAL_UART_RxCpltCallback+0x8c4>)
 8003802:	f018 f8a1 	bl	801b948 <puts>
		if (step < 14) {
 8003806:	4b58      	ldr	r3, [pc, #352]	; (8003968 <HAL_UART_RxCpltCallback+0x8c8>)
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b0d      	cmp	r3, #13
 800380e:	f200 809d 	bhi.w	800394c <HAL_UART_RxCpltCallback+0x8ac>
			step += 2;
 8003812:	4b55      	ldr	r3, [pc, #340]	; (8003968 <HAL_UART_RxCpltCallback+0x8c8>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3302      	adds	r3, #2
 800381a:	b2da      	uxtb	r2, r3
 800381c:	4b52      	ldr	r3, [pc, #328]	; (8003968 <HAL_UART_RxCpltCallback+0x8c8>)
 800381e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003820:	4b51      	ldr	r3, [pc, #324]	; (8003968 <HAL_UART_RxCpltCallback+0x8c8>)
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	461a      	mov	r2, r3
 8003828:	4b50      	ldr	r3, [pc, #320]	; (800396c <HAL_UART_RxCpltCallback+0x8cc>)
 800382a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382e:	2200      	movs	r2, #0
 8003830:	2100      	movs	r1, #0
 8003832:	484f      	ldr	r0, [pc, #316]	; (8003970 <HAL_UART_RxCpltCallback+0x8d0>)
 8003834:	f004 ffe7 	bl	8008806 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003838:	2100      	movs	r1, #0
 800383a:	484d      	ldr	r0, [pc, #308]	; (8003970 <HAL_UART_RxCpltCallback+0x8d0>)
 800383c:	f004 fe28 	bl	8008490 <HAL_DAC_Start>
		}
		break;
 8003840:	e084      	b.n	800394c <HAL_UART_RxCpltCallback+0x8ac>
	}
	case 0x0D: {
		printf("Step Down\n");
 8003842:	484c      	ldr	r0, [pc, #304]	; (8003974 <HAL_UART_RxCpltCallback+0x8d4>)
 8003844:	f018 f880 	bl	801b948 <puts>
		if (step > 1) {
 8003848:	4b47      	ldr	r3, [pc, #284]	; (8003968 <HAL_UART_RxCpltCallback+0x8c8>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b01      	cmp	r3, #1
 8003850:	d97e      	bls.n	8003950 <HAL_UART_RxCpltCallback+0x8b0>
			step -= 2;
 8003852:	4b45      	ldr	r3, [pc, #276]	; (8003968 <HAL_UART_RxCpltCallback+0x8c8>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	3b02      	subs	r3, #2
 800385a:	b2da      	uxtb	r2, r3
 800385c:	4b42      	ldr	r3, [pc, #264]	; (8003968 <HAL_UART_RxCpltCallback+0x8c8>)
 800385e:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8003860:	4b41      	ldr	r3, [pc, #260]	; (8003968 <HAL_UART_RxCpltCallback+0x8c8>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	b2db      	uxtb	r3, r3
 8003866:	461a      	mov	r2, r3
 8003868:	4b40      	ldr	r3, [pc, #256]	; (800396c <HAL_UART_RxCpltCallback+0x8cc>)
 800386a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	483f      	ldr	r0, [pc, #252]	; (8003970 <HAL_UART_RxCpltCallback+0x8d0>)
 8003874:	f004 ffc7 	bl	8008806 <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003878:	2100      	movs	r1, #0
 800387a:	483d      	ldr	r0, [pc, #244]	; (8003970 <HAL_UART_RxCpltCallback+0x8d0>)
 800387c:	f004 fe08 	bl	8008490 <HAL_DAC_Start>
		}
		break;
 8003880:	e066      	b.n	8003950 <HAL_UART_RxCpltCallback+0x8b0>
	}
	case 0x1E: {
		printf("Factor Up\n");
 8003882:	483d      	ldr	r0, [pc, #244]	; (8003978 <HAL_UART_RxCpltCallback+0x8d8>)
 8003884:	f018 f860 	bl	801b948 <puts>
		if (cadence <= 50000) {
 8003888:	4b3c      	ldr	r3, [pc, #240]	; (800397c <HAL_UART_RxCpltCallback+0x8dc>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f24c 3250 	movw	r2, #50000	; 0xc350
 8003890:	4293      	cmp	r3, r2
 8003892:	d85f      	bhi.n	8003954 <HAL_UART_RxCpltCallback+0x8b4>
			cadence *= 2;
 8003894:	4b39      	ldr	r3, [pc, #228]	; (800397c <HAL_UART_RxCpltCallback+0x8dc>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	4a38      	ldr	r2, [pc, #224]	; (800397c <HAL_UART_RxCpltCallback+0x8dc>)
 800389c:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 800389e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038a2:	4b36      	ldr	r3, [pc, #216]	; (800397c <HAL_UART_RxCpltCallback+0x8dc>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80038a8:	e054      	b.n	8003954 <HAL_UART_RxCpltCallback+0x8b4>
	}
	case 0x0E: {
		printf("Factor Down\n");
 80038aa:	4835      	ldr	r0, [pc, #212]	; (8003980 <HAL_UART_RxCpltCallback+0x8e0>)
 80038ac:	f018 f84c 	bl	801b948 <puts>
		if (cadence >= 6250) {
 80038b0:	4b32      	ldr	r3, [pc, #200]	; (800397c <HAL_UART_RxCpltCallback+0x8dc>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f641 0269 	movw	r2, #6249	; 0x1869
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d94d      	bls.n	8003958 <HAL_UART_RxCpltCallback+0x8b8>
			cadence /= 2;
 80038bc:	4b2f      	ldr	r3, [pc, #188]	; (800397c <HAL_UART_RxCpltCallback+0x8dc>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	085b      	lsrs	r3, r3, #1
 80038c2:	4a2e      	ldr	r2, [pc, #184]	; (800397c <HAL_UART_RxCpltCallback+0x8dc>)
 80038c4:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 80038c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038ca:	4b2c      	ldr	r3, [pc, #176]	; (800397c <HAL_UART_RxCpltCallback+0x8dc>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 80038d0:	e042      	b.n	8003958 <HAL_UART_RxCpltCallback+0x8b8>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 80038d2:	482c      	ldr	r0, [pc, #176]	; (8003984 <HAL_UART_RxCpltCallback+0x8e4>)
 80038d4:	f018 f838 	bl	801b948 <puts>
		osEventFlagsSet(utility_event_flags, STOP_FLAG);
 80038d8:	4b2b      	ldr	r3, [pc, #172]	; (8003988 <HAL_UART_RxCpltCallback+0x8e8>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2102      	movs	r1, #2
 80038de:	4618      	mov	r0, r3
 80038e0:	f014 fdee 	bl	80184c0 <osEventFlagsSet>
		break;
 80038e4:	e039      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0xE0: {
		printf("Auto Init\n");
 80038e6:	4829      	ldr	r0, [pc, #164]	; (800398c <HAL_UART_RxCpltCallback+0x8ec>)
 80038e8:	f018 f82e 	bl	801b948 <puts>
		osEventFlagsSet(utility_event_flags, AUTOINIT_FLAG);
 80038ec:	4b26      	ldr	r3, [pc, #152]	; (8003988 <HAL_UART_RxCpltCallback+0x8e8>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2104      	movs	r1, #4
 80038f2:	4618      	mov	r0, r3
 80038f4:	f014 fde4 	bl	80184c0 <osEventFlagsSet>
		break;
 80038f8:	e02f      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 80038fa:	4825      	ldr	r0, [pc, #148]	; (8003990 <HAL_UART_RxCpltCallback+0x8f0>)
 80038fc:	f018 f824 	bl	801b948 <puts>
		osEventFlagsSet(utility_event_flags, AUTODEINIT_FLAG);
 8003900:	4b21      	ldr	r3, [pc, #132]	; (8003988 <HAL_UART_RxCpltCallback+0x8e8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2108      	movs	r1, #8
 8003906:	4618      	mov	r0, r3
 8003908:	f014 fdda 	bl	80184c0 <osEventFlagsSet>

		break;
 800390c:	e025      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0xAF: {
		osEventFlagsSet(mode_event_flags, SYNC_FLAG);
 800390e:	4b21      	ldr	r3, [pc, #132]	; (8003994 <HAL_UART_RxCpltCallback+0x8f4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2104      	movs	r1, #4
 8003914:	4618      	mov	r0, r3
 8003916:	f014 fdd3 	bl	80184c0 <osEventFlagsSet>
		break;
 800391a:	e01e      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0xBF: {
		osEventFlagsSet(mode_event_flags, SCIENCE_FLAG);
 800391c:	4b1d      	ldr	r3, [pc, #116]	; (8003994 <HAL_UART_RxCpltCallback+0x8f4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2101      	movs	r1, #1
 8003922:	4618      	mov	r0, r3
 8003924:	f014 fdcc 	bl	80184c0 <osEventFlagsSet>
		break;
 8003928:	e017      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0xCF: {
		osEventFlagsSet(mode_event_flags, IDLE_FLAG);
 800392a:	4b1a      	ldr	r3, [pc, #104]	; (8003994 <HAL_UART_RxCpltCallback+0x8f4>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	2102      	movs	r1, #2
 8003930:	4618      	mov	r0, r3
 8003932:	f014 fdc5 	bl	80184c0 <osEventFlagsSet>
		break;
 8003936:	e010      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0xDF: {
		reset_error_counters();
 8003938:	f7fe fbe8 	bl	800210c <reset_error_counters>
		break;
 800393c:	e00d      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	case 0xEF: {
#ifdef ERROR_HANDLING_ENABLED
		send_previous_error_packet();
 800393e:	f7fe fdb7 	bl	80024b0 <send_previous_error_packet>
#endif
		break;
 8003942:	e00a      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
	}
	default: {
		printf("Unknown Command\n");
 8003944:	4814      	ldr	r0, [pc, #80]	; (8003998 <HAL_UART_RxCpltCallback+0x8f8>)
 8003946:	f017 ffff 	bl	801b948 <puts>
		break;
 800394a:	e006      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
		break;
 800394c:	bf00      	nop
 800394e:	e004      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
		break;
 8003950:	bf00      	nop
 8003952:	e002      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
		break;
 8003954:	bf00      	nop
 8003956:	e000      	b.n	800395a <HAL_UART_RxCpltCallback+0x8ba>
		break;
 8003958:	bf00      	nop
	}
	}
}
 800395a:	bf00      	nop
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	0801c458 	.word	0x0801c458
 8003968:	24001d56 	.word	0x24001d56
 800396c:	24000040 	.word	0x24000040
 8003970:	24000314 	.word	0x24000314
 8003974:	0801c460 	.word	0x0801c460
 8003978:	0801c46c 	.word	0x0801c46c
 800397c:	240000c0 	.word	0x240000c0
 8003980:	0801c478 	.word	0x0801c478
 8003984:	0801c484 	.word	0x0801c484
 8003988:	24001d0c 	.word	0x24001d0c
 800398c:	0801c494 	.word	0x0801c494
 8003990:	0801c4a0 	.word	0x0801c4a0
 8003994:	24001d10 	.word	0x24001d10
 8003998:	0801c4ac 	.word	0x0801c4ac

0800399c <get_reset_cause>:

void get_reset_cause()
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
	ERROR_STRUCT error;

	if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDG1RST))
 80039a2:	4b1a      	ldr	r3, [pc, #104]	; (8003a0c <get_reset_cause+0x70>)
 80039a4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80039a8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d011      	beq.n	80039d4 <get_reset_cause+0x38>
    {
        error.category = EC_watchdog;
 80039b0:	2304      	movs	r3, #4
 80039b2:	703b      	strb	r3, [r7, #0]
        error.detail = ED_UNDEFINED;
 80039b4:	231c      	movs	r3, #28
 80039b6:	707b      	strb	r3, [r7, #1]
        __HAL_RCC_CLEAR_RESET_FLAGS();
 80039b8:	4b14      	ldr	r3, [pc, #80]	; (8003a0c <get_reset_cause+0x70>)
 80039ba:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80039be:	4a13      	ldr	r2, [pc, #76]	; (8003a0c <get_reset_cause+0x70>)
 80039c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039c4:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        handle_error(error);
 80039c8:	463b      	mov	r3, r7
 80039ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80039ce:	f7fe faaf 	bl	8001f30 <handle_error>
        error.detail = ED_UNDEFINED;
        __HAL_RCC_CLEAR_RESET_FLAGS();
        handle_error(error);
    }

}
 80039d2:	e017      	b.n	8003a04 <get_reset_cause+0x68>
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 80039d4:	4b0d      	ldr	r3, [pc, #52]	; (8003a0c <get_reset_cause+0x70>)
 80039d6:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80039da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d010      	beq.n	8003a04 <get_reset_cause+0x68>
        error.category = EC_brownout;
 80039e2:	2303      	movs	r3, #3
 80039e4:	703b      	strb	r3, [r7, #0]
        error.detail = ED_UNDEFINED;
 80039e6:	231c      	movs	r3, #28
 80039e8:	707b      	strb	r3, [r7, #1]
        __HAL_RCC_CLEAR_RESET_FLAGS();
 80039ea:	4b08      	ldr	r3, [pc, #32]	; (8003a0c <get_reset_cause+0x70>)
 80039ec:	f8d3 30d0 	ldr.w	r3, [r3, #208]	; 0xd0
 80039f0:	4a06      	ldr	r2, [pc, #24]	; (8003a0c <get_reset_cause+0x70>)
 80039f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039f6:	f8c2 30d0 	str.w	r3, [r2, #208]	; 0xd0
        handle_error(error);
 80039fa:	463b      	mov	r3, r7
 80039fc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003a00:	f7fe fa96 	bl	8001f30 <handle_error>
}
 8003a04:	bf00      	nop
 8003a06:	3708      	adds	r7, #8
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	58024400 	.word	0x58024400

08003a10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a14:	f002 ffa8 	bl	8006968 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a18:	f000 f82c 	bl	8003a74 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8003a1c:	f000 f8ac 	bl	8003b78 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a20:	f7ff f8fa 	bl	8002c18 <MX_GPIO_Init>
  MX_DMA_Init();
 8003a24:	f7fd f960 	bl	8000ce8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8003a28:	f002 f990 	bl	8005d4c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8003a2c:	f7ff f96e 	bl	8002d0c <MX_I2C1_Init>
  MX_SPI2_Init();
 8003a30:	f000 ffca 	bl	80049c8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8003a34:	f001 fd98 	bl	8005568 <MX_TIM2_Init>
  MX_TIM1_Init();
 8003a38:	f001 fce8 	bl	800540c <MX_TIM1_Init>
  MX_ADC3_Init();
 8003a3c:	f7fc fef4 	bl	8000828 <MX_ADC3_Init>
  MX_ADC1_Init();
 8003a40:	f7fc fdd0 	bl	80005e4 <MX_ADC1_Init>
  MX_DAC1_Init();
 8003a44:	f7fd f89c 	bl	8000b80 <MX_DAC1_Init>
  MX_SPI1_Init();
 8003a48:	f000 ff66 	bl	8004918 <MX_SPI1_Init>
  MX_RTC_Init();
 8003a4c:	f000 fd32 	bl	80044b4 <MX_RTC_Init>
  MX_IWDG1_Init();
 8003a50:	f7ff fa7c 	bl	8002f4c <MX_IWDG1_Init>
  MX_RAMECC_Init();
 8003a54:	f000 fbc8 	bl	80041e8 <MX_RAMECC_Init>
  MX_TIM3_Init();
 8003a58:	f001 fdfc 	bl	8005654 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  #ifdef ERROR_HANDLING_ENABLED
  	error_counter_init();
 8003a5c:	f7fe fae0 	bl	8002020 <error_counter_init>
#endif

  system_setup();
 8003a60:	f000 f8ba 	bl	8003bd8 <system_setup>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8003a64:	f014 fb94 	bl	8018190 <osKernelInitialize>
  MX_FREERTOS_Init();
 8003a68:	f7fe fe12 	bl	8002690 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003a6c:	f014 fbb4 	bl	80181d8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8003a70:	e7fe      	b.n	8003a70 <main+0x60>
	...

08003a74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b09c      	sub	sp, #112	; 0x70
 8003a78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a7a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a7e:	224c      	movs	r2, #76	; 0x4c
 8003a80:	2100      	movs	r1, #0
 8003a82:	4618      	mov	r0, r3
 8003a84:	f017 feea 	bl	801b85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a88:	1d3b      	adds	r3, r7, #4
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f017 fee4 	bl	801b85c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003a94:	2002      	movs	r0, #2
 8003a96:	f00b f9e7 	bl	800ee68 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	603b      	str	r3, [r7, #0]
 8003a9e:	4b34      	ldr	r3, [pc, #208]	; (8003b70 <SystemClock_Config+0xfc>)
 8003aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa2:	4a33      	ldr	r2, [pc, #204]	; (8003b70 <SystemClock_Config+0xfc>)
 8003aa4:	f023 0301 	bic.w	r3, r3, #1
 8003aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003aaa:	4b31      	ldr	r3, [pc, #196]	; (8003b70 <SystemClock_Config+0xfc>)
 8003aac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	603b      	str	r3, [r7, #0]
 8003ab4:	4b2f      	ldr	r3, [pc, #188]	; (8003b74 <SystemClock_Config+0x100>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003abc:	4a2d      	ldr	r2, [pc, #180]	; (8003b74 <SystemClock_Config+0x100>)
 8003abe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ac2:	6193      	str	r3, [r2, #24]
 8003ac4:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <SystemClock_Config+0x100>)
 8003ac6:	699b      	ldr	r3, [r3, #24]
 8003ac8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003ad0:	bf00      	nop
 8003ad2:	4b28      	ldr	r3, [pc, #160]	; (8003b74 <SystemClock_Config+0x100>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ade:	d1f8      	bne.n	8003ad2 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8003ae0:	230b      	movs	r3, #11
 8003ae2:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003ae4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ae8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8003aea:	2309      	movs	r3, #9
 8003aec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003aee:	2340      	movs	r3, #64	; 0x40
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8003af2:	2301      	movs	r3, #1
 8003af4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003af6:	2302      	movs	r3, #2
 8003af8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003afa:	2302      	movs	r3, #2
 8003afc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003afe:	2304      	movs	r3, #4
 8003b00:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 8003b02:	2318      	movs	r3, #24
 8003b04:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003b06:	2302      	movs	r3, #2
 8003b08:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8003b12:	2308      	movs	r3, #8
 8003b14:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8003b16:	2302      	movs	r3, #2
 8003b18:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b22:	4618      	mov	r0, r3
 8003b24:	f00b fae6 	bl	800f0f4 <HAL_RCC_OscConfig>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8003b2e:	f000 f94f 	bl	8003dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b32:	233f      	movs	r3, #63	; 0x3f
 8003b34:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b36:	2303      	movs	r3, #3
 8003b38:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003b46:	2340      	movs	r3, #64	; 0x40
 8003b48:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003b52:	1d3b      	adds	r3, r7, #4
 8003b54:	2101      	movs	r1, #1
 8003b56:	4618      	mov	r0, r3
 8003b58:	f00b ff26 	bl	800f9a8 <HAL_RCC_ClockConfig>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8003b62:	f000 f935 	bl	8003dd0 <Error_Handler>
  }
}
 8003b66:	bf00      	nop
 8003b68:	3770      	adds	r7, #112	; 0x70
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	58000400 	.word	0x58000400
 8003b74:	58024800 	.word	0x58024800

08003b78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b0b0      	sub	sp, #192	; 0xc0
 8003b7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b7e:	463b      	mov	r3, r7
 8003b80:	22c0      	movs	r2, #192	; 0xc0
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f017 fe69 	bl	801b85c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003b8a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003b8e:	f04f 0300 	mov.w	r3, #0
 8003b92:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 8003b96:	2304      	movs	r3, #4
 8003b98:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 24;
 8003b9a:	2318      	movs	r3, #24
 8003b9c:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8003b9e:	2308      	movs	r3, #8
 8003ba0:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003ba2:	2302      	movs	r3, #2
 8003ba4:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8003baa:	2380      	movs	r3, #128	; 0x80
 8003bac:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003bae:	2320      	movs	r3, #32
 8003bb0:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003bbc:	463b      	mov	r3, r7
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f00c fac0 	bl	8010144 <HAL_RCCEx_PeriphCLKConfig>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d001      	beq.n	8003bce <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8003bca:	f000 f901 	bl	8003dd0 <Error_Handler>
  }
}
 8003bce:	bf00      	nop
 8003bd0:	37c0      	adds	r7, #192	; 0xc0
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <system_setup>:

/* USER CODE BEGIN 4 */
void system_setup() {
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
	// 4 -- Start timer 3
	// 5 -- Set timer 2 PWM
	// 6 -- Init ADC DMA
	// 7 -- Start UART receive interrupts

	init_flash_ecc();
 8003bdc:	f000 f8c8 	bl	8003d70 <init_flash_ecc>

	packet_event_flags = osEventFlagsNew(NULL);
 8003be0:	2000      	movs	r0, #0
 8003be2:	f014 fc2e 	bl	8018442 <osEventFlagsNew>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4a1b      	ldr	r2, [pc, #108]	; (8003c58 <system_setup+0x80>)
 8003bea:	6013      	str	r3, [r2, #0]
    if (packet_event_flags == NULL) {
 8003bec:	4b1a      	ldr	r3, [pc, #104]	; (8003c58 <system_setup+0x80>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d100      	bne.n	8003bf6 <system_setup+0x1e>
        while (1);
 8003bf4:	e7fe      	b.n	8003bf4 <system_setup+0x1c>
    }

    utility_event_flags = osEventFlagsNew(NULL);
 8003bf6:	2000      	movs	r0, #0
 8003bf8:	f014 fc23 	bl	8018442 <osEventFlagsNew>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <system_setup+0x84>)
 8003c00:	6013      	str	r3, [r2, #0]
    if (utility_event_flags == NULL) {
 8003c02:	4b16      	ldr	r3, [pc, #88]	; (8003c5c <system_setup+0x84>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d100      	bne.n	8003c0c <system_setup+0x34>
        while (1);
 8003c0a:	e7fe      	b.n	8003c0a <system_setup+0x32>
    }

    mode_event_flags = osEventFlagsNew(NULL);
 8003c0c:	2000      	movs	r0, #0
 8003c0e:	f014 fc18 	bl	8018442 <osEventFlagsNew>
 8003c12:	4603      	mov	r3, r0
 8003c14:	4a12      	ldr	r2, [pc, #72]	; (8003c60 <system_setup+0x88>)
 8003c16:	6013      	str	r3, [r2, #0]
    if (mode_event_flags == NULL) {
 8003c18:	4b11      	ldr	r3, [pc, #68]	; (8003c60 <system_setup+0x88>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d100      	bne.n	8003c22 <system_setup+0x4a>
        while (1);
 8003c20:	e7fe      	b.n	8003c20 <system_setup+0x48>
    }

    TIM2->CCR4 = 0;
 8003c22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003c26:	2200      	movs	r2, #0
 8003c28:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8003c2a:	210c      	movs	r1, #12
 8003c2c:	480d      	ldr	r0, [pc, #52]	; (8003c64 <system_setup+0x8c>)
 8003c2e:	f010 f917 	bl	8013e60 <HAL_TIM_OC_Start_IT>

#ifdef ERROR_HANDLING_ENABLED
	if (!voltage_monitor_init()) {
 8003c32:	f002 f995 	bl	8005f60 <voltage_monitor_init>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d100      	bne.n	8003c3e <system_setup+0x66>
		while (1);
 8003c3c:	e7fe      	b.n	8003c3c <system_setup+0x64>
	}
#endif

	if (!init_adc_dma()) {
 8003c3e:	f000 fccb 	bl	80045d8 <init_adc_dma>
 8003c42:	4603      	mov	r3, r0
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d100      	bne.n	8003c4a <system_setup+0x72>
		while (1);
 8003c48:	e7fe      	b.n	8003c48 <system_setup+0x70>
	}

	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	4906      	ldr	r1, [pc, #24]	; (8003c68 <system_setup+0x90>)
 8003c4e:	4807      	ldr	r0, [pc, #28]	; (8003c6c <system_setup+0x94>)
 8003c50:	f011 fde6 	bl	8015820 <HAL_UART_Receive_IT>


}
 8003c54:	bf00      	nop
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	24001d08 	.word	0x24001d08
 8003c5c:	24001d0c 	.word	0x24001d0c
 8003c60:	24001d10 	.word	0x24001d10
 8003c64:	24002130 	.word	0x24002130
 8003c68:	24001d14 	.word	0x24001d14
 8003c6c:	240021c8 	.word	0x240021c8

08003c70 <send_ACK>:

void send_ACK() {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	af00      	add	r7, sp, #0
	static uint8_t tx_buffer[1];

	tx_buffer[0] = ACK;
 8003c74:	4b05      	ldr	r3, [pc, #20]	; (8003c8c <send_ACK+0x1c>)
 8003c76:	22ff      	movs	r2, #255	; 0xff
 8003c78:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);
 8003c7a:	2364      	movs	r3, #100	; 0x64
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4903      	ldr	r1, [pc, #12]	; (8003c8c <send_ACK+0x1c>)
 8003c80:	4803      	ldr	r0, [pc, #12]	; (8003c90 <send_ACK+0x20>)
 8003c82:	f011 fc77 	bl	8015574 <HAL_UART_Transmit>
}
 8003c86:	bf00      	nop
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	24001d60 	.word	0x24001d60
 8003c90:	240021c8 	.word	0x240021c8

08003c94 <get_current_step>:
	tx_buffer[0] = NACK;
	HAL_UART_Transmit(&huart1, tx_buffer, 1, 100);

}

uint8_t get_current_step() {
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
	int dac_value;

	dac_value = DAC1->DHR12R1;
 8003c9a:	4b2e      	ldr	r3, [pc, #184]	; (8003d54 <get_current_step+0xc0>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	607b      	str	r3, [r7, #4]

	switch (dac_value) {
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d04a      	beq.n	8003d40 <get_current_step+0xac>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb0:	da48      	bge.n	8003d44 <get_current_step+0xb0>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03f      	beq.n	8003d3c <get_current_step+0xa8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f640 628b 	movw	r2, #3723	; 0xe8b
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	dc3e      	bgt.n	8003d44 <get_current_step+0xb0>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f640 421f 	movw	r2, #3103	; 0xc1f
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d033      	beq.n	8003d38 <get_current_step+0xa4>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f5b3 6f42 	cmp.w	r3, #3104	; 0xc20
 8003cd6:	da35      	bge.n	8003d44 <get_current_step+0xb0>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d028      	beq.n	8003d34 <get_current_step+0xa0>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f640 12b2 	movw	r2, #2482	; 0x9b2
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	dc2b      	bgt.n	8003d44 <get_current_step+0xb0>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f240 7245 	movw	r2, #1861	; 0x745
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01c      	beq.n	8003d30 <get_current_step+0x9c>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	f240 7245 	movw	r2, #1861	; 0x745
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	dc21      	bgt.n	8003d44 <get_current_step+0xb0>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d010      	beq.n	8003d2c <get_current_step+0x98>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f240 42d9 	movw	r2, #1241	; 0x4d9
 8003d10:	4293      	cmp	r3, r2
 8003d12:	dc17      	bgt.n	8003d44 <get_current_step+0xb0>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d004      	beq.n	8003d24 <get_current_step+0x90>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f5b3 7f1b 	cmp.w	r3, #620	; 0x26c
 8003d20:	d002      	beq.n	8003d28 <get_current_step+0x94>
 8003d22:	e00f      	b.n	8003d44 <get_current_step+0xb0>
	case 0:
		return 0;
 8003d24:	2300      	movs	r3, #0
 8003d26:	e00e      	b.n	8003d46 <get_current_step+0xb2>
	case 620:
		return 1;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e00c      	b.n	8003d46 <get_current_step+0xb2>
	case 1241:
		return 2;
 8003d2c:	2302      	movs	r3, #2
 8003d2e:	e00a      	b.n	8003d46 <get_current_step+0xb2>
	case 1861:
		return 3;
 8003d30:	2303      	movs	r3, #3
 8003d32:	e008      	b.n	8003d46 <get_current_step+0xb2>
	case 2482:
		return 4;
 8003d34:	2304      	movs	r3, #4
 8003d36:	e006      	b.n	8003d46 <get_current_step+0xb2>
	case 3103:
		return 5;
 8003d38:	2305      	movs	r3, #5
 8003d3a:	e004      	b.n	8003d46 <get_current_step+0xb2>
	case 3723:
		return 6;
 8003d3c:	2306      	movs	r3, #6
 8003d3e:	e002      	b.n	8003d46 <get_current_step+0xb2>
	case 4095:
		return 7;
 8003d40:	2307      	movs	r3, #7
 8003d42:	e000      	b.n	8003d46 <get_current_step+0xb2>
	default:
		return -1;
 8003d44:	23ff      	movs	r3, #255	; 0xff
	}
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40007400 	.word	0x40007400

08003d58 <enter_stop>:

void enter_stop() {
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	af00      	add	r7, sp, #0
	  send_ACK();
 8003d5c:	f7ff ff88 	bl	8003c70 <send_ACK>

	  vTaskSuspendAll();
 8003d60:	f016 f80c 	bl	8019d7c <vTaskSuspendAll>
	  HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 8003d64:	2101      	movs	r1, #1
 8003d66:	2001      	movs	r0, #1
 8003d68:	f00b f842 	bl	800edf0 <HAL_PWR_EnterSTOPMode>

		// When MCU is triggered to wake up, it resumes right here.
		// That's why it looks like we enter stop mode and then instantly
		// configure the clock and resume tasks, but in reality the MCU
		// just stops right here.
	  NVIC_SystemReset();
 8003d6c:	f7ff f90c 	bl	8002f88 <__NVIC_SystemReset>

08003d70 <init_flash_ecc>:
	  SystemClock_Config();
	  reset_packet_sequence_numbers();
	  xTaskResumeAll();
}

void init_flash_ecc() {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8003d74:	f008 f81e 	bl	800bdb4 <HAL_FLASH_Unlock>

	HAL_NVIC_SetPriority(FLASH_IRQn, 15, 0);
 8003d78:	2200      	movs	r2, #0
 8003d7a:	210f      	movs	r1, #15
 8003d7c:	2004      	movs	r0, #4
 8003d7e:	f004 fb3d 	bl	80083fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8003d82:	2004      	movs	r0, #4
 8003d84:	f004 fb54 	bl	8008430 <HAL_NVIC_EnableIRQ>
	HAL_FLASHEx_EnableEccCorrectionInterrupt();
 8003d88:	f008 f9b4 	bl	800c0f4 <HAL_FLASHEx_EnableEccCorrectionInterrupt>
	HAL_FLASHEx_EnableEccDetectionInterrupt();
 8003d8c:	f008 f9ca 	bl	800c124 <HAL_FLASHEx_EnableEccDetectionInterrupt>

}
 8003d90:	bf00      	nop
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
	HAL_IWDG_Refresh(&hiwdg1);
 8003d9c:	4809      	ldr	r0, [pc, #36]	; (8003dc4 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003d9e:	f00b f816 	bl	800edce <HAL_IWDG_Refresh>

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d101      	bne.n	8003db0 <HAL_TIM_PeriodElapsedCallback+0x1c>
    HAL_IncTick();
 8003dac:	f002 fe18 	bl	80069e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if (htim == &htim3) {
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a06      	ldr	r2, [pc, #24]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d101      	bne.n	8003dbc <HAL_TIM_PeriodElapsedCallback+0x28>
		NVIC_SystemReset();
 8003db8:	f7ff f8e6 	bl	8002f88 <__NVIC_SystemReset>
	}
  /* USER CODE END Callback 1 */
}
 8003dbc:	bf00      	nop
 8003dbe:	3708      	adds	r7, #8
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	24001cf8 	.word	0x24001cf8
 8003dc8:	40001000 	.word	0x40001000
 8003dcc:	2400217c 	.word	0x2400217c

08003dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	ERROR_STRUCT error;
	error.category = EC_peripheral;
 8003dd6:	2302      	movs	r3, #2
 8003dd8:	703b      	strb	r3, [r7, #0]
	error.detail = ED_UNDEFINED;
 8003dda:	231c      	movs	r3, #28
 8003ddc:	707b      	strb	r3, [r7, #1]
	handle_error(error);
 8003dde:	463b      	mov	r3, r7
 8003de0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003de4:	f7fe f8a4 	bl	8001f30 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <create_pmt_packet>:
uint32_t erpa_seq = 0;
uint16_t hk_seq = 0;



void create_pmt_packet() {
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 8003df6:	bf00      	nop
 8003df8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003dfc:	481c      	ldr	r0, [pc, #112]	; (8003e70 <create_pmt_packet+0x80>)
 8003dfe:	f008 fc01 	bl	800c604 <HAL_GPIO_ReadPin>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1f7      	bne.n	8003df8 <create_pmt_packet+0x8>
	}
	uint8_t buffer[PMT_DATA_SIZE];
	uint8_t pmt_spi[2];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f001 fd52 	bl	80058b4 <get_uptime>
	sample_pmt_spi(pmt_spi);
 8003e10:	f107 0308 	add.w	r3, r7, #8
 8003e14:	4618      	mov	r0, r3
 8003e16:	f000 fc33 	bl	8004680 <sample_pmt_spi>

	buffer[0] = PMT_SYNC;
 8003e1a:	23ff      	movs	r3, #255	; 0xff
 8003e1c:	733b      	strb	r3, [r7, #12]
	buffer[1] = PMT_SYNC;
 8003e1e:	23ff      	movs	r3, #255	; 0xff
 8003e20:	737b      	strb	r3, [r7, #13]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8003e22:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <create_pmt_packet+0x84>)
 8003e24:	881b      	ldrh	r3, [r3, #0]
 8003e26:	0a1b      	lsrs	r3, r3, #8
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	73bb      	strb	r3, [r7, #14]
	buffer[3] = (pmt_seq & 0xFF);
 8003e2e:	4b11      	ldr	r3, [pc, #68]	; (8003e74 <create_pmt_packet+0x84>)
 8003e30:	881b      	ldrh	r3, [r3, #0]
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	73fb      	strb	r3, [r7, #15]
	buffer[4] = pmt_spi[0];
 8003e36:	7a3b      	ldrb	r3, [r7, #8]
 8003e38:	743b      	strb	r3, [r7, #16]
	buffer[5] = pmt_spi[1];
 8003e3a:	7a7b      	ldrb	r3, [r7, #9]
 8003e3c:	747b      	strb	r3, [r7, #17]
	buffer[6] = uptime[0];
 8003e3e:	793b      	ldrb	r3, [r7, #4]
 8003e40:	74bb      	strb	r3, [r7, #18]
	buffer[7] = uptime[1];
 8003e42:	797b      	ldrb	r3, [r7, #5]
 8003e44:	74fb      	strb	r3, [r7, #19]
	buffer[8] = uptime[2];
 8003e46:	79bb      	ldrb	r3, [r7, #6]
 8003e48:	753b      	strb	r3, [r7, #20]
	buffer[9] = uptime[3];
 8003e4a:	79fb      	ldrb	r3, [r7, #7]
 8003e4c:	757b      	strb	r3, [r7, #21]

	HAL_UART_Transmit(&huart1, buffer, PMT_DATA_SIZE, 100);
 8003e4e:	f107 010c 	add.w	r1, r7, #12
 8003e52:	2364      	movs	r3, #100	; 0x64
 8003e54:	220a      	movs	r2, #10
 8003e56:	4808      	ldr	r0, [pc, #32]	; (8003e78 <create_pmt_packet+0x88>)
 8003e58:	f011 fb8c 	bl	8015574 <HAL_UART_Transmit>

	pmt_seq++;
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <create_pmt_packet+0x84>)
 8003e5e:	881b      	ldrh	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	4b03      	ldr	r3, [pc, #12]	; (8003e74 <create_pmt_packet+0x84>)
 8003e66:	801a      	strh	r2, [r3, #0]
}
 8003e68:	bf00      	nop
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	58020000 	.word	0x58020000
 8003e74:	24001d62 	.word	0x24001d62
 8003e78:	240021c8 	.word	0x240021c8

08003e7c <create_erpa_packet>:


void create_erpa_packet() {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b088      	sub	sp, #32
 8003e80:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 8003e82:	bf00      	nop
 8003e84:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e88:	4828      	ldr	r0, [pc, #160]	; (8003f2c <create_erpa_packet+0xb0>)
 8003e8a:	f008 fbbb 	bl	800c604 <HAL_GPIO_ReadPin>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d1f7      	bne.n	8003e84 <create_erpa_packet+0x8>

	uint8_t buffer[ERPA_DATA_SIZE];
	uint8_t erpa_spi[2];
	uint16_t erpa_adc[1];
	uint8_t uptime[UPTIME_SIZE];
	uint8_t sweep_step = -1;
 8003e94:	23ff      	movs	r3, #255	; 0xff
 8003e96:	77fb      	strb	r3, [r7, #31]

	get_uptime(uptime);
 8003e98:	1d3b      	adds	r3, r7, #4
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f001 fd0a 	bl	80058b4 <get_uptime>
	sweep_step = get_current_step();
 8003ea0:	f7ff fef8 	bl	8003c94 <get_current_step>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	77fb      	strb	r3, [r7, #31]

	sample_erpa_spi(erpa_spi);
 8003ea8:	f107 030c 	add.w	r3, r7, #12
 8003eac:	4618      	mov	r0, r3
 8003eae:	f000 fc07 	bl	80046c0 <sample_erpa_spi>
	sample_erpa_adc(erpa_adc);
 8003eb2:	f107 0308 	add.w	r3, r7, #8
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 fc22 	bl	8004700 <sample_erpa_adc>

	buffer[0] = ERPA_SYNC;
 8003ebc:	23ee      	movs	r3, #238	; 0xee
 8003ebe:	743b      	strb	r3, [r7, #16]
	buffer[1] = ERPA_SYNC;
 8003ec0:	23ee      	movs	r3, #238	; 0xee
 8003ec2:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((erpa_seq >> 16) & 0xFF);
 8003ec4:	4b1a      	ldr	r3, [pc, #104]	; (8003f30 <create_erpa_packet+0xb4>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	0c1b      	lsrs	r3, r3, #16
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	74bb      	strb	r3, [r7, #18]
	buffer[3] = ((erpa_seq >> 8) & 0xFF);
 8003ece:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <create_erpa_packet+0xb4>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	0a1b      	lsrs	r3, r3, #8
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	74fb      	strb	r3, [r7, #19]
	buffer[4] = erpa_seq & 0xFF;
 8003ed8:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <create_erpa_packet+0xb4>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	753b      	strb	r3, [r7, #20]
	buffer[5] = sweep_step;
 8003ee0:	7ffb      	ldrb	r3, [r7, #31]
 8003ee2:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8003ee4:	893b      	ldrh	r3, [r7, #8]
 8003ee6:	0a1b      	lsrs	r3, r3, #8
 8003ee8:	b29b      	uxth	r3, r3
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8003eee:	893b      	ldrh	r3, [r7, #8]
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	75fb      	strb	r3, [r7, #23]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8003ef4:	7b3b      	ldrb	r3, [r7, #12]
 8003ef6:	763b      	strb	r3, [r7, #24]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 8003ef8:	7b7b      	ldrb	r3, [r7, #13]
 8003efa:	767b      	strb	r3, [r7, #25]
	buffer[10] = uptime[0];
 8003efc:	793b      	ldrb	r3, [r7, #4]
 8003efe:	76bb      	strb	r3, [r7, #26]
	buffer[11] = uptime[1];
 8003f00:	797b      	ldrb	r3, [r7, #5]
 8003f02:	76fb      	strb	r3, [r7, #27]
	buffer[12] = uptime[2];
 8003f04:	79bb      	ldrb	r3, [r7, #6]
 8003f06:	773b      	strb	r3, [r7, #28]
	buffer[13] = uptime[3];
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	777b      	strb	r3, [r7, #29]

	HAL_UART_Transmit(&huart1, buffer, ERPA_DATA_SIZE, 100);
 8003f0c:	f107 0110 	add.w	r1, r7, #16
 8003f10:	2364      	movs	r3, #100	; 0x64
 8003f12:	220e      	movs	r2, #14
 8003f14:	4807      	ldr	r0, [pc, #28]	; (8003f34 <create_erpa_packet+0xb8>)
 8003f16:	f011 fb2d 	bl	8015574 <HAL_UART_Transmit>

	erpa_seq++;
 8003f1a:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <create_erpa_packet+0xb4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3301      	adds	r3, #1
 8003f20:	4a03      	ldr	r2, [pc, #12]	; (8003f30 <create_erpa_packet+0xb4>)
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	bf00      	nop
 8003f26:	3720      	adds	r7, #32
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	58020400 	.word	0x58020400
 8003f30:	24001d64 	.word	0x24001d64
 8003f34:	240021c8 	.word	0x240021c8

08003f38 <create_hk_packet>:


void create_hk_packet() {
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b092      	sub	sp, #72	; 0x48
 8003f3c:	af00      	add	r7, sp, #0
	VOLTAGE_RAIL *rail_monitor_ptr;
	uint8_t buffer[HK_DATA_SIZE];
	uint8_t timestamp[TIMESTAMP_SIZE];
	uint8_t uptime[UPTIME_SIZE];

	get_uptime(uptime);
 8003f3e:	1d3b      	adds	r3, r7, #4
 8003f40:	4618      	mov	r0, r3
 8003f42:	f001 fcb7 	bl	80058b4 <get_uptime>
	get_unix_time(timestamp);
 8003f46:	f107 0308 	add.w	r3, r7, #8
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f001 fd02 	bl	8005954 <get_unix_time>
	rail_monitor_ptr = get_rail_monitor();
 8003f50:	f002 fb24 	bl	800659c <get_rail_monitor>
 8003f54:	6478      	str	r0, [r7, #68]	; 0x44


	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8003f56:	23dd      	movs	r3, #221	; 0xdd
 8003f58:	743b      	strb	r3, [r7, #16]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8003f5a:	23dd      	movs	r3, #221	; 0xdd
 8003f5c:	747b      	strb	r3, [r7, #17]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 8003f5e:	4b95      	ldr	r3, [pc, #596]	; (80041b4 <create_hk_packet+0x27c>)
 8003f60:	881b      	ldrh	r3, [r3, #0]
 8003f62:	0a1b      	lsrs	r3, r3, #8
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	74bb      	strb	r3, [r7, #18]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 8003f6a:	4b92      	ldr	r3, [pc, #584]	; (80041b4 <create_hk_packet+0x27c>)
 8003f6c:	881b      	ldrh	r3, [r3, #0]
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	74fb      	strb	r3, [r7, #19]
	buffer[4] = ((rail_monitor_ptr[RAIL_vsense].data & 0xFF00) >> 8);		// HK vsense MSB
 8003f72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f74:	889b      	ldrh	r3, [r3, #4]
 8003f76:	0a1b      	lsrs	r3, r3, #8
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	b2db      	uxtb	r3, r3
 8003f7c:	753b      	strb	r3, [r7, #20]
	buffer[5] = (rail_monitor_ptr[RAIL_vsense].data & 0xFF);				// HK vsense LSB
 8003f7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f80:	889b      	ldrh	r3, [r3, #4]
 8003f82:	b2db      	uxtb	r3, r3
 8003f84:	757b      	strb	r3, [r7, #21]
	buffer[6] = ((rail_monitor_ptr[RAIL_vrefint].data & 0xFF00) >> 8);		// HK vrefint MSB
 8003f86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f88:	3310      	adds	r3, #16
 8003f8a:	889b      	ldrh	r3, [r3, #4]
 8003f8c:	0a1b      	lsrs	r3, r3, #8
 8003f8e:	b29b      	uxth	r3, r3
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	75bb      	strb	r3, [r7, #22]
	buffer[7] = (rail_monitor_ptr[RAIL_vrefint].data & 0xFF);				// HK vrefint LSB
 8003f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f96:	3310      	adds	r3, #16
 8003f98:	889b      	ldrh	r3, [r3, #4]
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	75fb      	strb	r3, [r7, #23]
	buffer[8] = ((rail_monitor_ptr[RAIL_TEMP1].data & 0xFF00) >> 8);	// HK TEMP1 MSB
 8003f9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fa0:	3320      	adds	r3, #32
 8003fa2:	889b      	ldrh	r3, [r3, #4]
 8003fa4:	0a1b      	lsrs	r3, r3, #8
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	b2db      	uxtb	r3, r3
 8003faa:	763b      	strb	r3, [r7, #24]
	buffer[9] = (rail_monitor_ptr[RAIL_TEMP1].data & 0xFF);				// HK TEMP1 LSB
 8003fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fae:	3320      	adds	r3, #32
 8003fb0:	889b      	ldrh	r3, [r3, #4]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	767b      	strb	r3, [r7, #25]
	buffer[10] = ((rail_monitor_ptr[RAIL_TEMP2].data & 0xFF00) >> 8);	// HK TEMP2 MSB
 8003fb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fb8:	3330      	adds	r3, #48	; 0x30
 8003fba:	889b      	ldrh	r3, [r3, #4]
 8003fbc:	0a1b      	lsrs	r3, r3, #8
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	76bb      	strb	r3, [r7, #26]
	buffer[11] = (rail_monitor_ptr[RAIL_TEMP2].data & 0xFF);			// HK TEMP2 LSB
 8003fc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fc6:	3330      	adds	r3, #48	; 0x30
 8003fc8:	889b      	ldrh	r3, [r3, #4]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	76fb      	strb	r3, [r7, #27]
	buffer[12] = ((rail_monitor_ptr[RAIL_TEMP3].data & 0xFF00) >> 8);	// HK TEMP3 MSB
 8003fce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fd0:	3340      	adds	r3, #64	; 0x40
 8003fd2:	889b      	ldrh	r3, [r3, #4]
 8003fd4:	0a1b      	lsrs	r3, r3, #8
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	773b      	strb	r3, [r7, #28]
	buffer[13] = (rail_monitor_ptr[RAIL_TEMP3].data & 0xFF);			// HK TEMP3 LSB
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fde:	3340      	adds	r3, #64	; 0x40
 8003fe0:	889b      	ldrh	r3, [r3, #4]
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	777b      	strb	r3, [r7, #29]
	buffer[14] = ((rail_monitor_ptr[RAIL_TEMP4].data & 0xFF00) >> 8);	// HK TEMP4 MSB
 8003fe6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fe8:	3350      	adds	r3, #80	; 0x50
 8003fea:	889b      	ldrh	r3, [r3, #4]
 8003fec:	0a1b      	lsrs	r3, r3, #8
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	77bb      	strb	r3, [r7, #30]
	buffer[15] = (rail_monitor_ptr[RAIL_TEMP4].data & 0xFF);			// HK TEMP4 LSB
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff6:	3350      	adds	r3, #80	; 0x50
 8003ff8:	889b      	ldrh	r3, [r3, #4]
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	77fb      	strb	r3, [r7, #31]
	buffer[16] = ((rail_monitor_ptr[RAIL_busvmon].data & 0xFF00) >> 8);	// HK BUSvmon MSB
 8003ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004000:	3360      	adds	r3, #96	; 0x60
 8004002:	889b      	ldrh	r3, [r3, #4]
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	b29b      	uxth	r3, r3
 8004008:	b2db      	uxtb	r3, r3
 800400a:	f887 3020 	strb.w	r3, [r7, #32]
	buffer[17] = (rail_monitor_ptr[RAIL_busvmon].data & 0xFF);				// HK BUSvmon LSB
 800400e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004010:	3360      	adds	r3, #96	; 0x60
 8004012:	889b      	ldrh	r3, [r3, #4]
 8004014:	b2db      	uxtb	r3, r3
 8004016:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	buffer[18] = ((rail_monitor_ptr[RAIL_busimon].data & 0xFF00) >> 8);	// HK BUSimon MSB
 800401a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800401c:	3370      	adds	r3, #112	; 0x70
 800401e:	889b      	ldrh	r3, [r3, #4]
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	b29b      	uxth	r3, r3
 8004024:	b2db      	uxtb	r3, r3
 8004026:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
	buffer[19] = (rail_monitor_ptr[RAIL_busimon].data & 0xFF);				// HK BUSimon LSB
 800402a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800402c:	3370      	adds	r3, #112	; 0x70
 800402e:	889b      	ldrh	r3, [r3, #4]
 8004030:	b2db      	uxtb	r3, r3
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	buffer[20] = ((rail_monitor_ptr[RAIL_2v5].data & 0xFF00) >> 8);		// HK 2v5mon MSB
 8004036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004038:	3380      	adds	r3, #128	; 0x80
 800403a:	889b      	ldrh	r3, [r3, #4]
 800403c:	0a1b      	lsrs	r3, r3, #8
 800403e:	b29b      	uxth	r3, r3
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	buffer[21] = (rail_monitor_ptr[RAIL_2v5].data & 0xFF);					// HK 2v5mon LSB
 8004046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004048:	3380      	adds	r3, #128	; 0x80
 800404a:	889b      	ldrh	r3, [r3, #4]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	buffer[22] = ((rail_monitor_ptr[RAIL_3v3].data & 0xFF00) >> 8);		// HK 3v3mon MSB
 8004052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004054:	3390      	adds	r3, #144	; 0x90
 8004056:	889b      	ldrh	r3, [r3, #4]
 8004058:	0a1b      	lsrs	r3, r3, #8
 800405a:	b29b      	uxth	r3, r3
 800405c:	b2db      	uxtb	r3, r3
 800405e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	buffer[23] = (rail_monitor_ptr[RAIL_3v3].data & 0xFF);					// HK 3v3mon LSB
 8004062:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004064:	3390      	adds	r3, #144	; 0x90
 8004066:	889b      	ldrh	r3, [r3, #4]
 8004068:	b2db      	uxtb	r3, r3
 800406a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	buffer[24] = ((rail_monitor_ptr[RAIL_5v].data & 0xFF00) >> 8);			// HK 5vmon MSB
 800406e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004070:	33a0      	adds	r3, #160	; 0xa0
 8004072:	889b      	ldrh	r3, [r3, #4]
 8004074:	0a1b      	lsrs	r3, r3, #8
 8004076:	b29b      	uxth	r3, r3
 8004078:	b2db      	uxtb	r3, r3
 800407a:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	buffer[25] = (rail_monitor_ptr[RAIL_5v].data & 0xFF);					// HK 5vmon LSB
 800407e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004080:	33a0      	adds	r3, #160	; 0xa0
 8004082:	889b      	ldrh	r3, [r3, #4]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	buffer[26] = ((rail_monitor_ptr[RAIL_n3v3].data & 0xFF00) >> 8);		// HK n3v3mon MSB
 800408a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408c:	33b0      	adds	r3, #176	; 0xb0
 800408e:	889b      	ldrh	r3, [r3, #4]
 8004090:	0a1b      	lsrs	r3, r3, #8
 8004092:	b29b      	uxth	r3, r3
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	buffer[27] = (rail_monitor_ptr[RAIL_n3v3].data & 0xFF);				// HK n3v3mon LSB
 800409a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800409c:	33b0      	adds	r3, #176	; 0xb0
 800409e:	889b      	ldrh	r3, [r3, #4]
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	buffer[28] = ((rail_monitor_ptr[RAIL_n5v].data & 0xFF00) >> 8);		// HK n5vmon MSB
 80040a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040a8:	33c0      	adds	r3, #192	; 0xc0
 80040aa:	889b      	ldrh	r3, [r3, #4]
 80040ac:	0a1b      	lsrs	r3, r3, #8
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	buffer[29] = (rail_monitor_ptr[RAIL_n5v].data & 0xFF);					// HK n5vmon LSB
 80040b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040b8:	33c0      	adds	r3, #192	; 0xc0
 80040ba:	889b      	ldrh	r3, [r3, #4]
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	buffer[30] = ((rail_monitor_ptr[RAIL_15v].data & 0xFF00) >> 8);		// HK 15vmon MSB
 80040c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040c4:	33d0      	adds	r3, #208	; 0xd0
 80040c6:	889b      	ldrh	r3, [r3, #4]
 80040c8:	0a1b      	lsrs	r3, r3, #8
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	buffer[31] = (rail_monitor_ptr[RAIL_15v].data & 0xFF);					// HK 15vmon LSB
 80040d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040d4:	33d0      	adds	r3, #208	; 0xd0
 80040d6:	889b      	ldrh	r3, [r3, #4]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	buffer[32] = ((rail_monitor_ptr[RAIL_5vref].data & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80040de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040e0:	33e0      	adds	r3, #224	; 0xe0
 80040e2:	889b      	ldrh	r3, [r3, #4]
 80040e4:	0a1b      	lsrs	r3, r3, #8
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
	buffer[33] = (rail_monitor_ptr[RAIL_5vref].data & 0xFF);				// HK 5vrefmon LSB
 80040ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040f0:	33e0      	adds	r3, #224	; 0xe0
 80040f2:	889b      	ldrh	r3, [r3, #4]
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	buffer[34] = ((rail_monitor_ptr[RAIL_n200v].data & 0xFF00) >> 8);		// HK n150vmon MSB
 80040fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80040fc:	33f0      	adds	r3, #240	; 0xf0
 80040fe:	889b      	ldrh	r3, [r3, #4]
 8004100:	0a1b      	lsrs	r3, r3, #8
 8004102:	b29b      	uxth	r3, r3
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	buffer[35] = (rail_monitor_ptr[RAIL_n200v].data & 0xFF);				// HK n150vmon LSB
 800410a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800410c:	33f0      	adds	r3, #240	; 0xf0
 800410e:	889b      	ldrh	r3, [r3, #4]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	buffer[36] = ((rail_monitor_ptr[RAIL_n800v].data & 0xFF00) >> 8);		// HK n800vmon MSB
 8004116:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004118:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800411c:	889b      	ldrh	r3, [r3, #4]
 800411e:	0a1b      	lsrs	r3, r3, #8
 8004120:	b29b      	uxth	r3, r3
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	buffer[37] = (rail_monitor_ptr[RAIL_n800v].data & 0xFF);				// HK n800vmon LSB
 8004128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800412e:	889b      	ldrh	r3, [r3, #4]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	buffer[38] = ((rail_monitor_ptr[RAIL_TMP1].data & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8004136:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004138:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800413c:	889b      	ldrh	r3, [r3, #4]
 800413e:	0a1b      	lsrs	r3, r3, #8
 8004140:	b29b      	uxth	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	buffer[39] = (rail_monitor_ptr[RAIL_TMP1].data & 0xFF);           // TEMPURATURE 1 LSB
 8004148:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800414a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800414e:	889b      	ldrh	r3, [r3, #4]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	buffer[40] = timestamp[0];
 8004156:	7a3b      	ldrb	r3, [r7, #8]
 8004158:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	buffer[41] = timestamp[1];
 800415c:	7a7b      	ldrb	r3, [r7, #9]
 800415e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	buffer[42] = timestamp[2];
 8004162:	7abb      	ldrb	r3, [r7, #10]
 8004164:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	buffer[43] = timestamp[3];
 8004168:	7afb      	ldrb	r3, [r7, #11]
 800416a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	buffer[44] = timestamp[4];
 800416e:	7b3b      	ldrb	r3, [r7, #12]
 8004170:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	buffer[45] = timestamp[5];
 8004174:	7b7b      	ldrb	r3, [r7, #13]
 8004176:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	buffer[46] = uptime[0];
 800417a:	793b      	ldrb	r3, [r7, #4]
 800417c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
	buffer[47] = uptime[1];
 8004180:	797b      	ldrb	r3, [r7, #5]
 8004182:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	buffer[48] = uptime[2];
 8004186:	79bb      	ldrb	r3, [r7, #6]
 8004188:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	buffer[49] = uptime[3];
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41

	HAL_UART_Transmit(&huart1, buffer, HK_DATA_SIZE, 100);
 8004192:	f107 0110 	add.w	r1, r7, #16
 8004196:	2364      	movs	r3, #100	; 0x64
 8004198:	2232      	movs	r2, #50	; 0x32
 800419a:	4807      	ldr	r0, [pc, #28]	; (80041b8 <create_hk_packet+0x280>)
 800419c:	f011 f9ea 	bl	8015574 <HAL_UART_Transmit>

	hk_seq++;
 80041a0:	4b04      	ldr	r3, [pc, #16]	; (80041b4 <create_hk_packet+0x27c>)
 80041a2:	881b      	ldrh	r3, [r3, #0]
 80041a4:	3301      	adds	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	4b02      	ldr	r3, [pc, #8]	; (80041b4 <create_hk_packet+0x27c>)
 80041aa:	801a      	strh	r2, [r3, #0]
}
 80041ac:	bf00      	nop
 80041ae:	3748      	adds	r7, #72	; 0x48
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	24001d68 	.word	0x24001d68
 80041b8:	240021c8 	.word	0x240021c8

080041bc <reset_packet_sequence_numbers>:

void reset_packet_sequence_numbers() {
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
	pmt_seq = 0;
 80041c0:	4b06      	ldr	r3, [pc, #24]	; (80041dc <reset_packet_sequence_numbers+0x20>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	801a      	strh	r2, [r3, #0]
	erpa_seq = 0;
 80041c6:	4b06      	ldr	r3, [pc, #24]	; (80041e0 <reset_packet_sequence_numbers+0x24>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]
	hk_seq = 0;
 80041cc:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <reset_packet_sequence_numbers+0x28>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	801a      	strh	r2, [r3, #0]
}
 80041d2:	bf00      	nop
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr
 80041dc:	24001d62 	.word	0x24001d62
 80041e0:	24001d64 	.word	0x24001d64
 80041e4:	24001d68 	.word	0x24001d68

080041e8 <MX_RAMECC_Init>:
RAMECC_HandleTypeDef hramecc3_m1;
RAMECC_HandleTypeDef hramecc3_m2;

/* RAMECC init function */
void MX_RAMECC_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RAMECC_Init 0 */
	  write_RAM((volatile uint32_t *)ITCM_START_ADDRESS, (volatile uint32_t *)ITCM_END_ADDRESS);
 80041ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80041f0:	2000      	movs	r0, #0
 80041f2:	f000 f907 	bl	8004404 <write_RAM>
	  write_RAM((volatile uint32_t *)DTCM_START_ADDRESS, (volatile uint32_t *)DTCM_END_ADDRESS);
 80041f6:	4964      	ldr	r1, [pc, #400]	; (8004388 <MX_RAMECC_Init+0x1a0>)
 80041f8:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80041fc:	f000 f902 	bl	8004404 <write_RAM>
	  //write_RAM((volatile uint32_t *)AXI_START_ADDRESS, (volatile uint32_t *)AXI_END_ADDRESS);
	  //write_RAM((volatile uint32_t *)SRAM1_START_ADDRESS, (volatile uint32_t *)SRAM1_END_ADDRESS);
	  write_RAM((volatile uint32_t *)SRAM2_START_ADDRESS, (volatile uint32_t *)SRAM2_END_ADDRESS);
 8004200:	4962      	ldr	r1, [pc, #392]	; (800438c <MX_RAMECC_Init+0x1a4>)
 8004202:	4863      	ldr	r0, [pc, #396]	; (8004390 <MX_RAMECC_Init+0x1a8>)
 8004204:	f000 f8fe 	bl	8004404 <write_RAM>
	  write_RAM((volatile uint32_t *)SRAM3_START_ADDRESS, (volatile uint32_t *)SRAM3_END_ADDRESS);
 8004208:	4962      	ldr	r1, [pc, #392]	; (8004394 <MX_RAMECC_Init+0x1ac>)
 800420a:	4863      	ldr	r0, [pc, #396]	; (8004398 <MX_RAMECC_Init+0x1b0>)
 800420c:	f000 f8fa 	bl	8004404 <write_RAM>
	  write_RAM((volatile uint32_t *)SRAM4_START_ADDRESS, (volatile uint32_t *)SRAM4_END_ADDRESS);
 8004210:	4962      	ldr	r1, [pc, #392]	; (800439c <MX_RAMECC_Init+0x1b4>)
 8004212:	f04f 5060 	mov.w	r0, #939524096	; 0x38000000
 8004216:	f000 f8f5 	bl	8004404 <write_RAM>
	  write_RAM((volatile uint32_t *)BACKUP_START_ADDRESS, (volatile uint32_t *)BACKUP_END_ADDRESS);
 800421a:	4961      	ldr	r1, [pc, #388]	; (80043a0 <MX_RAMECC_Init+0x1b8>)
 800421c:	f04f 5062 	mov.w	r0, #947912704	; 0x38800000
 8004220:	f000 f8f0 	bl	8004404 <write_RAM>

  /* USER CODE END RAMECC_Init 1 */

  /** Initialize RAMECC1 M1 : AXI SRAM
  */
  hramecc1_m1.Instance = RAMECC1_Monitor1;
 8004224:	4b5f      	ldr	r3, [pc, #380]	; (80043a4 <MX_RAMECC_Init+0x1bc>)
 8004226:	4a60      	ldr	r2, [pc, #384]	; (80043a8 <MX_RAMECC_Init+0x1c0>)
 8004228:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m1) != HAL_OK)
 800422a:	485e      	ldr	r0, [pc, #376]	; (80043a4 <MX_RAMECC_Init+0x1bc>)
 800422c:	f00a fe56 	bl	800eedc <HAL_RAMECC_Init>
 8004230:	4603      	mov	r3, r0
 8004232:	2b00      	cmp	r3, #0
 8004234:	d001      	beq.n	800423a <MX_RAMECC_Init+0x52>
  {
    Error_Handler();
 8004236:	f7ff fdcb 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC1 M2 : ITCM-RAM
  */
  hramecc1_m2.Instance = RAMECC1_Monitor2;
 800423a:	4b5c      	ldr	r3, [pc, #368]	; (80043ac <MX_RAMECC_Init+0x1c4>)
 800423c:	4a5c      	ldr	r2, [pc, #368]	; (80043b0 <MX_RAMECC_Init+0x1c8>)
 800423e:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m2) != HAL_OK)
 8004240:	485a      	ldr	r0, [pc, #360]	; (80043ac <MX_RAMECC_Init+0x1c4>)
 8004242:	f00a fe4b 	bl	800eedc <HAL_RAMECC_Init>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d001      	beq.n	8004250 <MX_RAMECC_Init+0x68>
  {
    Error_Handler();
 800424c:	f7ff fdc0 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC1 M3 : D0TCM-RAM
  */
  hramecc1_m3.Instance = RAMECC1_Monitor3;
 8004250:	4b58      	ldr	r3, [pc, #352]	; (80043b4 <MX_RAMECC_Init+0x1cc>)
 8004252:	4a59      	ldr	r2, [pc, #356]	; (80043b8 <MX_RAMECC_Init+0x1d0>)
 8004254:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m3) != HAL_OK)
 8004256:	4857      	ldr	r0, [pc, #348]	; (80043b4 <MX_RAMECC_Init+0x1cc>)
 8004258:	f00a fe40 	bl	800eedc <HAL_RAMECC_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <MX_RAMECC_Init+0x7e>
  {
    Error_Handler();
 8004262:	f7ff fdb5 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC1 M4 : D1TCM-RAM
  */
  hramecc1_m4.Instance = RAMECC1_Monitor4;
 8004266:	4b55      	ldr	r3, [pc, #340]	; (80043bc <MX_RAMECC_Init+0x1d4>)
 8004268:	4a55      	ldr	r2, [pc, #340]	; (80043c0 <MX_RAMECC_Init+0x1d8>)
 800426a:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m4) != HAL_OK)
 800426c:	4853      	ldr	r0, [pc, #332]	; (80043bc <MX_RAMECC_Init+0x1d4>)
 800426e:	f00a fe35 	bl	800eedc <HAL_RAMECC_Init>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <MX_RAMECC_Init+0x94>
  {
    Error_Handler();
 8004278:	f7ff fdaa 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC1 M5 : ETM RAM
  */
  hramecc1_m5.Instance = RAMECC1_Monitor5;
 800427c:	4b51      	ldr	r3, [pc, #324]	; (80043c4 <MX_RAMECC_Init+0x1dc>)
 800427e:	4a52      	ldr	r2, [pc, #328]	; (80043c8 <MX_RAMECC_Init+0x1e0>)
 8004280:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc1_m5) != HAL_OK)
 8004282:	4850      	ldr	r0, [pc, #320]	; (80043c4 <MX_RAMECC_Init+0x1dc>)
 8004284:	f00a fe2a 	bl	800eedc <HAL_RAMECC_Init>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <MX_RAMECC_Init+0xaa>
  {
    Error_Handler();
 800428e:	f7ff fd9f 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC2 M1 : SRAM1_0
  */
  hramecc2_m1.Instance = RAMECC2_Monitor1;
 8004292:	4b4e      	ldr	r3, [pc, #312]	; (80043cc <MX_RAMECC_Init+0x1e4>)
 8004294:	4a4e      	ldr	r2, [pc, #312]	; (80043d0 <MX_RAMECC_Init+0x1e8>)
 8004296:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m1) != HAL_OK)
 8004298:	484c      	ldr	r0, [pc, #304]	; (80043cc <MX_RAMECC_Init+0x1e4>)
 800429a:	f00a fe1f 	bl	800eedc <HAL_RAMECC_Init>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d001      	beq.n	80042a8 <MX_RAMECC_Init+0xc0>
  {
    Error_Handler();
 80042a4:	f7ff fd94 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC2 M2 SRAM1_1
  */
  hramecc2_m2.Instance = RAMECC2_Monitor2;
 80042a8:	4b4a      	ldr	r3, [pc, #296]	; (80043d4 <MX_RAMECC_Init+0x1ec>)
 80042aa:	4a4b      	ldr	r2, [pc, #300]	; (80043d8 <MX_RAMECC_Init+0x1f0>)
 80042ac:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m2) != HAL_OK)
 80042ae:	4849      	ldr	r0, [pc, #292]	; (80043d4 <MX_RAMECC_Init+0x1ec>)
 80042b0:	f00a fe14 	bl	800eedc <HAL_RAMECC_Init>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d001      	beq.n	80042be <MX_RAMECC_Init+0xd6>
  {
    Error_Handler();
 80042ba:	f7ff fd89 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC2 M3 : SRAM2_0
  */
  hramecc2_m3.Instance = RAMECC2_Monitor3;
 80042be:	4b47      	ldr	r3, [pc, #284]	; (80043dc <MX_RAMECC_Init+0x1f4>)
 80042c0:	4a47      	ldr	r2, [pc, #284]	; (80043e0 <MX_RAMECC_Init+0x1f8>)
 80042c2:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m3) != HAL_OK)
 80042c4:	4845      	ldr	r0, [pc, #276]	; (80043dc <MX_RAMECC_Init+0x1f4>)
 80042c6:	f00a fe09 	bl	800eedc <HAL_RAMECC_Init>
 80042ca:	4603      	mov	r3, r0
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <MX_RAMECC_Init+0xec>
  {
    Error_Handler();
 80042d0:	f7ff fd7e 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC2 M4 : SRAM2_1
  */
  hramecc2_m4.Instance = RAMECC2_Monitor4;
 80042d4:	4b43      	ldr	r3, [pc, #268]	; (80043e4 <MX_RAMECC_Init+0x1fc>)
 80042d6:	4a44      	ldr	r2, [pc, #272]	; (80043e8 <MX_RAMECC_Init+0x200>)
 80042d8:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m4) != HAL_OK)
 80042da:	4842      	ldr	r0, [pc, #264]	; (80043e4 <MX_RAMECC_Init+0x1fc>)
 80042dc:	f00a fdfe 	bl	800eedc <HAL_RAMECC_Init>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <MX_RAMECC_Init+0x102>
  {
    Error_Handler();
 80042e6:	f7ff fd73 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC2 M5 : SRAM3
  */
  hramecc2_m5.Instance = RAMECC2_Monitor5;
 80042ea:	4b40      	ldr	r3, [pc, #256]	; (80043ec <MX_RAMECC_Init+0x204>)
 80042ec:	4a40      	ldr	r2, [pc, #256]	; (80043f0 <MX_RAMECC_Init+0x208>)
 80042ee:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc2_m5) != HAL_OK)
 80042f0:	483e      	ldr	r0, [pc, #248]	; (80043ec <MX_RAMECC_Init+0x204>)
 80042f2:	f00a fdf3 	bl	800eedc <HAL_RAMECC_Init>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d001      	beq.n	8004300 <MX_RAMECC_Init+0x118>
  {
    Error_Handler();
 80042fc:	f7ff fd68 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC3 M1 : SRAM4
  */
  hramecc3_m1.Instance = RAMECC3_Monitor1;
 8004300:	4b3c      	ldr	r3, [pc, #240]	; (80043f4 <MX_RAMECC_Init+0x20c>)
 8004302:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <MX_RAMECC_Init+0x210>)
 8004304:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m1) != HAL_OK)
 8004306:	483b      	ldr	r0, [pc, #236]	; (80043f4 <MX_RAMECC_Init+0x20c>)
 8004308:	f00a fde8 	bl	800eedc <HAL_RAMECC_Init>
 800430c:	4603      	mov	r3, r0
 800430e:	2b00      	cmp	r3, #0
 8004310:	d001      	beq.n	8004316 <MX_RAMECC_Init+0x12e>
  {
    Error_Handler();
 8004312:	f7ff fd5d 	bl	8003dd0 <Error_Handler>
  }

  /** Initialize RAMECC3 M2 : Backup RAM
  */
  hramecc3_m2.Instance = RAMECC3_Monitor2;
 8004316:	4b39      	ldr	r3, [pc, #228]	; (80043fc <MX_RAMECC_Init+0x214>)
 8004318:	4a39      	ldr	r2, [pc, #228]	; (8004400 <MX_RAMECC_Init+0x218>)
 800431a:	601a      	str	r2, [r3, #0]
  if (HAL_RAMECC_Init(&hramecc3_m2) != HAL_OK)
 800431c:	4837      	ldr	r0, [pc, #220]	; (80043fc <MX_RAMECC_Init+0x214>)
 800431e:	f00a fddd 	bl	800eedc <HAL_RAMECC_Init>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <MX_RAMECC_Init+0x144>
  {
    Error_Handler();
 8004328:	f7ff fd52 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN RAMECC_Init 2 */
	HAL_NVIC_SetPriority(ECC_IRQn, 0, 0);
 800432c:	2200      	movs	r2, #0
 800432e:	2100      	movs	r1, #0
 8004330:	2091      	movs	r0, #145	; 0x91
 8004332:	f004 f863 	bl	80083fc <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(ECC_IRQn);
 8004336:	2091      	movs	r0, #145	; 0x91
 8004338:	f004 f87a 	bl	8008430 <HAL_NVIC_EnableIRQ>

	enable_ramecc_monitor_notifications(&hramecc1_m1);
 800433c:	4819      	ldr	r0, [pc, #100]	; (80043a4 <MX_RAMECC_Init+0x1bc>)
 800433e:	f000 f879 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m2);
 8004342:	481a      	ldr	r0, [pc, #104]	; (80043ac <MX_RAMECC_Init+0x1c4>)
 8004344:	f000 f876 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m3);
 8004348:	481a      	ldr	r0, [pc, #104]	; (80043b4 <MX_RAMECC_Init+0x1cc>)
 800434a:	f000 f873 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m4);
 800434e:	481b      	ldr	r0, [pc, #108]	; (80043bc <MX_RAMECC_Init+0x1d4>)
 8004350:	f000 f870 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc1_m5);
 8004354:	481b      	ldr	r0, [pc, #108]	; (80043c4 <MX_RAMECC_Init+0x1dc>)
 8004356:	f000 f86d 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m1);
 800435a:	481c      	ldr	r0, [pc, #112]	; (80043cc <MX_RAMECC_Init+0x1e4>)
 800435c:	f000 f86a 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m2);
 8004360:	481c      	ldr	r0, [pc, #112]	; (80043d4 <MX_RAMECC_Init+0x1ec>)
 8004362:	f000 f867 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m3);
 8004366:	481d      	ldr	r0, [pc, #116]	; (80043dc <MX_RAMECC_Init+0x1f4>)
 8004368:	f000 f864 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m4);
 800436c:	481d      	ldr	r0, [pc, #116]	; (80043e4 <MX_RAMECC_Init+0x1fc>)
 800436e:	f000 f861 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc2_m5);
 8004372:	481e      	ldr	r0, [pc, #120]	; (80043ec <MX_RAMECC_Init+0x204>)
 8004374:	f000 f85e 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc3_m1);
 8004378:	481e      	ldr	r0, [pc, #120]	; (80043f4 <MX_RAMECC_Init+0x20c>)
 800437a:	f000 f85b 	bl	8004434 <enable_ramecc_monitor_notifications>
	enable_ramecc_monitor_notifications(&hramecc3_m2);
 800437e:	481f      	ldr	r0, [pc, #124]	; (80043fc <MX_RAMECC_Init+0x214>)
 8004380:	f000 f858 	bl	8004434 <enable_ramecc_monitor_notifications>
  /* USER CODE END RAMECC_Init 2 */

}
 8004384:	bf00      	nop
 8004386:	bd80      	pop	{r7, pc}
 8004388:	2001ffff 	.word	0x2001ffff
 800438c:	3003ffff 	.word	0x3003ffff
 8004390:	30020000 	.word	0x30020000
 8004394:	30047fff 	.word	0x30047fff
 8004398:	30040000 	.word	0x30040000
 800439c:	3800ffff 	.word	0x3800ffff
 80043a0:	38800fff 	.word	0x38800fff
 80043a4:	24001d6c 	.word	0x24001d6c
 80043a8:	52009020 	.word	0x52009020
 80043ac:	24001d7c 	.word	0x24001d7c
 80043b0:	52009040 	.word	0x52009040
 80043b4:	24001d8c 	.word	0x24001d8c
 80043b8:	52009060 	.word	0x52009060
 80043bc:	24001d9c 	.word	0x24001d9c
 80043c0:	52009080 	.word	0x52009080
 80043c4:	24001dac 	.word	0x24001dac
 80043c8:	520090a0 	.word	0x520090a0
 80043cc:	24001dbc 	.word	0x24001dbc
 80043d0:	48023020 	.word	0x48023020
 80043d4:	24001dcc 	.word	0x24001dcc
 80043d8:	48023040 	.word	0x48023040
 80043dc:	24001ddc 	.word	0x24001ddc
 80043e0:	48023060 	.word	0x48023060
 80043e4:	24001dec 	.word	0x24001dec
 80043e8:	48023080 	.word	0x48023080
 80043ec:	24001dfc 	.word	0x24001dfc
 80043f0:	480230a0 	.word	0x480230a0
 80043f4:	24001e0c 	.word	0x24001e0c
 80043f8:	58027020 	.word	0x58027020
 80043fc:	24001e1c 	.word	0x24001e1c
 8004400:	58027040 	.word	0x58027040

08004404 <write_RAM>:

/* USER CODE BEGIN 1 */
void write_RAM(volatile uint32_t *start, volatile uint32_t *end)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
 800440c:	6039      	str	r1, [r7, #0]
	while (start <= end)
 800440e:	e005      	b.n	800441c <write_RAM+0x18>
	{
		*start = 0;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	601a      	str	r2, [r3, #0]
		start++;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	3304      	adds	r3, #4
 800441a:	607b      	str	r3, [r7, #4]
	while (start <= end)
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	429a      	cmp	r2, r3
 8004422:	d9f5      	bls.n	8004410 <write_RAM+0xc>
	}
}
 8004424:	bf00      	nop
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr
	...

08004434 <enable_ramecc_monitor_notifications>:

void enable_ramecc_monitor_notifications(RAMECC_HandleTypeDef *hramecc) {
 8004434:	b580      	push	{r7, lr}
 8004436:	b082      	sub	sp, #8
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
	if (HAL_RAMECC_EnableNotification(hramecc, (RAMECC_IT_MONITOR_SINGLEERR_R | RAMECC_IT_MONITOR_DOUBLEERR_R)) != HAL_OK) {
 800443c:	490a      	ldr	r1, [pc, #40]	; (8004468 <enable_ramecc_monitor_notifications+0x34>)
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f00a fdb0 	bl	800efa4 <HAL_RAMECC_EnableNotification>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <enable_ramecc_monitor_notifications+0x1a>
		Error_Handler();
 800444a:	f7ff fcc1 	bl	8003dd0 <Error_Handler>
	}
	if (HAL_RAMECC_StartMonitor(hramecc) != HAL_OK) {
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f00a fd84 	bl	800ef5c <HAL_RAMECC_StartMonitor>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <enable_ramecc_monitor_notifications+0x2a>
		Error_Handler();
 800445a:	f7ff fcb9 	bl	8003dd0 <Error_Handler>
	}
}
 800445e:	bf00      	nop
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	2000000c 	.word	0x2000000c

0800446c <HAL_RAMECC_DetectErrorCallback>:

void HAL_RAMECC_DetectErrorCallback(RAMECC_HandleTypeDef *hramecc) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
	ERROR_STRUCT error;
	error.category = EC_seu;
 8004474:	2301      	movs	r3, #1
 8004476:	723b      	strb	r3, [r7, #8]
	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_SINGLEERROR_DETECTED) != 0U) {
 8004478:	6878      	ldr	r0, [r7, #4]
 800447a:	f00a fe2f 	bl	800f0dc <HAL_RAMECC_GetRAMECCError>
 800447e:	4603      	mov	r3, r0
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d001      	beq.n	800448c <HAL_RAMECC_DetectErrorCallback+0x20>
		error.detail = ED_single_bit_error_ram;
 8004488:	231a      	movs	r3, #26
 800448a:	727b      	strb	r3, [r7, #9]
	}

	if ((HAL_RAMECC_GetRAMECCError(hramecc) & HAL_RAMECC_DOUBLEERROR_DETECTED) != 0U) {
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f00a fe25 	bl	800f0dc <HAL_RAMECC_GetRAMECCError>
 8004492:	4603      	mov	r3, r0
 8004494:	f003 0302 	and.w	r3, r3, #2
 8004498:	2b00      	cmp	r3, #0
 800449a:	d001      	beq.n	80044a0 <HAL_RAMECC_DetectErrorCallback+0x34>
		error.detail = ED_double_bit_error_ram;
 800449c:	231b      	movs	r3, #27
 800449e:	727b      	strb	r3, [r7, #9]
	}
	handle_error(error);
 80044a0:	f107 0308 	add.w	r3, r7, #8
 80044a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80044a8:	f7fd fd42 	bl	8001f30 <handle_error>
}
 80044ac:	bf00      	nop
 80044ae:	3710      	adds	r7, #16
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bd80      	pop	{r7, pc}

080044b4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80044ba:	1d3b      	adds	r3, r7, #4
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80044c8:	2300      	movs	r3, #0
 80044ca:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80044cc:	4b26      	ldr	r3, [pc, #152]	; (8004568 <MX_RTC_Init+0xb4>)
 80044ce:	4a27      	ldr	r2, [pc, #156]	; (800456c <MX_RTC_Init+0xb8>)
 80044d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80044d2:	4b25      	ldr	r3, [pc, #148]	; (8004568 <MX_RTC_Init+0xb4>)
 80044d4:	2200      	movs	r2, #0
 80044d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80044d8:	4b23      	ldr	r3, [pc, #140]	; (8004568 <MX_RTC_Init+0xb4>)
 80044da:	2263      	movs	r2, #99	; 0x63
 80044dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80044de:	4b22      	ldr	r3, [pc, #136]	; (8004568 <MX_RTC_Init+0xb4>)
 80044e0:	f242 720f 	movw	r2, #9999	; 0x270f
 80044e4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80044e6:	4b20      	ldr	r3, [pc, #128]	; (8004568 <MX_RTC_Init+0xb4>)
 80044e8:	2200      	movs	r2, #0
 80044ea:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80044ec:	4b1e      	ldr	r3, [pc, #120]	; (8004568 <MX_RTC_Init+0xb4>)
 80044ee:	2200      	movs	r2, #0
 80044f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80044f2:	4b1d      	ldr	r3, [pc, #116]	; (8004568 <MX_RTC_Init+0xb4>)
 80044f4:	2200      	movs	r2, #0
 80044f6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80044f8:	4b1b      	ldr	r3, [pc, #108]	; (8004568 <MX_RTC_Init+0xb4>)
 80044fa:	2200      	movs	r2, #0
 80044fc:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80044fe:	481a      	ldr	r0, [pc, #104]	; (8004568 <MX_RTC_Init+0xb4>)
 8004500:	f00e fb1e 	bl	8012b40 <HAL_RTC_Init>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 800450a:	f7ff fc61 	bl	8003dd0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800450e:	2300      	movs	r3, #0
 8004510:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004512:	2300      	movs	r3, #0
 8004514:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004516:	2300      	movs	r3, #0
 8004518:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800451a:	2300      	movs	r3, #0
 800451c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800451e:	2300      	movs	r3, #0
 8004520:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004522:	1d3b      	adds	r3, r7, #4
 8004524:	2201      	movs	r2, #1
 8004526:	4619      	mov	r1, r3
 8004528:	480f      	ldr	r0, [pc, #60]	; (8004568 <MX_RTC_Init+0xb4>)
 800452a:	f00e fb8b 	bl	8012c44 <HAL_RTC_SetTime>
 800452e:	4603      	mov	r3, r0
 8004530:	2b00      	cmp	r3, #0
 8004532:	d001      	beq.n	8004538 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8004534:	f7ff fc4c 	bl	8003dd0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004538:	2301      	movs	r3, #1
 800453a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800453c:	2301      	movs	r3, #1
 800453e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8004540:	2301      	movs	r3, #1
 8004542:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8004544:	2300      	movs	r3, #0
 8004546:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004548:	463b      	mov	r3, r7
 800454a:	2201      	movs	r2, #1
 800454c:	4619      	mov	r1, r3
 800454e:	4806      	ldr	r0, [pc, #24]	; (8004568 <MX_RTC_Init+0xb4>)
 8004550:	f00e fc72 	bl	8012e38 <HAL_RTC_SetDate>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 800455a:	f7ff fc39 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800455e:	bf00      	nop
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	24001e2c 	.word	0x24001e2c
 800456c:	58004000 	.word	0x58004000

08004570 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b0b2      	sub	sp, #200	; 0xc8
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004578:	f107 0308 	add.w	r3, r7, #8
 800457c:	22c0      	movs	r2, #192	; 0xc0
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f017 f96b 	bl	801b85c <memset>
  if(rtcHandle->Instance==RTC)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a10      	ldr	r2, [pc, #64]	; (80045cc <HAL_RTC_MspInit+0x5c>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d118      	bne.n	80045c2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004590:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004594:	f04f 0300 	mov.w	r3, #0
 8004598:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <HAL_RTC_MspInit+0x60>)
 800459e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80045a2:	f107 0308 	add.w	r3, r7, #8
 80045a6:	4618      	mov	r0, r3
 80045a8:	f00b fdcc 	bl	8010144 <HAL_RCCEx_PeriphCLKConfig>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 80045b2:	f7ff fc0d 	bl	8003dd0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80045b6:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <HAL_RTC_MspInit+0x64>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	4a06      	ldr	r2, [pc, #24]	; (80045d4 <HAL_RTC_MspInit+0x64>)
 80045bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045c0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80045c2:	bf00      	nop
 80045c4:	37c8      	adds	r7, #200	; 0xc8
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	58004000 	.word	0x58004000
 80045d0:	00019300 	.word	0x00019300
 80045d4:	58024400 	.word	0x58024400

080045d8 <init_adc_dma>:
static uint16_t erpa_spi_raw_data[1];
static uint16_t pmt_spi_raw_data[1];
static uint8_t raw_i2c[2];

// Public Functions
uint8_t init_adc_dma() {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80045de:	2300      	movs	r3, #0
 80045e0:	71fb      	strb	r3, [r7, #7]

	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 80045e2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80045e6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045ea:	481f      	ldr	r0, [pc, #124]	; (8004668 <init_adc_dma+0x90>)
 80045ec:	f003 fd0c 	bl	8008008 <HAL_ADCEx_Calibration_Start>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <init_adc_dma+0x22>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80045f6:	f7ff fbeb 	bl	8003dd0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80045fa:	220b      	movs	r2, #11
 80045fc:	491b      	ldr	r1, [pc, #108]	; (800466c <init_adc_dma+0x94>)
 80045fe:	481a      	ldr	r0, [pc, #104]	; (8004668 <init_adc_dma+0x90>)
 8004600:	f002 fde0 	bl	80071c4 <HAL_ADC_Start_DMA>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d001      	beq.n	800460e <init_adc_dma+0x36>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 800460a:	f7ff fbe1 	bl	8003dd0 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 800460e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004612:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004616:	4816      	ldr	r0, [pc, #88]	; (8004670 <init_adc_dma+0x98>)
 8004618:	f003 fcf6 	bl	8008008 <HAL_ADCEx_Calibration_Start>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <init_adc_dma+0x4e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 8004622:	f7ff fbd5 	bl	8003dd0 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 8004626:	2204      	movs	r2, #4
 8004628:	4912      	ldr	r1, [pc, #72]	; (8004674 <init_adc_dma+0x9c>)
 800462a:	4811      	ldr	r0, [pc, #68]	; (8004670 <init_adc_dma+0x98>)
 800462c:	f002 fdca 	bl	80071c4 <HAL_ADC_Start_DMA>
 8004630:	4603      	mov	r3, r0
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <init_adc_dma+0x62>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 8004636:	f7ff fbcb 	bl	8003dd0 <Error_Handler>
	}
	hspi2.Instance->CR1 |= 1 << 10;
 800463a:	4b0f      	ldr	r3, [pc, #60]	; (8004678 <init_adc_dma+0xa0>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	681a      	ldr	r2, [r3, #0]
 8004640:	4b0d      	ldr	r3, [pc, #52]	; (8004678 <init_adc_dma+0xa0>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004648:	601a      	str	r2, [r3, #0]
	hspi1.Instance->CR1 |= 1 << 10;
 800464a:	4b0c      	ldr	r3, [pc, #48]	; (800467c <init_adc_dma+0xa4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681a      	ldr	r2, [r3, #0]
 8004650:	4b0a      	ldr	r3, [pc, #40]	; (800467c <init_adc_dma+0xa4>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004658:	601a      	str	r2, [r3, #0]


	status = 1;
 800465a:	2301      	movs	r3, #1
 800465c:	71fb      	strb	r3, [r7, #7]

	return status;
 800465e:	79fb      	ldrb	r3, [r7, #7]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	2400015c 	.word	0x2400015c
 800466c:	24001e60 	.word	0x24001e60
 8004670:	240001c0 	.word	0x240001c0
 8004674:	24001e80 	.word	0x24001e80
 8004678:	24001f1c 	.word	0x24001f1c
 800467c:	24001e94 	.word	0x24001e94

08004680 <sample_pmt_spi>:
//{
//	HAL_SPI_Receive_IT(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
//
//}

void sample_pmt_spi(uint8_t *buffer) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive_DMA(&hspi1, (uint8_t*) pmt_spi_raw_data, 1);
 8004688:	2201      	movs	r2, #1
 800468a:	490b      	ldr	r1, [pc, #44]	; (80046b8 <sample_pmt_spi+0x38>)
 800468c:	480b      	ldr	r0, [pc, #44]	; (80046bc <sample_pmt_spi+0x3c>)
 800468e:	f00e fe9d 	bl	80133cc <HAL_SPI_Receive_DMA>

	spi_LSB = ((pmt_spi_raw_data[0] & 0xFF00) >> 8);
 8004692:	4b09      	ldr	r3, [pc, #36]	; (80046b8 <sample_pmt_spi+0x38>)
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	0a1b      	lsrs	r3, r3, #8
 8004698:	b29b      	uxth	r3, r3
 800469a:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (pmt_spi_raw_data[0] & 0xFF);
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <sample_pmt_spi+0x38>)
 800469e:	881b      	ldrh	r3, [r3, #0]
 80046a0:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	7bfa      	ldrb	r2, [r7, #15]
 80046a6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3301      	adds	r3, #1
 80046ac:	7bba      	ldrb	r2, [r7, #14]
 80046ae:	701a      	strb	r2, [r3, #0]
}
 80046b0:	bf00      	nop
 80046b2:	3710      	adds	r7, #16
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	24001e8c 	.word	0x24001e8c
 80046bc:	24001e94 	.word	0x24001e94

080046c0 <sample_erpa_spi>:


void sample_erpa_spi(uint8_t *buffer) {
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b084      	sub	sp, #16
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
	uint8_t spi_MSB;
	uint8_t spi_LSB;
	HAL_SPI_Receive_DMA(&hspi2, (uint8_t*) erpa_spi_raw_data, 1);
 80046c8:	2201      	movs	r2, #1
 80046ca:	490b      	ldr	r1, [pc, #44]	; (80046f8 <sample_erpa_spi+0x38>)
 80046cc:	480b      	ldr	r0, [pc, #44]	; (80046fc <sample_erpa_spi+0x3c>)
 80046ce:	f00e fe7d 	bl	80133cc <HAL_SPI_Receive_DMA>

	spi_LSB = ((erpa_spi_raw_data[0] & 0xFF00) >> 8);
 80046d2:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <sample_erpa_spi+0x38>)
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	0a1b      	lsrs	r3, r3, #8
 80046d8:	b29b      	uxth	r3, r3
 80046da:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (erpa_spi_raw_data[0] & 0xFF);
 80046dc:	4b06      	ldr	r3, [pc, #24]	; (80046f8 <sample_erpa_spi+0x38>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	73bb      	strb	r3, [r7, #14]


	buffer[0] = spi_LSB;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	7bfa      	ldrb	r2, [r7, #15]
 80046e6:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_MSB;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3301      	adds	r3, #1
 80046ec:	7bba      	ldrb	r2, [r7, #14]
 80046ee:	701a      	strb	r2, [r3, #0]
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	24001e88 	.word	0x24001e88
 80046fc:	24001f1c 	.word	0x24001f1c

08004700 <sample_erpa_adc>:




void sample_erpa_adc(uint16_t *buffer) {
 8004700:	b480      	push	{r7}
 8004702:	b085      	sub	sp, #20
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8004708:	4b05      	ldr	r3, [pc, #20]	; (8004720 <sample_erpa_adc+0x20>)
 800470a:	885b      	ldrh	r3, [r3, #2]
 800470c:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PC4;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	89fa      	ldrh	r2, [r7, #14]
 8004712:	801a      	strh	r2, [r3, #0]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	24001e60 	.word	0x24001e60

08004724 <sample_hk_i2c>:

void sample_hk_i2c(int16_t *buffer) {
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 800472c:	2390      	movs	r3, #144	; 0x90
 800472e:	4618      	mov	r0, r3
 8004730:	f000 f8a2 	bl	8004878 <poll_i2c_sensor>
 8004734:	4603      	mov	r3, r0
 8004736:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8004738:	2394      	movs	r3, #148	; 0x94
 800473a:	4618      	mov	r0, r3
 800473c:	f000 f89c 	bl	8004878 <poll_i2c_sensor>
 8004740:	4603      	mov	r3, r0
 8004742:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8004744:	2392      	movs	r3, #146	; 0x92
 8004746:	4618      	mov	r0, r3
 8004748:	f000 f896 	bl	8004878 <poll_i2c_sensor>
 800474c:	4603      	mov	r3, r0
 800474e:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8004750:	2396      	movs	r3, #150	; 0x96
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f890 	bl	8004878 <poll_i2c_sensor>
 8004758:	4603      	mov	r3, r0
 800475a:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	89fa      	ldrh	r2, [r7, #14]
 8004760:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3302      	adds	r3, #2
 8004766:	89ba      	ldrh	r2, [r7, #12]
 8004768:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	3304      	adds	r3, #4
 800476e:	897a      	ldrh	r2, [r7, #10]
 8004770:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	3306      	adds	r3, #6
 8004776:	893a      	ldrh	r2, [r7, #8]
 8004778:	801a      	strh	r2, [r3, #0]
}
 800477a:	bf00      	nop
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <sample_hk_adc1>:

void sample_hk_adc1(uint16_t *buffer) {
 8004784:	b480      	push	{r7}
 8004786:	b089      	sub	sp, #36	; 0x24
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 800478c:	4b25      	ldr	r3, [pc, #148]	; (8004824 <sample_hk_adc1+0xa0>)
 800478e:	8a9b      	ldrh	r3, [r3, #20]
 8004790:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8004792:	4b24      	ldr	r3, [pc, #144]	; (8004824 <sample_hk_adc1+0xa0>)
 8004794:	8a1b      	ldrh	r3, [r3, #16]
 8004796:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8004798:	4b22      	ldr	r3, [pc, #136]	; (8004824 <sample_hk_adc1+0xa0>)
 800479a:	899b      	ldrh	r3, [r3, #12]
 800479c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 800479e:	4b21      	ldr	r3, [pc, #132]	; (8004824 <sample_hk_adc1+0xa0>)
 80047a0:	8a5b      	ldrh	r3, [r3, #18]
 80047a2:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 80047a4:	4b1f      	ldr	r3, [pc, #124]	; (8004824 <sample_hk_adc1+0xa0>)
 80047a6:	889b      	ldrh	r3, [r3, #4]
 80047a8:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 80047aa:	4b1e      	ldr	r3, [pc, #120]	; (8004824 <sample_hk_adc1+0xa0>)
 80047ac:	88db      	ldrh	r3, [r3, #6]
 80047ae:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 80047b0:	4b1c      	ldr	r3, [pc, #112]	; (8004824 <sample_hk_adc1+0xa0>)
 80047b2:	89db      	ldrh	r3, [r3, #14]
 80047b4:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 80047b6:	4b1b      	ldr	r3, [pc, #108]	; (8004824 <sample_hk_adc1+0xa0>)
 80047b8:	891b      	ldrh	r3, [r3, #8]
 80047ba:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 80047bc:	4b19      	ldr	r3, [pc, #100]	; (8004824 <sample_hk_adc1+0xa0>)
 80047be:	881b      	ldrh	r3, [r3, #0]
 80047c0:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 80047c2:	4b18      	ldr	r3, [pc, #96]	; (8004824 <sample_hk_adc1+0xa0>)
 80047c4:	895b      	ldrh	r3, [r3, #10]
 80047c6:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PA1;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	8bfa      	ldrh	r2, [r7, #30]
 80047cc:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3302      	adds	r3, #2
 80047d2:	8bba      	ldrh	r2, [r7, #28]
 80047d4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	3304      	adds	r3, #4
 80047da:	8b7a      	ldrh	r2, [r7, #26]
 80047dc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3306      	adds	r3, #6
 80047e2:	8b3a      	ldrh	r2, [r7, #24]
 80047e4:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	3308      	adds	r3, #8
 80047ea:	8afa      	ldrh	r2, [r7, #22]
 80047ec:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	330a      	adds	r3, #10
 80047f2:	8aba      	ldrh	r2, [r7, #20]
 80047f4:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	330c      	adds	r3, #12
 80047fa:	8a7a      	ldrh	r2, [r7, #18]
 80047fc:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	330e      	adds	r3, #14
 8004802:	8a3a      	ldrh	r2, [r7, #16]
 8004804:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	3310      	adds	r3, #16
 800480a:	89fa      	ldrh	r2, [r7, #14]
 800480c:	801a      	strh	r2, [r3, #0]
	buffer[9] = PB0;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	3312      	adds	r3, #18
 8004812:	89ba      	ldrh	r2, [r7, #12]
 8004814:	801a      	strh	r2, [r3, #0]
}
 8004816:	bf00      	nop
 8004818:	3724      	adds	r7, #36	; 0x24
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	24001e60 	.word	0x24001e60

08004828 <sample_hk_adc3>:

void sample_hk_adc3(uint16_t *buffer) {
 8004828:	b480      	push	{r7}
 800482a:	b085      	sub	sp, #20
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	uint16_t vsense = ADC3_raw_data[0];
 8004830:	4b10      	ldr	r3, [pc, #64]	; (8004874 <sample_hk_adc3+0x4c>)
 8004832:	881b      	ldrh	r3, [r3, #0]
 8004834:	81fb      	strh	r3, [r7, #14]
	uint16_t vrefint = ADC3_raw_data[1];
 8004836:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <sample_hk_adc3+0x4c>)
 8004838:	885b      	ldrh	r3, [r3, #2]
 800483a:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 800483c:	4b0d      	ldr	r3, [pc, #52]	; (8004874 <sample_hk_adc3+0x4c>)
 800483e:	889b      	ldrh	r3, [r3, #4]
 8004840:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8004842:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <sample_hk_adc3+0x4c>)
 8004844:	88db      	ldrh	r3, [r3, #6]
 8004846:	813b      	strh	r3, [r7, #8]

	buffer[0] = vsense;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	89fa      	ldrh	r2, [r7, #14]
 800484c:	801a      	strh	r2, [r3, #0]
	buffer[1] = vrefint;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	3302      	adds	r3, #2
 8004852:	89ba      	ldrh	r2, [r7, #12]
 8004854:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	897a      	ldrh	r2, [r7, #10]
 800485c:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3306      	adds	r3, #6
 8004862:	893a      	ldrh	r2, [r7, #8]
 8004864:	801a      	strh	r2, [r3, #0]
}
 8004866:	bf00      	nop
 8004868:	3714      	adds	r7, #20
 800486a:	46bd      	mov	sp, r7
 800486c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004870:	4770      	bx	lr
 8004872:	bf00      	nop
 8004874:	24001e80 	.word	0x24001e80

08004878 <poll_i2c_sensor>:


int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	4603      	mov	r3, r0
 8004880:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	HAL_StatusTypeDef ret;
	raw_i2c[0] = REG_TEMP;
 8004882:	2200      	movs	r2, #0
 8004884:	4b20      	ldr	r3, [pc, #128]	; (8004908 <poll_i2c_sensor+0x90>)
 8004886:	701a      	strb	r2, [r3, #0]


	ret = HAL_I2C_Master_Transmit_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 1);
 8004888:	79fb      	ldrb	r3, [r7, #7]
 800488a:	b299      	uxth	r1, r3
 800488c:	2301      	movs	r3, #1
 800488e:	4a1e      	ldr	r2, [pc, #120]	; (8004908 <poll_i2c_sensor+0x90>)
 8004890:	481e      	ldr	r0, [pc, #120]	; (800490c <poll_i2c_sensor+0x94>)
 8004892:	f007 ff85 	bl	800c7a0 <HAL_I2C_Master_Transmit_DMA>
 8004896:	4603      	mov	r3, r0
 8004898:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 800489a:	7b7b      	ldrb	r3, [r7, #13]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <poll_i2c_sensor+0x30>
		printf("I2C TX Error\n");
 80048a0:	481b      	ldr	r0, [pc, #108]	; (8004910 <poll_i2c_sensor+0x98>)
 80048a2:	f017 f851 	bl	801b948 <puts>
 80048a6:	e028      	b.n	80048fa <poll_i2c_sensor+0x82>
	} else {
		/* Read 2 bytes from the temperature register */
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80048a8:	bf00      	nop
 80048aa:	4818      	ldr	r0, [pc, #96]	; (800490c <poll_i2c_sensor+0x94>)
 80048ac:	f008 fa5f 	bl	800cd6e <HAL_I2C_GetState>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b20      	cmp	r3, #32
 80048b4:	d1f9      	bne.n	80048aa <poll_i2c_sensor+0x32>
		ret = HAL_I2C_Master_Receive_DMA(&hi2c1, TEMP_ADDR, (uint8_t*) raw_i2c, 2);
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	b299      	uxth	r1, r3
 80048ba:	2302      	movs	r3, #2
 80048bc:	4a12      	ldr	r2, [pc, #72]	; (8004908 <poll_i2c_sensor+0x90>)
 80048be:	4813      	ldr	r0, [pc, #76]	; (800490c <poll_i2c_sensor+0x94>)
 80048c0:	f008 f882 	bl	800c9c8 <HAL_I2C_Master_Receive_DMA>
 80048c4:	4603      	mov	r3, r0
 80048c6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 80048c8:	7b7b      	ldrb	r3, [r7, #13]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d003      	beq.n	80048d6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 80048ce:	4811      	ldr	r0, [pc, #68]	; (8004914 <poll_i2c_sensor+0x9c>)
 80048d0:	f017 f83a 	bl	801b948 <puts>
 80048d4:	e011      	b.n	80048fa <poll_i2c_sensor+0x82>
		} else {
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {};
 80048d6:	bf00      	nop
 80048d8:	480c      	ldr	r0, [pc, #48]	; (800490c <poll_i2c_sensor+0x94>)
 80048da:	f008 fa48 	bl	800cd6e <HAL_I2C_GetState>
 80048de:	4603      	mov	r3, r0
 80048e0:	2b20      	cmp	r3, #32
 80048e2:	d1f9      	bne.n	80048d8 <poll_i2c_sensor+0x60>
			output = (int16_t) (raw_i2c[0] << 8);
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <poll_i2c_sensor+0x90>)
 80048e6:	781b      	ldrb	r3, [r3, #0]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	81fb      	strh	r3, [r7, #14]
			output = (output | raw_i2c[1]) >> 3;
 80048ec:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048f0:	4a05      	ldr	r2, [pc, #20]	; (8004908 <poll_i2c_sensor+0x90>)
 80048f2:	7852      	ldrb	r2, [r2, #1]
 80048f4:	4313      	orrs	r3, r2
 80048f6:	10db      	asrs	r3, r3, #3
 80048f8:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 80048fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3710      	adds	r7, #16
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	24001e90 	.word	0x24001e90
 800490c:	24001bb4 	.word	0x24001bb4
 8004910:	0801c4bc 	.word	0x0801c4bc
 8004914:	0801c4cc 	.word	0x0801c4cc

08004918 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi2_rx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800491c:	4b28      	ldr	r3, [pc, #160]	; (80049c0 <MX_SPI1_Init+0xa8>)
 800491e:	4a29      	ldr	r2, [pc, #164]	; (80049c4 <MX_SPI1_Init+0xac>)
 8004920:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004922:	4b27      	ldr	r3, [pc, #156]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004924:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004928:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800492a:	4b25      	ldr	r3, [pc, #148]	; (80049c0 <MX_SPI1_Init+0xa8>)
 800492c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004930:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8004932:	4b23      	ldr	r3, [pc, #140]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004934:	220f      	movs	r2, #15
 8004936:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004938:	4b21      	ldr	r3, [pc, #132]	; (80049c0 <MX_SPI1_Init+0xa8>)
 800493a:	2200      	movs	r2, #0
 800493c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800493e:	4b20      	ldr	r3, [pc, #128]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004940:	2200      	movs	r2, #0
 8004942:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004944:	4b1e      	ldr	r3, [pc, #120]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004946:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800494a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800494c:	4b1c      	ldr	r3, [pc, #112]	; (80049c0 <MX_SPI1_Init+0xa8>)
 800494e:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004952:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004954:	4b1a      	ldr	r3, [pc, #104]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004956:	2200      	movs	r2, #0
 8004958:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800495a:	4b19      	ldr	r3, [pc, #100]	; (80049c0 <MX_SPI1_Init+0xa8>)
 800495c:	2200      	movs	r2, #0
 800495e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004960:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004962:	2200      	movs	r2, #0
 8004964:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8004966:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004968:	2200      	movs	r2, #0
 800496a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800496c:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <MX_SPI1_Init+0xa8>)
 800496e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004972:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004974:	4b12      	ldr	r3, [pc, #72]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004976:	2200      	movs	r2, #0
 8004978:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <MX_SPI1_Init+0xa8>)
 800497c:	2200      	movs	r2, #0
 800497e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004980:	4b0f      	ldr	r3, [pc, #60]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004982:	2200      	movs	r2, #0
 8004984:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004986:	4b0e      	ldr	r3, [pc, #56]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004988:	2200      	movs	r2, #0
 800498a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800498c:	4b0c      	ldr	r3, [pc, #48]	; (80049c0 <MX_SPI1_Init+0xa8>)
 800498e:	2200      	movs	r2, #0
 8004990:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004992:	4b0b      	ldr	r3, [pc, #44]	; (80049c0 <MX_SPI1_Init+0xa8>)
 8004994:	2200      	movs	r2, #0
 8004996:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004998:	4b09      	ldr	r3, [pc, #36]	; (80049c0 <MX_SPI1_Init+0xa8>)
 800499a:	2200      	movs	r2, #0
 800499c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800499e:	4b08      	ldr	r3, [pc, #32]	; (80049c0 <MX_SPI1_Init+0xa8>)
 80049a0:	2200      	movs	r2, #0
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80049a4:	4b06      	ldr	r3, [pc, #24]	; (80049c0 <MX_SPI1_Init+0xa8>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80049aa:	4805      	ldr	r0, [pc, #20]	; (80049c0 <MX_SPI1_Init+0xa8>)
 80049ac:	f00e fbea 	bl	8013184 <HAL_SPI_Init>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 80049b6:	f7ff fa0b 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80049ba:	bf00      	nop
 80049bc:	bd80      	pop	{r7, pc}
 80049be:	bf00      	nop
 80049c0:	24001e94 	.word	0x24001e94
 80049c4:	40013000 	.word	0x40013000

080049c8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80049cc:	4b28      	ldr	r3, [pc, #160]	; (8004a70 <MX_SPI2_Init+0xa8>)
 80049ce:	4a29      	ldr	r2, [pc, #164]	; (8004a74 <MX_SPI2_Init+0xac>)
 80049d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80049d2:	4b27      	ldr	r3, [pc, #156]	; (8004a70 <MX_SPI2_Init+0xa8>)
 80049d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80049d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80049da:	4b25      	ldr	r3, [pc, #148]	; (8004a70 <MX_SPI2_Init+0xa8>)
 80049dc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80049e0:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 80049e2:	4b23      	ldr	r3, [pc, #140]	; (8004a70 <MX_SPI2_Init+0xa8>)
 80049e4:	220f      	movs	r2, #15
 80049e6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e8:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <MX_SPI2_Init+0xa8>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80049ee:	4b20      	ldr	r3, [pc, #128]	; (8004a70 <MX_SPI2_Init+0xa8>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80049f4:	4b1e      	ldr	r3, [pc, #120]	; (8004a70 <MX_SPI2_Init+0xa8>)
 80049f6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80049fa:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80049fc:	4b1c      	ldr	r3, [pc, #112]	; (8004a70 <MX_SPI2_Init+0xa8>)
 80049fe:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8004a02:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004a04:	4b1a      	ldr	r3, [pc, #104]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8004a0a:	4b19      	ldr	r3, [pc, #100]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a10:	4b17      	ldr	r3, [pc, #92]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a12:	2200      	movs	r2, #0
 8004a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8004a16:	4b16      	ldr	r3, [pc, #88]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004a1c:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004a22:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004a2a:	4b11      	ldr	r3, [pc, #68]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004a36:	4b0e      	ldr	r3, [pc, #56]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004a4e:	4b08      	ldr	r3, [pc, #32]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a50:	2200      	movs	r2, #0
 8004a52:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004a54:	4b06      	ldr	r3, [pc, #24]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a56:	2200      	movs	r2, #0
 8004a58:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8004a5a:	4805      	ldr	r0, [pc, #20]	; (8004a70 <MX_SPI2_Init+0xa8>)
 8004a5c:	f00e fb92 	bl	8013184 <HAL_SPI_Init>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8004a66:	f7ff f9b3 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8004a6a:	bf00      	nop
 8004a6c:	bd80      	pop	{r7, pc}
 8004a6e:	bf00      	nop
 8004a70:	24001f1c 	.word	0x24001f1c
 8004a74:	40003800 	.word	0x40003800

08004a78 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b0bc      	sub	sp, #240	; 0xf0
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a80:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	609a      	str	r2, [r3, #8]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004a90:	f107 0318 	add.w	r3, r7, #24
 8004a94:	22c0      	movs	r2, #192	; 0xc0
 8004a96:	2100      	movs	r1, #0
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f016 fedf 	bl	801b85c <memset>
  if(spiHandle->Instance==SPI1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a83      	ldr	r2, [pc, #524]	; (8004cb0 <HAL_SPI_MspInit+0x238>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d17c      	bne.n	8004ba2 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8004aa8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ab8:	f107 0318 	add.w	r3, r7, #24
 8004abc:	4618      	mov	r0, r3
 8004abe:	f00b fb41 	bl	8010144 <HAL_RCCEx_PeriphCLKConfig>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8004ac8:	f7ff f982 	bl	8003dd0 <Error_Handler>
    }

    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004acc:	4b79      	ldr	r3, [pc, #484]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004ace:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ad2:	4a78      	ldr	r2, [pc, #480]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004ad8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8004adc:	4b75      	ldr	r3, [pc, #468]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004ade:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8004ae2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae6:	617b      	str	r3, [r7, #20]
 8004ae8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004aea:	4b72      	ldr	r3, [pc, #456]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004af0:	4a70      	ldr	r2, [pc, #448]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004af2:	f043 0302 	orr.w	r3, r3, #2
 8004af6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004afa:	4b6e      	ldr	r3, [pc, #440]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	613b      	str	r3, [r7, #16]
 8004b06:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8004b08:	2318      	movs	r3, #24
 8004b0a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b0e:	2302      	movs	r3, #2
 8004b10:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004b20:	2305      	movs	r3, #5
 8004b22:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b26:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	4862      	ldr	r0, [pc, #392]	; (8004cb8 <HAL_SPI_MspInit+0x240>)
 8004b2e:	f007 fbb9 	bl	800c2a4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream4;
 8004b32:	4b62      	ldr	r3, [pc, #392]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b34:	4a62      	ldr	r2, [pc, #392]	; (8004cc0 <HAL_SPI_MspInit+0x248>)
 8004b36:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8004b38:	4b60      	ldr	r3, [pc, #384]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b3a:	2225      	movs	r2, #37	; 0x25
 8004b3c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004b3e:	4b5f      	ldr	r3, [pc, #380]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b44:	4b5d      	ldr	r3, [pc, #372]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b46:	2200      	movs	r2, #0
 8004b48:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004b4a:	4b5c      	ldr	r3, [pc, #368]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004b50:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004b52:	4b5a      	ldr	r3, [pc, #360]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b58:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004b5a:	4b58      	ldr	r3, [pc, #352]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004b60:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004b62:	4b56      	ldr	r3, [pc, #344]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004b68:	4b54      	ldr	r3, [pc, #336]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004b6e:	4b53      	ldr	r3, [pc, #332]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b70:	2200      	movs	r2, #0
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004b74:	4851      	ldr	r0, [pc, #324]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b76:	f004 f86f 	bl	8008c58 <HAL_DMA_Init>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 8004b80:	f7ff f926 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a4d      	ldr	r2, [pc, #308]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b88:	67da      	str	r2, [r3, #124]	; 0x7c
 8004b8a:	4a4c      	ldr	r2, [pc, #304]	; (8004cbc <HAL_SPI_MspInit+0x244>)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8004b90:	2200      	movs	r2, #0
 8004b92:	2105      	movs	r1, #5
 8004b94:	2023      	movs	r0, #35	; 0x23
 8004b96:	f003 fc31 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8004b9a:	2023      	movs	r0, #35	; 0x23
 8004b9c:	f003 fc48 	bl	8008430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004ba0:	e081      	b.n	8004ca6 <HAL_SPI_MspInit+0x22e>
  else if(spiHandle->Instance==SPI2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a47      	ldr	r2, [pc, #284]	; (8004cc4 <HAL_SPI_MspInit+0x24c>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d17c      	bne.n	8004ca6 <HAL_SPI_MspInit+0x22e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8004bac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004bb0:	f04f 0300 	mov.w	r3, #0
 8004bb4:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004bbc:	f107 0318 	add.w	r3, r7, #24
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f00b fabf 	bl	8010144 <HAL_RCCEx_PeriphCLKConfig>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d001      	beq.n	8004bd0 <HAL_SPI_MspInit+0x158>
      Error_Handler();
 8004bcc:	f7ff f900 	bl	8003dd0 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004bd0:	4b38      	ldr	r3, [pc, #224]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004bd2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004bd6:	4a37      	ldr	r2, [pc, #220]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bdc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004be0:	4b34      	ldr	r3, [pc, #208]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004be2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004be6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bee:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004bf4:	4a2f      	ldr	r2, [pc, #188]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004bf6:	f043 0302 	orr.w	r3, r3, #2
 8004bfa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004bfe:	4b2d      	ldr	r3, [pc, #180]	; (8004cb4 <HAL_SPI_MspInit+0x23c>)
 8004c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004c04:	f003 0302 	and.w	r3, r3, #2
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8004c0c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8004c10:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c14:	2302      	movs	r3, #2
 8004c16:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004c20:	2300      	movs	r3, #0
 8004c22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004c26:	2305      	movs	r3, #5
 8004c28:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c2c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004c30:	4619      	mov	r1, r3
 8004c32:	4821      	ldr	r0, [pc, #132]	; (8004cb8 <HAL_SPI_MspInit+0x240>)
 8004c34:	f007 fb36 	bl	800c2a4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8004c38:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c3a:	4a24      	ldr	r2, [pc, #144]	; (8004ccc <HAL_SPI_MspInit+0x254>)
 8004c3c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8004c3e:	4b22      	ldr	r3, [pc, #136]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c40:	2227      	movs	r2, #39	; 0x27
 8004c42:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004c44:	4b20      	ldr	r3, [pc, #128]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c4a:	4b1f      	ldr	r3, [pc, #124]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c56:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004c58:	4b1b      	ldr	r3, [pc, #108]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004c5e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c66:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8004c68:	4b17      	ldr	r3, [pc, #92]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004c6e:	4b16      	ldr	r3, [pc, #88]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c70:	2200      	movs	r2, #0
 8004c72:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004c74:	4b14      	ldr	r3, [pc, #80]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c76:	2200      	movs	r2, #0
 8004c78:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004c7a:	4813      	ldr	r0, [pc, #76]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c7c:	f003 ffec 	bl	8008c58 <HAL_DMA_Init>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <HAL_SPI_MspInit+0x212>
      Error_Handler();
 8004c86:	f7ff f8a3 	bl	8003dd0 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a0e      	ldr	r2, [pc, #56]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c8e:	67da      	str	r2, [r3, #124]	; 0x7c
 8004c90:	4a0d      	ldr	r2, [pc, #52]	; (8004cc8 <HAL_SPI_MspInit+0x250>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8004c96:	2200      	movs	r2, #0
 8004c98:	2105      	movs	r1, #5
 8004c9a:	2024      	movs	r0, #36	; 0x24
 8004c9c:	f003 fbae 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8004ca0:	2024      	movs	r0, #36	; 0x24
 8004ca2:	f003 fbc5 	bl	8008430 <HAL_NVIC_EnableIRQ>
}
 8004ca6:	bf00      	nop
 8004ca8:	37f0      	adds	r7, #240	; 0xf0
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bd80      	pop	{r7, pc}
 8004cae:	bf00      	nop
 8004cb0:	40013000 	.word	0x40013000
 8004cb4:	58024400 	.word	0x58024400
 8004cb8:	58020400 	.word	0x58020400
 8004cbc:	24001fa4 	.word	0x24001fa4
 8004cc0:	40020070 	.word	0x40020070
 8004cc4:	40003800 	.word	0x40003800
 8004cc8:	2400201c 	.word	0x2400201c
 8004ccc:	40020058 	.word	0x40020058

08004cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b082      	sub	sp, #8
 8004cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004cd6:	4b10      	ldr	r3, [pc, #64]	; (8004d18 <HAL_MspInit+0x48>)
 8004cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cdc:	4a0e      	ldr	r2, [pc, #56]	; (8004d18 <HAL_MspInit+0x48>)
 8004cde:	f043 0302 	orr.w	r3, r3, #2
 8004ce2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004ce6:	4b0c      	ldr	r3, [pc, #48]	; (8004d18 <HAL_MspInit+0x48>)
 8004ce8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004cec:	f003 0302 	and.w	r3, r3, #2
 8004cf0:	607b      	str	r3, [r7, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	210f      	movs	r1, #15
 8004cf8:	f06f 0001 	mvn.w	r0, #1
 8004cfc:	f003 fb7e 	bl	80083fc <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	2105      	movs	r1, #5
 8004d04:	2004      	movs	r0, #4
 8004d06:	f003 fb79 	bl	80083fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8004d0a:	2004      	movs	r0, #4
 8004d0c:	f003 fb90 	bl	8008430 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d10:	bf00      	nop
 8004d12:	3708      	adds	r7, #8
 8004d14:	46bd      	mov	sp, r7
 8004d16:	bd80      	pop	{r7, pc}
 8004d18:	58024400 	.word	0x58024400

08004d1c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b090      	sub	sp, #64	; 0x40
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2b0f      	cmp	r3, #15
 8004d28:	d827      	bhi.n	8004d7a <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	2036      	movs	r0, #54	; 0x36
 8004d30:	f003 fb64 	bl	80083fc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004d34:	2036      	movs	r0, #54	; 0x36
 8004d36:	f003 fb7b 	bl	8008430 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 8004d3a:	4a29      	ldr	r2, [pc, #164]	; (8004de0 <HAL_InitTick+0xc4>)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004d40:	4b28      	ldr	r3, [pc, #160]	; (8004de4 <HAL_InitTick+0xc8>)
 8004d42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d46:	4a27      	ldr	r2, [pc, #156]	; (8004de4 <HAL_InitTick+0xc8>)
 8004d48:	f043 0310 	orr.w	r3, r3, #16
 8004d4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004d50:	4b24      	ldr	r3, [pc, #144]	; (8004de4 <HAL_InitTick+0xc8>)
 8004d52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004d56:	f003 0310 	and.w	r3, r3, #16
 8004d5a:	60fb      	str	r3, [r7, #12]
 8004d5c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004d5e:	f107 0210 	add.w	r2, r7, #16
 8004d62:	f107 0314 	add.w	r3, r7, #20
 8004d66:	4611      	mov	r1, r2
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f00b f9a9 	bl	80100c0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d70:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_InitTick+0x6a>
 8004d78:	e001      	b.n	8004d7e <HAL_InitTick+0x62>
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e02b      	b.n	8004dd6 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004d7e:	f00b f973 	bl	8010068 <HAL_RCC_GetPCLK1Freq>
 8004d82:	63f8      	str	r0, [r7, #60]	; 0x3c
 8004d84:	e004      	b.n	8004d90 <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004d86:	f00b f96f 	bl	8010068 <HAL_RCC_GetPCLK1Freq>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	005b      	lsls	r3, r3, #1
 8004d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004d90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d92:	4a15      	ldr	r2, [pc, #84]	; (8004de8 <HAL_InitTick+0xcc>)
 8004d94:	fba2 2303 	umull	r2, r3, r2, r3
 8004d98:	0c9b      	lsrs	r3, r3, #18
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004d9e:	4b13      	ldr	r3, [pc, #76]	; (8004dec <HAL_InitTick+0xd0>)
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <HAL_InitTick+0xd4>)
 8004da2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <HAL_InitTick+0xd0>)
 8004da6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004daa:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004dac:	4a0f      	ldr	r2, [pc, #60]	; (8004dec <HAL_InitTick+0xd0>)
 8004dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004db0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004db2:	4b0e      	ldr	r3, [pc, #56]	; (8004dec <HAL_InitTick+0xd0>)
 8004db4:	2200      	movs	r2, #0
 8004db6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <HAL_InitTick+0xd0>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004dbe:	480b      	ldr	r0, [pc, #44]	; (8004dec <HAL_InitTick+0xd0>)
 8004dc0:	f00e ff7f 	bl	8013cc2 <HAL_TIM_Base_Init>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d104      	bne.n	8004dd4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004dca:	4808      	ldr	r0, [pc, #32]	; (8004dec <HAL_InitTick+0xd0>)
 8004dcc:	f00e ffd0 	bl	8013d70 <HAL_TIM_Base_Start_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	e000      	b.n	8004dd6 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
}
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	3740      	adds	r7, #64	; 0x40
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	240000d0 	.word	0x240000d0
 8004de4:	58024400 	.word	0x58024400
 8004de8:	431bde83 	.word	0x431bde83
 8004dec:	24002094 	.word	0x24002094
 8004df0:	40001000 	.word	0x40001000

08004df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8004df8:	e7fe      	b.n	8004df8 <NMI_Handler+0x4>
	...

08004dfc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	if ((FLASH->SR1 & FLASH_SR_DBECCERR) || (FLASH->SR2 & FLASH_SR_DBECCERR)) {
 8004e00:	4b07      	ldr	r3, [pc, #28]	; (8004e20 <HardFault_Handler+0x24>)
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <HardFault_Handler+0x1e>
 8004e0c:	4b04      	ldr	r3, [pc, #16]	; (8004e20 <HardFault_Handler+0x24>)
 8004e0e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8004e12:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d001      	beq.n	8004e1e <HardFault_Handler+0x22>
		FLASH_IRQHandler();
 8004e1a:	f000 f813 	bl	8004e44 <FLASH_IRQHandler>
	}
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e1e:	e7fe      	b.n	8004e1e <HardFault_Handler+0x22>
 8004e20:	52002000 	.word	0x52002000

08004e24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e24:	b480      	push	{r7}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e28:	e7fe      	b.n	8004e28 <MemManage_Handler+0x4>

08004e2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e2e:	e7fe      	b.n	8004e2e <BusFault_Handler+0x4>

08004e30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e30:	b480      	push	{r7}
 8004e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e34:	e7fe      	b.n	8004e34 <UsageFault_Handler+0x4>

08004e36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e36:	b480      	push	{r7}
 8004e38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e3a:	bf00      	nop
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e42:	4770      	bx	lr

08004e44 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8004e48:	f006 fdee 	bl	800ba28 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8004e4c:	bf00      	nop
 8004e4e:	bd80      	pop	{r7, pc}

08004e50 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e54:	4802      	ldr	r0, [pc, #8]	; (8004e60 <DMA1_Stream0_IRQHandler+0x10>)
 8004e56:	f005 fa29 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8004e5a:	bf00      	nop
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	24000224 	.word	0x24000224

08004e64 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004e68:	4802      	ldr	r0, [pc, #8]	; (8004e74 <DMA1_Stream1_IRQHandler+0x10>)
 8004e6a:	f005 fa1f 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004e6e:	bf00      	nop
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	2400029c 	.word	0x2400029c

08004e78 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004e7c:	4802      	ldr	r0, [pc, #8]	; (8004e88 <DMA1_Stream2_IRQHandler+0x10>)
 8004e7e:	f005 fa15 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	2400225c 	.word	0x2400225c

08004e8c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8004e90:	4802      	ldr	r0, [pc, #8]	; (8004e9c <DMA1_Stream3_IRQHandler+0x10>)
 8004e92:	f005 fa0b 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	2400201c 	.word	0x2400201c

08004ea0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8004ea4:	4802      	ldr	r0, [pc, #8]	; (8004eb0 <DMA1_Stream4_IRQHandler+0x10>)
 8004ea6:	f005 fa01 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8004eaa:	bf00      	nop
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	24001fa4 	.word	0x24001fa4

08004eb4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004eb8:	4802      	ldr	r0, [pc, #8]	; (8004ec4 <DMA1_Stream5_IRQHandler+0x10>)
 8004eba:	f005 f9f7 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	24000328 	.word	0x24000328

08004ec8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8004ecc:	4802      	ldr	r0, [pc, #8]	; (8004ed8 <DMA1_Stream6_IRQHandler+0x10>)
 8004ece:	f005 f9ed 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004ed2:	bf00      	nop
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	24001c08 	.word	0x24001c08

08004edc <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ee0:	4802      	ldr	r0, [pc, #8]	; (8004eec <TIM1_BRK_IRQHandler+0x10>)
 8004ee2:	f00f fa5c 	bl	801439e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8004ee6:	bf00      	nop
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	240020e4 	.word	0x240020e4

08004ef0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004ef4:	4802      	ldr	r0, [pc, #8]	; (8004f00 <TIM1_UP_IRQHandler+0x10>)
 8004ef6:	f00f fa52 	bl	801439e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8004efa:	bf00      	nop
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	240020e4 	.word	0x240020e4

08004f04 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f08:	4802      	ldr	r0, [pc, #8]	; (8004f14 <TIM1_TRG_COM_IRQHandler+0x10>)
 8004f0a:	f00f fa48 	bl	801439e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8004f0e:	bf00      	nop
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	240020e4 	.word	0x240020e4

08004f18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004f1c:	4802      	ldr	r0, [pc, #8]	; (8004f28 <TIM1_CC_IRQHandler+0x10>)
 8004f1e:	f00f fa3e 	bl	801439e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004f22:	bf00      	nop
 8004f24:	bd80      	pop	{r7, pc}
 8004f26:	bf00      	nop
 8004f28:	240020e4 	.word	0x240020e4

08004f2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004f30:	4802      	ldr	r0, [pc, #8]	; (8004f3c <TIM2_IRQHandler+0x10>)
 8004f32:	f00f fa34 	bl	801439e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004f36:	bf00      	nop
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	24002130 	.word	0x24002130

08004f40 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004f44:	4802      	ldr	r0, [pc, #8]	; (8004f50 <TIM3_IRQHandler+0x10>)
 8004f46:	f00f fa2a 	bl	801439e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8004f4a:	bf00      	nop
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	2400217c 	.word	0x2400217c

08004f54 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004f58:	4802      	ldr	r0, [pc, #8]	; (8004f64 <I2C1_EV_IRQHandler+0x10>)
 8004f5a:	f007 fe25 	bl	800cba8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004f5e:	bf00      	nop
 8004f60:	bd80      	pop	{r7, pc}
 8004f62:	bf00      	nop
 8004f64:	24001bb4 	.word	0x24001bb4

08004f68 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004f6c:	4802      	ldr	r0, [pc, #8]	; (8004f78 <I2C1_ER_IRQHandler+0x10>)
 8004f6e:	f007 fe35 	bl	800cbdc <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004f72:	bf00      	nop
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	24001bb4 	.word	0x24001bb4

08004f7c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8004f80:	4802      	ldr	r0, [pc, #8]	; (8004f8c <SPI1_IRQHandler+0x10>)
 8004f82:	f00e fb6b 	bl	801365c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8004f86:	bf00      	nop
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	24001e94 	.word	0x24001e94

08004f90 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8004f94:	4802      	ldr	r0, [pc, #8]	; (8004fa0 <SPI2_IRQHandler+0x10>)
 8004f96:	f00e fb61 	bl	801365c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8004f9a:	bf00      	nop
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	24001f1c 	.word	0x24001f1c

08004fa4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004fa8:	4802      	ldr	r0, [pc, #8]	; (8004fb4 <USART1_IRQHandler+0x10>)
 8004faa:	f010 fd3b 	bl	8015a24 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004fae:	bf00      	nop
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	240021c8 	.word	0x240021c8

08004fb8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004fbc:	4802      	ldr	r0, [pc, #8]	; (8004fc8 <DMA1_Stream7_IRQHandler+0x10>)
 8004fbe:	f005 f975 	bl	800a2ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8004fc2:	bf00      	nop
 8004fc4:	bd80      	pop	{r7, pc}
 8004fc6:	bf00      	nop
 8004fc8:	24001c80 	.word	0x24001c80

08004fcc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 8004fd0:	4b06      	ldr	r3, [pc, #24]	; (8004fec <TIM6_DAC_IRQHandler+0x20>)
 8004fd2:	791b      	ldrb	r3, [r3, #4]
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d002      	beq.n	8004fe0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 8004fda:	4804      	ldr	r0, [pc, #16]	; (8004fec <TIM6_DAC_IRQHandler+0x20>)
 8004fdc:	f003 fbbd 	bl	800875a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004fe0:	4803      	ldr	r0, [pc, #12]	; (8004ff0 <TIM6_DAC_IRQHandler+0x24>)
 8004fe2:	f00f f9dc 	bl	801439e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	24000314 	.word	0x24000314
 8004ff0:	24002094 	.word	0x24002094

08004ff4 <ECC_IRQHandler>:

/* USER CODE BEGIN 1 */
/**
 * @brief This function handles RAMECC global interrupt
 */
void ECC_IRQHandler(void) {
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	af00      	add	r7, sp, #0
	// Domain 1
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m1, RAMECC_FLAGS_ALL)) {
 8004ff8:	4b4e      	ldr	r3, [pc, #312]	; (8005134 <ECC_IRQHandler+0x140>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4a4d      	ldr	r2, [pc, #308]	; (8005134 <ECC_IRQHandler+0x140>)
 8005000:	6812      	ldr	r2, [r2, #0]
 8005002:	f003 0307 	and.w	r3, r3, #7
 8005006:	6053      	str	r3, [r2, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d002      	beq.n	8005012 <ECC_IRQHandler+0x1e>
		HAL_RAMECC_IRQHandler(&hramecc1_m1);
 800500c:	4849      	ldr	r0, [pc, #292]	; (8005134 <ECC_IRQHandler+0x140>)
 800500e:	f00a f81d 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m2, RAMECC_FLAGS_ALL)) {
 8005012:	4b49      	ldr	r3, [pc, #292]	; (8005138 <ECC_IRQHandler+0x144>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4a47      	ldr	r2, [pc, #284]	; (8005138 <ECC_IRQHandler+0x144>)
 800501a:	6812      	ldr	r2, [r2, #0]
 800501c:	f003 0307 	and.w	r3, r3, #7
 8005020:	6053      	str	r3, [r2, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <ECC_IRQHandler+0x38>
		HAL_RAMECC_IRQHandler(&hramecc1_m2);
 8005026:	4844      	ldr	r0, [pc, #272]	; (8005138 <ECC_IRQHandler+0x144>)
 8005028:	f00a f810 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m3, RAMECC_FLAGS_ALL)) {
 800502c:	4b43      	ldr	r3, [pc, #268]	; (800513c <ECC_IRQHandler+0x148>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685b      	ldr	r3, [r3, #4]
 8005032:	4a42      	ldr	r2, [pc, #264]	; (800513c <ECC_IRQHandler+0x148>)
 8005034:	6812      	ldr	r2, [r2, #0]
 8005036:	f003 0307 	and.w	r3, r3, #7
 800503a:	6053      	str	r3, [r2, #4]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d002      	beq.n	8005046 <ECC_IRQHandler+0x52>
		HAL_RAMECC_IRQHandler(&hramecc1_m3);
 8005040:	483e      	ldr	r0, [pc, #248]	; (800513c <ECC_IRQHandler+0x148>)
 8005042:	f00a f803 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m4, RAMECC_FLAGS_ALL)) {
 8005046:	4b3e      	ldr	r3, [pc, #248]	; (8005140 <ECC_IRQHandler+0x14c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685b      	ldr	r3, [r3, #4]
 800504c:	4a3c      	ldr	r2, [pc, #240]	; (8005140 <ECC_IRQHandler+0x14c>)
 800504e:	6812      	ldr	r2, [r2, #0]
 8005050:	f003 0307 	and.w	r3, r3, #7
 8005054:	6053      	str	r3, [r2, #4]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d002      	beq.n	8005060 <ECC_IRQHandler+0x6c>
		HAL_RAMECC_IRQHandler(&hramecc1_m4);
 800505a:	4839      	ldr	r0, [pc, #228]	; (8005140 <ECC_IRQHandler+0x14c>)
 800505c:	f009 fff6 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc1_m5, RAMECC_FLAGS_ALL)) {
 8005060:	4b38      	ldr	r3, [pc, #224]	; (8005144 <ECC_IRQHandler+0x150>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	4a37      	ldr	r2, [pc, #220]	; (8005144 <ECC_IRQHandler+0x150>)
 8005068:	6812      	ldr	r2, [r2, #0]
 800506a:	f003 0307 	and.w	r3, r3, #7
 800506e:	6053      	str	r3, [r2, #4]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d002      	beq.n	800507a <ECC_IRQHandler+0x86>
		HAL_RAMECC_IRQHandler(&hramecc1_m5);
 8005074:	4833      	ldr	r0, [pc, #204]	; (8005144 <ECC_IRQHandler+0x150>)
 8005076:	f009 ffe9 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}

	// Domain 2
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m1, RAMECC_FLAGS_ALL)) {
 800507a:	4b33      	ldr	r3, [pc, #204]	; (8005148 <ECC_IRQHandler+0x154>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	4a31      	ldr	r2, [pc, #196]	; (8005148 <ECC_IRQHandler+0x154>)
 8005082:	6812      	ldr	r2, [r2, #0]
 8005084:	f003 0307 	and.w	r3, r3, #7
 8005088:	6053      	str	r3, [r2, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <ECC_IRQHandler+0xa0>
		HAL_RAMECC_IRQHandler(&hramecc2_m1);
 800508e:	482e      	ldr	r0, [pc, #184]	; (8005148 <ECC_IRQHandler+0x154>)
 8005090:	f009 ffdc 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m2, RAMECC_FLAGS_ALL)) {
 8005094:	4b2d      	ldr	r3, [pc, #180]	; (800514c <ECC_IRQHandler+0x158>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	4a2c      	ldr	r2, [pc, #176]	; (800514c <ECC_IRQHandler+0x158>)
 800509c:	6812      	ldr	r2, [r2, #0]
 800509e:	f003 0307 	and.w	r3, r3, #7
 80050a2:	6053      	str	r3, [r2, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d002      	beq.n	80050ae <ECC_IRQHandler+0xba>
		HAL_RAMECC_IRQHandler(&hramecc2_m2);
 80050a8:	4828      	ldr	r0, [pc, #160]	; (800514c <ECC_IRQHandler+0x158>)
 80050aa:	f009 ffcf 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m3, RAMECC_FLAGS_ALL)) {
 80050ae:	4b28      	ldr	r3, [pc, #160]	; (8005150 <ECC_IRQHandler+0x15c>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	4a26      	ldr	r2, [pc, #152]	; (8005150 <ECC_IRQHandler+0x15c>)
 80050b6:	6812      	ldr	r2, [r2, #0]
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	6053      	str	r3, [r2, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d002      	beq.n	80050c8 <ECC_IRQHandler+0xd4>
		HAL_RAMECC_IRQHandler(&hramecc2_m3);
 80050c2:	4823      	ldr	r0, [pc, #140]	; (8005150 <ECC_IRQHandler+0x15c>)
 80050c4:	f009 ffc2 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m4, RAMECC_FLAGS_ALL)) {
 80050c8:	4b22      	ldr	r3, [pc, #136]	; (8005154 <ECC_IRQHandler+0x160>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	4a21      	ldr	r2, [pc, #132]	; (8005154 <ECC_IRQHandler+0x160>)
 80050d0:	6812      	ldr	r2, [r2, #0]
 80050d2:	f003 0307 	and.w	r3, r3, #7
 80050d6:	6053      	str	r3, [r2, #4]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d002      	beq.n	80050e2 <ECC_IRQHandler+0xee>
		HAL_RAMECC_IRQHandler(&hramecc2_m4);
 80050dc:	481d      	ldr	r0, [pc, #116]	; (8005154 <ECC_IRQHandler+0x160>)
 80050de:	f009 ffb5 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc2_m5, RAMECC_FLAGS_ALL)) {
 80050e2:	4b1d      	ldr	r3, [pc, #116]	; (8005158 <ECC_IRQHandler+0x164>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <ECC_IRQHandler+0x164>)
 80050ea:	6812      	ldr	r2, [r2, #0]
 80050ec:	f003 0307 	and.w	r3, r3, #7
 80050f0:	6053      	str	r3, [r2, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d002      	beq.n	80050fc <ECC_IRQHandler+0x108>
		HAL_RAMECC_IRQHandler(&hramecc2_m5);
 80050f6:	4818      	ldr	r0, [pc, #96]	; (8005158 <ECC_IRQHandler+0x164>)
 80050f8:	f009 ffa8 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}

	// Domain 3
	if (__HAL_RAMECC_GET_FLAG(&hramecc3_m1, RAMECC_FLAGS_ALL)) {
 80050fc:	4b17      	ldr	r3, [pc, #92]	; (800515c <ECC_IRQHandler+0x168>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4a16      	ldr	r2, [pc, #88]	; (800515c <ECC_IRQHandler+0x168>)
 8005104:	6812      	ldr	r2, [r2, #0]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	6053      	str	r3, [r2, #4]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d002      	beq.n	8005116 <ECC_IRQHandler+0x122>
		HAL_RAMECC_IRQHandler(&hramecc3_m1);
 8005110:	4812      	ldr	r0, [pc, #72]	; (800515c <ECC_IRQHandler+0x168>)
 8005112:	f009 ff9b 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
	if (__HAL_RAMECC_GET_FLAG(&hramecc3_m2, RAMECC_FLAGS_ALL)) {
 8005116:	4b12      	ldr	r3, [pc, #72]	; (8005160 <ECC_IRQHandler+0x16c>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4a10      	ldr	r2, [pc, #64]	; (8005160 <ECC_IRQHandler+0x16c>)
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	f003 0307 	and.w	r3, r3, #7
 8005124:	6053      	str	r3, [r2, #4]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d002      	beq.n	8005130 <ECC_IRQHandler+0x13c>
		HAL_RAMECC_IRQHandler(&hramecc3_m2);
 800512a:	480d      	ldr	r0, [pc, #52]	; (8005160 <ECC_IRQHandler+0x16c>)
 800512c:	f009 ff8e 	bl	800f04c <HAL_RAMECC_IRQHandler>
	}
}
 8005130:	bf00      	nop
 8005132:	bd80      	pop	{r7, pc}
 8005134:	24001d6c 	.word	0x24001d6c
 8005138:	24001d7c 	.word	0x24001d7c
 800513c:	24001d8c 	.word	0x24001d8c
 8005140:	24001d9c 	.word	0x24001d9c
 8005144:	24001dac 	.word	0x24001dac
 8005148:	24001dbc 	.word	0x24001dbc
 800514c:	24001dcc 	.word	0x24001dcc
 8005150:	24001ddc 	.word	0x24001ddc
 8005154:	24001dec 	.word	0x24001dec
 8005158:	24001dfc 	.word	0x24001dfc
 800515c:	24001e0c 	.word	0x24001e0c
 8005160:	24001e1c 	.word	0x24001e1c

08005164 <ITM_SendChar>:

// ITM Register Address
#define ITM_STIMULUS_PORT0 *((volatile uint32_t*) 0xE0000000)
#define ITM_TRACE_EN *((volatile uint32_t*) 0xE0000E00)

void ITM_SendChar(uint8_t ch) {
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	4603      	mov	r3, r0
 800516c:	71fb      	strb	r3, [r7, #7]
	DEMCR |= (1 << 24);
 800516e:	4b0f      	ldr	r3, [pc, #60]	; (80051ac <ITM_SendChar+0x48>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a0e      	ldr	r2, [pc, #56]	; (80051ac <ITM_SendChar+0x48>)
 8005174:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005178:	6013      	str	r3, [r2, #0]

	ITM_TRACE_EN |= (1 << 0);
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <ITM_SendChar+0x4c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a0c      	ldr	r2, [pc, #48]	; (80051b0 <ITM_SendChar+0x4c>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	6013      	str	r3, [r2, #0]

	while (!(ITM_STIMULUS_PORT0 & 1))
 8005186:	bf00      	nop
 8005188:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0301 	and.w	r3, r3, #1
 8005192:	2b00      	cmp	r3, #0
 8005194:	d0f8      	beq.n	8005188 <ITM_SendChar+0x24>
		;

	ITM_STIMULUS_PORT0 = ch;
 8005196:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800519a:	79fb      	ldrb	r3, [r7, #7]
 800519c:	6013      	str	r3, [r2, #0]
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	e000edfc 	.word	0xe000edfc
 80051b0:	e0000e00 	.word	0xe0000e00

080051b4 <_read>:
	_kill(status, -1);
	while (1) {
	} /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
 80051c4:	e00a      	b.n	80051dc <_read+0x28>
		*ptr++ = __io_getchar();
 80051c6:	f3af 8000 	nop.w
 80051ca:	4601      	mov	r1, r0
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	1c5a      	adds	r2, r3, #1
 80051d0:	60ba      	str	r2, [r7, #8]
 80051d2:	b2ca      	uxtb	r2, r1
 80051d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	3301      	adds	r3, #1
 80051da:	617b      	str	r3, [r7, #20]
 80051dc:	697a      	ldr	r2, [r7, #20]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	dbf0      	blt.n	80051c6 <_read+0x12>
	}

	return len;
 80051e4:	687b      	ldr	r3, [r7, #4]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b086      	sub	sp, #24
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
	(void) file;
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 80051fa:	2300      	movs	r3, #0
 80051fc:	617b      	str	r3, [r7, #20]
 80051fe:	e009      	b.n	8005214 <_write+0x26>
		//__io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	60ba      	str	r2, [r7, #8]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff ffab 	bl	8005164 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	3301      	adds	r3, #1
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	697a      	ldr	r2, [r7, #20]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	429a      	cmp	r2, r3
 800521a:	dbf1      	blt.n	8005200 <_write+0x12>
	}
	return len;
 800521c:	687b      	ldr	r3, [r7, #4]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3718      	adds	r7, #24
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <_close>:

int _close(int file) {
 8005226:	b480      	push	{r7}
 8005228:	b083      	sub	sp, #12
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
	(void) file;
	return -1;
 800522e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005232:	4618      	mov	r0, r3
 8005234:	370c      	adds	r7, #12
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr

0800523e <_fstat>:

int _fstat(int file, struct stat *st) {
 800523e:	b480      	push	{r7}
 8005240:	b083      	sub	sp, #12
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
 8005246:	6039      	str	r1, [r7, #0]
	(void) file;
	st->st_mode = S_IFCHR;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800524e:	605a      	str	r2, [r3, #4]
	return 0;
 8005250:	2300      	movs	r3, #0
}
 8005252:	4618      	mov	r0, r3
 8005254:	370c      	adds	r7, #12
 8005256:	46bd      	mov	sp, r7
 8005258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525c:	4770      	bx	lr

0800525e <_isatty>:

int _isatty(int file) {
 800525e:	b480      	push	{r7}
 8005260:	b083      	sub	sp, #12
 8005262:	af00      	add	r7, sp, #0
 8005264:	6078      	str	r0, [r7, #4]
	(void) file;
	return 1;
 8005266:	2301      	movs	r3, #1
}
 8005268:	4618      	mov	r0, r3
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <_lseek>:

int _lseek(int file, int ptr, int dir) {
 8005274:	b480      	push	{r7}
 8005276:	b085      	sub	sp, #20
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
	(void) file;
	(void) ptr;
	(void) dir;
	return 0;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
	...

08005290 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void* _sbrk(ptrdiff_t incr) {
 8005290:	b580      	push	{r7, lr}
 8005292:	b086      	sub	sp, #24
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	extern uint8_t _end; /* Symbol defined in the linker script */
	extern uint8_t _estack; /* Symbol defined in the linker script */
	extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
	const uint32_t stack_limit = (uint32_t) &_estack
 8005298:	4a14      	ldr	r2, [pc, #80]	; (80052ec <_sbrk+0x5c>)
			- (uint32_t) &_Min_Stack_Size;
 800529a:	4b15      	ldr	r3, [pc, #84]	; (80052f0 <_sbrk+0x60>)
	const uint32_t stack_limit = (uint32_t) &_estack
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	617b      	str	r3, [r7, #20]
	const uint8_t *max_heap = (uint8_t*) stack_limit;
 80052a0:	697b      	ldr	r3, [r7, #20]
 80052a2:	613b      	str	r3, [r7, #16]
	uint8_t *prev_heap_end;

	/* Initialize heap end at first call */
	if (NULL == __sbrk_heap_end) {
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <_sbrk+0x64>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <_sbrk+0x22>
		__sbrk_heap_end = &_end;
 80052ac:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <_sbrk+0x64>)
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <_sbrk+0x68>)
 80052b0:	601a      	str	r2, [r3, #0]
	}

	/* Protect heap from growing into the reserved MSP stack */
	if (__sbrk_heap_end + incr > max_heap) {
 80052b2:	4b10      	ldr	r3, [pc, #64]	; (80052f4 <_sbrk+0x64>)
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4413      	add	r3, r2
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d207      	bcs.n	80052d0 <_sbrk+0x40>
		errno = ENOMEM;
 80052c0:	f016 fa94 	bl	801b7ec <__errno>
 80052c4:	4603      	mov	r3, r0
 80052c6:	220c      	movs	r2, #12
 80052c8:	601a      	str	r2, [r3, #0]
		return (void*) -1;
 80052ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80052ce:	e009      	b.n	80052e4 <_sbrk+0x54>
	}

	prev_heap_end = __sbrk_heap_end;
 80052d0:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <_sbrk+0x64>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	60fb      	str	r3, [r7, #12]
	__sbrk_heap_end += incr;
 80052d6:	4b07      	ldr	r3, [pc, #28]	; (80052f4 <_sbrk+0x64>)
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4413      	add	r3, r2
 80052de:	4a05      	ldr	r2, [pc, #20]	; (80052f4 <_sbrk+0x64>)
 80052e0:	6013      	str	r3, [r2, #0]

	return (void*) prev_heap_end;
 80052e2:	68fb      	ldr	r3, [r7, #12]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	3718      	adds	r7, #24
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}
 80052ec:	24080000 	.word	0x24080000
 80052f0:	00000400 	.word	0x00000400
 80052f4:	240020e0 	.word	0x240020e0
 80052f8:	24006d78 	.word	0x24006d78

080052fc <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8005300:	4b37      	ldr	r3, [pc, #220]	; (80053e0 <SystemInit+0xe4>)
 8005302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005306:	4a36      	ldr	r2, [pc, #216]	; (80053e0 <SystemInit+0xe4>)
 8005308:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800530c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8005310:	4b34      	ldr	r3, [pc, #208]	; (80053e4 <SystemInit+0xe8>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	2b06      	cmp	r3, #6
 800531a:	d807      	bhi.n	800532c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800531c:	4b31      	ldr	r3, [pc, #196]	; (80053e4 <SystemInit+0xe8>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	f023 030f 	bic.w	r3, r3, #15
 8005324:	4a2f      	ldr	r2, [pc, #188]	; (80053e4 <SystemInit+0xe8>)
 8005326:	f043 0307 	orr.w	r3, r3, #7
 800532a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800532c:	4b2e      	ldr	r3, [pc, #184]	; (80053e8 <SystemInit+0xec>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a2d      	ldr	r2, [pc, #180]	; (80053e8 <SystemInit+0xec>)
 8005332:	f043 0301 	orr.w	r3, r3, #1
 8005336:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8005338:	4b2b      	ldr	r3, [pc, #172]	; (80053e8 <SystemInit+0xec>)
 800533a:	2200      	movs	r2, #0
 800533c:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800533e:	4b2a      	ldr	r3, [pc, #168]	; (80053e8 <SystemInit+0xec>)
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	4929      	ldr	r1, [pc, #164]	; (80053e8 <SystemInit+0xec>)
 8005344:	4b29      	ldr	r3, [pc, #164]	; (80053ec <SystemInit+0xf0>)
 8005346:	4013      	ands	r3, r2
 8005348:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800534a:	4b26      	ldr	r3, [pc, #152]	; (80053e4 <SystemInit+0xe8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d007      	beq.n	8005366 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8005356:	4b23      	ldr	r3, [pc, #140]	; (80053e4 <SystemInit+0xe8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f023 030f 	bic.w	r3, r3, #15
 800535e:	4a21      	ldr	r2, [pc, #132]	; (80053e4 <SystemInit+0xe8>)
 8005360:	f043 0307 	orr.w	r3, r3, #7
 8005364:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8005366:	4b20      	ldr	r3, [pc, #128]	; (80053e8 <SystemInit+0xec>)
 8005368:	2200      	movs	r2, #0
 800536a:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 800536c:	4b1e      	ldr	r3, [pc, #120]	; (80053e8 <SystemInit+0xec>)
 800536e:	2200      	movs	r2, #0
 8005370:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 8005372:	4b1d      	ldr	r3, [pc, #116]	; (80053e8 <SystemInit+0xec>)
 8005374:	2200      	movs	r2, #0
 8005376:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 8005378:	4b1b      	ldr	r3, [pc, #108]	; (80053e8 <SystemInit+0xec>)
 800537a:	4a1d      	ldr	r2, [pc, #116]	; (80053f0 <SystemInit+0xf4>)
 800537c:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 800537e:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <SystemInit+0xec>)
 8005380:	4a1c      	ldr	r2, [pc, #112]	; (80053f4 <SystemInit+0xf8>)
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 8005384:	4b18      	ldr	r3, [pc, #96]	; (80053e8 <SystemInit+0xec>)
 8005386:	4a1c      	ldr	r2, [pc, #112]	; (80053f8 <SystemInit+0xfc>)
 8005388:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 800538a:	4b17      	ldr	r3, [pc, #92]	; (80053e8 <SystemInit+0xec>)
 800538c:	2200      	movs	r2, #0
 800538e:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8005390:	4b15      	ldr	r3, [pc, #84]	; (80053e8 <SystemInit+0xec>)
 8005392:	4a19      	ldr	r2, [pc, #100]	; (80053f8 <SystemInit+0xfc>)
 8005394:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8005396:	4b14      	ldr	r3, [pc, #80]	; (80053e8 <SystemInit+0xec>)
 8005398:	2200      	movs	r2, #0
 800539a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800539c:	4b12      	ldr	r3, [pc, #72]	; (80053e8 <SystemInit+0xec>)
 800539e:	4a16      	ldr	r2, [pc, #88]	; (80053f8 <SystemInit+0xfc>)
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80053a2:	4b11      	ldr	r3, [pc, #68]	; (80053e8 <SystemInit+0xec>)
 80053a4:	2200      	movs	r2, #0
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80053a8:	4b0f      	ldr	r3, [pc, #60]	; (80053e8 <SystemInit+0xec>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a0e      	ldr	r2, [pc, #56]	; (80053e8 <SystemInit+0xec>)
 80053ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053b2:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80053b4:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <SystemInit+0xec>)
 80053b6:	2200      	movs	r2, #0
 80053b8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80053ba:	4b10      	ldr	r3, [pc, #64]	; (80053fc <SystemInit+0x100>)
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	4b10      	ldr	r3, [pc, #64]	; (8005400 <SystemInit+0x104>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053c6:	d202      	bcs.n	80053ce <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80053c8:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <SystemInit+0x108>)
 80053ca:	2201      	movs	r2, #1
 80053cc:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80053ce:	4b0e      	ldr	r3, [pc, #56]	; (8005408 <SystemInit+0x10c>)
 80053d0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80053d4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80053d6:	bf00      	nop
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	e000ed00 	.word	0xe000ed00
 80053e4:	52002000 	.word	0x52002000
 80053e8:	58024400 	.word	0x58024400
 80053ec:	eaf6ed7f 	.word	0xeaf6ed7f
 80053f0:	02020200 	.word	0x02020200
 80053f4:	01ff0000 	.word	0x01ff0000
 80053f8:	01010280 	.word	0x01010280
 80053fc:	5c001000 	.word	0x5c001000
 8005400:	ffff0000 	.word	0xffff0000
 8005404:	51008108 	.word	0x51008108
 8005408:	52004000 	.word	0x52004000

0800540c <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b09a      	sub	sp, #104	; 0x68
 8005410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005412:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005416:	2200      	movs	r2, #0
 8005418:	601a      	str	r2, [r3, #0]
 800541a:	605a      	str	r2, [r3, #4]
 800541c:	609a      	str	r2, [r3, #8]
 800541e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005420:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005424:	2200      	movs	r2, #0
 8005426:	601a      	str	r2, [r3, #0]
 8005428:	605a      	str	r2, [r3, #4]
 800542a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800542c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	605a      	str	r2, [r3, #4]
 8005436:	609a      	str	r2, [r3, #8]
 8005438:	60da      	str	r2, [r3, #12]
 800543a:	611a      	str	r2, [r3, #16]
 800543c:	615a      	str	r2, [r3, #20]
 800543e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005440:	1d3b      	adds	r3, r7, #4
 8005442:	222c      	movs	r2, #44	; 0x2c
 8005444:	2100      	movs	r1, #0
 8005446:	4618      	mov	r0, r3
 8005448:	f016 fa08 	bl	801b85c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800544c:	4b44      	ldr	r3, [pc, #272]	; (8005560 <MX_TIM1_Init+0x154>)
 800544e:	4a45      	ldr	r2, [pc, #276]	; (8005564 <MX_TIM1_Init+0x158>)
 8005450:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 75-1;
 8005452:	4b43      	ldr	r3, [pc, #268]	; (8005560 <MX_TIM1_Init+0x154>)
 8005454:	224a      	movs	r2, #74	; 0x4a
 8005456:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005458:	4b41      	ldr	r3, [pc, #260]	; (8005560 <MX_TIM1_Init+0x154>)
 800545a:	2200      	movs	r2, #0
 800545c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800545e:	4b40      	ldr	r3, [pc, #256]	; (8005560 <MX_TIM1_Init+0x154>)
 8005460:	f24f 4223 	movw	r2, #62499	; 0xf423
 8005464:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005466:	4b3e      	ldr	r3, [pc, #248]	; (8005560 <MX_TIM1_Init+0x154>)
 8005468:	2200      	movs	r2, #0
 800546a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800546c:	4b3c      	ldr	r3, [pc, #240]	; (8005560 <MX_TIM1_Init+0x154>)
 800546e:	2200      	movs	r2, #0
 8005470:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005472:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <MX_TIM1_Init+0x154>)
 8005474:	2200      	movs	r2, #0
 8005476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005478:	4839      	ldr	r0, [pc, #228]	; (8005560 <MX_TIM1_Init+0x154>)
 800547a:	f00e fc22 	bl	8013cc2 <HAL_TIM_Base_Init>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d001      	beq.n	8005488 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8005484:	f7fe fca4 	bl	8003dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005488:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800548c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800548e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8005492:	4619      	mov	r1, r3
 8005494:	4832      	ldr	r0, [pc, #200]	; (8005560 <MX_TIM1_Init+0x154>)
 8005496:	f00f f99d 	bl	80147d4 <HAL_TIM_ConfigClockSource>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80054a0:	f7fe fc96 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80054a4:	482e      	ldr	r0, [pc, #184]	; (8005560 <MX_TIM1_Init+0x154>)
 80054a6:	f00e ff19 	bl	80142dc <HAL_TIM_PWM_Init>
 80054aa:	4603      	mov	r3, r0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d001      	beq.n	80054b4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80054b0:	f7fe fc8e 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80054b4:	2300      	movs	r3, #0
 80054b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80054b8:	2300      	movs	r3, #0
 80054ba:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80054bc:	2300      	movs	r3, #0
 80054be:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80054c0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80054c4:	4619      	mov	r1, r3
 80054c6:	4826      	ldr	r0, [pc, #152]	; (8005560 <MX_TIM1_Init+0x154>)
 80054c8:	f00f feda 	bl	8015280 <HAL_TIMEx_MasterConfigSynchronization>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d001      	beq.n	80054d6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80054d2:	f7fe fc7d 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80054d6:	2360      	movs	r3, #96	; 0x60
 80054d8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80054da:	f240 13df 	movw	r3, #479	; 0x1df
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80054e0:	2300      	movs	r3, #0
 80054e2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80054e4:	2300      	movs	r3, #0
 80054e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80054ec:	2300      	movs	r3, #0
 80054ee:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80054f0:	2300      	movs	r3, #0
 80054f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80054f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80054f8:	2200      	movs	r2, #0
 80054fa:	4619      	mov	r1, r3
 80054fc:	4818      	ldr	r0, [pc, #96]	; (8005560 <MX_TIM1_Init+0x154>)
 80054fe:	f00f f855 	bl	80145ac <HAL_TIM_PWM_ConfigChannel>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8005508:	f7fe fc62 	bl	8003dd0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800550c:	2300      	movs	r3, #0
 800550e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8005510:	2300      	movs	r3, #0
 8005512:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8005518:	2300      	movs	r3, #0
 800551a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800551c:	2300      	movs	r3, #0
 800551e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005524:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005526:	2300      	movs	r3, #0
 8005528:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800552a:	2300      	movs	r3, #0
 800552c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800552e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005532:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005534:	2300      	movs	r3, #0
 8005536:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005538:	2300      	movs	r3, #0
 800553a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	4619      	mov	r1, r3
 8005540:	4807      	ldr	r0, [pc, #28]	; (8005560 <MX_TIM1_Init+0x154>)
 8005542:	f00f ff2b 	bl	801539c <HAL_TIMEx_ConfigBreakDeadTime>
 8005546:	4603      	mov	r3, r0
 8005548:	2b00      	cmp	r3, #0
 800554a:	d001      	beq.n	8005550 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800554c:	f7fe fc40 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005550:	4803      	ldr	r0, [pc, #12]	; (8005560 <MX_TIM1_Init+0x154>)
 8005552:	f000 f94b 	bl	80057ec <HAL_TIM_MspPostInit>

}
 8005556:	bf00      	nop
 8005558:	3768      	adds	r7, #104	; 0x68
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	240020e4 	.word	0x240020e4
 8005564:	40010000 	.word	0x40010000

08005568 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b08e      	sub	sp, #56	; 0x38
 800556c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800556e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005572:	2200      	movs	r2, #0
 8005574:	601a      	str	r2, [r3, #0]
 8005576:	605a      	str	r2, [r3, #4]
 8005578:	609a      	str	r2, [r3, #8]
 800557a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800557c:	f107 031c 	add.w	r3, r7, #28
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005588:	463b      	mov	r3, r7
 800558a:	2200      	movs	r2, #0
 800558c:	601a      	str	r2, [r3, #0]
 800558e:	605a      	str	r2, [r3, #4]
 8005590:	609a      	str	r2, [r3, #8]
 8005592:	60da      	str	r2, [r3, #12]
 8005594:	611a      	str	r2, [r3, #16]
 8005596:	615a      	str	r2, [r3, #20]
 8005598:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800559a:	4b2d      	ldr	r3, [pc, #180]	; (8005650 <MX_TIM2_Init+0xe8>)
 800559c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80055a0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 75-1;
 80055a2:	4b2b      	ldr	r3, [pc, #172]	; (8005650 <MX_TIM2_Init+0xe8>)
 80055a4:	224a      	movs	r2, #74	; 0x4a
 80055a6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80055a8:	4b29      	ldr	r3, [pc, #164]	; (8005650 <MX_TIM2_Init+0xe8>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 80055ae:	4b28      	ldr	r3, [pc, #160]	; (8005650 <MX_TIM2_Init+0xe8>)
 80055b0:	f640 4234 	movw	r2, #3124	; 0xc34
 80055b4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80055b6:	4b26      	ldr	r3, [pc, #152]	; (8005650 <MX_TIM2_Init+0xe8>)
 80055b8:	2200      	movs	r2, #0
 80055ba:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80055bc:	4b24      	ldr	r3, [pc, #144]	; (8005650 <MX_TIM2_Init+0xe8>)
 80055be:	2280      	movs	r2, #128	; 0x80
 80055c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80055c2:	4823      	ldr	r0, [pc, #140]	; (8005650 <MX_TIM2_Init+0xe8>)
 80055c4:	f00e fb7d 	bl	8013cc2 <HAL_TIM_Base_Init>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d001      	beq.n	80055d2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80055ce:	f7fe fbff 	bl	8003dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80055d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055d6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80055d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80055dc:	4619      	mov	r1, r3
 80055de:	481c      	ldr	r0, [pc, #112]	; (8005650 <MX_TIM2_Init+0xe8>)
 80055e0:	f00f f8f8 	bl	80147d4 <HAL_TIM_ConfigClockSource>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d001      	beq.n	80055ee <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80055ea:	f7fe fbf1 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80055ee:	4818      	ldr	r0, [pc, #96]	; (8005650 <MX_TIM2_Init+0xe8>)
 80055f0:	f00e fe74 	bl	80142dc <HAL_TIM_PWM_Init>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80055fa:	f7fe fbe9 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80055fe:	2320      	movs	r3, #32
 8005600:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005602:	2300      	movs	r3, #0
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005606:	f107 031c 	add.w	r3, r7, #28
 800560a:	4619      	mov	r1, r3
 800560c:	4810      	ldr	r0, [pc, #64]	; (8005650 <MX_TIM2_Init+0xe8>)
 800560e:	f00f fe37 	bl	8015280 <HAL_TIMEx_MasterConfigSynchronization>
 8005612:	4603      	mov	r3, r0
 8005614:	2b00      	cmp	r3, #0
 8005616:	d001      	beq.n	800561c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8005618:	f7fe fbda 	bl	8003dd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800561c:	2360      	movs	r3, #96	; 0x60
 800561e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8005620:	2300      	movs	r3, #0
 8005622:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005624:	2300      	movs	r3, #0
 8005626:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8005628:	2300      	movs	r3, #0
 800562a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800562c:	463b      	mov	r3, r7
 800562e:	220c      	movs	r2, #12
 8005630:	4619      	mov	r1, r3
 8005632:	4807      	ldr	r0, [pc, #28]	; (8005650 <MX_TIM2_Init+0xe8>)
 8005634:	f00e ffba 	bl	80145ac <HAL_TIM_PWM_ConfigChannel>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d001      	beq.n	8005642 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800563e:	f7fe fbc7 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8005642:	4803      	ldr	r0, [pc, #12]	; (8005650 <MX_TIM2_Init+0xe8>)
 8005644:	f000 f8d2 	bl	80057ec <HAL_TIM_MspPostInit>

}
 8005648:	bf00      	nop
 800564a:	3738      	adds	r7, #56	; 0x38
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	24002130 	.word	0x24002130

08005654 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b088      	sub	sp, #32
 8005658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800565a:	f107 0310 	add.w	r3, r7, #16
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
 8005662:	605a      	str	r2, [r3, #4]
 8005664:	609a      	str	r2, [r3, #8]
 8005666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005668:	1d3b      	adds	r3, r7, #4
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	605a      	str	r2, [r3, #4]
 8005670:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005672:	4b1e      	ldr	r3, [pc, #120]	; (80056ec <MX_TIM3_Init+0x98>)
 8005674:	4a1e      	ldr	r2, [pc, #120]	; (80056f0 <MX_TIM3_Init+0x9c>)
 8005676:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7500-1;
 8005678:	4b1c      	ldr	r3, [pc, #112]	; (80056ec <MX_TIM3_Init+0x98>)
 800567a:	f641 524b 	movw	r2, #7499	; 0x1d4b
 800567e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005680:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <MX_TIM3_Init+0x98>)
 8005682:	2200      	movs	r2, #0
 8005684:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 35000-1;
 8005686:	4b19      	ldr	r3, [pc, #100]	; (80056ec <MX_TIM3_Init+0x98>)
 8005688:	f648 02b7 	movw	r2, #34999	; 0x88b7
 800568c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800568e:	4b17      	ldr	r3, [pc, #92]	; (80056ec <MX_TIM3_Init+0x98>)
 8005690:	2200      	movs	r2, #0
 8005692:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005694:	4b15      	ldr	r3, [pc, #84]	; (80056ec <MX_TIM3_Init+0x98>)
 8005696:	2200      	movs	r2, #0
 8005698:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800569a:	4814      	ldr	r0, [pc, #80]	; (80056ec <MX_TIM3_Init+0x98>)
 800569c:	f00e fb11 	bl	8013cc2 <HAL_TIM_Base_Init>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80056a6:	f7fe fb93 	bl	8003dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80056b0:	f107 0310 	add.w	r3, r7, #16
 80056b4:	4619      	mov	r1, r3
 80056b6:	480d      	ldr	r0, [pc, #52]	; (80056ec <MX_TIM3_Init+0x98>)
 80056b8:	f00f f88c 	bl	80147d4 <HAL_TIM_ConfigClockSource>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d001      	beq.n	80056c6 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 80056c2:	f7fe fb85 	bl	8003dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80056c6:	2300      	movs	r3, #0
 80056c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80056ca:	2300      	movs	r3, #0
 80056cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80056ce:	1d3b      	adds	r3, r7, #4
 80056d0:	4619      	mov	r1, r3
 80056d2:	4806      	ldr	r0, [pc, #24]	; (80056ec <MX_TIM3_Init+0x98>)
 80056d4:	f00f fdd4 	bl	8015280 <HAL_TIMEx_MasterConfigSynchronization>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 80056de:	f7fe fb77 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80056e2:	bf00      	nop
 80056e4:	3720      	adds	r7, #32
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	2400217c 	.word	0x2400217c
 80056f0:	40000400 	.word	0x40000400

080056f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a37      	ldr	r2, [pc, #220]	; (80057e0 <HAL_TIM_Base_MspInit+0xec>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d12f      	bne.n	8005766 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005706:	4b37      	ldr	r3, [pc, #220]	; (80057e4 <HAL_TIM_Base_MspInit+0xf0>)
 8005708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800570c:	4a35      	ldr	r2, [pc, #212]	; (80057e4 <HAL_TIM_Base_MspInit+0xf0>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005716:	4b33      	ldr	r3, [pc, #204]	; (80057e4 <HAL_TIM_Base_MspInit+0xf0>)
 8005718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	617b      	str	r3, [r7, #20]
 8005722:	697b      	ldr	r3, [r7, #20]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 8005724:	2200      	movs	r2, #0
 8005726:	2105      	movs	r1, #5
 8005728:	2018      	movs	r0, #24
 800572a:	f002 fe67 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 800572e:	2018      	movs	r0, #24
 8005730:	f002 fe7e 	bl	8008430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 8005734:	2200      	movs	r2, #0
 8005736:	2105      	movs	r1, #5
 8005738:	2019      	movs	r0, #25
 800573a:	f002 fe5f 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 800573e:	2019      	movs	r0, #25
 8005740:	f002 fe76 	bl	8008430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 8005744:	2200      	movs	r2, #0
 8005746:	2105      	movs	r1, #5
 8005748:	201a      	movs	r0, #26
 800574a:	f002 fe57 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 800574e:	201a      	movs	r0, #26
 8005750:	f002 fe6e 	bl	8008430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8005754:	2200      	movs	r2, #0
 8005756:	2105      	movs	r1, #5
 8005758:	201b      	movs	r0, #27
 800575a:	f002 fe4f 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800575e:	201b      	movs	r0, #27
 8005760:	f002 fe66 	bl	8008430 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8005764:	e038      	b.n	80057d8 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM2)
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800576e:	d117      	bne.n	80057a0 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005770:	4b1c      	ldr	r3, [pc, #112]	; (80057e4 <HAL_TIM_Base_MspInit+0xf0>)
 8005772:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005776:	4a1b      	ldr	r2, [pc, #108]	; (80057e4 <HAL_TIM_Base_MspInit+0xf0>)
 8005778:	f043 0301 	orr.w	r3, r3, #1
 800577c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005780:	4b18      	ldr	r3, [pc, #96]	; (80057e4 <HAL_TIM_Base_MspInit+0xf0>)
 8005782:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800578e:	2200      	movs	r2, #0
 8005790:	2105      	movs	r1, #5
 8005792:	201c      	movs	r0, #28
 8005794:	f002 fe32 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005798:	201c      	movs	r0, #28
 800579a:	f002 fe49 	bl	8008430 <HAL_NVIC_EnableIRQ>
}
 800579e:	e01b      	b.n	80057d8 <HAL_TIM_Base_MspInit+0xe4>
  else if(tim_baseHandle->Instance==TIM3)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a10      	ldr	r2, [pc, #64]	; (80057e8 <HAL_TIM_Base_MspInit+0xf4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d116      	bne.n	80057d8 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80057aa:	4b0e      	ldr	r3, [pc, #56]	; (80057e4 <HAL_TIM_Base_MspInit+0xf0>)
 80057ac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057b0:	4a0c      	ldr	r2, [pc, #48]	; (80057e4 <HAL_TIM_Base_MspInit+0xf0>)
 80057b2:	f043 0302 	orr.w	r3, r3, #2
 80057b6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80057ba:	4b0a      	ldr	r3, [pc, #40]	; (80057e4 <HAL_TIM_Base_MspInit+0xf0>)
 80057bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80057c0:	f003 0302 	and.w	r3, r3, #2
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 80057c8:	2200      	movs	r2, #0
 80057ca:	2105      	movs	r1, #5
 80057cc:	201d      	movs	r0, #29
 80057ce:	f002 fe15 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80057d2:	201d      	movs	r0, #29
 80057d4:	f002 fe2c 	bl	8008430 <HAL_NVIC_EnableIRQ>
}
 80057d8:	bf00      	nop
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	40010000 	.word	0x40010000
 80057e4:	58024400 	.word	0x58024400
 80057e8:	40000400 	.word	0x40000400

080057ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b08a      	sub	sp, #40	; 0x28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057f4:	f107 0314 	add.w	r3, r7, #20
 80057f8:	2200      	movs	r2, #0
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	605a      	str	r2, [r3, #4]
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	60da      	str	r2, [r3, #12]
 8005802:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a26      	ldr	r2, [pc, #152]	; (80058a4 <HAL_TIM_MspPostInit+0xb8>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d120      	bne.n	8005850 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800580e:	4b26      	ldr	r3, [pc, #152]	; (80058a8 <HAL_TIM_MspPostInit+0xbc>)
 8005810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005814:	4a24      	ldr	r2, [pc, #144]	; (80058a8 <HAL_TIM_MspPostInit+0xbc>)
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800581e:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <HAL_TIM_MspPostInit+0xbc>)
 8005820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	613b      	str	r3, [r7, #16]
 800582a:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800582c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005830:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005832:	2302      	movs	r3, #2
 8005834:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005836:	2300      	movs	r3, #0
 8005838:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800583a:	2300      	movs	r3, #0
 800583c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800583e:	2301      	movs	r3, #1
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005842:	f107 0314 	add.w	r3, r7, #20
 8005846:	4619      	mov	r1, r3
 8005848:	4818      	ldr	r0, [pc, #96]	; (80058ac <HAL_TIM_MspPostInit+0xc0>)
 800584a:	f006 fd2b 	bl	800c2a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800584e:	e024      	b.n	800589a <HAL_TIM_MspPostInit+0xae>
  else if(timHandle->Instance==TIM2)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005858:	d11f      	bne.n	800589a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800585a:	4b13      	ldr	r3, [pc, #76]	; (80058a8 <HAL_TIM_MspPostInit+0xbc>)
 800585c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005860:	4a11      	ldr	r2, [pc, #68]	; (80058a8 <HAL_TIM_MspPostInit+0xbc>)
 8005862:	f043 0302 	orr.w	r3, r3, #2
 8005866:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800586a:	4b0f      	ldr	r3, [pc, #60]	; (80058a8 <HAL_TIM_MspPostInit+0xbc>)
 800586c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	60fb      	str	r3, [r7, #12]
 8005876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005878:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800587c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800587e:	2302      	movs	r3, #2
 8005880:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005882:	2300      	movs	r3, #0
 8005884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005886:	2300      	movs	r3, #0
 8005888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800588a:	2301      	movs	r3, #1
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800588e:	f107 0314 	add.w	r3, r7, #20
 8005892:	4619      	mov	r1, r3
 8005894:	4806      	ldr	r0, [pc, #24]	; (80058b0 <HAL_TIM_MspPostInit+0xc4>)
 8005896:	f006 fd05 	bl	800c2a4 <HAL_GPIO_Init>
}
 800589a:	bf00      	nop
 800589c:	3728      	adds	r7, #40	; 0x28
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	58024400 	.word	0x58024400
 80058ac:	58020000 	.word	0x58020000
 80058b0:	58020400 	.word	0x58020400

080058b4 <get_uptime>:
 *      Author: 3ucubed
 */

#include "time_tagging.h"

void get_uptime(uint8_t *buffer) {
 80058b4:	b480      	push	{r7}
 80058b6:	b087      	sub	sp, #28
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
	uint32_t uptime = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	617b      	str	r3, [r7, #20]
	uint32_t ms = uptime_millis;
 80058c0:	4b21      	ldr	r3, [pc, #132]	; (8005948 <get_uptime+0x94>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	613b      	str	r3, [r7, #16]
	uint32_t st = SysTick->VAL;
 80058c6:	4b21      	ldr	r3, [pc, #132]	; (800594c <get_uptime+0x98>)
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	60fb      	str	r3, [r7, #12]

	// Did uptime_millis rollover while reading SysTick->VAL?
	if (ms != uptime_millis) {
 80058cc:	4b1e      	ldr	r3, [pc, #120]	; (8005948 <get_uptime+0x94>)
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	429a      	cmp	r2, r3
 80058d4:	d005      	beq.n	80058e2 <get_uptime+0x2e>
		ms = uptime_millis;
 80058d6:	4b1c      	ldr	r3, [pc, #112]	; (8005948 <get_uptime+0x94>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	613b      	str	r3, [r7, #16]
		st = SysTick->VAL;
 80058dc:	4b1b      	ldr	r3, [pc, #108]	; (800594c <get_uptime+0x98>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	60fb      	str	r3, [r7, #12]
	}
	uptime = ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80058e8:	fb03 f202 	mul.w	r2, r3, r2
 80058ec:	4b17      	ldr	r3, [pc, #92]	; (800594c <get_uptime+0x98>)
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	3301      	adds	r3, #1
 80058f2:	4917      	ldr	r1, [pc, #92]	; (8005950 <get_uptime+0x9c>)
 80058f4:	fba1 1303 	umull	r1, r3, r1, r3
 80058f8:	099b      	lsrs	r3, r3, #6
 80058fa:	68f9      	ldr	r1, [r7, #12]
 80058fc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005900:	1ad3      	subs	r3, r2, r3
 8005902:	617b      	str	r3, [r7, #20]

	if (ms == 0){
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <get_uptime+0x5a>
		uptime = 0;
 800590a:	2300      	movs	r3, #0
 800590c:	617b      	str	r3, [r7, #20]
	}

	buffer[0] = ((uptime >> 24) & 0xFF);
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	0e1b      	lsrs	r3, r3, #24
 8005912:	b2da      	uxtb	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((uptime >> 16) & 0xFF);
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	0c1a      	lsrs	r2, r3, #16
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3301      	adds	r3, #1
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((uptime >> 8) & 0xFF);
 8005924:	697b      	ldr	r3, [r7, #20]
 8005926:	0a1a      	lsrs	r2, r3, #8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3302      	adds	r3, #2
 800592c:	b2d2      	uxtb	r2, r2
 800592e:	701a      	strb	r2, [r3, #0]
	buffer[3] = uptime & 0xFF;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	3303      	adds	r3, #3
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	b2d2      	uxtb	r2, r2
 8005938:	701a      	strb	r2, [r3, #0]
}
 800593a:	bf00      	nop
 800593c:	371c      	adds	r7, #28
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	24001d58 	.word	0x24001d58
 800594c:	e000e010 	.word	0xe000e010
 8005950:	10624dd3 	.word	0x10624dd3

08005954 <get_unix_time>:

void get_unix_time(uint8_t* buffer) {
 8005954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005958:	b09d      	sub	sp, #116	; 0x74
 800595a:	af00      	add	r7, sp, #0
 800595c:	63f8      	str	r0, [r7, #60]	; 0x3c
	#define DAYS_IN_SECONDS   (24U * SECONDS_IN_1_HOUR)

	RTC_TimeTypeDef current_time;
	RTC_DateTypeDef current_date;

	HAL_RTC_GetTime(&hrtc, &current_time, RTC_FORMAT_BIN);
 800595e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005962:	2200      	movs	r2, #0
 8005964:	4619      	mov	r1, r3
 8005966:	4893      	ldr	r0, [pc, #588]	; (8005bb4 <get_unix_time+0x260>)
 8005968:	f00d fa0a 	bl	8012d80 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &current_date, RTC_FORMAT_BIN);
 800596c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005970:	2200      	movs	r2, #0
 8005972:	4619      	mov	r1, r3
 8005974:	488f      	ldr	r0, [pc, #572]	; (8005bb4 <get_unix_time+0x260>)
 8005976:	f00d fae7 	bl	8012f48 <HAL_RTC_GetDate>
	uint16_t milliseconds = (10000 - (current_time.SubSeconds)) / 10;
 800597a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005980:	1ad2      	subs	r2, r2, r3
 8005982:	4b8d      	ldr	r3, [pc, #564]	; (8005bb8 <get_unix_time+0x264>)
 8005984:	fba3 2302 	umull	r2, r3, r3, r2
 8005988:	08db      	lsrs	r3, r3, #3
 800598a:	f8a7 306a 	strh.w	r3, [r7, #106]	; 0x6a

	uint16_t y;
	uint8_t m;
	uint8_t d;
	uint64_t unix_tm_val = 0;
 800598e:	f04f 0200 	mov.w	r2, #0
 8005992:	f04f 0300 	mov.w	r3, #0
 8005996:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60


	y = current_date.Year + 2000;
 800599a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800599e:	b29b      	uxth	r3, r3
 80059a0:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 80059a4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	m = current_date.Month;
 80059a8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80059ac:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
	d = current_date.Date;
 80059b0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80059b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	// January and February are counted as months 13 and 14 of the previous year
	if (m <= 2)
 80059b8:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80059bc:	2b02      	cmp	r3, #2
 80059be:	d809      	bhi.n	80059d4 <get_unix_time+0x80>
	{
		m += 12;
 80059c0:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 80059c4:	330c      	adds	r3, #12
 80059c6:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
		y -= 1;
 80059ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80059ce:	3b01      	subs	r3, #1
 80059d0:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	}
	// convert years to days
	unix_tm_val = (365 * y) + (y / 4) - (y / 100) + (y / 400);
 80059d4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80059d8:	f240 136d 	movw	r3, #365	; 0x16d
 80059dc:	fb03 f202 	mul.w	r2, r3, r2
 80059e0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80059e4:	089b      	lsrs	r3, r3, #2
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	18d1      	adds	r1, r2, r3
 80059ea:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80059ee:	4b73      	ldr	r3, [pc, #460]	; (8005bbc <get_unix_time+0x268>)
 80059f0:	fba3 2302 	umull	r2, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	1ac9      	subs	r1, r1, r3
 80059fa:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 80059fe:	4b6f      	ldr	r3, [pc, #444]	; (8005bbc <get_unix_time+0x268>)
 8005a00:	fba3 2302 	umull	r2, r3, r3, r2
 8005a04:	09db      	lsrs	r3, r3, #7
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	440b      	add	r3, r1
 8005a0a:	17da      	asrs	r2, r3, #31
 8005a0c:	623b      	str	r3, [r7, #32]
 8005a0e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a10:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a14:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert months to days
	unix_tm_val += (30 * m) + (3 * (m + 1) / 5) + d;
 8005a18:	f897 206d 	ldrb.w	r2, [r7, #109]	; 0x6d
 8005a1c:	4613      	mov	r3, r2
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	1a9b      	subs	r3, r3, r2
 8005a22:	005b      	lsls	r3, r3, #1
 8005a24:	4618      	mov	r0, r3
 8005a26:	f897 306d 	ldrb.w	r3, [r7, #109]	; 0x6d
 8005a2a:	1c5a      	adds	r2, r3, #1
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	1899      	adds	r1, r3, r2
 8005a32:	4b63      	ldr	r3, [pc, #396]	; (8005bc0 <get_unix_time+0x26c>)
 8005a34:	fb83 2301 	smull	r2, r3, r3, r1
 8005a38:	105a      	asrs	r2, r3, #1
 8005a3a:	17cb      	asrs	r3, r1, #31
 8005a3c:	1ad3      	subs	r3, r2, r3
 8005a3e:	18c2      	adds	r2, r0, r3
 8005a40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005a44:	4413      	add	r3, r2
 8005a46:	17da      	asrs	r2, r3, #31
 8005a48:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4a:	637a      	str	r2, [r7, #52]	; 0x34
 8005a4c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005a52:	1851      	adds	r1, r2, r1
 8005a54:	61b9      	str	r1, [r7, #24]
 8005a56:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a58:	eb43 0101 	adc.w	r1, r3, r1
 8005a5c:	61f9      	str	r1, [r7, #28]
 8005a5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a62:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// Unix time starts on January 1st, 1970
	unix_tm_val -= UNIX_TIME_CONST;
 8005a66:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005a6a:	4956      	ldr	r1, [pc, #344]	; (8005bc4 <get_unix_time+0x270>)
 8005a6c:	1851      	adds	r1, r2, r1
 8005a6e:	6139      	str	r1, [r7, #16]
 8005a70:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a7a:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	// convert days to seconds
	unix_tm_val *= DAYS_IN_SECONDS;
 8005a7e:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005a82:	4602      	mov	r2, r0
 8005a84:	460b      	mov	r3, r1
 8005a86:	1896      	adds	r6, r2, r2
 8005a88:	60be      	str	r6, [r7, #8]
 8005a8a:	415b      	adcs	r3, r3
 8005a8c:	60fb      	str	r3, [r7, #12]
 8005a8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a92:	eb12 0800 	adds.w	r8, r2, r0
 8005a96:	eb43 0901 	adc.w	r9, r3, r1
 8005a9a:	f04f 0200 	mov.w	r2, #0
 8005a9e:	f04f 0300 	mov.w	r3, #0
 8005aa2:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8005aa6:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8005aaa:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8005aae:	ebb2 0408 	subs.w	r4, r2, r8
 8005ab2:	eb63 0509 	sbc.w	r5, r3, r9
 8005ab6:	f04f 0200 	mov.w	r2, #0
 8005aba:	f04f 0300 	mov.w	r3, #0
 8005abe:	012b      	lsls	r3, r5, #4
 8005ac0:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005ac4:	0122      	lsls	r2, r4, #4
 8005ac6:	ebb2 0a04 	subs.w	sl, r2, r4
 8005aca:	eb63 0b05 	sbc.w	fp, r3, r5
 8005ace:	f04f 0200 	mov.w	r2, #0
 8005ad2:	f04f 0300 	mov.w	r3, #0
 8005ad6:	ea4f 13cb 	mov.w	r3, fp, lsl #7
 8005ada:	ea43 635a 	orr.w	r3, r3, sl, lsr #25
 8005ade:	ea4f 12ca 	mov.w	r2, sl, lsl #7
 8005ae2:	4692      	mov	sl, r2
 8005ae4:	469b      	mov	fp, r3
 8005ae6:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
	//Add hours, minutes and seconds
	unix_tm_val += (SECONDS_IN_1_HOUR * current_time.Hours) + (SECONDS_IN_1_MIN * current_time.Minutes) + current_time.Seconds;
 8005aea:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005aee:	461a      	mov	r2, r3
 8005af0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8005af4:	fb03 f202 	mul.w	r2, r3, r2
 8005af8:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005afc:	4619      	mov	r1, r3
 8005afe:	460b      	mov	r3, r1
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	1a5b      	subs	r3, r3, r1
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	4413      	add	r3, r2
 8005b08:	f897 204a 	ldrb.w	r2, [r7, #74]	; 0x4a
 8005b0c:	4413      	add	r3, r2
 8005b0e:	2200      	movs	r2, #0
 8005b10:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b14:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005b18:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005b1c:	4621      	mov	r1, r4
 8005b1e:	1851      	adds	r1, r2, r1
 8005b20:	6039      	str	r1, [r7, #0]
 8005b22:	4629      	mov	r1, r5
 8005b24:	eb43 0101 	adc.w	r1, r3, r1
 8005b28:	6079      	str	r1, [r7, #4]
 8005b2a:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005b2e:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60

	buffer[0] = ((unix_tm_val >> 24) & 0xFF);
 8005b32:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b36:	f04f 0200 	mov.w	r2, #0
 8005b3a:	f04f 0300 	mov.w	r3, #0
 8005b3e:	0e02      	lsrs	r2, r0, #24
 8005b40:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005b44:	0e0b      	lsrs	r3, r1, #24
 8005b46:	b2d2      	uxtb	r2, r2
 8005b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b4a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ((unix_tm_val >> 16) & 0xFF);
 8005b4c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b50:	f04f 0200 	mov.w	r2, #0
 8005b54:	f04f 0300 	mov.w	r3, #0
 8005b58:	0c02      	lsrs	r2, r0, #16
 8005b5a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005b5e:	0c0b      	lsrs	r3, r1, #16
 8005b60:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b62:	3101      	adds	r1, #1
 8005b64:	b2d3      	uxtb	r3, r2
 8005b66:	700b      	strb	r3, [r1, #0]
	buffer[2] = ((unix_tm_val >> 8) & 0xFF);
 8005b68:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005b6c:	f04f 0200 	mov.w	r2, #0
 8005b70:	f04f 0300 	mov.w	r3, #0
 8005b74:	0a02      	lsrs	r2, r0, #8
 8005b76:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005b7a:	0a0b      	lsrs	r3, r1, #8
 8005b7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b7e:	3102      	adds	r1, #2
 8005b80:	b2d3      	uxtb	r3, r2
 8005b82:	700b      	strb	r3, [r1, #0]
	buffer[3] = unix_tm_val & 0xFF;
 8005b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b86:	3303      	adds	r3, #3
 8005b88:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8005b8c:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((milliseconds >> 8) & 0xFF);
 8005b8e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	; 0x6a
 8005b92:	0a1b      	lsrs	r3, r3, #8
 8005b94:	b29a      	uxth	r2, r3
 8005b96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b98:	3304      	adds	r3, #4
 8005b9a:	b2d2      	uxtb	r2, r2
 8005b9c:	701a      	strb	r2, [r3, #0]
	buffer[5] = milliseconds & 0xFF;
 8005b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ba0:	3305      	adds	r3, #5
 8005ba2:	f8b7 206a 	ldrh.w	r2, [r7, #106]	; 0x6a
 8005ba6:	b2d2      	uxtb	r2, r2
 8005ba8:	701a      	strb	r2, [r3, #0]
}
 8005baa:	bf00      	nop
 8005bac:	3774      	adds	r7, #116	; 0x74
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bb4:	24001e2c 	.word	0x24001e2c
 8005bb8:	cccccccd 	.word	0xcccccccd
 8005bbc:	51eb851f 	.word	0x51eb851f
 8005bc0:	66666667 	.word	0x66666667
 8005bc4:	fff50537 	.word	0xfff50537

08005bc8 <calibrateRTC>:

void calibrateRTC(uint8_t *buffer) {
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b08c      	sub	sp, #48	; 0x30
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef date_struct;
	RTC_TimeTypeDef time_struct;
	uint8_t year = buffer[1];
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	785b      	ldrb	r3, [r3, #1]
 8005bd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	uint8_t month = buffer[2];
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	789b      	ldrb	r3, [r3, #2]
 8005bdc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t day = buffer[3];
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	78db      	ldrb	r3, [r3, #3]
 8005be4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	uint8_t hour = buffer[4];
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	791b      	ldrb	r3, [r3, #4]
 8005bec:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	uint8_t minute = buffer[5];
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	795b      	ldrb	r3, [r3, #5]
 8005bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t second = buffer[6];
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	799b      	ldrb	r3, [r3, #6]
 8005bfc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	uint16_t milliseconds = (buffer[7] << 8) | buffer[8];
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	3307      	adds	r3, #7
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	021b      	lsls	r3, r3, #8
 8005c08:	b21a      	sxth	r2, r3
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	3308      	adds	r3, #8
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	b21b      	sxth	r3, r3
 8005c12:	4313      	orrs	r3, r2
 8005c14:	b21b      	sxth	r3, r3
 8005c16:	853b      	strh	r3, [r7, #40]	; 0x28

	date_struct.Year = year;
 8005c18:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005c1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	date_struct.Month = month;
 8005c20:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005c24:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	date_struct.Date = day;
 8005c28:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8005c2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

	time_struct.Hours = hour;
 8005c30:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005c34:	733b      	strb	r3, [r7, #12]
	time_struct.Minutes = minute;
 8005c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005c3a:	737b      	strb	r3, [r7, #13]
	time_struct.Seconds = second;
 8005c3c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005c40:	73bb      	strb	r3, [r7, #14]
	time_struct.SubSeconds = milliseconds;
 8005c42:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005c44:	613b      	str	r3, [r7, #16]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &date_struct, RTC_FORMAT_BIN);
 8005c46:	f107 0320 	add.w	r3, r7, #32
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	4619      	mov	r1, r3
 8005c4e:	480b      	ldr	r0, [pc, #44]	; (8005c7c <calibrateRTC+0xb4>)
 8005c50:	f00d f8f2 	bl	8012e38 <HAL_RTC_SetDate>
 8005c54:	4603      	mov	r3, r0
 8005c56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (status != HAL_OK) {
 8005c5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d001      	beq.n	8005c66 <calibrateRTC+0x9e>
		Error_Handler();
 8005c62:	f7fe f8b5 	bl	8003dd0 <Error_Handler>
	}
	RTC_SetTime(&hrtc, &time_struct, RTC_FORMAT_BIN);
 8005c66:	f107 030c 	add.w	r3, r7, #12
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4803      	ldr	r0, [pc, #12]	; (8005c7c <calibrateRTC+0xb4>)
 8005c70:	f000 f806 	bl	8005c80 <RTC_SetTime>
}
 8005c74:	bf00      	nop
 8005c76:	3730      	adds	r7, #48	; 0x30
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	24001e2c 	.word	0x24001e2c

08005c80 <RTC_SetTime>:


HAL_StatusTypeDef RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime,
		uint32_t Format) {
 8005c80:	b590      	push	{r4, r7, lr}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]
	uint32_t tmpreg;
	HAL_StatusTypeDef status;

	/* Process Locked */
	__HAL_LOCK(hrtc);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <RTC_SetTime+0x1a>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e051      	b.n	8005d3e <RTC_SetTime+0xbe>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	f883 2020 	strb.w	r2, [r3, #32]

	hrtc->State = HAL_RTC_STATE_BUSY;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2202      	movs	r2, #2
 8005ca6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

	/* Disable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	22ca      	movs	r2, #202	; 0xca
 8005cb0:	625a      	str	r2, [r3, #36]	; 0x24
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	2253      	movs	r2, #83	; 0x53
 8005cb8:	625a      	str	r2, [r3, #36]	; 0x24
	/* Enter Initialization mode */
	status = RTC_EnterInitMode(hrtc);
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f00d f9b6 	bl	801302c <RTC_EnterInitMode>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	75fb      	strb	r3, [r7, #23]
	if (status == HAL_OK) {
 8005cc4:	7dfb      	ldrb	r3, [r7, #23]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d129      	bne.n	8005d1e <RTC_SetTime+0x9e>

		sTime->TimeFormat = 0x00U;
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	70da      	strb	r2, [r3, #3]
		assert_param(IS_RTC_HOUR24(sTime->Hours));

		assert_param(IS_RTC_MINUTES(sTime->Minutes));
		assert_param(IS_RTC_SECONDS(sTime->Seconds));

		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f00d fa1b 	bl	8013110 <RTC_ByteToBcd2>
 8005cda:	4603      	mov	r3, r0
				<< RTC_TR_HU_Pos)
 8005cdc:	041c      	lsls	r4, r3, #16
				| ((uint32_t) RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos)
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	785b      	ldrb	r3, [r3, #1]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f00d fa14 	bl	8013110 <RTC_ByteToBcd2>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	021b      	lsls	r3, r3, #8
 8005cec:	431c      	orrs	r4, r3
				| ((uint32_t) RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)
 8005cee:	68bb      	ldr	r3, [r7, #8]
 8005cf0:	789b      	ldrb	r3, [r3, #2]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f00d fa0c 	bl	8013110 <RTC_ByteToBcd2>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	ea44 0203 	orr.w	r2, r4, r3
				| (((uint32_t) sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	78db      	ldrb	r3, [r3, #3]
 8005d02:	059b      	lsls	r3, r3, #22
		tmpreg = (uint32_t) (((uint32_t) RTC_ByteToBcd2(sTime->Hours)
 8005d04:	4313      	orrs	r3, r2
 8005d06:	613b      	str	r3, [r7, #16]

		/* Set the RTC_TR register */
		hrtc->Instance->TR = (uint32_t) (tmpreg & RTC_TR_RESERVED_MASK);
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	6939      	ldr	r1, [r7, #16]
 8005d0e:	4b0e      	ldr	r3, [pc, #56]	; (8005d48 <RTC_SetTime+0xc8>)
 8005d10:	400b      	ands	r3, r1
 8005d12:	6013      	str	r3, [r2, #0]

		/* Exit Initialization mode */
		status = RTC_ExitInitMode(hrtc);
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f00d f9bd 	bl	8013094 <RTC_ExitInitMode>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	75fb      	strb	r3, [r7, #23]
	}

	/* Enable the write protection for RTC registers */
	__HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	22ff      	movs	r2, #255	; 0xff
 8005d24:	625a      	str	r2, [r3, #36]	; 0x24

	if (status == HAL_OK) {
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d103      	bne.n	8005d34 <RTC_SetTime+0xb4>
		hrtc->State = HAL_RTC_STATE_READY;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	}

	/* Process Unlocked */
	__HAL_UNLOCK(hrtc);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 2020 	strb.w	r2, [r3, #32]
	return status;
 8005d3c:	7dfb      	ldrb	r3, [r7, #23]

}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	371c      	adds	r7, #28
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd90      	pop	{r4, r7, pc}
 8005d46:	bf00      	nop
 8005d48:	007f7f7f 	.word	0x007f7f7f

08005d4c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005d50:	4b30      	ldr	r3, [pc, #192]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d52:	4a31      	ldr	r2, [pc, #196]	; (8005e18 <MX_USART1_UART_Init+0xcc>)
 8005d54:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8005d56:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d58:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8005d5c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005d5e:	4b2d      	ldr	r3, [pc, #180]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005d64:	4b2b      	ldr	r3, [pc, #172]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005d6a:	4b2a      	ldr	r3, [pc, #168]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005d70:	4b28      	ldr	r3, [pc, #160]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d72:	220c      	movs	r2, #12
 8005d74:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d78:	2200      	movs	r2, #0
 8005d7a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d7c:	4b25      	ldr	r3, [pc, #148]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d7e:	2200      	movs	r2, #0
 8005d80:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d82:	4b24      	ldr	r3, [pc, #144]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d84:	2200      	movs	r2, #0
 8005d86:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005d88:	4b22      	ldr	r3, [pc, #136]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d8e:	4b21      	ldr	r3, [pc, #132]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005d94:	481f      	ldr	r0, [pc, #124]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005d96:	f00f fb9d 	bl	80154d4 <HAL_UART_Init>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d001      	beq.n	8005da4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005da0:	f7fe f816 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005da4:	2100      	movs	r1, #0
 8005da6:	481b      	ldr	r0, [pc, #108]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005da8:	f012 f8e3 	bl	8017f72 <HAL_UARTEx_SetTxFifoThreshold>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d001      	beq.n	8005db6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8005db2:	f7fe f80d 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005db6:	2100      	movs	r1, #0
 8005db8:	4816      	ldr	r0, [pc, #88]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005dba:	f012 f918 	bl	8017fee <HAL_UARTEx_SetRxFifoThreshold>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d001      	beq.n	8005dc8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8005dc4:	f7fe f804 	bl	8003dd0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005dc8:	4812      	ldr	r0, [pc, #72]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005dca:	f012 f899 	bl	8017f00 <HAL_UARTEx_DisableFifoMode>
 8005dce:	4603      	mov	r3, r0
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d001      	beq.n	8005dd8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8005dd4:	f7fd fffc 	bl	8003dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	/* Set the RXFIFO threshold */
	HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_4);
 8005dd8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8005ddc:	480d      	ldr	r0, [pc, #52]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005dde:	f012 f906 	bl	8017fee <HAL_UARTEx_SetRxFifoThreshold>

	/* Enable the FIFO mode */
	HAL_UARTEx_EnableFifoMode(&huart1);
 8005de2:	480c      	ldr	r0, [pc, #48]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005de4:	f012 f851 	bl	8017e8a <HAL_UARTEx_EnableFifoMode>

	/* Enable MCU wakeup by UART */
	HAL_UARTEx_EnableStopMode(&huart1);
 8005de8:	480a      	ldr	r0, [pc, #40]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005dea:	f012 f81b 	bl	8017e24 <HAL_UARTEx_EnableStopMode>

	/* Enable the UART RX FIFO threshold interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXFT);
 8005dee:	4b09      	ldr	r3, [pc, #36]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	689a      	ldr	r2, [r3, #8]
 8005df4:	4b07      	ldr	r3, [pc, #28]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005dfc:	609a      	str	r2, [r3, #8]

	/* Enable the UART wakeup from stop mode interrupt */
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	689a      	ldr	r2, [r3, #8]
 8005e04:	4b03      	ldr	r3, [pc, #12]	; (8005e14 <MX_USART1_UART_Init+0xc8>)
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005e0c:	609a      	str	r2, [r3, #8]

  /* USER CODE END USART1_Init 2 */

}
 8005e0e:	bf00      	nop
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	240021c8 	.word	0x240021c8
 8005e18:	40011000 	.word	0x40011000

08005e1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005e1c:	b580      	push	{r7, lr}
 8005e1e:	b0ba      	sub	sp, #232	; 0xe8
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e24:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005e28:	2200      	movs	r2, #0
 8005e2a:	601a      	str	r2, [r3, #0]
 8005e2c:	605a      	str	r2, [r3, #4]
 8005e2e:	609a      	str	r2, [r3, #8]
 8005e30:	60da      	str	r2, [r3, #12]
 8005e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005e34:	f107 0310 	add.w	r3, r7, #16
 8005e38:	22c0      	movs	r2, #192	; 0xc0
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	f015 fd0d 	bl	801b85c <memset>
  if(uartHandle->Instance==USART1)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a41      	ldr	r2, [pc, #260]	; (8005f4c <HAL_UART_MspInit+0x130>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d17b      	bne.n	8005f44 <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005e4c:	f04f 0201 	mov.w	r2, #1
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_HSI;
 8005e58:	2318      	movs	r3, #24
 8005e5a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005e5e:	f107 0310 	add.w	r3, r7, #16
 8005e62:	4618      	mov	r0, r3
 8005e64:	f00a f96e 	bl	8010144 <HAL_RCCEx_PeriphCLKConfig>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005e6e:	f7fd ffaf 	bl	8003dd0 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005e72:	4b37      	ldr	r3, [pc, #220]	; (8005f50 <HAL_UART_MspInit+0x134>)
 8005e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e78:	4a35      	ldr	r2, [pc, #212]	; (8005f50 <HAL_UART_MspInit+0x134>)
 8005e7a:	f043 0310 	orr.w	r3, r3, #16
 8005e7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005e82:	4b33      	ldr	r3, [pc, #204]	; (8005f50 <HAL_UART_MspInit+0x134>)
 8005e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e88:	f003 0310 	and.w	r3, r3, #16
 8005e8c:	60fb      	str	r3, [r7, #12]
 8005e8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e90:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <HAL_UART_MspInit+0x134>)
 8005e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005e96:	4a2e      	ldr	r2, [pc, #184]	; (8005f50 <HAL_UART_MspInit+0x134>)
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005ea0:	4b2b      	ldr	r3, [pc, #172]	; (8005f50 <HAL_UART_MspInit+0x134>)
 8005ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005ea6:	f003 0301 	and.w	r3, r3, #1
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005eae:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8005eb2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005ec8:	2307      	movs	r3, #7
 8005eca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ece:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8005ed2:	4619      	mov	r1, r3
 8005ed4:	481f      	ldr	r0, [pc, #124]	; (8005f54 <HAL_UART_MspInit+0x138>)
 8005ed6:	f006 f9e5 	bl	800c2a4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8005eda:	4b1f      	ldr	r3, [pc, #124]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005edc:	4a1f      	ldr	r2, [pc, #124]	; (8005f5c <HAL_UART_MspInit+0x140>)
 8005ede:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8005ee0:	4b1d      	ldr	r3, [pc, #116]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005ee2:	222a      	movs	r2, #42	; 0x2a
 8005ee4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005ee6:	4b1c      	ldr	r3, [pc, #112]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005ee8:	2240      	movs	r2, #64	; 0x40
 8005eea:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005eec:	4b1a      	ldr	r3, [pc, #104]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005eee:	2200      	movs	r2, #0
 8005ef0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005ef2:	4b19      	ldr	r3, [pc, #100]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005ef4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ef8:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005efa:	4b17      	ldr	r3, [pc, #92]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005f00:	4b15      	ldr	r3, [pc, #84]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8005f06:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005f0c:	4b12      	ldr	r3, [pc, #72]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005f12:	4b11      	ldr	r3, [pc, #68]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8005f18:	480f      	ldr	r0, [pc, #60]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005f1a:	f002 fe9d 	bl	8008c58 <HAL_DMA_Init>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005f24:	f7fd ff54 	bl	8003dd0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a0b      	ldr	r2, [pc, #44]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005f2c:	67da      	str	r2, [r3, #124]	; 0x7c
 8005f2e:	4a0a      	ldr	r2, [pc, #40]	; (8005f58 <HAL_UART_MspInit+0x13c>)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005f34:	2200      	movs	r2, #0
 8005f36:	2105      	movs	r1, #5
 8005f38:	2025      	movs	r0, #37	; 0x25
 8005f3a:	f002 fa5f 	bl	80083fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005f3e:	2025      	movs	r0, #37	; 0x25
 8005f40:	f002 fa76 	bl	8008430 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8005f44:	bf00      	nop
 8005f46:	37e8      	adds	r7, #232	; 0xe8
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40011000 	.word	0x40011000
 8005f50:	58024400 	.word	0x58024400
 8005f54:	58020000 	.word	0x58020000
 8005f58:	2400225c 	.word	0x2400225c
 8005f5c:	40020040 	.word	0x40020040

08005f60 <voltage_monitor_init>:

#include "voltage_monitor.h"

VOLTAGE_RAIL rail_monitor[NUM_VOLTAGE_RAILS];

uint8_t voltage_monitor_init() {
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	71fb      	strb	r3, [r7, #7]

	rail_monitor[RAIL_vsense].name = RAIL_vsense;
 8005f6a:	4bc0      	ldr	r3, [pc, #768]	; (800626c <voltage_monitor_init+0x30c>)
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	701a      	strb	r2, [r3, #0]
	rail_monitor[RAIL_vsense].error_count = 0;
 8005f70:	4bbe      	ldr	r3, [pc, #760]	; (800626c <voltage_monitor_init+0x30c>)
 8005f72:	2200      	movs	r2, #0
 8005f74:	705a      	strb	r2, [r3, #1]
	rail_monitor[RAIL_vsense].is_enabled = 1;
 8005f76:	4bbd      	ldr	r3, [pc, #756]	; (800626c <voltage_monitor_init+0x30c>)
 8005f78:	2201      	movs	r2, #1
 8005f7a:	709a      	strb	r2, [r3, #2]
	rail_monitor[RAIL_vsense].data = 0;
 8005f7c:	4bbb      	ldr	r3, [pc, #748]	; (800626c <voltage_monitor_init+0x30c>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	809a      	strh	r2, [r3, #4]
	rail_monitor[RAIL_vsense].max_voltage = 906;		// 85c
 8005f82:	4bba      	ldr	r3, [pc, #744]	; (800626c <voltage_monitor_init+0x30c>)
 8005f84:	f240 328a 	movw	r2, #906	; 0x38a
 8005f88:	80da      	strh	r2, [r3, #6]
	rail_monitor[RAIL_vsense].min_voltage = 596;		// -40c
 8005f8a:	4bb8      	ldr	r3, [pc, #736]	; (800626c <voltage_monitor_init+0x30c>)
 8005f8c:	f44f 7215 	mov.w	r2, #596	; 0x254
 8005f90:	811a      	strh	r2, [r3, #8]
	rail_monitor[RAIL_vsense].OOB_1 = 0;
 8005f92:	4bb6      	ldr	r3, [pc, #728]	; (800626c <voltage_monitor_init+0x30c>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	815a      	strh	r2, [r3, #10]
	rail_monitor[RAIL_vsense].OOB_2 = 0;
 8005f98:	4bb4      	ldr	r3, [pc, #720]	; (800626c <voltage_monitor_init+0x30c>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	819a      	strh	r2, [r3, #12]
	rail_monitor[RAIL_vsense].OOB_3 = 0;
 8005f9e:	4bb3      	ldr	r3, [pc, #716]	; (800626c <voltage_monitor_init+0x30c>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	81da      	strh	r2, [r3, #14]


	rail_monitor[RAIL_vrefint].name = RAIL_vrefint;
 8005fa4:	4bb1      	ldr	r3, [pc, #708]	; (800626c <voltage_monitor_init+0x30c>)
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	741a      	strb	r2, [r3, #16]
	rail_monitor[RAIL_vrefint].error_count = 0;
 8005faa:	4bb0      	ldr	r3, [pc, #704]	; (800626c <voltage_monitor_init+0x30c>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	745a      	strb	r2, [r3, #17]
	rail_monitor[RAIL_vrefint].is_enabled = 1;
 8005fb0:	4bae      	ldr	r3, [pc, #696]	; (800626c <voltage_monitor_init+0x30c>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	749a      	strb	r2, [r3, #18]
	rail_monitor[RAIL_vrefint].data = 0;
 8005fb6:	4bad      	ldr	r3, [pc, #692]	; (800626c <voltage_monitor_init+0x30c>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	829a      	strh	r2, [r3, #20]
	rail_monitor[RAIL_vrefint].max_voltage = 1557;		// 1.255v
 8005fbc:	4bab      	ldr	r3, [pc, #684]	; (800626c <voltage_monitor_init+0x30c>)
 8005fbe:	f240 6215 	movw	r2, #1557	; 0x615
 8005fc2:	82da      	strh	r2, [r3, #22]
	rail_monitor[RAIL_vrefint].min_voltage = 1464;		// 1.180v
 8005fc4:	4ba9      	ldr	r3, [pc, #676]	; (800626c <voltage_monitor_init+0x30c>)
 8005fc6:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8005fca:	831a      	strh	r2, [r3, #24]
	rail_monitor[RAIL_vrefint].OOB_1 = 0;
 8005fcc:	4ba7      	ldr	r3, [pc, #668]	; (800626c <voltage_monitor_init+0x30c>)
 8005fce:	2200      	movs	r2, #0
 8005fd0:	835a      	strh	r2, [r3, #26]
	rail_monitor[RAIL_vrefint].OOB_2 = 0;
 8005fd2:	4ba6      	ldr	r3, [pc, #664]	; (800626c <voltage_monitor_init+0x30c>)
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	839a      	strh	r2, [r3, #28]
	rail_monitor[RAIL_vrefint].OOB_3 = 0;
 8005fd8:	4ba4      	ldr	r3, [pc, #656]	; (800626c <voltage_monitor_init+0x30c>)
 8005fda:	2200      	movs	r2, #0
 8005fdc:	83da      	strh	r2, [r3, #30]

	rail_monitor[RAIL_TEMP1].name = RAIL_TEMP1;
 8005fde:	4ba3      	ldr	r3, [pc, #652]	; (800626c <voltage_monitor_init+0x30c>)
 8005fe0:	2202      	movs	r2, #2
 8005fe2:	f883 2020 	strb.w	r2, [r3, #32]
	rail_monitor[RAIL_TEMP1].error_count = 0;
 8005fe6:	4ba1      	ldr	r3, [pc, #644]	; (800626c <voltage_monitor_init+0x30c>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	rail_monitor[RAIL_TEMP1].is_enabled = 1;
 8005fee:	4b9f      	ldr	r3, [pc, #636]	; (800626c <voltage_monitor_init+0x30c>)
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	rail_monitor[RAIL_TEMP1].data = 0;
 8005ff6:	4b9d      	ldr	r3, [pc, #628]	; (800626c <voltage_monitor_init+0x30c>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	849a      	strh	r2, [r3, #36]	; 0x24
	rail_monitor[RAIL_TEMP1].max_voltage = 800;			// 50c
 8005ffc:	4b9b      	ldr	r3, [pc, #620]	; (800626c <voltage_monitor_init+0x30c>)
 8005ffe:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006002:	84da      	strh	r2, [r3, #38]	; 0x26
	rail_monitor[RAIL_TEMP1].min_voltage = 7872;		// -20c
 8006004:	4b99      	ldr	r3, [pc, #612]	; (800626c <voltage_monitor_init+0x30c>)
 8006006:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 800600a:	851a      	strh	r2, [r3, #40]	; 0x28
	rail_monitor[RAIL_TEMP1].OOB_1 = 0;
 800600c:	4b97      	ldr	r3, [pc, #604]	; (800626c <voltage_monitor_init+0x30c>)
 800600e:	2200      	movs	r2, #0
 8006010:	855a      	strh	r2, [r3, #42]	; 0x2a
	rail_monitor[RAIL_TEMP1].OOB_2 = 0;
 8006012:	4b96      	ldr	r3, [pc, #600]	; (800626c <voltage_monitor_init+0x30c>)
 8006014:	2200      	movs	r2, #0
 8006016:	859a      	strh	r2, [r3, #44]	; 0x2c
	rail_monitor[RAIL_TEMP1].OOB_3 = 0;
 8006018:	4b94      	ldr	r3, [pc, #592]	; (800626c <voltage_monitor_init+0x30c>)
 800601a:	2200      	movs	r2, #0
 800601c:	85da      	strh	r2, [r3, #46]	; 0x2e

	rail_monitor[RAIL_TEMP2].name = RAIL_TEMP2;
 800601e:	4b93      	ldr	r3, [pc, #588]	; (800626c <voltage_monitor_init+0x30c>)
 8006020:	2203      	movs	r2, #3
 8006022:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	rail_monitor[RAIL_TEMP2].error_count = 0;
 8006026:	4b91      	ldr	r3, [pc, #580]	; (800626c <voltage_monitor_init+0x30c>)
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
	rail_monitor[RAIL_TEMP2].is_enabled = 1;
 800602e:	4b8f      	ldr	r3, [pc, #572]	; (800626c <voltage_monitor_init+0x30c>)
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	rail_monitor[RAIL_TEMP2].data = 0;
 8006036:	4b8d      	ldr	r3, [pc, #564]	; (800626c <voltage_monitor_init+0x30c>)
 8006038:	2200      	movs	r2, #0
 800603a:	869a      	strh	r2, [r3, #52]	; 0x34
	rail_monitor[RAIL_TEMP2].max_voltage = 800;			// 50c
 800603c:	4b8b      	ldr	r3, [pc, #556]	; (800626c <voltage_monitor_init+0x30c>)
 800603e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006042:	86da      	strh	r2, [r3, #54]	; 0x36
	rail_monitor[RAIL_TEMP2].min_voltage = 7872;		// -20c
 8006044:	4b89      	ldr	r3, [pc, #548]	; (800626c <voltage_monitor_init+0x30c>)
 8006046:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 800604a:	871a      	strh	r2, [r3, #56]	; 0x38
	rail_monitor[RAIL_TEMP2].OOB_1 = 0;
 800604c:	4b87      	ldr	r3, [pc, #540]	; (800626c <voltage_monitor_init+0x30c>)
 800604e:	2200      	movs	r2, #0
 8006050:	875a      	strh	r2, [r3, #58]	; 0x3a
	rail_monitor[RAIL_TEMP2].OOB_2 = 0;
 8006052:	4b86      	ldr	r3, [pc, #536]	; (800626c <voltage_monitor_init+0x30c>)
 8006054:	2200      	movs	r2, #0
 8006056:	879a      	strh	r2, [r3, #60]	; 0x3c
	rail_monitor[RAIL_TEMP2].OOB_3 = 0;
 8006058:	4b84      	ldr	r3, [pc, #528]	; (800626c <voltage_monitor_init+0x30c>)
 800605a:	2200      	movs	r2, #0
 800605c:	87da      	strh	r2, [r3, #62]	; 0x3e

	rail_monitor[RAIL_TEMP3].name = RAIL_TEMP3;
 800605e:	4b83      	ldr	r3, [pc, #524]	; (800626c <voltage_monitor_init+0x30c>)
 8006060:	2204      	movs	r2, #4
 8006062:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	rail_monitor[RAIL_TEMP3].error_count = 0;
 8006066:	4b81      	ldr	r3, [pc, #516]	; (800626c <voltage_monitor_init+0x30c>)
 8006068:	2200      	movs	r2, #0
 800606a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	rail_monitor[RAIL_TEMP3].is_enabled = 1;
 800606e:	4b7f      	ldr	r3, [pc, #508]	; (800626c <voltage_monitor_init+0x30c>)
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	rail_monitor[RAIL_TEMP3].data = 0;
 8006076:	4b7d      	ldr	r3, [pc, #500]	; (800626c <voltage_monitor_init+0x30c>)
 8006078:	2200      	movs	r2, #0
 800607a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	rail_monitor[RAIL_TEMP3].max_voltage = 800;			// 50c
 800607e:	4b7b      	ldr	r3, [pc, #492]	; (800626c <voltage_monitor_init+0x30c>)
 8006080:	f44f 7248 	mov.w	r2, #800	; 0x320
 8006084:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	rail_monitor[RAIL_TEMP3].min_voltage = 7872;		// -20c
 8006088:	4b78      	ldr	r3, [pc, #480]	; (800626c <voltage_monitor_init+0x30c>)
 800608a:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 800608e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
	rail_monitor[RAIL_TEMP3].OOB_1 = 0;
 8006092:	4b76      	ldr	r3, [pc, #472]	; (800626c <voltage_monitor_init+0x30c>)
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	rail_monitor[RAIL_TEMP3].OOB_2 = 0;
 800609a:	4b74      	ldr	r3, [pc, #464]	; (800626c <voltage_monitor_init+0x30c>)
 800609c:	2200      	movs	r2, #0
 800609e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
	rail_monitor[RAIL_TEMP3].OOB_3 = 0;
 80060a2:	4b72      	ldr	r3, [pc, #456]	; (800626c <voltage_monitor_init+0x30c>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

	rail_monitor[RAIL_TEMP4].name = RAIL_TEMP4;
 80060aa:	4b70      	ldr	r3, [pc, #448]	; (800626c <voltage_monitor_init+0x30c>)
 80060ac:	2205      	movs	r2, #5
 80060ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	rail_monitor[RAIL_TEMP4].error_count = 0;
 80060b2:	4b6e      	ldr	r3, [pc, #440]	; (800626c <voltage_monitor_init+0x30c>)
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	rail_monitor[RAIL_TEMP4].is_enabled = 1;
 80060ba:	4b6c      	ldr	r3, [pc, #432]	; (800626c <voltage_monitor_init+0x30c>)
 80060bc:	2201      	movs	r2, #1
 80060be:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
	rail_monitor[RAIL_TEMP4].data = 0;
 80060c2:	4b6a      	ldr	r3, [pc, #424]	; (800626c <voltage_monitor_init+0x30c>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
	rail_monitor[RAIL_TEMP4].max_voltage = 800;			// 50c
 80060ca:	4b68      	ldr	r3, [pc, #416]	; (800626c <voltage_monitor_init+0x30c>)
 80060cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80060d0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
	rail_monitor[RAIL_TEMP4].min_voltage = 7872;		// -20c
 80060d4:	4b65      	ldr	r3, [pc, #404]	; (800626c <voltage_monitor_init+0x30c>)
 80060d6:	f44f 52f6 	mov.w	r2, #7872	; 0x1ec0
 80060da:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
	rail_monitor[RAIL_TEMP4].OOB_1 = 0;
 80060de:	4b63      	ldr	r3, [pc, #396]	; (800626c <voltage_monitor_init+0x30c>)
 80060e0:	2200      	movs	r2, #0
 80060e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
	rail_monitor[RAIL_TEMP4].OOB_2 = 0;
 80060e6:	4b61      	ldr	r3, [pc, #388]	; (800626c <voltage_monitor_init+0x30c>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
	rail_monitor[RAIL_TEMP4].OOB_3 = 0;
 80060ee:	4b5f      	ldr	r3, [pc, #380]	; (800626c <voltage_monitor_init+0x30c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

	rail_monitor[RAIL_busvmon].name = RAIL_busvmon;
 80060f6:	4b5d      	ldr	r3, [pc, #372]	; (800626c <voltage_monitor_init+0x30c>)
 80060f8:	2206      	movs	r2, #6
 80060fa:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
	rail_monitor[RAIL_busvmon].error_count = 0;
 80060fe:	4b5b      	ldr	r3, [pc, #364]	; (800626c <voltage_monitor_init+0x30c>)
 8006100:	2200      	movs	r2, #0
 8006102:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	rail_monitor[RAIL_busvmon].is_enabled = 0;
 8006106:	4b59      	ldr	r3, [pc, #356]	; (800626c <voltage_monitor_init+0x30c>)
 8006108:	2200      	movs	r2, #0
 800610a:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
	rail_monitor[RAIL_busvmon].data = 0;
 800610e:	4b57      	ldr	r3, [pc, #348]	; (800626c <voltage_monitor_init+0x30c>)
 8006110:	2200      	movs	r2, #0
 8006112:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	rail_monitor[RAIL_busvmon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8006116:	4b55      	ldr	r3, [pc, #340]	; (800626c <voltage_monitor_init+0x30c>)
 8006118:	f242 7210 	movw	r2, #10000	; 0x2710
 800611c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	rail_monitor[RAIL_busvmon].min_voltage = 0;
 8006120:	4b52      	ldr	r3, [pc, #328]	; (800626c <voltage_monitor_init+0x30c>)
 8006122:	2200      	movs	r2, #0
 8006124:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
	rail_monitor[RAIL_busvmon].OOB_1 = 0;
 8006128:	4b50      	ldr	r3, [pc, #320]	; (800626c <voltage_monitor_init+0x30c>)
 800612a:	2200      	movs	r2, #0
 800612c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
	rail_monitor[RAIL_busvmon].OOB_2 = 0;
 8006130:	4b4e      	ldr	r3, [pc, #312]	; (800626c <voltage_monitor_init+0x30c>)
 8006132:	2200      	movs	r2, #0
 8006134:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
	rail_monitor[RAIL_busvmon].OOB_3 = 0;
 8006138:	4b4c      	ldr	r3, [pc, #304]	; (800626c <voltage_monitor_init+0x30c>)
 800613a:	2200      	movs	r2, #0
 800613c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

	rail_monitor[RAIL_busimon].name = RAIL_busimon;
 8006140:	4b4a      	ldr	r3, [pc, #296]	; (800626c <voltage_monitor_init+0x30c>)
 8006142:	2207      	movs	r2, #7
 8006144:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
	rail_monitor[RAIL_busimon].error_count = 0;
 8006148:	4b48      	ldr	r3, [pc, #288]	; (800626c <voltage_monitor_init+0x30c>)
 800614a:	2200      	movs	r2, #0
 800614c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
	rail_monitor[RAIL_busimon].is_enabled = 0;
 8006150:	4b46      	ldr	r3, [pc, #280]	; (800626c <voltage_monitor_init+0x30c>)
 8006152:	2200      	movs	r2, #0
 8006154:	f883 2072 	strb.w	r2, [r3, #114]	; 0x72
	rail_monitor[RAIL_busimon].data = 0;
 8006158:	4b44      	ldr	r3, [pc, #272]	; (800626c <voltage_monitor_init+0x30c>)
 800615a:	2200      	movs	r2, #0
 800615c:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
	rail_monitor[RAIL_busimon].max_voltage = 10000; // TODO: Get actual range from Sanj
 8006160:	4b42      	ldr	r3, [pc, #264]	; (800626c <voltage_monitor_init+0x30c>)
 8006162:	f242 7210 	movw	r2, #10000	; 0x2710
 8006166:	f8a3 2076 	strh.w	r2, [r3, #118]	; 0x76
	rail_monitor[RAIL_busimon].min_voltage = 0;
 800616a:	4b40      	ldr	r3, [pc, #256]	; (800626c <voltage_monitor_init+0x30c>)
 800616c:	2200      	movs	r2, #0
 800616e:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
	rail_monitor[RAIL_busimon].OOB_1 = 0;
 8006172:	4b3e      	ldr	r3, [pc, #248]	; (800626c <voltage_monitor_init+0x30c>)
 8006174:	2200      	movs	r2, #0
 8006176:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a
	rail_monitor[RAIL_busimon].OOB_2 = 0;
 800617a:	4b3c      	ldr	r3, [pc, #240]	; (800626c <voltage_monitor_init+0x30c>)
 800617c:	2200      	movs	r2, #0
 800617e:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
	rail_monitor[RAIL_busimon].OOB_3 = 0;
 8006182:	4b3a      	ldr	r3, [pc, #232]	; (800626c <voltage_monitor_init+0x30c>)
 8006184:	2200      	movs	r2, #0
 8006186:	f8a3 207e 	strh.w	r2, [r3, #126]	; 0x7e

	rail_monitor[RAIL_2v5].name = RAIL_2v5;
 800618a:	4b38      	ldr	r3, [pc, #224]	; (800626c <voltage_monitor_init+0x30c>)
 800618c:	2208      	movs	r2, #8
 800618e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	rail_monitor[RAIL_2v5].error_count = 0;
 8006192:	4b36      	ldr	r3, [pc, #216]	; (800626c <voltage_monitor_init+0x30c>)
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
	rail_monitor[RAIL_2v5].is_enabled = 0;
 800619a:	4b34      	ldr	r3, [pc, #208]	; (800626c <voltage_monitor_init+0x30c>)
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2082 	strb.w	r2, [r3, #130]	; 0x82
	rail_monitor[RAIL_2v5].data = 0;
 80061a2:	4b32      	ldr	r3, [pc, #200]	; (800626c <voltage_monitor_init+0x30c>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
	rail_monitor[RAIL_2v5].max_voltage = 3414;			// 2.75v
 80061aa:	4b30      	ldr	r3, [pc, #192]	; (800626c <voltage_monitor_init+0x30c>)
 80061ac:	f640 5256 	movw	r2, #3414	; 0xd56
 80061b0:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
	rail_monitor[RAIL_2v5].min_voltage = 2792;			// 2.25v
 80061b4:	4b2d      	ldr	r3, [pc, #180]	; (800626c <voltage_monitor_init+0x30c>)
 80061b6:	f640 22e8 	movw	r2, #2792	; 0xae8
 80061ba:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
	rail_monitor[RAIL_2v5].OOB_1 = 0;
 80061be:	4b2b      	ldr	r3, [pc, #172]	; (800626c <voltage_monitor_init+0x30c>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
	rail_monitor[RAIL_2v5].OOB_2 = 0;
 80061c6:	4b29      	ldr	r3, [pc, #164]	; (800626c <voltage_monitor_init+0x30c>)
 80061c8:	2200      	movs	r2, #0
 80061ca:	f8a3 208c 	strh.w	r2, [r3, #140]	; 0x8c
	rail_monitor[RAIL_2v5].OOB_3 = 0;
 80061ce:	4b27      	ldr	r3, [pc, #156]	; (800626c <voltage_monitor_init+0x30c>)
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e


	rail_monitor[RAIL_3v3].name = RAIL_3v3;
 80061d6:	4b25      	ldr	r3, [pc, #148]	; (800626c <voltage_monitor_init+0x30c>)
 80061d8:	2209      	movs	r2, #9
 80061da:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
	rail_monitor[RAIL_3v3].error_count = 0;
 80061de:	4b23      	ldr	r3, [pc, #140]	; (800626c <voltage_monitor_init+0x30c>)
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
	rail_monitor[RAIL_3v3].is_enabled = 0;
 80061e6:	4b21      	ldr	r3, [pc, #132]	; (800626c <voltage_monitor_init+0x30c>)
 80061e8:	2200      	movs	r2, #0
 80061ea:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	rail_monitor[RAIL_3v3].data = 0;
 80061ee:	4b1f      	ldr	r3, [pc, #124]	; (800626c <voltage_monitor_init+0x30c>)
 80061f0:	2200      	movs	r2, #0
 80061f2:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
	rail_monitor[RAIL_3v3].max_voltage = 1596;			// 1.29
 80061f6:	4b1d      	ldr	r3, [pc, #116]	; (800626c <voltage_monitor_init+0x30c>)
 80061f8:	f240 623c 	movw	r2, #1596	; 0x63c
 80061fc:	f8a3 2096 	strh.w	r2, [r3, #150]	; 0x96
	rail_monitor[RAIL_3v3].min_voltage = 1306;			// 1.05
 8006200:	4b1a      	ldr	r3, [pc, #104]	; (800626c <voltage_monitor_init+0x30c>)
 8006202:	f240 521a 	movw	r2, #1306	; 0x51a
 8006206:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
	rail_monitor[RAIL_3v3].OOB_1 = 0;
 800620a:	4b18      	ldr	r3, [pc, #96]	; (800626c <voltage_monitor_init+0x30c>)
 800620c:	2200      	movs	r2, #0
 800620e:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
	rail_monitor[RAIL_3v3].OOB_2 = 0;
 8006212:	4b16      	ldr	r3, [pc, #88]	; (800626c <voltage_monitor_init+0x30c>)
 8006214:	2200      	movs	r2, #0
 8006216:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
	rail_monitor[RAIL_3v3].OOB_3 = 0;
 800621a:	4b14      	ldr	r3, [pc, #80]	; (800626c <voltage_monitor_init+0x30c>)
 800621c:	2200      	movs	r2, #0
 800621e:	f8a3 209e 	strh.w	r2, [r3, #158]	; 0x9e


	rail_monitor[RAIL_5v].name = RAIL_5v;
 8006222:	4b12      	ldr	r3, [pc, #72]	; (800626c <voltage_monitor_init+0x30c>)
 8006224:	220a      	movs	r2, #10
 8006226:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
	rail_monitor[RAIL_5v].error_count = 0;
 800622a:	4b10      	ldr	r3, [pc, #64]	; (800626c <voltage_monitor_init+0x30c>)
 800622c:	2200      	movs	r2, #0
 800622e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1
	rail_monitor[RAIL_5v].is_enabled = 0;
 8006232:	4b0e      	ldr	r3, [pc, #56]	; (800626c <voltage_monitor_init+0x30c>)
 8006234:	2200      	movs	r2, #0
 8006236:	f883 20a2 	strb.w	r2, [r3, #162]	; 0xa2
	rail_monitor[RAIL_5v].data = 0;
 800623a:	4b0c      	ldr	r3, [pc, #48]	; (800626c <voltage_monitor_init+0x30c>)
 800623c:	2200      	movs	r2, #0
 800623e:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
	rail_monitor[RAIL_5v].max_voltage = 4095;			// 3.30v
 8006242:	4b0a      	ldr	r3, [pc, #40]	; (800626c <voltage_monitor_init+0x30c>)
 8006244:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006248:	f8a3 20a6 	strh.w	r2, [r3, #166]	; 0xa6
	rail_monitor[RAIL_5v].min_voltage = 3350;			// 2.70v
 800624c:	4b07      	ldr	r3, [pc, #28]	; (800626c <voltage_monitor_init+0x30c>)
 800624e:	f640 5216 	movw	r2, #3350	; 0xd16
 8006252:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
	rail_monitor[RAIL_5v].OOB_1 = 0;
 8006256:	4b05      	ldr	r3, [pc, #20]	; (800626c <voltage_monitor_init+0x30c>)
 8006258:	2200      	movs	r2, #0
 800625a:	f8a3 20aa 	strh.w	r2, [r3, #170]	; 0xaa
	rail_monitor[RAIL_5v].OOB_2 = 0;
 800625e:	4b03      	ldr	r3, [pc, #12]	; (800626c <voltage_monitor_init+0x30c>)
 8006260:	2200      	movs	r2, #0
 8006262:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
	rail_monitor[RAIL_5v].OOB_3 = 0;
 8006266:	4b01      	ldr	r3, [pc, #4]	; (800626c <voltage_monitor_init+0x30c>)
 8006268:	2200      	movs	r2, #0
 800626a:	e001      	b.n	8006270 <voltage_monitor_init+0x310>
 800626c:	240022d4 	.word	0x240022d4
 8006270:	f8a3 20ae 	strh.w	r2, [r3, #174]	; 0xae

	rail_monitor[RAIL_n3v3].name = RAIL_n3v3;
 8006274:	4b88      	ldr	r3, [pc, #544]	; (8006498 <voltage_monitor_init+0x538>)
 8006276:	220b      	movs	r2, #11
 8006278:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	rail_monitor[RAIL_n3v3].error_count = 0;
 800627c:	4b86      	ldr	r3, [pc, #536]	; (8006498 <voltage_monitor_init+0x538>)
 800627e:	2200      	movs	r2, #0
 8006280:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	rail_monitor[RAIL_n3v3].is_enabled = 0;
 8006284:	4b84      	ldr	r3, [pc, #528]	; (8006498 <voltage_monitor_init+0x538>)
 8006286:	2200      	movs	r2, #0
 8006288:	f883 20b2 	strb.w	r2, [r3, #178]	; 0xb2
	rail_monitor[RAIL_n3v3].data = 0;
 800628c:	4b82      	ldr	r3, [pc, #520]	; (8006498 <voltage_monitor_init+0x538>)
 800628e:	2200      	movs	r2, #0
 8006290:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
	rail_monitor[RAIL_n3v3].max_voltage = 4286;			// 3.45v
 8006294:	4b80      	ldr	r3, [pc, #512]	; (8006498 <voltage_monitor_init+0x538>)
 8006296:	f241 02be 	movw	r2, #4286	; 0x10be
 800629a:	f8a3 20b6 	strh.w	r2, [r3, #182]	; 0xb6
	rail_monitor[RAIL_n3v3].min_voltage = 3507;			// 2.83v
 800629e:	4b7e      	ldr	r3, [pc, #504]	; (8006498 <voltage_monitor_init+0x538>)
 80062a0:	f640 52b3 	movw	r2, #3507	; 0xdb3
 80062a4:	f8a3 20b8 	strh.w	r2, [r3, #184]	; 0xb8
	rail_monitor[RAIL_n3v3].OOB_1 = 0;
 80062a8:	4b7b      	ldr	r3, [pc, #492]	; (8006498 <voltage_monitor_init+0x538>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	f8a3 20ba 	strh.w	r2, [r3, #186]	; 0xba
	rail_monitor[RAIL_n3v3].OOB_2 = 0;
 80062b0:	4b79      	ldr	r3, [pc, #484]	; (8006498 <voltage_monitor_init+0x538>)
 80062b2:	2200      	movs	r2, #0
 80062b4:	f8a3 20bc 	strh.w	r2, [r3, #188]	; 0xbc
	rail_monitor[RAIL_n3v3].OOB_3 = 0;
 80062b8:	4b77      	ldr	r3, [pc, #476]	; (8006498 <voltage_monitor_init+0x538>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	f8a3 20be 	strh.w	r2, [r3, #190]	; 0xbe

	rail_monitor[RAIL_n5v].name = RAIL_n5v;
 80062c0:	4b75      	ldr	r3, [pc, #468]	; (8006498 <voltage_monitor_init+0x538>)
 80062c2:	220c      	movs	r2, #12
 80062c4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
	rail_monitor[RAIL_n5v].error_count = 0;
 80062c8:	4b73      	ldr	r3, [pc, #460]	; (8006498 <voltage_monitor_init+0x538>)
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
	rail_monitor[RAIL_n5v].is_enabled = 0;
 80062d0:	4b71      	ldr	r3, [pc, #452]	; (8006498 <voltage_monitor_init+0x538>)
 80062d2:	2200      	movs	r2, #0
 80062d4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	rail_monitor[RAIL_n5v].data = 0;
 80062d8:	4b6f      	ldr	r3, [pc, #444]	; (8006498 <voltage_monitor_init+0x538>)
 80062da:	2200      	movs	r2, #0
 80062dc:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
//	rail_monitor[RAIL_n5v].max_voltage = 4150;			// 3.34v
//	rail_monitor[RAIL_n5v].min_voltage = 3395;			// 2.74v
	rail_monitor[RAIL_n5v].max_voltage = 10000;			// TODO: Erroring out at 0v, wait for Sanj
 80062e0:	4b6d      	ldr	r3, [pc, #436]	; (8006498 <voltage_monitor_init+0x538>)
 80062e2:	f242 7210 	movw	r2, #10000	; 0x2710
 80062e6:	f8a3 20c6 	strh.w	r2, [r3, #198]	; 0xc6
	rail_monitor[RAIL_n5v].min_voltage = 0;
 80062ea:	4b6b      	ldr	r3, [pc, #428]	; (8006498 <voltage_monitor_init+0x538>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	f8a3 20c8 	strh.w	r2, [r3, #200]	; 0xc8
	rail_monitor[RAIL_n5v].OOB_1 = 0;
 80062f2:	4b69      	ldr	r3, [pc, #420]	; (8006498 <voltage_monitor_init+0x538>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
	rail_monitor[RAIL_n5v].OOB_2 = 0;
 80062fa:	4b67      	ldr	r3, [pc, #412]	; (8006498 <voltage_monitor_init+0x538>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
	rail_monitor[RAIL_n5v].OOB_3 = 0;
 8006302:	4b65      	ldr	r3, [pc, #404]	; (8006498 <voltage_monitor_init+0x538>)
 8006304:	2200      	movs	r2, #0
 8006306:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce

	rail_monitor[RAIL_15v].name = RAIL_15v;
 800630a:	4b63      	ldr	r3, [pc, #396]	; (8006498 <voltage_monitor_init+0x538>)
 800630c:	220d      	movs	r2, #13
 800630e:	f883 20d0 	strb.w	r2, [r3, #208]	; 0xd0
	rail_monitor[RAIL_15v].error_count = 0;
 8006312:	4b61      	ldr	r3, [pc, #388]	; (8006498 <voltage_monitor_init+0x538>)
 8006314:	2200      	movs	r2, #0
 8006316:	f883 20d1 	strb.w	r2, [r3, #209]	; 0xd1
	rail_monitor[RAIL_15v].is_enabled = 0;
 800631a:	4b5f      	ldr	r3, [pc, #380]	; (8006498 <voltage_monitor_init+0x538>)
 800631c:	2200      	movs	r2, #0
 800631e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	rail_monitor[RAIL_15v].data = 0;
 8006322:	4b5d      	ldr	r3, [pc, #372]	; (8006498 <voltage_monitor_init+0x538>)
 8006324:	2200      	movs	r2, #0
 8006326:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
	rail_monitor[RAIL_15v].max_voltage = 4095;			// 3.30v
 800632a:	4b5b      	ldr	r3, [pc, #364]	; (8006498 <voltage_monitor_init+0x538>)
 800632c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8006330:	f8a3 20d6 	strh.w	r2, [r3, #214]	; 0xd6
	rail_monitor[RAIL_15v].min_voltage = 3350;			// 2.70v
 8006334:	4b58      	ldr	r3, [pc, #352]	; (8006498 <voltage_monitor_init+0x538>)
 8006336:	f640 5216 	movw	r2, #3350	; 0xd16
 800633a:	f8a3 20d8 	strh.w	r2, [r3, #216]	; 0xd8
	rail_monitor[RAIL_15v].OOB_1 = 0;
 800633e:	4b56      	ldr	r3, [pc, #344]	; (8006498 <voltage_monitor_init+0x538>)
 8006340:	2200      	movs	r2, #0
 8006342:	f8a3 20da 	strh.w	r2, [r3, #218]	; 0xda
	rail_monitor[RAIL_15v].OOB_2 = 0;
 8006346:	4b54      	ldr	r3, [pc, #336]	; (8006498 <voltage_monitor_init+0x538>)
 8006348:	2200      	movs	r2, #0
 800634a:	f8a3 20dc 	strh.w	r2, [r3, #220]	; 0xdc
	rail_monitor[RAIL_15v].OOB_3 = 0;
 800634e:	4b52      	ldr	r3, [pc, #328]	; (8006498 <voltage_monitor_init+0x538>)
 8006350:	2200      	movs	r2, #0
 8006352:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde

	rail_monitor[RAIL_5vref].name = RAIL_5vref;
 8006356:	4b50      	ldr	r3, [pc, #320]	; (8006498 <voltage_monitor_init+0x538>)
 8006358:	220e      	movs	r2, #14
 800635a:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
	rail_monitor[RAIL_5vref].error_count = 0;
 800635e:	4b4e      	ldr	r3, [pc, #312]	; (8006498 <voltage_monitor_init+0x538>)
 8006360:	2200      	movs	r2, #0
 8006362:	f883 20e1 	strb.w	r2, [r3, #225]	; 0xe1
	rail_monitor[RAIL_5vref].is_enabled = 0;
 8006366:	4b4c      	ldr	r3, [pc, #304]	; (8006498 <voltage_monitor_init+0x538>)
 8006368:	2200      	movs	r2, #0
 800636a:	f883 20e2 	strb.w	r2, [r3, #226]	; 0xe2
	rail_monitor[RAIL_5vref].data = 0;
 800636e:	4b4a      	ldr	r3, [pc, #296]	; (8006498 <voltage_monitor_init+0x538>)
 8006370:	2200      	movs	r2, #0
 8006372:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
	rail_monitor[RAIL_5vref].max_voltage = 4095;		// 3.30v
 8006376:	4b48      	ldr	r3, [pc, #288]	; (8006498 <voltage_monitor_init+0x538>)
 8006378:	f640 72ff 	movw	r2, #4095	; 0xfff
 800637c:	f8a3 20e6 	strh.w	r2, [r3, #230]	; 0xe6
	rail_monitor[RAIL_5vref].min_voltage = 3350;		// 2.70v
 8006380:	4b45      	ldr	r3, [pc, #276]	; (8006498 <voltage_monitor_init+0x538>)
 8006382:	f640 5216 	movw	r2, #3350	; 0xd16
 8006386:	f8a3 20e8 	strh.w	r2, [r3, #232]	; 0xe8
	rail_monitor[RAIL_5vref].OOB_1 = 0;
 800638a:	4b43      	ldr	r3, [pc, #268]	; (8006498 <voltage_monitor_init+0x538>)
 800638c:	2200      	movs	r2, #0
 800638e:	f8a3 20ea 	strh.w	r2, [r3, #234]	; 0xea
	rail_monitor[RAIL_5vref].OOB_2 = 0;
 8006392:	4b41      	ldr	r3, [pc, #260]	; (8006498 <voltage_monitor_init+0x538>)
 8006394:	2200      	movs	r2, #0
 8006396:	f8a3 20ec 	strh.w	r2, [r3, #236]	; 0xec
	rail_monitor[RAIL_5vref].OOB_3 = 0;
 800639a:	4b3f      	ldr	r3, [pc, #252]	; (8006498 <voltage_monitor_init+0x538>)
 800639c:	2200      	movs	r2, #0
 800639e:	f8a3 20ee 	strh.w	r2, [r3, #238]	; 0xee

	rail_monitor[RAIL_n200v].name = RAIL_n200v;
 80063a2:	4b3d      	ldr	r3, [pc, #244]	; (8006498 <voltage_monitor_init+0x538>)
 80063a4:	220f      	movs	r2, #15
 80063a6:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
	rail_monitor[RAIL_n200v].error_count = 0;
 80063aa:	4b3b      	ldr	r3, [pc, #236]	; (8006498 <voltage_monitor_init+0x538>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 20f1 	strb.w	r2, [r3, #241]	; 0xf1
	rail_monitor[RAIL_n200v].is_enabled = 0;
 80063b2:	4b39      	ldr	r3, [pc, #228]	; (8006498 <voltage_monitor_init+0x538>)
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 20f2 	strb.w	r2, [r3, #242]	; 0xf2
	rail_monitor[RAIL_n200v].data = 0;
 80063ba:	4b37      	ldr	r3, [pc, #220]	; (8006498 <voltage_monitor_init+0x538>)
 80063bc:	2200      	movs	r2, #0
 80063be:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
	rail_monitor[RAIL_n200v].max_voltage = 3686;		// 2.97v
 80063c2:	4b35      	ldr	r3, [pc, #212]	; (8006498 <voltage_monitor_init+0x538>)
 80063c4:	f640 6266 	movw	r2, #3686	; 0xe66
 80063c8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
	rail_monitor[RAIL_n200v].min_voltage = 3015;		// 2.43v
 80063cc:	4b32      	ldr	r3, [pc, #200]	; (8006498 <voltage_monitor_init+0x538>)
 80063ce:	f640 32c7 	movw	r2, #3015	; 0xbc7
 80063d2:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
	rail_monitor[RAIL_n200v].OOB_1 = 0;
 80063d6:	4b30      	ldr	r3, [pc, #192]	; (8006498 <voltage_monitor_init+0x538>)
 80063d8:	2200      	movs	r2, #0
 80063da:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa
	rail_monitor[RAIL_n200v].OOB_2 = 0;
 80063de:	4b2e      	ldr	r3, [pc, #184]	; (8006498 <voltage_monitor_init+0x538>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8a3 20fc 	strh.w	r2, [r3, #252]	; 0xfc
	rail_monitor[RAIL_n200v].OOB_3 = 0;
 80063e6:	4b2c      	ldr	r3, [pc, #176]	; (8006498 <voltage_monitor_init+0x538>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	f8a3 20fe 	strh.w	r2, [r3, #254]	; 0xfe


	rail_monitor[RAIL_n800v].name = RAIL_n800v;
 80063ee:	4b2a      	ldr	r3, [pc, #168]	; (8006498 <voltage_monitor_init+0x538>)
 80063f0:	2210      	movs	r2, #16
 80063f2:	f883 2100 	strb.w	r2, [r3, #256]	; 0x100
	rail_monitor[RAIL_n800v].error_count = 0;
 80063f6:	4b28      	ldr	r3, [pc, #160]	; (8006498 <voltage_monitor_init+0x538>)
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
	rail_monitor[RAIL_n800v].is_enabled = 0;
 80063fe:	4b26      	ldr	r3, [pc, #152]	; (8006498 <voltage_monitor_init+0x538>)
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2102 	strb.w	r2, [r3, #258]	; 0x102
	rail_monitor[RAIL_n800v].data = 0;
 8006406:	4b24      	ldr	r3, [pc, #144]	; (8006498 <voltage_monitor_init+0x538>)
 8006408:	2200      	movs	r2, #0
 800640a:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
	rail_monitor[RAIL_n800v].max_voltage = 3494;		// 2.82v
 800640e:	4b22      	ldr	r3, [pc, #136]	; (8006498 <voltage_monitor_init+0x538>)
 8006410:	f640 52a6 	movw	r2, #3494	; 0xda6
 8006414:	f8a3 2106 	strh.w	r2, [r3, #262]	; 0x106
	rail_monitor[RAIL_n800v].min_voltage = 2859;		// 2.30v
 8006418:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <voltage_monitor_init+0x538>)
 800641a:	f640 322b 	movw	r2, #2859	; 0xb2b
 800641e:	f8a3 2108 	strh.w	r2, [r3, #264]	; 0x108
	rail_monitor[RAIL_n800v].OOB_1 = 0;
 8006422:	4b1d      	ldr	r3, [pc, #116]	; (8006498 <voltage_monitor_init+0x538>)
 8006424:	2200      	movs	r2, #0
 8006426:	f8a3 210a 	strh.w	r2, [r3, #266]	; 0x10a
	rail_monitor[RAIL_n800v].OOB_2 = 0;
 800642a:	4b1b      	ldr	r3, [pc, #108]	; (8006498 <voltage_monitor_init+0x538>)
 800642c:	2200      	movs	r2, #0
 800642e:	f8a3 210c 	strh.w	r2, [r3, #268]	; 0x10c
	rail_monitor[RAIL_n800v].OOB_3 = 0;
 8006432:	4b19      	ldr	r3, [pc, #100]	; (8006498 <voltage_monitor_init+0x538>)
 8006434:	2200      	movs	r2, #0
 8006436:	f8a3 210e 	strh.w	r2, [r3, #270]	; 0x10e

	rail_monitor[RAIL_TMP1].name = RAIL_TMP1;
 800643a:	4b17      	ldr	r3, [pc, #92]	; (8006498 <voltage_monitor_init+0x538>)
 800643c:	2211      	movs	r2, #17
 800643e:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
	rail_monitor[RAIL_TMP1].error_count = 0;
 8006442:	4b15      	ldr	r3, [pc, #84]	; (8006498 <voltage_monitor_init+0x538>)
 8006444:	2200      	movs	r2, #0
 8006446:	f883 2111 	strb.w	r2, [r3, #273]	; 0x111
	rail_monitor[RAIL_TMP1].is_enabled = 0;
 800644a:	4b13      	ldr	r3, [pc, #76]	; (8006498 <voltage_monitor_init+0x538>)
 800644c:	2200      	movs	r2, #0
 800644e:	f883 2112 	strb.w	r2, [r3, #274]	; 0x112
	rail_monitor[RAIL_TMP1].data = 0;
 8006452:	4b11      	ldr	r3, [pc, #68]	; (8006498 <voltage_monitor_init+0x538>)
 8006454:	2200      	movs	r2, #0
 8006456:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114
	rail_monitor[RAIL_TMP1].max_voltage = 2720;			// -40c NOTE: these are swapped because the conversion from int -> temp is inverse
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <voltage_monitor_init+0x538>)
 800645c:	f44f 622a 	mov.w	r2, #2720	; 0xaa0
 8006460:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
	rail_monitor[RAIL_TMP1].min_voltage = 2023;			// 85c
 8006464:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <voltage_monitor_init+0x538>)
 8006466:	f240 72e7 	movw	r2, #2023	; 0x7e7
 800646a:	f8a3 2118 	strh.w	r2, [r3, #280]	; 0x118
	rail_monitor[RAIL_TMP1].OOB_1 = 0;
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <voltage_monitor_init+0x538>)
 8006470:	2200      	movs	r2, #0
 8006472:	f8a3 211a 	strh.w	r2, [r3, #282]	; 0x11a
	rail_monitor[RAIL_TMP1].OOB_2 = 0;
 8006476:	4b08      	ldr	r3, [pc, #32]	; (8006498 <voltage_monitor_init+0x538>)
 8006478:	2200      	movs	r2, #0
 800647a:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
	rail_monitor[RAIL_TMP1].OOB_3 = 0;
 800647e:	4b06      	ldr	r3, [pc, #24]	; (8006498 <voltage_monitor_init+0x538>)
 8006480:	2200      	movs	r2, #0
 8006482:	f8a3 211e 	strh.w	r2, [r3, #286]	; 0x11e

	status = 1;
 8006486:	2301      	movs	r3, #1
 8006488:	71fb      	strb	r3, [r7, #7]

	return status;
 800648a:	79fb      	ldrb	r3, [r7, #7]
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	240022d4 	.word	0x240022d4

0800649c <set_rail_monitor_enable>:


uint8_t set_rail_monitor_enable(VOLTAGE_RAIL_NAME rail_name, uint8_t enable_value) {
 800649c:	b480      	push	{r7}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	4603      	mov	r3, r0
 80064a4:	460a      	mov	r2, r1
 80064a6:	71fb      	strb	r3, [r7, #7]
 80064a8:	4613      	mov	r3, r2
 80064aa:	71bb      	strb	r3, [r7, #6]
	uint8_t status = 0;
 80064ac:	2300      	movs	r3, #0
 80064ae:	73fb      	strb	r3, [r7, #15]
	rail_monitor[rail_name].is_enabled = enable_value;
 80064b0:	79fb      	ldrb	r3, [r7, #7]
 80064b2:	4a07      	ldr	r2, [pc, #28]	; (80064d0 <set_rail_monitor_enable+0x34>)
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	4413      	add	r3, r2
 80064b8:	3302      	adds	r3, #2
 80064ba:	79ba      	ldrb	r2, [r7, #6]
 80064bc:	701a      	strb	r2, [r3, #0]
	status = 1;
 80064be:	2301      	movs	r3, #1
 80064c0:	73fb      	strb	r3, [r7, #15]

	return status;
 80064c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr
 80064d0:	240022d4 	.word	0x240022d4

080064d4 <set_rail_monitor>:


uint8_t set_rail_monitor() {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b08a      	sub	sp, #40	; 0x28
 80064d8:	af00      	add	r7, sp, #0
	uint8_t status = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint16_t hk_adc1[10];
	uint16_t hk_adc3[4];
	int16_t hk_i2c[4];

	sample_hk_i2c(hk_i2c);
 80064e0:	463b      	mov	r3, r7
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe f91e 	bl	8004724 <sample_hk_i2c>
	sample_hk_adc1(hk_adc1);
 80064e8:	f107 0310 	add.w	r3, r7, #16
 80064ec:	4618      	mov	r0, r3
 80064ee:	f7fe f949 	bl	8004784 <sample_hk_adc1>
	sample_hk_adc3(hk_adc3);
 80064f2:	f107 0308 	add.w	r3, r7, #8
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe f996 	bl	8004828 <sample_hk_adc3>
 80064fc:	893a      	ldrh	r2, [r7, #8]


	memcpy(&rail_monitor[RAIL_vsense].data, &hk_adc3[0], sizeof(uint16_t));
 80064fe:	4b26      	ldr	r3, [pc, #152]	; (8006598 <set_rail_monitor+0xc4>)
 8006500:	809a      	strh	r2, [r3, #4]
 8006502:	897a      	ldrh	r2, [r7, #10]
	memcpy(&rail_monitor[RAIL_vrefint].data, &hk_adc3[1], sizeof(uint16_t));
 8006504:	4b24      	ldr	r3, [pc, #144]	; (8006598 <set_rail_monitor+0xc4>)
 8006506:	829a      	strh	r2, [r3, #20]
 8006508:	883a      	ldrh	r2, [r7, #0]
	memcpy(&rail_monitor[RAIL_TEMP1].data, &hk_i2c[0], sizeof(uint16_t));
 800650a:	4b23      	ldr	r3, [pc, #140]	; (8006598 <set_rail_monitor+0xc4>)
 800650c:	849a      	strh	r2, [r3, #36]	; 0x24
 800650e:	887a      	ldrh	r2, [r7, #2]
	memcpy(&rail_monitor[RAIL_TEMP2].data, &hk_i2c[1], sizeof(uint16_t));
 8006510:	4b21      	ldr	r3, [pc, #132]	; (8006598 <set_rail_monitor+0xc4>)
 8006512:	869a      	strh	r2, [r3, #52]	; 0x34
 8006514:	88ba      	ldrh	r2, [r7, #4]
	memcpy(&rail_monitor[RAIL_TEMP3].data, &hk_i2c[2], sizeof(uint16_t));
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <set_rail_monitor+0xc4>)
 8006518:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800651c:	88fa      	ldrh	r2, [r7, #6]
	memcpy(&rail_monitor[RAIL_TEMP4].data, &hk_i2c[3], sizeof(uint16_t));
 800651e:	4b1e      	ldr	r3, [pc, #120]	; (8006598 <set_rail_monitor+0xc4>)
 8006520:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
 8006524:	8a3a      	ldrh	r2, [r7, #16]
	memcpy(&rail_monitor[RAIL_busvmon].data, &hk_adc1[0], sizeof(uint16_t));
 8006526:	4b1c      	ldr	r3, [pc, #112]	; (8006598 <set_rail_monitor+0xc4>)
 8006528:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
 800652c:	8a7a      	ldrh	r2, [r7, #18]
	memcpy(&rail_monitor[RAIL_busimon].data, &hk_adc1[1], sizeof(uint16_t));
 800652e:	4b1a      	ldr	r3, [pc, #104]	; (8006598 <set_rail_monitor+0xc4>)
 8006530:	f8a3 2074 	strh.w	r2, [r3, #116]	; 0x74
 8006534:	8aba      	ldrh	r2, [r7, #20]
	memcpy(&rail_monitor[RAIL_2v5].data, &hk_adc1[2], sizeof(uint16_t));
 8006536:	4b18      	ldr	r3, [pc, #96]	; (8006598 <set_rail_monitor+0xc4>)
 8006538:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 800653c:	89fa      	ldrh	r2, [r7, #14]
	memcpy(&rail_monitor[RAIL_3v3].data, &hk_adc3[3], sizeof(uint16_t));
 800653e:	4b16      	ldr	r3, [pc, #88]	; (8006598 <set_rail_monitor+0xc4>)
 8006540:	f8a3 2094 	strh.w	r2, [r3, #148]	; 0x94
 8006544:	8bba      	ldrh	r2, [r7, #28]
	memcpy(&rail_monitor[RAIL_5v].data, &hk_adc1[6], sizeof(uint16_t));
 8006546:	4b14      	ldr	r3, [pc, #80]	; (8006598 <set_rail_monitor+0xc4>)
 8006548:	f8a3 20a4 	strh.w	r2, [r3, #164]	; 0xa4
 800654c:	8afa      	ldrh	r2, [r7, #22]
	memcpy(&rail_monitor[RAIL_n3v3].data, &hk_adc1[3], sizeof(uint16_t));
 800654e:	4b12      	ldr	r3, [pc, #72]	; (8006598 <set_rail_monitor+0xc4>)
 8006550:	f8a3 20b4 	strh.w	r2, [r3, #180]	; 0xb4
 8006554:	89ba      	ldrh	r2, [r7, #12]
	memcpy(&rail_monitor[RAIL_n5v].data, &hk_adc3[2], sizeof(uint16_t));
 8006556:	4b10      	ldr	r3, [pc, #64]	; (8006598 <set_rail_monitor+0xc4>)
 8006558:	f8a3 20c4 	strh.w	r2, [r3, #196]	; 0xc4
 800655c:	8bfa      	ldrh	r2, [r7, #30]
	memcpy(&rail_monitor[RAIL_15v].data, &hk_adc1[7], sizeof(uint16_t));
 800655e:	4b0e      	ldr	r3, [pc, #56]	; (8006598 <set_rail_monitor+0xc4>)
 8006560:	f8a3 20d4 	strh.w	r2, [r3, #212]	; 0xd4
 8006564:	8c3a      	ldrh	r2, [r7, #32]
	memcpy(&rail_monitor[RAIL_5vref].data, &hk_adc1[8], sizeof(uint16_t));
 8006566:	4b0c      	ldr	r3, [pc, #48]	; (8006598 <set_rail_monitor+0xc4>)
 8006568:	f8a3 20e4 	strh.w	r2, [r3, #228]	; 0xe4
 800656c:	8b3a      	ldrh	r2, [r7, #24]
	memcpy(&rail_monitor[RAIL_n200v].data, &hk_adc1[4], sizeof(uint16_t));
 800656e:	4b0a      	ldr	r3, [pc, #40]	; (8006598 <set_rail_monitor+0xc4>)
 8006570:	f8a3 20f4 	strh.w	r2, [r3, #244]	; 0xf4
 8006574:	8b7a      	ldrh	r2, [r7, #26]
	memcpy(&rail_monitor[RAIL_n800v].data, &hk_adc1[5], sizeof(uint16_t));
 8006576:	4b08      	ldr	r3, [pc, #32]	; (8006598 <set_rail_monitor+0xc4>)
 8006578:	f8a3 2104 	strh.w	r2, [r3, #260]	; 0x104
 800657c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
	memcpy(&rail_monitor[RAIL_TMP1].data, &hk_adc1[9], sizeof(uint16_t));
 800657e:	4b06      	ldr	r3, [pc, #24]	; (8006598 <set_rail_monitor+0xc4>)
 8006580:	f8a3 2114 	strh.w	r2, [r3, #276]	; 0x114

	status = 1;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	return status;
 800658a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800658e:	4618      	mov	r0, r3
 8006590:	3728      	adds	r7, #40	; 0x28
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	240022d4 	.word	0x240022d4

0800659c <get_rail_monitor>:

VOLTAGE_RAIL* get_rail_monitor() {
 800659c:	b480      	push	{r7}
 800659e:	af00      	add	r7, sp, #0
	return rail_monitor;
 80065a0:	4b02      	ldr	r3, [pc, #8]	; (80065ac <get_rail_monitor+0x10>)
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	46bd      	mov	sp, r7
 80065a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065aa:	4770      	bx	lr
 80065ac:	240022d4 	.word	0x240022d4

080065b0 <convert_ADT7410>:

int16_t convert_ADT7410(int16_t raw) {
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	4603      	mov	r3, r0
 80065b8:	80fb      	strh	r3, [r7, #6]
    float ret = raw;
 80065ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065be:	ee07 3a90 	vmov	s15, r3
 80065c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80065c6:	edc7 7a03 	vstr	s15, [r7, #12]
    if (raw >= 0x1000) {
 80065ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80065ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065d2:	db07      	blt.n	80065e4 <convert_ADT7410+0x34>
        ret -= 8192;
 80065d4:	edd7 7a03 	vldr	s15, [r7, #12]
 80065d8:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800660c <convert_ADT7410+0x5c>
 80065dc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065e0:	edc7 7a03 	vstr	s15, [r7, #12]
    }

    return ret / 16.0;
 80065e4:	edd7 7a03 	vldr	s15, [r7, #12]
 80065e8:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80065ec:	eeb3 5b00 	vmov.f64	d5, #48	; 0x41800000  16.0
 80065f0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80065f4:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80065f8:	ee17 3a90 	vmov	r3, s15
 80065fc:	b21b      	sxth	r3, r3
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	46000000 	.word	0x46000000

08006610 <check_bounds>:

uint8_t check_bounds(VOLTAGE_RAIL_NAME name, uint16_t raw, int min, int max) {
 8006610:	b580      	push	{r7, lr}
 8006612:	b086      	sub	sp, #24
 8006614:	af00      	add	r7, sp, #0
 8006616:	60ba      	str	r2, [r7, #8]
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	4603      	mov	r3, r0
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	460b      	mov	r3, r1
 8006620:	81bb      	strh	r3, [r7, #12]
	if (name == RAIL_TEMP1 || name == RAIL_TEMP2 || name == RAIL_TEMP3 || name == RAIL_TEMP4){
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	2b02      	cmp	r3, #2
 8006626:	d008      	beq.n	800663a <check_bounds+0x2a>
 8006628:	7bfb      	ldrb	r3, [r7, #15]
 800662a:	2b03      	cmp	r3, #3
 800662c:	d005      	beq.n	800663a <check_bounds+0x2a>
 800662e:	7bfb      	ldrb	r3, [r7, #15]
 8006630:	2b04      	cmp	r3, #4
 8006632:	d002      	beq.n	800663a <check_bounds+0x2a>
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	2b05      	cmp	r3, #5
 8006638:	d124      	bne.n	8006684 <check_bounds+0x74>
		int16_t converted_max = convert_ADT7410(max);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	b21b      	sxth	r3, r3
 800663e:	4618      	mov	r0, r3
 8006640:	f7ff ffb6 	bl	80065b0 <convert_ADT7410>
 8006644:	4603      	mov	r3, r0
 8006646:	82fb      	strh	r3, [r7, #22]
		int16_t converted_min = convert_ADT7410(min);
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	b21b      	sxth	r3, r3
 800664c:	4618      	mov	r0, r3
 800664e:	f7ff ffaf 	bl	80065b0 <convert_ADT7410>
 8006652:	4603      	mov	r3, r0
 8006654:	82bb      	strh	r3, [r7, #20]
		int16_t converted_raw = convert_ADT7410(raw);
 8006656:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800665a:	4618      	mov	r0, r3
 800665c:	f7ff ffa8 	bl	80065b0 <convert_ADT7410>
 8006660:	4603      	mov	r3, r0
 8006662:	827b      	strh	r3, [r7, #18]
		if (converted_raw <= converted_max && converted_raw >= converted_min) {
 8006664:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006668:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800666c:	429a      	cmp	r2, r3
 800666e:	dc07      	bgt.n	8006680 <check_bounds+0x70>
 8006670:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8006674:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8006678:	429a      	cmp	r2, r3
 800667a:	db01      	blt.n	8006680 <check_bounds+0x70>
			return 1;
 800667c:	2301      	movs	r3, #1
 800667e:	e00c      	b.n	800669a <check_bounds+0x8a>
		}
		return 0;
 8006680:	2300      	movs	r3, #0
 8006682:	e00a      	b.n	800669a <check_bounds+0x8a>
	}

	if (raw <= max && raw >= min) {
 8006684:	89bb      	ldrh	r3, [r7, #12]
 8006686:	687a      	ldr	r2, [r7, #4]
 8006688:	429a      	cmp	r2, r3
 800668a:	db05      	blt.n	8006698 <check_bounds+0x88>
 800668c:	89bb      	ldrh	r3, [r7, #12]
 800668e:	68ba      	ldr	r2, [r7, #8]
 8006690:	429a      	cmp	r2, r3
 8006692:	dc01      	bgt.n	8006698 <check_bounds+0x88>
		return 1;
 8006694:	2301      	movs	r3, #1
 8006696:	e000      	b.n	800669a <check_bounds+0x8a>
	}
	return 0;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}
 80066a2:	0000      	movs	r0, r0
 80066a4:	0000      	movs	r0, r0
	...

080066a8 <monitor_rails>:

// Returns 0 if a rail is out of bounds
uint8_t monitor_rails() {
 80066a8:	b590      	push	{r4, r7, lr}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
	uint8_t within_bounds = 1;
 80066ae:	2301      	movs	r3, #1
 80066b0:	75fb      	strb	r3, [r7, #23]
	uint16_t tolerance;

	// Iterate through all voltage rails
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 80066b2:	2300      	movs	r3, #0
 80066b4:	613b      	str	r3, [r7, #16]
 80066b6:	e0c2      	b.n	800683e <monitor_rails+0x196>
		// Range check is different depending on whether the rail is enabled or not
		if (rail_monitor[i].is_enabled){
 80066b8:	4a67      	ldr	r2, [pc, #412]	; (8006858 <monitor_rails+0x1b0>)
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	011b      	lsls	r3, r3, #4
 80066be:	4413      	add	r3, r2
 80066c0:	3302      	adds	r3, #2
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d01d      	beq.n	8006704 <monitor_rails+0x5c>
			within_bounds = check_bounds(rail_monitor[i].name, rail_monitor[i].data, rail_monitor[i].min_voltage, rail_monitor[i].max_voltage);
 80066c8:	4a63      	ldr	r2, [pc, #396]	; (8006858 <monitor_rails+0x1b0>)
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	011b      	lsls	r3, r3, #4
 80066ce:	4413      	add	r3, r2
 80066d0:	7818      	ldrb	r0, [r3, #0]
 80066d2:	4a61      	ldr	r2, [pc, #388]	; (8006858 <monitor_rails+0x1b0>)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	4413      	add	r3, r2
 80066da:	3304      	adds	r3, #4
 80066dc:	8819      	ldrh	r1, [r3, #0]
 80066de:	4a5e      	ldr	r2, [pc, #376]	; (8006858 <monitor_rails+0x1b0>)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	4413      	add	r3, r2
 80066e6:	3308      	adds	r3, #8
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	461c      	mov	r4, r3
 80066ec:	4a5a      	ldr	r2, [pc, #360]	; (8006858 <monitor_rails+0x1b0>)
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	011b      	lsls	r3, r3, #4
 80066f2:	4413      	add	r3, r2
 80066f4:	3306      	adds	r3, #6
 80066f6:	881b      	ldrh	r3, [r3, #0]
 80066f8:	4622      	mov	r2, r4
 80066fa:	f7ff ff89 	bl	8006610 <check_bounds>
 80066fe:	4603      	mov	r3, r0
 8006700:	75fb      	strb	r3, [r7, #23]
 8006702:	e023      	b.n	800674c <monitor_rails+0xa4>
		}
		else {
			tolerance = rail_monitor[i].max_voltage * 0.1;
 8006704:	4a54      	ldr	r2, [pc, #336]	; (8006858 <monitor_rails+0x1b0>)
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	011b      	lsls	r3, r3, #4
 800670a:	4413      	add	r3, r2
 800670c:	3306      	adds	r3, #6
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	ee07 3a90 	vmov	s15, r3
 8006714:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006718:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8006850 <monitor_rails+0x1a8>
 800671c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006720:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8006724:	ee17 3a90 	vmov	r3, s15
 8006728:	81fb      	strh	r3, [r7, #14]
			within_bounds = check_bounds(rail_monitor[i].name, rail_monitor[i].data, 0, tolerance);
 800672a:	4a4b      	ldr	r2, [pc, #300]	; (8006858 <monitor_rails+0x1b0>)
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	4413      	add	r3, r2
 8006732:	7818      	ldrb	r0, [r3, #0]
 8006734:	4a48      	ldr	r2, [pc, #288]	; (8006858 <monitor_rails+0x1b0>)
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	011b      	lsls	r3, r3, #4
 800673a:	4413      	add	r3, r2
 800673c:	3304      	adds	r3, #4
 800673e:	8819      	ldrh	r1, [r3, #0]
 8006740:	89fb      	ldrh	r3, [r7, #14]
 8006742:	2200      	movs	r2, #0
 8006744:	f7ff ff64 	bl	8006610 <check_bounds>
 8006748:	4603      	mov	r3, r0
 800674a:	75fb      	strb	r3, [r7, #23]
		}

		// If we aren't within range...
		if (!within_bounds) {
 800674c:	7dfb      	ldrb	r3, [r7, #23]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d16f      	bne.n	8006832 <monitor_rails+0x18a>

			// Increase that rails error count
			rail_monitor[i].error_count++;
 8006752:	4a41      	ldr	r2, [pc, #260]	; (8006858 <monitor_rails+0x1b0>)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	011b      	lsls	r3, r3, #4
 8006758:	4413      	add	r3, r2
 800675a:	3301      	adds	r3, #1
 800675c:	781b      	ldrb	r3, [r3, #0]
 800675e:	3301      	adds	r3, #1
 8006760:	b2d9      	uxtb	r1, r3
 8006762:	4a3d      	ldr	r2, [pc, #244]	; (8006858 <monitor_rails+0x1b0>)
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	4413      	add	r3, r2
 800676a:	3301      	adds	r3, #1
 800676c:	460a      	mov	r2, r1
 800676e:	701a      	strb	r2, [r3, #0]

			// Store the voltage each time a rail goes out of bounds
			switch (rail_monitor[i].error_count) {
 8006770:	4a39      	ldr	r2, [pc, #228]	; (8006858 <monitor_rails+0x1b0>)
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	011b      	lsls	r3, r3, #4
 8006776:	4413      	add	r3, r2
 8006778:	3301      	adds	r3, #1
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b03      	cmp	r3, #3
 800677e:	d024      	beq.n	80067ca <monitor_rails+0x122>
 8006780:	2b03      	cmp	r3, #3
 8006782:	dc58      	bgt.n	8006836 <monitor_rails+0x18e>
 8006784:	2b01      	cmp	r3, #1
 8006786:	d002      	beq.n	800678e <monitor_rails+0xe6>
 8006788:	2b02      	cmp	r3, #2
 800678a:	d00f      	beq.n	80067ac <monitor_rails+0x104>
				error.OOB_2 = rail_monitor[i].OOB_2;
				error.OOB_3 = rail_monitor[i].OOB_3;
				handle_error(error);
				break;
			default:
				break;
 800678c:	e053      	b.n	8006836 <monitor_rails+0x18e>
				rail_monitor[i].OOB_1 = rail_monitor[i].data;
 800678e:	4a32      	ldr	r2, [pc, #200]	; (8006858 <monitor_rails+0x1b0>)
 8006790:	693b      	ldr	r3, [r7, #16]
 8006792:	011b      	lsls	r3, r3, #4
 8006794:	4413      	add	r3, r2
 8006796:	3304      	adds	r3, #4
 8006798:	8819      	ldrh	r1, [r3, #0]
 800679a:	4a2f      	ldr	r2, [pc, #188]	; (8006858 <monitor_rails+0x1b0>)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	011b      	lsls	r3, r3, #4
 80067a0:	4413      	add	r3, r2
 80067a2:	330a      	adds	r3, #10
 80067a4:	460a      	mov	r2, r1
 80067a6:	801a      	strh	r2, [r3, #0]
				return 0;
 80067a8:	2300      	movs	r3, #0
 80067aa:	e04d      	b.n	8006848 <monitor_rails+0x1a0>
				rail_monitor[i].OOB_2 = rail_monitor[i].data;
 80067ac:	4a2a      	ldr	r2, [pc, #168]	; (8006858 <monitor_rails+0x1b0>)
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	011b      	lsls	r3, r3, #4
 80067b2:	4413      	add	r3, r2
 80067b4:	3304      	adds	r3, #4
 80067b6:	8819      	ldrh	r1, [r3, #0]
 80067b8:	4a27      	ldr	r2, [pc, #156]	; (8006858 <monitor_rails+0x1b0>)
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	4413      	add	r3, r2
 80067c0:	330c      	adds	r3, #12
 80067c2:	460a      	mov	r2, r1
 80067c4:	801a      	strh	r2, [r3, #0]
				return 0;
 80067c6:	2300      	movs	r3, #0
 80067c8:	e03e      	b.n	8006848 <monitor_rails+0x1a0>
				rail_monitor[i].OOB_3 = rail_monitor[i].data;
 80067ca:	4a23      	ldr	r2, [pc, #140]	; (8006858 <monitor_rails+0x1b0>)
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	011b      	lsls	r3, r3, #4
 80067d0:	4413      	add	r3, r2
 80067d2:	3304      	adds	r3, #4
 80067d4:	8819      	ldrh	r1, [r3, #0]
 80067d6:	4a20      	ldr	r2, [pc, #128]	; (8006858 <monitor_rails+0x1b0>)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	011b      	lsls	r3, r3, #4
 80067dc:	4413      	add	r3, r2
 80067de:	330e      	adds	r3, #14
 80067e0:	460a      	mov	r2, r1
 80067e2:	801a      	strh	r2, [r3, #0]
				error.detail = get_rail_name_error_detail(rail_monitor[i].name);
 80067e4:	4a1c      	ldr	r2, [pc, #112]	; (8006858 <monitor_rails+0x1b0>)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	4413      	add	r3, r2
 80067ec:	781b      	ldrb	r3, [r3, #0]
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 f834 	bl	800685c <get_rail_name_error_detail>
 80067f4:	4603      	mov	r3, r0
 80067f6:	717b      	strb	r3, [r7, #5]
				error.category = EC_power_supply_rail;
 80067f8:	2300      	movs	r3, #0
 80067fa:	713b      	strb	r3, [r7, #4]
				error.OOB_1 = rail_monitor[i].OOB_1;
 80067fc:	4a16      	ldr	r2, [pc, #88]	; (8006858 <monitor_rails+0x1b0>)
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	011b      	lsls	r3, r3, #4
 8006802:	4413      	add	r3, r2
 8006804:	330a      	adds	r3, #10
 8006806:	881b      	ldrh	r3, [r3, #0]
 8006808:	80fb      	strh	r3, [r7, #6]
				error.OOB_2 = rail_monitor[i].OOB_2;
 800680a:	4a13      	ldr	r2, [pc, #76]	; (8006858 <monitor_rails+0x1b0>)
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	4413      	add	r3, r2
 8006812:	330c      	adds	r3, #12
 8006814:	881b      	ldrh	r3, [r3, #0]
 8006816:	813b      	strh	r3, [r7, #8]
				error.OOB_3 = rail_monitor[i].OOB_3;
 8006818:	4a0f      	ldr	r2, [pc, #60]	; (8006858 <monitor_rails+0x1b0>)
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	011b      	lsls	r3, r3, #4
 800681e:	4413      	add	r3, r2
 8006820:	330e      	adds	r3, #14
 8006822:	881b      	ldrh	r3, [r3, #0]
 8006824:	817b      	strh	r3, [r7, #10]
				handle_error(error);
 8006826:	1d3b      	adds	r3, r7, #4
 8006828:	e893 0003 	ldmia.w	r3, {r0, r1}
 800682c:	f7fb fb80 	bl	8001f30 <handle_error>
				break;
 8006830:	e002      	b.n	8006838 <monitor_rails+0x190>
			}
		}
 8006832:	bf00      	nop
 8006834:	e000      	b.n	8006838 <monitor_rails+0x190>
				break;
 8006836:	bf00      	nop
	for (int i = 0; i < NUM_VOLTAGE_RAILS; i++){
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	3301      	adds	r3, #1
 800683c:	613b      	str	r3, [r7, #16]
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	2b11      	cmp	r3, #17
 8006842:	f77f af39 	ble.w	80066b8 <monitor_rails+0x10>
	}
	// No rails were out of bounds, so voltage_monitor task does not need to enter idle and delay
	return 1;
 8006846:	2301      	movs	r3, #1
}
 8006848:	4618      	mov	r0, r3
 800684a:	371c      	adds	r7, #28
 800684c:	46bd      	mov	sp, r7
 800684e:	bd90      	pop	{r4, r7, pc}
 8006850:	9999999a 	.word	0x9999999a
 8006854:	3fb99999 	.word	0x3fb99999
 8006858:	240022d4 	.word	0x240022d4

0800685c <get_rail_name_error_detail>:

ERROR_DETAIL get_rail_name_error_detail(VOLTAGE_RAIL_NAME rail_name) {
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	4603      	mov	r3, r0
 8006864:	71fb      	strb	r3, [r7, #7]
	switch (rail_name) {
 8006866:	79fb      	ldrb	r3, [r7, #7]
 8006868:	2b11      	cmp	r3, #17
 800686a:	d84b      	bhi.n	8006904 <get_rail_name_error_detail+0xa8>
 800686c:	a201      	add	r2, pc, #4	; (adr r2, 8006874 <get_rail_name_error_detail+0x18>)
 800686e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006872:	bf00      	nop
 8006874:	080068bd 	.word	0x080068bd
 8006878:	080068c1 	.word	0x080068c1
 800687c:	080068c5 	.word	0x080068c5
 8006880:	080068c9 	.word	0x080068c9
 8006884:	080068cd 	.word	0x080068cd
 8006888:	080068d1 	.word	0x080068d1
 800688c:	080068d5 	.word	0x080068d5
 8006890:	080068d9 	.word	0x080068d9
 8006894:	080068dd 	.word	0x080068dd
 8006898:	080068e1 	.word	0x080068e1
 800689c:	080068e5 	.word	0x080068e5
 80068a0:	080068e9 	.word	0x080068e9
 80068a4:	080068ed 	.word	0x080068ed
 80068a8:	080068f1 	.word	0x080068f1
 80068ac:	080068f5 	.word	0x080068f5
 80068b0:	080068f9 	.word	0x080068f9
 80068b4:	080068fd 	.word	0x080068fd
 80068b8:	08006901 	.word	0x08006901
	case RAIL_vsense:
		return ED_vsense;
 80068bc:	2306      	movs	r3, #6
 80068be:	e022      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_vrefint:
		return ED_vrefint;
 80068c0:	2307      	movs	r3, #7
 80068c2:	e020      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP1:
		return ED_TEMP1;
 80068c4:	2308      	movs	r3, #8
 80068c6:	e01e      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP2:
		return ED_TEMP2;
 80068c8:	2309      	movs	r3, #9
 80068ca:	e01c      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP3:
		return ED_TEMP3;
 80068cc:	230a      	movs	r3, #10
 80068ce:	e01a      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_TEMP4:
		return ED_TEMP4;
 80068d0:	230b      	movs	r3, #11
 80068d2:	e018      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_busvmon:
		return ED_busvmon;
 80068d4:	230c      	movs	r3, #12
 80068d6:	e016      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_busimon:
		return ED_busimon;
 80068d8:	230d      	movs	r3, #13
 80068da:	e014      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_2v5:
		return ED_2v5;
 80068dc:	230e      	movs	r3, #14
 80068de:	e012      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_3v3:
		return ED_3v3;
 80068e0:	230f      	movs	r3, #15
 80068e2:	e010      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_5v:
		return ED_5v;
 80068e4:	2310      	movs	r3, #16
 80068e6:	e00e      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_n3v3:
		return ED_n3v3;
 80068e8:	2311      	movs	r3, #17
 80068ea:	e00c      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_n5v:
		return ED_n5v;
 80068ec:	2312      	movs	r3, #18
 80068ee:	e00a      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_15v:
		return ED_15v;
 80068f0:	2313      	movs	r3, #19
 80068f2:	e008      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_5vref:
		return ED_5vref;
 80068f4:	2314      	movs	r3, #20
 80068f6:	e006      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_n200v:
		return ED_n200v;
 80068f8:	2315      	movs	r3, #21
 80068fa:	e004      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_n800v:
		return ED_n800v;
 80068fc:	2316      	movs	r3, #22
 80068fe:	e002      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	case RAIL_TMP1:
		return ED_TMP1;
 8006900:	2317      	movs	r3, #23
 8006902:	e000      	b.n	8006906 <get_rail_name_error_detail+0xaa>

	default:
		return ED_UNDEFINED;
 8006904:	231c      	movs	r3, #28
	}
}
 8006906:	4618      	mov	r0, r3
 8006908:	370c      	adds	r7, #12
 800690a:	46bd      	mov	sp, r7
 800690c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006910:	4770      	bx	lr
 8006912:	bf00      	nop

08006914 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006914:	f8df d034 	ldr.w	sp, [pc, #52]	; 800694c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006918:	f7fe fcf0 	bl	80052fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800691c:	480c      	ldr	r0, [pc, #48]	; (8006950 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800691e:	490d      	ldr	r1, [pc, #52]	; (8006954 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006920:	4a0d      	ldr	r2, [pc, #52]	; (8006958 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006922:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006924:	e002      	b.n	800692c <LoopCopyDataInit>

08006926 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006926:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006928:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800692a:	3304      	adds	r3, #4

0800692c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800692c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800692e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006930:	d3f9      	bcc.n	8006926 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006932:	4a0a      	ldr	r2, [pc, #40]	; (800695c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006934:	4c0a      	ldr	r4, [pc, #40]	; (8006960 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006936:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006938:	e001      	b.n	800693e <LoopFillZerobss>

0800693a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800693a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800693c:	3204      	adds	r2, #4

0800693e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800693e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006940:	d3fb      	bcc.n	800693a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006942:	f014 ff59 	bl	801b7f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006946:	f7fd f863 	bl	8003a10 <main>
  bx  lr
 800694a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800694c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006950:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006954:	24000140 	.word	0x24000140
  ldr r2, =_sidata
 8006958:	0801c758 	.word	0x0801c758
  ldr r2, =_sbss
 800695c:	24000140 	.word	0x24000140
  ldr r4, =_ebss
 8006960:	24006d74 	.word	0x24006d74

08006964 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006964:	e7fe      	b.n	8006964 <ADC3_IRQHandler>
	...

08006968 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800696e:	2003      	movs	r0, #3
 8006970:	f001 fd39 	bl	80083e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006974:	f009 f9ce 	bl	800fd14 <HAL_RCC_GetSysClockFreq>
 8006978:	4602      	mov	r2, r0
 800697a:	4b15      	ldr	r3, [pc, #84]	; (80069d0 <HAL_Init+0x68>)
 800697c:	699b      	ldr	r3, [r3, #24]
 800697e:	0a1b      	lsrs	r3, r3, #8
 8006980:	f003 030f 	and.w	r3, r3, #15
 8006984:	4913      	ldr	r1, [pc, #76]	; (80069d4 <HAL_Init+0x6c>)
 8006986:	5ccb      	ldrb	r3, [r1, r3]
 8006988:	f003 031f 	and.w	r3, r3, #31
 800698c:	fa22 f303 	lsr.w	r3, r2, r3
 8006990:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <HAL_Init+0x68>)
 8006994:	699b      	ldr	r3, [r3, #24]
 8006996:	f003 030f 	and.w	r3, r3, #15
 800699a:	4a0e      	ldr	r2, [pc, #56]	; (80069d4 <HAL_Init+0x6c>)
 800699c:	5cd3      	ldrb	r3, [r2, r3]
 800699e:	f003 031f 	and.w	r3, r3, #31
 80069a2:	687a      	ldr	r2, [r7, #4]
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
 80069a8:	4a0b      	ldr	r2, [pc, #44]	; (80069d8 <HAL_Init+0x70>)
 80069aa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80069ac:	4a0b      	ldr	r2, [pc, #44]	; (80069dc <HAL_Init+0x74>)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80069b2:	2005      	movs	r0, #5
 80069b4:	f7fe f9b2 	bl	8004d1c <HAL_InitTick>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d001      	beq.n	80069c2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e002      	b.n	80069c8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80069c2:	f7fe f985 	bl	8004cd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3708      	adds	r7, #8
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	58024400 	.word	0x58024400
 80069d4:	0801c6a4 	.word	0x0801c6a4
 80069d8:	240000cc 	.word	0x240000cc
 80069dc:	240000c8 	.word	0x240000c8

080069e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069e0:	b480      	push	{r7}
 80069e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80069e4:	4b06      	ldr	r3, [pc, #24]	; (8006a00 <HAL_IncTick+0x20>)
 80069e6:	781b      	ldrb	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	4b06      	ldr	r3, [pc, #24]	; (8006a04 <HAL_IncTick+0x24>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	4413      	add	r3, r2
 80069f0:	4a04      	ldr	r2, [pc, #16]	; (8006a04 <HAL_IncTick+0x24>)
 80069f2:	6013      	str	r3, [r2, #0]
}
 80069f4:	bf00      	nop
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	240000d4 	.word	0x240000d4
 8006a04:	240023f4 	.word	0x240023f4

08006a08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  return uwTick;
 8006a0c:	4b03      	ldr	r3, [pc, #12]	; (8006a1c <HAL_GetTick+0x14>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	46bd      	mov	sp, r7
 8006a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a18:	4770      	bx	lr
 8006a1a:	bf00      	nop
 8006a1c:	240023f4 	.word	0x240023f4

08006a20 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006a20:	b480      	push	{r7}
 8006a22:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8006a24:	4b03      	ldr	r3, [pc, #12]	; (8006a34 <HAL_GetREVID+0x14>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	0c1b      	lsrs	r3, r3, #16
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr
 8006a34:	5c001000 	.word	0x5c001000

08006a38 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b083      	sub	sp, #12
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8006a42:	4b07      	ldr	r3, [pc, #28]	; (8006a60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006a44:	685a      	ldr	r2, [r3, #4]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	43db      	mvns	r3, r3
 8006a4a:	401a      	ands	r2, r3
 8006a4c:	4904      	ldr	r1, [pc, #16]	; (8006a60 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	604b      	str	r3, [r1, #4]
}
 8006a54:	bf00      	nop
 8006a56:	370c      	adds	r7, #12
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	58000400 	.word	0x58000400

08006a64 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	689b      	ldr	r3, [r3, #8]
 8006a72:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	431a      	orrs	r2, r3
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	609a      	str	r2, [r3, #8]
}
 8006a7e:	bf00      	nop
 8006a80:	370c      	adds	r7, #12
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b083      	sub	sp, #12
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
 8006a92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	431a      	orrs	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	609a      	str	r2, [r3, #8]
}
 8006aa4:	bf00      	nop
 8006aa6:	370c      	adds	r7, #12
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b083      	sub	sp, #12
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	689b      	ldr	r3, [r3, #8]
 8006abc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b087      	sub	sp, #28
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	607a      	str	r2, [r7, #4]
 8006ad8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	3360      	adds	r3, #96	; 0x60
 8006ade:	461a      	mov	r2, r3
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4413      	add	r3, r2
 8006ae6:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	430b      	orrs	r3, r1
 8006afa:	431a      	orrs	r2, r3
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8006b00:	bf00      	nop
 8006b02:	371c      	adds	r7, #28
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	60b9      	str	r1, [r7, #8]
 8006b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	691b      	ldr	r3, [r3, #16]
 8006b1c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	f003 031f 	and.w	r3, r3, #31
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2c:	431a      	orrs	r2, r3
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	611a      	str	r2, [r3, #16]
}
 8006b32:	bf00      	nop
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr

08006b3e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8006b3e:	b480      	push	{r7}
 8006b40:	b087      	sub	sp, #28
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	60f8      	str	r0, [r7, #12]
 8006b46:	60b9      	str	r1, [r7, #8]
 8006b48:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3360      	adds	r3, #96	; 0x60
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	4413      	add	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	431a      	orrs	r2, r3
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	601a      	str	r2, [r3, #0]
  }
}
 8006b68:	bf00      	nop
 8006b6a:	371c      	adds	r7, #28
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e000      	b.n	8006b8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	370c      	adds	r7, #12
 8006b92:	46bd      	mov	sp, r7
 8006b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b98:	4770      	bx	lr

08006b9a <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006b9a:	b480      	push	{r7}
 8006b9c:	b087      	sub	sp, #28
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	3330      	adds	r3, #48	; 0x30
 8006baa:	461a      	mov	r2, r3
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	0a1b      	lsrs	r3, r3, #8
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	4413      	add	r3, r2
 8006bb8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	681a      	ldr	r2, [r3, #0]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	f003 031f 	and.w	r3, r3, #31
 8006bc4:	211f      	movs	r1, #31
 8006bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	401a      	ands	r2, r3
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	0e9b      	lsrs	r3, r3, #26
 8006bd2:	f003 011f 	and.w	r1, r3, #31
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f003 031f 	and.w	r3, r3, #31
 8006bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8006be0:	431a      	orrs	r2, r3
 8006be2:	697b      	ldr	r3, [r7, #20]
 8006be4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006be6:	bf00      	nop
 8006be8:	371c      	adds	r7, #28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf0:	4770      	bx	lr

08006bf2 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	f023 0203 	bic.w	r2, r3, #3
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	431a      	orrs	r2, r3
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	60da      	str	r2, [r3, #12]
}
 8006c0c:	bf00      	nop
 8006c0e:	370c      	adds	r7, #12
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr

08006c18 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b087      	sub	sp, #28
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	3314      	adds	r3, #20
 8006c28:	461a      	mov	r2, r3
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	0e5b      	lsrs	r3, r3, #25
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	f003 0304 	and.w	r3, r3, #4
 8006c34:	4413      	add	r3, r2
 8006c36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	0d1b      	lsrs	r3, r3, #20
 8006c40:	f003 031f 	and.w	r3, r3, #31
 8006c44:	2107      	movs	r1, #7
 8006c46:	fa01 f303 	lsl.w	r3, r1, r3
 8006c4a:	43db      	mvns	r3, r3
 8006c4c:	401a      	ands	r2, r3
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	0d1b      	lsrs	r3, r3, #20
 8006c52:	f003 031f 	and.w	r3, r3, #31
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	fa01 f303 	lsl.w	r3, r1, r3
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	697b      	ldr	r3, [r7, #20]
 8006c60:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
	...

08006c70 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b085      	sub	sp, #20
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c88:	43db      	mvns	r3, r3
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f003 0318 	and.w	r3, r3, #24
 8006c92:	4908      	ldr	r1, [pc, #32]	; (8006cb4 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006c94:	40d9      	lsrs	r1, r3
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	400b      	ands	r3, r1
 8006c9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006c9e:	431a      	orrs	r2, r3
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8006ca6:	bf00      	nop
 8006ca8:	3714      	adds	r7, #20
 8006caa:	46bd      	mov	sp, r7
 8006cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb0:	4770      	bx	lr
 8006cb2:	bf00      	nop
 8006cb4:	000fffff 	.word	0x000fffff

08006cb8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 031f 	and.w	r3, r3, #31
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr

08006cd4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	4b04      	ldr	r3, [pc, #16]	; (8006cf4 <LL_ADC_DisableDeepPowerDown+0x20>)
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	6093      	str	r3, [r2, #8]
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	5fffffc0 	.word	0x5fffffc0

08006cf8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006d0c:	d101      	bne.n	8006d12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8006d0e:	2301      	movs	r3, #1
 8006d10:	e000      	b.n	8006d14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006d12:	2300      	movs	r3, #0
}
 8006d14:	4618      	mov	r0, r3
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	689a      	ldr	r2, [r3, #8]
 8006d2c:	4b05      	ldr	r3, [pc, #20]	; (8006d44 <LL_ADC_EnableInternalRegulator+0x24>)
 8006d2e:	4013      	ands	r3, r2
 8006d30:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	6fffffc0 	.word	0x6fffffc0

08006d48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b083      	sub	sp, #12
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006d5c:	d101      	bne.n	8006d62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e000      	b.n	8006d64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	370c      	adds	r7, #12
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b083      	sub	sp, #12
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	689a      	ldr	r2, [r3, #8]
 8006d7c:	4b05      	ldr	r3, [pc, #20]	; (8006d94 <LL_ADC_Enable+0x24>)
 8006d7e:	4013      	ands	r3, r2
 8006d80:	f043 0201 	orr.w	r2, r3, #1
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8006d88:	bf00      	nop
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	7fffffc0 	.word	0x7fffffc0

08006d98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689a      	ldr	r2, [r3, #8]
 8006da4:	4b05      	ldr	r3, [pc, #20]	; (8006dbc <LL_ADC_Disable+0x24>)
 8006da6:	4013      	ands	r3, r2
 8006da8:	f043 0202 	orr.w	r2, r3, #2
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8006db0:	bf00      	nop
 8006db2:	370c      	adds	r7, #12
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	7fffffc0 	.word	0x7fffffc0

08006dc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f003 0301 	and.w	r3, r3, #1
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <LL_ADC_IsEnabled+0x18>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e000      	b.n	8006dda <LL_ADC_IsEnabled+0x1a>
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f003 0302 	and.w	r3, r3, #2
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d101      	bne.n	8006dfe <LL_ADC_IsDisableOngoing+0x18>
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e000      	b.n	8006e00 <LL_ADC_IsDisableOngoing+0x1a>
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	689a      	ldr	r2, [r3, #8]
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <LL_ADC_REG_StartConversion+0x24>)
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	f043 0204 	orr.w	r2, r3, #4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8006e24:	bf00      	nop
 8006e26:	370c      	adds	r7, #12
 8006e28:	46bd      	mov	sp, r7
 8006e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2e:	4770      	bx	lr
 8006e30:	7fffffc0 	.word	0x7fffffc0

08006e34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	f003 0304 	and.w	r3, r3, #4
 8006e44:	2b04      	cmp	r3, #4
 8006e46:	d101      	bne.n	8006e4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	e000      	b.n	8006e4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	370c      	adds	r7, #12
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr

08006e5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006e5a:	b480      	push	{r7}
 8006e5c:	b083      	sub	sp, #12
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0308 	and.w	r3, r3, #8
 8006e6a:	2b08      	cmp	r3, #8
 8006e6c:	d101      	bne.n	8006e72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006e6e:	2301      	movs	r3, #1
 8006e70:	e000      	b.n	8006e74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	370c      	adds	r7, #12
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7e:	4770      	bx	lr

08006e80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b089      	sub	sp, #36	; 0x24
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e18f      	b.n	80071ba <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d109      	bne.n	8006ebc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006ea8:	6878      	ldr	r0, [r7, #4]
 8006eaa:	f7f9 fd4f 	bl	800094c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7ff ff19 	bl	8006cf8 <LL_ADC_IsDeepPowerDownEnabled>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d004      	beq.n	8006ed6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff feff 	bl	8006cd4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7ff ff34 	bl	8006d48 <LL_ADC_IsInternalRegulatorEnabled>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d114      	bne.n	8006f10 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff ff18 	bl	8006d20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ef0:	4b87      	ldr	r3, [pc, #540]	; (8007110 <HAL_ADC_Init+0x290>)
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	099b      	lsrs	r3, r3, #6
 8006ef6:	4a87      	ldr	r2, [pc, #540]	; (8007114 <HAL_ADC_Init+0x294>)
 8006ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8006efc:	099b      	lsrs	r3, r3, #6
 8006efe:	3301      	adds	r3, #1
 8006f00:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006f02:	e002      	b.n	8006f0a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	3b01      	subs	r3, #1
 8006f08:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1f9      	bne.n	8006f04 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f7ff ff17 	bl	8006d48 <LL_ADC_IsInternalRegulatorEnabled>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d10d      	bne.n	8006f3c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f24:	f043 0210 	orr.w	r2, r3, #16
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f30:	f043 0201 	orr.w	r2, r3, #1
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f7ff ff77 	bl	8006e34 <LL_ADC_REG_IsConversionOngoing>
 8006f46:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f040 8129 	bne.w	80071a8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006f56:	697b      	ldr	r3, [r7, #20]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f040 8125 	bne.w	80071a8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f62:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006f66:	f043 0202 	orr.w	r2, r3, #2
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4618      	mov	r0, r3
 8006f74:	f7ff ff24 	bl	8006dc0 <LL_ADC_IsEnabled>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d136      	bne.n	8006fec <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a65      	ldr	r2, [pc, #404]	; (8007118 <HAL_ADC_Init+0x298>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d004      	beq.n	8006f92 <HAL_ADC_Init+0x112>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a63      	ldr	r2, [pc, #396]	; (800711c <HAL_ADC_Init+0x29c>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d10e      	bne.n	8006fb0 <HAL_ADC_Init+0x130>
 8006f92:	4861      	ldr	r0, [pc, #388]	; (8007118 <HAL_ADC_Init+0x298>)
 8006f94:	f7ff ff14 	bl	8006dc0 <LL_ADC_IsEnabled>
 8006f98:	4604      	mov	r4, r0
 8006f9a:	4860      	ldr	r0, [pc, #384]	; (800711c <HAL_ADC_Init+0x29c>)
 8006f9c:	f7ff ff10 	bl	8006dc0 <LL_ADC_IsEnabled>
 8006fa0:	4603      	mov	r3, r0
 8006fa2:	4323      	orrs	r3, r4
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	bf0c      	ite	eq
 8006fa8:	2301      	moveq	r3, #1
 8006faa:	2300      	movne	r3, #0
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	e008      	b.n	8006fc2 <HAL_ADC_Init+0x142>
 8006fb0:	485b      	ldr	r0, [pc, #364]	; (8007120 <HAL_ADC_Init+0x2a0>)
 8006fb2:	f7ff ff05 	bl	8006dc0 <LL_ADC_IsEnabled>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bf0c      	ite	eq
 8006fbc:	2301      	moveq	r3, #1
 8006fbe:	2300      	movne	r3, #0
 8006fc0:	b2db      	uxtb	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d012      	beq.n	8006fec <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a53      	ldr	r2, [pc, #332]	; (8007118 <HAL_ADC_Init+0x298>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d004      	beq.n	8006fda <HAL_ADC_Init+0x15a>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	4a51      	ldr	r2, [pc, #324]	; (800711c <HAL_ADC_Init+0x29c>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d101      	bne.n	8006fde <HAL_ADC_Init+0x15e>
 8006fda:	4a52      	ldr	r2, [pc, #328]	; (8007124 <HAL_ADC_Init+0x2a4>)
 8006fdc:	e000      	b.n	8006fe0 <HAL_ADC_Init+0x160>
 8006fde:	4a52      	ldr	r2, [pc, #328]	; (8007128 <HAL_ADC_Init+0x2a8>)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	685b      	ldr	r3, [r3, #4]
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	4610      	mov	r0, r2
 8006fe8:	f7ff fd3c 	bl	8006a64 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8006fec:	f7ff fd18 	bl	8006a20 <HAL_GetREVID>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f241 0203 	movw	r2, #4099	; 0x1003
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d914      	bls.n	8007024 <HAL_ADC_Init+0x1a4>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	2b10      	cmp	r3, #16
 8007000:	d110      	bne.n	8007024 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	7d5b      	ldrb	r3, [r3, #21]
 8007006:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800700c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007012:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	7f1b      	ldrb	r3, [r3, #28]
 8007018:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800701a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800701c:	f043 030c 	orr.w	r3, r3, #12
 8007020:	61bb      	str	r3, [r7, #24]
 8007022:	e00d      	b.n	8007040 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	7d5b      	ldrb	r3, [r3, #21]
 8007028:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800702e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8007034:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	7f1b      	ldrb	r3, [r3, #28]
 800703a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800703c:	4313      	orrs	r3, r2
 800703e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	7f1b      	ldrb	r3, [r3, #28]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d106      	bne.n	8007056 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6a1b      	ldr	r3, [r3, #32]
 800704c:	3b01      	subs	r3, #1
 800704e:	045b      	lsls	r3, r3, #17
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	4313      	orrs	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800706a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800706c:	69ba      	ldr	r2, [r7, #24]
 800706e:	4313      	orrs	r3, r2
 8007070:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	68da      	ldr	r2, [r3, #12]
 8007078:	4b2c      	ldr	r3, [pc, #176]	; (800712c <HAL_ADC_Init+0x2ac>)
 800707a:	4013      	ands	r3, r2
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	69b9      	ldr	r1, [r7, #24]
 8007082:	430b      	orrs	r3, r1
 8007084:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4618      	mov	r0, r3
 800708c:	f7ff fed2 	bl	8006e34 <LL_ADC_REG_IsConversionOngoing>
 8007090:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4618      	mov	r0, r3
 8007098:	f7ff fedf 	bl	8006e5a <LL_ADC_INJ_IsConversionOngoing>
 800709c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d15f      	bne.n	8007164 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d15c      	bne.n	8007164 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	7d1b      	ldrb	r3, [r3, #20]
 80070ae:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80070b4:	4313      	orrs	r3, r2
 80070b6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68da      	ldr	r2, [r3, #12]
 80070be:	4b1c      	ldr	r3, [pc, #112]	; (8007130 <HAL_ADC_Init+0x2b0>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	6812      	ldr	r2, [r2, #0]
 80070c6:	69b9      	ldr	r1, [r7, #24]
 80070c8:	430b      	orrs	r3, r1
 80070ca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80070d2:	2b01      	cmp	r3, #1
 80070d4:	d130      	bne.n	8007138 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070da:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	691a      	ldr	r2, [r3, #16]
 80070e2:	4b14      	ldr	r3, [pc, #80]	; (8007134 <HAL_ADC_Init+0x2b4>)
 80070e4:	4013      	ands	r3, r2
 80070e6:	687a      	ldr	r2, [r7, #4]
 80070e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070ea:	3a01      	subs	r2, #1
 80070ec:	0411      	lsls	r1, r2, #16
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80070f2:	4311      	orrs	r1, r2
 80070f4:	687a      	ldr	r2, [r7, #4]
 80070f6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80070f8:	4311      	orrs	r1, r2
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80070fe:	430a      	orrs	r2, r1
 8007100:	431a      	orrs	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f042 0201 	orr.w	r2, r2, #1
 800710a:	611a      	str	r2, [r3, #16]
 800710c:	e01c      	b.n	8007148 <HAL_ADC_Init+0x2c8>
 800710e:	bf00      	nop
 8007110:	240000c8 	.word	0x240000c8
 8007114:	053e2d63 	.word	0x053e2d63
 8007118:	40022000 	.word	0x40022000
 800711c:	40022100 	.word	0x40022100
 8007120:	58026000 	.word	0x58026000
 8007124:	40022300 	.word	0x40022300
 8007128:	58026300 	.word	0x58026300
 800712c:	fff0c003 	.word	0xfff0c003
 8007130:	ffffbffc 	.word	0xffffbffc
 8007134:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0201 	bic.w	r2, r2, #1
 8007146:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	691b      	ldr	r3, [r3, #16]
 800714e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 fdec 	bl	8007d3c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	68db      	ldr	r3, [r3, #12]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d10c      	bne.n	8007186 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007172:	f023 010f 	bic.w	r1, r3, #15
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	1e5a      	subs	r2, r3, #1
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	430a      	orrs	r2, r1
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
 8007184:	e007      	b.n	8007196 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 020f 	bic.w	r2, r2, #15
 8007194:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800719a:	f023 0303 	bic.w	r3, r3, #3
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	655a      	str	r2, [r3, #84]	; 0x54
 80071a6:	e007      	b.n	80071b8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ac:	f043 0210 	orr.w	r2, r3, #16
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80071b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3724      	adds	r7, #36	; 0x24
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd90      	pop	{r4, r7, pc}
 80071c2:	bf00      	nop

080071c4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b086      	sub	sp, #24
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a55      	ldr	r2, [pc, #340]	; (800732c <HAL_ADC_Start_DMA+0x168>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d004      	beq.n	80071e4 <HAL_ADC_Start_DMA+0x20>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a54      	ldr	r2, [pc, #336]	; (8007330 <HAL_ADC_Start_DMA+0x16c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d101      	bne.n	80071e8 <HAL_ADC_Start_DMA+0x24>
 80071e4:	4b53      	ldr	r3, [pc, #332]	; (8007334 <HAL_ADC_Start_DMA+0x170>)
 80071e6:	e000      	b.n	80071ea <HAL_ADC_Start_DMA+0x26>
 80071e8:	4b53      	ldr	r3, [pc, #332]	; (8007338 <HAL_ADC_Start_DMA+0x174>)
 80071ea:	4618      	mov	r0, r3
 80071ec:	f7ff fd64 	bl	8006cb8 <LL_ADC_GetMultimode>
 80071f0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7ff fe1c 	bl	8006e34 <LL_ADC_REG_IsConversionOngoing>
 80071fc:	4603      	mov	r3, r0
 80071fe:	2b00      	cmp	r3, #0
 8007200:	f040 808c 	bne.w	800731c <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_ADC_Start_DMA+0x4e>
 800720e:	2302      	movs	r3, #2
 8007210:	e087      	b.n	8007322 <HAL_ADC_Start_DMA+0x15e>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d005      	beq.n	800722c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	2b05      	cmp	r3, #5
 8007224:	d002      	beq.n	800722c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	2b09      	cmp	r3, #9
 800722a:	d170      	bne.n	800730e <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fc07 	bl	8007a40 <ADC_Enable>
 8007232:	4603      	mov	r3, r0
 8007234:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8007236:	7dfb      	ldrb	r3, [r7, #23]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d163      	bne.n	8007304 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007240:	4b3e      	ldr	r3, [pc, #248]	; (800733c <HAL_ADC_Start_DMA+0x178>)
 8007242:	4013      	ands	r3, r2
 8007244:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a37      	ldr	r2, [pc, #220]	; (8007330 <HAL_ADC_Start_DMA+0x16c>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d002      	beq.n	800725c <HAL_ADC_Start_DMA+0x98>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	e000      	b.n	800725e <HAL_ADC_Start_DMA+0x9a>
 800725c:	4b33      	ldr	r3, [pc, #204]	; (800732c <HAL_ADC_Start_DMA+0x168>)
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	6812      	ldr	r2, [r2, #0]
 8007262:	4293      	cmp	r3, r2
 8007264:	d002      	beq.n	800726c <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d105      	bne.n	8007278 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007270:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800727c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007288:	f023 0206 	bic.w	r2, r3, #6
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	659a      	str	r2, [r3, #88]	; 0x58
 8007290:	e002      	b.n	8007298 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2200      	movs	r2, #0
 8007296:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800729c:	4a28      	ldr	r2, [pc, #160]	; (8007340 <HAL_ADC_Start_DMA+0x17c>)
 800729e:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072a4:	4a27      	ldr	r2, [pc, #156]	; (8007344 <HAL_ADC_Start_DMA+0x180>)
 80072a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072ac:	4a26      	ldr	r2, [pc, #152]	; (8007348 <HAL_ADC_Start_DMA+0x184>)
 80072ae:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	221c      	movs	r2, #28
 80072b6:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	685a      	ldr	r2, [r3, #4]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f042 0210 	orr.w	r2, r2, #16
 80072ce:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d8:	4619      	mov	r1, r3
 80072da:	4610      	mov	r0, r2
 80072dc:	f7ff fc89 	bl	8006bf2 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	3340      	adds	r3, #64	; 0x40
 80072ea:	4619      	mov	r1, r3
 80072ec:	68ba      	ldr	r2, [r7, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f002 f80e 	bl	8009310 <HAL_DMA_Start_IT>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4618      	mov	r0, r3
 80072fe:	f7ff fd85 	bl	8006e0c <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8007302:	e00d      	b.n	8007320 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	2200      	movs	r2, #0
 8007308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 800730c:	e008      	b.n	8007320 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800731a:	e001      	b.n	8007320 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800731c:	2302      	movs	r3, #2
 800731e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	40022000 	.word	0x40022000
 8007330:	40022100 	.word	0x40022100
 8007334:	40022300 	.word	0x40022300
 8007338:	58026300 	.word	0x58026300
 800733c:	fffff0fe 	.word	0xfffff0fe
 8007340:	08007c13 	.word	0x08007c13
 8007344:	08007ceb 	.word	0x08007ceb
 8007348:	08007d07 	.word	0x08007d07

0800734c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800734c:	b480      	push	{r7}
 800734e:	b083      	sub	sp, #12
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8007354:	bf00      	nop
 8007356:	370c      	adds	r7, #12
 8007358:	46bd      	mov	sp, r7
 800735a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735e:	4770      	bx	lr

08007360 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007360:	b480      	push	{r7}
 8007362:	b083      	sub	sp, #12
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8007368:	bf00      	nop
 800736a:	370c      	adds	r7, #12
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr

08007374 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007374:	b480      	push	{r7}
 8007376:	b083      	sub	sp, #12
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8007388:	b590      	push	{r4, r7, lr}
 800738a:	b0a1      	sub	sp, #132	; 0x84
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007392:	2300      	movs	r3, #0
 8007394:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8007398:	2300      	movs	r3, #0
 800739a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	4a65      	ldr	r2, [pc, #404]	; (8007538 <HAL_ADC_ConfigChannel+0x1b0>)
 80073a2:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d101      	bne.n	80073b2 <HAL_ADC_ConfigChannel+0x2a>
 80073ae:	2302      	movs	r3, #2
 80073b0:	e32e      	b.n	8007a10 <HAL_ADC_ConfigChannel+0x688>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7ff fd38 	bl	8006e34 <LL_ADC_REG_IsConversionOngoing>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	f040 8313 	bne.w	80079f2 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	db2c      	blt.n	800742e <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d108      	bne.n	80073f2 <HAL_ADC_ConfigChannel+0x6a>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	0e9b      	lsrs	r3, r3, #26
 80073e6:	f003 031f 	and.w	r3, r3, #31
 80073ea:	2201      	movs	r2, #1
 80073ec:	fa02 f303 	lsl.w	r3, r2, r3
 80073f0:	e016      	b.n	8007420 <HAL_ADC_ConfigChannel+0x98>
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073fa:	fa93 f3a3 	rbit	r3, r3
 80073fe:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007400:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007402:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8007404:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007406:	2b00      	cmp	r3, #0
 8007408:	d101      	bne.n	800740e <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800740a:	2320      	movs	r3, #32
 800740c:	e003      	b.n	8007416 <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 800740e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007410:	fab3 f383 	clz	r3, r3
 8007414:	b2db      	uxtb	r3, r3
 8007416:	f003 031f 	and.w	r3, r3, #31
 800741a:	2201      	movs	r2, #1
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	6812      	ldr	r2, [r2, #0]
 8007424:	69d1      	ldr	r1, [r2, #28]
 8007426:	687a      	ldr	r2, [r7, #4]
 8007428:	6812      	ldr	r2, [r2, #0]
 800742a:	430b      	orrs	r3, r1
 800742c:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	6859      	ldr	r1, [r3, #4]
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	461a      	mov	r2, r3
 800743c:	f7ff fbad 	bl	8006b9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4618      	mov	r0, r3
 8007446:	f7ff fcf5 	bl	8006e34 <LL_ADC_REG_IsConversionOngoing>
 800744a:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f7ff fd02 	bl	8006e5a <LL_ADC_INJ_IsConversionOngoing>
 8007456:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 80b8 	bne.w	80075d0 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007460:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007462:	2b00      	cmp	r3, #0
 8007464:	f040 80b4 	bne.w	80075d0 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	6818      	ldr	r0, [r3, #0]
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	6819      	ldr	r1, [r3, #0]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	689b      	ldr	r3, [r3, #8]
 8007474:	461a      	mov	r2, r3
 8007476:	f7ff fbcf 	bl	8006c18 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800747a:	4b30      	ldr	r3, [pc, #192]	; (800753c <HAL_ADC_ConfigChannel+0x1b4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007482:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007486:	d10b      	bne.n	80074a0 <HAL_ADC_ConfigChannel+0x118>
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	695a      	ldr	r2, [r3, #20]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	68db      	ldr	r3, [r3, #12]
 8007492:	089b      	lsrs	r3, r3, #2
 8007494:	f003 0307 	and.w	r3, r3, #7
 8007498:	005b      	lsls	r3, r3, #1
 800749a:	fa02 f303 	lsl.w	r3, r2, r3
 800749e:	e01d      	b.n	80074dc <HAL_ADC_ConfigChannel+0x154>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	68db      	ldr	r3, [r3, #12]
 80074a6:	f003 0310 	and.w	r3, r3, #16
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10b      	bne.n	80074c6 <HAL_ADC_ConfigChannel+0x13e>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	695a      	ldr	r2, [r3, #20]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	089b      	lsrs	r3, r3, #2
 80074ba:	f003 0307 	and.w	r3, r3, #7
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	fa02 f303 	lsl.w	r3, r2, r3
 80074c4:	e00a      	b.n	80074dc <HAL_ADC_ConfigChannel+0x154>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	695a      	ldr	r2, [r3, #20]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68db      	ldr	r3, [r3, #12]
 80074d0:	089b      	lsrs	r3, r3, #2
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	005b      	lsls	r3, r3, #1
 80074d8:	fa02 f303 	lsl.w	r3, r2, r3
 80074dc:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	691b      	ldr	r3, [r3, #16]
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	d02c      	beq.n	8007540 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	6919      	ldr	r1, [r3, #16]
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074f4:	f7ff faea 	bl	8006acc <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	6818      	ldr	r0, [r3, #0]
 80074fc:	683b      	ldr	r3, [r7, #0]
 80074fe:	6919      	ldr	r1, [r3, #16]
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	7e5b      	ldrb	r3, [r3, #25]
 8007504:	2b01      	cmp	r3, #1
 8007506:	d102      	bne.n	800750e <HAL_ADC_ConfigChannel+0x186>
 8007508:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800750c:	e000      	b.n	8007510 <HAL_ADC_ConfigChannel+0x188>
 800750e:	2300      	movs	r3, #0
 8007510:	461a      	mov	r2, r3
 8007512:	f7ff fb14 	bl	8006b3e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6818      	ldr	r0, [r3, #0]
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	6919      	ldr	r1, [r3, #16]
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	7e1b      	ldrb	r3, [r3, #24]
 8007522:	2b01      	cmp	r3, #1
 8007524:	d102      	bne.n	800752c <HAL_ADC_ConfigChannel+0x1a4>
 8007526:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800752a:	e000      	b.n	800752e <HAL_ADC_ConfigChannel+0x1a6>
 800752c:	2300      	movs	r3, #0
 800752e:	461a      	mov	r2, r3
 8007530:	f7ff faec 	bl	8006b0c <LL_ADC_SetDataRightShift>
 8007534:	e04c      	b.n	80075d0 <HAL_ADC_ConfigChannel+0x248>
 8007536:	bf00      	nop
 8007538:	47ff0000 	.word	0x47ff0000
 800753c:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007546:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	069b      	lsls	r3, r3, #26
 8007550:	429a      	cmp	r2, r3
 8007552:	d107      	bne.n	8007564 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007562:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800756a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	069b      	lsls	r3, r3, #26
 8007574:	429a      	cmp	r2, r3
 8007576:	d107      	bne.n	8007588 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8007586:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800758e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	069b      	lsls	r3, r3, #26
 8007598:	429a      	cmp	r2, r3
 800759a:	d107      	bne.n	80075ac <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80075aa:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	069b      	lsls	r3, r3, #26
 80075bc:	429a      	cmp	r2, r3
 80075be:	d107      	bne.n	80075d0 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80075ce:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7ff fbf3 	bl	8006dc0 <LL_ADC_IsEnabled>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f040 8211 	bne.w	8007a04 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6818      	ldr	r0, [r3, #0]
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	6819      	ldr	r1, [r3, #0]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68db      	ldr	r3, [r3, #12]
 80075ee:	461a      	mov	r2, r3
 80075f0:	f7ff fb3e 	bl	8006c70 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	4aa1      	ldr	r2, [pc, #644]	; (8007880 <HAL_ADC_ConfigChannel+0x4f8>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	f040 812e 	bne.w	800785c <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800760c:	2b00      	cmp	r3, #0
 800760e:	d10b      	bne.n	8007628 <HAL_ADC_ConfigChannel+0x2a0>
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	0e9b      	lsrs	r3, r3, #26
 8007616:	3301      	adds	r3, #1
 8007618:	f003 031f 	and.w	r3, r3, #31
 800761c:	2b09      	cmp	r3, #9
 800761e:	bf94      	ite	ls
 8007620:	2301      	movls	r3, #1
 8007622:	2300      	movhi	r3, #0
 8007624:	b2db      	uxtb	r3, r3
 8007626:	e019      	b.n	800765c <HAL_ADC_ConfigChannel+0x2d4>
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800762e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007630:	fa93 f3a3 	rbit	r3, r3
 8007634:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8007636:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007638:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800763a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8007640:	2320      	movs	r3, #32
 8007642:	e003      	b.n	800764c <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8007644:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007646:	fab3 f383 	clz	r3, r3
 800764a:	b2db      	uxtb	r3, r3
 800764c:	3301      	adds	r3, #1
 800764e:	f003 031f 	and.w	r3, r3, #31
 8007652:	2b09      	cmp	r3, #9
 8007654:	bf94      	ite	ls
 8007656:	2301      	movls	r3, #1
 8007658:	2300      	movhi	r3, #0
 800765a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800765c:	2b00      	cmp	r3, #0
 800765e:	d079      	beq.n	8007754 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007668:	2b00      	cmp	r3, #0
 800766a:	d107      	bne.n	800767c <HAL_ADC_ConfigChannel+0x2f4>
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	0e9b      	lsrs	r3, r3, #26
 8007672:	3301      	adds	r3, #1
 8007674:	069b      	lsls	r3, r3, #26
 8007676:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800767a:	e015      	b.n	80076a8 <HAL_ADC_ConfigChannel+0x320>
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007684:	fa93 f3a3 	rbit	r3, r3
 8007688:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800768a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800768c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800768e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007690:	2b00      	cmp	r3, #0
 8007692:	d101      	bne.n	8007698 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8007694:	2320      	movs	r3, #32
 8007696:	e003      	b.n	80076a0 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8007698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800769a:	fab3 f383 	clz	r3, r3
 800769e:	b2db      	uxtb	r3, r3
 80076a0:	3301      	adds	r3, #1
 80076a2:	069b      	lsls	r3, r3, #26
 80076a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d109      	bne.n	80076c8 <HAL_ADC_ConfigChannel+0x340>
 80076b4:	683b      	ldr	r3, [r7, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	0e9b      	lsrs	r3, r3, #26
 80076ba:	3301      	adds	r3, #1
 80076bc:	f003 031f 	and.w	r3, r3, #31
 80076c0:	2101      	movs	r1, #1
 80076c2:	fa01 f303 	lsl.w	r3, r1, r3
 80076c6:	e017      	b.n	80076f8 <HAL_ADC_ConfigChannel+0x370>
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80076ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d0:	fa93 f3a3 	rbit	r3, r3
 80076d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80076d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076d8:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80076da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d101      	bne.n	80076e4 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80076e0:	2320      	movs	r3, #32
 80076e2:	e003      	b.n	80076ec <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80076e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80076e6:	fab3 f383 	clz	r3, r3
 80076ea:	b2db      	uxtb	r3, r3
 80076ec:	3301      	adds	r3, #1
 80076ee:	f003 031f 	and.w	r3, r3, #31
 80076f2:	2101      	movs	r1, #1
 80076f4:	fa01 f303 	lsl.w	r3, r1, r3
 80076f8:	ea42 0103 	orr.w	r1, r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10a      	bne.n	800771e <HAL_ADC_ConfigChannel+0x396>
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	0e9b      	lsrs	r3, r3, #26
 800770e:	3301      	adds	r3, #1
 8007710:	f003 021f 	and.w	r2, r3, #31
 8007714:	4613      	mov	r3, r2
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	4413      	add	r3, r2
 800771a:	051b      	lsls	r3, r3, #20
 800771c:	e018      	b.n	8007750 <HAL_ADC_ConfigChannel+0x3c8>
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007726:	fa93 f3a3 	rbit	r3, r3
 800772a:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8007730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007732:	2b00      	cmp	r3, #0
 8007734:	d101      	bne.n	800773a <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 8007736:	2320      	movs	r3, #32
 8007738:	e003      	b.n	8007742 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800773a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800773c:	fab3 f383 	clz	r3, r3
 8007740:	b2db      	uxtb	r3, r3
 8007742:	3301      	adds	r3, #1
 8007744:	f003 021f 	and.w	r2, r3, #31
 8007748:	4613      	mov	r3, r2
 800774a:	005b      	lsls	r3, r3, #1
 800774c:	4413      	add	r3, r2
 800774e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007750:	430b      	orrs	r3, r1
 8007752:	e07e      	b.n	8007852 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800775c:	2b00      	cmp	r3, #0
 800775e:	d107      	bne.n	8007770 <HAL_ADC_ConfigChannel+0x3e8>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	0e9b      	lsrs	r3, r3, #26
 8007766:	3301      	adds	r3, #1
 8007768:	069b      	lsls	r3, r3, #26
 800776a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800776e:	e015      	b.n	800779c <HAL_ADC_ConfigChannel+0x414>
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007778:	fa93 f3a3 	rbit	r3, r3
 800777c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800777e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007780:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8007782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007784:	2b00      	cmp	r3, #0
 8007786:	d101      	bne.n	800778c <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 8007788:	2320      	movs	r3, #32
 800778a:	e003      	b.n	8007794 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 800778c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800778e:	fab3 f383 	clz	r3, r3
 8007792:	b2db      	uxtb	r3, r3
 8007794:	3301      	adds	r3, #1
 8007796:	069b      	lsls	r3, r3, #26
 8007798:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d109      	bne.n	80077bc <HAL_ADC_ConfigChannel+0x434>
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	0e9b      	lsrs	r3, r3, #26
 80077ae:	3301      	adds	r3, #1
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	2101      	movs	r1, #1
 80077b6:	fa01 f303 	lsl.w	r3, r1, r3
 80077ba:	e017      	b.n	80077ec <HAL_ADC_ConfigChannel+0x464>
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077c2:	69fb      	ldr	r3, [r7, #28]
 80077c4:	fa93 f3a3 	rbit	r3, r3
 80077c8:	61bb      	str	r3, [r7, #24]
  return result;
 80077ca:	69bb      	ldr	r3, [r7, #24]
 80077cc:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80077ce:	6a3b      	ldr	r3, [r7, #32]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d101      	bne.n	80077d8 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80077d4:	2320      	movs	r3, #32
 80077d6:	e003      	b.n	80077e0 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	fab3 f383 	clz	r3, r3
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	3301      	adds	r3, #1
 80077e2:	f003 031f 	and.w	r3, r3, #31
 80077e6:	2101      	movs	r1, #1
 80077e8:	fa01 f303 	lsl.w	r3, r1, r3
 80077ec:	ea42 0103 	orr.w	r1, r2, r3
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d10d      	bne.n	8007818 <HAL_ADC_ConfigChannel+0x490>
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	0e9b      	lsrs	r3, r3, #26
 8007802:	3301      	adds	r3, #1
 8007804:	f003 021f 	and.w	r2, r3, #31
 8007808:	4613      	mov	r3, r2
 800780a:	005b      	lsls	r3, r3, #1
 800780c:	4413      	add	r3, r2
 800780e:	3b1e      	subs	r3, #30
 8007810:	051b      	lsls	r3, r3, #20
 8007812:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007816:	e01b      	b.n	8007850 <HAL_ADC_ConfigChannel+0x4c8>
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	fa93 f3a3 	rbit	r3, r3
 8007824:	60fb      	str	r3, [r7, #12]
  return result;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800782a:	697b      	ldr	r3, [r7, #20]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8007830:	2320      	movs	r3, #32
 8007832:	e003      	b.n	800783c <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	fab3 f383 	clz	r3, r3
 800783a:	b2db      	uxtb	r3, r3
 800783c:	3301      	adds	r3, #1
 800783e:	f003 021f 	and.w	r2, r3, #31
 8007842:	4613      	mov	r3, r2
 8007844:	005b      	lsls	r3, r3, #1
 8007846:	4413      	add	r3, r2
 8007848:	3b1e      	subs	r3, #30
 800784a:	051b      	lsls	r3, r3, #20
 800784c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8007850:	430b      	orrs	r3, r1
 8007852:	683a      	ldr	r2, [r7, #0]
 8007854:	6892      	ldr	r2, [r2, #8]
 8007856:	4619      	mov	r1, r3
 8007858:	f7ff f9de 	bl	8006c18 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	f280 80cf 	bge.w	8007a04 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a06      	ldr	r2, [pc, #24]	; (8007884 <HAL_ADC_ConfigChannel+0x4fc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d004      	beq.n	800787a <HAL_ADC_ConfigChannel+0x4f2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a04      	ldr	r2, [pc, #16]	; (8007888 <HAL_ADC_ConfigChannel+0x500>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d10a      	bne.n	8007890 <HAL_ADC_ConfigChannel+0x508>
 800787a:	4b04      	ldr	r3, [pc, #16]	; (800788c <HAL_ADC_ConfigChannel+0x504>)
 800787c:	e009      	b.n	8007892 <HAL_ADC_ConfigChannel+0x50a>
 800787e:	bf00      	nop
 8007880:	47ff0000 	.word	0x47ff0000
 8007884:	40022000 	.word	0x40022000
 8007888:	40022100 	.word	0x40022100
 800788c:	40022300 	.word	0x40022300
 8007890:	4b61      	ldr	r3, [pc, #388]	; (8007a18 <HAL_ADC_ConfigChannel+0x690>)
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff f90c 	bl	8006ab0 <LL_ADC_GetCommonPathInternalCh>
 8007898:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a5f      	ldr	r2, [pc, #380]	; (8007a1c <HAL_ADC_ConfigChannel+0x694>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d004      	beq.n	80078ae <HAL_ADC_ConfigChannel+0x526>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a5d      	ldr	r2, [pc, #372]	; (8007a20 <HAL_ADC_ConfigChannel+0x698>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d10e      	bne.n	80078cc <HAL_ADC_ConfigChannel+0x544>
 80078ae:	485b      	ldr	r0, [pc, #364]	; (8007a1c <HAL_ADC_ConfigChannel+0x694>)
 80078b0:	f7ff fa86 	bl	8006dc0 <LL_ADC_IsEnabled>
 80078b4:	4604      	mov	r4, r0
 80078b6:	485a      	ldr	r0, [pc, #360]	; (8007a20 <HAL_ADC_ConfigChannel+0x698>)
 80078b8:	f7ff fa82 	bl	8006dc0 <LL_ADC_IsEnabled>
 80078bc:	4603      	mov	r3, r0
 80078be:	4323      	orrs	r3, r4
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	bf0c      	ite	eq
 80078c4:	2301      	moveq	r3, #1
 80078c6:	2300      	movne	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	e008      	b.n	80078de <HAL_ADC_ConfigChannel+0x556>
 80078cc:	4855      	ldr	r0, [pc, #340]	; (8007a24 <HAL_ADC_ConfigChannel+0x69c>)
 80078ce:	f7ff fa77 	bl	8006dc0 <LL_ADC_IsEnabled>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bf0c      	ite	eq
 80078d8:	2301      	moveq	r3, #1
 80078da:	2300      	movne	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d07d      	beq.n	80079de <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a50      	ldr	r2, [pc, #320]	; (8007a28 <HAL_ADC_ConfigChannel+0x6a0>)
 80078e8:	4293      	cmp	r3, r2
 80078ea:	d130      	bne.n	800794e <HAL_ADC_ConfigChannel+0x5c6>
 80078ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d12b      	bne.n	800794e <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a4a      	ldr	r2, [pc, #296]	; (8007a24 <HAL_ADC_ConfigChannel+0x69c>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	f040 8081 	bne.w	8007a04 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a45      	ldr	r2, [pc, #276]	; (8007a1c <HAL_ADC_ConfigChannel+0x694>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d004      	beq.n	8007916 <HAL_ADC_ConfigChannel+0x58e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a43      	ldr	r2, [pc, #268]	; (8007a20 <HAL_ADC_ConfigChannel+0x698>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d101      	bne.n	800791a <HAL_ADC_ConfigChannel+0x592>
 8007916:	4a45      	ldr	r2, [pc, #276]	; (8007a2c <HAL_ADC_ConfigChannel+0x6a4>)
 8007918:	e000      	b.n	800791c <HAL_ADC_ConfigChannel+0x594>
 800791a:	4a3f      	ldr	r2, [pc, #252]	; (8007a18 <HAL_ADC_ConfigChannel+0x690>)
 800791c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800791e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007922:	4619      	mov	r1, r3
 8007924:	4610      	mov	r0, r2
 8007926:	f7ff f8b0 	bl	8006a8a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800792a:	4b41      	ldr	r3, [pc, #260]	; (8007a30 <HAL_ADC_ConfigChannel+0x6a8>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	099b      	lsrs	r3, r3, #6
 8007930:	4a40      	ldr	r2, [pc, #256]	; (8007a34 <HAL_ADC_ConfigChannel+0x6ac>)
 8007932:	fba2 2303 	umull	r2, r3, r2, r3
 8007936:	099b      	lsrs	r3, r3, #6
 8007938:	3301      	adds	r3, #1
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800793e:	e002      	b.n	8007946 <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	3b01      	subs	r3, #1
 8007944:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8007946:	68bb      	ldr	r3, [r7, #8]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d1f9      	bne.n	8007940 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800794c:	e05a      	b.n	8007a04 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a39      	ldr	r2, [pc, #228]	; (8007a38 <HAL_ADC_ConfigChannel+0x6b0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d11e      	bne.n	8007996 <HAL_ADC_ConfigChannel+0x60e>
 8007958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800795a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d119      	bne.n	8007996 <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a2f      	ldr	r2, [pc, #188]	; (8007a24 <HAL_ADC_ConfigChannel+0x69c>)
 8007968:	4293      	cmp	r3, r2
 800796a:	d14b      	bne.n	8007a04 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a2a      	ldr	r2, [pc, #168]	; (8007a1c <HAL_ADC_ConfigChannel+0x694>)
 8007972:	4293      	cmp	r3, r2
 8007974:	d004      	beq.n	8007980 <HAL_ADC_ConfigChannel+0x5f8>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a29      	ldr	r2, [pc, #164]	; (8007a20 <HAL_ADC_ConfigChannel+0x698>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d101      	bne.n	8007984 <HAL_ADC_ConfigChannel+0x5fc>
 8007980:	4a2a      	ldr	r2, [pc, #168]	; (8007a2c <HAL_ADC_ConfigChannel+0x6a4>)
 8007982:	e000      	b.n	8007986 <HAL_ADC_ConfigChannel+0x5fe>
 8007984:	4a24      	ldr	r2, [pc, #144]	; (8007a18 <HAL_ADC_ConfigChannel+0x690>)
 8007986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007988:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f7ff f87b 	bl	8006a8a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007994:	e036      	b.n	8007a04 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a28      	ldr	r2, [pc, #160]	; (8007a3c <HAL_ADC_ConfigChannel+0x6b4>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d131      	bne.n	8007a04 <HAL_ADC_ConfigChannel+0x67c>
 80079a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d12c      	bne.n	8007a04 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	4a1d      	ldr	r2, [pc, #116]	; (8007a24 <HAL_ADC_ConfigChannel+0x69c>)
 80079b0:	4293      	cmp	r3, r2
 80079b2:	d127      	bne.n	8007a04 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4a18      	ldr	r2, [pc, #96]	; (8007a1c <HAL_ADC_ConfigChannel+0x694>)
 80079ba:	4293      	cmp	r3, r2
 80079bc:	d004      	beq.n	80079c8 <HAL_ADC_ConfigChannel+0x640>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a17      	ldr	r2, [pc, #92]	; (8007a20 <HAL_ADC_ConfigChannel+0x698>)
 80079c4:	4293      	cmp	r3, r2
 80079c6:	d101      	bne.n	80079cc <HAL_ADC_ConfigChannel+0x644>
 80079c8:	4a18      	ldr	r2, [pc, #96]	; (8007a2c <HAL_ADC_ConfigChannel+0x6a4>)
 80079ca:	e000      	b.n	80079ce <HAL_ADC_ConfigChannel+0x646>
 80079cc:	4a12      	ldr	r2, [pc, #72]	; (8007a18 <HAL_ADC_ConfigChannel+0x690>)
 80079ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80079d4:	4619      	mov	r1, r3
 80079d6:	4610      	mov	r0, r2
 80079d8:	f7ff f857 	bl	8006a8a <LL_ADC_SetCommonPathInternalCh>
 80079dc:	e012      	b.n	8007a04 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079e2:	f043 0220 	orr.w	r2, r3, #32
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80079f0:	e008      	b.n	8007a04 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80079f6:	f043 0220 	orr.w	r2, r3, #32
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8007a0c:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3784      	adds	r7, #132	; 0x84
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd90      	pop	{r4, r7, pc}
 8007a18:	58026300 	.word	0x58026300
 8007a1c:	40022000 	.word	0x40022000
 8007a20:	40022100 	.word	0x40022100
 8007a24:	58026000 	.word	0x58026000
 8007a28:	cb840000 	.word	0xcb840000
 8007a2c:	40022300 	.word	0x40022300
 8007a30:	240000c8 	.word	0x240000c8
 8007a34:	053e2d63 	.word	0x053e2d63
 8007a38:	c7520000 	.word	0xc7520000
 8007a3c:	cfb80000 	.word	0xcfb80000

08007a40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f7ff f9b7 	bl	8006dc0 <LL_ADC_IsEnabled>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d16e      	bne.n	8007b36 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	4b38      	ldr	r3, [pc, #224]	; (8007b40 <ADC_Enable+0x100>)
 8007a60:	4013      	ands	r3, r2
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d00d      	beq.n	8007a82 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a6a:	f043 0210 	orr.w	r2, r3, #16
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a76:	f043 0201 	orr.w	r2, r3, #1
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e05a      	b.n	8007b38 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f7ff f972 	bl	8006d70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8007a8c:	f7fe ffbc 	bl	8006a08 <HAL_GetTick>
 8007a90:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a2b      	ldr	r2, [pc, #172]	; (8007b44 <ADC_Enable+0x104>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d004      	beq.n	8007aa6 <ADC_Enable+0x66>
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a29      	ldr	r2, [pc, #164]	; (8007b48 <ADC_Enable+0x108>)
 8007aa2:	4293      	cmp	r3, r2
 8007aa4:	d101      	bne.n	8007aaa <ADC_Enable+0x6a>
 8007aa6:	4b29      	ldr	r3, [pc, #164]	; (8007b4c <ADC_Enable+0x10c>)
 8007aa8:	e000      	b.n	8007aac <ADC_Enable+0x6c>
 8007aaa:	4b29      	ldr	r3, [pc, #164]	; (8007b50 <ADC_Enable+0x110>)
 8007aac:	4618      	mov	r0, r3
 8007aae:	f7ff f903 	bl	8006cb8 <LL_ADC_GetMultimode>
 8007ab2:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a23      	ldr	r2, [pc, #140]	; (8007b48 <ADC_Enable+0x108>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d002      	beq.n	8007ac4 <ADC_Enable+0x84>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	e000      	b.n	8007ac6 <ADC_Enable+0x86>
 8007ac4:	4b1f      	ldr	r3, [pc, #124]	; (8007b44 <ADC_Enable+0x104>)
 8007ac6:	687a      	ldr	r2, [r7, #4]
 8007ac8:	6812      	ldr	r2, [r2, #0]
 8007aca:	4293      	cmp	r3, r2
 8007acc:	d02c      	beq.n	8007b28 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d130      	bne.n	8007b36 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007ad4:	e028      	b.n	8007b28 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f7ff f970 	bl	8006dc0 <LL_ADC_IsEnabled>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d104      	bne.n	8007af0 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7ff f940 	bl	8006d70 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8007af0:	f7fe ff8a 	bl	8006a08 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d914      	bls.n	8007b28 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f003 0301 	and.w	r3, r3, #1
 8007b08:	2b01      	cmp	r3, #1
 8007b0a:	d00d      	beq.n	8007b28 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b10:	f043 0210 	orr.w	r2, r3, #16
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b1c:	f043 0201 	orr.w	r2, r3, #1
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e007      	b.n	8007b38 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b01      	cmp	r3, #1
 8007b34:	d1cf      	bne.n	8007ad6 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007b36:	2300      	movs	r3, #0
}
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3710      	adds	r7, #16
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	8000003f 	.word	0x8000003f
 8007b44:	40022000 	.word	0x40022000
 8007b48:	40022100 	.word	0x40022100
 8007b4c:	40022300 	.word	0x40022300
 8007b50:	58026300 	.word	0x58026300

08007b54 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b084      	sub	sp, #16
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7ff f940 	bl	8006de6 <LL_ADC_IsDisableOngoing>
 8007b66:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7ff f927 	bl	8006dc0 <LL_ADC_IsEnabled>
 8007b72:	4603      	mov	r3, r0
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d047      	beq.n	8007c08 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d144      	bne.n	8007c08 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	f003 030d 	and.w	r3, r3, #13
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d10c      	bne.n	8007ba6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7ff f901 	bl	8006d98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8007b9e:	f7fe ff33 	bl	8006a08 <HAL_GetTick>
 8007ba2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007ba4:	e029      	b.n	8007bfa <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007baa:	f043 0210 	orr.w	r2, r3, #16
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb6:	f043 0201 	orr.w	r2, r3, #1
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e023      	b.n	8007c0a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8007bc2:	f7fe ff21 	bl	8006a08 <HAL_GetTick>
 8007bc6:	4602      	mov	r2, r0
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	1ad3      	subs	r3, r2, r3
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d914      	bls.n	8007bfa <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	689b      	ldr	r3, [r3, #8]
 8007bd6:	f003 0301 	and.w	r3, r3, #1
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00d      	beq.n	8007bfa <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be2:	f043 0210 	orr.w	r2, r3, #16
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bee:	f043 0201 	orr.w	r2, r3, #1
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e007      	b.n	8007c0a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	689b      	ldr	r3, [r3, #8]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1dc      	bne.n	8007bc2 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b084      	sub	sp, #16
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c1e:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d14b      	bne.n	8007cc4 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c30:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d021      	beq.n	8007c8a <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fe ff92 	bl	8006b74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8007c50:	4603      	mov	r3, r0
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d032      	beq.n	8007cbc <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68db      	ldr	r3, [r3, #12]
 8007c5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d12b      	bne.n	8007cbc <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c68:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d11f      	bne.n	8007cbc <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c80:	f043 0201 	orr.w	r2, r3, #1
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	655a      	str	r2, [r3, #84]	; 0x54
 8007c88:	e018      	b.n	8007cbc <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	68db      	ldr	r3, [r3, #12]
 8007c90:	f003 0303 	and.w	r3, r3, #3
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d111      	bne.n	8007cbc <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d105      	bne.n	8007cbc <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb4:	f043 0201 	orr.w	r2, r3, #1
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f7ff fb45 	bl	800734c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007cc2:	e00e      	b.n	8007ce2 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cc8:	f003 0310 	and.w	r3, r3, #16
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d003      	beq.n	8007cd8 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7ff fb4f 	bl	8007374 <HAL_ADC_ErrorCallback>
}
 8007cd6:	e004      	b.n	8007ce2 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	4798      	blx	r3
}
 8007ce2:	bf00      	nop
 8007ce4:	3710      	adds	r7, #16
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b084      	sub	sp, #16
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf6:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007cf8:	68f8      	ldr	r0, [r7, #12]
 8007cfa:	f7ff fb31 	bl	8007360 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007cfe:	bf00      	nop
 8007d00:	3710      	adds	r7, #16
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}

08007d06 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d06:	b580      	push	{r7, lr}
 8007d08:	b084      	sub	sp, #16
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d18:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d24:	f043 0204 	orr.w	r2, r3, #4
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007d2c:	68f8      	ldr	r0, [r7, #12]
 8007d2e:	f7ff fb21 	bl	8007374 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d32:	bf00      	nop
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}
	...

08007d3c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	4a7a      	ldr	r2, [pc, #488]	; (8007f34 <ADC_ConfigureBoostMode+0x1f8>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d004      	beq.n	8007d58 <ADC_ConfigureBoostMode+0x1c>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	4a79      	ldr	r2, [pc, #484]	; (8007f38 <ADC_ConfigureBoostMode+0x1fc>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d109      	bne.n	8007d6c <ADC_ConfigureBoostMode+0x30>
 8007d58:	4b78      	ldr	r3, [pc, #480]	; (8007f3c <ADC_ConfigureBoostMode+0x200>)
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	bf14      	ite	ne
 8007d64:	2301      	movne	r3, #1
 8007d66:	2300      	moveq	r3, #0
 8007d68:	b2db      	uxtb	r3, r3
 8007d6a:	e008      	b.n	8007d7e <ADC_ConfigureBoostMode+0x42>
 8007d6c:	4b74      	ldr	r3, [pc, #464]	; (8007f40 <ADC_ConfigureBoostMode+0x204>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	bf14      	ite	ne
 8007d78:	2301      	movne	r3, #1
 8007d7a:	2300      	moveq	r3, #0
 8007d7c:	b2db      	uxtb	r3, r3
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01c      	beq.n	8007dbc <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8007d82:	f008 f941 	bl	8010008 <HAL_RCC_GetHCLKFreq>
 8007d86:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d90:	d010      	beq.n	8007db4 <ADC_ConfigureBoostMode+0x78>
 8007d92:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007d96:	d873      	bhi.n	8007e80 <ADC_ConfigureBoostMode+0x144>
 8007d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d9c:	d002      	beq.n	8007da4 <ADC_ConfigureBoostMode+0x68>
 8007d9e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007da2:	d16d      	bne.n	8007e80 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	0c1b      	lsrs	r3, r3, #16
 8007daa:	68fa      	ldr	r2, [r7, #12]
 8007dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db0:	60fb      	str	r3, [r7, #12]
        break;
 8007db2:	e068      	b.n	8007e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	089b      	lsrs	r3, r3, #2
 8007db8:	60fb      	str	r3, [r7, #12]
        break;
 8007dba:	e064      	b.n	8007e86 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8007dbc:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8007dc0:	f04f 0100 	mov.w	r1, #0
 8007dc4:	f009 fbc8 	bl	8011558 <HAL_RCCEx_GetPeriphCLKFreq>
 8007dc8:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007dd2:	d051      	beq.n	8007e78 <ADC_ConfigureBoostMode+0x13c>
 8007dd4:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8007dd8:	d854      	bhi.n	8007e84 <ADC_ConfigureBoostMode+0x148>
 8007dda:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007dde:	d047      	beq.n	8007e70 <ADC_ConfigureBoostMode+0x134>
 8007de0:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8007de4:	d84e      	bhi.n	8007e84 <ADC_ConfigureBoostMode+0x148>
 8007de6:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007dea:	d03d      	beq.n	8007e68 <ADC_ConfigureBoostMode+0x12c>
 8007dec:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8007df0:	d848      	bhi.n	8007e84 <ADC_ConfigureBoostMode+0x148>
 8007df2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007df6:	d033      	beq.n	8007e60 <ADC_ConfigureBoostMode+0x124>
 8007df8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dfc:	d842      	bhi.n	8007e84 <ADC_ConfigureBoostMode+0x148>
 8007dfe:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007e02:	d029      	beq.n	8007e58 <ADC_ConfigureBoostMode+0x11c>
 8007e04:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8007e08:	d83c      	bhi.n	8007e84 <ADC_ConfigureBoostMode+0x148>
 8007e0a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007e0e:	d01a      	beq.n	8007e46 <ADC_ConfigureBoostMode+0x10a>
 8007e10:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8007e14:	d836      	bhi.n	8007e84 <ADC_ConfigureBoostMode+0x148>
 8007e16:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007e1a:	d014      	beq.n	8007e46 <ADC_ConfigureBoostMode+0x10a>
 8007e1c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8007e20:	d830      	bhi.n	8007e84 <ADC_ConfigureBoostMode+0x148>
 8007e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e26:	d00e      	beq.n	8007e46 <ADC_ConfigureBoostMode+0x10a>
 8007e28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e2c:	d82a      	bhi.n	8007e84 <ADC_ConfigureBoostMode+0x148>
 8007e2e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e32:	d008      	beq.n	8007e46 <ADC_ConfigureBoostMode+0x10a>
 8007e34:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007e38:	d824      	bhi.n	8007e84 <ADC_ConfigureBoostMode+0x148>
 8007e3a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007e3e:	d002      	beq.n	8007e46 <ADC_ConfigureBoostMode+0x10a>
 8007e40:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007e44:	d11e      	bne.n	8007e84 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	685b      	ldr	r3, [r3, #4]
 8007e4a:	0c9b      	lsrs	r3, r3, #18
 8007e4c:	005b      	lsls	r3, r3, #1
 8007e4e:	68fa      	ldr	r2, [r7, #12]
 8007e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e54:	60fb      	str	r3, [r7, #12]
        break;
 8007e56:	e016      	b.n	8007e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	091b      	lsrs	r3, r3, #4
 8007e5c:	60fb      	str	r3, [r7, #12]
        break;
 8007e5e:	e012      	b.n	8007e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	60fb      	str	r3, [r7, #12]
        break;
 8007e66:	e00e      	b.n	8007e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	099b      	lsrs	r3, r3, #6
 8007e6c:	60fb      	str	r3, [r7, #12]
        break;
 8007e6e:	e00a      	b.n	8007e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	09db      	lsrs	r3, r3, #7
 8007e74:	60fb      	str	r3, [r7, #12]
        break;
 8007e76:	e006      	b.n	8007e86 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	0a1b      	lsrs	r3, r3, #8
 8007e7c:	60fb      	str	r3, [r7, #12]
        break;
 8007e7e:	e002      	b.n	8007e86 <ADC_ConfigureBoostMode+0x14a>
        break;
 8007e80:	bf00      	nop
 8007e82:	e000      	b.n	8007e86 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8007e84:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8007e86:	f7fe fdcb 	bl	8006a20 <HAL_GetREVID>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d815      	bhi.n	8007ec0 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	4a2b      	ldr	r2, [pc, #172]	; (8007f44 <ADC_ConfigureBoostMode+0x208>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d908      	bls.n	8007eae <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689a      	ldr	r2, [r3, #8]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007eaa:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8007eac:	e03e      	b.n	8007f2c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	689a      	ldr	r2, [r3, #8]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ebc:	609a      	str	r2, [r3, #8]
}
 8007ebe:	e035      	b.n	8007f2c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	085b      	lsrs	r3, r3, #1
 8007ec4:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	4a1f      	ldr	r2, [pc, #124]	; (8007f48 <ADC_ConfigureBoostMode+0x20c>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d808      	bhi.n	8007ee0 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	689a      	ldr	r2, [r3, #8]
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007edc:	609a      	str	r2, [r3, #8]
}
 8007ede:	e025      	b.n	8007f2c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4a1a      	ldr	r2, [pc, #104]	; (8007f4c <ADC_ConfigureBoostMode+0x210>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d80a      	bhi.n	8007efe <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007efa:	609a      	str	r2, [r3, #8]
}
 8007efc:	e016      	b.n	8007f2c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	4a13      	ldr	r2, [pc, #76]	; (8007f50 <ADC_ConfigureBoostMode+0x214>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d80a      	bhi.n	8007f1c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	689b      	ldr	r3, [r3, #8]
 8007f0c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f18:	609a      	str	r2, [r3, #8]
}
 8007f1a:	e007      	b.n	8007f2c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	689a      	ldr	r2, [r3, #8]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8007f2a:	609a      	str	r2, [r3, #8]
}
 8007f2c:	bf00      	nop
 8007f2e:	3710      	adds	r7, #16
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}
 8007f34:	40022000 	.word	0x40022000
 8007f38:	40022100 	.word	0x40022100
 8007f3c:	40022300 	.word	0x40022300
 8007f40:	58026300 	.word	0x58026300
 8007f44:	01312d00 	.word	0x01312d00
 8007f48:	005f5e10 	.word	0x005f5e10
 8007f4c:	00bebc20 	.word	0x00bebc20
 8007f50:	017d7840 	.word	0x017d7840

08007f54 <LL_ADC_IsEnabled>:
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	f003 0301 	and.w	r3, r3, #1
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d101      	bne.n	8007f6c <LL_ADC_IsEnabled+0x18>
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e000      	b.n	8007f6e <LL_ADC_IsEnabled+0x1a>
 8007f6c:	2300      	movs	r3, #0
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	370c      	adds	r7, #12
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
	...

08007f7c <LL_ADC_StartCalibration>:
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b085      	sub	sp, #20
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	60b9      	str	r1, [r7, #8]
 8007f86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	689a      	ldr	r2, [r3, #8]
 8007f8c:	4b09      	ldr	r3, [pc, #36]	; (8007fb4 <LL_ADC_StartCalibration+0x38>)
 8007f8e:	4013      	ands	r3, r2
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8007f9c:	430a      	orrs	r2, r1
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	609a      	str	r2, [r3, #8]
}
 8007fa8:	bf00      	nop
 8007faa:	3714      	adds	r7, #20
 8007fac:	46bd      	mov	sp, r7
 8007fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb2:	4770      	bx	lr
 8007fb4:	3ffeffc0 	.word	0x3ffeffc0

08007fb8 <LL_ADC_IsCalibrationOnGoing>:
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b083      	sub	sp, #12
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fcc:	d101      	bne.n	8007fd2 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	370c      	adds	r7, #12
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr

08007fe0 <LL_ADC_REG_IsConversionOngoing>:
{
 8007fe0:	b480      	push	{r7}
 8007fe2:	b083      	sub	sp, #12
 8007fe4:	af00      	add	r7, sp, #0
 8007fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	689b      	ldr	r3, [r3, #8]
 8007fec:	f003 0304 	and.w	r3, r3, #4
 8007ff0:	2b04      	cmp	r3, #4
 8007ff2:	d101      	bne.n	8007ff8 <LL_ADC_REG_IsConversionOngoing+0x18>
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e000      	b.n	8007ffa <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007ff8:	2300      	movs	r3, #0
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	370c      	adds	r7, #12
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
	...

08008008 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	60b9      	str	r1, [r7, #8]
 8008012:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8008014:	2300      	movs	r3, #0
 8008016:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800801e:	2b01      	cmp	r3, #1
 8008020:	d101      	bne.n	8008026 <HAL_ADCEx_Calibration_Start+0x1e>
 8008022:	2302      	movs	r3, #2
 8008024:	e04c      	b.n	80080c0 <HAL_ADCEx_Calibration_Start+0xb8>
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	2201      	movs	r2, #1
 800802a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff fd90 	bl	8007b54 <ADC_Disable>
 8008034:	4603      	mov	r3, r0
 8008036:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8008038:	7dfb      	ldrb	r3, [r7, #23]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d135      	bne.n	80080aa <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008042:	4b21      	ldr	r3, [pc, #132]	; (80080c8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8008044:	4013      	ands	r3, r2
 8008046:	f043 0202 	orr.w	r2, r3, #2
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	68b9      	ldr	r1, [r7, #8]
 8008056:	4618      	mov	r0, r3
 8008058:	f7ff ff90 	bl	8007f7c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800805c:	e014      	b.n	8008088 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	3301      	adds	r3, #1
 8008062:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	4a19      	ldr	r2, [pc, #100]	; (80080cc <HAL_ADCEx_Calibration_Start+0xc4>)
 8008068:	4293      	cmp	r3, r2
 800806a:	d30d      	bcc.n	8008088 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008070:	f023 0312 	bic.w	r3, r3, #18
 8008074:	f043 0210 	orr.w	r2, r3, #16
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	2200      	movs	r2, #0
 8008080:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e01b      	b.n	80080c0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4618      	mov	r0, r3
 800808e:	f7ff ff93 	bl	8007fb8 <LL_ADC_IsCalibrationOnGoing>
 8008092:	4603      	mov	r3, r0
 8008094:	2b00      	cmp	r3, #0
 8008096:	d1e2      	bne.n	800805e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800809c:	f023 0303 	bic.w	r3, r3, #3
 80080a0:	f043 0201 	orr.w	r2, r3, #1
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	655a      	str	r2, [r3, #84]	; 0x54
 80080a8:	e005      	b.n	80080b6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ae:	f043 0210 	orr.w	r2, r3, #16
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80080be:	7dfb      	ldrb	r3, [r7, #23]
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3718      	adds	r7, #24
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}
 80080c8:	ffffeefd 	.word	0xffffeefd
 80080cc:	25c3f800 	.word	0x25c3f800

080080d0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80080d0:	b590      	push	{r4, r7, lr}
 80080d2:	b09f      	sub	sp, #124	; 0x7c
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80080da:	2300      	movs	r3, #0
 80080dc:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d101      	bne.n	80080ee <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80080ea:	2302      	movs	r3, #2
 80080ec:	e0be      	b.n	800826c <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 80080f6:	2300      	movs	r3, #0
 80080f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 80080fa:	2300      	movs	r3, #0
 80080fc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4a5c      	ldr	r2, [pc, #368]	; (8008274 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008104:	4293      	cmp	r3, r2
 8008106:	d102      	bne.n	800810e <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8008108:	4b5b      	ldr	r3, [pc, #364]	; (8008278 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800810a:	60bb      	str	r3, [r7, #8]
 800810c:	e001      	b.n	8008112 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800810e:	2300      	movs	r3, #0
 8008110:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10b      	bne.n	8008130 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800811c:	f043 0220 	orr.w	r2, r3, #32
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 800812c:	2301      	movs	r3, #1
 800812e:	e09d      	b.n	800826c <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008130:	68bb      	ldr	r3, [r7, #8]
 8008132:	4618      	mov	r0, r3
 8008134:	f7ff ff54 	bl	8007fe0 <LL_ADC_REG_IsConversionOngoing>
 8008138:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4618      	mov	r0, r3
 8008140:	f7ff ff4e 	bl	8007fe0 <LL_ADC_REG_IsConversionOngoing>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d17f      	bne.n	800824a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800814a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800814c:	2b00      	cmp	r3, #0
 800814e:	d17c      	bne.n	800824a <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a47      	ldr	r2, [pc, #284]	; (8008274 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d004      	beq.n	8008164 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a46      	ldr	r2, [pc, #280]	; (8008278 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d101      	bne.n	8008168 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8008164:	4b45      	ldr	r3, [pc, #276]	; (800827c <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 8008166:	e000      	b.n	800816a <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 8008168:	4b45      	ldr	r3, [pc, #276]	; (8008280 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800816a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800816c:	683b      	ldr	r3, [r7, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	2b00      	cmp	r3, #0
 8008172:	d039      	beq.n	80081e8 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8008174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008176:	689b      	ldr	r3, [r3, #8]
 8008178:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800817c:	683b      	ldr	r3, [r7, #0]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	431a      	orrs	r2, r3
 8008182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008184:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a3a      	ldr	r2, [pc, #232]	; (8008274 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d004      	beq.n	800819a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a38      	ldr	r2, [pc, #224]	; (8008278 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d10e      	bne.n	80081b8 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800819a:	4836      	ldr	r0, [pc, #216]	; (8008274 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800819c:	f7ff feda 	bl	8007f54 <LL_ADC_IsEnabled>
 80081a0:	4604      	mov	r4, r0
 80081a2:	4835      	ldr	r0, [pc, #212]	; (8008278 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80081a4:	f7ff fed6 	bl	8007f54 <LL_ADC_IsEnabled>
 80081a8:	4603      	mov	r3, r0
 80081aa:	4323      	orrs	r3, r4
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	bf0c      	ite	eq
 80081b0:	2301      	moveq	r3, #1
 80081b2:	2300      	movne	r3, #0
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	e008      	b.n	80081ca <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80081b8:	4832      	ldr	r0, [pc, #200]	; (8008284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80081ba:	f7ff fecb 	bl	8007f54 <LL_ADC_IsEnabled>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	bf0c      	ite	eq
 80081c4:	2301      	moveq	r3, #1
 80081c6:	2300      	movne	r3, #0
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d047      	beq.n	800825e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80081ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081d0:	689a      	ldr	r2, [r3, #8]
 80081d2:	4b2d      	ldr	r3, [pc, #180]	; (8008288 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80081d4:	4013      	ands	r3, r2
 80081d6:	683a      	ldr	r2, [r7, #0]
 80081d8:	6811      	ldr	r1, [r2, #0]
 80081da:	683a      	ldr	r2, [r7, #0]
 80081dc:	6892      	ldr	r2, [r2, #8]
 80081de:	430a      	orrs	r2, r1
 80081e0:	431a      	orrs	r2, r3
 80081e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80081e6:	e03a      	b.n	800825e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 80081e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081ea:	689b      	ldr	r3, [r3, #8]
 80081ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80081f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a1e      	ldr	r2, [pc, #120]	; (8008274 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d004      	beq.n	8008208 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a1d      	ldr	r2, [pc, #116]	; (8008278 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d10e      	bne.n	8008226 <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8008208:	481a      	ldr	r0, [pc, #104]	; (8008274 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800820a:	f7ff fea3 	bl	8007f54 <LL_ADC_IsEnabled>
 800820e:	4604      	mov	r4, r0
 8008210:	4819      	ldr	r0, [pc, #100]	; (8008278 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8008212:	f7ff fe9f 	bl	8007f54 <LL_ADC_IsEnabled>
 8008216:	4603      	mov	r3, r0
 8008218:	4323      	orrs	r3, r4
 800821a:	2b00      	cmp	r3, #0
 800821c:	bf0c      	ite	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	2300      	movne	r3, #0
 8008222:	b2db      	uxtb	r3, r3
 8008224:	e008      	b.n	8008238 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8008226:	4817      	ldr	r0, [pc, #92]	; (8008284 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8008228:	f7ff fe94 	bl	8007f54 <LL_ADC_IsEnabled>
 800822c:	4603      	mov	r3, r0
 800822e:	2b00      	cmp	r3, #0
 8008230:	bf0c      	ite	eq
 8008232:	2301      	moveq	r3, #1
 8008234:	2300      	movne	r3, #0
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d010      	beq.n	800825e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800823c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800823e:	689a      	ldr	r2, [r3, #8]
 8008240:	4b11      	ldr	r3, [pc, #68]	; (8008288 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8008242:	4013      	ands	r3, r2
 8008244:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008246:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008248:	e009      	b.n	800825e <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800824e:	f043 0220 	orr.w	r2, r3, #32
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8008256:	2301      	movs	r3, #1
 8008258:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 800825c:	e000      	b.n	8008260 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800825e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2200      	movs	r2, #0
 8008264:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8008268:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800826c:	4618      	mov	r0, r3
 800826e:	377c      	adds	r7, #124	; 0x7c
 8008270:	46bd      	mov	sp, r7
 8008272:	bd90      	pop	{r4, r7, pc}
 8008274:	40022000 	.word	0x40022000
 8008278:	40022100 	.word	0x40022100
 800827c:	40022300 	.word	0x40022300
 8008280:	58026300 	.word	0x58026300
 8008284:	58026000 	.word	0x58026000
 8008288:	fffff0e0 	.word	0xfffff0e0

0800828c <__NVIC_SetPriorityGrouping>:
{
 800828c:	b480      	push	{r7}
 800828e:	b085      	sub	sp, #20
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800829c:	4b0b      	ldr	r3, [pc, #44]	; (80082cc <__NVIC_SetPriorityGrouping+0x40>)
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80082a2:	68ba      	ldr	r2, [r7, #8]
 80082a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80082a8:	4013      	ands	r3, r2
 80082aa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80082b4:	4b06      	ldr	r3, [pc, #24]	; (80082d0 <__NVIC_SetPriorityGrouping+0x44>)
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80082ba:	4a04      	ldr	r2, [pc, #16]	; (80082cc <__NVIC_SetPriorityGrouping+0x40>)
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	60d3      	str	r3, [r2, #12]
}
 80082c0:	bf00      	nop
 80082c2:	3714      	adds	r7, #20
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	e000ed00 	.word	0xe000ed00
 80082d0:	05fa0000 	.word	0x05fa0000

080082d4 <__NVIC_GetPriorityGrouping>:
{
 80082d4:	b480      	push	{r7}
 80082d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80082d8:	4b04      	ldr	r3, [pc, #16]	; (80082ec <__NVIC_GetPriorityGrouping+0x18>)
 80082da:	68db      	ldr	r3, [r3, #12]
 80082dc:	0a1b      	lsrs	r3, r3, #8
 80082de:	f003 0307 	and.w	r3, r3, #7
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	e000ed00 	.word	0xe000ed00

080082f0 <__NVIC_EnableIRQ>:
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80082fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	db0b      	blt.n	800831a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008302:	88fb      	ldrh	r3, [r7, #6]
 8008304:	f003 021f 	and.w	r2, r3, #31
 8008308:	4907      	ldr	r1, [pc, #28]	; (8008328 <__NVIC_EnableIRQ+0x38>)
 800830a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800830e:	095b      	lsrs	r3, r3, #5
 8008310:	2001      	movs	r0, #1
 8008312:	fa00 f202 	lsl.w	r2, r0, r2
 8008316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	e000e100 	.word	0xe000e100

0800832c <__NVIC_SetPriority>:
{
 800832c:	b480      	push	{r7}
 800832e:	b083      	sub	sp, #12
 8008330:	af00      	add	r7, sp, #0
 8008332:	4603      	mov	r3, r0
 8008334:	6039      	str	r1, [r7, #0]
 8008336:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8008338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800833c:	2b00      	cmp	r3, #0
 800833e:	db0a      	blt.n	8008356 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	b2da      	uxtb	r2, r3
 8008344:	490c      	ldr	r1, [pc, #48]	; (8008378 <__NVIC_SetPriority+0x4c>)
 8008346:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800834a:	0112      	lsls	r2, r2, #4
 800834c:	b2d2      	uxtb	r2, r2
 800834e:	440b      	add	r3, r1
 8008350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008354:	e00a      	b.n	800836c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	b2da      	uxtb	r2, r3
 800835a:	4908      	ldr	r1, [pc, #32]	; (800837c <__NVIC_SetPriority+0x50>)
 800835c:	88fb      	ldrh	r3, [r7, #6]
 800835e:	f003 030f 	and.w	r3, r3, #15
 8008362:	3b04      	subs	r3, #4
 8008364:	0112      	lsls	r2, r2, #4
 8008366:	b2d2      	uxtb	r2, r2
 8008368:	440b      	add	r3, r1
 800836a:	761a      	strb	r2, [r3, #24]
}
 800836c:	bf00      	nop
 800836e:	370c      	adds	r7, #12
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr
 8008378:	e000e100 	.word	0xe000e100
 800837c:	e000ed00 	.word	0xe000ed00

08008380 <NVIC_EncodePriority>:
{
 8008380:	b480      	push	{r7}
 8008382:	b089      	sub	sp, #36	; 0x24
 8008384:	af00      	add	r7, sp, #0
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	f003 0307 	and.w	r3, r3, #7
 8008392:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008394:	69fb      	ldr	r3, [r7, #28]
 8008396:	f1c3 0307 	rsb	r3, r3, #7
 800839a:	2b04      	cmp	r3, #4
 800839c:	bf28      	it	cs
 800839e:	2304      	movcs	r3, #4
 80083a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80083a2:	69fb      	ldr	r3, [r7, #28]
 80083a4:	3304      	adds	r3, #4
 80083a6:	2b06      	cmp	r3, #6
 80083a8:	d902      	bls.n	80083b0 <NVIC_EncodePriority+0x30>
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	3b03      	subs	r3, #3
 80083ae:	e000      	b.n	80083b2 <NVIC_EncodePriority+0x32>
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083b8:	69bb      	ldr	r3, [r7, #24]
 80083ba:	fa02 f303 	lsl.w	r3, r2, r3
 80083be:	43da      	mvns	r2, r3
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	401a      	ands	r2, r3
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80083c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80083cc:	697b      	ldr	r3, [r7, #20]
 80083ce:	fa01 f303 	lsl.w	r3, r1, r3
 80083d2:	43d9      	mvns	r1, r3
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80083d8:	4313      	orrs	r3, r2
}
 80083da:	4618      	mov	r0, r3
 80083dc:	3724      	adds	r7, #36	; 0x24
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80083e6:	b580      	push	{r7, lr}
 80083e8:	b082      	sub	sp, #8
 80083ea:	af00      	add	r7, sp, #0
 80083ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f7ff ff4c 	bl	800828c <__NVIC_SetPriorityGrouping>
}
 80083f4:	bf00      	nop
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af00      	add	r7, sp, #0
 8008402:	4603      	mov	r3, r0
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800840a:	f7ff ff63 	bl	80082d4 <__NVIC_GetPriorityGrouping>
 800840e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008410:	687a      	ldr	r2, [r7, #4]
 8008412:	68b9      	ldr	r1, [r7, #8]
 8008414:	6978      	ldr	r0, [r7, #20]
 8008416:	f7ff ffb3 	bl	8008380 <NVIC_EncodePriority>
 800841a:	4602      	mov	r2, r0
 800841c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8008420:	4611      	mov	r1, r2
 8008422:	4618      	mov	r0, r3
 8008424:	f7ff ff82 	bl	800832c <__NVIC_SetPriority>
}
 8008428:	bf00      	nop
 800842a:	3718      	adds	r7, #24
 800842c:	46bd      	mov	sp, r7
 800842e:	bd80      	pop	{r7, pc}

08008430 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	b082      	sub	sp, #8
 8008434:	af00      	add	r7, sp, #0
 8008436:	4603      	mov	r3, r0
 8008438:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800843a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800843e:	4618      	mov	r0, r3
 8008440:	f7ff ff56 	bl	80082f0 <__NVIC_EnableIRQ>
}
 8008444:	bf00      	nop
 8008446:	3708      	adds	r7, #8
 8008448:	46bd      	mov	sp, r7
 800844a:	bd80      	pop	{r7, pc}

0800844c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d101      	bne.n	800845e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800845a:	2301      	movs	r3, #1
 800845c:	e014      	b.n	8008488 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	791b      	ldrb	r3, [r3, #4]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	2b00      	cmp	r3, #0
 8008466:	d105      	bne.n	8008474 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800846e:	6878      	ldr	r0, [r7, #4]
 8008470:	f7f8 fbb8 	bl	8000be4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2202      	movs	r2, #2
 8008478:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2200      	movs	r2, #0
 800847e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	2201      	movs	r2, #1
 8008484:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008486:	2300      	movs	r3, #0
}
 8008488:	4618      	mov	r0, r3
 800848a:	3708      	adds	r7, #8
 800848c:	46bd      	mov	sp, r7
 800848e:	bd80      	pop	{r7, pc}

08008490 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d101      	bne.n	80084a4 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80084a0:	2301      	movs	r3, #1
 80084a2:	e046      	b.n	8008532 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	795b      	ldrb	r3, [r3, #5]
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d101      	bne.n	80084b0 <HAL_DAC_Start+0x20>
 80084ac:	2302      	movs	r3, #2
 80084ae:	e040      	b.n	8008532 <HAL_DAC_Start+0xa2>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2201      	movs	r2, #1
 80084b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2202      	movs	r2, #2
 80084ba:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	6819      	ldr	r1, [r3, #0]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	f003 0310 	and.w	r3, r3, #16
 80084c8:	2201      	movs	r2, #1
 80084ca:	409a      	lsls	r2, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	430a      	orrs	r2, r1
 80084d2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d10f      	bne.n	80084fa <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d11d      	bne.n	8008524 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	685a      	ldr	r2, [r3, #4]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f042 0201 	orr.w	r2, r2, #1
 80084f6:	605a      	str	r2, [r3, #4]
 80084f8:	e014      	b.n	8008524 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8008504:	683b      	ldr	r3, [r7, #0]
 8008506:	f003 0310 	and.w	r3, r3, #16
 800850a:	2102      	movs	r1, #2
 800850c:	fa01 f303 	lsl.w	r3, r1, r3
 8008510:	429a      	cmp	r2, r3
 8008512:	d107      	bne.n	8008524 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	685a      	ldr	r2, [r3, #4]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0202 	orr.w	r2, r2, #2
 8008522:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2201      	movs	r2, #1
 8008528:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
 800854c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d101      	bne.n	8008558 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8008554:	2301      	movs	r3, #1
 8008556:	e0a2      	b.n	800869e <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	795b      	ldrb	r3, [r3, #5]
 800855c:	2b01      	cmp	r3, #1
 800855e:	d101      	bne.n	8008564 <HAL_DAC_Start_DMA+0x24>
 8008560:	2302      	movs	r3, #2
 8008562:	e09c      	b.n	800869e <HAL_DAC_Start_DMA+0x15e>
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2201      	movs	r2, #1
 8008568:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2202      	movs	r2, #2
 800856e:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8008570:	68bb      	ldr	r3, [r7, #8]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d129      	bne.n	80085ca <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	4a4b      	ldr	r2, [pc, #300]	; (80086a8 <HAL_DAC_Start_DMA+0x168>)
 800857c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	689b      	ldr	r3, [r3, #8]
 8008582:	4a4a      	ldr	r2, [pc, #296]	; (80086ac <HAL_DAC_Start_DMA+0x16c>)
 8008584:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	4a49      	ldr	r2, [pc, #292]	; (80086b0 <HAL_DAC_Start_DMA+0x170>)
 800858c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800859c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800859e:	6a3b      	ldr	r3, [r7, #32]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d003      	beq.n	80085ac <HAL_DAC_Start_DMA+0x6c>
 80085a4:	6a3b      	ldr	r3, [r7, #32]
 80085a6:	2b04      	cmp	r3, #4
 80085a8:	d005      	beq.n	80085b6 <HAL_DAC_Start_DMA+0x76>
 80085aa:	e009      	b.n	80085c0 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3308      	adds	r3, #8
 80085b2:	613b      	str	r3, [r7, #16]
        break;
 80085b4:	e033      	b.n	800861e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	330c      	adds	r3, #12
 80085bc:	613b      	str	r3, [r7, #16]
        break;
 80085be:	e02e      	b.n	800861e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	3310      	adds	r3, #16
 80085c6:	613b      	str	r3, [r7, #16]
        break;
 80085c8:	e029      	b.n	800861e <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	68db      	ldr	r3, [r3, #12]
 80085ce:	4a39      	ldr	r2, [pc, #228]	; (80086b4 <HAL_DAC_Start_DMA+0x174>)
 80085d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	68db      	ldr	r3, [r3, #12]
 80085d6:	4a38      	ldr	r2, [pc, #224]	; (80086b8 <HAL_DAC_Start_DMA+0x178>)
 80085d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	4a37      	ldr	r2, [pc, #220]	; (80086bc <HAL_DAC_Start_DMA+0x17c>)
 80085e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80085f0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80085f2:	6a3b      	ldr	r3, [r7, #32]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d003      	beq.n	8008600 <HAL_DAC_Start_DMA+0xc0>
 80085f8:	6a3b      	ldr	r3, [r7, #32]
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d005      	beq.n	800860a <HAL_DAC_Start_DMA+0xca>
 80085fe:	e009      	b.n	8008614 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	3314      	adds	r3, #20
 8008606:	613b      	str	r3, [r7, #16]
        break;
 8008608:	e009      	b.n	800861e <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	3318      	adds	r3, #24
 8008610:	613b      	str	r3, [r7, #16]
        break;
 8008612:	e004      	b.n	800861e <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	331c      	adds	r3, #28
 800861a:	613b      	str	r3, [r7, #16]
        break;
 800861c:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d111      	bne.n	8008648 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	681a      	ldr	r2, [r3, #0]
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008632:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	6898      	ldr	r0, [r3, #8]
 8008638:	6879      	ldr	r1, [r7, #4]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	693a      	ldr	r2, [r7, #16]
 800863e:	f000 fe67 	bl	8009310 <HAL_DMA_Start_IT>
 8008642:	4603      	mov	r3, r0
 8008644:	75fb      	strb	r3, [r7, #23]
 8008646:	e010      	b.n	800866a <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008656:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	68d8      	ldr	r0, [r3, #12]
 800865c:	6879      	ldr	r1, [r7, #4]
 800865e:	683b      	ldr	r3, [r7, #0]
 8008660:	693a      	ldr	r2, [r7, #16]
 8008662:	f000 fe55 	bl	8009310 <HAL_DMA_Start_IT>
 8008666:	4603      	mov	r3, r0
 8008668:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	2200      	movs	r2, #0
 800866e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8008670:	7dfb      	ldrb	r3, [r7, #23]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d10c      	bne.n	8008690 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6819      	ldr	r1, [r3, #0]
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	f003 0310 	and.w	r3, r3, #16
 8008682:	2201      	movs	r2, #1
 8008684:	409a      	lsls	r2, r3
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	430a      	orrs	r2, r1
 800868c:	601a      	str	r2, [r3, #0]
 800868e:	e005      	b.n	800869c <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	691b      	ldr	r3, [r3, #16]
 8008694:	f043 0204 	orr.w	r2, r3, #4
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800869c:	7dfb      	ldrb	r3, [r7, #23]
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	08008b31 	.word	0x08008b31
 80086ac:	08008b53 	.word	0x08008b53
 80086b0:	08008b6f 	.word	0x08008b6f
 80086b4:	08008bed 	.word	0x08008bed
 80086b8:	08008c0f 	.word	0x08008c0f
 80086bc:	08008c2b 	.word	0x08008c2b

080086c0 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b082      	sub	sp, #8
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d101      	bne.n	80086d4 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80086d0:	2301      	movs	r3, #1
 80086d2:	e03e      	b.n	8008752 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	6819      	ldr	r1, [r3, #0]
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	f003 0310 	and.w	r3, r3, #16
 80086e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80086e4:	fa02 f303 	lsl.w	r3, r2, r3
 80086e8:	43da      	mvns	r2, r3
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	400a      	ands	r2, r1
 80086f0:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	6819      	ldr	r1, [r3, #0]
 80086f8:	683b      	ldr	r3, [r7, #0]
 80086fa:	f003 0310 	and.w	r3, r3, #16
 80086fe:	2201      	movs	r2, #1
 8008700:	fa02 f303 	lsl.w	r3, r2, r3
 8008704:	43da      	mvns	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	400a      	ands	r2, r1
 800870c:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d10d      	bne.n	8008730 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	4618      	mov	r0, r3
 800871a:	f001 f863 	bl	80097e4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	681a      	ldr	r2, [r3, #0]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800872c:	601a      	str	r2, [r3, #0]
 800872e:	e00c      	b.n	800874a <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	68db      	ldr	r3, [r3, #12]
 8008734:	4618      	mov	r0, r3
 8008736:	f001 f855 	bl	80097e4 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8008748:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2201      	movs	r2, #1
 800874e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8008750:	2300      	movs	r3, #0
}
 8008752:	4618      	mov	r0, r3
 8008754:	3708      	adds	r7, #8
 8008756:	46bd      	mov	sp, r7
 8008758:	bd80      	pop	{r7, pc}

0800875a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800875a:	b580      	push	{r7, lr}
 800875c:	b084      	sub	sp, #16
 800875e:	af00      	add	r7, sp, #0
 8008760:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008770:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d01d      	beq.n	80087b8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008782:	2b00      	cmp	r3, #0
 8008784:	d018      	beq.n	80087b8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2204      	movs	r2, #4
 800878a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	f043 0201 	orr.w	r2, r3, #1
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80087a0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80087b0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f86f 	bl	8008896 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d01d      	beq.n	80087fe <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d018      	beq.n	80087fe <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2204      	movs	r2, #4
 80087d0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	691b      	ldr	r3, [r3, #16]
 80087d6:	f043 0202 	orr.w	r2, r3, #2
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80087e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	681a      	ldr	r2, [r3, #0]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80087f6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f9ed 	bl	8008bd8 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}

08008806 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8008806:	b480      	push	{r7}
 8008808:	b087      	sub	sp, #28
 800880a:	af00      	add	r7, sp, #0
 800880c:	60f8      	str	r0, [r7, #12]
 800880e:	60b9      	str	r1, [r7, #8]
 8008810:	607a      	str	r2, [r7, #4]
 8008812:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8008814:	2300      	movs	r3, #0
 8008816:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d101      	bne.n	8008822 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800881e:	2301      	movs	r3, #1
 8008820:	e015      	b.n	800884e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d105      	bne.n	800883a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800882e:	697a      	ldr	r2, [r7, #20]
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	4413      	add	r3, r2
 8008834:	3308      	adds	r3, #8
 8008836:	617b      	str	r3, [r7, #20]
 8008838:	e004      	b.n	8008844 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	4413      	add	r3, r2
 8008840:	3314      	adds	r3, #20
 8008842:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	461a      	mov	r2, r3
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800884c:	2300      	movs	r3, #0
}
 800884e:	4618      	mov	r0, r3
 8008850:	371c      	adds	r7, #28
 8008852:	46bd      	mov	sp, r7
 8008854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008858:	4770      	bx	lr

0800885a <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800885a:	b480      	push	{r7}
 800885c:	b083      	sub	sp, #12
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8008862:	bf00      	nop
 8008864:	370c      	adds	r7, #12
 8008866:	46bd      	mov	sp, r7
 8008868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886c:	4770      	bx	lr

0800886e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800886e:	b480      	push	{r7}
 8008870:	b083      	sub	sp, #12
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr

08008882 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008882:	b480      	push	{r7}
 8008884:	b083      	sub	sp, #12
 8008886:	af00      	add	r7, sp, #0
 8008888:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800888a:	bf00      	nop
 800888c:	370c      	adds	r7, #12
 800888e:	46bd      	mov	sp, r7
 8008890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008894:	4770      	bx	lr

08008896 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008896:	b480      	push	{r7}
 8008898:	b083      	sub	sp, #12
 800889a:	af00      	add	r7, sp, #0
 800889c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800889e:	bf00      	nop
 80088a0:	370c      	adds	r7, #12
 80088a2:	46bd      	mov	sp, r7
 80088a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a8:	4770      	bx	lr
	...

080088ac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b08a      	sub	sp, #40	; 0x28
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	60f8      	str	r0, [r7, #12]
 80088b4:	60b9      	str	r1, [r7, #8]
 80088b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088b8:	2300      	movs	r3, #0
 80088ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d002      	beq.n	80088ca <HAL_DAC_ConfigChannel+0x1e>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d101      	bne.n	80088ce <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80088ca:	2301      	movs	r3, #1
 80088cc:	e12a      	b.n	8008b24 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	795b      	ldrb	r3, [r3, #5]
 80088d2:	2b01      	cmp	r3, #1
 80088d4:	d101      	bne.n	80088da <HAL_DAC_ConfigChannel+0x2e>
 80088d6:	2302      	movs	r3, #2
 80088d8:	e124      	b.n	8008b24 <HAL_DAC_ConfigChannel+0x278>
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	2201      	movs	r2, #1
 80088de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	2202      	movs	r2, #2
 80088e4:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d17a      	bne.n	80089e4 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80088ee:	f7fe f88b 	bl	8006a08 <HAL_GetTick>
 80088f2:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d13d      	bne.n	8008976 <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80088fa:	e018      	b.n	800892e <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80088fc:	f7fe f884 	bl	8006a08 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b01      	cmp	r3, #1
 8008908:	d911      	bls.n	800892e <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008910:	4b86      	ldr	r3, [pc, #536]	; (8008b2c <HAL_DAC_ConfigChannel+0x280>)
 8008912:	4013      	ands	r3, r2
 8008914:	2b00      	cmp	r3, #0
 8008916:	d00a      	beq.n	800892e <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	691b      	ldr	r3, [r3, #16]
 800891c:	f043 0208 	orr.w	r2, r3, #8
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2203      	movs	r2, #3
 8008928:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800892a:	2303      	movs	r3, #3
 800892c:	e0fa      	b.n	8008b24 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008934:	4b7d      	ldr	r3, [pc, #500]	; (8008b2c <HAL_DAC_ConfigChannel+0x280>)
 8008936:	4013      	ands	r3, r2
 8008938:	2b00      	cmp	r3, #0
 800893a:	d1df      	bne.n	80088fc <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	6992      	ldr	r2, [r2, #24]
 8008944:	641a      	str	r2, [r3, #64]	; 0x40
 8008946:	e020      	b.n	800898a <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008948:	f7fe f85e 	bl	8006a08 <HAL_GetTick>
 800894c:	4602      	mov	r2, r0
 800894e:	69fb      	ldr	r3, [r7, #28]
 8008950:	1ad3      	subs	r3, r2, r3
 8008952:	2b01      	cmp	r3, #1
 8008954:	d90f      	bls.n	8008976 <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800895c:	2b00      	cmp	r3, #0
 800895e:	da0a      	bge.n	8008976 <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	691b      	ldr	r3, [r3, #16]
 8008964:	f043 0208 	orr.w	r2, r3, #8
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2203      	movs	r2, #3
 8008970:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8008972:	2303      	movs	r3, #3
 8008974:	e0d6      	b.n	8008b24 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800897c:	2b00      	cmp	r3, #0
 800897e:	dbe3      	blt.n	8008948 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	6992      	ldr	r2, [r2, #24]
 8008988:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f003 0310 	and.w	r3, r3, #16
 8008996:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800899a:	fa01 f303 	lsl.w	r3, r1, r3
 800899e:	43db      	mvns	r3, r3
 80089a0:	ea02 0103 	and.w	r1, r2, r3
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	69da      	ldr	r2, [r3, #28]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f003 0310 	and.w	r3, r3, #16
 80089ae:	409a      	lsls	r2, r3
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	430a      	orrs	r2, r1
 80089b6:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	f003 0310 	and.w	r3, r3, #16
 80089c4:	21ff      	movs	r1, #255	; 0xff
 80089c6:	fa01 f303 	lsl.w	r3, r1, r3
 80089ca:	43db      	mvns	r3, r3
 80089cc:	ea02 0103 	and.w	r1, r2, r3
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	6a1a      	ldr	r2, [r3, #32]
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	409a      	lsls	r2, r3
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	430a      	orrs	r2, r1
 80089e2:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	691b      	ldr	r3, [r3, #16]
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d11d      	bne.n	8008a28 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f2:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f003 0310 	and.w	r3, r3, #16
 80089fa:	221f      	movs	r2, #31
 80089fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008a00:	43db      	mvns	r3, r3
 8008a02:	69ba      	ldr	r2, [r7, #24]
 8008a04:	4013      	ands	r3, r2
 8008a06:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008a08:	68bb      	ldr	r3, [r7, #8]
 8008a0a:	695b      	ldr	r3, [r3, #20]
 8008a0c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f003 0310 	and.w	r3, r3, #16
 8008a14:	697a      	ldr	r2, [r7, #20]
 8008a16:	fa02 f303 	lsl.w	r3, r2, r3
 8008a1a:	69ba      	ldr	r2, [r7, #24]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	69ba      	ldr	r2, [r7, #24]
 8008a26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a2e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	f003 0310 	and.w	r3, r3, #16
 8008a36:	2207      	movs	r2, #7
 8008a38:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3c:	43db      	mvns	r3, r3
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	4013      	ands	r3, r2
 8008a42:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	68db      	ldr	r3, [r3, #12]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d102      	bne.n	8008a52 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8008a50:	e00f      	b.n	8008a72 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8008a52:	68bb      	ldr	r3, [r7, #8]
 8008a54:	68db      	ldr	r3, [r3, #12]
 8008a56:	2b02      	cmp	r3, #2
 8008a58:	d102      	bne.n	8008a60 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a5e:	e008      	b.n	8008a72 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8008a60:	68bb      	ldr	r3, [r7, #8]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d102      	bne.n	8008a6e <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a6c:	e001      	b.n	8008a72 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	4313      	orrs	r3, r2
 8008a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	f003 0310 	and.w	r3, r3, #16
 8008a88:	697a      	ldr	r2, [r7, #20]
 8008a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	69ba      	ldr	r2, [r7, #24]
 8008a9a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6819      	ldr	r1, [r3, #0]
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	f003 0310 	and.w	r3, r3, #16
 8008aa8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008aac:	fa02 f303 	lsl.w	r3, r2, r3
 8008ab0:	43da      	mvns	r2, r3
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	400a      	ands	r2, r1
 8008ab8:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f003 0310 	and.w	r3, r3, #16
 8008ac8:	f640 72fe 	movw	r2, #4094	; 0xffe
 8008acc:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	69ba      	ldr	r2, [r7, #24]
 8008ad4:	4013      	ands	r3, r2
 8008ad6:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	f003 0310 	and.w	r3, r3, #16
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	69ba      	ldr	r2, [r7, #24]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	6819      	ldr	r1, [r3, #0]
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	f003 0310 	and.w	r3, r3, #16
 8008b04:	22c0      	movs	r2, #192	; 0xc0
 8008b06:	fa02 f303 	lsl.w	r3, r2, r3
 8008b0a:	43da      	mvns	r2, r3
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	400a      	ands	r2, r1
 8008b12:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	2201      	movs	r2, #1
 8008b18:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	2200      	movs	r2, #0
 8008b1e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8008b20:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3728      	adds	r7, #40	; 0x28
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20008000 	.word	0x20008000

08008b30 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b3c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008b3e:	68f8      	ldr	r0, [r7, #12]
 8008b40:	f7ff fe8b 	bl	800885a <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	2201      	movs	r2, #1
 8008b48:	711a      	strb	r2, [r3, #4]
}
 8008b4a:	bf00      	nop
 8008b4c:	3710      	adds	r7, #16
 8008b4e:	46bd      	mov	sp, r7
 8008b50:	bd80      	pop	{r7, pc}

08008b52 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008b52:	b580      	push	{r7, lr}
 8008b54:	b084      	sub	sp, #16
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f7ff fe84 	bl	800886e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008b66:	bf00      	nop
 8008b68:	3710      	adds	r7, #16
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}

08008b6e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008b6e:	b580      	push	{r7, lr}
 8008b70:	b084      	sub	sp, #16
 8008b72:	af00      	add	r7, sp, #0
 8008b74:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b7a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	691b      	ldr	r3, [r3, #16]
 8008b80:	f043 0204 	orr.w	r2, r3, #4
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008b88:	68f8      	ldr	r0, [r7, #12]
 8008b8a:	f7ff fe7a 	bl	8008882 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2201      	movs	r2, #1
 8008b92:	711a      	strb	r2, [r3, #4]
}
 8008b94:	bf00      	nop
 8008b96:	3710      	adds	r7, #16
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr

08008bd8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b083      	sub	sp, #12
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr

08008bec <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b084      	sub	sp, #16
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008bfa:	68f8      	ldr	r0, [r7, #12]
 8008bfc:	f7ff ffce 	bl	8008b9c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2201      	movs	r2, #1
 8008c04:	711a      	strb	r2, [r3, #4]
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}

08008c0e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008c0e:	b580      	push	{r7, lr}
 8008c10:	b084      	sub	sp, #16
 8008c12:	af00      	add	r7, sp, #0
 8008c14:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c1a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008c1c:	68f8      	ldr	r0, [r7, #12]
 8008c1e:	f7ff ffc7 	bl	8008bb0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008c22:	bf00      	nop
 8008c24:	3710      	adds	r7, #16
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}

08008c2a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008c2a:	b580      	push	{r7, lr}
 8008c2c:	b084      	sub	sp, #16
 8008c2e:	af00      	add	r7, sp, #0
 8008c30:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	691b      	ldr	r3, [r3, #16]
 8008c3c:	f043 0204 	orr.w	r2, r3, #4
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008c44:	68f8      	ldr	r0, [r7, #12]
 8008c46:	f7ff ffbd 	bl	8008bc4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	711a      	strb	r2, [r3, #4]
}
 8008c50:	bf00      	nop
 8008c52:	3710      	adds	r7, #16
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}

08008c58 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b086      	sub	sp, #24
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8008c60:	f7fd fed2 	bl	8006a08 <HAL_GetTick>
 8008c64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d101      	bne.n	8008c70 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e316      	b.n	800929e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a66      	ldr	r2, [pc, #408]	; (8008e10 <HAL_DMA_Init+0x1b8>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d04a      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a65      	ldr	r2, [pc, #404]	; (8008e14 <HAL_DMA_Init+0x1bc>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d045      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a63      	ldr	r2, [pc, #396]	; (8008e18 <HAL_DMA_Init+0x1c0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d040      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a62      	ldr	r2, [pc, #392]	; (8008e1c <HAL_DMA_Init+0x1c4>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d03b      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a60      	ldr	r2, [pc, #384]	; (8008e20 <HAL_DMA_Init+0x1c8>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d036      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a5f      	ldr	r2, [pc, #380]	; (8008e24 <HAL_DMA_Init+0x1cc>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d031      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a5d      	ldr	r2, [pc, #372]	; (8008e28 <HAL_DMA_Init+0x1d0>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d02c      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a5c      	ldr	r2, [pc, #368]	; (8008e2c <HAL_DMA_Init+0x1d4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d027      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a5a      	ldr	r2, [pc, #360]	; (8008e30 <HAL_DMA_Init+0x1d8>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d022      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a59      	ldr	r2, [pc, #356]	; (8008e34 <HAL_DMA_Init+0x1dc>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d01d      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a57      	ldr	r2, [pc, #348]	; (8008e38 <HAL_DMA_Init+0x1e0>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d018      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a56      	ldr	r2, [pc, #344]	; (8008e3c <HAL_DMA_Init+0x1e4>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d013      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a54      	ldr	r2, [pc, #336]	; (8008e40 <HAL_DMA_Init+0x1e8>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d00e      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a53      	ldr	r2, [pc, #332]	; (8008e44 <HAL_DMA_Init+0x1ec>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d009      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a51      	ldr	r2, [pc, #324]	; (8008e48 <HAL_DMA_Init+0x1f0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d004      	beq.n	8008d10 <HAL_DMA_Init+0xb8>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a50      	ldr	r2, [pc, #320]	; (8008e4c <HAL_DMA_Init+0x1f4>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d101      	bne.n	8008d14 <HAL_DMA_Init+0xbc>
 8008d10:	2301      	movs	r3, #1
 8008d12:	e000      	b.n	8008d16 <HAL_DMA_Init+0xbe>
 8008d14:	2300      	movs	r3, #0
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	f000 813b 	beq.w	8008f92 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2202      	movs	r2, #2
 8008d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2200      	movs	r2, #0
 8008d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a37      	ldr	r2, [pc, #220]	; (8008e10 <HAL_DMA_Init+0x1b8>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d04a      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a36      	ldr	r2, [pc, #216]	; (8008e14 <HAL_DMA_Init+0x1bc>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d045      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a34      	ldr	r2, [pc, #208]	; (8008e18 <HAL_DMA_Init+0x1c0>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d040      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a33      	ldr	r2, [pc, #204]	; (8008e1c <HAL_DMA_Init+0x1c4>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d03b      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	4a31      	ldr	r2, [pc, #196]	; (8008e20 <HAL_DMA_Init+0x1c8>)
 8008d5a:	4293      	cmp	r3, r2
 8008d5c:	d036      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a30      	ldr	r2, [pc, #192]	; (8008e24 <HAL_DMA_Init+0x1cc>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d031      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4a2e      	ldr	r2, [pc, #184]	; (8008e28 <HAL_DMA_Init+0x1d0>)
 8008d6e:	4293      	cmp	r3, r2
 8008d70:	d02c      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a2d      	ldr	r2, [pc, #180]	; (8008e2c <HAL_DMA_Init+0x1d4>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d027      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a2b      	ldr	r2, [pc, #172]	; (8008e30 <HAL_DMA_Init+0x1d8>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d022      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a2a      	ldr	r2, [pc, #168]	; (8008e34 <HAL_DMA_Init+0x1dc>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d01d      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a28      	ldr	r2, [pc, #160]	; (8008e38 <HAL_DMA_Init+0x1e0>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d018      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	4a27      	ldr	r2, [pc, #156]	; (8008e3c <HAL_DMA_Init+0x1e4>)
 8008da0:	4293      	cmp	r3, r2
 8008da2:	d013      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	4a25      	ldr	r2, [pc, #148]	; (8008e40 <HAL_DMA_Init+0x1e8>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d00e      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	4a24      	ldr	r2, [pc, #144]	; (8008e44 <HAL_DMA_Init+0x1ec>)
 8008db4:	4293      	cmp	r3, r2
 8008db6:	d009      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a22      	ldr	r2, [pc, #136]	; (8008e48 <HAL_DMA_Init+0x1f0>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d004      	beq.n	8008dcc <HAL_DMA_Init+0x174>
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	4a21      	ldr	r2, [pc, #132]	; (8008e4c <HAL_DMA_Init+0x1f4>)
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d108      	bne.n	8008dde <HAL_DMA_Init+0x186>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0201 	bic.w	r2, r2, #1
 8008dda:	601a      	str	r2, [r3, #0]
 8008ddc:	e007      	b.n	8008dee <HAL_DMA_Init+0x196>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	681a      	ldr	r2, [r3, #0]
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	f022 0201 	bic.w	r2, r2, #1
 8008dec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008dee:	e02f      	b.n	8008e50 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008df0:	f7fd fe0a 	bl	8006a08 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b05      	cmp	r3, #5
 8008dfc:	d928      	bls.n	8008e50 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2203      	movs	r2, #3
 8008e08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e246      	b.n	800929e <HAL_DMA_Init+0x646>
 8008e10:	40020010 	.word	0x40020010
 8008e14:	40020028 	.word	0x40020028
 8008e18:	40020040 	.word	0x40020040
 8008e1c:	40020058 	.word	0x40020058
 8008e20:	40020070 	.word	0x40020070
 8008e24:	40020088 	.word	0x40020088
 8008e28:	400200a0 	.word	0x400200a0
 8008e2c:	400200b8 	.word	0x400200b8
 8008e30:	40020410 	.word	0x40020410
 8008e34:	40020428 	.word	0x40020428
 8008e38:	40020440 	.word	0x40020440
 8008e3c:	40020458 	.word	0x40020458
 8008e40:	40020470 	.word	0x40020470
 8008e44:	40020488 	.word	0x40020488
 8008e48:	400204a0 	.word	0x400204a0
 8008e4c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	f003 0301 	and.w	r3, r3, #1
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d1c8      	bne.n	8008df0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8008e66:	697a      	ldr	r2, [r7, #20]
 8008e68:	4b83      	ldr	r3, [pc, #524]	; (8009078 <HAL_DMA_Init+0x420>)
 8008e6a:	4013      	ands	r3, r2
 8008e6c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8008e76:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	691b      	ldr	r3, [r3, #16]
 8008e7c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008e82:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008e8e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8008e96:	697a      	ldr	r2, [r7, #20]
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea0:	2b04      	cmp	r3, #4
 8008ea2:	d107      	bne.n	8008eb4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eac:	4313      	orrs	r3, r2
 8008eae:	697a      	ldr	r2, [r7, #20]
 8008eb0:	4313      	orrs	r3, r2
 8008eb2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8008eb4:	4b71      	ldr	r3, [pc, #452]	; (800907c <HAL_DMA_Init+0x424>)
 8008eb6:	681a      	ldr	r2, [r3, #0]
 8008eb8:	4b71      	ldr	r3, [pc, #452]	; (8009080 <HAL_DMA_Init+0x428>)
 8008eba:	4013      	ands	r3, r2
 8008ebc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008ec0:	d328      	bcc.n	8008f14 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	2b28      	cmp	r3, #40	; 0x28
 8008ec8:	d903      	bls.n	8008ed2 <HAL_DMA_Init+0x27a>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	2b2e      	cmp	r3, #46	; 0x2e
 8008ed0:	d917      	bls.n	8008f02 <HAL_DMA_Init+0x2aa>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	2b3e      	cmp	r3, #62	; 0x3e
 8008ed8:	d903      	bls.n	8008ee2 <HAL_DMA_Init+0x28a>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	2b42      	cmp	r3, #66	; 0x42
 8008ee0:	d90f      	bls.n	8008f02 <HAL_DMA_Init+0x2aa>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	2b46      	cmp	r3, #70	; 0x46
 8008ee8:	d903      	bls.n	8008ef2 <HAL_DMA_Init+0x29a>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	2b48      	cmp	r3, #72	; 0x48
 8008ef0:	d907      	bls.n	8008f02 <HAL_DMA_Init+0x2aa>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	685b      	ldr	r3, [r3, #4]
 8008ef6:	2b4e      	cmp	r3, #78	; 0x4e
 8008ef8:	d905      	bls.n	8008f06 <HAL_DMA_Init+0x2ae>
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	2b52      	cmp	r3, #82	; 0x52
 8008f00:	d801      	bhi.n	8008f06 <HAL_DMA_Init+0x2ae>
 8008f02:	2301      	movs	r3, #1
 8008f04:	e000      	b.n	8008f08 <HAL_DMA_Init+0x2b0>
 8008f06:	2300      	movs	r3, #0
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d003      	beq.n	8008f14 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008f12:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	697a      	ldr	r2, [r7, #20]
 8008f1a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	695b      	ldr	r3, [r3, #20]
 8008f22:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 0307 	bic.w	r3, r3, #7
 8008f2a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f30:	697a      	ldr	r2, [r7, #20]
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f3a:	2b04      	cmp	r3, #4
 8008f3c:	d117      	bne.n	8008f6e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f42:	697a      	ldr	r2, [r7, #20]
 8008f44:	4313      	orrs	r3, r2
 8008f46:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d00e      	beq.n	8008f6e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f002 fb4d 	bl	800b5f0 <DMA_CheckFifoParam>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d008      	beq.n	8008f6e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2240      	movs	r2, #64	; 0x40
 8008f60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2201      	movs	r2, #1
 8008f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e197      	b.n	800929e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f002 fa88 	bl	800b48c <DMA_CalcBaseAndBitshift>
 8008f7c:	4603      	mov	r3, r0
 8008f7e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f84:	f003 031f 	and.w	r3, r3, #31
 8008f88:	223f      	movs	r2, #63	; 0x3f
 8008f8a:	409a      	lsls	r2, r3
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	609a      	str	r2, [r3, #8]
 8008f90:	e0cd      	b.n	800912e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a3b      	ldr	r2, [pc, #236]	; (8009084 <HAL_DMA_Init+0x42c>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d022      	beq.n	8008fe2 <HAL_DMA_Init+0x38a>
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a39      	ldr	r2, [pc, #228]	; (8009088 <HAL_DMA_Init+0x430>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d01d      	beq.n	8008fe2 <HAL_DMA_Init+0x38a>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a38      	ldr	r2, [pc, #224]	; (800908c <HAL_DMA_Init+0x434>)
 8008fac:	4293      	cmp	r3, r2
 8008fae:	d018      	beq.n	8008fe2 <HAL_DMA_Init+0x38a>
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	4a36      	ldr	r2, [pc, #216]	; (8009090 <HAL_DMA_Init+0x438>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d013      	beq.n	8008fe2 <HAL_DMA_Init+0x38a>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4a35      	ldr	r2, [pc, #212]	; (8009094 <HAL_DMA_Init+0x43c>)
 8008fc0:	4293      	cmp	r3, r2
 8008fc2:	d00e      	beq.n	8008fe2 <HAL_DMA_Init+0x38a>
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	4a33      	ldr	r2, [pc, #204]	; (8009098 <HAL_DMA_Init+0x440>)
 8008fca:	4293      	cmp	r3, r2
 8008fcc:	d009      	beq.n	8008fe2 <HAL_DMA_Init+0x38a>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	4a32      	ldr	r2, [pc, #200]	; (800909c <HAL_DMA_Init+0x444>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d004      	beq.n	8008fe2 <HAL_DMA_Init+0x38a>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	4a30      	ldr	r2, [pc, #192]	; (80090a0 <HAL_DMA_Init+0x448>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d101      	bne.n	8008fe6 <HAL_DMA_Init+0x38e>
 8008fe2:	2301      	movs	r3, #1
 8008fe4:	e000      	b.n	8008fe8 <HAL_DMA_Init+0x390>
 8008fe6:	2300      	movs	r3, #0
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	f000 8097 	beq.w	800911c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a24      	ldr	r2, [pc, #144]	; (8009084 <HAL_DMA_Init+0x42c>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d021      	beq.n	800903c <HAL_DMA_Init+0x3e4>
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a22      	ldr	r2, [pc, #136]	; (8009088 <HAL_DMA_Init+0x430>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d01c      	beq.n	800903c <HAL_DMA_Init+0x3e4>
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a21      	ldr	r2, [pc, #132]	; (800908c <HAL_DMA_Init+0x434>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d017      	beq.n	800903c <HAL_DMA_Init+0x3e4>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a1f      	ldr	r2, [pc, #124]	; (8009090 <HAL_DMA_Init+0x438>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d012      	beq.n	800903c <HAL_DMA_Init+0x3e4>
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a1e      	ldr	r2, [pc, #120]	; (8009094 <HAL_DMA_Init+0x43c>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d00d      	beq.n	800903c <HAL_DMA_Init+0x3e4>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a1c      	ldr	r2, [pc, #112]	; (8009098 <HAL_DMA_Init+0x440>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d008      	beq.n	800903c <HAL_DMA_Init+0x3e4>
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a1b      	ldr	r2, [pc, #108]	; (800909c <HAL_DMA_Init+0x444>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d003      	beq.n	800903c <HAL_DMA_Init+0x3e4>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	4a19      	ldr	r2, [pc, #100]	; (80090a0 <HAL_DMA_Init+0x448>)
 800903a:	4293      	cmp	r3, r2
 800903c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2202      	movs	r2, #2
 8009042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009056:	697a      	ldr	r2, [r7, #20]
 8009058:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <HAL_DMA_Init+0x44c>)
 800905a:	4013      	ands	r3, r2
 800905c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	2b40      	cmp	r3, #64	; 0x40
 8009064:	d020      	beq.n	80090a8 <HAL_DMA_Init+0x450>
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	689b      	ldr	r3, [r3, #8]
 800906a:	2b80      	cmp	r3, #128	; 0x80
 800906c:	d102      	bne.n	8009074 <HAL_DMA_Init+0x41c>
 800906e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009072:	e01a      	b.n	80090aa <HAL_DMA_Init+0x452>
 8009074:	2300      	movs	r3, #0
 8009076:	e018      	b.n	80090aa <HAL_DMA_Init+0x452>
 8009078:	fe10803f 	.word	0xfe10803f
 800907c:	5c001000 	.word	0x5c001000
 8009080:	ffff0000 	.word	0xffff0000
 8009084:	58025408 	.word	0x58025408
 8009088:	5802541c 	.word	0x5802541c
 800908c:	58025430 	.word	0x58025430
 8009090:	58025444 	.word	0x58025444
 8009094:	58025458 	.word	0x58025458
 8009098:	5802546c 	.word	0x5802546c
 800909c:	58025480 	.word	0x58025480
 80090a0:	58025494 	.word	0x58025494
 80090a4:	fffe000f 	.word	0xfffe000f
 80090a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	68d2      	ldr	r2, [r2, #12]
 80090ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80090b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	691b      	ldr	r3, [r3, #16]
 80090b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80090b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	695b      	ldr	r3, [r3, #20]
 80090be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80090c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	699b      	ldr	r3, [r3, #24]
 80090c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80090c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80090d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6a1b      	ldr	r3, [r3, #32]
 80090d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80090d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80090da:	697a      	ldr	r2, [r7, #20]
 80090dc:	4313      	orrs	r3, r2
 80090de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	461a      	mov	r2, r3
 80090ee:	4b6e      	ldr	r3, [pc, #440]	; (80092a8 <HAL_DMA_Init+0x650>)
 80090f0:	4413      	add	r3, r2
 80090f2:	4a6e      	ldr	r2, [pc, #440]	; (80092ac <HAL_DMA_Init+0x654>)
 80090f4:	fba2 2303 	umull	r2, r3, r2, r3
 80090f8:	091b      	lsrs	r3, r3, #4
 80090fa:	009a      	lsls	r2, r3, #2
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f002 f9c3 	bl	800b48c <DMA_CalcBaseAndBitshift>
 8009106:	4603      	mov	r3, r0
 8009108:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800910e:	f003 031f 	and.w	r3, r3, #31
 8009112:	2201      	movs	r2, #1
 8009114:	409a      	lsls	r2, r3
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	605a      	str	r2, [r3, #4]
 800911a:	e008      	b.n	800912e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2240      	movs	r2, #64	; 0x40
 8009120:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2203      	movs	r2, #3
 8009126:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800912a:	2301      	movs	r3, #1
 800912c:	e0b7      	b.n	800929e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	4a5f      	ldr	r2, [pc, #380]	; (80092b0 <HAL_DMA_Init+0x658>)
 8009134:	4293      	cmp	r3, r2
 8009136:	d072      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	4a5d      	ldr	r2, [pc, #372]	; (80092b4 <HAL_DMA_Init+0x65c>)
 800913e:	4293      	cmp	r3, r2
 8009140:	d06d      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	4a5c      	ldr	r2, [pc, #368]	; (80092b8 <HAL_DMA_Init+0x660>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d068      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	4a5a      	ldr	r2, [pc, #360]	; (80092bc <HAL_DMA_Init+0x664>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d063      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	4a59      	ldr	r2, [pc, #356]	; (80092c0 <HAL_DMA_Init+0x668>)
 800915c:	4293      	cmp	r3, r2
 800915e:	d05e      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	4a57      	ldr	r2, [pc, #348]	; (80092c4 <HAL_DMA_Init+0x66c>)
 8009166:	4293      	cmp	r3, r2
 8009168:	d059      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	4a56      	ldr	r2, [pc, #344]	; (80092c8 <HAL_DMA_Init+0x670>)
 8009170:	4293      	cmp	r3, r2
 8009172:	d054      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	4a54      	ldr	r2, [pc, #336]	; (80092cc <HAL_DMA_Init+0x674>)
 800917a:	4293      	cmp	r3, r2
 800917c:	d04f      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4a53      	ldr	r2, [pc, #332]	; (80092d0 <HAL_DMA_Init+0x678>)
 8009184:	4293      	cmp	r3, r2
 8009186:	d04a      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a51      	ldr	r2, [pc, #324]	; (80092d4 <HAL_DMA_Init+0x67c>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d045      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a50      	ldr	r2, [pc, #320]	; (80092d8 <HAL_DMA_Init+0x680>)
 8009198:	4293      	cmp	r3, r2
 800919a:	d040      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	4a4e      	ldr	r2, [pc, #312]	; (80092dc <HAL_DMA_Init+0x684>)
 80091a2:	4293      	cmp	r3, r2
 80091a4:	d03b      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	4a4d      	ldr	r2, [pc, #308]	; (80092e0 <HAL_DMA_Init+0x688>)
 80091ac:	4293      	cmp	r3, r2
 80091ae:	d036      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	4a4b      	ldr	r2, [pc, #300]	; (80092e4 <HAL_DMA_Init+0x68c>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d031      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a4a      	ldr	r2, [pc, #296]	; (80092e8 <HAL_DMA_Init+0x690>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d02c      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a48      	ldr	r2, [pc, #288]	; (80092ec <HAL_DMA_Init+0x694>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d027      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a47      	ldr	r2, [pc, #284]	; (80092f0 <HAL_DMA_Init+0x698>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d022      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a45      	ldr	r2, [pc, #276]	; (80092f4 <HAL_DMA_Init+0x69c>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d01d      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a44      	ldr	r2, [pc, #272]	; (80092f8 <HAL_DMA_Init+0x6a0>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d018      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	4a42      	ldr	r2, [pc, #264]	; (80092fc <HAL_DMA_Init+0x6a4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d013      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	4a41      	ldr	r2, [pc, #260]	; (8009300 <HAL_DMA_Init+0x6a8>)
 80091fc:	4293      	cmp	r3, r2
 80091fe:	d00e      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	4a3f      	ldr	r2, [pc, #252]	; (8009304 <HAL_DMA_Init+0x6ac>)
 8009206:	4293      	cmp	r3, r2
 8009208:	d009      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	4a3e      	ldr	r2, [pc, #248]	; (8009308 <HAL_DMA_Init+0x6b0>)
 8009210:	4293      	cmp	r3, r2
 8009212:	d004      	beq.n	800921e <HAL_DMA_Init+0x5c6>
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	4a3c      	ldr	r2, [pc, #240]	; (800930c <HAL_DMA_Init+0x6b4>)
 800921a:	4293      	cmp	r3, r2
 800921c:	d101      	bne.n	8009222 <HAL_DMA_Init+0x5ca>
 800921e:	2301      	movs	r3, #1
 8009220:	e000      	b.n	8009224 <HAL_DMA_Init+0x5cc>
 8009222:	2300      	movs	r3, #0
 8009224:	2b00      	cmp	r3, #0
 8009226:	d032      	beq.n	800928e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f002 fa5d 	bl	800b6e8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	689b      	ldr	r3, [r3, #8]
 8009232:	2b80      	cmp	r3, #128	; 0x80
 8009234:	d102      	bne.n	800923c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2200      	movs	r2, #0
 800923a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009244:	b2d2      	uxtb	r2, r2
 8009246:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009250:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d010      	beq.n	800927c <HAL_DMA_Init+0x624>
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	2b08      	cmp	r3, #8
 8009260:	d80c      	bhi.n	800927c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009262:	6878      	ldr	r0, [r7, #4]
 8009264:	f002 fada 	bl	800b81c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009274:	687a      	ldr	r2, [r7, #4]
 8009276:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009278:	605a      	str	r2, [r3, #4]
 800927a:	e008      	b.n	800928e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2200      	movs	r2, #0
 8009280:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	2200      	movs	r2, #0
 8009286:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2201      	movs	r2, #1
 8009298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800929c:	2300      	movs	r3, #0
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	a7fdabf8 	.word	0xa7fdabf8
 80092ac:	cccccccd 	.word	0xcccccccd
 80092b0:	40020010 	.word	0x40020010
 80092b4:	40020028 	.word	0x40020028
 80092b8:	40020040 	.word	0x40020040
 80092bc:	40020058 	.word	0x40020058
 80092c0:	40020070 	.word	0x40020070
 80092c4:	40020088 	.word	0x40020088
 80092c8:	400200a0 	.word	0x400200a0
 80092cc:	400200b8 	.word	0x400200b8
 80092d0:	40020410 	.word	0x40020410
 80092d4:	40020428 	.word	0x40020428
 80092d8:	40020440 	.word	0x40020440
 80092dc:	40020458 	.word	0x40020458
 80092e0:	40020470 	.word	0x40020470
 80092e4:	40020488 	.word	0x40020488
 80092e8:	400204a0 	.word	0x400204a0
 80092ec:	400204b8 	.word	0x400204b8
 80092f0:	58025408 	.word	0x58025408
 80092f4:	5802541c 	.word	0x5802541c
 80092f8:	58025430 	.word	0x58025430
 80092fc:	58025444 	.word	0x58025444
 8009300:	58025458 	.word	0x58025458
 8009304:	5802546c 	.word	0x5802546c
 8009308:	58025480 	.word	0x58025480
 800930c:	58025494 	.word	0x58025494

08009310 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b086      	sub	sp, #24
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
 800931c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d101      	bne.n	800932c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8009328:	2301      	movs	r3, #1
 800932a:	e226      	b.n	800977a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009332:	2b01      	cmp	r3, #1
 8009334:	d101      	bne.n	800933a <HAL_DMA_Start_IT+0x2a>
 8009336:	2302      	movs	r3, #2
 8009338:	e21f      	b.n	800977a <HAL_DMA_Start_IT+0x46a>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2201      	movs	r2, #1
 800933e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009348:	b2db      	uxtb	r3, r3
 800934a:	2b01      	cmp	r3, #1
 800934c:	f040 820a 	bne.w	8009764 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	2202      	movs	r2, #2
 8009354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	2200      	movs	r2, #0
 800935c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a68      	ldr	r2, [pc, #416]	; (8009504 <HAL_DMA_Start_IT+0x1f4>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d04a      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a66      	ldr	r2, [pc, #408]	; (8009508 <HAL_DMA_Start_IT+0x1f8>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d045      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a65      	ldr	r2, [pc, #404]	; (800950c <HAL_DMA_Start_IT+0x1fc>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d040      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a63      	ldr	r2, [pc, #396]	; (8009510 <HAL_DMA_Start_IT+0x200>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d03b      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a62      	ldr	r2, [pc, #392]	; (8009514 <HAL_DMA_Start_IT+0x204>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d036      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a60      	ldr	r2, [pc, #384]	; (8009518 <HAL_DMA_Start_IT+0x208>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d031      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a5f      	ldr	r2, [pc, #380]	; (800951c <HAL_DMA_Start_IT+0x20c>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d02c      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a5d      	ldr	r2, [pc, #372]	; (8009520 <HAL_DMA_Start_IT+0x210>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d027      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a5c      	ldr	r2, [pc, #368]	; (8009524 <HAL_DMA_Start_IT+0x214>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d022      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a5a      	ldr	r2, [pc, #360]	; (8009528 <HAL_DMA_Start_IT+0x218>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d01d      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	4a59      	ldr	r2, [pc, #356]	; (800952c <HAL_DMA_Start_IT+0x21c>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d018      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a57      	ldr	r2, [pc, #348]	; (8009530 <HAL_DMA_Start_IT+0x220>)
 80093d2:	4293      	cmp	r3, r2
 80093d4:	d013      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a56      	ldr	r2, [pc, #344]	; (8009534 <HAL_DMA_Start_IT+0x224>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d00e      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a54      	ldr	r2, [pc, #336]	; (8009538 <HAL_DMA_Start_IT+0x228>)
 80093e6:	4293      	cmp	r3, r2
 80093e8:	d009      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a53      	ldr	r2, [pc, #332]	; (800953c <HAL_DMA_Start_IT+0x22c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d004      	beq.n	80093fe <HAL_DMA_Start_IT+0xee>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4a51      	ldr	r2, [pc, #324]	; (8009540 <HAL_DMA_Start_IT+0x230>)
 80093fa:	4293      	cmp	r3, r2
 80093fc:	d108      	bne.n	8009410 <HAL_DMA_Start_IT+0x100>
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0201 	bic.w	r2, r2, #1
 800940c:	601a      	str	r2, [r3, #0]
 800940e:	e007      	b.n	8009420 <HAL_DMA_Start_IT+0x110>
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 0201 	bic.w	r2, r2, #1
 800941e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009420:	683b      	ldr	r3, [r7, #0]
 8009422:	687a      	ldr	r2, [r7, #4]
 8009424:	68b9      	ldr	r1, [r7, #8]
 8009426:	68f8      	ldr	r0, [r7, #12]
 8009428:	f001 fe84 	bl	800b134 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	4a34      	ldr	r2, [pc, #208]	; (8009504 <HAL_DMA_Start_IT+0x1f4>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d04a      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a33      	ldr	r2, [pc, #204]	; (8009508 <HAL_DMA_Start_IT+0x1f8>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d045      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	4a31      	ldr	r2, [pc, #196]	; (800950c <HAL_DMA_Start_IT+0x1fc>)
 8009446:	4293      	cmp	r3, r2
 8009448:	d040      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	4a30      	ldr	r2, [pc, #192]	; (8009510 <HAL_DMA_Start_IT+0x200>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d03b      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	4a2e      	ldr	r2, [pc, #184]	; (8009514 <HAL_DMA_Start_IT+0x204>)
 800945a:	4293      	cmp	r3, r2
 800945c:	d036      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a2d      	ldr	r2, [pc, #180]	; (8009518 <HAL_DMA_Start_IT+0x208>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d031      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a2b      	ldr	r2, [pc, #172]	; (800951c <HAL_DMA_Start_IT+0x20c>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d02c      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a2a      	ldr	r2, [pc, #168]	; (8009520 <HAL_DMA_Start_IT+0x210>)
 8009478:	4293      	cmp	r3, r2
 800947a:	d027      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	4a28      	ldr	r2, [pc, #160]	; (8009524 <HAL_DMA_Start_IT+0x214>)
 8009482:	4293      	cmp	r3, r2
 8009484:	d022      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	4a27      	ldr	r2, [pc, #156]	; (8009528 <HAL_DMA_Start_IT+0x218>)
 800948c:	4293      	cmp	r3, r2
 800948e:	d01d      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4a25      	ldr	r2, [pc, #148]	; (800952c <HAL_DMA_Start_IT+0x21c>)
 8009496:	4293      	cmp	r3, r2
 8009498:	d018      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	4a24      	ldr	r2, [pc, #144]	; (8009530 <HAL_DMA_Start_IT+0x220>)
 80094a0:	4293      	cmp	r3, r2
 80094a2:	d013      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	4a22      	ldr	r2, [pc, #136]	; (8009534 <HAL_DMA_Start_IT+0x224>)
 80094aa:	4293      	cmp	r3, r2
 80094ac:	d00e      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	4a21      	ldr	r2, [pc, #132]	; (8009538 <HAL_DMA_Start_IT+0x228>)
 80094b4:	4293      	cmp	r3, r2
 80094b6:	d009      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	4a1f      	ldr	r2, [pc, #124]	; (800953c <HAL_DMA_Start_IT+0x22c>)
 80094be:	4293      	cmp	r3, r2
 80094c0:	d004      	beq.n	80094cc <HAL_DMA_Start_IT+0x1bc>
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	4a1e      	ldr	r2, [pc, #120]	; (8009540 <HAL_DMA_Start_IT+0x230>)
 80094c8:	4293      	cmp	r3, r2
 80094ca:	d101      	bne.n	80094d0 <HAL_DMA_Start_IT+0x1c0>
 80094cc:	2301      	movs	r3, #1
 80094ce:	e000      	b.n	80094d2 <HAL_DMA_Start_IT+0x1c2>
 80094d0:	2300      	movs	r3, #0
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d036      	beq.n	8009544 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	f023 021e 	bic.w	r2, r3, #30
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	f042 0216 	orr.w	r2, r2, #22
 80094e8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d03e      	beq.n	8009570 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	681a      	ldr	r2, [r3, #0]
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	f042 0208 	orr.w	r2, r2, #8
 8009500:	601a      	str	r2, [r3, #0]
 8009502:	e035      	b.n	8009570 <HAL_DMA_Start_IT+0x260>
 8009504:	40020010 	.word	0x40020010
 8009508:	40020028 	.word	0x40020028
 800950c:	40020040 	.word	0x40020040
 8009510:	40020058 	.word	0x40020058
 8009514:	40020070 	.word	0x40020070
 8009518:	40020088 	.word	0x40020088
 800951c:	400200a0 	.word	0x400200a0
 8009520:	400200b8 	.word	0x400200b8
 8009524:	40020410 	.word	0x40020410
 8009528:	40020428 	.word	0x40020428
 800952c:	40020440 	.word	0x40020440
 8009530:	40020458 	.word	0x40020458
 8009534:	40020470 	.word	0x40020470
 8009538:	40020488 	.word	0x40020488
 800953c:	400204a0 	.word	0x400204a0
 8009540:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	f023 020e 	bic.w	r2, r3, #14
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 020a 	orr.w	r2, r2, #10
 8009556:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	2b00      	cmp	r3, #0
 800955e:	d007      	beq.n	8009570 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	f042 0204 	orr.w	r2, r2, #4
 800956e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a83      	ldr	r2, [pc, #524]	; (8009784 <HAL_DMA_Start_IT+0x474>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d072      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a82      	ldr	r2, [pc, #520]	; (8009788 <HAL_DMA_Start_IT+0x478>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d06d      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a80      	ldr	r2, [pc, #512]	; (800978c <HAL_DMA_Start_IT+0x47c>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d068      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a7f      	ldr	r2, [pc, #508]	; (8009790 <HAL_DMA_Start_IT+0x480>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d063      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a7d      	ldr	r2, [pc, #500]	; (8009794 <HAL_DMA_Start_IT+0x484>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d05e      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a7c      	ldr	r2, [pc, #496]	; (8009798 <HAL_DMA_Start_IT+0x488>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d059      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a7a      	ldr	r2, [pc, #488]	; (800979c <HAL_DMA_Start_IT+0x48c>)
 80095b2:	4293      	cmp	r3, r2
 80095b4:	d054      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	4a79      	ldr	r2, [pc, #484]	; (80097a0 <HAL_DMA_Start_IT+0x490>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d04f      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	4a77      	ldr	r2, [pc, #476]	; (80097a4 <HAL_DMA_Start_IT+0x494>)
 80095c6:	4293      	cmp	r3, r2
 80095c8:	d04a      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	4a76      	ldr	r2, [pc, #472]	; (80097a8 <HAL_DMA_Start_IT+0x498>)
 80095d0:	4293      	cmp	r3, r2
 80095d2:	d045      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	4a74      	ldr	r2, [pc, #464]	; (80097ac <HAL_DMA_Start_IT+0x49c>)
 80095da:	4293      	cmp	r3, r2
 80095dc:	d040      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	4a73      	ldr	r2, [pc, #460]	; (80097b0 <HAL_DMA_Start_IT+0x4a0>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d03b      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a71      	ldr	r2, [pc, #452]	; (80097b4 <HAL_DMA_Start_IT+0x4a4>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d036      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a70      	ldr	r2, [pc, #448]	; (80097b8 <HAL_DMA_Start_IT+0x4a8>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d031      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a6e      	ldr	r2, [pc, #440]	; (80097bc <HAL_DMA_Start_IT+0x4ac>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d02c      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a6d      	ldr	r2, [pc, #436]	; (80097c0 <HAL_DMA_Start_IT+0x4b0>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d027      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a6b      	ldr	r2, [pc, #428]	; (80097c4 <HAL_DMA_Start_IT+0x4b4>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d022      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a6a      	ldr	r2, [pc, #424]	; (80097c8 <HAL_DMA_Start_IT+0x4b8>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d01d      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a68      	ldr	r2, [pc, #416]	; (80097cc <HAL_DMA_Start_IT+0x4bc>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d018      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a67      	ldr	r2, [pc, #412]	; (80097d0 <HAL_DMA_Start_IT+0x4c0>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d013      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a65      	ldr	r2, [pc, #404]	; (80097d4 <HAL_DMA_Start_IT+0x4c4>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00e      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a64      	ldr	r2, [pc, #400]	; (80097d8 <HAL_DMA_Start_IT+0x4c8>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d009      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a62      	ldr	r2, [pc, #392]	; (80097dc <HAL_DMA_Start_IT+0x4cc>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d004      	beq.n	8009660 <HAL_DMA_Start_IT+0x350>
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a61      	ldr	r2, [pc, #388]	; (80097e0 <HAL_DMA_Start_IT+0x4d0>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d101      	bne.n	8009664 <HAL_DMA_Start_IT+0x354>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <HAL_DMA_Start_IT+0x356>
 8009664:	2300      	movs	r3, #0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d01a      	beq.n	80096a0 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d007      	beq.n	8009688 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009682:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009686:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800968c:	2b00      	cmp	r3, #0
 800968e:	d007      	beq.n	80096a0 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800969a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800969e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a37      	ldr	r2, [pc, #220]	; (8009784 <HAL_DMA_Start_IT+0x474>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d04a      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a36      	ldr	r2, [pc, #216]	; (8009788 <HAL_DMA_Start_IT+0x478>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d045      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a34      	ldr	r2, [pc, #208]	; (800978c <HAL_DMA_Start_IT+0x47c>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d040      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a33      	ldr	r2, [pc, #204]	; (8009790 <HAL_DMA_Start_IT+0x480>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d03b      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a31      	ldr	r2, [pc, #196]	; (8009794 <HAL_DMA_Start_IT+0x484>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d036      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4a30      	ldr	r2, [pc, #192]	; (8009798 <HAL_DMA_Start_IT+0x488>)
 80096d8:	4293      	cmp	r3, r2
 80096da:	d031      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	4a2e      	ldr	r2, [pc, #184]	; (800979c <HAL_DMA_Start_IT+0x48c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d02c      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	4a2d      	ldr	r2, [pc, #180]	; (80097a0 <HAL_DMA_Start_IT+0x490>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d027      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	4a2b      	ldr	r2, [pc, #172]	; (80097a4 <HAL_DMA_Start_IT+0x494>)
 80096f6:	4293      	cmp	r3, r2
 80096f8:	d022      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a2a      	ldr	r2, [pc, #168]	; (80097a8 <HAL_DMA_Start_IT+0x498>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d01d      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a28      	ldr	r2, [pc, #160]	; (80097ac <HAL_DMA_Start_IT+0x49c>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d018      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a27      	ldr	r2, [pc, #156]	; (80097b0 <HAL_DMA_Start_IT+0x4a0>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d013      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a25      	ldr	r2, [pc, #148]	; (80097b4 <HAL_DMA_Start_IT+0x4a4>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d00e      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a24      	ldr	r2, [pc, #144]	; (80097b8 <HAL_DMA_Start_IT+0x4a8>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d009      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a22      	ldr	r2, [pc, #136]	; (80097bc <HAL_DMA_Start_IT+0x4ac>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d004      	beq.n	8009740 <HAL_DMA_Start_IT+0x430>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a21      	ldr	r2, [pc, #132]	; (80097c0 <HAL_DMA_Start_IT+0x4b0>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d108      	bne.n	8009752 <HAL_DMA_Start_IT+0x442>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	f042 0201 	orr.w	r2, r2, #1
 800974e:	601a      	str	r2, [r3, #0]
 8009750:	e012      	b.n	8009778 <HAL_DMA_Start_IT+0x468>
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]
 8009762:	e009      	b.n	8009778 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009764:	68fb      	ldr	r3, [r7, #12]
 8009766:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800976a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2200      	movs	r2, #0
 8009770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3718      	adds	r7, #24
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop
 8009784:	40020010 	.word	0x40020010
 8009788:	40020028 	.word	0x40020028
 800978c:	40020040 	.word	0x40020040
 8009790:	40020058 	.word	0x40020058
 8009794:	40020070 	.word	0x40020070
 8009798:	40020088 	.word	0x40020088
 800979c:	400200a0 	.word	0x400200a0
 80097a0:	400200b8 	.word	0x400200b8
 80097a4:	40020410 	.word	0x40020410
 80097a8:	40020428 	.word	0x40020428
 80097ac:	40020440 	.word	0x40020440
 80097b0:	40020458 	.word	0x40020458
 80097b4:	40020470 	.word	0x40020470
 80097b8:	40020488 	.word	0x40020488
 80097bc:	400204a0 	.word	0x400204a0
 80097c0:	400204b8 	.word	0x400204b8
 80097c4:	58025408 	.word	0x58025408
 80097c8:	5802541c 	.word	0x5802541c
 80097cc:	58025430 	.word	0x58025430
 80097d0:	58025444 	.word	0x58025444
 80097d4:	58025458 	.word	0x58025458
 80097d8:	5802546c 	.word	0x5802546c
 80097dc:	58025480 	.word	0x58025480
 80097e0:	58025494 	.word	0x58025494

080097e4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b086      	sub	sp, #24
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80097ec:	f7fd f90c 	bl	8006a08 <HAL_GetTick>
 80097f0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80097f8:	2301      	movs	r3, #1
 80097fa:	e2dc      	b.n	8009db6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009802:	b2db      	uxtb	r3, r3
 8009804:	2b02      	cmp	r3, #2
 8009806:	d008      	beq.n	800981a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2280      	movs	r2, #128	; 0x80
 800980c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2200      	movs	r2, #0
 8009812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
 8009818:	e2cd      	b.n	8009db6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a76      	ldr	r2, [pc, #472]	; (80099f8 <HAL_DMA_Abort+0x214>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d04a      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	4a74      	ldr	r2, [pc, #464]	; (80099fc <HAL_DMA_Abort+0x218>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d045      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	4a73      	ldr	r2, [pc, #460]	; (8009a00 <HAL_DMA_Abort+0x21c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d040      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	4a71      	ldr	r2, [pc, #452]	; (8009a04 <HAL_DMA_Abort+0x220>)
 800983e:	4293      	cmp	r3, r2
 8009840:	d03b      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a70      	ldr	r2, [pc, #448]	; (8009a08 <HAL_DMA_Abort+0x224>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d036      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	4a6e      	ldr	r2, [pc, #440]	; (8009a0c <HAL_DMA_Abort+0x228>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d031      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	4a6d      	ldr	r2, [pc, #436]	; (8009a10 <HAL_DMA_Abort+0x22c>)
 800985c:	4293      	cmp	r3, r2
 800985e:	d02c      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a6b      	ldr	r2, [pc, #428]	; (8009a14 <HAL_DMA_Abort+0x230>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d027      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	4a6a      	ldr	r2, [pc, #424]	; (8009a18 <HAL_DMA_Abort+0x234>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d022      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	4a68      	ldr	r2, [pc, #416]	; (8009a1c <HAL_DMA_Abort+0x238>)
 800987a:	4293      	cmp	r3, r2
 800987c:	d01d      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a67      	ldr	r2, [pc, #412]	; (8009a20 <HAL_DMA_Abort+0x23c>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d018      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	4a65      	ldr	r2, [pc, #404]	; (8009a24 <HAL_DMA_Abort+0x240>)
 800988e:	4293      	cmp	r3, r2
 8009890:	d013      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a64      	ldr	r2, [pc, #400]	; (8009a28 <HAL_DMA_Abort+0x244>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d00e      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a62      	ldr	r2, [pc, #392]	; (8009a2c <HAL_DMA_Abort+0x248>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d009      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	4a61      	ldr	r2, [pc, #388]	; (8009a30 <HAL_DMA_Abort+0x24c>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d004      	beq.n	80098ba <HAL_DMA_Abort+0xd6>
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	4a5f      	ldr	r2, [pc, #380]	; (8009a34 <HAL_DMA_Abort+0x250>)
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d101      	bne.n	80098be <HAL_DMA_Abort+0xda>
 80098ba:	2301      	movs	r3, #1
 80098bc:	e000      	b.n	80098c0 <HAL_DMA_Abort+0xdc>
 80098be:	2300      	movs	r3, #0
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d013      	beq.n	80098ec <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f022 021e 	bic.w	r2, r2, #30
 80098d2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	695a      	ldr	r2, [r3, #20]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098e2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	e00a      	b.n	8009902 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 020e 	bic.w	r2, r2, #14
 80098fa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a3c      	ldr	r2, [pc, #240]	; (80099f8 <HAL_DMA_Abort+0x214>)
 8009908:	4293      	cmp	r3, r2
 800990a:	d072      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	4a3a      	ldr	r2, [pc, #232]	; (80099fc <HAL_DMA_Abort+0x218>)
 8009912:	4293      	cmp	r3, r2
 8009914:	d06d      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4a39      	ldr	r2, [pc, #228]	; (8009a00 <HAL_DMA_Abort+0x21c>)
 800991c:	4293      	cmp	r3, r2
 800991e:	d068      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	4a37      	ldr	r2, [pc, #220]	; (8009a04 <HAL_DMA_Abort+0x220>)
 8009926:	4293      	cmp	r3, r2
 8009928:	d063      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	4a36      	ldr	r2, [pc, #216]	; (8009a08 <HAL_DMA_Abort+0x224>)
 8009930:	4293      	cmp	r3, r2
 8009932:	d05e      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	4a34      	ldr	r2, [pc, #208]	; (8009a0c <HAL_DMA_Abort+0x228>)
 800993a:	4293      	cmp	r3, r2
 800993c:	d059      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	4a33      	ldr	r2, [pc, #204]	; (8009a10 <HAL_DMA_Abort+0x22c>)
 8009944:	4293      	cmp	r3, r2
 8009946:	d054      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	4a31      	ldr	r2, [pc, #196]	; (8009a14 <HAL_DMA_Abort+0x230>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d04f      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	4a30      	ldr	r2, [pc, #192]	; (8009a18 <HAL_DMA_Abort+0x234>)
 8009958:	4293      	cmp	r3, r2
 800995a:	d04a      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	4a2e      	ldr	r2, [pc, #184]	; (8009a1c <HAL_DMA_Abort+0x238>)
 8009962:	4293      	cmp	r3, r2
 8009964:	d045      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	4a2d      	ldr	r2, [pc, #180]	; (8009a20 <HAL_DMA_Abort+0x23c>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d040      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a2b      	ldr	r2, [pc, #172]	; (8009a24 <HAL_DMA_Abort+0x240>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d03b      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a2a      	ldr	r2, [pc, #168]	; (8009a28 <HAL_DMA_Abort+0x244>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d036      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a28      	ldr	r2, [pc, #160]	; (8009a2c <HAL_DMA_Abort+0x248>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d031      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a27      	ldr	r2, [pc, #156]	; (8009a30 <HAL_DMA_Abort+0x24c>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d02c      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	4a25      	ldr	r2, [pc, #148]	; (8009a34 <HAL_DMA_Abort+0x250>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d027      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	4a24      	ldr	r2, [pc, #144]	; (8009a38 <HAL_DMA_Abort+0x254>)
 80099a8:	4293      	cmp	r3, r2
 80099aa:	d022      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	4a22      	ldr	r2, [pc, #136]	; (8009a3c <HAL_DMA_Abort+0x258>)
 80099b2:	4293      	cmp	r3, r2
 80099b4:	d01d      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	4a21      	ldr	r2, [pc, #132]	; (8009a40 <HAL_DMA_Abort+0x25c>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d018      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	4a1f      	ldr	r2, [pc, #124]	; (8009a44 <HAL_DMA_Abort+0x260>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d013      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	4a1e      	ldr	r2, [pc, #120]	; (8009a48 <HAL_DMA_Abort+0x264>)
 80099d0:	4293      	cmp	r3, r2
 80099d2:	d00e      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4a1c      	ldr	r2, [pc, #112]	; (8009a4c <HAL_DMA_Abort+0x268>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d009      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	4a1b      	ldr	r2, [pc, #108]	; (8009a50 <HAL_DMA_Abort+0x26c>)
 80099e4:	4293      	cmp	r3, r2
 80099e6:	d004      	beq.n	80099f2 <HAL_DMA_Abort+0x20e>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	4a19      	ldr	r2, [pc, #100]	; (8009a54 <HAL_DMA_Abort+0x270>)
 80099ee:	4293      	cmp	r3, r2
 80099f0:	d132      	bne.n	8009a58 <HAL_DMA_Abort+0x274>
 80099f2:	2301      	movs	r3, #1
 80099f4:	e031      	b.n	8009a5a <HAL_DMA_Abort+0x276>
 80099f6:	bf00      	nop
 80099f8:	40020010 	.word	0x40020010
 80099fc:	40020028 	.word	0x40020028
 8009a00:	40020040 	.word	0x40020040
 8009a04:	40020058 	.word	0x40020058
 8009a08:	40020070 	.word	0x40020070
 8009a0c:	40020088 	.word	0x40020088
 8009a10:	400200a0 	.word	0x400200a0
 8009a14:	400200b8 	.word	0x400200b8
 8009a18:	40020410 	.word	0x40020410
 8009a1c:	40020428 	.word	0x40020428
 8009a20:	40020440 	.word	0x40020440
 8009a24:	40020458 	.word	0x40020458
 8009a28:	40020470 	.word	0x40020470
 8009a2c:	40020488 	.word	0x40020488
 8009a30:	400204a0 	.word	0x400204a0
 8009a34:	400204b8 	.word	0x400204b8
 8009a38:	58025408 	.word	0x58025408
 8009a3c:	5802541c 	.word	0x5802541c
 8009a40:	58025430 	.word	0x58025430
 8009a44:	58025444 	.word	0x58025444
 8009a48:	58025458 	.word	0x58025458
 8009a4c:	5802546c 	.word	0x5802546c
 8009a50:	58025480 	.word	0x58025480
 8009a54:	58025494 	.word	0x58025494
 8009a58:	2300      	movs	r3, #0
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d007      	beq.n	8009a6e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009a68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009a6c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a6d      	ldr	r2, [pc, #436]	; (8009c28 <HAL_DMA_Abort+0x444>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d04a      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a6b      	ldr	r2, [pc, #428]	; (8009c2c <HAL_DMA_Abort+0x448>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d045      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a6a      	ldr	r2, [pc, #424]	; (8009c30 <HAL_DMA_Abort+0x44c>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d040      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4a68      	ldr	r2, [pc, #416]	; (8009c34 <HAL_DMA_Abort+0x450>)
 8009a92:	4293      	cmp	r3, r2
 8009a94:	d03b      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	4a67      	ldr	r2, [pc, #412]	; (8009c38 <HAL_DMA_Abort+0x454>)
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d036      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a65      	ldr	r2, [pc, #404]	; (8009c3c <HAL_DMA_Abort+0x458>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d031      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	4a64      	ldr	r2, [pc, #400]	; (8009c40 <HAL_DMA_Abort+0x45c>)
 8009ab0:	4293      	cmp	r3, r2
 8009ab2:	d02c      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	4a62      	ldr	r2, [pc, #392]	; (8009c44 <HAL_DMA_Abort+0x460>)
 8009aba:	4293      	cmp	r3, r2
 8009abc:	d027      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	4a61      	ldr	r2, [pc, #388]	; (8009c48 <HAL_DMA_Abort+0x464>)
 8009ac4:	4293      	cmp	r3, r2
 8009ac6:	d022      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	4a5f      	ldr	r2, [pc, #380]	; (8009c4c <HAL_DMA_Abort+0x468>)
 8009ace:	4293      	cmp	r3, r2
 8009ad0:	d01d      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a5e      	ldr	r2, [pc, #376]	; (8009c50 <HAL_DMA_Abort+0x46c>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d018      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a5c      	ldr	r2, [pc, #368]	; (8009c54 <HAL_DMA_Abort+0x470>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d013      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a5b      	ldr	r2, [pc, #364]	; (8009c58 <HAL_DMA_Abort+0x474>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d00e      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a59      	ldr	r2, [pc, #356]	; (8009c5c <HAL_DMA_Abort+0x478>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d009      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a58      	ldr	r2, [pc, #352]	; (8009c60 <HAL_DMA_Abort+0x47c>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d004      	beq.n	8009b0e <HAL_DMA_Abort+0x32a>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a56      	ldr	r2, [pc, #344]	; (8009c64 <HAL_DMA_Abort+0x480>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d108      	bne.n	8009b20 <HAL_DMA_Abort+0x33c>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	f022 0201 	bic.w	r2, r2, #1
 8009b1c:	601a      	str	r2, [r3, #0]
 8009b1e:	e007      	b.n	8009b30 <HAL_DMA_Abort+0x34c>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f022 0201 	bic.w	r2, r2, #1
 8009b2e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009b30:	e013      	b.n	8009b5a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009b32:	f7fc ff69 	bl	8006a08 <HAL_GetTick>
 8009b36:	4602      	mov	r2, r0
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	1ad3      	subs	r3, r2, r3
 8009b3c:	2b05      	cmp	r3, #5
 8009b3e:	d90c      	bls.n	8009b5a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2220      	movs	r2, #32
 8009b44:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2203      	movs	r2, #3
 8009b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	2200      	movs	r2, #0
 8009b52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8009b56:	2301      	movs	r3, #1
 8009b58:	e12d      	b.n	8009db6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f003 0301 	and.w	r3, r3, #1
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1e5      	bne.n	8009b32 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a2f      	ldr	r2, [pc, #188]	; (8009c28 <HAL_DMA_Abort+0x444>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d04a      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	4a2d      	ldr	r2, [pc, #180]	; (8009c2c <HAL_DMA_Abort+0x448>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d045      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a2c      	ldr	r2, [pc, #176]	; (8009c30 <HAL_DMA_Abort+0x44c>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d040      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	4a2a      	ldr	r2, [pc, #168]	; (8009c34 <HAL_DMA_Abort+0x450>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d03b      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	4a29      	ldr	r2, [pc, #164]	; (8009c38 <HAL_DMA_Abort+0x454>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d036      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4a27      	ldr	r2, [pc, #156]	; (8009c3c <HAL_DMA_Abort+0x458>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d031      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	4a26      	ldr	r2, [pc, #152]	; (8009c40 <HAL_DMA_Abort+0x45c>)
 8009ba8:	4293      	cmp	r3, r2
 8009baa:	d02c      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	4a24      	ldr	r2, [pc, #144]	; (8009c44 <HAL_DMA_Abort+0x460>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d027      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a23      	ldr	r2, [pc, #140]	; (8009c48 <HAL_DMA_Abort+0x464>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d022      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	4a21      	ldr	r2, [pc, #132]	; (8009c4c <HAL_DMA_Abort+0x468>)
 8009bc6:	4293      	cmp	r3, r2
 8009bc8:	d01d      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	4a20      	ldr	r2, [pc, #128]	; (8009c50 <HAL_DMA_Abort+0x46c>)
 8009bd0:	4293      	cmp	r3, r2
 8009bd2:	d018      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	4a1e      	ldr	r2, [pc, #120]	; (8009c54 <HAL_DMA_Abort+0x470>)
 8009bda:	4293      	cmp	r3, r2
 8009bdc:	d013      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	4a1d      	ldr	r2, [pc, #116]	; (8009c58 <HAL_DMA_Abort+0x474>)
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d00e      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	4a1b      	ldr	r2, [pc, #108]	; (8009c5c <HAL_DMA_Abort+0x478>)
 8009bee:	4293      	cmp	r3, r2
 8009bf0:	d009      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	4a1a      	ldr	r2, [pc, #104]	; (8009c60 <HAL_DMA_Abort+0x47c>)
 8009bf8:	4293      	cmp	r3, r2
 8009bfa:	d004      	beq.n	8009c06 <HAL_DMA_Abort+0x422>
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	4a18      	ldr	r2, [pc, #96]	; (8009c64 <HAL_DMA_Abort+0x480>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d101      	bne.n	8009c0a <HAL_DMA_Abort+0x426>
 8009c06:	2301      	movs	r3, #1
 8009c08:	e000      	b.n	8009c0c <HAL_DMA_Abort+0x428>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d02b      	beq.n	8009c68 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c14:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c1a:	f003 031f 	and.w	r3, r3, #31
 8009c1e:	223f      	movs	r2, #63	; 0x3f
 8009c20:	409a      	lsls	r2, r3
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	609a      	str	r2, [r3, #8]
 8009c26:	e02a      	b.n	8009c7e <HAL_DMA_Abort+0x49a>
 8009c28:	40020010 	.word	0x40020010
 8009c2c:	40020028 	.word	0x40020028
 8009c30:	40020040 	.word	0x40020040
 8009c34:	40020058 	.word	0x40020058
 8009c38:	40020070 	.word	0x40020070
 8009c3c:	40020088 	.word	0x40020088
 8009c40:	400200a0 	.word	0x400200a0
 8009c44:	400200b8 	.word	0x400200b8
 8009c48:	40020410 	.word	0x40020410
 8009c4c:	40020428 	.word	0x40020428
 8009c50:	40020440 	.word	0x40020440
 8009c54:	40020458 	.word	0x40020458
 8009c58:	40020470 	.word	0x40020470
 8009c5c:	40020488 	.word	0x40020488
 8009c60:	400204a0 	.word	0x400204a0
 8009c64:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009c6c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009c72:	f003 031f 	and.w	r3, r3, #31
 8009c76:	2201      	movs	r2, #1
 8009c78:	409a      	lsls	r2, r3
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a4f      	ldr	r2, [pc, #316]	; (8009dc0 <HAL_DMA_Abort+0x5dc>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d072      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a4d      	ldr	r2, [pc, #308]	; (8009dc4 <HAL_DMA_Abort+0x5e0>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d06d      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a4c      	ldr	r2, [pc, #304]	; (8009dc8 <HAL_DMA_Abort+0x5e4>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d068      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a4a      	ldr	r2, [pc, #296]	; (8009dcc <HAL_DMA_Abort+0x5e8>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d063      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a49      	ldr	r2, [pc, #292]	; (8009dd0 <HAL_DMA_Abort+0x5ec>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d05e      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a47      	ldr	r2, [pc, #284]	; (8009dd4 <HAL_DMA_Abort+0x5f0>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d059      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a46      	ldr	r2, [pc, #280]	; (8009dd8 <HAL_DMA_Abort+0x5f4>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d054      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a44      	ldr	r2, [pc, #272]	; (8009ddc <HAL_DMA_Abort+0x5f8>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d04f      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4a43      	ldr	r2, [pc, #268]	; (8009de0 <HAL_DMA_Abort+0x5fc>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d04a      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	4a41      	ldr	r2, [pc, #260]	; (8009de4 <HAL_DMA_Abort+0x600>)
 8009cde:	4293      	cmp	r3, r2
 8009ce0:	d045      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	4a40      	ldr	r2, [pc, #256]	; (8009de8 <HAL_DMA_Abort+0x604>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d040      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	4a3e      	ldr	r2, [pc, #248]	; (8009dec <HAL_DMA_Abort+0x608>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d03b      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a3d      	ldr	r2, [pc, #244]	; (8009df0 <HAL_DMA_Abort+0x60c>)
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d036      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	4a3b      	ldr	r2, [pc, #236]	; (8009df4 <HAL_DMA_Abort+0x610>)
 8009d06:	4293      	cmp	r3, r2
 8009d08:	d031      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	4a3a      	ldr	r2, [pc, #232]	; (8009df8 <HAL_DMA_Abort+0x614>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d02c      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	4a38      	ldr	r2, [pc, #224]	; (8009dfc <HAL_DMA_Abort+0x618>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d027      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	4a37      	ldr	r2, [pc, #220]	; (8009e00 <HAL_DMA_Abort+0x61c>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d022      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	4a35      	ldr	r2, [pc, #212]	; (8009e04 <HAL_DMA_Abort+0x620>)
 8009d2e:	4293      	cmp	r3, r2
 8009d30:	d01d      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	4a34      	ldr	r2, [pc, #208]	; (8009e08 <HAL_DMA_Abort+0x624>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d018      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a32      	ldr	r2, [pc, #200]	; (8009e0c <HAL_DMA_Abort+0x628>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d013      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a31      	ldr	r2, [pc, #196]	; (8009e10 <HAL_DMA_Abort+0x62c>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d00e      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a2f      	ldr	r2, [pc, #188]	; (8009e14 <HAL_DMA_Abort+0x630>)
 8009d56:	4293      	cmp	r3, r2
 8009d58:	d009      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	4a2e      	ldr	r2, [pc, #184]	; (8009e18 <HAL_DMA_Abort+0x634>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d004      	beq.n	8009d6e <HAL_DMA_Abort+0x58a>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	4a2c      	ldr	r2, [pc, #176]	; (8009e1c <HAL_DMA_Abort+0x638>)
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	d101      	bne.n	8009d72 <HAL_DMA_Abort+0x58e>
 8009d6e:	2301      	movs	r3, #1
 8009d70:	e000      	b.n	8009d74 <HAL_DMA_Abort+0x590>
 8009d72:	2300      	movs	r3, #0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d015      	beq.n	8009da4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009d80:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d00c      	beq.n	8009da4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009d94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d98:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9e:	687a      	ldr	r2, [r7, #4]
 8009da0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009da2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2201      	movs	r2, #1
 8009da8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	2200      	movs	r2, #0
 8009db0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8009db4:	2300      	movs	r3, #0
}
 8009db6:	4618      	mov	r0, r3
 8009db8:	3718      	adds	r7, #24
 8009dba:	46bd      	mov	sp, r7
 8009dbc:	bd80      	pop	{r7, pc}
 8009dbe:	bf00      	nop
 8009dc0:	40020010 	.word	0x40020010
 8009dc4:	40020028 	.word	0x40020028
 8009dc8:	40020040 	.word	0x40020040
 8009dcc:	40020058 	.word	0x40020058
 8009dd0:	40020070 	.word	0x40020070
 8009dd4:	40020088 	.word	0x40020088
 8009dd8:	400200a0 	.word	0x400200a0
 8009ddc:	400200b8 	.word	0x400200b8
 8009de0:	40020410 	.word	0x40020410
 8009de4:	40020428 	.word	0x40020428
 8009de8:	40020440 	.word	0x40020440
 8009dec:	40020458 	.word	0x40020458
 8009df0:	40020470 	.word	0x40020470
 8009df4:	40020488 	.word	0x40020488
 8009df8:	400204a0 	.word	0x400204a0
 8009dfc:	400204b8 	.word	0x400204b8
 8009e00:	58025408 	.word	0x58025408
 8009e04:	5802541c 	.word	0x5802541c
 8009e08:	58025430 	.word	0x58025430
 8009e0c:	58025444 	.word	0x58025444
 8009e10:	58025458 	.word	0x58025458
 8009e14:	5802546c 	.word	0x5802546c
 8009e18:	58025480 	.word	0x58025480
 8009e1c:	58025494 	.word	0x58025494

08009e20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d101      	bne.n	8009e32 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e237      	b.n	800a2a2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	2b02      	cmp	r3, #2
 8009e3c:	d004      	beq.n	8009e48 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2280      	movs	r2, #128	; 0x80
 8009e42:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8009e44:	2301      	movs	r3, #1
 8009e46:	e22c      	b.n	800a2a2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	4a5c      	ldr	r2, [pc, #368]	; (8009fc0 <HAL_DMA_Abort_IT+0x1a0>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d04a      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	4a5b      	ldr	r2, [pc, #364]	; (8009fc4 <HAL_DMA_Abort_IT+0x1a4>)
 8009e58:	4293      	cmp	r3, r2
 8009e5a:	d045      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	4a59      	ldr	r2, [pc, #356]	; (8009fc8 <HAL_DMA_Abort_IT+0x1a8>)
 8009e62:	4293      	cmp	r3, r2
 8009e64:	d040      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4a58      	ldr	r2, [pc, #352]	; (8009fcc <HAL_DMA_Abort_IT+0x1ac>)
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	d03b      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	4a56      	ldr	r2, [pc, #344]	; (8009fd0 <HAL_DMA_Abort_IT+0x1b0>)
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d036      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	4a55      	ldr	r2, [pc, #340]	; (8009fd4 <HAL_DMA_Abort_IT+0x1b4>)
 8009e80:	4293      	cmp	r3, r2
 8009e82:	d031      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a53      	ldr	r2, [pc, #332]	; (8009fd8 <HAL_DMA_Abort_IT+0x1b8>)
 8009e8a:	4293      	cmp	r3, r2
 8009e8c:	d02c      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	4a52      	ldr	r2, [pc, #328]	; (8009fdc <HAL_DMA_Abort_IT+0x1bc>)
 8009e94:	4293      	cmp	r3, r2
 8009e96:	d027      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	4a50      	ldr	r2, [pc, #320]	; (8009fe0 <HAL_DMA_Abort_IT+0x1c0>)
 8009e9e:	4293      	cmp	r3, r2
 8009ea0:	d022      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a4f      	ldr	r2, [pc, #316]	; (8009fe4 <HAL_DMA_Abort_IT+0x1c4>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d01d      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a4d      	ldr	r2, [pc, #308]	; (8009fe8 <HAL_DMA_Abort_IT+0x1c8>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d018      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	4a4c      	ldr	r2, [pc, #304]	; (8009fec <HAL_DMA_Abort_IT+0x1cc>)
 8009ebc:	4293      	cmp	r3, r2
 8009ebe:	d013      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	4a4a      	ldr	r2, [pc, #296]	; (8009ff0 <HAL_DMA_Abort_IT+0x1d0>)
 8009ec6:	4293      	cmp	r3, r2
 8009ec8:	d00e      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	4a49      	ldr	r2, [pc, #292]	; (8009ff4 <HAL_DMA_Abort_IT+0x1d4>)
 8009ed0:	4293      	cmp	r3, r2
 8009ed2:	d009      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	4a47      	ldr	r2, [pc, #284]	; (8009ff8 <HAL_DMA_Abort_IT+0x1d8>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d004      	beq.n	8009ee8 <HAL_DMA_Abort_IT+0xc8>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	4a46      	ldr	r2, [pc, #280]	; (8009ffc <HAL_DMA_Abort_IT+0x1dc>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d101      	bne.n	8009eec <HAL_DMA_Abort_IT+0xcc>
 8009ee8:	2301      	movs	r3, #1
 8009eea:	e000      	b.n	8009eee <HAL_DMA_Abort_IT+0xce>
 8009eec:	2300      	movs	r3, #0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	f000 8086 	beq.w	800a000 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2204      	movs	r2, #4
 8009ef8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a2f      	ldr	r2, [pc, #188]	; (8009fc0 <HAL_DMA_Abort_IT+0x1a0>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d04a      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4a2e      	ldr	r2, [pc, #184]	; (8009fc4 <HAL_DMA_Abort_IT+0x1a4>)
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	d045      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	4a2c      	ldr	r2, [pc, #176]	; (8009fc8 <HAL_DMA_Abort_IT+0x1a8>)
 8009f16:	4293      	cmp	r3, r2
 8009f18:	d040      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	4a2b      	ldr	r2, [pc, #172]	; (8009fcc <HAL_DMA_Abort_IT+0x1ac>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d03b      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	4a29      	ldr	r2, [pc, #164]	; (8009fd0 <HAL_DMA_Abort_IT+0x1b0>)
 8009f2a:	4293      	cmp	r3, r2
 8009f2c:	d036      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a28      	ldr	r2, [pc, #160]	; (8009fd4 <HAL_DMA_Abort_IT+0x1b4>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	d031      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	4a26      	ldr	r2, [pc, #152]	; (8009fd8 <HAL_DMA_Abort_IT+0x1b8>)
 8009f3e:	4293      	cmp	r3, r2
 8009f40:	d02c      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a25      	ldr	r2, [pc, #148]	; (8009fdc <HAL_DMA_Abort_IT+0x1bc>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d027      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a23      	ldr	r2, [pc, #140]	; (8009fe0 <HAL_DMA_Abort_IT+0x1c0>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d022      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a22      	ldr	r2, [pc, #136]	; (8009fe4 <HAL_DMA_Abort_IT+0x1c4>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d01d      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a20      	ldr	r2, [pc, #128]	; (8009fe8 <HAL_DMA_Abort_IT+0x1c8>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d018      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a1f      	ldr	r2, [pc, #124]	; (8009fec <HAL_DMA_Abort_IT+0x1cc>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d013      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a1d      	ldr	r2, [pc, #116]	; (8009ff0 <HAL_DMA_Abort_IT+0x1d0>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d00e      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a1c      	ldr	r2, [pc, #112]	; (8009ff4 <HAL_DMA_Abort_IT+0x1d4>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d009      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a1a      	ldr	r2, [pc, #104]	; (8009ff8 <HAL_DMA_Abort_IT+0x1d8>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d004      	beq.n	8009f9c <HAL_DMA_Abort_IT+0x17c>
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	4a19      	ldr	r2, [pc, #100]	; (8009ffc <HAL_DMA_Abort_IT+0x1dc>)
 8009f98:	4293      	cmp	r3, r2
 8009f9a:	d108      	bne.n	8009fae <HAL_DMA_Abort_IT+0x18e>
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f022 0201 	bic.w	r2, r2, #1
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	e178      	b.n	800a2a0 <HAL_DMA_Abort_IT+0x480>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f022 0201 	bic.w	r2, r2, #1
 8009fbc:	601a      	str	r2, [r3, #0]
 8009fbe:	e16f      	b.n	800a2a0 <HAL_DMA_Abort_IT+0x480>
 8009fc0:	40020010 	.word	0x40020010
 8009fc4:	40020028 	.word	0x40020028
 8009fc8:	40020040 	.word	0x40020040
 8009fcc:	40020058 	.word	0x40020058
 8009fd0:	40020070 	.word	0x40020070
 8009fd4:	40020088 	.word	0x40020088
 8009fd8:	400200a0 	.word	0x400200a0
 8009fdc:	400200b8 	.word	0x400200b8
 8009fe0:	40020410 	.word	0x40020410
 8009fe4:	40020428 	.word	0x40020428
 8009fe8:	40020440 	.word	0x40020440
 8009fec:	40020458 	.word	0x40020458
 8009ff0:	40020470 	.word	0x40020470
 8009ff4:	40020488 	.word	0x40020488
 8009ff8:	400204a0 	.word	0x400204a0
 8009ffc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681a      	ldr	r2, [r3, #0]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	f022 020e 	bic.w	r2, r2, #14
 800a00e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a6c      	ldr	r2, [pc, #432]	; (800a1c8 <HAL_DMA_Abort_IT+0x3a8>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d04a      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	4a6b      	ldr	r2, [pc, #428]	; (800a1cc <HAL_DMA_Abort_IT+0x3ac>)
 800a020:	4293      	cmp	r3, r2
 800a022:	d045      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a69      	ldr	r2, [pc, #420]	; (800a1d0 <HAL_DMA_Abort_IT+0x3b0>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d040      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	4a68      	ldr	r2, [pc, #416]	; (800a1d4 <HAL_DMA_Abort_IT+0x3b4>)
 800a034:	4293      	cmp	r3, r2
 800a036:	d03b      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	4a66      	ldr	r2, [pc, #408]	; (800a1d8 <HAL_DMA_Abort_IT+0x3b8>)
 800a03e:	4293      	cmp	r3, r2
 800a040:	d036      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	4a65      	ldr	r2, [pc, #404]	; (800a1dc <HAL_DMA_Abort_IT+0x3bc>)
 800a048:	4293      	cmp	r3, r2
 800a04a:	d031      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	4a63      	ldr	r2, [pc, #396]	; (800a1e0 <HAL_DMA_Abort_IT+0x3c0>)
 800a052:	4293      	cmp	r3, r2
 800a054:	d02c      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	4a62      	ldr	r2, [pc, #392]	; (800a1e4 <HAL_DMA_Abort_IT+0x3c4>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d027      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a60      	ldr	r2, [pc, #384]	; (800a1e8 <HAL_DMA_Abort_IT+0x3c8>)
 800a066:	4293      	cmp	r3, r2
 800a068:	d022      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	4a5f      	ldr	r2, [pc, #380]	; (800a1ec <HAL_DMA_Abort_IT+0x3cc>)
 800a070:	4293      	cmp	r3, r2
 800a072:	d01d      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	4a5d      	ldr	r2, [pc, #372]	; (800a1f0 <HAL_DMA_Abort_IT+0x3d0>)
 800a07a:	4293      	cmp	r3, r2
 800a07c:	d018      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a5c      	ldr	r2, [pc, #368]	; (800a1f4 <HAL_DMA_Abort_IT+0x3d4>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d013      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	4a5a      	ldr	r2, [pc, #360]	; (800a1f8 <HAL_DMA_Abort_IT+0x3d8>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d00e      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	4a59      	ldr	r2, [pc, #356]	; (800a1fc <HAL_DMA_Abort_IT+0x3dc>)
 800a098:	4293      	cmp	r3, r2
 800a09a:	d009      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	4a57      	ldr	r2, [pc, #348]	; (800a200 <HAL_DMA_Abort_IT+0x3e0>)
 800a0a2:	4293      	cmp	r3, r2
 800a0a4:	d004      	beq.n	800a0b0 <HAL_DMA_Abort_IT+0x290>
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	4a56      	ldr	r2, [pc, #344]	; (800a204 <HAL_DMA_Abort_IT+0x3e4>)
 800a0ac:	4293      	cmp	r3, r2
 800a0ae:	d108      	bne.n	800a0c2 <HAL_DMA_Abort_IT+0x2a2>
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	681a      	ldr	r2, [r3, #0]
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f022 0201 	bic.w	r2, r2, #1
 800a0be:	601a      	str	r2, [r3, #0]
 800a0c0:	e007      	b.n	800a0d2 <HAL_DMA_Abort_IT+0x2b2>
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	f022 0201 	bic.w	r2, r2, #1
 800a0d0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	4a3c      	ldr	r2, [pc, #240]	; (800a1c8 <HAL_DMA_Abort_IT+0x3a8>)
 800a0d8:	4293      	cmp	r3, r2
 800a0da:	d072      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a3a      	ldr	r2, [pc, #232]	; (800a1cc <HAL_DMA_Abort_IT+0x3ac>)
 800a0e2:	4293      	cmp	r3, r2
 800a0e4:	d06d      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a39      	ldr	r2, [pc, #228]	; (800a1d0 <HAL_DMA_Abort_IT+0x3b0>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d068      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	4a37      	ldr	r2, [pc, #220]	; (800a1d4 <HAL_DMA_Abort_IT+0x3b4>)
 800a0f6:	4293      	cmp	r3, r2
 800a0f8:	d063      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	4a36      	ldr	r2, [pc, #216]	; (800a1d8 <HAL_DMA_Abort_IT+0x3b8>)
 800a100:	4293      	cmp	r3, r2
 800a102:	d05e      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	4a34      	ldr	r2, [pc, #208]	; (800a1dc <HAL_DMA_Abort_IT+0x3bc>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d059      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	4a33      	ldr	r2, [pc, #204]	; (800a1e0 <HAL_DMA_Abort_IT+0x3c0>)
 800a114:	4293      	cmp	r3, r2
 800a116:	d054      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	4a31      	ldr	r2, [pc, #196]	; (800a1e4 <HAL_DMA_Abort_IT+0x3c4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d04f      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	4a30      	ldr	r2, [pc, #192]	; (800a1e8 <HAL_DMA_Abort_IT+0x3c8>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d04a      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	4a2e      	ldr	r2, [pc, #184]	; (800a1ec <HAL_DMA_Abort_IT+0x3cc>)
 800a132:	4293      	cmp	r3, r2
 800a134:	d045      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	4a2d      	ldr	r2, [pc, #180]	; (800a1f0 <HAL_DMA_Abort_IT+0x3d0>)
 800a13c:	4293      	cmp	r3, r2
 800a13e:	d040      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	4a2b      	ldr	r2, [pc, #172]	; (800a1f4 <HAL_DMA_Abort_IT+0x3d4>)
 800a146:	4293      	cmp	r3, r2
 800a148:	d03b      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	4a2a      	ldr	r2, [pc, #168]	; (800a1f8 <HAL_DMA_Abort_IT+0x3d8>)
 800a150:	4293      	cmp	r3, r2
 800a152:	d036      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a28      	ldr	r2, [pc, #160]	; (800a1fc <HAL_DMA_Abort_IT+0x3dc>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d031      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a27      	ldr	r2, [pc, #156]	; (800a200 <HAL_DMA_Abort_IT+0x3e0>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d02c      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a25      	ldr	r2, [pc, #148]	; (800a204 <HAL_DMA_Abort_IT+0x3e4>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d027      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a24      	ldr	r2, [pc, #144]	; (800a208 <HAL_DMA_Abort_IT+0x3e8>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d022      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a22      	ldr	r2, [pc, #136]	; (800a20c <HAL_DMA_Abort_IT+0x3ec>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d01d      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a21      	ldr	r2, [pc, #132]	; (800a210 <HAL_DMA_Abort_IT+0x3f0>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d018      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a1f      	ldr	r2, [pc, #124]	; (800a214 <HAL_DMA_Abort_IT+0x3f4>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d013      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a1e      	ldr	r2, [pc, #120]	; (800a218 <HAL_DMA_Abort_IT+0x3f8>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d00e      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a1c      	ldr	r2, [pc, #112]	; (800a21c <HAL_DMA_Abort_IT+0x3fc>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d009      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a1b      	ldr	r2, [pc, #108]	; (800a220 <HAL_DMA_Abort_IT+0x400>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d004      	beq.n	800a1c2 <HAL_DMA_Abort_IT+0x3a2>
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a19      	ldr	r2, [pc, #100]	; (800a224 <HAL_DMA_Abort_IT+0x404>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d132      	bne.n	800a228 <HAL_DMA_Abort_IT+0x408>
 800a1c2:	2301      	movs	r3, #1
 800a1c4:	e031      	b.n	800a22a <HAL_DMA_Abort_IT+0x40a>
 800a1c6:	bf00      	nop
 800a1c8:	40020010 	.word	0x40020010
 800a1cc:	40020028 	.word	0x40020028
 800a1d0:	40020040 	.word	0x40020040
 800a1d4:	40020058 	.word	0x40020058
 800a1d8:	40020070 	.word	0x40020070
 800a1dc:	40020088 	.word	0x40020088
 800a1e0:	400200a0 	.word	0x400200a0
 800a1e4:	400200b8 	.word	0x400200b8
 800a1e8:	40020410 	.word	0x40020410
 800a1ec:	40020428 	.word	0x40020428
 800a1f0:	40020440 	.word	0x40020440
 800a1f4:	40020458 	.word	0x40020458
 800a1f8:	40020470 	.word	0x40020470
 800a1fc:	40020488 	.word	0x40020488
 800a200:	400204a0 	.word	0x400204a0
 800a204:	400204b8 	.word	0x400204b8
 800a208:	58025408 	.word	0x58025408
 800a20c:	5802541c 	.word	0x5802541c
 800a210:	58025430 	.word	0x58025430
 800a214:	58025444 	.word	0x58025444
 800a218:	58025458 	.word	0x58025458
 800a21c:	5802546c 	.word	0x5802546c
 800a220:	58025480 	.word	0x58025480
 800a224:	58025494 	.word	0x58025494
 800a228:	2300      	movs	r3, #0
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d028      	beq.n	800a280 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a232:	681a      	ldr	r2, [r3, #0]
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a238:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a23c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a242:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a248:	f003 031f 	and.w	r3, r3, #31
 800a24c:	2201      	movs	r2, #1
 800a24e:	409a      	lsls	r2, r3
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a258:	687a      	ldr	r2, [r7, #4]
 800a25a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800a25c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d00c      	beq.n	800a280 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a26a:	681a      	ldr	r2, [r3, #0]
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a270:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a274:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a27a:	687a      	ldr	r2, [r7, #4]
 800a27c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800a27e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2201      	movs	r2, #1
 800a284:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a294:	2b00      	cmp	r3, #0
 800a296:	d003      	beq.n	800a2a0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a29c:	6878      	ldr	r0, [r7, #4]
 800a29e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800a2a0:	2300      	movs	r3, #0
}
 800a2a2:	4618      	mov	r0, r3
 800a2a4:	3710      	adds	r7, #16
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	bd80      	pop	{r7, pc}
 800a2aa:	bf00      	nop

0800a2ac <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b08a      	sub	sp, #40	; 0x28
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800a2b8:	4b67      	ldr	r3, [pc, #412]	; (800a458 <HAL_DMA_IRQHandler+0x1ac>)
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	4a67      	ldr	r2, [pc, #412]	; (800a45c <HAL_DMA_IRQHandler+0x1b0>)
 800a2be:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c2:	0a9b      	lsrs	r3, r3, #10
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2ca:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2d0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800a2d2:	6a3b      	ldr	r3, [r7, #32]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800a2d8:	69fb      	ldr	r3, [r7, #28]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	4a5f      	ldr	r2, [pc, #380]	; (800a460 <HAL_DMA_IRQHandler+0x1b4>)
 800a2e4:	4293      	cmp	r3, r2
 800a2e6:	d04a      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	681b      	ldr	r3, [r3, #0]
 800a2ec:	4a5d      	ldr	r2, [pc, #372]	; (800a464 <HAL_DMA_IRQHandler+0x1b8>)
 800a2ee:	4293      	cmp	r3, r2
 800a2f0:	d045      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	4a5c      	ldr	r2, [pc, #368]	; (800a468 <HAL_DMA_IRQHandler+0x1bc>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d040      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	4a5a      	ldr	r2, [pc, #360]	; (800a46c <HAL_DMA_IRQHandler+0x1c0>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d03b      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	4a59      	ldr	r2, [pc, #356]	; (800a470 <HAL_DMA_IRQHandler+0x1c4>)
 800a30c:	4293      	cmp	r3, r2
 800a30e:	d036      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	4a57      	ldr	r2, [pc, #348]	; (800a474 <HAL_DMA_IRQHandler+0x1c8>)
 800a316:	4293      	cmp	r3, r2
 800a318:	d031      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	4a56      	ldr	r2, [pc, #344]	; (800a478 <HAL_DMA_IRQHandler+0x1cc>)
 800a320:	4293      	cmp	r3, r2
 800a322:	d02c      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a54      	ldr	r2, [pc, #336]	; (800a47c <HAL_DMA_IRQHandler+0x1d0>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d027      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	4a53      	ldr	r2, [pc, #332]	; (800a480 <HAL_DMA_IRQHandler+0x1d4>)
 800a334:	4293      	cmp	r3, r2
 800a336:	d022      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	4a51      	ldr	r2, [pc, #324]	; (800a484 <HAL_DMA_IRQHandler+0x1d8>)
 800a33e:	4293      	cmp	r3, r2
 800a340:	d01d      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4a50      	ldr	r2, [pc, #320]	; (800a488 <HAL_DMA_IRQHandler+0x1dc>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d018      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a4e      	ldr	r2, [pc, #312]	; (800a48c <HAL_DMA_IRQHandler+0x1e0>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d013      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	4a4d      	ldr	r2, [pc, #308]	; (800a490 <HAL_DMA_IRQHandler+0x1e4>)
 800a35c:	4293      	cmp	r3, r2
 800a35e:	d00e      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a4b      	ldr	r2, [pc, #300]	; (800a494 <HAL_DMA_IRQHandler+0x1e8>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d009      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	4a4a      	ldr	r2, [pc, #296]	; (800a498 <HAL_DMA_IRQHandler+0x1ec>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d004      	beq.n	800a37e <HAL_DMA_IRQHandler+0xd2>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a48      	ldr	r2, [pc, #288]	; (800a49c <HAL_DMA_IRQHandler+0x1f0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d101      	bne.n	800a382 <HAL_DMA_IRQHandler+0xd6>
 800a37e:	2301      	movs	r3, #1
 800a380:	e000      	b.n	800a384 <HAL_DMA_IRQHandler+0xd8>
 800a382:	2300      	movs	r3, #0
 800a384:	2b00      	cmp	r3, #0
 800a386:	f000 842b 	beq.w	800abe0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a38e:	f003 031f 	and.w	r3, r3, #31
 800a392:	2208      	movs	r2, #8
 800a394:	409a      	lsls	r2, r3
 800a396:	69bb      	ldr	r3, [r7, #24]
 800a398:	4013      	ands	r3, r2
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 80a2 	beq.w	800a4e4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4a2e      	ldr	r2, [pc, #184]	; (800a460 <HAL_DMA_IRQHandler+0x1b4>)
 800a3a6:	4293      	cmp	r3, r2
 800a3a8:	d04a      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	4a2d      	ldr	r2, [pc, #180]	; (800a464 <HAL_DMA_IRQHandler+0x1b8>)
 800a3b0:	4293      	cmp	r3, r2
 800a3b2:	d045      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	4a2b      	ldr	r2, [pc, #172]	; (800a468 <HAL_DMA_IRQHandler+0x1bc>)
 800a3ba:	4293      	cmp	r3, r2
 800a3bc:	d040      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	4a2a      	ldr	r2, [pc, #168]	; (800a46c <HAL_DMA_IRQHandler+0x1c0>)
 800a3c4:	4293      	cmp	r3, r2
 800a3c6:	d03b      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a28      	ldr	r2, [pc, #160]	; (800a470 <HAL_DMA_IRQHandler+0x1c4>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d036      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	4a27      	ldr	r2, [pc, #156]	; (800a474 <HAL_DMA_IRQHandler+0x1c8>)
 800a3d8:	4293      	cmp	r3, r2
 800a3da:	d031      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a25      	ldr	r2, [pc, #148]	; (800a478 <HAL_DMA_IRQHandler+0x1cc>)
 800a3e2:	4293      	cmp	r3, r2
 800a3e4:	d02c      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	4a24      	ldr	r2, [pc, #144]	; (800a47c <HAL_DMA_IRQHandler+0x1d0>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d027      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a22      	ldr	r2, [pc, #136]	; (800a480 <HAL_DMA_IRQHandler+0x1d4>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d022      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	4a21      	ldr	r2, [pc, #132]	; (800a484 <HAL_DMA_IRQHandler+0x1d8>)
 800a400:	4293      	cmp	r3, r2
 800a402:	d01d      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	4a1f      	ldr	r2, [pc, #124]	; (800a488 <HAL_DMA_IRQHandler+0x1dc>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d018      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a1e      	ldr	r2, [pc, #120]	; (800a48c <HAL_DMA_IRQHandler+0x1e0>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d013      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a1c      	ldr	r2, [pc, #112]	; (800a490 <HAL_DMA_IRQHandler+0x1e4>)
 800a41e:	4293      	cmp	r3, r2
 800a420:	d00e      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	4a1b      	ldr	r2, [pc, #108]	; (800a494 <HAL_DMA_IRQHandler+0x1e8>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d009      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	4a19      	ldr	r2, [pc, #100]	; (800a498 <HAL_DMA_IRQHandler+0x1ec>)
 800a432:	4293      	cmp	r3, r2
 800a434:	d004      	beq.n	800a440 <HAL_DMA_IRQHandler+0x194>
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4a18      	ldr	r2, [pc, #96]	; (800a49c <HAL_DMA_IRQHandler+0x1f0>)
 800a43c:	4293      	cmp	r3, r2
 800a43e:	d12f      	bne.n	800a4a0 <HAL_DMA_IRQHandler+0x1f4>
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	f003 0304 	and.w	r3, r3, #4
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	bf14      	ite	ne
 800a44e:	2301      	movne	r3, #1
 800a450:	2300      	moveq	r3, #0
 800a452:	b2db      	uxtb	r3, r3
 800a454:	e02e      	b.n	800a4b4 <HAL_DMA_IRQHandler+0x208>
 800a456:	bf00      	nop
 800a458:	240000c8 	.word	0x240000c8
 800a45c:	1b4e81b5 	.word	0x1b4e81b5
 800a460:	40020010 	.word	0x40020010
 800a464:	40020028 	.word	0x40020028
 800a468:	40020040 	.word	0x40020040
 800a46c:	40020058 	.word	0x40020058
 800a470:	40020070 	.word	0x40020070
 800a474:	40020088 	.word	0x40020088
 800a478:	400200a0 	.word	0x400200a0
 800a47c:	400200b8 	.word	0x400200b8
 800a480:	40020410 	.word	0x40020410
 800a484:	40020428 	.word	0x40020428
 800a488:	40020440 	.word	0x40020440
 800a48c:	40020458 	.word	0x40020458
 800a490:	40020470 	.word	0x40020470
 800a494:	40020488 	.word	0x40020488
 800a498:	400204a0 	.word	0x400204a0
 800a49c:	400204b8 	.word	0x400204b8
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f003 0308 	and.w	r3, r3, #8
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	bf14      	ite	ne
 800a4ae:	2301      	movne	r3, #1
 800a4b0:	2300      	moveq	r3, #0
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d015      	beq.n	800a4e4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	681a      	ldr	r2, [r3, #0]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f022 0204 	bic.w	r2, r2, #4
 800a4c6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4cc:	f003 031f 	and.w	r3, r3, #31
 800a4d0:	2208      	movs	r2, #8
 800a4d2:	409a      	lsls	r2, r3
 800a4d4:	6a3b      	ldr	r3, [r7, #32]
 800a4d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4dc:	f043 0201 	orr.w	r2, r3, #1
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4e8:	f003 031f 	and.w	r3, r3, #31
 800a4ec:	69ba      	ldr	r2, [r7, #24]
 800a4ee:	fa22 f303 	lsr.w	r3, r2, r3
 800a4f2:	f003 0301 	and.w	r3, r3, #1
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d06e      	beq.n	800a5d8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	4a69      	ldr	r2, [pc, #420]	; (800a6a4 <HAL_DMA_IRQHandler+0x3f8>)
 800a500:	4293      	cmp	r3, r2
 800a502:	d04a      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a67      	ldr	r2, [pc, #412]	; (800a6a8 <HAL_DMA_IRQHandler+0x3fc>)
 800a50a:	4293      	cmp	r3, r2
 800a50c:	d045      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a66      	ldr	r2, [pc, #408]	; (800a6ac <HAL_DMA_IRQHandler+0x400>)
 800a514:	4293      	cmp	r3, r2
 800a516:	d040      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	4a64      	ldr	r2, [pc, #400]	; (800a6b0 <HAL_DMA_IRQHandler+0x404>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d03b      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	4a63      	ldr	r2, [pc, #396]	; (800a6b4 <HAL_DMA_IRQHandler+0x408>)
 800a528:	4293      	cmp	r3, r2
 800a52a:	d036      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	4a61      	ldr	r2, [pc, #388]	; (800a6b8 <HAL_DMA_IRQHandler+0x40c>)
 800a532:	4293      	cmp	r3, r2
 800a534:	d031      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a60      	ldr	r2, [pc, #384]	; (800a6bc <HAL_DMA_IRQHandler+0x410>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d02c      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	4a5e      	ldr	r2, [pc, #376]	; (800a6c0 <HAL_DMA_IRQHandler+0x414>)
 800a546:	4293      	cmp	r3, r2
 800a548:	d027      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	4a5d      	ldr	r2, [pc, #372]	; (800a6c4 <HAL_DMA_IRQHandler+0x418>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d022      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	4a5b      	ldr	r2, [pc, #364]	; (800a6c8 <HAL_DMA_IRQHandler+0x41c>)
 800a55a:	4293      	cmp	r3, r2
 800a55c:	d01d      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	4a5a      	ldr	r2, [pc, #360]	; (800a6cc <HAL_DMA_IRQHandler+0x420>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d018      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a58      	ldr	r2, [pc, #352]	; (800a6d0 <HAL_DMA_IRQHandler+0x424>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d013      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a57      	ldr	r2, [pc, #348]	; (800a6d4 <HAL_DMA_IRQHandler+0x428>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d00e      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a55      	ldr	r2, [pc, #340]	; (800a6d8 <HAL_DMA_IRQHandler+0x42c>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d009      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4a54      	ldr	r2, [pc, #336]	; (800a6dc <HAL_DMA_IRQHandler+0x430>)
 800a58c:	4293      	cmp	r3, r2
 800a58e:	d004      	beq.n	800a59a <HAL_DMA_IRQHandler+0x2ee>
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4a52      	ldr	r2, [pc, #328]	; (800a6e0 <HAL_DMA_IRQHandler+0x434>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d10a      	bne.n	800a5b0 <HAL_DMA_IRQHandler+0x304>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	695b      	ldr	r3, [r3, #20]
 800a5a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	bf14      	ite	ne
 800a5a8:	2301      	movne	r3, #1
 800a5aa:	2300      	moveq	r3, #0
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	e003      	b.n	800a5b8 <HAL_DMA_IRQHandler+0x30c>
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d00d      	beq.n	800a5d8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5c0:	f003 031f 	and.w	r3, r3, #31
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	409a      	lsls	r2, r3
 800a5c8:	6a3b      	ldr	r3, [r7, #32]
 800a5ca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5d0:	f043 0202 	orr.w	r2, r3, #2
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5dc:	f003 031f 	and.w	r3, r3, #31
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	409a      	lsls	r2, r3
 800a5e4:	69bb      	ldr	r3, [r7, #24]
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	f000 808f 	beq.w	800a70c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a2c      	ldr	r2, [pc, #176]	; (800a6a4 <HAL_DMA_IRQHandler+0x3f8>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d04a      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a2a      	ldr	r2, [pc, #168]	; (800a6a8 <HAL_DMA_IRQHandler+0x3fc>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d045      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a29      	ldr	r2, [pc, #164]	; (800a6ac <HAL_DMA_IRQHandler+0x400>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d040      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a27      	ldr	r2, [pc, #156]	; (800a6b0 <HAL_DMA_IRQHandler+0x404>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d03b      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a26      	ldr	r2, [pc, #152]	; (800a6b4 <HAL_DMA_IRQHandler+0x408>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d036      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a24      	ldr	r2, [pc, #144]	; (800a6b8 <HAL_DMA_IRQHandler+0x40c>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d031      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a23      	ldr	r2, [pc, #140]	; (800a6bc <HAL_DMA_IRQHandler+0x410>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d02c      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a21      	ldr	r2, [pc, #132]	; (800a6c0 <HAL_DMA_IRQHandler+0x414>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d027      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a20      	ldr	r2, [pc, #128]	; (800a6c4 <HAL_DMA_IRQHandler+0x418>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d022      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a1e      	ldr	r2, [pc, #120]	; (800a6c8 <HAL_DMA_IRQHandler+0x41c>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d01d      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a1d      	ldr	r2, [pc, #116]	; (800a6cc <HAL_DMA_IRQHandler+0x420>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d018      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a1b      	ldr	r2, [pc, #108]	; (800a6d0 <HAL_DMA_IRQHandler+0x424>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d013      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a1a      	ldr	r2, [pc, #104]	; (800a6d4 <HAL_DMA_IRQHandler+0x428>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00e      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a18      	ldr	r2, [pc, #96]	; (800a6d8 <HAL_DMA_IRQHandler+0x42c>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d009      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a17      	ldr	r2, [pc, #92]	; (800a6dc <HAL_DMA_IRQHandler+0x430>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d004      	beq.n	800a68e <HAL_DMA_IRQHandler+0x3e2>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a15      	ldr	r2, [pc, #84]	; (800a6e0 <HAL_DMA_IRQHandler+0x434>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d12a      	bne.n	800a6e4 <HAL_DMA_IRQHandler+0x438>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f003 0302 	and.w	r3, r3, #2
 800a698:	2b00      	cmp	r3, #0
 800a69a:	bf14      	ite	ne
 800a69c:	2301      	movne	r3, #1
 800a69e:	2300      	moveq	r3, #0
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	e023      	b.n	800a6ec <HAL_DMA_IRQHandler+0x440>
 800a6a4:	40020010 	.word	0x40020010
 800a6a8:	40020028 	.word	0x40020028
 800a6ac:	40020040 	.word	0x40020040
 800a6b0:	40020058 	.word	0x40020058
 800a6b4:	40020070 	.word	0x40020070
 800a6b8:	40020088 	.word	0x40020088
 800a6bc:	400200a0 	.word	0x400200a0
 800a6c0:	400200b8 	.word	0x400200b8
 800a6c4:	40020410 	.word	0x40020410
 800a6c8:	40020428 	.word	0x40020428
 800a6cc:	40020440 	.word	0x40020440
 800a6d0:	40020458 	.word	0x40020458
 800a6d4:	40020470 	.word	0x40020470
 800a6d8:	40020488 	.word	0x40020488
 800a6dc:	400204a0 	.word	0x400204a0
 800a6e0:	400204b8 	.word	0x400204b8
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d00d      	beq.n	800a70c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a6f4:	f003 031f 	and.w	r3, r3, #31
 800a6f8:	2204      	movs	r2, #4
 800a6fa:	409a      	lsls	r2, r3
 800a6fc:	6a3b      	ldr	r3, [r7, #32]
 800a6fe:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a704:	f043 0204 	orr.w	r2, r3, #4
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a710:	f003 031f 	and.w	r3, r3, #31
 800a714:	2210      	movs	r2, #16
 800a716:	409a      	lsls	r2, r3
 800a718:	69bb      	ldr	r3, [r7, #24]
 800a71a:	4013      	ands	r3, r2
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	f000 80a6 	beq.w	800a86e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	4a85      	ldr	r2, [pc, #532]	; (800a93c <HAL_DMA_IRQHandler+0x690>)
 800a728:	4293      	cmp	r3, r2
 800a72a:	d04a      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a83      	ldr	r2, [pc, #524]	; (800a940 <HAL_DMA_IRQHandler+0x694>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d045      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a82      	ldr	r2, [pc, #520]	; (800a944 <HAL_DMA_IRQHandler+0x698>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d040      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a80      	ldr	r2, [pc, #512]	; (800a948 <HAL_DMA_IRQHandler+0x69c>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d03b      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a7f      	ldr	r2, [pc, #508]	; (800a94c <HAL_DMA_IRQHandler+0x6a0>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d036      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a7d      	ldr	r2, [pc, #500]	; (800a950 <HAL_DMA_IRQHandler+0x6a4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d031      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a7c      	ldr	r2, [pc, #496]	; (800a954 <HAL_DMA_IRQHandler+0x6a8>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d02c      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a7a      	ldr	r2, [pc, #488]	; (800a958 <HAL_DMA_IRQHandler+0x6ac>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d027      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a79      	ldr	r2, [pc, #484]	; (800a95c <HAL_DMA_IRQHandler+0x6b0>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d022      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a77      	ldr	r2, [pc, #476]	; (800a960 <HAL_DMA_IRQHandler+0x6b4>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d01d      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	4a76      	ldr	r2, [pc, #472]	; (800a964 <HAL_DMA_IRQHandler+0x6b8>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d018      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a74      	ldr	r2, [pc, #464]	; (800a968 <HAL_DMA_IRQHandler+0x6bc>)
 800a796:	4293      	cmp	r3, r2
 800a798:	d013      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a73      	ldr	r2, [pc, #460]	; (800a96c <HAL_DMA_IRQHandler+0x6c0>)
 800a7a0:	4293      	cmp	r3, r2
 800a7a2:	d00e      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	4a71      	ldr	r2, [pc, #452]	; (800a970 <HAL_DMA_IRQHandler+0x6c4>)
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d009      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	4a70      	ldr	r2, [pc, #448]	; (800a974 <HAL_DMA_IRQHandler+0x6c8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d004      	beq.n	800a7c2 <HAL_DMA_IRQHandler+0x516>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a6e      	ldr	r2, [pc, #440]	; (800a978 <HAL_DMA_IRQHandler+0x6cc>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d10a      	bne.n	800a7d8 <HAL_DMA_IRQHandler+0x52c>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f003 0308 	and.w	r3, r3, #8
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	bf14      	ite	ne
 800a7d0:	2301      	movne	r3, #1
 800a7d2:	2300      	moveq	r3, #0
 800a7d4:	b2db      	uxtb	r3, r3
 800a7d6:	e009      	b.n	800a7ec <HAL_DMA_IRQHandler+0x540>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 0304 	and.w	r3, r3, #4
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	bf14      	ite	ne
 800a7e6:	2301      	movne	r3, #1
 800a7e8:	2300      	moveq	r3, #0
 800a7ea:	b2db      	uxtb	r3, r3
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d03e      	beq.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a7f4:	f003 031f 	and.w	r3, r3, #31
 800a7f8:	2210      	movs	r2, #16
 800a7fa:	409a      	lsls	r2, r3
 800a7fc:	6a3b      	ldr	r3, [r7, #32]
 800a7fe:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681b      	ldr	r3, [r3, #0]
 800a806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d018      	beq.n	800a840 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d108      	bne.n	800a82e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a820:	2b00      	cmp	r3, #0
 800a822:	d024      	beq.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	4798      	blx	r3
 800a82c:	e01f      	b.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a832:	2b00      	cmp	r3, #0
 800a834:	d01b      	beq.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	4798      	blx	r3
 800a83e:	e016      	b.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d107      	bne.n	800a85e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	681a      	ldr	r2, [r3, #0]
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 0208 	bic.w	r2, r2, #8
 800a85c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a86a:	6878      	ldr	r0, [r7, #4]
 800a86c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a872:	f003 031f 	and.w	r3, r3, #31
 800a876:	2220      	movs	r2, #32
 800a878:	409a      	lsls	r2, r3
 800a87a:	69bb      	ldr	r3, [r7, #24]
 800a87c:	4013      	ands	r3, r2
 800a87e:	2b00      	cmp	r3, #0
 800a880:	f000 8110 	beq.w	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	4a2c      	ldr	r2, [pc, #176]	; (800a93c <HAL_DMA_IRQHandler+0x690>)
 800a88a:	4293      	cmp	r3, r2
 800a88c:	d04a      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	4a2b      	ldr	r2, [pc, #172]	; (800a940 <HAL_DMA_IRQHandler+0x694>)
 800a894:	4293      	cmp	r3, r2
 800a896:	d045      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	4a29      	ldr	r2, [pc, #164]	; (800a944 <HAL_DMA_IRQHandler+0x698>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d040      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	4a28      	ldr	r2, [pc, #160]	; (800a948 <HAL_DMA_IRQHandler+0x69c>)
 800a8a8:	4293      	cmp	r3, r2
 800a8aa:	d03b      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a26      	ldr	r2, [pc, #152]	; (800a94c <HAL_DMA_IRQHandler+0x6a0>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d036      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	4a25      	ldr	r2, [pc, #148]	; (800a950 <HAL_DMA_IRQHandler+0x6a4>)
 800a8bc:	4293      	cmp	r3, r2
 800a8be:	d031      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	4a23      	ldr	r2, [pc, #140]	; (800a954 <HAL_DMA_IRQHandler+0x6a8>)
 800a8c6:	4293      	cmp	r3, r2
 800a8c8:	d02c      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	4a22      	ldr	r2, [pc, #136]	; (800a958 <HAL_DMA_IRQHandler+0x6ac>)
 800a8d0:	4293      	cmp	r3, r2
 800a8d2:	d027      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	4a20      	ldr	r2, [pc, #128]	; (800a95c <HAL_DMA_IRQHandler+0x6b0>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d022      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	4a1f      	ldr	r2, [pc, #124]	; (800a960 <HAL_DMA_IRQHandler+0x6b4>)
 800a8e4:	4293      	cmp	r3, r2
 800a8e6:	d01d      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	4a1d      	ldr	r2, [pc, #116]	; (800a964 <HAL_DMA_IRQHandler+0x6b8>)
 800a8ee:	4293      	cmp	r3, r2
 800a8f0:	d018      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	4a1c      	ldr	r2, [pc, #112]	; (800a968 <HAL_DMA_IRQHandler+0x6bc>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d013      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	4a1a      	ldr	r2, [pc, #104]	; (800a96c <HAL_DMA_IRQHandler+0x6c0>)
 800a902:	4293      	cmp	r3, r2
 800a904:	d00e      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	4a19      	ldr	r2, [pc, #100]	; (800a970 <HAL_DMA_IRQHandler+0x6c4>)
 800a90c:	4293      	cmp	r3, r2
 800a90e:	d009      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a17      	ldr	r2, [pc, #92]	; (800a974 <HAL_DMA_IRQHandler+0x6c8>)
 800a916:	4293      	cmp	r3, r2
 800a918:	d004      	beq.n	800a924 <HAL_DMA_IRQHandler+0x678>
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	4a16      	ldr	r2, [pc, #88]	; (800a978 <HAL_DMA_IRQHandler+0x6cc>)
 800a920:	4293      	cmp	r3, r2
 800a922:	d12b      	bne.n	800a97c <HAL_DMA_IRQHandler+0x6d0>
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f003 0310 	and.w	r3, r3, #16
 800a92e:	2b00      	cmp	r3, #0
 800a930:	bf14      	ite	ne
 800a932:	2301      	movne	r3, #1
 800a934:	2300      	moveq	r3, #0
 800a936:	b2db      	uxtb	r3, r3
 800a938:	e02a      	b.n	800a990 <HAL_DMA_IRQHandler+0x6e4>
 800a93a:	bf00      	nop
 800a93c:	40020010 	.word	0x40020010
 800a940:	40020028 	.word	0x40020028
 800a944:	40020040 	.word	0x40020040
 800a948:	40020058 	.word	0x40020058
 800a94c:	40020070 	.word	0x40020070
 800a950:	40020088 	.word	0x40020088
 800a954:	400200a0 	.word	0x400200a0
 800a958:	400200b8 	.word	0x400200b8
 800a95c:	40020410 	.word	0x40020410
 800a960:	40020428 	.word	0x40020428
 800a964:	40020440 	.word	0x40020440
 800a968:	40020458 	.word	0x40020458
 800a96c:	40020470 	.word	0x40020470
 800a970:	40020488 	.word	0x40020488
 800a974:	400204a0 	.word	0x400204a0
 800a978:	400204b8 	.word	0x400204b8
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f003 0302 	and.w	r3, r3, #2
 800a986:	2b00      	cmp	r3, #0
 800a988:	bf14      	ite	ne
 800a98a:	2301      	movne	r3, #1
 800a98c:	2300      	moveq	r3, #0
 800a98e:	b2db      	uxtb	r3, r3
 800a990:	2b00      	cmp	r3, #0
 800a992:	f000 8087 	beq.w	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a99a:	f003 031f 	and.w	r3, r3, #31
 800a99e:	2220      	movs	r2, #32
 800a9a0:	409a      	lsls	r2, r3
 800a9a2:	6a3b      	ldr	r3, [r7, #32]
 800a9a4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b04      	cmp	r3, #4
 800a9b0:	d139      	bne.n	800aa26 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	681a      	ldr	r2, [r3, #0]
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f022 0216 	bic.w	r2, r2, #22
 800a9c0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	695a      	ldr	r2, [r3, #20]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9d0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d103      	bne.n	800a9e2 <HAL_DMA_IRQHandler+0x736>
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d007      	beq.n	800a9f2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	681a      	ldr	r2, [r3, #0]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	f022 0208 	bic.w	r2, r2, #8
 800a9f0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9f6:	f003 031f 	and.w	r3, r3, #31
 800a9fa:	223f      	movs	r2, #63	; 0x3f
 800a9fc:	409a      	lsls	r2, r3
 800a9fe:	6a3b      	ldr	r3, [r7, #32]
 800aa00:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	2201      	movs	r2, #1
 800aa06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	f000 834a 	beq.w	800b0b0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa20:	6878      	ldr	r0, [r7, #4]
 800aa22:	4798      	blx	r3
          }
          return;
 800aa24:	e344      	b.n	800b0b0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d018      	beq.n	800aa66 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d108      	bne.n	800aa54 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d02c      	beq.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa4e:	6878      	ldr	r0, [r7, #4]
 800aa50:	4798      	blx	r3
 800aa52:	e027      	b.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d023      	beq.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa60:	6878      	ldr	r0, [r7, #4]
 800aa62:	4798      	blx	r3
 800aa64:	e01e      	b.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d10f      	bne.n	800aa94 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	681a      	ldr	r2, [r3, #0]
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f022 0210 	bic.w	r2, r2, #16
 800aa82:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	2201      	movs	r2, #1
 800aa88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2200      	movs	r2, #0
 800aa90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d003      	beq.n	800aaa4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaa0:	6878      	ldr	r0, [r7, #4]
 800aaa2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 8306 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab2:	f003 0301 	and.w	r3, r3, #1
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	f000 8088 	beq.w	800abcc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	2204      	movs	r2, #4
 800aac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a7a      	ldr	r2, [pc, #488]	; (800acb4 <HAL_DMA_IRQHandler+0xa08>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d04a      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a79      	ldr	r2, [pc, #484]	; (800acb8 <HAL_DMA_IRQHandler+0xa0c>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d045      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	4a77      	ldr	r2, [pc, #476]	; (800acbc <HAL_DMA_IRQHandler+0xa10>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d040      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a76      	ldr	r2, [pc, #472]	; (800acc0 <HAL_DMA_IRQHandler+0xa14>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d03b      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4a74      	ldr	r2, [pc, #464]	; (800acc4 <HAL_DMA_IRQHandler+0xa18>)
 800aaf2:	4293      	cmp	r3, r2
 800aaf4:	d036      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	4a73      	ldr	r2, [pc, #460]	; (800acc8 <HAL_DMA_IRQHandler+0xa1c>)
 800aafc:	4293      	cmp	r3, r2
 800aafe:	d031      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	4a71      	ldr	r2, [pc, #452]	; (800accc <HAL_DMA_IRQHandler+0xa20>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d02c      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	4a70      	ldr	r2, [pc, #448]	; (800acd0 <HAL_DMA_IRQHandler+0xa24>)
 800ab10:	4293      	cmp	r3, r2
 800ab12:	d027      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	4a6e      	ldr	r2, [pc, #440]	; (800acd4 <HAL_DMA_IRQHandler+0xa28>)
 800ab1a:	4293      	cmp	r3, r2
 800ab1c:	d022      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	4a6d      	ldr	r2, [pc, #436]	; (800acd8 <HAL_DMA_IRQHandler+0xa2c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d01d      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	4a6b      	ldr	r2, [pc, #428]	; (800acdc <HAL_DMA_IRQHandler+0xa30>)
 800ab2e:	4293      	cmp	r3, r2
 800ab30:	d018      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a6a      	ldr	r2, [pc, #424]	; (800ace0 <HAL_DMA_IRQHandler+0xa34>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d013      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a68      	ldr	r2, [pc, #416]	; (800ace4 <HAL_DMA_IRQHandler+0xa38>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d00e      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	4a67      	ldr	r2, [pc, #412]	; (800ace8 <HAL_DMA_IRQHandler+0xa3c>)
 800ab4c:	4293      	cmp	r3, r2
 800ab4e:	d009      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4a65      	ldr	r2, [pc, #404]	; (800acec <HAL_DMA_IRQHandler+0xa40>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d004      	beq.n	800ab64 <HAL_DMA_IRQHandler+0x8b8>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4a64      	ldr	r2, [pc, #400]	; (800acf0 <HAL_DMA_IRQHandler+0xa44>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d108      	bne.n	800ab76 <HAL_DMA_IRQHandler+0x8ca>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f022 0201 	bic.w	r2, r2, #1
 800ab72:	601a      	str	r2, [r3, #0]
 800ab74:	e007      	b.n	800ab86 <HAL_DMA_IRQHandler+0x8da>
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	681a      	ldr	r2, [r3, #0]
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f022 0201 	bic.w	r2, r2, #1
 800ab84:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	3301      	adds	r3, #1
 800ab8a:	60fb      	str	r3, [r7, #12]
 800ab8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d307      	bcc.n	800aba2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0301 	and.w	r3, r3, #1
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d1f2      	bne.n	800ab86 <HAL_DMA_IRQHandler+0x8da>
 800aba0:	e000      	b.n	800aba4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800aba2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	f003 0301 	and.w	r3, r3, #1
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d004      	beq.n	800abbc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2203      	movs	r2, #3
 800abb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800abba:	e003      	b.n	800abc4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2201      	movs	r2, #1
 800abc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	f000 8272 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	4798      	blx	r3
 800abde:	e26c      	b.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a43      	ldr	r2, [pc, #268]	; (800acf4 <HAL_DMA_IRQHandler+0xa48>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d022      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a42      	ldr	r2, [pc, #264]	; (800acf8 <HAL_DMA_IRQHandler+0xa4c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d01d      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a40      	ldr	r2, [pc, #256]	; (800acfc <HAL_DMA_IRQHandler+0xa50>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d018      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a3f      	ldr	r2, [pc, #252]	; (800ad00 <HAL_DMA_IRQHandler+0xa54>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d013      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a3d      	ldr	r2, [pc, #244]	; (800ad04 <HAL_DMA_IRQHandler+0xa58>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d00e      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a3c      	ldr	r2, [pc, #240]	; (800ad08 <HAL_DMA_IRQHandler+0xa5c>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d009      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a3a      	ldr	r2, [pc, #232]	; (800ad0c <HAL_DMA_IRQHandler+0xa60>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d004      	beq.n	800ac30 <HAL_DMA_IRQHandler+0x984>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a39      	ldr	r2, [pc, #228]	; (800ad10 <HAL_DMA_IRQHandler+0xa64>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d101      	bne.n	800ac34 <HAL_DMA_IRQHandler+0x988>
 800ac30:	2301      	movs	r3, #1
 800ac32:	e000      	b.n	800ac36 <HAL_DMA_IRQHandler+0x98a>
 800ac34:	2300      	movs	r3, #0
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	f000 823f 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac48:	f003 031f 	and.w	r3, r3, #31
 800ac4c:	2204      	movs	r2, #4
 800ac4e:	409a      	lsls	r2, r3
 800ac50:	697b      	ldr	r3, [r7, #20]
 800ac52:	4013      	ands	r3, r2
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	f000 80cd 	beq.w	800adf4 <HAL_DMA_IRQHandler+0xb48>
 800ac5a:	693b      	ldr	r3, [r7, #16]
 800ac5c:	f003 0304 	and.w	r3, r3, #4
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 80c7 	beq.w	800adf4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac6a:	f003 031f 	and.w	r3, r3, #31
 800ac6e:	2204      	movs	r2, #4
 800ac70:	409a      	lsls	r2, r3
 800ac72:	69fb      	ldr	r3, [r7, #28]
 800ac74:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ac76:	693b      	ldr	r3, [r7, #16]
 800ac78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d049      	beq.n	800ad14 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d109      	bne.n	800ac9e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	f000 8210 	beq.w	800b0b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ac9c:	e20a      	b.n	800b0b4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f000 8206 	beq.w	800b0b4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800acb0:	e200      	b.n	800b0b4 <HAL_DMA_IRQHandler+0xe08>
 800acb2:	bf00      	nop
 800acb4:	40020010 	.word	0x40020010
 800acb8:	40020028 	.word	0x40020028
 800acbc:	40020040 	.word	0x40020040
 800acc0:	40020058 	.word	0x40020058
 800acc4:	40020070 	.word	0x40020070
 800acc8:	40020088 	.word	0x40020088
 800accc:	400200a0 	.word	0x400200a0
 800acd0:	400200b8 	.word	0x400200b8
 800acd4:	40020410 	.word	0x40020410
 800acd8:	40020428 	.word	0x40020428
 800acdc:	40020440 	.word	0x40020440
 800ace0:	40020458 	.word	0x40020458
 800ace4:	40020470 	.word	0x40020470
 800ace8:	40020488 	.word	0x40020488
 800acec:	400204a0 	.word	0x400204a0
 800acf0:	400204b8 	.word	0x400204b8
 800acf4:	58025408 	.word	0x58025408
 800acf8:	5802541c 	.word	0x5802541c
 800acfc:	58025430 	.word	0x58025430
 800ad00:	58025444 	.word	0x58025444
 800ad04:	58025458 	.word	0x58025458
 800ad08:	5802546c 	.word	0x5802546c
 800ad0c:	58025480 	.word	0x58025480
 800ad10:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	f003 0320 	and.w	r3, r3, #32
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d160      	bne.n	800ade0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a7f      	ldr	r2, [pc, #508]	; (800af20 <HAL_DMA_IRQHandler+0xc74>)
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d04a      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a7d      	ldr	r2, [pc, #500]	; (800af24 <HAL_DMA_IRQHandler+0xc78>)
 800ad2e:	4293      	cmp	r3, r2
 800ad30:	d045      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4a7c      	ldr	r2, [pc, #496]	; (800af28 <HAL_DMA_IRQHandler+0xc7c>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d040      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a7a      	ldr	r2, [pc, #488]	; (800af2c <HAL_DMA_IRQHandler+0xc80>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d03b      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	4a79      	ldr	r2, [pc, #484]	; (800af30 <HAL_DMA_IRQHandler+0xc84>)
 800ad4c:	4293      	cmp	r3, r2
 800ad4e:	d036      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	4a77      	ldr	r2, [pc, #476]	; (800af34 <HAL_DMA_IRQHandler+0xc88>)
 800ad56:	4293      	cmp	r3, r2
 800ad58:	d031      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	4a76      	ldr	r2, [pc, #472]	; (800af38 <HAL_DMA_IRQHandler+0xc8c>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d02c      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a74      	ldr	r2, [pc, #464]	; (800af3c <HAL_DMA_IRQHandler+0xc90>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d027      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	4a73      	ldr	r2, [pc, #460]	; (800af40 <HAL_DMA_IRQHandler+0xc94>)
 800ad74:	4293      	cmp	r3, r2
 800ad76:	d022      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a71      	ldr	r2, [pc, #452]	; (800af44 <HAL_DMA_IRQHandler+0xc98>)
 800ad7e:	4293      	cmp	r3, r2
 800ad80:	d01d      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	4a70      	ldr	r2, [pc, #448]	; (800af48 <HAL_DMA_IRQHandler+0xc9c>)
 800ad88:	4293      	cmp	r3, r2
 800ad8a:	d018      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a6e      	ldr	r2, [pc, #440]	; (800af4c <HAL_DMA_IRQHandler+0xca0>)
 800ad92:	4293      	cmp	r3, r2
 800ad94:	d013      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a6d      	ldr	r2, [pc, #436]	; (800af50 <HAL_DMA_IRQHandler+0xca4>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d00e      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	4a6b      	ldr	r2, [pc, #428]	; (800af54 <HAL_DMA_IRQHandler+0xca8>)
 800ada6:	4293      	cmp	r3, r2
 800ada8:	d009      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	4a6a      	ldr	r2, [pc, #424]	; (800af58 <HAL_DMA_IRQHandler+0xcac>)
 800adb0:	4293      	cmp	r3, r2
 800adb2:	d004      	beq.n	800adbe <HAL_DMA_IRQHandler+0xb12>
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	4a68      	ldr	r2, [pc, #416]	; (800af5c <HAL_DMA_IRQHandler+0xcb0>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d108      	bne.n	800add0 <HAL_DMA_IRQHandler+0xb24>
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	681a      	ldr	r2, [r3, #0]
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	f022 0208 	bic.w	r2, r2, #8
 800adcc:	601a      	str	r2, [r3, #0]
 800adce:	e007      	b.n	800ade0 <HAL_DMA_IRQHandler+0xb34>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	f022 0204 	bic.w	r2, r2, #4
 800adde:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	f000 8165 	beq.w	800b0b4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adee:	6878      	ldr	r0, [r7, #4]
 800adf0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800adf2:	e15f      	b.n	800b0b4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adf8:	f003 031f 	and.w	r3, r3, #31
 800adfc:	2202      	movs	r2, #2
 800adfe:	409a      	lsls	r2, r3
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	4013      	ands	r3, r2
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f000 80c5 	beq.w	800af94 <HAL_DMA_IRQHandler+0xce8>
 800ae0a:	693b      	ldr	r3, [r7, #16]
 800ae0c:	f003 0302 	and.w	r3, r3, #2
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f000 80bf 	beq.w	800af94 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae1a:	f003 031f 	and.w	r3, r3, #31
 800ae1e:	2202      	movs	r2, #2
 800ae20:	409a      	lsls	r2, r3
 800ae22:	69fb      	ldr	r3, [r7, #28]
 800ae24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae26:	693b      	ldr	r3, [r7, #16]
 800ae28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d018      	beq.n	800ae62 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ae30:	693b      	ldr	r3, [r7, #16]
 800ae32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d109      	bne.n	800ae4e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 813a 	beq.w	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae48:	6878      	ldr	r0, [r7, #4]
 800ae4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae4c:	e134      	b.n	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	f000 8130 	beq.w	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ae60:	e12a      	b.n	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	f003 0320 	and.w	r3, r3, #32
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	f040 8089 	bne.w	800af80 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a2b      	ldr	r2, [pc, #172]	; (800af20 <HAL_DMA_IRQHandler+0xc74>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d04a      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	4a29      	ldr	r2, [pc, #164]	; (800af24 <HAL_DMA_IRQHandler+0xc78>)
 800ae7e:	4293      	cmp	r3, r2
 800ae80:	d045      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a28      	ldr	r2, [pc, #160]	; (800af28 <HAL_DMA_IRQHandler+0xc7c>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d040      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	4a26      	ldr	r2, [pc, #152]	; (800af2c <HAL_DMA_IRQHandler+0xc80>)
 800ae92:	4293      	cmp	r3, r2
 800ae94:	d03b      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a25      	ldr	r2, [pc, #148]	; (800af30 <HAL_DMA_IRQHandler+0xc84>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d036      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a23      	ldr	r2, [pc, #140]	; (800af34 <HAL_DMA_IRQHandler+0xc88>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d031      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a22      	ldr	r2, [pc, #136]	; (800af38 <HAL_DMA_IRQHandler+0xc8c>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d02c      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a20      	ldr	r2, [pc, #128]	; (800af3c <HAL_DMA_IRQHandler+0xc90>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d027      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	4a1f      	ldr	r2, [pc, #124]	; (800af40 <HAL_DMA_IRQHandler+0xc94>)
 800aec4:	4293      	cmp	r3, r2
 800aec6:	d022      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	4a1d      	ldr	r2, [pc, #116]	; (800af44 <HAL_DMA_IRQHandler+0xc98>)
 800aece:	4293      	cmp	r3, r2
 800aed0:	d01d      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	4a1c      	ldr	r2, [pc, #112]	; (800af48 <HAL_DMA_IRQHandler+0xc9c>)
 800aed8:	4293      	cmp	r3, r2
 800aeda:	d018      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a1a      	ldr	r2, [pc, #104]	; (800af4c <HAL_DMA_IRQHandler+0xca0>)
 800aee2:	4293      	cmp	r3, r2
 800aee4:	d013      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a19      	ldr	r2, [pc, #100]	; (800af50 <HAL_DMA_IRQHandler+0xca4>)
 800aeec:	4293      	cmp	r3, r2
 800aeee:	d00e      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	4a17      	ldr	r2, [pc, #92]	; (800af54 <HAL_DMA_IRQHandler+0xca8>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d009      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	4a16      	ldr	r2, [pc, #88]	; (800af58 <HAL_DMA_IRQHandler+0xcac>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d004      	beq.n	800af0e <HAL_DMA_IRQHandler+0xc62>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a14      	ldr	r2, [pc, #80]	; (800af5c <HAL_DMA_IRQHandler+0xcb0>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d128      	bne.n	800af60 <HAL_DMA_IRQHandler+0xcb4>
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f022 0214 	bic.w	r2, r2, #20
 800af1c:	601a      	str	r2, [r3, #0]
 800af1e:	e027      	b.n	800af70 <HAL_DMA_IRQHandler+0xcc4>
 800af20:	40020010 	.word	0x40020010
 800af24:	40020028 	.word	0x40020028
 800af28:	40020040 	.word	0x40020040
 800af2c:	40020058 	.word	0x40020058
 800af30:	40020070 	.word	0x40020070
 800af34:	40020088 	.word	0x40020088
 800af38:	400200a0 	.word	0x400200a0
 800af3c:	400200b8 	.word	0x400200b8
 800af40:	40020410 	.word	0x40020410
 800af44:	40020428 	.word	0x40020428
 800af48:	40020440 	.word	0x40020440
 800af4c:	40020458 	.word	0x40020458
 800af50:	40020470 	.word	0x40020470
 800af54:	40020488 	.word	0x40020488
 800af58:	400204a0 	.word	0x400204a0
 800af5c:	400204b8 	.word	0x400204b8
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	681a      	ldr	r2, [r3, #0]
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	f022 020a 	bic.w	r2, r2, #10
 800af6e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2200      	movs	r2, #0
 800af7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af84:	2b00      	cmp	r3, #0
 800af86:	f000 8097 	beq.w	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800af92:	e091      	b.n	800b0b8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af98:	f003 031f 	and.w	r3, r3, #31
 800af9c:	2208      	movs	r2, #8
 800af9e:	409a      	lsls	r2, r3
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	4013      	ands	r3, r2
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	f000 8088 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
 800afaa:	693b      	ldr	r3, [r7, #16]
 800afac:	f003 0308 	and.w	r3, r3, #8
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	f000 8082 	beq.w	800b0ba <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	4a41      	ldr	r2, [pc, #260]	; (800b0c0 <HAL_DMA_IRQHandler+0xe14>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d04a      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	4a3f      	ldr	r2, [pc, #252]	; (800b0c4 <HAL_DMA_IRQHandler+0xe18>)
 800afc6:	4293      	cmp	r3, r2
 800afc8:	d045      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	4a3e      	ldr	r2, [pc, #248]	; (800b0c8 <HAL_DMA_IRQHandler+0xe1c>)
 800afd0:	4293      	cmp	r3, r2
 800afd2:	d040      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	4a3c      	ldr	r2, [pc, #240]	; (800b0cc <HAL_DMA_IRQHandler+0xe20>)
 800afda:	4293      	cmp	r3, r2
 800afdc:	d03b      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	4a3b      	ldr	r2, [pc, #236]	; (800b0d0 <HAL_DMA_IRQHandler+0xe24>)
 800afe4:	4293      	cmp	r3, r2
 800afe6:	d036      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	4a39      	ldr	r2, [pc, #228]	; (800b0d4 <HAL_DMA_IRQHandler+0xe28>)
 800afee:	4293      	cmp	r3, r2
 800aff0:	d031      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	4a38      	ldr	r2, [pc, #224]	; (800b0d8 <HAL_DMA_IRQHandler+0xe2c>)
 800aff8:	4293      	cmp	r3, r2
 800affa:	d02c      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4a36      	ldr	r2, [pc, #216]	; (800b0dc <HAL_DMA_IRQHandler+0xe30>)
 800b002:	4293      	cmp	r3, r2
 800b004:	d027      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	4a35      	ldr	r2, [pc, #212]	; (800b0e0 <HAL_DMA_IRQHandler+0xe34>)
 800b00c:	4293      	cmp	r3, r2
 800b00e:	d022      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	4a33      	ldr	r2, [pc, #204]	; (800b0e4 <HAL_DMA_IRQHandler+0xe38>)
 800b016:	4293      	cmp	r3, r2
 800b018:	d01d      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	4a32      	ldr	r2, [pc, #200]	; (800b0e8 <HAL_DMA_IRQHandler+0xe3c>)
 800b020:	4293      	cmp	r3, r2
 800b022:	d018      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	4a30      	ldr	r2, [pc, #192]	; (800b0ec <HAL_DMA_IRQHandler+0xe40>)
 800b02a:	4293      	cmp	r3, r2
 800b02c:	d013      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	4a2f      	ldr	r2, [pc, #188]	; (800b0f0 <HAL_DMA_IRQHandler+0xe44>)
 800b034:	4293      	cmp	r3, r2
 800b036:	d00e      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a2d      	ldr	r2, [pc, #180]	; (800b0f4 <HAL_DMA_IRQHandler+0xe48>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d009      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	681b      	ldr	r3, [r3, #0]
 800b046:	4a2c      	ldr	r2, [pc, #176]	; (800b0f8 <HAL_DMA_IRQHandler+0xe4c>)
 800b048:	4293      	cmp	r3, r2
 800b04a:	d004      	beq.n	800b056 <HAL_DMA_IRQHandler+0xdaa>
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a2a      	ldr	r2, [pc, #168]	; (800b0fc <HAL_DMA_IRQHandler+0xe50>)
 800b052:	4293      	cmp	r3, r2
 800b054:	d108      	bne.n	800b068 <HAL_DMA_IRQHandler+0xdbc>
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f022 021c 	bic.w	r2, r2, #28
 800b064:	601a      	str	r2, [r3, #0]
 800b066:	e007      	b.n	800b078 <HAL_DMA_IRQHandler+0xdcc>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f022 020e 	bic.w	r2, r2, #14
 800b076:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b07c:	f003 031f 	and.w	r3, r3, #31
 800b080:	2201      	movs	r2, #1
 800b082:	409a      	lsls	r2, r3
 800b084:	69fb      	ldr	r3, [r7, #28]
 800b086:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2201      	movs	r2, #1
 800b092:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	2200      	movs	r2, #0
 800b09a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d009      	beq.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	4798      	blx	r3
 800b0ae:	e004      	b.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
          return;
 800b0b0:	bf00      	nop
 800b0b2:	e002      	b.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b0b4:	bf00      	nop
 800b0b6:	e000      	b.n	800b0ba <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800b0b8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b0ba:	3728      	adds	r7, #40	; 0x28
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	bd80      	pop	{r7, pc}
 800b0c0:	40020010 	.word	0x40020010
 800b0c4:	40020028 	.word	0x40020028
 800b0c8:	40020040 	.word	0x40020040
 800b0cc:	40020058 	.word	0x40020058
 800b0d0:	40020070 	.word	0x40020070
 800b0d4:	40020088 	.word	0x40020088
 800b0d8:	400200a0 	.word	0x400200a0
 800b0dc:	400200b8 	.word	0x400200b8
 800b0e0:	40020410 	.word	0x40020410
 800b0e4:	40020428 	.word	0x40020428
 800b0e8:	40020440 	.word	0x40020440
 800b0ec:	40020458 	.word	0x40020458
 800b0f0:	40020470 	.word	0x40020470
 800b0f4:	40020488 	.word	0x40020488
 800b0f8:	400204a0 	.word	0x400204a0
 800b0fc:	400204b8 	.word	0x400204b8

0800b100 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800b100:	b480      	push	{r7}
 800b102:	b083      	sub	sp, #12
 800b104:	af00      	add	r7, sp, #0
 800b106:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b10e:	b2db      	uxtb	r3, r3
}
 800b110:	4618      	mov	r0, r3
 800b112:	370c      	adds	r7, #12
 800b114:	46bd      	mov	sp, r7
 800b116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11a:	4770      	bx	lr

0800b11c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800b11c:	b480      	push	{r7}
 800b11e:	b083      	sub	sp, #12
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800b128:	4618      	mov	r0, r3
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800b134:	b480      	push	{r7}
 800b136:	b087      	sub	sp, #28
 800b138:	af00      	add	r7, sp, #0
 800b13a:	60f8      	str	r0, [r7, #12]
 800b13c:	60b9      	str	r1, [r7, #8]
 800b13e:	607a      	str	r2, [r7, #4]
 800b140:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b146:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b14c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	4a7f      	ldr	r2, [pc, #508]	; (800b350 <DMA_SetConfig+0x21c>)
 800b154:	4293      	cmp	r3, r2
 800b156:	d072      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	4a7d      	ldr	r2, [pc, #500]	; (800b354 <DMA_SetConfig+0x220>)
 800b15e:	4293      	cmp	r3, r2
 800b160:	d06d      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	4a7c      	ldr	r2, [pc, #496]	; (800b358 <DMA_SetConfig+0x224>)
 800b168:	4293      	cmp	r3, r2
 800b16a:	d068      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	4a7a      	ldr	r2, [pc, #488]	; (800b35c <DMA_SetConfig+0x228>)
 800b172:	4293      	cmp	r3, r2
 800b174:	d063      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	4a79      	ldr	r2, [pc, #484]	; (800b360 <DMA_SetConfig+0x22c>)
 800b17c:	4293      	cmp	r3, r2
 800b17e:	d05e      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	4a77      	ldr	r2, [pc, #476]	; (800b364 <DMA_SetConfig+0x230>)
 800b186:	4293      	cmp	r3, r2
 800b188:	d059      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4a76      	ldr	r2, [pc, #472]	; (800b368 <DMA_SetConfig+0x234>)
 800b190:	4293      	cmp	r3, r2
 800b192:	d054      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	4a74      	ldr	r2, [pc, #464]	; (800b36c <DMA_SetConfig+0x238>)
 800b19a:	4293      	cmp	r3, r2
 800b19c:	d04f      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	4a73      	ldr	r2, [pc, #460]	; (800b370 <DMA_SetConfig+0x23c>)
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d04a      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4a71      	ldr	r2, [pc, #452]	; (800b374 <DMA_SetConfig+0x240>)
 800b1ae:	4293      	cmp	r3, r2
 800b1b0:	d045      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	4a70      	ldr	r2, [pc, #448]	; (800b378 <DMA_SetConfig+0x244>)
 800b1b8:	4293      	cmp	r3, r2
 800b1ba:	d040      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	4a6e      	ldr	r2, [pc, #440]	; (800b37c <DMA_SetConfig+0x248>)
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d03b      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a6d      	ldr	r2, [pc, #436]	; (800b380 <DMA_SetConfig+0x24c>)
 800b1cc:	4293      	cmp	r3, r2
 800b1ce:	d036      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a6b      	ldr	r2, [pc, #428]	; (800b384 <DMA_SetConfig+0x250>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d031      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	4a6a      	ldr	r2, [pc, #424]	; (800b388 <DMA_SetConfig+0x254>)
 800b1e0:	4293      	cmp	r3, r2
 800b1e2:	d02c      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	4a68      	ldr	r2, [pc, #416]	; (800b38c <DMA_SetConfig+0x258>)
 800b1ea:	4293      	cmp	r3, r2
 800b1ec:	d027      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	4a67      	ldr	r2, [pc, #412]	; (800b390 <DMA_SetConfig+0x25c>)
 800b1f4:	4293      	cmp	r3, r2
 800b1f6:	d022      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a65      	ldr	r2, [pc, #404]	; (800b394 <DMA_SetConfig+0x260>)
 800b1fe:	4293      	cmp	r3, r2
 800b200:	d01d      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	4a64      	ldr	r2, [pc, #400]	; (800b398 <DMA_SetConfig+0x264>)
 800b208:	4293      	cmp	r3, r2
 800b20a:	d018      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a62      	ldr	r2, [pc, #392]	; (800b39c <DMA_SetConfig+0x268>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d013      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a61      	ldr	r2, [pc, #388]	; (800b3a0 <DMA_SetConfig+0x26c>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d00e      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	4a5f      	ldr	r2, [pc, #380]	; (800b3a4 <DMA_SetConfig+0x270>)
 800b226:	4293      	cmp	r3, r2
 800b228:	d009      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	4a5e      	ldr	r2, [pc, #376]	; (800b3a8 <DMA_SetConfig+0x274>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d004      	beq.n	800b23e <DMA_SetConfig+0x10a>
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	4a5c      	ldr	r2, [pc, #368]	; (800b3ac <DMA_SetConfig+0x278>)
 800b23a:	4293      	cmp	r3, r2
 800b23c:	d101      	bne.n	800b242 <DMA_SetConfig+0x10e>
 800b23e:	2301      	movs	r3, #1
 800b240:	e000      	b.n	800b244 <DMA_SetConfig+0x110>
 800b242:	2300      	movs	r3, #0
 800b244:	2b00      	cmp	r3, #0
 800b246:	d00d      	beq.n	800b264 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800b250:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b256:	2b00      	cmp	r3, #0
 800b258:	d004      	beq.n	800b264 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800b262:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	4a39      	ldr	r2, [pc, #228]	; (800b350 <DMA_SetConfig+0x21c>)
 800b26a:	4293      	cmp	r3, r2
 800b26c:	d04a      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	4a38      	ldr	r2, [pc, #224]	; (800b354 <DMA_SetConfig+0x220>)
 800b274:	4293      	cmp	r3, r2
 800b276:	d045      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	4a36      	ldr	r2, [pc, #216]	; (800b358 <DMA_SetConfig+0x224>)
 800b27e:	4293      	cmp	r3, r2
 800b280:	d040      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	4a35      	ldr	r2, [pc, #212]	; (800b35c <DMA_SetConfig+0x228>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d03b      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	4a33      	ldr	r2, [pc, #204]	; (800b360 <DMA_SetConfig+0x22c>)
 800b292:	4293      	cmp	r3, r2
 800b294:	d036      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	4a32      	ldr	r2, [pc, #200]	; (800b364 <DMA_SetConfig+0x230>)
 800b29c:	4293      	cmp	r3, r2
 800b29e:	d031      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	4a30      	ldr	r2, [pc, #192]	; (800b368 <DMA_SetConfig+0x234>)
 800b2a6:	4293      	cmp	r3, r2
 800b2a8:	d02c      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4a2f      	ldr	r2, [pc, #188]	; (800b36c <DMA_SetConfig+0x238>)
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d027      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4a2d      	ldr	r2, [pc, #180]	; (800b370 <DMA_SetConfig+0x23c>)
 800b2ba:	4293      	cmp	r3, r2
 800b2bc:	d022      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	4a2c      	ldr	r2, [pc, #176]	; (800b374 <DMA_SetConfig+0x240>)
 800b2c4:	4293      	cmp	r3, r2
 800b2c6:	d01d      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	4a2a      	ldr	r2, [pc, #168]	; (800b378 <DMA_SetConfig+0x244>)
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d018      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	4a29      	ldr	r2, [pc, #164]	; (800b37c <DMA_SetConfig+0x248>)
 800b2d8:	4293      	cmp	r3, r2
 800b2da:	d013      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	4a27      	ldr	r2, [pc, #156]	; (800b380 <DMA_SetConfig+0x24c>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d00e      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	4a26      	ldr	r2, [pc, #152]	; (800b384 <DMA_SetConfig+0x250>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d009      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	4a24      	ldr	r2, [pc, #144]	; (800b388 <DMA_SetConfig+0x254>)
 800b2f6:	4293      	cmp	r3, r2
 800b2f8:	d004      	beq.n	800b304 <DMA_SetConfig+0x1d0>
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	4a23      	ldr	r2, [pc, #140]	; (800b38c <DMA_SetConfig+0x258>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d101      	bne.n	800b308 <DMA_SetConfig+0x1d4>
 800b304:	2301      	movs	r3, #1
 800b306:	e000      	b.n	800b30a <DMA_SetConfig+0x1d6>
 800b308:	2300      	movs	r3, #0
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d059      	beq.n	800b3c2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b312:	f003 031f 	and.w	r3, r3, #31
 800b316:	223f      	movs	r2, #63	; 0x3f
 800b318:	409a      	lsls	r2, r3
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681a      	ldr	r2, [r3, #0]
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800b32c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	689b      	ldr	r3, [r3, #8]
 800b33a:	2b40      	cmp	r3, #64	; 0x40
 800b33c:	d138      	bne.n	800b3b0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	687a      	ldr	r2, [r7, #4]
 800b344:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	68ba      	ldr	r2, [r7, #8]
 800b34c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800b34e:	e086      	b.n	800b45e <DMA_SetConfig+0x32a>
 800b350:	40020010 	.word	0x40020010
 800b354:	40020028 	.word	0x40020028
 800b358:	40020040 	.word	0x40020040
 800b35c:	40020058 	.word	0x40020058
 800b360:	40020070 	.word	0x40020070
 800b364:	40020088 	.word	0x40020088
 800b368:	400200a0 	.word	0x400200a0
 800b36c:	400200b8 	.word	0x400200b8
 800b370:	40020410 	.word	0x40020410
 800b374:	40020428 	.word	0x40020428
 800b378:	40020440 	.word	0x40020440
 800b37c:	40020458 	.word	0x40020458
 800b380:	40020470 	.word	0x40020470
 800b384:	40020488 	.word	0x40020488
 800b388:	400204a0 	.word	0x400204a0
 800b38c:	400204b8 	.word	0x400204b8
 800b390:	58025408 	.word	0x58025408
 800b394:	5802541c 	.word	0x5802541c
 800b398:	58025430 	.word	0x58025430
 800b39c:	58025444 	.word	0x58025444
 800b3a0:	58025458 	.word	0x58025458
 800b3a4:	5802546c 	.word	0x5802546c
 800b3a8:	58025480 	.word	0x58025480
 800b3ac:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	68ba      	ldr	r2, [r7, #8]
 800b3b6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	60da      	str	r2, [r3, #12]
}
 800b3c0:	e04d      	b.n	800b45e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800b3c2:	68fb      	ldr	r3, [r7, #12]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a29      	ldr	r2, [pc, #164]	; (800b46c <DMA_SetConfig+0x338>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d022      	beq.n	800b412 <DMA_SetConfig+0x2de>
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a27      	ldr	r2, [pc, #156]	; (800b470 <DMA_SetConfig+0x33c>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d01d      	beq.n	800b412 <DMA_SetConfig+0x2de>
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a26      	ldr	r2, [pc, #152]	; (800b474 <DMA_SetConfig+0x340>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d018      	beq.n	800b412 <DMA_SetConfig+0x2de>
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a24      	ldr	r2, [pc, #144]	; (800b478 <DMA_SetConfig+0x344>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d013      	beq.n	800b412 <DMA_SetConfig+0x2de>
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a23      	ldr	r2, [pc, #140]	; (800b47c <DMA_SetConfig+0x348>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d00e      	beq.n	800b412 <DMA_SetConfig+0x2de>
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a21      	ldr	r2, [pc, #132]	; (800b480 <DMA_SetConfig+0x34c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d009      	beq.n	800b412 <DMA_SetConfig+0x2de>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a20      	ldr	r2, [pc, #128]	; (800b484 <DMA_SetConfig+0x350>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d004      	beq.n	800b412 <DMA_SetConfig+0x2de>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a1e      	ldr	r2, [pc, #120]	; (800b488 <DMA_SetConfig+0x354>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d101      	bne.n	800b416 <DMA_SetConfig+0x2e2>
 800b412:	2301      	movs	r3, #1
 800b414:	e000      	b.n	800b418 <DMA_SetConfig+0x2e4>
 800b416:	2300      	movs	r3, #0
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d020      	beq.n	800b45e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b420:	f003 031f 	and.w	r3, r3, #31
 800b424:	2201      	movs	r2, #1
 800b426:	409a      	lsls	r2, r3
 800b428:	693b      	ldr	r3, [r7, #16]
 800b42a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	683a      	ldr	r2, [r7, #0]
 800b432:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	2b40      	cmp	r3, #64	; 0x40
 800b43a:	d108      	bne.n	800b44e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	687a      	ldr	r2, [r7, #4]
 800b442:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	60da      	str	r2, [r3, #12]
}
 800b44c:	e007      	b.n	800b45e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	68ba      	ldr	r2, [r7, #8]
 800b454:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	687a      	ldr	r2, [r7, #4]
 800b45c:	60da      	str	r2, [r3, #12]
}
 800b45e:	bf00      	nop
 800b460:	371c      	adds	r7, #28
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	58025408 	.word	0x58025408
 800b470:	5802541c 	.word	0x5802541c
 800b474:	58025430 	.word	0x58025430
 800b478:	58025444 	.word	0x58025444
 800b47c:	58025458 	.word	0x58025458
 800b480:	5802546c 	.word	0x5802546c
 800b484:	58025480 	.word	0x58025480
 800b488:	58025494 	.word	0x58025494

0800b48c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800b48c:	b480      	push	{r7}
 800b48e:	b085      	sub	sp, #20
 800b490:	af00      	add	r7, sp, #0
 800b492:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	4a42      	ldr	r2, [pc, #264]	; (800b5a4 <DMA_CalcBaseAndBitshift+0x118>)
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d04a      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	4a41      	ldr	r2, [pc, #260]	; (800b5a8 <DMA_CalcBaseAndBitshift+0x11c>)
 800b4a4:	4293      	cmp	r3, r2
 800b4a6:	d045      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	4a3f      	ldr	r2, [pc, #252]	; (800b5ac <DMA_CalcBaseAndBitshift+0x120>)
 800b4ae:	4293      	cmp	r3, r2
 800b4b0:	d040      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	4a3e      	ldr	r2, [pc, #248]	; (800b5b0 <DMA_CalcBaseAndBitshift+0x124>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d03b      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a3c      	ldr	r2, [pc, #240]	; (800b5b4 <DMA_CalcBaseAndBitshift+0x128>)
 800b4c2:	4293      	cmp	r3, r2
 800b4c4:	d036      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	4a3b      	ldr	r2, [pc, #236]	; (800b5b8 <DMA_CalcBaseAndBitshift+0x12c>)
 800b4cc:	4293      	cmp	r3, r2
 800b4ce:	d031      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	4a39      	ldr	r2, [pc, #228]	; (800b5bc <DMA_CalcBaseAndBitshift+0x130>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d02c      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	4a38      	ldr	r2, [pc, #224]	; (800b5c0 <DMA_CalcBaseAndBitshift+0x134>)
 800b4e0:	4293      	cmp	r3, r2
 800b4e2:	d027      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	4a36      	ldr	r2, [pc, #216]	; (800b5c4 <DMA_CalcBaseAndBitshift+0x138>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d022      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a35      	ldr	r2, [pc, #212]	; (800b5c8 <DMA_CalcBaseAndBitshift+0x13c>)
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d01d      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4a33      	ldr	r2, [pc, #204]	; (800b5cc <DMA_CalcBaseAndBitshift+0x140>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d018      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4a32      	ldr	r2, [pc, #200]	; (800b5d0 <DMA_CalcBaseAndBitshift+0x144>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d013      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4a30      	ldr	r2, [pc, #192]	; (800b5d4 <DMA_CalcBaseAndBitshift+0x148>)
 800b512:	4293      	cmp	r3, r2
 800b514:	d00e      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4a2f      	ldr	r2, [pc, #188]	; (800b5d8 <DMA_CalcBaseAndBitshift+0x14c>)
 800b51c:	4293      	cmp	r3, r2
 800b51e:	d009      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	4a2d      	ldr	r2, [pc, #180]	; (800b5dc <DMA_CalcBaseAndBitshift+0x150>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d004      	beq.n	800b534 <DMA_CalcBaseAndBitshift+0xa8>
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	4a2c      	ldr	r2, [pc, #176]	; (800b5e0 <DMA_CalcBaseAndBitshift+0x154>)
 800b530:	4293      	cmp	r3, r2
 800b532:	d101      	bne.n	800b538 <DMA_CalcBaseAndBitshift+0xac>
 800b534:	2301      	movs	r3, #1
 800b536:	e000      	b.n	800b53a <DMA_CalcBaseAndBitshift+0xae>
 800b538:	2300      	movs	r3, #0
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d024      	beq.n	800b588 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	b2db      	uxtb	r3, r3
 800b544:	3b10      	subs	r3, #16
 800b546:	4a27      	ldr	r2, [pc, #156]	; (800b5e4 <DMA_CalcBaseAndBitshift+0x158>)
 800b548:	fba2 2303 	umull	r2, r3, r2, r3
 800b54c:	091b      	lsrs	r3, r3, #4
 800b54e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	f003 0307 	and.w	r3, r3, #7
 800b556:	4a24      	ldr	r2, [pc, #144]	; (800b5e8 <DMA_CalcBaseAndBitshift+0x15c>)
 800b558:	5cd3      	ldrb	r3, [r2, r3]
 800b55a:	461a      	mov	r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2b03      	cmp	r3, #3
 800b564:	d908      	bls.n	800b578 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	461a      	mov	r2, r3
 800b56c:	4b1f      	ldr	r3, [pc, #124]	; (800b5ec <DMA_CalcBaseAndBitshift+0x160>)
 800b56e:	4013      	ands	r3, r2
 800b570:	1d1a      	adds	r2, r3, #4
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	659a      	str	r2, [r3, #88]	; 0x58
 800b576:	e00d      	b.n	800b594 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	461a      	mov	r2, r3
 800b57e:	4b1b      	ldr	r3, [pc, #108]	; (800b5ec <DMA_CalcBaseAndBitshift+0x160>)
 800b580:	4013      	ands	r3, r2
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	6593      	str	r3, [r2, #88]	; 0x58
 800b586:	e005      	b.n	800b594 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800b598:	4618      	mov	r0, r3
 800b59a:	3714      	adds	r7, #20
 800b59c:	46bd      	mov	sp, r7
 800b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a2:	4770      	bx	lr
 800b5a4:	40020010 	.word	0x40020010
 800b5a8:	40020028 	.word	0x40020028
 800b5ac:	40020040 	.word	0x40020040
 800b5b0:	40020058 	.word	0x40020058
 800b5b4:	40020070 	.word	0x40020070
 800b5b8:	40020088 	.word	0x40020088
 800b5bc:	400200a0 	.word	0x400200a0
 800b5c0:	400200b8 	.word	0x400200b8
 800b5c4:	40020410 	.word	0x40020410
 800b5c8:	40020428 	.word	0x40020428
 800b5cc:	40020440 	.word	0x40020440
 800b5d0:	40020458 	.word	0x40020458
 800b5d4:	40020470 	.word	0x40020470
 800b5d8:	40020488 	.word	0x40020488
 800b5dc:	400204a0 	.word	0x400204a0
 800b5e0:	400204b8 	.word	0x400204b8
 800b5e4:	aaaaaaab 	.word	0xaaaaaaab
 800b5e8:	0801c6b4 	.word	0x0801c6b4
 800b5ec:	fffffc00 	.word	0xfffffc00

0800b5f0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800b5f0:	b480      	push	{r7}
 800b5f2:	b085      	sub	sp, #20
 800b5f4:	af00      	add	r7, sp, #0
 800b5f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	699b      	ldr	r3, [r3, #24]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d120      	bne.n	800b646 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b608:	2b03      	cmp	r3, #3
 800b60a:	d858      	bhi.n	800b6be <DMA_CheckFifoParam+0xce>
 800b60c:	a201      	add	r2, pc, #4	; (adr r2, 800b614 <DMA_CheckFifoParam+0x24>)
 800b60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b612:	bf00      	nop
 800b614:	0800b625 	.word	0x0800b625
 800b618:	0800b637 	.word	0x0800b637
 800b61c:	0800b625 	.word	0x0800b625
 800b620:	0800b6bf 	.word	0x0800b6bf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b628:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d048      	beq.n	800b6c2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800b630:	2301      	movs	r3, #1
 800b632:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b634:	e045      	b.n	800b6c2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b63a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b63e:	d142      	bne.n	800b6c6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b644:	e03f      	b.n	800b6c6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b64e:	d123      	bne.n	800b698 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b654:	2b03      	cmp	r3, #3
 800b656:	d838      	bhi.n	800b6ca <DMA_CheckFifoParam+0xda>
 800b658:	a201      	add	r2, pc, #4	; (adr r2, 800b660 <DMA_CheckFifoParam+0x70>)
 800b65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65e:	bf00      	nop
 800b660:	0800b671 	.word	0x0800b671
 800b664:	0800b677 	.word	0x0800b677
 800b668:	0800b671 	.word	0x0800b671
 800b66c:	0800b689 	.word	0x0800b689
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800b670:	2301      	movs	r3, #1
 800b672:	73fb      	strb	r3, [r7, #15]
        break;
 800b674:	e030      	b.n	800b6d8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b67a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d025      	beq.n	800b6ce <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800b682:	2301      	movs	r3, #1
 800b684:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b686:	e022      	b.n	800b6ce <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b68c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800b690:	d11f      	bne.n	800b6d2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800b696:	e01c      	b.n	800b6d2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69c:	2b02      	cmp	r3, #2
 800b69e:	d902      	bls.n	800b6a6 <DMA_CheckFifoParam+0xb6>
 800b6a0:	2b03      	cmp	r3, #3
 800b6a2:	d003      	beq.n	800b6ac <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800b6a4:	e018      	b.n	800b6d8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800b6a6:	2301      	movs	r3, #1
 800b6a8:	73fb      	strb	r3, [r7, #15]
        break;
 800b6aa:	e015      	b.n	800b6d8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d00e      	beq.n	800b6d6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	73fb      	strb	r3, [r7, #15]
    break;
 800b6bc:	e00b      	b.n	800b6d6 <DMA_CheckFifoParam+0xe6>
        break;
 800b6be:	bf00      	nop
 800b6c0:	e00a      	b.n	800b6d8 <DMA_CheckFifoParam+0xe8>
        break;
 800b6c2:	bf00      	nop
 800b6c4:	e008      	b.n	800b6d8 <DMA_CheckFifoParam+0xe8>
        break;
 800b6c6:	bf00      	nop
 800b6c8:	e006      	b.n	800b6d8 <DMA_CheckFifoParam+0xe8>
        break;
 800b6ca:	bf00      	nop
 800b6cc:	e004      	b.n	800b6d8 <DMA_CheckFifoParam+0xe8>
        break;
 800b6ce:	bf00      	nop
 800b6d0:	e002      	b.n	800b6d8 <DMA_CheckFifoParam+0xe8>
        break;
 800b6d2:	bf00      	nop
 800b6d4:	e000      	b.n	800b6d8 <DMA_CheckFifoParam+0xe8>
    break;
 800b6d6:	bf00      	nop
    }
  }

  return status;
 800b6d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr
 800b6e6:	bf00      	nop

0800b6e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4a38      	ldr	r2, [pc, #224]	; (800b7dc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800b6fc:	4293      	cmp	r3, r2
 800b6fe:	d022      	beq.n	800b746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a36      	ldr	r2, [pc, #216]	; (800b7e0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d01d      	beq.n	800b746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	4a35      	ldr	r2, [pc, #212]	; (800b7e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800b710:	4293      	cmp	r3, r2
 800b712:	d018      	beq.n	800b746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	681b      	ldr	r3, [r3, #0]
 800b718:	4a33      	ldr	r2, [pc, #204]	; (800b7e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800b71a:	4293      	cmp	r3, r2
 800b71c:	d013      	beq.n	800b746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	4a32      	ldr	r2, [pc, #200]	; (800b7ec <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d00e      	beq.n	800b746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a30      	ldr	r2, [pc, #192]	; (800b7f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d009      	beq.n	800b746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	4a2f      	ldr	r2, [pc, #188]	; (800b7f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800b738:	4293      	cmp	r3, r2
 800b73a:	d004      	beq.n	800b746 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	4a2d      	ldr	r2, [pc, #180]	; (800b7f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800b742:	4293      	cmp	r3, r2
 800b744:	d101      	bne.n	800b74a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800b746:	2301      	movs	r3, #1
 800b748:	e000      	b.n	800b74c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800b74a:	2300      	movs	r3, #0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d01a      	beq.n	800b786 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	b2db      	uxtb	r3, r3
 800b756:	3b08      	subs	r3, #8
 800b758:	4a28      	ldr	r2, [pc, #160]	; (800b7fc <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800b75a:	fba2 2303 	umull	r2, r3, r2, r3
 800b75e:	091b      	lsrs	r3, r3, #4
 800b760:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	4b26      	ldr	r3, [pc, #152]	; (800b800 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800b766:	4413      	add	r3, r2
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	461a      	mov	r2, r3
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a24      	ldr	r2, [pc, #144]	; (800b804 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800b774:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f003 031f 	and.w	r3, r3, #31
 800b77c:	2201      	movs	r2, #1
 800b77e:	409a      	lsls	r2, r3
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800b784:	e024      	b.n	800b7d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	b2db      	uxtb	r3, r3
 800b78c:	3b10      	subs	r3, #16
 800b78e:	4a1e      	ldr	r2, [pc, #120]	; (800b808 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800b790:	fba2 2303 	umull	r2, r3, r2, r3
 800b794:	091b      	lsrs	r3, r3, #4
 800b796:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	4a1c      	ldr	r2, [pc, #112]	; (800b80c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d806      	bhi.n	800b7ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800b7a0:	68bb      	ldr	r3, [r7, #8]
 800b7a2:	4a1b      	ldr	r2, [pc, #108]	; (800b810 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800b7a4:	4293      	cmp	r3, r2
 800b7a6:	d902      	bls.n	800b7ae <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	3308      	adds	r3, #8
 800b7ac:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800b7ae:	68fa      	ldr	r2, [r7, #12]
 800b7b0:	4b18      	ldr	r3, [pc, #96]	; (800b814 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800b7b2:	4413      	add	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	461a      	mov	r2, r3
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	4a16      	ldr	r2, [pc, #88]	; (800b818 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800b7c0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	f003 031f 	and.w	r3, r3, #31
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	409a      	lsls	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	669a      	str	r2, [r3, #104]	; 0x68
}
 800b7d0:	bf00      	nop
 800b7d2:	3714      	adds	r7, #20
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7da:	4770      	bx	lr
 800b7dc:	58025408 	.word	0x58025408
 800b7e0:	5802541c 	.word	0x5802541c
 800b7e4:	58025430 	.word	0x58025430
 800b7e8:	58025444 	.word	0x58025444
 800b7ec:	58025458 	.word	0x58025458
 800b7f0:	5802546c 	.word	0x5802546c
 800b7f4:	58025480 	.word	0x58025480
 800b7f8:	58025494 	.word	0x58025494
 800b7fc:	cccccccd 	.word	0xcccccccd
 800b800:	16009600 	.word	0x16009600
 800b804:	58025880 	.word	0x58025880
 800b808:	aaaaaaab 	.word	0xaaaaaaab
 800b80c:	400204b8 	.word	0x400204b8
 800b810:	4002040f 	.word	0x4002040f
 800b814:	10008200 	.word	0x10008200
 800b818:	40020880 	.word	0x40020880

0800b81c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800b81c:	b480      	push	{r7}
 800b81e:	b085      	sub	sp, #20
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	b2db      	uxtb	r3, r3
 800b82a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d04a      	beq.n	800b8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2b08      	cmp	r3, #8
 800b836:	d847      	bhi.n	800b8c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	4a25      	ldr	r2, [pc, #148]	; (800b8d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800b83e:	4293      	cmp	r3, r2
 800b840:	d022      	beq.n	800b888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	4a24      	ldr	r2, [pc, #144]	; (800b8d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800b848:	4293      	cmp	r3, r2
 800b84a:	d01d      	beq.n	800b888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	4a22      	ldr	r2, [pc, #136]	; (800b8dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800b852:	4293      	cmp	r3, r2
 800b854:	d018      	beq.n	800b888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	4a21      	ldr	r2, [pc, #132]	; (800b8e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d013      	beq.n	800b888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	4a1f      	ldr	r2, [pc, #124]	; (800b8e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800b866:	4293      	cmp	r3, r2
 800b868:	d00e      	beq.n	800b888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	4a1e      	ldr	r2, [pc, #120]	; (800b8e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800b870:	4293      	cmp	r3, r2
 800b872:	d009      	beq.n	800b888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a1c      	ldr	r2, [pc, #112]	; (800b8ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d004      	beq.n	800b888 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a1b      	ldr	r2, [pc, #108]	; (800b8f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d101      	bne.n	800b88c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800b888:	2301      	movs	r3, #1
 800b88a:	e000      	b.n	800b88e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800b88c:	2300      	movs	r3, #0
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d00a      	beq.n	800b8a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800b892:	68fa      	ldr	r2, [r7, #12]
 800b894:	4b17      	ldr	r3, [pc, #92]	; (800b8f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800b896:	4413      	add	r3, r2
 800b898:	009b      	lsls	r3, r3, #2
 800b89a:	461a      	mov	r2, r3
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	4a15      	ldr	r2, [pc, #84]	; (800b8f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800b8a4:	671a      	str	r2, [r3, #112]	; 0x70
 800b8a6:	e009      	b.n	800b8bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800b8a8:	68fa      	ldr	r2, [r7, #12]
 800b8aa:	4b14      	ldr	r3, [pc, #80]	; (800b8fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800b8ac:	4413      	add	r3, r2
 800b8ae:	009b      	lsls	r3, r3, #2
 800b8b0:	461a      	mov	r2, r3
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	4a11      	ldr	r2, [pc, #68]	; (800b900 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800b8ba:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	2201      	movs	r2, #1
 800b8c2:	409a      	lsls	r2, r3
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800b8c8:	bf00      	nop
 800b8ca:	3714      	adds	r7, #20
 800b8cc:	46bd      	mov	sp, r7
 800b8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d2:	4770      	bx	lr
 800b8d4:	58025408 	.word	0x58025408
 800b8d8:	5802541c 	.word	0x5802541c
 800b8dc:	58025430 	.word	0x58025430
 800b8e0:	58025444 	.word	0x58025444
 800b8e4:	58025458 	.word	0x58025458
 800b8e8:	5802546c 	.word	0x5802546c
 800b8ec:	58025480 	.word	0x58025480
 800b8f0:	58025494 	.word	0x58025494
 800b8f4:	1600963f 	.word	0x1600963f
 800b8f8:	58025940 	.word	0x58025940
 800b8fc:	1000823f 	.word	0x1000823f
 800b900:	40020940 	.word	0x40020940

0800b904 <HAL_FLASH_Program>:
  *         This parameter shall be 32-bit aligned
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t FlashAddress, uint32_t DataAddress)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b08a      	sub	sp, #40	; 0x28
 800b908:	af00      	add	r7, sp, #0
 800b90a:	60f8      	str	r0, [r7, #12]
 800b90c:	60b9      	str	r1, [r7, #8]
 800b90e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t *dest_addr = (__IO uint32_t *)FlashAddress;
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	623b      	str	r3, [r7, #32]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	61fb      	str	r3, [r7, #28]
  uint32_t bank;
  uint8_t row_index = FLASH_NB_32BITWORD_IN_FLASHWORD;
 800b918:	2308      	movs	r3, #8
 800b91a:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(FlashAddress));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800b91c:	4b40      	ldr	r3, [pc, #256]	; (800ba20 <HAL_FLASH_Program+0x11c>)
 800b91e:	7d1b      	ldrb	r3, [r3, #20]
 800b920:	2b01      	cmp	r3, #1
 800b922:	d101      	bne.n	800b928 <HAL_FLASH_Program+0x24>
 800b924:	2302      	movs	r3, #2
 800b926:	e076      	b.n	800ba16 <HAL_FLASH_Program+0x112>
 800b928:	4b3d      	ldr	r3, [pc, #244]	; (800ba20 <HAL_FLASH_Program+0x11c>)
 800b92a:	2201      	movs	r2, #1
 800b92c:	751a      	strb	r2, [r3, #20]

#if defined (FLASH_OPTCR_PG_OTP)
  if((IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress)) || (IS_FLASH_PROGRAM_ADDRESS_OTP(FlashAddress)))
#else
  if(IS_FLASH_PROGRAM_ADDRESS_BANK1(FlashAddress))
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b934:	d306      	bcc.n	800b944 <HAL_FLASH_Program+0x40>
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800b93c:	d202      	bcs.n	800b944 <HAL_FLASH_Program+0x40>
#endif /* FLASH_OPTCR_PG_OTP */
  {
    bank = FLASH_BANK_1;
 800b93e:	2301      	movs	r3, #1
 800b940:	61bb      	str	r3, [r7, #24]
    /* Prevent unused argument(s) compilation warning */
    UNUSED(TypeProgram);
 800b942:	e00c      	b.n	800b95e <HAL_FLASH_Program+0x5a>
  }
#if defined (DUAL_BANK)
  else if(IS_FLASH_PROGRAM_ADDRESS_BANK2(FlashAddress))
 800b944:	68bb      	ldr	r3, [r7, #8]
 800b946:	f1b3 6f01 	cmp.w	r3, #135266304	; 0x8100000
 800b94a:	d306      	bcc.n	800b95a <HAL_FLASH_Program+0x56>
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	f1b3 6f02 	cmp.w	r3, #136314880	; 0x8200000
 800b952:	d202      	bcs.n	800b95a <HAL_FLASH_Program+0x56>
  {
    bank = FLASH_BANK_2;
 800b954:	2302      	movs	r3, #2
 800b956:	61bb      	str	r3, [r7, #24]
 800b958:	e001      	b.n	800b95e <HAL_FLASH_Program+0x5a>
  }
#endif /* DUAL_BANK */
  else
  {
    return HAL_ERROR;
 800b95a:	2301      	movs	r3, #1
 800b95c:	e05b      	b.n	800ba16 <HAL_FLASH_Program+0x112>
  }

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800b95e:	4b30      	ldr	r3, [pc, #192]	; (800ba20 <HAL_FLASH_Program+0x11c>)
 800b960:	2200      	movs	r2, #0
 800b962:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800b964:	69b9      	ldr	r1, [r7, #24]
 800b966:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b96a:	f000 fa5d 	bl	800be28 <FLASH_WaitForLastOperation>
 800b96e:	4603      	mov	r3, r0
 800b970:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  if(status == HAL_OK)
 800b974:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d147      	bne.n	800ba0c <HAL_FLASH_Program+0x108>
  {
#if defined (DUAL_BANK)
    if(bank == FLASH_BANK_1)
 800b97c:	69bb      	ldr	r3, [r7, #24]
 800b97e:	2b01      	cmp	r3, #1
 800b980:	d106      	bne.n	800b990 <HAL_FLASH_Program+0x8c>
      }
      else
#endif /* FLASH_OPTCR_PG_OTP */
      {
        /* Set PG bit */
        SET_BIT(FLASH->CR1, FLASH_CR_PG);
 800b982:	4b28      	ldr	r3, [pc, #160]	; (800ba24 <HAL_FLASH_Program+0x120>)
 800b984:	68db      	ldr	r3, [r3, #12]
 800b986:	4a27      	ldr	r2, [pc, #156]	; (800ba24 <HAL_FLASH_Program+0x120>)
 800b988:	f043 0302 	orr.w	r3, r3, #2
 800b98c:	60d3      	str	r3, [r2, #12]
 800b98e:	e007      	b.n	800b9a0 <HAL_FLASH_Program+0x9c>
      }
    }
    else
    {
      /* Set PG bit */
      SET_BIT(FLASH->CR2, FLASH_CR_PG);
 800b990:	4b24      	ldr	r3, [pc, #144]	; (800ba24 <HAL_FLASH_Program+0x120>)
 800b992:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800b996:	4a23      	ldr	r2, [pc, #140]	; (800ba24 <HAL_FLASH_Program+0x120>)
 800b998:	f043 0302 	orr.w	r3, r3, #2
 800b99c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
  __ASM volatile ("isb 0xF":::"memory");
 800b9a0:	f3bf 8f6f 	isb	sy
}
 800b9a4:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b9a6:	f3bf 8f4f 	dsb	sy
}
 800b9aa:	bf00      	nop
#endif /* FLASH_OPTCR_PG_OTP */
    {
      /* Program the flash word */
      do
      {
        *dest_addr = *src_addr;
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	681a      	ldr	r2, [r3, #0]
 800b9b0:	6a3b      	ldr	r3, [r7, #32]
 800b9b2:	601a      	str	r2, [r3, #0]
        dest_addr++;
 800b9b4:	6a3b      	ldr	r3, [r7, #32]
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	623b      	str	r3, [r7, #32]
        src_addr++;
 800b9ba:	69fb      	ldr	r3, [r7, #28]
 800b9bc:	3304      	adds	r3, #4
 800b9be:	61fb      	str	r3, [r7, #28]
        row_index--;
 800b9c0:	7dfb      	ldrb	r3, [r7, #23]
 800b9c2:	3b01      	subs	r3, #1
 800b9c4:	75fb      	strb	r3, [r7, #23]
     } while (row_index != 0U);
 800b9c6:	7dfb      	ldrb	r3, [r7, #23]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d1ef      	bne.n	800b9ac <HAL_FLASH_Program+0xa8>
  __ASM volatile ("isb 0xF":::"memory");
 800b9cc:	f3bf 8f6f 	isb	sy
}
 800b9d0:	bf00      	nop
  __ASM volatile ("dsb 0xF":::"memory");
 800b9d2:	f3bf 8f4f 	dsb	sy
}
 800b9d6:	bf00      	nop

    __ISB();
    __DSB();

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, bank);
 800b9d8:	69b9      	ldr	r1, [r7, #24]
 800b9da:	f24c 3050 	movw	r0, #50000	; 0xc350
 800b9de:	f000 fa23 	bl	800be28 <FLASH_WaitForLastOperation>
 800b9e2:	4603      	mov	r3, r0
 800b9e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      CLEAR_BIT(FLASH->OPTCR, FLASH_OPTCR_PG_OTP);
    }
    else
#endif /* FLASH_OPTCR_PG_OTP */
    {
      if(bank == FLASH_BANK_1)
 800b9e8:	69bb      	ldr	r3, [r7, #24]
 800b9ea:	2b01      	cmp	r3, #1
 800b9ec:	d106      	bne.n	800b9fc <HAL_FLASH_Program+0xf8>
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR1, FLASH_CR_PG);
 800b9ee:	4b0d      	ldr	r3, [pc, #52]	; (800ba24 <HAL_FLASH_Program+0x120>)
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	4a0c      	ldr	r2, [pc, #48]	; (800ba24 <HAL_FLASH_Program+0x120>)
 800b9f4:	f023 0302 	bic.w	r3, r3, #2
 800b9f8:	60d3      	str	r3, [r2, #12]
 800b9fa:	e007      	b.n	800ba0c <HAL_FLASH_Program+0x108>
      }
      else
      {
        /* If the program operation is completed, disable the PG */
        CLEAR_BIT(FLASH->CR2, FLASH_CR_PG);
 800b9fc:	4b09      	ldr	r3, [pc, #36]	; (800ba24 <HAL_FLASH_Program+0x120>)
 800b9fe:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800ba02:	4a08      	ldr	r2, [pc, #32]	; (800ba24 <HAL_FLASH_Program+0x120>)
 800ba04:	f023 0302 	bic.w	r3, r3, #2
 800ba08:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
    }
#endif /* DUAL_BANK */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800ba0c:	4b04      	ldr	r3, [pc, #16]	; (800ba20 <HAL_FLASH_Program+0x11c>)
 800ba0e:	2200      	movs	r2, #0
 800ba10:	751a      	strb	r2, [r3, #20]

  return status;
 800ba12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3728      	adds	r7, #40	; 0x28
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	240023f8 	.word	0x240023f8
 800ba24:	52002000 	.word	0x52002000

0800ba28 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
  uint32_t temp;
  uint32_t errorflag;
  FLASH_ProcedureTypeDef procedure;

  /* Check FLASH Bank1 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK1(FLASH_SR_EOP) != RESET)
 800ba2e:	4b7a      	ldr	r3, [pc, #488]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800ba30:	691b      	ldr	r3, [r3, #16]
 800ba32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba3a:	d15c      	bne.n	800baf6 <HAL_FLASH_IRQHandler+0xce>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK1)
 800ba3c:	4b77      	ldr	r3, [pc, #476]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba3e:	781b      	ldrb	r3, [r3, #0]
 800ba40:	b2db      	uxtb	r3, r3
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d132      	bne.n	800baac <HAL_FLASH_IRQHandler+0x84>
    {
      /* Nb of sector to erased can be decreased */
      pFlash.NbSectorsToErase--;
 800ba46:	4b75      	ldr	r3, [pc, #468]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	3b01      	subs	r3, #1
 800ba4c:	4a73      	ldr	r2, [pc, #460]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba4e:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase */
      if(pFlash.NbSectorsToErase != 0U)
 800ba50:	4b72      	ldr	r3, [pc, #456]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba52:	685b      	ldr	r3, [r3, #4]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d018      	beq.n	800ba8a <HAL_FLASH_IRQHandler+0x62>
      {
        /* Indicate user which sector has been erased */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800ba58:	4b70      	ldr	r3, [pc, #448]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba5a:	68db      	ldr	r3, [r3, #12]
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f000 f995 	bl	800bd8c <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 1 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800ba62:	4b6d      	ldr	r3, [pc, #436]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800ba64:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800ba68:	615a      	str	r2, [r3, #20]

        /* Increment sector number */
        pFlash.Sector++;
 800ba6a:	4b6c      	ldr	r3, [pc, #432]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba6c:	68db      	ldr	r3, [r3, #12]
 800ba6e:	3301      	adds	r3, #1
 800ba70:	4a6a      	ldr	r2, [pc, #424]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba72:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 800ba74:	4b69      	ldr	r3, [pc, #420]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba76:	68db      	ldr	r3, [r3, #12]
 800ba78:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_1, pFlash.VoltageForErase);
 800ba7a:	4b68      	ldr	r3, [pc, #416]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba7c:	689b      	ldr	r3, [r3, #8]
 800ba7e:	461a      	mov	r2, r3
 800ba80:	2101      	movs	r1, #1
 800ba82:	68f8      	ldr	r0, [r7, #12]
 800ba84:	f000 fbd0 	bl	800c228 <FLASH_Erase_Sector>
 800ba88:	e035      	b.n	800baf6 <HAL_FLASH_IRQHandler+0xce>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800ba8a:	4b64      	ldr	r3, [pc, #400]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba90:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800ba92:	4b62      	ldr	r3, [pc, #392]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba94:	2200      	movs	r2, #0
 800ba96:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800ba98:	4b60      	ldr	r3, [pc, #384]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f000 f975 	bl	800bd8c <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800baa2:	4b5d      	ldr	r3, [pc, #372]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800baa4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800baa8:	615a      	str	r2, [r3, #20]
 800baaa:	e024      	b.n	800baf6 <HAL_FLASH_IRQHandler+0xce>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 800baac:	4b5b      	ldr	r3, [pc, #364]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800baae:	781b      	ldrb	r3, [r3, #0]
 800bab0:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bab2:	7afb      	ldrb	r3, [r7, #11]
 800bab4:	2b02      	cmp	r3, #2
 800bab6:	d002      	beq.n	800babe <HAL_FLASH_IRQHandler+0x96>
 800bab8:	7afb      	ldrb	r3, [r7, #11]
 800baba:	2b07      	cmp	r3, #7
 800babc:	d103      	bne.n	800bac6 <HAL_FLASH_IRQHandler+0x9e>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_1);
 800babe:	2001      	movs	r0, #1
 800bac0:	f000 f964 	bl	800bd8c <HAL_FLASH_EndOfOperationCallback>
 800bac4:	e007      	b.n	800bad6 <HAL_FLASH_IRQHandler+0xae>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK1)
 800bac6:	7afb      	ldrb	r3, [r7, #11]
 800bac8:	2b03      	cmp	r3, #3
 800baca:	d104      	bne.n	800bad6 <HAL_FLASH_IRQHandler+0xae>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800bacc:	4b53      	ldr	r3, [pc, #332]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bace:	691b      	ldr	r3, [r3, #16]
 800bad0:	4618      	mov	r0, r3
 800bad2:	f000 f95b 	bl	800bd8c <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK2) && \
 800bad6:	7afb      	ldrb	r3, [r7, #11]
 800bad8:	2b04      	cmp	r3, #4
 800bada:	d00c      	beq.n	800baf6 <HAL_FLASH_IRQHandler+0xce>
 800badc:	7afb      	ldrb	r3, [r7, #11]
 800bade:	2b05      	cmp	r3, #5
 800bae0:	d009      	beq.n	800baf6 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_MASSERASE_BANK2) && \
 800bae2:	7afb      	ldrb	r3, [r7, #11]
 800bae4:	2b06      	cmp	r3, #6
 800bae6:	d006      	beq.n	800baf6 <HAL_FLASH_IRQHandler+0xce>
         (procedure != FLASH_PROC_PROGRAM_BANK2))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bae8:	4b4c      	ldr	r3, [pc, #304]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800baea:	2200      	movs	r2, #0
 800baec:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800baee:	4b4a      	ldr	r3, [pc, #296]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800baf0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800baf4:	615a      	str	r2, [r3, #20]
    }
  }

#if defined (DUAL_BANK)
 /* Check FLASH Bank2 End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG_BANK2(FLASH_SR_EOP) != RESET)
 800baf6:	4b48      	ldr	r3, [pc, #288]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800baf8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bafc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb04:	d15f      	bne.n	800bbc6 <HAL_FLASH_IRQHandler+0x19e>
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE_BANK2)
 800bb06:	4b45      	ldr	r3, [pc, #276]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb08:	781b      	ldrb	r3, [r3, #0]
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b04      	cmp	r3, #4
 800bb0e:	d134      	bne.n	800bb7a <HAL_FLASH_IRQHandler+0x152>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 800bb10:	4b42      	ldr	r3, [pc, #264]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb12:	685b      	ldr	r3, [r3, #4]
 800bb14:	3b01      	subs	r3, #1
 800bb16:	4a41      	ldr	r2, [pc, #260]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb18:	6053      	str	r3, [r2, #4]

      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 800bb1a:	4b40      	ldr	r3, [pc, #256]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb1c:	685b      	ldr	r3, [r3, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d019      	beq.n	800bb56 <HAL_FLASH_IRQHandler+0x12e>
      {
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bb22:	4b3e      	ldr	r3, [pc, #248]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb24:	68db      	ldr	r3, [r3, #12]
 800bb26:	4618      	mov	r0, r3
 800bb28:	f000 f930 	bl	800bd8c <HAL_FLASH_EndOfOperationCallback>

        /* Clear bank 2 End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bb2c:	4b3a      	ldr	r3, [pc, #232]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800bb2e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bb32:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

        /*Increment sector number*/
        pFlash.Sector++;
 800bb36:	4b39      	ldr	r3, [pc, #228]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb38:	68db      	ldr	r3, [r3, #12]
 800bb3a:	3301      	adds	r3, #1
 800bb3c:	4a37      	ldr	r2, [pc, #220]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb3e:	60d3      	str	r3, [r2, #12]
        temp = pFlash.Sector;
 800bb40:	4b36      	ldr	r3, [pc, #216]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	60fb      	str	r3, [r7, #12]
        FLASH_Erase_Sector(temp, FLASH_BANK_2, pFlash.VoltageForErase);
 800bb46:	4b35      	ldr	r3, [pc, #212]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb48:	689b      	ldr	r3, [r3, #8]
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	2102      	movs	r1, #2
 800bb4e:	68f8      	ldr	r0, [r7, #12]
 800bb50:	f000 fb6a 	bl	800c228 <FLASH_Erase_Sector>
 800bb54:	e037      	b.n	800bbc6 <HAL_FLASH_IRQHandler+0x19e>
      }
      else
      {
        /* No more sectors to Erase, user callback can be called */
        /* Reset Sector and stop Erase sectors procedure */
        pFlash.Sector = 0xFFFFFFFFU;
 800bb56:	4b31      	ldr	r3, [pc, #196]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb58:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb5c:	60da      	str	r2, [r3, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bb5e:	4b2f      	ldr	r3, [pc, #188]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb60:	2200      	movs	r2, #0
 800bb62:	701a      	strb	r2, [r3, #0]

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Sector);
 800bb64:	4b2d      	ldr	r3, [pc, #180]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb66:	68db      	ldr	r3, [r3, #12]
 800bb68:	4618      	mov	r0, r3
 800bb6a:	f000 f90f 	bl	800bd8c <HAL_FLASH_EndOfOperationCallback>

        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bb6e:	4b2a      	ldr	r3, [pc, #168]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800bb70:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bb74:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
 800bb78:	e025      	b.n	800bbc6 <HAL_FLASH_IRQHandler+0x19e>
      }
    }
    else
    {
      procedure = pFlash.ProcedureOnGoing;
 800bb7a:	4b28      	ldr	r3, [pc, #160]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	72fb      	strb	r3, [r7, #11]

      if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bb80:	7afb      	ldrb	r3, [r7, #11]
 800bb82:	2b05      	cmp	r3, #5
 800bb84:	d002      	beq.n	800bb8c <HAL_FLASH_IRQHandler+0x164>
 800bb86:	7afb      	ldrb	r3, [r7, #11]
 800bb88:	2b07      	cmp	r3, #7
 800bb8a:	d103      	bne.n	800bb94 <HAL_FLASH_IRQHandler+0x16c>
      {
        /*MassErase ended. Return the selected bank*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(FLASH_BANK_2);
 800bb8c:	2002      	movs	r0, #2
 800bb8e:	f000 f8fd 	bl	800bd8c <HAL_FLASH_EndOfOperationCallback>
 800bb92:	e007      	b.n	800bba4 <HAL_FLASH_IRQHandler+0x17c>
      }
      else if(procedure == FLASH_PROC_PROGRAM_BANK2)
 800bb94:	7afb      	ldrb	r3, [r7, #11]
 800bb96:	2b06      	cmp	r3, #6
 800bb98:	d104      	bne.n	800bba4 <HAL_FLASH_IRQHandler+0x17c>
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800bb9a:	4b20      	ldr	r3, [pc, #128]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bb9c:	691b      	ldr	r3, [r3, #16]
 800bb9e:	4618      	mov	r0, r3
 800bba0:	f000 f8f4 	bl	800bd8c <HAL_FLASH_EndOfOperationCallback>
      else
      {
        /* Nothing to do */
      }

      if((procedure != FLASH_PROC_SECTERASE_BANK1) && \
 800bba4:	7afb      	ldrb	r3, [r7, #11]
 800bba6:	2b01      	cmp	r3, #1
 800bba8:	d00d      	beq.n	800bbc6 <HAL_FLASH_IRQHandler+0x19e>
 800bbaa:	7afb      	ldrb	r3, [r7, #11]
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d00a      	beq.n	800bbc6 <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_MASSERASE_BANK1) && \
 800bbb0:	7afb      	ldrb	r3, [r7, #11]
 800bbb2:	2b03      	cmp	r3, #3
 800bbb4:	d007      	beq.n	800bbc6 <HAL_FLASH_IRQHandler+0x19e>
         (procedure != FLASH_PROC_PROGRAM_BANK1))
      {
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bbb6:	4b19      	ldr	r3, [pc, #100]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bbb8:	2200      	movs	r2, #0
 800bbba:	701a      	strb	r2, [r3, #0]
        /* Clear FLASH End of Operation pending bit */
        __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bbbc:	4b16      	ldr	r3, [pc, #88]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800bbbe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bbc2:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  }
#endif /* DUAL_BANK */

  /* Check FLASH Bank1 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
 800bbc6:	4b14      	ldr	r3, [pc, #80]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800bbc8:	691b      	ldr	r3, [r3, #16]
 800bbca:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 800bbce:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR1 & (FLASH_FLAG_WRPERR_BANK1 | FLASH_FLAG_PGSERR_BANK1 | FLASH_FLAG_STRBERR_BANK1 | \
                            FLASH_FLAG_INCERR_BANK1);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d02d      	beq.n	800bc32 <HAL_FLASH_IRQHandler+0x20a>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bbd6:	4b11      	ldr	r3, [pc, #68]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bbd8:	699a      	ldr	r2, [r3, #24]
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	4313      	orrs	r3, r2
 800bbde:	4a0f      	ldr	r2, [pc, #60]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bbe0:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bbe2:	4a0d      	ldr	r2, [pc, #52]	; (800bc18 <HAL_FLASH_IRQHandler+0x1f0>)
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6153      	str	r3, [r2, #20]

    procedure = pFlash.ProcedureOnGoing;
 800bbe8:	4b0c      	ldr	r3, [pc, #48]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bbea:	781b      	ldrb	r3, [r3, #0]
 800bbec:	72fb      	strb	r3, [r7, #11]

    if(procedure == FLASH_PROC_SECTERASE_BANK1)
 800bbee:	7afb      	ldrb	r3, [r7, #11]
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d107      	bne.n	800bc04 <HAL_FLASH_IRQHandler+0x1dc>
    {
      /* Return the faulty sector */
      temp = pFlash.Sector;
 800bbf4:	4b09      	ldr	r3, [pc, #36]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bbf6:	68db      	ldr	r3, [r3, #12]
 800bbf8:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800bbfa:	4b08      	ldr	r3, [pc, #32]	; (800bc1c <HAL_FLASH_IRQHandler+0x1f4>)
 800bbfc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bc00:	60da      	str	r2, [r3, #12]
 800bc02:	e010      	b.n	800bc26 <HAL_FLASH_IRQHandler+0x1fe>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK1) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bc04:	7afb      	ldrb	r3, [r7, #11]
 800bc06:	2b02      	cmp	r3, #2
 800bc08:	d002      	beq.n	800bc10 <HAL_FLASH_IRQHandler+0x1e8>
 800bc0a:	7afb      	ldrb	r3, [r7, #11]
 800bc0c:	2b07      	cmp	r3, #7
 800bc0e:	d107      	bne.n	800bc20 <HAL_FLASH_IRQHandler+0x1f8>
    {
      /* Return the faulty bank */
      temp = FLASH_BANK_1;
 800bc10:	2301      	movs	r3, #1
 800bc12:	60fb      	str	r3, [r7, #12]
 800bc14:	e007      	b.n	800bc26 <HAL_FLASH_IRQHandler+0x1fe>
 800bc16:	bf00      	nop
 800bc18:	52002000 	.word	0x52002000
 800bc1c:	240023f8 	.word	0x240023f8
    }
    else
    {
      /* Return the faulty address */
      temp = pFlash.Address;
 800bc20:	4b58      	ldr	r3, [pc, #352]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bc22:	691b      	ldr	r3, [r3, #16]
 800bc24:	60fb      	str	r3, [r7, #12]
    }

    /* Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bc26:	4b57      	ldr	r3, [pc, #348]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bc28:	2200      	movs	r2, #0
 800bc2a:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 800bc2c:	68f8      	ldr	r0, [r7, #12]
 800bc2e:	f000 f8b7 	bl	800bda0 <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank1 ECC single correction error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_SNECCERR_BANK1;
 800bc32:	4b55      	ldr	r3, [pc, #340]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bc34:	691b      	ldr	r3, [r3, #16]
 800bc36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bc3a:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d00a      	beq.n	800bc58 <HAL_FLASH_IRQHandler+0x230>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bc42:	4b50      	ldr	r3, [pc, #320]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bc44:	699a      	ldr	r2, [r3, #24]
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	4a4e      	ldr	r2, [pc, #312]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bc4c:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 800bc4e:	f7f7 f9b1 	bl	8002fb4 <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank1 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bc52:	4a4d      	ldr	r2, [pc, #308]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH Bank1 ECC double detection error flag */
  errorflag = FLASH->SR1 & FLASH_FLAG_DBECCERR_BANK1;
 800bc58:	4b4b      	ldr	r3, [pc, #300]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bc60:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d00a      	beq.n	800bc7e <HAL_FLASH_IRQHandler+0x256>
  {
    /* Save the error code */
    pFlash.ErrorCode |= errorflag;
 800bc68:	4b46      	ldr	r3, [pc, #280]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bc6a:	699a      	ldr	r2, [r3, #24]
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	4313      	orrs	r3, r2
 800bc70:	4a44      	ldr	r2, [pc, #272]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bc72:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 800bc74:	f7f7 f9ae 	bl	8002fd4 <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank1 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK1(errorflag);
 800bc78:	4a43      	ldr	r2, [pc, #268]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6153      	str	r3, [r2, #20]
#endif /* USE_FLASH_ECC */

#if defined (DUAL_BANK)
  /* Check FLASH Bank2 operation error flags */
#if defined (FLASH_SR_OPERR)
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
 800bc7e:	4b42      	ldr	r3, [pc, #264]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bc80:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bc84:	f403 03dc 	and.w	r3, r3, #7208960	; 0x6e0000
 800bc88:	607b      	str	r3, [r7, #4]
#else
  errorflag = FLASH->SR2 & ((FLASH_FLAG_WRPERR_BANK2 | FLASH_FLAG_PGSERR_BANK2 | FLASH_FLAG_STRBERR_BANK2 | \
                             FLASH_FLAG_INCERR_BANK2) & 0x7FFFFFFFU);
#endif /* FLASH_SR_OPERR */

  if(errorflag != 0U)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d02d      	beq.n	800bcec <HAL_FLASH_IRQHandler+0x2c4>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800bc90:	4b3c      	ldr	r3, [pc, #240]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bc92:	699a      	ldr	r2, [r3, #24]
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4313      	orrs	r3, r2
 800bc98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bc9c:	4a39      	ldr	r2, [pc, #228]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bc9e:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800bca0:	4a39      	ldr	r2, [pc, #228]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bca8:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    procedure = pFlash.ProcedureOnGoing;
 800bcac:	4b35      	ldr	r3, [pc, #212]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	72fb      	strb	r3, [r7, #11]

    if(procedure== FLASH_PROC_SECTERASE_BANK2)
 800bcb2:	7afb      	ldrb	r3, [r7, #11]
 800bcb4:	2b04      	cmp	r3, #4
 800bcb6:	d107      	bne.n	800bcc8 <HAL_FLASH_IRQHandler+0x2a0>
    {
      /*return the faulty sector*/
      temp = pFlash.Sector;
 800bcb8:	4b32      	ldr	r3, [pc, #200]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bcba:	68db      	ldr	r3, [r3, #12]
 800bcbc:	60fb      	str	r3, [r7, #12]
      pFlash.Sector = 0xFFFFFFFFU;
 800bcbe:	4b31      	ldr	r3, [pc, #196]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bcc0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bcc4:	60da      	str	r2, [r3, #12]
 800bcc6:	e00b      	b.n	800bce0 <HAL_FLASH_IRQHandler+0x2b8>
    }
    else if((procedure == FLASH_PROC_MASSERASE_BANK2) || (procedure == FLASH_PROC_ALLBANK_MASSERASE))
 800bcc8:	7afb      	ldrb	r3, [r7, #11]
 800bcca:	2b05      	cmp	r3, #5
 800bccc:	d002      	beq.n	800bcd4 <HAL_FLASH_IRQHandler+0x2ac>
 800bcce:	7afb      	ldrb	r3, [r7, #11]
 800bcd0:	2b07      	cmp	r3, #7
 800bcd2:	d102      	bne.n	800bcda <HAL_FLASH_IRQHandler+0x2b2>
    {
      /*return the faulty bank*/
      temp = FLASH_BANK_2;
 800bcd4:	2302      	movs	r3, #2
 800bcd6:	60fb      	str	r3, [r7, #12]
 800bcd8:	e002      	b.n	800bce0 <HAL_FLASH_IRQHandler+0x2b8>
    }
    else
    {
      /*return the faulty address*/
      temp = pFlash.Address;
 800bcda:	4b2a      	ldr	r3, [pc, #168]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	60fb      	str	r3, [r7, #12]
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800bce0:	4b28      	ldr	r3, [pc, #160]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bce2:	2200      	movs	r2, #0
 800bce4:	701a      	strb	r2, [r3, #0]

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 800bce6:	68f8      	ldr	r0, [r7, #12]
 800bce8:	f000 f85a 	bl	800bda0 <HAL_FLASH_OperationErrorCallback>
  }

#if (USE_FLASH_ECC == 1U)
  /* Check FLASH Bank2 ECC single correction error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_SNECCERR_BANK2;
 800bcec:	4b26      	ldr	r3, [pc, #152]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bcee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bcf2:	f003 4302 	and.w	r3, r3, #2181038080	; 0x82000000
 800bcf6:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d00f      	beq.n	800bd1e <HAL_FLASH_IRQHandler+0x2f6>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800bcfe:	4b21      	ldr	r3, [pc, #132]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bd00:	699a      	ldr	r2, [r3, #24]
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4313      	orrs	r3, r2
 800bd06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd0a:	4a1e      	ldr	r2, [pc, #120]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bd0c:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccCorrectionCallback();
 800bd0e:	f7f7 f951 	bl	8002fb4 <HAL_FLASHEx_EccCorrectionCallback>

    /* Clear FLASH Bank2 ECC single correction error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800bd12:	4a1d      	ldr	r2, [pc, #116]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd1a:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

  /* Check FLASH Bank2 ECC double detection error flag */
  errorflag = FLASH->SR2 & FLASH_FLAG_DBECCERR_BANK2;
 800bd1e:	4b1a      	ldr	r3, [pc, #104]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bd20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bd24:	f003 4304 	and.w	r3, r3, #2214592512	; 0x84000000
 800bd28:	607b      	str	r3, [r7, #4]

  if(errorflag != 0U)
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d00f      	beq.n	800bd50 <HAL_FLASH_IRQHandler+0x328>
  {
    /* Save the error code */
    pFlash.ErrorCode |= (errorflag | 0x80000000U);
 800bd30:	4b14      	ldr	r3, [pc, #80]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bd32:	699a      	ldr	r2, [r3, #24]
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bd3c:	4a11      	ldr	r2, [pc, #68]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bd3e:	6193      	str	r3, [r2, #24]

    /* Call User callback */
    HAL_FLASHEx_EccDetectionCallback();
 800bd40:	f7f7 f948 	bl	8002fd4 <HAL_FLASHEx_EccDetectionCallback>

    /* Clear FLASH Bank2 ECC double detection error flag in order to allow new ECC error record */
    __HAL_FLASH_CLEAR_FLAG_BANK2(errorflag);
 800bd44:	4a10      	ldr	r2, [pc, #64]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bd4c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  }

#endif /* USE_FLASH_ECC */
#endif /* DUAL_BANK */

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 800bd50:	4b0c      	ldr	r3, [pc, #48]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	b2db      	uxtb	r3, r3
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d110      	bne.n	800bd7c <HAL_FLASH_IRQHandler+0x354>
  {
#if defined (FLASH_CR_OPERRIE)
    /* Disable Bank1 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK1(FLASH_IT_EOP_BANK1    | FLASH_IT_WRPERR_BANK1 | FLASH_IT_PGSERR_BANK1 | \
 800bd5a:	4b0b      	ldr	r3, [pc, #44]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	4a0a      	ldr	r2, [pc, #40]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bd60:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 800bd64:	60d3      	str	r3, [r2, #12]
                                 FLASH_IT_STRBERR_BANK1 | FLASH_IT_INCERR_BANK1 | FLASH_IT_OPERR_BANK1);

#if defined (DUAL_BANK)
    /* Disable Bank2 Operation and Error source interrupt */
    __HAL_FLASH_DISABLE_IT_BANK2(FLASH_IT_EOP_BANK2    | FLASH_IT_WRPERR_BANK2 | FLASH_IT_PGSERR_BANK2 | \
 800bd66:	4b08      	ldr	r3, [pc, #32]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bd68:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bd6c:	4a06      	ldr	r2, [pc, #24]	; (800bd88 <HAL_FLASH_IRQHandler+0x360>)
 800bd6e:	f423 03de 	bic.w	r3, r3, #7274496	; 0x6f0000
 800bd72:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
                                 FLASH_IT_STRBERR_BANK2 | FLASH_IT_INCERR_BANK2);
#endif /* DUAL_BANK */
#endif /* FLASH_CR_OPERRIE */

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800bd76:	4b03      	ldr	r3, [pc, #12]	; (800bd84 <HAL_FLASH_IRQHandler+0x35c>)
 800bd78:	2200      	movs	r2, #0
 800bd7a:	751a      	strb	r2, [r3, #20]
  }
}
 800bd7c:	bf00      	nop
 800bd7e:	3710      	adds	r7, #16
 800bd80:	46bd      	mov	sp, r7
 800bd82:	bd80      	pop	{r7, pc}
 800bd84:	240023f8 	.word	0x240023f8
 800bd88:	52002000 	.word	0x52002000

0800bd8c <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 800bd8c:	b480      	push	{r7}
 800bd8e:	b083      	sub	sp, #12
 800bd90:	af00      	add	r7, sp, #0
 800bd92:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800bd94:	bf00      	nop
 800bd96:	370c      	adds	r7, #12
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9e:	4770      	bx	lr

0800bda0 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 800bda0:	b480      	push	{r7}
 800bda2:	b083      	sub	sp, #12
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 800bda8:	bf00      	nop
 800bdaa:	370c      	adds	r7, #12
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control registers access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800bdb8:	4b18      	ldr	r3, [pc, #96]	; (800be1c <HAL_FLASH_Unlock+0x68>)
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	f003 0301 	and.w	r3, r3, #1
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d00d      	beq.n	800bde0 <HAL_FLASH_Unlock+0x2c>
  {
    /* Authorize the FLASH Bank1 Registers access */
    WRITE_REG(FLASH->KEYR1, FLASH_KEY1);
 800bdc4:	4b15      	ldr	r3, [pc, #84]	; (800be1c <HAL_FLASH_Unlock+0x68>)
 800bdc6:	4a16      	ldr	r2, [pc, #88]	; (800be20 <HAL_FLASH_Unlock+0x6c>)
 800bdc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR1, FLASH_KEY2);
 800bdca:	4b14      	ldr	r3, [pc, #80]	; (800be1c <HAL_FLASH_Unlock+0x68>)
 800bdcc:	4a15      	ldr	r2, [pc, #84]	; (800be24 <HAL_FLASH_Unlock+0x70>)
 800bdce:	605a      	str	r2, [r3, #4]

    /* Verify Flash Bank1 is unlocked */
    if (READ_BIT(FLASH->CR1, FLASH_CR_LOCK) != 0U)
 800bdd0:	4b12      	ldr	r3, [pc, #72]	; (800be1c <HAL_FLASH_Unlock+0x68>)
 800bdd2:	68db      	ldr	r3, [r3, #12]
 800bdd4:	f003 0301 	and.w	r3, r3, #1
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d001      	beq.n	800bde0 <HAL_FLASH_Unlock+0x2c>
    {
      return HAL_ERROR;
 800bddc:	2301      	movs	r3, #1
 800bdde:	e018      	b.n	800be12 <HAL_FLASH_Unlock+0x5e>
    }
  }

#if defined (DUAL_BANK)
  if(READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800bde0:	4b0e      	ldr	r3, [pc, #56]	; (800be1c <HAL_FLASH_Unlock+0x68>)
 800bde2:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800bde6:	f003 0301 	and.w	r3, r3, #1
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d010      	beq.n	800be10 <HAL_FLASH_Unlock+0x5c>
  {
    /* Authorize the FLASH Bank2 Registers access */
    WRITE_REG(FLASH->KEYR2, FLASH_KEY1);
 800bdee:	4b0b      	ldr	r3, [pc, #44]	; (800be1c <HAL_FLASH_Unlock+0x68>)
 800bdf0:	4a0b      	ldr	r2, [pc, #44]	; (800be20 <HAL_FLASH_Unlock+0x6c>)
 800bdf2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    WRITE_REG(FLASH->KEYR2, FLASH_KEY2);
 800bdf6:	4b09      	ldr	r3, [pc, #36]	; (800be1c <HAL_FLASH_Unlock+0x68>)
 800bdf8:	4a0a      	ldr	r2, [pc, #40]	; (800be24 <HAL_FLASH_Unlock+0x70>)
 800bdfa:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104

    /* Verify Flash Bank2 is unlocked */
    if (READ_BIT(FLASH->CR2, FLASH_CR_LOCK) != 0U)
 800bdfe:	4b07      	ldr	r3, [pc, #28]	; (800be1c <HAL_FLASH_Unlock+0x68>)
 800be00:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800be04:	f003 0301 	and.w	r3, r3, #1
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d001      	beq.n	800be10 <HAL_FLASH_Unlock+0x5c>
    {
      return HAL_ERROR;
 800be0c:	2301      	movs	r3, #1
 800be0e:	e000      	b.n	800be12 <HAL_FLASH_Unlock+0x5e>
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr
 800be1c:	52002000 	.word	0x52002000
 800be20:	45670123 	.word	0x45670123
 800be24:	cdef89ab 	.word	0xcdef89ab

0800be28 <FLASH_WaitForLastOperation>:
  * @param  Timeout maximum flash operation timeout
  * @param  Bank flash FLASH_BANK_1 or FLASH_BANK_2
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout, uint32_t Bank)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b086      	sub	sp, #24
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
 800be30:	6039      	str	r1, [r7, #0]
  /* Wait for the FLASH operation to complete by polling on QW flag to be reset.
     Even if the FLASH operation fails, the QW flag will be reset and an error
     flag will be set */

  uint32_t bsyflag = FLASH_FLAG_QW_BANK1;
 800be32:	2304      	movs	r3, #4
 800be34:	617b      	str	r3, [r7, #20]
  uint32_t errorflag = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	613b      	str	r3, [r7, #16]
  uint32_t tickstart = HAL_GetTick();
 800be3a:	f7fa fde5 	bl	8006a08 <HAL_GetTick>
 800be3e:	60f8      	str	r0, [r7, #12]

  assert_param(IS_FLASH_BANK_EXCLUSIVE(Bank));

#if defined (DUAL_BANK)

  if (Bank == FLASH_BANK_2)
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b02      	cmp	r3, #2
 800be44:	d113      	bne.n	800be6e <FLASH_WaitForLastOperation+0x46>
  {
    /* Select bsyflag depending on Bank */
    bsyflag = FLASH_FLAG_QW_BANK2;
 800be46:	4b41      	ldr	r3, [pc, #260]	; (800bf4c <FLASH_WaitForLastOperation+0x124>)
 800be48:	617b      	str	r3, [r7, #20]
  }
#endif /* DUAL_BANK */

  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800be4a:	e010      	b.n	800be6e <FLASH_WaitForLastOperation+0x46>
  {
    if(Timeout != HAL_MAX_DELAY)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800be52:	d00c      	beq.n	800be6e <FLASH_WaitForLastOperation+0x46>
    {
      if(((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800be54:	f7fa fdd8 	bl	8006a08 <HAL_GetTick>
 800be58:	4602      	mov	r2, r0
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	429a      	cmp	r2, r3
 800be62:	d302      	bcc.n	800be6a <FLASH_WaitForLastOperation+0x42>
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d101      	bne.n	800be6e <FLASH_WaitForLastOperation+0x46>
      {
        return HAL_TIMEOUT;
 800be6a:	2303      	movs	r3, #3
 800be6c:	e06a      	b.n	800bf44 <FLASH_WaitForLastOperation+0x11c>
  while(__HAL_FLASH_GET_FLAG(bsyflag))
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	4b37      	ldr	r3, [pc, #220]	; (800bf50 <FLASH_WaitForLastOperation+0x128>)
 800be72:	4013      	ands	r3, r2
 800be74:	697a      	ldr	r2, [r7, #20]
 800be76:	429a      	cmp	r2, r3
 800be78:	d10a      	bne.n	800be90 <FLASH_WaitForLastOperation+0x68>
 800be7a:	4b36      	ldr	r3, [pc, #216]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800be7c:	691a      	ldr	r2, [r3, #16]
 800be7e:	697b      	ldr	r3, [r7, #20]
 800be80:	4013      	ands	r3, r2
 800be82:	697a      	ldr	r2, [r7, #20]
 800be84:	429a      	cmp	r2, r3
 800be86:	bf0c      	ite	eq
 800be88:	2301      	moveq	r3, #1
 800be8a:	2300      	movne	r3, #0
 800be8c:	b2db      	uxtb	r3, r3
 800be8e:	e00c      	b.n	800beaa <FLASH_WaitForLastOperation+0x82>
 800be90:	4b30      	ldr	r3, [pc, #192]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800be92:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800be96:	43da      	mvns	r2, r3
 800be98:	697b      	ldr	r3, [r7, #20]
 800be9a:	4013      	ands	r3, r2
 800be9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	bf0c      	ite	eq
 800bea4:	2301      	moveq	r3, #1
 800bea6:	2300      	movne	r3, #0
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1ce      	bne.n	800be4c <FLASH_WaitForLastOperation+0x24>
      }
    }
  }

  /* Get Error Flags */
  if (Bank == FLASH_BANK_1)
 800beae:	683b      	ldr	r3, [r7, #0]
 800beb0:	2b01      	cmp	r3, #1
 800beb2:	d105      	bne.n	800bec0 <FLASH_WaitForLastOperation+0x98>
  {
    errorflag = FLASH->SR1 & FLASH_FLAG_ALL_ERRORS_BANK1;
 800beb4:	4b27      	ldr	r3, [pc, #156]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800beb6:	691a      	ldr	r2, [r3, #16]
 800beb8:	4b27      	ldr	r3, [pc, #156]	; (800bf58 <FLASH_WaitForLastOperation+0x130>)
 800beba:	4013      	ands	r3, r2
 800bebc:	613b      	str	r3, [r7, #16]
 800bebe:	e007      	b.n	800bed0 <FLASH_WaitForLastOperation+0xa8>
  }
#if defined (DUAL_BANK)
  else
  {
    errorflag = (FLASH->SR2 & FLASH_FLAG_ALL_ERRORS_BANK2) | 0x80000000U;
 800bec0:	4b24      	ldr	r3, [pc, #144]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800bec2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800bec6:	4b24      	ldr	r3, [pc, #144]	; (800bf58 <FLASH_WaitForLastOperation+0x130>)
 800bec8:	4013      	ands	r3, r2
 800beca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bece:	613b      	str	r3, [r7, #16]
  }
#endif /* DUAL_BANK */

  /* In case of error reported in Flash SR1 or SR2 register */
  if((errorflag & 0x7FFFFFFFU) != 0U)
 800bed0:	693b      	ldr	r3, [r7, #16]
 800bed2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	d017      	beq.n	800bf0a <FLASH_WaitForLastOperation+0xe2>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= errorflag;
 800beda:	4b20      	ldr	r3, [pc, #128]	; (800bf5c <FLASH_WaitForLastOperation+0x134>)
 800bedc:	699a      	ldr	r2, [r3, #24]
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	4313      	orrs	r3, r2
 800bee2:	4a1e      	ldr	r2, [pc, #120]	; (800bf5c <FLASH_WaitForLastOperation+0x134>)
 800bee4:	6193      	str	r3, [r2, #24]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(errorflag);
 800bee6:	693a      	ldr	r2, [r7, #16]
 800bee8:	4b19      	ldr	r3, [pc, #100]	; (800bf50 <FLASH_WaitForLastOperation+0x128>)
 800beea:	4013      	ands	r3, r2
 800beec:	693a      	ldr	r2, [r7, #16]
 800beee:	429a      	cmp	r2, r3
 800bef0:	d103      	bne.n	800befa <FLASH_WaitForLastOperation+0xd2>
 800bef2:	4a18      	ldr	r2, [pc, #96]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	6153      	str	r3, [r2, #20]
 800bef8:	e005      	b.n	800bf06 <FLASH_WaitForLastOperation+0xde>
 800befa:	4a16      	ldr	r2, [pc, #88]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800befc:	693b      	ldr	r3, [r7, #16]
 800befe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bf02:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

    return HAL_ERROR;
 800bf06:	2301      	movs	r3, #1
 800bf08:	e01c      	b.n	800bf44 <FLASH_WaitForLastOperation+0x11c>
  }

  /* Check FLASH End of Operation flag  */
  if(Bank == FLASH_BANK_1)
 800bf0a:	683b      	ldr	r3, [r7, #0]
 800bf0c:	2b01      	cmp	r3, #1
 800bf0e:	d10b      	bne.n	800bf28 <FLASH_WaitForLastOperation+0x100>
  {
    if (__HAL_FLASH_GET_FLAG_BANK1(FLASH_FLAG_EOP_BANK1))
 800bf10:	4b10      	ldr	r3, [pc, #64]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800bf12:	691b      	ldr	r3, [r3, #16]
 800bf14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf1c:	d111      	bne.n	800bf42 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK1(FLASH_FLAG_EOP_BANK1);
 800bf1e:	4b0d      	ldr	r3, [pc, #52]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800bf20:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf24:	615a      	str	r2, [r3, #20]
 800bf26:	e00c      	b.n	800bf42 <FLASH_WaitForLastOperation+0x11a>
    }
  }
#if defined (DUAL_BANK)
  else
  {
    if (__HAL_FLASH_GET_FLAG_BANK2(FLASH_FLAG_EOP_BANK2))
 800bf28:	4b0a      	ldr	r3, [pc, #40]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800bf2a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800bf2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf36:	d104      	bne.n	800bf42 <FLASH_WaitForLastOperation+0x11a>
    {
      /* Clear FLASH End of Operation pending bit */
      __HAL_FLASH_CLEAR_FLAG_BANK2(FLASH_FLAG_EOP_BANK2);
 800bf38:	4b06      	ldr	r3, [pc, #24]	; (800bf54 <FLASH_WaitForLastOperation+0x12c>)
 800bf3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf3e:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
    }
  }
#endif /* DUAL_BANK */

  return HAL_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3718      	adds	r7, #24
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	bd80      	pop	{r7, pc}
 800bf4c:	80000004 	.word	0x80000004
 800bf50:	1fef000f 	.word	0x1fef000f
 800bf54:	52002000 	.word	0x52002000
 800bf58:	17ee0000 	.word	0x17ee0000
 800bf5c:	240023f8 	.word	0x240023f8

0800bf60 <HAL_FLASHEx_Erase>:
  *          the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	b084      	sub	sp, #16
 800bf64:	af00      	add	r7, sp, #0
 800bf66:	6078      	str	r0, [r7, #4]
 800bf68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bf6a:	2300      	movs	r3, #0
 800bf6c:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
  assert_param(IS_FLASH_BANK(pEraseInit->Banks));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800bf6e:	4b5e      	ldr	r3, [pc, #376]	; (800c0e8 <HAL_FLASHEx_Erase+0x188>)
 800bf70:	7d1b      	ldrb	r3, [r3, #20]
 800bf72:	2b01      	cmp	r3, #1
 800bf74:	d101      	bne.n	800bf7a <HAL_FLASHEx_Erase+0x1a>
 800bf76:	2302      	movs	r3, #2
 800bf78:	e0b2      	b.n	800c0e0 <HAL_FLASHEx_Erase+0x180>
 800bf7a:	4b5b      	ldr	r3, [pc, #364]	; (800c0e8 <HAL_FLASHEx_Erase+0x188>)
 800bf7c:	2201      	movs	r2, #1
 800bf7e:	751a      	strb	r2, [r3, #20]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800bf80:	4b59      	ldr	r3, [pc, #356]	; (800c0e8 <HAL_FLASHEx_Erase+0x188>)
 800bf82:	2200      	movs	r2, #0
 800bf84:	619a      	str	r2, [r3, #24]

  /* Wait for last operation to be completed on Bank1 */
  if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f003 0301 	and.w	r3, r3, #1
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d009      	beq.n	800bfa6 <HAL_FLASHEx_Erase+0x46>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800bf92:	2101      	movs	r1, #1
 800bf94:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bf98:	f7ff ff46 	bl	800be28 <FLASH_WaitForLastOperation>
 800bf9c:	4603      	mov	r3, r0
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d001      	beq.n	800bfa6 <HAL_FLASHEx_Erase+0x46>
    {
      status = HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	73fb      	strb	r3, [r7, #15]
    }
  }

#if defined (DUAL_BANK)
  /* Wait for last operation to be completed on Bank2 */
  if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	685b      	ldr	r3, [r3, #4]
 800bfaa:	f003 0302 	and.w	r3, r3, #2
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d009      	beq.n	800bfc6 <HAL_FLASHEx_Erase+0x66>
  {
    if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800bfb2:	2102      	movs	r1, #2
 800bfb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bfb8:	f7ff ff36 	bl	800be28 <FLASH_WaitForLastOperation>
 800bfbc:	4603      	mov	r3, r0
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d001      	beq.n	800bfc6 <HAL_FLASHEx_Erase+0x66>
    {
      status = HAL_ERROR;
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* DUAL_BANK */

  if(status == HAL_OK)
 800bfc6:	7bfb      	ldrb	r3, [r7, #15]
 800bfc8:	2b00      	cmp	r3, #0
 800bfca:	f040 8085 	bne.w	800c0d8 <HAL_FLASHEx_Erase+0x178>
  {
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d136      	bne.n	800c044 <HAL_FLASHEx_Erase+0xe4>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->VoltageRange, pEraseInit->Banks);
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	691a      	ldr	r2, [r3, #16]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	685b      	ldr	r3, [r3, #4]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	4610      	mov	r0, r2
 800bfe2:	f000 f8b7 	bl	800c154 <FLASH_MassErase>

      /* Wait for last operation to be completed on Bank 1 */
      if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	f003 0301 	and.w	r3, r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d00f      	beq.n	800c012 <HAL_FLASHEx_Erase+0xb2>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1) != HAL_OK)
 800bff2:	2101      	movs	r1, #1
 800bff4:	f24c 3050 	movw	r0, #50000	; 0xc350
 800bff8:	f7ff ff16 	bl	800be28 <FLASH_WaitForLastOperation>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d001      	beq.n	800c006 <HAL_FLASHEx_Erase+0xa6>
        {
          status = HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank1 BER Bit */
        FLASH->CR1 &= (~FLASH_CR_BER);
 800c006:	4b39      	ldr	r3, [pc, #228]	; (800c0ec <HAL_FLASHEx_Erase+0x18c>)
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	4a38      	ldr	r2, [pc, #224]	; (800c0ec <HAL_FLASHEx_Erase+0x18c>)
 800c00c:	f023 0308 	bic.w	r3, r3, #8
 800c010:	60d3      	str	r3, [r2, #12]
      }
#if defined (DUAL_BANK)
      /* Wait for last operation to be completed on Bank 2 */
      if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	685b      	ldr	r3, [r3, #4]
 800c016:	f003 0302 	and.w	r3, r3, #2
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d05c      	beq.n	800c0d8 <HAL_FLASHEx_Erase+0x178>
      {
        if(FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2) != HAL_OK)
 800c01e:	2102      	movs	r1, #2
 800c020:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c024:	f7ff ff00 	bl	800be28 <FLASH_WaitForLastOperation>
 800c028:	4603      	mov	r3, r0
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d001      	beq.n	800c032 <HAL_FLASHEx_Erase+0xd2>
        {
          status = HAL_ERROR;
 800c02e:	2301      	movs	r3, #1
 800c030:	73fb      	strb	r3, [r7, #15]
        }
        /* if the erase operation is completed, disable the Bank2 BER Bit */
        FLASH->CR2 &= (~FLASH_CR_BER);
 800c032:	4b2e      	ldr	r3, [pc, #184]	; (800c0ec <HAL_FLASHEx_Erase+0x18c>)
 800c034:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c038:	4a2c      	ldr	r2, [pc, #176]	; (800c0ec <HAL_FLASHEx_Erase+0x18c>)
 800c03a:	f023 0308 	bic.w	r3, r3, #8
 800c03e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
 800c042:	e049      	b.n	800c0d8 <HAL_FLASHEx_Erase+0x178>
#endif /* DUAL_BANK */
    }
    else
    {
      /*Initialization of SectorError variable*/
      *SectorError = 0xFFFFFFFFU;
 800c044:	683b      	ldr	r3, [r7, #0]
 800c046:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c04a:	601a      	str	r2, [r3, #0]

      /* Erase by sector by sector to be done*/
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	689b      	ldr	r3, [r3, #8]
 800c050:	60bb      	str	r3, [r7, #8]
 800c052:	e039      	b.n	800c0c8 <HAL_FLASHEx_Erase+0x168>
      {
        FLASH_Erase_Sector(sector_index, pEraseInit->Banks, pEraseInit->VoltageRange);
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6859      	ldr	r1, [r3, #4]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	691b      	ldr	r3, [r3, #16]
 800c05c:	461a      	mov	r2, r3
 800c05e:	68b8      	ldr	r0, [r7, #8]
 800c060:	f000 f8e2 	bl	800c228 <FLASH_Erase_Sector>

        if((pEraseInit->Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	685b      	ldr	r3, [r3, #4]
 800c068:	f003 0301 	and.w	r3, r3, #1
 800c06c:	2b00      	cmp	r3, #0
 800c06e:	d00c      	beq.n	800c08a <HAL_FLASHEx_Erase+0x12a>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_1);
 800c070:	2101      	movs	r1, #1
 800c072:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c076:	f7ff fed7 	bl	800be28 <FLASH_WaitForLastOperation>
 800c07a:	4603      	mov	r3, r0
 800c07c:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR1 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800c07e:	4b1b      	ldr	r3, [pc, #108]	; (800c0ec <HAL_FLASHEx_Erase+0x18c>)
 800c080:	68da      	ldr	r2, [r3, #12]
 800c082:	491a      	ldr	r1, [pc, #104]	; (800c0ec <HAL_FLASHEx_Erase+0x18c>)
 800c084:	4b1a      	ldr	r3, [pc, #104]	; (800c0f0 <HAL_FLASHEx_Erase+0x190>)
 800c086:	4013      	ands	r3, r2
 800c088:	60cb      	str	r3, [r1, #12]
        }
#if defined (DUAL_BANK)
        if((pEraseInit->Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	685b      	ldr	r3, [r3, #4]
 800c08e:	f003 0302 	and.w	r3, r3, #2
 800c092:	2b00      	cmp	r3, #0
 800c094:	d00e      	beq.n	800c0b4 <HAL_FLASHEx_Erase+0x154>
        {
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE, FLASH_BANK_2);
 800c096:	2102      	movs	r1, #2
 800c098:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c09c:	f7ff fec4 	bl	800be28 <FLASH_WaitForLastOperation>
 800c0a0:	4603      	mov	r3, r0
 800c0a2:	73fb      	strb	r3, [r7, #15]

          /* If the erase operation is completed, disable the SER Bit */
          FLASH->CR2 &= (~(FLASH_CR_SER | FLASH_CR_SNB));
 800c0a4:	4b11      	ldr	r3, [pc, #68]	; (800c0ec <HAL_FLASHEx_Erase+0x18c>)
 800c0a6:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c0aa:	4910      	ldr	r1, [pc, #64]	; (800c0ec <HAL_FLASHEx_Erase+0x18c>)
 800c0ac:	4b10      	ldr	r3, [pc, #64]	; (800c0f0 <HAL_FLASHEx_Erase+0x190>)
 800c0ae:	4013      	ands	r3, r2
 800c0b0:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
        }
#endif /* DUAL_BANK */

        if(status != HAL_OK)
 800c0b4:	7bfb      	ldrb	r3, [r7, #15]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d003      	beq.n	800c0c2 <HAL_FLASHEx_Erase+0x162>
        {
          /* In case of error, stop erase procedure and return the faulty sector */
          *SectorError = sector_index;
 800c0ba:	683b      	ldr	r3, [r7, #0]
 800c0bc:	68ba      	ldr	r2, [r7, #8]
 800c0be:	601a      	str	r2, [r3, #0]
          break;
 800c0c0:	e00a      	b.n	800c0d8 <HAL_FLASHEx_Erase+0x178>
      for(sector_index = pEraseInit->Sector; sector_index < (pEraseInit->NbSectors + pEraseInit->Sector); sector_index++)
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	3301      	adds	r3, #1
 800c0c6:	60bb      	str	r3, [r7, #8]
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	68da      	ldr	r2, [r3, #12]
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	689b      	ldr	r3, [r3, #8]
 800c0d0:	4413      	add	r3, r2
 800c0d2:	68ba      	ldr	r2, [r7, #8]
 800c0d4:	429a      	cmp	r2, r3
 800c0d6:	d3bd      	bcc.n	800c054 <HAL_FLASHEx_Erase+0xf4>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800c0d8:	4b03      	ldr	r3, [pc, #12]	; (800c0e8 <HAL_FLASHEx_Erase+0x188>)
 800c0da:	2200      	movs	r2, #0
 800c0dc:	751a      	strb	r2, [r3, #20]

  return status;
 800c0de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c0e0:	4618      	mov	r0, r3
 800c0e2:	3710      	adds	r7, #16
 800c0e4:	46bd      	mov	sp, r7
 800c0e6:	bd80      	pop	{r7, pc}
 800c0e8:	240023f8 	.word	0x240023f8
 800c0ec:	52002000 	.word	0x52002000
 800c0f0:	fffff8fb 	.word	0xfffff8fb

0800c0f4 <HAL_FLASHEx_EnableEccCorrectionInterrupt>:
  * @brief  Enable ECC correction interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccCorrectionInterrupt(void)
{
 800c0f4:	b480      	push	{r7}
 800c0f6:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK1);
 800c0f8:	4b09      	ldr	r3, [pc, #36]	; (800c120 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	4a08      	ldr	r2, [pc, #32]	; (800c120 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c0fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c102:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_SNECCERR_BANK2);
 800c104:	4b06      	ldr	r3, [pc, #24]	; (800c120 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c106:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c10a:	4a05      	ldr	r2, [pc, #20]	; (800c120 <HAL_FLASHEx_EnableEccCorrectionInterrupt+0x2c>)
 800c10c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800c110:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 800c114:	bf00      	nop
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	52002000 	.word	0x52002000

0800c124 <HAL_FLASHEx_EnableEccDetectionInterrupt>:
  * @brief  Enable ECC Detection interrupts on FLASH BANK1 and BANK2.
  * @param  None
  * @retval None
  */
void HAL_FLASHEx_EnableEccDetectionInterrupt(void)
{
 800c124:	b480      	push	{r7}
 800c126:	af00      	add	r7, sp, #0
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK1);
 800c128:	4b09      	ldr	r3, [pc, #36]	; (800c150 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	4a08      	ldr	r2, [pc, #32]	; (800c150 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c12e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c132:	60d3      	str	r3, [r2, #12]

#if defined (DUAL_BANK)
  __HAL_FLASH_ENABLE_IT(FLASH_IT_DBECCERR_BANK2);
 800c134:	4b06      	ldr	r3, [pc, #24]	; (800c150 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c136:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c13a:	4a05      	ldr	r2, [pc, #20]	; (800c150 <HAL_FLASHEx_EnableEccDetectionInterrupt+0x2c>)
 800c13c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c140:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
#endif /* DUAL_BANK */
}
 800c144:	bf00      	nop
 800c146:	46bd      	mov	sp, r7
 800c148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c14c:	4770      	bx	lr
 800c14e:	bf00      	nop
 800c150:	52002000 	.word	0x52002000

0800c154 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint32_t VoltageRange, uint32_t Banks)
{
 800c154:	b480      	push	{r7}
 800c156:	b083      	sub	sp, #12
 800c158:	af00      	add	r7, sp, #0
 800c15a:	6078      	str	r0, [r7, #4]
 800c15c:	6039      	str	r1, [r7, #0]
#endif /* FLASH_CR_PSIZE */
  assert_param(IS_FLASH_BANK(Banks));

#if defined (DUAL_BANK)
  /* Flash Mass Erase */
  if((Banks & FLASH_BANK_BOTH) == FLASH_BANK_BOTH)
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	f003 0303 	and.w	r3, r3, #3
 800c164:	2b03      	cmp	r3, #3
 800c166:	d122      	bne.n	800c1ae <FLASH_MassErase+0x5a>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange for Bank1 and Bank2 */
    FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800c168:	4b2e      	ldr	r3, [pc, #184]	; (800c224 <FLASH_MassErase+0xd0>)
 800c16a:	68db      	ldr	r3, [r3, #12]
 800c16c:	4a2d      	ldr	r2, [pc, #180]	; (800c224 <FLASH_MassErase+0xd0>)
 800c16e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c172:	60d3      	str	r3, [r2, #12]
    FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800c174:	4b2b      	ldr	r3, [pc, #172]	; (800c224 <FLASH_MassErase+0xd0>)
 800c176:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c17a:	4a2a      	ldr	r2, [pc, #168]	; (800c224 <FLASH_MassErase+0xd0>)
 800c17c:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c180:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    /* Set voltage range */
    FLASH->CR1 |= VoltageRange;
 800c184:	4b27      	ldr	r3, [pc, #156]	; (800c224 <FLASH_MassErase+0xd0>)
 800c186:	68da      	ldr	r2, [r3, #12]
 800c188:	4926      	ldr	r1, [pc, #152]	; (800c224 <FLASH_MassErase+0xd0>)
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	4313      	orrs	r3, r2
 800c18e:	60cb      	str	r3, [r1, #12]
    FLASH->CR2 |= VoltageRange;
 800c190:	4b24      	ldr	r3, [pc, #144]	; (800c224 <FLASH_MassErase+0xd0>)
 800c192:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c196:	4923      	ldr	r1, [pc, #140]	; (800c224 <FLASH_MassErase+0xd0>)
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	4313      	orrs	r3, r2
 800c19c:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
#endif /* FLASH_CR_PSIZE */

    /* Set Mass Erase Bit */
    FLASH->OPTCR |= FLASH_OPTCR_MER;
 800c1a0:	4b20      	ldr	r3, [pc, #128]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1a2:	699b      	ldr	r3, [r3, #24]
 800c1a4:	4a1f      	ldr	r2, [pc, #124]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1a6:	f043 0310 	orr.w	r3, r3, #16
 800c1aa:	6193      	str	r3, [r2, #24]
      /* Erase Bank2 */
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
    }
#endif /* DUAL_BANK */
  }
}
 800c1ac:	e033      	b.n	800c216 <FLASH_MassErase+0xc2>
    if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	f003 0301 	and.w	r3, r3, #1
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d011      	beq.n	800c1dc <FLASH_MassErase+0x88>
      FLASH->CR1 &= (~FLASH_CR_PSIZE);
 800c1b8:	4b1a      	ldr	r3, [pc, #104]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	4a19      	ldr	r2, [pc, #100]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1be:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c1c2:	60d3      	str	r3, [r2, #12]
      FLASH->CR1 |=  VoltageRange;
 800c1c4:	4b17      	ldr	r3, [pc, #92]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1c6:	68da      	ldr	r2, [r3, #12]
 800c1c8:	4916      	ldr	r1, [pc, #88]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	60cb      	str	r3, [r1, #12]
      FLASH->CR1 |= (FLASH_CR_BER | FLASH_CR_START);
 800c1d0:	4b14      	ldr	r3, [pc, #80]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1d2:	68db      	ldr	r3, [r3, #12]
 800c1d4:	4a13      	ldr	r2, [pc, #76]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1d6:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800c1da:	60d3      	str	r3, [r2, #12]
    if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c1dc:	683b      	ldr	r3, [r7, #0]
 800c1de:	f003 0302 	and.w	r3, r3, #2
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d017      	beq.n	800c216 <FLASH_MassErase+0xc2>
      FLASH->CR2 &= (~FLASH_CR_PSIZE);
 800c1e6:	4b0f      	ldr	r3, [pc, #60]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1e8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c1ec:	4a0d      	ldr	r2, [pc, #52]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1ee:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800c1f2:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
      FLASH->CR2 |= VoltageRange;
 800c1f6:	4b0b      	ldr	r3, [pc, #44]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1f8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c1fc:	4909      	ldr	r1, [pc, #36]	; (800c224 <FLASH_MassErase+0xd0>)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	4313      	orrs	r3, r2
 800c202:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
      FLASH->CR2 |= (FLASH_CR_BER | FLASH_CR_START);
 800c206:	4b07      	ldr	r3, [pc, #28]	; (800c224 <FLASH_MassErase+0xd0>)
 800c208:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c20c:	4a05      	ldr	r2, [pc, #20]	; (800c224 <FLASH_MassErase+0xd0>)
 800c20e:	f043 0388 	orr.w	r3, r3, #136	; 0x88
 800c212:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
}
 800c216:	bf00      	nop
 800c218:	370c      	adds	r7, #12
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	52002000 	.word	0x52002000

0800c228 <FLASH_Erase_Sector>:
  *            @arg FLASH_VOLTAGE_RANGE_4 : Flash program/erase by 64 bits
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint32_t Banks, uint32_t VoltageRange)
{
 800c228:	b480      	push	{r7}
 800c22a:	b085      	sub	sp, #20
 800c22c:	af00      	add	r7, sp, #0
 800c22e:	60f8      	str	r0, [r7, #12]
 800c230:	60b9      	str	r1, [r7, #8]
 800c232:	607a      	str	r2, [r7, #4]
  assert_param(IS_VOLTAGERANGE(VoltageRange));
#else
  UNUSED(VoltageRange);
#endif /* FLASH_CR_PSIZE */

  if((Banks & FLASH_BANK_1) == FLASH_BANK_1)
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	f003 0301 	and.w	r3, r3, #1
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d010      	beq.n	800c260 <FLASH_Erase_Sector+0x38>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank1 */
    FLASH->CR1 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800c23e:	4b18      	ldr	r3, [pc, #96]	; (800c2a0 <FLASH_Erase_Sector+0x78>)
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	4a17      	ldr	r2, [pc, #92]	; (800c2a0 <FLASH_Erase_Sector+0x78>)
 800c244:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800c248:	60d3      	str	r3, [r2, #12]

    FLASH->CR1 |= (FLASH_CR_SER | VoltageRange | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800c24a:	4b15      	ldr	r3, [pc, #84]	; (800c2a0 <FLASH_Erase_Sector+0x78>)
 800c24c:	68da      	ldr	r2, [r3, #12]
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	0219      	lsls	r1, r3, #8
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	430b      	orrs	r3, r1
 800c256:	4313      	orrs	r3, r2
 800c258:	4a11      	ldr	r2, [pc, #68]	; (800c2a0 <FLASH_Erase_Sector+0x78>)
 800c25a:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800c25e:	60d3      	str	r3, [r2, #12]
    FLASH->CR1 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }

#if defined (DUAL_BANK)
  if((Banks & FLASH_BANK_2) == FLASH_BANK_2)
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	f003 0302 	and.w	r3, r3, #2
 800c266:	2b00      	cmp	r3, #0
 800c268:	d014      	beq.n	800c294 <FLASH_Erase_Sector+0x6c>
  {
#if defined (FLASH_CR_PSIZE)
    /* Reset Program/erase VoltageRange and Sector Number for Bank2 */
    FLASH->CR2 &= ~(FLASH_CR_PSIZE | FLASH_CR_SNB);
 800c26a:	4b0d      	ldr	r3, [pc, #52]	; (800c2a0 <FLASH_Erase_Sector+0x78>)
 800c26c:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 800c270:	4a0b      	ldr	r2, [pc, #44]	; (800c2a0 <FLASH_Erase_Sector+0x78>)
 800c272:	f423 63e6 	bic.w	r3, r3, #1840	; 0x730
 800c276:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | VoltageRange  | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
 800c27a:	4b09      	ldr	r3, [pc, #36]	; (800c2a0 <FLASH_Erase_Sector+0x78>)
 800c27c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	0219      	lsls	r1, r3, #8
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	430b      	orrs	r3, r1
 800c288:	4313      	orrs	r3, r2
 800c28a:	4a05      	ldr	r2, [pc, #20]	; (800c2a0 <FLASH_Erase_Sector+0x78>)
 800c28c:	f043 0384 	orr.w	r3, r3, #132	; 0x84
 800c290:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c

    FLASH->CR2 |= (FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos) | FLASH_CR_START);
#endif /* FLASH_CR_PSIZE */
  }
#endif /* DUAL_BANK */
}
 800c294:	bf00      	nop
 800c296:	3714      	adds	r7, #20
 800c298:	46bd      	mov	sp, r7
 800c29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29e:	4770      	bx	lr
 800c2a0:	52002000 	.word	0x52002000

0800c2a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800c2a4:	b480      	push	{r7}
 800c2a6:	b089      	sub	sp, #36	; 0x24
 800c2a8:	af00      	add	r7, sp, #0
 800c2aa:	6078      	str	r0, [r7, #4]
 800c2ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800c2b2:	4b89      	ldr	r3, [pc, #548]	; (800c4d8 <HAL_GPIO_Init+0x234>)
 800c2b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c2b6:	e194      	b.n	800c5e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800c2b8:	683b      	ldr	r3, [r7, #0]
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	2101      	movs	r1, #1
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	fa01 f303 	lsl.w	r3, r1, r3
 800c2c4:	4013      	ands	r3, r2
 800c2c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	f000 8186 	beq.w	800c5dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	685b      	ldr	r3, [r3, #4]
 800c2d4:	f003 0303 	and.w	r3, r3, #3
 800c2d8:	2b01      	cmp	r3, #1
 800c2da:	d005      	beq.n	800c2e8 <HAL_GPIO_Init+0x44>
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	685b      	ldr	r3, [r3, #4]
 800c2e0:	f003 0303 	and.w	r3, r3, #3
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d130      	bne.n	800c34a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	689b      	ldr	r3, [r3, #8]
 800c2ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800c2ee:	69fb      	ldr	r3, [r7, #28]
 800c2f0:	005b      	lsls	r3, r3, #1
 800c2f2:	2203      	movs	r2, #3
 800c2f4:	fa02 f303 	lsl.w	r3, r2, r3
 800c2f8:	43db      	mvns	r3, r3
 800c2fa:	69ba      	ldr	r2, [r7, #24]
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800c300:	683b      	ldr	r3, [r7, #0]
 800c302:	68da      	ldr	r2, [r3, #12]
 800c304:	69fb      	ldr	r3, [r7, #28]
 800c306:	005b      	lsls	r3, r3, #1
 800c308:	fa02 f303 	lsl.w	r3, r2, r3
 800c30c:	69ba      	ldr	r2, [r7, #24]
 800c30e:	4313      	orrs	r3, r2
 800c310:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	69ba      	ldr	r2, [r7, #24]
 800c316:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	685b      	ldr	r3, [r3, #4]
 800c31c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800c31e:	2201      	movs	r2, #1
 800c320:	69fb      	ldr	r3, [r7, #28]
 800c322:	fa02 f303 	lsl.w	r3, r2, r3
 800c326:	43db      	mvns	r3, r3
 800c328:	69ba      	ldr	r2, [r7, #24]
 800c32a:	4013      	ands	r3, r2
 800c32c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800c32e:	683b      	ldr	r3, [r7, #0]
 800c330:	685b      	ldr	r3, [r3, #4]
 800c332:	091b      	lsrs	r3, r3, #4
 800c334:	f003 0201 	and.w	r2, r3, #1
 800c338:	69fb      	ldr	r3, [r7, #28]
 800c33a:	fa02 f303 	lsl.w	r3, r2, r3
 800c33e:	69ba      	ldr	r2, [r7, #24]
 800c340:	4313      	orrs	r3, r2
 800c342:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	69ba      	ldr	r2, [r7, #24]
 800c348:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800c34a:	683b      	ldr	r3, [r7, #0]
 800c34c:	685b      	ldr	r3, [r3, #4]
 800c34e:	f003 0303 	and.w	r3, r3, #3
 800c352:	2b03      	cmp	r3, #3
 800c354:	d017      	beq.n	800c386 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	68db      	ldr	r3, [r3, #12]
 800c35a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	005b      	lsls	r3, r3, #1
 800c360:	2203      	movs	r2, #3
 800c362:	fa02 f303 	lsl.w	r3, r2, r3
 800c366:	43db      	mvns	r3, r3
 800c368:	69ba      	ldr	r2, [r7, #24]
 800c36a:	4013      	ands	r3, r2
 800c36c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c36e:	683b      	ldr	r3, [r7, #0]
 800c370:	689a      	ldr	r2, [r3, #8]
 800c372:	69fb      	ldr	r3, [r7, #28]
 800c374:	005b      	lsls	r3, r3, #1
 800c376:	fa02 f303 	lsl.w	r3, r2, r3
 800c37a:	69ba      	ldr	r2, [r7, #24]
 800c37c:	4313      	orrs	r3, r2
 800c37e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	69ba      	ldr	r2, [r7, #24]
 800c384:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	f003 0303 	and.w	r3, r3, #3
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d123      	bne.n	800c3da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c392:	69fb      	ldr	r3, [r7, #28]
 800c394:	08da      	lsrs	r2, r3, #3
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	3208      	adds	r2, #8
 800c39a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c3a0:	69fb      	ldr	r3, [r7, #28]
 800c3a2:	f003 0307 	and.w	r3, r3, #7
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	220f      	movs	r2, #15
 800c3aa:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ae:	43db      	mvns	r3, r3
 800c3b0:	69ba      	ldr	r2, [r7, #24]
 800c3b2:	4013      	ands	r3, r2
 800c3b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c3b6:	683b      	ldr	r3, [r7, #0]
 800c3b8:	691a      	ldr	r2, [r3, #16]
 800c3ba:	69fb      	ldr	r3, [r7, #28]
 800c3bc:	f003 0307 	and.w	r3, r3, #7
 800c3c0:	009b      	lsls	r3, r3, #2
 800c3c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c3c6:	69ba      	ldr	r2, [r7, #24]
 800c3c8:	4313      	orrs	r3, r2
 800c3ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800c3cc:	69fb      	ldr	r3, [r7, #28]
 800c3ce:	08da      	lsrs	r2, r3, #3
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	3208      	adds	r2, #8
 800c3d4:	69b9      	ldr	r1, [r7, #24]
 800c3d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c3e0:	69fb      	ldr	r3, [r7, #28]
 800c3e2:	005b      	lsls	r3, r3, #1
 800c3e4:	2203      	movs	r2, #3
 800c3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ea:	43db      	mvns	r3, r3
 800c3ec:	69ba      	ldr	r2, [r7, #24]
 800c3ee:	4013      	ands	r3, r2
 800c3f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c3f2:	683b      	ldr	r3, [r7, #0]
 800c3f4:	685b      	ldr	r3, [r3, #4]
 800c3f6:	f003 0203 	and.w	r2, r3, #3
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	005b      	lsls	r3, r3, #1
 800c3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	4313      	orrs	r3, r2
 800c406:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	69ba      	ldr	r2, [r7, #24]
 800c40c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800c40e:	683b      	ldr	r3, [r7, #0]
 800c410:	685b      	ldr	r3, [r3, #4]
 800c412:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 80e0 	beq.w	800c5dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c41c:	4b2f      	ldr	r3, [pc, #188]	; (800c4dc <HAL_GPIO_Init+0x238>)
 800c41e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c422:	4a2e      	ldr	r2, [pc, #184]	; (800c4dc <HAL_GPIO_Init+0x238>)
 800c424:	f043 0302 	orr.w	r3, r3, #2
 800c428:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800c42c:	4b2b      	ldr	r3, [pc, #172]	; (800c4dc <HAL_GPIO_Init+0x238>)
 800c42e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800c432:	f003 0302 	and.w	r3, r3, #2
 800c436:	60fb      	str	r3, [r7, #12]
 800c438:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c43a:	4a29      	ldr	r2, [pc, #164]	; (800c4e0 <HAL_GPIO_Init+0x23c>)
 800c43c:	69fb      	ldr	r3, [r7, #28]
 800c43e:	089b      	lsrs	r3, r3, #2
 800c440:	3302      	adds	r3, #2
 800c442:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c446:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c448:	69fb      	ldr	r3, [r7, #28]
 800c44a:	f003 0303 	and.w	r3, r3, #3
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	220f      	movs	r2, #15
 800c452:	fa02 f303 	lsl.w	r3, r2, r3
 800c456:	43db      	mvns	r3, r3
 800c458:	69ba      	ldr	r2, [r7, #24]
 800c45a:	4013      	ands	r3, r2
 800c45c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	4a20      	ldr	r2, [pc, #128]	; (800c4e4 <HAL_GPIO_Init+0x240>)
 800c462:	4293      	cmp	r3, r2
 800c464:	d052      	beq.n	800c50c <HAL_GPIO_Init+0x268>
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	4a1f      	ldr	r2, [pc, #124]	; (800c4e8 <HAL_GPIO_Init+0x244>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d031      	beq.n	800c4d2 <HAL_GPIO_Init+0x22e>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	4a1e      	ldr	r2, [pc, #120]	; (800c4ec <HAL_GPIO_Init+0x248>)
 800c472:	4293      	cmp	r3, r2
 800c474:	d02b      	beq.n	800c4ce <HAL_GPIO_Init+0x22a>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	4a1d      	ldr	r2, [pc, #116]	; (800c4f0 <HAL_GPIO_Init+0x24c>)
 800c47a:	4293      	cmp	r3, r2
 800c47c:	d025      	beq.n	800c4ca <HAL_GPIO_Init+0x226>
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	4a1c      	ldr	r2, [pc, #112]	; (800c4f4 <HAL_GPIO_Init+0x250>)
 800c482:	4293      	cmp	r3, r2
 800c484:	d01f      	beq.n	800c4c6 <HAL_GPIO_Init+0x222>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	4a1b      	ldr	r2, [pc, #108]	; (800c4f8 <HAL_GPIO_Init+0x254>)
 800c48a:	4293      	cmp	r3, r2
 800c48c:	d019      	beq.n	800c4c2 <HAL_GPIO_Init+0x21e>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	4a1a      	ldr	r2, [pc, #104]	; (800c4fc <HAL_GPIO_Init+0x258>)
 800c492:	4293      	cmp	r3, r2
 800c494:	d013      	beq.n	800c4be <HAL_GPIO_Init+0x21a>
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	4a19      	ldr	r2, [pc, #100]	; (800c500 <HAL_GPIO_Init+0x25c>)
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d00d      	beq.n	800c4ba <HAL_GPIO_Init+0x216>
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4a18      	ldr	r2, [pc, #96]	; (800c504 <HAL_GPIO_Init+0x260>)
 800c4a2:	4293      	cmp	r3, r2
 800c4a4:	d007      	beq.n	800c4b6 <HAL_GPIO_Init+0x212>
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	4a17      	ldr	r2, [pc, #92]	; (800c508 <HAL_GPIO_Init+0x264>)
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	d101      	bne.n	800c4b2 <HAL_GPIO_Init+0x20e>
 800c4ae:	2309      	movs	r3, #9
 800c4b0:	e02d      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4b2:	230a      	movs	r3, #10
 800c4b4:	e02b      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4b6:	2308      	movs	r3, #8
 800c4b8:	e029      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4ba:	2307      	movs	r3, #7
 800c4bc:	e027      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4be:	2306      	movs	r3, #6
 800c4c0:	e025      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4c2:	2305      	movs	r3, #5
 800c4c4:	e023      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4c6:	2304      	movs	r3, #4
 800c4c8:	e021      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4ca:	2303      	movs	r3, #3
 800c4cc:	e01f      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4ce:	2302      	movs	r3, #2
 800c4d0:	e01d      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	e01b      	b.n	800c50e <HAL_GPIO_Init+0x26a>
 800c4d6:	bf00      	nop
 800c4d8:	58000080 	.word	0x58000080
 800c4dc:	58024400 	.word	0x58024400
 800c4e0:	58000400 	.word	0x58000400
 800c4e4:	58020000 	.word	0x58020000
 800c4e8:	58020400 	.word	0x58020400
 800c4ec:	58020800 	.word	0x58020800
 800c4f0:	58020c00 	.word	0x58020c00
 800c4f4:	58021000 	.word	0x58021000
 800c4f8:	58021400 	.word	0x58021400
 800c4fc:	58021800 	.word	0x58021800
 800c500:	58021c00 	.word	0x58021c00
 800c504:	58022000 	.word	0x58022000
 800c508:	58022400 	.word	0x58022400
 800c50c:	2300      	movs	r3, #0
 800c50e:	69fa      	ldr	r2, [r7, #28]
 800c510:	f002 0203 	and.w	r2, r2, #3
 800c514:	0092      	lsls	r2, r2, #2
 800c516:	4093      	lsls	r3, r2
 800c518:	69ba      	ldr	r2, [r7, #24]
 800c51a:	4313      	orrs	r3, r2
 800c51c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c51e:	4938      	ldr	r1, [pc, #224]	; (800c600 <HAL_GPIO_Init+0x35c>)
 800c520:	69fb      	ldr	r3, [r7, #28]
 800c522:	089b      	lsrs	r3, r3, #2
 800c524:	3302      	adds	r3, #2
 800c526:	69ba      	ldr	r2, [r7, #24]
 800c528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c52c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	43db      	mvns	r3, r3
 800c538:	69ba      	ldr	r2, [r7, #24]
 800c53a:	4013      	ands	r3, r2
 800c53c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	685b      	ldr	r3, [r3, #4]
 800c542:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c546:	2b00      	cmp	r3, #0
 800c548:	d003      	beq.n	800c552 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	4313      	orrs	r3, r2
 800c550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800c552:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800c55a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800c55e:	685b      	ldr	r3, [r3, #4]
 800c560:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	43db      	mvns	r3, r3
 800c566:	69ba      	ldr	r2, [r7, #24]
 800c568:	4013      	ands	r3, r2
 800c56a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c574:	2b00      	cmp	r3, #0
 800c576:	d003      	beq.n	800c580 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800c578:	69ba      	ldr	r2, [r7, #24]
 800c57a:	693b      	ldr	r3, [r7, #16]
 800c57c:	4313      	orrs	r3, r2
 800c57e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800c580:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800c584:	69bb      	ldr	r3, [r7, #24]
 800c586:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	685b      	ldr	r3, [r3, #4]
 800c58c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c58e:	693b      	ldr	r3, [r7, #16]
 800c590:	43db      	mvns	r3, r3
 800c592:	69ba      	ldr	r2, [r7, #24]
 800c594:	4013      	ands	r3, r2
 800c596:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800c598:	683b      	ldr	r3, [r7, #0]
 800c59a:	685b      	ldr	r3, [r3, #4]
 800c59c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d003      	beq.n	800c5ac <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800c5a4:	69ba      	ldr	r2, [r7, #24]
 800c5a6:	693b      	ldr	r3, [r7, #16]
 800c5a8:	4313      	orrs	r3, r2
 800c5aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800c5ac:	697b      	ldr	r3, [r7, #20]
 800c5ae:	69ba      	ldr	r2, [r7, #24]
 800c5b0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800c5b2:	697b      	ldr	r3, [r7, #20]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	43db      	mvns	r3, r3
 800c5bc:	69ba      	ldr	r2, [r7, #24]
 800c5be:	4013      	ands	r3, r2
 800c5c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	685b      	ldr	r3, [r3, #4]
 800c5c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d003      	beq.n	800c5d6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800c5ce:	69ba      	ldr	r2, [r7, #24]
 800c5d0:	693b      	ldr	r3, [r7, #16]
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	69ba      	ldr	r2, [r7, #24]
 800c5da:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800c5dc:	69fb      	ldr	r3, [r7, #28]
 800c5de:	3301      	adds	r3, #1
 800c5e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	681a      	ldr	r2, [r3, #0]
 800c5e6:	69fb      	ldr	r3, [r7, #28]
 800c5e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	f47f ae63 	bne.w	800c2b8 <HAL_GPIO_Init+0x14>
  }
}
 800c5f2:	bf00      	nop
 800c5f4:	bf00      	nop
 800c5f6:	3724      	adds	r7, #36	; 0x24
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	58000400 	.word	0x58000400

0800c604 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800c604:	b480      	push	{r7}
 800c606:	b085      	sub	sp, #20
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]
 800c60c:	460b      	mov	r3, r1
 800c60e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	691a      	ldr	r2, [r3, #16]
 800c614:	887b      	ldrh	r3, [r7, #2]
 800c616:	4013      	ands	r3, r2
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d002      	beq.n	800c622 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800c61c:	2301      	movs	r3, #1
 800c61e:	73fb      	strb	r3, [r7, #15]
 800c620:	e001      	b.n	800c626 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800c622:	2300      	movs	r3, #0
 800c624:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800c626:	7bfb      	ldrb	r3, [r7, #15]
}
 800c628:	4618      	mov	r0, r3
 800c62a:	3714      	adds	r7, #20
 800c62c:	46bd      	mov	sp, r7
 800c62e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c632:	4770      	bx	lr

0800c634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c634:	b480      	push	{r7}
 800c636:	b083      	sub	sp, #12
 800c638:	af00      	add	r7, sp, #0
 800c63a:	6078      	str	r0, [r7, #4]
 800c63c:	460b      	mov	r3, r1
 800c63e:	807b      	strh	r3, [r7, #2]
 800c640:	4613      	mov	r3, r2
 800c642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c644:	787b      	ldrb	r3, [r7, #1]
 800c646:	2b00      	cmp	r3, #0
 800c648:	d003      	beq.n	800c652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800c64a:	887a      	ldrh	r2, [r7, #2]
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800c650:	e003      	b.n	800c65a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800c652:	887b      	ldrh	r3, [r7, #2]
 800c654:	041a      	lsls	r2, r3, #16
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	619a      	str	r2, [r3, #24]
}
 800c65a:	bf00      	nop
 800c65c:	370c      	adds	r7, #12
 800c65e:	46bd      	mov	sp, r7
 800c660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c664:	4770      	bx	lr
	...

0800c668 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800c668:	b580      	push	{r7, lr}
 800c66a:	b082      	sub	sp, #8
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800c676:	2301      	movs	r3, #1
 800c678:	e08b      	b.n	800c792 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c680:	b2db      	uxtb	r3, r3
 800c682:	2b00      	cmp	r3, #0
 800c684:	d106      	bne.n	800c694 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2200      	movs	r2, #0
 800c68a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7f6 fb7e 	bl	8002d90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2224      	movs	r2, #36	; 0x24
 800c698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f022 0201 	bic.w	r2, r2, #1
 800c6aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	685a      	ldr	r2, [r3, #4]
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800c6b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	689a      	ldr	r2, [r3, #8]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c6c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	68db      	ldr	r3, [r3, #12]
 800c6ce:	2b01      	cmp	r3, #1
 800c6d0:	d107      	bne.n	800c6e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	689a      	ldr	r2, [r3, #8]
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c6de:	609a      	str	r2, [r3, #8]
 800c6e0:	e006      	b.n	800c6f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	689a      	ldr	r2, [r3, #8]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800c6ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	2b02      	cmp	r3, #2
 800c6f6:	d108      	bne.n	800c70a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	685a      	ldr	r2, [r3, #4]
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c706:	605a      	str	r2, [r3, #4]
 800c708:	e007      	b.n	800c71a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	685a      	ldr	r2, [r3, #4]
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	681b      	ldr	r3, [r3, #0]
 800c714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800c718:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	6859      	ldr	r1, [r3, #4]
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	681a      	ldr	r2, [r3, #0]
 800c724:	4b1d      	ldr	r3, [pc, #116]	; (800c79c <HAL_I2C_Init+0x134>)
 800c726:	430b      	orrs	r3, r1
 800c728:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	68da      	ldr	r2, [r3, #12]
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800c738:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	691a      	ldr	r2, [r3, #16]
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	695b      	ldr	r3, [r3, #20]
 800c742:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	699b      	ldr	r3, [r3, #24]
 800c74a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	430a      	orrs	r2, r1
 800c752:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	69d9      	ldr	r1, [r3, #28]
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	6a1a      	ldr	r2, [r3, #32]
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	430a      	orrs	r2, r1
 800c762:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f042 0201 	orr.w	r2, r2, #1
 800c772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2200      	movs	r2, #0
 800c778:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	2220      	movs	r2, #32
 800c77e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	2200      	movs	r2, #0
 800c786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	2200      	movs	r2, #0
 800c78c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800c790:	2300      	movs	r3, #0
}
 800c792:	4618      	mov	r0, r3
 800c794:	3708      	adds	r7, #8
 800c796:	46bd      	mov	sp, r7
 800c798:	bd80      	pop	{r7, pc}
 800c79a:	bf00      	nop
 800c79c:	02008000 	.word	0x02008000

0800c7a0 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b08a      	sub	sp, #40	; 0x28
 800c7a4:	af02      	add	r7, sp, #8
 800c7a6:	60f8      	str	r0, [r7, #12]
 800c7a8:	607a      	str	r2, [r7, #4]
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	817b      	strh	r3, [r7, #10]
 800c7b0:	4613      	mov	r3, r2
 800c7b2:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;
  uint32_t sizetoxfer = 0U;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	61bb      	str	r3, [r7, #24]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c7b8:	68fb      	ldr	r3, [r7, #12]
 800c7ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c7be:	b2db      	uxtb	r3, r3
 800c7c0:	2b20      	cmp	r3, #32
 800c7c2:	f040 80ef 	bne.w	800c9a4 <HAL_I2C_Master_Transmit_DMA+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	699b      	ldr	r3, [r3, #24]
 800c7cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c7d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c7d4:	d101      	bne.n	800c7da <HAL_I2C_Master_Transmit_DMA+0x3a>
    {
      return HAL_BUSY;
 800c7d6:	2302      	movs	r3, #2
 800c7d8:	e0e5      	b.n	800c9a6 <HAL_I2C_Master_Transmit_DMA+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800c7e0:	2b01      	cmp	r3, #1
 800c7e2:	d101      	bne.n	800c7e8 <HAL_I2C_Master_Transmit_DMA+0x48>
 800c7e4:	2302      	movs	r3, #2
 800c7e6:	e0de      	b.n	800c9a6 <HAL_I2C_Master_Transmit_DMA+0x206>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	2201      	movs	r2, #1
 800c7ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2221      	movs	r2, #33	; 0x21
 800c7f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	2210      	movs	r2, #16
 800c7fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	2200      	movs	r2, #0
 800c804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800c806:	68fb      	ldr	r3, [r7, #12]
 800c808:	687a      	ldr	r2, [r7, #4]
 800c80a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	893a      	ldrh	r2, [r7, #8]
 800c810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	4a66      	ldr	r2, [pc, #408]	; (800c9b0 <HAL_I2C_Master_Transmit_DMA+0x210>)
 800c816:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	4a66      	ldr	r2, [pc, #408]	; (800c9b4 <HAL_I2C_Master_Transmit_DMA+0x214>)
 800c81c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c822:	b29b      	uxth	r3, r3
 800c824:	2bff      	cmp	r3, #255	; 0xff
 800c826:	d906      	bls.n	800c836 <HAL_I2C_Master_Transmit_DMA+0x96>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	22ff      	movs	r2, #255	; 0xff
 800c82c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800c82e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c832:	61fb      	str	r3, [r7, #28]
 800c834:	e007      	b.n	800c846 <HAL_I2C_Master_Transmit_DMA+0xa6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c83a:	b29a      	uxth	r2, r3
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800c840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c844:	61fb      	str	r3, [r7, #28]
    }

    if (hi2c->XferSize > 0U)
 800c846:	68fb      	ldr	r3, [r7, #12]
 800c848:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d01a      	beq.n	800c884 <HAL_I2C_Master_Transmit_DMA+0xe4>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c852:	781a      	ldrb	r2, [r3, #0]
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c85e:	1c5a      	adds	r2, r3, #1
 800c860:	68fb      	ldr	r3, [r7, #12]
 800c862:	625a      	str	r2, [r3, #36]	; 0x24

      sizetoxfer = hi2c->XferSize;
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c868:	61bb      	str	r3, [r7, #24]
      hi2c->XferCount--;
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c86e:	b29b      	uxth	r3, r3
 800c870:	3b01      	subs	r3, #1
 800c872:	b29a      	uxth	r2, r3
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c87c:	3b01      	subs	r3, #1
 800c87e:	b29a      	uxth	r2, r3
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    if (hi2c->XferSize > 0U)
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d074      	beq.n	800c976 <HAL_I2C_Master_Transmit_DMA+0x1d6>
    {
      if (hi2c->hdmatx != NULL)
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c890:	2b00      	cmp	r3, #0
 800c892:	d022      	beq.n	800c8da <HAL_I2C_Master_Transmit_DMA+0x13a>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c898:	4a47      	ldr	r2, [pc, #284]	; (800c9b8 <HAL_I2C_Master_Transmit_DMA+0x218>)
 800c89a:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a0:	4a46      	ldr	r2, [pc, #280]	; (800c9bc <HAL_I2C_Master_Transmit_DMA+0x21c>)
 800c8a2:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmatx->XferAbortCallback = NULL;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8bc:	4619      	mov	r1, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	3328      	adds	r3, #40	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800c8c4:	461a      	mov	r2, r3
                                         (uint32_t)&hi2c->Instance->TXDR, hi2c->XferSize);
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr,
 800c8ca:	f7fc fd21 	bl	8009310 <HAL_DMA_Start_IT>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	75fb      	strb	r3, [r7, #23]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800c8d2:	7dfb      	ldrb	r3, [r7, #23]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d13a      	bne.n	800c94e <HAL_I2C_Master_Transmit_DMA+0x1ae>
 800c8d8:	e013      	b.n	800c902 <HAL_I2C_Master_Transmit_DMA+0x162>
        hi2c->State     = HAL_I2C_STATE_READY;
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	2220      	movs	r2, #32
 800c8de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c8ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800c8fe:	2301      	movs	r3, #1
 800c900:	e051      	b.n	800c9a6 <HAL_I2C_Master_Transmit_DMA+0x206>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U),
 800c902:	68fb      	ldr	r3, [r7, #12]
 800c904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c906:	b2db      	uxtb	r3, r3
 800c908:	3301      	adds	r3, #1
 800c90a:	b2da      	uxtb	r2, r3
 800c90c:	8979      	ldrh	r1, [r7, #10]
 800c90e:	4b2c      	ldr	r3, [pc, #176]	; (800c9c0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f002 f83b 	bl	800e990 <I2C_TransferConfig>
                           xfermode, I2C_GENERATE_START_WRITE);

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800c91a:	68fb      	ldr	r3, [r7, #12]
 800c91c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800c91e:	b29a      	uxth	r2, r3
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c924:	1ad3      	subs	r3, r2, r3
 800c926:	b29a      	uxth	r2, r3
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2200      	movs	r2, #0
 800c930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800c934:	2110      	movs	r1, #16
 800c936:	68f8      	ldr	r0, [r7, #12]
 800c938:	f002 f85c 	bl	800e9f4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	681a      	ldr	r2, [r3, #0]
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c94a:	601a      	str	r2, [r3, #0]
 800c94c:	e028      	b.n	800c9a0 <HAL_I2C_Master_Transmit_DMA+0x200>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	2220      	movs	r2, #32
 800c952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800c956:	68fb      	ldr	r3, [r7, #12]
 800c958:	2200      	movs	r2, #0
 800c95a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800c95e:	68fb      	ldr	r3, [r7, #12]
 800c960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c962:	f043 0210 	orr.w	r2, r3, #16
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	2200      	movs	r2, #0
 800c96e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800c972:	2301      	movs	r3, #1
 800c974:	e017      	b.n	800c9a6 <HAL_I2C_Master_Transmit_DMA+0x206>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	4a12      	ldr	r2, [pc, #72]	; (800c9c4 <HAL_I2C_Master_Transmit_DMA+0x224>)
 800c97a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)sizetoxfer, I2C_AUTOEND_MODE,
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	b2da      	uxtb	r2, r3
 800c980:	8979      	ldrh	r1, [r7, #10]
 800c982:	4b0f      	ldr	r3, [pc, #60]	; (800c9c0 <HAL_I2C_Master_Transmit_DMA+0x220>)
 800c984:	9300      	str	r3, [sp, #0]
 800c986:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800c98a:	68f8      	ldr	r0, [r7, #12]
 800c98c:	f002 f800 	bl	800e990 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800c998:	2101      	movs	r1, #1
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f002 f82a 	bl	800e9f4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	e000      	b.n	800c9a6 <HAL_I2C_Master_Transmit_DMA+0x206>
  }
  else
  {
    return HAL_BUSY;
 800c9a4:	2302      	movs	r3, #2
  }
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	3720      	adds	r7, #32
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	bd80      	pop	{r7, pc}
 800c9ae:	bf00      	nop
 800c9b0:	ffff0000 	.word	0xffff0000
 800c9b4:	0800d1fb 	.word	0x0800d1fb
 800c9b8:	0800e5b3 	.word	0x0800e5b3
 800c9bc:	0800e6e1 	.word	0x0800e6e1
 800c9c0:	80002000 	.word	0x80002000
 800c9c4:	0800cd8b 	.word	0x0800cd8b

0800c9c8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b088      	sub	sp, #32
 800c9cc:	af02      	add	r7, sp, #8
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	607a      	str	r2, [r7, #4]
 800c9d2:	461a      	mov	r2, r3
 800c9d4:	460b      	mov	r3, r1
 800c9d6:	817b      	strh	r3, [r7, #10]
 800c9d8:	4613      	mov	r3, r2
 800c9da:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c9e2:	b2db      	uxtb	r3, r3
 800c9e4:	2b20      	cmp	r3, #32
 800c9e6:	f040 80cd 	bne.w	800cb84 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	699b      	ldr	r3, [r3, #24]
 800c9f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c9f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c9f8:	d101      	bne.n	800c9fe <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800c9fa:	2302      	movs	r3, #2
 800c9fc:	e0c3      	b.n	800cb86 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ca04:	2b01      	cmp	r3, #1
 800ca06:	d101      	bne.n	800ca0c <HAL_I2C_Master_Receive_DMA+0x44>
 800ca08:	2302      	movs	r3, #2
 800ca0a:	e0bc      	b.n	800cb86 <HAL_I2C_Master_Receive_DMA+0x1be>
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2201      	movs	r2, #1
 800ca10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	2222      	movs	r2, #34	; 0x22
 800ca18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2210      	movs	r2, #16
 800ca20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2200      	movs	r2, #0
 800ca28:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	687a      	ldr	r2, [r7, #4]
 800ca2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	893a      	ldrh	r2, [r7, #8]
 800ca34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	4a55      	ldr	r2, [pc, #340]	; (800cb90 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 800ca3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	4a55      	ldr	r2, [pc, #340]	; (800cb94 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 800ca40:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca46:	b29b      	uxth	r3, r3
 800ca48:	2bff      	cmp	r3, #255	; 0xff
 800ca4a:	d906      	bls.n	800ca5a <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	22ff      	movs	r2, #255	; 0xff
 800ca50:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 800ca52:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ca56:	617b      	str	r3, [r7, #20]
 800ca58:	e007      	b.n	800ca6a <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ca5e:	b29a      	uxth	r2, r3
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 800ca64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800ca68:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d070      	beq.n	800cb54 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d020      	beq.n	800cabc <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca7e:	4a46      	ldr	r2, [pc, #280]	; (800cb98 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800ca80:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca86:	4a45      	ldr	r2, [pc, #276]	; (800cb9c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 800ca88:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca8e:	2200      	movs	r2, #0
 800ca90:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca96:	2200      	movs	r2, #0
 800ca98:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream or channel depends on Instance */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	681b      	ldr	r3, [r3, #0]
 800caa2:	3324      	adds	r3, #36	; 0x24
 800caa4:	4619      	mov	r1, r3
 800caa6:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800caac:	f7fc fc30 	bl	8009310 <HAL_DMA_Start_IT>
 800cab0:	4603      	mov	r3, r0
 800cab2:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800cab4:	7cfb      	ldrb	r3, [r7, #19]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d138      	bne.n	800cb2c <HAL_I2C_Master_Receive_DMA+0x164>
 800caba:	e013      	b.n	800cae4 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	2220      	movs	r2, #32
 800cac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cac4:	68fb      	ldr	r3, [r7, #12]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cad0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	e050      	b.n	800cb86 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cae8:	b2da      	uxtb	r2, r3
 800caea:	8979      	ldrh	r1, [r7, #10]
 800caec:	4b2c      	ldr	r3, [pc, #176]	; (800cba0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800caee:	9300      	str	r3, [sp, #0]
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	68f8      	ldr	r0, [r7, #12]
 800caf4:	f001 ff4c 	bl	800e990 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cafc:	b29a      	uxth	r2, r3
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb02:	1ad3      	subs	r3, r2, r3
 800cb04:	b29a      	uxth	r2, r3
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2200      	movs	r2, #0
 800cb0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800cb12:	2110      	movs	r1, #16
 800cb14:	68f8      	ldr	r0, [r7, #12]
 800cb16:	f001 ff6d 	bl	800e9f4 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	681a      	ldr	r2, [r3, #0]
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800cb28:	601a      	str	r2, [r3, #0]
 800cb2a:	e029      	b.n	800cb80 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	2220      	movs	r2, #32
 800cb30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2200      	movs	r2, #0
 800cb38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cb40:	f043 0210 	orr.w	r2, r3, #16
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800cb50:	2301      	movs	r3, #1
 800cb52:	e018      	b.n	800cb86 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	4a13      	ldr	r2, [pc, #76]	; (800cba4 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 800cb58:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb5e:	b2da      	uxtb	r2, r3
 800cb60:	8979      	ldrh	r1, [r7, #10]
 800cb62:	4b0f      	ldr	r3, [pc, #60]	; (800cba0 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800cb64:	9300      	str	r3, [sp, #0]
 800cb66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cb6a:	68f8      	ldr	r0, [r7, #12]
 800cb6c:	f001 ff10 	bl	800e990 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800cb70:	68fb      	ldr	r3, [r7, #12]
 800cb72:	2200      	movs	r2, #0
 800cb74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 800cb78:	2102      	movs	r1, #2
 800cb7a:	68f8      	ldr	r0, [r7, #12]
 800cb7c:	f001 ff3a 	bl	800e9f4 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800cb80:	2300      	movs	r3, #0
 800cb82:	e000      	b.n	800cb86 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 800cb84:	2302      	movs	r3, #2
  }
}
 800cb86:	4618      	mov	r0, r3
 800cb88:	3718      	adds	r7, #24
 800cb8a:	46bd      	mov	sp, r7
 800cb8c:	bd80      	pop	{r7, pc}
 800cb8e:	bf00      	nop
 800cb90:	ffff0000 	.word	0xffff0000
 800cb94:	0800d1fb 	.word	0x0800d1fb
 800cb98:	0800e649 	.word	0x0800e649
 800cb9c:	0800e6e1 	.word	0x0800e6e1
 800cba0:	80002400 	.word	0x80002400
 800cba4:	0800cd8b 	.word	0x0800cd8b

0800cba8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	699b      	ldr	r3, [r3, #24]
 800cbb6:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d005      	beq.n	800cbd4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbcc:	68ba      	ldr	r2, [r7, #8]
 800cbce:	68f9      	ldr	r1, [r7, #12]
 800cbd0:	6878      	ldr	r0, [r7, #4]
 800cbd2:	4798      	blx	r3
  }
}
 800cbd4:	bf00      	nop
 800cbd6:	3710      	adds	r7, #16
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bd80      	pop	{r7, pc}

0800cbdc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	681b      	ldr	r3, [r3, #0]
 800cbe8:	699b      	ldr	r3, [r3, #24]
 800cbea:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	0a1b      	lsrs	r3, r3, #8
 800cbf8:	f003 0301 	and.w	r3, r3, #1
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d010      	beq.n	800cc22 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	09db      	lsrs	r3, r3, #7
 800cc04:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00a      	beq.n	800cc22 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc10:	f043 0201 	orr.w	r2, r3, #1
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cc20:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	0a9b      	lsrs	r3, r3, #10
 800cc26:	f003 0301 	and.w	r3, r3, #1
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d010      	beq.n	800cc50 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cc2e:	693b      	ldr	r3, [r7, #16]
 800cc30:	09db      	lsrs	r3, r3, #7
 800cc32:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00a      	beq.n	800cc50 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800cc3a:	687b      	ldr	r3, [r7, #4]
 800cc3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc3e:	f043 0208 	orr.w	r2, r3, #8
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800cc4e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	0a5b      	lsrs	r3, r3, #9
 800cc54:	f003 0301 	and.w	r3, r3, #1
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d010      	beq.n	800cc7e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800cc5c:	693b      	ldr	r3, [r7, #16]
 800cc5e:	09db      	lsrs	r3, r3, #7
 800cc60:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d00a      	beq.n	800cc7e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc6c:	f043 0202 	orr.w	r2, r3, #2
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800cc74:	687b      	ldr	r3, [r7, #4]
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc7c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cc82:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f003 030b 	and.w	r3, r3, #11
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d003      	beq.n	800cc96 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800cc8e:	68f9      	ldr	r1, [r7, #12]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f001 fb53 	bl	800e33c <I2C_ITError>
  }
}
 800cc96:	bf00      	nop
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}

0800cc9e <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cc9e:	b480      	push	{r7}
 800cca0:	b083      	sub	sp, #12
 800cca2:	af00      	add	r7, sp, #0
 800cca4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800cca6:	bf00      	nop
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr

0800ccb2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ccb2:	b480      	push	{r7}
 800ccb4:	b083      	sub	sp, #12
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800ccba:	bf00      	nop
 800ccbc:	370c      	adds	r7, #12
 800ccbe:	46bd      	mov	sp, r7
 800ccc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccc4:	4770      	bx	lr

0800ccc6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ccc6:	b480      	push	{r7}
 800ccc8:	b083      	sub	sp, #12
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800ccda:	b480      	push	{r7}
 800ccdc:	b083      	sub	sp, #12
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800cce2:	bf00      	nop
 800cce4:	370c      	adds	r7, #12
 800cce6:	46bd      	mov	sp, r7
 800cce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccec:	4770      	bx	lr

0800ccee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800ccee:	b480      	push	{r7}
 800ccf0:	b083      	sub	sp, #12
 800ccf2:	af00      	add	r7, sp, #0
 800ccf4:	6078      	str	r0, [r7, #4]
 800ccf6:	460b      	mov	r3, r1
 800ccf8:	70fb      	strb	r3, [r7, #3]
 800ccfa:	4613      	mov	r3, r2
 800ccfc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800ccfe:	bf00      	nop
 800cd00:	370c      	adds	r7, #12
 800cd02:	46bd      	mov	sp, r7
 800cd04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd08:	4770      	bx	lr

0800cd0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd0a:	b480      	push	{r7}
 800cd0c:	b083      	sub	sp, #12
 800cd0e:	af00      	add	r7, sp, #0
 800cd10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800cd12:	bf00      	nop
 800cd14:	370c      	adds	r7, #12
 800cd16:	46bd      	mov	sp, r7
 800cd18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1c:	4770      	bx	lr

0800cd1e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd1e:	b480      	push	{r7}
 800cd20:	b083      	sub	sp, #12
 800cd22:	af00      	add	r7, sp, #0
 800cd24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800cd26:	bf00      	nop
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd32:	b480      	push	{r7}
 800cd34:	b083      	sub	sp, #12
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800cd3a:	bf00      	nop
 800cd3c:	370c      	adds	r7, #12
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800cd46:	b480      	push	{r7}
 800cd48:	b083      	sub	sp, #12
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800cd4e:	bf00      	nop
 800cd50:	370c      	adds	r7, #12
 800cd52:	46bd      	mov	sp, r7
 800cd54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd58:	4770      	bx	lr

0800cd5a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800cd5a:	b480      	push	{r7}
 800cd5c:	b083      	sub	sp, #12
 800cd5e:	af00      	add	r7, sp, #0
 800cd60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800cd62:	bf00      	nop
 800cd64:	370c      	adds	r7, #12
 800cd66:	46bd      	mov	sp, r7
 800cd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd6c:	4770      	bx	lr

0800cd6e <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800cd6e:	b480      	push	{r7}
 800cd70:	b083      	sub	sp, #12
 800cd72:	af00      	add	r7, sp, #0
 800cd74:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cd7c:	b2db      	uxtb	r3, r3
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	370c      	adds	r7, #12
 800cd82:	46bd      	mov	sp, r7
 800cd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd88:	4770      	bx	lr

0800cd8a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800cd8a:	b580      	push	{r7, lr}
 800cd8c:	b088      	sub	sp, #32
 800cd8e:	af02      	add	r7, sp, #8
 800cd90:	60f8      	str	r0, [r7, #12]
 800cd92:	60b9      	str	r1, [r7, #8]
 800cd94:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cda0:	2b01      	cmp	r3, #1
 800cda2:	d101      	bne.n	800cda8 <I2C_Master_ISR_IT+0x1e>
 800cda4:	2302      	movs	r3, #2
 800cda6:	e120      	b.n	800cfea <I2C_Master_ISR_IT+0x260>
 800cda8:	68fb      	ldr	r3, [r7, #12]
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cdb0:	697b      	ldr	r3, [r7, #20]
 800cdb2:	091b      	lsrs	r3, r3, #4
 800cdb4:	f003 0301 	and.w	r3, r3, #1
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d013      	beq.n	800cde4 <I2C_Master_ISR_IT+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	091b      	lsrs	r3, r3, #4
 800cdc0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00d      	beq.n	800cde4 <I2C_Master_ISR_IT+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	2210      	movs	r2, #16
 800cdce:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cdd4:	f043 0204 	orr.w	r2, r3, #4
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800cddc:	68f8      	ldr	r0, [r7, #12]
 800cdde:	f001 fbc4 	bl	800e56a <I2C_Flush_TXDR>
 800cde2:	e0ed      	b.n	800cfc0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	089b      	lsrs	r3, r3, #2
 800cde8:	f003 0301 	and.w	r3, r3, #1
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	d023      	beq.n	800ce38 <I2C_Master_ISR_IT+0xae>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	089b      	lsrs	r3, r3, #2
 800cdf4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d01d      	beq.n	800ce38 <I2C_Master_ISR_IT+0xae>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800cdfc:	697b      	ldr	r3, [r7, #20]
 800cdfe:	f023 0304 	bic.w	r3, r3, #4
 800ce02:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ce0a:	68fb      	ldr	r3, [r7, #12]
 800ce0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce0e:	b2d2      	uxtb	r2, r2
 800ce10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ce12:	68fb      	ldr	r3, [r7, #12]
 800ce14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce16:	1c5a      	adds	r2, r3, #1
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce20:	3b01      	subs	r3, #1
 800ce22:	b29a      	uxth	r2, r3
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 800ce28:	68fb      	ldr	r3, [r7, #12]
 800ce2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce2c:	b29b      	uxth	r3, r3
 800ce2e:	3b01      	subs	r3, #1
 800ce30:	b29a      	uxth	r2, r3
 800ce32:	68fb      	ldr	r3, [r7, #12]
 800ce34:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ce36:	e0c3      	b.n	800cfc0 <I2C_Master_ISR_IT+0x236>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ce38:	697b      	ldr	r3, [r7, #20]
 800ce3a:	099b      	lsrs	r3, r3, #6
 800ce3c:	f003 0301 	and.w	r3, r3, #1
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d12a      	bne.n	800ce9a <I2C_Master_ISR_IT+0x110>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ce44:	697b      	ldr	r3, [r7, #20]
 800ce46:	085b      	lsrs	r3, r3, #1
 800ce48:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d024      	beq.n	800ce9a <I2C_Master_ISR_IT+0x110>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	085b      	lsrs	r3, r3, #1
 800ce54:	f003 0301 	and.w	r3, r3, #1
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d01e      	beq.n	800ce9a <I2C_Master_ISR_IT+0x110>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce60:	b29b      	uxth	r3, r3
 800ce62:	2b00      	cmp	r3, #0
 800ce64:	f000 80ac 	beq.w	800cfc0 <I2C_Master_ISR_IT+0x236>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce6c:	781a      	ldrb	r2, [r3, #0]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce78:	1c5a      	adds	r2, r3, #1
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ce82:	3b01      	subs	r3, #1
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800ce8a:	68fb      	ldr	r3, [r7, #12]
 800ce8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ce8e:	b29b      	uxth	r3, r3
 800ce90:	3b01      	subs	r3, #1
 800ce92:	b29a      	uxth	r2, r3
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800ce98:	e092      	b.n	800cfc0 <I2C_Master_ISR_IT+0x236>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ce9a:	697b      	ldr	r3, [r7, #20]
 800ce9c:	09db      	lsrs	r3, r3, #7
 800ce9e:	f003 0301 	and.w	r3, r3, #1
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d05d      	beq.n	800cf62 <I2C_Master_ISR_IT+0x1d8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	099b      	lsrs	r3, r3, #6
 800ceaa:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d057      	beq.n	800cf62 <I2C_Master_ISR_IT+0x1d8>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ceb2:	68fb      	ldr	r3, [r7, #12]
 800ceb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ceb6:	b29b      	uxth	r3, r3
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d040      	beq.n	800cf3e <I2C_Master_ISR_IT+0x1b4>
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d13c      	bne.n	800cf3e <I2C_Master_ISR_IT+0x1b4>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	685b      	ldr	r3, [r3, #4]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800ced0:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ced6:	b29b      	uxth	r3, r3
 800ced8:	2bff      	cmp	r3, #255	; 0xff
 800ceda:	d90e      	bls.n	800cefa <I2C_Master_ISR_IT+0x170>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800cedc:	68fb      	ldr	r3, [r7, #12]
 800cede:	22ff      	movs	r2, #255	; 0xff
 800cee0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800cee2:	68fb      	ldr	r3, [r7, #12]
 800cee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cee6:	b2da      	uxtb	r2, r3
 800cee8:	8a79      	ldrh	r1, [r7, #18]
 800ceea:	2300      	movs	r3, #0
 800ceec:	9300      	str	r3, [sp, #0]
 800ceee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800cef2:	68f8      	ldr	r0, [r7, #12]
 800cef4:	f001 fd4c 	bl	800e990 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cef8:	e032      	b.n	800cf60 <I2C_Master_ISR_IT+0x1d6>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800cefa:	68fb      	ldr	r3, [r7, #12]
 800cefc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cefe:	b29a      	uxth	r2, r3
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf08:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cf0c:	d00b      	beq.n	800cf26 <I2C_Master_ISR_IT+0x19c>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf12:	b2da      	uxtb	r2, r3
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf18:	8a79      	ldrh	r1, [r7, #18]
 800cf1a:	2000      	movs	r0, #0
 800cf1c:	9000      	str	r0, [sp, #0]
 800cf1e:	68f8      	ldr	r0, [r7, #12]
 800cf20:	f001 fd36 	bl	800e990 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf24:	e01c      	b.n	800cf60 <I2C_Master_ISR_IT+0x1d6>
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cf2a:	b2da      	uxtb	r2, r3
 800cf2c:	8a79      	ldrh	r1, [r7, #18]
 800cf2e:	2300      	movs	r3, #0
 800cf30:	9300      	str	r3, [sp, #0]
 800cf32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f001 fd2a 	bl	800e990 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800cf3c:	e010      	b.n	800cf60 <I2C_Master_ISR_IT+0x1d6>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	685b      	ldr	r3, [r3, #4]
 800cf44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf4c:	d003      	beq.n	800cf56 <I2C_Master_ISR_IT+0x1cc>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800cf4e:	68f8      	ldr	r0, [r7, #12]
 800cf50:	f000 fdde 	bl	800db10 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cf54:	e034      	b.n	800cfc0 <I2C_Master_ISR_IT+0x236>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800cf56:	2140      	movs	r1, #64	; 0x40
 800cf58:	68f8      	ldr	r0, [r7, #12]
 800cf5a:	f001 f9ef 	bl	800e33c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800cf5e:	e02f      	b.n	800cfc0 <I2C_Master_ISR_IT+0x236>
 800cf60:	e02e      	b.n	800cfc0 <I2C_Master_ISR_IT+0x236>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	099b      	lsrs	r3, r3, #6
 800cf66:	f003 0301 	and.w	r3, r3, #1
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d028      	beq.n	800cfc0 <I2C_Master_ISR_IT+0x236>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	099b      	lsrs	r3, r3, #6
 800cf72:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d022      	beq.n	800cfc0 <I2C_Master_ISR_IT+0x236>
  {
    if (hi2c->XferCount == 0U)
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800cf7e:	b29b      	uxth	r3, r3
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d119      	bne.n	800cfb8 <I2C_Master_ISR_IT+0x22e>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	685b      	ldr	r3, [r3, #4]
 800cf8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cf8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cf92:	d015      	beq.n	800cfc0 <I2C_Master_ISR_IT+0x236>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800cf94:	68fb      	ldr	r3, [r7, #12]
 800cf96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf98:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800cf9c:	d108      	bne.n	800cfb0 <I2C_Master_ISR_IT+0x226>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800cf9e:	68fb      	ldr	r3, [r7, #12]
 800cfa0:	681b      	ldr	r3, [r3, #0]
 800cfa2:	685a      	ldr	r2, [r3, #4]
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800cfac:	605a      	str	r2, [r3, #4]
 800cfae:	e007      	b.n	800cfc0 <I2C_Master_ISR_IT+0x236>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800cfb0:	68f8      	ldr	r0, [r7, #12]
 800cfb2:	f000 fdad 	bl	800db10 <I2C_ITMasterSeqCplt>
 800cfb6:	e003      	b.n	800cfc0 <I2C_Master_ISR_IT+0x236>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800cfb8:	2140      	movs	r1, #64	; 0x40
 800cfba:	68f8      	ldr	r0, [r7, #12]
 800cfbc:	f001 f9be 	bl	800e33c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	095b      	lsrs	r3, r3, #5
 800cfc4:	f003 0301 	and.w	r3, r3, #1
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d009      	beq.n	800cfe0 <I2C_Master_ISR_IT+0x256>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	095b      	lsrs	r3, r3, #5
 800cfd0:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d003      	beq.n	800cfe0 <I2C_Master_ISR_IT+0x256>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800cfd8:	6979      	ldr	r1, [r7, #20]
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f000 fe34 	bl	800dc48 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800cfe8:	2300      	movs	r3, #0
}
 800cfea:	4618      	mov	r0, r3
 800cfec:	3718      	adds	r7, #24
 800cfee:	46bd      	mov	sp, r7
 800cff0:	bd80      	pop	{r7, pc}

0800cff2 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800cff2:	b580      	push	{r7, lr}
 800cff4:	b086      	sub	sp, #24
 800cff6:	af00      	add	r7, sp, #0
 800cff8:	60f8      	str	r0, [r7, #12]
 800cffa:	60b9      	str	r1, [r7, #8]
 800cffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800cffe:	68fb      	ldr	r3, [r7, #12]
 800d000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d002:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800d004:	68bb      	ldr	r3, [r7, #8]
 800d006:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d008:	68fb      	ldr	r3, [r7, #12]
 800d00a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d00e:	2b01      	cmp	r3, #1
 800d010:	d101      	bne.n	800d016 <I2C_Slave_ISR_IT+0x24>
 800d012:	2302      	movs	r3, #2
 800d014:	e0ed      	b.n	800d1f2 <I2C_Slave_ISR_IT+0x200>
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	2201      	movs	r2, #1
 800d01a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d01e:	693b      	ldr	r3, [r7, #16]
 800d020:	095b      	lsrs	r3, r3, #5
 800d022:	f003 0301 	and.w	r3, r3, #1
 800d026:	2b00      	cmp	r3, #0
 800d028:	d00a      	beq.n	800d040 <I2C_Slave_ISR_IT+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d02a:	687b      	ldr	r3, [r7, #4]
 800d02c:	095b      	lsrs	r3, r3, #5
 800d02e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d032:	2b00      	cmp	r3, #0
 800d034:	d004      	beq.n	800d040 <I2C_Slave_ISR_IT+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800d036:	6939      	ldr	r1, [r7, #16]
 800d038:	68f8      	ldr	r0, [r7, #12]
 800d03a:	f000 fecf 	bl	800dddc <I2C_ITSlaveCplt>
 800d03e:	e0d3      	b.n	800d1e8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d040:	693b      	ldr	r3, [r7, #16]
 800d042:	091b      	lsrs	r3, r3, #4
 800d044:	f003 0301 	and.w	r3, r3, #1
 800d048:	2b00      	cmp	r3, #0
 800d04a:	d04d      	beq.n	800d0e8 <I2C_Slave_ISR_IT+0xf6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	091b      	lsrs	r3, r3, #4
 800d050:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800d054:	2b00      	cmp	r3, #0
 800d056:	d047      	beq.n	800d0e8 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d128      	bne.n	800d0b4 <I2C_Slave_ISR_IT+0xc2>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d068:	b2db      	uxtb	r3, r3
 800d06a:	2b28      	cmp	r3, #40	; 0x28
 800d06c:	d108      	bne.n	800d080 <I2C_Slave_ISR_IT+0x8e>
 800d06e:	697b      	ldr	r3, [r7, #20]
 800d070:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d074:	d104      	bne.n	800d080 <I2C_Slave_ISR_IT+0x8e>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800d076:	6939      	ldr	r1, [r7, #16]
 800d078:	68f8      	ldr	r0, [r7, #12]
 800d07a:	f001 f909 	bl	800e290 <I2C_ITListenCplt>
 800d07e:	e032      	b.n	800d0e6 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b29      	cmp	r3, #41	; 0x29
 800d08a:	d10e      	bne.n	800d0aa <I2C_Slave_ISR_IT+0xb8>
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d092:	d00a      	beq.n	800d0aa <I2C_Slave_ISR_IT+0xb8>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	2210      	movs	r2, #16
 800d09a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800d09c:	68f8      	ldr	r0, [r7, #12]
 800d09e:	f001 fa64 	bl	800e56a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f000 fd71 	bl	800db8a <I2C_ITSlaveSeqCplt>
 800d0a8:	e01d      	b.n	800d0e6 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	2210      	movs	r2, #16
 800d0b0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800d0b2:	e096      	b.n	800d1e2 <I2C_Slave_ISR_IT+0x1f0>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	2210      	movs	r2, #16
 800d0ba:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0c0:	f043 0204 	orr.w	r2, r3, #4
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d0c8:	697b      	ldr	r3, [r7, #20]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d004      	beq.n	800d0d8 <I2C_Slave_ISR_IT+0xe6>
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d0d4:	f040 8085 	bne.w	800d1e2 <I2C_Slave_ISR_IT+0x1f0>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d0dc:	4619      	mov	r1, r3
 800d0de:	68f8      	ldr	r0, [r7, #12]
 800d0e0:	f001 f92c 	bl	800e33c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d0e4:	e07d      	b.n	800d1e2 <I2C_Slave_ISR_IT+0x1f0>
 800d0e6:	e07c      	b.n	800d1e2 <I2C_Slave_ISR_IT+0x1f0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d0e8:	693b      	ldr	r3, [r7, #16]
 800d0ea:	089b      	lsrs	r3, r3, #2
 800d0ec:	f003 0301 	and.w	r3, r3, #1
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d030      	beq.n	800d156 <I2C_Slave_ISR_IT+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	089b      	lsrs	r3, r3, #2
 800d0f8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d02a      	beq.n	800d156 <I2C_Slave_ISR_IT+0x164>
  {
    if (hi2c->XferCount > 0U)
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d104:	b29b      	uxth	r3, r3
 800d106:	2b00      	cmp	r3, #0
 800d108:	d018      	beq.n	800d13c <I2C_Slave_ISR_IT+0x14a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	681b      	ldr	r3, [r3, #0]
 800d10e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d114:	b2d2      	uxtb	r2, r2
 800d116:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d11c:	1c5a      	adds	r2, r3, #1
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d126:	3b01      	subs	r3, #1
 800d128:	b29a      	uxth	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d132:	b29b      	uxth	r3, r3
 800d134:	3b01      	subs	r3, #1
 800d136:	b29a      	uxth	r2, r3
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d140:	b29b      	uxth	r3, r3
 800d142:	2b00      	cmp	r3, #0
 800d144:	d14f      	bne.n	800d1e6 <I2C_Slave_ISR_IT+0x1f4>
 800d146:	697b      	ldr	r3, [r7, #20]
 800d148:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d14c:	d04b      	beq.n	800d1e6 <I2C_Slave_ISR_IT+0x1f4>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800d14e:	68f8      	ldr	r0, [r7, #12]
 800d150:	f000 fd1b 	bl	800db8a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800d154:	e047      	b.n	800d1e6 <I2C_Slave_ISR_IT+0x1f4>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d156:	693b      	ldr	r3, [r7, #16]
 800d158:	08db      	lsrs	r3, r3, #3
 800d15a:	f003 0301 	and.w	r3, r3, #1
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d00a      	beq.n	800d178 <I2C_Slave_ISR_IT+0x186>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	08db      	lsrs	r3, r3, #3
 800d166:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d004      	beq.n	800d178 <I2C_Slave_ISR_IT+0x186>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800d16e:	6939      	ldr	r1, [r7, #16]
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f000 fc49 	bl	800da08 <I2C_ITAddrCplt>
 800d176:	e037      	b.n	800d1e8 <I2C_Slave_ISR_IT+0x1f6>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	085b      	lsrs	r3, r3, #1
 800d17c:	f003 0301 	and.w	r3, r3, #1
 800d180:	2b00      	cmp	r3, #0
 800d182:	d031      	beq.n	800d1e8 <I2C_Slave_ISR_IT+0x1f6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	085b      	lsrs	r3, r3, #1
 800d188:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d02b      	beq.n	800d1e8 <I2C_Slave_ISR_IT+0x1f6>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d194:	b29b      	uxth	r3, r3
 800d196:	2b00      	cmp	r3, #0
 800d198:	d018      	beq.n	800d1cc <I2C_Slave_ISR_IT+0x1da>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d19e:	781a      	ldrb	r2, [r3, #0]
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1aa:	1c5a      	adds	r2, r3, #1
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800d1b0:	68fb      	ldr	r3, [r7, #12]
 800d1b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d1b4:	b29b      	uxth	r3, r3
 800d1b6:	3b01      	subs	r3, #1
 800d1b8:	b29a      	uxth	r2, r3
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d1c2:	3b01      	subs	r3, #1
 800d1c4:	b29a      	uxth	r2, r3
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	851a      	strh	r2, [r3, #40]	; 0x28
 800d1ca:	e00d      	b.n	800d1e8 <I2C_Slave_ISR_IT+0x1f6>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d1d2:	d002      	beq.n	800d1da <I2C_Slave_ISR_IT+0x1e8>
 800d1d4:	697b      	ldr	r3, [r7, #20]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <I2C_Slave_ISR_IT+0x1f6>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800d1da:	68f8      	ldr	r0, [r7, #12]
 800d1dc:	f000 fcd5 	bl	800db8a <I2C_ITSlaveSeqCplt>
 800d1e0:	e002      	b.n	800d1e8 <I2C_Slave_ISR_IT+0x1f6>
    if (hi2c->XferCount == 0U)
 800d1e2:	bf00      	nop
 800d1e4:	e000      	b.n	800d1e8 <I2C_Slave_ISR_IT+0x1f6>
    if ((hi2c->XferCount == 0U) && \
 800d1e6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d1f0:	2300      	movs	r3, #0
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3718      	adds	r7, #24
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b088      	sub	sp, #32
 800d1fe:	af02      	add	r7, sp, #8
 800d200:	60f8      	str	r0, [r7, #12]
 800d202:	60b9      	str	r1, [r7, #8]
 800d204:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d101      	bne.n	800d214 <I2C_Master_ISR_DMA+0x1a>
 800d210:	2302      	movs	r3, #2
 800d212:	e0e1      	b.n	800d3d8 <I2C_Master_ISR_DMA+0x1de>
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	2201      	movs	r2, #1
 800d218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d21c:	68bb      	ldr	r3, [r7, #8]
 800d21e:	091b      	lsrs	r3, r3, #4
 800d220:	f003 0301 	and.w	r3, r3, #1
 800d224:	2b00      	cmp	r3, #0
 800d226:	d017      	beq.n	800d258 <I2C_Master_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	091b      	lsrs	r3, r3, #4
 800d22c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d230:	2b00      	cmp	r3, #0
 800d232:	d011      	beq.n	800d258 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2210      	movs	r2, #16
 800d23a:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d240:	f043 0204 	orr.w	r2, r3, #4
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d248:	2120      	movs	r1, #32
 800d24a:	68f8      	ldr	r0, [r7, #12]
 800d24c:	f001 fbd2 	bl	800e9f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d250:	68f8      	ldr	r0, [r7, #12]
 800d252:	f001 f98a 	bl	800e56a <I2C_Flush_TXDR>
 800d256:	e0ba      	b.n	800d3ce <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d258:	68bb      	ldr	r3, [r7, #8]
 800d25a:	09db      	lsrs	r3, r3, #7
 800d25c:	f003 0301 	and.w	r3, r3, #1
 800d260:	2b00      	cmp	r3, #0
 800d262:	d072      	beq.n	800d34a <I2C_Master_ISR_DMA+0x150>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	099b      	lsrs	r3, r3, #6
 800d268:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d06c      	beq.n	800d34a <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	681a      	ldr	r2, [r3, #0]
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d27e:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d284:	b29b      	uxth	r3, r3
 800d286:	2b00      	cmp	r3, #0
 800d288:	d04e      	beq.n	800d328 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	b29b      	uxth	r3, r3
 800d292:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800d296:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d29c:	b29b      	uxth	r3, r3
 800d29e:	2bff      	cmp	r3, #255	; 0xff
 800d2a0:	d906      	bls.n	800d2b0 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	22ff      	movs	r2, #255	; 0xff
 800d2a6:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 800d2a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d2ac:	617b      	str	r3, [r7, #20]
 800d2ae:	e010      	b.n	800d2d2 <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2b4:	b29a      	uxth	r2, r3
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d2c2:	d003      	beq.n	800d2cc <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c8:	617b      	str	r3, [r7, #20]
 800d2ca:	e002      	b.n	800d2d2 <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800d2cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d2d0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2d6:	b2da      	uxtb	r2, r3
 800d2d8:	8a79      	ldrh	r1, [r7, #18]
 800d2da:	2300      	movs	r3, #0
 800d2dc:	9300      	str	r3, [sp, #0]
 800d2de:	697b      	ldr	r3, [r7, #20]
 800d2e0:	68f8      	ldr	r0, [r7, #12]
 800d2e2:	f001 fb55 	bl	800e990 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d2ea:	b29a      	uxth	r2, r3
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2f0:	1ad3      	subs	r3, r2, r3
 800d2f2:	b29a      	uxth	r2, r3
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b22      	cmp	r3, #34	; 0x22
 800d302:	d108      	bne.n	800d316 <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d304:	68fb      	ldr	r3, [r7, #12]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d312:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d314:	e05b      	b.n	800d3ce <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d316:	68fb      	ldr	r3, [r7, #12]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	681a      	ldr	r2, [r3, #0]
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d324:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d326:	e052      	b.n	800d3ce <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	685b      	ldr	r3, [r3, #4]
 800d32e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d332:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d336:	d003      	beq.n	800d340 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800d338:	68f8      	ldr	r0, [r7, #12]
 800d33a:	f000 fbe9 	bl	800db10 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800d33e:	e046      	b.n	800d3ce <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d340:	2140      	movs	r1, #64	; 0x40
 800d342:	68f8      	ldr	r0, [r7, #12]
 800d344:	f000 fffa 	bl	800e33c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d348:	e041      	b.n	800d3ce <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d34a:	68bb      	ldr	r3, [r7, #8]
 800d34c:	099b      	lsrs	r3, r3, #6
 800d34e:	f003 0301 	and.w	r3, r3, #1
 800d352:	2b00      	cmp	r3, #0
 800d354:	d029      	beq.n	800d3aa <I2C_Master_ISR_DMA+0x1b0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	099b      	lsrs	r3, r3, #6
 800d35a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d023      	beq.n	800d3aa <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d366:	b29b      	uxth	r3, r3
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d119      	bne.n	800d3a0 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	685b      	ldr	r3, [r3, #4]
 800d372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800d376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d37a:	d027      	beq.n	800d3cc <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d380:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d384:	d108      	bne.n	800d398 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	685a      	ldr	r2, [r3, #4]
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d394:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800d396:	e019      	b.n	800d3cc <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800d398:	68f8      	ldr	r0, [r7, #12]
 800d39a:	f000 fbb9 	bl	800db10 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800d39e:	e015      	b.n	800d3cc <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d3a0:	2140      	movs	r1, #64	; 0x40
 800d3a2:	68f8      	ldr	r0, [r7, #12]
 800d3a4:	f000 ffca 	bl	800e33c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800d3a8:	e010      	b.n	800d3cc <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d3aa:	68bb      	ldr	r3, [r7, #8]
 800d3ac:	095b      	lsrs	r3, r3, #5
 800d3ae:	f003 0301 	and.w	r3, r3, #1
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d00b      	beq.n	800d3ce <I2C_Master_ISR_DMA+0x1d4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	095b      	lsrs	r3, r3, #5
 800d3ba:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d005      	beq.n	800d3ce <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d3c2:	68b9      	ldr	r1, [r7, #8]
 800d3c4:	68f8      	ldr	r0, [r7, #12]
 800d3c6:	f000 fc3f 	bl	800dc48 <I2C_ITMasterCplt>
 800d3ca:	e000      	b.n	800d3ce <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 800d3cc:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2200      	movs	r2, #0
 800d3d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d3d6:	2300      	movs	r3, #0
}
 800d3d8:	4618      	mov	r0, r3
 800d3da:	3718      	adds	r7, #24
 800d3dc:	46bd      	mov	sp, r7
 800d3de:	bd80      	pop	{r7, pc}

0800d3e0 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b088      	sub	sp, #32
 800d3e4:	af02      	add	r7, sp, #8
 800d3e6:	60f8      	str	r0, [r7, #12]
 800d3e8:	60b9      	str	r1, [r7, #8]
 800d3ea:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800d3ec:	4b92      	ldr	r3, [pc, #584]	; (800d638 <I2C_Mem_ISR_DMA+0x258>)
 800d3ee:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d3f6:	2b01      	cmp	r3, #1
 800d3f8:	d101      	bne.n	800d3fe <I2C_Mem_ISR_DMA+0x1e>
 800d3fa:	2302      	movs	r3, #2
 800d3fc:	e118      	b.n	800d630 <I2C_Mem_ISR_DMA+0x250>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	2201      	movs	r2, #1
 800d402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	091b      	lsrs	r3, r3, #4
 800d40a:	f003 0301 	and.w	r3, r3, #1
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d017      	beq.n	800d442 <I2C_Mem_ISR_DMA+0x62>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	091b      	lsrs	r3, r3, #4
 800d416:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	d011      	beq.n	800d442 <I2C_Mem_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d41e:	68fb      	ldr	r3, [r7, #12]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2210      	movs	r2, #16
 800d424:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d42a:	f043 0204 	orr.w	r2, r3, #4
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800d432:	2120      	movs	r1, #32
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f001 fadd 	bl	800e9f4 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800d43a:	68f8      	ldr	r0, [r7, #12]
 800d43c:	f001 f895 	bl	800e56a <I2C_Flush_TXDR>
 800d440:	e0f1      	b.n	800d626 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d442:	68bb      	ldr	r3, [r7, #8]
 800d444:	085b      	lsrs	r3, r3, #1
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d00f      	beq.n	800d46e <I2C_Mem_ISR_DMA+0x8e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	085b      	lsrs	r3, r3, #1
 800d452:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800d456:	2b00      	cmp	r3, #0
 800d458:	d009      	beq.n	800d46e <I2C_Mem_ISR_DMA+0x8e>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	68fa      	ldr	r2, [r7, #12]
 800d460:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800d462:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d46a:	651a      	str	r2, [r3, #80]	; 0x50
 800d46c:	e0db      	b.n	800d626 <I2C_Mem_ISR_DMA+0x246>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d46e:	68bb      	ldr	r3, [r7, #8]
 800d470:	09db      	lsrs	r3, r3, #7
 800d472:	f003 0301 	and.w	r3, r3, #1
 800d476:	2b00      	cmp	r3, #0
 800d478:	d060      	beq.n	800d53c <I2C_Mem_ISR_DMA+0x15c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	099b      	lsrs	r3, r3, #6
 800d47e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800d482:	2b00      	cmp	r3, #0
 800d484:	d05a      	beq.n	800d53c <I2C_Mem_ISR_DMA+0x15c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d486:	2101      	movs	r1, #1
 800d488:	68f8      	ldr	r0, [r7, #12]
 800d48a:	f001 fb37 	bl	800eafc <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d48e:	2110      	movs	r1, #16
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f001 faaf 	bl	800e9f4 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d49a:	b29b      	uxth	r3, r3
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d048      	beq.n	800d532 <I2C_Mem_ISR_DMA+0x152>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4a4:	b29b      	uxth	r3, r3
 800d4a6:	2bff      	cmp	r3, #255	; 0xff
 800d4a8:	d910      	bls.n	800d4cc <I2C_Mem_ISR_DMA+0xec>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	22ff      	movs	r2, #255	; 0xff
 800d4ae:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4b4:	b299      	uxth	r1, r3
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4ba:	b2da      	uxtb	r2, r3
 800d4bc:	2300      	movs	r3, #0
 800d4be:	9300      	str	r3, [sp, #0]
 800d4c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d4c4:	68f8      	ldr	r0, [r7, #12]
 800d4c6:	f001 fa63 	bl	800e990 <I2C_TransferConfig>
 800d4ca:	e011      	b.n	800d4f0 <I2C_Mem_ISR_DMA+0x110>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4d0:	b29a      	uxth	r2, r3
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4da:	b299      	uxth	r1, r3
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4e0:	b2da      	uxtb	r2, r3
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	9300      	str	r3, [sp, #0]
 800d4e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d4ea:	68f8      	ldr	r0, [r7, #12]
 800d4ec:	f001 fa50 	bl	800e990 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800d4f0:	68fb      	ldr	r3, [r7, #12]
 800d4f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d4f4:	b29a      	uxth	r2, r3
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d4fa:	1ad3      	subs	r3, r2, r3
 800d4fc:	b29a      	uxth	r2, r3
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d508:	b2db      	uxtb	r3, r3
 800d50a:	2b22      	cmp	r3, #34	; 0x22
 800d50c:	d108      	bne.n	800d520 <I2C_Mem_ISR_DMA+0x140>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	681a      	ldr	r2, [r3, #0]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d51c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d51e:	e082      	b.n	800d626 <I2C_Mem_ISR_DMA+0x246>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	681b      	ldr	r3, [r3, #0]
 800d524:	681a      	ldr	r2, [r3, #0]
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d52e:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800d530:	e079      	b.n	800d626 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800d532:	2140      	movs	r1, #64	; 0x40
 800d534:	68f8      	ldr	r0, [r7, #12]
 800d536:	f000 ff01 	bl	800e33c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800d53a:	e074      	b.n	800d626 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	099b      	lsrs	r3, r3, #6
 800d540:	f003 0301 	and.w	r3, r3, #1
 800d544:	2b00      	cmp	r3, #0
 800d546:	d05e      	beq.n	800d606 <I2C_Mem_ISR_DMA+0x226>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	099b      	lsrs	r3, r3, #6
 800d54c:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800d550:	2b00      	cmp	r3, #0
 800d552:	d058      	beq.n	800d606 <I2C_Mem_ISR_DMA+0x226>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d554:	2101      	movs	r1, #1
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f001 fad0 	bl	800eafc <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d55c:	2110      	movs	r1, #16
 800d55e:	68f8      	ldr	r0, [r7, #12]
 800d560:	f001 fa48 	bl	800e9f4 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d56a:	b2db      	uxtb	r3, r3
 800d56c:	2b22      	cmp	r3, #34	; 0x22
 800d56e:	d101      	bne.n	800d574 <I2C_Mem_ISR_DMA+0x194>
    {
      direction = I2C_GENERATE_START_READ;
 800d570:	4b32      	ldr	r3, [pc, #200]	; (800d63c <I2C_Mem_ISR_DMA+0x25c>)
 800d572:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d578:	b29b      	uxth	r3, r3
 800d57a:	2bff      	cmp	r3, #255	; 0xff
 800d57c:	d910      	bls.n	800d5a0 <I2C_Mem_ISR_DMA+0x1c0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	22ff      	movs	r2, #255	; 0xff
 800d582:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d588:	b299      	uxth	r1, r3
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	697b      	ldr	r3, [r7, #20]
 800d592:	9300      	str	r3, [sp, #0]
 800d594:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f001 f9f9 	bl	800e990 <I2C_TransferConfig>
 800d59e:	e011      	b.n	800d5c4 <I2C_Mem_ISR_DMA+0x1e4>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5a4:	b29a      	uxth	r2, r3
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800d5aa:	68fb      	ldr	r3, [r7, #12]
 800d5ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d5ae:	b299      	uxth	r1, r3
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	9300      	str	r3, [sp, #0]
 800d5ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800d5be:	68f8      	ldr	r0, [r7, #12]
 800d5c0:	f001 f9e6 	bl	800e990 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d5c8:	b29a      	uxth	r2, r3
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d5ce:	1ad3      	subs	r3, r2, r3
 800d5d0:	b29a      	uxth	r2, r3
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d5dc:	b2db      	uxtb	r3, r3
 800d5de:	2b22      	cmp	r3, #34	; 0x22
 800d5e0:	d108      	bne.n	800d5f4 <I2C_Mem_ISR_DMA+0x214>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	681a      	ldr	r2, [r3, #0]
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d5f0:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d5f2:	e018      	b.n	800d626 <I2C_Mem_ISR_DMA+0x246>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d602:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800d604:	e00f      	b.n	800d626 <I2C_Mem_ISR_DMA+0x246>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d606:	68bb      	ldr	r3, [r7, #8]
 800d608:	095b      	lsrs	r3, r3, #5
 800d60a:	f003 0301 	and.w	r3, r3, #1
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d009      	beq.n	800d626 <I2C_Mem_ISR_DMA+0x246>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	095b      	lsrs	r3, r3, #5
 800d616:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d003      	beq.n	800d626 <I2C_Mem_ISR_DMA+0x246>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800d61e:	68b9      	ldr	r1, [r7, #8]
 800d620:	68f8      	ldr	r0, [r7, #12]
 800d622:	f000 fb11 	bl	800dc48 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d626:	68fb      	ldr	r3, [r7, #12]
 800d628:	2200      	movs	r2, #0
 800d62a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d62e:	2300      	movs	r3, #0
}
 800d630:	4618      	mov	r0, r3
 800d632:	3718      	adds	r7, #24
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	80002000 	.word	0x80002000
 800d63c:	80002400 	.word	0x80002400

0800d640 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b088      	sub	sp, #32
 800d644:	af00      	add	r7, sp, #0
 800d646:	60f8      	str	r0, [r7, #12]
 800d648:	60b9      	str	r1, [r7, #8]
 800d64a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d650:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800d652:	2300      	movs	r3, #0
 800d654:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d65c:	2b01      	cmp	r3, #1
 800d65e:	d101      	bne.n	800d664 <I2C_Slave_ISR_DMA+0x24>
 800d660:	2302      	movs	r3, #2
 800d662:	e1cc      	b.n	800d9fe <I2C_Slave_ISR_DMA+0x3be>
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2201      	movs	r2, #1
 800d668:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	095b      	lsrs	r3, r3, #5
 800d670:	f003 0301 	and.w	r3, r3, #1
 800d674:	2b00      	cmp	r3, #0
 800d676:	d00a      	beq.n	800d68e <I2C_Slave_ISR_DMA+0x4e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	095b      	lsrs	r3, r3, #5
 800d67c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800d680:	2b00      	cmp	r3, #0
 800d682:	d004      	beq.n	800d68e <I2C_Slave_ISR_DMA+0x4e>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800d684:	68b9      	ldr	r1, [r7, #8]
 800d686:	68f8      	ldr	r0, [r7, #12]
 800d688:	f000 fba8 	bl	800dddc <I2C_ITSlaveCplt>
 800d68c:	e1b2      	b.n	800d9f4 <I2C_Slave_ISR_DMA+0x3b4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d68e:	68bb      	ldr	r3, [r7, #8]
 800d690:	091b      	lsrs	r3, r3, #4
 800d692:	f003 0301 	and.w	r3, r3, #1
 800d696:	2b00      	cmp	r3, #0
 800d698:	f000 819c 	beq.w	800d9d4 <I2C_Slave_ISR_DMA+0x394>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	091b      	lsrs	r3, r3, #4
 800d6a0:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f000 8195 	beq.w	800d9d4 <I2C_Slave_ISR_DMA+0x394>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	0b9b      	lsrs	r3, r3, #14
 800d6ae:	f003 0301 	and.w	r3, r3, #1
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d106      	bne.n	800d6c4 <I2C_Slave_ISR_DMA+0x84>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	0bdb      	lsrs	r3, r3, #15
 800d6ba:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	f000 8181 	beq.w	800d9c6 <I2C_Slave_ISR_DMA+0x386>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d07c      	beq.n	800d7c6 <I2C_Slave_ISR_DMA+0x186>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	0bdb      	lsrs	r3, r3, #15
 800d6d0:	f003 0301 	and.w	r3, r3, #1
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	d076      	beq.n	800d7c6 <I2C_Slave_ISR_DMA+0x186>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	4a75      	ldr	r2, [pc, #468]	; (800d8b4 <I2C_Slave_ISR_DMA+0x274>)
 800d6e0:	4293      	cmp	r3, r2
 800d6e2:	d059      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	4a73      	ldr	r2, [pc, #460]	; (800d8b8 <I2C_Slave_ISR_DMA+0x278>)
 800d6ec:	4293      	cmp	r3, r2
 800d6ee:	d053      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d6f0:	68fb      	ldr	r3, [r7, #12]
 800d6f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	4a71      	ldr	r2, [pc, #452]	; (800d8bc <I2C_Slave_ISR_DMA+0x27c>)
 800d6f8:	4293      	cmp	r3, r2
 800d6fa:	d04d      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d700:	681b      	ldr	r3, [r3, #0]
 800d702:	4a6f      	ldr	r2, [pc, #444]	; (800d8c0 <I2C_Slave_ISR_DMA+0x280>)
 800d704:	4293      	cmp	r3, r2
 800d706:	d047      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a6d      	ldr	r2, [pc, #436]	; (800d8c4 <I2C_Slave_ISR_DMA+0x284>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d041      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	4a6b      	ldr	r2, [pc, #428]	; (800d8c8 <I2C_Slave_ISR_DMA+0x288>)
 800d71c:	4293      	cmp	r3, r2
 800d71e:	d03b      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a69      	ldr	r2, [pc, #420]	; (800d8cc <I2C_Slave_ISR_DMA+0x28c>)
 800d728:	4293      	cmp	r3, r2
 800d72a:	d035      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	4a67      	ldr	r2, [pc, #412]	; (800d8d0 <I2C_Slave_ISR_DMA+0x290>)
 800d734:	4293      	cmp	r3, r2
 800d736:	d02f      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	4a65      	ldr	r2, [pc, #404]	; (800d8d4 <I2C_Slave_ISR_DMA+0x294>)
 800d740:	4293      	cmp	r3, r2
 800d742:	d029      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d748:	681b      	ldr	r3, [r3, #0]
 800d74a:	4a63      	ldr	r2, [pc, #396]	; (800d8d8 <I2C_Slave_ISR_DMA+0x298>)
 800d74c:	4293      	cmp	r3, r2
 800d74e:	d023      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d750:	68fb      	ldr	r3, [r7, #12]
 800d752:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	4a61      	ldr	r2, [pc, #388]	; (800d8dc <I2C_Slave_ISR_DMA+0x29c>)
 800d758:	4293      	cmp	r3, r2
 800d75a:	d01d      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	4a5f      	ldr	r2, [pc, #380]	; (800d8e0 <I2C_Slave_ISR_DMA+0x2a0>)
 800d764:	4293      	cmp	r3, r2
 800d766:	d017      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d768:	68fb      	ldr	r3, [r7, #12]
 800d76a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a5d      	ldr	r2, [pc, #372]	; (800d8e4 <I2C_Slave_ISR_DMA+0x2a4>)
 800d770:	4293      	cmp	r3, r2
 800d772:	d011      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d774:	68fb      	ldr	r3, [r7, #12]
 800d776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	4a5b      	ldr	r2, [pc, #364]	; (800d8e8 <I2C_Slave_ISR_DMA+0x2a8>)
 800d77c:	4293      	cmp	r3, r2
 800d77e:	d00b      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d784:	681b      	ldr	r3, [r3, #0]
 800d786:	4a59      	ldr	r2, [pc, #356]	; (800d8ec <I2C_Slave_ISR_DMA+0x2ac>)
 800d788:	4293      	cmp	r3, r2
 800d78a:	d005      	beq.n	800d798 <I2C_Slave_ISR_DMA+0x158>
 800d78c:	68fb      	ldr	r3, [r7, #12]
 800d78e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	4a57      	ldr	r2, [pc, #348]	; (800d8f0 <I2C_Slave_ISR_DMA+0x2b0>)
 800d794:	4293      	cmp	r3, r2
 800d796:	d109      	bne.n	800d7ac <I2C_Slave_ISR_DMA+0x16c>
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	685b      	ldr	r3, [r3, #4]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	bf0c      	ite	eq
 800d7a4:	2301      	moveq	r3, #1
 800d7a6:	2300      	movne	r3, #0
 800d7a8:	b2db      	uxtb	r3, r3
 800d7aa:	e008      	b.n	800d7be <I2C_Slave_ISR_DMA+0x17e>
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	685b      	ldr	r3, [r3, #4]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	bf0c      	ite	eq
 800d7b8:	2301      	moveq	r3, #1
 800d7ba:	2300      	movne	r3, #0
 800d7bc:	b2db      	uxtb	r3, r3
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d001      	beq.n	800d7c6 <I2C_Slave_ISR_DMA+0x186>
          {
            treatdmanack = 1U;
 800d7c2:	2301      	movs	r3, #1
 800d7c4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	f000 809f 	beq.w	800d90e <I2C_Slave_ISR_DMA+0x2ce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	0b9b      	lsrs	r3, r3, #14
 800d7d4:	f003 0301 	and.w	r3, r3, #1
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f000 8098 	beq.w	800d90e <I2C_Slave_ISR_DMA+0x2ce>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	4a33      	ldr	r2, [pc, #204]	; (800d8b4 <I2C_Slave_ISR_DMA+0x274>)
 800d7e6:	4293      	cmp	r3, r2
 800d7e8:	d059      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	4a31      	ldr	r2, [pc, #196]	; (800d8b8 <I2C_Slave_ISR_DMA+0x278>)
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d053      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4a2f      	ldr	r2, [pc, #188]	; (800d8bc <I2C_Slave_ISR_DMA+0x27c>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d04d      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	4a2d      	ldr	r2, [pc, #180]	; (800d8c0 <I2C_Slave_ISR_DMA+0x280>)
 800d80a:	4293      	cmp	r3, r2
 800d80c:	d047      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d80e:	68fb      	ldr	r3, [r7, #12]
 800d810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	4a2b      	ldr	r2, [pc, #172]	; (800d8c4 <I2C_Slave_ISR_DMA+0x284>)
 800d816:	4293      	cmp	r3, r2
 800d818:	d041      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81e:	681b      	ldr	r3, [r3, #0]
 800d820:	4a29      	ldr	r2, [pc, #164]	; (800d8c8 <I2C_Slave_ISR_DMA+0x288>)
 800d822:	4293      	cmp	r3, r2
 800d824:	d03b      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	4a27      	ldr	r2, [pc, #156]	; (800d8cc <I2C_Slave_ISR_DMA+0x28c>)
 800d82e:	4293      	cmp	r3, r2
 800d830:	d035      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	4a25      	ldr	r2, [pc, #148]	; (800d8d0 <I2C_Slave_ISR_DMA+0x290>)
 800d83a:	4293      	cmp	r3, r2
 800d83c:	d02f      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4a23      	ldr	r2, [pc, #140]	; (800d8d4 <I2C_Slave_ISR_DMA+0x294>)
 800d846:	4293      	cmp	r3, r2
 800d848:	d029      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	4a21      	ldr	r2, [pc, #132]	; (800d8d8 <I2C_Slave_ISR_DMA+0x298>)
 800d852:	4293      	cmp	r3, r2
 800d854:	d023      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	4a1f      	ldr	r2, [pc, #124]	; (800d8dc <I2C_Slave_ISR_DMA+0x29c>)
 800d85e:	4293      	cmp	r3, r2
 800d860:	d01d      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	4a1d      	ldr	r2, [pc, #116]	; (800d8e0 <I2C_Slave_ISR_DMA+0x2a0>)
 800d86a:	4293      	cmp	r3, r2
 800d86c:	d017      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	4a1b      	ldr	r2, [pc, #108]	; (800d8e4 <I2C_Slave_ISR_DMA+0x2a4>)
 800d876:	4293      	cmp	r3, r2
 800d878:	d011      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	4a19      	ldr	r2, [pc, #100]	; (800d8e8 <I2C_Slave_ISR_DMA+0x2a8>)
 800d882:	4293      	cmp	r3, r2
 800d884:	d00b      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	4a17      	ldr	r2, [pc, #92]	; (800d8ec <I2C_Slave_ISR_DMA+0x2ac>)
 800d88e:	4293      	cmp	r3, r2
 800d890:	d005      	beq.n	800d89e <I2C_Slave_ISR_DMA+0x25e>
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	4a15      	ldr	r2, [pc, #84]	; (800d8f0 <I2C_Slave_ISR_DMA+0x2b0>)
 800d89a:	4293      	cmp	r3, r2
 800d89c:	d12a      	bne.n	800d8f4 <I2C_Slave_ISR_DMA+0x2b4>
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	685b      	ldr	r3, [r3, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	bf0c      	ite	eq
 800d8aa:	2301      	moveq	r3, #1
 800d8ac:	2300      	movne	r3, #0
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	e029      	b.n	800d906 <I2C_Slave_ISR_DMA+0x2c6>
 800d8b2:	bf00      	nop
 800d8b4:	40020010 	.word	0x40020010
 800d8b8:	40020028 	.word	0x40020028
 800d8bc:	40020040 	.word	0x40020040
 800d8c0:	40020058 	.word	0x40020058
 800d8c4:	40020070 	.word	0x40020070
 800d8c8:	40020088 	.word	0x40020088
 800d8cc:	400200a0 	.word	0x400200a0
 800d8d0:	400200b8 	.word	0x400200b8
 800d8d4:	40020410 	.word	0x40020410
 800d8d8:	40020428 	.word	0x40020428
 800d8dc:	40020440 	.word	0x40020440
 800d8e0:	40020458 	.word	0x40020458
 800d8e4:	40020470 	.word	0x40020470
 800d8e8:	40020488 	.word	0x40020488
 800d8ec:	400204a0 	.word	0x400204a0
 800d8f0:	400204b8 	.word	0x400204b8
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	685b      	ldr	r3, [r3, #4]
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	bf0c      	ite	eq
 800d900:	2301      	moveq	r3, #1
 800d902:	2300      	movne	r3, #0
 800d904:	b2db      	uxtb	r3, r3
 800d906:	2b00      	cmp	r3, #0
 800d908:	d001      	beq.n	800d90e <I2C_Slave_ISR_DMA+0x2ce>
          {
            treatdmanack = 1U;
 800d90a:	2301      	movs	r3, #1
 800d90c:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800d90e:	69fb      	ldr	r3, [r7, #28]
 800d910:	2b01      	cmp	r3, #1
 800d912:	d128      	bne.n	800d966 <I2C_Slave_ISR_DMA+0x326>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d91a:	b2db      	uxtb	r3, r3
 800d91c:	2b28      	cmp	r3, #40	; 0x28
 800d91e:	d108      	bne.n	800d932 <I2C_Slave_ISR_DMA+0x2f2>
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d926:	d104      	bne.n	800d932 <I2C_Slave_ISR_DMA+0x2f2>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800d928:	68b9      	ldr	r1, [r7, #8]
 800d92a:	68f8      	ldr	r0, [r7, #12]
 800d92c:	f000 fcb0 	bl	800e290 <I2C_ITListenCplt>
 800d930:	e048      	b.n	800d9c4 <I2C_Slave_ISR_DMA+0x384>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800d932:	68fb      	ldr	r3, [r7, #12]
 800d934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	2b29      	cmp	r3, #41	; 0x29
 800d93c:	d10e      	bne.n	800d95c <I2C_Slave_ISR_DMA+0x31c>
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800d944:	d00a      	beq.n	800d95c <I2C_Slave_ISR_DMA+0x31c>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	2210      	movs	r2, #16
 800d94c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800d94e:	68f8      	ldr	r0, [r7, #12]
 800d950:	f000 fe0b 	bl	800e56a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800d954:	68f8      	ldr	r0, [r7, #12]
 800d956:	f000 f918 	bl	800db8a <I2C_ITSlaveSeqCplt>
 800d95a:	e033      	b.n	800d9c4 <I2C_Slave_ISR_DMA+0x384>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	2210      	movs	r2, #16
 800d962:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800d964:	e034      	b.n	800d9d0 <I2C_Slave_ISR_DMA+0x390>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2210      	movs	r2, #16
 800d96c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d972:	f043 0204 	orr.w	r2, r3, #4
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d980:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800d982:	69bb      	ldr	r3, [r7, #24]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d003      	beq.n	800d990 <I2C_Slave_ISR_DMA+0x350>
 800d988:	69bb      	ldr	r3, [r7, #24]
 800d98a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d98e:	d11f      	bne.n	800d9d0 <I2C_Slave_ISR_DMA+0x390>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800d990:	7dfb      	ldrb	r3, [r7, #23]
 800d992:	2b21      	cmp	r3, #33	; 0x21
 800d994:	d002      	beq.n	800d99c <I2C_Slave_ISR_DMA+0x35c>
 800d996:	7dfb      	ldrb	r3, [r7, #23]
 800d998:	2b29      	cmp	r3, #41	; 0x29
 800d99a:	d103      	bne.n	800d9a4 <I2C_Slave_ISR_DMA+0x364>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	2221      	movs	r2, #33	; 0x21
 800d9a0:	631a      	str	r2, [r3, #48]	; 0x30
 800d9a2:	e008      	b.n	800d9b6 <I2C_Slave_ISR_DMA+0x376>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800d9a4:	7dfb      	ldrb	r3, [r7, #23]
 800d9a6:	2b22      	cmp	r3, #34	; 0x22
 800d9a8:	d002      	beq.n	800d9b0 <I2C_Slave_ISR_DMA+0x370>
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
 800d9ac:	2b2a      	cmp	r3, #42	; 0x2a
 800d9ae:	d102      	bne.n	800d9b6 <I2C_Slave_ISR_DMA+0x376>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	2222      	movs	r2, #34	; 0x22
 800d9b4:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9ba:	4619      	mov	r1, r3
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f000 fcbd 	bl	800e33c <I2C_ITError>
      if (treatdmanack == 1U)
 800d9c2:	e005      	b.n	800d9d0 <I2C_Slave_ISR_DMA+0x390>
 800d9c4:	e004      	b.n	800d9d0 <I2C_Slave_ISR_DMA+0x390>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	2210      	movs	r2, #16
 800d9cc:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d9ce:	e011      	b.n	800d9f4 <I2C_Slave_ISR_DMA+0x3b4>
      if (treatdmanack == 1U)
 800d9d0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800d9d2:	e00f      	b.n	800d9f4 <I2C_Slave_ISR_DMA+0x3b4>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	08db      	lsrs	r3, r3, #3
 800d9d8:	f003 0301 	and.w	r3, r3, #1
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d009      	beq.n	800d9f4 <I2C_Slave_ISR_DMA+0x3b4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800d9e0:	687b      	ldr	r3, [r7, #4]
 800d9e2:	08db      	lsrs	r3, r3, #3
 800d9e4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d003      	beq.n	800d9f4 <I2C_Slave_ISR_DMA+0x3b4>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800d9ec:	68b9      	ldr	r1, [r7, #8]
 800d9ee:	68f8      	ldr	r0, [r7, #12]
 800d9f0:	f000 f80a 	bl	800da08 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800d9fc:	2300      	movs	r3, #0
}
 800d9fe:	4618      	mov	r0, r3
 800da00:	3720      	adds	r7, #32
 800da02:	46bd      	mov	sp, r7
 800da04:	bd80      	pop	{r7, pc}
 800da06:	bf00      	nop

0800da08 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b084      	sub	sp, #16
 800da0c:	af00      	add	r7, sp, #0
 800da0e:	6078      	str	r0, [r7, #4]
 800da10:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800da18:	b2db      	uxtb	r3, r3
 800da1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800da1e:	2b28      	cmp	r3, #40	; 0x28
 800da20:	d16a      	bne.n	800daf8 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	699b      	ldr	r3, [r3, #24]
 800da28:	0c1b      	lsrs	r3, r3, #16
 800da2a:	b2db      	uxtb	r3, r3
 800da2c:	f003 0301 	and.w	r3, r3, #1
 800da30:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	699b      	ldr	r3, [r3, #24]
 800da38:	0c1b      	lsrs	r3, r3, #16
 800da3a:	b29b      	uxth	r3, r3
 800da3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800da40:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	689b      	ldr	r3, [r3, #8]
 800da48:	b29b      	uxth	r3, r3
 800da4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800da4e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	68db      	ldr	r3, [r3, #12]
 800da56:	b29b      	uxth	r3, r3
 800da58:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800da5c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68db      	ldr	r3, [r3, #12]
 800da62:	2b02      	cmp	r3, #2
 800da64:	d138      	bne.n	800dad8 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800da66:	897b      	ldrh	r3, [r7, #10]
 800da68:	09db      	lsrs	r3, r3, #7
 800da6a:	b29a      	uxth	r2, r3
 800da6c:	89bb      	ldrh	r3, [r7, #12]
 800da6e:	4053      	eors	r3, r2
 800da70:	b29b      	uxth	r3, r3
 800da72:	f003 0306 	and.w	r3, r3, #6
 800da76:	2b00      	cmp	r3, #0
 800da78:	d11c      	bne.n	800dab4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800da7a:	897b      	ldrh	r3, [r7, #10]
 800da7c:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da82:	1c5a      	adds	r2, r3, #1
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800da8c:	2b02      	cmp	r3, #2
 800da8e:	d13b      	bne.n	800db08 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2200      	movs	r2, #0
 800da94:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	2208      	movs	r2, #8
 800da9c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	2200      	movs	r2, #0
 800daa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800daa6:	89ba      	ldrh	r2, [r7, #12]
 800daa8:	7bfb      	ldrb	r3, [r7, #15]
 800daaa:	4619      	mov	r1, r3
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f7ff f91e 	bl	800ccee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800dab2:	e029      	b.n	800db08 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800dab4:	893b      	ldrh	r3, [r7, #8]
 800dab6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800dab8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f001 f81d 	bl	800eafc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2200      	movs	r2, #0
 800dac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800daca:	89ba      	ldrh	r2, [r7, #12]
 800dacc:	7bfb      	ldrb	r3, [r7, #15]
 800dace:	4619      	mov	r1, r3
 800dad0:	6878      	ldr	r0, [r7, #4]
 800dad2:	f7ff f90c 	bl	800ccee <HAL_I2C_AddrCallback>
}
 800dad6:	e017      	b.n	800db08 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800dad8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800dadc:	6878      	ldr	r0, [r7, #4]
 800dade:	f001 f80d 	bl	800eafc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	2200      	movs	r2, #0
 800dae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800daea:	89ba      	ldrh	r2, [r7, #12]
 800daec:	7bfb      	ldrb	r3, [r7, #15]
 800daee:	4619      	mov	r1, r3
 800daf0:	6878      	ldr	r0, [r7, #4]
 800daf2:	f7ff f8fc 	bl	800ccee <HAL_I2C_AddrCallback>
}
 800daf6:	e007      	b.n	800db08 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	2208      	movs	r2, #8
 800dafe:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	2200      	movs	r2, #0
 800db04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800db08:	bf00      	nop
 800db0a:	3710      	adds	r7, #16
 800db0c:	46bd      	mov	sp, r7
 800db0e:	bd80      	pop	{r7, pc}

0800db10 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b082      	sub	sp, #8
 800db14:	af00      	add	r7, sp, #0
 800db16:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2200      	movs	r2, #0
 800db1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800db26:	b2db      	uxtb	r3, r3
 800db28:	2b21      	cmp	r3, #33	; 0x21
 800db2a:	d115      	bne.n	800db58 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2220      	movs	r2, #32
 800db30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2211      	movs	r2, #17
 800db38:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800db40:	2101      	movs	r1, #1
 800db42:	6878      	ldr	r0, [r7, #4]
 800db44:	f000 ffda 	bl	800eafc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	2200      	movs	r2, #0
 800db4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800db50:	6878      	ldr	r0, [r7, #4]
 800db52:	f7ff f8a4 	bl	800cc9e <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800db56:	e014      	b.n	800db82 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2220      	movs	r2, #32
 800db5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2212      	movs	r2, #18
 800db64:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800db6c:	2102      	movs	r1, #2
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 ffc4 	bl	800eafc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	2200      	movs	r2, #0
 800db78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800db7c:	6878      	ldr	r0, [r7, #4]
 800db7e:	f7ff f898 	bl	800ccb2 <HAL_I2C_MasterRxCpltCallback>
}
 800db82:	bf00      	nop
 800db84:	3708      	adds	r7, #8
 800db86:	46bd      	mov	sp, r7
 800db88:	bd80      	pop	{r7, pc}

0800db8a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b084      	sub	sp, #16
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	681b      	ldr	r3, [r3, #0]
 800db98:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	2200      	movs	r2, #0
 800db9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	0b9b      	lsrs	r3, r3, #14
 800dba6:	f003 0301 	and.w	r3, r3, #1
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d008      	beq.n	800dbc0 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	681a      	ldr	r2, [r3, #0]
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800dbbc:	601a      	str	r2, [r3, #0]
 800dbbe:	e00d      	b.n	800dbdc <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	0bdb      	lsrs	r3, r3, #15
 800dbc4:	f003 0301 	and.w	r3, r3, #1
 800dbc8:	2b00      	cmp	r3, #0
 800dbca:	d007      	beq.n	800dbdc <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	681a      	ldr	r2, [r3, #0]
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dbda:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dbe2:	b2db      	uxtb	r3, r3
 800dbe4:	2b29      	cmp	r3, #41	; 0x29
 800dbe6:	d112      	bne.n	800dc0e <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2228      	movs	r2, #40	; 0x28
 800dbec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2221      	movs	r2, #33	; 0x21
 800dbf4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dbf6:	2101      	movs	r1, #1
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 ff7f 	bl	800eafc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2200      	movs	r2, #0
 800dc02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800dc06:	6878      	ldr	r0, [r7, #4]
 800dc08:	f7ff f85d 	bl	800ccc6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dc0c:	e017      	b.n	800dc3e <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc14:	b2db      	uxtb	r3, r3
 800dc16:	2b2a      	cmp	r3, #42	; 0x2a
 800dc18:	d111      	bne.n	800dc3e <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2228      	movs	r2, #40	; 0x28
 800dc1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	2222      	movs	r2, #34	; 0x22
 800dc26:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dc28:	2102      	movs	r1, #2
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 ff66 	bl	800eafc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2200      	movs	r2, #0
 800dc34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800dc38:	6878      	ldr	r0, [r7, #4]
 800dc3a:	f7ff f84e 	bl	800ccda <HAL_I2C_SlaveRxCpltCallback>
}
 800dc3e:	bf00      	nop
 800dc40:	3710      	adds	r7, #16
 800dc42:	46bd      	mov	sp, r7
 800dc44:	bd80      	pop	{r7, pc}
	...

0800dc48 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dc48:	b580      	push	{r7, lr}
 800dc4a:	b086      	sub	sp, #24
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
 800dc50:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800dc52:	683b      	ldr	r3, [r7, #0]
 800dc54:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	2220      	movs	r2, #32
 800dc5c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc64:	b2db      	uxtb	r3, r3
 800dc66:	2b21      	cmp	r3, #33	; 0x21
 800dc68:	d107      	bne.n	800dc7a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 ff45 	bl	800eafc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	2211      	movs	r2, #17
 800dc76:	631a      	str	r2, [r3, #48]	; 0x30
 800dc78:	e00c      	b.n	800dc94 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc80:	b2db      	uxtb	r3, r3
 800dc82:	2b22      	cmp	r3, #34	; 0x22
 800dc84:	d106      	bne.n	800dc94 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800dc86:	2102      	movs	r1, #2
 800dc88:	6878      	ldr	r0, [r7, #4]
 800dc8a:	f000 ff37 	bl	800eafc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2212      	movs	r2, #18
 800dc92:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	6859      	ldr	r1, [r3, #4]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	4b4d      	ldr	r3, [pc, #308]	; (800ddd4 <I2C_ITMasterCplt+0x18c>)
 800dca0:	400b      	ands	r3, r1
 800dca2:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2200      	movs	r2, #0
 800dca8:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	4a4a      	ldr	r2, [pc, #296]	; (800ddd8 <I2C_ITMasterCplt+0x190>)
 800dcae:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	091b      	lsrs	r3, r3, #4
 800dcb4:	f003 0301 	and.w	r3, r3, #1
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d009      	beq.n	800dcd0 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	2210      	movs	r2, #16
 800dcc2:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcc8:	f043 0204 	orr.w	r2, r3, #4
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dcd6:	b2db      	uxtb	r3, r3
 800dcd8:	2b60      	cmp	r3, #96	; 0x60
 800dcda:	d10b      	bne.n	800dcf4 <I2C_ITMasterCplt+0xac>
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	089b      	lsrs	r3, r3, #2
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d005      	beq.n	800dcf4 <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dcee:	b2db      	uxtb	r3, r3
 800dcf0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800dcf2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800dcf4:	6878      	ldr	r0, [r7, #4]
 800dcf6:	f000 fc38 	bl	800e56a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dcfe:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	2b60      	cmp	r3, #96	; 0x60
 800dd0a:	d002      	beq.n	800dd12 <I2C_ITMasterCplt+0xca>
 800dd0c:	693b      	ldr	r3, [r7, #16]
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d006      	beq.n	800dd20 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dd16:	4619      	mov	r1, r3
 800dd18:	6878      	ldr	r0, [r7, #4]
 800dd1a:	f000 fb0f 	bl	800e33c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dd1e:	e054      	b.n	800ddca <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	2b21      	cmp	r3, #33	; 0x21
 800dd2a:	d124      	bne.n	800dd76 <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 800dd2c:	687b      	ldr	r3, [r7, #4]
 800dd2e:	2220      	movs	r2, #32
 800dd30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	2200      	movs	r2, #0
 800dd38:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd40:	b2db      	uxtb	r3, r3
 800dd42:	2b40      	cmp	r3, #64	; 0x40
 800dd44:	d10b      	bne.n	800dd5e <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	2200      	movs	r2, #0
 800dd4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	2200      	movs	r2, #0
 800dd52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800dd56:	6878      	ldr	r0, [r7, #4]
 800dd58:	f7fe ffe1 	bl	800cd1e <HAL_I2C_MemTxCpltCallback>
}
 800dd5c:	e035      	b.n	800ddca <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2200      	movs	r2, #0
 800dd62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2200      	movs	r2, #0
 800dd6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f7fe ff95 	bl	800cc9e <HAL_I2C_MasterTxCpltCallback>
}
 800dd74:	e029      	b.n	800ddca <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dd7c:	b2db      	uxtb	r3, r3
 800dd7e:	2b22      	cmp	r3, #34	; 0x22
 800dd80:	d123      	bne.n	800ddca <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2220      	movs	r2, #32
 800dd86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dd96:	b2db      	uxtb	r3, r3
 800dd98:	2b40      	cmp	r3, #64	; 0x40
 800dd9a:	d10b      	bne.n	800ddb4 <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2200      	movs	r2, #0
 800dda8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800ddac:	6878      	ldr	r0, [r7, #4]
 800ddae:	f7fe ffc0 	bl	800cd32 <HAL_I2C_MemRxCpltCallback>
}
 800ddb2:	e00a      	b.n	800ddca <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	2200      	movs	r2, #0
 800ddc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800ddc4:	6878      	ldr	r0, [r7, #4]
 800ddc6:	f7fe ff74 	bl	800ccb2 <HAL_I2C_MasterRxCpltCallback>
}
 800ddca:	bf00      	nop
 800ddcc:	3718      	adds	r7, #24
 800ddce:	46bd      	mov	sp, r7
 800ddd0:	bd80      	pop	{r7, pc}
 800ddd2:	bf00      	nop
 800ddd4:	fe00e800 	.word	0xfe00e800
 800ddd8:	ffff0000 	.word	0xffff0000

0800dddc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b086      	sub	sp, #24
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
 800dde4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800ddee:	683b      	ldr	r3, [r7, #0]
 800ddf0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ddfe:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	2220      	movs	r2, #32
 800de06:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800de08:	7afb      	ldrb	r3, [r7, #11]
 800de0a:	2b21      	cmp	r3, #33	; 0x21
 800de0c:	d002      	beq.n	800de14 <I2C_ITSlaveCplt+0x38>
 800de0e:	7afb      	ldrb	r3, [r7, #11]
 800de10:	2b29      	cmp	r3, #41	; 0x29
 800de12:	d108      	bne.n	800de26 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800de14:	f248 0101 	movw	r1, #32769	; 0x8001
 800de18:	6878      	ldr	r0, [r7, #4]
 800de1a:	f000 fe6f 	bl	800eafc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	2221      	movs	r2, #33	; 0x21
 800de22:	631a      	str	r2, [r3, #48]	; 0x30
 800de24:	e019      	b.n	800de5a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800de26:	7afb      	ldrb	r3, [r7, #11]
 800de28:	2b22      	cmp	r3, #34	; 0x22
 800de2a:	d002      	beq.n	800de32 <I2C_ITSlaveCplt+0x56>
 800de2c:	7afb      	ldrb	r3, [r7, #11]
 800de2e:	2b2a      	cmp	r3, #42	; 0x2a
 800de30:	d108      	bne.n	800de44 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800de32:	f248 0102 	movw	r1, #32770	; 0x8002
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 fe60 	bl	800eafc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2222      	movs	r2, #34	; 0x22
 800de40:	631a      	str	r2, [r3, #48]	; 0x30
 800de42:	e00a      	b.n	800de5a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800de44:	7afb      	ldrb	r3, [r7, #11]
 800de46:	2b28      	cmp	r3, #40	; 0x28
 800de48:	d107      	bne.n	800de5a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800de4a:	f248 0103 	movw	r1, #32771	; 0x8003
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 fe54 	bl	800eafc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	685a      	ldr	r2, [r3, #4]
 800de60:	687b      	ldr	r3, [r7, #4]
 800de62:	681b      	ldr	r3, [r3, #0]
 800de64:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800de68:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	6859      	ldr	r1, [r3, #4]
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	681a      	ldr	r2, [r3, #0]
 800de74:	4b80      	ldr	r3, [pc, #512]	; (800e078 <I2C_ITSlaveCplt+0x29c>)
 800de76:	400b      	ands	r3, r1
 800de78:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800de7a:	6878      	ldr	r0, [r7, #4]
 800de7c:	f000 fb75 	bl	800e56a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	0b9b      	lsrs	r3, r3, #14
 800de84:	f003 0301 	and.w	r3, r3, #1
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d07a      	beq.n	800df82 <I2C_ITSlaveCplt+0x1a6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	681a      	ldr	r2, [r3, #0]
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800de9a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	f000 8112 	beq.w	800e0ca <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deaa:	681b      	ldr	r3, [r3, #0]
 800deac:	4a73      	ldr	r2, [pc, #460]	; (800e07c <I2C_ITSlaveCplt+0x2a0>)
 800deae:	4293      	cmp	r3, r2
 800deb0:	d059      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	4a71      	ldr	r2, [pc, #452]	; (800e080 <I2C_ITSlaveCplt+0x2a4>)
 800deba:	4293      	cmp	r3, r2
 800debc:	d053      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4a6f      	ldr	r2, [pc, #444]	; (800e084 <I2C_ITSlaveCplt+0x2a8>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d04d      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	4a6d      	ldr	r2, [pc, #436]	; (800e088 <I2C_ITSlaveCplt+0x2ac>)
 800ded2:	4293      	cmp	r3, r2
 800ded4:	d047      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4a6b      	ldr	r2, [pc, #428]	; (800e08c <I2C_ITSlaveCplt+0x2b0>)
 800dede:	4293      	cmp	r3, r2
 800dee0:	d041      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	4a69      	ldr	r2, [pc, #420]	; (800e090 <I2C_ITSlaveCplt+0x2b4>)
 800deea:	4293      	cmp	r3, r2
 800deec:	d03b      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	4a67      	ldr	r2, [pc, #412]	; (800e094 <I2C_ITSlaveCplt+0x2b8>)
 800def6:	4293      	cmp	r3, r2
 800def8:	d035      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	4a65      	ldr	r2, [pc, #404]	; (800e098 <I2C_ITSlaveCplt+0x2bc>)
 800df02:	4293      	cmp	r3, r2
 800df04:	d02f      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	4a63      	ldr	r2, [pc, #396]	; (800e09c <I2C_ITSlaveCplt+0x2c0>)
 800df0e:	4293      	cmp	r3, r2
 800df10:	d029      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4a61      	ldr	r2, [pc, #388]	; (800e0a0 <I2C_ITSlaveCplt+0x2c4>)
 800df1a:	4293      	cmp	r3, r2
 800df1c:	d023      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	4a5f      	ldr	r2, [pc, #380]	; (800e0a4 <I2C_ITSlaveCplt+0x2c8>)
 800df26:	4293      	cmp	r3, r2
 800df28:	d01d      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	4a5d      	ldr	r2, [pc, #372]	; (800e0a8 <I2C_ITSlaveCplt+0x2cc>)
 800df32:	4293      	cmp	r3, r2
 800df34:	d017      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df3a:	681b      	ldr	r3, [r3, #0]
 800df3c:	4a5b      	ldr	r2, [pc, #364]	; (800e0ac <I2C_ITSlaveCplt+0x2d0>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d011      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	4a59      	ldr	r2, [pc, #356]	; (800e0b0 <I2C_ITSlaveCplt+0x2d4>)
 800df4a:	4293      	cmp	r3, r2
 800df4c:	d00b      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	4a57      	ldr	r2, [pc, #348]	; (800e0b4 <I2C_ITSlaveCplt+0x2d8>)
 800df56:	4293      	cmp	r3, r2
 800df58:	d005      	beq.n	800df66 <I2C_ITSlaveCplt+0x18a>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	4a55      	ldr	r2, [pc, #340]	; (800e0b8 <I2C_ITSlaveCplt+0x2dc>)
 800df62:	4293      	cmp	r3, r2
 800df64:	d105      	bne.n	800df72 <I2C_ITSlaveCplt+0x196>
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	685b      	ldr	r3, [r3, #4]
 800df6e:	b29b      	uxth	r3, r3
 800df70:	e004      	b.n	800df7c <I2C_ITSlaveCplt+0x1a0>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	b29b      	uxth	r3, r3
 800df7c:	687a      	ldr	r2, [r7, #4]
 800df7e:	8553      	strh	r3, [r2, #42]	; 0x2a
 800df80:	e0a3      	b.n	800e0ca <I2C_ITSlaveCplt+0x2ee>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	0bdb      	lsrs	r3, r3, #15
 800df86:	f003 0301 	and.w	r3, r3, #1
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	f000 809d 	beq.w	800e0ca <I2C_ITSlaveCplt+0x2ee>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	681a      	ldr	r2, [r3, #0]
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800df9e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	f000 8090 	beq.w	800e0ca <I2C_ITSlaveCplt+0x2ee>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	4a32      	ldr	r2, [pc, #200]	; (800e07c <I2C_ITSlaveCplt+0x2a0>)
 800dfb2:	4293      	cmp	r3, r2
 800dfb4:	d059      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	4a30      	ldr	r2, [pc, #192]	; (800e080 <I2C_ITSlaveCplt+0x2a4>)
 800dfbe:	4293      	cmp	r3, r2
 800dfc0:	d053      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a2e      	ldr	r2, [pc, #184]	; (800e084 <I2C_ITSlaveCplt+0x2a8>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d04d      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	4a2c      	ldr	r2, [pc, #176]	; (800e088 <I2C_ITSlaveCplt+0x2ac>)
 800dfd6:	4293      	cmp	r3, r2
 800dfd8:	d047      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	4a2a      	ldr	r2, [pc, #168]	; (800e08c <I2C_ITSlaveCplt+0x2b0>)
 800dfe2:	4293      	cmp	r3, r2
 800dfe4:	d041      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	4a28      	ldr	r2, [pc, #160]	; (800e090 <I2C_ITSlaveCplt+0x2b4>)
 800dfee:	4293      	cmp	r3, r2
 800dff0:	d03b      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	4a26      	ldr	r2, [pc, #152]	; (800e094 <I2C_ITSlaveCplt+0x2b8>)
 800dffa:	4293      	cmp	r3, r2
 800dffc:	d035      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a24      	ldr	r2, [pc, #144]	; (800e098 <I2C_ITSlaveCplt+0x2bc>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d02f      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	4a22      	ldr	r2, [pc, #136]	; (800e09c <I2C_ITSlaveCplt+0x2c0>)
 800e012:	4293      	cmp	r3, r2
 800e014:	d029      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	4a20      	ldr	r2, [pc, #128]	; (800e0a0 <I2C_ITSlaveCplt+0x2c4>)
 800e01e:	4293      	cmp	r3, r2
 800e020:	d023      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	4a1e      	ldr	r2, [pc, #120]	; (800e0a4 <I2C_ITSlaveCplt+0x2c8>)
 800e02a:	4293      	cmp	r3, r2
 800e02c:	d01d      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	4a1c      	ldr	r2, [pc, #112]	; (800e0a8 <I2C_ITSlaveCplt+0x2cc>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d017      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4a1a      	ldr	r2, [pc, #104]	; (800e0ac <I2C_ITSlaveCplt+0x2d0>)
 800e042:	4293      	cmp	r3, r2
 800e044:	d011      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	4a18      	ldr	r2, [pc, #96]	; (800e0b0 <I2C_ITSlaveCplt+0x2d4>)
 800e04e:	4293      	cmp	r3, r2
 800e050:	d00b      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e056:	681b      	ldr	r3, [r3, #0]
 800e058:	4a16      	ldr	r2, [pc, #88]	; (800e0b4 <I2C_ITSlaveCplt+0x2d8>)
 800e05a:	4293      	cmp	r3, r2
 800e05c:	d005      	beq.n	800e06a <I2C_ITSlaveCplt+0x28e>
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	4a14      	ldr	r2, [pc, #80]	; (800e0b8 <I2C_ITSlaveCplt+0x2dc>)
 800e066:	4293      	cmp	r3, r2
 800e068:	d128      	bne.n	800e0bc <I2C_ITSlaveCplt+0x2e0>
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	685b      	ldr	r3, [r3, #4]
 800e072:	b29b      	uxth	r3, r3
 800e074:	e027      	b.n	800e0c6 <I2C_ITSlaveCplt+0x2ea>
 800e076:	bf00      	nop
 800e078:	fe00e800 	.word	0xfe00e800
 800e07c:	40020010 	.word	0x40020010
 800e080:	40020028 	.word	0x40020028
 800e084:	40020040 	.word	0x40020040
 800e088:	40020058 	.word	0x40020058
 800e08c:	40020070 	.word	0x40020070
 800e090:	40020088 	.word	0x40020088
 800e094:	400200a0 	.word	0x400200a0
 800e098:	400200b8 	.word	0x400200b8
 800e09c:	40020410 	.word	0x40020410
 800e0a0:	40020428 	.word	0x40020428
 800e0a4:	40020440 	.word	0x40020440
 800e0a8:	40020458 	.word	0x40020458
 800e0ac:	40020470 	.word	0x40020470
 800e0b0:	40020488 	.word	0x40020488
 800e0b4:	400204a0 	.word	0x400204a0
 800e0b8:	400204b8 	.word	0x400204b8
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	685b      	ldr	r3, [r3, #4]
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	8553      	strh	r3, [r2, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e0ca:	697b      	ldr	r3, [r7, #20]
 800e0cc:	089b      	lsrs	r3, r3, #2
 800e0ce:	f003 0301 	and.w	r3, r3, #1
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d020      	beq.n	800e118 <I2C_ITSlaveCplt+0x33c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e0d6:	697b      	ldr	r3, [r7, #20]
 800e0d8:	f023 0304 	bic.w	r3, r3, #4
 800e0dc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e8:	b2d2      	uxtb	r2, r2
 800e0ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0f0:	1c5a      	adds	r2, r3, #1
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d00c      	beq.n	800e118 <I2C_ITSlaveCplt+0x33c>
    {
      hi2c->XferSize--;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e102:	3b01      	subs	r3, #1
 800e104:	b29a      	uxth	r2, r3
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e10e:	b29b      	uxth	r3, r3
 800e110:	3b01      	subs	r3, #1
 800e112:	b29a      	uxth	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d005      	beq.n	800e12e <I2C_ITSlaveCplt+0x352>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e126:	f043 0204 	orr.w	r2, r3, #4
 800e12a:	687b      	ldr	r3, [r7, #4]
 800e12c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	091b      	lsrs	r3, r3, #4
 800e132:	f003 0301 	and.w	r3, r3, #1
 800e136:	2b00      	cmp	r3, #0
 800e138:	d04a      	beq.n	800e1d0 <I2C_ITSlaveCplt+0x3f4>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	091b      	lsrs	r3, r3, #4
 800e13e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800e142:	2b00      	cmp	r3, #0
 800e144:	d044      	beq.n	800e1d0 <I2C_ITSlaveCplt+0x3f4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e14a:	b29b      	uxth	r3, r3
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d128      	bne.n	800e1a2 <I2C_ITSlaveCplt+0x3c6>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e156:	b2db      	uxtb	r3, r3
 800e158:	2b28      	cmp	r3, #40	; 0x28
 800e15a:	d108      	bne.n	800e16e <I2C_ITSlaveCplt+0x392>
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e162:	d104      	bne.n	800e16e <I2C_ITSlaveCplt+0x392>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800e164:	6979      	ldr	r1, [r7, #20]
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 f892 	bl	800e290 <I2C_ITListenCplt>
 800e16c:	e030      	b.n	800e1d0 <I2C_ITSlaveCplt+0x3f4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e174:	b2db      	uxtb	r3, r3
 800e176:	2b29      	cmp	r3, #41	; 0x29
 800e178:	d10e      	bne.n	800e198 <I2C_ITSlaveCplt+0x3bc>
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e180:	d00a      	beq.n	800e198 <I2C_ITSlaveCplt+0x3bc>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2210      	movs	r2, #16
 800e188:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800e18a:	6878      	ldr	r0, [r7, #4]
 800e18c:	f000 f9ed 	bl	800e56a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f7ff fcfa 	bl	800db8a <I2C_ITSlaveSeqCplt>
 800e196:	e01b      	b.n	800e1d0 <I2C_ITSlaveCplt+0x3f4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	2210      	movs	r2, #16
 800e19e:	61da      	str	r2, [r3, #28]
 800e1a0:	e016      	b.n	800e1d0 <I2C_ITSlaveCplt+0x3f4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2210      	movs	r2, #16
 800e1a8:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ae:	f043 0204 	orr.w	r2, r3, #4
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d003      	beq.n	800e1c4 <I2C_ITSlaveCplt+0x3e8>
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800e1c2:	d105      	bne.n	800e1d0 <I2C_ITSlaveCplt+0x3f4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	f000 f8b6 	bl	800e33c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2200      	movs	r2, #0
 800e1d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d010      	beq.n	800e208 <I2C_ITSlaveCplt+0x42c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f000 f8a5 	bl	800e33c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e1f8:	b2db      	uxtb	r3, r3
 800e1fa:	2b28      	cmp	r3, #40	; 0x28
 800e1fc:	d141      	bne.n	800e282 <I2C_ITSlaveCplt+0x4a6>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800e1fe:	6979      	ldr	r1, [r7, #20]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 f845 	bl	800e290 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e206:	e03c      	b.n	800e282 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e20c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800e210:	d014      	beq.n	800e23c <I2C_ITSlaveCplt+0x460>
    I2C_ITSlaveSeqCplt(hi2c);
 800e212:	6878      	ldr	r0, [r7, #4]
 800e214:	f7ff fcb9 	bl	800db8a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	4a1c      	ldr	r2, [pc, #112]	; (800e28c <I2C_ITSlaveCplt+0x4b0>)
 800e21c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800e21e:	687b      	ldr	r3, [r7, #4]
 800e220:	2220      	movs	r2, #32
 800e222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	2200      	movs	r2, #0
 800e22a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	2200      	movs	r2, #0
 800e230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	f7fe fd68 	bl	800cd0a <HAL_I2C_ListenCpltCallback>
}
 800e23a:	e022      	b.n	800e282 <I2C_ITSlaveCplt+0x4a6>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e242:	b2db      	uxtb	r3, r3
 800e244:	2b22      	cmp	r3, #34	; 0x22
 800e246:	d10e      	bne.n	800e266 <I2C_ITSlaveCplt+0x48a>
    hi2c->State = HAL_I2C_STATE_READY;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2220      	movs	r2, #32
 800e24c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	2200      	movs	r2, #0
 800e254:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	2200      	movs	r2, #0
 800e25a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f7fe fd3b 	bl	800ccda <HAL_I2C_SlaveRxCpltCallback>
}
 800e264:	e00d      	b.n	800e282 <I2C_ITSlaveCplt+0x4a6>
    hi2c->State = HAL_I2C_STATE_READY;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2220      	movs	r2, #32
 800e26a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	2200      	movs	r2, #0
 800e272:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e274:	687b      	ldr	r3, [r7, #4]
 800e276:	2200      	movs	r2, #0
 800e278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f7fe fd22 	bl	800ccc6 <HAL_I2C_SlaveTxCpltCallback>
}
 800e282:	bf00      	nop
 800e284:	3718      	adds	r7, #24
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	ffff0000 	.word	0xffff0000

0800e290 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	4a26      	ldr	r2, [pc, #152]	; (800e338 <I2C_ITListenCplt+0xa8>)
 800e29e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2220      	movs	r2, #32
 800e2aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	2200      	movs	r2, #0
 800e2b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800e2b6:	687b      	ldr	r3, [r7, #4]
 800e2b8:	2200      	movs	r2, #0
 800e2ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800e2bc:	683b      	ldr	r3, [r7, #0]
 800e2be:	089b      	lsrs	r3, r3, #2
 800e2c0:	f003 0301 	and.w	r3, r3, #1
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d022      	beq.n	800e30e <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2d2:	b2d2      	uxtb	r2, r2
 800e2d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2da:	1c5a      	adds	r2, r3, #1
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	d012      	beq.n	800e30e <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e2ec:	3b01      	subs	r3, #1
 800e2ee:	b29a      	uxth	r2, r3
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e2f8:	b29b      	uxth	r3, r3
 800e2fa:	3b01      	subs	r3, #1
 800e2fc:	b29a      	uxth	r2, r3
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e306:	f043 0204 	orr.w	r2, r3, #4
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e30e:	f248 0103 	movw	r1, #32771	; 0x8003
 800e312:	6878      	ldr	r0, [r7, #4]
 800e314:	f000 fbf2 	bl	800eafc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2210      	movs	r2, #16
 800e31e:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800e328:	6878      	ldr	r0, [r7, #4]
 800e32a:	f7fe fcee 	bl	800cd0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800e32e:	bf00      	nop
 800e330:	3708      	adds	r7, #8
 800e332:	46bd      	mov	sp, r7
 800e334:	bd80      	pop	{r7, pc}
 800e336:	bf00      	nop
 800e338:	ffff0000 	.word	0xffff0000

0800e33c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
 800e344:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e34c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2200      	movs	r2, #0
 800e352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	4a6d      	ldr	r2, [pc, #436]	; (800e510 <I2C_ITError+0x1d4>)
 800e35a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2200      	movs	r2, #0
 800e360:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e366:	683b      	ldr	r3, [r7, #0]
 800e368:	431a      	orrs	r2, r3
 800e36a:	687b      	ldr	r3, [r7, #4]
 800e36c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	2b28      	cmp	r3, #40	; 0x28
 800e372:	d005      	beq.n	800e380 <I2C_ITError+0x44>
 800e374:	7bfb      	ldrb	r3, [r7, #15]
 800e376:	2b29      	cmp	r3, #41	; 0x29
 800e378:	d002      	beq.n	800e380 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800e37a:	7bfb      	ldrb	r3, [r7, #15]
 800e37c:	2b2a      	cmp	r3, #42	; 0x2a
 800e37e:	d10b      	bne.n	800e398 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e380:	2103      	movs	r1, #3
 800e382:	6878      	ldr	r0, [r7, #4]
 800e384:	f000 fbba 	bl	800eafc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	2228      	movs	r2, #40	; 0x28
 800e38c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	4a60      	ldr	r2, [pc, #384]	; (800e514 <I2C_ITError+0x1d8>)
 800e394:	635a      	str	r2, [r3, #52]	; 0x34
 800e396:	e030      	b.n	800e3fa <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800e398:	f248 0103 	movw	r1, #32771	; 0x8003
 800e39c:	6878      	ldr	r0, [r7, #4]
 800e39e:	f000 fbad 	bl	800eafc <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 f8e1 	bl	800e56a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	2b60      	cmp	r3, #96	; 0x60
 800e3b2:	d01f      	beq.n	800e3f4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	2220      	movs	r2, #32
 800e3b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	699b      	ldr	r3, [r3, #24]
 800e3c2:	f003 0320 	and.w	r3, r3, #32
 800e3c6:	2b20      	cmp	r3, #32
 800e3c8:	d114      	bne.n	800e3f4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	699b      	ldr	r3, [r3, #24]
 800e3d0:	f003 0310 	and.w	r3, r3, #16
 800e3d4:	2b10      	cmp	r3, #16
 800e3d6:	d109      	bne.n	800e3ec <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2210      	movs	r2, #16
 800e3de:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e3e4:	f043 0204 	orr.w	r2, r3, #4
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	2220      	movs	r2, #32
 800e3f2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	2200      	movs	r2, #0
 800e3f8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3fe:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e404:	2b00      	cmp	r3, #0
 800e406:	d039      	beq.n	800e47c <I2C_ITError+0x140>
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	2b11      	cmp	r3, #17
 800e40c:	d002      	beq.n	800e414 <I2C_ITError+0xd8>
 800e40e:	68bb      	ldr	r3, [r7, #8]
 800e410:	2b21      	cmp	r3, #33	; 0x21
 800e412:	d133      	bne.n	800e47c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e41e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e422:	d107      	bne.n	800e434 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	681b      	ldr	r3, [r3, #0]
 800e428:	681a      	ldr	r2, [r3, #0]
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	681b      	ldr	r3, [r3, #0]
 800e42e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e432:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e438:	4618      	mov	r0, r3
 800e43a:	f7fc fe61 	bl	800b100 <HAL_DMA_GetState>
 800e43e:	4603      	mov	r3, r0
 800e440:	2b01      	cmp	r3, #1
 800e442:	d017      	beq.n	800e474 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e448:	4a33      	ldr	r2, [pc, #204]	; (800e518 <I2C_ITError+0x1dc>)
 800e44a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e44c:	687b      	ldr	r3, [r7, #4]
 800e44e:	2200      	movs	r2, #0
 800e450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e458:	4618      	mov	r0, r3
 800e45a:	f7fb fce1 	bl	8009e20 <HAL_DMA_Abort_IT>
 800e45e:	4603      	mov	r3, r0
 800e460:	2b00      	cmp	r3, #0
 800e462:	d04d      	beq.n	800e500 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e46a:	687a      	ldr	r2, [r7, #4]
 800e46c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800e46e:	4610      	mov	r0, r2
 800e470:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e472:	e045      	b.n	800e500 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e474:	6878      	ldr	r0, [r7, #4]
 800e476:	f000 f851 	bl	800e51c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e47a:	e041      	b.n	800e500 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e480:	2b00      	cmp	r3, #0
 800e482:	d039      	beq.n	800e4f8 <I2C_ITError+0x1bc>
 800e484:	68bb      	ldr	r3, [r7, #8]
 800e486:	2b12      	cmp	r3, #18
 800e488:	d002      	beq.n	800e490 <I2C_ITError+0x154>
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	2b22      	cmp	r3, #34	; 0x22
 800e48e:	d133      	bne.n	800e4f8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e49a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e49e:	d107      	bne.n	800e4b0 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	681a      	ldr	r2, [r3, #0]
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	681b      	ldr	r3, [r3, #0]
 800e4aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e4ae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f7fc fe23 	bl	800b100 <HAL_DMA_GetState>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	2b01      	cmp	r3, #1
 800e4be:	d017      	beq.n	800e4f0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4c4:	4a14      	ldr	r2, [pc, #80]	; (800e518 <I2C_ITError+0x1dc>)
 800e4c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2200      	movs	r2, #0
 800e4cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4d4:	4618      	mov	r0, r3
 800e4d6:	f7fb fca3 	bl	8009e20 <HAL_DMA_Abort_IT>
 800e4da:	4603      	mov	r3, r0
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d011      	beq.n	800e504 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e4e6:	687a      	ldr	r2, [r7, #4]
 800e4e8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e4ee:	e009      	b.n	800e504 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800e4f0:	6878      	ldr	r0, [r7, #4]
 800e4f2:	f000 f813 	bl	800e51c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e4f6:	e005      	b.n	800e504 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f000 f80f 	bl	800e51c <I2C_TreatErrorCallback>
  }
}
 800e4fe:	e002      	b.n	800e506 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800e500:	bf00      	nop
 800e502:	e000      	b.n	800e506 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800e504:	bf00      	nop
}
 800e506:	bf00      	nop
 800e508:	3710      	adds	r7, #16
 800e50a:	46bd      	mov	sp, r7
 800e50c:	bd80      	pop	{r7, pc}
 800e50e:	bf00      	nop
 800e510:	ffff0000 	.word	0xffff0000
 800e514:	0800cff3 	.word	0x0800cff3
 800e518:	0800e955 	.word	0x0800e955

0800e51c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b082      	sub	sp, #8
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e52a:	b2db      	uxtb	r3, r3
 800e52c:	2b60      	cmp	r3, #96	; 0x60
 800e52e:	d10e      	bne.n	800e54e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	2220      	movs	r2, #32
 800e534:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2200      	movs	r2, #0
 800e53c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	2200      	movs	r2, #0
 800e542:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800e546:	6878      	ldr	r0, [r7, #4]
 800e548:	f7fe fc07 	bl	800cd5a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e54c:	e009      	b.n	800e562 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	2200      	movs	r2, #0
 800e552:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2200      	movs	r2, #0
 800e558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7fe fbf2 	bl	800cd46 <HAL_I2C_ErrorCallback>
}
 800e562:	bf00      	nop
 800e564:	3708      	adds	r7, #8
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}

0800e56a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e56a:	b480      	push	{r7}
 800e56c:	b083      	sub	sp, #12
 800e56e:	af00      	add	r7, sp, #0
 800e570:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	699b      	ldr	r3, [r3, #24]
 800e578:	f003 0302 	and.w	r3, r3, #2
 800e57c:	2b02      	cmp	r3, #2
 800e57e:	d103      	bne.n	800e588 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	2200      	movs	r2, #0
 800e586:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	699b      	ldr	r3, [r3, #24]
 800e58e:	f003 0301 	and.w	r3, r3, #1
 800e592:	2b01      	cmp	r3, #1
 800e594:	d007      	beq.n	800e5a6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	699a      	ldr	r2, [r3, #24]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	f042 0201 	orr.w	r2, r2, #1
 800e5a4:	619a      	str	r2, [r3, #24]
  }
}
 800e5a6:	bf00      	nop
 800e5a8:	370c      	adds	r7, #12
 800e5aa:	46bd      	mov	sp, r7
 800e5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b0:	4770      	bx	lr

0800e5b2 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b084      	sub	sp, #16
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e5be:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	681a      	ldr	r2, [r3, #0]
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800e5ce:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e5d0:	68fb      	ldr	r3, [r7, #12]
 800e5d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5d4:	b29b      	uxth	r3, r3
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d104      	bne.n	800e5e4 <I2C_DMAMasterTransmitCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e5da:	2120      	movs	r1, #32
 800e5dc:	68f8      	ldr	r0, [r7, #12]
 800e5de:	f000 fa09 	bl	800e9f4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e5e2:	e02d      	b.n	800e640 <I2C_DMAMasterTransmitCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e5e8:	68fa      	ldr	r2, [r7, #12]
 800e5ea:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e5ec:	441a      	add	r2, r3
 800e5ee:	68fb      	ldr	r3, [r7, #12]
 800e5f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e5f6:	b29b      	uxth	r3, r3
 800e5f8:	2bff      	cmp	r3, #255	; 0xff
 800e5fa:	d903      	bls.n	800e604 <I2C_DMAMasterTransmitCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	22ff      	movs	r2, #255	; 0xff
 800e600:	851a      	strh	r2, [r3, #40]	; 0x28
 800e602:	e004      	b.n	800e60e <I2C_DMAMasterTransmitCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e608:	b29a      	uxth	r2, r3
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800e612:	68fb      	ldr	r3, [r7, #12]
 800e614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e616:	4619      	mov	r1, r3
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	3328      	adds	r3, #40	; 0x28
 800e61e:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800e624:	f7fa fe74 	bl	8009310 <HAL_DMA_Start_IT>
 800e628:	4603      	mov	r3, r0
 800e62a:	2b00      	cmp	r3, #0
 800e62c:	d004      	beq.n	800e638 <I2C_DMAMasterTransmitCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e62e:	2110      	movs	r1, #16
 800e630:	68f8      	ldr	r0, [r7, #12]
 800e632:	f7ff fe83 	bl	800e33c <I2C_ITError>
}
 800e636:	e003      	b.n	800e640 <I2C_DMAMasterTransmitCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e638:	2140      	movs	r1, #64	; 0x40
 800e63a:	68f8      	ldr	r0, [r7, #12]
 800e63c:	f000 f9da 	bl	800e9f4 <I2C_Enable_IRQ>
}
 800e640:	bf00      	nop
 800e642:	3710      	adds	r7, #16
 800e644:	46bd      	mov	sp, r7
 800e646:	bd80      	pop	{r7, pc}

0800e648 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e654:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e664:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e66a:	b29b      	uxth	r3, r3
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d104      	bne.n	800e67a <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e670:	2120      	movs	r1, #32
 800e672:	68f8      	ldr	r0, [r7, #12]
 800e674:	f000 f9be 	bl	800e9f4 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800e678:	e02d      	b.n	800e6d6 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e67e:	68fa      	ldr	r2, [r7, #12]
 800e680:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e682:	441a      	add	r2, r3
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e688:	68fb      	ldr	r3, [r7, #12]
 800e68a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e68c:	b29b      	uxth	r3, r3
 800e68e:	2bff      	cmp	r3, #255	; 0xff
 800e690:	d903      	bls.n	800e69a <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	22ff      	movs	r2, #255	; 0xff
 800e696:	851a      	strh	r2, [r3, #40]	; 0x28
 800e698:	e004      	b.n	800e6a4 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800e69a:	68fb      	ldr	r3, [r7, #12]
 800e69c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e69e:	b29a      	uxth	r2, r3
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	3324      	adds	r3, #36	; 0x24
 800e6ae:	4619      	mov	r1, r3
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b4:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800e6ba:	f7fa fe29 	bl	8009310 <HAL_DMA_Start_IT>
 800e6be:	4603      	mov	r3, r0
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d004      	beq.n	800e6ce <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e6c4:	2110      	movs	r1, #16
 800e6c6:	68f8      	ldr	r0, [r7, #12]
 800e6c8:	f7ff fe38 	bl	800e33c <I2C_ITError>
}
 800e6cc:	e003      	b.n	800e6d6 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800e6ce:	2140      	movs	r1, #64	; 0x40
 800e6d0:	68f8      	ldr	r0, [r7, #12]
 800e6d2:	f000 f98f 	bl	800e9f4 <I2C_Enable_IRQ>
}
 800e6d6:	bf00      	nop
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
	...

0800e6e0 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800e6e8:	2300      	movs	r3, #0
 800e6ea:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f0:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 800e6f2:	68bb      	ldr	r3, [r7, #8]
 800e6f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d076      	beq.n	800e7e8 <I2C_DMAError+0x108>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	4a71      	ldr	r2, [pc, #452]	; (800e8c8 <I2C_DMAError+0x1e8>)
 800e702:	4293      	cmp	r3, r2
 800e704:	d059      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	4a6f      	ldr	r2, [pc, #444]	; (800e8cc <I2C_DMAError+0x1ec>)
 800e70e:	4293      	cmp	r3, r2
 800e710:	d053      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e712:	68bb      	ldr	r3, [r7, #8]
 800e714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4a6d      	ldr	r2, [pc, #436]	; (800e8d0 <I2C_DMAError+0x1f0>)
 800e71a:	4293      	cmp	r3, r2
 800e71c:	d04d      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e71e:	68bb      	ldr	r3, [r7, #8]
 800e720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	4a6b      	ldr	r2, [pc, #428]	; (800e8d4 <I2C_DMAError+0x1f4>)
 800e726:	4293      	cmp	r3, r2
 800e728:	d047      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e72a:	68bb      	ldr	r3, [r7, #8]
 800e72c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	4a69      	ldr	r2, [pc, #420]	; (800e8d8 <I2C_DMAError+0x1f8>)
 800e732:	4293      	cmp	r3, r2
 800e734:	d041      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e736:	68bb      	ldr	r3, [r7, #8]
 800e738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	4a67      	ldr	r2, [pc, #412]	; (800e8dc <I2C_DMAError+0x1fc>)
 800e73e:	4293      	cmp	r3, r2
 800e740:	d03b      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a65      	ldr	r2, [pc, #404]	; (800e8e0 <I2C_DMAError+0x200>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d035      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e74e:	68bb      	ldr	r3, [r7, #8]
 800e750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a63      	ldr	r2, [pc, #396]	; (800e8e4 <I2C_DMAError+0x204>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d02f      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e75a:	68bb      	ldr	r3, [r7, #8]
 800e75c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a61      	ldr	r2, [pc, #388]	; (800e8e8 <I2C_DMAError+0x208>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d029      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e766:	68bb      	ldr	r3, [r7, #8]
 800e768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a5f      	ldr	r2, [pc, #380]	; (800e8ec <I2C_DMAError+0x20c>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d023      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e772:	68bb      	ldr	r3, [r7, #8]
 800e774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a5d      	ldr	r2, [pc, #372]	; (800e8f0 <I2C_DMAError+0x210>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d01d      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a5b      	ldr	r2, [pc, #364]	; (800e8f4 <I2C_DMAError+0x214>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d017      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a59      	ldr	r2, [pc, #356]	; (800e8f8 <I2C_DMAError+0x218>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d011      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e796:	68bb      	ldr	r3, [r7, #8]
 800e798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a57      	ldr	r2, [pc, #348]	; (800e8fc <I2C_DMAError+0x21c>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d00b      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a55      	ldr	r2, [pc, #340]	; (800e900 <I2C_DMAError+0x220>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d005      	beq.n	800e7ba <I2C_DMAError+0xda>
 800e7ae:	68bb      	ldr	r3, [r7, #8]
 800e7b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a53      	ldr	r2, [pc, #332]	; (800e904 <I2C_DMAError+0x224>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d109      	bne.n	800e7ce <I2C_DMAError+0xee>
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	685b      	ldr	r3, [r3, #4]
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	bf0c      	ite	eq
 800e7c6:	2301      	moveq	r3, #1
 800e7c8:	2300      	movne	r3, #0
 800e7ca:	b2db      	uxtb	r3, r3
 800e7cc:	e008      	b.n	800e7e0 <I2C_DMAError+0x100>
 800e7ce:	68bb      	ldr	r3, [r7, #8]
 800e7d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7d2:	681b      	ldr	r3, [r3, #0]
 800e7d4:	685b      	ldr	r3, [r3, #4]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	bf0c      	ite	eq
 800e7da:	2301      	moveq	r3, #1
 800e7dc:	2300      	movne	r3, #0
 800e7de:	b2db      	uxtb	r3, r3
 800e7e0:	2b00      	cmp	r3, #0
 800e7e2:	d001      	beq.n	800e7e8 <I2C_DMAError+0x108>
    {
      treatdmaerror = 1U;
 800e7e4:	2301      	movs	r3, #1
 800e7e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800e7e8:	68bb      	ldr	r3, [r7, #8]
 800e7ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	f000 8098 	beq.w	800e922 <I2C_DMAError+0x242>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800e7f2:	68bb      	ldr	r3, [r7, #8]
 800e7f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a33      	ldr	r2, [pc, #204]	; (800e8c8 <I2C_DMAError+0x1e8>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d059      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e7fe:	68bb      	ldr	r3, [r7, #8]
 800e800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	4a31      	ldr	r2, [pc, #196]	; (800e8cc <I2C_DMAError+0x1ec>)
 800e806:	4293      	cmp	r3, r2
 800e808:	d053      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a2f      	ldr	r2, [pc, #188]	; (800e8d0 <I2C_DMAError+0x1f0>)
 800e812:	4293      	cmp	r3, r2
 800e814:	d04d      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e816:	68bb      	ldr	r3, [r7, #8]
 800e818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a2d      	ldr	r2, [pc, #180]	; (800e8d4 <I2C_DMAError+0x1f4>)
 800e81e:	4293      	cmp	r3, r2
 800e820:	d047      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e822:	68bb      	ldr	r3, [r7, #8]
 800e824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e826:	681b      	ldr	r3, [r3, #0]
 800e828:	4a2b      	ldr	r2, [pc, #172]	; (800e8d8 <I2C_DMAError+0x1f8>)
 800e82a:	4293      	cmp	r3, r2
 800e82c:	d041      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e82e:	68bb      	ldr	r3, [r7, #8]
 800e830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	4a29      	ldr	r2, [pc, #164]	; (800e8dc <I2C_DMAError+0x1fc>)
 800e836:	4293      	cmp	r3, r2
 800e838:	d03b      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e83a:	68bb      	ldr	r3, [r7, #8]
 800e83c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	4a27      	ldr	r2, [pc, #156]	; (800e8e0 <I2C_DMAError+0x200>)
 800e842:	4293      	cmp	r3, r2
 800e844:	d035      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	4a25      	ldr	r2, [pc, #148]	; (800e8e4 <I2C_DMAError+0x204>)
 800e84e:	4293      	cmp	r3, r2
 800e850:	d02f      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e852:	68bb      	ldr	r3, [r7, #8]
 800e854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a23      	ldr	r2, [pc, #140]	; (800e8e8 <I2C_DMAError+0x208>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d029      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e85e:	68bb      	ldr	r3, [r7, #8]
 800e860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	4a21      	ldr	r2, [pc, #132]	; (800e8ec <I2C_DMAError+0x20c>)
 800e866:	4293      	cmp	r3, r2
 800e868:	d023      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e86a:	68bb      	ldr	r3, [r7, #8]
 800e86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e86e:	681b      	ldr	r3, [r3, #0]
 800e870:	4a1f      	ldr	r2, [pc, #124]	; (800e8f0 <I2C_DMAError+0x210>)
 800e872:	4293      	cmp	r3, r2
 800e874:	d01d      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e876:	68bb      	ldr	r3, [r7, #8]
 800e878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	4a1d      	ldr	r2, [pc, #116]	; (800e8f4 <I2C_DMAError+0x214>)
 800e87e:	4293      	cmp	r3, r2
 800e880:	d017      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e882:	68bb      	ldr	r3, [r7, #8]
 800e884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	4a1b      	ldr	r2, [pc, #108]	; (800e8f8 <I2C_DMAError+0x218>)
 800e88a:	4293      	cmp	r3, r2
 800e88c:	d011      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e88e:	68bb      	ldr	r3, [r7, #8]
 800e890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	4a19      	ldr	r2, [pc, #100]	; (800e8fc <I2C_DMAError+0x21c>)
 800e896:	4293      	cmp	r3, r2
 800e898:	d00b      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e89a:	68bb      	ldr	r3, [r7, #8]
 800e89c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	4a17      	ldr	r2, [pc, #92]	; (800e900 <I2C_DMAError+0x220>)
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d005      	beq.n	800e8b2 <I2C_DMAError+0x1d2>
 800e8a6:	68bb      	ldr	r3, [r7, #8]
 800e8a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8aa:	681b      	ldr	r3, [r3, #0]
 800e8ac:	4a15      	ldr	r2, [pc, #84]	; (800e904 <I2C_DMAError+0x224>)
 800e8ae:	4293      	cmp	r3, r2
 800e8b0:	d12a      	bne.n	800e908 <I2C_DMAError+0x228>
 800e8b2:	68bb      	ldr	r3, [r7, #8]
 800e8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	685b      	ldr	r3, [r3, #4]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	bf0c      	ite	eq
 800e8be:	2301      	moveq	r3, #1
 800e8c0:	2300      	movne	r3, #0
 800e8c2:	b2db      	uxtb	r3, r3
 800e8c4:	e029      	b.n	800e91a <I2C_DMAError+0x23a>
 800e8c6:	bf00      	nop
 800e8c8:	40020010 	.word	0x40020010
 800e8cc:	40020028 	.word	0x40020028
 800e8d0:	40020040 	.word	0x40020040
 800e8d4:	40020058 	.word	0x40020058
 800e8d8:	40020070 	.word	0x40020070
 800e8dc:	40020088 	.word	0x40020088
 800e8e0:	400200a0 	.word	0x400200a0
 800e8e4:	400200b8 	.word	0x400200b8
 800e8e8:	40020410 	.word	0x40020410
 800e8ec:	40020428 	.word	0x40020428
 800e8f0:	40020440 	.word	0x40020440
 800e8f4:	40020458 	.word	0x40020458
 800e8f8:	40020470 	.word	0x40020470
 800e8fc:	40020488 	.word	0x40020488
 800e900:	400204a0 	.word	0x400204a0
 800e904:	400204b8 	.word	0x400204b8
 800e908:	68bb      	ldr	r3, [r7, #8]
 800e90a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	685b      	ldr	r3, [r3, #4]
 800e910:	2b00      	cmp	r3, #0
 800e912:	bf0c      	ite	eq
 800e914:	2301      	moveq	r3, #1
 800e916:	2300      	movne	r3, #0
 800e918:	b2db      	uxtb	r3, r3
 800e91a:	2b00      	cmp	r3, #0
 800e91c:	d001      	beq.n	800e922 <I2C_DMAError+0x242>
    {
      treatdmaerror = 1U;
 800e91e:	2301      	movs	r3, #1
 800e920:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 800e922:	6878      	ldr	r0, [r7, #4]
 800e924:	f7fc fbfa 	bl	800b11c <HAL_DMA_GetError>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b02      	cmp	r3, #2
 800e92c:	d00e      	beq.n	800e94c <I2C_DMAError+0x26c>
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	2b00      	cmp	r3, #0
 800e932:	d00b      	beq.n	800e94c <I2C_DMAError+0x26c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e934:	68bb      	ldr	r3, [r7, #8]
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	685a      	ldr	r2, [r3, #4]
 800e93a:	68bb      	ldr	r3, [r7, #8]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e942:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800e944:	2110      	movs	r1, #16
 800e946:	68b8      	ldr	r0, [r7, #8]
 800e948:	f7ff fcf8 	bl	800e33c <I2C_ITError>
  }
}
 800e94c:	bf00      	nop
 800e94e:	3710      	adds	r7, #16
 800e950:	46bd      	mov	sp, r7
 800e952:	bd80      	pop	{r7, pc}

0800e954 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b084      	sub	sp, #16
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e960:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800e962:	68fb      	ldr	r3, [r7, #12]
 800e964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e966:	2b00      	cmp	r3, #0
 800e968:	d003      	beq.n	800e972 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800e96a:	68fb      	ldr	r3, [r7, #12]
 800e96c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e96e:	2200      	movs	r2, #0
 800e970:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800e972:	68fb      	ldr	r3, [r7, #12]
 800e974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e976:	2b00      	cmp	r3, #0
 800e978:	d003      	beq.n	800e982 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800e97a:	68fb      	ldr	r3, [r7, #12]
 800e97c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e97e:	2200      	movs	r2, #0
 800e980:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 800e982:	68f8      	ldr	r0, [r7, #12]
 800e984:	f7ff fdca 	bl	800e51c <I2C_TreatErrorCallback>
}
 800e988:	bf00      	nop
 800e98a:	3710      	adds	r7, #16
 800e98c:	46bd      	mov	sp, r7
 800e98e:	bd80      	pop	{r7, pc}

0800e990 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800e990:	b480      	push	{r7}
 800e992:	b087      	sub	sp, #28
 800e994:	af00      	add	r7, sp, #0
 800e996:	60f8      	str	r0, [r7, #12]
 800e998:	607b      	str	r3, [r7, #4]
 800e99a:	460b      	mov	r3, r1
 800e99c:	817b      	strh	r3, [r7, #10]
 800e99e:	4613      	mov	r3, r2
 800e9a0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9a2:	897b      	ldrh	r3, [r7, #10]
 800e9a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e9a8:	7a7b      	ldrb	r3, [r7, #9]
 800e9aa:	041b      	lsls	r3, r3, #16
 800e9ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9b0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800e9b6:	6a3b      	ldr	r3, [r7, #32]
 800e9b8:	4313      	orrs	r3, r2
 800e9ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e9be:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	685a      	ldr	r2, [r3, #4]
 800e9c6:	6a3b      	ldr	r3, [r7, #32]
 800e9c8:	0d5b      	lsrs	r3, r3, #21
 800e9ca:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800e9ce:	4b08      	ldr	r3, [pc, #32]	; (800e9f0 <I2C_TransferConfig+0x60>)
 800e9d0:	430b      	orrs	r3, r1
 800e9d2:	43db      	mvns	r3, r3
 800e9d4:	ea02 0103 	and.w	r1, r2, r3
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	697a      	ldr	r2, [r7, #20]
 800e9de:	430a      	orrs	r2, r1
 800e9e0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800e9e2:	bf00      	nop
 800e9e4:	371c      	adds	r7, #28
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ec:	4770      	bx	lr
 800e9ee:	bf00      	nop
 800e9f0:	03ff63ff 	.word	0x03ff63ff

0800e9f4 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800e9f4:	b480      	push	{r7}
 800e9f6:	b085      	sub	sp, #20
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800ea00:	2300      	movs	r3, #0
 800ea02:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea08:	4a39      	ldr	r2, [pc, #228]	; (800eaf0 <I2C_Enable_IRQ+0xfc>)
 800ea0a:	4293      	cmp	r3, r2
 800ea0c:	d032      	beq.n	800ea74 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800ea12:	4a38      	ldr	r2, [pc, #224]	; (800eaf4 <I2C_Enable_IRQ+0x100>)
 800ea14:	4293      	cmp	r3, r2
 800ea16:	d02d      	beq.n	800ea74 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800ea1c:	4a36      	ldr	r2, [pc, #216]	; (800eaf8 <I2C_Enable_IRQ+0x104>)
 800ea1e:	4293      	cmp	r3, r2
 800ea20:	d028      	beq.n	800ea74 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ea22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea26:	2b00      	cmp	r3, #0
 800ea28:	da03      	bge.n	800ea32 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ea30:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ea32:	887b      	ldrh	r3, [r7, #2]
 800ea34:	f003 0301 	and.w	r3, r3, #1
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d003      	beq.n	800ea44 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ea42:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ea44:	887b      	ldrh	r3, [r7, #2]
 800ea46:	f003 0302 	and.w	r3, r3, #2
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d003      	beq.n	800ea56 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800ea54:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ea56:	887b      	ldrh	r3, [r7, #2]
 800ea58:	2b10      	cmp	r3, #16
 800ea5a:	d103      	bne.n	800ea64 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800ea62:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ea64:	887b      	ldrh	r3, [r7, #2]
 800ea66:	2b20      	cmp	r3, #32
 800ea68:	d133      	bne.n	800ead2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ea6a:	68fb      	ldr	r3, [r7, #12]
 800ea6c:	f043 0320 	orr.w	r3, r3, #32
 800ea70:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ea72:	e02e      	b.n	800ead2 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ea74:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	da03      	bge.n	800ea84 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ea7c:	68fb      	ldr	r3, [r7, #12]
 800ea7e:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800ea82:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ea84:	887b      	ldrh	r3, [r7, #2]
 800ea86:	f003 0301 	and.w	r3, r3, #1
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d003      	beq.n	800ea96 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ea8e:	68fb      	ldr	r3, [r7, #12]
 800ea90:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 800ea94:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ea96:	887b      	ldrh	r3, [r7, #2]
 800ea98:	f003 0302 	and.w	r3, r3, #2
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d003      	beq.n	800eaa8 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800eaa6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800eaa8:	887b      	ldrh	r3, [r7, #2]
 800eaaa:	2b10      	cmp	r3, #16
 800eaac:	d103      	bne.n	800eab6 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800eaae:	68fb      	ldr	r3, [r7, #12]
 800eab0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800eab4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800eab6:	887b      	ldrh	r3, [r7, #2]
 800eab8:	2b20      	cmp	r3, #32
 800eaba:	d103      	bne.n	800eac4 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800eabc:	68fb      	ldr	r3, [r7, #12]
 800eabe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800eac2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800eac4:	887b      	ldrh	r3, [r7, #2]
 800eac6:	2b40      	cmp	r3, #64	; 0x40
 800eac8:	d103      	bne.n	800ead2 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800eaca:	68fb      	ldr	r3, [r7, #12]
 800eacc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ead0:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	6819      	ldr	r1, [r3, #0]
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68fa      	ldr	r2, [r7, #12]
 800eade:	430a      	orrs	r2, r1
 800eae0:	601a      	str	r2, [r3, #0]
}
 800eae2:	bf00      	nop
 800eae4:	3714      	adds	r7, #20
 800eae6:	46bd      	mov	sp, r7
 800eae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaec:	4770      	bx	lr
 800eaee:	bf00      	nop
 800eaf0:	0800d1fb 	.word	0x0800d1fb
 800eaf4:	0800d641 	.word	0x0800d641
 800eaf8:	0800d3e1 	.word	0x0800d3e1

0800eafc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800eafc:	b480      	push	{r7}
 800eafe:	b085      	sub	sp, #20
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
 800eb04:	460b      	mov	r3, r1
 800eb06:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800eb0c:	887b      	ldrh	r3, [r7, #2]
 800eb0e:	f003 0301 	and.w	r3, r3, #1
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00f      	beq.n	800eb36 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800eb1c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800eb1e:	687b      	ldr	r3, [r7, #4]
 800eb20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb24:	b2db      	uxtb	r3, r3
 800eb26:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eb2a:	2b28      	cmp	r3, #40	; 0x28
 800eb2c:	d003      	beq.n	800eb36 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800eb34:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800eb36:	887b      	ldrh	r3, [r7, #2]
 800eb38:	f003 0302 	and.w	r3, r3, #2
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d00f      	beq.n	800eb60 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800eb40:	68fb      	ldr	r3, [r7, #12]
 800eb42:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800eb46:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800eb4e:	b2db      	uxtb	r3, r3
 800eb50:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800eb54:	2b28      	cmp	r3, #40	; 0x28
 800eb56:	d003      	beq.n	800eb60 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800eb5e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800eb60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	da03      	bge.n	800eb70 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800eb6e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800eb70:	887b      	ldrh	r3, [r7, #2]
 800eb72:	2b10      	cmp	r3, #16
 800eb74:	d103      	bne.n	800eb7e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800eb7c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800eb7e:	887b      	ldrh	r3, [r7, #2]
 800eb80:	2b20      	cmp	r3, #32
 800eb82:	d103      	bne.n	800eb8c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	f043 0320 	orr.w	r3, r3, #32
 800eb8a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800eb8c:	887b      	ldrh	r3, [r7, #2]
 800eb8e:	2b40      	cmp	r3, #64	; 0x40
 800eb90:	d103      	bne.n	800eb9a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800eb98:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	6819      	ldr	r1, [r3, #0]
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	43da      	mvns	r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	400a      	ands	r2, r1
 800ebaa:	601a      	str	r2, [r3, #0]
}
 800ebac:	bf00      	nop
 800ebae:	3714      	adds	r7, #20
 800ebb0:	46bd      	mov	sp, r7
 800ebb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebb6:	4770      	bx	lr

0800ebb8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ebb8:	b480      	push	{r7}
 800ebba:	b083      	sub	sp, #12
 800ebbc:	af00      	add	r7, sp, #0
 800ebbe:	6078      	str	r0, [r7, #4]
 800ebc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ebc8:	b2db      	uxtb	r3, r3
 800ebca:	2b20      	cmp	r3, #32
 800ebcc:	d138      	bne.n	800ec40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	d101      	bne.n	800ebdc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ebd8:	2302      	movs	r3, #2
 800ebda:	e032      	b.n	800ec42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	2224      	movs	r2, #36	; 0x24
 800ebe8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f022 0201 	bic.w	r2, r2, #1
 800ebfa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	681a      	ldr	r2, [r3, #0]
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	681b      	ldr	r3, [r3, #0]
 800ec06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800ec0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	6819      	ldr	r1, [r3, #0]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	683a      	ldr	r2, [r7, #0]
 800ec18:	430a      	orrs	r2, r1
 800ec1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	681a      	ldr	r2, [r3, #0]
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	681b      	ldr	r3, [r3, #0]
 800ec26:	f042 0201 	orr.w	r2, r2, #1
 800ec2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2220      	movs	r2, #32
 800ec30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	2200      	movs	r2, #0
 800ec38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ec3c:	2300      	movs	r3, #0
 800ec3e:	e000      	b.n	800ec42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800ec40:	2302      	movs	r3, #2
  }
}
 800ec42:	4618      	mov	r0, r3
 800ec44:	370c      	adds	r7, #12
 800ec46:	46bd      	mov	sp, r7
 800ec48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec4c:	4770      	bx	lr

0800ec4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800ec4e:	b480      	push	{r7}
 800ec50:	b085      	sub	sp, #20
 800ec52:	af00      	add	r7, sp, #0
 800ec54:	6078      	str	r0, [r7, #4]
 800ec56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ec5e:	b2db      	uxtb	r3, r3
 800ec60:	2b20      	cmp	r3, #32
 800ec62:	d139      	bne.n	800ecd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d101      	bne.n	800ec72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800ec6e:	2302      	movs	r3, #2
 800ec70:	e033      	b.n	800ecda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	2224      	movs	r2, #36	; 0x24
 800ec7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	681a      	ldr	r2, [r3, #0]
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f022 0201 	bic.w	r2, r2, #1
 800ec90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800eca0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800eca2:	683b      	ldr	r3, [r7, #0]
 800eca4:	021b      	lsls	r3, r3, #8
 800eca6:	68fa      	ldr	r2, [r7, #12]
 800eca8:	4313      	orrs	r3, r2
 800ecaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	681b      	ldr	r3, [r3, #0]
 800ecb0:	68fa      	ldr	r2, [r7, #12]
 800ecb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	681b      	ldr	r3, [r3, #0]
 800ecb8:	681a      	ldr	r2, [r3, #0]
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	f042 0201 	orr.w	r2, r2, #1
 800ecc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2220      	movs	r2, #32
 800ecc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2200      	movs	r2, #0
 800ecd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800ecd4:	2300      	movs	r3, #0
 800ecd6:	e000      	b.n	800ecda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ecd8:	2302      	movs	r3, #2
  }
}
 800ecda:	4618      	mov	r0, r3
 800ecdc:	3714      	adds	r7, #20
 800ecde:	46bd      	mov	sp, r7
 800ece0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece4:	4770      	bx	lr
	...

0800ece8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ecf0:	4b0d      	ldr	r3, [pc, #52]	; (800ed28 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ecf2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ecf6:	4a0c      	ldr	r2, [pc, #48]	; (800ed28 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ecf8:	f043 0302 	orr.w	r3, r3, #2
 800ecfc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800ed00:	4b09      	ldr	r3, [pc, #36]	; (800ed28 <HAL_I2CEx_EnableFastModePlus+0x40>)
 800ed02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800ed06:	f003 0302 	and.w	r3, r3, #2
 800ed0a:	60fb      	str	r3, [r7, #12]
 800ed0c:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 800ed0e:	4b07      	ldr	r3, [pc, #28]	; (800ed2c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800ed10:	685a      	ldr	r2, [r3, #4]
 800ed12:	4906      	ldr	r1, [pc, #24]	; (800ed2c <HAL_I2CEx_EnableFastModePlus+0x44>)
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	4313      	orrs	r3, r2
 800ed18:	604b      	str	r3, [r1, #4]
}
 800ed1a:	bf00      	nop
 800ed1c:	3714      	adds	r7, #20
 800ed1e:	46bd      	mov	sp, r7
 800ed20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed24:	4770      	bx	lr
 800ed26:	bf00      	nop
 800ed28:	58024400 	.word	0x58024400
 800ed2c:	58000400 	.word	0x58000400

0800ed30 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d101      	bne.n	800ed42 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800ed3e:	2301      	movs	r3, #1
 800ed40:	e041      	b.n	800edc6 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 800ed4a:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	f245 5255 	movw	r2, #21845	; 0x5555
 800ed54:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	681b      	ldr	r3, [r3, #0]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	6852      	ldr	r2, [r2, #4]
 800ed5e:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	6892      	ldr	r2, [r2, #8]
 800ed68:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 800ed6a:	f7f7 fe4d 	bl	8006a08 <HAL_GetTick>
 800ed6e:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ed70:	e00f      	b.n	800ed92 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800ed72:	f7f7 fe49 	bl	8006a08 <HAL_GetTick>
 800ed76:	4602      	mov	r2, r0
 800ed78:	68fb      	ldr	r3, [r7, #12]
 800ed7a:	1ad3      	subs	r3, r2, r3
 800ed7c:	2b31      	cmp	r3, #49	; 0x31
 800ed7e:	d908      	bls.n	800ed92 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	681b      	ldr	r3, [r3, #0]
 800ed84:	68db      	ldr	r3, [r3, #12]
 800ed86:	f003 0307 	and.w	r3, r3, #7
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d001      	beq.n	800ed92 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 800ed8e:	2303      	movs	r3, #3
 800ed90:	e019      	b.n	800edc6 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	f003 0307 	and.w	r3, r3, #7
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	d1e8      	bne.n	800ed72 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	691a      	ldr	r2, [r3, #16]
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	68db      	ldr	r3, [r3, #12]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d005      	beq.n	800edba <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	687a      	ldr	r2, [r7, #4]
 800edb4:	68d2      	ldr	r2, [r2, #12]
 800edb6:	611a      	str	r2, [r3, #16]
 800edb8:	e004      	b.n	800edc4 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800edc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 800edce:	b480      	push	{r7}
 800edd0:	b083      	sub	sp, #12
 800edd2:	af00      	add	r7, sp, #0
 800edd4:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	681b      	ldr	r3, [r3, #0]
 800edda:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800edde:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800ede0:	2300      	movs	r3, #0
}
 800ede2:	4618      	mov	r0, r3
 800ede4:	370c      	adds	r7, #12
 800ede6:	46bd      	mov	sp, r7
 800ede8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edec:	4770      	bx	lr
	...

0800edf0 <HAL_PWR_EnterSTOPMode>:
  *         is waking up. By keeping the internal regulator ON during STOP mode,
  *         the consumption is higher although the startup time is reduced.
  * @retval None.
  */
void HAL_PWR_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry)
{
 800edf0:	b480      	push	{r7}
 800edf2:	b083      	sub	sp, #12
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
 800edf8:	460b      	mov	r3, r1
 800edfa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));

  /* Select the regulator state in STOP mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 800edfc:	4b18      	ldr	r3, [pc, #96]	; (800ee60 <HAL_PWR_EnterSTOPMode+0x70>)
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	f023 0201 	bic.w	r2, r3, #1
 800ee04:	4916      	ldr	r1, [pc, #88]	; (800ee60 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	4313      	orrs	r3, r2
 800ee0a:	600b      	str	r3, [r1, #0]
    /* Keep DSTOP mode when Cortex-M4 enters DEEP-SLEEP */
    CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D2 | PWR_CPUCR_PDDS_D3));
  }
#else /* Single core devices */
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, (PWR_CPUCR_PDDS_D1 | PWR_CPUCR_PDDS_D3));
 800ee0c:	4b14      	ldr	r3, [pc, #80]	; (800ee60 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee0e:	691b      	ldr	r3, [r3, #16]
 800ee10:	4a13      	ldr	r2, [pc, #76]	; (800ee60 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee12:	f023 0305 	bic.w	r3, r3, #5
 800ee16:	6113      	str	r3, [r2, #16]

#if defined (PWR_CPUCR_PDDS_D2)
  /* Keep DSTOP mode when Cortex-M7 enter in DEEP-SLEEP */
  CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D2);
 800ee18:	4b11      	ldr	r3, [pc, #68]	; (800ee60 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee1a:	691b      	ldr	r3, [r3, #16]
 800ee1c:	4a10      	ldr	r2, [pc, #64]	; (800ee60 <HAL_PWR_EnterSTOPMode+0x70>)
 800ee1e:	f023 0302 	bic.w	r3, r3, #2
 800ee22:	6113      	str	r3, [r2, #16]
#endif /* PWR_CPUCR_PDDS_D2 */
#endif /* defined (DUAL_CORE) */

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ee24:	4b0f      	ldr	r3, [pc, #60]	; (800ee64 <HAL_PWR_EnterSTOPMode+0x74>)
 800ee26:	691b      	ldr	r3, [r3, #16]
 800ee28:	4a0e      	ldr	r2, [pc, #56]	; (800ee64 <HAL_PWR_EnterSTOPMode+0x74>)
 800ee2a:	f043 0304 	orr.w	r3, r3, #4
 800ee2e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800ee30:	f3bf 8f4f 	dsb	sy
}
 800ee34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800ee36:	f3bf 8f6f 	isb	sy
}
 800ee3a:	bf00      	nop
  /* Ensure that all instructions are done before entering STOP mode */
  __DSB ();
  __ISB ();

  /* Select STOP mode entry */
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800ee3c:	78fb      	ldrb	r3, [r7, #3]
 800ee3e:	2b01      	cmp	r3, #1
 800ee40:	d101      	bne.n	800ee46 <HAL_PWR_EnterSTOPMode+0x56>
  {
    /* Request Wait For Interrupt */
    __WFI ();
 800ee42:	bf30      	wfi
 800ee44:	e000      	b.n	800ee48 <HAL_PWR_EnterSTOPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __WFE ();
 800ee46:	bf20      	wfe
  }

  /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
  CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 800ee48:	4b06      	ldr	r3, [pc, #24]	; (800ee64 <HAL_PWR_EnterSTOPMode+0x74>)
 800ee4a:	691b      	ldr	r3, [r3, #16]
 800ee4c:	4a05      	ldr	r2, [pc, #20]	; (800ee64 <HAL_PWR_EnterSTOPMode+0x74>)
 800ee4e:	f023 0304 	bic.w	r3, r3, #4
 800ee52:	6113      	str	r3, [r2, #16]
}
 800ee54:	bf00      	nop
 800ee56:	370c      	adds	r7, #12
 800ee58:	46bd      	mov	sp, r7
 800ee5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee5e:	4770      	bx	lr
 800ee60:	58024800 	.word	0x58024800
 800ee64:	e000ed00 	.word	0xe000ed00

0800ee68 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b084      	sub	sp, #16
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800ee70:	4b19      	ldr	r3, [pc, #100]	; (800eed8 <HAL_PWREx_ConfigSupply+0x70>)
 800ee72:	68db      	ldr	r3, [r3, #12]
 800ee74:	f003 0304 	and.w	r3, r3, #4
 800ee78:	2b04      	cmp	r3, #4
 800ee7a:	d00a      	beq.n	800ee92 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ee7c:	4b16      	ldr	r3, [pc, #88]	; (800eed8 <HAL_PWREx_ConfigSupply+0x70>)
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	f003 0307 	and.w	r3, r3, #7
 800ee84:	687a      	ldr	r2, [r7, #4]
 800ee86:	429a      	cmp	r2, r3
 800ee88:	d001      	beq.n	800ee8e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ee8a:	2301      	movs	r3, #1
 800ee8c:	e01f      	b.n	800eece <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	e01d      	b.n	800eece <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ee92:	4b11      	ldr	r3, [pc, #68]	; (800eed8 <HAL_PWREx_ConfigSupply+0x70>)
 800ee94:	68db      	ldr	r3, [r3, #12]
 800ee96:	f023 0207 	bic.w	r2, r3, #7
 800ee9a:	490f      	ldr	r1, [pc, #60]	; (800eed8 <HAL_PWREx_ConfigSupply+0x70>)
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4313      	orrs	r3, r2
 800eea0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800eea2:	f7f7 fdb1 	bl	8006a08 <HAL_GetTick>
 800eea6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800eea8:	e009      	b.n	800eebe <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800eeaa:	f7f7 fdad 	bl	8006a08 <HAL_GetTick>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	1ad3      	subs	r3, r2, r3
 800eeb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800eeb8:	d901      	bls.n	800eebe <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800eeba:	2301      	movs	r3, #1
 800eebc:	e007      	b.n	800eece <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800eebe:	4b06      	ldr	r3, [pc, #24]	; (800eed8 <HAL_PWREx_ConfigSupply+0x70>)
 800eec0:	685b      	ldr	r3, [r3, #4]
 800eec2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800eec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800eeca:	d1ee      	bne.n	800eeaa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800eecc:	2300      	movs	r3, #0
}
 800eece:	4618      	mov	r0, r3
 800eed0:	3710      	adds	r7, #16
 800eed2:	46bd      	mov	sp, r7
 800eed4:	bd80      	pop	{r7, pc}
 800eed6:	bf00      	nop
 800eed8:	58024800 	.word	0x58024800

0800eedc <HAL_RAMECC_Init>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_Init(RAMECC_HandleTypeDef *hramecc)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  /* Check the RAMECC peripheral handle */
  if (hramecc == NULL)
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	2b00      	cmp	r3, #0
 800eee8:	d101      	bne.n	800eeee <HAL_RAMECC_Init+0x12>
  {
    /* Return HAL status */
    return HAL_ERROR;
 800eeea:	2301      	movs	r3, #1
 800eeec:	e030      	b.n	800ef50 <HAL_RAMECC_Init+0x74>

  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Change RAMECC peripheral state */
  hramecc->State = HAL_RAMECC_STATE_BUSY;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2202      	movs	r2, #2
 800eef2:	711a      	strb	r2, [r3, #4]

  /* Disable RAMECC monitor */
  hramecc->Instance->CR &= ~RAMECC_CR_ECCELEN;
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	681a      	ldr	r2, [r3, #0]
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	f022 0220 	bic.w	r2, r2, #32
 800ef02:	601a      	str	r2, [r3, #0]

  /* Disable all global interrupts */
  ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER &= \
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	687a      	ldr	r2, [r7, #4]
 800ef10:	6812      	ldr	r2, [r2, #0]
 800ef12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800ef16:	f023 030f 	bic.w	r3, r3, #15
 800ef1a:	6013      	str	r3, [r2, #0]
    ~(RAMECC_IER_GIE | RAMECC_IER_GECCSEIE | RAMECC_IER_GECCDEIE | RAMECC_IER_GECCDEBWIE);

  /* Disable all interrupts monitor  */
  hramecc->Instance->CR &= ~(RAMECC_CR_ECCSEIE | RAMECC_CR_ECCDEIE | RAMECC_CR_ECCDEBWIE);
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	681a      	ldr	r2, [r3, #0]
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	f022 021c 	bic.w	r2, r2, #28
 800ef2a:	601a      	str	r2, [r3, #0]

  /* Clear RAMECC monitor flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, RAMECC_FLAGS_ALL);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	681b      	ldr	r3, [r3, #0]
 800ef30:	685a      	ldr	r2, [r3, #4]
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	f022 0207 	bic.w	r2, r2, #7
 800ef3a:	605a      	str	r2, [r3, #4]

  /* Initialise the RAMECC error code */
  hramecc->ErrorCode = HAL_RAMECC_ERROR_NONE;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	2200      	movs	r2, #0
 800ef40:	609a      	str	r2, [r3, #8]

  /* Initialise the RAMECC error detected code */
  hramecc->RAMECCErrorCode = HAL_RAMECC_NO_ERROR;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	2200      	movs	r2, #0
 800ef46:	60da      	str	r2, [r3, #12]

  /* Update the RAMECC state */
  hramecc->State = HAL_RAMECC_STATE_READY;
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	2201      	movs	r2, #1
 800ef4c:	711a      	strb	r2, [r3, #4]

  /* Return HAL status */
  return HAL_OK;
 800ef4e:	2300      	movs	r3, #0
}
 800ef50:	4618      	mov	r0, r3
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <HAL_RAMECC_StartMonitor>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_StartMonitor(RAMECC_HandleTypeDef *hramecc)
{
 800ef5c:	b480      	push	{r7}
 800ef5e:	b083      	sub	sp, #12
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	791b      	ldrb	r3, [r3, #4]
 800ef68:	b2db      	uxtb	r3, r3
 800ef6a:	2b01      	cmp	r3, #1
 800ef6c:	d10f      	bne.n	800ef8e <HAL_RAMECC_StartMonitor+0x32>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2202      	movs	r2, #2
 800ef72:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC monitor */
    hramecc->Instance->CR |= RAMECC_CR_ECCELEN;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	681b      	ldr	r3, [r3, #0]
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	f042 0220 	orr.w	r2, r2, #32
 800ef82:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2201      	movs	r2, #1
 800ef88:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	e003      	b.n	800ef96 <HAL_RAMECC_StartMonitor+0x3a>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2202      	movs	r2, #2
 800ef92:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800ef94:	2301      	movs	r3, #1
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	370c      	adds	r7, #12
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa0:	4770      	bx	lr
	...

0800efa4 <HAL_RAMECC_EnableNotification>:
  *                        specified RAMECC Monitor.
  * @param  Notifications  Select the notification.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_RAMECC_EnableNotification(RAMECC_HandleTypeDef *hramecc, uint32_t Notifications)
{
 800efa4:	b480      	push	{r7}
 800efa6:	b083      	sub	sp, #12
 800efa8:	af00      	add	r7, sp, #0
 800efaa:	6078      	str	r0, [r7, #4]
 800efac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param (IS_RAMECC_MONITOR_ALL_INSTANCE (hramecc->Instance));
  assert_param (IS_RAMECC_INTERRUPT (Notifications));

  /* Check RAMECC state */
  if (hramecc->State == HAL_RAMECC_STATE_READY)
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	791b      	ldrb	r3, [r3, #4]
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d134      	bne.n	800f022 <HAL_RAMECC_EnableNotification+0x7e>
  {
    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_BUSY;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	2202      	movs	r2, #2
 800efbc:	711a      	strb	r2, [r3, #4]

    /* Enable RAMECC interrupts */
    __HAL_RAMECC_ENABLE_IT (hramecc, Notifications);
 800efbe:	683b      	ldr	r3, [r7, #0]
 800efc0:	4a1d      	ldr	r2, [pc, #116]	; (800f038 <HAL_RAMECC_EnableNotification+0x94>)
 800efc2:	4293      	cmp	r3, r2
 800efc4:	d00f      	beq.n	800efe6 <HAL_RAMECC_EnableNotification+0x42>
 800efc6:	683b      	ldr	r3, [r7, #0]
 800efc8:	4a1c      	ldr	r2, [pc, #112]	; (800f03c <HAL_RAMECC_EnableNotification+0x98>)
 800efca:	4293      	cmp	r3, r2
 800efcc:	d00b      	beq.n	800efe6 <HAL_RAMECC_EnableNotification+0x42>
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	4a1b      	ldr	r2, [pc, #108]	; (800f040 <HAL_RAMECC_EnableNotification+0x9c>)
 800efd2:	4293      	cmp	r3, r2
 800efd4:	d007      	beq.n	800efe6 <HAL_RAMECC_EnableNotification+0x42>
 800efd6:	683b      	ldr	r3, [r7, #0]
 800efd8:	4a1a      	ldr	r2, [pc, #104]	; (800f044 <HAL_RAMECC_EnableNotification+0xa0>)
 800efda:	4293      	cmp	r3, r2
 800efdc:	d003      	beq.n	800efe6 <HAL_RAMECC_EnableNotification+0x42>
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	4a19      	ldr	r2, [pc, #100]	; (800f048 <HAL_RAMECC_EnableNotification+0xa4>)
 800efe2:	4293      	cmp	r3, r2
 800efe4:	d10e      	bne.n	800f004 <HAL_RAMECC_EnableNotification+0x60>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800efee:	681a      	ldr	r2, [r3, #0]
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800eff6:	6879      	ldr	r1, [r7, #4]
 800eff8:	6809      	ldr	r1, [r1, #0]
 800effa:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800effe:	4313      	orrs	r3, r2
 800f000:	600b      	str	r3, [r1, #0]
 800f002:	e009      	b.n	800f018 <HAL_RAMECC_EnableNotification+0x74>
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	6819      	ldr	r1, [r3, #0]
 800f00a:	683b      	ldr	r3, [r7, #0]
 800f00c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	430a      	orrs	r2, r1
 800f016:	601a      	str	r2, [r3, #0]

    /* Change RAMECC peripheral state */
    hramecc->State = HAL_RAMECC_STATE_READY;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2201      	movs	r2, #1
 800f01c:	711a      	strb	r2, [r3, #4]
    /* Return HAL status */
    return HAL_ERROR;
  }

  /* Return HAL status */
  return HAL_OK;
 800f01e:	2300      	movs	r3, #0
 800f020:	e003      	b.n	800f02a <HAL_RAMECC_EnableNotification+0x86>
    hramecc->ErrorCode = HAL_RAMECC_ERROR_BUSY;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	2202      	movs	r2, #2
 800f026:	609a      	str	r2, [r3, #8]
    return HAL_ERROR;
 800f028:	2301      	movs	r3, #1
}
 800f02a:	4618      	mov	r0, r3
 800f02c:	370c      	adds	r7, #12
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr
 800f036:	bf00      	nop
 800f038:	10000001 	.word	0x10000001
 800f03c:	10000002 	.word	0x10000002
 800f040:	10000004 	.word	0x10000004
 800f044:	10000008 	.word	0x10000008
 800f048:	1000000f 	.word	0x1000000f

0800f04c <HAL_RAMECC_IRQHandler>:
  *                  the configuration information for the specified RAMECC
  *                  Monitor.
  * @retval None.
  */
void HAL_RAMECC_IRQHandler(RAMECC_HandleTypeDef *hramecc)
{
 800f04c:	b580      	push	{r7, lr}
 800f04e:	b086      	sub	sp, #24
 800f050:	af00      	add	r7, sp, #0
 800f052:	6078      	str	r0, [r7, #4]
  uint32_t ier_reg = ((RAMECC_TypeDef *)((uint32_t)hramecc->Instance & 0xFFFFFF00U))->IER;
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	681b      	ldr	r3, [r3, #0]
 800f058:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	617b      	str	r3, [r7, #20]
  uint32_t cr_reg = hramecc->Instance->CR >> 1U;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	681b      	ldr	r3, [r3, #0]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	085b      	lsrs	r3, r3, #1
 800f068:	613b      	str	r3, [r7, #16]
  uint32_t sr_reg = hramecc->Instance->SR;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	685b      	ldr	r3, [r3, #4]
 800f070:	60fb      	str	r3, [r7, #12]

  /* Update global interrupt variables */
  if ((ier_reg & RAMECC_IER_GIE) == RAMECC_IER_GIE)
 800f072:	697b      	ldr	r3, [r7, #20]
 800f074:	f003 0301 	and.w	r3, r3, #1
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <HAL_RAMECC_IRQHandler+0x34>
  {
    ier_reg = RAMECC_IT_GLOBAL_ALL;
 800f07c:	4b16      	ldr	r3, [pc, #88]	; (800f0d8 <HAL_RAMECC_IRQHandler+0x8c>)
 800f07e:	617b      	str	r3, [r7, #20]
  }

  /* Store the ECC Single error detected */
  if ((sr_reg & RAMECC_SR_SEDCF) == RAMECC_SR_SEDCF)
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f003 0301 	and.w	r3, r3, #1
 800f086:	2b00      	cmp	r3, #0
 800f088:	d005      	beq.n	800f096 <HAL_RAMECC_IRQHandler+0x4a>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_SINGLEERROR_DETECTED;
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	68db      	ldr	r3, [r3, #12]
 800f08e:	f043 0201 	orr.w	r2, r3, #1
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	60da      	str	r2, [r3, #12]
  }

  /* Store the ECC double error detected */
  if ((sr_reg & (RAMECC_SR_DEDF | RAMECC_SR_DEBWDF)) != 0U)
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	f003 0306 	and.w	r3, r3, #6
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d005      	beq.n	800f0ac <HAL_RAMECC_IRQHandler+0x60>
  {
    hramecc->RAMECCErrorCode |= HAL_RAMECC_DOUBLEERROR_DETECTED;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	68db      	ldr	r3, [r3, #12]
 800f0a4:	f043 0202 	orr.w	r2, r3, #2
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	60da      	str	r2, [r3, #12]
  }

  /* Clear active flags */
  __HAL_RAMECC_CLEAR_FLAG (hramecc, (((ier_reg | cr_reg) & (sr_reg << 1U)) >> 1U));
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	6859      	ldr	r1, [r3, #4]
 800f0b2:	697a      	ldr	r2, [r7, #20]
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	431a      	orrs	r2, r3
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	005b      	lsls	r3, r3, #1
 800f0bc:	4013      	ands	r3, r2
 800f0be:	085b      	lsrs	r3, r3, #1
 800f0c0:	43da      	mvns	r2, r3
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	400a      	ands	r2, r1
 800f0c8:	605a      	str	r2, [r3, #4]
  {
    /* Error detection callback */
    hramecc->DetectErrorCallback(hramecc);
  }
#else
  HAL_RAMECC_DetectErrorCallback(hramecc);
 800f0ca:	6878      	ldr	r0, [r7, #4]
 800f0cc:	f7f5 f9ce 	bl	800446c <HAL_RAMECC_DetectErrorCallback>
#endif /* USE_HAL_RAMECC_REGISTER_CALLBACKS */
}
 800f0d0:	bf00      	nop
 800f0d2:	3718      	adds	r7, #24
 800f0d4:	46bd      	mov	sp, r7
 800f0d6:	bd80      	pop	{r7, pc}
 800f0d8:	1000000f 	.word	0x1000000f

0800f0dc <HAL_RAMECC_GetRAMECCError>:
  *                         contains the configuration information for the
  *                         specified RAMECC instance.
  * @retval RAMECC error code detected.
  */
uint32_t HAL_RAMECC_GetRAMECCError(RAMECC_HandleTypeDef *hramecc)
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b083      	sub	sp, #12
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  /* Return the RAMECC error code detected*/
  return hramecc->RAMECCErrorCode;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	68db      	ldr	r3, [r3, #12]
}
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	370c      	adds	r7, #12
 800f0ec:	46bd      	mov	sp, r7
 800f0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0f2:	4770      	bx	lr

0800f0f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b08c      	sub	sp, #48	; 0x30
 800f0f8:	af00      	add	r7, sp, #0
 800f0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d102      	bne.n	800f108 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f102:	2301      	movs	r3, #1
 800f104:	f000 bc48 	b.w	800f998 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	f003 0301 	and.w	r3, r3, #1
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 8088 	beq.w	800f226 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f116:	4b99      	ldr	r3, [pc, #612]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f118:	691b      	ldr	r3, [r3, #16]
 800f11a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f11e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f120:	4b96      	ldr	r3, [pc, #600]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f124:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f128:	2b10      	cmp	r3, #16
 800f12a:	d007      	beq.n	800f13c <HAL_RCC_OscConfig+0x48>
 800f12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f12e:	2b18      	cmp	r3, #24
 800f130:	d111      	bne.n	800f156 <HAL_RCC_OscConfig+0x62>
 800f132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f134:	f003 0303 	and.w	r3, r3, #3
 800f138:	2b02      	cmp	r3, #2
 800f13a:	d10c      	bne.n	800f156 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f13c:	4b8f      	ldr	r3, [pc, #572]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f13e:	681b      	ldr	r3, [r3, #0]
 800f140:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f144:	2b00      	cmp	r3, #0
 800f146:	d06d      	beq.n	800f224 <HAL_RCC_OscConfig+0x130>
 800f148:	687b      	ldr	r3, [r7, #4]
 800f14a:	685b      	ldr	r3, [r3, #4]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d169      	bne.n	800f224 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800f150:	2301      	movs	r3, #1
 800f152:	f000 bc21 	b.w	800f998 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	685b      	ldr	r3, [r3, #4]
 800f15a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f15e:	d106      	bne.n	800f16e <HAL_RCC_OscConfig+0x7a>
 800f160:	4b86      	ldr	r3, [pc, #536]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	4a85      	ldr	r2, [pc, #532]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f16a:	6013      	str	r3, [r2, #0]
 800f16c:	e02e      	b.n	800f1cc <HAL_RCC_OscConfig+0xd8>
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	685b      	ldr	r3, [r3, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	d10c      	bne.n	800f190 <HAL_RCC_OscConfig+0x9c>
 800f176:	4b81      	ldr	r3, [pc, #516]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	4a80      	ldr	r2, [pc, #512]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f17c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f180:	6013      	str	r3, [r2, #0]
 800f182:	4b7e      	ldr	r3, [pc, #504]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f184:	681b      	ldr	r3, [r3, #0]
 800f186:	4a7d      	ldr	r2, [pc, #500]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f188:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f18c:	6013      	str	r3, [r2, #0]
 800f18e:	e01d      	b.n	800f1cc <HAL_RCC_OscConfig+0xd8>
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	685b      	ldr	r3, [r3, #4]
 800f194:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800f198:	d10c      	bne.n	800f1b4 <HAL_RCC_OscConfig+0xc0>
 800f19a:	4b78      	ldr	r3, [pc, #480]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f19c:	681b      	ldr	r3, [r3, #0]
 800f19e:	4a77      	ldr	r2, [pc, #476]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f1a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f1a4:	6013      	str	r3, [r2, #0]
 800f1a6:	4b75      	ldr	r3, [pc, #468]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	4a74      	ldr	r2, [pc, #464]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f1ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f1b0:	6013      	str	r3, [r2, #0]
 800f1b2:	e00b      	b.n	800f1cc <HAL_RCC_OscConfig+0xd8>
 800f1b4:	4b71      	ldr	r3, [pc, #452]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f1b6:	681b      	ldr	r3, [r3, #0]
 800f1b8:	4a70      	ldr	r2, [pc, #448]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f1ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f1be:	6013      	str	r3, [r2, #0]
 800f1c0:	4b6e      	ldr	r3, [pc, #440]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4a6d      	ldr	r2, [pc, #436]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f1c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f1ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	685b      	ldr	r3, [r3, #4]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d013      	beq.n	800f1fc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1d4:	f7f7 fc18 	bl	8006a08 <HAL_GetTick>
 800f1d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f1da:	e008      	b.n	800f1ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f1dc:	f7f7 fc14 	bl	8006a08 <HAL_GetTick>
 800f1e0:	4602      	mov	r2, r0
 800f1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	2b64      	cmp	r3, #100	; 0x64
 800f1e8:	d901      	bls.n	800f1ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f1ea:	2303      	movs	r3, #3
 800f1ec:	e3d4      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f1ee:	4b63      	ldr	r3, [pc, #396]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d0f0      	beq.n	800f1dc <HAL_RCC_OscConfig+0xe8>
 800f1fa:	e014      	b.n	800f226 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f1fc:	f7f7 fc04 	bl	8006a08 <HAL_GetTick>
 800f200:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f202:	e008      	b.n	800f216 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f204:	f7f7 fc00 	bl	8006a08 <HAL_GetTick>
 800f208:	4602      	mov	r2, r0
 800f20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f20c:	1ad3      	subs	r3, r2, r3
 800f20e:	2b64      	cmp	r3, #100	; 0x64
 800f210:	d901      	bls.n	800f216 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800f212:	2303      	movs	r3, #3
 800f214:	e3c0      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f216:	4b59      	ldr	r3, [pc, #356]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f21e:	2b00      	cmp	r3, #0
 800f220:	d1f0      	bne.n	800f204 <HAL_RCC_OscConfig+0x110>
 800f222:	e000      	b.n	800f226 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f224:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	f003 0302 	and.w	r3, r3, #2
 800f22e:	2b00      	cmp	r3, #0
 800f230:	f000 80ca 	beq.w	800f3c8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f234:	4b51      	ldr	r3, [pc, #324]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f236:	691b      	ldr	r3, [r3, #16]
 800f238:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f23c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f23e:	4b4f      	ldr	r3, [pc, #316]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f242:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f244:	6a3b      	ldr	r3, [r7, #32]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d007      	beq.n	800f25a <HAL_RCC_OscConfig+0x166>
 800f24a:	6a3b      	ldr	r3, [r7, #32]
 800f24c:	2b18      	cmp	r3, #24
 800f24e:	d156      	bne.n	800f2fe <HAL_RCC_OscConfig+0x20a>
 800f250:	69fb      	ldr	r3, [r7, #28]
 800f252:	f003 0303 	and.w	r3, r3, #3
 800f256:	2b00      	cmp	r3, #0
 800f258:	d151      	bne.n	800f2fe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f25a:	4b48      	ldr	r3, [pc, #288]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	f003 0304 	and.w	r3, r3, #4
 800f262:	2b00      	cmp	r3, #0
 800f264:	d005      	beq.n	800f272 <HAL_RCC_OscConfig+0x17e>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	2b00      	cmp	r3, #0
 800f26c:	d101      	bne.n	800f272 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800f26e:	2301      	movs	r3, #1
 800f270:	e392      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f272:	4b42      	ldr	r3, [pc, #264]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f274:	681b      	ldr	r3, [r3, #0]
 800f276:	f023 0219 	bic.w	r2, r3, #25
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	68db      	ldr	r3, [r3, #12]
 800f27e:	493f      	ldr	r1, [pc, #252]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f280:	4313      	orrs	r3, r2
 800f282:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f284:	f7f7 fbc0 	bl	8006a08 <HAL_GetTick>
 800f288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f28a:	e008      	b.n	800f29e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f28c:	f7f7 fbbc 	bl	8006a08 <HAL_GetTick>
 800f290:	4602      	mov	r2, r0
 800f292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f294:	1ad3      	subs	r3, r2, r3
 800f296:	2b02      	cmp	r3, #2
 800f298:	d901      	bls.n	800f29e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800f29a:	2303      	movs	r3, #3
 800f29c:	e37c      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f29e:	4b37      	ldr	r3, [pc, #220]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f2a0:	681b      	ldr	r3, [r3, #0]
 800f2a2:	f003 0304 	and.w	r3, r3, #4
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d0f0      	beq.n	800f28c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f2aa:	f7f7 fbb9 	bl	8006a20 <HAL_GetREVID>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	f241 0203 	movw	r2, #4099	; 0x1003
 800f2b4:	4293      	cmp	r3, r2
 800f2b6:	d817      	bhi.n	800f2e8 <HAL_RCC_OscConfig+0x1f4>
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	691b      	ldr	r3, [r3, #16]
 800f2bc:	2b40      	cmp	r3, #64	; 0x40
 800f2be:	d108      	bne.n	800f2d2 <HAL_RCC_OscConfig+0x1de>
 800f2c0:	4b2e      	ldr	r3, [pc, #184]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f2c8:	4a2c      	ldr	r2, [pc, #176]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f2ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f2ce:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f2d0:	e07a      	b.n	800f3c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f2d2:	4b2a      	ldr	r3, [pc, #168]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	691b      	ldr	r3, [r3, #16]
 800f2de:	031b      	lsls	r3, r3, #12
 800f2e0:	4926      	ldr	r1, [pc, #152]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f2e2:	4313      	orrs	r3, r2
 800f2e4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f2e6:	e06f      	b.n	800f3c8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f2e8:	4b24      	ldr	r3, [pc, #144]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f2ea:	685b      	ldr	r3, [r3, #4]
 800f2ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	691b      	ldr	r3, [r3, #16]
 800f2f4:	061b      	lsls	r3, r3, #24
 800f2f6:	4921      	ldr	r1, [pc, #132]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f2f8:	4313      	orrs	r3, r2
 800f2fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f2fc:	e064      	b.n	800f3c8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	2b00      	cmp	r3, #0
 800f304:	d047      	beq.n	800f396 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f306:	4b1d      	ldr	r3, [pc, #116]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f308:	681b      	ldr	r3, [r3, #0]
 800f30a:	f023 0219 	bic.w	r2, r3, #25
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	68db      	ldr	r3, [r3, #12]
 800f312:	491a      	ldr	r1, [pc, #104]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f314:	4313      	orrs	r3, r2
 800f316:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f318:	f7f7 fb76 	bl	8006a08 <HAL_GetTick>
 800f31c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f31e:	e008      	b.n	800f332 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f320:	f7f7 fb72 	bl	8006a08 <HAL_GetTick>
 800f324:	4602      	mov	r2, r0
 800f326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f328:	1ad3      	subs	r3, r2, r3
 800f32a:	2b02      	cmp	r3, #2
 800f32c:	d901      	bls.n	800f332 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f32e:	2303      	movs	r3, #3
 800f330:	e332      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f332:	4b12      	ldr	r3, [pc, #72]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	f003 0304 	and.w	r3, r3, #4
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d0f0      	beq.n	800f320 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f33e:	f7f7 fb6f 	bl	8006a20 <HAL_GetREVID>
 800f342:	4603      	mov	r3, r0
 800f344:	f241 0203 	movw	r2, #4099	; 0x1003
 800f348:	4293      	cmp	r3, r2
 800f34a:	d819      	bhi.n	800f380 <HAL_RCC_OscConfig+0x28c>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	691b      	ldr	r3, [r3, #16]
 800f350:	2b40      	cmp	r3, #64	; 0x40
 800f352:	d108      	bne.n	800f366 <HAL_RCC_OscConfig+0x272>
 800f354:	4b09      	ldr	r3, [pc, #36]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f356:	685b      	ldr	r3, [r3, #4]
 800f358:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800f35c:	4a07      	ldr	r2, [pc, #28]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f35e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f362:	6053      	str	r3, [r2, #4]
 800f364:	e030      	b.n	800f3c8 <HAL_RCC_OscConfig+0x2d4>
 800f366:	4b05      	ldr	r3, [pc, #20]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f368:	685b      	ldr	r3, [r3, #4]
 800f36a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	691b      	ldr	r3, [r3, #16]
 800f372:	031b      	lsls	r3, r3, #12
 800f374:	4901      	ldr	r1, [pc, #4]	; (800f37c <HAL_RCC_OscConfig+0x288>)
 800f376:	4313      	orrs	r3, r2
 800f378:	604b      	str	r3, [r1, #4]
 800f37a:	e025      	b.n	800f3c8 <HAL_RCC_OscConfig+0x2d4>
 800f37c:	58024400 	.word	0x58024400
 800f380:	4b9a      	ldr	r3, [pc, #616]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f382:	685b      	ldr	r3, [r3, #4]
 800f384:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	691b      	ldr	r3, [r3, #16]
 800f38c:	061b      	lsls	r3, r3, #24
 800f38e:	4997      	ldr	r1, [pc, #604]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f390:	4313      	orrs	r3, r2
 800f392:	604b      	str	r3, [r1, #4]
 800f394:	e018      	b.n	800f3c8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f396:	4b95      	ldr	r3, [pc, #596]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	4a94      	ldr	r2, [pc, #592]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f39c:	f023 0301 	bic.w	r3, r3, #1
 800f3a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f3a2:	f7f7 fb31 	bl	8006a08 <HAL_GetTick>
 800f3a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f3a8:	e008      	b.n	800f3bc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f3aa:	f7f7 fb2d 	bl	8006a08 <HAL_GetTick>
 800f3ae:	4602      	mov	r2, r0
 800f3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3b2:	1ad3      	subs	r3, r2, r3
 800f3b4:	2b02      	cmp	r3, #2
 800f3b6:	d901      	bls.n	800f3bc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f3b8:	2303      	movs	r3, #3
 800f3ba:	e2ed      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f3bc:	4b8b      	ldr	r3, [pc, #556]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f3be:	681b      	ldr	r3, [r3, #0]
 800f3c0:	f003 0304 	and.w	r3, r3, #4
 800f3c4:	2b00      	cmp	r3, #0
 800f3c6:	d1f0      	bne.n	800f3aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	681b      	ldr	r3, [r3, #0]
 800f3cc:	f003 0310 	and.w	r3, r3, #16
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	f000 80a9 	beq.w	800f528 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f3d6:	4b85      	ldr	r3, [pc, #532]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f3d8:	691b      	ldr	r3, [r3, #16]
 800f3da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f3de:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f3e0:	4b82      	ldr	r3, [pc, #520]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f3e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3e4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	2b08      	cmp	r3, #8
 800f3ea:	d007      	beq.n	800f3fc <HAL_RCC_OscConfig+0x308>
 800f3ec:	69bb      	ldr	r3, [r7, #24]
 800f3ee:	2b18      	cmp	r3, #24
 800f3f0:	d13a      	bne.n	800f468 <HAL_RCC_OscConfig+0x374>
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	f003 0303 	and.w	r3, r3, #3
 800f3f8:	2b01      	cmp	r3, #1
 800f3fa:	d135      	bne.n	800f468 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f3fc:	4b7b      	ldr	r3, [pc, #492]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f404:	2b00      	cmp	r3, #0
 800f406:	d005      	beq.n	800f414 <HAL_RCC_OscConfig+0x320>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	69db      	ldr	r3, [r3, #28]
 800f40c:	2b80      	cmp	r3, #128	; 0x80
 800f40e:	d001      	beq.n	800f414 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800f410:	2301      	movs	r3, #1
 800f412:	e2c1      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f414:	f7f7 fb04 	bl	8006a20 <HAL_GetREVID>
 800f418:	4603      	mov	r3, r0
 800f41a:	f241 0203 	movw	r2, #4099	; 0x1003
 800f41e:	4293      	cmp	r3, r2
 800f420:	d817      	bhi.n	800f452 <HAL_RCC_OscConfig+0x35e>
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	6a1b      	ldr	r3, [r3, #32]
 800f426:	2b20      	cmp	r3, #32
 800f428:	d108      	bne.n	800f43c <HAL_RCC_OscConfig+0x348>
 800f42a:	4b70      	ldr	r3, [pc, #448]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f42c:	685b      	ldr	r3, [r3, #4]
 800f42e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f432:	4a6e      	ldr	r2, [pc, #440]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f434:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f438:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f43a:	e075      	b.n	800f528 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f43c:	4b6b      	ldr	r3, [pc, #428]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f43e:	685b      	ldr	r3, [r3, #4]
 800f440:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6a1b      	ldr	r3, [r3, #32]
 800f448:	069b      	lsls	r3, r3, #26
 800f44a:	4968      	ldr	r1, [pc, #416]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f44c:	4313      	orrs	r3, r2
 800f44e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f450:	e06a      	b.n	800f528 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f452:	4b66      	ldr	r3, [pc, #408]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	061b      	lsls	r3, r3, #24
 800f460:	4962      	ldr	r1, [pc, #392]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f462:	4313      	orrs	r3, r2
 800f464:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f466:	e05f      	b.n	800f528 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	69db      	ldr	r3, [r3, #28]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d042      	beq.n	800f4f6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f470:	4b5e      	ldr	r3, [pc, #376]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	4a5d      	ldr	r2, [pc, #372]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f47a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f47c:	f7f7 fac4 	bl	8006a08 <HAL_GetTick>
 800f480:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f482:	e008      	b.n	800f496 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f484:	f7f7 fac0 	bl	8006a08 <HAL_GetTick>
 800f488:	4602      	mov	r2, r0
 800f48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f48c:	1ad3      	subs	r3, r2, r3
 800f48e:	2b02      	cmp	r3, #2
 800f490:	d901      	bls.n	800f496 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800f492:	2303      	movs	r3, #3
 800f494:	e280      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f496:	4b55      	ldr	r3, [pc, #340]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f498:	681b      	ldr	r3, [r3, #0]
 800f49a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d0f0      	beq.n	800f484 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f4a2:	f7f7 fabd 	bl	8006a20 <HAL_GetREVID>
 800f4a6:	4603      	mov	r3, r0
 800f4a8:	f241 0203 	movw	r2, #4099	; 0x1003
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d817      	bhi.n	800f4e0 <HAL_RCC_OscConfig+0x3ec>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	6a1b      	ldr	r3, [r3, #32]
 800f4b4:	2b20      	cmp	r3, #32
 800f4b6:	d108      	bne.n	800f4ca <HAL_RCC_OscConfig+0x3d6>
 800f4b8:	4b4c      	ldr	r3, [pc, #304]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800f4c0:	4a4a      	ldr	r2, [pc, #296]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f4c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f4c6:	6053      	str	r3, [r2, #4]
 800f4c8:	e02e      	b.n	800f528 <HAL_RCC_OscConfig+0x434>
 800f4ca:	4b48      	ldr	r3, [pc, #288]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f4cc:	685b      	ldr	r3, [r3, #4]
 800f4ce:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a1b      	ldr	r3, [r3, #32]
 800f4d6:	069b      	lsls	r3, r3, #26
 800f4d8:	4944      	ldr	r1, [pc, #272]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f4da:	4313      	orrs	r3, r2
 800f4dc:	604b      	str	r3, [r1, #4]
 800f4de:	e023      	b.n	800f528 <HAL_RCC_OscConfig+0x434>
 800f4e0:	4b42      	ldr	r3, [pc, #264]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f4e2:	68db      	ldr	r3, [r3, #12]
 800f4e4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	6a1b      	ldr	r3, [r3, #32]
 800f4ec:	061b      	lsls	r3, r3, #24
 800f4ee:	493f      	ldr	r1, [pc, #252]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f4f0:	4313      	orrs	r3, r2
 800f4f2:	60cb      	str	r3, [r1, #12]
 800f4f4:	e018      	b.n	800f528 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f4f6:	4b3d      	ldr	r3, [pc, #244]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	4a3c      	ldr	r2, [pc, #240]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f4fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f502:	f7f7 fa81 	bl	8006a08 <HAL_GetTick>
 800f506:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f508:	e008      	b.n	800f51c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f50a:	f7f7 fa7d 	bl	8006a08 <HAL_GetTick>
 800f50e:	4602      	mov	r2, r0
 800f510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f512:	1ad3      	subs	r3, r2, r3
 800f514:	2b02      	cmp	r3, #2
 800f516:	d901      	bls.n	800f51c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f518:	2303      	movs	r3, #3
 800f51a:	e23d      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f51c:	4b33      	ldr	r3, [pc, #204]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f524:	2b00      	cmp	r3, #0
 800f526:	d1f0      	bne.n	800f50a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f003 0308 	and.w	r3, r3, #8
 800f530:	2b00      	cmp	r3, #0
 800f532:	d036      	beq.n	800f5a2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	695b      	ldr	r3, [r3, #20]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d019      	beq.n	800f570 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800f53c:	4b2b      	ldr	r3, [pc, #172]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f53e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f540:	4a2a      	ldr	r2, [pc, #168]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f542:	f043 0301 	orr.w	r3, r3, #1
 800f546:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f548:	f7f7 fa5e 	bl	8006a08 <HAL_GetTick>
 800f54c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f54e:	e008      	b.n	800f562 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f550:	f7f7 fa5a 	bl	8006a08 <HAL_GetTick>
 800f554:	4602      	mov	r2, r0
 800f556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f558:	1ad3      	subs	r3, r2, r3
 800f55a:	2b02      	cmp	r3, #2
 800f55c:	d901      	bls.n	800f562 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800f55e:	2303      	movs	r3, #3
 800f560:	e21a      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800f562:	4b22      	ldr	r3, [pc, #136]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f566:	f003 0302 	and.w	r3, r3, #2
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d0f0      	beq.n	800f550 <HAL_RCC_OscConfig+0x45c>
 800f56e:	e018      	b.n	800f5a2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800f570:	4b1e      	ldr	r3, [pc, #120]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f574:	4a1d      	ldr	r2, [pc, #116]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f576:	f023 0301 	bic.w	r3, r3, #1
 800f57a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f57c:	f7f7 fa44 	bl	8006a08 <HAL_GetTick>
 800f580:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f582:	e008      	b.n	800f596 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800f584:	f7f7 fa40 	bl	8006a08 <HAL_GetTick>
 800f588:	4602      	mov	r2, r0
 800f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58c:	1ad3      	subs	r3, r2, r3
 800f58e:	2b02      	cmp	r3, #2
 800f590:	d901      	bls.n	800f596 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800f592:	2303      	movs	r3, #3
 800f594:	e200      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800f596:	4b15      	ldr	r3, [pc, #84]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f598:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f59a:	f003 0302 	and.w	r3, r3, #2
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d1f0      	bne.n	800f584 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	f003 0320 	and.w	r3, r3, #32
 800f5aa:	2b00      	cmp	r3, #0
 800f5ac:	d039      	beq.n	800f622 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	699b      	ldr	r3, [r3, #24]
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d01c      	beq.n	800f5f0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800f5b6:	4b0d      	ldr	r3, [pc, #52]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f5b8:	681b      	ldr	r3, [r3, #0]
 800f5ba:	4a0c      	ldr	r2, [pc, #48]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f5bc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800f5c0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f5c2:	f7f7 fa21 	bl	8006a08 <HAL_GetTick>
 800f5c6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f5c8:	e008      	b.n	800f5dc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f5ca:	f7f7 fa1d 	bl	8006a08 <HAL_GetTick>
 800f5ce:	4602      	mov	r2, r0
 800f5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5d2:	1ad3      	subs	r3, r2, r3
 800f5d4:	2b02      	cmp	r3, #2
 800f5d6:	d901      	bls.n	800f5dc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800f5d8:	2303      	movs	r3, #3
 800f5da:	e1dd      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800f5dc:	4b03      	ldr	r3, [pc, #12]	; (800f5ec <HAL_RCC_OscConfig+0x4f8>)
 800f5de:	681b      	ldr	r3, [r3, #0]
 800f5e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f5e4:	2b00      	cmp	r3, #0
 800f5e6:	d0f0      	beq.n	800f5ca <HAL_RCC_OscConfig+0x4d6>
 800f5e8:	e01b      	b.n	800f622 <HAL_RCC_OscConfig+0x52e>
 800f5ea:	bf00      	nop
 800f5ec:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800f5f0:	4b9b      	ldr	r3, [pc, #620]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	4a9a      	ldr	r2, [pc, #616]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f5f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f5fa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800f5fc:	f7f7 fa04 	bl	8006a08 <HAL_GetTick>
 800f600:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f602:	e008      	b.n	800f616 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800f604:	f7f7 fa00 	bl	8006a08 <HAL_GetTick>
 800f608:	4602      	mov	r2, r0
 800f60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60c:	1ad3      	subs	r3, r2, r3
 800f60e:	2b02      	cmp	r3, #2
 800f610:	d901      	bls.n	800f616 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800f612:	2303      	movs	r3, #3
 800f614:	e1c0      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800f616:	4b92      	ldr	r3, [pc, #584]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d1f0      	bne.n	800f604 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f003 0304 	and.w	r3, r3, #4
 800f62a:	2b00      	cmp	r3, #0
 800f62c:	f000 8081 	beq.w	800f732 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800f630:	4b8c      	ldr	r3, [pc, #560]	; (800f864 <HAL_RCC_OscConfig+0x770>)
 800f632:	681b      	ldr	r3, [r3, #0]
 800f634:	4a8b      	ldr	r2, [pc, #556]	; (800f864 <HAL_RCC_OscConfig+0x770>)
 800f636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f63a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800f63c:	f7f7 f9e4 	bl	8006a08 <HAL_GetTick>
 800f640:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f642:	e008      	b.n	800f656 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f644:	f7f7 f9e0 	bl	8006a08 <HAL_GetTick>
 800f648:	4602      	mov	r2, r0
 800f64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f64c:	1ad3      	subs	r3, r2, r3
 800f64e:	2b64      	cmp	r3, #100	; 0x64
 800f650:	d901      	bls.n	800f656 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800f652:	2303      	movs	r3, #3
 800f654:	e1a0      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800f656:	4b83      	ldr	r3, [pc, #524]	; (800f864 <HAL_RCC_OscConfig+0x770>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d0f0      	beq.n	800f644 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	689b      	ldr	r3, [r3, #8]
 800f666:	2b01      	cmp	r3, #1
 800f668:	d106      	bne.n	800f678 <HAL_RCC_OscConfig+0x584>
 800f66a:	4b7d      	ldr	r3, [pc, #500]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f66c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f66e:	4a7c      	ldr	r2, [pc, #496]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f670:	f043 0301 	orr.w	r3, r3, #1
 800f674:	6713      	str	r3, [r2, #112]	; 0x70
 800f676:	e02d      	b.n	800f6d4 <HAL_RCC_OscConfig+0x5e0>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	689b      	ldr	r3, [r3, #8]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d10c      	bne.n	800f69a <HAL_RCC_OscConfig+0x5a6>
 800f680:	4b77      	ldr	r3, [pc, #476]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f684:	4a76      	ldr	r2, [pc, #472]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f686:	f023 0301 	bic.w	r3, r3, #1
 800f68a:	6713      	str	r3, [r2, #112]	; 0x70
 800f68c:	4b74      	ldr	r3, [pc, #464]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f68e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f690:	4a73      	ldr	r2, [pc, #460]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f692:	f023 0304 	bic.w	r3, r3, #4
 800f696:	6713      	str	r3, [r2, #112]	; 0x70
 800f698:	e01c      	b.n	800f6d4 <HAL_RCC_OscConfig+0x5e0>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	689b      	ldr	r3, [r3, #8]
 800f69e:	2b05      	cmp	r3, #5
 800f6a0:	d10c      	bne.n	800f6bc <HAL_RCC_OscConfig+0x5c8>
 800f6a2:	4b6f      	ldr	r3, [pc, #444]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f6a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6a6:	4a6e      	ldr	r2, [pc, #440]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f6a8:	f043 0304 	orr.w	r3, r3, #4
 800f6ac:	6713      	str	r3, [r2, #112]	; 0x70
 800f6ae:	4b6c      	ldr	r3, [pc, #432]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6b2:	4a6b      	ldr	r2, [pc, #428]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f6b4:	f043 0301 	orr.w	r3, r3, #1
 800f6b8:	6713      	str	r3, [r2, #112]	; 0x70
 800f6ba:	e00b      	b.n	800f6d4 <HAL_RCC_OscConfig+0x5e0>
 800f6bc:	4b68      	ldr	r3, [pc, #416]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f6be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6c0:	4a67      	ldr	r2, [pc, #412]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f6c2:	f023 0301 	bic.w	r3, r3, #1
 800f6c6:	6713      	str	r3, [r2, #112]	; 0x70
 800f6c8:	4b65      	ldr	r3, [pc, #404]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f6ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6cc:	4a64      	ldr	r2, [pc, #400]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f6ce:	f023 0304 	bic.w	r3, r3, #4
 800f6d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	689b      	ldr	r3, [r3, #8]
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d015      	beq.n	800f708 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f6dc:	f7f7 f994 	bl	8006a08 <HAL_GetTick>
 800f6e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f6e2:	e00a      	b.n	800f6fa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f6e4:	f7f7 f990 	bl	8006a08 <HAL_GetTick>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ec:	1ad3      	subs	r3, r2, r3
 800f6ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800f6f2:	4293      	cmp	r3, r2
 800f6f4:	d901      	bls.n	800f6fa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800f6f6:	2303      	movs	r3, #3
 800f6f8:	e14e      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f6fa:	4b59      	ldr	r3, [pc, #356]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f6fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f6fe:	f003 0302 	and.w	r3, r3, #2
 800f702:	2b00      	cmp	r3, #0
 800f704:	d0ee      	beq.n	800f6e4 <HAL_RCC_OscConfig+0x5f0>
 800f706:	e014      	b.n	800f732 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800f708:	f7f7 f97e 	bl	8006a08 <HAL_GetTick>
 800f70c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f70e:	e00a      	b.n	800f726 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800f710:	f7f7 f97a 	bl	8006a08 <HAL_GetTick>
 800f714:	4602      	mov	r2, r0
 800f716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f718:	1ad3      	subs	r3, r2, r3
 800f71a:	f241 3288 	movw	r2, #5000	; 0x1388
 800f71e:	4293      	cmp	r3, r2
 800f720:	d901      	bls.n	800f726 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800f722:	2303      	movs	r3, #3
 800f724:	e138      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800f726:	4b4e      	ldr	r3, [pc, #312]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f72a:	f003 0302 	and.w	r3, r3, #2
 800f72e:	2b00      	cmp	r3, #0
 800f730:	d1ee      	bne.n	800f710 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f736:	2b00      	cmp	r3, #0
 800f738:	f000 812d 	beq.w	800f996 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800f73c:	4b48      	ldr	r3, [pc, #288]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f73e:	691b      	ldr	r3, [r3, #16]
 800f740:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f744:	2b18      	cmp	r3, #24
 800f746:	f000 80bd 	beq.w	800f8c4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f74e:	2b02      	cmp	r3, #2
 800f750:	f040 809e 	bne.w	800f890 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f754:	4b42      	ldr	r3, [pc, #264]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f756:	681b      	ldr	r3, [r3, #0]
 800f758:	4a41      	ldr	r2, [pc, #260]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f75a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f75e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f760:	f7f7 f952 	bl	8006a08 <HAL_GetTick>
 800f764:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f766:	e008      	b.n	800f77a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f768:	f7f7 f94e 	bl	8006a08 <HAL_GetTick>
 800f76c:	4602      	mov	r2, r0
 800f76e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f770:	1ad3      	subs	r3, r2, r3
 800f772:	2b02      	cmp	r3, #2
 800f774:	d901      	bls.n	800f77a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800f776:	2303      	movs	r3, #3
 800f778:	e10e      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f77a:	4b39      	ldr	r3, [pc, #228]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1f0      	bne.n	800f768 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800f786:	4b36      	ldr	r3, [pc, #216]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f788:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f78a:	4b37      	ldr	r3, [pc, #220]	; (800f868 <HAL_RCC_OscConfig+0x774>)
 800f78c:	4013      	ands	r3, r2
 800f78e:	687a      	ldr	r2, [r7, #4]
 800f790:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800f792:	687a      	ldr	r2, [r7, #4]
 800f794:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800f796:	0112      	lsls	r2, r2, #4
 800f798:	430a      	orrs	r2, r1
 800f79a:	4931      	ldr	r1, [pc, #196]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f79c:	4313      	orrs	r3, r2
 800f79e:	628b      	str	r3, [r1, #40]	; 0x28
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7a4:	3b01      	subs	r3, #1
 800f7a6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f7ae:	3b01      	subs	r3, #1
 800f7b0:	025b      	lsls	r3, r3, #9
 800f7b2:	b29b      	uxth	r3, r3
 800f7b4:	431a      	orrs	r2, r3
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f7ba:	3b01      	subs	r3, #1
 800f7bc:	041b      	lsls	r3, r3, #16
 800f7be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800f7c2:	431a      	orrs	r2, r3
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f7c8:	3b01      	subs	r3, #1
 800f7ca:	061b      	lsls	r3, r3, #24
 800f7cc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800f7d0:	4923      	ldr	r1, [pc, #140]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800f7d6:	4b22      	ldr	r3, [pc, #136]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f7d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7da:	4a21      	ldr	r2, [pc, #132]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f7dc:	f023 0301 	bic.w	r3, r3, #1
 800f7e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f7e2:	4b1f      	ldr	r3, [pc, #124]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f7e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f7e6:	4b21      	ldr	r3, [pc, #132]	; (800f86c <HAL_RCC_OscConfig+0x778>)
 800f7e8:	4013      	ands	r3, r2
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f7ee:	00d2      	lsls	r2, r2, #3
 800f7f0:	491b      	ldr	r1, [pc, #108]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f7f2:	4313      	orrs	r3, r2
 800f7f4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800f7f6:	4b1a      	ldr	r3, [pc, #104]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f7f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f7fa:	f023 020c 	bic.w	r2, r3, #12
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f802:	4917      	ldr	r1, [pc, #92]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f804:	4313      	orrs	r3, r2
 800f806:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800f808:	4b15      	ldr	r3, [pc, #84]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f80a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f80c:	f023 0202 	bic.w	r2, r3, #2
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f814:	4912      	ldr	r1, [pc, #72]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f816:	4313      	orrs	r3, r2
 800f818:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800f81a:	4b11      	ldr	r3, [pc, #68]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f81c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81e:	4a10      	ldr	r2, [pc, #64]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f824:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800f826:	4b0e      	ldr	r3, [pc, #56]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f82a:	4a0d      	ldr	r2, [pc, #52]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f82c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f830:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800f832:	4b0b      	ldr	r3, [pc, #44]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f836:	4a0a      	ldr	r2, [pc, #40]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f838:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800f83c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800f83e:	4b08      	ldr	r3, [pc, #32]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f842:	4a07      	ldr	r2, [pc, #28]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f844:	f043 0301 	orr.w	r3, r3, #1
 800f848:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800f84a:	4b05      	ldr	r3, [pc, #20]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f84c:	681b      	ldr	r3, [r3, #0]
 800f84e:	4a04      	ldr	r2, [pc, #16]	; (800f860 <HAL_RCC_OscConfig+0x76c>)
 800f850:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800f854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f856:	f7f7 f8d7 	bl	8006a08 <HAL_GetTick>
 800f85a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f85c:	e011      	b.n	800f882 <HAL_RCC_OscConfig+0x78e>
 800f85e:	bf00      	nop
 800f860:	58024400 	.word	0x58024400
 800f864:	58024800 	.word	0x58024800
 800f868:	fffffc0c 	.word	0xfffffc0c
 800f86c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f870:	f7f7 f8ca 	bl	8006a08 <HAL_GetTick>
 800f874:	4602      	mov	r2, r0
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f878:	1ad3      	subs	r3, r2, r3
 800f87a:	2b02      	cmp	r3, #2
 800f87c:	d901      	bls.n	800f882 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800f87e:	2303      	movs	r3, #3
 800f880:	e08a      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800f882:	4b47      	ldr	r3, [pc, #284]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d0f0      	beq.n	800f870 <HAL_RCC_OscConfig+0x77c>
 800f88e:	e082      	b.n	800f996 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800f890:	4b43      	ldr	r3, [pc, #268]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	4a42      	ldr	r2, [pc, #264]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f896:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f89a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f89c:	f7f7 f8b4 	bl	8006a08 <HAL_GetTick>
 800f8a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f8a2:	e008      	b.n	800f8b6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800f8a4:	f7f7 f8b0 	bl	8006a08 <HAL_GetTick>
 800f8a8:	4602      	mov	r2, r0
 800f8aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	2b02      	cmp	r3, #2
 800f8b0:	d901      	bls.n	800f8b6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800f8b2:	2303      	movs	r3, #3
 800f8b4:	e070      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800f8b6:	4b3a      	ldr	r3, [pc, #232]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1f0      	bne.n	800f8a4 <HAL_RCC_OscConfig+0x7b0>
 800f8c2:	e068      	b.n	800f996 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800f8c4:	4b36      	ldr	r3, [pc, #216]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f8c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f8c8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800f8ca:	4b35      	ldr	r3, [pc, #212]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8ce:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f8d4:	2b01      	cmp	r3, #1
 800f8d6:	d031      	beq.n	800f93c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f8d8:	693b      	ldr	r3, [r7, #16]
 800f8da:	f003 0203 	and.w	r2, r3, #3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800f8e2:	429a      	cmp	r2, r3
 800f8e4:	d12a      	bne.n	800f93c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f8e6:	693b      	ldr	r3, [r7, #16]
 800f8e8:	091b      	lsrs	r3, r3, #4
 800f8ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800f8f2:	429a      	cmp	r2, r3
 800f8f4:	d122      	bne.n	800f93c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f900:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800f902:	429a      	cmp	r2, r3
 800f904:	d11a      	bne.n	800f93c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	0a5b      	lsrs	r3, r3, #9
 800f90a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f912:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800f914:	429a      	cmp	r2, r3
 800f916:	d111      	bne.n	800f93c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	0c1b      	lsrs	r3, r3, #16
 800f91c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f924:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800f926:	429a      	cmp	r2, r3
 800f928:	d108      	bne.n	800f93c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800f92a:	68fb      	ldr	r3, [r7, #12]
 800f92c:	0e1b      	lsrs	r3, r3, #24
 800f92e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f936:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800f938:	429a      	cmp	r2, r3
 800f93a:	d001      	beq.n	800f940 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800f93c:	2301      	movs	r3, #1
 800f93e:	e02b      	b.n	800f998 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800f940:	4b17      	ldr	r3, [pc, #92]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f944:	08db      	lsrs	r3, r3, #3
 800f946:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f94a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f950:	693a      	ldr	r2, [r7, #16]
 800f952:	429a      	cmp	r2, r3
 800f954:	d01f      	beq.n	800f996 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800f956:	4b12      	ldr	r3, [pc, #72]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f95a:	4a11      	ldr	r2, [pc, #68]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f95c:	f023 0301 	bic.w	r3, r3, #1
 800f960:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800f962:	f7f7 f851 	bl	8006a08 <HAL_GetTick>
 800f966:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800f968:	bf00      	nop
 800f96a:	f7f7 f84d 	bl	8006a08 <HAL_GetTick>
 800f96e:	4602      	mov	r2, r0
 800f970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f972:	4293      	cmp	r3, r2
 800f974:	d0f9      	beq.n	800f96a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800f976:	4b0a      	ldr	r3, [pc, #40]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f978:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f97a:	4b0a      	ldr	r3, [pc, #40]	; (800f9a4 <HAL_RCC_OscConfig+0x8b0>)
 800f97c:	4013      	ands	r3, r2
 800f97e:	687a      	ldr	r2, [r7, #4]
 800f980:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800f982:	00d2      	lsls	r2, r2, #3
 800f984:	4906      	ldr	r1, [pc, #24]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f986:	4313      	orrs	r3, r2
 800f988:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800f98a:	4b05      	ldr	r3, [pc, #20]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f98e:	4a04      	ldr	r2, [pc, #16]	; (800f9a0 <HAL_RCC_OscConfig+0x8ac>)
 800f990:	f043 0301 	orr.w	r3, r3, #1
 800f994:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800f996:	2300      	movs	r3, #0
}
 800f998:	4618      	mov	r0, r3
 800f99a:	3730      	adds	r7, #48	; 0x30
 800f99c:	46bd      	mov	sp, r7
 800f99e:	bd80      	pop	{r7, pc}
 800f9a0:	58024400 	.word	0x58024400
 800f9a4:	ffff0007 	.word	0xffff0007

0800f9a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800f9a8:	b580      	push	{r7, lr}
 800f9aa:	b086      	sub	sp, #24
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
 800f9b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d101      	bne.n	800f9bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	e19c      	b.n	800fcf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800f9bc:	4b8a      	ldr	r3, [pc, #552]	; (800fbe8 <HAL_RCC_ClockConfig+0x240>)
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f003 030f 	and.w	r3, r3, #15
 800f9c4:	683a      	ldr	r2, [r7, #0]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d910      	bls.n	800f9ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f9ca:	4b87      	ldr	r3, [pc, #540]	; (800fbe8 <HAL_RCC_ClockConfig+0x240>)
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f023 020f 	bic.w	r2, r3, #15
 800f9d2:	4985      	ldr	r1, [pc, #532]	; (800fbe8 <HAL_RCC_ClockConfig+0x240>)
 800f9d4:	683b      	ldr	r3, [r7, #0]
 800f9d6:	4313      	orrs	r3, r2
 800f9d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f9da:	4b83      	ldr	r3, [pc, #524]	; (800fbe8 <HAL_RCC_ClockConfig+0x240>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f003 030f 	and.w	r3, r3, #15
 800f9e2:	683a      	ldr	r2, [r7, #0]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d001      	beq.n	800f9ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800f9e8:	2301      	movs	r3, #1
 800f9ea:	e184      	b.n	800fcf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	f003 0304 	and.w	r3, r3, #4
 800f9f4:	2b00      	cmp	r3, #0
 800f9f6:	d010      	beq.n	800fa1a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	691a      	ldr	r2, [r3, #16]
 800f9fc:	4b7b      	ldr	r3, [pc, #492]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800f9fe:	699b      	ldr	r3, [r3, #24]
 800fa00:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fa04:	429a      	cmp	r2, r3
 800fa06:	d908      	bls.n	800fa1a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fa08:	4b78      	ldr	r3, [pc, #480]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa0a:	699b      	ldr	r3, [r3, #24]
 800fa0c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	691b      	ldr	r3, [r3, #16]
 800fa14:	4975      	ldr	r1, [pc, #468]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa16:	4313      	orrs	r3, r2
 800fa18:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	f003 0308 	and.w	r3, r3, #8
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d010      	beq.n	800fa48 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	695a      	ldr	r2, [r3, #20]
 800fa2a:	4b70      	ldr	r3, [pc, #448]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa2c:	69db      	ldr	r3, [r3, #28]
 800fa2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fa32:	429a      	cmp	r2, r3
 800fa34:	d908      	bls.n	800fa48 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fa36:	4b6d      	ldr	r3, [pc, #436]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa38:	69db      	ldr	r3, [r3, #28]
 800fa3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	695b      	ldr	r3, [r3, #20]
 800fa42:	496a      	ldr	r1, [pc, #424]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa44:	4313      	orrs	r3, r2
 800fa46:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	f003 0310 	and.w	r3, r3, #16
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d010      	beq.n	800fa76 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	699a      	ldr	r2, [r3, #24]
 800fa58:	4b64      	ldr	r3, [pc, #400]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa5a:	69db      	ldr	r3, [r3, #28]
 800fa5c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fa60:	429a      	cmp	r2, r3
 800fa62:	d908      	bls.n	800fa76 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fa64:	4b61      	ldr	r3, [pc, #388]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa66:	69db      	ldr	r3, [r3, #28]
 800fa68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fa6c:	687b      	ldr	r3, [r7, #4]
 800fa6e:	699b      	ldr	r3, [r3, #24]
 800fa70:	495e      	ldr	r1, [pc, #376]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa72:	4313      	orrs	r3, r2
 800fa74:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	f003 0320 	and.w	r3, r3, #32
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d010      	beq.n	800faa4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	69da      	ldr	r2, [r3, #28]
 800fa86:	4b59      	ldr	r3, [pc, #356]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa88:	6a1b      	ldr	r3, [r3, #32]
 800fa8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d908      	bls.n	800faa4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800fa92:	4b56      	ldr	r3, [pc, #344]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fa94:	6a1b      	ldr	r3, [r3, #32]
 800fa96:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	69db      	ldr	r3, [r3, #28]
 800fa9e:	4953      	ldr	r1, [pc, #332]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800faa0:	4313      	orrs	r3, r2
 800faa2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f003 0302 	and.w	r3, r3, #2
 800faac:	2b00      	cmp	r3, #0
 800faae:	d010      	beq.n	800fad2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	68da      	ldr	r2, [r3, #12]
 800fab4:	4b4d      	ldr	r3, [pc, #308]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fab6:	699b      	ldr	r3, [r3, #24]
 800fab8:	f003 030f 	and.w	r3, r3, #15
 800fabc:	429a      	cmp	r2, r3
 800fabe:	d908      	bls.n	800fad2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fac0:	4b4a      	ldr	r3, [pc, #296]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fac2:	699b      	ldr	r3, [r3, #24]
 800fac4:	f023 020f 	bic.w	r2, r3, #15
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	68db      	ldr	r3, [r3, #12]
 800facc:	4947      	ldr	r1, [pc, #284]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800face:	4313      	orrs	r3, r2
 800fad0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	f003 0301 	and.w	r3, r3, #1
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d055      	beq.n	800fb8a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800fade:	4b43      	ldr	r3, [pc, #268]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fae0:	699b      	ldr	r3, [r3, #24]
 800fae2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	689b      	ldr	r3, [r3, #8]
 800faea:	4940      	ldr	r1, [pc, #256]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800faec:	4313      	orrs	r3, r2
 800faee:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	685b      	ldr	r3, [r3, #4]
 800faf4:	2b02      	cmp	r3, #2
 800faf6:	d107      	bne.n	800fb08 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800faf8:	4b3c      	ldr	r3, [pc, #240]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d121      	bne.n	800fb48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fb04:	2301      	movs	r3, #1
 800fb06:	e0f6      	b.n	800fcf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	685b      	ldr	r3, [r3, #4]
 800fb0c:	2b03      	cmp	r3, #3
 800fb0e:	d107      	bne.n	800fb20 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fb10:	4b36      	ldr	r3, [pc, #216]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800fb18:	2b00      	cmp	r3, #0
 800fb1a:	d115      	bne.n	800fb48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fb1c:	2301      	movs	r3, #1
 800fb1e:	e0ea      	b.n	800fcf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800fb20:	687b      	ldr	r3, [r7, #4]
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d107      	bne.n	800fb38 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fb28:	4b30      	ldr	r3, [pc, #192]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fb2a:	681b      	ldr	r3, [r3, #0]
 800fb2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d109      	bne.n	800fb48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fb34:	2301      	movs	r3, #1
 800fb36:	e0de      	b.n	800fcf6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fb38:	4b2c      	ldr	r3, [pc, #176]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	f003 0304 	and.w	r3, r3, #4
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d101      	bne.n	800fb48 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fb44:	2301      	movs	r3, #1
 800fb46:	e0d6      	b.n	800fcf6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800fb48:	4b28      	ldr	r3, [pc, #160]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fb4a:	691b      	ldr	r3, [r3, #16]
 800fb4c:	f023 0207 	bic.w	r2, r3, #7
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	685b      	ldr	r3, [r3, #4]
 800fb54:	4925      	ldr	r1, [pc, #148]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fb56:	4313      	orrs	r3, r2
 800fb58:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800fb5a:	f7f6 ff55 	bl	8006a08 <HAL_GetTick>
 800fb5e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb60:	e00a      	b.n	800fb78 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800fb62:	f7f6 ff51 	bl	8006a08 <HAL_GetTick>
 800fb66:	4602      	mov	r2, r0
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	1ad3      	subs	r3, r2, r3
 800fb6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800fb70:	4293      	cmp	r3, r2
 800fb72:	d901      	bls.n	800fb78 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800fb74:	2303      	movs	r3, #3
 800fb76:	e0be      	b.n	800fcf6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800fb78:	4b1c      	ldr	r3, [pc, #112]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fb7a:	691b      	ldr	r3, [r3, #16]
 800fb7c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	685b      	ldr	r3, [r3, #4]
 800fb84:	00db      	lsls	r3, r3, #3
 800fb86:	429a      	cmp	r2, r3
 800fb88:	d1eb      	bne.n	800fb62 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	681b      	ldr	r3, [r3, #0]
 800fb8e:	f003 0302 	and.w	r3, r3, #2
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d010      	beq.n	800fbb8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	68da      	ldr	r2, [r3, #12]
 800fb9a:	4b14      	ldr	r3, [pc, #80]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fb9c:	699b      	ldr	r3, [r3, #24]
 800fb9e:	f003 030f 	and.w	r3, r3, #15
 800fba2:	429a      	cmp	r2, r3
 800fba4:	d208      	bcs.n	800fbb8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800fba6:	4b11      	ldr	r3, [pc, #68]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fba8:	699b      	ldr	r3, [r3, #24]
 800fbaa:	f023 020f 	bic.w	r2, r3, #15
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	490e      	ldr	r1, [pc, #56]	; (800fbec <HAL_RCC_ClockConfig+0x244>)
 800fbb4:	4313      	orrs	r3, r2
 800fbb6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800fbb8:	4b0b      	ldr	r3, [pc, #44]	; (800fbe8 <HAL_RCC_ClockConfig+0x240>)
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	f003 030f 	and.w	r3, r3, #15
 800fbc0:	683a      	ldr	r2, [r7, #0]
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d214      	bcs.n	800fbf0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fbc6:	4b08      	ldr	r3, [pc, #32]	; (800fbe8 <HAL_RCC_ClockConfig+0x240>)
 800fbc8:	681b      	ldr	r3, [r3, #0]
 800fbca:	f023 020f 	bic.w	r2, r3, #15
 800fbce:	4906      	ldr	r1, [pc, #24]	; (800fbe8 <HAL_RCC_ClockConfig+0x240>)
 800fbd0:	683b      	ldr	r3, [r7, #0]
 800fbd2:	4313      	orrs	r3, r2
 800fbd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fbd6:	4b04      	ldr	r3, [pc, #16]	; (800fbe8 <HAL_RCC_ClockConfig+0x240>)
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	f003 030f 	and.w	r3, r3, #15
 800fbde:	683a      	ldr	r2, [r7, #0]
 800fbe0:	429a      	cmp	r2, r3
 800fbe2:	d005      	beq.n	800fbf0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800fbe4:	2301      	movs	r3, #1
 800fbe6:	e086      	b.n	800fcf6 <HAL_RCC_ClockConfig+0x34e>
 800fbe8:	52002000 	.word	0x52002000
 800fbec:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	681b      	ldr	r3, [r3, #0]
 800fbf4:	f003 0304 	and.w	r3, r3, #4
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d010      	beq.n	800fc1e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	691a      	ldr	r2, [r3, #16]
 800fc00:	4b3f      	ldr	r3, [pc, #252]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc02:	699b      	ldr	r3, [r3, #24]
 800fc04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fc08:	429a      	cmp	r2, r3
 800fc0a:	d208      	bcs.n	800fc1e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fc0c:	4b3c      	ldr	r3, [pc, #240]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc0e:	699b      	ldr	r3, [r3, #24]
 800fc10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	691b      	ldr	r3, [r3, #16]
 800fc18:	4939      	ldr	r1, [pc, #228]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc1a:	4313      	orrs	r3, r2
 800fc1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	681b      	ldr	r3, [r3, #0]
 800fc22:	f003 0308 	and.w	r3, r3, #8
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d010      	beq.n	800fc4c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	695a      	ldr	r2, [r3, #20]
 800fc2e:	4b34      	ldr	r3, [pc, #208]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc30:	69db      	ldr	r3, [r3, #28]
 800fc32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fc36:	429a      	cmp	r2, r3
 800fc38:	d208      	bcs.n	800fc4c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fc3a:	4b31      	ldr	r3, [pc, #196]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc3c:	69db      	ldr	r3, [r3, #28]
 800fc3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	695b      	ldr	r3, [r3, #20]
 800fc46:	492e      	ldr	r1, [pc, #184]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc48:	4313      	orrs	r3, r2
 800fc4a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f003 0310 	and.w	r3, r3, #16
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d010      	beq.n	800fc7a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	699a      	ldr	r2, [r3, #24]
 800fc5c:	4b28      	ldr	r3, [pc, #160]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc5e:	69db      	ldr	r3, [r3, #28]
 800fc60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800fc64:	429a      	cmp	r2, r3
 800fc66:	d208      	bcs.n	800fc7a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800fc68:	4b25      	ldr	r3, [pc, #148]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc6a:	69db      	ldr	r3, [r3, #28]
 800fc6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	699b      	ldr	r3, [r3, #24]
 800fc74:	4922      	ldr	r1, [pc, #136]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc76:	4313      	orrs	r3, r2
 800fc78:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	681b      	ldr	r3, [r3, #0]
 800fc7e:	f003 0320 	and.w	r3, r3, #32
 800fc82:	2b00      	cmp	r3, #0
 800fc84:	d010      	beq.n	800fca8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	69da      	ldr	r2, [r3, #28]
 800fc8a:	4b1d      	ldr	r3, [pc, #116]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc8c:	6a1b      	ldr	r3, [r3, #32]
 800fc8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800fc92:	429a      	cmp	r2, r3
 800fc94:	d208      	bcs.n	800fca8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800fc96:	4b1a      	ldr	r3, [pc, #104]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fc98:	6a1b      	ldr	r3, [r3, #32]
 800fc9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	69db      	ldr	r3, [r3, #28]
 800fca2:	4917      	ldr	r1, [pc, #92]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fca4:	4313      	orrs	r3, r2
 800fca6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800fca8:	f000 f834 	bl	800fd14 <HAL_RCC_GetSysClockFreq>
 800fcac:	4602      	mov	r2, r0
 800fcae:	4b14      	ldr	r3, [pc, #80]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fcb0:	699b      	ldr	r3, [r3, #24]
 800fcb2:	0a1b      	lsrs	r3, r3, #8
 800fcb4:	f003 030f 	and.w	r3, r3, #15
 800fcb8:	4912      	ldr	r1, [pc, #72]	; (800fd04 <HAL_RCC_ClockConfig+0x35c>)
 800fcba:	5ccb      	ldrb	r3, [r1, r3]
 800fcbc:	f003 031f 	and.w	r3, r3, #31
 800fcc0:	fa22 f303 	lsr.w	r3, r2, r3
 800fcc4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800fcc6:	4b0e      	ldr	r3, [pc, #56]	; (800fd00 <HAL_RCC_ClockConfig+0x358>)
 800fcc8:	699b      	ldr	r3, [r3, #24]
 800fcca:	f003 030f 	and.w	r3, r3, #15
 800fcce:	4a0d      	ldr	r2, [pc, #52]	; (800fd04 <HAL_RCC_ClockConfig+0x35c>)
 800fcd0:	5cd3      	ldrb	r3, [r2, r3]
 800fcd2:	f003 031f 	and.w	r3, r3, #31
 800fcd6:	693a      	ldr	r2, [r7, #16]
 800fcd8:	fa22 f303 	lsr.w	r3, r2, r3
 800fcdc:	4a0a      	ldr	r2, [pc, #40]	; (800fd08 <HAL_RCC_ClockConfig+0x360>)
 800fcde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800fce0:	4a0a      	ldr	r2, [pc, #40]	; (800fd0c <HAL_RCC_ClockConfig+0x364>)
 800fce2:	693b      	ldr	r3, [r7, #16]
 800fce4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800fce6:	4b0a      	ldr	r3, [pc, #40]	; (800fd10 <HAL_RCC_ClockConfig+0x368>)
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	4618      	mov	r0, r3
 800fcec:	f7f5 f816 	bl	8004d1c <HAL_InitTick>
 800fcf0:	4603      	mov	r3, r0
 800fcf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800fcf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	3718      	adds	r7, #24
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	bd80      	pop	{r7, pc}
 800fcfe:	bf00      	nop
 800fd00:	58024400 	.word	0x58024400
 800fd04:	0801c6a4 	.word	0x0801c6a4
 800fd08:	240000cc 	.word	0x240000cc
 800fd0c:	240000c8 	.word	0x240000c8
 800fd10:	240000d0 	.word	0x240000d0

0800fd14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800fd14:	b480      	push	{r7}
 800fd16:	b089      	sub	sp, #36	; 0x24
 800fd18:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800fd1a:	4bb3      	ldr	r3, [pc, #716]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd1c:	691b      	ldr	r3, [r3, #16]
 800fd1e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fd22:	2b18      	cmp	r3, #24
 800fd24:	f200 8155 	bhi.w	800ffd2 <HAL_RCC_GetSysClockFreq+0x2be>
 800fd28:	a201      	add	r2, pc, #4	; (adr r2, 800fd30 <HAL_RCC_GetSysClockFreq+0x1c>)
 800fd2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd2e:	bf00      	nop
 800fd30:	0800fd95 	.word	0x0800fd95
 800fd34:	0800ffd3 	.word	0x0800ffd3
 800fd38:	0800ffd3 	.word	0x0800ffd3
 800fd3c:	0800ffd3 	.word	0x0800ffd3
 800fd40:	0800ffd3 	.word	0x0800ffd3
 800fd44:	0800ffd3 	.word	0x0800ffd3
 800fd48:	0800ffd3 	.word	0x0800ffd3
 800fd4c:	0800ffd3 	.word	0x0800ffd3
 800fd50:	0800fdbb 	.word	0x0800fdbb
 800fd54:	0800ffd3 	.word	0x0800ffd3
 800fd58:	0800ffd3 	.word	0x0800ffd3
 800fd5c:	0800ffd3 	.word	0x0800ffd3
 800fd60:	0800ffd3 	.word	0x0800ffd3
 800fd64:	0800ffd3 	.word	0x0800ffd3
 800fd68:	0800ffd3 	.word	0x0800ffd3
 800fd6c:	0800ffd3 	.word	0x0800ffd3
 800fd70:	0800fdc1 	.word	0x0800fdc1
 800fd74:	0800ffd3 	.word	0x0800ffd3
 800fd78:	0800ffd3 	.word	0x0800ffd3
 800fd7c:	0800ffd3 	.word	0x0800ffd3
 800fd80:	0800ffd3 	.word	0x0800ffd3
 800fd84:	0800ffd3 	.word	0x0800ffd3
 800fd88:	0800ffd3 	.word	0x0800ffd3
 800fd8c:	0800ffd3 	.word	0x0800ffd3
 800fd90:	0800fdc7 	.word	0x0800fdc7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd94:	4b94      	ldr	r3, [pc, #592]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fd96:	681b      	ldr	r3, [r3, #0]
 800fd98:	f003 0320 	and.w	r3, r3, #32
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d009      	beq.n	800fdb4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fda0:	4b91      	ldr	r3, [pc, #580]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	08db      	lsrs	r3, r3, #3
 800fda6:	f003 0303 	and.w	r3, r3, #3
 800fdaa:	4a90      	ldr	r2, [pc, #576]	; (800ffec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fdac:	fa22 f303 	lsr.w	r3, r2, r3
 800fdb0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800fdb2:	e111      	b.n	800ffd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800fdb4:	4b8d      	ldr	r3, [pc, #564]	; (800ffec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fdb6:	61bb      	str	r3, [r7, #24]
      break;
 800fdb8:	e10e      	b.n	800ffd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800fdba:	4b8d      	ldr	r3, [pc, #564]	; (800fff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800fdbc:	61bb      	str	r3, [r7, #24]
      break;
 800fdbe:	e10b      	b.n	800ffd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800fdc0:	4b8c      	ldr	r3, [pc, #560]	; (800fff4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800fdc2:	61bb      	str	r3, [r7, #24]
      break;
 800fdc4:	e108      	b.n	800ffd8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800fdc6:	4b88      	ldr	r3, [pc, #544]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdca:	f003 0303 	and.w	r3, r3, #3
 800fdce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800fdd0:	4b85      	ldr	r3, [pc, #532]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fdd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdd4:	091b      	lsrs	r3, r3, #4
 800fdd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fdda:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800fddc:	4b82      	ldr	r3, [pc, #520]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fdde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fde0:	f003 0301 	and.w	r3, r3, #1
 800fde4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800fde6:	4b80      	ldr	r3, [pc, #512]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fde8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fdea:	08db      	lsrs	r3, r3, #3
 800fdec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fdf0:	68fa      	ldr	r2, [r7, #12]
 800fdf2:	fb02 f303 	mul.w	r3, r2, r3
 800fdf6:	ee07 3a90 	vmov	s15, r3
 800fdfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fdfe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800fe02:	693b      	ldr	r3, [r7, #16]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	f000 80e1 	beq.w	800ffcc <HAL_RCC_GetSysClockFreq+0x2b8>
 800fe0a:	697b      	ldr	r3, [r7, #20]
 800fe0c:	2b02      	cmp	r3, #2
 800fe0e:	f000 8083 	beq.w	800ff18 <HAL_RCC_GetSysClockFreq+0x204>
 800fe12:	697b      	ldr	r3, [r7, #20]
 800fe14:	2b02      	cmp	r3, #2
 800fe16:	f200 80a1 	bhi.w	800ff5c <HAL_RCC_GetSysClockFreq+0x248>
 800fe1a:	697b      	ldr	r3, [r7, #20]
 800fe1c:	2b00      	cmp	r3, #0
 800fe1e:	d003      	beq.n	800fe28 <HAL_RCC_GetSysClockFreq+0x114>
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d056      	beq.n	800fed4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800fe26:	e099      	b.n	800ff5c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fe28:	4b6f      	ldr	r3, [pc, #444]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	f003 0320 	and.w	r3, r3, #32
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d02d      	beq.n	800fe90 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800fe34:	4b6c      	ldr	r3, [pc, #432]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe36:	681b      	ldr	r3, [r3, #0]
 800fe38:	08db      	lsrs	r3, r3, #3
 800fe3a:	f003 0303 	and.w	r3, r3, #3
 800fe3e:	4a6b      	ldr	r2, [pc, #428]	; (800ffec <HAL_RCC_GetSysClockFreq+0x2d8>)
 800fe40:	fa22 f303 	lsr.w	r3, r2, r3
 800fe44:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	ee07 3a90 	vmov	s15, r3
 800fe4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe50:	693b      	ldr	r3, [r7, #16]
 800fe52:	ee07 3a90 	vmov	s15, r3
 800fe56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fe5e:	4b62      	ldr	r3, [pc, #392]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fe60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fe62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fe66:	ee07 3a90 	vmov	s15, r3
 800fe6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fe6e:	ed97 6a02 	vldr	s12, [r7, #8]
 800fe72:	eddf 5a61 	vldr	s11, [pc, #388]	; 800fff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fe76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800fe7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fe7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fe82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800fe86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fe8a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800fe8e:	e087      	b.n	800ffa0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fe90:	693b      	ldr	r3, [r7, #16]
 800fe92:	ee07 3a90 	vmov	s15, r3
 800fe96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fe9a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800fffc <HAL_RCC_GetSysClockFreq+0x2e8>
 800fe9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fea2:	4b51      	ldr	r3, [pc, #324]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feaa:	ee07 3a90 	vmov	s15, r3
 800feae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800feb2:	ed97 6a02 	vldr	s12, [r7, #8]
 800feb6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800fff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800feba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800febe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800fec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800fec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800feca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fece:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800fed2:	e065      	b.n	800ffa0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800fed4:	693b      	ldr	r3, [r7, #16]
 800fed6:	ee07 3a90 	vmov	s15, r3
 800feda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800fede:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010000 <HAL_RCC_GetSysClockFreq+0x2ec>
 800fee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800fee6:	4b40      	ldr	r3, [pc, #256]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800fee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800feea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800feee:	ee07 3a90 	vmov	s15, r3
 800fef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800fef6:	ed97 6a02 	vldr	s12, [r7, #8]
 800fefa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800fff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800fefe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff12:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ff16:	e043      	b.n	800ffa0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff18:	693b      	ldr	r3, [r7, #16]
 800ff1a:	ee07 3a90 	vmov	s15, r3
 800ff1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff22:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010004 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ff26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff2a:	4b2f      	ldr	r3, [pc, #188]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff32:	ee07 3a90 	vmov	s15, r3
 800ff36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff3a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ff3e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800fff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ff42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff52:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff56:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ff5a:	e021      	b.n	800ffa0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	ee07 3a90 	vmov	s15, r3
 800ff62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ff66:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010000 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ff6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ff6e:	4b1e      	ldr	r3, [pc, #120]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ff70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ff72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ff76:	ee07 3a90 	vmov	s15, r3
 800ff7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ff7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ff82:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800fff8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ff86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ff8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ff8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ff92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff9a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ff9e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ffa0:	4b11      	ldr	r3, [pc, #68]	; (800ffe8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ffa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ffa4:	0a5b      	lsrs	r3, r3, #9
 800ffa6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ffaa:	3301      	adds	r3, #1
 800ffac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ffae:	683b      	ldr	r3, [r7, #0]
 800ffb0:	ee07 3a90 	vmov	s15, r3
 800ffb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ffb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800ffbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ffc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ffc4:	ee17 3a90 	vmov	r3, s15
 800ffc8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ffca:	e005      	b.n	800ffd8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ffcc:	2300      	movs	r3, #0
 800ffce:	61bb      	str	r3, [r7, #24]
      break;
 800ffd0:	e002      	b.n	800ffd8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ffd2:	4b07      	ldr	r3, [pc, #28]	; (800fff0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ffd4:	61bb      	str	r3, [r7, #24]
      break;
 800ffd6:	bf00      	nop
  }

  return sysclockfreq;
 800ffd8:	69bb      	ldr	r3, [r7, #24]
}
 800ffda:	4618      	mov	r0, r3
 800ffdc:	3724      	adds	r7, #36	; 0x24
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr
 800ffe6:	bf00      	nop
 800ffe8:	58024400 	.word	0x58024400
 800ffec:	03d09000 	.word	0x03d09000
 800fff0:	003d0900 	.word	0x003d0900
 800fff4:	017d7840 	.word	0x017d7840
 800fff8:	46000000 	.word	0x46000000
 800fffc:	4c742400 	.word	0x4c742400
 8010000:	4a742400 	.word	0x4a742400
 8010004:	4bbebc20 	.word	0x4bbebc20

08010008 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010008:	b580      	push	{r7, lr}
 801000a:	b082      	sub	sp, #8
 801000c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801000e:	f7ff fe81 	bl	800fd14 <HAL_RCC_GetSysClockFreq>
 8010012:	4602      	mov	r2, r0
 8010014:	4b10      	ldr	r3, [pc, #64]	; (8010058 <HAL_RCC_GetHCLKFreq+0x50>)
 8010016:	699b      	ldr	r3, [r3, #24]
 8010018:	0a1b      	lsrs	r3, r3, #8
 801001a:	f003 030f 	and.w	r3, r3, #15
 801001e:	490f      	ldr	r1, [pc, #60]	; (801005c <HAL_RCC_GetHCLKFreq+0x54>)
 8010020:	5ccb      	ldrb	r3, [r1, r3]
 8010022:	f003 031f 	and.w	r3, r3, #31
 8010026:	fa22 f303 	lsr.w	r3, r2, r3
 801002a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801002c:	4b0a      	ldr	r3, [pc, #40]	; (8010058 <HAL_RCC_GetHCLKFreq+0x50>)
 801002e:	699b      	ldr	r3, [r3, #24]
 8010030:	f003 030f 	and.w	r3, r3, #15
 8010034:	4a09      	ldr	r2, [pc, #36]	; (801005c <HAL_RCC_GetHCLKFreq+0x54>)
 8010036:	5cd3      	ldrb	r3, [r2, r3]
 8010038:	f003 031f 	and.w	r3, r3, #31
 801003c:	687a      	ldr	r2, [r7, #4]
 801003e:	fa22 f303 	lsr.w	r3, r2, r3
 8010042:	4a07      	ldr	r2, [pc, #28]	; (8010060 <HAL_RCC_GetHCLKFreq+0x58>)
 8010044:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010046:	4a07      	ldr	r2, [pc, #28]	; (8010064 <HAL_RCC_GetHCLKFreq+0x5c>)
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801004c:	4b04      	ldr	r3, [pc, #16]	; (8010060 <HAL_RCC_GetHCLKFreq+0x58>)
 801004e:	681b      	ldr	r3, [r3, #0]
}
 8010050:	4618      	mov	r0, r3
 8010052:	3708      	adds	r7, #8
 8010054:	46bd      	mov	sp, r7
 8010056:	bd80      	pop	{r7, pc}
 8010058:	58024400 	.word	0x58024400
 801005c:	0801c6a4 	.word	0x0801c6a4
 8010060:	240000cc 	.word	0x240000cc
 8010064:	240000c8 	.word	0x240000c8

08010068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010068:	b580      	push	{r7, lr}
 801006a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801006c:	f7ff ffcc 	bl	8010008 <HAL_RCC_GetHCLKFreq>
 8010070:	4602      	mov	r2, r0
 8010072:	4b06      	ldr	r3, [pc, #24]	; (801008c <HAL_RCC_GetPCLK1Freq+0x24>)
 8010074:	69db      	ldr	r3, [r3, #28]
 8010076:	091b      	lsrs	r3, r3, #4
 8010078:	f003 0307 	and.w	r3, r3, #7
 801007c:	4904      	ldr	r1, [pc, #16]	; (8010090 <HAL_RCC_GetPCLK1Freq+0x28>)
 801007e:	5ccb      	ldrb	r3, [r1, r3]
 8010080:	f003 031f 	and.w	r3, r3, #31
 8010084:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010088:	4618      	mov	r0, r3
 801008a:	bd80      	pop	{r7, pc}
 801008c:	58024400 	.word	0x58024400
 8010090:	0801c6a4 	.word	0x0801c6a4

08010094 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010094:	b580      	push	{r7, lr}
 8010096:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010098:	f7ff ffb6 	bl	8010008 <HAL_RCC_GetHCLKFreq>
 801009c:	4602      	mov	r2, r0
 801009e:	4b06      	ldr	r3, [pc, #24]	; (80100b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80100a0:	69db      	ldr	r3, [r3, #28]
 80100a2:	0a1b      	lsrs	r3, r3, #8
 80100a4:	f003 0307 	and.w	r3, r3, #7
 80100a8:	4904      	ldr	r1, [pc, #16]	; (80100bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80100aa:	5ccb      	ldrb	r3, [r1, r3]
 80100ac:	f003 031f 	and.w	r3, r3, #31
 80100b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80100b4:	4618      	mov	r0, r3
 80100b6:	bd80      	pop	{r7, pc}
 80100b8:	58024400 	.word	0x58024400
 80100bc:	0801c6a4 	.word	0x0801c6a4

080100c0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80100c0:	b480      	push	{r7}
 80100c2:	b083      	sub	sp, #12
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
 80100c8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	223f      	movs	r2, #63	; 0x3f
 80100ce:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80100d0:	4b1a      	ldr	r3, [pc, #104]	; (801013c <HAL_RCC_GetClockConfig+0x7c>)
 80100d2:	691b      	ldr	r3, [r3, #16]
 80100d4:	f003 0207 	and.w	r2, r3, #7
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80100dc:	4b17      	ldr	r3, [pc, #92]	; (801013c <HAL_RCC_GetClockConfig+0x7c>)
 80100de:	699b      	ldr	r3, [r3, #24]
 80100e0:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80100e8:	4b14      	ldr	r3, [pc, #80]	; (801013c <HAL_RCC_GetClockConfig+0x7c>)
 80100ea:	699b      	ldr	r3, [r3, #24]
 80100ec:	f003 020f 	and.w	r2, r3, #15
 80100f0:	687b      	ldr	r3, [r7, #4]
 80100f2:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80100f4:	4b11      	ldr	r3, [pc, #68]	; (801013c <HAL_RCC_GetClockConfig+0x7c>)
 80100f6:	699b      	ldr	r3, [r3, #24]
 80100f8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8010100:	4b0e      	ldr	r3, [pc, #56]	; (801013c <HAL_RCC_GetClockConfig+0x7c>)
 8010102:	69db      	ldr	r3, [r3, #28]
 8010104:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 801010c:	4b0b      	ldr	r3, [pc, #44]	; (801013c <HAL_RCC_GetClockConfig+0x7c>)
 801010e:	69db      	ldr	r3, [r3, #28]
 8010110:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8010118:	4b08      	ldr	r3, [pc, #32]	; (801013c <HAL_RCC_GetClockConfig+0x7c>)
 801011a:	6a1b      	ldr	r3, [r3, #32]
 801011c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8010124:	4b06      	ldr	r3, [pc, #24]	; (8010140 <HAL_RCC_GetClockConfig+0x80>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	f003 020f 	and.w	r2, r3, #15
 801012c:	683b      	ldr	r3, [r7, #0]
 801012e:	601a      	str	r2, [r3, #0]
}
 8010130:	bf00      	nop
 8010132:	370c      	adds	r7, #12
 8010134:	46bd      	mov	sp, r7
 8010136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801013a:	4770      	bx	lr
 801013c:	58024400 	.word	0x58024400
 8010140:	52002000 	.word	0x52002000

08010144 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010144:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010148:	b0ca      	sub	sp, #296	; 0x128
 801014a:	af00      	add	r7, sp, #0
 801014c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010150:	2300      	movs	r3, #0
 8010152:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010156:	2300      	movs	r3, #0
 8010158:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801015c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010164:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8010168:	2500      	movs	r5, #0
 801016a:	ea54 0305 	orrs.w	r3, r4, r5
 801016e:	d049      	beq.n	8010204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8010170:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010174:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 801017a:	d02f      	beq.n	80101dc <HAL_RCCEx_PeriphCLKConfig+0x98>
 801017c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010180:	d828      	bhi.n	80101d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8010182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010186:	d01a      	beq.n	80101be <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8010188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801018c:	d822      	bhi.n	80101d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801018e:	2b00      	cmp	r3, #0
 8010190:	d003      	beq.n	801019a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8010192:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010196:	d007      	beq.n	80101a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010198:	e01c      	b.n	80101d4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801019a:	4bb8      	ldr	r3, [pc, #736]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801019c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801019e:	4ab7      	ldr	r2, [pc, #732]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80101a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80101a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80101a6:	e01a      	b.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80101a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101ac:	3308      	adds	r3, #8
 80101ae:	2102      	movs	r1, #2
 80101b0:	4618      	mov	r0, r3
 80101b2:	f002 fb61 	bl	8012878 <RCCEx_PLL2_Config>
 80101b6:	4603      	mov	r3, r0
 80101b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80101bc:	e00f      	b.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80101be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101c2:	3328      	adds	r3, #40	; 0x28
 80101c4:	2102      	movs	r1, #2
 80101c6:	4618      	mov	r0, r3
 80101c8:	f002 fc08 	bl	80129dc <RCCEx_PLL3_Config>
 80101cc:	4603      	mov	r3, r0
 80101ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80101d2:	e004      	b.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80101d4:	2301      	movs	r3, #1
 80101d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80101da:	e000      	b.n	80101de <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80101dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80101de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d10a      	bne.n	80101fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80101e6:	4ba5      	ldr	r3, [pc, #660]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80101e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101ea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80101ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80101f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101f4:	4aa1      	ldr	r2, [pc, #644]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80101f6:	430b      	orrs	r3, r1
 80101f8:	6513      	str	r3, [r2, #80]	; 0x50
 80101fa:	e003      	b.n	8010204 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80101fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010200:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801020c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8010210:	f04f 0900 	mov.w	r9, #0
 8010214:	ea58 0309 	orrs.w	r3, r8, r9
 8010218:	d047      	beq.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801021a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801021e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010220:	2b04      	cmp	r3, #4
 8010222:	d82a      	bhi.n	801027a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8010224:	a201      	add	r2, pc, #4	; (adr r2, 801022c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8010226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022a:	bf00      	nop
 801022c:	08010241 	.word	0x08010241
 8010230:	0801024f 	.word	0x0801024f
 8010234:	08010265 	.word	0x08010265
 8010238:	08010283 	.word	0x08010283
 801023c:	08010283 	.word	0x08010283
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010240:	4b8e      	ldr	r3, [pc, #568]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010244:	4a8d      	ldr	r2, [pc, #564]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010246:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801024a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801024c:	e01a      	b.n	8010284 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801024e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010252:	3308      	adds	r3, #8
 8010254:	2100      	movs	r1, #0
 8010256:	4618      	mov	r0, r3
 8010258:	f002 fb0e 	bl	8012878 <RCCEx_PLL2_Config>
 801025c:	4603      	mov	r3, r0
 801025e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010262:	e00f      	b.n	8010284 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010264:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010268:	3328      	adds	r3, #40	; 0x28
 801026a:	2100      	movs	r1, #0
 801026c:	4618      	mov	r0, r3
 801026e:	f002 fbb5 	bl	80129dc <RCCEx_PLL3_Config>
 8010272:	4603      	mov	r3, r0
 8010274:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010278:	e004      	b.n	8010284 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801027a:	2301      	movs	r3, #1
 801027c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010280:	e000      	b.n	8010284 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8010282:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010288:	2b00      	cmp	r3, #0
 801028a:	d10a      	bne.n	80102a2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801028c:	4b7b      	ldr	r3, [pc, #492]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801028e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010290:	f023 0107 	bic.w	r1, r3, #7
 8010294:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801029a:	4a78      	ldr	r2, [pc, #480]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801029c:	430b      	orrs	r3, r1
 801029e:	6513      	str	r3, [r2, #80]	; 0x50
 80102a0:	e003      	b.n	80102aa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80102a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80102a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80102aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102b2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80102b6:	f04f 0b00 	mov.w	fp, #0
 80102ba:	ea5a 030b 	orrs.w	r3, sl, fp
 80102be:	d04c      	beq.n	801035a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80102c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80102c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102ca:	d030      	beq.n	801032e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80102cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80102d0:	d829      	bhi.n	8010326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80102d2:	2bc0      	cmp	r3, #192	; 0xc0
 80102d4:	d02d      	beq.n	8010332 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80102d6:	2bc0      	cmp	r3, #192	; 0xc0
 80102d8:	d825      	bhi.n	8010326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80102da:	2b80      	cmp	r3, #128	; 0x80
 80102dc:	d018      	beq.n	8010310 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80102de:	2b80      	cmp	r3, #128	; 0x80
 80102e0:	d821      	bhi.n	8010326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80102e2:	2b00      	cmp	r3, #0
 80102e4:	d002      	beq.n	80102ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80102e6:	2b40      	cmp	r3, #64	; 0x40
 80102e8:	d007      	beq.n	80102fa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80102ea:	e01c      	b.n	8010326 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80102ec:	4b63      	ldr	r3, [pc, #396]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80102ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102f0:	4a62      	ldr	r2, [pc, #392]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80102f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80102f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80102f8:	e01c      	b.n	8010334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80102fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80102fe:	3308      	adds	r3, #8
 8010300:	2100      	movs	r1, #0
 8010302:	4618      	mov	r0, r3
 8010304:	f002 fab8 	bl	8012878 <RCCEx_PLL2_Config>
 8010308:	4603      	mov	r3, r0
 801030a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801030e:	e011      	b.n	8010334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010314:	3328      	adds	r3, #40	; 0x28
 8010316:	2100      	movs	r1, #0
 8010318:	4618      	mov	r0, r3
 801031a:	f002 fb5f 	bl	80129dc <RCCEx_PLL3_Config>
 801031e:	4603      	mov	r3, r0
 8010320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8010324:	e006      	b.n	8010334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010326:	2301      	movs	r3, #1
 8010328:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801032c:	e002      	b.n	8010334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801032e:	bf00      	nop
 8010330:	e000      	b.n	8010334 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8010332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010334:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010338:	2b00      	cmp	r3, #0
 801033a:	d10a      	bne.n	8010352 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801033c:	4b4f      	ldr	r3, [pc, #316]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801033e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010340:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8010344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801034a:	4a4c      	ldr	r2, [pc, #304]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801034c:	430b      	orrs	r3, r1
 801034e:	6513      	str	r3, [r2, #80]	; 0x50
 8010350:	e003      	b.n	801035a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010352:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010356:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801035a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801035e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010362:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8010366:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 801036a:	2300      	movs	r3, #0
 801036c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010370:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8010374:	460b      	mov	r3, r1
 8010376:	4313      	orrs	r3, r2
 8010378:	d053      	beq.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801037a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801037e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010382:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010386:	d035      	beq.n	80103f4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8010388:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801038c:	d82e      	bhi.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801038e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010392:	d031      	beq.n	80103f8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8010394:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010398:	d828      	bhi.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801039a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801039e:	d01a      	beq.n	80103d6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80103a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80103a4:	d822      	bhi.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80103a6:	2b00      	cmp	r3, #0
 80103a8:	d003      	beq.n	80103b2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80103aa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80103ae:	d007      	beq.n	80103c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80103b0:	e01c      	b.n	80103ec <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80103b2:	4b32      	ldr	r3, [pc, #200]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80103b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103b6:	4a31      	ldr	r2, [pc, #196]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80103b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80103bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80103be:	e01c      	b.n	80103fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80103c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103c4:	3308      	adds	r3, #8
 80103c6:	2100      	movs	r1, #0
 80103c8:	4618      	mov	r0, r3
 80103ca:	f002 fa55 	bl	8012878 <RCCEx_PLL2_Config>
 80103ce:	4603      	mov	r3, r0
 80103d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80103d4:	e011      	b.n	80103fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80103d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80103da:	3328      	adds	r3, #40	; 0x28
 80103dc:	2100      	movs	r1, #0
 80103de:	4618      	mov	r0, r3
 80103e0:	f002 fafc 	bl	80129dc <RCCEx_PLL3_Config>
 80103e4:	4603      	mov	r3, r0
 80103e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80103ea:	e006      	b.n	80103fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80103ec:	2301      	movs	r3, #1
 80103ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80103f2:	e002      	b.n	80103fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80103f4:	bf00      	nop
 80103f6:	e000      	b.n	80103fa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80103f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80103fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d10b      	bne.n	801041a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8010402:	4b1e      	ldr	r3, [pc, #120]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010406:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 801040a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801040e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010412:	4a1a      	ldr	r2, [pc, #104]	; (801047c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010414:	430b      	orrs	r3, r1
 8010416:	6593      	str	r3, [r2, #88]	; 0x58
 8010418:	e003      	b.n	8010422 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801041a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801041e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010426:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 801042e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8010432:	2300      	movs	r3, #0
 8010434:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8010438:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 801043c:	460b      	mov	r3, r1
 801043e:	4313      	orrs	r3, r2
 8010440:	d056      	beq.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8010442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010446:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801044a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801044e:	d038      	beq.n	80104c2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8010450:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010454:	d831      	bhi.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010456:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 801045a:	d034      	beq.n	80104c6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801045c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010460:	d82b      	bhi.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010462:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010466:	d01d      	beq.n	80104a4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8010468:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801046c:	d825      	bhi.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 801046e:	2b00      	cmp	r3, #0
 8010470:	d006      	beq.n	8010480 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8010472:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010476:	d00a      	beq.n	801048e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8010478:	e01f      	b.n	80104ba <HAL_RCCEx_PeriphCLKConfig+0x376>
 801047a:	bf00      	nop
 801047c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010480:	4ba2      	ldr	r3, [pc, #648]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010484:	4aa1      	ldr	r2, [pc, #644]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801048a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801048c:	e01c      	b.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801048e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010492:	3308      	adds	r3, #8
 8010494:	2100      	movs	r1, #0
 8010496:	4618      	mov	r0, r3
 8010498:	f002 f9ee 	bl	8012878 <RCCEx_PLL2_Config>
 801049c:	4603      	mov	r3, r0
 801049e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80104a2:	e011      	b.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80104a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104a8:	3328      	adds	r3, #40	; 0x28
 80104aa:	2100      	movs	r1, #0
 80104ac:	4618      	mov	r0, r3
 80104ae:	f002 fa95 	bl	80129dc <RCCEx_PLL3_Config>
 80104b2:	4603      	mov	r3, r0
 80104b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80104b8:	e006      	b.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80104ba:	2301      	movs	r3, #1
 80104bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80104c0:	e002      	b.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80104c2:	bf00      	nop
 80104c4:	e000      	b.n	80104c8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80104c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80104c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d10b      	bne.n	80104e8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80104d0:	4b8e      	ldr	r3, [pc, #568]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80104d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80104d4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80104d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80104e0:	4a8a      	ldr	r2, [pc, #552]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80104e2:	430b      	orrs	r3, r1
 80104e4:	6593      	str	r3, [r2, #88]	; 0x58
 80104e6:	e003      	b.n	80104f0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80104e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80104ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80104f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80104f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104f8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80104fc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010500:	2300      	movs	r3, #0
 8010502:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010506:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 801050a:	460b      	mov	r3, r1
 801050c:	4313      	orrs	r3, r2
 801050e:	d03a      	beq.n	8010586 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8010510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010516:	2b30      	cmp	r3, #48	; 0x30
 8010518:	d01f      	beq.n	801055a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801051a:	2b30      	cmp	r3, #48	; 0x30
 801051c:	d819      	bhi.n	8010552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801051e:	2b20      	cmp	r3, #32
 8010520:	d00c      	beq.n	801053c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8010522:	2b20      	cmp	r3, #32
 8010524:	d815      	bhi.n	8010552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8010526:	2b00      	cmp	r3, #0
 8010528:	d019      	beq.n	801055e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801052a:	2b10      	cmp	r3, #16
 801052c:	d111      	bne.n	8010552 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801052e:	4b77      	ldr	r3, [pc, #476]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010532:	4a76      	ldr	r2, [pc, #472]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010538:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801053a:	e011      	b.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801053c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010540:	3308      	adds	r3, #8
 8010542:	2102      	movs	r1, #2
 8010544:	4618      	mov	r0, r3
 8010546:	f002 f997 	bl	8012878 <RCCEx_PLL2_Config>
 801054a:	4603      	mov	r3, r0
 801054c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010550:	e006      	b.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010552:	2301      	movs	r3, #1
 8010554:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010558:	e002      	b.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801055a:	bf00      	nop
 801055c:	e000      	b.n	8010560 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801055e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010564:	2b00      	cmp	r3, #0
 8010566:	d10a      	bne.n	801057e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010568:	4b68      	ldr	r3, [pc, #416]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801056a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801056c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8010570:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010576:	4a65      	ldr	r2, [pc, #404]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010578:	430b      	orrs	r3, r1
 801057a:	64d3      	str	r3, [r2, #76]	; 0x4c
 801057c:	e003      	b.n	8010586 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801057e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010582:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801058a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801058e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8010592:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010596:	2300      	movs	r3, #0
 8010598:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 801059c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80105a0:	460b      	mov	r3, r1
 80105a2:	4313      	orrs	r3, r2
 80105a4:	d051      	beq.n	801064a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80105a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80105ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105b0:	d035      	beq.n	801061e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80105b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80105b6:	d82e      	bhi.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80105b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80105bc:	d031      	beq.n	8010622 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80105be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80105c2:	d828      	bhi.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80105c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105c8:	d01a      	beq.n	8010600 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80105ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80105ce:	d822      	bhi.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d003      	beq.n	80105dc <HAL_RCCEx_PeriphCLKConfig+0x498>
 80105d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80105d8:	d007      	beq.n	80105ea <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80105da:	e01c      	b.n	8010616 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80105dc:	4b4b      	ldr	r3, [pc, #300]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80105de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105e0:	4a4a      	ldr	r2, [pc, #296]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80105e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80105e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80105e8:	e01c      	b.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80105ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80105ee:	3308      	adds	r3, #8
 80105f0:	2100      	movs	r1, #0
 80105f2:	4618      	mov	r0, r3
 80105f4:	f002 f940 	bl	8012878 <RCCEx_PLL2_Config>
 80105f8:	4603      	mov	r3, r0
 80105fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80105fe:	e011      	b.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010604:	3328      	adds	r3, #40	; 0x28
 8010606:	2100      	movs	r1, #0
 8010608:	4618      	mov	r0, r3
 801060a:	f002 f9e7 	bl	80129dc <RCCEx_PLL3_Config>
 801060e:	4603      	mov	r3, r0
 8010610:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010614:	e006      	b.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010616:	2301      	movs	r3, #1
 8010618:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801061c:	e002      	b.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801061e:	bf00      	nop
 8010620:	e000      	b.n	8010624 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8010622:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010628:	2b00      	cmp	r3, #0
 801062a:	d10a      	bne.n	8010642 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801062c:	4b37      	ldr	r3, [pc, #220]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801062e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010630:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8010634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801063a:	4a34      	ldr	r2, [pc, #208]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801063c:	430b      	orrs	r3, r1
 801063e:	6513      	str	r3, [r2, #80]	; 0x50
 8010640:	e003      	b.n	801064a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801064a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801064e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010652:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8010656:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 801065a:	2300      	movs	r3, #0
 801065c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010660:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8010664:	460b      	mov	r3, r1
 8010666:	4313      	orrs	r3, r2
 8010668:	d056      	beq.n	8010718 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801066a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801066e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010674:	d033      	beq.n	80106de <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8010676:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801067a:	d82c      	bhi.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801067c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010680:	d02f      	beq.n	80106e2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8010682:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010686:	d826      	bhi.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010688:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 801068c:	d02b      	beq.n	80106e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801068e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010692:	d820      	bhi.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010694:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8010698:	d012      	beq.n	80106c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801069a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801069e:	d81a      	bhi.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d022      	beq.n	80106ea <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80106a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106a8:	d115      	bne.n	80106d6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80106aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106ae:	3308      	adds	r3, #8
 80106b0:	2101      	movs	r1, #1
 80106b2:	4618      	mov	r0, r3
 80106b4:	f002 f8e0 	bl	8012878 <RCCEx_PLL2_Config>
 80106b8:	4603      	mov	r3, r0
 80106ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80106be:	e015      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80106c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80106c4:	3328      	adds	r3, #40	; 0x28
 80106c6:	2101      	movs	r1, #1
 80106c8:	4618      	mov	r0, r3
 80106ca:	f002 f987 	bl	80129dc <RCCEx_PLL3_Config>
 80106ce:	4603      	mov	r3, r0
 80106d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80106d4:	e00a      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80106d6:	2301      	movs	r3, #1
 80106d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80106dc:	e006      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80106de:	bf00      	nop
 80106e0:	e004      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80106e2:	bf00      	nop
 80106e4:	e002      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80106e6:	bf00      	nop
 80106e8:	e000      	b.n	80106ec <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80106ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80106ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d10d      	bne.n	8010710 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80106f4:	4b05      	ldr	r3, [pc, #20]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80106f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80106f8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80106fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010700:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010702:	4a02      	ldr	r2, [pc, #8]	; (801070c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010704:	430b      	orrs	r3, r1
 8010706:	6513      	str	r3, [r2, #80]	; 0x50
 8010708:	e006      	b.n	8010718 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801070a:	bf00      	nop
 801070c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010710:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010714:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010718:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801071c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010720:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8010724:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010728:	2300      	movs	r3, #0
 801072a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 801072e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8010732:	460b      	mov	r3, r1
 8010734:	4313      	orrs	r3, r2
 8010736:	d055      	beq.n	80107e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8010738:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801073c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8010740:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010744:	d033      	beq.n	80107ae <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8010746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801074a:	d82c      	bhi.n	80107a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801074c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010750:	d02f      	beq.n	80107b2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8010752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010756:	d826      	bhi.n	80107a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010758:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801075c:	d02b      	beq.n	80107b6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801075e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010762:	d820      	bhi.n	80107a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010764:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010768:	d012      	beq.n	8010790 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801076e:	d81a      	bhi.n	80107a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010770:	2b00      	cmp	r3, #0
 8010772:	d022      	beq.n	80107ba <HAL_RCCEx_PeriphCLKConfig+0x676>
 8010774:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010778:	d115      	bne.n	80107a6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801077a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801077e:	3308      	adds	r3, #8
 8010780:	2101      	movs	r1, #1
 8010782:	4618      	mov	r0, r3
 8010784:	f002 f878 	bl	8012878 <RCCEx_PLL2_Config>
 8010788:	4603      	mov	r3, r0
 801078a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801078e:	e015      	b.n	80107bc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010794:	3328      	adds	r3, #40	; 0x28
 8010796:	2101      	movs	r1, #1
 8010798:	4618      	mov	r0, r3
 801079a:	f002 f91f 	bl	80129dc <RCCEx_PLL3_Config>
 801079e:	4603      	mov	r3, r0
 80107a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80107a4:	e00a      	b.n	80107bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80107a6:	2301      	movs	r3, #1
 80107a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80107ac:	e006      	b.n	80107bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80107ae:	bf00      	nop
 80107b0:	e004      	b.n	80107bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80107b2:	bf00      	nop
 80107b4:	e002      	b.n	80107bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80107b6:	bf00      	nop
 80107b8:	e000      	b.n	80107bc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80107ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80107bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107c0:	2b00      	cmp	r3, #0
 80107c2:	d10b      	bne.n	80107dc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80107c4:	4ba3      	ldr	r3, [pc, #652]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80107c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80107c8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80107cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80107d4:	4a9f      	ldr	r2, [pc, #636]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80107d6:	430b      	orrs	r3, r1
 80107d8:	6593      	str	r3, [r2, #88]	; 0x58
 80107da:	e003      	b.n	80107e4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80107dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80107e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80107e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107ec:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80107f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80107f4:	2300      	movs	r3, #0
 80107f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80107fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80107fe:	460b      	mov	r3, r1
 8010800:	4313      	orrs	r3, r2
 8010802:	d037      	beq.n	8010874 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8010804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801080a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801080e:	d00e      	beq.n	801082e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8010810:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010814:	d816      	bhi.n	8010844 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8010816:	2b00      	cmp	r3, #0
 8010818:	d018      	beq.n	801084c <HAL_RCCEx_PeriphCLKConfig+0x708>
 801081a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801081e:	d111      	bne.n	8010844 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010820:	4b8c      	ldr	r3, [pc, #560]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010824:	4a8b      	ldr	r2, [pc, #556]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801082a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801082c:	e00f      	b.n	801084e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801082e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010832:	3308      	adds	r3, #8
 8010834:	2101      	movs	r1, #1
 8010836:	4618      	mov	r0, r3
 8010838:	f002 f81e 	bl	8012878 <RCCEx_PLL2_Config>
 801083c:	4603      	mov	r3, r0
 801083e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8010842:	e004      	b.n	801084e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010844:	2301      	movs	r3, #1
 8010846:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801084a:	e000      	b.n	801084e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801084c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801084e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010852:	2b00      	cmp	r3, #0
 8010854:	d10a      	bne.n	801086c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010856:	4b7f      	ldr	r3, [pc, #508]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010858:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801085a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801085e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010864:	4a7b      	ldr	r2, [pc, #492]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010866:	430b      	orrs	r3, r1
 8010868:	6513      	str	r3, [r2, #80]	; 0x50
 801086a:	e003      	b.n	8010874 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801086c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010870:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010878:	e9d3 2300 	ldrd	r2, r3, [r3]
 801087c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8010880:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010884:	2300      	movs	r3, #0
 8010886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 801088a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801088e:	460b      	mov	r3, r1
 8010890:	4313      	orrs	r3, r2
 8010892:	d039      	beq.n	8010908 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8010894:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801089a:	2b03      	cmp	r3, #3
 801089c:	d81c      	bhi.n	80108d8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801089e:	a201      	add	r2, pc, #4	; (adr r2, 80108a4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80108a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108a4:	080108e1 	.word	0x080108e1
 80108a8:	080108b5 	.word	0x080108b5
 80108ac:	080108c3 	.word	0x080108c3
 80108b0:	080108e1 	.word	0x080108e1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80108b4:	4b67      	ldr	r3, [pc, #412]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80108b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80108b8:	4a66      	ldr	r2, [pc, #408]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80108ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80108be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80108c0:	e00f      	b.n	80108e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80108c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108c6:	3308      	adds	r3, #8
 80108c8:	2102      	movs	r1, #2
 80108ca:	4618      	mov	r0, r3
 80108cc:	f001 ffd4 	bl	8012878 <RCCEx_PLL2_Config>
 80108d0:	4603      	mov	r3, r0
 80108d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 80108d6:	e004      	b.n	80108e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80108d8:	2301      	movs	r3, #1
 80108da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80108de:	e000      	b.n	80108e2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80108e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80108e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d10a      	bne.n	8010900 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80108ea:	4b5a      	ldr	r3, [pc, #360]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80108ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80108ee:	f023 0103 	bic.w	r1, r3, #3
 80108f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80108f8:	4a56      	ldr	r2, [pc, #344]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80108fa:	430b      	orrs	r3, r1
 80108fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80108fe:	e003      	b.n	8010908 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010900:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010904:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010908:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801090c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010910:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8010914:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010918:	2300      	movs	r3, #0
 801091a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 801091e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8010922:	460b      	mov	r3, r1
 8010924:	4313      	orrs	r3, r2
 8010926:	f000 809f 	beq.w	8010a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801092a:	4b4b      	ldr	r3, [pc, #300]	; (8010a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801092c:	681b      	ldr	r3, [r3, #0]
 801092e:	4a4a      	ldr	r2, [pc, #296]	; (8010a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8010930:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8010934:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010936:	f7f6 f867 	bl	8006a08 <HAL_GetTick>
 801093a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801093e:	e00b      	b.n	8010958 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010940:	f7f6 f862 	bl	8006a08 <HAL_GetTick>
 8010944:	4602      	mov	r2, r0
 8010946:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801094a:	1ad3      	subs	r3, r2, r3
 801094c:	2b64      	cmp	r3, #100	; 0x64
 801094e:	d903      	bls.n	8010958 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8010950:	2303      	movs	r3, #3
 8010952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010956:	e005      	b.n	8010964 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010958:	4b3f      	ldr	r3, [pc, #252]	; (8010a58 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801095a:	681b      	ldr	r3, [r3, #0]
 801095c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010960:	2b00      	cmp	r3, #0
 8010962:	d0ed      	beq.n	8010940 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8010964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010968:	2b00      	cmp	r3, #0
 801096a:	d179      	bne.n	8010a60 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801096c:	4b39      	ldr	r3, [pc, #228]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801096e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010970:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010974:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010978:	4053      	eors	r3, r2
 801097a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801097e:	2b00      	cmp	r3, #0
 8010980:	d015      	beq.n	80109ae <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010982:	4b34      	ldr	r3, [pc, #208]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801098a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801098e:	4b31      	ldr	r3, [pc, #196]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010992:	4a30      	ldr	r2, [pc, #192]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010998:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801099a:	4b2e      	ldr	r3, [pc, #184]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801099c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801099e:	4a2d      	ldr	r2, [pc, #180]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80109a4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80109a6:	4a2b      	ldr	r2, [pc, #172]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80109ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80109ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109b2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80109b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80109ba:	d118      	bne.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80109bc:	f7f6 f824 	bl	8006a08 <HAL_GetTick>
 80109c0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80109c4:	e00d      	b.n	80109e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80109c6:	f7f6 f81f 	bl	8006a08 <HAL_GetTick>
 80109ca:	4602      	mov	r2, r0
 80109cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80109d0:	1ad2      	subs	r2, r2, r3
 80109d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80109d6:	429a      	cmp	r2, r3
 80109d8:	d903      	bls.n	80109e2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80109da:	2303      	movs	r3, #3
 80109dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80109e0:	e005      	b.n	80109ee <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80109e2:	4b1c      	ldr	r3, [pc, #112]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80109e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109e6:	f003 0302 	and.w	r3, r3, #2
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d0eb      	beq.n	80109c6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80109ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d129      	bne.n	8010a4a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80109f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80109fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80109fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010a02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010a06:	d10e      	bne.n	8010a26 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8010a08:	4b12      	ldr	r3, [pc, #72]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a0a:	691b      	ldr	r3, [r3, #16]
 8010a0c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8010a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a14:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010a18:	091a      	lsrs	r2, r3, #4
 8010a1a:	4b10      	ldr	r3, [pc, #64]	; (8010a5c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8010a1c:	4013      	ands	r3, r2
 8010a1e:	4a0d      	ldr	r2, [pc, #52]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a20:	430b      	orrs	r3, r1
 8010a22:	6113      	str	r3, [r2, #16]
 8010a24:	e005      	b.n	8010a32 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8010a26:	4b0b      	ldr	r3, [pc, #44]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a28:	691b      	ldr	r3, [r3, #16]
 8010a2a:	4a0a      	ldr	r2, [pc, #40]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a2c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010a30:	6113      	str	r3, [r2, #16]
 8010a32:	4b08      	ldr	r3, [pc, #32]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a34:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a3a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8010a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010a42:	4a04      	ldr	r2, [pc, #16]	; (8010a54 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8010a44:	430b      	orrs	r3, r1
 8010a46:	6713      	str	r3, [r2, #112]	; 0x70
 8010a48:	e00e      	b.n	8010a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010a4e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8010a52:	e009      	b.n	8010a68 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8010a54:	58024400 	.word	0x58024400
 8010a58:	58024800 	.word	0x58024800
 8010a5c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010a64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010a68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a70:	f002 0301 	and.w	r3, r2, #1
 8010a74:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010a78:	2300      	movs	r3, #0
 8010a7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8010a7e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8010a82:	460b      	mov	r3, r1
 8010a84:	4313      	orrs	r3, r2
 8010a86:	f000 8089 	beq.w	8010b9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8010a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a90:	2b28      	cmp	r3, #40	; 0x28
 8010a92:	d86b      	bhi.n	8010b6c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8010a94:	a201      	add	r2, pc, #4	; (adr r2, 8010a9c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8010a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a9a:	bf00      	nop
 8010a9c:	08010b75 	.word	0x08010b75
 8010aa0:	08010b6d 	.word	0x08010b6d
 8010aa4:	08010b6d 	.word	0x08010b6d
 8010aa8:	08010b6d 	.word	0x08010b6d
 8010aac:	08010b6d 	.word	0x08010b6d
 8010ab0:	08010b6d 	.word	0x08010b6d
 8010ab4:	08010b6d 	.word	0x08010b6d
 8010ab8:	08010b6d 	.word	0x08010b6d
 8010abc:	08010b41 	.word	0x08010b41
 8010ac0:	08010b6d 	.word	0x08010b6d
 8010ac4:	08010b6d 	.word	0x08010b6d
 8010ac8:	08010b6d 	.word	0x08010b6d
 8010acc:	08010b6d 	.word	0x08010b6d
 8010ad0:	08010b6d 	.word	0x08010b6d
 8010ad4:	08010b6d 	.word	0x08010b6d
 8010ad8:	08010b6d 	.word	0x08010b6d
 8010adc:	08010b57 	.word	0x08010b57
 8010ae0:	08010b6d 	.word	0x08010b6d
 8010ae4:	08010b6d 	.word	0x08010b6d
 8010ae8:	08010b6d 	.word	0x08010b6d
 8010aec:	08010b6d 	.word	0x08010b6d
 8010af0:	08010b6d 	.word	0x08010b6d
 8010af4:	08010b6d 	.word	0x08010b6d
 8010af8:	08010b6d 	.word	0x08010b6d
 8010afc:	08010b75 	.word	0x08010b75
 8010b00:	08010b6d 	.word	0x08010b6d
 8010b04:	08010b6d 	.word	0x08010b6d
 8010b08:	08010b6d 	.word	0x08010b6d
 8010b0c:	08010b6d 	.word	0x08010b6d
 8010b10:	08010b6d 	.word	0x08010b6d
 8010b14:	08010b6d 	.word	0x08010b6d
 8010b18:	08010b6d 	.word	0x08010b6d
 8010b1c:	08010b75 	.word	0x08010b75
 8010b20:	08010b6d 	.word	0x08010b6d
 8010b24:	08010b6d 	.word	0x08010b6d
 8010b28:	08010b6d 	.word	0x08010b6d
 8010b2c:	08010b6d 	.word	0x08010b6d
 8010b30:	08010b6d 	.word	0x08010b6d
 8010b34:	08010b6d 	.word	0x08010b6d
 8010b38:	08010b6d 	.word	0x08010b6d
 8010b3c:	08010b75 	.word	0x08010b75
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b44:	3308      	adds	r3, #8
 8010b46:	2101      	movs	r1, #1
 8010b48:	4618      	mov	r0, r3
 8010b4a:	f001 fe95 	bl	8012878 <RCCEx_PLL2_Config>
 8010b4e:	4603      	mov	r3, r0
 8010b50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010b54:	e00f      	b.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010b56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b5a:	3328      	adds	r3, #40	; 0x28
 8010b5c:	2101      	movs	r1, #1
 8010b5e:	4618      	mov	r0, r3
 8010b60:	f001 ff3c 	bl	80129dc <RCCEx_PLL3_Config>
 8010b64:	4603      	mov	r3, r0
 8010b66:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8010b6a:	e004      	b.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010b72:	e000      	b.n	8010b76 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8010b74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d10a      	bne.n	8010b94 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8010b7e:	4bbf      	ldr	r3, [pc, #764]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b82:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8010b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010b8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010b8c:	4abb      	ldr	r2, [pc, #748]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010b8e:	430b      	orrs	r3, r1
 8010b90:	6553      	str	r3, [r2, #84]	; 0x54
 8010b92:	e003      	b.n	8010b9c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b94:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010b98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8010b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010ba4:	f002 0302 	and.w	r3, r2, #2
 8010ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010bac:	2300      	movs	r3, #0
 8010bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8010bb2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8010bb6:	460b      	mov	r3, r1
 8010bb8:	4313      	orrs	r3, r2
 8010bba:	d041      	beq.n	8010c40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8010bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010bc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010bc2:	2b05      	cmp	r3, #5
 8010bc4:	d824      	bhi.n	8010c10 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8010bc6:	a201      	add	r2, pc, #4	; (adr r2, 8010bcc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8010bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bcc:	08010c19 	.word	0x08010c19
 8010bd0:	08010be5 	.word	0x08010be5
 8010bd4:	08010bfb 	.word	0x08010bfb
 8010bd8:	08010c19 	.word	0x08010c19
 8010bdc:	08010c19 	.word	0x08010c19
 8010be0:	08010c19 	.word	0x08010c19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010be8:	3308      	adds	r3, #8
 8010bea:	2101      	movs	r1, #1
 8010bec:	4618      	mov	r0, r3
 8010bee:	f001 fe43 	bl	8012878 <RCCEx_PLL2_Config>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8010bf8:	e00f      	b.n	8010c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010bfe:	3328      	adds	r3, #40	; 0x28
 8010c00:	2101      	movs	r1, #1
 8010c02:	4618      	mov	r0, r3
 8010c04:	f001 feea 	bl	80129dc <RCCEx_PLL3_Config>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8010c0e:	e004      	b.n	8010c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010c10:	2301      	movs	r3, #1
 8010c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010c16:	e000      	b.n	8010c1a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8010c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d10a      	bne.n	8010c38 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8010c22:	4b96      	ldr	r3, [pc, #600]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c26:	f023 0107 	bic.w	r1, r3, #7
 8010c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010c30:	4a92      	ldr	r2, [pc, #584]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010c32:	430b      	orrs	r3, r1
 8010c34:	6553      	str	r3, [r2, #84]	; 0x54
 8010c36:	e003      	b.n	8010c40 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010c3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8010c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c48:	f002 0304 	and.w	r3, r2, #4
 8010c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010c50:	2300      	movs	r3, #0
 8010c52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010c56:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8010c5a:	460b      	mov	r3, r1
 8010c5c:	4313      	orrs	r3, r2
 8010c5e:	d044      	beq.n	8010cea <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8010c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010c68:	2b05      	cmp	r3, #5
 8010c6a:	d825      	bhi.n	8010cb8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8010c6c:	a201      	add	r2, pc, #4	; (adr r2, 8010c74 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8010c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c72:	bf00      	nop
 8010c74:	08010cc1 	.word	0x08010cc1
 8010c78:	08010c8d 	.word	0x08010c8d
 8010c7c:	08010ca3 	.word	0x08010ca3
 8010c80:	08010cc1 	.word	0x08010cc1
 8010c84:	08010cc1 	.word	0x08010cc1
 8010c88:	08010cc1 	.word	0x08010cc1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010c8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010c90:	3308      	adds	r3, #8
 8010c92:	2101      	movs	r1, #1
 8010c94:	4618      	mov	r0, r3
 8010c96:	f001 fdef 	bl	8012878 <RCCEx_PLL2_Config>
 8010c9a:	4603      	mov	r3, r0
 8010c9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010ca0:	e00f      	b.n	8010cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010ca6:	3328      	adds	r3, #40	; 0x28
 8010ca8:	2101      	movs	r1, #1
 8010caa:	4618      	mov	r0, r3
 8010cac:	f001 fe96 	bl	80129dc <RCCEx_PLL3_Config>
 8010cb0:	4603      	mov	r3, r0
 8010cb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8010cb6:	e004      	b.n	8010cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010cb8:	2301      	movs	r3, #1
 8010cba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010cbe:	e000      	b.n	8010cc2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8010cc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010cc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d10b      	bne.n	8010ce2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8010cca:	4b6c      	ldr	r3, [pc, #432]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010ccc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010cce:	f023 0107 	bic.w	r1, r3, #7
 8010cd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8010cda:	4a68      	ldr	r2, [pc, #416]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010cdc:	430b      	orrs	r3, r1
 8010cde:	6593      	str	r3, [r2, #88]	; 0x58
 8010ce0:	e003      	b.n	8010cea <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ce2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010ce6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8010cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cf2:	f002 0320 	and.w	r3, r2, #32
 8010cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010d00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8010d04:	460b      	mov	r3, r1
 8010d06:	4313      	orrs	r3, r2
 8010d08:	d055      	beq.n	8010db6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8010d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d12:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d16:	d033      	beq.n	8010d80 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8010d18:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010d1c:	d82c      	bhi.n	8010d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d22:	d02f      	beq.n	8010d84 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8010d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010d28:	d826      	bhi.n	8010d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010d2a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d2e:	d02b      	beq.n	8010d88 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8010d30:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8010d34:	d820      	bhi.n	8010d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d3a:	d012      	beq.n	8010d62 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8010d3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8010d40:	d81a      	bhi.n	8010d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d022      	beq.n	8010d8c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8010d46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8010d4a:	d115      	bne.n	8010d78 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010d4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d50:	3308      	adds	r3, #8
 8010d52:	2100      	movs	r1, #0
 8010d54:	4618      	mov	r0, r3
 8010d56:	f001 fd8f 	bl	8012878 <RCCEx_PLL2_Config>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010d60:	e015      	b.n	8010d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010d66:	3328      	adds	r3, #40	; 0x28
 8010d68:	2102      	movs	r1, #2
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	f001 fe36 	bl	80129dc <RCCEx_PLL3_Config>
 8010d70:	4603      	mov	r3, r0
 8010d72:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8010d76:	e00a      	b.n	8010d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010d78:	2301      	movs	r3, #1
 8010d7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010d7e:	e006      	b.n	8010d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010d80:	bf00      	nop
 8010d82:	e004      	b.n	8010d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010d84:	bf00      	nop
 8010d86:	e002      	b.n	8010d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010d88:	bf00      	nop
 8010d8a:	e000      	b.n	8010d8e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8010d8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010d8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d10b      	bne.n	8010dae <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8010d96:	4b39      	ldr	r3, [pc, #228]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d9a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8010d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010da6:	4a35      	ldr	r2, [pc, #212]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010da8:	430b      	orrs	r3, r1
 8010daa:	6553      	str	r3, [r2, #84]	; 0x54
 8010dac:	e003      	b.n	8010db6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010dae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010db2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8010db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dbe:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8010dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8010dc6:	2300      	movs	r3, #0
 8010dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8010dcc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	4313      	orrs	r3, r2
 8010dd4:	d058      	beq.n	8010e88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8010dd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010dde:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010de2:	d033      	beq.n	8010e4c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8010de4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8010de8:	d82c      	bhi.n	8010e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010dea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010dee:	d02f      	beq.n	8010e50 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8010df0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010df4:	d826      	bhi.n	8010e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010df6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010dfa:	d02b      	beq.n	8010e54 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8010dfc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010e00:	d820      	bhi.n	8010e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e06:	d012      	beq.n	8010e2e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8010e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010e0c:	d81a      	bhi.n	8010e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d022      	beq.n	8010e58 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8010e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e16:	d115      	bne.n	8010e44 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e1c:	3308      	adds	r3, #8
 8010e1e:	2100      	movs	r1, #0
 8010e20:	4618      	mov	r0, r3
 8010e22:	f001 fd29 	bl	8012878 <RCCEx_PLL2_Config>
 8010e26:	4603      	mov	r3, r0
 8010e28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010e2c:	e015      	b.n	8010e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010e2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e32:	3328      	adds	r3, #40	; 0x28
 8010e34:	2102      	movs	r1, #2
 8010e36:	4618      	mov	r0, r3
 8010e38:	f001 fdd0 	bl	80129dc <RCCEx_PLL3_Config>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8010e42:	e00a      	b.n	8010e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010e44:	2301      	movs	r3, #1
 8010e46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010e4a:	e006      	b.n	8010e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010e4c:	bf00      	nop
 8010e4e:	e004      	b.n	8010e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010e50:	bf00      	nop
 8010e52:	e002      	b.n	8010e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010e54:	bf00      	nop
 8010e56:	e000      	b.n	8010e5a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8010e58:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010e5a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d10e      	bne.n	8010e80 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8010e62:	4b06      	ldr	r3, [pc, #24]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e66:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8010e6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8010e72:	4a02      	ldr	r2, [pc, #8]	; (8010e7c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8010e74:	430b      	orrs	r3, r1
 8010e76:	6593      	str	r3, [r2, #88]	; 0x58
 8010e78:	e006      	b.n	8010e88 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8010e7a:	bf00      	nop
 8010e7c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8010e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e90:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8010e94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010e98:	2300      	movs	r3, #0
 8010e9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010e9e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8010ea2:	460b      	mov	r3, r1
 8010ea4:	4313      	orrs	r3, r2
 8010ea6:	d055      	beq.n	8010f54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8010ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010eac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010eb0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010eb4:	d033      	beq.n	8010f1e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8010eb6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8010eba:	d82c      	bhi.n	8010f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ec0:	d02f      	beq.n	8010f22 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8010ec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010ec6:	d826      	bhi.n	8010f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010ec8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010ecc:	d02b      	beq.n	8010f26 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8010ece:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8010ed2:	d820      	bhi.n	8010f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010ed4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010ed8:	d012      	beq.n	8010f00 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8010eda:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010ede:	d81a      	bhi.n	8010f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8010ee0:	2b00      	cmp	r3, #0
 8010ee2:	d022      	beq.n	8010f2a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8010ee4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010ee8:	d115      	bne.n	8010f16 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010eea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010eee:	3308      	adds	r3, #8
 8010ef0:	2100      	movs	r1, #0
 8010ef2:	4618      	mov	r0, r3
 8010ef4:	f001 fcc0 	bl	8012878 <RCCEx_PLL2_Config>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010efe:	e015      	b.n	8010f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f04:	3328      	adds	r3, #40	; 0x28
 8010f06:	2102      	movs	r1, #2
 8010f08:	4618      	mov	r0, r3
 8010f0a:	f001 fd67 	bl	80129dc <RCCEx_PLL3_Config>
 8010f0e:	4603      	mov	r3, r0
 8010f10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8010f14:	e00a      	b.n	8010f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010f16:	2301      	movs	r3, #1
 8010f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8010f1c:	e006      	b.n	8010f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010f1e:	bf00      	nop
 8010f20:	e004      	b.n	8010f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010f22:	bf00      	nop
 8010f24:	e002      	b.n	8010f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010f26:	bf00      	nop
 8010f28:	e000      	b.n	8010f2c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8010f2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	d10b      	bne.n	8010f4c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8010f34:	4ba1      	ldr	r3, [pc, #644]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010f38:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8010f3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8010f44:	4a9d      	ldr	r2, [pc, #628]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010f46:	430b      	orrs	r3, r1
 8010f48:	6593      	str	r3, [r2, #88]	; 0x58
 8010f4a:	e003      	b.n	8010f54 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8010f50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8010f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010f5c:	f002 0308 	and.w	r3, r2, #8
 8010f60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010f64:	2300      	movs	r3, #0
 8010f66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010f6a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8010f6e:	460b      	mov	r3, r1
 8010f70:	4313      	orrs	r3, r2
 8010f72:	d01e      	beq.n	8010fb2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8010f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010f7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f80:	d10c      	bne.n	8010f9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010f86:	3328      	adds	r3, #40	; 0x28
 8010f88:	2102      	movs	r1, #2
 8010f8a:	4618      	mov	r0, r3
 8010f8c:	f001 fd26 	bl	80129dc <RCCEx_PLL3_Config>
 8010f90:	4603      	mov	r3, r0
 8010f92:	2b00      	cmp	r3, #0
 8010f94:	d002      	beq.n	8010f9c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8010f96:	2301      	movs	r3, #1
 8010f98:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8010f9c:	4b87      	ldr	r3, [pc, #540]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010fa0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010fac:	4a83      	ldr	r2, [pc, #524]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010fae:	430b      	orrs	r3, r1
 8010fb0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8010fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fba:	f002 0310 	and.w	r3, r2, #16
 8010fbe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8010fc8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8010fcc:	460b      	mov	r3, r1
 8010fce:	4313      	orrs	r3, r2
 8010fd0:	d01e      	beq.n	8011010 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8010fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fd6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8010fda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010fde:	d10c      	bne.n	8010ffa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8010fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010fe4:	3328      	adds	r3, #40	; 0x28
 8010fe6:	2102      	movs	r1, #2
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f001 fcf7 	bl	80129dc <RCCEx_PLL3_Config>
 8010fee:	4603      	mov	r3, r0
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d002      	beq.n	8010ffa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8010ff4:	2301      	movs	r3, #1
 8010ff6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8010ffa:	4b70      	ldr	r3, [pc, #448]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8010ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ffe:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011002:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011006:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801100a:	4a6c      	ldr	r2, [pc, #432]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801100c:	430b      	orrs	r3, r1
 801100e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011010:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011018:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 801101c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011020:	2300      	movs	r3, #0
 8011022:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011026:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 801102a:	460b      	mov	r3, r1
 801102c:	4313      	orrs	r3, r2
 801102e:	d03e      	beq.n	80110ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8011030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011034:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8011038:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801103c:	d022      	beq.n	8011084 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801103e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011042:	d81b      	bhi.n	801107c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8011044:	2b00      	cmp	r3, #0
 8011046:	d003      	beq.n	8011050 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8011048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801104c:	d00b      	beq.n	8011066 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801104e:	e015      	b.n	801107c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011054:	3308      	adds	r3, #8
 8011056:	2100      	movs	r1, #0
 8011058:	4618      	mov	r0, r3
 801105a:	f001 fc0d 	bl	8012878 <RCCEx_PLL2_Config>
 801105e:	4603      	mov	r3, r0
 8011060:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8011064:	e00f      	b.n	8011086 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801106a:	3328      	adds	r3, #40	; 0x28
 801106c:	2102      	movs	r1, #2
 801106e:	4618      	mov	r0, r3
 8011070:	f001 fcb4 	bl	80129dc <RCCEx_PLL3_Config>
 8011074:	4603      	mov	r3, r0
 8011076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801107a:	e004      	b.n	8011086 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801107c:	2301      	movs	r3, #1
 801107e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011082:	e000      	b.n	8011086 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8011084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011086:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801108a:	2b00      	cmp	r3, #0
 801108c:	d10b      	bne.n	80110a6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801108e:	4b4b      	ldr	r3, [pc, #300]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011092:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8011096:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801109a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 801109e:	4a47      	ldr	r2, [pc, #284]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80110a0:	430b      	orrs	r3, r1
 80110a2:	6593      	str	r3, [r2, #88]	; 0x58
 80110a4:	e003      	b.n	80110ae <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80110a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80110aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80110ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110b6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80110ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80110bc:	2300      	movs	r3, #0
 80110be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80110c0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80110c4:	460b      	mov	r3, r1
 80110c6:	4313      	orrs	r3, r2
 80110c8:	d03b      	beq.n	8011142 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80110ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80110d2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80110d6:	d01f      	beq.n	8011118 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80110d8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80110dc:	d818      	bhi.n	8011110 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80110de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110e2:	d003      	beq.n	80110ec <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80110e4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80110e8:	d007      	beq.n	80110fa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80110ea:	e011      	b.n	8011110 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80110ec:	4b33      	ldr	r3, [pc, #204]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80110ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80110f0:	4a32      	ldr	r2, [pc, #200]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80110f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80110f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80110f8:	e00f      	b.n	801111a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80110fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80110fe:	3328      	adds	r3, #40	; 0x28
 8011100:	2101      	movs	r1, #1
 8011102:	4618      	mov	r0, r3
 8011104:	f001 fc6a 	bl	80129dc <RCCEx_PLL3_Config>
 8011108:	4603      	mov	r3, r0
 801110a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801110e:	e004      	b.n	801111a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011110:	2301      	movs	r3, #1
 8011112:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011116:	e000      	b.n	801111a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8011118:	bf00      	nop
    }

    if (ret == HAL_OK)
 801111a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801111e:	2b00      	cmp	r3, #0
 8011120:	d10b      	bne.n	801113a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011122:	4b26      	ldr	r3, [pc, #152]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011124:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011126:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 801112a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801112e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011132:	4a22      	ldr	r2, [pc, #136]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011134:	430b      	orrs	r3, r1
 8011136:	6553      	str	r3, [r2, #84]	; 0x54
 8011138:	e003      	b.n	8011142 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801113a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801113e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8011142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011146:	e9d3 2300 	ldrd	r2, r3, [r3]
 801114a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 801114e:	673b      	str	r3, [r7, #112]	; 0x70
 8011150:	2300      	movs	r3, #0
 8011152:	677b      	str	r3, [r7, #116]	; 0x74
 8011154:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8011158:	460b      	mov	r3, r1
 801115a:	4313      	orrs	r3, r2
 801115c:	d034      	beq.n	80111c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801115e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011164:	2b00      	cmp	r3, #0
 8011166:	d003      	beq.n	8011170 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8011168:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801116c:	d007      	beq.n	801117e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801116e:	e011      	b.n	8011194 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011170:	4b12      	ldr	r3, [pc, #72]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011174:	4a11      	ldr	r2, [pc, #68]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8011176:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801117a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801117c:	e00e      	b.n	801119c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801117e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011182:	3308      	adds	r3, #8
 8011184:	2102      	movs	r1, #2
 8011186:	4618      	mov	r0, r3
 8011188:	f001 fb76 	bl	8012878 <RCCEx_PLL2_Config>
 801118c:	4603      	mov	r3, r0
 801118e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8011192:	e003      	b.n	801119c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8011194:	2301      	movs	r3, #1
 8011196:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 801119a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801119c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80111a0:	2b00      	cmp	r3, #0
 80111a2:	d10d      	bne.n	80111c0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80111a4:	4b05      	ldr	r3, [pc, #20]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80111a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80111a8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80111ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111b2:	4a02      	ldr	r2, [pc, #8]	; (80111bc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80111b4:	430b      	orrs	r3, r1
 80111b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80111b8:	e006      	b.n	80111c8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80111ba:	bf00      	nop
 80111bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80111c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80111c4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80111c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111d0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80111d4:	66bb      	str	r3, [r7, #104]	; 0x68
 80111d6:	2300      	movs	r3, #0
 80111d8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80111da:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80111de:	460b      	mov	r3, r1
 80111e0:	4313      	orrs	r3, r2
 80111e2:	d00c      	beq.n	80111fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80111e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80111e8:	3328      	adds	r3, #40	; 0x28
 80111ea:	2102      	movs	r1, #2
 80111ec:	4618      	mov	r0, r3
 80111ee:	f001 fbf5 	bl	80129dc <RCCEx_PLL3_Config>
 80111f2:	4603      	mov	r3, r0
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d002      	beq.n	80111fe <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80111f8:	2301      	movs	r3, #1
 80111fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80111fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011206:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 801120a:	663b      	str	r3, [r7, #96]	; 0x60
 801120c:	2300      	movs	r3, #0
 801120e:	667b      	str	r3, [r7, #100]	; 0x64
 8011210:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8011214:	460b      	mov	r3, r1
 8011216:	4313      	orrs	r3, r2
 8011218:	d038      	beq.n	801128c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801121a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801121e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011222:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011226:	d018      	beq.n	801125a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8011228:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801122c:	d811      	bhi.n	8011252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801122e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011232:	d014      	beq.n	801125e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8011234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011238:	d80b      	bhi.n	8011252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801123a:	2b00      	cmp	r3, #0
 801123c:	d011      	beq.n	8011262 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801123e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011242:	d106      	bne.n	8011252 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011244:	4bc3      	ldr	r3, [pc, #780]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011248:	4ac2      	ldr	r2, [pc, #776]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801124a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801124e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8011250:	e008      	b.n	8011264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011252:	2301      	movs	r3, #1
 8011254:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8011258:	e004      	b.n	8011264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801125a:	bf00      	nop
 801125c:	e002      	b.n	8011264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801125e:	bf00      	nop
 8011260:	e000      	b.n	8011264 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8011262:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011268:	2b00      	cmp	r3, #0
 801126a:	d10b      	bne.n	8011284 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801126c:	4bb9      	ldr	r3, [pc, #740]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801126e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011270:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801127c:	4ab5      	ldr	r2, [pc, #724]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801127e:	430b      	orrs	r3, r1
 8011280:	6553      	str	r3, [r2, #84]	; 0x54
 8011282:	e003      	b.n	801128c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011284:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011288:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801128c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011294:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8011298:	65bb      	str	r3, [r7, #88]	; 0x58
 801129a:	2300      	movs	r3, #0
 801129c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801129e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80112a2:	460b      	mov	r3, r1
 80112a4:	4313      	orrs	r3, r2
 80112a6:	d009      	beq.n	80112bc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80112a8:	4baa      	ldr	r3, [pc, #680]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80112aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112ac:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80112b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80112b6:	4aa7      	ldr	r2, [pc, #668]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80112b8:	430b      	orrs	r3, r1
 80112ba:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80112bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80112c8:	653b      	str	r3, [r7, #80]	; 0x50
 80112ca:	2300      	movs	r3, #0
 80112cc:	657b      	str	r3, [r7, #84]	; 0x54
 80112ce:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80112d2:	460b      	mov	r3, r1
 80112d4:	4313      	orrs	r3, r2
 80112d6:	d00a      	beq.n	80112ee <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80112d8:	4b9e      	ldr	r3, [pc, #632]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80112da:	691b      	ldr	r3, [r3, #16]
 80112dc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80112e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112e4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80112e8:	4a9a      	ldr	r2, [pc, #616]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80112ea:	430b      	orrs	r3, r1
 80112ec:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80112ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80112f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80112fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80112fc:	2300      	movs	r3, #0
 80112fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011300:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8011304:	460b      	mov	r3, r1
 8011306:	4313      	orrs	r3, r2
 8011308:	d009      	beq.n	801131e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801130a:	4b92      	ldr	r3, [pc, #584]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801130c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801130e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8011312:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011318:	4a8e      	ldr	r2, [pc, #568]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801131a:	430b      	orrs	r3, r1
 801131c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801131e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011326:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 801132a:	643b      	str	r3, [r7, #64]	; 0x40
 801132c:	2300      	movs	r3, #0
 801132e:	647b      	str	r3, [r7, #68]	; 0x44
 8011330:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8011334:	460b      	mov	r3, r1
 8011336:	4313      	orrs	r3, r2
 8011338:	d00e      	beq.n	8011358 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801133a:	4b86      	ldr	r3, [pc, #536]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801133c:	691b      	ldr	r3, [r3, #16]
 801133e:	4a85      	ldr	r2, [pc, #532]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011340:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011344:	6113      	str	r3, [r2, #16]
 8011346:	4b83      	ldr	r3, [pc, #524]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011348:	6919      	ldr	r1, [r3, #16]
 801134a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801134e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011352:	4a80      	ldr	r2, [pc, #512]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011354:	430b      	orrs	r3, r1
 8011356:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011358:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011360:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8011364:	63bb      	str	r3, [r7, #56]	; 0x38
 8011366:	2300      	movs	r3, #0
 8011368:	63fb      	str	r3, [r7, #60]	; 0x3c
 801136a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 801136e:	460b      	mov	r3, r1
 8011370:	4313      	orrs	r3, r2
 8011372:	d009      	beq.n	8011388 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011374:	4b77      	ldr	r3, [pc, #476]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011378:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 801137c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8011380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011382:	4a74      	ldr	r2, [pc, #464]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8011384:	430b      	orrs	r3, r1
 8011386:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011390:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8011394:	633b      	str	r3, [r7, #48]	; 0x30
 8011396:	2300      	movs	r3, #0
 8011398:	637b      	str	r3, [r7, #52]	; 0x34
 801139a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 801139e:	460b      	mov	r3, r1
 80113a0:	4313      	orrs	r3, r2
 80113a2:	d00a      	beq.n	80113ba <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80113a4:	4b6b      	ldr	r3, [pc, #428]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80113a8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80113ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80113b4:	4a67      	ldr	r2, [pc, #412]	; (8011554 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80113b6:	430b      	orrs	r3, r1
 80113b8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80113ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c2:	2100      	movs	r1, #0
 80113c4:	62b9      	str	r1, [r7, #40]	; 0x28
 80113c6:	f003 0301 	and.w	r3, r3, #1
 80113ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80113cc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80113d0:	460b      	mov	r3, r1
 80113d2:	4313      	orrs	r3, r2
 80113d4:	d011      	beq.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80113d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113da:	3308      	adds	r3, #8
 80113dc:	2100      	movs	r1, #0
 80113de:	4618      	mov	r0, r3
 80113e0:	f001 fa4a 	bl	8012878 <RCCEx_PLL2_Config>
 80113e4:	4603      	mov	r3, r0
 80113e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80113ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d003      	beq.n	80113fa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80113f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80113fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80113fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011402:	2100      	movs	r1, #0
 8011404:	6239      	str	r1, [r7, #32]
 8011406:	f003 0302 	and.w	r3, r3, #2
 801140a:	627b      	str	r3, [r7, #36]	; 0x24
 801140c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8011410:	460b      	mov	r3, r1
 8011412:	4313      	orrs	r3, r2
 8011414:	d011      	beq.n	801143a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011416:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801141a:	3308      	adds	r3, #8
 801141c:	2101      	movs	r1, #1
 801141e:	4618      	mov	r0, r3
 8011420:	f001 fa2a 	bl	8012878 <RCCEx_PLL2_Config>
 8011424:	4603      	mov	r3, r0
 8011426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801142a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801142e:	2b00      	cmp	r3, #0
 8011430:	d003      	beq.n	801143a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011436:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801143a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011442:	2100      	movs	r1, #0
 8011444:	61b9      	str	r1, [r7, #24]
 8011446:	f003 0304 	and.w	r3, r3, #4
 801144a:	61fb      	str	r3, [r7, #28]
 801144c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011450:	460b      	mov	r3, r1
 8011452:	4313      	orrs	r3, r2
 8011454:	d011      	beq.n	801147a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011456:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801145a:	3308      	adds	r3, #8
 801145c:	2102      	movs	r1, #2
 801145e:	4618      	mov	r0, r3
 8011460:	f001 fa0a 	bl	8012878 <RCCEx_PLL2_Config>
 8011464:	4603      	mov	r3, r0
 8011466:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801146a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801146e:	2b00      	cmp	r3, #0
 8011470:	d003      	beq.n	801147a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011472:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011476:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801147a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801147e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011482:	2100      	movs	r1, #0
 8011484:	6139      	str	r1, [r7, #16]
 8011486:	f003 0308 	and.w	r3, r3, #8
 801148a:	617b      	str	r3, [r7, #20]
 801148c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011490:	460b      	mov	r3, r1
 8011492:	4313      	orrs	r3, r2
 8011494:	d011      	beq.n	80114ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801149a:	3328      	adds	r3, #40	; 0x28
 801149c:	2100      	movs	r1, #0
 801149e:	4618      	mov	r0, r3
 80114a0:	f001 fa9c 	bl	80129dc <RCCEx_PLL3_Config>
 80114a4:	4603      	mov	r3, r0
 80114a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 80114aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d003      	beq.n	80114ba <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80114b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80114b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80114ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114c2:	2100      	movs	r1, #0
 80114c4:	60b9      	str	r1, [r7, #8]
 80114c6:	f003 0310 	and.w	r3, r3, #16
 80114ca:	60fb      	str	r3, [r7, #12]
 80114cc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80114d0:	460b      	mov	r3, r1
 80114d2:	4313      	orrs	r3, r2
 80114d4:	d011      	beq.n	80114fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80114d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114da:	3328      	adds	r3, #40	; 0x28
 80114dc:	2101      	movs	r1, #1
 80114de:	4618      	mov	r0, r3
 80114e0:	f001 fa7c 	bl	80129dc <RCCEx_PLL3_Config>
 80114e4:	4603      	mov	r3, r0
 80114e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80114ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d003      	beq.n	80114fa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80114f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80114f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80114fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80114fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011502:	2100      	movs	r1, #0
 8011504:	6039      	str	r1, [r7, #0]
 8011506:	f003 0320 	and.w	r3, r3, #32
 801150a:	607b      	str	r3, [r7, #4]
 801150c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011510:	460b      	mov	r3, r1
 8011512:	4313      	orrs	r3, r2
 8011514:	d011      	beq.n	801153a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011516:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801151a:	3328      	adds	r3, #40	; 0x28
 801151c:	2102      	movs	r1, #2
 801151e:	4618      	mov	r0, r3
 8011520:	f001 fa5c 	bl	80129dc <RCCEx_PLL3_Config>
 8011524:	4603      	mov	r3, r0
 8011526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 801152a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 801152e:	2b00      	cmp	r3, #0
 8011530:	d003      	beq.n	801153a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8011536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 801153a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 801153e:	2b00      	cmp	r3, #0
 8011540:	d101      	bne.n	8011546 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8011542:	2300      	movs	r3, #0
 8011544:	e000      	b.n	8011548 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8011546:	2301      	movs	r3, #1
}
 8011548:	4618      	mov	r0, r3
 801154a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 801154e:	46bd      	mov	sp, r7
 8011550:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011554:	58024400 	.word	0x58024400

08011558 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b090      	sub	sp, #64	; 0x40
 801155c:	af00      	add	r7, sp, #0
 801155e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8011562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011566:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 801156a:	430b      	orrs	r3, r1
 801156c:	f040 8094 	bne.w	8011698 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8011570:	4b9e      	ldr	r3, [pc, #632]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011574:	f003 0307 	and.w	r3, r3, #7
 8011578:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801157a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157c:	2b04      	cmp	r3, #4
 801157e:	f200 8087 	bhi.w	8011690 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8011582:	a201      	add	r2, pc, #4	; (adr r2, 8011588 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8011584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011588:	0801159d 	.word	0x0801159d
 801158c:	080115c5 	.word	0x080115c5
 8011590:	080115ed 	.word	0x080115ed
 8011594:	08011689 	.word	0x08011689
 8011598:	08011615 	.word	0x08011615
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801159c:	4b93      	ldr	r3, [pc, #588]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801159e:	681b      	ldr	r3, [r3, #0]
 80115a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80115a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80115a8:	d108      	bne.n	80115bc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80115aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80115ae:	4618      	mov	r0, r3
 80115b0:	f001 f810 	bl	80125d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80115b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80115b8:	f000 bd45 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80115bc:	2300      	movs	r3, #0
 80115be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115c0:	f000 bd41 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80115c4:	4b89      	ldr	r3, [pc, #548]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80115cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80115d0:	d108      	bne.n	80115e4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80115d2:	f107 0318 	add.w	r3, r7, #24
 80115d6:	4618      	mov	r0, r3
 80115d8:	f000 fd54 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80115dc:	69bb      	ldr	r3, [r7, #24]
 80115de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80115e0:	f000 bd31 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80115e4:	2300      	movs	r3, #0
 80115e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80115e8:	f000 bd2d 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80115ec:	4b7f      	ldr	r3, [pc, #508]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80115f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80115f8:	d108      	bne.n	801160c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80115fa:	f107 030c 	add.w	r3, r7, #12
 80115fe:	4618      	mov	r0, r3
 8011600:	f000 fe94 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011608:	f000 bd1d 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801160c:	2300      	movs	r3, #0
 801160e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011610:	f000 bd19 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011614:	4b75      	ldr	r3, [pc, #468]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801161c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801161e:	4b73      	ldr	r3, [pc, #460]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	f003 0304 	and.w	r3, r3, #4
 8011626:	2b04      	cmp	r3, #4
 8011628:	d10c      	bne.n	8011644 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801162a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162c:	2b00      	cmp	r3, #0
 801162e:	d109      	bne.n	8011644 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011630:	4b6e      	ldr	r3, [pc, #440]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011632:	681b      	ldr	r3, [r3, #0]
 8011634:	08db      	lsrs	r3, r3, #3
 8011636:	f003 0303 	and.w	r3, r3, #3
 801163a:	4a6d      	ldr	r2, [pc, #436]	; (80117f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801163c:	fa22 f303 	lsr.w	r3, r2, r3
 8011640:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011642:	e01f      	b.n	8011684 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011644:	4b69      	ldr	r3, [pc, #420]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801164c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011650:	d106      	bne.n	8011660 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8011652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011654:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011658:	d102      	bne.n	8011660 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801165a:	4b66      	ldr	r3, [pc, #408]	; (80117f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801165c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801165e:	e011      	b.n	8011684 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011660:	4b62      	ldr	r3, [pc, #392]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011662:	681b      	ldr	r3, [r3, #0]
 8011664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011668:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801166c:	d106      	bne.n	801167c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801166e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011674:	d102      	bne.n	801167c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011676:	4b60      	ldr	r3, [pc, #384]	; (80117f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8011678:	63fb      	str	r3, [r7, #60]	; 0x3c
 801167a:	e003      	b.n	8011684 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801167c:	2300      	movs	r3, #0
 801167e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011680:	f000 bce1 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011684:	f000 bcdf 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011688:	4b5c      	ldr	r3, [pc, #368]	; (80117fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801168a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801168c:	f000 bcdb 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011690:	2300      	movs	r3, #0
 8011692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011694:	f000 bcd7 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8011698:	e9d7 2300 	ldrd	r2, r3, [r7]
 801169c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 80116a0:	430b      	orrs	r3, r1
 80116a2:	f040 80ad 	bne.w	8011800 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 80116a6:	4b51      	ldr	r3, [pc, #324]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80116a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80116aa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 80116ae:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80116b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116b6:	d056      	beq.n	8011766 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 80116b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80116be:	f200 8090 	bhi.w	80117e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80116c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116c4:	2bc0      	cmp	r3, #192	; 0xc0
 80116c6:	f000 8088 	beq.w	80117da <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 80116ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116cc:	2bc0      	cmp	r3, #192	; 0xc0
 80116ce:	f200 8088 	bhi.w	80117e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80116d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116d4:	2b80      	cmp	r3, #128	; 0x80
 80116d6:	d032      	beq.n	801173e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 80116d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116da:	2b80      	cmp	r3, #128	; 0x80
 80116dc:	f200 8081 	bhi.w	80117e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 80116e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e2:	2b00      	cmp	r3, #0
 80116e4:	d003      	beq.n	80116ee <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 80116e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116e8:	2b40      	cmp	r3, #64	; 0x40
 80116ea:	d014      	beq.n	8011716 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 80116ec:	e079      	b.n	80117e2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80116ee:	4b3f      	ldr	r3, [pc, #252]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80116f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80116fa:	d108      	bne.n	801170e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80116fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011700:	4618      	mov	r0, r3
 8011702:	f000 ff67 	bl	80125d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011708:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801170a:	f000 bc9c 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801170e:	2300      	movs	r3, #0
 8011710:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011712:	f000 bc98 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011716:	4b35      	ldr	r3, [pc, #212]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801171e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011722:	d108      	bne.n	8011736 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011724:	f107 0318 	add.w	r3, r7, #24
 8011728:	4618      	mov	r0, r3
 801172a:	f000 fcab 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801172e:	69bb      	ldr	r3, [r7, #24]
 8011730:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011732:	f000 bc88 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011736:	2300      	movs	r3, #0
 8011738:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801173a:	f000 bc84 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801173e:	4b2b      	ldr	r3, [pc, #172]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011740:	681b      	ldr	r3, [r3, #0]
 8011742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011746:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801174a:	d108      	bne.n	801175e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801174c:	f107 030c 	add.w	r3, r7, #12
 8011750:	4618      	mov	r0, r3
 8011752:	f000 fdeb 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801175a:	f000 bc74 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801175e:	2300      	movs	r3, #0
 8011760:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011762:	f000 bc70 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011766:	4b21      	ldr	r3, [pc, #132]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801176a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 801176e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011770:	4b1e      	ldr	r3, [pc, #120]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	f003 0304 	and.w	r3, r3, #4
 8011778:	2b04      	cmp	r3, #4
 801177a:	d10c      	bne.n	8011796 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 801177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801177e:	2b00      	cmp	r3, #0
 8011780:	d109      	bne.n	8011796 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011782:	4b1a      	ldr	r3, [pc, #104]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	08db      	lsrs	r3, r3, #3
 8011788:	f003 0303 	and.w	r3, r3, #3
 801178c:	4a18      	ldr	r2, [pc, #96]	; (80117f0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801178e:	fa22 f303 	lsr.w	r3, r2, r3
 8011792:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011794:	e01f      	b.n	80117d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011796:	4b15      	ldr	r3, [pc, #84]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011798:	681b      	ldr	r3, [r3, #0]
 801179a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801179e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80117a2:	d106      	bne.n	80117b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 80117a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80117aa:	d102      	bne.n	80117b2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80117ac:	4b11      	ldr	r3, [pc, #68]	; (80117f4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80117ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117b0:	e011      	b.n	80117d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80117b2:	4b0e      	ldr	r3, [pc, #56]	; (80117ec <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80117ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80117be:	d106      	bne.n	80117ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 80117c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80117c6:	d102      	bne.n	80117ce <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80117c8:	4b0b      	ldr	r3, [pc, #44]	; (80117f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80117ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80117cc:	e003      	b.n	80117d6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80117ce:	2300      	movs	r3, #0
 80117d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80117d2:	f000 bc38 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80117d6:	f000 bc36 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80117da:	4b08      	ldr	r3, [pc, #32]	; (80117fc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80117dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117de:	f000 bc32 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80117e2:	2300      	movs	r3, #0
 80117e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80117e6:	f000 bc2e 	b.w	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80117ea:	bf00      	nop
 80117ec:	58024400 	.word	0x58024400
 80117f0:	03d09000 	.word	0x03d09000
 80117f4:	003d0900 	.word	0x003d0900
 80117f8:	017d7840 	.word	0x017d7840
 80117fc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8011800:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011804:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8011808:	430b      	orrs	r3, r1
 801180a:	f040 809c 	bne.w	8011946 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801180e:	4b9e      	ldr	r3, [pc, #632]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011812:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8011816:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8011818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801181a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 801181e:	d054      	beq.n	80118ca <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8011820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011822:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011826:	f200 808b 	bhi.w	8011940 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801182a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801182c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8011830:	f000 8083 	beq.w	801193a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8011834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011836:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 801183a:	f200 8081 	bhi.w	8011940 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801183e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011840:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8011844:	d02f      	beq.n	80118a6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8011846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011848:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801184c:	d878      	bhi.n	8011940 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801184e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011850:	2b00      	cmp	r3, #0
 8011852:	d004      	beq.n	801185e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8011854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011856:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801185a:	d012      	beq.n	8011882 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801185c:	e070      	b.n	8011940 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801185e:	4b8a      	ldr	r3, [pc, #552]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011860:	681b      	ldr	r3, [r3, #0]
 8011862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011866:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801186a:	d107      	bne.n	801187c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801186c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011870:	4618      	mov	r0, r3
 8011872:	f000 feaf 	bl	80125d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011878:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801187a:	e3e4      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801187c:	2300      	movs	r3, #0
 801187e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011880:	e3e1      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011882:	4b81      	ldr	r3, [pc, #516]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801188a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 801188e:	d107      	bne.n	80118a0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011890:	f107 0318 	add.w	r3, r7, #24
 8011894:	4618      	mov	r0, r3
 8011896:	f000 fbf5 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801189e:	e3d2      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80118a0:	2300      	movs	r3, #0
 80118a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118a4:	e3cf      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80118a6:	4b78      	ldr	r3, [pc, #480]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118a8:	681b      	ldr	r3, [r3, #0]
 80118aa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80118ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80118b2:	d107      	bne.n	80118c4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80118b4:	f107 030c 	add.w	r3, r7, #12
 80118b8:	4618      	mov	r0, r3
 80118ba:	f000 fd37 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80118c2:	e3c0      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80118c4:	2300      	movs	r3, #0
 80118c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80118c8:	e3bd      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80118ca:	4b6f      	ldr	r3, [pc, #444]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80118d2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80118d4:	4b6c      	ldr	r3, [pc, #432]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	f003 0304 	and.w	r3, r3, #4
 80118dc:	2b04      	cmp	r3, #4
 80118de:	d10c      	bne.n	80118fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 80118e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d109      	bne.n	80118fa <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80118e6:	4b68      	ldr	r3, [pc, #416]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	08db      	lsrs	r3, r3, #3
 80118ec:	f003 0303 	and.w	r3, r3, #3
 80118f0:	4a66      	ldr	r2, [pc, #408]	; (8011a8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80118f2:	fa22 f303 	lsr.w	r3, r2, r3
 80118f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80118f8:	e01e      	b.n	8011938 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80118fa:	4b63      	ldr	r3, [pc, #396]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80118fc:	681b      	ldr	r3, [r3, #0]
 80118fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011906:	d106      	bne.n	8011916 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8011908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801190a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801190e:	d102      	bne.n	8011916 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011910:	4b5f      	ldr	r3, [pc, #380]	; (8011a90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011912:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011914:	e010      	b.n	8011938 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011916:	4b5c      	ldr	r3, [pc, #368]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011918:	681b      	ldr	r3, [r3, #0]
 801191a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801191e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011922:	d106      	bne.n	8011932 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8011924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011926:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801192a:	d102      	bne.n	8011932 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801192c:	4b59      	ldr	r3, [pc, #356]	; (8011a94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801192e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011930:	e002      	b.n	8011938 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011932:	2300      	movs	r3, #0
 8011934:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011936:	e386      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011938:	e385      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801193a:	4b57      	ldr	r3, [pc, #348]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801193c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801193e:	e382      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011940:	2300      	movs	r3, #0
 8011942:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011944:	e37f      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8011946:	e9d7 2300 	ldrd	r2, r3, [r7]
 801194a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 801194e:	430b      	orrs	r3, r1
 8011950:	f040 80a7 	bne.w	8011aa2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8011954:	4b4c      	ldr	r3, [pc, #304]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011958:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 801195c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 801195e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011960:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8011964:	d055      	beq.n	8011a12 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8011966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011968:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 801196c:	f200 8096 	bhi.w	8011a9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011972:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011976:	f000 8084 	beq.w	8011a82 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801197a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801197c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8011980:	f200 808c 	bhi.w	8011a9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801198a:	d030      	beq.n	80119ee <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801198c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801198e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011992:	f200 8083 	bhi.w	8011a9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8011996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011998:	2b00      	cmp	r3, #0
 801199a:	d004      	beq.n	80119a6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801199c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801199e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80119a2:	d012      	beq.n	80119ca <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 80119a4:	e07a      	b.n	8011a9c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80119a6:	4b38      	ldr	r3, [pc, #224]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80119ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80119b2:	d107      	bne.n	80119c4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80119b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119b8:	4618      	mov	r0, r3
 80119ba:	f000 fe0b 	bl	80125d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80119be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80119c2:	e340      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80119c4:	2300      	movs	r3, #0
 80119c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119c8:	e33d      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80119ca:	4b2f      	ldr	r3, [pc, #188]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80119d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80119d6:	d107      	bne.n	80119e8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80119d8:	f107 0318 	add.w	r3, r7, #24
 80119dc:	4618      	mov	r0, r3
 80119de:	f000 fb51 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80119e2:	69bb      	ldr	r3, [r7, #24]
 80119e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80119e6:	e32e      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80119e8:	2300      	movs	r3, #0
 80119ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80119ec:	e32b      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80119ee:	4b26      	ldr	r3, [pc, #152]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80119f0:	681b      	ldr	r3, [r3, #0]
 80119f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80119f6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80119fa:	d107      	bne.n	8011a0c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80119fc:	f107 030c 	add.w	r3, r7, #12
 8011a00:	4618      	mov	r0, r3
 8011a02:	f000 fc93 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011a06:	68fb      	ldr	r3, [r7, #12]
 8011a08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011a0a:	e31c      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011a0c:	2300      	movs	r3, #0
 8011a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a10:	e319      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011a12:	4b1d      	ldr	r3, [pc, #116]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011a1a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011a1c:	4b1a      	ldr	r3, [pc, #104]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	f003 0304 	and.w	r3, r3, #4
 8011a24:	2b04      	cmp	r3, #4
 8011a26:	d10c      	bne.n	8011a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8011a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d109      	bne.n	8011a42 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011a2e:	4b16      	ldr	r3, [pc, #88]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	08db      	lsrs	r3, r3, #3
 8011a34:	f003 0303 	and.w	r3, r3, #3
 8011a38:	4a14      	ldr	r2, [pc, #80]	; (8011a8c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8011a3a:	fa22 f303 	lsr.w	r3, r2, r3
 8011a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a40:	e01e      	b.n	8011a80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011a42:	4b11      	ldr	r3, [pc, #68]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011a4e:	d106      	bne.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8011a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011a56:	d102      	bne.n	8011a5e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011a58:	4b0d      	ldr	r3, [pc, #52]	; (8011a90 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8011a5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a5c:	e010      	b.n	8011a80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011a5e:	4b0a      	ldr	r3, [pc, #40]	; (8011a88 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011a66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011a6a:	d106      	bne.n	8011a7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8011a6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a6e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011a72:	d102      	bne.n	8011a7a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011a74:	4b07      	ldr	r3, [pc, #28]	; (8011a94 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8011a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011a78:	e002      	b.n	8011a80 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011a7a:	2300      	movs	r3, #0
 8011a7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011a7e:	e2e2      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011a80:	e2e1      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011a82:	4b05      	ldr	r3, [pc, #20]	; (8011a98 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8011a84:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011a86:	e2de      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011a88:	58024400 	.word	0x58024400
 8011a8c:	03d09000 	.word	0x03d09000
 8011a90:	003d0900 	.word	0x003d0900
 8011a94:	017d7840 	.word	0x017d7840
 8011a98:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011aa0:	e2d1      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8011aa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011aa6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8011aaa:	430b      	orrs	r3, r1
 8011aac:	f040 809c 	bne.w	8011be8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8011ab0:	4b93      	ldr	r3, [pc, #588]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011ab4:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8011ab8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011abc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ac0:	d054      	beq.n	8011b6c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8011ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011ac8:	f200 808b 	bhi.w	8011be2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ace:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011ad2:	f000 8083 	beq.w	8011bdc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8011ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ad8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8011adc:	f200 8081 	bhi.w	8011be2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011ae6:	d02f      	beq.n	8011b48 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8011ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011aee:	d878      	bhi.n	8011be2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8011af0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d004      	beq.n	8011b00 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8011af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011af8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011afc:	d012      	beq.n	8011b24 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8011afe:	e070      	b.n	8011be2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011b00:	4b7f      	ldr	r3, [pc, #508]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011b08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011b0c:	d107      	bne.n	8011b1e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011b0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011b12:	4618      	mov	r0, r3
 8011b14:	f000 fd5e 	bl	80125d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b1c:	e293      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b1e:	2300      	movs	r3, #0
 8011b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b22:	e290      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011b24:	4b76      	ldr	r3, [pc, #472]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b26:	681b      	ldr	r3, [r3, #0]
 8011b28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011b2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011b30:	d107      	bne.n	8011b42 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011b32:	f107 0318 	add.w	r3, r7, #24
 8011b36:	4618      	mov	r0, r3
 8011b38:	f000 faa4 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011b3c:	69bb      	ldr	r3, [r7, #24]
 8011b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b40:	e281      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b42:	2300      	movs	r3, #0
 8011b44:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b46:	e27e      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011b48:	4b6d      	ldr	r3, [pc, #436]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011b54:	d107      	bne.n	8011b66 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011b56:	f107 030c 	add.w	r3, r7, #12
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f000 fbe6 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011b60:	68fb      	ldr	r3, [r7, #12]
 8011b62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011b64:	e26f      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011b66:	2300      	movs	r3, #0
 8011b68:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011b6a:	e26c      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011b6c:	4b64      	ldr	r3, [pc, #400]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011b74:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011b76:	4b62      	ldr	r3, [pc, #392]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	f003 0304 	and.w	r3, r3, #4
 8011b7e:	2b04      	cmp	r3, #4
 8011b80:	d10c      	bne.n	8011b9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8011b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d109      	bne.n	8011b9c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011b88:	4b5d      	ldr	r3, [pc, #372]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	08db      	lsrs	r3, r3, #3
 8011b8e:	f003 0303 	and.w	r3, r3, #3
 8011b92:	4a5c      	ldr	r2, [pc, #368]	; (8011d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011b94:	fa22 f303 	lsr.w	r3, r2, r3
 8011b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011b9a:	e01e      	b.n	8011bda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011b9c:	4b58      	ldr	r3, [pc, #352]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ba8:	d106      	bne.n	8011bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8011baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011bb0:	d102      	bne.n	8011bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011bb2:	4b55      	ldr	r3, [pc, #340]	; (8011d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bb6:	e010      	b.n	8011bda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011bb8:	4b51      	ldr	r3, [pc, #324]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011bc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011bc4:	d106      	bne.n	8011bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8011bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bc8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011bcc:	d102      	bne.n	8011bd4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011bce:	4b4f      	ldr	r3, [pc, #316]	; (8011d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011bd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011bd2:	e002      	b.n	8011bda <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011bd4:	2300      	movs	r3, #0
 8011bd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011bd8:	e235      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011bda:	e234      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011bdc:	4b4c      	ldr	r3, [pc, #304]	; (8011d10 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8011bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011be0:	e231      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011be2:	2300      	movs	r3, #0
 8011be4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011be6:	e22e      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8011be8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011bec:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8011bf0:	430b      	orrs	r3, r1
 8011bf2:	f040 808f 	bne.w	8011d14 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8011bf6:	4b42      	ldr	r3, [pc, #264]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011bf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011bfa:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8011bfe:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8011c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c02:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011c06:	d06b      	beq.n	8011ce0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8011c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8011c0e:	d874      	bhi.n	8011cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c12:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011c16:	d056      	beq.n	8011cc6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8011c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8011c1e:	d86c      	bhi.n	8011cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011c26:	d03b      	beq.n	8011ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8011c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8011c2e:	d864      	bhi.n	8011cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011c36:	d021      	beq.n	8011c7c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8011c38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011c3e:	d85c      	bhi.n	8011cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8011c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d004      	beq.n	8011c50 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8011c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011c4c:	d004      	beq.n	8011c58 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8011c4e:	e054      	b.n	8011cfa <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8011c50:	f7fe fa0a 	bl	8010068 <HAL_RCC_GetPCLK1Freq>
 8011c54:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011c56:	e1f6      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011c58:	4b29      	ldr	r3, [pc, #164]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c5a:	681b      	ldr	r3, [r3, #0]
 8011c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011c60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011c64:	d107      	bne.n	8011c76 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011c66:	f107 0318 	add.w	r3, r7, #24
 8011c6a:	4618      	mov	r0, r3
 8011c6c:	f000 fa0a 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011c70:	69fb      	ldr	r3, [r7, #28]
 8011c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011c74:	e1e7      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011c76:	2300      	movs	r3, #0
 8011c78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c7a:	e1e4      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011c7c:	4b20      	ldr	r3, [pc, #128]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011c7e:	681b      	ldr	r3, [r3, #0]
 8011c80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011c84:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011c88:	d107      	bne.n	8011c9a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011c8a:	f107 030c 	add.w	r3, r7, #12
 8011c8e:	4618      	mov	r0, r3
 8011c90:	f000 fb4c 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011c94:	693b      	ldr	r3, [r7, #16]
 8011c96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011c98:	e1d5      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011c9e:	e1d2      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011ca0:	4b17      	ldr	r3, [pc, #92]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	f003 0304 	and.w	r3, r3, #4
 8011ca8:	2b04      	cmp	r3, #4
 8011caa:	d109      	bne.n	8011cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011cac:	4b14      	ldr	r3, [pc, #80]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cae:	681b      	ldr	r3, [r3, #0]
 8011cb0:	08db      	lsrs	r3, r3, #3
 8011cb2:	f003 0303 	and.w	r3, r3, #3
 8011cb6:	4a13      	ldr	r2, [pc, #76]	; (8011d04 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8011cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8011cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011cbe:	e1c2      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011cc0:	2300      	movs	r3, #0
 8011cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cc4:	e1bf      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011cc6:	4b0e      	ldr	r3, [pc, #56]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011cd2:	d102      	bne.n	8011cda <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8011cd4:	4b0c      	ldr	r3, [pc, #48]	; (8011d08 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8011cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011cd8:	e1b5      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011cda:	2300      	movs	r3, #0
 8011cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cde:	e1b2      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011ce0:	4b07      	ldr	r3, [pc, #28]	; (8011d00 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011ce8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011cec:	d102      	bne.n	8011cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8011cee:	4b07      	ldr	r3, [pc, #28]	; (8011d0c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8011cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011cf2:	e1a8      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011cf4:	2300      	movs	r3, #0
 8011cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cf8:	e1a5      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011cfa:	2300      	movs	r3, #0
 8011cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011cfe:	e1a2      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011d00:	58024400 	.word	0x58024400
 8011d04:	03d09000 	.word	0x03d09000
 8011d08:	003d0900 	.word	0x003d0900
 8011d0c:	017d7840 	.word	0x017d7840
 8011d10:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8011d14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011d18:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8011d1c:	430b      	orrs	r3, r1
 8011d1e:	d173      	bne.n	8011e08 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8011d20:	4b9c      	ldr	r3, [pc, #624]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d24:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8011d28:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d30:	d02f      	beq.n	8011d92 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8011d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d34:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011d38:	d863      	bhi.n	8011e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8011d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d004      	beq.n	8011d4a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8011d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011d46:	d012      	beq.n	8011d6e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8011d48:	e05b      	b.n	8011e02 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011d4a:	4b92      	ldr	r3, [pc, #584]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d4c:	681b      	ldr	r3, [r3, #0]
 8011d4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011d56:	d107      	bne.n	8011d68 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011d58:	f107 0318 	add.w	r3, r7, #24
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f000 f991 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011d62:	69bb      	ldr	r3, [r7, #24]
 8011d64:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d66:	e16e      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d68:	2300      	movs	r3, #0
 8011d6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d6c:	e16b      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011d6e:	4b89      	ldr	r3, [pc, #548]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d70:	681b      	ldr	r3, [r3, #0]
 8011d72:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011d76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011d7a:	d107      	bne.n	8011d8c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011d7c:	f107 030c 	add.w	r3, r7, #12
 8011d80:	4618      	mov	r0, r3
 8011d82:	f000 fad3 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8011d86:	697b      	ldr	r3, [r7, #20]
 8011d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011d8a:	e15c      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011d8c:	2300      	movs	r3, #0
 8011d8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011d90:	e159      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011d92:	4b80      	ldr	r3, [pc, #512]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d96:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011d9a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011d9c:	4b7d      	ldr	r3, [pc, #500]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	f003 0304 	and.w	r3, r3, #4
 8011da4:	2b04      	cmp	r3, #4
 8011da6:	d10c      	bne.n	8011dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8011da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d109      	bne.n	8011dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011dae:	4b79      	ldr	r3, [pc, #484]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011db0:	681b      	ldr	r3, [r3, #0]
 8011db2:	08db      	lsrs	r3, r3, #3
 8011db4:	f003 0303 	and.w	r3, r3, #3
 8011db8:	4a77      	ldr	r2, [pc, #476]	; (8011f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011dba:	fa22 f303 	lsr.w	r3, r2, r3
 8011dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011dc0:	e01e      	b.n	8011e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011dc2:	4b74      	ldr	r3, [pc, #464]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011dca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011dce:	d106      	bne.n	8011dde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8011dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011dd6:	d102      	bne.n	8011dde <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011dd8:	4b70      	ldr	r3, [pc, #448]	; (8011f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011dda:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011ddc:	e010      	b.n	8011e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011dde:	4b6d      	ldr	r3, [pc, #436]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011de6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011dea:	d106      	bne.n	8011dfa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8011dec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011dee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011df2:	d102      	bne.n	8011dfa <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011df4:	4b6a      	ldr	r3, [pc, #424]	; (8011fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011df6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011df8:	e002      	b.n	8011e00 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8011dfe:	e122      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011e00:	e121      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011e02:	2300      	movs	r3, #0
 8011e04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e06:	e11e      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8011e08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e0c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8011e10:	430b      	orrs	r3, r1
 8011e12:	d133      	bne.n	8011e7c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8011e14:	4b5f      	ldr	r3, [pc, #380]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011e18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011e1c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d004      	beq.n	8011e2e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8011e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011e2a:	d012      	beq.n	8011e52 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8011e2c:	e023      	b.n	8011e76 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011e2e:	4b59      	ldr	r3, [pc, #356]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011e36:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011e3a:	d107      	bne.n	8011e4c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011e40:	4618      	mov	r0, r3
 8011e42:	f000 fbc7 	bl	80125d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011e46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e4a:	e0fc      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e4c:	2300      	movs	r3, #0
 8011e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e50:	e0f9      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011e52:	4b50      	ldr	r3, [pc, #320]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e54:	681b      	ldr	r3, [r3, #0]
 8011e56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011e5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011e5e:	d107      	bne.n	8011e70 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e60:	f107 0318 	add.w	r3, r7, #24
 8011e64:	4618      	mov	r0, r3
 8011e66:	f000 f90d 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8011e6a:	6a3b      	ldr	r3, [r7, #32]
 8011e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e6e:	e0ea      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e70:	2300      	movs	r3, #0
 8011e72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e74:	e0e7      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8011e76:	2300      	movs	r3, #0
 8011e78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011e7a:	e0e4      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8011e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011e80:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8011e84:	430b      	orrs	r3, r1
 8011e86:	f040 808d 	bne.w	8011fa4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8011e8a:	4b42      	ldr	r3, [pc, #264]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e8e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8011e92:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011e9a:	d06b      	beq.n	8011f74 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8011e9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011ea2:	d874      	bhi.n	8011f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011eaa:	d056      	beq.n	8011f5a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8011eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011eb2:	d86c      	bhi.n	8011f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011eba:	d03b      	beq.n	8011f34 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8011ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ebe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8011ec2:	d864      	bhi.n	8011f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ec6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011eca:	d021      	beq.n	8011f10 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8011ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011ed2:	d85c      	bhi.n	8011f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8011ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d004      	beq.n	8011ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8011eda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011edc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011ee0:	d004      	beq.n	8011eec <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8011ee2:	e054      	b.n	8011f8e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8011ee4:	f000 f8b8 	bl	8012058 <HAL_RCCEx_GetD3PCLK1Freq>
 8011ee8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011eea:	e0ac      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011eec:	4b29      	ldr	r3, [pc, #164]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011ef4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8011ef8:	d107      	bne.n	8011f0a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011efa:	f107 0318 	add.w	r3, r7, #24
 8011efe:	4618      	mov	r0, r3
 8011f00:	f000 f8c0 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8011f04:	69fb      	ldr	r3, [r7, #28]
 8011f06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f08:	e09d      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f0a:	2300      	movs	r3, #0
 8011f0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f0e:	e09a      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011f10:	4b20      	ldr	r3, [pc, #128]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011f18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011f1c:	d107      	bne.n	8011f2e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011f1e:	f107 030c 	add.w	r3, r7, #12
 8011f22:	4618      	mov	r0, r3
 8011f24:	f000 fa02 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8011f28:	693b      	ldr	r3, [r7, #16]
 8011f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f2c:	e08b      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f2e:	2300      	movs	r3, #0
 8011f30:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f32:	e088      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8011f34:	4b17      	ldr	r3, [pc, #92]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	f003 0304 	and.w	r3, r3, #4
 8011f3c:	2b04      	cmp	r3, #4
 8011f3e:	d109      	bne.n	8011f54 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011f40:	4b14      	ldr	r3, [pc, #80]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	08db      	lsrs	r3, r3, #3
 8011f46:	f003 0303 	and.w	r3, r3, #3
 8011f4a:	4a13      	ldr	r2, [pc, #76]	; (8011f98 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8011f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8011f50:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f52:	e078      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f54:	2300      	movs	r3, #0
 8011f56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f58:	e075      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8011f5a:	4b0e      	ldr	r3, [pc, #56]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011f66:	d102      	bne.n	8011f6e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8011f68:	4b0c      	ldr	r3, [pc, #48]	; (8011f9c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8011f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f6c:	e06b      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f72:	e068      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011f74:	4b07      	ldr	r3, [pc, #28]	; (8011f94 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011f7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011f80:	d102      	bne.n	8011f88 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8011f82:	4b07      	ldr	r3, [pc, #28]	; (8011fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8011f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f86:	e05e      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011f88:	2300      	movs	r3, #0
 8011f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f8c:	e05b      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8011f8e:	2300      	movs	r3, #0
 8011f90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011f92:	e058      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011f94:	58024400 	.word	0x58024400
 8011f98:	03d09000 	.word	0x03d09000
 8011f9c:	003d0900 	.word	0x003d0900
 8011fa0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8011fa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011fa8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8011fac:	430b      	orrs	r3, r1
 8011fae:	d148      	bne.n	8012042 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8011fb0:	4b27      	ldr	r3, [pc, #156]	; (8012050 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011fb4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8011fb8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8011fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fbc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011fc0:	d02a      	beq.n	8012018 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8011fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011fc8:	d838      	bhi.n	801203c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8011fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d004      	beq.n	8011fda <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8011fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fd2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011fd6:	d00d      	beq.n	8011ff4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8011fd8:	e030      	b.n	801203c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8011fda:	4b1d      	ldr	r3, [pc, #116]	; (8012050 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011fdc:	681b      	ldr	r3, [r3, #0]
 8011fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011fe6:	d102      	bne.n	8011fee <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8011fe8:	4b1a      	ldr	r3, [pc, #104]	; (8012054 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8011fea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011fec:	e02b      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011fee:	2300      	movs	r3, #0
 8011ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011ff2:	e028      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011ff4:	4b16      	ldr	r3, [pc, #88]	; (8012050 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8011ff6:	681b      	ldr	r3, [r3, #0]
 8011ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8011ffc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8012000:	d107      	bne.n	8012012 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8012006:	4618      	mov	r0, r3
 8012008:	f000 fae4 	bl	80125d4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801200c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801200e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012010:	e019      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012012:	2300      	movs	r3, #0
 8012014:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012016:	e016      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012018:	4b0d      	ldr	r3, [pc, #52]	; (8012050 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012020:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8012024:	d107      	bne.n	8012036 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012026:	f107 0318 	add.w	r3, r7, #24
 801202a:	4618      	mov	r0, r3
 801202c:	f000 f82a 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012030:	69fb      	ldr	r3, [r7, #28]
 8012032:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012034:	e007      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012036:	2300      	movs	r3, #0
 8012038:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801203a:	e004      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801203c:	2300      	movs	r3, #0
 801203e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8012040:	e001      	b.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8012042:	2300      	movs	r3, #0
 8012044:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8012046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8012048:	4618      	mov	r0, r3
 801204a:	3740      	adds	r7, #64	; 0x40
 801204c:	46bd      	mov	sp, r7
 801204e:	bd80      	pop	{r7, pc}
 8012050:	58024400 	.word	0x58024400
 8012054:	017d7840 	.word	0x017d7840

08012058 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801205c:	f7fd ffd4 	bl	8010008 <HAL_RCC_GetHCLKFreq>
 8012060:	4602      	mov	r2, r0
 8012062:	4b06      	ldr	r3, [pc, #24]	; (801207c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8012064:	6a1b      	ldr	r3, [r3, #32]
 8012066:	091b      	lsrs	r3, r3, #4
 8012068:	f003 0307 	and.w	r3, r3, #7
 801206c:	4904      	ldr	r1, [pc, #16]	; (8012080 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801206e:	5ccb      	ldrb	r3, [r1, r3]
 8012070:	f003 031f 	and.w	r3, r3, #31
 8012074:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8012078:	4618      	mov	r0, r3
 801207a:	bd80      	pop	{r7, pc}
 801207c:	58024400 	.word	0x58024400
 8012080:	0801c6a4 	.word	0x0801c6a4

08012084 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8012084:	b480      	push	{r7}
 8012086:	b089      	sub	sp, #36	; 0x24
 8012088:	af00      	add	r7, sp, #0
 801208a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801208c:	4ba1      	ldr	r3, [pc, #644]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012090:	f003 0303 	and.w	r3, r3, #3
 8012094:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8012096:	4b9f      	ldr	r3, [pc, #636]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801209a:	0b1b      	lsrs	r3, r3, #12
 801209c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80120a0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80120a2:	4b9c      	ldr	r3, [pc, #624]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80120a6:	091b      	lsrs	r3, r3, #4
 80120a8:	f003 0301 	and.w	r3, r3, #1
 80120ac:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80120ae:	4b99      	ldr	r3, [pc, #612]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80120b2:	08db      	lsrs	r3, r3, #3
 80120b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80120b8:	693a      	ldr	r2, [r7, #16]
 80120ba:	fb02 f303 	mul.w	r3, r2, r3
 80120be:	ee07 3a90 	vmov	s15, r3
 80120c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120c6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80120ca:	697b      	ldr	r3, [r7, #20]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	f000 8111 	beq.w	80122f4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80120d2:	69bb      	ldr	r3, [r7, #24]
 80120d4:	2b02      	cmp	r3, #2
 80120d6:	f000 8083 	beq.w	80121e0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80120da:	69bb      	ldr	r3, [r7, #24]
 80120dc:	2b02      	cmp	r3, #2
 80120de:	f200 80a1 	bhi.w	8012224 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80120e2:	69bb      	ldr	r3, [r7, #24]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d003      	beq.n	80120f0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80120e8:	69bb      	ldr	r3, [r7, #24]
 80120ea:	2b01      	cmp	r3, #1
 80120ec:	d056      	beq.n	801219c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80120ee:	e099      	b.n	8012224 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80120f0:	4b88      	ldr	r3, [pc, #544]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f003 0320 	and.w	r3, r3, #32
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d02d      	beq.n	8012158 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80120fc:	4b85      	ldr	r3, [pc, #532]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	08db      	lsrs	r3, r3, #3
 8012102:	f003 0303 	and.w	r3, r3, #3
 8012106:	4a84      	ldr	r2, [pc, #528]	; (8012318 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8012108:	fa22 f303 	lsr.w	r3, r2, r3
 801210c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801210e:	68bb      	ldr	r3, [r7, #8]
 8012110:	ee07 3a90 	vmov	s15, r3
 8012114:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012118:	697b      	ldr	r3, [r7, #20]
 801211a:	ee07 3a90 	vmov	s15, r3
 801211e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012122:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012126:	4b7b      	ldr	r3, [pc, #492]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801212a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801212e:	ee07 3a90 	vmov	s15, r3
 8012132:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012136:	ed97 6a03 	vldr	s12, [r7, #12]
 801213a:	eddf 5a78 	vldr	s11, [pc, #480]	; 801231c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801213e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012142:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012146:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801214a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801214e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012152:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012156:	e087      	b.n	8012268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012158:	697b      	ldr	r3, [r7, #20]
 801215a:	ee07 3a90 	vmov	s15, r3
 801215e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012162:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012320 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8012166:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801216a:	4b6a      	ldr	r3, [pc, #424]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801216c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801216e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012172:	ee07 3a90 	vmov	s15, r3
 8012176:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801217a:	ed97 6a03 	vldr	s12, [r7, #12]
 801217e:	eddf 5a67 	vldr	s11, [pc, #412]	; 801231c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012182:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012186:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801218a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801218e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012192:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012196:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801219a:	e065      	b.n	8012268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801219c:	697b      	ldr	r3, [r7, #20]
 801219e:	ee07 3a90 	vmov	s15, r3
 80121a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012324 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80121aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80121ae:	4b59      	ldr	r3, [pc, #356]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80121b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121b6:	ee07 3a90 	vmov	s15, r3
 80121ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80121be:	ed97 6a03 	vldr	s12, [r7, #12]
 80121c2:	eddf 5a56 	vldr	s11, [pc, #344]	; 801231c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80121c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80121ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80121ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80121d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80121d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80121da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80121de:	e043      	b.n	8012268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80121e0:	697b      	ldr	r3, [r7, #20]
 80121e2:	ee07 3a90 	vmov	s15, r3
 80121e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121ea:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012328 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80121ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80121f2:	4b48      	ldr	r3, [pc, #288]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80121f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80121fa:	ee07 3a90 	vmov	s15, r3
 80121fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012202:	ed97 6a03 	vldr	s12, [r7, #12]
 8012206:	eddf 5a45 	vldr	s11, [pc, #276]	; 801231c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801220a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801220e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012212:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012216:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801221a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801221e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012222:	e021      	b.n	8012268 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012224:	697b      	ldr	r3, [r7, #20]
 8012226:	ee07 3a90 	vmov	s15, r3
 801222a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801222e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012324 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012232:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012236:	4b37      	ldr	r3, [pc, #220]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801223a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801223e:	ee07 3a90 	vmov	s15, r3
 8012242:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012246:	ed97 6a03 	vldr	s12, [r7, #12]
 801224a:	eddf 5a34 	vldr	s11, [pc, #208]	; 801231c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801224e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012252:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012256:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801225a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801225e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012262:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012266:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8012268:	4b2a      	ldr	r3, [pc, #168]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801226c:	0a5b      	lsrs	r3, r3, #9
 801226e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012272:	ee07 3a90 	vmov	s15, r3
 8012276:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801227a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801227e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012282:	edd7 6a07 	vldr	s13, [r7, #28]
 8012286:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801228a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801228e:	ee17 2a90 	vmov	r2, s15
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8012296:	4b1f      	ldr	r3, [pc, #124]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801229a:	0c1b      	lsrs	r3, r3, #16
 801229c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122a0:	ee07 3a90 	vmov	s15, r3
 80122a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80122b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80122b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80122b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122bc:	ee17 2a90 	vmov	r2, s15
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80122c4:	4b13      	ldr	r3, [pc, #76]	; (8012314 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80122c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122c8:	0e1b      	lsrs	r3, r3, #24
 80122ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80122ce:	ee07 3a90 	vmov	s15, r3
 80122d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80122da:	ee37 7a87 	vadd.f32	s14, s15, s14
 80122de:	edd7 6a07 	vldr	s13, [r7, #28]
 80122e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80122e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80122ea:	ee17 2a90 	vmov	r2, s15
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80122f2:	e008      	b.n	8012306 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80122f4:	687b      	ldr	r3, [r7, #4]
 80122f6:	2200      	movs	r2, #0
 80122f8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80122fa:	687b      	ldr	r3, [r7, #4]
 80122fc:	2200      	movs	r2, #0
 80122fe:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	2200      	movs	r2, #0
 8012304:	609a      	str	r2, [r3, #8]
}
 8012306:	bf00      	nop
 8012308:	3724      	adds	r7, #36	; 0x24
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr
 8012312:	bf00      	nop
 8012314:	58024400 	.word	0x58024400
 8012318:	03d09000 	.word	0x03d09000
 801231c:	46000000 	.word	0x46000000
 8012320:	4c742400 	.word	0x4c742400
 8012324:	4a742400 	.word	0x4a742400
 8012328:	4bbebc20 	.word	0x4bbebc20

0801232c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801232c:	b480      	push	{r7}
 801232e:	b089      	sub	sp, #36	; 0x24
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012334:	4ba1      	ldr	r3, [pc, #644]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012338:	f003 0303 	and.w	r3, r3, #3
 801233c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801233e:	4b9f      	ldr	r3, [pc, #636]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012342:	0d1b      	lsrs	r3, r3, #20
 8012344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012348:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801234a:	4b9c      	ldr	r3, [pc, #624]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801234e:	0a1b      	lsrs	r3, r3, #8
 8012350:	f003 0301 	and.w	r3, r3, #1
 8012354:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8012356:	4b99      	ldr	r3, [pc, #612]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801235a:	08db      	lsrs	r3, r3, #3
 801235c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012360:	693a      	ldr	r2, [r7, #16]
 8012362:	fb02 f303 	mul.w	r3, r2, r3
 8012366:	ee07 3a90 	vmov	s15, r3
 801236a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801236e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	2b00      	cmp	r3, #0
 8012376:	f000 8111 	beq.w	801259c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801237a:	69bb      	ldr	r3, [r7, #24]
 801237c:	2b02      	cmp	r3, #2
 801237e:	f000 8083 	beq.w	8012488 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8012382:	69bb      	ldr	r3, [r7, #24]
 8012384:	2b02      	cmp	r3, #2
 8012386:	f200 80a1 	bhi.w	80124cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801238a:	69bb      	ldr	r3, [r7, #24]
 801238c:	2b00      	cmp	r3, #0
 801238e:	d003      	beq.n	8012398 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8012390:	69bb      	ldr	r3, [r7, #24]
 8012392:	2b01      	cmp	r3, #1
 8012394:	d056      	beq.n	8012444 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8012396:	e099      	b.n	80124cc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012398:	4b88      	ldr	r3, [pc, #544]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801239a:	681b      	ldr	r3, [r3, #0]
 801239c:	f003 0320 	and.w	r3, r3, #32
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d02d      	beq.n	8012400 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80123a4:	4b85      	ldr	r3, [pc, #532]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	08db      	lsrs	r3, r3, #3
 80123aa:	f003 0303 	and.w	r3, r3, #3
 80123ae:	4a84      	ldr	r2, [pc, #528]	; (80125c0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80123b0:	fa22 f303 	lsr.w	r3, r2, r3
 80123b4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80123b6:	68bb      	ldr	r3, [r7, #8]
 80123b8:	ee07 3a90 	vmov	s15, r3
 80123bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80123c0:	697b      	ldr	r3, [r7, #20]
 80123c2:	ee07 3a90 	vmov	s15, r3
 80123c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80123ce:	4b7b      	ldr	r3, [pc, #492]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80123d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80123d6:	ee07 3a90 	vmov	s15, r3
 80123da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80123de:	ed97 6a03 	vldr	s12, [r7, #12]
 80123e2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80125c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80123e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80123ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80123ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80123f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80123f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80123fa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80123fe:	e087      	b.n	8012510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012400:	697b      	ldr	r3, [r7, #20]
 8012402:	ee07 3a90 	vmov	s15, r3
 8012406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801240a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80125c8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801240e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012412:	4b6a      	ldr	r3, [pc, #424]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012416:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801241a:	ee07 3a90 	vmov	s15, r3
 801241e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012422:	ed97 6a03 	vldr	s12, [r7, #12]
 8012426:	eddf 5a67 	vldr	s11, [pc, #412]	; 80125c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801242a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801242e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012432:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012436:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801243a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801243e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012442:	e065      	b.n	8012510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	ee07 3a90 	vmov	s15, r3
 801244a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801244e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80125cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012452:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012456:	4b59      	ldr	r3, [pc, #356]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801245a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801245e:	ee07 3a90 	vmov	s15, r3
 8012462:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012466:	ed97 6a03 	vldr	s12, [r7, #12]
 801246a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80125c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801246e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012472:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012476:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801247a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801247e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012482:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012486:	e043      	b.n	8012510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012488:	697b      	ldr	r3, [r7, #20]
 801248a:	ee07 3a90 	vmov	s15, r3
 801248e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012492:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80125d0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8012496:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801249a:	4b48      	ldr	r3, [pc, #288]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801249e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124a2:	ee07 3a90 	vmov	s15, r3
 80124a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80124ae:	eddf 5a45 	vldr	s11, [pc, #276]	; 80125c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80124b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80124b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80124ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80124be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80124c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80124c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80124ca:	e021      	b.n	8012510 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	ee07 3a90 	vmov	s15, r3
 80124d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80124d6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80125cc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80124da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80124de:	4b37      	ldr	r3, [pc, #220]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80124e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80124e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124e6:	ee07 3a90 	vmov	s15, r3
 80124ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80124ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80124f2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80125c4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80124f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80124fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80124fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012502:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012506:	ee67 7a27 	vmul.f32	s15, s14, s15
 801250a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801250e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8012510:	4b2a      	ldr	r3, [pc, #168]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012514:	0a5b      	lsrs	r3, r3, #9
 8012516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801251a:	ee07 3a90 	vmov	s15, r3
 801251e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012522:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012526:	ee37 7a87 	vadd.f32	s14, s15, s14
 801252a:	edd7 6a07 	vldr	s13, [r7, #28]
 801252e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012532:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012536:	ee17 2a90 	vmov	r2, s15
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801253e:	4b1f      	ldr	r3, [pc, #124]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012542:	0c1b      	lsrs	r3, r3, #16
 8012544:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012548:	ee07 3a90 	vmov	s15, r3
 801254c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012550:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012554:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012558:	edd7 6a07 	vldr	s13, [r7, #28]
 801255c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012560:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012564:	ee17 2a90 	vmov	r2, s15
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801256c:	4b13      	ldr	r3, [pc, #76]	; (80125bc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801256e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012570:	0e1b      	lsrs	r3, r3, #24
 8012572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012576:	ee07 3a90 	vmov	s15, r3
 801257a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801257e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012582:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012586:	edd7 6a07 	vldr	s13, [r7, #28]
 801258a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801258e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012592:	ee17 2a90 	vmov	r2, s15
 8012596:	687b      	ldr	r3, [r7, #4]
 8012598:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801259a:	e008      	b.n	80125ae <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	2200      	movs	r2, #0
 80125a0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	2200      	movs	r2, #0
 80125a6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2200      	movs	r2, #0
 80125ac:	609a      	str	r2, [r3, #8]
}
 80125ae:	bf00      	nop
 80125b0:	3724      	adds	r7, #36	; 0x24
 80125b2:	46bd      	mov	sp, r7
 80125b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b8:	4770      	bx	lr
 80125ba:	bf00      	nop
 80125bc:	58024400 	.word	0x58024400
 80125c0:	03d09000 	.word	0x03d09000
 80125c4:	46000000 	.word	0x46000000
 80125c8:	4c742400 	.word	0x4c742400
 80125cc:	4a742400 	.word	0x4a742400
 80125d0:	4bbebc20 	.word	0x4bbebc20

080125d4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 80125d4:	b480      	push	{r7}
 80125d6:	b089      	sub	sp, #36	; 0x24
 80125d8:	af00      	add	r7, sp, #0
 80125da:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80125dc:	4ba0      	ldr	r3, [pc, #640]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80125de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125e0:	f003 0303 	and.w	r3, r3, #3
 80125e4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 80125e6:	4b9e      	ldr	r3, [pc, #632]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80125e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125ea:	091b      	lsrs	r3, r3, #4
 80125ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80125f0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 80125f2:	4b9b      	ldr	r3, [pc, #620]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80125f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125f6:	f003 0301 	and.w	r3, r3, #1
 80125fa:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80125fc:	4b98      	ldr	r3, [pc, #608]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80125fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012600:	08db      	lsrs	r3, r3, #3
 8012602:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012606:	693a      	ldr	r2, [r7, #16]
 8012608:	fb02 f303 	mul.w	r3, r2, r3
 801260c:	ee07 3a90 	vmov	s15, r3
 8012610:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012614:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8012618:	697b      	ldr	r3, [r7, #20]
 801261a:	2b00      	cmp	r3, #0
 801261c:	f000 8111 	beq.w	8012842 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8012620:	69bb      	ldr	r3, [r7, #24]
 8012622:	2b02      	cmp	r3, #2
 8012624:	f000 8083 	beq.w	801272e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8012628:	69bb      	ldr	r3, [r7, #24]
 801262a:	2b02      	cmp	r3, #2
 801262c:	f200 80a1 	bhi.w	8012772 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8012630:	69bb      	ldr	r3, [r7, #24]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d003      	beq.n	801263e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8012636:	69bb      	ldr	r3, [r7, #24]
 8012638:	2b01      	cmp	r3, #1
 801263a:	d056      	beq.n	80126ea <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801263c:	e099      	b.n	8012772 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801263e:	4b88      	ldr	r3, [pc, #544]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	f003 0320 	and.w	r3, r3, #32
 8012646:	2b00      	cmp	r3, #0
 8012648:	d02d      	beq.n	80126a6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801264a:	4b85      	ldr	r3, [pc, #532]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	08db      	lsrs	r3, r3, #3
 8012650:	f003 0303 	and.w	r3, r3, #3
 8012654:	4a83      	ldr	r2, [pc, #524]	; (8012864 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8012656:	fa22 f303 	lsr.w	r3, r2, r3
 801265a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801265c:	68bb      	ldr	r3, [r7, #8]
 801265e:	ee07 3a90 	vmov	s15, r3
 8012662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012666:	697b      	ldr	r3, [r7, #20]
 8012668:	ee07 3a90 	vmov	s15, r3
 801266c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012670:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012674:	4b7a      	ldr	r3, [pc, #488]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801267c:	ee07 3a90 	vmov	s15, r3
 8012680:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012684:	ed97 6a03 	vldr	s12, [r7, #12]
 8012688:	eddf 5a77 	vldr	s11, [pc, #476]	; 8012868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801268c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012690:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012694:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012698:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801269c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126a0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80126a4:	e087      	b.n	80127b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80126a6:	697b      	ldr	r3, [r7, #20]
 80126a8:	ee07 3a90 	vmov	s15, r3
 80126ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126b0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 801286c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 80126b4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80126b8:	4b69      	ldr	r3, [pc, #420]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80126ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80126bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80126c0:	ee07 3a90 	vmov	s15, r3
 80126c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80126c8:	ed97 6a03 	vldr	s12, [r7, #12]
 80126cc:	eddf 5a66 	vldr	s11, [pc, #408]	; 8012868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80126d0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80126d4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80126d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80126dc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80126e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80126e4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80126e8:	e065      	b.n	80127b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80126ea:	697b      	ldr	r3, [r7, #20]
 80126ec:	ee07 3a90 	vmov	s15, r3
 80126f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80126f4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8012870 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 80126f8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80126fc:	4b58      	ldr	r3, [pc, #352]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80126fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012700:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012704:	ee07 3a90 	vmov	s15, r3
 8012708:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801270c:	ed97 6a03 	vldr	s12, [r7, #12]
 8012710:	eddf 5a55 	vldr	s11, [pc, #340]	; 8012868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012714:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012718:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801271c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012720:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012728:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801272c:	e043      	b.n	80127b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801272e:	697b      	ldr	r3, [r7, #20]
 8012730:	ee07 3a90 	vmov	s15, r3
 8012734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012738:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8012874 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801273c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012740:	4b47      	ldr	r3, [pc, #284]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012748:	ee07 3a90 	vmov	s15, r3
 801274c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012750:	ed97 6a03 	vldr	s12, [r7, #12]
 8012754:	eddf 5a44 	vldr	s11, [pc, #272]	; 8012868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012758:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801275c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012760:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012764:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012768:	ee67 7a27 	vmul.f32	s15, s14, s15
 801276c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012770:	e021      	b.n	80127b6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	ee07 3a90 	vmov	s15, r3
 8012778:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801277c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 801286c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8012780:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012784:	4b36      	ldr	r3, [pc, #216]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012788:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801278c:	ee07 3a90 	vmov	s15, r3
 8012790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012794:	ed97 6a03 	vldr	s12, [r7, #12]
 8012798:	eddf 5a33 	vldr	s11, [pc, #204]	; 8012868 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801279c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80127a0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80127a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80127a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80127ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80127b0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80127b4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 80127b6:	4b2a      	ldr	r3, [pc, #168]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80127b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127ba:	0a5b      	lsrs	r3, r3, #9
 80127bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127c0:	ee07 3a90 	vmov	s15, r3
 80127c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127c8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127cc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80127d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80127d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80127d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80127dc:	ee17 2a90 	vmov	r2, s15
 80127e0:	687b      	ldr	r3, [r7, #4]
 80127e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 80127e4:	4b1e      	ldr	r3, [pc, #120]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80127e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80127e8:	0c1b      	lsrs	r3, r3, #16
 80127ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80127ee:	ee07 3a90 	vmov	s15, r3
 80127f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80127f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80127fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80127fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8012802:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012806:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801280a:	ee17 2a90 	vmov	r2, s15
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8012812:	4b13      	ldr	r3, [pc, #76]	; (8012860 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012816:	0e1b      	lsrs	r3, r3, #24
 8012818:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801281c:	ee07 3a90 	vmov	s15, r3
 8012820:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012824:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012828:	ee37 7a87 	vadd.f32	s14, s15, s14
 801282c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012830:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012838:	ee17 2a90 	vmov	r2, s15
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8012840:	e008      	b.n	8012854 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2200      	movs	r2, #0
 8012846:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	2200      	movs	r2, #0
 801284c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801284e:	687b      	ldr	r3, [r7, #4]
 8012850:	2200      	movs	r2, #0
 8012852:	609a      	str	r2, [r3, #8]
}
 8012854:	bf00      	nop
 8012856:	3724      	adds	r7, #36	; 0x24
 8012858:	46bd      	mov	sp, r7
 801285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801285e:	4770      	bx	lr
 8012860:	58024400 	.word	0x58024400
 8012864:	03d09000 	.word	0x03d09000
 8012868:	46000000 	.word	0x46000000
 801286c:	4c742400 	.word	0x4c742400
 8012870:	4a742400 	.word	0x4a742400
 8012874:	4bbebc20 	.word	0x4bbebc20

08012878 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012878:	b580      	push	{r7, lr}
 801287a:	b084      	sub	sp, #16
 801287c:	af00      	add	r7, sp, #0
 801287e:	6078      	str	r0, [r7, #4]
 8012880:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012882:	2300      	movs	r3, #0
 8012884:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012886:	4b53      	ldr	r3, [pc, #332]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801288a:	f003 0303 	and.w	r3, r3, #3
 801288e:	2b03      	cmp	r3, #3
 8012890:	d101      	bne.n	8012896 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012892:	2301      	movs	r3, #1
 8012894:	e099      	b.n	80129ca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012896:	4b4f      	ldr	r3, [pc, #316]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012898:	681b      	ldr	r3, [r3, #0]
 801289a:	4a4e      	ldr	r2, [pc, #312]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 801289c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80128a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80128a2:	f7f4 f8b1 	bl	8006a08 <HAL_GetTick>
 80128a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80128a8:	e008      	b.n	80128bc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80128aa:	f7f4 f8ad 	bl	8006a08 <HAL_GetTick>
 80128ae:	4602      	mov	r2, r0
 80128b0:	68bb      	ldr	r3, [r7, #8]
 80128b2:	1ad3      	subs	r3, r2, r3
 80128b4:	2b02      	cmp	r3, #2
 80128b6:	d901      	bls.n	80128bc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80128b8:	2303      	movs	r3, #3
 80128ba:	e086      	b.n	80129ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80128bc:	4b45      	ldr	r3, [pc, #276]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80128c4:	2b00      	cmp	r3, #0
 80128c6:	d1f0      	bne.n	80128aa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80128c8:	4b42      	ldr	r3, [pc, #264]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 80128ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80128cc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	031b      	lsls	r3, r3, #12
 80128d6:	493f      	ldr	r1, [pc, #252]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 80128d8:	4313      	orrs	r3, r2
 80128da:	628b      	str	r3, [r1, #40]	; 0x28
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	685b      	ldr	r3, [r3, #4]
 80128e0:	3b01      	subs	r3, #1
 80128e2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	689b      	ldr	r3, [r3, #8]
 80128ea:	3b01      	subs	r3, #1
 80128ec:	025b      	lsls	r3, r3, #9
 80128ee:	b29b      	uxth	r3, r3
 80128f0:	431a      	orrs	r2, r3
 80128f2:	687b      	ldr	r3, [r7, #4]
 80128f4:	68db      	ldr	r3, [r3, #12]
 80128f6:	3b01      	subs	r3, #1
 80128f8:	041b      	lsls	r3, r3, #16
 80128fa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80128fe:	431a      	orrs	r2, r3
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	691b      	ldr	r3, [r3, #16]
 8012904:	3b01      	subs	r3, #1
 8012906:	061b      	lsls	r3, r3, #24
 8012908:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801290c:	4931      	ldr	r1, [pc, #196]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 801290e:	4313      	orrs	r3, r2
 8012910:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8012912:	4b30      	ldr	r3, [pc, #192]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012916:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	695b      	ldr	r3, [r3, #20]
 801291e:	492d      	ldr	r1, [pc, #180]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012920:	4313      	orrs	r3, r2
 8012922:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8012924:	4b2b      	ldr	r3, [pc, #172]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012928:	f023 0220 	bic.w	r2, r3, #32
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	699b      	ldr	r3, [r3, #24]
 8012930:	4928      	ldr	r1, [pc, #160]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012932:	4313      	orrs	r3, r2
 8012934:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8012936:	4b27      	ldr	r3, [pc, #156]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801293a:	4a26      	ldr	r2, [pc, #152]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 801293c:	f023 0310 	bic.w	r3, r3, #16
 8012940:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8012942:	4b24      	ldr	r3, [pc, #144]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012944:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012946:	4b24      	ldr	r3, [pc, #144]	; (80129d8 <RCCEx_PLL2_Config+0x160>)
 8012948:	4013      	ands	r3, r2
 801294a:	687a      	ldr	r2, [r7, #4]
 801294c:	69d2      	ldr	r2, [r2, #28]
 801294e:	00d2      	lsls	r2, r2, #3
 8012950:	4920      	ldr	r1, [pc, #128]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012952:	4313      	orrs	r3, r2
 8012954:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8012956:	4b1f      	ldr	r3, [pc, #124]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801295a:	4a1e      	ldr	r2, [pc, #120]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 801295c:	f043 0310 	orr.w	r3, r3, #16
 8012960:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012962:	683b      	ldr	r3, [r7, #0]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d106      	bne.n	8012976 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8012968:	4b1a      	ldr	r3, [pc, #104]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 801296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296c:	4a19      	ldr	r2, [pc, #100]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 801296e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012972:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012974:	e00f      	b.n	8012996 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012976:	683b      	ldr	r3, [r7, #0]
 8012978:	2b01      	cmp	r3, #1
 801297a:	d106      	bne.n	801298a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801297c:	4b15      	ldr	r3, [pc, #84]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 801297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012980:	4a14      	ldr	r2, [pc, #80]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012982:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012986:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012988:	e005      	b.n	8012996 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801298a:	4b12      	ldr	r3, [pc, #72]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 801298c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801298e:	4a11      	ldr	r2, [pc, #68]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012990:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012994:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012996:	4b0f      	ldr	r3, [pc, #60]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4a0e      	ldr	r2, [pc, #56]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 801299c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80129a0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80129a2:	f7f4 f831 	bl	8006a08 <HAL_GetTick>
 80129a6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80129a8:	e008      	b.n	80129bc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80129aa:	f7f4 f82d 	bl	8006a08 <HAL_GetTick>
 80129ae:	4602      	mov	r2, r0
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	1ad3      	subs	r3, r2, r3
 80129b4:	2b02      	cmp	r3, #2
 80129b6:	d901      	bls.n	80129bc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80129b8:	2303      	movs	r3, #3
 80129ba:	e006      	b.n	80129ca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80129bc:	4b05      	ldr	r3, [pc, #20]	; (80129d4 <RCCEx_PLL2_Config+0x15c>)
 80129be:	681b      	ldr	r3, [r3, #0]
 80129c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d0f0      	beq.n	80129aa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80129c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80129ca:	4618      	mov	r0, r3
 80129cc:	3710      	adds	r7, #16
 80129ce:	46bd      	mov	sp, r7
 80129d0:	bd80      	pop	{r7, pc}
 80129d2:	bf00      	nop
 80129d4:	58024400 	.word	0x58024400
 80129d8:	ffff0007 	.word	0xffff0007

080129dc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80129dc:	b580      	push	{r7, lr}
 80129de:	b084      	sub	sp, #16
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	6078      	str	r0, [r7, #4]
 80129e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80129e6:	2300      	movs	r3, #0
 80129e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80129ea:	4b53      	ldr	r3, [pc, #332]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 80129ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129ee:	f003 0303 	and.w	r3, r3, #3
 80129f2:	2b03      	cmp	r3, #3
 80129f4:	d101      	bne.n	80129fa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80129f6:	2301      	movs	r3, #1
 80129f8:	e099      	b.n	8012b2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80129fa:	4b4f      	ldr	r3, [pc, #316]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	4a4e      	ldr	r2, [pc, #312]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012a04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012a06:	f7f3 ffff 	bl	8006a08 <HAL_GetTick>
 8012a0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012a0c:	e008      	b.n	8012a20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8012a0e:	f7f3 fffb 	bl	8006a08 <HAL_GetTick>
 8012a12:	4602      	mov	r2, r0
 8012a14:	68bb      	ldr	r3, [r7, #8]
 8012a16:	1ad3      	subs	r3, r2, r3
 8012a18:	2b02      	cmp	r3, #2
 8012a1a:	d901      	bls.n	8012a20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012a1c:	2303      	movs	r3, #3
 8012a1e:	e086      	b.n	8012b2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8012a20:	4b45      	ldr	r3, [pc, #276]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d1f0      	bne.n	8012a0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8012a2c:	4b42      	ldr	r3, [pc, #264]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	051b      	lsls	r3, r3, #20
 8012a3a:	493f      	ldr	r1, [pc, #252]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a3c:	4313      	orrs	r3, r2
 8012a3e:	628b      	str	r3, [r1, #40]	; 0x28
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	685b      	ldr	r3, [r3, #4]
 8012a44:	3b01      	subs	r3, #1
 8012a46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	689b      	ldr	r3, [r3, #8]
 8012a4e:	3b01      	subs	r3, #1
 8012a50:	025b      	lsls	r3, r3, #9
 8012a52:	b29b      	uxth	r3, r3
 8012a54:	431a      	orrs	r2, r3
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	68db      	ldr	r3, [r3, #12]
 8012a5a:	3b01      	subs	r3, #1
 8012a5c:	041b      	lsls	r3, r3, #16
 8012a5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8012a62:	431a      	orrs	r2, r3
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	691b      	ldr	r3, [r3, #16]
 8012a68:	3b01      	subs	r3, #1
 8012a6a:	061b      	lsls	r3, r3, #24
 8012a6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012a70:	4931      	ldr	r1, [pc, #196]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a72:	4313      	orrs	r3, r2
 8012a74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012a76:	4b30      	ldr	r3, [pc, #192]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	695b      	ldr	r3, [r3, #20]
 8012a82:	492d      	ldr	r1, [pc, #180]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a84:	4313      	orrs	r3, r2
 8012a86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012a88:	4b2b      	ldr	r3, [pc, #172]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	699b      	ldr	r3, [r3, #24]
 8012a94:	4928      	ldr	r1, [pc, #160]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a96:	4313      	orrs	r3, r2
 8012a98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8012a9a:	4b27      	ldr	r3, [pc, #156]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a9e:	4a26      	ldr	r2, [pc, #152]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012aa0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012aa4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012aa6:	4b24      	ldr	r3, [pc, #144]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012aa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012aaa:	4b24      	ldr	r3, [pc, #144]	; (8012b3c <RCCEx_PLL3_Config+0x160>)
 8012aac:	4013      	ands	r3, r2
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	69d2      	ldr	r2, [r2, #28]
 8012ab2:	00d2      	lsls	r2, r2, #3
 8012ab4:	4920      	ldr	r1, [pc, #128]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012ab6:	4313      	orrs	r3, r2
 8012ab8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8012aba:	4b1f      	ldr	r3, [pc, #124]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012abe:	4a1e      	ldr	r2, [pc, #120]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012ac0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012ac4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012ac6:	683b      	ldr	r3, [r7, #0]
 8012ac8:	2b00      	cmp	r3, #0
 8012aca:	d106      	bne.n	8012ada <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8012acc:	4b1a      	ldr	r3, [pc, #104]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad0:	4a19      	ldr	r2, [pc, #100]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012ad2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012ad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012ad8:	e00f      	b.n	8012afa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012ada:	683b      	ldr	r3, [r7, #0]
 8012adc:	2b01      	cmp	r3, #1
 8012ade:	d106      	bne.n	8012aee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012ae0:	4b15      	ldr	r3, [pc, #84]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ae4:	4a14      	ldr	r2, [pc, #80]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012ae6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8012aea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012aec:	e005      	b.n	8012afa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8012aee:	4b12      	ldr	r3, [pc, #72]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012af2:	4a11      	ldr	r2, [pc, #68]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012af4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012af8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8012afa:	4b0f      	ldr	r3, [pc, #60]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012afc:	681b      	ldr	r3, [r3, #0]
 8012afe:	4a0e      	ldr	r2, [pc, #56]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012b04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012b06:	f7f3 ff7f 	bl	8006a08 <HAL_GetTick>
 8012b0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012b0c:	e008      	b.n	8012b20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8012b0e:	f7f3 ff7b 	bl	8006a08 <HAL_GetTick>
 8012b12:	4602      	mov	r2, r0
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	1ad3      	subs	r3, r2, r3
 8012b18:	2b02      	cmp	r3, #2
 8012b1a:	d901      	bls.n	8012b20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012b1c:	2303      	movs	r3, #3
 8012b1e:	e006      	b.n	8012b2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8012b20:	4b05      	ldr	r3, [pc, #20]	; (8012b38 <RCCEx_PLL3_Config+0x15c>)
 8012b22:	681b      	ldr	r3, [r3, #0]
 8012b24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d0f0      	beq.n	8012b0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8012b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8012b2e:	4618      	mov	r0, r3
 8012b30:	3710      	adds	r7, #16
 8012b32:	46bd      	mov	sp, r7
 8012b34:	bd80      	pop	{r7, pc}
 8012b36:	bf00      	nop
 8012b38:	58024400 	.word	0x58024400
 8012b3c:	ffff0007 	.word	0xffff0007

08012b40 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8012b40:	b580      	push	{r7, lr}
 8012b42:	b084      	sub	sp, #16
 8012b44:	af00      	add	r7, sp, #0
 8012b46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	2b00      	cmp	r3, #0
 8012b50:	d071      	beq.n	8012c36 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8012b58:	b2db      	uxtb	r3, r3
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d106      	bne.n	8012b6c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	2200      	movs	r2, #0
 8012b62:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8012b66:	6878      	ldr	r0, [r7, #4]
 8012b68:	f7f1 fd02 	bl	8004570 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8012b6c:	687b      	ldr	r3, [r7, #4]
 8012b6e:	2202      	movs	r2, #2
 8012b70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	681b      	ldr	r3, [r3, #0]
 8012b78:	68db      	ldr	r3, [r3, #12]
 8012b7a:	f003 0310 	and.w	r3, r3, #16
 8012b7e:	2b10      	cmp	r3, #16
 8012b80:	d050      	beq.n	8012c24 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	22ca      	movs	r2, #202	; 0xca
 8012b88:	625a      	str	r2, [r3, #36]	; 0x24
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	681b      	ldr	r3, [r3, #0]
 8012b8e:	2253      	movs	r2, #83	; 0x53
 8012b90:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8012b92:	6878      	ldr	r0, [r7, #4]
 8012b94:	f000 fa4a 	bl	801302c <RTC_EnterInitMode>
 8012b98:	4603      	mov	r3, r0
 8012b9a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8012b9c:	7bfb      	ldrb	r3, [r7, #15]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d124      	bne.n	8012bec <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8012ba2:	687b      	ldr	r3, [r7, #4]
 8012ba4:	681b      	ldr	r3, [r3, #0]
 8012ba6:	6899      	ldr	r1, [r3, #8]
 8012ba8:	687b      	ldr	r3, [r7, #4]
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	4b24      	ldr	r3, [pc, #144]	; (8012c40 <HAL_RTC_Init+0x100>)
 8012bae:	400b      	ands	r3, r1
 8012bb0:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8012bb2:	687b      	ldr	r3, [r7, #4]
 8012bb4:	681b      	ldr	r3, [r3, #0]
 8012bb6:	6899      	ldr	r1, [r3, #8]
 8012bb8:	687b      	ldr	r3, [r7, #4]
 8012bba:	685a      	ldr	r2, [r3, #4]
 8012bbc:	687b      	ldr	r3, [r7, #4]
 8012bbe:	691b      	ldr	r3, [r3, #16]
 8012bc0:	431a      	orrs	r2, r3
 8012bc2:	687b      	ldr	r3, [r7, #4]
 8012bc4:	699b      	ldr	r3, [r3, #24]
 8012bc6:	431a      	orrs	r2, r3
 8012bc8:	687b      	ldr	r3, [r7, #4]
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	430a      	orrs	r2, r1
 8012bce:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 8012bd0:	687b      	ldr	r3, [r7, #4]
 8012bd2:	689b      	ldr	r3, [r3, #8]
 8012bd4:	0419      	lsls	r1, r3, #16
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	68da      	ldr	r2, [r3, #12]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	430a      	orrs	r2, r1
 8012be0:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8012be2:	6878      	ldr	r0, [r7, #4]
 8012be4:	f000 fa56 	bl	8013094 <RTC_ExitInitMode>
 8012be8:	4603      	mov	r3, r0
 8012bea:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 8012bec:	7bfb      	ldrb	r3, [r7, #15]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d113      	bne.n	8012c1a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	f022 0203 	bic.w	r2, r2, #3
 8012c00:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8012c02:	687b      	ldr	r3, [r7, #4]
 8012c04:	681b      	ldr	r3, [r3, #0]
 8012c06:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8012c08:	687b      	ldr	r3, [r7, #4]
 8012c0a:	69da      	ldr	r2, [r3, #28]
 8012c0c:	687b      	ldr	r3, [r7, #4]
 8012c0e:	695b      	ldr	r3, [r3, #20]
 8012c10:	431a      	orrs	r2, r3
 8012c12:	687b      	ldr	r3, [r7, #4]
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	430a      	orrs	r2, r1
 8012c18:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	22ff      	movs	r2, #255	; 0xff
 8012c20:	625a      	str	r2, [r3, #36]	; 0x24
 8012c22:	e001      	b.n	8012c28 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8012c24:	2300      	movs	r3, #0
 8012c26:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8012c28:	7bfb      	ldrb	r3, [r7, #15]
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d103      	bne.n	8012c36 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	2201      	movs	r2, #1
 8012c32:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 8012c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3710      	adds	r7, #16
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}
 8012c40:	ff8fffbf 	.word	0xff8fffbf

08012c44 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012c44:	b590      	push	{r4, r7, lr}
 8012c46:	b087      	sub	sp, #28
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012c50:	68fb      	ldr	r3, [r7, #12]
 8012c52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012c56:	2b01      	cmp	r3, #1
 8012c58:	d101      	bne.n	8012c5e <HAL_RTC_SetTime+0x1a>
 8012c5a:	2302      	movs	r3, #2
 8012c5c:	e089      	b.n	8012d72 <HAL_RTC_SetTime+0x12e>
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	2201      	movs	r2, #1
 8012c62:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	2202      	movs	r2, #2
 8012c6a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	22ca      	movs	r2, #202	; 0xca
 8012c74:	625a      	str	r2, [r3, #36]	; 0x24
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	2253      	movs	r2, #83	; 0x53
 8012c7c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012c7e:	68f8      	ldr	r0, [r7, #12]
 8012c80:	f000 f9d4 	bl	801302c <RTC_EnterInitMode>
 8012c84:	4603      	mov	r3, r0
 8012c86:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012c88:	7cfb      	ldrb	r3, [r7, #19]
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d161      	bne.n	8012d52 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d126      	bne.n	8012ce2 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	689b      	ldr	r3, [r3, #8]
 8012c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012c9e:	2b00      	cmp	r3, #0
 8012ca0:	d102      	bne.n	8012ca8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012ca2:	68bb      	ldr	r3, [r7, #8]
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012ca8:	68bb      	ldr	r3, [r7, #8]
 8012caa:	781b      	ldrb	r3, [r3, #0]
 8012cac:	4618      	mov	r0, r3
 8012cae:	f000 fa2f 	bl	8013110 <RTC_ByteToBcd2>
 8012cb2:	4603      	mov	r3, r0
 8012cb4:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012cb6:	68bb      	ldr	r3, [r7, #8]
 8012cb8:	785b      	ldrb	r3, [r3, #1]
 8012cba:	4618      	mov	r0, r3
 8012cbc:	f000 fa28 	bl	8013110 <RTC_ByteToBcd2>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012cc4:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	789b      	ldrb	r3, [r3, #2]
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f000 fa20 	bl	8013110 <RTC_ByteToBcd2>
 8012cd0:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012cd2:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012cd6:	68bb      	ldr	r3, [r7, #8]
 8012cd8:	78db      	ldrb	r3, [r3, #3]
 8012cda:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012cdc:	4313      	orrs	r3, r2
 8012cde:	617b      	str	r3, [r7, #20]
 8012ce0:	e018      	b.n	8012d14 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012ce2:	68fb      	ldr	r3, [r7, #12]
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	689b      	ldr	r3, [r3, #8]
 8012ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d102      	bne.n	8012cf6 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8012cf0:	68bb      	ldr	r3, [r7, #8]
 8012cf2:	2200      	movs	r2, #0
 8012cf4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012cf6:	68bb      	ldr	r3, [r7, #8]
 8012cf8:	781b      	ldrb	r3, [r3, #0]
 8012cfa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012cfc:	68bb      	ldr	r3, [r7, #8]
 8012cfe:	785b      	ldrb	r3, [r3, #1]
 8012d00:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012d02:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 8012d04:	68ba      	ldr	r2, [r7, #8]
 8012d06:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012d08:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8012d0a:	68bb      	ldr	r3, [r7, #8]
 8012d0c:	78db      	ldrb	r3, [r3, #3]
 8012d0e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012d10:	4313      	orrs	r3, r2
 8012d12:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8012d14:	68fb      	ldr	r3, [r7, #12]
 8012d16:	681a      	ldr	r2, [r3, #0]
 8012d18:	6979      	ldr	r1, [r7, #20]
 8012d1a:	4b18      	ldr	r3, [pc, #96]	; (8012d7c <HAL_RTC_SetTime+0x138>)
 8012d1c:	400b      	ands	r3, r1
 8012d1e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8012d20:	68fb      	ldr	r3, [r7, #12]
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	689a      	ldr	r2, [r3, #8]
 8012d26:	68fb      	ldr	r3, [r7, #12]
 8012d28:	681b      	ldr	r3, [r3, #0]
 8012d2a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8012d2e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012d30:	68fb      	ldr	r3, [r7, #12]
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	6899      	ldr	r1, [r3, #8]
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	68da      	ldr	r2, [r3, #12]
 8012d3a:	68bb      	ldr	r3, [r7, #8]
 8012d3c:	691b      	ldr	r3, [r3, #16]
 8012d3e:	431a      	orrs	r2, r3
 8012d40:	68fb      	ldr	r3, [r7, #12]
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	430a      	orrs	r2, r1
 8012d46:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012d48:	68f8      	ldr	r0, [r7, #12]
 8012d4a:	f000 f9a3 	bl	8013094 <RTC_ExitInitMode>
 8012d4e:	4603      	mov	r3, r0
 8012d50:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	22ff      	movs	r2, #255	; 0xff
 8012d58:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012d5a:	7cfb      	ldrb	r3, [r7, #19]
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d103      	bne.n	8012d68 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	2201      	movs	r2, #1
 8012d64:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012d70:	7cfb      	ldrb	r3, [r7, #19]
}
 8012d72:	4618      	mov	r0, r3
 8012d74:	371c      	adds	r7, #28
 8012d76:	46bd      	mov	sp, r7
 8012d78:	bd90      	pop	{r4, r7, pc}
 8012d7a:	bf00      	nop
 8012d7c:	007f7f7f 	.word	0x007f7f7f

08012d80 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012d80:	b580      	push	{r7, lr}
 8012d82:	b086      	sub	sp, #24
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	60f8      	str	r0, [r7, #12]
 8012d88:	60b9      	str	r1, [r7, #8]
 8012d8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012d8c:	68fb      	ldr	r3, [r7, #12]
 8012d8e:	681b      	ldr	r3, [r3, #0]
 8012d90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012d92:	68bb      	ldr	r3, [r7, #8]
 8012d94:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	691b      	ldr	r3, [r3, #16]
 8012d9c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8012da0:	68bb      	ldr	r3, [r7, #8]
 8012da2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	681b      	ldr	r3, [r3, #0]
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	4b22      	ldr	r3, [pc, #136]	; (8012e34 <HAL_RTC_GetTime+0xb4>)
 8012dac:	4013      	ands	r3, r2
 8012dae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8012db0:	697b      	ldr	r3, [r7, #20]
 8012db2:	0c1b      	lsrs	r3, r3, #16
 8012db4:	b2db      	uxtb	r3, r3
 8012db6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012dba:	b2da      	uxtb	r2, r3
 8012dbc:	68bb      	ldr	r3, [r7, #8]
 8012dbe:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	0a1b      	lsrs	r3, r3, #8
 8012dc4:	b2db      	uxtb	r3, r3
 8012dc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012dca:	b2da      	uxtb	r2, r3
 8012dcc:	68bb      	ldr	r3, [r7, #8]
 8012dce:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 8012dd0:	697b      	ldr	r3, [r7, #20]
 8012dd2:	b2db      	uxtb	r3, r3
 8012dd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012dd8:	b2da      	uxtb	r2, r3
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8012dde:	697b      	ldr	r3, [r7, #20]
 8012de0:	0d9b      	lsrs	r3, r3, #22
 8012de2:	b2db      	uxtb	r3, r3
 8012de4:	f003 0301 	and.w	r3, r3, #1
 8012de8:	b2da      	uxtb	r2, r3
 8012dea:	68bb      	ldr	r3, [r7, #8]
 8012dec:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	d11a      	bne.n	8012e2a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8012df4:	68bb      	ldr	r3, [r7, #8]
 8012df6:	781b      	ldrb	r3, [r3, #0]
 8012df8:	4618      	mov	r0, r3
 8012dfa:	f000 f9a9 	bl	8013150 <RTC_Bcd2ToByte>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	461a      	mov	r2, r3
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	785b      	ldrb	r3, [r3, #1]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f000 f9a0 	bl	8013150 <RTC_Bcd2ToByte>
 8012e10:	4603      	mov	r3, r0
 8012e12:	461a      	mov	r2, r3
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012e18:	68bb      	ldr	r3, [r7, #8]
 8012e1a:	789b      	ldrb	r3, [r3, #2]
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f000 f997 	bl	8013150 <RTC_Bcd2ToByte>
 8012e22:	4603      	mov	r3, r0
 8012e24:	461a      	mov	r2, r3
 8012e26:	68bb      	ldr	r3, [r7, #8]
 8012e28:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8012e2a:	2300      	movs	r3, #0
}
 8012e2c:	4618      	mov	r0, r3
 8012e2e:	3718      	adds	r7, #24
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}
 8012e34:	007f7f7f 	.word	0x007f7f7f

08012e38 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012e38:	b590      	push	{r4, r7, lr}
 8012e3a:	b087      	sub	sp, #28
 8012e3c:	af00      	add	r7, sp, #0
 8012e3e:	60f8      	str	r0, [r7, #12]
 8012e40:	60b9      	str	r1, [r7, #8]
 8012e42:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012e44:	68fb      	ldr	r3, [r7, #12]
 8012e46:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d101      	bne.n	8012e52 <HAL_RTC_SetDate+0x1a>
 8012e4e:	2302      	movs	r3, #2
 8012e50:	e073      	b.n	8012f3a <HAL_RTC_SetDate+0x102>
 8012e52:	68fb      	ldr	r3, [r7, #12]
 8012e54:	2201      	movs	r2, #1
 8012e56:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012e5a:	68fb      	ldr	r3, [r7, #12]
 8012e5c:	2202      	movs	r2, #2
 8012e5e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	2b00      	cmp	r3, #0
 8012e66:	d10e      	bne.n	8012e86 <HAL_RTC_SetDate+0x4e>
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	785b      	ldrb	r3, [r3, #1]
 8012e6c:	f003 0310 	and.w	r3, r3, #16
 8012e70:	2b00      	cmp	r3, #0
 8012e72:	d008      	beq.n	8012e86 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012e74:	68bb      	ldr	r3, [r7, #8]
 8012e76:	785b      	ldrb	r3, [r3, #1]
 8012e78:	f023 0310 	bic.w	r3, r3, #16
 8012e7c:	b2db      	uxtb	r3, r3
 8012e7e:	330a      	adds	r3, #10
 8012e80:	b2da      	uxtb	r2, r3
 8012e82:	68bb      	ldr	r3, [r7, #8]
 8012e84:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d11c      	bne.n	8012ec6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012e8c:	68bb      	ldr	r3, [r7, #8]
 8012e8e:	78db      	ldrb	r3, [r3, #3]
 8012e90:	4618      	mov	r0, r3
 8012e92:	f000 f93d 	bl	8013110 <RTC_ByteToBcd2>
 8012e96:	4603      	mov	r3, r0
 8012e98:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012e9a:	68bb      	ldr	r3, [r7, #8]
 8012e9c:	785b      	ldrb	r3, [r3, #1]
 8012e9e:	4618      	mov	r0, r3
 8012ea0:	f000 f936 	bl	8013110 <RTC_ByteToBcd2>
 8012ea4:	4603      	mov	r3, r0
 8012ea6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012ea8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	789b      	ldrb	r3, [r3, #2]
 8012eae:	4618      	mov	r0, r3
 8012eb0:	f000 f92e 	bl	8013110 <RTC_ByteToBcd2>
 8012eb4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8012eb6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	781b      	ldrb	r3, [r3, #0]
 8012ebe:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012ec0:	4313      	orrs	r3, r2
 8012ec2:	617b      	str	r3, [r7, #20]
 8012ec4:	e00e      	b.n	8012ee4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012ec6:	68bb      	ldr	r3, [r7, #8]
 8012ec8:	78db      	ldrb	r3, [r3, #3]
 8012eca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	785b      	ldrb	r3, [r3, #1]
 8012ed0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012ed2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 8012ed4:	68ba      	ldr	r2, [r7, #8]
 8012ed6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8012ed8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	781b      	ldrb	r3, [r3, #0]
 8012ede:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8012ee0:	4313      	orrs	r3, r2
 8012ee2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	681b      	ldr	r3, [r3, #0]
 8012ee8:	22ca      	movs	r2, #202	; 0xca
 8012eea:	625a      	str	r2, [r3, #36]	; 0x24
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2253      	movs	r2, #83	; 0x53
 8012ef2:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012ef4:	68f8      	ldr	r0, [r7, #12]
 8012ef6:	f000 f899 	bl	801302c <RTC_EnterInitMode>
 8012efa:	4603      	mov	r3, r0
 8012efc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8012efe:	7cfb      	ldrb	r3, [r7, #19]
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d10a      	bne.n	8012f1a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8012f04:	68fb      	ldr	r3, [r7, #12]
 8012f06:	681a      	ldr	r2, [r3, #0]
 8012f08:	6979      	ldr	r1, [r7, #20]
 8012f0a:	4b0e      	ldr	r3, [pc, #56]	; (8012f44 <HAL_RTC_SetDate+0x10c>)
 8012f0c:	400b      	ands	r3, r1
 8012f0e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012f10:	68f8      	ldr	r0, [r7, #12]
 8012f12:	f000 f8bf 	bl	8013094 <RTC_ExitInitMode>
 8012f16:	4603      	mov	r3, r0
 8012f18:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	22ff      	movs	r2, #255	; 0xff
 8012f20:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8012f22:	7cfb      	ldrb	r3, [r7, #19]
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	d103      	bne.n	8012f30 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	2201      	movs	r2, #1
 8012f2c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012f30:	68fb      	ldr	r3, [r7, #12]
 8012f32:	2200      	movs	r2, #0
 8012f34:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8012f38:	7cfb      	ldrb	r3, [r7, #19]


}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	371c      	adds	r7, #28
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd90      	pop	{r4, r7, pc}
 8012f42:	bf00      	nop
 8012f44:	00ffff3f 	.word	0x00ffff3f

08012f48 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b086      	sub	sp, #24
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	60f8      	str	r0, [r7, #12]
 8012f50:	60b9      	str	r1, [r7, #8]
 8012f52:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8012f54:	68fb      	ldr	r3, [r7, #12]
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	685a      	ldr	r2, [r3, #4]
 8012f5a:	4b21      	ldr	r3, [pc, #132]	; (8012fe0 <HAL_RTC_GetDate+0x98>)
 8012f5c:	4013      	ands	r3, r2
 8012f5e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012f60:	697b      	ldr	r3, [r7, #20]
 8012f62:	0c1b      	lsrs	r3, r3, #16
 8012f64:	b2da      	uxtb	r2, r3
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8012f6a:	697b      	ldr	r3, [r7, #20]
 8012f6c:	0a1b      	lsrs	r3, r3, #8
 8012f6e:	b2db      	uxtb	r3, r3
 8012f70:	f003 031f 	and.w	r3, r3, #31
 8012f74:	b2da      	uxtb	r2, r3
 8012f76:	68bb      	ldr	r3, [r7, #8]
 8012f78:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8012f7a:	697b      	ldr	r3, [r7, #20]
 8012f7c:	b2db      	uxtb	r3, r3
 8012f7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f82:	b2da      	uxtb	r2, r3
 8012f84:	68bb      	ldr	r3, [r7, #8]
 8012f86:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	0b5b      	lsrs	r3, r3, #13
 8012f8c:	b2db      	uxtb	r3, r3
 8012f8e:	f003 0307 	and.w	r3, r3, #7
 8012f92:	b2da      	uxtb	r2, r3
 8012f94:	68bb      	ldr	r3, [r7, #8]
 8012f96:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d11a      	bne.n	8012fd4 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	78db      	ldrb	r3, [r3, #3]
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f000 f8d4 	bl	8013150 <RTC_Bcd2ToByte>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	461a      	mov	r2, r3
 8012fac:	68bb      	ldr	r3, [r7, #8]
 8012fae:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8012fb0:	68bb      	ldr	r3, [r7, #8]
 8012fb2:	785b      	ldrb	r3, [r3, #1]
 8012fb4:	4618      	mov	r0, r3
 8012fb6:	f000 f8cb 	bl	8013150 <RTC_Bcd2ToByte>
 8012fba:	4603      	mov	r3, r0
 8012fbc:	461a      	mov	r2, r3
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8012fc2:	68bb      	ldr	r3, [r7, #8]
 8012fc4:	789b      	ldrb	r3, [r3, #2]
 8012fc6:	4618      	mov	r0, r3
 8012fc8:	f000 f8c2 	bl	8013150 <RTC_Bcd2ToByte>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	461a      	mov	r2, r3
 8012fd0:	68bb      	ldr	r3, [r7, #8]
 8012fd2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8012fd4:	2300      	movs	r3, #0
}
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	3718      	adds	r7, #24
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	bd80      	pop	{r7, pc}
 8012fde:	bf00      	nop
 8012fe0:	00ffff3f 	.word	0x00ffff3f

08012fe4 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012fe4:	b580      	push	{r7, lr}
 8012fe6:	b084      	sub	sp, #16
 8012fe8:	af00      	add	r7, sp, #0
 8012fea:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8012fec:	687b      	ldr	r3, [r7, #4]
 8012fee:	681b      	ldr	r3, [r3, #0]
 8012ff0:	4a0d      	ldr	r2, [pc, #52]	; (8013028 <HAL_RTC_WaitForSynchro+0x44>)
 8012ff2:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 8012ff4:	f7f3 fd08 	bl	8006a08 <HAL_GetTick>
 8012ff8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012ffa:	e009      	b.n	8013010 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012ffc:	f7f3 fd04 	bl	8006a08 <HAL_GetTick>
 8013000:	4602      	mov	r2, r0
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	1ad3      	subs	r3, r2, r3
 8013006:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 801300a:	d901      	bls.n	8013010 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 801300c:	2303      	movs	r3, #3
 801300e:	e007      	b.n	8013020 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	681b      	ldr	r3, [r3, #0]
 8013014:	68db      	ldr	r3, [r3, #12]
 8013016:	f003 0320 	and.w	r3, r3, #32
 801301a:	2b00      	cmp	r3, #0
 801301c:	d0ee      	beq.n	8012ffc <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 801301e:	2300      	movs	r3, #0
}
 8013020:	4618      	mov	r0, r3
 8013022:	3710      	adds	r7, #16
 8013024:	46bd      	mov	sp, r7
 8013026:	bd80      	pop	{r7, pc}
 8013028:	0003ff5f 	.word	0x0003ff5f

0801302c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 801302c:	b580      	push	{r7, lr}
 801302e:	b084      	sub	sp, #16
 8013030:	af00      	add	r7, sp, #0
 8013032:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013034:	2300      	movs	r3, #0
 8013036:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	681b      	ldr	r3, [r3, #0]
 801303c:	68db      	ldr	r3, [r3, #12]
 801303e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013042:	2b00      	cmp	r3, #0
 8013044:	d120      	bne.n	8013088 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	681b      	ldr	r3, [r3, #0]
 801304a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801304e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8013050:	f7f3 fcda 	bl	8006a08 <HAL_GetTick>
 8013054:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013056:	e00d      	b.n	8013074 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8013058:	f7f3 fcd6 	bl	8006a08 <HAL_GetTick>
 801305c:	4602      	mov	r2, r0
 801305e:	68bb      	ldr	r3, [r7, #8]
 8013060:	1ad3      	subs	r3, r2, r3
 8013062:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8013066:	d905      	bls.n	8013074 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8013068:	2303      	movs	r3, #3
 801306a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 801306c:	687b      	ldr	r3, [r7, #4]
 801306e:	2203      	movs	r2, #3
 8013070:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	68db      	ldr	r3, [r3, #12]
 801307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801307e:	2b00      	cmp	r3, #0
 8013080:	d102      	bne.n	8013088 <RTC_EnterInitMode+0x5c>
 8013082:	7bfb      	ldrb	r3, [r7, #15]
 8013084:	2b03      	cmp	r3, #3
 8013086:	d1e7      	bne.n	8013058 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8013088:	7bfb      	ldrb	r3, [r7, #15]
}
 801308a:	4618      	mov	r0, r3
 801308c:	3710      	adds	r7, #16
 801308e:	46bd      	mov	sp, r7
 8013090:	bd80      	pop	{r7, pc}
	...

08013094 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b084      	sub	sp, #16
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801309c:	2300      	movs	r3, #0
 801309e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80130a0:	4b1a      	ldr	r3, [pc, #104]	; (801310c <RTC_ExitInitMode+0x78>)
 80130a2:	68db      	ldr	r3, [r3, #12]
 80130a4:	4a19      	ldr	r2, [pc, #100]	; (801310c <RTC_ExitInitMode+0x78>)
 80130a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80130aa:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80130ac:	4b17      	ldr	r3, [pc, #92]	; (801310c <RTC_ExitInitMode+0x78>)
 80130ae:	689b      	ldr	r3, [r3, #8]
 80130b0:	f003 0320 	and.w	r3, r3, #32
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d10c      	bne.n	80130d2 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80130b8:	6878      	ldr	r0, [r7, #4]
 80130ba:	f7ff ff93 	bl	8012fe4 <HAL_RTC_WaitForSynchro>
 80130be:	4603      	mov	r3, r0
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d01e      	beq.n	8013102 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2203      	movs	r2, #3
 80130c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80130cc:	2303      	movs	r3, #3
 80130ce:	73fb      	strb	r3, [r7, #15]
 80130d0:	e017      	b.n	8013102 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80130d2:	4b0e      	ldr	r3, [pc, #56]	; (801310c <RTC_ExitInitMode+0x78>)
 80130d4:	689b      	ldr	r3, [r3, #8]
 80130d6:	4a0d      	ldr	r2, [pc, #52]	; (801310c <RTC_ExitInitMode+0x78>)
 80130d8:	f023 0320 	bic.w	r3, r3, #32
 80130dc:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	f7ff ff80 	bl	8012fe4 <HAL_RTC_WaitForSynchro>
 80130e4:	4603      	mov	r3, r0
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d005      	beq.n	80130f6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	2203      	movs	r2, #3
 80130ee:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80130f2:	2303      	movs	r3, #3
 80130f4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80130f6:	4b05      	ldr	r3, [pc, #20]	; (801310c <RTC_ExitInitMode+0x78>)
 80130f8:	689b      	ldr	r3, [r3, #8]
 80130fa:	4a04      	ldr	r2, [pc, #16]	; (801310c <RTC_ExitInitMode+0x78>)
 80130fc:	f043 0320 	orr.w	r3, r3, #32
 8013100:	6093      	str	r3, [r2, #8]
  }

  return status;
 8013102:	7bfb      	ldrb	r3, [r7, #15]
}
 8013104:	4618      	mov	r0, r3
 8013106:	3710      	adds	r7, #16
 8013108:	46bd      	mov	sp, r7
 801310a:	bd80      	pop	{r7, pc}
 801310c:	58004000 	.word	0x58004000

08013110 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8013110:	b480      	push	{r7}
 8013112:	b085      	sub	sp, #20
 8013114:	af00      	add	r7, sp, #0
 8013116:	4603      	mov	r3, r0
 8013118:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 801311a:	2300      	movs	r3, #0
 801311c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 801311e:	79fb      	ldrb	r3, [r7, #7]
 8013120:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 8013122:	e005      	b.n	8013130 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	3301      	adds	r3, #1
 8013128:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 801312a:	7afb      	ldrb	r3, [r7, #11]
 801312c:	3b0a      	subs	r3, #10
 801312e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 8013130:	7afb      	ldrb	r3, [r7, #11]
 8013132:	2b09      	cmp	r3, #9
 8013134:	d8f6      	bhi.n	8013124 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 8013136:	68fb      	ldr	r3, [r7, #12]
 8013138:	b2db      	uxtb	r3, r3
 801313a:	011b      	lsls	r3, r3, #4
 801313c:	b2da      	uxtb	r2, r3
 801313e:	7afb      	ldrb	r3, [r7, #11]
 8013140:	4313      	orrs	r3, r2
 8013142:	b2db      	uxtb	r3, r3
}
 8013144:	4618      	mov	r0, r3
 8013146:	3714      	adds	r7, #20
 8013148:	46bd      	mov	sp, r7
 801314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801314e:	4770      	bx	lr

08013150 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8013150:	b480      	push	{r7}
 8013152:	b085      	sub	sp, #20
 8013154:	af00      	add	r7, sp, #0
 8013156:	4603      	mov	r3, r0
 8013158:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 801315a:	79fb      	ldrb	r3, [r7, #7]
 801315c:	091b      	lsrs	r3, r3, #4
 801315e:	b2db      	uxtb	r3, r3
 8013160:	461a      	mov	r2, r3
 8013162:	0092      	lsls	r2, r2, #2
 8013164:	4413      	add	r3, r2
 8013166:	005b      	lsls	r3, r3, #1
 8013168:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 801316a:	79fb      	ldrb	r3, [r7, #7]
 801316c:	f003 030f 	and.w	r3, r3, #15
 8013170:	b2da      	uxtb	r2, r3
 8013172:	7bfb      	ldrb	r3, [r7, #15]
 8013174:	4413      	add	r3, r2
 8013176:	b2db      	uxtb	r3, r3
}
 8013178:	4618      	mov	r0, r3
 801317a:	3714      	adds	r7, #20
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr

08013184 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b084      	sub	sp, #16
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2b00      	cmp	r3, #0
 8013190:	d101      	bne.n	8013196 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8013192:	2301      	movs	r3, #1
 8013194:	e10f      	b.n	80133b6 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	2200      	movs	r2, #0
 801319a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	681b      	ldr	r3, [r3, #0]
 80131a0:	4a87      	ldr	r2, [pc, #540]	; (80133c0 <HAL_SPI_Init+0x23c>)
 80131a2:	4293      	cmp	r3, r2
 80131a4:	d00f      	beq.n	80131c6 <HAL_SPI_Init+0x42>
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	4a86      	ldr	r2, [pc, #536]	; (80133c4 <HAL_SPI_Init+0x240>)
 80131ac:	4293      	cmp	r3, r2
 80131ae:	d00a      	beq.n	80131c6 <HAL_SPI_Init+0x42>
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	681b      	ldr	r3, [r3, #0]
 80131b4:	4a84      	ldr	r2, [pc, #528]	; (80133c8 <HAL_SPI_Init+0x244>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d005      	beq.n	80131c6 <HAL_SPI_Init+0x42>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	68db      	ldr	r3, [r3, #12]
 80131be:	2b0f      	cmp	r3, #15
 80131c0:	d901      	bls.n	80131c6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 80131c2:	2301      	movs	r3, #1
 80131c4:	e0f7      	b.n	80133b6 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 80131c6:	6878      	ldr	r0, [r7, #4]
 80131c8:	f000 fd60 	bl	8013c8c <SPI_GetPacketSize>
 80131cc:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	4a7b      	ldr	r2, [pc, #492]	; (80133c0 <HAL_SPI_Init+0x23c>)
 80131d4:	4293      	cmp	r3, r2
 80131d6:	d00c      	beq.n	80131f2 <HAL_SPI_Init+0x6e>
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	4a79      	ldr	r2, [pc, #484]	; (80133c4 <HAL_SPI_Init+0x240>)
 80131de:	4293      	cmp	r3, r2
 80131e0:	d007      	beq.n	80131f2 <HAL_SPI_Init+0x6e>
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	681b      	ldr	r3, [r3, #0]
 80131e6:	4a78      	ldr	r2, [pc, #480]	; (80133c8 <HAL_SPI_Init+0x244>)
 80131e8:	4293      	cmp	r3, r2
 80131ea:	d002      	beq.n	80131f2 <HAL_SPI_Init+0x6e>
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2b08      	cmp	r3, #8
 80131f0:	d811      	bhi.n	8013216 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80131f2:	687b      	ldr	r3, [r7, #4]
 80131f4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80131f6:	4a72      	ldr	r2, [pc, #456]	; (80133c0 <HAL_SPI_Init+0x23c>)
 80131f8:	4293      	cmp	r3, r2
 80131fa:	d009      	beq.n	8013210 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	4a70      	ldr	r2, [pc, #448]	; (80133c4 <HAL_SPI_Init+0x240>)
 8013202:	4293      	cmp	r3, r2
 8013204:	d004      	beq.n	8013210 <HAL_SPI_Init+0x8c>
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	681b      	ldr	r3, [r3, #0]
 801320a:	4a6f      	ldr	r2, [pc, #444]	; (80133c8 <HAL_SPI_Init+0x244>)
 801320c:	4293      	cmp	r3, r2
 801320e:	d104      	bne.n	801321a <HAL_SPI_Init+0x96>
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	2b10      	cmp	r3, #16
 8013214:	d901      	bls.n	801321a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8013216:	2301      	movs	r3, #1
 8013218:	e0cd      	b.n	80133b6 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013220:	b2db      	uxtb	r3, r3
 8013222:	2b00      	cmp	r3, #0
 8013224:	d106      	bne.n	8013234 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	2200      	movs	r2, #0
 801322a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801322e:	6878      	ldr	r0, [r7, #4]
 8013230:	f7f1 fc22 	bl	8004a78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	2202      	movs	r2, #2
 8013238:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	681b      	ldr	r3, [r3, #0]
 8013240:	681a      	ldr	r2, [r3, #0]
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	681b      	ldr	r3, [r3, #0]
 8013246:	f022 0201 	bic.w	r2, r2, #1
 801324a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801324c:	687b      	ldr	r3, [r7, #4]
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	689b      	ldr	r3, [r3, #8]
 8013252:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8013256:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	699b      	ldr	r3, [r3, #24]
 801325c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8013260:	d119      	bne.n	8013296 <HAL_SPI_Init+0x112>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	685b      	ldr	r3, [r3, #4]
 8013266:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 801326a:	d103      	bne.n	8013274 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8013270:	2b00      	cmp	r3, #0
 8013272:	d008      	beq.n	8013286 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013274:	687b      	ldr	r3, [r7, #4]
 8013276:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8013278:	2b00      	cmp	r3, #0
 801327a:	d10c      	bne.n	8013296 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8013280:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8013284:	d107      	bne.n	8013296 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	681a      	ldr	r2, [r3, #0]
 801328c:	687b      	ldr	r3, [r7, #4]
 801328e:	681b      	ldr	r3, [r3, #0]
 8013290:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8013294:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d00f      	beq.n	80132c2 <HAL_SPI_Init+0x13e>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	68db      	ldr	r3, [r3, #12]
 80132a6:	2b06      	cmp	r3, #6
 80132a8:	d90b      	bls.n	80132c2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	681b      	ldr	r3, [r3, #0]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	430a      	orrs	r2, r1
 80132be:	601a      	str	r2, [r3, #0]
 80132c0:	e007      	b.n	80132d2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 80132c2:	687b      	ldr	r3, [r7, #4]
 80132c4:	681b      	ldr	r3, [r3, #0]
 80132c6:	681a      	ldr	r2, [r3, #0]
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80132d0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80132d2:	687b      	ldr	r3, [r7, #4]
 80132d4:	69da      	ldr	r2, [r3, #28]
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80132da:	431a      	orrs	r2, r3
 80132dc:	68bb      	ldr	r3, [r7, #8]
 80132de:	431a      	orrs	r2, r3
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80132e4:	ea42 0103 	orr.w	r1, r2, r3
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	68da      	ldr	r2, [r3, #12]
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	430a      	orrs	r2, r1
 80132f2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80132fc:	431a      	orrs	r2, r3
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013302:	431a      	orrs	r2, r3
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	699b      	ldr	r3, [r3, #24]
 8013308:	431a      	orrs	r2, r3
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	691b      	ldr	r3, [r3, #16]
 801330e:	431a      	orrs	r2, r3
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	695b      	ldr	r3, [r3, #20]
 8013314:	431a      	orrs	r2, r3
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	6a1b      	ldr	r3, [r3, #32]
 801331a:	431a      	orrs	r2, r3
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	685b      	ldr	r3, [r3, #4]
 8013320:	431a      	orrs	r2, r3
 8013322:	687b      	ldr	r3, [r7, #4]
 8013324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8013326:	431a      	orrs	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	689b      	ldr	r3, [r3, #8]
 801332c:	431a      	orrs	r2, r3
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013332:	ea42 0103 	orr.w	r1, r2, r3
 8013336:	687b      	ldr	r3, [r7, #4]
 8013338:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801333a:	687b      	ldr	r3, [r7, #4]
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	430a      	orrs	r2, r1
 8013340:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	685b      	ldr	r3, [r3, #4]
 8013346:	2b00      	cmp	r3, #0
 8013348:	d113      	bne.n	8013372 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	689b      	ldr	r3, [r3, #8]
 8013350:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8013354:	687b      	ldr	r3, [r7, #4]
 8013356:	681b      	ldr	r3, [r3, #0]
 8013358:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801335c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	689b      	ldr	r3, [r3, #8]
 8013364:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8013370:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8013372:	687b      	ldr	r3, [r7, #4]
 8013374:	681b      	ldr	r3, [r3, #0]
 8013376:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	f022 0201 	bic.w	r2, r2, #1
 8013380:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8013382:	687b      	ldr	r3, [r7, #4]
 8013384:	685b      	ldr	r3, [r3, #4]
 8013386:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801338a:	2b00      	cmp	r3, #0
 801338c:	d00a      	beq.n	80133a4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	68db      	ldr	r3, [r3, #12]
 8013394:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8013398:	687b      	ldr	r3, [r7, #4]
 801339a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	430a      	orrs	r2, r1
 80133a2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	2200      	movs	r2, #0
 80133a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	2201      	movs	r2, #1
 80133b0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80133b4:	2300      	movs	r3, #0
}
 80133b6:	4618      	mov	r0, r3
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}
 80133be:	bf00      	nop
 80133c0:	40013000 	.word	0x40013000
 80133c4:	40003800 	.word	0x40003800
 80133c8:	40003c00 	.word	0x40003c00

080133cc <HAL_SPI_Receive_DMA>:
  * @param  Size : amount of data to be sent
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80133cc:	b580      	push	{r7, lr}
 80133ce:	b084      	sub	sp, #16
 80133d0:	af00      	add	r7, sp, #0
 80133d2:	60f8      	str	r0, [r7, #12]
 80133d4:	60b9      	str	r1, [r7, #8]
 80133d6:	4613      	mov	r3, r2
 80133d8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));


  if (hspi->State != HAL_SPI_STATE_READY)
 80133da:	68fb      	ldr	r3, [r7, #12]
 80133dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80133e0:	b2db      	uxtb	r3, r3
 80133e2:	2b01      	cmp	r3, #1
 80133e4:	d005      	beq.n	80133f2 <HAL_SPI_Receive_DMA+0x26>
  {
    __HAL_UNLOCK(hspi);
 80133e6:	68fb      	ldr	r3, [r7, #12]
 80133e8:	2200      	movs	r2, #0
 80133ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_BUSY;
 80133ee:	2302      	movs	r3, #2
 80133f0:	e127      	b.n	8013642 <HAL_SPI_Receive_DMA+0x276>
  }

  if ((pData == NULL) || (Size == 0UL))
 80133f2:	68bb      	ldr	r3, [r7, #8]
 80133f4:	2b00      	cmp	r3, #0
 80133f6:	d002      	beq.n	80133fe <HAL_SPI_Receive_DMA+0x32>
 80133f8:	88fb      	ldrh	r3, [r7, #6]
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d105      	bne.n	801340a <HAL_SPI_Receive_DMA+0x3e>
  {
    __HAL_UNLOCK(hspi);
 80133fe:	68fb      	ldr	r3, [r7, #12]
 8013400:	2200      	movs	r2, #0
 8013402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 8013406:	2301      	movs	r3, #1
 8013408:	e11b      	b.n	8013642 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8013410:	2b01      	cmp	r3, #1
 8013412:	d101      	bne.n	8013418 <HAL_SPI_Receive_DMA+0x4c>
 8013414:	2302      	movs	r3, #2
 8013416:	e114      	b.n	8013642 <HAL_SPI_Receive_DMA+0x276>
 8013418:	68fb      	ldr	r3, [r7, #12]
 801341a:	2201      	movs	r2, #1
 801341c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	2204      	movs	r2, #4
 8013424:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8013428:	68fb      	ldr	r3, [r7, #12]
 801342a:	2200      	movs	r2, #0
 801342c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	68ba      	ldr	r2, [r7, #8]
 8013434:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	88fa      	ldrh	r2, [r7, #6]
 801343a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 801343e:	68fb      	ldr	r3, [r7, #12]
 8013440:	88fa      	ldrh	r2, [r7, #6]
 8013442:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8013446:	68fb      	ldr	r3, [r7, #12]
 8013448:	2200      	movs	r2, #0
 801344a:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	2200      	movs	r2, #0
 8013450:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->TxXferSize  = (uint16_t) 0UL;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	2200      	movs	r2, #0
 8013456:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	2200      	movs	r2, #0
 801345e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	689b      	ldr	r3, [r3, #8]
 8013466:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 801346a:	d108      	bne.n	801347e <HAL_SPI_Receive_DMA+0xb2>
  {
    SPI_1LINE_RX(hspi);
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	681a      	ldr	r2, [r3, #0]
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801347a:	601a      	str	r2, [r3, #0]
 801347c:	e009      	b.n	8013492 <HAL_SPI_Receive_DMA+0xc6>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	681b      	ldr	r3, [r3, #0]
 8013482:	68db      	ldr	r3, [r3, #12]
 8013484:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 8013488:	68fb      	ldr	r3, [r7, #12]
 801348a:	681b      	ldr	r3, [r3, #0]
 801348c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8013490:	60da      	str	r2, [r3, #12]
  }

  /* Packing mode management is enabled by the DMA settings */
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	68db      	ldr	r3, [r3, #12]
 8013496:	2b0f      	cmp	r3, #15
 8013498:	d905      	bls.n	80134a6 <HAL_SPI_Receive_DMA+0xda>
 801349a:	68fb      	ldr	r3, [r7, #12]
 801349c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801349e:	699b      	ldr	r3, [r3, #24]
 80134a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80134a4:	d10f      	bne.n	80134c6 <HAL_SPI_Receive_DMA+0xfa>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	68db      	ldr	r3, [r3, #12]
  if (((hspi->Init.DataSize > SPI_DATASIZE_16BIT) && (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))    || \
 80134aa:	2b07      	cmp	r3, #7
 80134ac:	d911      	bls.n	80134d2 <HAL_SPI_Receive_DMA+0x106>
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134b2:	699b      	ldr	r3, [r3, #24]
 80134b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80134b8:	d00b      	beq.n	80134d2 <HAL_SPI_Receive_DMA+0x106>
                                                     (hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_WORD))))
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134be:	699b      	ldr	r3, [r3, #24]
      ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) && ((hspi->hdmarx->Init.MemDataAlignment != DMA_MDATAALIGN_HALFWORD) && \
 80134c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80134c4:	d005      	beq.n	80134d2 <HAL_SPI_Receive_DMA+0x106>
  {
    /* Restriction the DMA data received is not allowed in this mode */
    __HAL_UNLOCK(hspi);
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	2200      	movs	r2, #0
 80134ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return HAL_ERROR;
 80134ce:	2301      	movs	r3, #1
 80134d0:	e0b7      	b.n	8013642 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Clear RXDMAEN bit */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80134d2:	68fb      	ldr	r3, [r7, #12]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	689a      	ldr	r2, [r3, #8]
 80134d8:	68fb      	ldr	r3, [r7, #12]
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80134e0:	609a      	str	r2, [r3, #8]

  /* Adjust XferCount according to DMA alignment / Data size */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	68db      	ldr	r3, [r3, #12]
 80134e6:	2b07      	cmp	r3, #7
 80134e8:	d820      	bhi.n	801352c <HAL_SPI_Receive_DMA+0x160>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80134ee:	699b      	ldr	r3, [r3, #24]
 80134f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80134f4:	d109      	bne.n	801350a <HAL_SPI_Receive_DMA+0x13e>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 80134f6:	68fb      	ldr	r3, [r7, #12]
 80134f8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80134fc:	b29b      	uxth	r3, r3
 80134fe:	3301      	adds	r3, #1
 8013500:	105b      	asrs	r3, r3, #1
 8013502:	b29a      	uxth	r2, r3
 8013504:	68fb      	ldr	r3, [r7, #12]
 8013506:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    }
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 801350a:	68fb      	ldr	r3, [r7, #12]
 801350c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801350e:	699b      	ldr	r3, [r3, #24]
 8013510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013514:	d11e      	bne.n	8013554 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 3UL) >> 2UL;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801351c:	b29b      	uxth	r3, r3
 801351e:	3303      	adds	r3, #3
 8013520:	109b      	asrs	r3, r3, #2
 8013522:	b29a      	uxth	r2, r3
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801352a:	e013      	b.n	8013554 <HAL_SPI_Receive_DMA+0x188>
    }
  }
  else if (hspi->Init.DataSize <= SPI_DATASIZE_16BIT)
 801352c:	68fb      	ldr	r3, [r7, #12]
 801352e:	68db      	ldr	r3, [r3, #12]
 8013530:	2b0f      	cmp	r3, #15
 8013532:	d80f      	bhi.n	8013554 <HAL_SPI_Receive_DMA+0x188>
  {
    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_WORD)
 8013534:	68fb      	ldr	r3, [r7, #12]
 8013536:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013538:	699b      	ldr	r3, [r3, #24]
 801353a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801353e:	d109      	bne.n	8013554 <HAL_SPI_Receive_DMA+0x188>
    {
      hspi->RxXferCount = (hspi->RxXferCount + (uint16_t) 1UL) >> 1UL;
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013546:	b29b      	uxth	r3, r3
 8013548:	3301      	adds	r3, #1
 801354a:	105b      	asrs	r3, r3, #1
 801354c:	b29a      	uxth	r2, r3
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  {
    /* Adjustment done */
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013558:	4a3c      	ldr	r2, [pc, #240]	; (801364c <HAL_SPI_Receive_DMA+0x280>)
 801355a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 801355c:	68fb      	ldr	r3, [r7, #12]
 801355e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013560:	4a3b      	ldr	r2, [pc, #236]	; (8013650 <HAL_SPI_Receive_DMA+0x284>)
 8013562:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013568:	4a3a      	ldr	r2, [pc, #232]	; (8013654 <HAL_SPI_Receive_DMA+0x288>)
 801356a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 801356c:	68fb      	ldr	r3, [r7, #12]
 801356e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013570:	2200      	movs	r2, #0
 8013572:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	3330      	adds	r3, #48	; 0x30
 801357e:	4619      	mov	r1, r3
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013584:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8013586:	68fb      	ldr	r3, [r7, #12]
 8013588:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801358c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->RXDR, (uint32_t)hspi->pRxBuffPtr,
 801358e:	f7f5 febf 	bl	8009310 <HAL_DMA_Start_IT>
 8013592:	4603      	mov	r3, r0
 8013594:	2b00      	cmp	r3, #0
 8013596:	d011      	beq.n	80135bc <HAL_SPI_Receive_DMA+0x1f0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801359e:	f043 0210 	orr.w	r2, r3, #16
 80135a2:	68fb      	ldr	r3, [r7, #12]
 80135a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	2201      	movs	r2, #1
 80135ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Unlock the process */
    __HAL_UNLOCK(hspi);
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	2200      	movs	r2, #0
 80135b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_ERROR;
 80135b8:	2301      	movs	r3, #1
 80135ba:	e042      	b.n	8013642 <HAL_SPI_Receive_DMA+0x276>
  }

  /* Set the number of data at current transfer */
  if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80135c0:	69db      	ldr	r3, [r3, #28]
 80135c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80135c6:	d108      	bne.n	80135da <HAL_SPI_Receive_DMA+0x20e>
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, 0UL);
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	681b      	ldr	r3, [r3, #0]
 80135cc:	6859      	ldr	r1, [r3, #4]
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	681a      	ldr	r2, [r3, #0]
 80135d2:	4b21      	ldr	r3, [pc, #132]	; (8013658 <HAL_SPI_Receive_DMA+0x28c>)
 80135d4:	400b      	ands	r3, r1
 80135d6:	6053      	str	r3, [r2, #4]
 80135d8:	e009      	b.n	80135ee <HAL_SPI_Receive_DMA+0x222>
  }
  else
  {
    MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	685a      	ldr	r2, [r3, #4]
 80135e0:	4b1d      	ldr	r3, [pc, #116]	; (8013658 <HAL_SPI_Receive_DMA+0x28c>)
 80135e2:	4013      	ands	r3, r2
 80135e4:	88f9      	ldrh	r1, [r7, #6]
 80135e6:	68fa      	ldr	r2, [r7, #12]
 80135e8:	6812      	ldr	r2, [r2, #0]
 80135ea:	430b      	orrs	r3, r1
 80135ec:	6053      	str	r3, [r2, #4]
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CFG1, SPI_CFG1_RXDMAEN);
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	689a      	ldr	r2, [r3, #8]
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	681b      	ldr	r3, [r3, #0]
 80135f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80135fc:	609a      	str	r2, [r3, #8]

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 80135fe:	68fb      	ldr	r3, [r7, #12]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	691a      	ldr	r2, [r3, #16]
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	681b      	ldr	r3, [r3, #0]
 8013608:	f442 7250 	orr.w	r2, r2, #832	; 0x340
 801360c:	611a      	str	r2, [r3, #16]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 801360e:	68fb      	ldr	r3, [r7, #12]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	681a      	ldr	r2, [r3, #0]
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	f042 0201 	orr.w	r2, r2, #1
 801361c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801361e:	68fb      	ldr	r3, [r7, #12]
 8013620:	685b      	ldr	r3, [r3, #4]
 8013622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8013626:	d107      	bne.n	8013638 <HAL_SPI_Receive_DMA+0x26c>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681b      	ldr	r3, [r3, #0]
 801362c:	681a      	ldr	r2, [r3, #0]
 801362e:	68fb      	ldr	r3, [r7, #12]
 8013630:	681b      	ldr	r3, [r3, #0]
 8013632:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013636:	601a      	str	r2, [r3, #0]
  }

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	2200      	movs	r2, #0
 801363c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8013640:	2300      	movs	r3, #0
}
 8013642:	4618      	mov	r0, r3
 8013644:	3710      	adds	r7, #16
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
 801364a:	bf00      	nop
 801364c:	08013ab7 	.word	0x08013ab7
 8013650:	08013a71 	.word	0x08013a71
 8013654:	08013ad3 	.word	0x08013ad3
 8013658:	ffff0000 	.word	0xffff0000

0801365c <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801365c:	b580      	push	{r7, lr}
 801365e:	b08a      	sub	sp, #40	; 0x28
 8013660:	af00      	add	r7, sp, #0
 8013662:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	681b      	ldr	r3, [r3, #0]
 8013668:	691b      	ldr	r3, [r3, #16]
 801366a:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	695b      	ldr	r3, [r3, #20]
 8013672:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8013674:	6a3a      	ldr	r2, [r7, #32]
 8013676:	69fb      	ldr	r3, [r7, #28]
 8013678:	4013      	ands	r3, r2
 801367a:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	689b      	ldr	r3, [r3, #8]
 8013682:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8013684:	2300      	movs	r3, #0
 8013686:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 801368e:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	3330      	adds	r3, #48	; 0x30
 8013696:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8013698:	69fb      	ldr	r3, [r7, #28]
 801369a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801369e:	2b00      	cmp	r3, #0
 80136a0:	d010      	beq.n	80136c4 <HAL_SPI_IRQHandler+0x68>
 80136a2:	6a3b      	ldr	r3, [r7, #32]
 80136a4:	f003 0308 	and.w	r3, r3, #8
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d00b      	beq.n	80136c4 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	681b      	ldr	r3, [r3, #0]
 80136b0:	699a      	ldr	r2, [r3, #24]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80136ba:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f000 f9cd 	bl	8013a5c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 80136c2:	e192      	b.n	80139ea <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80136c4:	69bb      	ldr	r3, [r7, #24]
 80136c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d113      	bne.n	80136f6 <HAL_SPI_IRQHandler+0x9a>
 80136ce:	69bb      	ldr	r3, [r7, #24]
 80136d0:	f003 0320 	and.w	r3, r3, #32
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d10e      	bne.n	80136f6 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 80136d8:	69bb      	ldr	r3, [r7, #24]
 80136da:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 80136de:	2b00      	cmp	r3, #0
 80136e0:	d009      	beq.n	80136f6 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	4798      	blx	r3
    hspi->RxISR(hspi);
 80136ea:	687b      	ldr	r3, [r7, #4]
 80136ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80136ee:	6878      	ldr	r0, [r7, #4]
 80136f0:	4798      	blx	r3
    handled = 1UL;
 80136f2:	2301      	movs	r3, #1
 80136f4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 80136f6:	69bb      	ldr	r3, [r7, #24]
 80136f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d10f      	bne.n	8013720 <HAL_SPI_IRQHandler+0xc4>
 8013700:	69bb      	ldr	r3, [r7, #24]
 8013702:	f003 0301 	and.w	r3, r3, #1
 8013706:	2b00      	cmp	r3, #0
 8013708:	d00a      	beq.n	8013720 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801370a:	69bb      	ldr	r3, [r7, #24]
 801370c:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8013710:	2b00      	cmp	r3, #0
 8013712:	d105      	bne.n	8013720 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013718:	6878      	ldr	r0, [r7, #4]
 801371a:	4798      	blx	r3
    handled = 1UL;
 801371c:	2301      	movs	r3, #1
 801371e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8013720:	69bb      	ldr	r3, [r7, #24]
 8013722:	f003 0320 	and.w	r3, r3, #32
 8013726:	2b00      	cmp	r3, #0
 8013728:	d10f      	bne.n	801374a <HAL_SPI_IRQHandler+0xee>
 801372a:	69bb      	ldr	r3, [r7, #24]
 801372c:	f003 0302 	and.w	r3, r3, #2
 8013730:	2b00      	cmp	r3, #0
 8013732:	d00a      	beq.n	801374a <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801373a:	2b00      	cmp	r3, #0
 801373c:	d105      	bne.n	801374a <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013742:	6878      	ldr	r0, [r7, #4]
 8013744:	4798      	blx	r3
    handled = 1UL;
 8013746:	2301      	movs	r3, #1
 8013748:	627b      	str	r3, [r7, #36]	; 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801374a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801374c:	2b00      	cmp	r3, #0
 801374e:	f040 8147 	bne.w	80139e0 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8013752:	69bb      	ldr	r3, [r7, #24]
 8013754:	f003 0308 	and.w	r3, r3, #8
 8013758:	2b00      	cmp	r3, #0
 801375a:	f000 808b 	beq.w	8013874 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	681b      	ldr	r3, [r3, #0]
 8013762:	699a      	ldr	r2, [r3, #24]
 8013764:	687b      	ldr	r3, [r7, #4]
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	f042 0208 	orr.w	r2, r2, #8
 801376c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	681b      	ldr	r3, [r3, #0]
 8013772:	699a      	ldr	r2, [r3, #24]
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	f042 0210 	orr.w	r2, r2, #16
 801377c:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	681b      	ldr	r3, [r3, #0]
 8013782:	699a      	ldr	r2, [r3, #24]
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	681b      	ldr	r3, [r3, #0]
 8013788:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801378c:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801378e:	687b      	ldr	r3, [r7, #4]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	691a      	ldr	r2, [r3, #16]
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	681b      	ldr	r3, [r3, #0]
 8013798:	f022 0208 	bic.w	r2, r2, #8
 801379c:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	681b      	ldr	r3, [r3, #0]
 80137a2:	689b      	ldr	r3, [r3, #8]
 80137a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80137a8:	2b00      	cmp	r3, #0
 80137aa:	d13d      	bne.n	8013828 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 80137ac:	e036      	b.n	801381c <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	68db      	ldr	r3, [r3, #12]
 80137b2:	2b0f      	cmp	r3, #15
 80137b4:	d90b      	bls.n	80137ce <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	681a      	ldr	r2, [r3, #0]
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137be:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80137c0:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137c6:	1d1a      	adds	r2, r3, #4
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	665a      	str	r2, [r3, #100]	; 0x64
 80137cc:	e01d      	b.n	801380a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	68db      	ldr	r3, [r3, #12]
 80137d2:	2b07      	cmp	r3, #7
 80137d4:	d90b      	bls.n	80137ee <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137da:	68fa      	ldr	r2, [r7, #12]
 80137dc:	8812      	ldrh	r2, [r2, #0]
 80137de:	b292      	uxth	r2, r2
 80137e0:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137e6:	1c9a      	adds	r2, r3, #2
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	665a      	str	r2, [r3, #100]	; 0x64
 80137ec:	e00d      	b.n	801380a <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80137fa:	7812      	ldrb	r2, [r2, #0]
 80137fc:	b2d2      	uxtb	r2, r2
 80137fe:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013804:	1c5a      	adds	r2, r3, #1
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013810:	b29b      	uxth	r3, r3
 8013812:	3b01      	subs	r3, #1
 8013814:	b29a      	uxth	r2, r3
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013822:	b29b      	uxth	r3, r3
 8013824:	2b00      	cmp	r3, #0
 8013826:	d1c2      	bne.n	80137ae <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8013828:	6878      	ldr	r0, [r7, #4]
 801382a:	f000 f98f 	bl	8013b4c <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	2201      	movs	r2, #1
 8013832:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801383c:	2b00      	cmp	r3, #0
 801383e:	d003      	beq.n	8013848 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	f000 f901 	bl	8013a48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8013846:	e0d0      	b.n	80139ea <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8013848:	7cfb      	ldrb	r3, [r7, #19]
 801384a:	2b05      	cmp	r3, #5
 801384c:	d103      	bne.n	8013856 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801384e:	6878      	ldr	r0, [r7, #4]
 8013850:	f000 f8e6 	bl	8013a20 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 8013854:	e0c6      	b.n	80139e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8013856:	7cfb      	ldrb	r3, [r7, #19]
 8013858:	2b04      	cmp	r3, #4
 801385a:	d103      	bne.n	8013864 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801385c:	6878      	ldr	r0, [r7, #4]
 801385e:	f000 f8d5 	bl	8013a0c <HAL_SPI_RxCpltCallback>
    return;
 8013862:	e0bf      	b.n	80139e4 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8013864:	7cfb      	ldrb	r3, [r7, #19]
 8013866:	2b03      	cmp	r3, #3
 8013868:	f040 80bc 	bne.w	80139e4 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801386c:	6878      	ldr	r0, [r7, #4]
 801386e:	f000 f8c3 	bl	80139f8 <HAL_SPI_TxCpltCallback>
    return;
 8013872:	e0b7      	b.n	80139e4 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8013874:	69bb      	ldr	r3, [r7, #24]
 8013876:	f403 7358 	and.w	r3, r3, #864	; 0x360
 801387a:	2b00      	cmp	r3, #0
 801387c:	f000 80b5 	beq.w	80139ea <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8013880:	69bb      	ldr	r3, [r7, #24]
 8013882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013886:	2b00      	cmp	r3, #0
 8013888:	d00f      	beq.n	80138aa <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801388a:	687b      	ldr	r3, [r7, #4]
 801388c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013890:	f043 0204 	orr.w	r2, r3, #4
 8013894:	687b      	ldr	r3, [r7, #4]
 8013896:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	699a      	ldr	r2, [r3, #24]
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	681b      	ldr	r3, [r3, #0]
 80138a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80138a8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 80138aa:	69bb      	ldr	r3, [r7, #24]
 80138ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	d00f      	beq.n	80138d4 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80138ba:	f043 0201 	orr.w	r2, r3, #1
 80138be:	687b      	ldr	r3, [r7, #4]
 80138c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	681b      	ldr	r3, [r3, #0]
 80138c8:	699a      	ldr	r2, [r3, #24]
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80138d2:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 80138d4:	69bb      	ldr	r3, [r7, #24]
 80138d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d00f      	beq.n	80138fe <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80138e4:	f043 0208 	orr.w	r2, r3, #8
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	699a      	ldr	r2, [r3, #24]
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	681b      	ldr	r3, [r3, #0]
 80138f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80138fc:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 80138fe:	69bb      	ldr	r3, [r7, #24]
 8013900:	f003 0320 	and.w	r3, r3, #32
 8013904:	2b00      	cmp	r3, #0
 8013906:	d00f      	beq.n	8013928 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013908:	687b      	ldr	r3, [r7, #4]
 801390a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801390e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	699a      	ldr	r2, [r3, #24]
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	f042 0220 	orr.w	r2, r2, #32
 8013926:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801392e:	2b00      	cmp	r3, #0
 8013930:	d05a      	beq.n	80139e8 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	681b      	ldr	r3, [r3, #0]
 8013936:	681a      	ldr	r2, [r3, #0]
 8013938:	687b      	ldr	r3, [r7, #4]
 801393a:	681b      	ldr	r3, [r3, #0]
 801393c:	f022 0201 	bic.w	r2, r2, #1
 8013940:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	6919      	ldr	r1, [r3, #16]
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681a      	ldr	r2, [r3, #0]
 801394c:	4b28      	ldr	r3, [pc, #160]	; (80139f0 <HAL_SPI_IRQHandler+0x394>)
 801394e:	400b      	ands	r3, r1
 8013950:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013958:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801395c:	d138      	bne.n	80139d0 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801395e:	687b      	ldr	r3, [r7, #4]
 8013960:	681b      	ldr	r3, [r3, #0]
 8013962:	689a      	ldr	r2, [r3, #8]
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 801396c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801396e:	687b      	ldr	r3, [r7, #4]
 8013970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013972:	2b00      	cmp	r3, #0
 8013974:	d013      	beq.n	801399e <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801397a:	4a1e      	ldr	r2, [pc, #120]	; (80139f4 <HAL_SPI_IRQHandler+0x398>)
 801397c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013982:	4618      	mov	r0, r3
 8013984:	f7f6 fa4c 	bl	8009e20 <HAL_DMA_Abort_IT>
 8013988:	4603      	mov	r3, r0
 801398a:	2b00      	cmp	r3, #0
 801398c:	d007      	beq.n	801399e <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013994:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d020      	beq.n	80139e8 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80139a6:	687b      	ldr	r3, [r7, #4]
 80139a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139aa:	4a12      	ldr	r2, [pc, #72]	; (80139f4 <HAL_SPI_IRQHandler+0x398>)
 80139ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80139b2:	4618      	mov	r0, r3
 80139b4:	f7f6 fa34 	bl	8009e20 <HAL_DMA_Abort_IT>
 80139b8:	4603      	mov	r3, r0
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d014      	beq.n	80139e8 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80139c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80139ce:	e00b      	b.n	80139e8 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 80139d0:	687b      	ldr	r3, [r7, #4]
 80139d2:	2201      	movs	r2, #1
 80139d4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 80139d8:	6878      	ldr	r0, [r7, #4]
 80139da:	f000 f835 	bl	8013a48 <HAL_SPI_ErrorCallback>
    return;
 80139de:	e003      	b.n	80139e8 <HAL_SPI_IRQHandler+0x38c>
    return;
 80139e0:	bf00      	nop
 80139e2:	e002      	b.n	80139ea <HAL_SPI_IRQHandler+0x38e>
    return;
 80139e4:	bf00      	nop
 80139e6:	e000      	b.n	80139ea <HAL_SPI_IRQHandler+0x38e>
    return;
 80139e8:	bf00      	nop
  }
}
 80139ea:	3728      	adds	r7, #40	; 0x28
 80139ec:	46bd      	mov	sp, r7
 80139ee:	bd80      	pop	{r7, pc}
 80139f0:	fffffc94 	.word	0xfffffc94
 80139f4:	08013b19 	.word	0x08013b19

080139f8 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 80139f8:	b480      	push	{r7}
 80139fa:	b083      	sub	sp, #12
 80139fc:	af00      	add	r7, sp, #0
 80139fe:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8013a00:	bf00      	nop
 8013a02:	370c      	adds	r7, #12
 8013a04:	46bd      	mov	sp, r7
 8013a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a0a:	4770      	bx	lr

08013a0c <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a0c:	b480      	push	{r7}
 8013a0e:	b083      	sub	sp, #12
 8013a10:	af00      	add	r7, sp, #0
 8013a12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8013a14:	bf00      	nop
 8013a16:	370c      	adds	r7, #12
 8013a18:	46bd      	mov	sp, r7
 8013a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1e:	4770      	bx	lr

08013a20 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a20:	b480      	push	{r7}
 8013a22:	b083      	sub	sp, #12
 8013a24:	af00      	add	r7, sp, #0
 8013a26:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8013a28:	bf00      	nop
 8013a2a:	370c      	adds	r7, #12
 8013a2c:	46bd      	mov	sp, r7
 8013a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a32:	4770      	bx	lr

08013a34 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a34:	b480      	push	{r7}
 8013a36:	b083      	sub	sp, #12
 8013a38:	af00      	add	r7, sp, #0
 8013a3a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8013a3c:	bf00      	nop
 8013a3e:	370c      	adds	r7, #12
 8013a40:	46bd      	mov	sp, r7
 8013a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a46:	4770      	bx	lr

08013a48 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a48:	b480      	push	{r7}
 8013a4a:	b083      	sub	sp, #12
 8013a4c:	af00      	add	r7, sp, #0
 8013a4e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8013a50:	bf00      	nop
 8013a52:	370c      	adds	r7, #12
 8013a54:	46bd      	mov	sp, r7
 8013a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a5a:	4770      	bx	lr

08013a5c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013a5c:	b480      	push	{r7}
 8013a5e:	b083      	sub	sp, #12
 8013a60:	af00      	add	r7, sp, #0
 8013a62:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8013a64:	bf00      	nop
 8013a66:	370c      	adds	r7, #12
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a6e:	4770      	bx	lr

08013a70 <SPI_DMAReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b084      	sub	sp, #16
 8013a74:	af00      	add	r7, sp, #0
 8013a76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a7c:	60fb      	str	r3, [r7, #12]

  if (hspi->State != HAL_SPI_STATE_ABORT)
 8013a7e:	68fb      	ldr	r3, [r7, #12]
 8013a80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013a84:	b2db      	uxtb	r3, r3
 8013a86:	2b07      	cmp	r3, #7
 8013a88:	d011      	beq.n	8013aae <SPI_DMAReceiveCplt+0x3e>
  {
    if (hspi->hdmarx->Init.Mode == DMA_CIRCULAR)
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013a8e:	69db      	ldr	r3, [r3, #28]
 8013a90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013a94:	d103      	bne.n	8013a9e <SPI_DMAReceiveCplt+0x2e>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8013a96:	68f8      	ldr	r0, [r7, #12]
 8013a98:	f7ff ffb8 	bl	8013a0c <HAL_SPI_RxCpltCallback>
    {
      /* Enable EOT interrupt */
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
    }
  }
}
 8013a9c:	e007      	b.n	8013aae <SPI_DMAReceiveCplt+0x3e>
      __HAL_SPI_ENABLE_IT(hspi, SPI_IT_EOT);
 8013a9e:	68fb      	ldr	r3, [r7, #12]
 8013aa0:	681b      	ldr	r3, [r3, #0]
 8013aa2:	691a      	ldr	r2, [r3, #16]
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	f042 0208 	orr.w	r2, r2, #8
 8013aac:	611a      	str	r2, [r3, #16]
}
 8013aae:	bf00      	nop
 8013ab0:	3710      	adds	r7, #16
 8013ab2:	46bd      	mov	sp, r7
 8013ab4:	bd80      	pop	{r7, pc}

08013ab6 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma) /* Derogation MISRAC2012-Rule-8.13 */
{
 8013ab6:	b580      	push	{r7, lr}
 8013ab8:	b084      	sub	sp, #16
 8013aba:	af00      	add	r7, sp, #0
 8013abc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ac2:	60fb      	str	r3, [r7, #12]
                            ((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-8.13 */

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8013ac4:	68f8      	ldr	r0, [r7, #12]
 8013ac6:	f7ff ffb5 	bl	8013a34 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013aca:	bf00      	nop
 8013acc:	3710      	adds	r7, #16
 8013ace:	46bd      	mov	sp, r7
 8013ad0:	bd80      	pop	{r7, pc}

08013ad2 <SPI_DMAError>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8013ad2:	b580      	push	{r7, lr}
 8013ad4:	b084      	sub	sp, #16
 8013ad6:	af00      	add	r7, sp, #0
 8013ad8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013ade:	60fb      	str	r3, [r7, #12]

  /* if DMA error is FIFO error ignore it */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f7f7 fb1b 	bl	800b11c <HAL_DMA_GetError>
 8013ae6:	4603      	mov	r3, r0
 8013ae8:	2b02      	cmp	r3, #2
 8013aea:	d011      	beq.n	8013b10 <SPI_DMAError+0x3e>
  {
    /* Call SPI standard close procedure */
    SPI_CloseTransfer(hspi);
 8013aec:	68f8      	ldr	r0, [r7, #12]
 8013aee:	f000 f82d 	bl	8013b4c <SPI_CloseTransfer>

    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013af8:	f043 0210 	orr.w	r2, r3, #16
 8013afc:	68fb      	ldr	r3, [r7, #12]
 8013afe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hspi->State = HAL_SPI_STATE_READY;
 8013b02:	68fb      	ldr	r3, [r7, #12]
 8013b04:	2201      	movs	r2, #1
 8013b06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8013b0a:	68f8      	ldr	r0, [r7, #12]
 8013b0c:	f7ff ff9c 	bl	8013a48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8013b10:	bf00      	nop
 8013b12:	3710      	adds	r7, #16
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}

08013b18 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b084      	sub	sp, #16
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b24:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8013b26:	68fb      	ldr	r3, [r7, #12]
 8013b28:	2200      	movs	r2, #0
 8013b2a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 8013b2e:	68fb      	ldr	r3, [r7, #12]
 8013b30:	2200      	movs	r2, #0
 8013b32:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	2201      	movs	r2, #1
 8013b3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8013b3e:	68f8      	ldr	r0, [r7, #12]
 8013b40:	f7ff ff82 	bl	8013a48 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8013b44:	bf00      	nop
 8013b46:	3710      	adds	r7, #16
 8013b48:	46bd      	mov	sp, r7
 8013b4a:	bd80      	pop	{r7, pc}

08013b4c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b085      	sub	sp, #20
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8013b54:	687b      	ldr	r3, [r7, #4]
 8013b56:	681b      	ldr	r3, [r3, #0]
 8013b58:	695b      	ldr	r3, [r3, #20]
 8013b5a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8013b5c:	687b      	ldr	r3, [r7, #4]
 8013b5e:	681b      	ldr	r3, [r3, #0]
 8013b60:	699a      	ldr	r2, [r3, #24]
 8013b62:	687b      	ldr	r3, [r7, #4]
 8013b64:	681b      	ldr	r3, [r3, #0]
 8013b66:	f042 0208 	orr.w	r2, r2, #8
 8013b6a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8013b6c:	687b      	ldr	r3, [r7, #4]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	699a      	ldr	r2, [r3, #24]
 8013b72:	687b      	ldr	r3, [r7, #4]
 8013b74:	681b      	ldr	r3, [r3, #0]
 8013b76:	f042 0210 	orr.w	r2, r2, #16
 8013b7a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8013b7c:	687b      	ldr	r3, [r7, #4]
 8013b7e:	681b      	ldr	r3, [r3, #0]
 8013b80:	681a      	ldr	r2, [r3, #0]
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	f022 0201 	bic.w	r2, r2, #1
 8013b8a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	6919      	ldr	r1, [r3, #16]
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681a      	ldr	r2, [r3, #0]
 8013b96:	4b3c      	ldr	r3, [pc, #240]	; (8013c88 <SPI_CloseTransfer+0x13c>)
 8013b98:	400b      	ands	r3, r1
 8013b9a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8013b9c:	687b      	ldr	r3, [r7, #4]
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	689a      	ldr	r2, [r3, #8]
 8013ba2:	687b      	ldr	r3, [r7, #4]
 8013ba4:	681b      	ldr	r3, [r3, #0]
 8013ba6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8013baa:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013bb2:	b2db      	uxtb	r3, r3
 8013bb4:	2b04      	cmp	r3, #4
 8013bb6:	d014      	beq.n	8013be2 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	f003 0320 	and.w	r3, r3, #32
 8013bbe:	2b00      	cmp	r3, #0
 8013bc0:	d00f      	beq.n	8013be2 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8013bc2:	687b      	ldr	r3, [r7, #4]
 8013bc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bc8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	681b      	ldr	r3, [r3, #0]
 8013bd6:	699a      	ldr	r2, [r3, #24]
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	681b      	ldr	r3, [r3, #0]
 8013bdc:	f042 0220 	orr.w	r2, r2, #32
 8013be0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8013be8:	b2db      	uxtb	r3, r3
 8013bea:	2b03      	cmp	r3, #3
 8013bec:	d014      	beq.n	8013c18 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d00f      	beq.n	8013c18 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8013bf8:	687b      	ldr	r3, [r7, #4]
 8013bfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013bfe:	f043 0204 	orr.w	r2, r3, #4
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	681b      	ldr	r3, [r3, #0]
 8013c0c:	699a      	ldr	r2, [r3, #24]
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8013c16:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d00f      	beq.n	8013c42 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8013c22:	687b      	ldr	r3, [r7, #4]
 8013c24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c28:	f043 0201 	orr.w	r2, r3, #1
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	699a      	ldr	r2, [r3, #24]
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	681b      	ldr	r3, [r3, #0]
 8013c3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8013c40:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d00f      	beq.n	8013c6c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013c52:	f043 0208 	orr.w	r2, r3, #8
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	681b      	ldr	r3, [r3, #0]
 8013c60:	699a      	ldr	r2, [r3, #24]
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8013c6a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8013c6c:	687b      	ldr	r3, [r7, #4]
 8013c6e:	2200      	movs	r2, #0
 8013c70:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	2200      	movs	r2, #0
 8013c78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8013c7c:	bf00      	nop
 8013c7e:	3714      	adds	r7, #20
 8013c80:	46bd      	mov	sp, r7
 8013c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c86:	4770      	bx	lr
 8013c88:	fffffc90 	.word	0xfffffc90

08013c8c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8013c8c:	b480      	push	{r7}
 8013c8e:	b085      	sub	sp, #20
 8013c90:	af00      	add	r7, sp, #0
 8013c92:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013c98:	095b      	lsrs	r3, r3, #5
 8013c9a:	3301      	adds	r3, #1
 8013c9c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	68db      	ldr	r3, [r3, #12]
 8013ca2:	3301      	adds	r3, #1
 8013ca4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8013ca6:	68bb      	ldr	r3, [r7, #8]
 8013ca8:	3307      	adds	r3, #7
 8013caa:	08db      	lsrs	r3, r3, #3
 8013cac:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8013cae:	68bb      	ldr	r3, [r7, #8]
 8013cb0:	68fa      	ldr	r2, [r7, #12]
 8013cb2:	fb02 f303 	mul.w	r3, r2, r3
}
 8013cb6:	4618      	mov	r0, r3
 8013cb8:	3714      	adds	r7, #20
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cc0:	4770      	bx	lr

08013cc2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8013cc2:	b580      	push	{r7, lr}
 8013cc4:	b082      	sub	sp, #8
 8013cc6:	af00      	add	r7, sp, #0
 8013cc8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d101      	bne.n	8013cd4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8013cd0:	2301      	movs	r3, #1
 8013cd2:	e049      	b.n	8013d68 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013cda:	b2db      	uxtb	r3, r3
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	d106      	bne.n	8013cee <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8013ce8:	6878      	ldr	r0, [r7, #4]
 8013cea:	f7f1 fd03 	bl	80056f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013cee:	687b      	ldr	r3, [r7, #4]
 8013cf0:	2202      	movs	r2, #2
 8013cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	681a      	ldr	r2, [r3, #0]
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	3304      	adds	r3, #4
 8013cfe:	4619      	mov	r1, r3
 8013d00:	4610      	mov	r0, r2
 8013d02:	f000 fe7d 	bl	8014a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8013d06:	687b      	ldr	r3, [r7, #4]
 8013d08:	2201      	movs	r2, #1
 8013d0a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	2201      	movs	r2, #1
 8013d12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	2201      	movs	r2, #1
 8013d1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013d1e:	687b      	ldr	r3, [r7, #4]
 8013d20:	2201      	movs	r2, #1
 8013d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	2201      	movs	r2, #1
 8013d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013d2e:	687b      	ldr	r3, [r7, #4]
 8013d30:	2201      	movs	r2, #1
 8013d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	2201      	movs	r2, #1
 8013d3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2201      	movs	r2, #1
 8013d42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d46:	687b      	ldr	r3, [r7, #4]
 8013d48:	2201      	movs	r2, #1
 8013d4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	2201      	movs	r2, #1
 8013d52:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	2201      	movs	r2, #1
 8013d5a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	2201      	movs	r2, #1
 8013d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8013d66:	2300      	movs	r3, #0
}
 8013d68:	4618      	mov	r0, r3
 8013d6a:	3708      	adds	r7, #8
 8013d6c:	46bd      	mov	sp, r7
 8013d6e:	bd80      	pop	{r7, pc}

08013d70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8013d70:	b480      	push	{r7}
 8013d72:	b085      	sub	sp, #20
 8013d74:	af00      	add	r7, sp, #0
 8013d76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8013d7e:	b2db      	uxtb	r3, r3
 8013d80:	2b01      	cmp	r3, #1
 8013d82:	d001      	beq.n	8013d88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8013d84:	2301      	movs	r3, #1
 8013d86:	e054      	b.n	8013e32 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8013d88:	687b      	ldr	r3, [r7, #4]
 8013d8a:	2202      	movs	r2, #2
 8013d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	68da      	ldr	r2, [r3, #12]
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	f042 0201 	orr.w	r2, r2, #1
 8013d9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	4a26      	ldr	r2, [pc, #152]	; (8013e40 <HAL_TIM_Base_Start_IT+0xd0>)
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d022      	beq.n	8013df0 <HAL_TIM_Base_Start_IT+0x80>
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013db2:	d01d      	beq.n	8013df0 <HAL_TIM_Base_Start_IT+0x80>
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	4a22      	ldr	r2, [pc, #136]	; (8013e44 <HAL_TIM_Base_Start_IT+0xd4>)
 8013dba:	4293      	cmp	r3, r2
 8013dbc:	d018      	beq.n	8013df0 <HAL_TIM_Base_Start_IT+0x80>
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	4a21      	ldr	r2, [pc, #132]	; (8013e48 <HAL_TIM_Base_Start_IT+0xd8>)
 8013dc4:	4293      	cmp	r3, r2
 8013dc6:	d013      	beq.n	8013df0 <HAL_TIM_Base_Start_IT+0x80>
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	4a1f      	ldr	r2, [pc, #124]	; (8013e4c <HAL_TIM_Base_Start_IT+0xdc>)
 8013dce:	4293      	cmp	r3, r2
 8013dd0:	d00e      	beq.n	8013df0 <HAL_TIM_Base_Start_IT+0x80>
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	681b      	ldr	r3, [r3, #0]
 8013dd6:	4a1e      	ldr	r2, [pc, #120]	; (8013e50 <HAL_TIM_Base_Start_IT+0xe0>)
 8013dd8:	4293      	cmp	r3, r2
 8013dda:	d009      	beq.n	8013df0 <HAL_TIM_Base_Start_IT+0x80>
 8013ddc:	687b      	ldr	r3, [r7, #4]
 8013dde:	681b      	ldr	r3, [r3, #0]
 8013de0:	4a1c      	ldr	r2, [pc, #112]	; (8013e54 <HAL_TIM_Base_Start_IT+0xe4>)
 8013de2:	4293      	cmp	r3, r2
 8013de4:	d004      	beq.n	8013df0 <HAL_TIM_Base_Start_IT+0x80>
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	4a1b      	ldr	r2, [pc, #108]	; (8013e58 <HAL_TIM_Base_Start_IT+0xe8>)
 8013dec:	4293      	cmp	r3, r2
 8013dee:	d115      	bne.n	8013e1c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	689a      	ldr	r2, [r3, #8]
 8013df6:	4b19      	ldr	r3, [pc, #100]	; (8013e5c <HAL_TIM_Base_Start_IT+0xec>)
 8013df8:	4013      	ands	r3, r2
 8013dfa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013dfc:	68fb      	ldr	r3, [r7, #12]
 8013dfe:	2b06      	cmp	r3, #6
 8013e00:	d015      	beq.n	8013e2e <HAL_TIM_Base_Start_IT+0xbe>
 8013e02:	68fb      	ldr	r3, [r7, #12]
 8013e04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013e08:	d011      	beq.n	8013e2e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	681a      	ldr	r2, [r3, #0]
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	f042 0201 	orr.w	r2, r2, #1
 8013e18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e1a:	e008      	b.n	8013e2e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8013e1c:	687b      	ldr	r3, [r7, #4]
 8013e1e:	681b      	ldr	r3, [r3, #0]
 8013e20:	681a      	ldr	r2, [r3, #0]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	f042 0201 	orr.w	r2, r2, #1
 8013e2a:	601a      	str	r2, [r3, #0]
 8013e2c:	e000      	b.n	8013e30 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8013e2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8013e30:	2300      	movs	r3, #0
}
 8013e32:	4618      	mov	r0, r3
 8013e34:	3714      	adds	r7, #20
 8013e36:	46bd      	mov	sp, r7
 8013e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e3c:	4770      	bx	lr
 8013e3e:	bf00      	nop
 8013e40:	40010000 	.word	0x40010000
 8013e44:	40000400 	.word	0x40000400
 8013e48:	40000800 	.word	0x40000800
 8013e4c:	40000c00 	.word	0x40000c00
 8013e50:	40010400 	.word	0x40010400
 8013e54:	40001800 	.word	0x40001800
 8013e58:	40014000 	.word	0x40014000
 8013e5c:	00010007 	.word	0x00010007

08013e60 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8013e60:	b580      	push	{r7, lr}
 8013e62:	b084      	sub	sp, #16
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
 8013e68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8013e6e:	683b      	ldr	r3, [r7, #0]
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d109      	bne.n	8013e88 <HAL_TIM_OC_Start_IT+0x28>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	2b01      	cmp	r3, #1
 8013e7e:	bf14      	ite	ne
 8013e80:	2301      	movne	r3, #1
 8013e82:	2300      	moveq	r3, #0
 8013e84:	b2db      	uxtb	r3, r3
 8013e86:	e03c      	b.n	8013f02 <HAL_TIM_OC_Start_IT+0xa2>
 8013e88:	683b      	ldr	r3, [r7, #0]
 8013e8a:	2b04      	cmp	r3, #4
 8013e8c:	d109      	bne.n	8013ea2 <HAL_TIM_OC_Start_IT+0x42>
 8013e8e:	687b      	ldr	r3, [r7, #4]
 8013e90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8013e94:	b2db      	uxtb	r3, r3
 8013e96:	2b01      	cmp	r3, #1
 8013e98:	bf14      	ite	ne
 8013e9a:	2301      	movne	r3, #1
 8013e9c:	2300      	moveq	r3, #0
 8013e9e:	b2db      	uxtb	r3, r3
 8013ea0:	e02f      	b.n	8013f02 <HAL_TIM_OC_Start_IT+0xa2>
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	2b08      	cmp	r3, #8
 8013ea6:	d109      	bne.n	8013ebc <HAL_TIM_OC_Start_IT+0x5c>
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8013eae:	b2db      	uxtb	r3, r3
 8013eb0:	2b01      	cmp	r3, #1
 8013eb2:	bf14      	ite	ne
 8013eb4:	2301      	movne	r3, #1
 8013eb6:	2300      	moveq	r3, #0
 8013eb8:	b2db      	uxtb	r3, r3
 8013eba:	e022      	b.n	8013f02 <HAL_TIM_OC_Start_IT+0xa2>
 8013ebc:	683b      	ldr	r3, [r7, #0]
 8013ebe:	2b0c      	cmp	r3, #12
 8013ec0:	d109      	bne.n	8013ed6 <HAL_TIM_OC_Start_IT+0x76>
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8013ec8:	b2db      	uxtb	r3, r3
 8013eca:	2b01      	cmp	r3, #1
 8013ecc:	bf14      	ite	ne
 8013ece:	2301      	movne	r3, #1
 8013ed0:	2300      	moveq	r3, #0
 8013ed2:	b2db      	uxtb	r3, r3
 8013ed4:	e015      	b.n	8013f02 <HAL_TIM_OC_Start_IT+0xa2>
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	2b10      	cmp	r3, #16
 8013eda:	d109      	bne.n	8013ef0 <HAL_TIM_OC_Start_IT+0x90>
 8013edc:	687b      	ldr	r3, [r7, #4]
 8013ede:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ee2:	b2db      	uxtb	r3, r3
 8013ee4:	2b01      	cmp	r3, #1
 8013ee6:	bf14      	ite	ne
 8013ee8:	2301      	movne	r3, #1
 8013eea:	2300      	moveq	r3, #0
 8013eec:	b2db      	uxtb	r3, r3
 8013eee:	e008      	b.n	8013f02 <HAL_TIM_OC_Start_IT+0xa2>
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8013ef6:	b2db      	uxtb	r3, r3
 8013ef8:	2b01      	cmp	r3, #1
 8013efa:	bf14      	ite	ne
 8013efc:	2301      	movne	r3, #1
 8013efe:	2300      	moveq	r3, #0
 8013f00:	b2db      	uxtb	r3, r3
 8013f02:	2b00      	cmp	r3, #0
 8013f04:	d001      	beq.n	8013f0a <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 8013f06:	2301      	movs	r3, #1
 8013f08:	e0ec      	b.n	80140e4 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8013f0a:	683b      	ldr	r3, [r7, #0]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d104      	bne.n	8013f1a <HAL_TIM_OC_Start_IT+0xba>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2202      	movs	r2, #2
 8013f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8013f18:	e023      	b.n	8013f62 <HAL_TIM_OC_Start_IT+0x102>
 8013f1a:	683b      	ldr	r3, [r7, #0]
 8013f1c:	2b04      	cmp	r3, #4
 8013f1e:	d104      	bne.n	8013f2a <HAL_TIM_OC_Start_IT+0xca>
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	2202      	movs	r2, #2
 8013f24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8013f28:	e01b      	b.n	8013f62 <HAL_TIM_OC_Start_IT+0x102>
 8013f2a:	683b      	ldr	r3, [r7, #0]
 8013f2c:	2b08      	cmp	r3, #8
 8013f2e:	d104      	bne.n	8013f3a <HAL_TIM_OC_Start_IT+0xda>
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	2202      	movs	r2, #2
 8013f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8013f38:	e013      	b.n	8013f62 <HAL_TIM_OC_Start_IT+0x102>
 8013f3a:	683b      	ldr	r3, [r7, #0]
 8013f3c:	2b0c      	cmp	r3, #12
 8013f3e:	d104      	bne.n	8013f4a <HAL_TIM_OC_Start_IT+0xea>
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	2202      	movs	r2, #2
 8013f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8013f48:	e00b      	b.n	8013f62 <HAL_TIM_OC_Start_IT+0x102>
 8013f4a:	683b      	ldr	r3, [r7, #0]
 8013f4c:	2b10      	cmp	r3, #16
 8013f4e:	d104      	bne.n	8013f5a <HAL_TIM_OC_Start_IT+0xfa>
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	2202      	movs	r2, #2
 8013f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8013f58:	e003      	b.n	8013f62 <HAL_TIM_OC_Start_IT+0x102>
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	2202      	movs	r2, #2
 8013f5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	2b0c      	cmp	r3, #12
 8013f66:	d841      	bhi.n	8013fec <HAL_TIM_OC_Start_IT+0x18c>
 8013f68:	a201      	add	r2, pc, #4	; (adr r2, 8013f70 <HAL_TIM_OC_Start_IT+0x110>)
 8013f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f6e:	bf00      	nop
 8013f70:	08013fa5 	.word	0x08013fa5
 8013f74:	08013fed 	.word	0x08013fed
 8013f78:	08013fed 	.word	0x08013fed
 8013f7c:	08013fed 	.word	0x08013fed
 8013f80:	08013fb7 	.word	0x08013fb7
 8013f84:	08013fed 	.word	0x08013fed
 8013f88:	08013fed 	.word	0x08013fed
 8013f8c:	08013fed 	.word	0x08013fed
 8013f90:	08013fc9 	.word	0x08013fc9
 8013f94:	08013fed 	.word	0x08013fed
 8013f98:	08013fed 	.word	0x08013fed
 8013f9c:	08013fed 	.word	0x08013fed
 8013fa0:	08013fdb 	.word	0x08013fdb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	68da      	ldr	r2, [r3, #12]
 8013faa:	687b      	ldr	r3, [r7, #4]
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	f042 0202 	orr.w	r2, r2, #2
 8013fb2:	60da      	str	r2, [r3, #12]
      break;
 8013fb4:	e01d      	b.n	8013ff2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	681b      	ldr	r3, [r3, #0]
 8013fba:	68da      	ldr	r2, [r3, #12]
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	f042 0204 	orr.w	r2, r2, #4
 8013fc4:	60da      	str	r2, [r3, #12]
      break;
 8013fc6:	e014      	b.n	8013ff2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	68da      	ldr	r2, [r3, #12]
 8013fce:	687b      	ldr	r3, [r7, #4]
 8013fd0:	681b      	ldr	r3, [r3, #0]
 8013fd2:	f042 0208 	orr.w	r2, r2, #8
 8013fd6:	60da      	str	r2, [r3, #12]
      break;
 8013fd8:	e00b      	b.n	8013ff2 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	68da      	ldr	r2, [r3, #12]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	f042 0210 	orr.w	r2, r2, #16
 8013fe8:	60da      	str	r2, [r3, #12]
      break;
 8013fea:	e002      	b.n	8013ff2 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8013fec:	2301      	movs	r3, #1
 8013fee:	73fb      	strb	r3, [r7, #15]
      break;
 8013ff0:	bf00      	nop
  }

  if (status == HAL_OK)
 8013ff2:	7bfb      	ldrb	r3, [r7, #15]
 8013ff4:	2b00      	cmp	r3, #0
 8013ff6:	d174      	bne.n	80140e2 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8013ff8:	687b      	ldr	r3, [r7, #4]
 8013ffa:	681b      	ldr	r3, [r3, #0]
 8013ffc:	2201      	movs	r2, #1
 8013ffe:	6839      	ldr	r1, [r7, #0]
 8014000:	4618      	mov	r0, r3
 8014002:	f001 f917 	bl	8015234 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	681b      	ldr	r3, [r3, #0]
 801400a:	4a38      	ldr	r2, [pc, #224]	; (80140ec <HAL_TIM_OC_Start_IT+0x28c>)
 801400c:	4293      	cmp	r3, r2
 801400e:	d013      	beq.n	8014038 <HAL_TIM_OC_Start_IT+0x1d8>
 8014010:	687b      	ldr	r3, [r7, #4]
 8014012:	681b      	ldr	r3, [r3, #0]
 8014014:	4a36      	ldr	r2, [pc, #216]	; (80140f0 <HAL_TIM_OC_Start_IT+0x290>)
 8014016:	4293      	cmp	r3, r2
 8014018:	d00e      	beq.n	8014038 <HAL_TIM_OC_Start_IT+0x1d8>
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	681b      	ldr	r3, [r3, #0]
 801401e:	4a35      	ldr	r2, [pc, #212]	; (80140f4 <HAL_TIM_OC_Start_IT+0x294>)
 8014020:	4293      	cmp	r3, r2
 8014022:	d009      	beq.n	8014038 <HAL_TIM_OC_Start_IT+0x1d8>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	681b      	ldr	r3, [r3, #0]
 8014028:	4a33      	ldr	r2, [pc, #204]	; (80140f8 <HAL_TIM_OC_Start_IT+0x298>)
 801402a:	4293      	cmp	r3, r2
 801402c:	d004      	beq.n	8014038 <HAL_TIM_OC_Start_IT+0x1d8>
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	681b      	ldr	r3, [r3, #0]
 8014032:	4a32      	ldr	r2, [pc, #200]	; (80140fc <HAL_TIM_OC_Start_IT+0x29c>)
 8014034:	4293      	cmp	r3, r2
 8014036:	d101      	bne.n	801403c <HAL_TIM_OC_Start_IT+0x1dc>
 8014038:	2301      	movs	r3, #1
 801403a:	e000      	b.n	801403e <HAL_TIM_OC_Start_IT+0x1de>
 801403c:	2300      	movs	r3, #0
 801403e:	2b00      	cmp	r3, #0
 8014040:	d007      	beq.n	8014052 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681b      	ldr	r3, [r3, #0]
 8014046:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8014050:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	681b      	ldr	r3, [r3, #0]
 8014056:	4a25      	ldr	r2, [pc, #148]	; (80140ec <HAL_TIM_OC_Start_IT+0x28c>)
 8014058:	4293      	cmp	r3, r2
 801405a:	d022      	beq.n	80140a2 <HAL_TIM_OC_Start_IT+0x242>
 801405c:	687b      	ldr	r3, [r7, #4]
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014064:	d01d      	beq.n	80140a2 <HAL_TIM_OC_Start_IT+0x242>
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	681b      	ldr	r3, [r3, #0]
 801406a:	4a25      	ldr	r2, [pc, #148]	; (8014100 <HAL_TIM_OC_Start_IT+0x2a0>)
 801406c:	4293      	cmp	r3, r2
 801406e:	d018      	beq.n	80140a2 <HAL_TIM_OC_Start_IT+0x242>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	4a23      	ldr	r2, [pc, #140]	; (8014104 <HAL_TIM_OC_Start_IT+0x2a4>)
 8014076:	4293      	cmp	r3, r2
 8014078:	d013      	beq.n	80140a2 <HAL_TIM_OC_Start_IT+0x242>
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	681b      	ldr	r3, [r3, #0]
 801407e:	4a22      	ldr	r2, [pc, #136]	; (8014108 <HAL_TIM_OC_Start_IT+0x2a8>)
 8014080:	4293      	cmp	r3, r2
 8014082:	d00e      	beq.n	80140a2 <HAL_TIM_OC_Start_IT+0x242>
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	681b      	ldr	r3, [r3, #0]
 8014088:	4a19      	ldr	r2, [pc, #100]	; (80140f0 <HAL_TIM_OC_Start_IT+0x290>)
 801408a:	4293      	cmp	r3, r2
 801408c:	d009      	beq.n	80140a2 <HAL_TIM_OC_Start_IT+0x242>
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	681b      	ldr	r3, [r3, #0]
 8014092:	4a1e      	ldr	r2, [pc, #120]	; (801410c <HAL_TIM_OC_Start_IT+0x2ac>)
 8014094:	4293      	cmp	r3, r2
 8014096:	d004      	beq.n	80140a2 <HAL_TIM_OC_Start_IT+0x242>
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	4a15      	ldr	r2, [pc, #84]	; (80140f4 <HAL_TIM_OC_Start_IT+0x294>)
 801409e:	4293      	cmp	r3, r2
 80140a0:	d115      	bne.n	80140ce <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	689a      	ldr	r2, [r3, #8]
 80140a8:	4b19      	ldr	r3, [pc, #100]	; (8014110 <HAL_TIM_OC_Start_IT+0x2b0>)
 80140aa:	4013      	ands	r3, r2
 80140ac:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140ae:	68bb      	ldr	r3, [r7, #8]
 80140b0:	2b06      	cmp	r3, #6
 80140b2:	d015      	beq.n	80140e0 <HAL_TIM_OC_Start_IT+0x280>
 80140b4:	68bb      	ldr	r3, [r7, #8]
 80140b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80140ba:	d011      	beq.n	80140e0 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	681b      	ldr	r3, [r3, #0]
 80140c0:	681a      	ldr	r2, [r3, #0]
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	f042 0201 	orr.w	r2, r2, #1
 80140ca:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140cc:	e008      	b.n	80140e0 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681b      	ldr	r3, [r3, #0]
 80140d2:	681a      	ldr	r2, [r3, #0]
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	f042 0201 	orr.w	r2, r2, #1
 80140dc:	601a      	str	r2, [r3, #0]
 80140de:	e000      	b.n	80140e2 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80140e0:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80140e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80140e4:	4618      	mov	r0, r3
 80140e6:	3710      	adds	r7, #16
 80140e8:	46bd      	mov	sp, r7
 80140ea:	bd80      	pop	{r7, pc}
 80140ec:	40010000 	.word	0x40010000
 80140f0:	40010400 	.word	0x40010400
 80140f4:	40014000 	.word	0x40014000
 80140f8:	40014400 	.word	0x40014400
 80140fc:	40014800 	.word	0x40014800
 8014100:	40000400 	.word	0x40000400
 8014104:	40000800 	.word	0x40000800
 8014108:	40000c00 	.word	0x40000c00
 801410c:	40001800 	.word	0x40001800
 8014110:	00010007 	.word	0x00010007

08014114 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8014114:	b580      	push	{r7, lr}
 8014116:	b084      	sub	sp, #16
 8014118:	af00      	add	r7, sp, #0
 801411a:	6078      	str	r0, [r7, #4]
 801411c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801411e:	2300      	movs	r3, #0
 8014120:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 8014122:	683b      	ldr	r3, [r7, #0]
 8014124:	2b0c      	cmp	r3, #12
 8014126:	d841      	bhi.n	80141ac <HAL_TIM_OC_Stop_IT+0x98>
 8014128:	a201      	add	r2, pc, #4	; (adr r2, 8014130 <HAL_TIM_OC_Stop_IT+0x1c>)
 801412a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801412e:	bf00      	nop
 8014130:	08014165 	.word	0x08014165
 8014134:	080141ad 	.word	0x080141ad
 8014138:	080141ad 	.word	0x080141ad
 801413c:	080141ad 	.word	0x080141ad
 8014140:	08014177 	.word	0x08014177
 8014144:	080141ad 	.word	0x080141ad
 8014148:	080141ad 	.word	0x080141ad
 801414c:	080141ad 	.word	0x080141ad
 8014150:	08014189 	.word	0x08014189
 8014154:	080141ad 	.word	0x080141ad
 8014158:	080141ad 	.word	0x080141ad
 801415c:	080141ad 	.word	0x080141ad
 8014160:	0801419b 	.word	0x0801419b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	68da      	ldr	r2, [r3, #12]
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	681b      	ldr	r3, [r3, #0]
 801416e:	f022 0202 	bic.w	r2, r2, #2
 8014172:	60da      	str	r2, [r3, #12]
      break;
 8014174:	e01d      	b.n	80141b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8014176:	687b      	ldr	r3, [r7, #4]
 8014178:	681b      	ldr	r3, [r3, #0]
 801417a:	68da      	ldr	r2, [r3, #12]
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	f022 0204 	bic.w	r2, r2, #4
 8014184:	60da      	str	r2, [r3, #12]
      break;
 8014186:	e014      	b.n	80141b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	68da      	ldr	r2, [r3, #12]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	681b      	ldr	r3, [r3, #0]
 8014192:	f022 0208 	bic.w	r2, r2, #8
 8014196:	60da      	str	r2, [r3, #12]
      break;
 8014198:	e00b      	b.n	80141b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	68da      	ldr	r2, [r3, #12]
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	f022 0210 	bic.w	r2, r2, #16
 80141a8:	60da      	str	r2, [r3, #12]
      break;
 80141aa:	e002      	b.n	80141b2 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 80141ac:	2301      	movs	r3, #1
 80141ae:	73fb      	strb	r3, [r7, #15]
      break;
 80141b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80141b2:	7bfb      	ldrb	r3, [r7, #15]
 80141b4:	2b00      	cmp	r3, #0
 80141b6:	f040 8081 	bne.w	80142bc <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80141ba:	687b      	ldr	r3, [r7, #4]
 80141bc:	681b      	ldr	r3, [r3, #0]
 80141be:	2200      	movs	r2, #0
 80141c0:	6839      	ldr	r1, [r7, #0]
 80141c2:	4618      	mov	r0, r3
 80141c4:	f001 f836 	bl	8015234 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	681b      	ldr	r3, [r3, #0]
 80141cc:	4a3e      	ldr	r2, [pc, #248]	; (80142c8 <HAL_TIM_OC_Stop_IT+0x1b4>)
 80141ce:	4293      	cmp	r3, r2
 80141d0:	d013      	beq.n	80141fa <HAL_TIM_OC_Stop_IT+0xe6>
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	4a3d      	ldr	r2, [pc, #244]	; (80142cc <HAL_TIM_OC_Stop_IT+0x1b8>)
 80141d8:	4293      	cmp	r3, r2
 80141da:	d00e      	beq.n	80141fa <HAL_TIM_OC_Stop_IT+0xe6>
 80141dc:	687b      	ldr	r3, [r7, #4]
 80141de:	681b      	ldr	r3, [r3, #0]
 80141e0:	4a3b      	ldr	r2, [pc, #236]	; (80142d0 <HAL_TIM_OC_Stop_IT+0x1bc>)
 80141e2:	4293      	cmp	r3, r2
 80141e4:	d009      	beq.n	80141fa <HAL_TIM_OC_Stop_IT+0xe6>
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	4a3a      	ldr	r2, [pc, #232]	; (80142d4 <HAL_TIM_OC_Stop_IT+0x1c0>)
 80141ec:	4293      	cmp	r3, r2
 80141ee:	d004      	beq.n	80141fa <HAL_TIM_OC_Stop_IT+0xe6>
 80141f0:	687b      	ldr	r3, [r7, #4]
 80141f2:	681b      	ldr	r3, [r3, #0]
 80141f4:	4a38      	ldr	r2, [pc, #224]	; (80142d8 <HAL_TIM_OC_Stop_IT+0x1c4>)
 80141f6:	4293      	cmp	r3, r2
 80141f8:	d101      	bne.n	80141fe <HAL_TIM_OC_Stop_IT+0xea>
 80141fa:	2301      	movs	r3, #1
 80141fc:	e000      	b.n	8014200 <HAL_TIM_OC_Stop_IT+0xec>
 80141fe:	2300      	movs	r3, #0
 8014200:	2b00      	cmp	r3, #0
 8014202:	d017      	beq.n	8014234 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	6a1a      	ldr	r2, [r3, #32]
 801420a:	f241 1311 	movw	r3, #4369	; 0x1111
 801420e:	4013      	ands	r3, r2
 8014210:	2b00      	cmp	r3, #0
 8014212:	d10f      	bne.n	8014234 <HAL_TIM_OC_Stop_IT+0x120>
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	681b      	ldr	r3, [r3, #0]
 8014218:	6a1a      	ldr	r2, [r3, #32]
 801421a:	f240 4344 	movw	r3, #1092	; 0x444
 801421e:	4013      	ands	r3, r2
 8014220:	2b00      	cmp	r3, #0
 8014222:	d107      	bne.n	8014234 <HAL_TIM_OC_Stop_IT+0x120>
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	681b      	ldr	r3, [r3, #0]
 801422e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8014232:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8014234:	687b      	ldr	r3, [r7, #4]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	6a1a      	ldr	r2, [r3, #32]
 801423a:	f241 1311 	movw	r3, #4369	; 0x1111
 801423e:	4013      	ands	r3, r2
 8014240:	2b00      	cmp	r3, #0
 8014242:	d10f      	bne.n	8014264 <HAL_TIM_OC_Stop_IT+0x150>
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	6a1a      	ldr	r2, [r3, #32]
 801424a:	f240 4344 	movw	r3, #1092	; 0x444
 801424e:	4013      	ands	r3, r2
 8014250:	2b00      	cmp	r3, #0
 8014252:	d107      	bne.n	8014264 <HAL_TIM_OC_Stop_IT+0x150>
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	681b      	ldr	r3, [r3, #0]
 8014258:	681a      	ldr	r2, [r3, #0]
 801425a:	687b      	ldr	r3, [r7, #4]
 801425c:	681b      	ldr	r3, [r3, #0]
 801425e:	f022 0201 	bic.w	r2, r2, #1
 8014262:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8014264:	683b      	ldr	r3, [r7, #0]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d104      	bne.n	8014274 <HAL_TIM_OC_Stop_IT+0x160>
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	2201      	movs	r2, #1
 801426e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014272:	e023      	b.n	80142bc <HAL_TIM_OC_Stop_IT+0x1a8>
 8014274:	683b      	ldr	r3, [r7, #0]
 8014276:	2b04      	cmp	r3, #4
 8014278:	d104      	bne.n	8014284 <HAL_TIM_OC_Stop_IT+0x170>
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	2201      	movs	r2, #1
 801427e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014282:	e01b      	b.n	80142bc <HAL_TIM_OC_Stop_IT+0x1a8>
 8014284:	683b      	ldr	r3, [r7, #0]
 8014286:	2b08      	cmp	r3, #8
 8014288:	d104      	bne.n	8014294 <HAL_TIM_OC_Stop_IT+0x180>
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	2201      	movs	r2, #1
 801428e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014292:	e013      	b.n	80142bc <HAL_TIM_OC_Stop_IT+0x1a8>
 8014294:	683b      	ldr	r3, [r7, #0]
 8014296:	2b0c      	cmp	r3, #12
 8014298:	d104      	bne.n	80142a4 <HAL_TIM_OC_Stop_IT+0x190>
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	2201      	movs	r2, #1
 801429e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80142a2:	e00b      	b.n	80142bc <HAL_TIM_OC_Stop_IT+0x1a8>
 80142a4:	683b      	ldr	r3, [r7, #0]
 80142a6:	2b10      	cmp	r3, #16
 80142a8:	d104      	bne.n	80142b4 <HAL_TIM_OC_Stop_IT+0x1a0>
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2201      	movs	r2, #1
 80142ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80142b2:	e003      	b.n	80142bc <HAL_TIM_OC_Stop_IT+0x1a8>
 80142b4:	687b      	ldr	r3, [r7, #4]
 80142b6:	2201      	movs	r2, #1
 80142b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 80142bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80142be:	4618      	mov	r0, r3
 80142c0:	3710      	adds	r7, #16
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop
 80142c8:	40010000 	.word	0x40010000
 80142cc:	40010400 	.word	0x40010400
 80142d0:	40014000 	.word	0x40014000
 80142d4:	40014400 	.word	0x40014400
 80142d8:	40014800 	.word	0x40014800

080142dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80142dc:	b580      	push	{r7, lr}
 80142de:	b082      	sub	sp, #8
 80142e0:	af00      	add	r7, sp, #0
 80142e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d101      	bne.n	80142ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80142ea:	2301      	movs	r3, #1
 80142ec:	e049      	b.n	8014382 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80142f4:	b2db      	uxtb	r3, r3
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d106      	bne.n	8014308 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80142fa:	687b      	ldr	r3, [r7, #4]
 80142fc:	2200      	movs	r2, #0
 80142fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8014302:	6878      	ldr	r0, [r7, #4]
 8014304:	f000 f841 	bl	801438a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2202      	movs	r2, #2
 801430c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014310:	687b      	ldr	r3, [r7, #4]
 8014312:	681a      	ldr	r2, [r3, #0]
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	3304      	adds	r3, #4
 8014318:	4619      	mov	r1, r3
 801431a:	4610      	mov	r0, r2
 801431c:	f000 fb70 	bl	8014a00 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2201      	movs	r2, #1
 8014324:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	2201      	movs	r2, #1
 801432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8014330:	687b      	ldr	r3, [r7, #4]
 8014332:	2201      	movs	r2, #1
 8014334:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	2201      	movs	r2, #1
 801433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8014340:	687b      	ldr	r3, [r7, #4]
 8014342:	2201      	movs	r2, #1
 8014344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2201      	movs	r2, #1
 801434c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	2201      	movs	r2, #1
 8014354:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	2201      	movs	r2, #1
 801435c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	2201      	movs	r2, #1
 8014364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	2201      	movs	r2, #1
 801436c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	2201      	movs	r2, #1
 8014374:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	2201      	movs	r2, #1
 801437c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8014380:	2300      	movs	r3, #0
}
 8014382:	4618      	mov	r0, r3
 8014384:	3708      	adds	r7, #8
 8014386:	46bd      	mov	sp, r7
 8014388:	bd80      	pop	{r7, pc}

0801438a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 801438a:	b480      	push	{r7}
 801438c:	b083      	sub	sp, #12
 801438e:	af00      	add	r7, sp, #0
 8014390:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8014392:	bf00      	nop
 8014394:	370c      	adds	r7, #12
 8014396:	46bd      	mov	sp, r7
 8014398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801439c:	4770      	bx	lr

0801439e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801439e:	b580      	push	{r7, lr}
 80143a0:	b084      	sub	sp, #16
 80143a2:	af00      	add	r7, sp, #0
 80143a4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	681b      	ldr	r3, [r3, #0]
 80143aa:	68db      	ldr	r3, [r3, #12]
 80143ac:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	691b      	ldr	r3, [r3, #16]
 80143b4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80143b6:	68bb      	ldr	r3, [r7, #8]
 80143b8:	f003 0302 	and.w	r3, r3, #2
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d020      	beq.n	8014402 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80143c0:	68fb      	ldr	r3, [r7, #12]
 80143c2:	f003 0302 	and.w	r3, r3, #2
 80143c6:	2b00      	cmp	r3, #0
 80143c8:	d01b      	beq.n	8014402 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	f06f 0202 	mvn.w	r2, #2
 80143d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2201      	movs	r2, #1
 80143d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	699b      	ldr	r3, [r3, #24]
 80143e0:	f003 0303 	and.w	r3, r3, #3
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d003      	beq.n	80143f0 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80143e8:	6878      	ldr	r0, [r7, #4]
 80143ea:	f000 faeb 	bl	80149c4 <HAL_TIM_IC_CaptureCallback>
 80143ee:	e005      	b.n	80143fc <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80143f0:	6878      	ldr	r0, [r7, #4]
 80143f2:	f7ee fdff 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80143f6:	6878      	ldr	r0, [r7, #4]
 80143f8:	f000 faee 	bl	80149d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	2200      	movs	r2, #0
 8014400:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8014402:	68bb      	ldr	r3, [r7, #8]
 8014404:	f003 0304 	and.w	r3, r3, #4
 8014408:	2b00      	cmp	r3, #0
 801440a:	d020      	beq.n	801444e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801440c:	68fb      	ldr	r3, [r7, #12]
 801440e:	f003 0304 	and.w	r3, r3, #4
 8014412:	2b00      	cmp	r3, #0
 8014414:	d01b      	beq.n	801444e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	f06f 0204 	mvn.w	r2, #4
 801441e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	2202      	movs	r2, #2
 8014424:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	681b      	ldr	r3, [r3, #0]
 801442a:	699b      	ldr	r3, [r3, #24]
 801442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8014430:	2b00      	cmp	r3, #0
 8014432:	d003      	beq.n	801443c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014434:	6878      	ldr	r0, [r7, #4]
 8014436:	f000 fac5 	bl	80149c4 <HAL_TIM_IC_CaptureCallback>
 801443a:	e005      	b.n	8014448 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801443c:	6878      	ldr	r0, [r7, #4]
 801443e:	f7ee fdd9 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f000 fac8 	bl	80149d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	2200      	movs	r2, #0
 801444c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	f003 0308 	and.w	r3, r3, #8
 8014454:	2b00      	cmp	r3, #0
 8014456:	d020      	beq.n	801449a <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8014458:	68fb      	ldr	r3, [r7, #12]
 801445a:	f003 0308 	and.w	r3, r3, #8
 801445e:	2b00      	cmp	r3, #0
 8014460:	d01b      	beq.n	801449a <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	681b      	ldr	r3, [r3, #0]
 8014466:	f06f 0208 	mvn.w	r2, #8
 801446a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	2204      	movs	r2, #4
 8014470:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	681b      	ldr	r3, [r3, #0]
 8014476:	69db      	ldr	r3, [r3, #28]
 8014478:	f003 0303 	and.w	r3, r3, #3
 801447c:	2b00      	cmp	r3, #0
 801447e:	d003      	beq.n	8014488 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014480:	6878      	ldr	r0, [r7, #4]
 8014482:	f000 fa9f 	bl	80149c4 <HAL_TIM_IC_CaptureCallback>
 8014486:	e005      	b.n	8014494 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014488:	6878      	ldr	r0, [r7, #4]
 801448a:	f7ee fdb3 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f000 faa2 	bl	80149d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014494:	687b      	ldr	r3, [r7, #4]
 8014496:	2200      	movs	r2, #0
 8014498:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 801449a:	68bb      	ldr	r3, [r7, #8]
 801449c:	f003 0310 	and.w	r3, r3, #16
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d020      	beq.n	80144e6 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80144a4:	68fb      	ldr	r3, [r7, #12]
 80144a6:	f003 0310 	and.w	r3, r3, #16
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	d01b      	beq.n	80144e6 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	681b      	ldr	r3, [r3, #0]
 80144b2:	f06f 0210 	mvn.w	r2, #16
 80144b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	2208      	movs	r2, #8
 80144bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	681b      	ldr	r3, [r3, #0]
 80144c2:	69db      	ldr	r3, [r3, #28]
 80144c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80144c8:	2b00      	cmp	r3, #0
 80144ca:	d003      	beq.n	80144d4 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80144cc:	6878      	ldr	r0, [r7, #4]
 80144ce:	f000 fa79 	bl	80149c4 <HAL_TIM_IC_CaptureCallback>
 80144d2:	e005      	b.n	80144e0 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80144d4:	6878      	ldr	r0, [r7, #4]
 80144d6:	f7ee fd8d 	bl	8002ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80144da:	6878      	ldr	r0, [r7, #4]
 80144dc:	f000 fa7c 	bl	80149d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	2200      	movs	r2, #0
 80144e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80144e6:	68bb      	ldr	r3, [r7, #8]
 80144e8:	f003 0301 	and.w	r3, r3, #1
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d00c      	beq.n	801450a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	f003 0301 	and.w	r3, r3, #1
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d007      	beq.n	801450a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	f06f 0201 	mvn.w	r2, #1
 8014502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f7ef fc45 	bl	8003d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801450a:	68bb      	ldr	r3, [r7, #8]
 801450c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014510:	2b00      	cmp	r3, #0
 8014512:	d104      	bne.n	801451e <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8014514:	68bb      	ldr	r3, [r7, #8]
 8014516:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 801451a:	2b00      	cmp	r3, #0
 801451c:	d00c      	beq.n	8014538 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014524:	2b00      	cmp	r3, #0
 8014526:	d007      	beq.n	8014538 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	681b      	ldr	r3, [r3, #0]
 801452c:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8014530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014532:	6878      	ldr	r0, [r7, #4]
 8014534:	f000 ffba 	bl	80154ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00c      	beq.n	801455c <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8014542:	68fb      	ldr	r3, [r7, #12]
 8014544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014548:	2b00      	cmp	r3, #0
 801454a:	d007      	beq.n	801455c <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	681b      	ldr	r3, [r3, #0]
 8014550:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8014554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8014556:	6878      	ldr	r0, [r7, #4]
 8014558:	f000 ffb2 	bl	80154c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801455c:	68bb      	ldr	r3, [r7, #8]
 801455e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014562:	2b00      	cmp	r3, #0
 8014564:	d00c      	beq.n	8014580 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8014566:	68fb      	ldr	r3, [r7, #12]
 8014568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801456c:	2b00      	cmp	r3, #0
 801456e:	d007      	beq.n	8014580 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	681b      	ldr	r3, [r3, #0]
 8014574:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8014578:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801457a:	6878      	ldr	r0, [r7, #4]
 801457c:	f000 fa36 	bl	80149ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8014580:	68bb      	ldr	r3, [r7, #8]
 8014582:	f003 0320 	and.w	r3, r3, #32
 8014586:	2b00      	cmp	r3, #0
 8014588:	d00c      	beq.n	80145a4 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 801458a:	68fb      	ldr	r3, [r7, #12]
 801458c:	f003 0320 	and.w	r3, r3, #32
 8014590:	2b00      	cmp	r3, #0
 8014592:	d007      	beq.n	80145a4 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f06f 0220 	mvn.w	r2, #32
 801459c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 801459e:	6878      	ldr	r0, [r7, #4]
 80145a0:	f000 ff7a 	bl	8015498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80145a4:	bf00      	nop
 80145a6:	3710      	adds	r7, #16
 80145a8:	46bd      	mov	sp, r7
 80145aa:	bd80      	pop	{r7, pc}

080145ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b086      	sub	sp, #24
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	60f8      	str	r0, [r7, #12]
 80145b4:	60b9      	str	r1, [r7, #8]
 80145b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80145b8:	2300      	movs	r3, #0
 80145ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80145c2:	2b01      	cmp	r3, #1
 80145c4:	d101      	bne.n	80145ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80145c6:	2302      	movs	r3, #2
 80145c8:	e0ff      	b.n	80147ca <HAL_TIM_PWM_ConfigChannel+0x21e>
 80145ca:	68fb      	ldr	r3, [r7, #12]
 80145cc:	2201      	movs	r2, #1
 80145ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	2b14      	cmp	r3, #20
 80145d6:	f200 80f0 	bhi.w	80147ba <HAL_TIM_PWM_ConfigChannel+0x20e>
 80145da:	a201      	add	r2, pc, #4	; (adr r2, 80145e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80145dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145e0:	08014635 	.word	0x08014635
 80145e4:	080147bb 	.word	0x080147bb
 80145e8:	080147bb 	.word	0x080147bb
 80145ec:	080147bb 	.word	0x080147bb
 80145f0:	08014675 	.word	0x08014675
 80145f4:	080147bb 	.word	0x080147bb
 80145f8:	080147bb 	.word	0x080147bb
 80145fc:	080147bb 	.word	0x080147bb
 8014600:	080146b7 	.word	0x080146b7
 8014604:	080147bb 	.word	0x080147bb
 8014608:	080147bb 	.word	0x080147bb
 801460c:	080147bb 	.word	0x080147bb
 8014610:	080146f7 	.word	0x080146f7
 8014614:	080147bb 	.word	0x080147bb
 8014618:	080147bb 	.word	0x080147bb
 801461c:	080147bb 	.word	0x080147bb
 8014620:	08014739 	.word	0x08014739
 8014624:	080147bb 	.word	0x080147bb
 8014628:	080147bb 	.word	0x080147bb
 801462c:	080147bb 	.word	0x080147bb
 8014630:	08014779 	.word	0x08014779
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8014634:	68fb      	ldr	r3, [r7, #12]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	68b9      	ldr	r1, [r7, #8]
 801463a:	4618      	mov	r0, r3
 801463c:	f000 fa86 	bl	8014b4c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8014640:	68fb      	ldr	r3, [r7, #12]
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	699a      	ldr	r2, [r3, #24]
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	f042 0208 	orr.w	r2, r2, #8
 801464e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8014650:	68fb      	ldr	r3, [r7, #12]
 8014652:	681b      	ldr	r3, [r3, #0]
 8014654:	699a      	ldr	r2, [r3, #24]
 8014656:	68fb      	ldr	r3, [r7, #12]
 8014658:	681b      	ldr	r3, [r3, #0]
 801465a:	f022 0204 	bic.w	r2, r2, #4
 801465e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8014660:	68fb      	ldr	r3, [r7, #12]
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	6999      	ldr	r1, [r3, #24]
 8014666:	68bb      	ldr	r3, [r7, #8]
 8014668:	691a      	ldr	r2, [r3, #16]
 801466a:	68fb      	ldr	r3, [r7, #12]
 801466c:	681b      	ldr	r3, [r3, #0]
 801466e:	430a      	orrs	r2, r1
 8014670:	619a      	str	r2, [r3, #24]
      break;
 8014672:	e0a5      	b.n	80147c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8014674:	68fb      	ldr	r3, [r7, #12]
 8014676:	681b      	ldr	r3, [r3, #0]
 8014678:	68b9      	ldr	r1, [r7, #8]
 801467a:	4618      	mov	r0, r3
 801467c:	f000 faf6 	bl	8014c6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	699a      	ldr	r2, [r3, #24]
 8014686:	68fb      	ldr	r3, [r7, #12]
 8014688:	681b      	ldr	r3, [r3, #0]
 801468a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 801468e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8014690:	68fb      	ldr	r3, [r7, #12]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	699a      	ldr	r2, [r3, #24]
 8014696:	68fb      	ldr	r3, [r7, #12]
 8014698:	681b      	ldr	r3, [r3, #0]
 801469a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 801469e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80146a0:	68fb      	ldr	r3, [r7, #12]
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	6999      	ldr	r1, [r3, #24]
 80146a6:	68bb      	ldr	r3, [r7, #8]
 80146a8:	691b      	ldr	r3, [r3, #16]
 80146aa:	021a      	lsls	r2, r3, #8
 80146ac:	68fb      	ldr	r3, [r7, #12]
 80146ae:	681b      	ldr	r3, [r3, #0]
 80146b0:	430a      	orrs	r2, r1
 80146b2:	619a      	str	r2, [r3, #24]
      break;
 80146b4:	e084      	b.n	80147c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80146b6:	68fb      	ldr	r3, [r7, #12]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	68b9      	ldr	r1, [r7, #8]
 80146bc:	4618      	mov	r0, r3
 80146be:	f000 fb5f 	bl	8014d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80146c2:	68fb      	ldr	r3, [r7, #12]
 80146c4:	681b      	ldr	r3, [r3, #0]
 80146c6:	69da      	ldr	r2, [r3, #28]
 80146c8:	68fb      	ldr	r3, [r7, #12]
 80146ca:	681b      	ldr	r3, [r3, #0]
 80146cc:	f042 0208 	orr.w	r2, r2, #8
 80146d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	681b      	ldr	r3, [r3, #0]
 80146d6:	69da      	ldr	r2, [r3, #28]
 80146d8:	68fb      	ldr	r3, [r7, #12]
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	f022 0204 	bic.w	r2, r2, #4
 80146e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80146e2:	68fb      	ldr	r3, [r7, #12]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	69d9      	ldr	r1, [r3, #28]
 80146e8:	68bb      	ldr	r3, [r7, #8]
 80146ea:	691a      	ldr	r2, [r3, #16]
 80146ec:	68fb      	ldr	r3, [r7, #12]
 80146ee:	681b      	ldr	r3, [r3, #0]
 80146f0:	430a      	orrs	r2, r1
 80146f2:	61da      	str	r2, [r3, #28]
      break;
 80146f4:	e064      	b.n	80147c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	68b9      	ldr	r1, [r7, #8]
 80146fc:	4618      	mov	r0, r3
 80146fe:	f000 fbc7 	bl	8014e90 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8014702:	68fb      	ldr	r3, [r7, #12]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	69da      	ldr	r2, [r3, #28]
 8014708:	68fb      	ldr	r3, [r7, #12]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014710:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8014712:	68fb      	ldr	r3, [r7, #12]
 8014714:	681b      	ldr	r3, [r3, #0]
 8014716:	69da      	ldr	r2, [r3, #28]
 8014718:	68fb      	ldr	r3, [r7, #12]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8014720:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	681b      	ldr	r3, [r3, #0]
 8014726:	69d9      	ldr	r1, [r3, #28]
 8014728:	68bb      	ldr	r3, [r7, #8]
 801472a:	691b      	ldr	r3, [r3, #16]
 801472c:	021a      	lsls	r2, r3, #8
 801472e:	68fb      	ldr	r3, [r7, #12]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	430a      	orrs	r2, r1
 8014734:	61da      	str	r2, [r3, #28]
      break;
 8014736:	e043      	b.n	80147c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8014738:	68fb      	ldr	r3, [r7, #12]
 801473a:	681b      	ldr	r3, [r3, #0]
 801473c:	68b9      	ldr	r1, [r7, #8]
 801473e:	4618      	mov	r0, r3
 8014740:	f000 fc10 	bl	8014f64 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8014744:	68fb      	ldr	r3, [r7, #12]
 8014746:	681b      	ldr	r3, [r3, #0]
 8014748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801474a:	68fb      	ldr	r3, [r7, #12]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	f042 0208 	orr.w	r2, r2, #8
 8014752:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8014754:	68fb      	ldr	r3, [r7, #12]
 8014756:	681b      	ldr	r3, [r3, #0]
 8014758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801475a:	68fb      	ldr	r3, [r7, #12]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	f022 0204 	bic.w	r2, r2, #4
 8014762:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8014764:	68fb      	ldr	r3, [r7, #12]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	6d59      	ldr	r1, [r3, #84]	; 0x54
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	691a      	ldr	r2, [r3, #16]
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	681b      	ldr	r3, [r3, #0]
 8014772:	430a      	orrs	r2, r1
 8014774:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8014776:	e023      	b.n	80147c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8014778:	68fb      	ldr	r3, [r7, #12]
 801477a:	681b      	ldr	r3, [r3, #0]
 801477c:	68b9      	ldr	r1, [r7, #8]
 801477e:	4618      	mov	r0, r3
 8014780:	f000 fc54 	bl	801502c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8014784:	68fb      	ldr	r3, [r7, #12]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801478a:	68fb      	ldr	r3, [r7, #12]
 801478c:	681b      	ldr	r3, [r3, #0]
 801478e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8014792:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	681b      	ldr	r3, [r3, #0]
 8014798:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	681b      	ldr	r3, [r3, #0]
 801479e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80147a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80147a4:	68fb      	ldr	r3, [r7, #12]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80147aa:	68bb      	ldr	r3, [r7, #8]
 80147ac:	691b      	ldr	r3, [r3, #16]
 80147ae:	021a      	lsls	r2, r3, #8
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	681b      	ldr	r3, [r3, #0]
 80147b4:	430a      	orrs	r2, r1
 80147b6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80147b8:	e002      	b.n	80147c0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80147ba:	2301      	movs	r3, #1
 80147bc:	75fb      	strb	r3, [r7, #23]
      break;
 80147be:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	2200      	movs	r2, #0
 80147c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80147c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	3718      	adds	r7, #24
 80147ce:	46bd      	mov	sp, r7
 80147d0:	bd80      	pop	{r7, pc}
 80147d2:	bf00      	nop

080147d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80147de:	2300      	movs	r3, #0
 80147e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80147e2:	687b      	ldr	r3, [r7, #4]
 80147e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80147e8:	2b01      	cmp	r3, #1
 80147ea:	d101      	bne.n	80147f0 <HAL_TIM_ConfigClockSource+0x1c>
 80147ec:	2302      	movs	r3, #2
 80147ee:	e0dc      	b.n	80149aa <HAL_TIM_ConfigClockSource+0x1d6>
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	2201      	movs	r2, #1
 80147f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	2202      	movs	r2, #2
 80147fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	689b      	ldr	r3, [r3, #8]
 8014806:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8014808:	68ba      	ldr	r2, [r7, #8]
 801480a:	4b6a      	ldr	r3, [pc, #424]	; (80149b4 <HAL_TIM_ConfigClockSource+0x1e0>)
 801480c:	4013      	ands	r3, r2
 801480e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8014816:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	68ba      	ldr	r2, [r7, #8]
 801481e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8014820:	683b      	ldr	r3, [r7, #0]
 8014822:	681b      	ldr	r3, [r3, #0]
 8014824:	4a64      	ldr	r2, [pc, #400]	; (80149b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8014826:	4293      	cmp	r3, r2
 8014828:	f000 80a9 	beq.w	801497e <HAL_TIM_ConfigClockSource+0x1aa>
 801482c:	4a62      	ldr	r2, [pc, #392]	; (80149b8 <HAL_TIM_ConfigClockSource+0x1e4>)
 801482e:	4293      	cmp	r3, r2
 8014830:	f200 80ae 	bhi.w	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 8014834:	4a61      	ldr	r2, [pc, #388]	; (80149bc <HAL_TIM_ConfigClockSource+0x1e8>)
 8014836:	4293      	cmp	r3, r2
 8014838:	f000 80a1 	beq.w	801497e <HAL_TIM_ConfigClockSource+0x1aa>
 801483c:	4a5f      	ldr	r2, [pc, #380]	; (80149bc <HAL_TIM_ConfigClockSource+0x1e8>)
 801483e:	4293      	cmp	r3, r2
 8014840:	f200 80a6 	bhi.w	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 8014844:	4a5e      	ldr	r2, [pc, #376]	; (80149c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 8014846:	4293      	cmp	r3, r2
 8014848:	f000 8099 	beq.w	801497e <HAL_TIM_ConfigClockSource+0x1aa>
 801484c:	4a5c      	ldr	r2, [pc, #368]	; (80149c0 <HAL_TIM_ConfigClockSource+0x1ec>)
 801484e:	4293      	cmp	r3, r2
 8014850:	f200 809e 	bhi.w	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 8014854:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8014858:	f000 8091 	beq.w	801497e <HAL_TIM_ConfigClockSource+0x1aa>
 801485c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8014860:	f200 8096 	bhi.w	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 8014864:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014868:	f000 8089 	beq.w	801497e <HAL_TIM_ConfigClockSource+0x1aa>
 801486c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8014870:	f200 808e 	bhi.w	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 8014874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8014878:	d03e      	beq.n	80148f8 <HAL_TIM_ConfigClockSource+0x124>
 801487a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801487e:	f200 8087 	bhi.w	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 8014882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014886:	f000 8086 	beq.w	8014996 <HAL_TIM_ConfigClockSource+0x1c2>
 801488a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801488e:	d87f      	bhi.n	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 8014890:	2b70      	cmp	r3, #112	; 0x70
 8014892:	d01a      	beq.n	80148ca <HAL_TIM_ConfigClockSource+0xf6>
 8014894:	2b70      	cmp	r3, #112	; 0x70
 8014896:	d87b      	bhi.n	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 8014898:	2b60      	cmp	r3, #96	; 0x60
 801489a:	d050      	beq.n	801493e <HAL_TIM_ConfigClockSource+0x16a>
 801489c:	2b60      	cmp	r3, #96	; 0x60
 801489e:	d877      	bhi.n	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 80148a0:	2b50      	cmp	r3, #80	; 0x50
 80148a2:	d03c      	beq.n	801491e <HAL_TIM_ConfigClockSource+0x14a>
 80148a4:	2b50      	cmp	r3, #80	; 0x50
 80148a6:	d873      	bhi.n	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 80148a8:	2b40      	cmp	r3, #64	; 0x40
 80148aa:	d058      	beq.n	801495e <HAL_TIM_ConfigClockSource+0x18a>
 80148ac:	2b40      	cmp	r3, #64	; 0x40
 80148ae:	d86f      	bhi.n	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 80148b0:	2b30      	cmp	r3, #48	; 0x30
 80148b2:	d064      	beq.n	801497e <HAL_TIM_ConfigClockSource+0x1aa>
 80148b4:	2b30      	cmp	r3, #48	; 0x30
 80148b6:	d86b      	bhi.n	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 80148b8:	2b20      	cmp	r3, #32
 80148ba:	d060      	beq.n	801497e <HAL_TIM_ConfigClockSource+0x1aa>
 80148bc:	2b20      	cmp	r3, #32
 80148be:	d867      	bhi.n	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d05c      	beq.n	801497e <HAL_TIM_ConfigClockSource+0x1aa>
 80148c4:	2b10      	cmp	r3, #16
 80148c6:	d05a      	beq.n	801497e <HAL_TIM_ConfigClockSource+0x1aa>
 80148c8:	e062      	b.n	8014990 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	6818      	ldr	r0, [r3, #0]
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	6899      	ldr	r1, [r3, #8]
 80148d2:	683b      	ldr	r3, [r7, #0]
 80148d4:	685a      	ldr	r2, [r3, #4]
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	68db      	ldr	r3, [r3, #12]
 80148da:	f000 fc8b 	bl	80151f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	689b      	ldr	r3, [r3, #8]
 80148e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80148e6:	68bb      	ldr	r3, [r7, #8]
 80148e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80148ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	68ba      	ldr	r2, [r7, #8]
 80148f4:	609a      	str	r2, [r3, #8]
      break;
 80148f6:	e04f      	b.n	8014998 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	6818      	ldr	r0, [r3, #0]
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	6899      	ldr	r1, [r3, #8]
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	685a      	ldr	r2, [r3, #4]
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	68db      	ldr	r3, [r3, #12]
 8014908:	f000 fc74 	bl	80151f4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	689a      	ldr	r2, [r3, #8]
 8014912:	687b      	ldr	r3, [r7, #4]
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801491a:	609a      	str	r2, [r3, #8]
      break;
 801491c:	e03c      	b.n	8014998 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801491e:	687b      	ldr	r3, [r7, #4]
 8014920:	6818      	ldr	r0, [r3, #0]
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	6859      	ldr	r1, [r3, #4]
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	68db      	ldr	r3, [r3, #12]
 801492a:	461a      	mov	r2, r3
 801492c:	f000 fbe4 	bl	80150f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	2150      	movs	r1, #80	; 0x50
 8014936:	4618      	mov	r0, r3
 8014938:	f000 fc3e 	bl	80151b8 <TIM_ITRx_SetConfig>
      break;
 801493c:	e02c      	b.n	8014998 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	6818      	ldr	r0, [r3, #0]
 8014942:	683b      	ldr	r3, [r7, #0]
 8014944:	6859      	ldr	r1, [r3, #4]
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	68db      	ldr	r3, [r3, #12]
 801494a:	461a      	mov	r2, r3
 801494c:	f000 fc03 	bl	8015156 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	2160      	movs	r1, #96	; 0x60
 8014956:	4618      	mov	r0, r3
 8014958:	f000 fc2e 	bl	80151b8 <TIM_ITRx_SetConfig>
      break;
 801495c:	e01c      	b.n	8014998 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	6818      	ldr	r0, [r3, #0]
 8014962:	683b      	ldr	r3, [r7, #0]
 8014964:	6859      	ldr	r1, [r3, #4]
 8014966:	683b      	ldr	r3, [r7, #0]
 8014968:	68db      	ldr	r3, [r3, #12]
 801496a:	461a      	mov	r2, r3
 801496c:	f000 fbc4 	bl	80150f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8014970:	687b      	ldr	r3, [r7, #4]
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	2140      	movs	r1, #64	; 0x40
 8014976:	4618      	mov	r0, r3
 8014978:	f000 fc1e 	bl	80151b8 <TIM_ITRx_SetConfig>
      break;
 801497c:	e00c      	b.n	8014998 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	681a      	ldr	r2, [r3, #0]
 8014982:	683b      	ldr	r3, [r7, #0]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	4619      	mov	r1, r3
 8014988:	4610      	mov	r0, r2
 801498a:	f000 fc15 	bl	80151b8 <TIM_ITRx_SetConfig>
      break;
 801498e:	e003      	b.n	8014998 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8014990:	2301      	movs	r3, #1
 8014992:	73fb      	strb	r3, [r7, #15]
      break;
 8014994:	e000      	b.n	8014998 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8014996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	2201      	movs	r2, #1
 801499c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80149a0:	687b      	ldr	r3, [r7, #4]
 80149a2:	2200      	movs	r2, #0
 80149a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80149a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80149aa:	4618      	mov	r0, r3
 80149ac:	3710      	adds	r7, #16
 80149ae:	46bd      	mov	sp, r7
 80149b0:	bd80      	pop	{r7, pc}
 80149b2:	bf00      	nop
 80149b4:	ffceff88 	.word	0xffceff88
 80149b8:	00100040 	.word	0x00100040
 80149bc:	00100030 	.word	0x00100030
 80149c0:	00100020 	.word	0x00100020

080149c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80149c4:	b480      	push	{r7}
 80149c6:	b083      	sub	sp, #12
 80149c8:	af00      	add	r7, sp, #0
 80149ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80149cc:	bf00      	nop
 80149ce:	370c      	adds	r7, #12
 80149d0:	46bd      	mov	sp, r7
 80149d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149d6:	4770      	bx	lr

080149d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80149d8:	b480      	push	{r7}
 80149da:	b083      	sub	sp, #12
 80149dc:	af00      	add	r7, sp, #0
 80149de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80149e0:	bf00      	nop
 80149e2:	370c      	adds	r7, #12
 80149e4:	46bd      	mov	sp, r7
 80149e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ea:	4770      	bx	lr

080149ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80149ec:	b480      	push	{r7}
 80149ee:	b083      	sub	sp, #12
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80149f4:	bf00      	nop
 80149f6:	370c      	adds	r7, #12
 80149f8:	46bd      	mov	sp, r7
 80149fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fe:	4770      	bx	lr

08014a00 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014a00:	b480      	push	{r7}
 8014a02:	b085      	sub	sp, #20
 8014a04:	af00      	add	r7, sp, #0
 8014a06:	6078      	str	r0, [r7, #4]
 8014a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014a0a:	687b      	ldr	r3, [r7, #4]
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	4a46      	ldr	r2, [pc, #280]	; (8014b2c <TIM_Base_SetConfig+0x12c>)
 8014a14:	4293      	cmp	r3, r2
 8014a16:	d013      	beq.n	8014a40 <TIM_Base_SetConfig+0x40>
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a1e:	d00f      	beq.n	8014a40 <TIM_Base_SetConfig+0x40>
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	4a43      	ldr	r2, [pc, #268]	; (8014b30 <TIM_Base_SetConfig+0x130>)
 8014a24:	4293      	cmp	r3, r2
 8014a26:	d00b      	beq.n	8014a40 <TIM_Base_SetConfig+0x40>
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	4a42      	ldr	r2, [pc, #264]	; (8014b34 <TIM_Base_SetConfig+0x134>)
 8014a2c:	4293      	cmp	r3, r2
 8014a2e:	d007      	beq.n	8014a40 <TIM_Base_SetConfig+0x40>
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	4a41      	ldr	r2, [pc, #260]	; (8014b38 <TIM_Base_SetConfig+0x138>)
 8014a34:	4293      	cmp	r3, r2
 8014a36:	d003      	beq.n	8014a40 <TIM_Base_SetConfig+0x40>
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	4a40      	ldr	r2, [pc, #256]	; (8014b3c <TIM_Base_SetConfig+0x13c>)
 8014a3c:	4293      	cmp	r3, r2
 8014a3e:	d108      	bne.n	8014a52 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8014a46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014a48:	683b      	ldr	r3, [r7, #0]
 8014a4a:	685b      	ldr	r3, [r3, #4]
 8014a4c:	68fa      	ldr	r2, [r7, #12]
 8014a4e:	4313      	orrs	r3, r2
 8014a50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	4a35      	ldr	r2, [pc, #212]	; (8014b2c <TIM_Base_SetConfig+0x12c>)
 8014a56:	4293      	cmp	r3, r2
 8014a58:	d01f      	beq.n	8014a9a <TIM_Base_SetConfig+0x9a>
 8014a5a:	687b      	ldr	r3, [r7, #4]
 8014a5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8014a60:	d01b      	beq.n	8014a9a <TIM_Base_SetConfig+0x9a>
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	4a32      	ldr	r2, [pc, #200]	; (8014b30 <TIM_Base_SetConfig+0x130>)
 8014a66:	4293      	cmp	r3, r2
 8014a68:	d017      	beq.n	8014a9a <TIM_Base_SetConfig+0x9a>
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	4a31      	ldr	r2, [pc, #196]	; (8014b34 <TIM_Base_SetConfig+0x134>)
 8014a6e:	4293      	cmp	r3, r2
 8014a70:	d013      	beq.n	8014a9a <TIM_Base_SetConfig+0x9a>
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	4a30      	ldr	r2, [pc, #192]	; (8014b38 <TIM_Base_SetConfig+0x138>)
 8014a76:	4293      	cmp	r3, r2
 8014a78:	d00f      	beq.n	8014a9a <TIM_Base_SetConfig+0x9a>
 8014a7a:	687b      	ldr	r3, [r7, #4]
 8014a7c:	4a2f      	ldr	r2, [pc, #188]	; (8014b3c <TIM_Base_SetConfig+0x13c>)
 8014a7e:	4293      	cmp	r3, r2
 8014a80:	d00b      	beq.n	8014a9a <TIM_Base_SetConfig+0x9a>
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	4a2e      	ldr	r2, [pc, #184]	; (8014b40 <TIM_Base_SetConfig+0x140>)
 8014a86:	4293      	cmp	r3, r2
 8014a88:	d007      	beq.n	8014a9a <TIM_Base_SetConfig+0x9a>
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	4a2d      	ldr	r2, [pc, #180]	; (8014b44 <TIM_Base_SetConfig+0x144>)
 8014a8e:	4293      	cmp	r3, r2
 8014a90:	d003      	beq.n	8014a9a <TIM_Base_SetConfig+0x9a>
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	4a2c      	ldr	r2, [pc, #176]	; (8014b48 <TIM_Base_SetConfig+0x148>)
 8014a96:	4293      	cmp	r3, r2
 8014a98:	d108      	bne.n	8014aac <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014a9a:	68fb      	ldr	r3, [r7, #12]
 8014a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014aa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014aa2:	683b      	ldr	r3, [r7, #0]
 8014aa4:	68db      	ldr	r3, [r3, #12]
 8014aa6:	68fa      	ldr	r2, [r7, #12]
 8014aa8:	4313      	orrs	r3, r2
 8014aaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014aac:	68fb      	ldr	r3, [r7, #12]
 8014aae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8014ab2:	683b      	ldr	r3, [r7, #0]
 8014ab4:	695b      	ldr	r3, [r3, #20]
 8014ab6:	4313      	orrs	r3, r2
 8014ab8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	68fa      	ldr	r2, [r7, #12]
 8014abe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014ac0:	683b      	ldr	r3, [r7, #0]
 8014ac2:	689a      	ldr	r2, [r3, #8]
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014ac8:	683b      	ldr	r3, [r7, #0]
 8014aca:	681a      	ldr	r2, [r3, #0]
 8014acc:	687b      	ldr	r3, [r7, #4]
 8014ace:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	4a16      	ldr	r2, [pc, #88]	; (8014b2c <TIM_Base_SetConfig+0x12c>)
 8014ad4:	4293      	cmp	r3, r2
 8014ad6:	d00f      	beq.n	8014af8 <TIM_Base_SetConfig+0xf8>
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	4a18      	ldr	r2, [pc, #96]	; (8014b3c <TIM_Base_SetConfig+0x13c>)
 8014adc:	4293      	cmp	r3, r2
 8014ade:	d00b      	beq.n	8014af8 <TIM_Base_SetConfig+0xf8>
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	4a17      	ldr	r2, [pc, #92]	; (8014b40 <TIM_Base_SetConfig+0x140>)
 8014ae4:	4293      	cmp	r3, r2
 8014ae6:	d007      	beq.n	8014af8 <TIM_Base_SetConfig+0xf8>
 8014ae8:	687b      	ldr	r3, [r7, #4]
 8014aea:	4a16      	ldr	r2, [pc, #88]	; (8014b44 <TIM_Base_SetConfig+0x144>)
 8014aec:	4293      	cmp	r3, r2
 8014aee:	d003      	beq.n	8014af8 <TIM_Base_SetConfig+0xf8>
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	4a15      	ldr	r2, [pc, #84]	; (8014b48 <TIM_Base_SetConfig+0x148>)
 8014af4:	4293      	cmp	r3, r2
 8014af6:	d103      	bne.n	8014b00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014af8:	683b      	ldr	r3, [r7, #0]
 8014afa:	691a      	ldr	r2, [r3, #16]
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	2201      	movs	r2, #1
 8014b04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	691b      	ldr	r3, [r3, #16]
 8014b0a:	f003 0301 	and.w	r3, r3, #1
 8014b0e:	2b01      	cmp	r3, #1
 8014b10:	d105      	bne.n	8014b1e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8014b12:	687b      	ldr	r3, [r7, #4]
 8014b14:	691b      	ldr	r3, [r3, #16]
 8014b16:	f023 0201 	bic.w	r2, r3, #1
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	611a      	str	r2, [r3, #16]
  }
}
 8014b1e:	bf00      	nop
 8014b20:	3714      	adds	r7, #20
 8014b22:	46bd      	mov	sp, r7
 8014b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	40010000 	.word	0x40010000
 8014b30:	40000400 	.word	0x40000400
 8014b34:	40000800 	.word	0x40000800
 8014b38:	40000c00 	.word	0x40000c00
 8014b3c:	40010400 	.word	0x40010400
 8014b40:	40014000 	.word	0x40014000
 8014b44:	40014400 	.word	0x40014400
 8014b48:	40014800 	.word	0x40014800

08014b4c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014b4c:	b480      	push	{r7}
 8014b4e:	b087      	sub	sp, #28
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	6a1b      	ldr	r3, [r3, #32]
 8014b5a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	6a1b      	ldr	r3, [r3, #32]
 8014b60:	f023 0201 	bic.w	r2, r3, #1
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	685b      	ldr	r3, [r3, #4]
 8014b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	699b      	ldr	r3, [r3, #24]
 8014b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8014b74:	68fa      	ldr	r2, [r7, #12]
 8014b76:	4b37      	ldr	r3, [pc, #220]	; (8014c54 <TIM_OC1_SetConfig+0x108>)
 8014b78:	4013      	ands	r3, r2
 8014b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8014b7c:	68fb      	ldr	r3, [r7, #12]
 8014b7e:	f023 0303 	bic.w	r3, r3, #3
 8014b82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014b84:	683b      	ldr	r3, [r7, #0]
 8014b86:	681b      	ldr	r3, [r3, #0]
 8014b88:	68fa      	ldr	r2, [r7, #12]
 8014b8a:	4313      	orrs	r3, r2
 8014b8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	f023 0302 	bic.w	r3, r3, #2
 8014b94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	689b      	ldr	r3, [r3, #8]
 8014b9a:	697a      	ldr	r2, [r7, #20]
 8014b9c:	4313      	orrs	r3, r2
 8014b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8014ba0:	687b      	ldr	r3, [r7, #4]
 8014ba2:	4a2d      	ldr	r2, [pc, #180]	; (8014c58 <TIM_OC1_SetConfig+0x10c>)
 8014ba4:	4293      	cmp	r3, r2
 8014ba6:	d00f      	beq.n	8014bc8 <TIM_OC1_SetConfig+0x7c>
 8014ba8:	687b      	ldr	r3, [r7, #4]
 8014baa:	4a2c      	ldr	r2, [pc, #176]	; (8014c5c <TIM_OC1_SetConfig+0x110>)
 8014bac:	4293      	cmp	r3, r2
 8014bae:	d00b      	beq.n	8014bc8 <TIM_OC1_SetConfig+0x7c>
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	4a2b      	ldr	r2, [pc, #172]	; (8014c60 <TIM_OC1_SetConfig+0x114>)
 8014bb4:	4293      	cmp	r3, r2
 8014bb6:	d007      	beq.n	8014bc8 <TIM_OC1_SetConfig+0x7c>
 8014bb8:	687b      	ldr	r3, [r7, #4]
 8014bba:	4a2a      	ldr	r2, [pc, #168]	; (8014c64 <TIM_OC1_SetConfig+0x118>)
 8014bbc:	4293      	cmp	r3, r2
 8014bbe:	d003      	beq.n	8014bc8 <TIM_OC1_SetConfig+0x7c>
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	4a29      	ldr	r2, [pc, #164]	; (8014c68 <TIM_OC1_SetConfig+0x11c>)
 8014bc4:	4293      	cmp	r3, r2
 8014bc6:	d10c      	bne.n	8014be2 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8014bc8:	697b      	ldr	r3, [r7, #20]
 8014bca:	f023 0308 	bic.w	r3, r3, #8
 8014bce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8014bd0:	683b      	ldr	r3, [r7, #0]
 8014bd2:	68db      	ldr	r3, [r3, #12]
 8014bd4:	697a      	ldr	r2, [r7, #20]
 8014bd6:	4313      	orrs	r3, r2
 8014bd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8014bda:	697b      	ldr	r3, [r7, #20]
 8014bdc:	f023 0304 	bic.w	r3, r3, #4
 8014be0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	4a1c      	ldr	r2, [pc, #112]	; (8014c58 <TIM_OC1_SetConfig+0x10c>)
 8014be6:	4293      	cmp	r3, r2
 8014be8:	d00f      	beq.n	8014c0a <TIM_OC1_SetConfig+0xbe>
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	4a1b      	ldr	r2, [pc, #108]	; (8014c5c <TIM_OC1_SetConfig+0x110>)
 8014bee:	4293      	cmp	r3, r2
 8014bf0:	d00b      	beq.n	8014c0a <TIM_OC1_SetConfig+0xbe>
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	4a1a      	ldr	r2, [pc, #104]	; (8014c60 <TIM_OC1_SetConfig+0x114>)
 8014bf6:	4293      	cmp	r3, r2
 8014bf8:	d007      	beq.n	8014c0a <TIM_OC1_SetConfig+0xbe>
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	4a19      	ldr	r2, [pc, #100]	; (8014c64 <TIM_OC1_SetConfig+0x118>)
 8014bfe:	4293      	cmp	r3, r2
 8014c00:	d003      	beq.n	8014c0a <TIM_OC1_SetConfig+0xbe>
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	4a18      	ldr	r2, [pc, #96]	; (8014c68 <TIM_OC1_SetConfig+0x11c>)
 8014c06:	4293      	cmp	r3, r2
 8014c08:	d111      	bne.n	8014c2e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8014c0a:	693b      	ldr	r3, [r7, #16]
 8014c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8014c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8014c12:	693b      	ldr	r3, [r7, #16]
 8014c14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	695b      	ldr	r3, [r3, #20]
 8014c1e:	693a      	ldr	r2, [r7, #16]
 8014c20:	4313      	orrs	r3, r2
 8014c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8014c24:	683b      	ldr	r3, [r7, #0]
 8014c26:	699b      	ldr	r3, [r3, #24]
 8014c28:	693a      	ldr	r2, [r7, #16]
 8014c2a:	4313      	orrs	r3, r2
 8014c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014c2e:	687b      	ldr	r3, [r7, #4]
 8014c30:	693a      	ldr	r2, [r7, #16]
 8014c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	68fa      	ldr	r2, [r7, #12]
 8014c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8014c3a:	683b      	ldr	r3, [r7, #0]
 8014c3c:	685a      	ldr	r2, [r3, #4]
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	697a      	ldr	r2, [r7, #20]
 8014c46:	621a      	str	r2, [r3, #32]
}
 8014c48:	bf00      	nop
 8014c4a:	371c      	adds	r7, #28
 8014c4c:	46bd      	mov	sp, r7
 8014c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c52:	4770      	bx	lr
 8014c54:	fffeff8f 	.word	0xfffeff8f
 8014c58:	40010000 	.word	0x40010000
 8014c5c:	40010400 	.word	0x40010400
 8014c60:	40014000 	.word	0x40014000
 8014c64:	40014400 	.word	0x40014400
 8014c68:	40014800 	.word	0x40014800

08014c6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014c6c:	b480      	push	{r7}
 8014c6e:	b087      	sub	sp, #28
 8014c70:	af00      	add	r7, sp, #0
 8014c72:	6078      	str	r0, [r7, #4]
 8014c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014c76:	687b      	ldr	r3, [r7, #4]
 8014c78:	6a1b      	ldr	r3, [r3, #32]
 8014c7a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	6a1b      	ldr	r3, [r3, #32]
 8014c80:	f023 0210 	bic.w	r2, r3, #16
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	685b      	ldr	r3, [r3, #4]
 8014c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	699b      	ldr	r3, [r3, #24]
 8014c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8014c94:	68fa      	ldr	r2, [r7, #12]
 8014c96:	4b34      	ldr	r3, [pc, #208]	; (8014d68 <TIM_OC2_SetConfig+0xfc>)
 8014c98:	4013      	ands	r3, r2
 8014c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8014c9c:	68fb      	ldr	r3, [r7, #12]
 8014c9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014ca2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014ca4:	683b      	ldr	r3, [r7, #0]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	021b      	lsls	r3, r3, #8
 8014caa:	68fa      	ldr	r2, [r7, #12]
 8014cac:	4313      	orrs	r3, r2
 8014cae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8014cb0:	697b      	ldr	r3, [r7, #20]
 8014cb2:	f023 0320 	bic.w	r3, r3, #32
 8014cb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8014cb8:	683b      	ldr	r3, [r7, #0]
 8014cba:	689b      	ldr	r3, [r3, #8]
 8014cbc:	011b      	lsls	r3, r3, #4
 8014cbe:	697a      	ldr	r2, [r7, #20]
 8014cc0:	4313      	orrs	r3, r2
 8014cc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	4a29      	ldr	r2, [pc, #164]	; (8014d6c <TIM_OC2_SetConfig+0x100>)
 8014cc8:	4293      	cmp	r3, r2
 8014cca:	d003      	beq.n	8014cd4 <TIM_OC2_SetConfig+0x68>
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	4a28      	ldr	r2, [pc, #160]	; (8014d70 <TIM_OC2_SetConfig+0x104>)
 8014cd0:	4293      	cmp	r3, r2
 8014cd2:	d10d      	bne.n	8014cf0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8014cd4:	697b      	ldr	r3, [r7, #20]
 8014cd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014cda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8014cdc:	683b      	ldr	r3, [r7, #0]
 8014cde:	68db      	ldr	r3, [r3, #12]
 8014ce0:	011b      	lsls	r3, r3, #4
 8014ce2:	697a      	ldr	r2, [r7, #20]
 8014ce4:	4313      	orrs	r3, r2
 8014ce6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8014ce8:	697b      	ldr	r3, [r7, #20]
 8014cea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014cee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	4a1e      	ldr	r2, [pc, #120]	; (8014d6c <TIM_OC2_SetConfig+0x100>)
 8014cf4:	4293      	cmp	r3, r2
 8014cf6:	d00f      	beq.n	8014d18 <TIM_OC2_SetConfig+0xac>
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	4a1d      	ldr	r2, [pc, #116]	; (8014d70 <TIM_OC2_SetConfig+0x104>)
 8014cfc:	4293      	cmp	r3, r2
 8014cfe:	d00b      	beq.n	8014d18 <TIM_OC2_SetConfig+0xac>
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	4a1c      	ldr	r2, [pc, #112]	; (8014d74 <TIM_OC2_SetConfig+0x108>)
 8014d04:	4293      	cmp	r3, r2
 8014d06:	d007      	beq.n	8014d18 <TIM_OC2_SetConfig+0xac>
 8014d08:	687b      	ldr	r3, [r7, #4]
 8014d0a:	4a1b      	ldr	r2, [pc, #108]	; (8014d78 <TIM_OC2_SetConfig+0x10c>)
 8014d0c:	4293      	cmp	r3, r2
 8014d0e:	d003      	beq.n	8014d18 <TIM_OC2_SetConfig+0xac>
 8014d10:	687b      	ldr	r3, [r7, #4]
 8014d12:	4a1a      	ldr	r2, [pc, #104]	; (8014d7c <TIM_OC2_SetConfig+0x110>)
 8014d14:	4293      	cmp	r3, r2
 8014d16:	d113      	bne.n	8014d40 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8014d18:	693b      	ldr	r3, [r7, #16]
 8014d1a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014d1e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8014d20:	693b      	ldr	r3, [r7, #16]
 8014d22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014d26:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8014d28:	683b      	ldr	r3, [r7, #0]
 8014d2a:	695b      	ldr	r3, [r3, #20]
 8014d2c:	009b      	lsls	r3, r3, #2
 8014d2e:	693a      	ldr	r2, [r7, #16]
 8014d30:	4313      	orrs	r3, r2
 8014d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8014d34:	683b      	ldr	r3, [r7, #0]
 8014d36:	699b      	ldr	r3, [r3, #24]
 8014d38:	009b      	lsls	r3, r3, #2
 8014d3a:	693a      	ldr	r2, [r7, #16]
 8014d3c:	4313      	orrs	r3, r2
 8014d3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	693a      	ldr	r2, [r7, #16]
 8014d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	68fa      	ldr	r2, [r7, #12]
 8014d4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8014d4c:	683b      	ldr	r3, [r7, #0]
 8014d4e:	685a      	ldr	r2, [r3, #4]
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	697a      	ldr	r2, [r7, #20]
 8014d58:	621a      	str	r2, [r3, #32]
}
 8014d5a:	bf00      	nop
 8014d5c:	371c      	adds	r7, #28
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d64:	4770      	bx	lr
 8014d66:	bf00      	nop
 8014d68:	feff8fff 	.word	0xfeff8fff
 8014d6c:	40010000 	.word	0x40010000
 8014d70:	40010400 	.word	0x40010400
 8014d74:	40014000 	.word	0x40014000
 8014d78:	40014400 	.word	0x40014400
 8014d7c:	40014800 	.word	0x40014800

08014d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014d80:	b480      	push	{r7}
 8014d82:	b087      	sub	sp, #28
 8014d84:	af00      	add	r7, sp, #0
 8014d86:	6078      	str	r0, [r7, #4]
 8014d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	6a1b      	ldr	r3, [r3, #32]
 8014d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	6a1b      	ldr	r3, [r3, #32]
 8014d94:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8014d98:	687b      	ldr	r3, [r7, #4]
 8014d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	685b      	ldr	r3, [r3, #4]
 8014da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	69db      	ldr	r3, [r3, #28]
 8014da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8014da8:	68fa      	ldr	r2, [r7, #12]
 8014daa:	4b33      	ldr	r3, [pc, #204]	; (8014e78 <TIM_OC3_SetConfig+0xf8>)
 8014dac:	4013      	ands	r3, r2
 8014dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8014db0:	68fb      	ldr	r3, [r7, #12]
 8014db2:	f023 0303 	bic.w	r3, r3, #3
 8014db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014db8:	683b      	ldr	r3, [r7, #0]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	68fa      	ldr	r2, [r7, #12]
 8014dbe:	4313      	orrs	r3, r2
 8014dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8014dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8014dca:	683b      	ldr	r3, [r7, #0]
 8014dcc:	689b      	ldr	r3, [r3, #8]
 8014dce:	021b      	lsls	r3, r3, #8
 8014dd0:	697a      	ldr	r2, [r7, #20]
 8014dd2:	4313      	orrs	r3, r2
 8014dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8014dd6:	687b      	ldr	r3, [r7, #4]
 8014dd8:	4a28      	ldr	r2, [pc, #160]	; (8014e7c <TIM_OC3_SetConfig+0xfc>)
 8014dda:	4293      	cmp	r3, r2
 8014ddc:	d003      	beq.n	8014de6 <TIM_OC3_SetConfig+0x66>
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	4a27      	ldr	r2, [pc, #156]	; (8014e80 <TIM_OC3_SetConfig+0x100>)
 8014de2:	4293      	cmp	r3, r2
 8014de4:	d10d      	bne.n	8014e02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8014de6:	697b      	ldr	r3, [r7, #20]
 8014de8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8014dee:	683b      	ldr	r3, [r7, #0]
 8014df0:	68db      	ldr	r3, [r3, #12]
 8014df2:	021b      	lsls	r3, r3, #8
 8014df4:	697a      	ldr	r2, [r7, #20]
 8014df6:	4313      	orrs	r3, r2
 8014df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8014dfa:	697b      	ldr	r3, [r7, #20]
 8014dfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8014e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	4a1d      	ldr	r2, [pc, #116]	; (8014e7c <TIM_OC3_SetConfig+0xfc>)
 8014e06:	4293      	cmp	r3, r2
 8014e08:	d00f      	beq.n	8014e2a <TIM_OC3_SetConfig+0xaa>
 8014e0a:	687b      	ldr	r3, [r7, #4]
 8014e0c:	4a1c      	ldr	r2, [pc, #112]	; (8014e80 <TIM_OC3_SetConfig+0x100>)
 8014e0e:	4293      	cmp	r3, r2
 8014e10:	d00b      	beq.n	8014e2a <TIM_OC3_SetConfig+0xaa>
 8014e12:	687b      	ldr	r3, [r7, #4]
 8014e14:	4a1b      	ldr	r2, [pc, #108]	; (8014e84 <TIM_OC3_SetConfig+0x104>)
 8014e16:	4293      	cmp	r3, r2
 8014e18:	d007      	beq.n	8014e2a <TIM_OC3_SetConfig+0xaa>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	4a1a      	ldr	r2, [pc, #104]	; (8014e88 <TIM_OC3_SetConfig+0x108>)
 8014e1e:	4293      	cmp	r3, r2
 8014e20:	d003      	beq.n	8014e2a <TIM_OC3_SetConfig+0xaa>
 8014e22:	687b      	ldr	r3, [r7, #4]
 8014e24:	4a19      	ldr	r2, [pc, #100]	; (8014e8c <TIM_OC3_SetConfig+0x10c>)
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d113      	bne.n	8014e52 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8014e2a:	693b      	ldr	r3, [r7, #16]
 8014e2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014e30:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8014e32:	693b      	ldr	r3, [r7, #16]
 8014e34:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014e38:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	695b      	ldr	r3, [r3, #20]
 8014e3e:	011b      	lsls	r3, r3, #4
 8014e40:	693a      	ldr	r2, [r7, #16]
 8014e42:	4313      	orrs	r3, r2
 8014e44:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8014e46:	683b      	ldr	r3, [r7, #0]
 8014e48:	699b      	ldr	r3, [r3, #24]
 8014e4a:	011b      	lsls	r3, r3, #4
 8014e4c:	693a      	ldr	r2, [r7, #16]
 8014e4e:	4313      	orrs	r3, r2
 8014e50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	693a      	ldr	r2, [r7, #16]
 8014e56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	68fa      	ldr	r2, [r7, #12]
 8014e5c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8014e5e:	683b      	ldr	r3, [r7, #0]
 8014e60:	685a      	ldr	r2, [r3, #4]
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	697a      	ldr	r2, [r7, #20]
 8014e6a:	621a      	str	r2, [r3, #32]
}
 8014e6c:	bf00      	nop
 8014e6e:	371c      	adds	r7, #28
 8014e70:	46bd      	mov	sp, r7
 8014e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e76:	4770      	bx	lr
 8014e78:	fffeff8f 	.word	0xfffeff8f
 8014e7c:	40010000 	.word	0x40010000
 8014e80:	40010400 	.word	0x40010400
 8014e84:	40014000 	.word	0x40014000
 8014e88:	40014400 	.word	0x40014400
 8014e8c:	40014800 	.word	0x40014800

08014e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8014e90:	b480      	push	{r7}
 8014e92:	b087      	sub	sp, #28
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	6078      	str	r0, [r7, #4]
 8014e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	6a1b      	ldr	r3, [r3, #32]
 8014e9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	6a1b      	ldr	r3, [r3, #32]
 8014ea4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014eac:	687b      	ldr	r3, [r7, #4]
 8014eae:	685b      	ldr	r3, [r3, #4]
 8014eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	69db      	ldr	r3, [r3, #28]
 8014eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8014eb8:	68fa      	ldr	r2, [r7, #12]
 8014eba:	4b24      	ldr	r3, [pc, #144]	; (8014f4c <TIM_OC4_SetConfig+0xbc>)
 8014ebc:	4013      	ands	r3, r2
 8014ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8014ec0:	68fb      	ldr	r3, [r7, #12]
 8014ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8014ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8014ec8:	683b      	ldr	r3, [r7, #0]
 8014eca:	681b      	ldr	r3, [r3, #0]
 8014ecc:	021b      	lsls	r3, r3, #8
 8014ece:	68fa      	ldr	r2, [r7, #12]
 8014ed0:	4313      	orrs	r3, r2
 8014ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8014ed4:	693b      	ldr	r3, [r7, #16]
 8014ed6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8014eda:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	689b      	ldr	r3, [r3, #8]
 8014ee0:	031b      	lsls	r3, r3, #12
 8014ee2:	693a      	ldr	r2, [r7, #16]
 8014ee4:	4313      	orrs	r3, r2
 8014ee6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	4a19      	ldr	r2, [pc, #100]	; (8014f50 <TIM_OC4_SetConfig+0xc0>)
 8014eec:	4293      	cmp	r3, r2
 8014eee:	d00f      	beq.n	8014f10 <TIM_OC4_SetConfig+0x80>
 8014ef0:	687b      	ldr	r3, [r7, #4]
 8014ef2:	4a18      	ldr	r2, [pc, #96]	; (8014f54 <TIM_OC4_SetConfig+0xc4>)
 8014ef4:	4293      	cmp	r3, r2
 8014ef6:	d00b      	beq.n	8014f10 <TIM_OC4_SetConfig+0x80>
 8014ef8:	687b      	ldr	r3, [r7, #4]
 8014efa:	4a17      	ldr	r2, [pc, #92]	; (8014f58 <TIM_OC4_SetConfig+0xc8>)
 8014efc:	4293      	cmp	r3, r2
 8014efe:	d007      	beq.n	8014f10 <TIM_OC4_SetConfig+0x80>
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	4a16      	ldr	r2, [pc, #88]	; (8014f5c <TIM_OC4_SetConfig+0xcc>)
 8014f04:	4293      	cmp	r3, r2
 8014f06:	d003      	beq.n	8014f10 <TIM_OC4_SetConfig+0x80>
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	4a15      	ldr	r2, [pc, #84]	; (8014f60 <TIM_OC4_SetConfig+0xd0>)
 8014f0c:	4293      	cmp	r3, r2
 8014f0e:	d109      	bne.n	8014f24 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8014f10:	697b      	ldr	r3, [r7, #20]
 8014f12:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8014f16:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8014f18:	683b      	ldr	r3, [r7, #0]
 8014f1a:	695b      	ldr	r3, [r3, #20]
 8014f1c:	019b      	lsls	r3, r3, #6
 8014f1e:	697a      	ldr	r2, [r7, #20]
 8014f20:	4313      	orrs	r3, r2
 8014f22:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	697a      	ldr	r2, [r7, #20]
 8014f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8014f2a:	687b      	ldr	r3, [r7, #4]
 8014f2c:	68fa      	ldr	r2, [r7, #12]
 8014f2e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8014f30:	683b      	ldr	r3, [r7, #0]
 8014f32:	685a      	ldr	r2, [r3, #4]
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	693a      	ldr	r2, [r7, #16]
 8014f3c:	621a      	str	r2, [r3, #32]
}
 8014f3e:	bf00      	nop
 8014f40:	371c      	adds	r7, #28
 8014f42:	46bd      	mov	sp, r7
 8014f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f48:	4770      	bx	lr
 8014f4a:	bf00      	nop
 8014f4c:	feff8fff 	.word	0xfeff8fff
 8014f50:	40010000 	.word	0x40010000
 8014f54:	40010400 	.word	0x40010400
 8014f58:	40014000 	.word	0x40014000
 8014f5c:	40014400 	.word	0x40014400
 8014f60:	40014800 	.word	0x40014800

08014f64 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8014f64:	b480      	push	{r7}
 8014f66:	b087      	sub	sp, #28
 8014f68:	af00      	add	r7, sp, #0
 8014f6a:	6078      	str	r0, [r7, #4]
 8014f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	6a1b      	ldr	r3, [r3, #32]
 8014f72:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	6a1b      	ldr	r3, [r3, #32]
 8014f78:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	685b      	ldr	r3, [r3, #4]
 8014f84:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8014f86:	687b      	ldr	r3, [r7, #4]
 8014f88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8014f8c:	68fa      	ldr	r2, [r7, #12]
 8014f8e:	4b21      	ldr	r3, [pc, #132]	; (8015014 <TIM_OC5_SetConfig+0xb0>)
 8014f90:	4013      	ands	r3, r2
 8014f92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	681b      	ldr	r3, [r3, #0]
 8014f98:	68fa      	ldr	r2, [r7, #12]
 8014f9a:	4313      	orrs	r3, r2
 8014f9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8014f9e:	693b      	ldr	r3, [r7, #16]
 8014fa0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8014fa4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8014fa6:	683b      	ldr	r3, [r7, #0]
 8014fa8:	689b      	ldr	r3, [r3, #8]
 8014faa:	041b      	lsls	r3, r3, #16
 8014fac:	693a      	ldr	r2, [r7, #16]
 8014fae:	4313      	orrs	r3, r2
 8014fb0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8014fb2:	687b      	ldr	r3, [r7, #4]
 8014fb4:	4a18      	ldr	r2, [pc, #96]	; (8015018 <TIM_OC5_SetConfig+0xb4>)
 8014fb6:	4293      	cmp	r3, r2
 8014fb8:	d00f      	beq.n	8014fda <TIM_OC5_SetConfig+0x76>
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	4a17      	ldr	r2, [pc, #92]	; (801501c <TIM_OC5_SetConfig+0xb8>)
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	d00b      	beq.n	8014fda <TIM_OC5_SetConfig+0x76>
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	4a16      	ldr	r2, [pc, #88]	; (8015020 <TIM_OC5_SetConfig+0xbc>)
 8014fc6:	4293      	cmp	r3, r2
 8014fc8:	d007      	beq.n	8014fda <TIM_OC5_SetConfig+0x76>
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	4a15      	ldr	r2, [pc, #84]	; (8015024 <TIM_OC5_SetConfig+0xc0>)
 8014fce:	4293      	cmp	r3, r2
 8014fd0:	d003      	beq.n	8014fda <TIM_OC5_SetConfig+0x76>
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	4a14      	ldr	r2, [pc, #80]	; (8015028 <TIM_OC5_SetConfig+0xc4>)
 8014fd6:	4293      	cmp	r3, r2
 8014fd8:	d109      	bne.n	8014fee <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8014fda:	697b      	ldr	r3, [r7, #20]
 8014fdc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8014fe0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8014fe2:	683b      	ldr	r3, [r7, #0]
 8014fe4:	695b      	ldr	r3, [r3, #20]
 8014fe6:	021b      	lsls	r3, r3, #8
 8014fe8:	697a      	ldr	r2, [r7, #20]
 8014fea:	4313      	orrs	r3, r2
 8014fec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8014fee:	687b      	ldr	r3, [r7, #4]
 8014ff0:	697a      	ldr	r2, [r7, #20]
 8014ff2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	68fa      	ldr	r2, [r7, #12]
 8014ff8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8014ffa:	683b      	ldr	r3, [r7, #0]
 8014ffc:	685a      	ldr	r2, [r3, #4]
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	693a      	ldr	r2, [r7, #16]
 8015006:	621a      	str	r2, [r3, #32]
}
 8015008:	bf00      	nop
 801500a:	371c      	adds	r7, #28
 801500c:	46bd      	mov	sp, r7
 801500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015012:	4770      	bx	lr
 8015014:	fffeff8f 	.word	0xfffeff8f
 8015018:	40010000 	.word	0x40010000
 801501c:	40010400 	.word	0x40010400
 8015020:	40014000 	.word	0x40014000
 8015024:	40014400 	.word	0x40014400
 8015028:	40014800 	.word	0x40014800

0801502c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 801502c:	b480      	push	{r7}
 801502e:	b087      	sub	sp, #28
 8015030:	af00      	add	r7, sp, #0
 8015032:	6078      	str	r0, [r7, #4]
 8015034:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	6a1b      	ldr	r3, [r3, #32]
 801503a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	6a1b      	ldr	r3, [r3, #32]
 8015040:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	685b      	ldr	r3, [r3, #4]
 801504c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8015054:	68fa      	ldr	r2, [r7, #12]
 8015056:	4b22      	ldr	r3, [pc, #136]	; (80150e0 <TIM_OC6_SetConfig+0xb4>)
 8015058:	4013      	ands	r3, r2
 801505a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 801505c:	683b      	ldr	r3, [r7, #0]
 801505e:	681b      	ldr	r3, [r3, #0]
 8015060:	021b      	lsls	r3, r3, #8
 8015062:	68fa      	ldr	r2, [r7, #12]
 8015064:	4313      	orrs	r3, r2
 8015066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8015068:	693b      	ldr	r3, [r7, #16]
 801506a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801506e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8015070:	683b      	ldr	r3, [r7, #0]
 8015072:	689b      	ldr	r3, [r3, #8]
 8015074:	051b      	lsls	r3, r3, #20
 8015076:	693a      	ldr	r2, [r7, #16]
 8015078:	4313      	orrs	r3, r2
 801507a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	4a19      	ldr	r2, [pc, #100]	; (80150e4 <TIM_OC6_SetConfig+0xb8>)
 8015080:	4293      	cmp	r3, r2
 8015082:	d00f      	beq.n	80150a4 <TIM_OC6_SetConfig+0x78>
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	4a18      	ldr	r2, [pc, #96]	; (80150e8 <TIM_OC6_SetConfig+0xbc>)
 8015088:	4293      	cmp	r3, r2
 801508a:	d00b      	beq.n	80150a4 <TIM_OC6_SetConfig+0x78>
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	4a17      	ldr	r2, [pc, #92]	; (80150ec <TIM_OC6_SetConfig+0xc0>)
 8015090:	4293      	cmp	r3, r2
 8015092:	d007      	beq.n	80150a4 <TIM_OC6_SetConfig+0x78>
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	4a16      	ldr	r2, [pc, #88]	; (80150f0 <TIM_OC6_SetConfig+0xc4>)
 8015098:	4293      	cmp	r3, r2
 801509a:	d003      	beq.n	80150a4 <TIM_OC6_SetConfig+0x78>
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	4a15      	ldr	r2, [pc, #84]	; (80150f4 <TIM_OC6_SetConfig+0xc8>)
 80150a0:	4293      	cmp	r3, r2
 80150a2:	d109      	bne.n	80150b8 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80150a4:	697b      	ldr	r3, [r7, #20]
 80150a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80150aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	695b      	ldr	r3, [r3, #20]
 80150b0:	029b      	lsls	r3, r3, #10
 80150b2:	697a      	ldr	r2, [r7, #20]
 80150b4:	4313      	orrs	r3, r2
 80150b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	697a      	ldr	r2, [r7, #20]
 80150bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	68fa      	ldr	r2, [r7, #12]
 80150c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	685a      	ldr	r2, [r3, #4]
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	693a      	ldr	r2, [r7, #16]
 80150d0:	621a      	str	r2, [r3, #32]
}
 80150d2:	bf00      	nop
 80150d4:	371c      	adds	r7, #28
 80150d6:	46bd      	mov	sp, r7
 80150d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150dc:	4770      	bx	lr
 80150de:	bf00      	nop
 80150e0:	feff8fff 	.word	0xfeff8fff
 80150e4:	40010000 	.word	0x40010000
 80150e8:	40010400 	.word	0x40010400
 80150ec:	40014000 	.word	0x40014000
 80150f0:	40014400 	.word	0x40014400
 80150f4:	40014800 	.word	0x40014800

080150f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80150f8:	b480      	push	{r7}
 80150fa:	b087      	sub	sp, #28
 80150fc:	af00      	add	r7, sp, #0
 80150fe:	60f8      	str	r0, [r7, #12]
 8015100:	60b9      	str	r1, [r7, #8]
 8015102:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8015104:	68fb      	ldr	r3, [r7, #12]
 8015106:	6a1b      	ldr	r3, [r3, #32]
 8015108:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	6a1b      	ldr	r3, [r3, #32]
 801510e:	f023 0201 	bic.w	r2, r3, #1
 8015112:	68fb      	ldr	r3, [r7, #12]
 8015114:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015116:	68fb      	ldr	r3, [r7, #12]
 8015118:	699b      	ldr	r3, [r3, #24]
 801511a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801511c:	693b      	ldr	r3, [r7, #16]
 801511e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8015122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8015124:	687b      	ldr	r3, [r7, #4]
 8015126:	011b      	lsls	r3, r3, #4
 8015128:	693a      	ldr	r2, [r7, #16]
 801512a:	4313      	orrs	r3, r2
 801512c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801512e:	697b      	ldr	r3, [r7, #20]
 8015130:	f023 030a 	bic.w	r3, r3, #10
 8015134:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8015136:	697a      	ldr	r2, [r7, #20]
 8015138:	68bb      	ldr	r3, [r7, #8]
 801513a:	4313      	orrs	r3, r2
 801513c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801513e:	68fb      	ldr	r3, [r7, #12]
 8015140:	693a      	ldr	r2, [r7, #16]
 8015142:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8015144:	68fb      	ldr	r3, [r7, #12]
 8015146:	697a      	ldr	r2, [r7, #20]
 8015148:	621a      	str	r2, [r3, #32]
}
 801514a:	bf00      	nop
 801514c:	371c      	adds	r7, #28
 801514e:	46bd      	mov	sp, r7
 8015150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015154:	4770      	bx	lr

08015156 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8015156:	b480      	push	{r7}
 8015158:	b087      	sub	sp, #28
 801515a:	af00      	add	r7, sp, #0
 801515c:	60f8      	str	r0, [r7, #12]
 801515e:	60b9      	str	r1, [r7, #8]
 8015160:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8015162:	68fb      	ldr	r3, [r7, #12]
 8015164:	6a1b      	ldr	r3, [r3, #32]
 8015166:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	6a1b      	ldr	r3, [r3, #32]
 801516c:	f023 0210 	bic.w	r2, r3, #16
 8015170:	68fb      	ldr	r3, [r7, #12]
 8015172:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8015174:	68fb      	ldr	r3, [r7, #12]
 8015176:	699b      	ldr	r3, [r3, #24]
 8015178:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801517a:	693b      	ldr	r3, [r7, #16]
 801517c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8015180:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	031b      	lsls	r3, r3, #12
 8015186:	693a      	ldr	r2, [r7, #16]
 8015188:	4313      	orrs	r3, r2
 801518a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801518c:	697b      	ldr	r3, [r7, #20]
 801518e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8015192:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	011b      	lsls	r3, r3, #4
 8015198:	697a      	ldr	r2, [r7, #20]
 801519a:	4313      	orrs	r3, r2
 801519c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801519e:	68fb      	ldr	r3, [r7, #12]
 80151a0:	693a      	ldr	r2, [r7, #16]
 80151a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	697a      	ldr	r2, [r7, #20]
 80151a8:	621a      	str	r2, [r3, #32]
}
 80151aa:	bf00      	nop
 80151ac:	371c      	adds	r7, #28
 80151ae:	46bd      	mov	sp, r7
 80151b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151b4:	4770      	bx	lr
	...

080151b8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80151b8:	b480      	push	{r7}
 80151ba:	b085      	sub	sp, #20
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
 80151c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	689b      	ldr	r3, [r3, #8]
 80151c6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80151c8:	68fa      	ldr	r2, [r7, #12]
 80151ca:	4b09      	ldr	r3, [pc, #36]	; (80151f0 <TIM_ITRx_SetConfig+0x38>)
 80151cc:	4013      	ands	r3, r2
 80151ce:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80151d0:	683a      	ldr	r2, [r7, #0]
 80151d2:	68fb      	ldr	r3, [r7, #12]
 80151d4:	4313      	orrs	r3, r2
 80151d6:	f043 0307 	orr.w	r3, r3, #7
 80151da:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	68fa      	ldr	r2, [r7, #12]
 80151e0:	609a      	str	r2, [r3, #8]
}
 80151e2:	bf00      	nop
 80151e4:	3714      	adds	r7, #20
 80151e6:	46bd      	mov	sp, r7
 80151e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ec:	4770      	bx	lr
 80151ee:	bf00      	nop
 80151f0:	ffcfff8f 	.word	0xffcfff8f

080151f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80151f4:	b480      	push	{r7}
 80151f6:	b087      	sub	sp, #28
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	60f8      	str	r0, [r7, #12]
 80151fc:	60b9      	str	r1, [r7, #8]
 80151fe:	607a      	str	r2, [r7, #4]
 8015200:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8015202:	68fb      	ldr	r3, [r7, #12]
 8015204:	689b      	ldr	r3, [r3, #8]
 8015206:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8015208:	697b      	ldr	r3, [r7, #20]
 801520a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 801520e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8015210:	683b      	ldr	r3, [r7, #0]
 8015212:	021a      	lsls	r2, r3, #8
 8015214:	687b      	ldr	r3, [r7, #4]
 8015216:	431a      	orrs	r2, r3
 8015218:	68bb      	ldr	r3, [r7, #8]
 801521a:	4313      	orrs	r3, r2
 801521c:	697a      	ldr	r2, [r7, #20]
 801521e:	4313      	orrs	r3, r2
 8015220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	697a      	ldr	r2, [r7, #20]
 8015226:	609a      	str	r2, [r3, #8]
}
 8015228:	bf00      	nop
 801522a:	371c      	adds	r7, #28
 801522c:	46bd      	mov	sp, r7
 801522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015232:	4770      	bx	lr

08015234 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8015234:	b480      	push	{r7}
 8015236:	b087      	sub	sp, #28
 8015238:	af00      	add	r7, sp, #0
 801523a:	60f8      	str	r0, [r7, #12]
 801523c:	60b9      	str	r1, [r7, #8]
 801523e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8015240:	68bb      	ldr	r3, [r7, #8]
 8015242:	f003 031f 	and.w	r3, r3, #31
 8015246:	2201      	movs	r2, #1
 8015248:	fa02 f303 	lsl.w	r3, r2, r3
 801524c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	6a1a      	ldr	r2, [r3, #32]
 8015252:	697b      	ldr	r3, [r7, #20]
 8015254:	43db      	mvns	r3, r3
 8015256:	401a      	ands	r2, r3
 8015258:	68fb      	ldr	r3, [r7, #12]
 801525a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	6a1a      	ldr	r2, [r3, #32]
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	f003 031f 	and.w	r3, r3, #31
 8015266:	6879      	ldr	r1, [r7, #4]
 8015268:	fa01 f303 	lsl.w	r3, r1, r3
 801526c:	431a      	orrs	r2, r3
 801526e:	68fb      	ldr	r3, [r7, #12]
 8015270:	621a      	str	r2, [r3, #32]
}
 8015272:	bf00      	nop
 8015274:	371c      	adds	r7, #28
 8015276:	46bd      	mov	sp, r7
 8015278:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527c:	4770      	bx	lr
	...

08015280 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8015280:	b480      	push	{r7}
 8015282:	b085      	sub	sp, #20
 8015284:	af00      	add	r7, sp, #0
 8015286:	6078      	str	r0, [r7, #4]
 8015288:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8015290:	2b01      	cmp	r3, #1
 8015292:	d101      	bne.n	8015298 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8015294:	2302      	movs	r3, #2
 8015296:	e06d      	b.n	8015374 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8015298:	687b      	ldr	r3, [r7, #4]
 801529a:	2201      	movs	r2, #1
 801529c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	2202      	movs	r2, #2
 80152a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	681b      	ldr	r3, [r3, #0]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	681b      	ldr	r3, [r3, #0]
 80152b4:	689b      	ldr	r3, [r3, #8]
 80152b6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	4a30      	ldr	r2, [pc, #192]	; (8015380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80152be:	4293      	cmp	r3, r2
 80152c0:	d004      	beq.n	80152cc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80152c2:	687b      	ldr	r3, [r7, #4]
 80152c4:	681b      	ldr	r3, [r3, #0]
 80152c6:	4a2f      	ldr	r2, [pc, #188]	; (8015384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80152c8:	4293      	cmp	r3, r2
 80152ca:	d108      	bne.n	80152de <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80152d2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80152d4:	683b      	ldr	r3, [r7, #0]
 80152d6:	685b      	ldr	r3, [r3, #4]
 80152d8:	68fa      	ldr	r2, [r7, #12]
 80152da:	4313      	orrs	r3, r2
 80152dc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80152de:	68fb      	ldr	r3, [r7, #12]
 80152e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80152e4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80152e6:	683b      	ldr	r3, [r7, #0]
 80152e8:	681b      	ldr	r3, [r3, #0]
 80152ea:	68fa      	ldr	r2, [r7, #12]
 80152ec:	4313      	orrs	r3, r2
 80152ee:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	681b      	ldr	r3, [r3, #0]
 80152f4:	68fa      	ldr	r2, [r7, #12]
 80152f6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	4a20      	ldr	r2, [pc, #128]	; (8015380 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80152fe:	4293      	cmp	r3, r2
 8015300:	d022      	beq.n	8015348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015302:	687b      	ldr	r3, [r7, #4]
 8015304:	681b      	ldr	r3, [r3, #0]
 8015306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801530a:	d01d      	beq.n	8015348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	4a1d      	ldr	r2, [pc, #116]	; (8015388 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8015312:	4293      	cmp	r3, r2
 8015314:	d018      	beq.n	8015348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	4a1c      	ldr	r2, [pc, #112]	; (801538c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801531c:	4293      	cmp	r3, r2
 801531e:	d013      	beq.n	8015348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	681b      	ldr	r3, [r3, #0]
 8015324:	4a1a      	ldr	r2, [pc, #104]	; (8015390 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8015326:	4293      	cmp	r3, r2
 8015328:	d00e      	beq.n	8015348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	681b      	ldr	r3, [r3, #0]
 801532e:	4a15      	ldr	r2, [pc, #84]	; (8015384 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8015330:	4293      	cmp	r3, r2
 8015332:	d009      	beq.n	8015348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	681b      	ldr	r3, [r3, #0]
 8015338:	4a16      	ldr	r2, [pc, #88]	; (8015394 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801533a:	4293      	cmp	r3, r2
 801533c:	d004      	beq.n	8015348 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801533e:	687b      	ldr	r3, [r7, #4]
 8015340:	681b      	ldr	r3, [r3, #0]
 8015342:	4a15      	ldr	r2, [pc, #84]	; (8015398 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8015344:	4293      	cmp	r3, r2
 8015346:	d10c      	bne.n	8015362 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8015348:	68bb      	ldr	r3, [r7, #8]
 801534a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801534e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8015350:	683b      	ldr	r3, [r7, #0]
 8015352:	689b      	ldr	r3, [r3, #8]
 8015354:	68ba      	ldr	r2, [r7, #8]
 8015356:	4313      	orrs	r3, r2
 8015358:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	68ba      	ldr	r2, [r7, #8]
 8015360:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	2201      	movs	r2, #1
 8015366:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 801536a:	687b      	ldr	r3, [r7, #4]
 801536c:	2200      	movs	r2, #0
 801536e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015372:	2300      	movs	r3, #0
}
 8015374:	4618      	mov	r0, r3
 8015376:	3714      	adds	r7, #20
 8015378:	46bd      	mov	sp, r7
 801537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801537e:	4770      	bx	lr
 8015380:	40010000 	.word	0x40010000
 8015384:	40010400 	.word	0x40010400
 8015388:	40000400 	.word	0x40000400
 801538c:	40000800 	.word	0x40000800
 8015390:	40000c00 	.word	0x40000c00
 8015394:	40001800 	.word	0x40001800
 8015398:	40014000 	.word	0x40014000

0801539c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 801539c:	b480      	push	{r7}
 801539e:	b085      	sub	sp, #20
 80153a0:	af00      	add	r7, sp, #0
 80153a2:	6078      	str	r0, [r7, #4]
 80153a4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80153a6:	2300      	movs	r3, #0
 80153a8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80153aa:	687b      	ldr	r3, [r7, #4]
 80153ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80153b0:	2b01      	cmp	r3, #1
 80153b2:	d101      	bne.n	80153b8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80153b4:	2302      	movs	r3, #2
 80153b6:	e065      	b.n	8015484 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	2201      	movs	r2, #1
 80153bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80153c0:	68fb      	ldr	r3, [r7, #12]
 80153c2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	68db      	ldr	r3, [r3, #12]
 80153ca:	4313      	orrs	r3, r2
 80153cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80153d4:	683b      	ldr	r3, [r7, #0]
 80153d6:	689b      	ldr	r3, [r3, #8]
 80153d8:	4313      	orrs	r3, r2
 80153da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80153e2:	683b      	ldr	r3, [r7, #0]
 80153e4:	685b      	ldr	r3, [r3, #4]
 80153e6:	4313      	orrs	r3, r2
 80153e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80153f0:	683b      	ldr	r3, [r7, #0]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	4313      	orrs	r3, r2
 80153f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80153f8:	68fb      	ldr	r3, [r7, #12]
 80153fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80153fe:	683b      	ldr	r3, [r7, #0]
 8015400:	691b      	ldr	r3, [r3, #16]
 8015402:	4313      	orrs	r3, r2
 8015404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8015406:	68fb      	ldr	r3, [r7, #12]
 8015408:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 801540c:	683b      	ldr	r3, [r7, #0]
 801540e:	695b      	ldr	r3, [r3, #20]
 8015410:	4313      	orrs	r3, r2
 8015412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8015414:	68fb      	ldr	r3, [r7, #12]
 8015416:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 801541a:	683b      	ldr	r3, [r7, #0]
 801541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801541e:	4313      	orrs	r3, r2
 8015420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	699b      	ldr	r3, [r3, #24]
 801542c:	041b      	lsls	r3, r3, #16
 801542e:	4313      	orrs	r3, r2
 8015430:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	4a16      	ldr	r2, [pc, #88]	; (8015490 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8015438:	4293      	cmp	r3, r2
 801543a:	d004      	beq.n	8015446 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	4a14      	ldr	r2, [pc, #80]	; (8015494 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8015442:	4293      	cmp	r3, r2
 8015444:	d115      	bne.n	8015472 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015450:	051b      	lsls	r3, r3, #20
 8015452:	4313      	orrs	r3, r2
 8015454:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8015456:	68fb      	ldr	r3, [r7, #12]
 8015458:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 801545c:	683b      	ldr	r3, [r7, #0]
 801545e:	69db      	ldr	r3, [r3, #28]
 8015460:	4313      	orrs	r3, r2
 8015462:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8015464:	68fb      	ldr	r3, [r7, #12]
 8015466:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 801546a:	683b      	ldr	r3, [r7, #0]
 801546c:	6a1b      	ldr	r3, [r3, #32]
 801546e:	4313      	orrs	r3, r2
 8015470:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8015472:	687b      	ldr	r3, [r7, #4]
 8015474:	681b      	ldr	r3, [r3, #0]
 8015476:	68fa      	ldr	r2, [r7, #12]
 8015478:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	2200      	movs	r2, #0
 801547e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8015482:	2300      	movs	r3, #0
}
 8015484:	4618      	mov	r0, r3
 8015486:	3714      	adds	r7, #20
 8015488:	46bd      	mov	sp, r7
 801548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801548e:	4770      	bx	lr
 8015490:	40010000 	.word	0x40010000
 8015494:	40010400 	.word	0x40010400

08015498 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015498:	b480      	push	{r7}
 801549a:	b083      	sub	sp, #12
 801549c:	af00      	add	r7, sp, #0
 801549e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80154a0:	bf00      	nop
 80154a2:	370c      	adds	r7, #12
 80154a4:	46bd      	mov	sp, r7
 80154a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154aa:	4770      	bx	lr

080154ac <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80154ac:	b480      	push	{r7}
 80154ae:	b083      	sub	sp, #12
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80154b4:	bf00      	nop
 80154b6:	370c      	adds	r7, #12
 80154b8:	46bd      	mov	sp, r7
 80154ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154be:	4770      	bx	lr

080154c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80154c0:	b480      	push	{r7}
 80154c2:	b083      	sub	sp, #12
 80154c4:	af00      	add	r7, sp, #0
 80154c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80154c8:	bf00      	nop
 80154ca:	370c      	adds	r7, #12
 80154cc:	46bd      	mov	sp, r7
 80154ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154d2:	4770      	bx	lr

080154d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80154d4:	b580      	push	{r7, lr}
 80154d6:	b082      	sub	sp, #8
 80154d8:	af00      	add	r7, sp, #0
 80154da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	2b00      	cmp	r3, #0
 80154e0:	d101      	bne.n	80154e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80154e2:	2301      	movs	r3, #1
 80154e4:	e042      	b.n	801556c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d106      	bne.n	80154fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	2200      	movs	r2, #0
 80154f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80154f8:	6878      	ldr	r0, [r7, #4]
 80154fa:	f7f0 fc8f 	bl	8005e1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2224      	movs	r2, #36	; 0x24
 8015502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	681b      	ldr	r3, [r3, #0]
 801550a:	681a      	ldr	r2, [r3, #0]
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681b      	ldr	r3, [r3, #0]
 8015510:	f022 0201 	bic.w	r2, r2, #1
 8015514:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801551a:	2b00      	cmp	r3, #0
 801551c:	d002      	beq.n	8015524 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f001 fbc2 	bl	8016ca8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015524:	6878      	ldr	r0, [r7, #4]
 8015526:	f000 fe57 	bl	80161d8 <UART_SetConfig>
 801552a:	4603      	mov	r3, r0
 801552c:	2b01      	cmp	r3, #1
 801552e:	d101      	bne.n	8015534 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8015530:	2301      	movs	r3, #1
 8015532:	e01b      	b.n	801556c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	685a      	ldr	r2, [r3, #4]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8015542:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	689a      	ldr	r2, [r3, #8]
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8015552:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	681a      	ldr	r2, [r3, #0]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	681b      	ldr	r3, [r3, #0]
 801555e:	f042 0201 	orr.w	r2, r2, #1
 8015562:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f001 fc41 	bl	8016dec <UART_CheckIdleState>
 801556a:	4603      	mov	r3, r0
}
 801556c:	4618      	mov	r0, r3
 801556e:	3708      	adds	r7, #8
 8015570:	46bd      	mov	sp, r7
 8015572:	bd80      	pop	{r7, pc}

08015574 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015574:	b580      	push	{r7, lr}
 8015576:	b08a      	sub	sp, #40	; 0x28
 8015578:	af02      	add	r7, sp, #8
 801557a:	60f8      	str	r0, [r7, #12]
 801557c:	60b9      	str	r1, [r7, #8]
 801557e:	603b      	str	r3, [r7, #0]
 8015580:	4613      	mov	r3, r2
 8015582:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801558a:	2b20      	cmp	r3, #32
 801558c:	d17b      	bne.n	8015686 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 801558e:	68bb      	ldr	r3, [r7, #8]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d002      	beq.n	801559a <HAL_UART_Transmit+0x26>
 8015594:	88fb      	ldrh	r3, [r7, #6]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d101      	bne.n	801559e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 801559a:	2301      	movs	r3, #1
 801559c:	e074      	b.n	8015688 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	2200      	movs	r2, #0
 80155a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80155a6:	68fb      	ldr	r3, [r7, #12]
 80155a8:	2221      	movs	r2, #33	; 0x21
 80155aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80155ae:	f7f1 fa2b 	bl	8006a08 <HAL_GetTick>
 80155b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80155b4:	68fb      	ldr	r3, [r7, #12]
 80155b6:	88fa      	ldrh	r2, [r7, #6]
 80155b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80155bc:	68fb      	ldr	r3, [r7, #12]
 80155be:	88fa      	ldrh	r2, [r7, #6]
 80155c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80155c4:	68fb      	ldr	r3, [r7, #12]
 80155c6:	689b      	ldr	r3, [r3, #8]
 80155c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80155cc:	d108      	bne.n	80155e0 <HAL_UART_Transmit+0x6c>
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	691b      	ldr	r3, [r3, #16]
 80155d2:	2b00      	cmp	r3, #0
 80155d4:	d104      	bne.n	80155e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80155d6:	2300      	movs	r3, #0
 80155d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80155da:	68bb      	ldr	r3, [r7, #8]
 80155dc:	61bb      	str	r3, [r7, #24]
 80155de:	e003      	b.n	80155e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80155e0:	68bb      	ldr	r3, [r7, #8]
 80155e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80155e4:	2300      	movs	r3, #0
 80155e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80155e8:	e030      	b.n	801564c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80155ea:	683b      	ldr	r3, [r7, #0]
 80155ec:	9300      	str	r3, [sp, #0]
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	2200      	movs	r2, #0
 80155f2:	2180      	movs	r1, #128	; 0x80
 80155f4:	68f8      	ldr	r0, [r7, #12]
 80155f6:	f001 fca3 	bl	8016f40 <UART_WaitOnFlagUntilTimeout>
 80155fa:	4603      	mov	r3, r0
 80155fc:	2b00      	cmp	r3, #0
 80155fe:	d005      	beq.n	801560c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015600:	68fb      	ldr	r3, [r7, #12]
 8015602:	2220      	movs	r2, #32
 8015604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8015608:	2303      	movs	r3, #3
 801560a:	e03d      	b.n	8015688 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 801560c:	69fb      	ldr	r3, [r7, #28]
 801560e:	2b00      	cmp	r3, #0
 8015610:	d10b      	bne.n	801562a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015612:	69bb      	ldr	r3, [r7, #24]
 8015614:	881b      	ldrh	r3, [r3, #0]
 8015616:	461a      	mov	r2, r3
 8015618:	68fb      	ldr	r3, [r7, #12]
 801561a:	681b      	ldr	r3, [r3, #0]
 801561c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015620:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8015622:	69bb      	ldr	r3, [r7, #24]
 8015624:	3302      	adds	r3, #2
 8015626:	61bb      	str	r3, [r7, #24]
 8015628:	e007      	b.n	801563a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801562a:	69fb      	ldr	r3, [r7, #28]
 801562c:	781a      	ldrb	r2, [r3, #0]
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8015634:	69fb      	ldr	r3, [r7, #28]
 8015636:	3301      	adds	r3, #1
 8015638:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015640:	b29b      	uxth	r3, r3
 8015642:	3b01      	subs	r3, #1
 8015644:	b29a      	uxth	r2, r3
 8015646:	68fb      	ldr	r3, [r7, #12]
 8015648:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 801564c:	68fb      	ldr	r3, [r7, #12]
 801564e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8015652:	b29b      	uxth	r3, r3
 8015654:	2b00      	cmp	r3, #0
 8015656:	d1c8      	bne.n	80155ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015658:	683b      	ldr	r3, [r7, #0]
 801565a:	9300      	str	r3, [sp, #0]
 801565c:	697b      	ldr	r3, [r7, #20]
 801565e:	2200      	movs	r2, #0
 8015660:	2140      	movs	r1, #64	; 0x40
 8015662:	68f8      	ldr	r0, [r7, #12]
 8015664:	f001 fc6c 	bl	8016f40 <UART_WaitOnFlagUntilTimeout>
 8015668:	4603      	mov	r3, r0
 801566a:	2b00      	cmp	r3, #0
 801566c:	d005      	beq.n	801567a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	2220      	movs	r2, #32
 8015672:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8015676:	2303      	movs	r3, #3
 8015678:	e006      	b.n	8015688 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801567a:	68fb      	ldr	r3, [r7, #12]
 801567c:	2220      	movs	r2, #32
 801567e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8015682:	2300      	movs	r3, #0
 8015684:	e000      	b.n	8015688 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8015686:	2302      	movs	r3, #2
  }
}
 8015688:	4618      	mov	r0, r3
 801568a:	3720      	adds	r7, #32
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b08a      	sub	sp, #40	; 0x28
 8015694:	af02      	add	r7, sp, #8
 8015696:	60f8      	str	r0, [r7, #12]
 8015698:	60b9      	str	r1, [r7, #8]
 801569a:	603b      	str	r3, [r7, #0]
 801569c:	4613      	mov	r3, r2
 801569e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80156a0:	68fb      	ldr	r3, [r7, #12]
 80156a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80156a6:	2b20      	cmp	r3, #32
 80156a8:	f040 80b5 	bne.w	8015816 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 80156ac:	68bb      	ldr	r3, [r7, #8]
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d002      	beq.n	80156b8 <HAL_UART_Receive+0x28>
 80156b2:	88fb      	ldrh	r3, [r7, #6]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d101      	bne.n	80156bc <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80156b8:	2301      	movs	r3, #1
 80156ba:	e0ad      	b.n	8015818 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	2200      	movs	r2, #0
 80156c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	2222      	movs	r2, #34	; 0x22
 80156c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80156cc:	68fb      	ldr	r3, [r7, #12]
 80156ce:	2200      	movs	r2, #0
 80156d0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80156d2:	f7f1 f999 	bl	8006a08 <HAL_GetTick>
 80156d6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	88fa      	ldrh	r2, [r7, #6]
 80156dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	88fa      	ldrh	r2, [r7, #6]
 80156e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80156e8:	68fb      	ldr	r3, [r7, #12]
 80156ea:	689b      	ldr	r3, [r3, #8]
 80156ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80156f0:	d10e      	bne.n	8015710 <HAL_UART_Receive+0x80>
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	691b      	ldr	r3, [r3, #16]
 80156f6:	2b00      	cmp	r3, #0
 80156f8:	d105      	bne.n	8015706 <HAL_UART_Receive+0x76>
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	f240 12ff 	movw	r2, #511	; 0x1ff
 8015700:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015704:	e02d      	b.n	8015762 <HAL_UART_Receive+0xd2>
 8015706:	68fb      	ldr	r3, [r7, #12]
 8015708:	22ff      	movs	r2, #255	; 0xff
 801570a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801570e:	e028      	b.n	8015762 <HAL_UART_Receive+0xd2>
 8015710:	68fb      	ldr	r3, [r7, #12]
 8015712:	689b      	ldr	r3, [r3, #8]
 8015714:	2b00      	cmp	r3, #0
 8015716:	d10d      	bne.n	8015734 <HAL_UART_Receive+0xa4>
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	691b      	ldr	r3, [r3, #16]
 801571c:	2b00      	cmp	r3, #0
 801571e:	d104      	bne.n	801572a <HAL_UART_Receive+0x9a>
 8015720:	68fb      	ldr	r3, [r7, #12]
 8015722:	22ff      	movs	r2, #255	; 0xff
 8015724:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015728:	e01b      	b.n	8015762 <HAL_UART_Receive+0xd2>
 801572a:	68fb      	ldr	r3, [r7, #12]
 801572c:	227f      	movs	r2, #127	; 0x7f
 801572e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015732:	e016      	b.n	8015762 <HAL_UART_Receive+0xd2>
 8015734:	68fb      	ldr	r3, [r7, #12]
 8015736:	689b      	ldr	r3, [r3, #8]
 8015738:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801573c:	d10d      	bne.n	801575a <HAL_UART_Receive+0xca>
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	691b      	ldr	r3, [r3, #16]
 8015742:	2b00      	cmp	r3, #0
 8015744:	d104      	bne.n	8015750 <HAL_UART_Receive+0xc0>
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	227f      	movs	r2, #127	; 0x7f
 801574a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801574e:	e008      	b.n	8015762 <HAL_UART_Receive+0xd2>
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	223f      	movs	r2, #63	; 0x3f
 8015754:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8015758:	e003      	b.n	8015762 <HAL_UART_Receive+0xd2>
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	2200      	movs	r2, #0
 801575e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8015762:	68fb      	ldr	r3, [r7, #12]
 8015764:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015768:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801576a:	68fb      	ldr	r3, [r7, #12]
 801576c:	689b      	ldr	r3, [r3, #8]
 801576e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8015772:	d108      	bne.n	8015786 <HAL_UART_Receive+0xf6>
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	691b      	ldr	r3, [r3, #16]
 8015778:	2b00      	cmp	r3, #0
 801577a:	d104      	bne.n	8015786 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 801577c:	2300      	movs	r3, #0
 801577e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8015780:	68bb      	ldr	r3, [r7, #8]
 8015782:	61bb      	str	r3, [r7, #24]
 8015784:	e003      	b.n	801578e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8015786:	68bb      	ldr	r3, [r7, #8]
 8015788:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801578a:	2300      	movs	r3, #0
 801578c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 801578e:	e036      	b.n	80157fe <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8015790:	683b      	ldr	r3, [r7, #0]
 8015792:	9300      	str	r3, [sp, #0]
 8015794:	697b      	ldr	r3, [r7, #20]
 8015796:	2200      	movs	r2, #0
 8015798:	2120      	movs	r1, #32
 801579a:	68f8      	ldr	r0, [r7, #12]
 801579c:	f001 fbd0 	bl	8016f40 <UART_WaitOnFlagUntilTimeout>
 80157a0:	4603      	mov	r3, r0
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d005      	beq.n	80157b2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	2220      	movs	r2, #32
 80157aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 80157ae:	2303      	movs	r3, #3
 80157b0:	e032      	b.n	8015818 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 80157b2:	69fb      	ldr	r3, [r7, #28]
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d10c      	bne.n	80157d2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157be:	b29a      	uxth	r2, r3
 80157c0:	8a7b      	ldrh	r3, [r7, #18]
 80157c2:	4013      	ands	r3, r2
 80157c4:	b29a      	uxth	r2, r3
 80157c6:	69bb      	ldr	r3, [r7, #24]
 80157c8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80157ca:	69bb      	ldr	r3, [r7, #24]
 80157cc:	3302      	adds	r3, #2
 80157ce:	61bb      	str	r3, [r7, #24]
 80157d0:	e00c      	b.n	80157ec <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	681b      	ldr	r3, [r3, #0]
 80157d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157d8:	b2da      	uxtb	r2, r3
 80157da:	8a7b      	ldrh	r3, [r7, #18]
 80157dc:	b2db      	uxtb	r3, r3
 80157de:	4013      	ands	r3, r2
 80157e0:	b2da      	uxtb	r2, r3
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	3301      	adds	r3, #1
 80157ea:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80157f2:	b29b      	uxth	r3, r3
 80157f4:	3b01      	subs	r3, #1
 80157f6:	b29a      	uxth	r2, r3
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015804:	b29b      	uxth	r3, r3
 8015806:	2b00      	cmp	r3, #0
 8015808:	d1c2      	bne.n	8015790 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	2220      	movs	r2, #32
 801580e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8015812:	2300      	movs	r3, #0
 8015814:	e000      	b.n	8015818 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8015816:	2302      	movs	r3, #2
  }
}
 8015818:	4618      	mov	r0, r3
 801581a:	3720      	adds	r7, #32
 801581c:	46bd      	mov	sp, r7
 801581e:	bd80      	pop	{r7, pc}

08015820 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015820:	b580      	push	{r7, lr}
 8015822:	b08a      	sub	sp, #40	; 0x28
 8015824:	af00      	add	r7, sp, #0
 8015826:	60f8      	str	r0, [r7, #12]
 8015828:	60b9      	str	r1, [r7, #8]
 801582a:	4613      	mov	r3, r2
 801582c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8015834:	2b20      	cmp	r3, #32
 8015836:	d137      	bne.n	80158a8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8015838:	68bb      	ldr	r3, [r7, #8]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d002      	beq.n	8015844 <HAL_UART_Receive_IT+0x24>
 801583e:	88fb      	ldrh	r3, [r7, #6]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d101      	bne.n	8015848 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8015844:	2301      	movs	r3, #1
 8015846:	e030      	b.n	80158aa <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	2200      	movs	r2, #0
 801584c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	4a18      	ldr	r2, [pc, #96]	; (80158b4 <HAL_UART_Receive_IT+0x94>)
 8015854:	4293      	cmp	r3, r2
 8015856:	d01f      	beq.n	8015898 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	681b      	ldr	r3, [r3, #0]
 801585c:	685b      	ldr	r3, [r3, #4]
 801585e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015862:	2b00      	cmp	r3, #0
 8015864:	d018      	beq.n	8015898 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015866:	68fb      	ldr	r3, [r7, #12]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	e853 3f00 	ldrex	r3, [r3]
 8015872:	613b      	str	r3, [r7, #16]
   return(result);
 8015874:	693b      	ldr	r3, [r7, #16]
 8015876:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801587a:	627b      	str	r3, [r7, #36]	; 0x24
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	461a      	mov	r2, r3
 8015882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015884:	623b      	str	r3, [r7, #32]
 8015886:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015888:	69f9      	ldr	r1, [r7, #28]
 801588a:	6a3a      	ldr	r2, [r7, #32]
 801588c:	e841 2300 	strex	r3, r2, [r1]
 8015890:	61bb      	str	r3, [r7, #24]
   return(result);
 8015892:	69bb      	ldr	r3, [r7, #24]
 8015894:	2b00      	cmp	r3, #0
 8015896:	d1e6      	bne.n	8015866 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015898:	88fb      	ldrh	r3, [r7, #6]
 801589a:	461a      	mov	r2, r3
 801589c:	68b9      	ldr	r1, [r7, #8]
 801589e:	68f8      	ldr	r0, [r7, #12]
 80158a0:	f001 fbbc 	bl	801701c <UART_Start_Receive_IT>
 80158a4:	4603      	mov	r3, r0
 80158a6:	e000      	b.n	80158aa <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80158a8:	2302      	movs	r3, #2
  }
}
 80158aa:	4618      	mov	r0, r3
 80158ac:	3728      	adds	r7, #40	; 0x28
 80158ae:	46bd      	mov	sp, r7
 80158b0:	bd80      	pop	{r7, pc}
 80158b2:	bf00      	nop
 80158b4:	58000c00 	.word	0x58000c00

080158b8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80158b8:	b580      	push	{r7, lr}
 80158ba:	b09a      	sub	sp, #104	; 0x68
 80158bc:	af00      	add	r7, sp, #0
 80158be:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	681b      	ldr	r3, [r3, #0]
 80158c4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80158c8:	e853 3f00 	ldrex	r3, [r3]
 80158cc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80158ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80158d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80158d4:	667b      	str	r3, [r7, #100]	; 0x64
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	681b      	ldr	r3, [r3, #0]
 80158da:	461a      	mov	r2, r3
 80158dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80158de:	657b      	str	r3, [r7, #84]	; 0x54
 80158e0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80158e2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80158e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80158e6:	e841 2300 	strex	r3, r2, [r1]
 80158ea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80158ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d1e6      	bne.n	80158c0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 80158f2:	687b      	ldr	r3, [r7, #4]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	3308      	adds	r3, #8
 80158f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80158fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158fc:	e853 3f00 	ldrex	r3, [r3]
 8015900:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8015902:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015904:	4b46      	ldr	r3, [pc, #280]	; (8015a20 <HAL_UART_AbortReceive+0x168>)
 8015906:	4013      	ands	r3, r2
 8015908:	663b      	str	r3, [r7, #96]	; 0x60
 801590a:	687b      	ldr	r3, [r7, #4]
 801590c:	681b      	ldr	r3, [r3, #0]
 801590e:	3308      	adds	r3, #8
 8015910:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015912:	643a      	str	r2, [r7, #64]	; 0x40
 8015914:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015916:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801591a:	e841 2300 	strex	r3, r2, [r1]
 801591e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8015920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015922:	2b00      	cmp	r3, #0
 8015924:	d1e5      	bne.n	80158f2 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801592a:	2b01      	cmp	r3, #1
 801592c:	d118      	bne.n	8015960 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 801592e:	687b      	ldr	r3, [r7, #4]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015934:	6a3b      	ldr	r3, [r7, #32]
 8015936:	e853 3f00 	ldrex	r3, [r3]
 801593a:	61fb      	str	r3, [r7, #28]
   return(result);
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	f023 0310 	bic.w	r3, r3, #16
 8015942:	65fb      	str	r3, [r7, #92]	; 0x5c
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	461a      	mov	r2, r3
 801594a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801594c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801594e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015950:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015954:	e841 2300 	strex	r3, r2, [r1]
 8015958:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801595a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801595c:	2b00      	cmp	r3, #0
 801595e:	d1e6      	bne.n	801592e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	681b      	ldr	r3, [r3, #0]
 8015964:	689b      	ldr	r3, [r3, #8]
 8015966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801596a:	2b40      	cmp	r3, #64	; 0x40
 801596c:	d13b      	bne.n	80159e6 <HAL_UART_AbortReceive+0x12e>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	3308      	adds	r3, #8
 8015974:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	e853 3f00 	ldrex	r3, [r3]
 801597c:	60bb      	str	r3, [r7, #8]
   return(result);
 801597e:	68bb      	ldr	r3, [r7, #8]
 8015980:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015984:	65bb      	str	r3, [r7, #88]	; 0x58
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	3308      	adds	r3, #8
 801598c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801598e:	61ba      	str	r2, [r7, #24]
 8015990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015992:	6979      	ldr	r1, [r7, #20]
 8015994:	69ba      	ldr	r2, [r7, #24]
 8015996:	e841 2300 	strex	r3, r2, [r1]
 801599a:	613b      	str	r3, [r7, #16]
   return(result);
 801599c:	693b      	ldr	r3, [r7, #16]
 801599e:	2b00      	cmp	r3, #0
 80159a0:	d1e5      	bne.n	801596e <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d01c      	beq.n	80159e6 <HAL_UART_AbortReceive+0x12e>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159b2:	2200      	movs	r2, #0
 80159b4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159bc:	4618      	mov	r0, r3
 80159be:	f7f3 ff11 	bl	80097e4 <HAL_DMA_Abort>
 80159c2:	4603      	mov	r3, r0
 80159c4:	2b00      	cmp	r3, #0
 80159c6:	d00e      	beq.n	80159e6 <HAL_UART_AbortReceive+0x12e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7f5 fba4 	bl	800b11c <HAL_DMA_GetError>
 80159d4:	4603      	mov	r3, r0
 80159d6:	2b20      	cmp	r3, #32
 80159d8:	d105      	bne.n	80159e6 <HAL_UART_AbortReceive+0x12e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	2210      	movs	r2, #16
 80159de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 80159e2:	2303      	movs	r3, #3
 80159e4:	e017      	b.n	8015a16 <HAL_UART_AbortReceive+0x15e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2200      	movs	r2, #0
 80159ea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	220f      	movs	r2, #15
 80159f4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	699a      	ldr	r2, [r3, #24]
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	681b      	ldr	r3, [r3, #0]
 8015a00:	f042 0208 	orr.w	r2, r2, #8
 8015a04:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	2220      	movs	r2, #32
 8015a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	2200      	movs	r2, #0
 8015a12:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8015a14:	2300      	movs	r3, #0
}
 8015a16:	4618      	mov	r0, r3
 8015a18:	3768      	adds	r7, #104	; 0x68
 8015a1a:	46bd      	mov	sp, r7
 8015a1c:	bd80      	pop	{r7, pc}
 8015a1e:	bf00      	nop
 8015a20:	effffffe 	.word	0xeffffffe

08015a24 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015a24:	b580      	push	{r7, lr}
 8015a26:	b0ba      	sub	sp, #232	; 0xe8
 8015a28:	af00      	add	r7, sp, #0
 8015a2a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	681b      	ldr	r3, [r3, #0]
 8015a30:	69db      	ldr	r3, [r3, #28]
 8015a32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	681b      	ldr	r3, [r3, #0]
 8015a44:	689b      	ldr	r3, [r3, #8]
 8015a46:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015a4a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8015a4e:	f640 030f 	movw	r3, #2063	; 0x80f
 8015a52:	4013      	ands	r3, r2
 8015a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8015a58:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d11b      	bne.n	8015a98 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015a60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015a64:	f003 0320 	and.w	r3, r3, #32
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d015      	beq.n	8015a98 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015a6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015a70:	f003 0320 	and.w	r3, r3, #32
 8015a74:	2b00      	cmp	r3, #0
 8015a76:	d105      	bne.n	8015a84 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015a80:	2b00      	cmp	r3, #0
 8015a82:	d009      	beq.n	8015a98 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8015a84:	687b      	ldr	r3, [r7, #4]
 8015a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a88:	2b00      	cmp	r3, #0
 8015a8a:	f000 8377 	beq.w	801617c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8015a8e:	687b      	ldr	r3, [r7, #4]
 8015a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015a92:	6878      	ldr	r0, [r7, #4]
 8015a94:	4798      	blx	r3
      }
      return;
 8015a96:	e371      	b.n	801617c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015a98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8015a9c:	2b00      	cmp	r3, #0
 8015a9e:	f000 8123 	beq.w	8015ce8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015aa2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015aa6:	4b8d      	ldr	r3, [pc, #564]	; (8015cdc <HAL_UART_IRQHandler+0x2b8>)
 8015aa8:	4013      	ands	r3, r2
 8015aaa:	2b00      	cmp	r3, #0
 8015aac:	d106      	bne.n	8015abc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015aae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8015ab2:	4b8b      	ldr	r3, [pc, #556]	; (8015ce0 <HAL_UART_IRQHandler+0x2bc>)
 8015ab4:	4013      	ands	r3, r2
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	f000 8116 	beq.w	8015ce8 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015ac0:	f003 0301 	and.w	r3, r3, #1
 8015ac4:	2b00      	cmp	r3, #0
 8015ac6:	d011      	beq.n	8015aec <HAL_UART_IRQHandler+0xc8>
 8015ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015acc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ad0:	2b00      	cmp	r3, #0
 8015ad2:	d00b      	beq.n	8015aec <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	2201      	movs	r2, #1
 8015ada:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ae2:	f043 0201 	orr.w	r2, r3, #1
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015af0:	f003 0302 	and.w	r3, r3, #2
 8015af4:	2b00      	cmp	r3, #0
 8015af6:	d011      	beq.n	8015b1c <HAL_UART_IRQHandler+0xf8>
 8015af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015afc:	f003 0301 	and.w	r3, r3, #1
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d00b      	beq.n	8015b1c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	681b      	ldr	r3, [r3, #0]
 8015b08:	2202      	movs	r2, #2
 8015b0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b12:	f043 0204 	orr.w	r2, r3, #4
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015b1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b20:	f003 0304 	and.w	r3, r3, #4
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d011      	beq.n	8015b4c <HAL_UART_IRQHandler+0x128>
 8015b28:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015b2c:	f003 0301 	and.w	r3, r3, #1
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d00b      	beq.n	8015b4c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015b34:	687b      	ldr	r3, [r7, #4]
 8015b36:	681b      	ldr	r3, [r3, #0]
 8015b38:	2204      	movs	r2, #4
 8015b3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b42:	f043 0202 	orr.w	r2, r3, #2
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b50:	f003 0308 	and.w	r3, r3, #8
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	d017      	beq.n	8015b88 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015b5c:	f003 0320 	and.w	r3, r3, #32
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d105      	bne.n	8015b70 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8015b64:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8015b68:	4b5c      	ldr	r3, [pc, #368]	; (8015cdc <HAL_UART_IRQHandler+0x2b8>)
 8015b6a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015b6c:	2b00      	cmp	r3, #0
 8015b6e:	d00b      	beq.n	8015b88 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015b70:	687b      	ldr	r3, [r7, #4]
 8015b72:	681b      	ldr	r3, [r3, #0]
 8015b74:	2208      	movs	r2, #8
 8015b76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015b78:	687b      	ldr	r3, [r7, #4]
 8015b7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015b7e:	f043 0208 	orr.w	r2, r3, #8
 8015b82:	687b      	ldr	r3, [r7, #4]
 8015b84:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015b88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015b90:	2b00      	cmp	r3, #0
 8015b92:	d012      	beq.n	8015bba <HAL_UART_IRQHandler+0x196>
 8015b94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015b98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015b9c:	2b00      	cmp	r3, #0
 8015b9e:	d00c      	beq.n	8015bba <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ba8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015bb0:	f043 0220 	orr.w	r2, r3, #32
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	f000 82dd 	beq.w	8016180 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015bca:	f003 0320 	and.w	r3, r3, #32
 8015bce:	2b00      	cmp	r3, #0
 8015bd0:	d013      	beq.n	8015bfa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015bd6:	f003 0320 	and.w	r3, r3, #32
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d105      	bne.n	8015bea <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015bde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8015be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d007      	beq.n	8015bfa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bee:	2b00      	cmp	r3, #0
 8015bf0:	d003      	beq.n	8015bfa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015bf6:	6878      	ldr	r0, [r7, #4]
 8015bf8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015c00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c04:	687b      	ldr	r3, [r7, #4]
 8015c06:	681b      	ldr	r3, [r3, #0]
 8015c08:	689b      	ldr	r3, [r3, #8]
 8015c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c0e:	2b40      	cmp	r3, #64	; 0x40
 8015c10:	d005      	beq.n	8015c1e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8015c12:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8015c16:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8015c1a:	2b00      	cmp	r3, #0
 8015c1c:	d054      	beq.n	8015cc8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8015c1e:	6878      	ldr	r0, [r7, #4]
 8015c20:	f001 fb1e 	bl	8017260 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	689b      	ldr	r3, [r3, #8]
 8015c2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c2e:	2b40      	cmp	r3, #64	; 0x40
 8015c30:	d146      	bne.n	8015cc0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015c32:	687b      	ldr	r3, [r7, #4]
 8015c34:	681b      	ldr	r3, [r3, #0]
 8015c36:	3308      	adds	r3, #8
 8015c38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015c3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8015c40:	e853 3f00 	ldrex	r3, [r3]
 8015c44:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8015c48:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8015c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015c50:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	681b      	ldr	r3, [r3, #0]
 8015c58:	3308      	adds	r3, #8
 8015c5a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8015c5e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8015c62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015c66:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8015c6a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8015c6e:	e841 2300 	strex	r3, r2, [r1]
 8015c72:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8015c76:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8015c7a:	2b00      	cmp	r3, #0
 8015c7c:	d1d9      	bne.n	8015c32 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c84:	2b00      	cmp	r3, #0
 8015c86:	d017      	beq.n	8015cb8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c8e:	4a15      	ldr	r2, [pc, #84]	; (8015ce4 <HAL_UART_IRQHandler+0x2c0>)
 8015c90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015c98:	4618      	mov	r0, r3
 8015c9a:	f7f4 f8c1 	bl	8009e20 <HAL_DMA_Abort_IT>
 8015c9e:	4603      	mov	r3, r0
 8015ca0:	2b00      	cmp	r3, #0
 8015ca2:	d019      	beq.n	8015cd8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8015ca4:	687b      	ldr	r3, [r7, #4]
 8015ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015caa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015cac:	687a      	ldr	r2, [r7, #4]
 8015cae:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8015cb2:	4610      	mov	r0, r2
 8015cb4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015cb6:	e00f      	b.n	8015cd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8015cb8:	6878      	ldr	r0, [r7, #4]
 8015cba:	f000 fa77 	bl	80161ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015cbe:	e00b      	b.n	8015cd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8015cc0:	6878      	ldr	r0, [r7, #4]
 8015cc2:	f000 fa73 	bl	80161ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015cc6:	e007      	b.n	8015cd8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8015cc8:	6878      	ldr	r0, [r7, #4]
 8015cca:	f000 fa6f 	bl	80161ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015cce:	687b      	ldr	r3, [r7, #4]
 8015cd0:	2200      	movs	r2, #0
 8015cd2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8015cd6:	e253      	b.n	8016180 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015cd8:	bf00      	nop
    return;
 8015cda:	e251      	b.n	8016180 <HAL_UART_IRQHandler+0x75c>
 8015cdc:	10000001 	.word	0x10000001
 8015ce0:	04000120 	.word	0x04000120
 8015ce4:	0801732d 	.word	0x0801732d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015cec:	2b01      	cmp	r3, #1
 8015cee:	f040 81e7 	bne.w	80160c0 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8015cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8015cf6:	f003 0310 	and.w	r3, r3, #16
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	f000 81e0 	beq.w	80160c0 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8015d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8015d04:	f003 0310 	and.w	r3, r3, #16
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	f000 81d9 	beq.w	80160c0 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	2210      	movs	r2, #16
 8015d14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	689b      	ldr	r3, [r3, #8]
 8015d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015d20:	2b40      	cmp	r3, #64	; 0x40
 8015d22:	f040 8151 	bne.w	8015fc8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8015d26:	687b      	ldr	r3, [r7, #4]
 8015d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d2c:	681b      	ldr	r3, [r3, #0]
 8015d2e:	4a96      	ldr	r2, [pc, #600]	; (8015f88 <HAL_UART_IRQHandler+0x564>)
 8015d30:	4293      	cmp	r3, r2
 8015d32:	d068      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015d34:	687b      	ldr	r3, [r7, #4]
 8015d36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d3a:	681b      	ldr	r3, [r3, #0]
 8015d3c:	4a93      	ldr	r2, [pc, #588]	; (8015f8c <HAL_UART_IRQHandler+0x568>)
 8015d3e:	4293      	cmp	r3, r2
 8015d40:	d061      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d48:	681b      	ldr	r3, [r3, #0]
 8015d4a:	4a91      	ldr	r2, [pc, #580]	; (8015f90 <HAL_UART_IRQHandler+0x56c>)
 8015d4c:	4293      	cmp	r3, r2
 8015d4e:	d05a      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	4a8e      	ldr	r2, [pc, #568]	; (8015f94 <HAL_UART_IRQHandler+0x570>)
 8015d5a:	4293      	cmp	r3, r2
 8015d5c:	d053      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	4a8c      	ldr	r2, [pc, #560]	; (8015f98 <HAL_UART_IRQHandler+0x574>)
 8015d68:	4293      	cmp	r3, r2
 8015d6a:	d04c      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	4a89      	ldr	r2, [pc, #548]	; (8015f9c <HAL_UART_IRQHandler+0x578>)
 8015d76:	4293      	cmp	r3, r2
 8015d78:	d045      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d80:	681b      	ldr	r3, [r3, #0]
 8015d82:	4a87      	ldr	r2, [pc, #540]	; (8015fa0 <HAL_UART_IRQHandler+0x57c>)
 8015d84:	4293      	cmp	r3, r2
 8015d86:	d03e      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015d88:	687b      	ldr	r3, [r7, #4]
 8015d8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	4a84      	ldr	r2, [pc, #528]	; (8015fa4 <HAL_UART_IRQHandler+0x580>)
 8015d92:	4293      	cmp	r3, r2
 8015d94:	d037      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015d96:	687b      	ldr	r3, [r7, #4]
 8015d98:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015d9c:	681b      	ldr	r3, [r3, #0]
 8015d9e:	4a82      	ldr	r2, [pc, #520]	; (8015fa8 <HAL_UART_IRQHandler+0x584>)
 8015da0:	4293      	cmp	r3, r2
 8015da2:	d030      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	4a7f      	ldr	r2, [pc, #508]	; (8015fac <HAL_UART_IRQHandler+0x588>)
 8015dae:	4293      	cmp	r3, r2
 8015db0:	d029      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	4a7d      	ldr	r2, [pc, #500]	; (8015fb0 <HAL_UART_IRQHandler+0x58c>)
 8015dbc:	4293      	cmp	r3, r2
 8015dbe:	d022      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	4a7a      	ldr	r2, [pc, #488]	; (8015fb4 <HAL_UART_IRQHandler+0x590>)
 8015dca:	4293      	cmp	r3, r2
 8015dcc:	d01b      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015dce:	687b      	ldr	r3, [r7, #4]
 8015dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015dd4:	681b      	ldr	r3, [r3, #0]
 8015dd6:	4a78      	ldr	r2, [pc, #480]	; (8015fb8 <HAL_UART_IRQHandler+0x594>)
 8015dd8:	4293      	cmp	r3, r2
 8015dda:	d014      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	4a75      	ldr	r2, [pc, #468]	; (8015fbc <HAL_UART_IRQHandler+0x598>)
 8015de6:	4293      	cmp	r3, r2
 8015de8:	d00d      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015df0:	681b      	ldr	r3, [r3, #0]
 8015df2:	4a73      	ldr	r2, [pc, #460]	; (8015fc0 <HAL_UART_IRQHandler+0x59c>)
 8015df4:	4293      	cmp	r3, r2
 8015df6:	d006      	beq.n	8015e06 <HAL_UART_IRQHandler+0x3e2>
 8015df8:	687b      	ldr	r3, [r7, #4]
 8015dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	4a70      	ldr	r2, [pc, #448]	; (8015fc4 <HAL_UART_IRQHandler+0x5a0>)
 8015e02:	4293      	cmp	r3, r2
 8015e04:	d106      	bne.n	8015e14 <HAL_UART_IRQHandler+0x3f0>
 8015e06:	687b      	ldr	r3, [r7, #4]
 8015e08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	685b      	ldr	r3, [r3, #4]
 8015e10:	b29b      	uxth	r3, r3
 8015e12:	e005      	b.n	8015e20 <HAL_UART_IRQHandler+0x3fc>
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	685b      	ldr	r3, [r3, #4]
 8015e1e:	b29b      	uxth	r3, r3
 8015e20:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8015e24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8015e28:	2b00      	cmp	r3, #0
 8015e2a:	f000 81ab 	beq.w	8016184 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8015e34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015e38:	429a      	cmp	r2, r3
 8015e3a:	f080 81a3 	bcs.w	8016184 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8015e3e:	687b      	ldr	r3, [r7, #4]
 8015e40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8015e44:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8015e48:	687b      	ldr	r3, [r7, #4]
 8015e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015e4e:	69db      	ldr	r3, [r3, #28]
 8015e50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015e54:	f000 8087 	beq.w	8015f66 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015e64:	e853 3f00 	ldrex	r3, [r3]
 8015e68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8015e6c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8015e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8015e74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8015e78:	687b      	ldr	r3, [r7, #4]
 8015e7a:	681b      	ldr	r3, [r3, #0]
 8015e7c:	461a      	mov	r2, r3
 8015e7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8015e82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8015e86:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e8a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8015e8e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8015e92:	e841 2300 	strex	r3, r2, [r1]
 8015e96:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8015e9a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	d1da      	bne.n	8015e58 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	3308      	adds	r3, #8
 8015ea8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015eaa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015eac:	e853 3f00 	ldrex	r3, [r3]
 8015eb0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8015eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015eb4:	f023 0301 	bic.w	r3, r3, #1
 8015eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	681b      	ldr	r3, [r3, #0]
 8015ec0:	3308      	adds	r3, #8
 8015ec2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8015ec6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8015eca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015ecc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8015ece:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8015ed2:	e841 2300 	strex	r3, r2, [r1]
 8015ed6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8015ed8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d1e1      	bne.n	8015ea2 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	3308      	adds	r3, #8
 8015ee4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ee6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8015ee8:	e853 3f00 	ldrex	r3, [r3]
 8015eec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8015eee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8015ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8015ef8:	687b      	ldr	r3, [r7, #4]
 8015efa:	681b      	ldr	r3, [r3, #0]
 8015efc:	3308      	adds	r3, #8
 8015efe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8015f02:	66fa      	str	r2, [r7, #108]	; 0x6c
 8015f04:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f06:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8015f08:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015f0a:	e841 2300 	strex	r3, r2, [r1]
 8015f0e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8015f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d1e3      	bne.n	8015ede <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2220      	movs	r2, #32
 8015f1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	2200      	movs	r2, #0
 8015f22:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015f24:	687b      	ldr	r3, [r7, #4]
 8015f26:	681b      	ldr	r3, [r3, #0]
 8015f28:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8015f2c:	e853 3f00 	ldrex	r3, [r3]
 8015f30:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8015f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015f34:	f023 0310 	bic.w	r3, r3, #16
 8015f38:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	681b      	ldr	r3, [r3, #0]
 8015f40:	461a      	mov	r2, r3
 8015f42:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8015f46:	65bb      	str	r3, [r7, #88]	; 0x58
 8015f48:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015f4a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8015f4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8015f4e:	e841 2300 	strex	r3, r2, [r1]
 8015f52:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8015f54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	d1e4      	bne.n	8015f24 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f60:	4618      	mov	r0, r3
 8015f62:	f7f3 fc3f 	bl	80097e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	2202      	movs	r2, #2
 8015f6a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	1ad3      	subs	r3, r2, r3
 8015f7c:	b29b      	uxth	r3, r3
 8015f7e:	4619      	mov	r1, r3
 8015f80:	6878      	ldr	r0, [r7, #4]
 8015f82:	f000 f91d 	bl	80161c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8015f86:	e0fd      	b.n	8016184 <HAL_UART_IRQHandler+0x760>
 8015f88:	40020010 	.word	0x40020010
 8015f8c:	40020028 	.word	0x40020028
 8015f90:	40020040 	.word	0x40020040
 8015f94:	40020058 	.word	0x40020058
 8015f98:	40020070 	.word	0x40020070
 8015f9c:	40020088 	.word	0x40020088
 8015fa0:	400200a0 	.word	0x400200a0
 8015fa4:	400200b8 	.word	0x400200b8
 8015fa8:	40020410 	.word	0x40020410
 8015fac:	40020428 	.word	0x40020428
 8015fb0:	40020440 	.word	0x40020440
 8015fb4:	40020458 	.word	0x40020458
 8015fb8:	40020470 	.word	0x40020470
 8015fbc:	40020488 	.word	0x40020488
 8015fc0:	400204a0 	.word	0x400204a0
 8015fc4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015fd4:	b29b      	uxth	r3, r3
 8015fd6:	1ad3      	subs	r3, r2, r3
 8015fd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015fe2:	b29b      	uxth	r3, r3
 8015fe4:	2b00      	cmp	r3, #0
 8015fe6:	f000 80cf 	beq.w	8016188 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8015fea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	f000 80ca 	beq.w	8016188 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015ff4:	687b      	ldr	r3, [r7, #4]
 8015ff6:	681b      	ldr	r3, [r3, #0]
 8015ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ffc:	e853 3f00 	ldrex	r3, [r3]
 8016000:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016002:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016004:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016008:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	681b      	ldr	r3, [r3, #0]
 8016010:	461a      	mov	r2, r3
 8016012:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8016016:	647b      	str	r3, [r7, #68]	; 0x44
 8016018:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801601a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801601c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801601e:	e841 2300 	strex	r3, r2, [r1]
 8016022:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016026:	2b00      	cmp	r3, #0
 8016028:	d1e4      	bne.n	8015ff4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	681b      	ldr	r3, [r3, #0]
 801602e:	3308      	adds	r3, #8
 8016030:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016034:	e853 3f00 	ldrex	r3, [r3]
 8016038:	623b      	str	r3, [r7, #32]
   return(result);
 801603a:	6a3a      	ldr	r2, [r7, #32]
 801603c:	4b55      	ldr	r3, [pc, #340]	; (8016194 <HAL_UART_IRQHandler+0x770>)
 801603e:	4013      	ands	r3, r2
 8016040:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	681b      	ldr	r3, [r3, #0]
 8016048:	3308      	adds	r3, #8
 801604a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801604e:	633a      	str	r2, [r7, #48]	; 0x30
 8016050:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016052:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016054:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016056:	e841 2300 	strex	r3, r2, [r1]
 801605a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801605c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801605e:	2b00      	cmp	r3, #0
 8016060:	d1e3      	bne.n	801602a <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2220      	movs	r2, #32
 8016066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801606a:	687b      	ldr	r3, [r7, #4]
 801606c:	2200      	movs	r2, #0
 801606e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	2200      	movs	r2, #0
 8016074:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016076:	687b      	ldr	r3, [r7, #4]
 8016078:	681b      	ldr	r3, [r3, #0]
 801607a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801607c:	693b      	ldr	r3, [r7, #16]
 801607e:	e853 3f00 	ldrex	r3, [r3]
 8016082:	60fb      	str	r3, [r7, #12]
   return(result);
 8016084:	68fb      	ldr	r3, [r7, #12]
 8016086:	f023 0310 	bic.w	r3, r3, #16
 801608a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	461a      	mov	r2, r3
 8016094:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8016098:	61fb      	str	r3, [r7, #28]
 801609a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801609c:	69b9      	ldr	r1, [r7, #24]
 801609e:	69fa      	ldr	r2, [r7, #28]
 80160a0:	e841 2300 	strex	r3, r2, [r1]
 80160a4:	617b      	str	r3, [r7, #20]
   return(result);
 80160a6:	697b      	ldr	r3, [r7, #20]
 80160a8:	2b00      	cmp	r3, #0
 80160aa:	d1e4      	bne.n	8016076 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	2202      	movs	r2, #2
 80160b0:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80160b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80160b6:	4619      	mov	r1, r3
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f000 f881 	bl	80161c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80160be:	e063      	b.n	8016188 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80160c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80160c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80160c8:	2b00      	cmp	r3, #0
 80160ca:	d00e      	beq.n	80160ea <HAL_UART_IRQHandler+0x6c6>
 80160cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80160d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d008      	beq.n	80160ea <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80160d8:	687b      	ldr	r3, [r7, #4]
 80160da:	681b      	ldr	r3, [r3, #0]
 80160dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80160e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80160e2:	6878      	ldr	r0, [r7, #4]
 80160e4:	f001 fe80 	bl	8017de8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80160e8:	e051      	b.n	801618e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80160ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80160ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d014      	beq.n	8016120 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80160f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80160fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80160fe:	2b00      	cmp	r3, #0
 8016100:	d105      	bne.n	801610e <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8016106:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801610a:	2b00      	cmp	r3, #0
 801610c:	d008      	beq.n	8016120 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016112:	2b00      	cmp	r3, #0
 8016114:	d03a      	beq.n	801618c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801611a:	6878      	ldr	r0, [r7, #4]
 801611c:	4798      	blx	r3
    }
    return;
 801611e:	e035      	b.n	801618c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016120:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016128:	2b00      	cmp	r3, #0
 801612a:	d009      	beq.n	8016140 <HAL_UART_IRQHandler+0x71c>
 801612c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016134:	2b00      	cmp	r3, #0
 8016136:	d003      	beq.n	8016140 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8016138:	6878      	ldr	r0, [r7, #4]
 801613a:	f001 f90d 	bl	8017358 <UART_EndTransmit_IT>
    return;
 801613e:	e026      	b.n	801618e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016144:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016148:	2b00      	cmp	r3, #0
 801614a:	d009      	beq.n	8016160 <HAL_UART_IRQHandler+0x73c>
 801614c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8016154:	2b00      	cmp	r3, #0
 8016156:	d003      	beq.n	8016160 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8016158:	6878      	ldr	r0, [r7, #4]
 801615a:	f001 fe59 	bl	8017e10 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801615e:	e016      	b.n	801618e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8016164:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8016168:	2b00      	cmp	r3, #0
 801616a:	d010      	beq.n	801618e <HAL_UART_IRQHandler+0x76a>
 801616c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8016170:	2b00      	cmp	r3, #0
 8016172:	da0c      	bge.n	801618e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f001 fe41 	bl	8017dfc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801617a:	e008      	b.n	801618e <HAL_UART_IRQHandler+0x76a>
      return;
 801617c:	bf00      	nop
 801617e:	e006      	b.n	801618e <HAL_UART_IRQHandler+0x76a>
    return;
 8016180:	bf00      	nop
 8016182:	e004      	b.n	801618e <HAL_UART_IRQHandler+0x76a>
      return;
 8016184:	bf00      	nop
 8016186:	e002      	b.n	801618e <HAL_UART_IRQHandler+0x76a>
      return;
 8016188:	bf00      	nop
 801618a:	e000      	b.n	801618e <HAL_UART_IRQHandler+0x76a>
    return;
 801618c:	bf00      	nop
  }
}
 801618e:	37e8      	adds	r7, #232	; 0xe8
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}
 8016194:	effffffe 	.word	0xeffffffe

08016198 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8016198:	b480      	push	{r7}
 801619a:	b083      	sub	sp, #12
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80161a0:	bf00      	nop
 80161a2:	370c      	adds	r7, #12
 80161a4:	46bd      	mov	sp, r7
 80161a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161aa:	4770      	bx	lr

080161ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80161ac:	b480      	push	{r7}
 80161ae:	b083      	sub	sp, #12
 80161b0:	af00      	add	r7, sp, #0
 80161b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80161b4:	bf00      	nop
 80161b6:	370c      	adds	r7, #12
 80161b8:	46bd      	mov	sp, r7
 80161ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161be:	4770      	bx	lr

080161c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80161c0:	b480      	push	{r7}
 80161c2:	b083      	sub	sp, #12
 80161c4:	af00      	add	r7, sp, #0
 80161c6:	6078      	str	r0, [r7, #4]
 80161c8:	460b      	mov	r3, r1
 80161ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80161cc:	bf00      	nop
 80161ce:	370c      	adds	r7, #12
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr

080161d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80161d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80161dc:	b092      	sub	sp, #72	; 0x48
 80161de:	af00      	add	r7, sp, #0
 80161e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80161e2:	2300      	movs	r3, #0
 80161e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80161e8:	697b      	ldr	r3, [r7, #20]
 80161ea:	689a      	ldr	r2, [r3, #8]
 80161ec:	697b      	ldr	r3, [r7, #20]
 80161ee:	691b      	ldr	r3, [r3, #16]
 80161f0:	431a      	orrs	r2, r3
 80161f2:	697b      	ldr	r3, [r7, #20]
 80161f4:	695b      	ldr	r3, [r3, #20]
 80161f6:	431a      	orrs	r2, r3
 80161f8:	697b      	ldr	r3, [r7, #20]
 80161fa:	69db      	ldr	r3, [r3, #28]
 80161fc:	4313      	orrs	r3, r2
 80161fe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8016200:	697b      	ldr	r3, [r7, #20]
 8016202:	681b      	ldr	r3, [r3, #0]
 8016204:	681a      	ldr	r2, [r3, #0]
 8016206:	4bbe      	ldr	r3, [pc, #760]	; (8016500 <UART_SetConfig+0x328>)
 8016208:	4013      	ands	r3, r2
 801620a:	697a      	ldr	r2, [r7, #20]
 801620c:	6812      	ldr	r2, [r2, #0]
 801620e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016210:	430b      	orrs	r3, r1
 8016212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8016214:	697b      	ldr	r3, [r7, #20]
 8016216:	681b      	ldr	r3, [r3, #0]
 8016218:	685b      	ldr	r3, [r3, #4]
 801621a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801621e:	697b      	ldr	r3, [r7, #20]
 8016220:	68da      	ldr	r2, [r3, #12]
 8016222:	697b      	ldr	r3, [r7, #20]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	430a      	orrs	r2, r1
 8016228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801622a:	697b      	ldr	r3, [r7, #20]
 801622c:	699b      	ldr	r3, [r3, #24]
 801622e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016230:	697b      	ldr	r3, [r7, #20]
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	4ab3      	ldr	r2, [pc, #716]	; (8016504 <UART_SetConfig+0x32c>)
 8016236:	4293      	cmp	r3, r2
 8016238:	d004      	beq.n	8016244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801623a:	697b      	ldr	r3, [r7, #20]
 801623c:	6a1b      	ldr	r3, [r3, #32]
 801623e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016240:	4313      	orrs	r3, r2
 8016242:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8016244:	697b      	ldr	r3, [r7, #20]
 8016246:	681b      	ldr	r3, [r3, #0]
 8016248:	689a      	ldr	r2, [r3, #8]
 801624a:	4baf      	ldr	r3, [pc, #700]	; (8016508 <UART_SetConfig+0x330>)
 801624c:	4013      	ands	r3, r2
 801624e:	697a      	ldr	r2, [r7, #20]
 8016250:	6812      	ldr	r2, [r2, #0]
 8016252:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8016254:	430b      	orrs	r3, r1
 8016256:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016258:	697b      	ldr	r3, [r7, #20]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801625e:	f023 010f 	bic.w	r1, r3, #15
 8016262:	697b      	ldr	r3, [r7, #20]
 8016264:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016266:	697b      	ldr	r3, [r7, #20]
 8016268:	681b      	ldr	r3, [r3, #0]
 801626a:	430a      	orrs	r2, r1
 801626c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801626e:	697b      	ldr	r3, [r7, #20]
 8016270:	681b      	ldr	r3, [r3, #0]
 8016272:	4aa6      	ldr	r2, [pc, #664]	; (801650c <UART_SetConfig+0x334>)
 8016274:	4293      	cmp	r3, r2
 8016276:	d177      	bne.n	8016368 <UART_SetConfig+0x190>
 8016278:	4ba5      	ldr	r3, [pc, #660]	; (8016510 <UART_SetConfig+0x338>)
 801627a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801627c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8016280:	2b28      	cmp	r3, #40	; 0x28
 8016282:	d86d      	bhi.n	8016360 <UART_SetConfig+0x188>
 8016284:	a201      	add	r2, pc, #4	; (adr r2, 801628c <UART_SetConfig+0xb4>)
 8016286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801628a:	bf00      	nop
 801628c:	08016331 	.word	0x08016331
 8016290:	08016361 	.word	0x08016361
 8016294:	08016361 	.word	0x08016361
 8016298:	08016361 	.word	0x08016361
 801629c:	08016361 	.word	0x08016361
 80162a0:	08016361 	.word	0x08016361
 80162a4:	08016361 	.word	0x08016361
 80162a8:	08016361 	.word	0x08016361
 80162ac:	08016339 	.word	0x08016339
 80162b0:	08016361 	.word	0x08016361
 80162b4:	08016361 	.word	0x08016361
 80162b8:	08016361 	.word	0x08016361
 80162bc:	08016361 	.word	0x08016361
 80162c0:	08016361 	.word	0x08016361
 80162c4:	08016361 	.word	0x08016361
 80162c8:	08016361 	.word	0x08016361
 80162cc:	08016341 	.word	0x08016341
 80162d0:	08016361 	.word	0x08016361
 80162d4:	08016361 	.word	0x08016361
 80162d8:	08016361 	.word	0x08016361
 80162dc:	08016361 	.word	0x08016361
 80162e0:	08016361 	.word	0x08016361
 80162e4:	08016361 	.word	0x08016361
 80162e8:	08016361 	.word	0x08016361
 80162ec:	08016349 	.word	0x08016349
 80162f0:	08016361 	.word	0x08016361
 80162f4:	08016361 	.word	0x08016361
 80162f8:	08016361 	.word	0x08016361
 80162fc:	08016361 	.word	0x08016361
 8016300:	08016361 	.word	0x08016361
 8016304:	08016361 	.word	0x08016361
 8016308:	08016361 	.word	0x08016361
 801630c:	08016351 	.word	0x08016351
 8016310:	08016361 	.word	0x08016361
 8016314:	08016361 	.word	0x08016361
 8016318:	08016361 	.word	0x08016361
 801631c:	08016361 	.word	0x08016361
 8016320:	08016361 	.word	0x08016361
 8016324:	08016361 	.word	0x08016361
 8016328:	08016361 	.word	0x08016361
 801632c:	08016359 	.word	0x08016359
 8016330:	2301      	movs	r3, #1
 8016332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016336:	e222      	b.n	801677e <UART_SetConfig+0x5a6>
 8016338:	2304      	movs	r3, #4
 801633a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801633e:	e21e      	b.n	801677e <UART_SetConfig+0x5a6>
 8016340:	2308      	movs	r3, #8
 8016342:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016346:	e21a      	b.n	801677e <UART_SetConfig+0x5a6>
 8016348:	2310      	movs	r3, #16
 801634a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801634e:	e216      	b.n	801677e <UART_SetConfig+0x5a6>
 8016350:	2320      	movs	r3, #32
 8016352:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016356:	e212      	b.n	801677e <UART_SetConfig+0x5a6>
 8016358:	2340      	movs	r3, #64	; 0x40
 801635a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801635e:	e20e      	b.n	801677e <UART_SetConfig+0x5a6>
 8016360:	2380      	movs	r3, #128	; 0x80
 8016362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016366:	e20a      	b.n	801677e <UART_SetConfig+0x5a6>
 8016368:	697b      	ldr	r3, [r7, #20]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	4a69      	ldr	r2, [pc, #420]	; (8016514 <UART_SetConfig+0x33c>)
 801636e:	4293      	cmp	r3, r2
 8016370:	d130      	bne.n	80163d4 <UART_SetConfig+0x1fc>
 8016372:	4b67      	ldr	r3, [pc, #412]	; (8016510 <UART_SetConfig+0x338>)
 8016374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016376:	f003 0307 	and.w	r3, r3, #7
 801637a:	2b05      	cmp	r3, #5
 801637c:	d826      	bhi.n	80163cc <UART_SetConfig+0x1f4>
 801637e:	a201      	add	r2, pc, #4	; (adr r2, 8016384 <UART_SetConfig+0x1ac>)
 8016380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016384:	0801639d 	.word	0x0801639d
 8016388:	080163a5 	.word	0x080163a5
 801638c:	080163ad 	.word	0x080163ad
 8016390:	080163b5 	.word	0x080163b5
 8016394:	080163bd 	.word	0x080163bd
 8016398:	080163c5 	.word	0x080163c5
 801639c:	2300      	movs	r3, #0
 801639e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163a2:	e1ec      	b.n	801677e <UART_SetConfig+0x5a6>
 80163a4:	2304      	movs	r3, #4
 80163a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163aa:	e1e8      	b.n	801677e <UART_SetConfig+0x5a6>
 80163ac:	2308      	movs	r3, #8
 80163ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163b2:	e1e4      	b.n	801677e <UART_SetConfig+0x5a6>
 80163b4:	2310      	movs	r3, #16
 80163b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163ba:	e1e0      	b.n	801677e <UART_SetConfig+0x5a6>
 80163bc:	2320      	movs	r3, #32
 80163be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163c2:	e1dc      	b.n	801677e <UART_SetConfig+0x5a6>
 80163c4:	2340      	movs	r3, #64	; 0x40
 80163c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163ca:	e1d8      	b.n	801677e <UART_SetConfig+0x5a6>
 80163cc:	2380      	movs	r3, #128	; 0x80
 80163ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80163d2:	e1d4      	b.n	801677e <UART_SetConfig+0x5a6>
 80163d4:	697b      	ldr	r3, [r7, #20]
 80163d6:	681b      	ldr	r3, [r3, #0]
 80163d8:	4a4f      	ldr	r2, [pc, #316]	; (8016518 <UART_SetConfig+0x340>)
 80163da:	4293      	cmp	r3, r2
 80163dc:	d130      	bne.n	8016440 <UART_SetConfig+0x268>
 80163de:	4b4c      	ldr	r3, [pc, #304]	; (8016510 <UART_SetConfig+0x338>)
 80163e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80163e2:	f003 0307 	and.w	r3, r3, #7
 80163e6:	2b05      	cmp	r3, #5
 80163e8:	d826      	bhi.n	8016438 <UART_SetConfig+0x260>
 80163ea:	a201      	add	r2, pc, #4	; (adr r2, 80163f0 <UART_SetConfig+0x218>)
 80163ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163f0:	08016409 	.word	0x08016409
 80163f4:	08016411 	.word	0x08016411
 80163f8:	08016419 	.word	0x08016419
 80163fc:	08016421 	.word	0x08016421
 8016400:	08016429 	.word	0x08016429
 8016404:	08016431 	.word	0x08016431
 8016408:	2300      	movs	r3, #0
 801640a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801640e:	e1b6      	b.n	801677e <UART_SetConfig+0x5a6>
 8016410:	2304      	movs	r3, #4
 8016412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016416:	e1b2      	b.n	801677e <UART_SetConfig+0x5a6>
 8016418:	2308      	movs	r3, #8
 801641a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801641e:	e1ae      	b.n	801677e <UART_SetConfig+0x5a6>
 8016420:	2310      	movs	r3, #16
 8016422:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016426:	e1aa      	b.n	801677e <UART_SetConfig+0x5a6>
 8016428:	2320      	movs	r3, #32
 801642a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801642e:	e1a6      	b.n	801677e <UART_SetConfig+0x5a6>
 8016430:	2340      	movs	r3, #64	; 0x40
 8016432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016436:	e1a2      	b.n	801677e <UART_SetConfig+0x5a6>
 8016438:	2380      	movs	r3, #128	; 0x80
 801643a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801643e:	e19e      	b.n	801677e <UART_SetConfig+0x5a6>
 8016440:	697b      	ldr	r3, [r7, #20]
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	4a35      	ldr	r2, [pc, #212]	; (801651c <UART_SetConfig+0x344>)
 8016446:	4293      	cmp	r3, r2
 8016448:	d130      	bne.n	80164ac <UART_SetConfig+0x2d4>
 801644a:	4b31      	ldr	r3, [pc, #196]	; (8016510 <UART_SetConfig+0x338>)
 801644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801644e:	f003 0307 	and.w	r3, r3, #7
 8016452:	2b05      	cmp	r3, #5
 8016454:	d826      	bhi.n	80164a4 <UART_SetConfig+0x2cc>
 8016456:	a201      	add	r2, pc, #4	; (adr r2, 801645c <UART_SetConfig+0x284>)
 8016458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801645c:	08016475 	.word	0x08016475
 8016460:	0801647d 	.word	0x0801647d
 8016464:	08016485 	.word	0x08016485
 8016468:	0801648d 	.word	0x0801648d
 801646c:	08016495 	.word	0x08016495
 8016470:	0801649d 	.word	0x0801649d
 8016474:	2300      	movs	r3, #0
 8016476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801647a:	e180      	b.n	801677e <UART_SetConfig+0x5a6>
 801647c:	2304      	movs	r3, #4
 801647e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016482:	e17c      	b.n	801677e <UART_SetConfig+0x5a6>
 8016484:	2308      	movs	r3, #8
 8016486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801648a:	e178      	b.n	801677e <UART_SetConfig+0x5a6>
 801648c:	2310      	movs	r3, #16
 801648e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016492:	e174      	b.n	801677e <UART_SetConfig+0x5a6>
 8016494:	2320      	movs	r3, #32
 8016496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801649a:	e170      	b.n	801677e <UART_SetConfig+0x5a6>
 801649c:	2340      	movs	r3, #64	; 0x40
 801649e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164a2:	e16c      	b.n	801677e <UART_SetConfig+0x5a6>
 80164a4:	2380      	movs	r3, #128	; 0x80
 80164a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164aa:	e168      	b.n	801677e <UART_SetConfig+0x5a6>
 80164ac:	697b      	ldr	r3, [r7, #20]
 80164ae:	681b      	ldr	r3, [r3, #0]
 80164b0:	4a1b      	ldr	r2, [pc, #108]	; (8016520 <UART_SetConfig+0x348>)
 80164b2:	4293      	cmp	r3, r2
 80164b4:	d142      	bne.n	801653c <UART_SetConfig+0x364>
 80164b6:	4b16      	ldr	r3, [pc, #88]	; (8016510 <UART_SetConfig+0x338>)
 80164b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80164ba:	f003 0307 	and.w	r3, r3, #7
 80164be:	2b05      	cmp	r3, #5
 80164c0:	d838      	bhi.n	8016534 <UART_SetConfig+0x35c>
 80164c2:	a201      	add	r2, pc, #4	; (adr r2, 80164c8 <UART_SetConfig+0x2f0>)
 80164c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164c8:	080164e1 	.word	0x080164e1
 80164cc:	080164e9 	.word	0x080164e9
 80164d0:	080164f1 	.word	0x080164f1
 80164d4:	080164f9 	.word	0x080164f9
 80164d8:	08016525 	.word	0x08016525
 80164dc:	0801652d 	.word	0x0801652d
 80164e0:	2300      	movs	r3, #0
 80164e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164e6:	e14a      	b.n	801677e <UART_SetConfig+0x5a6>
 80164e8:	2304      	movs	r3, #4
 80164ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164ee:	e146      	b.n	801677e <UART_SetConfig+0x5a6>
 80164f0:	2308      	movs	r3, #8
 80164f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164f6:	e142      	b.n	801677e <UART_SetConfig+0x5a6>
 80164f8:	2310      	movs	r3, #16
 80164fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80164fe:	e13e      	b.n	801677e <UART_SetConfig+0x5a6>
 8016500:	cfff69f3 	.word	0xcfff69f3
 8016504:	58000c00 	.word	0x58000c00
 8016508:	11fff4ff 	.word	0x11fff4ff
 801650c:	40011000 	.word	0x40011000
 8016510:	58024400 	.word	0x58024400
 8016514:	40004400 	.word	0x40004400
 8016518:	40004800 	.word	0x40004800
 801651c:	40004c00 	.word	0x40004c00
 8016520:	40005000 	.word	0x40005000
 8016524:	2320      	movs	r3, #32
 8016526:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801652a:	e128      	b.n	801677e <UART_SetConfig+0x5a6>
 801652c:	2340      	movs	r3, #64	; 0x40
 801652e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016532:	e124      	b.n	801677e <UART_SetConfig+0x5a6>
 8016534:	2380      	movs	r3, #128	; 0x80
 8016536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801653a:	e120      	b.n	801677e <UART_SetConfig+0x5a6>
 801653c:	697b      	ldr	r3, [r7, #20]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	4acb      	ldr	r2, [pc, #812]	; (8016870 <UART_SetConfig+0x698>)
 8016542:	4293      	cmp	r3, r2
 8016544:	d176      	bne.n	8016634 <UART_SetConfig+0x45c>
 8016546:	4bcb      	ldr	r3, [pc, #812]	; (8016874 <UART_SetConfig+0x69c>)
 8016548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801654a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801654e:	2b28      	cmp	r3, #40	; 0x28
 8016550:	d86c      	bhi.n	801662c <UART_SetConfig+0x454>
 8016552:	a201      	add	r2, pc, #4	; (adr r2, 8016558 <UART_SetConfig+0x380>)
 8016554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016558:	080165fd 	.word	0x080165fd
 801655c:	0801662d 	.word	0x0801662d
 8016560:	0801662d 	.word	0x0801662d
 8016564:	0801662d 	.word	0x0801662d
 8016568:	0801662d 	.word	0x0801662d
 801656c:	0801662d 	.word	0x0801662d
 8016570:	0801662d 	.word	0x0801662d
 8016574:	0801662d 	.word	0x0801662d
 8016578:	08016605 	.word	0x08016605
 801657c:	0801662d 	.word	0x0801662d
 8016580:	0801662d 	.word	0x0801662d
 8016584:	0801662d 	.word	0x0801662d
 8016588:	0801662d 	.word	0x0801662d
 801658c:	0801662d 	.word	0x0801662d
 8016590:	0801662d 	.word	0x0801662d
 8016594:	0801662d 	.word	0x0801662d
 8016598:	0801660d 	.word	0x0801660d
 801659c:	0801662d 	.word	0x0801662d
 80165a0:	0801662d 	.word	0x0801662d
 80165a4:	0801662d 	.word	0x0801662d
 80165a8:	0801662d 	.word	0x0801662d
 80165ac:	0801662d 	.word	0x0801662d
 80165b0:	0801662d 	.word	0x0801662d
 80165b4:	0801662d 	.word	0x0801662d
 80165b8:	08016615 	.word	0x08016615
 80165bc:	0801662d 	.word	0x0801662d
 80165c0:	0801662d 	.word	0x0801662d
 80165c4:	0801662d 	.word	0x0801662d
 80165c8:	0801662d 	.word	0x0801662d
 80165cc:	0801662d 	.word	0x0801662d
 80165d0:	0801662d 	.word	0x0801662d
 80165d4:	0801662d 	.word	0x0801662d
 80165d8:	0801661d 	.word	0x0801661d
 80165dc:	0801662d 	.word	0x0801662d
 80165e0:	0801662d 	.word	0x0801662d
 80165e4:	0801662d 	.word	0x0801662d
 80165e8:	0801662d 	.word	0x0801662d
 80165ec:	0801662d 	.word	0x0801662d
 80165f0:	0801662d 	.word	0x0801662d
 80165f4:	0801662d 	.word	0x0801662d
 80165f8:	08016625 	.word	0x08016625
 80165fc:	2301      	movs	r3, #1
 80165fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016602:	e0bc      	b.n	801677e <UART_SetConfig+0x5a6>
 8016604:	2304      	movs	r3, #4
 8016606:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801660a:	e0b8      	b.n	801677e <UART_SetConfig+0x5a6>
 801660c:	2308      	movs	r3, #8
 801660e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016612:	e0b4      	b.n	801677e <UART_SetConfig+0x5a6>
 8016614:	2310      	movs	r3, #16
 8016616:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801661a:	e0b0      	b.n	801677e <UART_SetConfig+0x5a6>
 801661c:	2320      	movs	r3, #32
 801661e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016622:	e0ac      	b.n	801677e <UART_SetConfig+0x5a6>
 8016624:	2340      	movs	r3, #64	; 0x40
 8016626:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801662a:	e0a8      	b.n	801677e <UART_SetConfig+0x5a6>
 801662c:	2380      	movs	r3, #128	; 0x80
 801662e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016632:	e0a4      	b.n	801677e <UART_SetConfig+0x5a6>
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	681b      	ldr	r3, [r3, #0]
 8016638:	4a8f      	ldr	r2, [pc, #572]	; (8016878 <UART_SetConfig+0x6a0>)
 801663a:	4293      	cmp	r3, r2
 801663c:	d130      	bne.n	80166a0 <UART_SetConfig+0x4c8>
 801663e:	4b8d      	ldr	r3, [pc, #564]	; (8016874 <UART_SetConfig+0x69c>)
 8016640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016642:	f003 0307 	and.w	r3, r3, #7
 8016646:	2b05      	cmp	r3, #5
 8016648:	d826      	bhi.n	8016698 <UART_SetConfig+0x4c0>
 801664a:	a201      	add	r2, pc, #4	; (adr r2, 8016650 <UART_SetConfig+0x478>)
 801664c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016650:	08016669 	.word	0x08016669
 8016654:	08016671 	.word	0x08016671
 8016658:	08016679 	.word	0x08016679
 801665c:	08016681 	.word	0x08016681
 8016660:	08016689 	.word	0x08016689
 8016664:	08016691 	.word	0x08016691
 8016668:	2300      	movs	r3, #0
 801666a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801666e:	e086      	b.n	801677e <UART_SetConfig+0x5a6>
 8016670:	2304      	movs	r3, #4
 8016672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016676:	e082      	b.n	801677e <UART_SetConfig+0x5a6>
 8016678:	2308      	movs	r3, #8
 801667a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801667e:	e07e      	b.n	801677e <UART_SetConfig+0x5a6>
 8016680:	2310      	movs	r3, #16
 8016682:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016686:	e07a      	b.n	801677e <UART_SetConfig+0x5a6>
 8016688:	2320      	movs	r3, #32
 801668a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801668e:	e076      	b.n	801677e <UART_SetConfig+0x5a6>
 8016690:	2340      	movs	r3, #64	; 0x40
 8016692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016696:	e072      	b.n	801677e <UART_SetConfig+0x5a6>
 8016698:	2380      	movs	r3, #128	; 0x80
 801669a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801669e:	e06e      	b.n	801677e <UART_SetConfig+0x5a6>
 80166a0:	697b      	ldr	r3, [r7, #20]
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	4a75      	ldr	r2, [pc, #468]	; (801687c <UART_SetConfig+0x6a4>)
 80166a6:	4293      	cmp	r3, r2
 80166a8:	d130      	bne.n	801670c <UART_SetConfig+0x534>
 80166aa:	4b72      	ldr	r3, [pc, #456]	; (8016874 <UART_SetConfig+0x69c>)
 80166ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80166ae:	f003 0307 	and.w	r3, r3, #7
 80166b2:	2b05      	cmp	r3, #5
 80166b4:	d826      	bhi.n	8016704 <UART_SetConfig+0x52c>
 80166b6:	a201      	add	r2, pc, #4	; (adr r2, 80166bc <UART_SetConfig+0x4e4>)
 80166b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80166bc:	080166d5 	.word	0x080166d5
 80166c0:	080166dd 	.word	0x080166dd
 80166c4:	080166e5 	.word	0x080166e5
 80166c8:	080166ed 	.word	0x080166ed
 80166cc:	080166f5 	.word	0x080166f5
 80166d0:	080166fd 	.word	0x080166fd
 80166d4:	2300      	movs	r3, #0
 80166d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166da:	e050      	b.n	801677e <UART_SetConfig+0x5a6>
 80166dc:	2304      	movs	r3, #4
 80166de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166e2:	e04c      	b.n	801677e <UART_SetConfig+0x5a6>
 80166e4:	2308      	movs	r3, #8
 80166e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166ea:	e048      	b.n	801677e <UART_SetConfig+0x5a6>
 80166ec:	2310      	movs	r3, #16
 80166ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166f2:	e044      	b.n	801677e <UART_SetConfig+0x5a6>
 80166f4:	2320      	movs	r3, #32
 80166f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80166fa:	e040      	b.n	801677e <UART_SetConfig+0x5a6>
 80166fc:	2340      	movs	r3, #64	; 0x40
 80166fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016702:	e03c      	b.n	801677e <UART_SetConfig+0x5a6>
 8016704:	2380      	movs	r3, #128	; 0x80
 8016706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801670a:	e038      	b.n	801677e <UART_SetConfig+0x5a6>
 801670c:	697b      	ldr	r3, [r7, #20]
 801670e:	681b      	ldr	r3, [r3, #0]
 8016710:	4a5b      	ldr	r2, [pc, #364]	; (8016880 <UART_SetConfig+0x6a8>)
 8016712:	4293      	cmp	r3, r2
 8016714:	d130      	bne.n	8016778 <UART_SetConfig+0x5a0>
 8016716:	4b57      	ldr	r3, [pc, #348]	; (8016874 <UART_SetConfig+0x69c>)
 8016718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801671a:	f003 0307 	and.w	r3, r3, #7
 801671e:	2b05      	cmp	r3, #5
 8016720:	d826      	bhi.n	8016770 <UART_SetConfig+0x598>
 8016722:	a201      	add	r2, pc, #4	; (adr r2, 8016728 <UART_SetConfig+0x550>)
 8016724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016728:	08016741 	.word	0x08016741
 801672c:	08016749 	.word	0x08016749
 8016730:	08016751 	.word	0x08016751
 8016734:	08016759 	.word	0x08016759
 8016738:	08016761 	.word	0x08016761
 801673c:	08016769 	.word	0x08016769
 8016740:	2302      	movs	r3, #2
 8016742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016746:	e01a      	b.n	801677e <UART_SetConfig+0x5a6>
 8016748:	2304      	movs	r3, #4
 801674a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801674e:	e016      	b.n	801677e <UART_SetConfig+0x5a6>
 8016750:	2308      	movs	r3, #8
 8016752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016756:	e012      	b.n	801677e <UART_SetConfig+0x5a6>
 8016758:	2310      	movs	r3, #16
 801675a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801675e:	e00e      	b.n	801677e <UART_SetConfig+0x5a6>
 8016760:	2320      	movs	r3, #32
 8016762:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016766:	e00a      	b.n	801677e <UART_SetConfig+0x5a6>
 8016768:	2340      	movs	r3, #64	; 0x40
 801676a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801676e:	e006      	b.n	801677e <UART_SetConfig+0x5a6>
 8016770:	2380      	movs	r3, #128	; 0x80
 8016772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8016776:	e002      	b.n	801677e <UART_SetConfig+0x5a6>
 8016778:	2380      	movs	r3, #128	; 0x80
 801677a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801677e:	697b      	ldr	r3, [r7, #20]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	4a3f      	ldr	r2, [pc, #252]	; (8016880 <UART_SetConfig+0x6a8>)
 8016784:	4293      	cmp	r3, r2
 8016786:	f040 80f8 	bne.w	801697a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801678a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801678e:	2b20      	cmp	r3, #32
 8016790:	dc46      	bgt.n	8016820 <UART_SetConfig+0x648>
 8016792:	2b02      	cmp	r3, #2
 8016794:	f2c0 8082 	blt.w	801689c <UART_SetConfig+0x6c4>
 8016798:	3b02      	subs	r3, #2
 801679a:	2b1e      	cmp	r3, #30
 801679c:	d87e      	bhi.n	801689c <UART_SetConfig+0x6c4>
 801679e:	a201      	add	r2, pc, #4	; (adr r2, 80167a4 <UART_SetConfig+0x5cc>)
 80167a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167a4:	08016827 	.word	0x08016827
 80167a8:	0801689d 	.word	0x0801689d
 80167ac:	0801682f 	.word	0x0801682f
 80167b0:	0801689d 	.word	0x0801689d
 80167b4:	0801689d 	.word	0x0801689d
 80167b8:	0801689d 	.word	0x0801689d
 80167bc:	0801683f 	.word	0x0801683f
 80167c0:	0801689d 	.word	0x0801689d
 80167c4:	0801689d 	.word	0x0801689d
 80167c8:	0801689d 	.word	0x0801689d
 80167cc:	0801689d 	.word	0x0801689d
 80167d0:	0801689d 	.word	0x0801689d
 80167d4:	0801689d 	.word	0x0801689d
 80167d8:	0801689d 	.word	0x0801689d
 80167dc:	0801684f 	.word	0x0801684f
 80167e0:	0801689d 	.word	0x0801689d
 80167e4:	0801689d 	.word	0x0801689d
 80167e8:	0801689d 	.word	0x0801689d
 80167ec:	0801689d 	.word	0x0801689d
 80167f0:	0801689d 	.word	0x0801689d
 80167f4:	0801689d 	.word	0x0801689d
 80167f8:	0801689d 	.word	0x0801689d
 80167fc:	0801689d 	.word	0x0801689d
 8016800:	0801689d 	.word	0x0801689d
 8016804:	0801689d 	.word	0x0801689d
 8016808:	0801689d 	.word	0x0801689d
 801680c:	0801689d 	.word	0x0801689d
 8016810:	0801689d 	.word	0x0801689d
 8016814:	0801689d 	.word	0x0801689d
 8016818:	0801689d 	.word	0x0801689d
 801681c:	0801688f 	.word	0x0801688f
 8016820:	2b40      	cmp	r3, #64	; 0x40
 8016822:	d037      	beq.n	8016894 <UART_SetConfig+0x6bc>
 8016824:	e03a      	b.n	801689c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8016826:	f7fb fc17 	bl	8012058 <HAL_RCCEx_GetD3PCLK1Freq>
 801682a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801682c:	e03c      	b.n	80168a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801682e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016832:	4618      	mov	r0, r3
 8016834:	f7fb fc26 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801683a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801683c:	e034      	b.n	80168a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801683e:	f107 0318 	add.w	r3, r7, #24
 8016842:	4618      	mov	r0, r3
 8016844:	f7fb fd72 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016848:	69fb      	ldr	r3, [r7, #28]
 801684a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801684c:	e02c      	b.n	80168a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801684e:	4b09      	ldr	r3, [pc, #36]	; (8016874 <UART_SetConfig+0x69c>)
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	f003 0320 	and.w	r3, r3, #32
 8016856:	2b00      	cmp	r3, #0
 8016858:	d016      	beq.n	8016888 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801685a:	4b06      	ldr	r3, [pc, #24]	; (8016874 <UART_SetConfig+0x69c>)
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	08db      	lsrs	r3, r3, #3
 8016860:	f003 0303 	and.w	r3, r3, #3
 8016864:	4a07      	ldr	r2, [pc, #28]	; (8016884 <UART_SetConfig+0x6ac>)
 8016866:	fa22 f303 	lsr.w	r3, r2, r3
 801686a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801686c:	e01c      	b.n	80168a8 <UART_SetConfig+0x6d0>
 801686e:	bf00      	nop
 8016870:	40011400 	.word	0x40011400
 8016874:	58024400 	.word	0x58024400
 8016878:	40007800 	.word	0x40007800
 801687c:	40007c00 	.word	0x40007c00
 8016880:	58000c00 	.word	0x58000c00
 8016884:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8016888:	4b9d      	ldr	r3, [pc, #628]	; (8016b00 <UART_SetConfig+0x928>)
 801688a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801688c:	e00c      	b.n	80168a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801688e:	4b9d      	ldr	r3, [pc, #628]	; (8016b04 <UART_SetConfig+0x92c>)
 8016890:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016892:	e009      	b.n	80168a8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016894:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016898:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801689a:	e005      	b.n	80168a8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801689c:	2300      	movs	r3, #0
 801689e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80168a0:	2301      	movs	r3, #1
 80168a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80168a6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80168a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168aa:	2b00      	cmp	r3, #0
 80168ac:	f000 81de 	beq.w	8016c6c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80168b0:	697b      	ldr	r3, [r7, #20]
 80168b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168b4:	4a94      	ldr	r2, [pc, #592]	; (8016b08 <UART_SetConfig+0x930>)
 80168b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80168ba:	461a      	mov	r2, r3
 80168bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168be:	fbb3 f3f2 	udiv	r3, r3, r2
 80168c2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80168c4:	697b      	ldr	r3, [r7, #20]
 80168c6:	685a      	ldr	r2, [r3, #4]
 80168c8:	4613      	mov	r3, r2
 80168ca:	005b      	lsls	r3, r3, #1
 80168cc:	4413      	add	r3, r2
 80168ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168d0:	429a      	cmp	r2, r3
 80168d2:	d305      	bcc.n	80168e0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80168d4:	697b      	ldr	r3, [r7, #20]
 80168d6:	685b      	ldr	r3, [r3, #4]
 80168d8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80168da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80168dc:	429a      	cmp	r2, r3
 80168de:	d903      	bls.n	80168e8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80168e0:	2301      	movs	r3, #1
 80168e2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80168e6:	e1c1      	b.n	8016c6c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80168e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80168ea:	2200      	movs	r2, #0
 80168ec:	60bb      	str	r3, [r7, #8]
 80168ee:	60fa      	str	r2, [r7, #12]
 80168f0:	697b      	ldr	r3, [r7, #20]
 80168f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80168f4:	4a84      	ldr	r2, [pc, #528]	; (8016b08 <UART_SetConfig+0x930>)
 80168f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80168fa:	b29b      	uxth	r3, r3
 80168fc:	2200      	movs	r2, #0
 80168fe:	603b      	str	r3, [r7, #0]
 8016900:	607a      	str	r2, [r7, #4]
 8016902:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016906:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801690a:	f7e9 fce9 	bl	80002e0 <__aeabi_uldivmod>
 801690e:	4602      	mov	r2, r0
 8016910:	460b      	mov	r3, r1
 8016912:	4610      	mov	r0, r2
 8016914:	4619      	mov	r1, r3
 8016916:	f04f 0200 	mov.w	r2, #0
 801691a:	f04f 0300 	mov.w	r3, #0
 801691e:	020b      	lsls	r3, r1, #8
 8016920:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016924:	0202      	lsls	r2, r0, #8
 8016926:	6979      	ldr	r1, [r7, #20]
 8016928:	6849      	ldr	r1, [r1, #4]
 801692a:	0849      	lsrs	r1, r1, #1
 801692c:	2000      	movs	r0, #0
 801692e:	460c      	mov	r4, r1
 8016930:	4605      	mov	r5, r0
 8016932:	eb12 0804 	adds.w	r8, r2, r4
 8016936:	eb43 0905 	adc.w	r9, r3, r5
 801693a:	697b      	ldr	r3, [r7, #20]
 801693c:	685b      	ldr	r3, [r3, #4]
 801693e:	2200      	movs	r2, #0
 8016940:	469a      	mov	sl, r3
 8016942:	4693      	mov	fp, r2
 8016944:	4652      	mov	r2, sl
 8016946:	465b      	mov	r3, fp
 8016948:	4640      	mov	r0, r8
 801694a:	4649      	mov	r1, r9
 801694c:	f7e9 fcc8 	bl	80002e0 <__aeabi_uldivmod>
 8016950:	4602      	mov	r2, r0
 8016952:	460b      	mov	r3, r1
 8016954:	4613      	mov	r3, r2
 8016956:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016958:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801695a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801695e:	d308      	bcc.n	8016972 <UART_SetConfig+0x79a>
 8016960:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016966:	d204      	bcs.n	8016972 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	681b      	ldr	r3, [r3, #0]
 801696c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801696e:	60da      	str	r2, [r3, #12]
 8016970:	e17c      	b.n	8016c6c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8016972:	2301      	movs	r3, #1
 8016974:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016978:	e178      	b.n	8016c6c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801697a:	697b      	ldr	r3, [r7, #20]
 801697c:	69db      	ldr	r3, [r3, #28]
 801697e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016982:	f040 80c5 	bne.w	8016b10 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8016986:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801698a:	2b20      	cmp	r3, #32
 801698c:	dc48      	bgt.n	8016a20 <UART_SetConfig+0x848>
 801698e:	2b00      	cmp	r3, #0
 8016990:	db7b      	blt.n	8016a8a <UART_SetConfig+0x8b2>
 8016992:	2b20      	cmp	r3, #32
 8016994:	d879      	bhi.n	8016a8a <UART_SetConfig+0x8b2>
 8016996:	a201      	add	r2, pc, #4	; (adr r2, 801699c <UART_SetConfig+0x7c4>)
 8016998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801699c:	08016a27 	.word	0x08016a27
 80169a0:	08016a2f 	.word	0x08016a2f
 80169a4:	08016a8b 	.word	0x08016a8b
 80169a8:	08016a8b 	.word	0x08016a8b
 80169ac:	08016a37 	.word	0x08016a37
 80169b0:	08016a8b 	.word	0x08016a8b
 80169b4:	08016a8b 	.word	0x08016a8b
 80169b8:	08016a8b 	.word	0x08016a8b
 80169bc:	08016a47 	.word	0x08016a47
 80169c0:	08016a8b 	.word	0x08016a8b
 80169c4:	08016a8b 	.word	0x08016a8b
 80169c8:	08016a8b 	.word	0x08016a8b
 80169cc:	08016a8b 	.word	0x08016a8b
 80169d0:	08016a8b 	.word	0x08016a8b
 80169d4:	08016a8b 	.word	0x08016a8b
 80169d8:	08016a8b 	.word	0x08016a8b
 80169dc:	08016a57 	.word	0x08016a57
 80169e0:	08016a8b 	.word	0x08016a8b
 80169e4:	08016a8b 	.word	0x08016a8b
 80169e8:	08016a8b 	.word	0x08016a8b
 80169ec:	08016a8b 	.word	0x08016a8b
 80169f0:	08016a8b 	.word	0x08016a8b
 80169f4:	08016a8b 	.word	0x08016a8b
 80169f8:	08016a8b 	.word	0x08016a8b
 80169fc:	08016a8b 	.word	0x08016a8b
 8016a00:	08016a8b 	.word	0x08016a8b
 8016a04:	08016a8b 	.word	0x08016a8b
 8016a08:	08016a8b 	.word	0x08016a8b
 8016a0c:	08016a8b 	.word	0x08016a8b
 8016a10:	08016a8b 	.word	0x08016a8b
 8016a14:	08016a8b 	.word	0x08016a8b
 8016a18:	08016a8b 	.word	0x08016a8b
 8016a1c:	08016a7d 	.word	0x08016a7d
 8016a20:	2b40      	cmp	r3, #64	; 0x40
 8016a22:	d02e      	beq.n	8016a82 <UART_SetConfig+0x8aa>
 8016a24:	e031      	b.n	8016a8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016a26:	f7f9 fb1f 	bl	8010068 <HAL_RCC_GetPCLK1Freq>
 8016a2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016a2c:	e033      	b.n	8016a96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016a2e:	f7f9 fb31 	bl	8010094 <HAL_RCC_GetPCLK2Freq>
 8016a32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016a34:	e02f      	b.n	8016a96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016a36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7fb fb22 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016a42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016a44:	e027      	b.n	8016a96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016a46:	f107 0318 	add.w	r3, r7, #24
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	f7fb fc6e 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016a50:	69fb      	ldr	r3, [r7, #28]
 8016a52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016a54:	e01f      	b.n	8016a96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016a56:	4b2d      	ldr	r3, [pc, #180]	; (8016b0c <UART_SetConfig+0x934>)
 8016a58:	681b      	ldr	r3, [r3, #0]
 8016a5a:	f003 0320 	and.w	r3, r3, #32
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d009      	beq.n	8016a76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016a62:	4b2a      	ldr	r3, [pc, #168]	; (8016b0c <UART_SetConfig+0x934>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	08db      	lsrs	r3, r3, #3
 8016a68:	f003 0303 	and.w	r3, r3, #3
 8016a6c:	4a24      	ldr	r2, [pc, #144]	; (8016b00 <UART_SetConfig+0x928>)
 8016a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8016a72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016a74:	e00f      	b.n	8016a96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8016a76:	4b22      	ldr	r3, [pc, #136]	; (8016b00 <UART_SetConfig+0x928>)
 8016a78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016a7a:	e00c      	b.n	8016a96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016a7c:	4b21      	ldr	r3, [pc, #132]	; (8016b04 <UART_SetConfig+0x92c>)
 8016a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016a80:	e009      	b.n	8016a96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016a88:	e005      	b.n	8016a96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016a8e:	2301      	movs	r3, #1
 8016a90:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016a94:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	f000 80e7 	beq.w	8016c6c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016a9e:	697b      	ldr	r3, [r7, #20]
 8016aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016aa2:	4a19      	ldr	r2, [pc, #100]	; (8016b08 <UART_SetConfig+0x930>)
 8016aa4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016aa8:	461a      	mov	r2, r3
 8016aaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016aac:	fbb3 f3f2 	udiv	r3, r3, r2
 8016ab0:	005a      	lsls	r2, r3, #1
 8016ab2:	697b      	ldr	r3, [r7, #20]
 8016ab4:	685b      	ldr	r3, [r3, #4]
 8016ab6:	085b      	lsrs	r3, r3, #1
 8016ab8:	441a      	add	r2, r3
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	685b      	ldr	r3, [r3, #4]
 8016abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8016ac2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ac6:	2b0f      	cmp	r3, #15
 8016ac8:	d916      	bls.n	8016af8 <UART_SetConfig+0x920>
 8016aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016ad0:	d212      	bcs.n	8016af8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ad4:	b29b      	uxth	r3, r3
 8016ad6:	f023 030f 	bic.w	r3, r3, #15
 8016ada:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016ade:	085b      	lsrs	r3, r3, #1
 8016ae0:	b29b      	uxth	r3, r3
 8016ae2:	f003 0307 	and.w	r3, r3, #7
 8016ae6:	b29a      	uxth	r2, r3
 8016ae8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016aea:	4313      	orrs	r3, r2
 8016aec:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8016aee:	697b      	ldr	r3, [r7, #20]
 8016af0:	681b      	ldr	r3, [r3, #0]
 8016af2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016af4:	60da      	str	r2, [r3, #12]
 8016af6:	e0b9      	b.n	8016c6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016af8:	2301      	movs	r3, #1
 8016afa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8016afe:	e0b5      	b.n	8016c6c <UART_SetConfig+0xa94>
 8016b00:	03d09000 	.word	0x03d09000
 8016b04:	003d0900 	.word	0x003d0900
 8016b08:	0801c6bc 	.word	0x0801c6bc
 8016b0c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8016b10:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8016b14:	2b20      	cmp	r3, #32
 8016b16:	dc49      	bgt.n	8016bac <UART_SetConfig+0x9d4>
 8016b18:	2b00      	cmp	r3, #0
 8016b1a:	db7c      	blt.n	8016c16 <UART_SetConfig+0xa3e>
 8016b1c:	2b20      	cmp	r3, #32
 8016b1e:	d87a      	bhi.n	8016c16 <UART_SetConfig+0xa3e>
 8016b20:	a201      	add	r2, pc, #4	; (adr r2, 8016b28 <UART_SetConfig+0x950>)
 8016b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b26:	bf00      	nop
 8016b28:	08016bb3 	.word	0x08016bb3
 8016b2c:	08016bbb 	.word	0x08016bbb
 8016b30:	08016c17 	.word	0x08016c17
 8016b34:	08016c17 	.word	0x08016c17
 8016b38:	08016bc3 	.word	0x08016bc3
 8016b3c:	08016c17 	.word	0x08016c17
 8016b40:	08016c17 	.word	0x08016c17
 8016b44:	08016c17 	.word	0x08016c17
 8016b48:	08016bd3 	.word	0x08016bd3
 8016b4c:	08016c17 	.word	0x08016c17
 8016b50:	08016c17 	.word	0x08016c17
 8016b54:	08016c17 	.word	0x08016c17
 8016b58:	08016c17 	.word	0x08016c17
 8016b5c:	08016c17 	.word	0x08016c17
 8016b60:	08016c17 	.word	0x08016c17
 8016b64:	08016c17 	.word	0x08016c17
 8016b68:	08016be3 	.word	0x08016be3
 8016b6c:	08016c17 	.word	0x08016c17
 8016b70:	08016c17 	.word	0x08016c17
 8016b74:	08016c17 	.word	0x08016c17
 8016b78:	08016c17 	.word	0x08016c17
 8016b7c:	08016c17 	.word	0x08016c17
 8016b80:	08016c17 	.word	0x08016c17
 8016b84:	08016c17 	.word	0x08016c17
 8016b88:	08016c17 	.word	0x08016c17
 8016b8c:	08016c17 	.word	0x08016c17
 8016b90:	08016c17 	.word	0x08016c17
 8016b94:	08016c17 	.word	0x08016c17
 8016b98:	08016c17 	.word	0x08016c17
 8016b9c:	08016c17 	.word	0x08016c17
 8016ba0:	08016c17 	.word	0x08016c17
 8016ba4:	08016c17 	.word	0x08016c17
 8016ba8:	08016c09 	.word	0x08016c09
 8016bac:	2b40      	cmp	r3, #64	; 0x40
 8016bae:	d02e      	beq.n	8016c0e <UART_SetConfig+0xa36>
 8016bb0:	e031      	b.n	8016c16 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016bb2:	f7f9 fa59 	bl	8010068 <HAL_RCC_GetPCLK1Freq>
 8016bb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016bb8:	e033      	b.n	8016c22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016bba:	f7f9 fa6b 	bl	8010094 <HAL_RCC_GetPCLK2Freq>
 8016bbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8016bc0:	e02f      	b.n	8016c22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8016bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	f7fb fa5c 	bl	8012084 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8016bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016bce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016bd0:	e027      	b.n	8016c22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8016bd2:	f107 0318 	add.w	r3, r7, #24
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f7fb fba8 	bl	801232c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8016bdc:	69fb      	ldr	r3, [r7, #28]
 8016bde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016be0:	e01f      	b.n	8016c22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8016be2:	4b2d      	ldr	r3, [pc, #180]	; (8016c98 <UART_SetConfig+0xac0>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	f003 0320 	and.w	r3, r3, #32
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d009      	beq.n	8016c02 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8016bee:	4b2a      	ldr	r3, [pc, #168]	; (8016c98 <UART_SetConfig+0xac0>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	08db      	lsrs	r3, r3, #3
 8016bf4:	f003 0303 	and.w	r3, r3, #3
 8016bf8:	4a28      	ldr	r2, [pc, #160]	; (8016c9c <UART_SetConfig+0xac4>)
 8016bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8016bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8016c00:	e00f      	b.n	8016c22 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8016c02:	4b26      	ldr	r3, [pc, #152]	; (8016c9c <UART_SetConfig+0xac4>)
 8016c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c06:	e00c      	b.n	8016c22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8016c08:	4b25      	ldr	r3, [pc, #148]	; (8016ca0 <UART_SetConfig+0xac8>)
 8016c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c0c:	e009      	b.n	8016c22 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8016c12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8016c14:	e005      	b.n	8016c22 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8016c16:	2300      	movs	r3, #0
 8016c18:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8016c1a:	2301      	movs	r3, #1
 8016c1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8016c20:	bf00      	nop
    }

    if (pclk != 0U)
 8016c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c24:	2b00      	cmp	r3, #0
 8016c26:	d021      	beq.n	8016c6c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016c28:	697b      	ldr	r3, [r7, #20]
 8016c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c2c:	4a1d      	ldr	r2, [pc, #116]	; (8016ca4 <UART_SetConfig+0xacc>)
 8016c2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016c32:	461a      	mov	r2, r3
 8016c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016c36:	fbb3 f2f2 	udiv	r2, r3, r2
 8016c3a:	697b      	ldr	r3, [r7, #20]
 8016c3c:	685b      	ldr	r3, [r3, #4]
 8016c3e:	085b      	lsrs	r3, r3, #1
 8016c40:	441a      	add	r2, r3
 8016c42:	697b      	ldr	r3, [r7, #20]
 8016c44:	685b      	ldr	r3, [r3, #4]
 8016c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c4a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c4e:	2b0f      	cmp	r3, #15
 8016c50:	d909      	bls.n	8016c66 <UART_SetConfig+0xa8e>
 8016c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c58:	d205      	bcs.n	8016c66 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016c5c:	b29a      	uxth	r2, r3
 8016c5e:	697b      	ldr	r3, [r7, #20]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	60da      	str	r2, [r3, #12]
 8016c64:	e002      	b.n	8016c6c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8016c66:	2301      	movs	r3, #1
 8016c68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016c6c:	697b      	ldr	r3, [r7, #20]
 8016c6e:	2201      	movs	r2, #1
 8016c70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8016c74:	697b      	ldr	r3, [r7, #20]
 8016c76:	2201      	movs	r2, #1
 8016c78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016c7c:	697b      	ldr	r3, [r7, #20]
 8016c7e:	2200      	movs	r2, #0
 8016c80:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8016c82:	697b      	ldr	r3, [r7, #20]
 8016c84:	2200      	movs	r2, #0
 8016c86:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8016c88:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	3748      	adds	r7, #72	; 0x48
 8016c90:	46bd      	mov	sp, r7
 8016c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016c96:	bf00      	nop
 8016c98:	58024400 	.word	0x58024400
 8016c9c:	03d09000 	.word	0x03d09000
 8016ca0:	003d0900 	.word	0x003d0900
 8016ca4:	0801c6bc 	.word	0x0801c6bc

08016ca8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016ca8:	b480      	push	{r7}
 8016caa:	b083      	sub	sp, #12
 8016cac:	af00      	add	r7, sp, #0
 8016cae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cb4:	f003 0308 	and.w	r3, r3, #8
 8016cb8:	2b00      	cmp	r3, #0
 8016cba:	d00a      	beq.n	8016cd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	681b      	ldr	r3, [r3, #0]
 8016cc0:	685b      	ldr	r3, [r3, #4]
 8016cc2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	681b      	ldr	r3, [r3, #0]
 8016cce:	430a      	orrs	r2, r1
 8016cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cd6:	f003 0301 	and.w	r3, r3, #1
 8016cda:	2b00      	cmp	r3, #0
 8016cdc:	d00a      	beq.n	8016cf4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016cde:	687b      	ldr	r3, [r7, #4]
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	685b      	ldr	r3, [r3, #4]
 8016ce4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8016ce8:	687b      	ldr	r3, [r7, #4]
 8016cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016cec:	687b      	ldr	r3, [r7, #4]
 8016cee:	681b      	ldr	r3, [r3, #0]
 8016cf0:	430a      	orrs	r2, r1
 8016cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016cf8:	f003 0302 	and.w	r3, r3, #2
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d00a      	beq.n	8016d16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016d00:	687b      	ldr	r3, [r7, #4]
 8016d02:	681b      	ldr	r3, [r3, #0]
 8016d04:	685b      	ldr	r3, [r3, #4]
 8016d06:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8016d0a:	687b      	ldr	r3, [r7, #4]
 8016d0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	681b      	ldr	r3, [r3, #0]
 8016d12:	430a      	orrs	r2, r1
 8016d14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016d16:	687b      	ldr	r3, [r7, #4]
 8016d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d1a:	f003 0304 	and.w	r3, r3, #4
 8016d1e:	2b00      	cmp	r3, #0
 8016d20:	d00a      	beq.n	8016d38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	685b      	ldr	r3, [r3, #4]
 8016d28:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	430a      	orrs	r2, r1
 8016d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d3c:	f003 0310 	and.w	r3, r3, #16
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d00a      	beq.n	8016d5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	681b      	ldr	r3, [r3, #0]
 8016d48:	689b      	ldr	r3, [r3, #8]
 8016d4a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	681b      	ldr	r3, [r3, #0]
 8016d56:	430a      	orrs	r2, r1
 8016d58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d5e:	f003 0320 	and.w	r3, r3, #32
 8016d62:	2b00      	cmp	r3, #0
 8016d64:	d00a      	beq.n	8016d7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	681b      	ldr	r3, [r3, #0]
 8016d6a:	689b      	ldr	r3, [r3, #8]
 8016d6c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	681b      	ldr	r3, [r3, #0]
 8016d78:	430a      	orrs	r2, r1
 8016d7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016d84:	2b00      	cmp	r3, #0
 8016d86:	d01a      	beq.n	8016dbe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	681b      	ldr	r3, [r3, #0]
 8016d8c:	685b      	ldr	r3, [r3, #4]
 8016d8e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	681b      	ldr	r3, [r3, #0]
 8016d9a:	430a      	orrs	r2, r1
 8016d9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016da2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8016da6:	d10a      	bne.n	8016dbe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	681b      	ldr	r3, [r3, #0]
 8016dac:	685b      	ldr	r3, [r3, #4]
 8016dae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	681b      	ldr	r3, [r3, #0]
 8016dba:	430a      	orrs	r2, r1
 8016dbc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016dc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016dc6:	2b00      	cmp	r3, #0
 8016dc8:	d00a      	beq.n	8016de0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	681b      	ldr	r3, [r3, #0]
 8016dce:	685b      	ldr	r3, [r3, #4]
 8016dd0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8016dd4:	687b      	ldr	r3, [r7, #4]
 8016dd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	430a      	orrs	r2, r1
 8016dde:	605a      	str	r2, [r3, #4]
  }
}
 8016de0:	bf00      	nop
 8016de2:	370c      	adds	r7, #12
 8016de4:	46bd      	mov	sp, r7
 8016de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dea:	4770      	bx	lr

08016dec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b098      	sub	sp, #96	; 0x60
 8016df0:	af02      	add	r7, sp, #8
 8016df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	2200      	movs	r2, #0
 8016df8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016dfc:	f7ef fe04 	bl	8006a08 <HAL_GetTick>
 8016e00:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	681b      	ldr	r3, [r3, #0]
 8016e06:	681b      	ldr	r3, [r3, #0]
 8016e08:	f003 0308 	and.w	r3, r3, #8
 8016e0c:	2b08      	cmp	r3, #8
 8016e0e:	d12f      	bne.n	8016e70 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016e10:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016e14:	9300      	str	r3, [sp, #0]
 8016e16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e18:	2200      	movs	r2, #0
 8016e1a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f000 f88e 	bl	8016f40 <UART_WaitOnFlagUntilTimeout>
 8016e24:	4603      	mov	r3, r0
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d022      	beq.n	8016e70 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8016e2a:	687b      	ldr	r3, [r7, #4]
 8016e2c:	681b      	ldr	r3, [r3, #0]
 8016e2e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016e32:	e853 3f00 	ldrex	r3, [r3]
 8016e36:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8016e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016e3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8016e3e:	653b      	str	r3, [r7, #80]	; 0x50
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	681b      	ldr	r3, [r3, #0]
 8016e44:	461a      	mov	r2, r3
 8016e46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016e48:	647b      	str	r3, [r7, #68]	; 0x44
 8016e4a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016e4c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8016e4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016e50:	e841 2300 	strex	r3, r2, [r1]
 8016e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8016e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d1e6      	bne.n	8016e2a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	2220      	movs	r2, #32
 8016e60:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	2200      	movs	r2, #0
 8016e68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016e6c:	2303      	movs	r3, #3
 8016e6e:	e063      	b.n	8016f38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	681b      	ldr	r3, [r3, #0]
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	f003 0304 	and.w	r3, r3, #4
 8016e7a:	2b04      	cmp	r3, #4
 8016e7c:	d149      	bne.n	8016f12 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016e7e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8016e82:	9300      	str	r3, [sp, #0]
 8016e84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016e86:	2200      	movs	r2, #0
 8016e88:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f000 f857 	bl	8016f40 <UART_WaitOnFlagUntilTimeout>
 8016e92:	4603      	mov	r3, r0
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d03c      	beq.n	8016f12 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016e98:	687b      	ldr	r3, [r7, #4]
 8016e9a:	681b      	ldr	r3, [r3, #0]
 8016e9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea0:	e853 3f00 	ldrex	r3, [r3]
 8016ea4:	623b      	str	r3, [r7, #32]
   return(result);
 8016ea6:	6a3b      	ldr	r3, [r7, #32]
 8016ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8016eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	681b      	ldr	r3, [r3, #0]
 8016eb2:	461a      	mov	r2, r3
 8016eb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016eb6:	633b      	str	r3, [r7, #48]	; 0x30
 8016eb8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016eba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016ebc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016ebe:	e841 2300 	strex	r3, r2, [r1]
 8016ec2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8016ec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d1e6      	bne.n	8016e98 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016eca:	687b      	ldr	r3, [r7, #4]
 8016ecc:	681b      	ldr	r3, [r3, #0]
 8016ece:	3308      	adds	r3, #8
 8016ed0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ed2:	693b      	ldr	r3, [r7, #16]
 8016ed4:	e853 3f00 	ldrex	r3, [r3]
 8016ed8:	60fb      	str	r3, [r7, #12]
   return(result);
 8016eda:	68fb      	ldr	r3, [r7, #12]
 8016edc:	f023 0301 	bic.w	r3, r3, #1
 8016ee0:	64bb      	str	r3, [r7, #72]	; 0x48
 8016ee2:	687b      	ldr	r3, [r7, #4]
 8016ee4:	681b      	ldr	r3, [r3, #0]
 8016ee6:	3308      	adds	r3, #8
 8016ee8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8016eea:	61fa      	str	r2, [r7, #28]
 8016eec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016eee:	69b9      	ldr	r1, [r7, #24]
 8016ef0:	69fa      	ldr	r2, [r7, #28]
 8016ef2:	e841 2300 	strex	r3, r2, [r1]
 8016ef6:	617b      	str	r3, [r7, #20]
   return(result);
 8016ef8:	697b      	ldr	r3, [r7, #20]
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d1e5      	bne.n	8016eca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	2220      	movs	r2, #32
 8016f02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	2200      	movs	r2, #0
 8016f0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016f0e:	2303      	movs	r3, #3
 8016f10:	e012      	b.n	8016f38 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8016f12:	687b      	ldr	r3, [r7, #4]
 8016f14:	2220      	movs	r2, #32
 8016f16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8016f1a:	687b      	ldr	r3, [r7, #4]
 8016f1c:	2220      	movs	r2, #32
 8016f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	2200      	movs	r2, #0
 8016f26:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8016f28:	687b      	ldr	r3, [r7, #4]
 8016f2a:	2200      	movs	r2, #0
 8016f2c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	2200      	movs	r2, #0
 8016f32:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016f36:	2300      	movs	r3, #0
}
 8016f38:	4618      	mov	r0, r3
 8016f3a:	3758      	adds	r7, #88	; 0x58
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}

08016f40 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b084      	sub	sp, #16
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	60f8      	str	r0, [r7, #12]
 8016f48:	60b9      	str	r1, [r7, #8]
 8016f4a:	603b      	str	r3, [r7, #0]
 8016f4c:	4613      	mov	r3, r2
 8016f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016f50:	e04f      	b.n	8016ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8016f52:	69bb      	ldr	r3, [r7, #24]
 8016f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016f58:	d04b      	beq.n	8016ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8016f5a:	f7ef fd55 	bl	8006a08 <HAL_GetTick>
 8016f5e:	4602      	mov	r2, r0
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	1ad3      	subs	r3, r2, r3
 8016f64:	69ba      	ldr	r2, [r7, #24]
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d302      	bcc.n	8016f70 <UART_WaitOnFlagUntilTimeout+0x30>
 8016f6a:	69bb      	ldr	r3, [r7, #24]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d101      	bne.n	8016f74 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8016f70:	2303      	movs	r3, #3
 8016f72:	e04e      	b.n	8017012 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8016f74:	68fb      	ldr	r3, [r7, #12]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	f003 0304 	and.w	r3, r3, #4
 8016f7e:	2b00      	cmp	r3, #0
 8016f80:	d037      	beq.n	8016ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8016f82:	68bb      	ldr	r3, [r7, #8]
 8016f84:	2b80      	cmp	r3, #128	; 0x80
 8016f86:	d034      	beq.n	8016ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	2b40      	cmp	r3, #64	; 0x40
 8016f8c:	d031      	beq.n	8016ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	681b      	ldr	r3, [r3, #0]
 8016f92:	69db      	ldr	r3, [r3, #28]
 8016f94:	f003 0308 	and.w	r3, r3, #8
 8016f98:	2b08      	cmp	r3, #8
 8016f9a:	d110      	bne.n	8016fbe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	681b      	ldr	r3, [r3, #0]
 8016fa0:	2208      	movs	r2, #8
 8016fa2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016fa4:	68f8      	ldr	r0, [r7, #12]
 8016fa6:	f000 f95b 	bl	8017260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8016faa:	68fb      	ldr	r3, [r7, #12]
 8016fac:	2208      	movs	r2, #8
 8016fae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016fb2:	68fb      	ldr	r3, [r7, #12]
 8016fb4:	2200      	movs	r2, #0
 8016fb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8016fba:	2301      	movs	r3, #1
 8016fbc:	e029      	b.n	8017012 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	69db      	ldr	r3, [r3, #28]
 8016fc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016fc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8016fcc:	d111      	bne.n	8016ff2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8016fce:	68fb      	ldr	r3, [r7, #12]
 8016fd0:	681b      	ldr	r3, [r3, #0]
 8016fd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016fd6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8016fd8:	68f8      	ldr	r0, [r7, #12]
 8016fda:	f000 f941 	bl	8017260 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8016fde:	68fb      	ldr	r3, [r7, #12]
 8016fe0:	2220      	movs	r2, #32
 8016fe2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	2200      	movs	r2, #0
 8016fea:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8016fee:	2303      	movs	r3, #3
 8016ff0:	e00f      	b.n	8017012 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8016ff2:	68fb      	ldr	r3, [r7, #12]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	69da      	ldr	r2, [r3, #28]
 8016ff8:	68bb      	ldr	r3, [r7, #8]
 8016ffa:	4013      	ands	r3, r2
 8016ffc:	68ba      	ldr	r2, [r7, #8]
 8016ffe:	429a      	cmp	r2, r3
 8017000:	bf0c      	ite	eq
 8017002:	2301      	moveq	r3, #1
 8017004:	2300      	movne	r3, #0
 8017006:	b2db      	uxtb	r3, r3
 8017008:	461a      	mov	r2, r3
 801700a:	79fb      	ldrb	r3, [r7, #7]
 801700c:	429a      	cmp	r2, r3
 801700e:	d0a0      	beq.n	8016f52 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017010:	2300      	movs	r3, #0
}
 8017012:	4618      	mov	r0, r3
 8017014:	3710      	adds	r7, #16
 8017016:	46bd      	mov	sp, r7
 8017018:	bd80      	pop	{r7, pc}
	...

0801701c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801701c:	b480      	push	{r7}
 801701e:	b0a3      	sub	sp, #140	; 0x8c
 8017020:	af00      	add	r7, sp, #0
 8017022:	60f8      	str	r0, [r7, #12]
 8017024:	60b9      	str	r1, [r7, #8]
 8017026:	4613      	mov	r3, r2
 8017028:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	68ba      	ldr	r2, [r7, #8]
 801702e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8017030:	68fb      	ldr	r3, [r7, #12]
 8017032:	88fa      	ldrh	r2, [r7, #6]
 8017034:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8017038:	68fb      	ldr	r3, [r7, #12]
 801703a:	88fa      	ldrh	r2, [r7, #6]
 801703c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8017040:	68fb      	ldr	r3, [r7, #12]
 8017042:	2200      	movs	r2, #0
 8017044:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8017046:	68fb      	ldr	r3, [r7, #12]
 8017048:	689b      	ldr	r3, [r3, #8]
 801704a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801704e:	d10e      	bne.n	801706e <UART_Start_Receive_IT+0x52>
 8017050:	68fb      	ldr	r3, [r7, #12]
 8017052:	691b      	ldr	r3, [r3, #16]
 8017054:	2b00      	cmp	r3, #0
 8017056:	d105      	bne.n	8017064 <UART_Start_Receive_IT+0x48>
 8017058:	68fb      	ldr	r3, [r7, #12]
 801705a:	f240 12ff 	movw	r2, #511	; 0x1ff
 801705e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017062:	e02d      	b.n	80170c0 <UART_Start_Receive_IT+0xa4>
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	22ff      	movs	r2, #255	; 0xff
 8017068:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801706c:	e028      	b.n	80170c0 <UART_Start_Receive_IT+0xa4>
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	689b      	ldr	r3, [r3, #8]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d10d      	bne.n	8017092 <UART_Start_Receive_IT+0x76>
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	691b      	ldr	r3, [r3, #16]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d104      	bne.n	8017088 <UART_Start_Receive_IT+0x6c>
 801707e:	68fb      	ldr	r3, [r7, #12]
 8017080:	22ff      	movs	r2, #255	; 0xff
 8017082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017086:	e01b      	b.n	80170c0 <UART_Start_Receive_IT+0xa4>
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	227f      	movs	r2, #127	; 0x7f
 801708c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8017090:	e016      	b.n	80170c0 <UART_Start_Receive_IT+0xa4>
 8017092:	68fb      	ldr	r3, [r7, #12]
 8017094:	689b      	ldr	r3, [r3, #8]
 8017096:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801709a:	d10d      	bne.n	80170b8 <UART_Start_Receive_IT+0x9c>
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	691b      	ldr	r3, [r3, #16]
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	d104      	bne.n	80170ae <UART_Start_Receive_IT+0x92>
 80170a4:	68fb      	ldr	r3, [r7, #12]
 80170a6:	227f      	movs	r2, #127	; 0x7f
 80170a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80170ac:	e008      	b.n	80170c0 <UART_Start_Receive_IT+0xa4>
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	223f      	movs	r2, #63	; 0x3f
 80170b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80170b6:	e003      	b.n	80170c0 <UART_Start_Receive_IT+0xa4>
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	2200      	movs	r2, #0
 80170bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80170c0:	68fb      	ldr	r3, [r7, #12]
 80170c2:	2200      	movs	r2, #0
 80170c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80170c8:	68fb      	ldr	r3, [r7, #12]
 80170ca:	2222      	movs	r2, #34	; 0x22
 80170cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80170d0:	68fb      	ldr	r3, [r7, #12]
 80170d2:	681b      	ldr	r3, [r3, #0]
 80170d4:	3308      	adds	r3, #8
 80170d6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80170d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80170da:	e853 3f00 	ldrex	r3, [r3]
 80170de:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80170e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80170e2:	f043 0301 	orr.w	r3, r3, #1
 80170e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	3308      	adds	r3, #8
 80170f0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80170f4:	673a      	str	r2, [r7, #112]	; 0x70
 80170f6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80170f8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80170fa:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80170fc:	e841 2300 	strex	r3, r2, [r1]
 8017100:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8017102:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017104:	2b00      	cmp	r3, #0
 8017106:	d1e3      	bne.n	80170d0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8017108:	68fb      	ldr	r3, [r7, #12]
 801710a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801710c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8017110:	d14f      	bne.n	80171b2 <UART_Start_Receive_IT+0x196>
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017118:	88fa      	ldrh	r2, [r7, #6]
 801711a:	429a      	cmp	r2, r3
 801711c:	d349      	bcc.n	80171b2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801711e:	68fb      	ldr	r3, [r7, #12]
 8017120:	689b      	ldr	r3, [r3, #8]
 8017122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8017126:	d107      	bne.n	8017138 <UART_Start_Receive_IT+0x11c>
 8017128:	68fb      	ldr	r3, [r7, #12]
 801712a:	691b      	ldr	r3, [r3, #16]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d103      	bne.n	8017138 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	4a47      	ldr	r2, [pc, #284]	; (8017250 <UART_Start_Receive_IT+0x234>)
 8017134:	675a      	str	r2, [r3, #116]	; 0x74
 8017136:	e002      	b.n	801713e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8017138:	68fb      	ldr	r3, [r7, #12]
 801713a:	4a46      	ldr	r2, [pc, #280]	; (8017254 <UART_Start_Receive_IT+0x238>)
 801713c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801713e:	68fb      	ldr	r3, [r7, #12]
 8017140:	691b      	ldr	r3, [r3, #16]
 8017142:	2b00      	cmp	r3, #0
 8017144:	d01a      	beq.n	801717c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017146:	68fb      	ldr	r3, [r7, #12]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801714c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801714e:	e853 3f00 	ldrex	r3, [r3]
 8017152:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8017154:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017156:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801715a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801715e:	68fb      	ldr	r3, [r7, #12]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	461a      	mov	r2, r3
 8017164:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017168:	65fb      	str	r3, [r7, #92]	; 0x5c
 801716a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801716c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801716e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017170:	e841 2300 	strex	r3, r2, [r1]
 8017174:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8017176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8017178:	2b00      	cmp	r3, #0
 801717a:	d1e4      	bne.n	8017146 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	3308      	adds	r3, #8
 8017182:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017186:	e853 3f00 	ldrex	r3, [r3]
 801718a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801718c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801718e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017192:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017194:	68fb      	ldr	r3, [r7, #12]
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	3308      	adds	r3, #8
 801719a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801719c:	64ba      	str	r2, [r7, #72]	; 0x48
 801719e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80171a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80171a4:	e841 2300 	strex	r3, r2, [r1]
 80171a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80171aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	d1e5      	bne.n	801717c <UART_Start_Receive_IT+0x160>
 80171b0:	e046      	b.n	8017240 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80171b2:	68fb      	ldr	r3, [r7, #12]
 80171b4:	689b      	ldr	r3, [r3, #8]
 80171b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80171ba:	d107      	bne.n	80171cc <UART_Start_Receive_IT+0x1b0>
 80171bc:	68fb      	ldr	r3, [r7, #12]
 80171be:	691b      	ldr	r3, [r3, #16]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d103      	bne.n	80171cc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	4a24      	ldr	r2, [pc, #144]	; (8017258 <UART_Start_Receive_IT+0x23c>)
 80171c8:	675a      	str	r2, [r3, #116]	; 0x74
 80171ca:	e002      	b.n	80171d2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	4a23      	ldr	r2, [pc, #140]	; (801725c <UART_Start_Receive_IT+0x240>)
 80171d0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	691b      	ldr	r3, [r3, #16]
 80171d6:	2b00      	cmp	r3, #0
 80171d8:	d019      	beq.n	801720e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80171da:	68fb      	ldr	r3, [r7, #12]
 80171dc:	681b      	ldr	r3, [r3, #0]
 80171de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80171e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171e2:	e853 3f00 	ldrex	r3, [r3]
 80171e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80171e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80171ea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80171ee:	677b      	str	r3, [r7, #116]	; 0x74
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	461a      	mov	r2, r3
 80171f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80171f8:	637b      	str	r3, [r7, #52]	; 0x34
 80171fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80171fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80171fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017200:	e841 2300 	strex	r3, r2, [r1]
 8017204:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8017206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017208:	2b00      	cmp	r3, #0
 801720a:	d1e6      	bne.n	80171da <UART_Start_Receive_IT+0x1be>
 801720c:	e018      	b.n	8017240 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801720e:	68fb      	ldr	r3, [r7, #12]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017214:	697b      	ldr	r3, [r7, #20]
 8017216:	e853 3f00 	ldrex	r3, [r3]
 801721a:	613b      	str	r3, [r7, #16]
   return(result);
 801721c:	693b      	ldr	r3, [r7, #16]
 801721e:	f043 0320 	orr.w	r3, r3, #32
 8017222:	67bb      	str	r3, [r7, #120]	; 0x78
 8017224:	68fb      	ldr	r3, [r7, #12]
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	461a      	mov	r2, r3
 801722a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801722c:	623b      	str	r3, [r7, #32]
 801722e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017230:	69f9      	ldr	r1, [r7, #28]
 8017232:	6a3a      	ldr	r2, [r7, #32]
 8017234:	e841 2300 	strex	r3, r2, [r1]
 8017238:	61bb      	str	r3, [r7, #24]
   return(result);
 801723a:	69bb      	ldr	r3, [r7, #24]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d1e6      	bne.n	801720e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8017240:	2300      	movs	r3, #0
}
 8017242:	4618      	mov	r0, r3
 8017244:	378c      	adds	r7, #140	; 0x8c
 8017246:	46bd      	mov	sp, r7
 8017248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801724c:	4770      	bx	lr
 801724e:	bf00      	nop
 8017250:	08017a81 	.word	0x08017a81
 8017254:	08017721 	.word	0x08017721
 8017258:	08017569 	.word	0x08017569
 801725c:	080173b1 	.word	0x080173b1

08017260 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017260:	b480      	push	{r7}
 8017262:	b095      	sub	sp, #84	; 0x54
 8017264:	af00      	add	r7, sp, #0
 8017266:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	681b      	ldr	r3, [r3, #0]
 801726c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801726e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017270:	e853 3f00 	ldrex	r3, [r3]
 8017274:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801727c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	461a      	mov	r2, r3
 8017284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017286:	643b      	str	r3, [r7, #64]	; 0x40
 8017288:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801728a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801728c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801728e:	e841 2300 	strex	r3, r2, [r1]
 8017292:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017296:	2b00      	cmp	r3, #0
 8017298:	d1e6      	bne.n	8017268 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801729a:	687b      	ldr	r3, [r7, #4]
 801729c:	681b      	ldr	r3, [r3, #0]
 801729e:	3308      	adds	r3, #8
 80172a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172a2:	6a3b      	ldr	r3, [r7, #32]
 80172a4:	e853 3f00 	ldrex	r3, [r3]
 80172a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80172aa:	69fa      	ldr	r2, [r7, #28]
 80172ac:	4b1e      	ldr	r3, [pc, #120]	; (8017328 <UART_EndRxTransfer+0xc8>)
 80172ae:	4013      	ands	r3, r2
 80172b0:	64bb      	str	r3, [r7, #72]	; 0x48
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	3308      	adds	r3, #8
 80172b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80172ba:	62fa      	str	r2, [r7, #44]	; 0x2c
 80172bc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80172c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80172c2:	e841 2300 	strex	r3, r2, [r1]
 80172c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80172c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d1e5      	bne.n	801729a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172d2:	2b01      	cmp	r3, #1
 80172d4:	d118      	bne.n	8017308 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	e853 3f00 	ldrex	r3, [r3]
 80172e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80172e4:	68bb      	ldr	r3, [r7, #8]
 80172e6:	f023 0310 	bic.w	r3, r3, #16
 80172ea:	647b      	str	r3, [r7, #68]	; 0x44
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	681b      	ldr	r3, [r3, #0]
 80172f0:	461a      	mov	r2, r3
 80172f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80172f4:	61bb      	str	r3, [r7, #24]
 80172f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172f8:	6979      	ldr	r1, [r7, #20]
 80172fa:	69ba      	ldr	r2, [r7, #24]
 80172fc:	e841 2300 	strex	r3, r2, [r1]
 8017300:	613b      	str	r3, [r7, #16]
   return(result);
 8017302:	693b      	ldr	r3, [r7, #16]
 8017304:	2b00      	cmp	r3, #0
 8017306:	d1e6      	bne.n	80172d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017308:	687b      	ldr	r3, [r7, #4]
 801730a:	2220      	movs	r2, #32
 801730c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017310:	687b      	ldr	r3, [r7, #4]
 8017312:	2200      	movs	r2, #0
 8017314:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017316:	687b      	ldr	r3, [r7, #4]
 8017318:	2200      	movs	r2, #0
 801731a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801731c:	bf00      	nop
 801731e:	3754      	adds	r7, #84	; 0x54
 8017320:	46bd      	mov	sp, r7
 8017322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017326:	4770      	bx	lr
 8017328:	effffffe 	.word	0xeffffffe

0801732c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801732c:	b580      	push	{r7, lr}
 801732e:	b084      	sub	sp, #16
 8017330:	af00      	add	r7, sp, #0
 8017332:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8017338:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	2200      	movs	r2, #0
 801733e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8017342:	68fb      	ldr	r3, [r7, #12]
 8017344:	2200      	movs	r2, #0
 8017346:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801734a:	68f8      	ldr	r0, [r7, #12]
 801734c:	f7fe ff2e 	bl	80161ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017350:	bf00      	nop
 8017352:	3710      	adds	r7, #16
 8017354:	46bd      	mov	sp, r7
 8017356:	bd80      	pop	{r7, pc}

08017358 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017358:	b580      	push	{r7, lr}
 801735a:	b088      	sub	sp, #32
 801735c:	af00      	add	r7, sp, #0
 801735e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017360:	687b      	ldr	r3, [r7, #4]
 8017362:	681b      	ldr	r3, [r3, #0]
 8017364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	e853 3f00 	ldrex	r3, [r3]
 801736c:	60bb      	str	r3, [r7, #8]
   return(result);
 801736e:	68bb      	ldr	r3, [r7, #8]
 8017370:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8017374:	61fb      	str	r3, [r7, #28]
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	681b      	ldr	r3, [r3, #0]
 801737a:	461a      	mov	r2, r3
 801737c:	69fb      	ldr	r3, [r7, #28]
 801737e:	61bb      	str	r3, [r7, #24]
 8017380:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017382:	6979      	ldr	r1, [r7, #20]
 8017384:	69ba      	ldr	r2, [r7, #24]
 8017386:	e841 2300 	strex	r3, r2, [r1]
 801738a:	613b      	str	r3, [r7, #16]
   return(result);
 801738c:	693b      	ldr	r3, [r7, #16]
 801738e:	2b00      	cmp	r3, #0
 8017390:	d1e6      	bne.n	8017360 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	2220      	movs	r2, #32
 8017396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	2200      	movs	r2, #0
 801739e:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f7fe fef9 	bl	8016198 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80173a6:	bf00      	nop
 80173a8:	3720      	adds	r7, #32
 80173aa:	46bd      	mov	sp, r7
 80173ac:	bd80      	pop	{r7, pc}
	...

080173b0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80173b0:	b580      	push	{r7, lr}
 80173b2:	b09c      	sub	sp, #112	; 0x70
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80173be:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80173c8:	2b22      	cmp	r3, #34	; 0x22
 80173ca:	f040 80be 	bne.w	801754a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80173d4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80173d8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80173dc:	b2d9      	uxtb	r1, r3
 80173de:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80173e2:	b2da      	uxtb	r2, r3
 80173e4:	687b      	ldr	r3, [r7, #4]
 80173e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173e8:	400a      	ands	r2, r1
 80173ea:	b2d2      	uxtb	r2, r2
 80173ec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80173f2:	1c5a      	adds	r2, r3, #1
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80173f8:	687b      	ldr	r3, [r7, #4]
 80173fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80173fe:	b29b      	uxth	r3, r3
 8017400:	3b01      	subs	r3, #1
 8017402:	b29a      	uxth	r2, r3
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 801740a:	687b      	ldr	r3, [r7, #4]
 801740c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017410:	b29b      	uxth	r3, r3
 8017412:	2b00      	cmp	r3, #0
 8017414:	f040 80a1 	bne.w	801755a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801741e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017420:	e853 3f00 	ldrex	r3, [r3]
 8017424:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017426:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801742c:	66bb      	str	r3, [r7, #104]	; 0x68
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	461a      	mov	r2, r3
 8017434:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8017436:	65bb      	str	r3, [r7, #88]	; 0x58
 8017438:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801743a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801743c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801743e:	e841 2300 	strex	r3, r2, [r1]
 8017442:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017444:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017446:	2b00      	cmp	r3, #0
 8017448:	d1e6      	bne.n	8017418 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	3308      	adds	r3, #8
 8017450:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017454:	e853 3f00 	ldrex	r3, [r3]
 8017458:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801745a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801745c:	f023 0301 	bic.w	r3, r3, #1
 8017460:	667b      	str	r3, [r7, #100]	; 0x64
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	681b      	ldr	r3, [r3, #0]
 8017466:	3308      	adds	r3, #8
 8017468:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801746a:	647a      	str	r2, [r7, #68]	; 0x44
 801746c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801746e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017472:	e841 2300 	strex	r3, r2, [r1]
 8017476:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801747a:	2b00      	cmp	r3, #0
 801747c:	d1e5      	bne.n	801744a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	2220      	movs	r2, #32
 8017482:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	2200      	movs	r2, #0
 801748a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801748c:	687b      	ldr	r3, [r7, #4]
 801748e:	2200      	movs	r2, #0
 8017490:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	4a33      	ldr	r2, [pc, #204]	; (8017564 <UART_RxISR_8BIT+0x1b4>)
 8017498:	4293      	cmp	r3, r2
 801749a:	d01f      	beq.n	80174dc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801749c:	687b      	ldr	r3, [r7, #4]
 801749e:	681b      	ldr	r3, [r3, #0]
 80174a0:	685b      	ldr	r3, [r3, #4]
 80174a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80174a6:	2b00      	cmp	r3, #0
 80174a8:	d018      	beq.n	80174dc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80174aa:	687b      	ldr	r3, [r7, #4]
 80174ac:	681b      	ldr	r3, [r3, #0]
 80174ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80174b2:	e853 3f00 	ldrex	r3, [r3]
 80174b6:	623b      	str	r3, [r7, #32]
   return(result);
 80174b8:	6a3b      	ldr	r3, [r7, #32]
 80174ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80174be:	663b      	str	r3, [r7, #96]	; 0x60
 80174c0:	687b      	ldr	r3, [r7, #4]
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	461a      	mov	r2, r3
 80174c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80174c8:	633b      	str	r3, [r7, #48]	; 0x30
 80174ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80174ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80174d0:	e841 2300 	strex	r3, r2, [r1]
 80174d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80174d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d1e6      	bne.n	80174aa <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80174e0:	2b01      	cmp	r3, #1
 80174e2:	d12e      	bne.n	8017542 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80174e4:	687b      	ldr	r3, [r7, #4]
 80174e6:	2200      	movs	r2, #0
 80174e8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80174f0:	693b      	ldr	r3, [r7, #16]
 80174f2:	e853 3f00 	ldrex	r3, [r3]
 80174f6:	60fb      	str	r3, [r7, #12]
   return(result);
 80174f8:	68fb      	ldr	r3, [r7, #12]
 80174fa:	f023 0310 	bic.w	r3, r3, #16
 80174fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	461a      	mov	r2, r3
 8017506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017508:	61fb      	str	r3, [r7, #28]
 801750a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801750c:	69b9      	ldr	r1, [r7, #24]
 801750e:	69fa      	ldr	r2, [r7, #28]
 8017510:	e841 2300 	strex	r3, r2, [r1]
 8017514:	617b      	str	r3, [r7, #20]
   return(result);
 8017516:	697b      	ldr	r3, [r7, #20]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d1e6      	bne.n	80174ea <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	681b      	ldr	r3, [r3, #0]
 8017520:	69db      	ldr	r3, [r3, #28]
 8017522:	f003 0310 	and.w	r3, r3, #16
 8017526:	2b10      	cmp	r3, #16
 8017528:	d103      	bne.n	8017532 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	2210      	movs	r2, #16
 8017530:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017538:	4619      	mov	r1, r3
 801753a:	6878      	ldr	r0, [r7, #4]
 801753c:	f7fe fe40 	bl	80161c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017540:	e00b      	b.n	801755a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8017542:	6878      	ldr	r0, [r7, #4]
 8017544:	f7eb fdac 	bl	80030a0 <HAL_UART_RxCpltCallback>
}
 8017548:	e007      	b.n	801755a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801754a:	687b      	ldr	r3, [r7, #4]
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	699a      	ldr	r2, [r3, #24]
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	681b      	ldr	r3, [r3, #0]
 8017554:	f042 0208 	orr.w	r2, r2, #8
 8017558:	619a      	str	r2, [r3, #24]
}
 801755a:	bf00      	nop
 801755c:	3770      	adds	r7, #112	; 0x70
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}
 8017562:	bf00      	nop
 8017564:	58000c00 	.word	0x58000c00

08017568 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017568:	b580      	push	{r7, lr}
 801756a:	b09c      	sub	sp, #112	; 0x70
 801756c:	af00      	add	r7, sp, #0
 801756e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017570:	687b      	ldr	r3, [r7, #4]
 8017572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017576:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801757a:	687b      	ldr	r3, [r7, #4]
 801757c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017580:	2b22      	cmp	r3, #34	; 0x22
 8017582:	f040 80be 	bne.w	8017702 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801758c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017594:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8017596:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 801759a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 801759e:	4013      	ands	r3, r2
 80175a0:	b29a      	uxth	r2, r3
 80175a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80175a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80175aa:	1c9a      	adds	r2, r3, #2
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80175b0:	687b      	ldr	r3, [r7, #4]
 80175b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80175b6:	b29b      	uxth	r3, r3
 80175b8:	3b01      	subs	r3, #1
 80175ba:	b29a      	uxth	r2, r3
 80175bc:	687b      	ldr	r3, [r7, #4]
 80175be:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80175c8:	b29b      	uxth	r3, r3
 80175ca:	2b00      	cmp	r3, #0
 80175cc:	f040 80a1 	bne.w	8017712 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	681b      	ldr	r3, [r3, #0]
 80175d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80175d8:	e853 3f00 	ldrex	r3, [r3]
 80175dc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80175de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80175e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80175e4:	667b      	str	r3, [r7, #100]	; 0x64
 80175e6:	687b      	ldr	r3, [r7, #4]
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	461a      	mov	r2, r3
 80175ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80175ee:	657b      	str	r3, [r7, #84]	; 0x54
 80175f0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80175f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80175f6:	e841 2300 	strex	r3, r2, [r1]
 80175fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80175fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80175fe:	2b00      	cmp	r3, #0
 8017600:	d1e6      	bne.n	80175d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017602:	687b      	ldr	r3, [r7, #4]
 8017604:	681b      	ldr	r3, [r3, #0]
 8017606:	3308      	adds	r3, #8
 8017608:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801760a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801760c:	e853 3f00 	ldrex	r3, [r3]
 8017610:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8017612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017614:	f023 0301 	bic.w	r3, r3, #1
 8017618:	663b      	str	r3, [r7, #96]	; 0x60
 801761a:	687b      	ldr	r3, [r7, #4]
 801761c:	681b      	ldr	r3, [r3, #0]
 801761e:	3308      	adds	r3, #8
 8017620:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8017622:	643a      	str	r2, [r7, #64]	; 0x40
 8017624:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017626:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801762a:	e841 2300 	strex	r3, r2, [r1]
 801762e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8017630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017632:	2b00      	cmp	r3, #0
 8017634:	d1e5      	bne.n	8017602 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	2220      	movs	r2, #32
 801763a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801763e:	687b      	ldr	r3, [r7, #4]
 8017640:	2200      	movs	r2, #0
 8017642:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	2200      	movs	r2, #0
 8017648:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801764a:	687b      	ldr	r3, [r7, #4]
 801764c:	681b      	ldr	r3, [r3, #0]
 801764e:	4a33      	ldr	r2, [pc, #204]	; (801771c <UART_RxISR_16BIT+0x1b4>)
 8017650:	4293      	cmp	r3, r2
 8017652:	d01f      	beq.n	8017694 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017654:	687b      	ldr	r3, [r7, #4]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	685b      	ldr	r3, [r3, #4]
 801765a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801765e:	2b00      	cmp	r3, #0
 8017660:	d018      	beq.n	8017694 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017662:	687b      	ldr	r3, [r7, #4]
 8017664:	681b      	ldr	r3, [r3, #0]
 8017666:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017668:	6a3b      	ldr	r3, [r7, #32]
 801766a:	e853 3f00 	ldrex	r3, [r3]
 801766e:	61fb      	str	r3, [r7, #28]
   return(result);
 8017670:	69fb      	ldr	r3, [r7, #28]
 8017672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017676:	65fb      	str	r3, [r7, #92]	; 0x5c
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	461a      	mov	r2, r3
 801767e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8017680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017682:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017684:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017686:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017688:	e841 2300 	strex	r3, r2, [r1]
 801768c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017690:	2b00      	cmp	r3, #0
 8017692:	d1e6      	bne.n	8017662 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017698:	2b01      	cmp	r3, #1
 801769a:	d12e      	bne.n	80176fa <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801769c:	687b      	ldr	r3, [r7, #4]
 801769e:	2200      	movs	r2, #0
 80176a0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	681b      	ldr	r3, [r3, #0]
 80176a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176a8:	68fb      	ldr	r3, [r7, #12]
 80176aa:	e853 3f00 	ldrex	r3, [r3]
 80176ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	f023 0310 	bic.w	r3, r3, #16
 80176b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	681b      	ldr	r3, [r3, #0]
 80176bc:	461a      	mov	r2, r3
 80176be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80176c0:	61bb      	str	r3, [r7, #24]
 80176c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80176c4:	6979      	ldr	r1, [r7, #20]
 80176c6:	69ba      	ldr	r2, [r7, #24]
 80176c8:	e841 2300 	strex	r3, r2, [r1]
 80176cc:	613b      	str	r3, [r7, #16]
   return(result);
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d1e6      	bne.n	80176a2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	681b      	ldr	r3, [r3, #0]
 80176d8:	69db      	ldr	r3, [r3, #28]
 80176da:	f003 0310 	and.w	r3, r3, #16
 80176de:	2b10      	cmp	r3, #16
 80176e0:	d103      	bne.n	80176ea <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80176e2:	687b      	ldr	r3, [r7, #4]
 80176e4:	681b      	ldr	r3, [r3, #0]
 80176e6:	2210      	movs	r2, #16
 80176e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80176f0:	4619      	mov	r1, r3
 80176f2:	6878      	ldr	r0, [r7, #4]
 80176f4:	f7fe fd64 	bl	80161c0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80176f8:	e00b      	b.n	8017712 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80176fa:	6878      	ldr	r0, [r7, #4]
 80176fc:	f7eb fcd0 	bl	80030a0 <HAL_UART_RxCpltCallback>
}
 8017700:	e007      	b.n	8017712 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017702:	687b      	ldr	r3, [r7, #4]
 8017704:	681b      	ldr	r3, [r3, #0]
 8017706:	699a      	ldr	r2, [r3, #24]
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	681b      	ldr	r3, [r3, #0]
 801770c:	f042 0208 	orr.w	r2, r2, #8
 8017710:	619a      	str	r2, [r3, #24]
}
 8017712:	bf00      	nop
 8017714:	3770      	adds	r7, #112	; 0x70
 8017716:	46bd      	mov	sp, r7
 8017718:	bd80      	pop	{r7, pc}
 801771a:	bf00      	nop
 801771c:	58000c00 	.word	0x58000c00

08017720 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017720:	b580      	push	{r7, lr}
 8017722:	b0ac      	sub	sp, #176	; 0xb0
 8017724:	af00      	add	r7, sp, #0
 8017726:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801772e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	69db      	ldr	r3, [r3, #28]
 8017738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801773c:	687b      	ldr	r3, [r7, #4]
 801773e:	681b      	ldr	r3, [r3, #0]
 8017740:	681b      	ldr	r3, [r3, #0]
 8017742:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	681b      	ldr	r3, [r3, #0]
 801774a:	689b      	ldr	r3, [r3, #8]
 801774c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017756:	2b22      	cmp	r3, #34	; 0x22
 8017758:	f040 8180 	bne.w	8017a5c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017762:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017766:	e123      	b.n	80179b0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017768:	687b      	ldr	r3, [r7, #4]
 801776a:	681b      	ldr	r3, [r3, #0]
 801776c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801776e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017772:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8017776:	b2d9      	uxtb	r1, r3
 8017778:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 801777c:	b2da      	uxtb	r2, r3
 801777e:	687b      	ldr	r3, [r7, #4]
 8017780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017782:	400a      	ands	r2, r1
 8017784:	b2d2      	uxtb	r2, r2
 8017786:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801778c:	1c5a      	adds	r2, r3, #1
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8017792:	687b      	ldr	r3, [r7, #4]
 8017794:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017798:	b29b      	uxth	r3, r3
 801779a:	3b01      	subs	r3, #1
 801779c:	b29a      	uxth	r2, r3
 801779e:	687b      	ldr	r3, [r7, #4]
 80177a0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	681b      	ldr	r3, [r3, #0]
 80177a8:	69db      	ldr	r3, [r3, #28]
 80177aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80177ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80177b2:	f003 0307 	and.w	r3, r3, #7
 80177b6:	2b00      	cmp	r3, #0
 80177b8:	d053      	beq.n	8017862 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80177ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80177be:	f003 0301 	and.w	r3, r3, #1
 80177c2:	2b00      	cmp	r3, #0
 80177c4:	d011      	beq.n	80177ea <UART_RxISR_8BIT_FIFOEN+0xca>
 80177c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80177ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80177ce:	2b00      	cmp	r3, #0
 80177d0:	d00b      	beq.n	80177ea <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80177d2:	687b      	ldr	r3, [r7, #4]
 80177d4:	681b      	ldr	r3, [r3, #0]
 80177d6:	2201      	movs	r2, #1
 80177d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80177da:	687b      	ldr	r3, [r7, #4]
 80177dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80177e0:	f043 0201 	orr.w	r2, r3, #1
 80177e4:	687b      	ldr	r3, [r7, #4]
 80177e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80177ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80177ee:	f003 0302 	and.w	r3, r3, #2
 80177f2:	2b00      	cmp	r3, #0
 80177f4:	d011      	beq.n	801781a <UART_RxISR_8BIT_FIFOEN+0xfa>
 80177f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80177fa:	f003 0301 	and.w	r3, r3, #1
 80177fe:	2b00      	cmp	r3, #0
 8017800:	d00b      	beq.n	801781a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017802:	687b      	ldr	r3, [r7, #4]
 8017804:	681b      	ldr	r3, [r3, #0]
 8017806:	2202      	movs	r2, #2
 8017808:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017810:	f043 0204 	orr.w	r2, r3, #4
 8017814:	687b      	ldr	r3, [r7, #4]
 8017816:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801781a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801781e:	f003 0304 	and.w	r3, r3, #4
 8017822:	2b00      	cmp	r3, #0
 8017824:	d011      	beq.n	801784a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8017826:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801782a:	f003 0301 	and.w	r3, r3, #1
 801782e:	2b00      	cmp	r3, #0
 8017830:	d00b      	beq.n	801784a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017832:	687b      	ldr	r3, [r7, #4]
 8017834:	681b      	ldr	r3, [r3, #0]
 8017836:	2204      	movs	r2, #4
 8017838:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017840:	f043 0202 	orr.w	r2, r3, #2
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801784a:	687b      	ldr	r3, [r7, #4]
 801784c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017850:	2b00      	cmp	r3, #0
 8017852:	d006      	beq.n	8017862 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017854:	6878      	ldr	r0, [r7, #4]
 8017856:	f7fe fca9 	bl	80161ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	2200      	movs	r2, #0
 801785e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8017862:	687b      	ldr	r3, [r7, #4]
 8017864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017868:	b29b      	uxth	r3, r3
 801786a:	2b00      	cmp	r3, #0
 801786c:	f040 80a0 	bne.w	80179b0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017876:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017878:	e853 3f00 	ldrex	r3, [r3]
 801787c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 801787e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8017880:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017884:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	681b      	ldr	r3, [r3, #0]
 801788c:	461a      	mov	r2, r3
 801788e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8017892:	67fb      	str	r3, [r7, #124]	; 0x7c
 8017894:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017896:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8017898:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801789a:	e841 2300 	strex	r3, r2, [r1]
 801789e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80178a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d1e4      	bne.n	8017870 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	681b      	ldr	r3, [r3, #0]
 80178aa:	3308      	adds	r3, #8
 80178ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80178ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80178b0:	e853 3f00 	ldrex	r3, [r3]
 80178b4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80178b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80178b8:	4b6e      	ldr	r3, [pc, #440]	; (8017a74 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80178ba:	4013      	ands	r3, r2
 80178bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	681b      	ldr	r3, [r3, #0]
 80178c4:	3308      	adds	r3, #8
 80178c6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80178ca:	66ba      	str	r2, [r7, #104]	; 0x68
 80178cc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80178ce:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80178d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80178d2:	e841 2300 	strex	r3, r2, [r1]
 80178d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80178d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80178da:	2b00      	cmp	r3, #0
 80178dc:	d1e3      	bne.n	80178a6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	2220      	movs	r2, #32
 80178e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	2200      	movs	r2, #0
 80178ea:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	2200      	movs	r2, #0
 80178f0:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	681b      	ldr	r3, [r3, #0]
 80178f6:	4a60      	ldr	r2, [pc, #384]	; (8017a78 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80178f8:	4293      	cmp	r3, r2
 80178fa:	d021      	beq.n	8017940 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	681b      	ldr	r3, [r3, #0]
 8017900:	685b      	ldr	r3, [r3, #4]
 8017902:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017906:	2b00      	cmp	r3, #0
 8017908:	d01a      	beq.n	8017940 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	681b      	ldr	r3, [r3, #0]
 801790e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017910:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017912:	e853 3f00 	ldrex	r3, [r3]
 8017916:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8017918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801791a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801791e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	681b      	ldr	r3, [r3, #0]
 8017926:	461a      	mov	r2, r3
 8017928:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801792c:	657b      	str	r3, [r7, #84]	; 0x54
 801792e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017930:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017932:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8017934:	e841 2300 	strex	r3, r2, [r1]
 8017938:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801793a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801793c:	2b00      	cmp	r3, #0
 801793e:	d1e4      	bne.n	801790a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017940:	687b      	ldr	r3, [r7, #4]
 8017942:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017944:	2b01      	cmp	r3, #1
 8017946:	d130      	bne.n	80179aa <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	2200      	movs	r2, #0
 801794c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801794e:	687b      	ldr	r3, [r7, #4]
 8017950:	681b      	ldr	r3, [r3, #0]
 8017952:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017956:	e853 3f00 	ldrex	r3, [r3]
 801795a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801795c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801795e:	f023 0310 	bic.w	r3, r3, #16
 8017962:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8017966:	687b      	ldr	r3, [r7, #4]
 8017968:	681b      	ldr	r3, [r3, #0]
 801796a:	461a      	mov	r2, r3
 801796c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017970:	643b      	str	r3, [r7, #64]	; 0x40
 8017972:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017974:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8017976:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8017978:	e841 2300 	strex	r3, r2, [r1]
 801797c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801797e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017980:	2b00      	cmp	r3, #0
 8017982:	d1e4      	bne.n	801794e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017984:	687b      	ldr	r3, [r7, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	69db      	ldr	r3, [r3, #28]
 801798a:	f003 0310 	and.w	r3, r3, #16
 801798e:	2b10      	cmp	r3, #16
 8017990:	d103      	bne.n	801799a <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017992:	687b      	ldr	r3, [r7, #4]
 8017994:	681b      	ldr	r3, [r3, #0]
 8017996:	2210      	movs	r2, #16
 8017998:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80179a0:	4619      	mov	r1, r3
 80179a2:	6878      	ldr	r0, [r7, #4]
 80179a4:	f7fe fc0c 	bl	80161c0 <HAL_UARTEx_RxEventCallback>
 80179a8:	e002      	b.n	80179b0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80179aa:	6878      	ldr	r0, [r7, #4]
 80179ac:	f7eb fb78 	bl	80030a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80179b0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d006      	beq.n	80179c6 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80179b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80179bc:	f003 0320 	and.w	r3, r3, #32
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	f47f aed1 	bne.w	8017768 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80179cc:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80179d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80179d4:	2b00      	cmp	r3, #0
 80179d6:	d049      	beq.n	8017a6c <UART_RxISR_8BIT_FIFOEN+0x34c>
 80179d8:	687b      	ldr	r3, [r7, #4]
 80179da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80179de:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80179e2:	429a      	cmp	r2, r3
 80179e4:	d242      	bcs.n	8017a6c <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80179e6:	687b      	ldr	r3, [r7, #4]
 80179e8:	681b      	ldr	r3, [r3, #0]
 80179ea:	3308      	adds	r3, #8
 80179ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179ee:	6a3b      	ldr	r3, [r7, #32]
 80179f0:	e853 3f00 	ldrex	r3, [r3]
 80179f4:	61fb      	str	r3, [r7, #28]
   return(result);
 80179f6:	69fb      	ldr	r3, [r7, #28]
 80179f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80179fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017a00:	687b      	ldr	r3, [r7, #4]
 8017a02:	681b      	ldr	r3, [r3, #0]
 8017a04:	3308      	adds	r3, #8
 8017a06:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8017a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8017a0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a0e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017a10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017a12:	e841 2300 	strex	r3, r2, [r1]
 8017a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8017a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017a1a:	2b00      	cmp	r3, #0
 8017a1c:	d1e3      	bne.n	80179e6 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	4a16      	ldr	r2, [pc, #88]	; (8017a7c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8017a22:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017a24:	687b      	ldr	r3, [r7, #4]
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a2a:	68fb      	ldr	r3, [r7, #12]
 8017a2c:	e853 3f00 	ldrex	r3, [r3]
 8017a30:	60bb      	str	r3, [r7, #8]
   return(result);
 8017a32:	68bb      	ldr	r3, [r7, #8]
 8017a34:	f043 0320 	orr.w	r3, r3, #32
 8017a38:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017a3c:	687b      	ldr	r3, [r7, #4]
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	461a      	mov	r2, r3
 8017a42:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8017a46:	61bb      	str	r3, [r7, #24]
 8017a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a4a:	6979      	ldr	r1, [r7, #20]
 8017a4c:	69ba      	ldr	r2, [r7, #24]
 8017a4e:	e841 2300 	strex	r3, r2, [r1]
 8017a52:	613b      	str	r3, [r7, #16]
   return(result);
 8017a54:	693b      	ldr	r3, [r7, #16]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d1e4      	bne.n	8017a24 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017a5a:	e007      	b.n	8017a6c <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017a5c:	687b      	ldr	r3, [r7, #4]
 8017a5e:	681b      	ldr	r3, [r3, #0]
 8017a60:	699a      	ldr	r2, [r3, #24]
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	681b      	ldr	r3, [r3, #0]
 8017a66:	f042 0208 	orr.w	r2, r2, #8
 8017a6a:	619a      	str	r2, [r3, #24]
}
 8017a6c:	bf00      	nop
 8017a6e:	37b0      	adds	r7, #176	; 0xb0
 8017a70:	46bd      	mov	sp, r7
 8017a72:	bd80      	pop	{r7, pc}
 8017a74:	effffffe 	.word	0xeffffffe
 8017a78:	58000c00 	.word	0x58000c00
 8017a7c:	080173b1 	.word	0x080173b1

08017a80 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017a80:	b580      	push	{r7, lr}
 8017a82:	b0ae      	sub	sp, #184	; 0xb8
 8017a84:	af00      	add	r7, sp, #0
 8017a86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017a8e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	69db      	ldr	r3, [r3, #28]
 8017a98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017a9c:	687b      	ldr	r3, [r7, #4]
 8017a9e:	681b      	ldr	r3, [r3, #0]
 8017aa0:	681b      	ldr	r3, [r3, #0]
 8017aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	681b      	ldr	r3, [r3, #0]
 8017aaa:	689b      	ldr	r3, [r3, #8]
 8017aac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8017ab6:	2b22      	cmp	r3, #34	; 0x22
 8017ab8:	f040 8184 	bne.w	8017dc4 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017abc:	687b      	ldr	r3, [r7, #4]
 8017abe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017ac2:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017ac6:	e127      	b.n	8017d18 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017ace:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017ad6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8017ada:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8017ade:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8017ae2:	4013      	ands	r3, r2
 8017ae4:	b29a      	uxth	r2, r3
 8017ae6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8017aea:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8017af0:	1c9a      	adds	r2, r3, #2
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017afc:	b29b      	uxth	r3, r3
 8017afe:	3b01      	subs	r3, #1
 8017b00:	b29a      	uxth	r2, r3
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	681b      	ldr	r3, [r3, #0]
 8017b0c:	69db      	ldr	r3, [r3, #28]
 8017b0e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017b12:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017b16:	f003 0307 	and.w	r3, r3, #7
 8017b1a:	2b00      	cmp	r3, #0
 8017b1c:	d053      	beq.n	8017bc6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017b1e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017b22:	f003 0301 	and.w	r3, r3, #1
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d011      	beq.n	8017b4e <UART_RxISR_16BIT_FIFOEN+0xce>
 8017b2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8017b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	d00b      	beq.n	8017b4e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	2201      	movs	r2, #1
 8017b3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017b3e:	687b      	ldr	r3, [r7, #4]
 8017b40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b44:	f043 0201 	orr.w	r2, r3, #1
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017b4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017b52:	f003 0302 	and.w	r3, r3, #2
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	d011      	beq.n	8017b7e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8017b5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017b5e:	f003 0301 	and.w	r3, r3, #1
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d00b      	beq.n	8017b7e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	2202      	movs	r2, #2
 8017b6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017b6e:	687b      	ldr	r3, [r7, #4]
 8017b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017b74:	f043 0204 	orr.w	r2, r3, #4
 8017b78:	687b      	ldr	r3, [r7, #4]
 8017b7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017b7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017b82:	f003 0304 	and.w	r3, r3, #4
 8017b86:	2b00      	cmp	r3, #0
 8017b88:	d011      	beq.n	8017bae <UART_RxISR_16BIT_FIFOEN+0x12e>
 8017b8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8017b8e:	f003 0301 	and.w	r3, r3, #1
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	d00b      	beq.n	8017bae <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017b96:	687b      	ldr	r3, [r7, #4]
 8017b98:	681b      	ldr	r3, [r3, #0]
 8017b9a:	2204      	movs	r2, #4
 8017b9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017b9e:	687b      	ldr	r3, [r7, #4]
 8017ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017ba4:	f043 0202 	orr.w	r2, r3, #2
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	d006      	beq.n	8017bc6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017bb8:	6878      	ldr	r0, [r7, #4]
 8017bba:	f7fe faf7 	bl	80161ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8017bc6:	687b      	ldr	r3, [r7, #4]
 8017bc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017bcc:	b29b      	uxth	r3, r3
 8017bce:	2b00      	cmp	r3, #0
 8017bd0:	f040 80a2 	bne.w	8017d18 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017bd4:	687b      	ldr	r3, [r7, #4]
 8017bd6:	681b      	ldr	r3, [r3, #0]
 8017bd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017bda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8017bdc:	e853 3f00 	ldrex	r3, [r3]
 8017be0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8017be2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8017be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8017be8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	461a      	mov	r2, r3
 8017bf2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8017bf6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8017bfa:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017bfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8017bfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8017c02:	e841 2300 	strex	r3, r2, [r1]
 8017c06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8017c08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d1e2      	bne.n	8017bd4 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017c0e:	687b      	ldr	r3, [r7, #4]
 8017c10:	681b      	ldr	r3, [r3, #0]
 8017c12:	3308      	adds	r3, #8
 8017c14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8017c18:	e853 3f00 	ldrex	r3, [r3]
 8017c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8017c1e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8017c20:	4b6e      	ldr	r3, [pc, #440]	; (8017ddc <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8017c22:	4013      	ands	r3, r2
 8017c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	681b      	ldr	r3, [r3, #0]
 8017c2c:	3308      	adds	r3, #8
 8017c2e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8017c32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8017c34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8017c38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8017c3a:	e841 2300 	strex	r3, r2, [r1]
 8017c3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8017c40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d1e3      	bne.n	8017c0e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017c46:	687b      	ldr	r3, [r7, #4]
 8017c48:	2220      	movs	r2, #32
 8017c4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017c4e:	687b      	ldr	r3, [r7, #4]
 8017c50:	2200      	movs	r2, #0
 8017c52:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017c54:	687b      	ldr	r3, [r7, #4]
 8017c56:	2200      	movs	r2, #0
 8017c58:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	4a60      	ldr	r2, [pc, #384]	; (8017de0 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8017c60:	4293      	cmp	r3, r2
 8017c62:	d021      	beq.n	8017ca8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	685b      	ldr	r3, [r3, #4]
 8017c6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017c6e:	2b00      	cmp	r3, #0
 8017c70:	d01a      	beq.n	8017ca8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	681b      	ldr	r3, [r3, #0]
 8017c76:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017c78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c7a:	e853 3f00 	ldrex	r3, [r3]
 8017c7e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8017c80:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017c82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8017c86:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8017c8a:	687b      	ldr	r3, [r7, #4]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	461a      	mov	r2, r3
 8017c90:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8017c94:	65bb      	str	r3, [r7, #88]	; 0x58
 8017c96:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017c98:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8017c9a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8017c9c:	e841 2300 	strex	r3, r2, [r1]
 8017ca0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8017ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017ca4:	2b00      	cmp	r3, #0
 8017ca6:	d1e4      	bne.n	8017c72 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017ca8:	687b      	ldr	r3, [r7, #4]
 8017caa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017cac:	2b01      	cmp	r3, #1
 8017cae:	d130      	bne.n	8017d12 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017cb0:	687b      	ldr	r3, [r7, #4]
 8017cb2:	2200      	movs	r2, #0
 8017cb4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cbe:	e853 3f00 	ldrex	r3, [r3]
 8017cc2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8017cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017cc6:	f023 0310 	bic.w	r3, r3, #16
 8017cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	681b      	ldr	r3, [r3, #0]
 8017cd2:	461a      	mov	r2, r3
 8017cd4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8017cd8:	647b      	str	r3, [r7, #68]	; 0x44
 8017cda:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017cdc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8017cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8017ce0:	e841 2300 	strex	r3, r2, [r1]
 8017ce4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8017ce6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017ce8:	2b00      	cmp	r3, #0
 8017cea:	d1e4      	bne.n	8017cb6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	69db      	ldr	r3, [r3, #28]
 8017cf2:	f003 0310 	and.w	r3, r3, #16
 8017cf6:	2b10      	cmp	r3, #16
 8017cf8:	d103      	bne.n	8017d02 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	2210      	movs	r2, #16
 8017d00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8017d08:	4619      	mov	r1, r3
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f7fe fa58 	bl	80161c0 <HAL_UARTEx_RxEventCallback>
 8017d10:	e002      	b.n	8017d18 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017d12:	6878      	ldr	r0, [r7, #4]
 8017d14:	f7eb f9c4 	bl	80030a0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017d18:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8017d1c:	2b00      	cmp	r3, #0
 8017d1e:	d006      	beq.n	8017d2e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8017d20:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8017d24:	f003 0320 	and.w	r3, r3, #32
 8017d28:	2b00      	cmp	r3, #0
 8017d2a:	f47f aecd 	bne.w	8017ac8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017d2e:	687b      	ldr	r3, [r7, #4]
 8017d30:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8017d34:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017d38:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8017d3c:	2b00      	cmp	r3, #0
 8017d3e:	d049      	beq.n	8017dd4 <UART_RxISR_16BIT_FIFOEN+0x354>
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8017d46:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8017d4a:	429a      	cmp	r2, r3
 8017d4c:	d242      	bcs.n	8017dd4 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017d4e:	687b      	ldr	r3, [r7, #4]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	3308      	adds	r3, #8
 8017d54:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d58:	e853 3f00 	ldrex	r3, [r3]
 8017d5c:	623b      	str	r3, [r7, #32]
   return(result);
 8017d5e:	6a3b      	ldr	r3, [r7, #32]
 8017d60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8017d64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	3308      	adds	r3, #8
 8017d6e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8017d72:	633a      	str	r2, [r7, #48]	; 0x30
 8017d74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017d7a:	e841 2300 	strex	r3, r2, [r1]
 8017d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8017d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	d1e3      	bne.n	8017d4e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	4a16      	ldr	r2, [pc, #88]	; (8017de4 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8017d8a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017d8c:	687b      	ldr	r3, [r7, #4]
 8017d8e:	681b      	ldr	r3, [r3, #0]
 8017d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d92:	693b      	ldr	r3, [r7, #16]
 8017d94:	e853 3f00 	ldrex	r3, [r3]
 8017d98:	60fb      	str	r3, [r7, #12]
   return(result);
 8017d9a:	68fb      	ldr	r3, [r7, #12]
 8017d9c:	f043 0320 	orr.w	r3, r3, #32
 8017da0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	681b      	ldr	r3, [r3, #0]
 8017da8:	461a      	mov	r2, r3
 8017daa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8017dae:	61fb      	str	r3, [r7, #28]
 8017db0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017db2:	69b9      	ldr	r1, [r7, #24]
 8017db4:	69fa      	ldr	r2, [r7, #28]
 8017db6:	e841 2300 	strex	r3, r2, [r1]
 8017dba:	617b      	str	r3, [r7, #20]
   return(result);
 8017dbc:	697b      	ldr	r3, [r7, #20]
 8017dbe:	2b00      	cmp	r3, #0
 8017dc0:	d1e4      	bne.n	8017d8c <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017dc2:	e007      	b.n	8017dd4 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	699a      	ldr	r2, [r3, #24]
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	681b      	ldr	r3, [r3, #0]
 8017dce:	f042 0208 	orr.w	r2, r2, #8
 8017dd2:	619a      	str	r2, [r3, #24]
}
 8017dd4:	bf00      	nop
 8017dd6:	37b8      	adds	r7, #184	; 0xb8
 8017dd8:	46bd      	mov	sp, r7
 8017dda:	bd80      	pop	{r7, pc}
 8017ddc:	effffffe 	.word	0xeffffffe
 8017de0:	58000c00 	.word	0x58000c00
 8017de4:	08017569 	.word	0x08017569

08017de8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017de8:	b480      	push	{r7}
 8017dea:	b083      	sub	sp, #12
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017df0:	bf00      	nop
 8017df2:	370c      	adds	r7, #12
 8017df4:	46bd      	mov	sp, r7
 8017df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017dfa:	4770      	bx	lr

08017dfc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8017dfc:	b480      	push	{r7}
 8017dfe:	b083      	sub	sp, #12
 8017e00:	af00      	add	r7, sp, #0
 8017e02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8017e04:	bf00      	nop
 8017e06:	370c      	adds	r7, #12
 8017e08:	46bd      	mov	sp, r7
 8017e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e0e:	4770      	bx	lr

08017e10 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8017e10:	b480      	push	{r7}
 8017e12:	b083      	sub	sp, #12
 8017e14:	af00      	add	r7, sp, #0
 8017e16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8017e18:	bf00      	nop
 8017e1a:	370c      	adds	r7, #12
 8017e1c:	46bd      	mov	sp, r7
 8017e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e22:	4770      	bx	lr

08017e24 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 8017e24:	b480      	push	{r7}
 8017e26:	b089      	sub	sp, #36	; 0x24
 8017e28:	af00      	add	r7, sp, #0
 8017e2a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017e32:	2b01      	cmp	r3, #1
 8017e34:	d101      	bne.n	8017e3a <HAL_UARTEx_EnableStopMode+0x16>
 8017e36:	2302      	movs	r3, #2
 8017e38:	e021      	b.n	8017e7e <HAL_UARTEx_EnableStopMode+0x5a>
 8017e3a:	687b      	ldr	r3, [r7, #4]
 8017e3c:	2201      	movs	r2, #1
 8017e3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	681b      	ldr	r3, [r3, #0]
 8017e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	e853 3f00 	ldrex	r3, [r3]
 8017e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017e50:	68bb      	ldr	r3, [r7, #8]
 8017e52:	f043 0302 	orr.w	r3, r3, #2
 8017e56:	61fb      	str	r3, [r7, #28]
 8017e58:	687b      	ldr	r3, [r7, #4]
 8017e5a:	681b      	ldr	r3, [r3, #0]
 8017e5c:	461a      	mov	r2, r3
 8017e5e:	69fb      	ldr	r3, [r7, #28]
 8017e60:	61bb      	str	r3, [r7, #24]
 8017e62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e64:	6979      	ldr	r1, [r7, #20]
 8017e66:	69ba      	ldr	r2, [r7, #24]
 8017e68:	e841 2300 	strex	r3, r2, [r1]
 8017e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8017e6e:	693b      	ldr	r3, [r7, #16]
 8017e70:	2b00      	cmp	r3, #0
 8017e72:	d1e6      	bne.n	8017e42 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	2200      	movs	r2, #0
 8017e78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017e7c:	2300      	movs	r3, #0
}
 8017e7e:	4618      	mov	r0, r3
 8017e80:	3724      	adds	r7, #36	; 0x24
 8017e82:	46bd      	mov	sp, r7
 8017e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e88:	4770      	bx	lr

08017e8a <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8017e8a:	b580      	push	{r7, lr}
 8017e8c:	b084      	sub	sp, #16
 8017e8e:	af00      	add	r7, sp, #0
 8017e90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017e98:	2b01      	cmp	r3, #1
 8017e9a:	d101      	bne.n	8017ea0 <HAL_UARTEx_EnableFifoMode+0x16>
 8017e9c:	2302      	movs	r3, #2
 8017e9e:	e02b      	b.n	8017ef8 <HAL_UARTEx_EnableFifoMode+0x6e>
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	2201      	movs	r2, #1
 8017ea4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017ea8:	687b      	ldr	r3, [r7, #4]
 8017eaa:	2224      	movs	r2, #36	; 0x24
 8017eac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017eb0:	687b      	ldr	r3, [r7, #4]
 8017eb2:	681b      	ldr	r3, [r3, #0]
 8017eb4:	681b      	ldr	r3, [r3, #0]
 8017eb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	681a      	ldr	r2, [r3, #0]
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	681b      	ldr	r3, [r3, #0]
 8017ec2:	f022 0201 	bic.w	r2, r2, #1
 8017ec6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017ec8:	68fb      	ldr	r3, [r7, #12]
 8017eca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8017ece:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8017ed6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017ed8:	687b      	ldr	r3, [r7, #4]
 8017eda:	681b      	ldr	r3, [r3, #0]
 8017edc:	68fa      	ldr	r2, [r7, #12]
 8017ede:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017ee0:	6878      	ldr	r0, [r7, #4]
 8017ee2:	f000 f8c3 	bl	801806c <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	2220      	movs	r2, #32
 8017eea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	2200      	movs	r2, #0
 8017ef2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017ef6:	2300      	movs	r3, #0
}
 8017ef8:	4618      	mov	r0, r3
 8017efa:	3710      	adds	r7, #16
 8017efc:	46bd      	mov	sp, r7
 8017efe:	bd80      	pop	{r7, pc}

08017f00 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8017f00:	b480      	push	{r7}
 8017f02:	b085      	sub	sp, #20
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017f0e:	2b01      	cmp	r3, #1
 8017f10:	d101      	bne.n	8017f16 <HAL_UARTEx_DisableFifoMode+0x16>
 8017f12:	2302      	movs	r3, #2
 8017f14:	e027      	b.n	8017f66 <HAL_UARTEx_DisableFifoMode+0x66>
 8017f16:	687b      	ldr	r3, [r7, #4]
 8017f18:	2201      	movs	r2, #1
 8017f1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017f1e:	687b      	ldr	r3, [r7, #4]
 8017f20:	2224      	movs	r2, #36	; 0x24
 8017f22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	681b      	ldr	r3, [r3, #0]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017f2e:	687b      	ldr	r3, [r7, #4]
 8017f30:	681b      	ldr	r3, [r3, #0]
 8017f32:	681a      	ldr	r2, [r3, #0]
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	681b      	ldr	r3, [r3, #0]
 8017f38:	f022 0201 	bic.w	r2, r2, #1
 8017f3c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8017f44:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	2200      	movs	r2, #0
 8017f4a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017f4c:	687b      	ldr	r3, [r7, #4]
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	68fa      	ldr	r2, [r7, #12]
 8017f52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	2220      	movs	r2, #32
 8017f58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	2200      	movs	r2, #0
 8017f60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017f64:	2300      	movs	r3, #0
}
 8017f66:	4618      	mov	r0, r3
 8017f68:	3714      	adds	r7, #20
 8017f6a:	46bd      	mov	sp, r7
 8017f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f70:	4770      	bx	lr

08017f72 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017f72:	b580      	push	{r7, lr}
 8017f74:	b084      	sub	sp, #16
 8017f76:	af00      	add	r7, sp, #0
 8017f78:	6078      	str	r0, [r7, #4]
 8017f7a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017f82:	2b01      	cmp	r3, #1
 8017f84:	d101      	bne.n	8017f8a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8017f86:	2302      	movs	r3, #2
 8017f88:	e02d      	b.n	8017fe6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	2201      	movs	r2, #1
 8017f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	2224      	movs	r2, #36	; 0x24
 8017f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017f9a:	687b      	ldr	r3, [r7, #4]
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017fa2:	687b      	ldr	r3, [r7, #4]
 8017fa4:	681b      	ldr	r3, [r3, #0]
 8017fa6:	681a      	ldr	r2, [r3, #0]
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	f022 0201 	bic.w	r2, r2, #1
 8017fb0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	681b      	ldr	r3, [r3, #0]
 8017fb6:	689b      	ldr	r3, [r3, #8]
 8017fb8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	683a      	ldr	r2, [r7, #0]
 8017fc2:	430a      	orrs	r2, r1
 8017fc4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8017fc6:	6878      	ldr	r0, [r7, #4]
 8017fc8:	f000 f850 	bl	801806c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681b      	ldr	r3, [r3, #0]
 8017fd0:	68fa      	ldr	r2, [r7, #12]
 8017fd2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	2220      	movs	r2, #32
 8017fd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	2200      	movs	r2, #0
 8017fe0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8017fe4:	2300      	movs	r3, #0
}
 8017fe6:	4618      	mov	r0, r3
 8017fe8:	3710      	adds	r7, #16
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}

08017fee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8017fee:	b580      	push	{r7, lr}
 8017ff0:	b084      	sub	sp, #16
 8017ff2:	af00      	add	r7, sp, #0
 8017ff4:	6078      	str	r0, [r7, #4]
 8017ff6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8017ffe:	2b01      	cmp	r3, #1
 8018000:	d101      	bne.n	8018006 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8018002:	2302      	movs	r3, #2
 8018004:	e02d      	b.n	8018062 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8018006:	687b      	ldr	r3, [r7, #4]
 8018008:	2201      	movs	r2, #1
 801800a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801800e:	687b      	ldr	r3, [r7, #4]
 8018010:	2224      	movs	r2, #36	; 0x24
 8018012:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	681b      	ldr	r3, [r3, #0]
 801801c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	681b      	ldr	r3, [r3, #0]
 8018022:	681a      	ldr	r2, [r3, #0]
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	f022 0201 	bic.w	r2, r2, #1
 801802c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	689b      	ldr	r3, [r3, #8]
 8018034:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	683a      	ldr	r2, [r7, #0]
 801803e:	430a      	orrs	r2, r1
 8018040:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8018042:	6878      	ldr	r0, [r7, #4]
 8018044:	f000 f812 	bl	801806c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	68fa      	ldr	r2, [r7, #12]
 801804e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	2220      	movs	r2, #32
 8018054:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8018058:	687b      	ldr	r3, [r7, #4]
 801805a:	2200      	movs	r2, #0
 801805c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8018060:	2300      	movs	r3, #0
}
 8018062:	4618      	mov	r0, r3
 8018064:	3710      	adds	r7, #16
 8018066:	46bd      	mov	sp, r7
 8018068:	bd80      	pop	{r7, pc}
	...

0801806c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801806c:	b480      	push	{r7}
 801806e:	b085      	sub	sp, #20
 8018070:	af00      	add	r7, sp, #0
 8018072:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018074:	687b      	ldr	r3, [r7, #4]
 8018076:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8018078:	2b00      	cmp	r3, #0
 801807a:	d108      	bne.n	801808e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2201      	movs	r2, #1
 8018080:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	2201      	movs	r2, #1
 8018088:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801808c:	e031      	b.n	80180f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801808e:	2310      	movs	r3, #16
 8018090:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018092:	2310      	movs	r3, #16
 8018094:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8018096:	687b      	ldr	r3, [r7, #4]
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	689b      	ldr	r3, [r3, #8]
 801809c:	0e5b      	lsrs	r3, r3, #25
 801809e:	b2db      	uxtb	r3, r3
 80180a0:	f003 0307 	and.w	r3, r3, #7
 80180a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80180a6:	687b      	ldr	r3, [r7, #4]
 80180a8:	681b      	ldr	r3, [r3, #0]
 80180aa:	689b      	ldr	r3, [r3, #8]
 80180ac:	0f5b      	lsrs	r3, r3, #29
 80180ae:	b2db      	uxtb	r3, r3
 80180b0:	f003 0307 	and.w	r3, r3, #7
 80180b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80180b6:	7bbb      	ldrb	r3, [r7, #14]
 80180b8:	7b3a      	ldrb	r2, [r7, #12]
 80180ba:	4911      	ldr	r1, [pc, #68]	; (8018100 <UARTEx_SetNbDataToProcess+0x94>)
 80180bc:	5c8a      	ldrb	r2, [r1, r2]
 80180be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80180c2:	7b3a      	ldrb	r2, [r7, #12]
 80180c4:	490f      	ldr	r1, [pc, #60]	; (8018104 <UARTEx_SetNbDataToProcess+0x98>)
 80180c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80180c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80180cc:	b29a      	uxth	r2, r3
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80180d4:	7bfb      	ldrb	r3, [r7, #15]
 80180d6:	7b7a      	ldrb	r2, [r7, #13]
 80180d8:	4909      	ldr	r1, [pc, #36]	; (8018100 <UARTEx_SetNbDataToProcess+0x94>)
 80180da:	5c8a      	ldrb	r2, [r1, r2]
 80180dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80180e0:	7b7a      	ldrb	r2, [r7, #13]
 80180e2:	4908      	ldr	r1, [pc, #32]	; (8018104 <UARTEx_SetNbDataToProcess+0x98>)
 80180e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80180e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80180ea:	b29a      	uxth	r2, r3
 80180ec:	687b      	ldr	r3, [r7, #4]
 80180ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80180f2:	bf00      	nop
 80180f4:	3714      	adds	r7, #20
 80180f6:	46bd      	mov	sp, r7
 80180f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180fc:	4770      	bx	lr
 80180fe:	bf00      	nop
 8018100:	0801c6d4 	.word	0x0801c6d4
 8018104:	0801c6dc 	.word	0x0801c6dc

08018108 <__NVIC_SetPriority>:
{
 8018108:	b480      	push	{r7}
 801810a:	b083      	sub	sp, #12
 801810c:	af00      	add	r7, sp, #0
 801810e:	4603      	mov	r3, r0
 8018110:	6039      	str	r1, [r7, #0]
 8018112:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8018114:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018118:	2b00      	cmp	r3, #0
 801811a:	db0a      	blt.n	8018132 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801811c:	683b      	ldr	r3, [r7, #0]
 801811e:	b2da      	uxtb	r2, r3
 8018120:	490c      	ldr	r1, [pc, #48]	; (8018154 <__NVIC_SetPriority+0x4c>)
 8018122:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8018126:	0112      	lsls	r2, r2, #4
 8018128:	b2d2      	uxtb	r2, r2
 801812a:	440b      	add	r3, r1
 801812c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8018130:	e00a      	b.n	8018148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	b2da      	uxtb	r2, r3
 8018136:	4908      	ldr	r1, [pc, #32]	; (8018158 <__NVIC_SetPriority+0x50>)
 8018138:	88fb      	ldrh	r3, [r7, #6]
 801813a:	f003 030f 	and.w	r3, r3, #15
 801813e:	3b04      	subs	r3, #4
 8018140:	0112      	lsls	r2, r2, #4
 8018142:	b2d2      	uxtb	r2, r2
 8018144:	440b      	add	r3, r1
 8018146:	761a      	strb	r2, [r3, #24]
}
 8018148:	bf00      	nop
 801814a:	370c      	adds	r7, #12
 801814c:	46bd      	mov	sp, r7
 801814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018152:	4770      	bx	lr
 8018154:	e000e100 	.word	0xe000e100
 8018158:	e000ed00 	.word	0xe000ed00

0801815c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801815c:	b580      	push	{r7, lr}
 801815e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8018160:	4b05      	ldr	r3, [pc, #20]	; (8018178 <SysTick_Handler+0x1c>)
 8018162:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8018164:	f002 faa0 	bl	801a6a8 <xTaskGetSchedulerState>
 8018168:	4603      	mov	r3, r0
 801816a:	2b01      	cmp	r3, #1
 801816c:	d001      	beq.n	8018172 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801816e:	f003 f8c3 	bl	801b2f8 <xPortSysTickHandler>
  }
}
 8018172:	bf00      	nop
 8018174:	bd80      	pop	{r7, pc}
 8018176:	bf00      	nop
 8018178:	e000e010 	.word	0xe000e010

0801817c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801817c:	b580      	push	{r7, lr}
 801817e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8018180:	2100      	movs	r1, #0
 8018182:	f06f 0004 	mvn.w	r0, #4
 8018186:	f7ff ffbf 	bl	8018108 <__NVIC_SetPriority>
#endif
}
 801818a:	bf00      	nop
 801818c:	bd80      	pop	{r7, pc}
	...

08018190 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8018190:	b480      	push	{r7}
 8018192:	b083      	sub	sp, #12
 8018194:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018196:	f3ef 8305 	mrs	r3, IPSR
 801819a:	603b      	str	r3, [r7, #0]
  return(result);
 801819c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d003      	beq.n	80181aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80181a2:	f06f 0305 	mvn.w	r3, #5
 80181a6:	607b      	str	r3, [r7, #4]
 80181a8:	e00c      	b.n	80181c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80181aa:	4b0a      	ldr	r3, [pc, #40]	; (80181d4 <osKernelInitialize+0x44>)
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	2b00      	cmp	r3, #0
 80181b0:	d105      	bne.n	80181be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80181b2:	4b08      	ldr	r3, [pc, #32]	; (80181d4 <osKernelInitialize+0x44>)
 80181b4:	2201      	movs	r2, #1
 80181b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80181b8:	2300      	movs	r3, #0
 80181ba:	607b      	str	r3, [r7, #4]
 80181bc:	e002      	b.n	80181c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80181be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80181c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80181c4:	687b      	ldr	r3, [r7, #4]
}
 80181c6:	4618      	mov	r0, r3
 80181c8:	370c      	adds	r7, #12
 80181ca:	46bd      	mov	sp, r7
 80181cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181d0:	4770      	bx	lr
 80181d2:	bf00      	nop
 80181d4:	24002414 	.word	0x24002414

080181d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80181d8:	b580      	push	{r7, lr}
 80181da:	b082      	sub	sp, #8
 80181dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80181de:	f3ef 8305 	mrs	r3, IPSR
 80181e2:	603b      	str	r3, [r7, #0]
  return(result);
 80181e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80181e6:	2b00      	cmp	r3, #0
 80181e8:	d003      	beq.n	80181f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80181ea:	f06f 0305 	mvn.w	r3, #5
 80181ee:	607b      	str	r3, [r7, #4]
 80181f0:	e010      	b.n	8018214 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80181f2:	4b0b      	ldr	r3, [pc, #44]	; (8018220 <osKernelStart+0x48>)
 80181f4:	681b      	ldr	r3, [r3, #0]
 80181f6:	2b01      	cmp	r3, #1
 80181f8:	d109      	bne.n	801820e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80181fa:	f7ff ffbf 	bl	801817c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80181fe:	4b08      	ldr	r3, [pc, #32]	; (8018220 <osKernelStart+0x48>)
 8018200:	2202      	movs	r2, #2
 8018202:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8018204:	f001 fd54 	bl	8019cb0 <vTaskStartScheduler>
      stat = osOK;
 8018208:	2300      	movs	r3, #0
 801820a:	607b      	str	r3, [r7, #4]
 801820c:	e002      	b.n	8018214 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801820e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018212:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8018214:	687b      	ldr	r3, [r7, #4]
}
 8018216:	4618      	mov	r0, r3
 8018218:	3708      	adds	r7, #8
 801821a:	46bd      	mov	sp, r7
 801821c:	bd80      	pop	{r7, pc}
 801821e:	bf00      	nop
 8018220:	24002414 	.word	0x24002414

08018224 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8018224:	b580      	push	{r7, lr}
 8018226:	b08e      	sub	sp, #56	; 0x38
 8018228:	af04      	add	r7, sp, #16
 801822a:	60f8      	str	r0, [r7, #12]
 801822c:	60b9      	str	r1, [r7, #8]
 801822e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8018230:	2300      	movs	r3, #0
 8018232:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018234:	f3ef 8305 	mrs	r3, IPSR
 8018238:	617b      	str	r3, [r7, #20]
  return(result);
 801823a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801823c:	2b00      	cmp	r3, #0
 801823e:	d17e      	bne.n	801833e <osThreadNew+0x11a>
 8018240:	68fb      	ldr	r3, [r7, #12]
 8018242:	2b00      	cmp	r3, #0
 8018244:	d07b      	beq.n	801833e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8018246:	2380      	movs	r3, #128	; 0x80
 8018248:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801824a:	2318      	movs	r3, #24
 801824c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801824e:	2300      	movs	r3, #0
 8018250:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8018252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018256:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8018258:	687b      	ldr	r3, [r7, #4]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d045      	beq.n	80182ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801825e:	687b      	ldr	r3, [r7, #4]
 8018260:	681b      	ldr	r3, [r3, #0]
 8018262:	2b00      	cmp	r3, #0
 8018264:	d002      	beq.n	801826c <osThreadNew+0x48>
        name = attr->name;
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801826c:	687b      	ldr	r3, [r7, #4]
 801826e:	699b      	ldr	r3, [r3, #24]
 8018270:	2b00      	cmp	r3, #0
 8018272:	d002      	beq.n	801827a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8018274:	687b      	ldr	r3, [r7, #4]
 8018276:	699b      	ldr	r3, [r3, #24]
 8018278:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801827a:	69fb      	ldr	r3, [r7, #28]
 801827c:	2b00      	cmp	r3, #0
 801827e:	d008      	beq.n	8018292 <osThreadNew+0x6e>
 8018280:	69fb      	ldr	r3, [r7, #28]
 8018282:	2b38      	cmp	r3, #56	; 0x38
 8018284:	d805      	bhi.n	8018292 <osThreadNew+0x6e>
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	685b      	ldr	r3, [r3, #4]
 801828a:	f003 0301 	and.w	r3, r3, #1
 801828e:	2b00      	cmp	r3, #0
 8018290:	d001      	beq.n	8018296 <osThreadNew+0x72>
        return (NULL);
 8018292:	2300      	movs	r3, #0
 8018294:	e054      	b.n	8018340 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8018296:	687b      	ldr	r3, [r7, #4]
 8018298:	695b      	ldr	r3, [r3, #20]
 801829a:	2b00      	cmp	r3, #0
 801829c:	d003      	beq.n	80182a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 801829e:	687b      	ldr	r3, [r7, #4]
 80182a0:	695b      	ldr	r3, [r3, #20]
 80182a2:	089b      	lsrs	r3, r3, #2
 80182a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80182a6:	687b      	ldr	r3, [r7, #4]
 80182a8:	689b      	ldr	r3, [r3, #8]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d00e      	beq.n	80182cc <osThreadNew+0xa8>
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	68db      	ldr	r3, [r3, #12]
 80182b2:	2b5b      	cmp	r3, #91	; 0x5b
 80182b4:	d90a      	bls.n	80182cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80182b6:	687b      	ldr	r3, [r7, #4]
 80182b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80182ba:	2b00      	cmp	r3, #0
 80182bc:	d006      	beq.n	80182cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80182be:	687b      	ldr	r3, [r7, #4]
 80182c0:	695b      	ldr	r3, [r3, #20]
 80182c2:	2b00      	cmp	r3, #0
 80182c4:	d002      	beq.n	80182cc <osThreadNew+0xa8>
        mem = 1;
 80182c6:	2301      	movs	r3, #1
 80182c8:	61bb      	str	r3, [r7, #24]
 80182ca:	e010      	b.n	80182ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	689b      	ldr	r3, [r3, #8]
 80182d0:	2b00      	cmp	r3, #0
 80182d2:	d10c      	bne.n	80182ee <osThreadNew+0xca>
 80182d4:	687b      	ldr	r3, [r7, #4]
 80182d6:	68db      	ldr	r3, [r3, #12]
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d108      	bne.n	80182ee <osThreadNew+0xca>
 80182dc:	687b      	ldr	r3, [r7, #4]
 80182de:	691b      	ldr	r3, [r3, #16]
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	d104      	bne.n	80182ee <osThreadNew+0xca>
          mem = 0;
 80182e4:	2300      	movs	r3, #0
 80182e6:	61bb      	str	r3, [r7, #24]
 80182e8:	e001      	b.n	80182ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80182ea:	2300      	movs	r3, #0
 80182ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80182ee:	69bb      	ldr	r3, [r7, #24]
 80182f0:	2b01      	cmp	r3, #1
 80182f2:	d110      	bne.n	8018316 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80182f4:	687b      	ldr	r3, [r7, #4]
 80182f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80182f8:	687a      	ldr	r2, [r7, #4]
 80182fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80182fc:	9202      	str	r2, [sp, #8]
 80182fe:	9301      	str	r3, [sp, #4]
 8018300:	69fb      	ldr	r3, [r7, #28]
 8018302:	9300      	str	r3, [sp, #0]
 8018304:	68bb      	ldr	r3, [r7, #8]
 8018306:	6a3a      	ldr	r2, [r7, #32]
 8018308:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801830a:	68f8      	ldr	r0, [r7, #12]
 801830c:	f001 f9f4 	bl	80196f8 <xTaskCreateStatic>
 8018310:	4603      	mov	r3, r0
 8018312:	613b      	str	r3, [r7, #16]
 8018314:	e013      	b.n	801833e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8018316:	69bb      	ldr	r3, [r7, #24]
 8018318:	2b00      	cmp	r3, #0
 801831a:	d110      	bne.n	801833e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801831c:	6a3b      	ldr	r3, [r7, #32]
 801831e:	b29a      	uxth	r2, r3
 8018320:	f107 0310 	add.w	r3, r7, #16
 8018324:	9301      	str	r3, [sp, #4]
 8018326:	69fb      	ldr	r3, [r7, #28]
 8018328:	9300      	str	r3, [sp, #0]
 801832a:	68bb      	ldr	r3, [r7, #8]
 801832c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801832e:	68f8      	ldr	r0, [r7, #12]
 8018330:	f001 fa3f 	bl	80197b2 <xTaskCreate>
 8018334:	4603      	mov	r3, r0
 8018336:	2b01      	cmp	r3, #1
 8018338:	d001      	beq.n	801833e <osThreadNew+0x11a>
            hTask = NULL;
 801833a:	2300      	movs	r3, #0
 801833c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801833e:	693b      	ldr	r3, [r7, #16]
}
 8018340:	4618      	mov	r0, r3
 8018342:	3728      	adds	r7, #40	; 0x28
 8018344:	46bd      	mov	sp, r7
 8018346:	bd80      	pop	{r7, pc}

08018348 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8018348:	b480      	push	{r7}
 801834a:	b083      	sub	sp, #12
 801834c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801834e:	f3ef 8305 	mrs	r3, IPSR
 8018352:	603b      	str	r3, [r7, #0]
  return(result);
 8018354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8018356:	2b00      	cmp	r3, #0
 8018358:	d003      	beq.n	8018362 <osThreadYield+0x1a>
    stat = osErrorISR;
 801835a:	f06f 0305 	mvn.w	r3, #5
 801835e:	607b      	str	r3, [r7, #4]
 8018360:	e009      	b.n	8018376 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8018362:	2300      	movs	r3, #0
 8018364:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8018366:	4b07      	ldr	r3, [pc, #28]	; (8018384 <osThreadYield+0x3c>)
 8018368:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801836c:	601a      	str	r2, [r3, #0]
 801836e:	f3bf 8f4f 	dsb	sy
 8018372:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8018376:	687b      	ldr	r3, [r7, #4]
}
 8018378:	4618      	mov	r0, r3
 801837a:	370c      	adds	r7, #12
 801837c:	46bd      	mov	sp, r7
 801837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018382:	4770      	bx	lr
 8018384:	e000ed04 	.word	0xe000ed04

08018388 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8018388:	b580      	push	{r7, lr}
 801838a:	b086      	sub	sp, #24
 801838c:	af00      	add	r7, sp, #0
 801838e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018394:	f3ef 8305 	mrs	r3, IPSR
 8018398:	60fb      	str	r3, [r7, #12]
  return(result);
 801839a:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 801839c:	2b00      	cmp	r3, #0
 801839e:	d003      	beq.n	80183a8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80183a0:	f06f 0305 	mvn.w	r3, #5
 80183a4:	617b      	str	r3, [r7, #20]
 80183a6:	e00b      	b.n	80183c0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80183a8:	693b      	ldr	r3, [r7, #16]
 80183aa:	2b00      	cmp	r3, #0
 80183ac:	d103      	bne.n	80183b6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80183ae:	f06f 0303 	mvn.w	r3, #3
 80183b2:	617b      	str	r3, [r7, #20]
 80183b4:	e004      	b.n	80183c0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80183b6:	2300      	movs	r3, #0
 80183b8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80183ba:	6938      	ldr	r0, [r7, #16]
 80183bc:	f001 fb72 	bl	8019aa4 <vTaskSuspend>
  }

  return (stat);
 80183c0:	697b      	ldr	r3, [r7, #20]
}
 80183c2:	4618      	mov	r0, r3
 80183c4:	3718      	adds	r7, #24
 80183c6:	46bd      	mov	sp, r7
 80183c8:	bd80      	pop	{r7, pc}

080183ca <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80183ca:	b580      	push	{r7, lr}
 80183cc:	b086      	sub	sp, #24
 80183ce:	af00      	add	r7, sp, #0
 80183d0:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80183d6:	f3ef 8305 	mrs	r3, IPSR
 80183da:	60fb      	str	r3, [r7, #12]
  return(result);
 80183dc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80183de:	2b00      	cmp	r3, #0
 80183e0:	d003      	beq.n	80183ea <osThreadResume+0x20>
    stat = osErrorISR;
 80183e2:	f06f 0305 	mvn.w	r3, #5
 80183e6:	617b      	str	r3, [r7, #20]
 80183e8:	e00b      	b.n	8018402 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80183ea:	693b      	ldr	r3, [r7, #16]
 80183ec:	2b00      	cmp	r3, #0
 80183ee:	d103      	bne.n	80183f8 <osThreadResume+0x2e>
    stat = osErrorParameter;
 80183f0:	f06f 0303 	mvn.w	r3, #3
 80183f4:	617b      	str	r3, [r7, #20]
 80183f6:	e004      	b.n	8018402 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80183f8:	2300      	movs	r3, #0
 80183fa:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80183fc:	6938      	ldr	r0, [r7, #16]
 80183fe:	f001 fbf9 	bl	8019bf4 <vTaskResume>
  }

  return (stat);
 8018402:	697b      	ldr	r3, [r7, #20]
}
 8018404:	4618      	mov	r0, r3
 8018406:	3718      	adds	r7, #24
 8018408:	46bd      	mov	sp, r7
 801840a:	bd80      	pop	{r7, pc}

0801840c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 801840c:	b580      	push	{r7, lr}
 801840e:	b084      	sub	sp, #16
 8018410:	af00      	add	r7, sp, #0
 8018412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8018414:	f3ef 8305 	mrs	r3, IPSR
 8018418:	60bb      	str	r3, [r7, #8]
  return(result);
 801841a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 801841c:	2b00      	cmp	r3, #0
 801841e:	d003      	beq.n	8018428 <osDelay+0x1c>
    stat = osErrorISR;
 8018420:	f06f 0305 	mvn.w	r3, #5
 8018424:	60fb      	str	r3, [r7, #12]
 8018426:	e007      	b.n	8018438 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8018428:	2300      	movs	r3, #0
 801842a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d002      	beq.n	8018438 <osDelay+0x2c>
      vTaskDelay(ticks);
 8018432:	6878      	ldr	r0, [r7, #4]
 8018434:	f001 fb02 	bl	8019a3c <vTaskDelay>
    }
  }

  return (stat);
 8018438:	68fb      	ldr	r3, [r7, #12]
}
 801843a:	4618      	mov	r0, r3
 801843c:	3710      	adds	r7, #16
 801843e:	46bd      	mov	sp, r7
 8018440:	bd80      	pop	{r7, pc}

08018442 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8018442:	b580      	push	{r7, lr}
 8018444:	b086      	sub	sp, #24
 8018446:	af00      	add	r7, sp, #0
 8018448:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 801844a:	2300      	movs	r3, #0
 801844c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801844e:	f3ef 8305 	mrs	r3, IPSR
 8018452:	60fb      	str	r3, [r7, #12]
  return(result);
 8018454:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8018456:	2b00      	cmp	r3, #0
 8018458:	d12d      	bne.n	80184b6 <osEventFlagsNew+0x74>
    mem = -1;
 801845a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801845e:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8018460:	687b      	ldr	r3, [r7, #4]
 8018462:	2b00      	cmp	r3, #0
 8018464:	d015      	beq.n	8018492 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	689b      	ldr	r3, [r3, #8]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d006      	beq.n	801847c <osEventFlagsNew+0x3a>
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	68db      	ldr	r3, [r3, #12]
 8018472:	2b1f      	cmp	r3, #31
 8018474:	d902      	bls.n	801847c <osEventFlagsNew+0x3a>
        mem = 1;
 8018476:	2301      	movs	r3, #1
 8018478:	613b      	str	r3, [r7, #16]
 801847a:	e00c      	b.n	8018496 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 801847c:	687b      	ldr	r3, [r7, #4]
 801847e:	689b      	ldr	r3, [r3, #8]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d108      	bne.n	8018496 <osEventFlagsNew+0x54>
 8018484:	687b      	ldr	r3, [r7, #4]
 8018486:	68db      	ldr	r3, [r3, #12]
 8018488:	2b00      	cmp	r3, #0
 801848a:	d104      	bne.n	8018496 <osEventFlagsNew+0x54>
          mem = 0;
 801848c:	2300      	movs	r3, #0
 801848e:	613b      	str	r3, [r7, #16]
 8018490:	e001      	b.n	8018496 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8018492:	2300      	movs	r3, #0
 8018494:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8018496:	693b      	ldr	r3, [r7, #16]
 8018498:	2b01      	cmp	r3, #1
 801849a:	d106      	bne.n	80184aa <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	689b      	ldr	r3, [r3, #8]
 80184a0:	4618      	mov	r0, r3
 80184a2:	f000 f91d 	bl	80186e0 <xEventGroupCreateStatic>
 80184a6:	6178      	str	r0, [r7, #20]
 80184a8:	e005      	b.n	80184b6 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80184aa:	693b      	ldr	r3, [r7, #16]
 80184ac:	2b00      	cmp	r3, #0
 80184ae:	d102      	bne.n	80184b6 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80184b0:	f000 f94d 	bl	801874e <xEventGroupCreate>
 80184b4:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80184b6:	697b      	ldr	r3, [r7, #20]
}
 80184b8:	4618      	mov	r0, r3
 80184ba:	3718      	adds	r7, #24
 80184bc:	46bd      	mov	sp, r7
 80184be:	bd80      	pop	{r7, pc}

080184c0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b086      	sub	sp, #24
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
 80184c8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80184ca:	687b      	ldr	r3, [r7, #4]
 80184cc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80184ce:	693b      	ldr	r3, [r7, #16]
 80184d0:	2b00      	cmp	r3, #0
 80184d2:	d004      	beq.n	80184de <osEventFlagsSet+0x1e>
 80184d4:	683b      	ldr	r3, [r7, #0]
 80184d6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d003      	beq.n	80184e6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 80184de:	f06f 0303 	mvn.w	r3, #3
 80184e2:	617b      	str	r3, [r7, #20]
 80184e4:	e028      	b.n	8018538 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80184e6:	f3ef 8305 	mrs	r3, IPSR
 80184ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80184ec:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d01d      	beq.n	801852e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 80184f2:	2300      	movs	r3, #0
 80184f4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 80184f6:	f107 0308 	add.w	r3, r7, #8
 80184fa:	461a      	mov	r2, r3
 80184fc:	6839      	ldr	r1, [r7, #0]
 80184fe:	6938      	ldr	r0, [r7, #16]
 8018500:	f000 fb46 	bl	8018b90 <xEventGroupSetBitsFromISR>
 8018504:	4603      	mov	r3, r0
 8018506:	2b00      	cmp	r3, #0
 8018508:	d103      	bne.n	8018512 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 801850a:	f06f 0302 	mvn.w	r3, #2
 801850e:	617b      	str	r3, [r7, #20]
 8018510:	e012      	b.n	8018538 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8018512:	683b      	ldr	r3, [r7, #0]
 8018514:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8018516:	68bb      	ldr	r3, [r7, #8]
 8018518:	2b00      	cmp	r3, #0
 801851a:	d00d      	beq.n	8018538 <osEventFlagsSet+0x78>
 801851c:	4b09      	ldr	r3, [pc, #36]	; (8018544 <osEventFlagsSet+0x84>)
 801851e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018522:	601a      	str	r2, [r3, #0]
 8018524:	f3bf 8f4f 	dsb	sy
 8018528:	f3bf 8f6f 	isb	sy
 801852c:	e004      	b.n	8018538 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 801852e:	6839      	ldr	r1, [r7, #0]
 8018530:	6938      	ldr	r0, [r7, #16]
 8018532:	f000 fa65 	bl	8018a00 <xEventGroupSetBits>
 8018536:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8018538:	697b      	ldr	r3, [r7, #20]
}
 801853a:	4618      	mov	r0, r3
 801853c:	3718      	adds	r7, #24
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}
 8018542:	bf00      	nop
 8018544:	e000ed04 	.word	0xe000ed04

08018548 <osEventFlagsClear>:

uint32_t osEventFlagsClear (osEventFlagsId_t ef_id, uint32_t flags) {
 8018548:	b580      	push	{r7, lr}
 801854a:	b086      	sub	sp, #24
 801854c:	af00      	add	r7, sp, #0
 801854e:	6078      	str	r0, [r7, #4]
 8018550:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8018552:	687b      	ldr	r3, [r7, #4]
 8018554:	613b      	str	r3, [r7, #16]
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8018556:	693b      	ldr	r3, [r7, #16]
 8018558:	2b00      	cmp	r3, #0
 801855a:	d004      	beq.n	8018566 <osEventFlagsClear+0x1e>
 801855c:	683b      	ldr	r3, [r7, #0]
 801855e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018562:	2b00      	cmp	r3, #0
 8018564:	d003      	beq.n	801856e <osEventFlagsClear+0x26>
    rflags = (uint32_t)osErrorParameter;
 8018566:	f06f 0303 	mvn.w	r3, #3
 801856a:	617b      	str	r3, [r7, #20]
 801856c:	e019      	b.n	80185a2 <osEventFlagsClear+0x5a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801856e:	f3ef 8305 	mrs	r3, IPSR
 8018572:	60fb      	str	r3, [r7, #12]
  return(result);
 8018574:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8018576:	2b00      	cmp	r3, #0
 8018578:	d00e      	beq.n	8018598 <osEventFlagsClear+0x50>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    rflags = xEventGroupGetBitsFromISR (hEventGroup);
 801857a:	6938      	ldr	r0, [r7, #16]
 801857c:	f000 fa1c 	bl	80189b8 <xEventGroupGetBitsFromISR>
 8018580:	6178      	str	r0, [r7, #20]

    if (xEventGroupClearBitsFromISR (hEventGroup, (EventBits_t)flags) == pdFAIL) {
 8018582:	6839      	ldr	r1, [r7, #0]
 8018584:	6938      	ldr	r0, [r7, #16]
 8018586:	f000 fa03 	bl	8018990 <xEventGroupClearBitsFromISR>
 801858a:	4603      	mov	r3, r0
 801858c:	2b00      	cmp	r3, #0
 801858e:	d108      	bne.n	80185a2 <osEventFlagsClear+0x5a>
      rflags = (uint32_t)osErrorResource;
 8018590:	f06f 0302 	mvn.w	r3, #2
 8018594:	617b      	str	r3, [r7, #20]
 8018596:	e004      	b.n	80185a2 <osEventFlagsClear+0x5a>
    }
  #endif
  }
  else {
    rflags = xEventGroupClearBits (hEventGroup, (EventBits_t)flags);
 8018598:	6839      	ldr	r1, [r7, #0]
 801859a:	6938      	ldr	r0, [r7, #16]
 801859c:	f000 f9c0 	bl	8018920 <xEventGroupClearBits>
 80185a0:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80185a2:	697b      	ldr	r3, [r7, #20]
}
 80185a4:	4618      	mov	r0, r3
 80185a6:	3718      	adds	r7, #24
 80185a8:	46bd      	mov	sp, r7
 80185aa:	bd80      	pop	{r7, pc}

080185ac <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80185ac:	b580      	push	{r7, lr}
 80185ae:	b08c      	sub	sp, #48	; 0x30
 80185b0:	af02      	add	r7, sp, #8
 80185b2:	60f8      	str	r0, [r7, #12]
 80185b4:	60b9      	str	r1, [r7, #8]
 80185b6:	607a      	str	r2, [r7, #4]
 80185b8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80185ba:	68fb      	ldr	r3, [r7, #12]
 80185bc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80185be:	69bb      	ldr	r3, [r7, #24]
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d004      	beq.n	80185ce <osEventFlagsWait+0x22>
 80185c4:	68bb      	ldr	r3, [r7, #8]
 80185c6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80185ca:	2b00      	cmp	r3, #0
 80185cc:	d003      	beq.n	80185d6 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80185ce:	f06f 0303 	mvn.w	r3, #3
 80185d2:	61fb      	str	r3, [r7, #28]
 80185d4:	e04b      	b.n	801866e <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80185d6:	f3ef 8305 	mrs	r3, IPSR
 80185da:	617b      	str	r3, [r7, #20]
  return(result);
 80185dc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80185de:	2b00      	cmp	r3, #0
 80185e0:	d003      	beq.n	80185ea <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80185e2:	f06f 0305 	mvn.w	r3, #5
 80185e6:	61fb      	str	r3, [r7, #28]
 80185e8:	e041      	b.n	801866e <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	f003 0301 	and.w	r3, r3, #1
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d002      	beq.n	80185fa <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80185f4:	2301      	movs	r3, #1
 80185f6:	627b      	str	r3, [r7, #36]	; 0x24
 80185f8:	e001      	b.n	80185fe <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80185fa:	2300      	movs	r3, #0
 80185fc:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80185fe:	687b      	ldr	r3, [r7, #4]
 8018600:	f003 0302 	and.w	r3, r3, #2
 8018604:	2b00      	cmp	r3, #0
 8018606:	d002      	beq.n	801860e <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8018608:	2300      	movs	r3, #0
 801860a:	623b      	str	r3, [r7, #32]
 801860c:	e001      	b.n	8018612 <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 801860e:	2301      	movs	r3, #1
 8018610:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8018612:	683b      	ldr	r3, [r7, #0]
 8018614:	9300      	str	r3, [sp, #0]
 8018616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018618:	6a3a      	ldr	r2, [r7, #32]
 801861a:	68b9      	ldr	r1, [r7, #8]
 801861c:	69b8      	ldr	r0, [r7, #24]
 801861e:	f000 f8b1 	bl	8018784 <xEventGroupWaitBits>
 8018622:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	f003 0301 	and.w	r3, r3, #1
 801862a:	2b00      	cmp	r3, #0
 801862c:	d010      	beq.n	8018650 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 801862e:	68ba      	ldr	r2, [r7, #8]
 8018630:	69fb      	ldr	r3, [r7, #28]
 8018632:	4013      	ands	r3, r2
 8018634:	68ba      	ldr	r2, [r7, #8]
 8018636:	429a      	cmp	r2, r3
 8018638:	d019      	beq.n	801866e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801863a:	683b      	ldr	r3, [r7, #0]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d003      	beq.n	8018648 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8018640:	f06f 0301 	mvn.w	r3, #1
 8018644:	61fb      	str	r3, [r7, #28]
 8018646:	e012      	b.n	801866e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8018648:	f06f 0302 	mvn.w	r3, #2
 801864c:	61fb      	str	r3, [r7, #28]
 801864e:	e00e      	b.n	801866e <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8018650:	68ba      	ldr	r2, [r7, #8]
 8018652:	69fb      	ldr	r3, [r7, #28]
 8018654:	4013      	ands	r3, r2
 8018656:	2b00      	cmp	r3, #0
 8018658:	d109      	bne.n	801866e <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 801865a:	683b      	ldr	r3, [r7, #0]
 801865c:	2b00      	cmp	r3, #0
 801865e:	d003      	beq.n	8018668 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8018660:	f06f 0301 	mvn.w	r3, #1
 8018664:	61fb      	str	r3, [r7, #28]
 8018666:	e002      	b.n	801866e <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8018668:	f06f 0302 	mvn.w	r3, #2
 801866c:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 801866e:	69fb      	ldr	r3, [r7, #28]
}
 8018670:	4618      	mov	r0, r3
 8018672:	3728      	adds	r7, #40	; 0x28
 8018674:	46bd      	mov	sp, r7
 8018676:	bd80      	pop	{r7, pc}

08018678 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8018678:	b480      	push	{r7}
 801867a:	b085      	sub	sp, #20
 801867c:	af00      	add	r7, sp, #0
 801867e:	60f8      	str	r0, [r7, #12]
 8018680:	60b9      	str	r1, [r7, #8]
 8018682:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	4a07      	ldr	r2, [pc, #28]	; (80186a4 <vApplicationGetIdleTaskMemory+0x2c>)
 8018688:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801868a:	68bb      	ldr	r3, [r7, #8]
 801868c:	4a06      	ldr	r2, [pc, #24]	; (80186a8 <vApplicationGetIdleTaskMemory+0x30>)
 801868e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	2280      	movs	r2, #128	; 0x80
 8018694:	601a      	str	r2, [r3, #0]
}
 8018696:	bf00      	nop
 8018698:	3714      	adds	r7, #20
 801869a:	46bd      	mov	sp, r7
 801869c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186a0:	4770      	bx	lr
 80186a2:	bf00      	nop
 80186a4:	24002418 	.word	0x24002418
 80186a8:	24002474 	.word	0x24002474

080186ac <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80186ac:	b480      	push	{r7}
 80186ae:	b085      	sub	sp, #20
 80186b0:	af00      	add	r7, sp, #0
 80186b2:	60f8      	str	r0, [r7, #12]
 80186b4:	60b9      	str	r1, [r7, #8]
 80186b6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80186b8:	68fb      	ldr	r3, [r7, #12]
 80186ba:	4a07      	ldr	r2, [pc, #28]	; (80186d8 <vApplicationGetTimerTaskMemory+0x2c>)
 80186bc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80186be:	68bb      	ldr	r3, [r7, #8]
 80186c0:	4a06      	ldr	r2, [pc, #24]	; (80186dc <vApplicationGetTimerTaskMemory+0x30>)
 80186c2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80186ca:	601a      	str	r2, [r3, #0]
}
 80186cc:	bf00      	nop
 80186ce:	3714      	adds	r7, #20
 80186d0:	46bd      	mov	sp, r7
 80186d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186d6:	4770      	bx	lr
 80186d8:	24002674 	.word	0x24002674
 80186dc:	240026d0 	.word	0x240026d0

080186e0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b086      	sub	sp, #24
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80186e8:	687b      	ldr	r3, [r7, #4]
 80186ea:	2b00      	cmp	r3, #0
 80186ec:	d10a      	bne.n	8018704 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80186ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80186f2:	f383 8811 	msr	BASEPRI, r3
 80186f6:	f3bf 8f6f 	isb	sy
 80186fa:	f3bf 8f4f 	dsb	sy
 80186fe:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8018700:	bf00      	nop
 8018702:	e7fe      	b.n	8018702 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8018704:	2320      	movs	r3, #32
 8018706:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8018708:	68bb      	ldr	r3, [r7, #8]
 801870a:	2b20      	cmp	r3, #32
 801870c:	d00a      	beq.n	8018724 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018712:	f383 8811 	msr	BASEPRI, r3
 8018716:	f3bf 8f6f 	isb	sy
 801871a:	f3bf 8f4f 	dsb	sy
 801871e:	60fb      	str	r3, [r7, #12]
}
 8018720:	bf00      	nop
 8018722:	e7fe      	b.n	8018722 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8018728:	697b      	ldr	r3, [r7, #20]
 801872a:	2b00      	cmp	r3, #0
 801872c:	d00a      	beq.n	8018744 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801872e:	697b      	ldr	r3, [r7, #20]
 8018730:	2200      	movs	r2, #0
 8018732:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8018734:	697b      	ldr	r3, [r7, #20]
 8018736:	3304      	adds	r3, #4
 8018738:	4618      	mov	r0, r3
 801873a:	f000 fa3d 	bl	8018bb8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801873e:	697b      	ldr	r3, [r7, #20]
 8018740:	2201      	movs	r2, #1
 8018742:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8018744:	697b      	ldr	r3, [r7, #20]
	}
 8018746:	4618      	mov	r0, r3
 8018748:	3718      	adds	r7, #24
 801874a:	46bd      	mov	sp, r7
 801874c:	bd80      	pop	{r7, pc}

0801874e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801874e:	b580      	push	{r7, lr}
 8018750:	b082      	sub	sp, #8
 8018752:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8018754:	2020      	movs	r0, #32
 8018756:	f002 fe5f 	bl	801b418 <pvPortMalloc>
 801875a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	2b00      	cmp	r3, #0
 8018760:	d00a      	beq.n	8018778 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8018762:	687b      	ldr	r3, [r7, #4]
 8018764:	2200      	movs	r2, #0
 8018766:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8018768:	687b      	ldr	r3, [r7, #4]
 801876a:	3304      	adds	r3, #4
 801876c:	4618      	mov	r0, r3
 801876e:	f000 fa23 	bl	8018bb8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8018772:	687b      	ldr	r3, [r7, #4]
 8018774:	2200      	movs	r2, #0
 8018776:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8018778:	687b      	ldr	r3, [r7, #4]
	}
 801877a:	4618      	mov	r0, r3
 801877c:	3708      	adds	r7, #8
 801877e:	46bd      	mov	sp, r7
 8018780:	bd80      	pop	{r7, pc}
	...

08018784 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8018784:	b580      	push	{r7, lr}
 8018786:	b090      	sub	sp, #64	; 0x40
 8018788:	af00      	add	r7, sp, #0
 801878a:	60f8      	str	r0, [r7, #12]
 801878c:	60b9      	str	r1, [r7, #8]
 801878e:	607a      	str	r2, [r7, #4]
 8018790:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8018792:	68fb      	ldr	r3, [r7, #12]
 8018794:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8018796:	2300      	movs	r3, #0
 8018798:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 801879a:	2300      	movs	r3, #0
 801879c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	2b00      	cmp	r3, #0
 80187a2:	d10a      	bne.n	80187ba <xEventGroupWaitBits+0x36>
	__asm volatile
 80187a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187a8:	f383 8811 	msr	BASEPRI, r3
 80187ac:	f3bf 8f6f 	isb	sy
 80187b0:	f3bf 8f4f 	dsb	sy
 80187b4:	623b      	str	r3, [r7, #32]
}
 80187b6:	bf00      	nop
 80187b8:	e7fe      	b.n	80187b8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80187ba:	68bb      	ldr	r3, [r7, #8]
 80187bc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d00a      	beq.n	80187da <xEventGroupWaitBits+0x56>
	__asm volatile
 80187c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187c8:	f383 8811 	msr	BASEPRI, r3
 80187cc:	f3bf 8f6f 	isb	sy
 80187d0:	f3bf 8f4f 	dsb	sy
 80187d4:	61fb      	str	r3, [r7, #28]
}
 80187d6:	bf00      	nop
 80187d8:	e7fe      	b.n	80187d8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80187da:	68bb      	ldr	r3, [r7, #8]
 80187dc:	2b00      	cmp	r3, #0
 80187de:	d10a      	bne.n	80187f6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80187e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80187e4:	f383 8811 	msr	BASEPRI, r3
 80187e8:	f3bf 8f6f 	isb	sy
 80187ec:	f3bf 8f4f 	dsb	sy
 80187f0:	61bb      	str	r3, [r7, #24]
}
 80187f2:	bf00      	nop
 80187f4:	e7fe      	b.n	80187f4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80187f6:	f001 ff57 	bl	801a6a8 <xTaskGetSchedulerState>
 80187fa:	4603      	mov	r3, r0
 80187fc:	2b00      	cmp	r3, #0
 80187fe:	d102      	bne.n	8018806 <xEventGroupWaitBits+0x82>
 8018800:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018802:	2b00      	cmp	r3, #0
 8018804:	d101      	bne.n	801880a <xEventGroupWaitBits+0x86>
 8018806:	2301      	movs	r3, #1
 8018808:	e000      	b.n	801880c <xEventGroupWaitBits+0x88>
 801880a:	2300      	movs	r3, #0
 801880c:	2b00      	cmp	r3, #0
 801880e:	d10a      	bne.n	8018826 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8018810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018814:	f383 8811 	msr	BASEPRI, r3
 8018818:	f3bf 8f6f 	isb	sy
 801881c:	f3bf 8f4f 	dsb	sy
 8018820:	617b      	str	r3, [r7, #20]
}
 8018822:	bf00      	nop
 8018824:	e7fe      	b.n	8018824 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8018826:	f001 faa9 	bl	8019d7c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801882a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801882c:	681b      	ldr	r3, [r3, #0]
 801882e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8018830:	683a      	ldr	r2, [r7, #0]
 8018832:	68b9      	ldr	r1, [r7, #8]
 8018834:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8018836:	f000 f988 	bl	8018b4a <prvTestWaitCondition>
 801883a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801883c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801883e:	2b00      	cmp	r3, #0
 8018840:	d00e      	beq.n	8018860 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8018842:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018844:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8018846:	2300      	movs	r3, #0
 8018848:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801884a:	687b      	ldr	r3, [r7, #4]
 801884c:	2b00      	cmp	r3, #0
 801884e:	d028      	beq.n	80188a2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8018850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018852:	681a      	ldr	r2, [r3, #0]
 8018854:	68bb      	ldr	r3, [r7, #8]
 8018856:	43db      	mvns	r3, r3
 8018858:	401a      	ands	r2, r3
 801885a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801885c:	601a      	str	r2, [r3, #0]
 801885e:	e020      	b.n	80188a2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8018860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018862:	2b00      	cmp	r3, #0
 8018864:	d104      	bne.n	8018870 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8018866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018868:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801886a:	2301      	movs	r3, #1
 801886c:	633b      	str	r3, [r7, #48]	; 0x30
 801886e:	e018      	b.n	80188a2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8018870:	687b      	ldr	r3, [r7, #4]
 8018872:	2b00      	cmp	r3, #0
 8018874:	d003      	beq.n	801887e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8018876:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801887c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801887e:	683b      	ldr	r3, [r7, #0]
 8018880:	2b00      	cmp	r3, #0
 8018882:	d003      	beq.n	801888c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8018884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018886:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801888a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801888c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801888e:	1d18      	adds	r0, r3, #4
 8018890:	68ba      	ldr	r2, [r7, #8]
 8018892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018894:	4313      	orrs	r3, r2
 8018896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018898:	4619      	mov	r1, r3
 801889a:	f001 fc7d 	bl	801a198 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801889e:	2300      	movs	r3, #0
 80188a0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80188a2:	f001 fa79 	bl	8019d98 <xTaskResumeAll>
 80188a6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80188a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80188aa:	2b00      	cmp	r3, #0
 80188ac:	d031      	beq.n	8018912 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80188ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b0:	2b00      	cmp	r3, #0
 80188b2:	d107      	bne.n	80188c4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80188b4:	4b19      	ldr	r3, [pc, #100]	; (801891c <xEventGroupWaitBits+0x198>)
 80188b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80188ba:	601a      	str	r2, [r3, #0]
 80188bc:	f3bf 8f4f 	dsb	sy
 80188c0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80188c4:	f001 ff7c 	bl	801a7c0 <uxTaskResetEventItemValue>
 80188c8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80188ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80188cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d11a      	bne.n	801890a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80188d4:	f002 fc7e 	bl	801b1d4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80188d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80188de:	683a      	ldr	r2, [r7, #0]
 80188e0:	68b9      	ldr	r1, [r7, #8]
 80188e2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80188e4:	f000 f931 	bl	8018b4a <prvTestWaitCondition>
 80188e8:	4603      	mov	r3, r0
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d009      	beq.n	8018902 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d006      	beq.n	8018902 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80188f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80188f6:	681a      	ldr	r2, [r3, #0]
 80188f8:	68bb      	ldr	r3, [r7, #8]
 80188fa:	43db      	mvns	r3, r3
 80188fc:	401a      	ands	r2, r3
 80188fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018900:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8018902:	2301      	movs	r3, #1
 8018904:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8018906:	f002 fc95 	bl	801b234 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801890a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801890c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018910:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8018912:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8018914:	4618      	mov	r0, r3
 8018916:	3740      	adds	r7, #64	; 0x40
 8018918:	46bd      	mov	sp, r7
 801891a:	bd80      	pop	{r7, pc}
 801891c:	e000ed04 	.word	0xe000ed04

08018920 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
{
 8018920:	b580      	push	{r7, lr}
 8018922:	b086      	sub	sp, #24
 8018924:	af00      	add	r7, sp, #0
 8018926:	6078      	str	r0, [r7, #4]
 8018928:	6039      	str	r1, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 801892a:	687b      	ldr	r3, [r7, #4]
 801892c:	617b      	str	r3, [r7, #20]
EventBits_t uxReturn;

	/* Check the user is not attempting to clear the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 801892e:	687b      	ldr	r3, [r7, #4]
 8018930:	2b00      	cmp	r3, #0
 8018932:	d10a      	bne.n	801894a <xEventGroupClearBits+0x2a>
	__asm volatile
 8018934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018938:	f383 8811 	msr	BASEPRI, r3
 801893c:	f3bf 8f6f 	isb	sy
 8018940:	f3bf 8f4f 	dsb	sy
 8018944:	60fb      	str	r3, [r7, #12]
}
 8018946:	bf00      	nop
 8018948:	e7fe      	b.n	8018948 <xEventGroupClearBits+0x28>
	configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018950:	2b00      	cmp	r3, #0
 8018952:	d00a      	beq.n	801896a <xEventGroupClearBits+0x4a>
	__asm volatile
 8018954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018958:	f383 8811 	msr	BASEPRI, r3
 801895c:	f3bf 8f6f 	isb	sy
 8018960:	f3bf 8f4f 	dsb	sy
 8018964:	60bb      	str	r3, [r7, #8]
}
 8018966:	bf00      	nop
 8018968:	e7fe      	b.n	8018968 <xEventGroupClearBits+0x48>

	taskENTER_CRITICAL();
 801896a:	f002 fc33 	bl	801b1d4 <vPortEnterCritical>
	{
		traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

		/* The value returned is the event group value prior to the bits being
		cleared. */
		uxReturn = pxEventBits->uxEventBits;
 801896e:	697b      	ldr	r3, [r7, #20]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	613b      	str	r3, [r7, #16]

		/* Clear the bits. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8018974:	697b      	ldr	r3, [r7, #20]
 8018976:	681a      	ldr	r2, [r3, #0]
 8018978:	683b      	ldr	r3, [r7, #0]
 801897a:	43db      	mvns	r3, r3
 801897c:	401a      	ands	r2, r3
 801897e:	697b      	ldr	r3, [r7, #20]
 8018980:	601a      	str	r2, [r3, #0]
	}
	taskEXIT_CRITICAL();
 8018982:	f002 fc57 	bl	801b234 <vPortExitCritical>

	return uxReturn;
 8018986:	693b      	ldr	r3, [r7, #16]
}
 8018988:	4618      	mov	r0, r3
 801898a:	3718      	adds	r7, #24
 801898c:	46bd      	mov	sp, r7
 801898e:	bd80      	pop	{r7, pc}

08018990 <xEventGroupClearBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupClearBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToClear )
	{
 8018990:	b580      	push	{r7, lr}
 8018992:	b084      	sub	sp, #16
 8018994:	af00      	add	r7, sp, #0
 8018996:	6078      	str	r0, [r7, #4]
 8018998:	6039      	str	r1, [r7, #0]
		BaseType_t xReturn;

		traceEVENT_GROUP_CLEAR_BITS_FROM_ISR( xEventGroup, uxBitsToClear );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupClearBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToClear, NULL ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 801899a:	2300      	movs	r3, #0
 801899c:	683a      	ldr	r2, [r7, #0]
 801899e:	6879      	ldr	r1, [r7, #4]
 80189a0:	4804      	ldr	r0, [pc, #16]	; (80189b4 <xEventGroupClearBitsFromISR+0x24>)
 80189a2:	f002 fac7 	bl	801af34 <xTimerPendFunctionCallFromISR>
 80189a6:	60f8      	str	r0, [r7, #12]

		return xReturn;
 80189a8:	68fb      	ldr	r3, [r7, #12]
	}
 80189aa:	4618      	mov	r0, r3
 80189ac:	3710      	adds	r7, #16
 80189ae:	46bd      	mov	sp, r7
 80189b0:	bd80      	pop	{r7, pc}
 80189b2:	bf00      	nop
 80189b4:	08018b31 	.word	0x08018b31

080189b8 <xEventGroupGetBitsFromISR>:

#endif
/*-----------------------------------------------------------*/

EventBits_t xEventGroupGetBitsFromISR( EventGroupHandle_t xEventGroup )
{
 80189b8:	b480      	push	{r7}
 80189ba:	b089      	sub	sp, #36	; 0x24
 80189bc:	af00      	add	r7, sp, #0
 80189be:	6078      	str	r0, [r7, #4]
UBaseType_t uxSavedInterruptStatus;
EventGroup_t const * const pxEventBits = xEventGroup;
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	61fb      	str	r3, [r7, #28]

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80189c4:	f3ef 8211 	mrs	r2, BASEPRI
 80189c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80189cc:	f383 8811 	msr	BASEPRI, r3
 80189d0:	f3bf 8f6f 	isb	sy
 80189d4:	f3bf 8f4f 	dsb	sy
 80189d8:	60fa      	str	r2, [r7, #12]
 80189da:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80189dc:	68fb      	ldr	r3, [r7, #12]
EventBits_t uxReturn;

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80189de:	61bb      	str	r3, [r7, #24]
	{
		uxReturn = pxEventBits->uxEventBits;
 80189e0:	69fb      	ldr	r3, [r7, #28]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	617b      	str	r3, [r7, #20]
 80189e6:	69bb      	ldr	r3, [r7, #24]
 80189e8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80189ea:	693b      	ldr	r3, [r7, #16]
 80189ec:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80189f0:	bf00      	nop
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return uxReturn;
 80189f2:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
 80189f4:	4618      	mov	r0, r3
 80189f6:	3724      	adds	r7, #36	; 0x24
 80189f8:	46bd      	mov	sp, r7
 80189fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189fe:	4770      	bx	lr

08018a00 <xEventGroupSetBits>:
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8018a00:	b580      	push	{r7, lr}
 8018a02:	b08e      	sub	sp, #56	; 0x38
 8018a04:	af00      	add	r7, sp, #0
 8018a06:	6078      	str	r0, [r7, #4]
 8018a08:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8018a0a:	2300      	movs	r3, #0
 8018a0c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8018a0e:	687b      	ldr	r3, [r7, #4]
 8018a10:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8018a12:	2300      	movs	r3, #0
 8018a14:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8018a16:	687b      	ldr	r3, [r7, #4]
 8018a18:	2b00      	cmp	r3, #0
 8018a1a:	d10a      	bne.n	8018a32 <xEventGroupSetBits+0x32>
	__asm volatile
 8018a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a20:	f383 8811 	msr	BASEPRI, r3
 8018a24:	f3bf 8f6f 	isb	sy
 8018a28:	f3bf 8f4f 	dsb	sy
 8018a2c:	613b      	str	r3, [r7, #16]
}
 8018a2e:	bf00      	nop
 8018a30:	e7fe      	b.n	8018a30 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8018a32:	683b      	ldr	r3, [r7, #0]
 8018a34:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018a38:	2b00      	cmp	r3, #0
 8018a3a:	d00a      	beq.n	8018a52 <xEventGroupSetBits+0x52>
	__asm volatile
 8018a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018a40:	f383 8811 	msr	BASEPRI, r3
 8018a44:	f3bf 8f6f 	isb	sy
 8018a48:	f3bf 8f4f 	dsb	sy
 8018a4c:	60fb      	str	r3, [r7, #12]
}
 8018a4e:	bf00      	nop
 8018a50:	e7fe      	b.n	8018a50 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8018a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a54:	3304      	adds	r3, #4
 8018a56:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a5a:	3308      	adds	r3, #8
 8018a5c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8018a5e:	f001 f98d 	bl	8019d7c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8018a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a64:	68db      	ldr	r3, [r3, #12]
 8018a66:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8018a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a6a:	681a      	ldr	r2, [r3, #0]
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	431a      	orrs	r2, r3
 8018a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a72:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8018a74:	e03c      	b.n	8018af0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8018a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a78:	685b      	ldr	r3, [r3, #4]
 8018a7a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8018a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018a7e:	681b      	ldr	r3, [r3, #0]
 8018a80:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8018a82:	2300      	movs	r3, #0
 8018a84:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8018a86:	69bb      	ldr	r3, [r7, #24]
 8018a88:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8018a8c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8018a8e:	69bb      	ldr	r3, [r7, #24]
 8018a90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018a94:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8018a96:	697b      	ldr	r3, [r7, #20]
 8018a98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018a9c:	2b00      	cmp	r3, #0
 8018a9e:	d108      	bne.n	8018ab2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8018aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aa2:	681a      	ldr	r2, [r3, #0]
 8018aa4:	69bb      	ldr	r3, [r7, #24]
 8018aa6:	4013      	ands	r3, r2
 8018aa8:	2b00      	cmp	r3, #0
 8018aaa:	d00b      	beq.n	8018ac4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 8018aac:	2301      	movs	r3, #1
 8018aae:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ab0:	e008      	b.n	8018ac4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8018ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ab4:	681a      	ldr	r2, [r3, #0]
 8018ab6:	69bb      	ldr	r3, [r7, #24]
 8018ab8:	4013      	ands	r3, r2
 8018aba:	69ba      	ldr	r2, [r7, #24]
 8018abc:	429a      	cmp	r2, r3
 8018abe:	d101      	bne.n	8018ac4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8018ac0:	2301      	movs	r3, #1
 8018ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8018ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d010      	beq.n	8018aec <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8018aca:	697b      	ldr	r3, [r7, #20]
 8018acc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	d003      	beq.n	8018adc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8018ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ad6:	69bb      	ldr	r3, [r7, #24]
 8018ad8:	4313      	orrs	r3, r2
 8018ada:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8018adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ade:	681b      	ldr	r3, [r3, #0]
 8018ae0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018ae4:	4619      	mov	r1, r3
 8018ae6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018ae8:	f001 fc22 	bl	801a330 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8018aec:	69fb      	ldr	r3, [r7, #28]
 8018aee:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8018af0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018af2:	6a3b      	ldr	r3, [r7, #32]
 8018af4:	429a      	cmp	r2, r3
 8018af6:	d1be      	bne.n	8018a76 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8018af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018afa:	681a      	ldr	r2, [r3, #0]
 8018afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018afe:	43db      	mvns	r3, r3
 8018b00:	401a      	ands	r2, r3
 8018b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b04:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8018b06:	f001 f947 	bl	8019d98 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8018b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b0c:	681b      	ldr	r3, [r3, #0]
}
 8018b0e:	4618      	mov	r0, r3
 8018b10:	3738      	adds	r7, #56	; 0x38
 8018b12:	46bd      	mov	sp, r7
 8018b14:	bd80      	pop	{r7, pc}

08018b16 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8018b16:	b580      	push	{r7, lr}
 8018b18:	b082      	sub	sp, #8
 8018b1a:	af00      	add	r7, sp, #0
 8018b1c:	6078      	str	r0, [r7, #4]
 8018b1e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8018b20:	6839      	ldr	r1, [r7, #0]
 8018b22:	6878      	ldr	r0, [r7, #4]
 8018b24:	f7ff ff6c 	bl	8018a00 <xEventGroupSetBits>
}
 8018b28:	bf00      	nop
 8018b2a:	3708      	adds	r7, #8
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	bd80      	pop	{r7, pc}

08018b30 <vEventGroupClearBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'clear bits' command that was pended from
an interrupt. */
void vEventGroupClearBitsCallback( void *pvEventGroup, const uint32_t ulBitsToClear )
{
 8018b30:	b580      	push	{r7, lr}
 8018b32:	b082      	sub	sp, #8
 8018b34:	af00      	add	r7, sp, #0
 8018b36:	6078      	str	r0, [r7, #4]
 8018b38:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8018b3a:	6839      	ldr	r1, [r7, #0]
 8018b3c:	6878      	ldr	r0, [r7, #4]
 8018b3e:	f7ff feef 	bl	8018920 <xEventGroupClearBits>
}
 8018b42:	bf00      	nop
 8018b44:	3708      	adds	r7, #8
 8018b46:	46bd      	mov	sp, r7
 8018b48:	bd80      	pop	{r7, pc}

08018b4a <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8018b4a:	b480      	push	{r7}
 8018b4c:	b087      	sub	sp, #28
 8018b4e:	af00      	add	r7, sp, #0
 8018b50:	60f8      	str	r0, [r7, #12]
 8018b52:	60b9      	str	r1, [r7, #8]
 8018b54:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8018b56:	2300      	movs	r3, #0
 8018b58:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	2b00      	cmp	r3, #0
 8018b5e:	d107      	bne.n	8018b70 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8018b60:	68fa      	ldr	r2, [r7, #12]
 8018b62:	68bb      	ldr	r3, [r7, #8]
 8018b64:	4013      	ands	r3, r2
 8018b66:	2b00      	cmp	r3, #0
 8018b68:	d00a      	beq.n	8018b80 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8018b6a:	2301      	movs	r3, #1
 8018b6c:	617b      	str	r3, [r7, #20]
 8018b6e:	e007      	b.n	8018b80 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8018b70:	68fa      	ldr	r2, [r7, #12]
 8018b72:	68bb      	ldr	r3, [r7, #8]
 8018b74:	4013      	ands	r3, r2
 8018b76:	68ba      	ldr	r2, [r7, #8]
 8018b78:	429a      	cmp	r2, r3
 8018b7a:	d101      	bne.n	8018b80 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8018b7c:	2301      	movs	r3, #1
 8018b7e:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8018b80:	697b      	ldr	r3, [r7, #20]
}
 8018b82:	4618      	mov	r0, r3
 8018b84:	371c      	adds	r7, #28
 8018b86:	46bd      	mov	sp, r7
 8018b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b8c:	4770      	bx	lr
	...

08018b90 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8018b90:	b580      	push	{r7, lr}
 8018b92:	b086      	sub	sp, #24
 8018b94:	af00      	add	r7, sp, #0
 8018b96:	60f8      	str	r0, [r7, #12]
 8018b98:	60b9      	str	r1, [r7, #8]
 8018b9a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	68ba      	ldr	r2, [r7, #8]
 8018ba0:	68f9      	ldr	r1, [r7, #12]
 8018ba2:	4804      	ldr	r0, [pc, #16]	; (8018bb4 <xEventGroupSetBitsFromISR+0x24>)
 8018ba4:	f002 f9c6 	bl	801af34 <xTimerPendFunctionCallFromISR>
 8018ba8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8018baa:	697b      	ldr	r3, [r7, #20]
	}
 8018bac:	4618      	mov	r0, r3
 8018bae:	3718      	adds	r7, #24
 8018bb0:	46bd      	mov	sp, r7
 8018bb2:	bd80      	pop	{r7, pc}
 8018bb4:	08018b17 	.word	0x08018b17

08018bb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018bb8:	b480      	push	{r7}
 8018bba:	b083      	sub	sp, #12
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018bc0:	687b      	ldr	r3, [r7, #4]
 8018bc2:	f103 0208 	add.w	r2, r3, #8
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018bca:	687b      	ldr	r3, [r7, #4]
 8018bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8018bd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	f103 0208 	add.w	r2, r3, #8
 8018bd8:	687b      	ldr	r3, [r7, #4]
 8018bda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	f103 0208 	add.w	r2, r3, #8
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8018be6:	687b      	ldr	r3, [r7, #4]
 8018be8:	2200      	movs	r2, #0
 8018bea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8018bec:	bf00      	nop
 8018bee:	370c      	adds	r7, #12
 8018bf0:	46bd      	mov	sp, r7
 8018bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bf6:	4770      	bx	lr

08018bf8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8018bf8:	b480      	push	{r7}
 8018bfa:	b083      	sub	sp, #12
 8018bfc:	af00      	add	r7, sp, #0
 8018bfe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8018c00:	687b      	ldr	r3, [r7, #4]
 8018c02:	2200      	movs	r2, #0
 8018c04:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8018c06:	bf00      	nop
 8018c08:	370c      	adds	r7, #12
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c10:	4770      	bx	lr

08018c12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018c12:	b480      	push	{r7}
 8018c14:	b085      	sub	sp, #20
 8018c16:	af00      	add	r7, sp, #0
 8018c18:	6078      	str	r0, [r7, #4]
 8018c1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	685b      	ldr	r3, [r3, #4]
 8018c20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8018c22:	683b      	ldr	r3, [r7, #0]
 8018c24:	68fa      	ldr	r2, [r7, #12]
 8018c26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8018c28:	68fb      	ldr	r3, [r7, #12]
 8018c2a:	689a      	ldr	r2, [r3, #8]
 8018c2c:	683b      	ldr	r3, [r7, #0]
 8018c2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8018c30:	68fb      	ldr	r3, [r7, #12]
 8018c32:	689b      	ldr	r3, [r3, #8]
 8018c34:	683a      	ldr	r2, [r7, #0]
 8018c36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8018c38:	68fb      	ldr	r3, [r7, #12]
 8018c3a:	683a      	ldr	r2, [r7, #0]
 8018c3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8018c3e:	683b      	ldr	r3, [r7, #0]
 8018c40:	687a      	ldr	r2, [r7, #4]
 8018c42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	681b      	ldr	r3, [r3, #0]
 8018c48:	1c5a      	adds	r2, r3, #1
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	601a      	str	r2, [r3, #0]
}
 8018c4e:	bf00      	nop
 8018c50:	3714      	adds	r7, #20
 8018c52:	46bd      	mov	sp, r7
 8018c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c58:	4770      	bx	lr

08018c5a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018c5a:	b480      	push	{r7}
 8018c5c:	b085      	sub	sp, #20
 8018c5e:	af00      	add	r7, sp, #0
 8018c60:	6078      	str	r0, [r7, #4]
 8018c62:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8018c64:	683b      	ldr	r3, [r7, #0]
 8018c66:	681b      	ldr	r3, [r3, #0]
 8018c68:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018c6a:	68bb      	ldr	r3, [r7, #8]
 8018c6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8018c70:	d103      	bne.n	8018c7a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	691b      	ldr	r3, [r3, #16]
 8018c76:	60fb      	str	r3, [r7, #12]
 8018c78:	e00c      	b.n	8018c94 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	3308      	adds	r3, #8
 8018c7e:	60fb      	str	r3, [r7, #12]
 8018c80:	e002      	b.n	8018c88 <vListInsert+0x2e>
 8018c82:	68fb      	ldr	r3, [r7, #12]
 8018c84:	685b      	ldr	r3, [r3, #4]
 8018c86:	60fb      	str	r3, [r7, #12]
 8018c88:	68fb      	ldr	r3, [r7, #12]
 8018c8a:	685b      	ldr	r3, [r3, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	68ba      	ldr	r2, [r7, #8]
 8018c90:	429a      	cmp	r2, r3
 8018c92:	d2f6      	bcs.n	8018c82 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	685a      	ldr	r2, [r3, #4]
 8018c98:	683b      	ldr	r3, [r7, #0]
 8018c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018c9c:	683b      	ldr	r3, [r7, #0]
 8018c9e:	685b      	ldr	r3, [r3, #4]
 8018ca0:	683a      	ldr	r2, [r7, #0]
 8018ca2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8018ca4:	683b      	ldr	r3, [r7, #0]
 8018ca6:	68fa      	ldr	r2, [r7, #12]
 8018ca8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	683a      	ldr	r2, [r7, #0]
 8018cae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018cb0:	683b      	ldr	r3, [r7, #0]
 8018cb2:	687a      	ldr	r2, [r7, #4]
 8018cb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	1c5a      	adds	r2, r3, #1
 8018cbc:	687b      	ldr	r3, [r7, #4]
 8018cbe:	601a      	str	r2, [r3, #0]
}
 8018cc0:	bf00      	nop
 8018cc2:	3714      	adds	r7, #20
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cca:	4770      	bx	lr

08018ccc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018ccc:	b480      	push	{r7}
 8018cce:	b085      	sub	sp, #20
 8018cd0:	af00      	add	r7, sp, #0
 8018cd2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8018cd4:	687b      	ldr	r3, [r7, #4]
 8018cd6:	691b      	ldr	r3, [r3, #16]
 8018cd8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	685b      	ldr	r3, [r3, #4]
 8018cde:	687a      	ldr	r2, [r7, #4]
 8018ce0:	6892      	ldr	r2, [r2, #8]
 8018ce2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8018ce4:	687b      	ldr	r3, [r7, #4]
 8018ce6:	689b      	ldr	r3, [r3, #8]
 8018ce8:	687a      	ldr	r2, [r7, #4]
 8018cea:	6852      	ldr	r2, [r2, #4]
 8018cec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8018cee:	68fb      	ldr	r3, [r7, #12]
 8018cf0:	685b      	ldr	r3, [r3, #4]
 8018cf2:	687a      	ldr	r2, [r7, #4]
 8018cf4:	429a      	cmp	r2, r3
 8018cf6:	d103      	bne.n	8018d00 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8018cf8:	687b      	ldr	r3, [r7, #4]
 8018cfa:	689a      	ldr	r2, [r3, #8]
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8018d00:	687b      	ldr	r3, [r7, #4]
 8018d02:	2200      	movs	r2, #0
 8018d04:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	681b      	ldr	r3, [r3, #0]
 8018d0a:	1e5a      	subs	r2, r3, #1
 8018d0c:	68fb      	ldr	r3, [r7, #12]
 8018d0e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8018d10:	68fb      	ldr	r3, [r7, #12]
 8018d12:	681b      	ldr	r3, [r3, #0]
}
 8018d14:	4618      	mov	r0, r3
 8018d16:	3714      	adds	r7, #20
 8018d18:	46bd      	mov	sp, r7
 8018d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1e:	4770      	bx	lr

08018d20 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8018d20:	b580      	push	{r7, lr}
 8018d22:	b084      	sub	sp, #16
 8018d24:	af00      	add	r7, sp, #0
 8018d26:	6078      	str	r0, [r7, #4]
 8018d28:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8018d2a:	687b      	ldr	r3, [r7, #4]
 8018d2c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d10a      	bne.n	8018d4a <xQueueGenericReset+0x2a>
	__asm volatile
 8018d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018d38:	f383 8811 	msr	BASEPRI, r3
 8018d3c:	f3bf 8f6f 	isb	sy
 8018d40:	f3bf 8f4f 	dsb	sy
 8018d44:	60bb      	str	r3, [r7, #8]
}
 8018d46:	bf00      	nop
 8018d48:	e7fe      	b.n	8018d48 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8018d4a:	f002 fa43 	bl	801b1d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018d4e:	68fb      	ldr	r3, [r7, #12]
 8018d50:	681a      	ldr	r2, [r3, #0]
 8018d52:	68fb      	ldr	r3, [r7, #12]
 8018d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d56:	68f9      	ldr	r1, [r7, #12]
 8018d58:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018d5a:	fb01 f303 	mul.w	r3, r1, r3
 8018d5e:	441a      	add	r2, r3
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8018d64:	68fb      	ldr	r3, [r7, #12]
 8018d66:	2200      	movs	r2, #0
 8018d68:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8018d6a:	68fb      	ldr	r3, [r7, #12]
 8018d6c:	681a      	ldr	r2, [r3, #0]
 8018d6e:	68fb      	ldr	r3, [r7, #12]
 8018d70:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8018d72:	68fb      	ldr	r3, [r7, #12]
 8018d74:	681a      	ldr	r2, [r3, #0]
 8018d76:	68fb      	ldr	r3, [r7, #12]
 8018d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018d7a:	3b01      	subs	r3, #1
 8018d7c:	68f9      	ldr	r1, [r7, #12]
 8018d7e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8018d80:	fb01 f303 	mul.w	r3, r1, r3
 8018d84:	441a      	add	r2, r3
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8018d8a:	68fb      	ldr	r3, [r7, #12]
 8018d8c:	22ff      	movs	r2, #255	; 0xff
 8018d8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8018d92:	68fb      	ldr	r3, [r7, #12]
 8018d94:	22ff      	movs	r2, #255	; 0xff
 8018d96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8018d9a:	683b      	ldr	r3, [r7, #0]
 8018d9c:	2b00      	cmp	r3, #0
 8018d9e:	d114      	bne.n	8018dca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8018da0:	68fb      	ldr	r3, [r7, #12]
 8018da2:	691b      	ldr	r3, [r3, #16]
 8018da4:	2b00      	cmp	r3, #0
 8018da6:	d01a      	beq.n	8018dde <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8018da8:	68fb      	ldr	r3, [r7, #12]
 8018daa:	3310      	adds	r3, #16
 8018dac:	4618      	mov	r0, r3
 8018dae:	f001 fa5b 	bl	801a268 <xTaskRemoveFromEventList>
 8018db2:	4603      	mov	r3, r0
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d012      	beq.n	8018dde <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8018db8:	4b0c      	ldr	r3, [pc, #48]	; (8018dec <xQueueGenericReset+0xcc>)
 8018dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8018dbe:	601a      	str	r2, [r3, #0]
 8018dc0:	f3bf 8f4f 	dsb	sy
 8018dc4:	f3bf 8f6f 	isb	sy
 8018dc8:	e009      	b.n	8018dde <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	3310      	adds	r3, #16
 8018dce:	4618      	mov	r0, r3
 8018dd0:	f7ff fef2 	bl	8018bb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8018dd4:	68fb      	ldr	r3, [r7, #12]
 8018dd6:	3324      	adds	r3, #36	; 0x24
 8018dd8:	4618      	mov	r0, r3
 8018dda:	f7ff feed 	bl	8018bb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8018dde:	f002 fa29 	bl	801b234 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8018de2:	2301      	movs	r3, #1
}
 8018de4:	4618      	mov	r0, r3
 8018de6:	3710      	adds	r7, #16
 8018de8:	46bd      	mov	sp, r7
 8018dea:	bd80      	pop	{r7, pc}
 8018dec:	e000ed04 	.word	0xe000ed04

08018df0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b08e      	sub	sp, #56	; 0x38
 8018df4:	af02      	add	r7, sp, #8
 8018df6:	60f8      	str	r0, [r7, #12]
 8018df8:	60b9      	str	r1, [r7, #8]
 8018dfa:	607a      	str	r2, [r7, #4]
 8018dfc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	2b00      	cmp	r3, #0
 8018e02:	d10a      	bne.n	8018e1a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8018e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e08:	f383 8811 	msr	BASEPRI, r3
 8018e0c:	f3bf 8f6f 	isb	sy
 8018e10:	f3bf 8f4f 	dsb	sy
 8018e14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018e16:	bf00      	nop
 8018e18:	e7fe      	b.n	8018e18 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8018e1a:	683b      	ldr	r3, [r7, #0]
 8018e1c:	2b00      	cmp	r3, #0
 8018e1e:	d10a      	bne.n	8018e36 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8018e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e24:	f383 8811 	msr	BASEPRI, r3
 8018e28:	f3bf 8f6f 	isb	sy
 8018e2c:	f3bf 8f4f 	dsb	sy
 8018e30:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018e32:	bf00      	nop
 8018e34:	e7fe      	b.n	8018e34 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8018e36:	687b      	ldr	r3, [r7, #4]
 8018e38:	2b00      	cmp	r3, #0
 8018e3a:	d002      	beq.n	8018e42 <xQueueGenericCreateStatic+0x52>
 8018e3c:	68bb      	ldr	r3, [r7, #8]
 8018e3e:	2b00      	cmp	r3, #0
 8018e40:	d001      	beq.n	8018e46 <xQueueGenericCreateStatic+0x56>
 8018e42:	2301      	movs	r3, #1
 8018e44:	e000      	b.n	8018e48 <xQueueGenericCreateStatic+0x58>
 8018e46:	2300      	movs	r3, #0
 8018e48:	2b00      	cmp	r3, #0
 8018e4a:	d10a      	bne.n	8018e62 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8018e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e50:	f383 8811 	msr	BASEPRI, r3
 8018e54:	f3bf 8f6f 	isb	sy
 8018e58:	f3bf 8f4f 	dsb	sy
 8018e5c:	623b      	str	r3, [r7, #32]
}
 8018e5e:	bf00      	nop
 8018e60:	e7fe      	b.n	8018e60 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d102      	bne.n	8018e6e <xQueueGenericCreateStatic+0x7e>
 8018e68:	68bb      	ldr	r3, [r7, #8]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d101      	bne.n	8018e72 <xQueueGenericCreateStatic+0x82>
 8018e6e:	2301      	movs	r3, #1
 8018e70:	e000      	b.n	8018e74 <xQueueGenericCreateStatic+0x84>
 8018e72:	2300      	movs	r3, #0
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d10a      	bne.n	8018e8e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8018e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e7c:	f383 8811 	msr	BASEPRI, r3
 8018e80:	f3bf 8f6f 	isb	sy
 8018e84:	f3bf 8f4f 	dsb	sy
 8018e88:	61fb      	str	r3, [r7, #28]
}
 8018e8a:	bf00      	nop
 8018e8c:	e7fe      	b.n	8018e8c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8018e8e:	2350      	movs	r3, #80	; 0x50
 8018e90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8018e92:	697b      	ldr	r3, [r7, #20]
 8018e94:	2b50      	cmp	r3, #80	; 0x50
 8018e96:	d00a      	beq.n	8018eae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8018e98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018e9c:	f383 8811 	msr	BASEPRI, r3
 8018ea0:	f3bf 8f6f 	isb	sy
 8018ea4:	f3bf 8f4f 	dsb	sy
 8018ea8:	61bb      	str	r3, [r7, #24]
}
 8018eaa:	bf00      	nop
 8018eac:	e7fe      	b.n	8018eac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8018eae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8018eb0:	683b      	ldr	r3, [r7, #0]
 8018eb2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8018eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eb6:	2b00      	cmp	r3, #0
 8018eb8:	d00d      	beq.n	8018ed6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8018eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ebc:	2201      	movs	r2, #1
 8018ebe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8018ec2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8018ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ec8:	9300      	str	r3, [sp, #0]
 8018eca:	4613      	mov	r3, r2
 8018ecc:	687a      	ldr	r2, [r7, #4]
 8018ece:	68b9      	ldr	r1, [r7, #8]
 8018ed0:	68f8      	ldr	r0, [r7, #12]
 8018ed2:	f000 f805 	bl	8018ee0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8018ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8018ed8:	4618      	mov	r0, r3
 8018eda:	3730      	adds	r7, #48	; 0x30
 8018edc:	46bd      	mov	sp, r7
 8018ede:	bd80      	pop	{r7, pc}

08018ee0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b084      	sub	sp, #16
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	60f8      	str	r0, [r7, #12]
 8018ee8:	60b9      	str	r1, [r7, #8]
 8018eea:	607a      	str	r2, [r7, #4]
 8018eec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8018eee:	68bb      	ldr	r3, [r7, #8]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d103      	bne.n	8018efc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8018ef4:	69bb      	ldr	r3, [r7, #24]
 8018ef6:	69ba      	ldr	r2, [r7, #24]
 8018ef8:	601a      	str	r2, [r3, #0]
 8018efa:	e002      	b.n	8018f02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8018efc:	69bb      	ldr	r3, [r7, #24]
 8018efe:	687a      	ldr	r2, [r7, #4]
 8018f00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8018f02:	69bb      	ldr	r3, [r7, #24]
 8018f04:	68fa      	ldr	r2, [r7, #12]
 8018f06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8018f08:	69bb      	ldr	r3, [r7, #24]
 8018f0a:	68ba      	ldr	r2, [r7, #8]
 8018f0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8018f0e:	2101      	movs	r1, #1
 8018f10:	69b8      	ldr	r0, [r7, #24]
 8018f12:	f7ff ff05 	bl	8018d20 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8018f16:	69bb      	ldr	r3, [r7, #24]
 8018f18:	78fa      	ldrb	r2, [r7, #3]
 8018f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8018f1e:	bf00      	nop
 8018f20:	3710      	adds	r7, #16
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}
	...

08018f28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8018f28:	b580      	push	{r7, lr}
 8018f2a:	b08e      	sub	sp, #56	; 0x38
 8018f2c:	af00      	add	r7, sp, #0
 8018f2e:	60f8      	str	r0, [r7, #12]
 8018f30:	60b9      	str	r1, [r7, #8]
 8018f32:	607a      	str	r2, [r7, #4]
 8018f34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8018f36:	2300      	movs	r3, #0
 8018f38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8018f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f40:	2b00      	cmp	r3, #0
 8018f42:	d10a      	bne.n	8018f5a <xQueueGenericSend+0x32>
	__asm volatile
 8018f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f48:	f383 8811 	msr	BASEPRI, r3
 8018f4c:	f3bf 8f6f 	isb	sy
 8018f50:	f3bf 8f4f 	dsb	sy
 8018f54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8018f56:	bf00      	nop
 8018f58:	e7fe      	b.n	8018f58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8018f5a:	68bb      	ldr	r3, [r7, #8]
 8018f5c:	2b00      	cmp	r3, #0
 8018f5e:	d103      	bne.n	8018f68 <xQueueGenericSend+0x40>
 8018f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d101      	bne.n	8018f6c <xQueueGenericSend+0x44>
 8018f68:	2301      	movs	r3, #1
 8018f6a:	e000      	b.n	8018f6e <xQueueGenericSend+0x46>
 8018f6c:	2300      	movs	r3, #0
 8018f6e:	2b00      	cmp	r3, #0
 8018f70:	d10a      	bne.n	8018f88 <xQueueGenericSend+0x60>
	__asm volatile
 8018f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018f76:	f383 8811 	msr	BASEPRI, r3
 8018f7a:	f3bf 8f6f 	isb	sy
 8018f7e:	f3bf 8f4f 	dsb	sy
 8018f82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8018f84:	bf00      	nop
 8018f86:	e7fe      	b.n	8018f86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8018f88:	683b      	ldr	r3, [r7, #0]
 8018f8a:	2b02      	cmp	r3, #2
 8018f8c:	d103      	bne.n	8018f96 <xQueueGenericSend+0x6e>
 8018f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018f92:	2b01      	cmp	r3, #1
 8018f94:	d101      	bne.n	8018f9a <xQueueGenericSend+0x72>
 8018f96:	2301      	movs	r3, #1
 8018f98:	e000      	b.n	8018f9c <xQueueGenericSend+0x74>
 8018f9a:	2300      	movs	r3, #0
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d10a      	bne.n	8018fb6 <xQueueGenericSend+0x8e>
	__asm volatile
 8018fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fa4:	f383 8811 	msr	BASEPRI, r3
 8018fa8:	f3bf 8f6f 	isb	sy
 8018fac:	f3bf 8f4f 	dsb	sy
 8018fb0:	623b      	str	r3, [r7, #32]
}
 8018fb2:	bf00      	nop
 8018fb4:	e7fe      	b.n	8018fb4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8018fb6:	f001 fb77 	bl	801a6a8 <xTaskGetSchedulerState>
 8018fba:	4603      	mov	r3, r0
 8018fbc:	2b00      	cmp	r3, #0
 8018fbe:	d102      	bne.n	8018fc6 <xQueueGenericSend+0x9e>
 8018fc0:	687b      	ldr	r3, [r7, #4]
 8018fc2:	2b00      	cmp	r3, #0
 8018fc4:	d101      	bne.n	8018fca <xQueueGenericSend+0xa2>
 8018fc6:	2301      	movs	r3, #1
 8018fc8:	e000      	b.n	8018fcc <xQueueGenericSend+0xa4>
 8018fca:	2300      	movs	r3, #0
 8018fcc:	2b00      	cmp	r3, #0
 8018fce:	d10a      	bne.n	8018fe6 <xQueueGenericSend+0xbe>
	__asm volatile
 8018fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8018fd4:	f383 8811 	msr	BASEPRI, r3
 8018fd8:	f3bf 8f6f 	isb	sy
 8018fdc:	f3bf 8f4f 	dsb	sy
 8018fe0:	61fb      	str	r3, [r7, #28]
}
 8018fe2:	bf00      	nop
 8018fe4:	e7fe      	b.n	8018fe4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8018fe6:	f002 f8f5 	bl	801b1d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8018fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8018fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8018ff2:	429a      	cmp	r2, r3
 8018ff4:	d302      	bcc.n	8018ffc <xQueueGenericSend+0xd4>
 8018ff6:	683b      	ldr	r3, [r7, #0]
 8018ff8:	2b02      	cmp	r3, #2
 8018ffa:	d129      	bne.n	8019050 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8018ffc:	683a      	ldr	r2, [r7, #0]
 8018ffe:	68b9      	ldr	r1, [r7, #8]
 8019000:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019002:	f000 fa0b 	bl	801941c <prvCopyDataToQueue>
 8019006:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801900a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801900c:	2b00      	cmp	r3, #0
 801900e:	d010      	beq.n	8019032 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8019010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019012:	3324      	adds	r3, #36	; 0x24
 8019014:	4618      	mov	r0, r3
 8019016:	f001 f927 	bl	801a268 <xTaskRemoveFromEventList>
 801901a:	4603      	mov	r3, r0
 801901c:	2b00      	cmp	r3, #0
 801901e:	d013      	beq.n	8019048 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8019020:	4b3f      	ldr	r3, [pc, #252]	; (8019120 <xQueueGenericSend+0x1f8>)
 8019022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019026:	601a      	str	r2, [r3, #0]
 8019028:	f3bf 8f4f 	dsb	sy
 801902c:	f3bf 8f6f 	isb	sy
 8019030:	e00a      	b.n	8019048 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8019032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019034:	2b00      	cmp	r3, #0
 8019036:	d007      	beq.n	8019048 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8019038:	4b39      	ldr	r3, [pc, #228]	; (8019120 <xQueueGenericSend+0x1f8>)
 801903a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801903e:	601a      	str	r2, [r3, #0]
 8019040:	f3bf 8f4f 	dsb	sy
 8019044:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8019048:	f002 f8f4 	bl	801b234 <vPortExitCritical>
				return pdPASS;
 801904c:	2301      	movs	r3, #1
 801904e:	e063      	b.n	8019118 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8019050:	687b      	ldr	r3, [r7, #4]
 8019052:	2b00      	cmp	r3, #0
 8019054:	d103      	bne.n	801905e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019056:	f002 f8ed 	bl	801b234 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 801905a:	2300      	movs	r3, #0
 801905c:	e05c      	b.n	8019118 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 801905e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019060:	2b00      	cmp	r3, #0
 8019062:	d106      	bne.n	8019072 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8019064:	f107 0314 	add.w	r3, r7, #20
 8019068:	4618      	mov	r0, r3
 801906a:	f001 f9c3 	bl	801a3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801906e:	2301      	movs	r3, #1
 8019070:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8019072:	f002 f8df 	bl	801b234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019076:	f000 fe81 	bl	8019d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801907a:	f002 f8ab 	bl	801b1d4 <vPortEnterCritical>
 801907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019080:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019084:	b25b      	sxtb	r3, r3
 8019086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801908a:	d103      	bne.n	8019094 <xQueueGenericSend+0x16c>
 801908c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801908e:	2200      	movs	r2, #0
 8019090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8019094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801909a:	b25b      	sxtb	r3, r3
 801909c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80190a0:	d103      	bne.n	80190aa <xQueueGenericSend+0x182>
 80190a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190a4:	2200      	movs	r2, #0
 80190a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80190aa:	f002 f8c3 	bl	801b234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80190ae:	1d3a      	adds	r2, r7, #4
 80190b0:	f107 0314 	add.w	r3, r7, #20
 80190b4:	4611      	mov	r1, r2
 80190b6:	4618      	mov	r0, r3
 80190b8:	f001 f9b2 	bl	801a420 <xTaskCheckForTimeOut>
 80190bc:	4603      	mov	r3, r0
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d124      	bne.n	801910c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80190c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190c4:	f000 faa2 	bl	801960c <prvIsQueueFull>
 80190c8:	4603      	mov	r3, r0
 80190ca:	2b00      	cmp	r3, #0
 80190cc:	d018      	beq.n	8019100 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80190ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190d0:	3310      	adds	r3, #16
 80190d2:	687a      	ldr	r2, [r7, #4]
 80190d4:	4611      	mov	r1, r2
 80190d6:	4618      	mov	r0, r3
 80190d8:	f001 f83a 	bl	801a150 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80190dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80190de:	f000 fa2d 	bl	801953c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80190e2:	f000 fe59 	bl	8019d98 <xTaskResumeAll>
 80190e6:	4603      	mov	r3, r0
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	f47f af7c 	bne.w	8018fe6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80190ee:	4b0c      	ldr	r3, [pc, #48]	; (8019120 <xQueueGenericSend+0x1f8>)
 80190f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80190f4:	601a      	str	r2, [r3, #0]
 80190f6:	f3bf 8f4f 	dsb	sy
 80190fa:	f3bf 8f6f 	isb	sy
 80190fe:	e772      	b.n	8018fe6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8019100:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019102:	f000 fa1b 	bl	801953c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8019106:	f000 fe47 	bl	8019d98 <xTaskResumeAll>
 801910a:	e76c      	b.n	8018fe6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 801910c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801910e:	f000 fa15 	bl	801953c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8019112:	f000 fe41 	bl	8019d98 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8019116:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8019118:	4618      	mov	r0, r3
 801911a:	3738      	adds	r7, #56	; 0x38
 801911c:	46bd      	mov	sp, r7
 801911e:	bd80      	pop	{r7, pc}
 8019120:	e000ed04 	.word	0xe000ed04

08019124 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8019124:	b580      	push	{r7, lr}
 8019126:	b090      	sub	sp, #64	; 0x40
 8019128:	af00      	add	r7, sp, #0
 801912a:	60f8      	str	r0, [r7, #12]
 801912c:	60b9      	str	r1, [r7, #8]
 801912e:	607a      	str	r2, [r7, #4]
 8019130:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8019136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019138:	2b00      	cmp	r3, #0
 801913a:	d10a      	bne.n	8019152 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 801913c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019140:	f383 8811 	msr	BASEPRI, r3
 8019144:	f3bf 8f6f 	isb	sy
 8019148:	f3bf 8f4f 	dsb	sy
 801914c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801914e:	bf00      	nop
 8019150:	e7fe      	b.n	8019150 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8019152:	68bb      	ldr	r3, [r7, #8]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d103      	bne.n	8019160 <xQueueGenericSendFromISR+0x3c>
 8019158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801915a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801915c:	2b00      	cmp	r3, #0
 801915e:	d101      	bne.n	8019164 <xQueueGenericSendFromISR+0x40>
 8019160:	2301      	movs	r3, #1
 8019162:	e000      	b.n	8019166 <xQueueGenericSendFromISR+0x42>
 8019164:	2300      	movs	r3, #0
 8019166:	2b00      	cmp	r3, #0
 8019168:	d10a      	bne.n	8019180 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 801916a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801916e:	f383 8811 	msr	BASEPRI, r3
 8019172:	f3bf 8f6f 	isb	sy
 8019176:	f3bf 8f4f 	dsb	sy
 801917a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801917c:	bf00      	nop
 801917e:	e7fe      	b.n	801917e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8019180:	683b      	ldr	r3, [r7, #0]
 8019182:	2b02      	cmp	r3, #2
 8019184:	d103      	bne.n	801918e <xQueueGenericSendFromISR+0x6a>
 8019186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801918a:	2b01      	cmp	r3, #1
 801918c:	d101      	bne.n	8019192 <xQueueGenericSendFromISR+0x6e>
 801918e:	2301      	movs	r3, #1
 8019190:	e000      	b.n	8019194 <xQueueGenericSendFromISR+0x70>
 8019192:	2300      	movs	r3, #0
 8019194:	2b00      	cmp	r3, #0
 8019196:	d10a      	bne.n	80191ae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8019198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801919c:	f383 8811 	msr	BASEPRI, r3
 80191a0:	f3bf 8f6f 	isb	sy
 80191a4:	f3bf 8f4f 	dsb	sy
 80191a8:	623b      	str	r3, [r7, #32]
}
 80191aa:	bf00      	nop
 80191ac:	e7fe      	b.n	80191ac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80191ae:	f002 f8f3 	bl	801b398 <vPortValidateInterruptPriority>
	__asm volatile
 80191b2:	f3ef 8211 	mrs	r2, BASEPRI
 80191b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80191ba:	f383 8811 	msr	BASEPRI, r3
 80191be:	f3bf 8f6f 	isb	sy
 80191c2:	f3bf 8f4f 	dsb	sy
 80191c6:	61fa      	str	r2, [r7, #28]
 80191c8:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 80191ca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80191cc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80191ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80191d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80191d6:	429a      	cmp	r2, r3
 80191d8:	d302      	bcc.n	80191e0 <xQueueGenericSendFromISR+0xbc>
 80191da:	683b      	ldr	r3, [r7, #0]
 80191dc:	2b02      	cmp	r3, #2
 80191de:	d12f      	bne.n	8019240 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80191e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80191e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80191ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80191ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191ee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80191f0:	683a      	ldr	r2, [r7, #0]
 80191f2:	68b9      	ldr	r1, [r7, #8]
 80191f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80191f6:	f000 f911 	bl	801941c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80191fa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80191fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019202:	d112      	bne.n	801922a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019208:	2b00      	cmp	r3, #0
 801920a:	d016      	beq.n	801923a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801920e:	3324      	adds	r3, #36	; 0x24
 8019210:	4618      	mov	r0, r3
 8019212:	f001 f829 	bl	801a268 <xTaskRemoveFromEventList>
 8019216:	4603      	mov	r3, r0
 8019218:	2b00      	cmp	r3, #0
 801921a:	d00e      	beq.n	801923a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801921c:	687b      	ldr	r3, [r7, #4]
 801921e:	2b00      	cmp	r3, #0
 8019220:	d00b      	beq.n	801923a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8019222:	687b      	ldr	r3, [r7, #4]
 8019224:	2201      	movs	r2, #1
 8019226:	601a      	str	r2, [r3, #0]
 8019228:	e007      	b.n	801923a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 801922a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 801922e:	3301      	adds	r3, #1
 8019230:	b2db      	uxtb	r3, r3
 8019232:	b25a      	sxtb	r2, r3
 8019234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 801923a:	2301      	movs	r3, #1
 801923c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 801923e:	e001      	b.n	8019244 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8019240:	2300      	movs	r3, #0
 8019242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019244:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019246:	617b      	str	r3, [r7, #20]
	__asm volatile
 8019248:	697b      	ldr	r3, [r7, #20]
 801924a:	f383 8811 	msr	BASEPRI, r3
}
 801924e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8019250:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8019252:	4618      	mov	r0, r3
 8019254:	3740      	adds	r7, #64	; 0x40
 8019256:	46bd      	mov	sp, r7
 8019258:	bd80      	pop	{r7, pc}
	...

0801925c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 801925c:	b580      	push	{r7, lr}
 801925e:	b08c      	sub	sp, #48	; 0x30
 8019260:	af00      	add	r7, sp, #0
 8019262:	60f8      	str	r0, [r7, #12]
 8019264:	60b9      	str	r1, [r7, #8]
 8019266:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8019268:	2300      	movs	r3, #0
 801926a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801926c:	68fb      	ldr	r3, [r7, #12]
 801926e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8019270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019272:	2b00      	cmp	r3, #0
 8019274:	d10a      	bne.n	801928c <xQueueReceive+0x30>
	__asm volatile
 8019276:	f04f 0350 	mov.w	r3, #80	; 0x50
 801927a:	f383 8811 	msr	BASEPRI, r3
 801927e:	f3bf 8f6f 	isb	sy
 8019282:	f3bf 8f4f 	dsb	sy
 8019286:	623b      	str	r3, [r7, #32]
}
 8019288:	bf00      	nop
 801928a:	e7fe      	b.n	801928a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801928c:	68bb      	ldr	r3, [r7, #8]
 801928e:	2b00      	cmp	r3, #0
 8019290:	d103      	bne.n	801929a <xQueueReceive+0x3e>
 8019292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019296:	2b00      	cmp	r3, #0
 8019298:	d101      	bne.n	801929e <xQueueReceive+0x42>
 801929a:	2301      	movs	r3, #1
 801929c:	e000      	b.n	80192a0 <xQueueReceive+0x44>
 801929e:	2300      	movs	r3, #0
 80192a0:	2b00      	cmp	r3, #0
 80192a2:	d10a      	bne.n	80192ba <xQueueReceive+0x5e>
	__asm volatile
 80192a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192a8:	f383 8811 	msr	BASEPRI, r3
 80192ac:	f3bf 8f6f 	isb	sy
 80192b0:	f3bf 8f4f 	dsb	sy
 80192b4:	61fb      	str	r3, [r7, #28]
}
 80192b6:	bf00      	nop
 80192b8:	e7fe      	b.n	80192b8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80192ba:	f001 f9f5 	bl	801a6a8 <xTaskGetSchedulerState>
 80192be:	4603      	mov	r3, r0
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d102      	bne.n	80192ca <xQueueReceive+0x6e>
 80192c4:	687b      	ldr	r3, [r7, #4]
 80192c6:	2b00      	cmp	r3, #0
 80192c8:	d101      	bne.n	80192ce <xQueueReceive+0x72>
 80192ca:	2301      	movs	r3, #1
 80192cc:	e000      	b.n	80192d0 <xQueueReceive+0x74>
 80192ce:	2300      	movs	r3, #0
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d10a      	bne.n	80192ea <xQueueReceive+0x8e>
	__asm volatile
 80192d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80192d8:	f383 8811 	msr	BASEPRI, r3
 80192dc:	f3bf 8f6f 	isb	sy
 80192e0:	f3bf 8f4f 	dsb	sy
 80192e4:	61bb      	str	r3, [r7, #24]
}
 80192e6:	bf00      	nop
 80192e8:	e7fe      	b.n	80192e8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80192ea:	f001 ff73 	bl	801b1d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80192ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80192f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80192f2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80192f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192f6:	2b00      	cmp	r3, #0
 80192f8:	d01f      	beq.n	801933a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80192fa:	68b9      	ldr	r1, [r7, #8]
 80192fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80192fe:	f000 f8f7 	bl	80194f0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8019302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019304:	1e5a      	subs	r2, r3, #1
 8019306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019308:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801930a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801930c:	691b      	ldr	r3, [r3, #16]
 801930e:	2b00      	cmp	r3, #0
 8019310:	d00f      	beq.n	8019332 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8019312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019314:	3310      	adds	r3, #16
 8019316:	4618      	mov	r0, r3
 8019318:	f000 ffa6 	bl	801a268 <xTaskRemoveFromEventList>
 801931c:	4603      	mov	r3, r0
 801931e:	2b00      	cmp	r3, #0
 8019320:	d007      	beq.n	8019332 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8019322:	4b3d      	ldr	r3, [pc, #244]	; (8019418 <xQueueReceive+0x1bc>)
 8019324:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019328:	601a      	str	r2, [r3, #0]
 801932a:	f3bf 8f4f 	dsb	sy
 801932e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8019332:	f001 ff7f 	bl	801b234 <vPortExitCritical>
				return pdPASS;
 8019336:	2301      	movs	r3, #1
 8019338:	e069      	b.n	801940e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	2b00      	cmp	r3, #0
 801933e:	d103      	bne.n	8019348 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8019340:	f001 ff78 	bl	801b234 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8019344:	2300      	movs	r3, #0
 8019346:	e062      	b.n	801940e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8019348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801934a:	2b00      	cmp	r3, #0
 801934c:	d106      	bne.n	801935c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801934e:	f107 0310 	add.w	r3, r7, #16
 8019352:	4618      	mov	r0, r3
 8019354:	f001 f84e 	bl	801a3f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8019358:	2301      	movs	r3, #1
 801935a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801935c:	f001 ff6a 	bl	801b234 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8019360:	f000 fd0c 	bl	8019d7c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8019364:	f001 ff36 	bl	801b1d4 <vPortEnterCritical>
 8019368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801936a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801936e:	b25b      	sxtb	r3, r3
 8019370:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019374:	d103      	bne.n	801937e <xQueueReceive+0x122>
 8019376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019378:	2200      	movs	r2, #0
 801937a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019380:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8019384:	b25b      	sxtb	r3, r3
 8019386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801938a:	d103      	bne.n	8019394 <xQueueReceive+0x138>
 801938c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801938e:	2200      	movs	r2, #0
 8019390:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8019394:	f001 ff4e 	bl	801b234 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8019398:	1d3a      	adds	r2, r7, #4
 801939a:	f107 0310 	add.w	r3, r7, #16
 801939e:	4611      	mov	r1, r2
 80193a0:	4618      	mov	r0, r3
 80193a2:	f001 f83d 	bl	801a420 <xTaskCheckForTimeOut>
 80193a6:	4603      	mov	r3, r0
 80193a8:	2b00      	cmp	r3, #0
 80193aa:	d123      	bne.n	80193f4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80193ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193ae:	f000 f917 	bl	80195e0 <prvIsQueueEmpty>
 80193b2:	4603      	mov	r3, r0
 80193b4:	2b00      	cmp	r3, #0
 80193b6:	d017      	beq.n	80193e8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80193b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80193ba:	3324      	adds	r3, #36	; 0x24
 80193bc:	687a      	ldr	r2, [r7, #4]
 80193be:	4611      	mov	r1, r2
 80193c0:	4618      	mov	r0, r3
 80193c2:	f000 fec5 	bl	801a150 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80193c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193c8:	f000 f8b8 	bl	801953c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80193cc:	f000 fce4 	bl	8019d98 <xTaskResumeAll>
 80193d0:	4603      	mov	r3, r0
 80193d2:	2b00      	cmp	r3, #0
 80193d4:	d189      	bne.n	80192ea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80193d6:	4b10      	ldr	r3, [pc, #64]	; (8019418 <xQueueReceive+0x1bc>)
 80193d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80193dc:	601a      	str	r2, [r3, #0]
 80193de:	f3bf 8f4f 	dsb	sy
 80193e2:	f3bf 8f6f 	isb	sy
 80193e6:	e780      	b.n	80192ea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80193e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193ea:	f000 f8a7 	bl	801953c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80193ee:	f000 fcd3 	bl	8019d98 <xTaskResumeAll>
 80193f2:	e77a      	b.n	80192ea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80193f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80193f6:	f000 f8a1 	bl	801953c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80193fa:	f000 fccd 	bl	8019d98 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80193fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019400:	f000 f8ee 	bl	80195e0 <prvIsQueueEmpty>
 8019404:	4603      	mov	r3, r0
 8019406:	2b00      	cmp	r3, #0
 8019408:	f43f af6f 	beq.w	80192ea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801940c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801940e:	4618      	mov	r0, r3
 8019410:	3730      	adds	r7, #48	; 0x30
 8019412:	46bd      	mov	sp, r7
 8019414:	bd80      	pop	{r7, pc}
 8019416:	bf00      	nop
 8019418:	e000ed04 	.word	0xe000ed04

0801941c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801941c:	b580      	push	{r7, lr}
 801941e:	b086      	sub	sp, #24
 8019420:	af00      	add	r7, sp, #0
 8019422:	60f8      	str	r0, [r7, #12]
 8019424:	60b9      	str	r1, [r7, #8]
 8019426:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8019428:	2300      	movs	r3, #0
 801942a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801942c:	68fb      	ldr	r3, [r7, #12]
 801942e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019430:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8019432:	68fb      	ldr	r3, [r7, #12]
 8019434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019436:	2b00      	cmp	r3, #0
 8019438:	d10d      	bne.n	8019456 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801943a:	68fb      	ldr	r3, [r7, #12]
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d14d      	bne.n	80194de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	689b      	ldr	r3, [r3, #8]
 8019446:	4618      	mov	r0, r3
 8019448:	f001 f94c 	bl	801a6e4 <xTaskPriorityDisinherit>
 801944c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 801944e:	68fb      	ldr	r3, [r7, #12]
 8019450:	2200      	movs	r2, #0
 8019452:	609a      	str	r2, [r3, #8]
 8019454:	e043      	b.n	80194de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	2b00      	cmp	r3, #0
 801945a:	d119      	bne.n	8019490 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	6858      	ldr	r0, [r3, #4]
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019464:	461a      	mov	r2, r3
 8019466:	68b9      	ldr	r1, [r7, #8]
 8019468:	f002 f9ea 	bl	801b840 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	685a      	ldr	r2, [r3, #4]
 8019470:	68fb      	ldr	r3, [r7, #12]
 8019472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019474:	441a      	add	r2, r3
 8019476:	68fb      	ldr	r3, [r7, #12]
 8019478:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	685a      	ldr	r2, [r3, #4]
 801947e:	68fb      	ldr	r3, [r7, #12]
 8019480:	689b      	ldr	r3, [r3, #8]
 8019482:	429a      	cmp	r2, r3
 8019484:	d32b      	bcc.n	80194de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8019486:	68fb      	ldr	r3, [r7, #12]
 8019488:	681a      	ldr	r2, [r3, #0]
 801948a:	68fb      	ldr	r3, [r7, #12]
 801948c:	605a      	str	r2, [r3, #4]
 801948e:	e026      	b.n	80194de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8019490:	68fb      	ldr	r3, [r7, #12]
 8019492:	68d8      	ldr	r0, [r3, #12]
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019498:	461a      	mov	r2, r3
 801949a:	68b9      	ldr	r1, [r7, #8]
 801949c:	f002 f9d0 	bl	801b840 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80194a0:	68fb      	ldr	r3, [r7, #12]
 80194a2:	68da      	ldr	r2, [r3, #12]
 80194a4:	68fb      	ldr	r3, [r7, #12]
 80194a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194a8:	425b      	negs	r3, r3
 80194aa:	441a      	add	r2, r3
 80194ac:	68fb      	ldr	r3, [r7, #12]
 80194ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	68da      	ldr	r2, [r3, #12]
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	429a      	cmp	r2, r3
 80194ba:	d207      	bcs.n	80194cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80194bc:	68fb      	ldr	r3, [r7, #12]
 80194be:	689a      	ldr	r2, [r3, #8]
 80194c0:	68fb      	ldr	r3, [r7, #12]
 80194c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194c4:	425b      	negs	r3, r3
 80194c6:	441a      	add	r2, r3
 80194c8:	68fb      	ldr	r3, [r7, #12]
 80194ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	2b02      	cmp	r3, #2
 80194d0:	d105      	bne.n	80194de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80194d2:	693b      	ldr	r3, [r7, #16]
 80194d4:	2b00      	cmp	r3, #0
 80194d6:	d002      	beq.n	80194de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80194d8:	693b      	ldr	r3, [r7, #16]
 80194da:	3b01      	subs	r3, #1
 80194dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80194de:	693b      	ldr	r3, [r7, #16]
 80194e0:	1c5a      	adds	r2, r3, #1
 80194e2:	68fb      	ldr	r3, [r7, #12]
 80194e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80194e6:	697b      	ldr	r3, [r7, #20]
}
 80194e8:	4618      	mov	r0, r3
 80194ea:	3718      	adds	r7, #24
 80194ec:	46bd      	mov	sp, r7
 80194ee:	bd80      	pop	{r7, pc}

080194f0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80194f0:	b580      	push	{r7, lr}
 80194f2:	b082      	sub	sp, #8
 80194f4:	af00      	add	r7, sp, #0
 80194f6:	6078      	str	r0, [r7, #4]
 80194f8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80194fa:	687b      	ldr	r3, [r7, #4]
 80194fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d018      	beq.n	8019534 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	68da      	ldr	r2, [r3, #12]
 8019506:	687b      	ldr	r3, [r7, #4]
 8019508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801950a:	441a      	add	r2, r3
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	68da      	ldr	r2, [r3, #12]
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	689b      	ldr	r3, [r3, #8]
 8019518:	429a      	cmp	r2, r3
 801951a:	d303      	bcc.n	8019524 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	681a      	ldr	r2, [r3, #0]
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	68d9      	ldr	r1, [r3, #12]
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801952c:	461a      	mov	r2, r3
 801952e:	6838      	ldr	r0, [r7, #0]
 8019530:	f002 f986 	bl	801b840 <memcpy>
	}
}
 8019534:	bf00      	nop
 8019536:	3708      	adds	r7, #8
 8019538:	46bd      	mov	sp, r7
 801953a:	bd80      	pop	{r7, pc}

0801953c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801953c:	b580      	push	{r7, lr}
 801953e:	b084      	sub	sp, #16
 8019540:	af00      	add	r7, sp, #0
 8019542:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8019544:	f001 fe46 	bl	801b1d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8019548:	687b      	ldr	r3, [r7, #4]
 801954a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801954e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019550:	e011      	b.n	8019576 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8019552:	687b      	ldr	r3, [r7, #4]
 8019554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019556:	2b00      	cmp	r3, #0
 8019558:	d012      	beq.n	8019580 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801955a:	687b      	ldr	r3, [r7, #4]
 801955c:	3324      	adds	r3, #36	; 0x24
 801955e:	4618      	mov	r0, r3
 8019560:	f000 fe82 	bl	801a268 <xTaskRemoveFromEventList>
 8019564:	4603      	mov	r3, r0
 8019566:	2b00      	cmp	r3, #0
 8019568:	d001      	beq.n	801956e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801956a:	f000 ffbb 	bl	801a4e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801956e:	7bfb      	ldrb	r3, [r7, #15]
 8019570:	3b01      	subs	r3, #1
 8019572:	b2db      	uxtb	r3, r3
 8019574:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8019576:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801957a:	2b00      	cmp	r3, #0
 801957c:	dce9      	bgt.n	8019552 <prvUnlockQueue+0x16>
 801957e:	e000      	b.n	8019582 <prvUnlockQueue+0x46>
					break;
 8019580:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	22ff      	movs	r2, #255	; 0xff
 8019586:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801958a:	f001 fe53 	bl	801b234 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801958e:	f001 fe21 	bl	801b1d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8019598:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801959a:	e011      	b.n	80195c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	691b      	ldr	r3, [r3, #16]
 80195a0:	2b00      	cmp	r3, #0
 80195a2:	d012      	beq.n	80195ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80195a4:	687b      	ldr	r3, [r7, #4]
 80195a6:	3310      	adds	r3, #16
 80195a8:	4618      	mov	r0, r3
 80195aa:	f000 fe5d 	bl	801a268 <xTaskRemoveFromEventList>
 80195ae:	4603      	mov	r3, r0
 80195b0:	2b00      	cmp	r3, #0
 80195b2:	d001      	beq.n	80195b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80195b4:	f000 ff96 	bl	801a4e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80195b8:	7bbb      	ldrb	r3, [r7, #14]
 80195ba:	3b01      	subs	r3, #1
 80195bc:	b2db      	uxtb	r3, r3
 80195be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80195c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	dce9      	bgt.n	801959c <prvUnlockQueue+0x60>
 80195c8:	e000      	b.n	80195cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80195ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80195cc:	687b      	ldr	r3, [r7, #4]
 80195ce:	22ff      	movs	r2, #255	; 0xff
 80195d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80195d4:	f001 fe2e 	bl	801b234 <vPortExitCritical>
}
 80195d8:	bf00      	nop
 80195da:	3710      	adds	r7, #16
 80195dc:	46bd      	mov	sp, r7
 80195de:	bd80      	pop	{r7, pc}

080195e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b084      	sub	sp, #16
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80195e8:	f001 fdf4 	bl	801b1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80195f0:	2b00      	cmp	r3, #0
 80195f2:	d102      	bne.n	80195fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80195f4:	2301      	movs	r3, #1
 80195f6:	60fb      	str	r3, [r7, #12]
 80195f8:	e001      	b.n	80195fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80195fa:	2300      	movs	r3, #0
 80195fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80195fe:	f001 fe19 	bl	801b234 <vPortExitCritical>

	return xReturn;
 8019602:	68fb      	ldr	r3, [r7, #12]
}
 8019604:	4618      	mov	r0, r3
 8019606:	3710      	adds	r7, #16
 8019608:	46bd      	mov	sp, r7
 801960a:	bd80      	pop	{r7, pc}

0801960c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 801960c:	b580      	push	{r7, lr}
 801960e:	b084      	sub	sp, #16
 8019610:	af00      	add	r7, sp, #0
 8019612:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8019614:	f001 fdde 	bl	801b1d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8019618:	687b      	ldr	r3, [r7, #4]
 801961a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019620:	429a      	cmp	r2, r3
 8019622:	d102      	bne.n	801962a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8019624:	2301      	movs	r3, #1
 8019626:	60fb      	str	r3, [r7, #12]
 8019628:	e001      	b.n	801962e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801962a:	2300      	movs	r3, #0
 801962c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801962e:	f001 fe01 	bl	801b234 <vPortExitCritical>

	return xReturn;
 8019632:	68fb      	ldr	r3, [r7, #12]
}
 8019634:	4618      	mov	r0, r3
 8019636:	3710      	adds	r7, #16
 8019638:	46bd      	mov	sp, r7
 801963a:	bd80      	pop	{r7, pc}

0801963c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 801963c:	b480      	push	{r7}
 801963e:	b085      	sub	sp, #20
 8019640:	af00      	add	r7, sp, #0
 8019642:	6078      	str	r0, [r7, #4]
 8019644:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019646:	2300      	movs	r3, #0
 8019648:	60fb      	str	r3, [r7, #12]
 801964a:	e014      	b.n	8019676 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 801964c:	4a0f      	ldr	r2, [pc, #60]	; (801968c <vQueueAddToRegistry+0x50>)
 801964e:	68fb      	ldr	r3, [r7, #12]
 8019650:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d10b      	bne.n	8019670 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8019658:	490c      	ldr	r1, [pc, #48]	; (801968c <vQueueAddToRegistry+0x50>)
 801965a:	68fb      	ldr	r3, [r7, #12]
 801965c:	683a      	ldr	r2, [r7, #0]
 801965e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8019662:	4a0a      	ldr	r2, [pc, #40]	; (801968c <vQueueAddToRegistry+0x50>)
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	00db      	lsls	r3, r3, #3
 8019668:	4413      	add	r3, r2
 801966a:	687a      	ldr	r2, [r7, #4]
 801966c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 801966e:	e006      	b.n	801967e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8019670:	68fb      	ldr	r3, [r7, #12]
 8019672:	3301      	adds	r3, #1
 8019674:	60fb      	str	r3, [r7, #12]
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	2b07      	cmp	r3, #7
 801967a:	d9e7      	bls.n	801964c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801967c:	bf00      	nop
 801967e:	bf00      	nop
 8019680:	3714      	adds	r7, #20
 8019682:	46bd      	mov	sp, r7
 8019684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019688:	4770      	bx	lr
 801968a:	bf00      	nop
 801968c:	24002ad0 	.word	0x24002ad0

08019690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8019690:	b580      	push	{r7, lr}
 8019692:	b086      	sub	sp, #24
 8019694:	af00      	add	r7, sp, #0
 8019696:	60f8      	str	r0, [r7, #12]
 8019698:	60b9      	str	r1, [r7, #8]
 801969a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 801969c:	68fb      	ldr	r3, [r7, #12]
 801969e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80196a0:	f001 fd98 	bl	801b1d4 <vPortEnterCritical>
 80196a4:	697b      	ldr	r3, [r7, #20]
 80196a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80196aa:	b25b      	sxtb	r3, r3
 80196ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80196b0:	d103      	bne.n	80196ba <vQueueWaitForMessageRestricted+0x2a>
 80196b2:	697b      	ldr	r3, [r7, #20]
 80196b4:	2200      	movs	r2, #0
 80196b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80196ba:	697b      	ldr	r3, [r7, #20]
 80196bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80196c0:	b25b      	sxtb	r3, r3
 80196c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80196c6:	d103      	bne.n	80196d0 <vQueueWaitForMessageRestricted+0x40>
 80196c8:	697b      	ldr	r3, [r7, #20]
 80196ca:	2200      	movs	r2, #0
 80196cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80196d0:	f001 fdb0 	bl	801b234 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80196d4:	697b      	ldr	r3, [r7, #20]
 80196d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d106      	bne.n	80196ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80196dc:	697b      	ldr	r3, [r7, #20]
 80196de:	3324      	adds	r3, #36	; 0x24
 80196e0:	687a      	ldr	r2, [r7, #4]
 80196e2:	68b9      	ldr	r1, [r7, #8]
 80196e4:	4618      	mov	r0, r3
 80196e6:	f000 fd93 	bl	801a210 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80196ea:	6978      	ldr	r0, [r7, #20]
 80196ec:	f7ff ff26 	bl	801953c <prvUnlockQueue>
	}
 80196f0:	bf00      	nop
 80196f2:	3718      	adds	r7, #24
 80196f4:	46bd      	mov	sp, r7
 80196f6:	bd80      	pop	{r7, pc}

080196f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80196f8:	b580      	push	{r7, lr}
 80196fa:	b08e      	sub	sp, #56	; 0x38
 80196fc:	af04      	add	r7, sp, #16
 80196fe:	60f8      	str	r0, [r7, #12]
 8019700:	60b9      	str	r1, [r7, #8]
 8019702:	607a      	str	r2, [r7, #4]
 8019704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8019706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019708:	2b00      	cmp	r3, #0
 801970a:	d10a      	bne.n	8019722 <xTaskCreateStatic+0x2a>
	__asm volatile
 801970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019710:	f383 8811 	msr	BASEPRI, r3
 8019714:	f3bf 8f6f 	isb	sy
 8019718:	f3bf 8f4f 	dsb	sy
 801971c:	623b      	str	r3, [r7, #32]
}
 801971e:	bf00      	nop
 8019720:	e7fe      	b.n	8019720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8019722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019724:	2b00      	cmp	r3, #0
 8019726:	d10a      	bne.n	801973e <xTaskCreateStatic+0x46>
	__asm volatile
 8019728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801972c:	f383 8811 	msr	BASEPRI, r3
 8019730:	f3bf 8f6f 	isb	sy
 8019734:	f3bf 8f4f 	dsb	sy
 8019738:	61fb      	str	r3, [r7, #28]
}
 801973a:	bf00      	nop
 801973c:	e7fe      	b.n	801973c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 801973e:	235c      	movs	r3, #92	; 0x5c
 8019740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8019742:	693b      	ldr	r3, [r7, #16]
 8019744:	2b5c      	cmp	r3, #92	; 0x5c
 8019746:	d00a      	beq.n	801975e <xTaskCreateStatic+0x66>
	__asm volatile
 8019748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801974c:	f383 8811 	msr	BASEPRI, r3
 8019750:	f3bf 8f6f 	isb	sy
 8019754:	f3bf 8f4f 	dsb	sy
 8019758:	61bb      	str	r3, [r7, #24]
}
 801975a:	bf00      	nop
 801975c:	e7fe      	b.n	801975c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 801975e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8019760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019762:	2b00      	cmp	r3, #0
 8019764:	d01e      	beq.n	80197a4 <xTaskCreateStatic+0xac>
 8019766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019768:	2b00      	cmp	r3, #0
 801976a:	d01b      	beq.n	80197a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 801976c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801976e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8019770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019774:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8019776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019778:	2202      	movs	r2, #2
 801977a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 801977e:	2300      	movs	r3, #0
 8019780:	9303      	str	r3, [sp, #12]
 8019782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019784:	9302      	str	r3, [sp, #8]
 8019786:	f107 0314 	add.w	r3, r7, #20
 801978a:	9301      	str	r3, [sp, #4]
 801978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801978e:	9300      	str	r3, [sp, #0]
 8019790:	683b      	ldr	r3, [r7, #0]
 8019792:	687a      	ldr	r2, [r7, #4]
 8019794:	68b9      	ldr	r1, [r7, #8]
 8019796:	68f8      	ldr	r0, [r7, #12]
 8019798:	f000 f850 	bl	801983c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801979c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801979e:	f000 f8dd 	bl	801995c <prvAddNewTaskToReadyList>
 80197a2:	e001      	b.n	80197a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80197a4:	2300      	movs	r3, #0
 80197a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80197a8:	697b      	ldr	r3, [r7, #20]
	}
 80197aa:	4618      	mov	r0, r3
 80197ac:	3728      	adds	r7, #40	; 0x28
 80197ae:	46bd      	mov	sp, r7
 80197b0:	bd80      	pop	{r7, pc}

080197b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80197b2:	b580      	push	{r7, lr}
 80197b4:	b08c      	sub	sp, #48	; 0x30
 80197b6:	af04      	add	r7, sp, #16
 80197b8:	60f8      	str	r0, [r7, #12]
 80197ba:	60b9      	str	r1, [r7, #8]
 80197bc:	603b      	str	r3, [r7, #0]
 80197be:	4613      	mov	r3, r2
 80197c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80197c2:	88fb      	ldrh	r3, [r7, #6]
 80197c4:	009b      	lsls	r3, r3, #2
 80197c6:	4618      	mov	r0, r3
 80197c8:	f001 fe26 	bl	801b418 <pvPortMalloc>
 80197cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80197ce:	697b      	ldr	r3, [r7, #20]
 80197d0:	2b00      	cmp	r3, #0
 80197d2:	d00e      	beq.n	80197f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80197d4:	205c      	movs	r0, #92	; 0x5c
 80197d6:	f001 fe1f 	bl	801b418 <pvPortMalloc>
 80197da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80197dc:	69fb      	ldr	r3, [r7, #28]
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d003      	beq.n	80197ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80197e2:	69fb      	ldr	r3, [r7, #28]
 80197e4:	697a      	ldr	r2, [r7, #20]
 80197e6:	631a      	str	r2, [r3, #48]	; 0x30
 80197e8:	e005      	b.n	80197f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80197ea:	6978      	ldr	r0, [r7, #20]
 80197ec:	f001 fee0 	bl	801b5b0 <vPortFree>
 80197f0:	e001      	b.n	80197f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80197f2:	2300      	movs	r3, #0
 80197f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80197f6:	69fb      	ldr	r3, [r7, #28]
 80197f8:	2b00      	cmp	r3, #0
 80197fa:	d017      	beq.n	801982c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80197fc:	69fb      	ldr	r3, [r7, #28]
 80197fe:	2200      	movs	r2, #0
 8019800:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8019804:	88fa      	ldrh	r2, [r7, #6]
 8019806:	2300      	movs	r3, #0
 8019808:	9303      	str	r3, [sp, #12]
 801980a:	69fb      	ldr	r3, [r7, #28]
 801980c:	9302      	str	r3, [sp, #8]
 801980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019810:	9301      	str	r3, [sp, #4]
 8019812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019814:	9300      	str	r3, [sp, #0]
 8019816:	683b      	ldr	r3, [r7, #0]
 8019818:	68b9      	ldr	r1, [r7, #8]
 801981a:	68f8      	ldr	r0, [r7, #12]
 801981c:	f000 f80e 	bl	801983c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8019820:	69f8      	ldr	r0, [r7, #28]
 8019822:	f000 f89b 	bl	801995c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8019826:	2301      	movs	r3, #1
 8019828:	61bb      	str	r3, [r7, #24]
 801982a:	e002      	b.n	8019832 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801982c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019830:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8019832:	69bb      	ldr	r3, [r7, #24]
	}
 8019834:	4618      	mov	r0, r3
 8019836:	3720      	adds	r7, #32
 8019838:	46bd      	mov	sp, r7
 801983a:	bd80      	pop	{r7, pc}

0801983c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801983c:	b580      	push	{r7, lr}
 801983e:	b088      	sub	sp, #32
 8019840:	af00      	add	r7, sp, #0
 8019842:	60f8      	str	r0, [r7, #12]
 8019844:	60b9      	str	r1, [r7, #8]
 8019846:	607a      	str	r2, [r7, #4]
 8019848:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 801984a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801984c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	009b      	lsls	r3, r3, #2
 8019852:	461a      	mov	r2, r3
 8019854:	21a5      	movs	r1, #165	; 0xa5
 8019856:	f002 f801 	bl	801b85c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801985a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801985c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801985e:	6879      	ldr	r1, [r7, #4]
 8019860:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8019864:	440b      	add	r3, r1
 8019866:	009b      	lsls	r3, r3, #2
 8019868:	4413      	add	r3, r2
 801986a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801986c:	69bb      	ldr	r3, [r7, #24]
 801986e:	f023 0307 	bic.w	r3, r3, #7
 8019872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8019874:	69bb      	ldr	r3, [r7, #24]
 8019876:	f003 0307 	and.w	r3, r3, #7
 801987a:	2b00      	cmp	r3, #0
 801987c:	d00a      	beq.n	8019894 <prvInitialiseNewTask+0x58>
	__asm volatile
 801987e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019882:	f383 8811 	msr	BASEPRI, r3
 8019886:	f3bf 8f6f 	isb	sy
 801988a:	f3bf 8f4f 	dsb	sy
 801988e:	617b      	str	r3, [r7, #20]
}
 8019890:	bf00      	nop
 8019892:	e7fe      	b.n	8019892 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8019894:	68bb      	ldr	r3, [r7, #8]
 8019896:	2b00      	cmp	r3, #0
 8019898:	d01f      	beq.n	80198da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801989a:	2300      	movs	r3, #0
 801989c:	61fb      	str	r3, [r7, #28]
 801989e:	e012      	b.n	80198c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80198a0:	68ba      	ldr	r2, [r7, #8]
 80198a2:	69fb      	ldr	r3, [r7, #28]
 80198a4:	4413      	add	r3, r2
 80198a6:	7819      	ldrb	r1, [r3, #0]
 80198a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80198aa:	69fb      	ldr	r3, [r7, #28]
 80198ac:	4413      	add	r3, r2
 80198ae:	3334      	adds	r3, #52	; 0x34
 80198b0:	460a      	mov	r2, r1
 80198b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80198b4:	68ba      	ldr	r2, [r7, #8]
 80198b6:	69fb      	ldr	r3, [r7, #28]
 80198b8:	4413      	add	r3, r2
 80198ba:	781b      	ldrb	r3, [r3, #0]
 80198bc:	2b00      	cmp	r3, #0
 80198be:	d006      	beq.n	80198ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80198c0:	69fb      	ldr	r3, [r7, #28]
 80198c2:	3301      	adds	r3, #1
 80198c4:	61fb      	str	r3, [r7, #28]
 80198c6:	69fb      	ldr	r3, [r7, #28]
 80198c8:	2b0f      	cmp	r3, #15
 80198ca:	d9e9      	bls.n	80198a0 <prvInitialiseNewTask+0x64>
 80198cc:	e000      	b.n	80198d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80198ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80198d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198d2:	2200      	movs	r2, #0
 80198d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80198d8:	e003      	b.n	80198e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80198da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198dc:	2200      	movs	r2, #0
 80198de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80198e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198e4:	2b37      	cmp	r3, #55	; 0x37
 80198e6:	d901      	bls.n	80198ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80198e8:	2337      	movs	r3, #55	; 0x37
 80198ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80198ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80198f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80198f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80198f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198fa:	2200      	movs	r2, #0
 80198fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80198fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019900:	3304      	adds	r3, #4
 8019902:	4618      	mov	r0, r3
 8019904:	f7ff f978 	bl	8018bf8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8019908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801990a:	3318      	adds	r3, #24
 801990c:	4618      	mov	r0, r3
 801990e:	f7ff f973 	bl	8018bf8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8019912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019916:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801991a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801991e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019920:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8019922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019926:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8019928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801992a:	2200      	movs	r2, #0
 801992c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801992e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019930:	2200      	movs	r2, #0
 8019932:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8019936:	683a      	ldr	r2, [r7, #0]
 8019938:	68f9      	ldr	r1, [r7, #12]
 801993a:	69b8      	ldr	r0, [r7, #24]
 801993c:	f001 fb1a 	bl	801af74 <pxPortInitialiseStack>
 8019940:	4602      	mov	r2, r0
 8019942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019944:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8019946:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019948:	2b00      	cmp	r3, #0
 801994a:	d002      	beq.n	8019952 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801994c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801994e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019950:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019952:	bf00      	nop
 8019954:	3720      	adds	r7, #32
 8019956:	46bd      	mov	sp, r7
 8019958:	bd80      	pop	{r7, pc}
	...

0801995c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801995c:	b580      	push	{r7, lr}
 801995e:	b082      	sub	sp, #8
 8019960:	af00      	add	r7, sp, #0
 8019962:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8019964:	f001 fc36 	bl	801b1d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8019968:	4b2d      	ldr	r3, [pc, #180]	; (8019a20 <prvAddNewTaskToReadyList+0xc4>)
 801996a:	681b      	ldr	r3, [r3, #0]
 801996c:	3301      	adds	r3, #1
 801996e:	4a2c      	ldr	r2, [pc, #176]	; (8019a20 <prvAddNewTaskToReadyList+0xc4>)
 8019970:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8019972:	4b2c      	ldr	r3, [pc, #176]	; (8019a24 <prvAddNewTaskToReadyList+0xc8>)
 8019974:	681b      	ldr	r3, [r3, #0]
 8019976:	2b00      	cmp	r3, #0
 8019978:	d109      	bne.n	801998e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801997a:	4a2a      	ldr	r2, [pc, #168]	; (8019a24 <prvAddNewTaskToReadyList+0xc8>)
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8019980:	4b27      	ldr	r3, [pc, #156]	; (8019a20 <prvAddNewTaskToReadyList+0xc4>)
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	2b01      	cmp	r3, #1
 8019986:	d110      	bne.n	80199aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8019988:	f000 fdd0 	bl	801a52c <prvInitialiseTaskLists>
 801998c:	e00d      	b.n	80199aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801998e:	4b26      	ldr	r3, [pc, #152]	; (8019a28 <prvAddNewTaskToReadyList+0xcc>)
 8019990:	681b      	ldr	r3, [r3, #0]
 8019992:	2b00      	cmp	r3, #0
 8019994:	d109      	bne.n	80199aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8019996:	4b23      	ldr	r3, [pc, #140]	; (8019a24 <prvAddNewTaskToReadyList+0xc8>)
 8019998:	681b      	ldr	r3, [r3, #0]
 801999a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199a0:	429a      	cmp	r2, r3
 80199a2:	d802      	bhi.n	80199aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80199a4:	4a1f      	ldr	r2, [pc, #124]	; (8019a24 <prvAddNewTaskToReadyList+0xc8>)
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80199aa:	4b20      	ldr	r3, [pc, #128]	; (8019a2c <prvAddNewTaskToReadyList+0xd0>)
 80199ac:	681b      	ldr	r3, [r3, #0]
 80199ae:	3301      	adds	r3, #1
 80199b0:	4a1e      	ldr	r2, [pc, #120]	; (8019a2c <prvAddNewTaskToReadyList+0xd0>)
 80199b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80199b4:	4b1d      	ldr	r3, [pc, #116]	; (8019a2c <prvAddNewTaskToReadyList+0xd0>)
 80199b6:	681a      	ldr	r2, [r3, #0]
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199c0:	4b1b      	ldr	r3, [pc, #108]	; (8019a30 <prvAddNewTaskToReadyList+0xd4>)
 80199c2:	681b      	ldr	r3, [r3, #0]
 80199c4:	429a      	cmp	r2, r3
 80199c6:	d903      	bls.n	80199d0 <prvAddNewTaskToReadyList+0x74>
 80199c8:	687b      	ldr	r3, [r7, #4]
 80199ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199cc:	4a18      	ldr	r2, [pc, #96]	; (8019a30 <prvAddNewTaskToReadyList+0xd4>)
 80199ce:	6013      	str	r3, [r2, #0]
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199d4:	4613      	mov	r3, r2
 80199d6:	009b      	lsls	r3, r3, #2
 80199d8:	4413      	add	r3, r2
 80199da:	009b      	lsls	r3, r3, #2
 80199dc:	4a15      	ldr	r2, [pc, #84]	; (8019a34 <prvAddNewTaskToReadyList+0xd8>)
 80199de:	441a      	add	r2, r3
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	3304      	adds	r3, #4
 80199e4:	4619      	mov	r1, r3
 80199e6:	4610      	mov	r0, r2
 80199e8:	f7ff f913 	bl	8018c12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80199ec:	f001 fc22 	bl	801b234 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80199f0:	4b0d      	ldr	r3, [pc, #52]	; (8019a28 <prvAddNewTaskToReadyList+0xcc>)
 80199f2:	681b      	ldr	r3, [r3, #0]
 80199f4:	2b00      	cmp	r3, #0
 80199f6:	d00e      	beq.n	8019a16 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80199f8:	4b0a      	ldr	r3, [pc, #40]	; (8019a24 <prvAddNewTaskToReadyList+0xc8>)
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019a02:	429a      	cmp	r2, r3
 8019a04:	d207      	bcs.n	8019a16 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8019a06:	4b0c      	ldr	r3, [pc, #48]	; (8019a38 <prvAddNewTaskToReadyList+0xdc>)
 8019a08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a0c:	601a      	str	r2, [r3, #0]
 8019a0e:	f3bf 8f4f 	dsb	sy
 8019a12:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8019a16:	bf00      	nop
 8019a18:	3708      	adds	r7, #8
 8019a1a:	46bd      	mov	sp, r7
 8019a1c:	bd80      	pop	{r7, pc}
 8019a1e:	bf00      	nop
 8019a20:	24002fe4 	.word	0x24002fe4
 8019a24:	24002b10 	.word	0x24002b10
 8019a28:	24002ff0 	.word	0x24002ff0
 8019a2c:	24003000 	.word	0x24003000
 8019a30:	24002fec 	.word	0x24002fec
 8019a34:	24002b14 	.word	0x24002b14
 8019a38:	e000ed04 	.word	0xe000ed04

08019a3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8019a3c:	b580      	push	{r7, lr}
 8019a3e:	b084      	sub	sp, #16
 8019a40:	af00      	add	r7, sp, #0
 8019a42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8019a44:	2300      	movs	r3, #0
 8019a46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8019a48:	687b      	ldr	r3, [r7, #4]
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d017      	beq.n	8019a7e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8019a4e:	4b13      	ldr	r3, [pc, #76]	; (8019a9c <vTaskDelay+0x60>)
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	2b00      	cmp	r3, #0
 8019a54:	d00a      	beq.n	8019a6c <vTaskDelay+0x30>
	__asm volatile
 8019a56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019a5a:	f383 8811 	msr	BASEPRI, r3
 8019a5e:	f3bf 8f6f 	isb	sy
 8019a62:	f3bf 8f4f 	dsb	sy
 8019a66:	60bb      	str	r3, [r7, #8]
}
 8019a68:	bf00      	nop
 8019a6a:	e7fe      	b.n	8019a6a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8019a6c:	f000 f986 	bl	8019d7c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8019a70:	2100      	movs	r1, #0
 8019a72:	6878      	ldr	r0, [r7, #4]
 8019a74:	f000 febc 	bl	801a7f0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8019a78:	f000 f98e 	bl	8019d98 <xTaskResumeAll>
 8019a7c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8019a7e:	68fb      	ldr	r3, [r7, #12]
 8019a80:	2b00      	cmp	r3, #0
 8019a82:	d107      	bne.n	8019a94 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8019a84:	4b06      	ldr	r3, [pc, #24]	; (8019aa0 <vTaskDelay+0x64>)
 8019a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019a8a:	601a      	str	r2, [r3, #0]
 8019a8c:	f3bf 8f4f 	dsb	sy
 8019a90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019a94:	bf00      	nop
 8019a96:	3710      	adds	r7, #16
 8019a98:	46bd      	mov	sp, r7
 8019a9a:	bd80      	pop	{r7, pc}
 8019a9c:	2400300c 	.word	0x2400300c
 8019aa0:	e000ed04 	.word	0xe000ed04

08019aa4 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8019aa4:	b580      	push	{r7, lr}
 8019aa6:	b084      	sub	sp, #16
 8019aa8:	af00      	add	r7, sp, #0
 8019aaa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8019aac:	f001 fb92 	bl	801b1d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8019ab0:	687b      	ldr	r3, [r7, #4]
 8019ab2:	2b00      	cmp	r3, #0
 8019ab4:	d102      	bne.n	8019abc <vTaskSuspend+0x18>
 8019ab6:	4b30      	ldr	r3, [pc, #192]	; (8019b78 <vTaskSuspend+0xd4>)
 8019ab8:	681b      	ldr	r3, [r3, #0]
 8019aba:	e000      	b.n	8019abe <vTaskSuspend+0x1a>
 8019abc:	687b      	ldr	r3, [r7, #4]
 8019abe:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8019ac0:	68fb      	ldr	r3, [r7, #12]
 8019ac2:	3304      	adds	r3, #4
 8019ac4:	4618      	mov	r0, r3
 8019ac6:	f7ff f901 	bl	8018ccc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d004      	beq.n	8019adc <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	3318      	adds	r3, #24
 8019ad6:	4618      	mov	r0, r3
 8019ad8:	f7ff f8f8 	bl	8018ccc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8019adc:	68fb      	ldr	r3, [r7, #12]
 8019ade:	3304      	adds	r3, #4
 8019ae0:	4619      	mov	r1, r3
 8019ae2:	4826      	ldr	r0, [pc, #152]	; (8019b7c <vTaskSuspend+0xd8>)
 8019ae4:	f7ff f895 	bl	8018c12 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8019ae8:	68fb      	ldr	r3, [r7, #12]
 8019aea:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8019aee:	b2db      	uxtb	r3, r3
 8019af0:	2b01      	cmp	r3, #1
 8019af2:	d103      	bne.n	8019afc <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8019af4:	68fb      	ldr	r3, [r7, #12]
 8019af6:	2200      	movs	r2, #0
 8019af8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8019afc:	f001 fb9a 	bl	801b234 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8019b00:	4b1f      	ldr	r3, [pc, #124]	; (8019b80 <vTaskSuspend+0xdc>)
 8019b02:	681b      	ldr	r3, [r3, #0]
 8019b04:	2b00      	cmp	r3, #0
 8019b06:	d005      	beq.n	8019b14 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8019b08:	f001 fb64 	bl	801b1d4 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8019b0c:	f000 fdac 	bl	801a668 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8019b10:	f001 fb90 	bl	801b234 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8019b14:	4b18      	ldr	r3, [pc, #96]	; (8019b78 <vTaskSuspend+0xd4>)
 8019b16:	681b      	ldr	r3, [r3, #0]
 8019b18:	68fa      	ldr	r2, [r7, #12]
 8019b1a:	429a      	cmp	r2, r3
 8019b1c:	d127      	bne.n	8019b6e <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8019b1e:	4b18      	ldr	r3, [pc, #96]	; (8019b80 <vTaskSuspend+0xdc>)
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	d017      	beq.n	8019b56 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8019b26:	4b17      	ldr	r3, [pc, #92]	; (8019b84 <vTaskSuspend+0xe0>)
 8019b28:	681b      	ldr	r3, [r3, #0]
 8019b2a:	2b00      	cmp	r3, #0
 8019b2c:	d00a      	beq.n	8019b44 <vTaskSuspend+0xa0>
	__asm volatile
 8019b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019b32:	f383 8811 	msr	BASEPRI, r3
 8019b36:	f3bf 8f6f 	isb	sy
 8019b3a:	f3bf 8f4f 	dsb	sy
 8019b3e:	60bb      	str	r3, [r7, #8]
}
 8019b40:	bf00      	nop
 8019b42:	e7fe      	b.n	8019b42 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8019b44:	4b10      	ldr	r3, [pc, #64]	; (8019b88 <vTaskSuspend+0xe4>)
 8019b46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019b4a:	601a      	str	r2, [r3, #0]
 8019b4c:	f3bf 8f4f 	dsb	sy
 8019b50:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019b54:	e00b      	b.n	8019b6e <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8019b56:	4b09      	ldr	r3, [pc, #36]	; (8019b7c <vTaskSuspend+0xd8>)
 8019b58:	681a      	ldr	r2, [r3, #0]
 8019b5a:	4b0c      	ldr	r3, [pc, #48]	; (8019b8c <vTaskSuspend+0xe8>)
 8019b5c:	681b      	ldr	r3, [r3, #0]
 8019b5e:	429a      	cmp	r2, r3
 8019b60:	d103      	bne.n	8019b6a <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8019b62:	4b05      	ldr	r3, [pc, #20]	; (8019b78 <vTaskSuspend+0xd4>)
 8019b64:	2200      	movs	r2, #0
 8019b66:	601a      	str	r2, [r3, #0]
	}
 8019b68:	e001      	b.n	8019b6e <vTaskSuspend+0xca>
					vTaskSwitchContext();
 8019b6a:	f000 fa85 	bl	801a078 <vTaskSwitchContext>
	}
 8019b6e:	bf00      	nop
 8019b70:	3710      	adds	r7, #16
 8019b72:	46bd      	mov	sp, r7
 8019b74:	bd80      	pop	{r7, pc}
 8019b76:	bf00      	nop
 8019b78:	24002b10 	.word	0x24002b10
 8019b7c:	24002fd0 	.word	0x24002fd0
 8019b80:	24002ff0 	.word	0x24002ff0
 8019b84:	2400300c 	.word	0x2400300c
 8019b88:	e000ed04 	.word	0xe000ed04
 8019b8c:	24002fe4 	.word	0x24002fe4

08019b90 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8019b90:	b480      	push	{r7}
 8019b92:	b087      	sub	sp, #28
 8019b94:	af00      	add	r7, sp, #0
 8019b96:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8019b98:	2300      	movs	r3, #0
 8019b9a:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8019ba0:	687b      	ldr	r3, [r7, #4]
 8019ba2:	2b00      	cmp	r3, #0
 8019ba4:	d10a      	bne.n	8019bbc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8019ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019baa:	f383 8811 	msr	BASEPRI, r3
 8019bae:	f3bf 8f6f 	isb	sy
 8019bb2:	f3bf 8f4f 	dsb	sy
 8019bb6:	60fb      	str	r3, [r7, #12]
}
 8019bb8:	bf00      	nop
 8019bba:	e7fe      	b.n	8019bba <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8019bbc:	693b      	ldr	r3, [r7, #16]
 8019bbe:	695b      	ldr	r3, [r3, #20]
 8019bc0:	4a0a      	ldr	r2, [pc, #40]	; (8019bec <prvTaskIsTaskSuspended+0x5c>)
 8019bc2:	4293      	cmp	r3, r2
 8019bc4:	d10a      	bne.n	8019bdc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8019bc6:	693b      	ldr	r3, [r7, #16]
 8019bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bca:	4a09      	ldr	r2, [pc, #36]	; (8019bf0 <prvTaskIsTaskSuspended+0x60>)
 8019bcc:	4293      	cmp	r3, r2
 8019bce:	d005      	beq.n	8019bdc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8019bd0:	693b      	ldr	r3, [r7, #16]
 8019bd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d101      	bne.n	8019bdc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8019bd8:	2301      	movs	r3, #1
 8019bda:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8019bdc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8019bde:	4618      	mov	r0, r3
 8019be0:	371c      	adds	r7, #28
 8019be2:	46bd      	mov	sp, r7
 8019be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019be8:	4770      	bx	lr
 8019bea:	bf00      	nop
 8019bec:	24002fd0 	.word	0x24002fd0
 8019bf0:	24002fa4 	.word	0x24002fa4

08019bf4 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8019bf4:	b580      	push	{r7, lr}
 8019bf6:	b084      	sub	sp, #16
 8019bf8:	af00      	add	r7, sp, #0
 8019bfa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8019bfc:	687b      	ldr	r3, [r7, #4]
 8019bfe:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	2b00      	cmp	r3, #0
 8019c04:	d10a      	bne.n	8019c1c <vTaskResume+0x28>
	__asm volatile
 8019c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019c0a:	f383 8811 	msr	BASEPRI, r3
 8019c0e:	f3bf 8f6f 	isb	sy
 8019c12:	f3bf 8f4f 	dsb	sy
 8019c16:	60bb      	str	r3, [r7, #8]
}
 8019c18:	bf00      	nop
 8019c1a:	e7fe      	b.n	8019c1a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8019c1c:	4b20      	ldr	r3, [pc, #128]	; (8019ca0 <vTaskResume+0xac>)
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	68fa      	ldr	r2, [r7, #12]
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d038      	beq.n	8019c98 <vTaskResume+0xa4>
 8019c26:	68fb      	ldr	r3, [r7, #12]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d035      	beq.n	8019c98 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8019c2c:	f001 fad2 	bl	801b1d4 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8019c30:	68f8      	ldr	r0, [r7, #12]
 8019c32:	f7ff ffad 	bl	8019b90 <prvTaskIsTaskSuspended>
 8019c36:	4603      	mov	r3, r0
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	d02b      	beq.n	8019c94 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8019c3c:	68fb      	ldr	r3, [r7, #12]
 8019c3e:	3304      	adds	r3, #4
 8019c40:	4618      	mov	r0, r3
 8019c42:	f7ff f843 	bl	8018ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c4a:	4b16      	ldr	r3, [pc, #88]	; (8019ca4 <vTaskResume+0xb0>)
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	429a      	cmp	r2, r3
 8019c50:	d903      	bls.n	8019c5a <vTaskResume+0x66>
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c56:	4a13      	ldr	r2, [pc, #76]	; (8019ca4 <vTaskResume+0xb0>)
 8019c58:	6013      	str	r3, [r2, #0]
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c5e:	4613      	mov	r3, r2
 8019c60:	009b      	lsls	r3, r3, #2
 8019c62:	4413      	add	r3, r2
 8019c64:	009b      	lsls	r3, r3, #2
 8019c66:	4a10      	ldr	r2, [pc, #64]	; (8019ca8 <vTaskResume+0xb4>)
 8019c68:	441a      	add	r2, r3
 8019c6a:	68fb      	ldr	r3, [r7, #12]
 8019c6c:	3304      	adds	r3, #4
 8019c6e:	4619      	mov	r1, r3
 8019c70:	4610      	mov	r0, r2
 8019c72:	f7fe ffce 	bl	8018c12 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019c76:	68fb      	ldr	r3, [r7, #12]
 8019c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019c7a:	4b09      	ldr	r3, [pc, #36]	; (8019ca0 <vTaskResume+0xac>)
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019c80:	429a      	cmp	r2, r3
 8019c82:	d307      	bcc.n	8019c94 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8019c84:	4b09      	ldr	r3, [pc, #36]	; (8019cac <vTaskResume+0xb8>)
 8019c86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019c8a:	601a      	str	r2, [r3, #0]
 8019c8c:	f3bf 8f4f 	dsb	sy
 8019c90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8019c94:	f001 face 	bl	801b234 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8019c98:	bf00      	nop
 8019c9a:	3710      	adds	r7, #16
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd80      	pop	{r7, pc}
 8019ca0:	24002b10 	.word	0x24002b10
 8019ca4:	24002fec 	.word	0x24002fec
 8019ca8:	24002b14 	.word	0x24002b14
 8019cac:	e000ed04 	.word	0xe000ed04

08019cb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8019cb0:	b580      	push	{r7, lr}
 8019cb2:	b08a      	sub	sp, #40	; 0x28
 8019cb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8019cb6:	2300      	movs	r3, #0
 8019cb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8019cba:	2300      	movs	r3, #0
 8019cbc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8019cbe:	463a      	mov	r2, r7
 8019cc0:	1d39      	adds	r1, r7, #4
 8019cc2:	f107 0308 	add.w	r3, r7, #8
 8019cc6:	4618      	mov	r0, r3
 8019cc8:	f7fe fcd6 	bl	8018678 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8019ccc:	6839      	ldr	r1, [r7, #0]
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	68ba      	ldr	r2, [r7, #8]
 8019cd2:	9202      	str	r2, [sp, #8]
 8019cd4:	9301      	str	r3, [sp, #4]
 8019cd6:	2300      	movs	r3, #0
 8019cd8:	9300      	str	r3, [sp, #0]
 8019cda:	2300      	movs	r3, #0
 8019cdc:	460a      	mov	r2, r1
 8019cde:	4921      	ldr	r1, [pc, #132]	; (8019d64 <vTaskStartScheduler+0xb4>)
 8019ce0:	4821      	ldr	r0, [pc, #132]	; (8019d68 <vTaskStartScheduler+0xb8>)
 8019ce2:	f7ff fd09 	bl	80196f8 <xTaskCreateStatic>
 8019ce6:	4603      	mov	r3, r0
 8019ce8:	4a20      	ldr	r2, [pc, #128]	; (8019d6c <vTaskStartScheduler+0xbc>)
 8019cea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8019cec:	4b1f      	ldr	r3, [pc, #124]	; (8019d6c <vTaskStartScheduler+0xbc>)
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	2b00      	cmp	r3, #0
 8019cf2:	d002      	beq.n	8019cfa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8019cf4:	2301      	movs	r3, #1
 8019cf6:	617b      	str	r3, [r7, #20]
 8019cf8:	e001      	b.n	8019cfe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8019cfe:	697b      	ldr	r3, [r7, #20]
 8019d00:	2b01      	cmp	r3, #1
 8019d02:	d102      	bne.n	8019d0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8019d04:	f000 fdc8 	bl	801a898 <xTimerCreateTimerTask>
 8019d08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8019d0a:	697b      	ldr	r3, [r7, #20]
 8019d0c:	2b01      	cmp	r3, #1
 8019d0e:	d116      	bne.n	8019d3e <vTaskStartScheduler+0x8e>
	__asm volatile
 8019d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d14:	f383 8811 	msr	BASEPRI, r3
 8019d18:	f3bf 8f6f 	isb	sy
 8019d1c:	f3bf 8f4f 	dsb	sy
 8019d20:	613b      	str	r3, [r7, #16]
}
 8019d22:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8019d24:	4b12      	ldr	r3, [pc, #72]	; (8019d70 <vTaskStartScheduler+0xc0>)
 8019d26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019d2a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8019d2c:	4b11      	ldr	r3, [pc, #68]	; (8019d74 <vTaskStartScheduler+0xc4>)
 8019d2e:	2201      	movs	r2, #1
 8019d30:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8019d32:	4b11      	ldr	r3, [pc, #68]	; (8019d78 <vTaskStartScheduler+0xc8>)
 8019d34:	2200      	movs	r2, #0
 8019d36:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8019d38:	f001 f9aa 	bl	801b090 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8019d3c:	e00e      	b.n	8019d5c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8019d3e:	697b      	ldr	r3, [r7, #20]
 8019d40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019d44:	d10a      	bne.n	8019d5c <vTaskStartScheduler+0xac>
	__asm volatile
 8019d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019d4a:	f383 8811 	msr	BASEPRI, r3
 8019d4e:	f3bf 8f6f 	isb	sy
 8019d52:	f3bf 8f4f 	dsb	sy
 8019d56:	60fb      	str	r3, [r7, #12]
}
 8019d58:	bf00      	nop
 8019d5a:	e7fe      	b.n	8019d5a <vTaskStartScheduler+0xaa>
}
 8019d5c:	bf00      	nop
 8019d5e:	3718      	adds	r7, #24
 8019d60:	46bd      	mov	sp, r7
 8019d62:	bd80      	pop	{r7, pc}
 8019d64:	0801c4dc 	.word	0x0801c4dc
 8019d68:	0801a4fd 	.word	0x0801a4fd
 8019d6c:	24003008 	.word	0x24003008
 8019d70:	24003004 	.word	0x24003004
 8019d74:	24002ff0 	.word	0x24002ff0
 8019d78:	24002fe8 	.word	0x24002fe8

08019d7c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8019d7c:	b480      	push	{r7}
 8019d7e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8019d80:	4b04      	ldr	r3, [pc, #16]	; (8019d94 <vTaskSuspendAll+0x18>)
 8019d82:	681b      	ldr	r3, [r3, #0]
 8019d84:	3301      	adds	r3, #1
 8019d86:	4a03      	ldr	r2, [pc, #12]	; (8019d94 <vTaskSuspendAll+0x18>)
 8019d88:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8019d8a:	bf00      	nop
 8019d8c:	46bd      	mov	sp, r7
 8019d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d92:	4770      	bx	lr
 8019d94:	2400300c 	.word	0x2400300c

08019d98 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8019d98:	b580      	push	{r7, lr}
 8019d9a:	b084      	sub	sp, #16
 8019d9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8019d9e:	2300      	movs	r3, #0
 8019da0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8019da2:	2300      	movs	r3, #0
 8019da4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8019da6:	4b42      	ldr	r3, [pc, #264]	; (8019eb0 <xTaskResumeAll+0x118>)
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d10a      	bne.n	8019dc4 <xTaskResumeAll+0x2c>
	__asm volatile
 8019dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019db2:	f383 8811 	msr	BASEPRI, r3
 8019db6:	f3bf 8f6f 	isb	sy
 8019dba:	f3bf 8f4f 	dsb	sy
 8019dbe:	603b      	str	r3, [r7, #0]
}
 8019dc0:	bf00      	nop
 8019dc2:	e7fe      	b.n	8019dc2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8019dc4:	f001 fa06 	bl	801b1d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8019dc8:	4b39      	ldr	r3, [pc, #228]	; (8019eb0 <xTaskResumeAll+0x118>)
 8019dca:	681b      	ldr	r3, [r3, #0]
 8019dcc:	3b01      	subs	r3, #1
 8019dce:	4a38      	ldr	r2, [pc, #224]	; (8019eb0 <xTaskResumeAll+0x118>)
 8019dd0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019dd2:	4b37      	ldr	r3, [pc, #220]	; (8019eb0 <xTaskResumeAll+0x118>)
 8019dd4:	681b      	ldr	r3, [r3, #0]
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d162      	bne.n	8019ea0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8019dda:	4b36      	ldr	r3, [pc, #216]	; (8019eb4 <xTaskResumeAll+0x11c>)
 8019ddc:	681b      	ldr	r3, [r3, #0]
 8019dde:	2b00      	cmp	r3, #0
 8019de0:	d05e      	beq.n	8019ea0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019de2:	e02f      	b.n	8019e44 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019de4:	4b34      	ldr	r3, [pc, #208]	; (8019eb8 <xTaskResumeAll+0x120>)
 8019de6:	68db      	ldr	r3, [r3, #12]
 8019de8:	68db      	ldr	r3, [r3, #12]
 8019dea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	3318      	adds	r3, #24
 8019df0:	4618      	mov	r0, r3
 8019df2:	f7fe ff6b 	bl	8018ccc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019df6:	68fb      	ldr	r3, [r7, #12]
 8019df8:	3304      	adds	r3, #4
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	f7fe ff66 	bl	8018ccc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8019e00:	68fb      	ldr	r3, [r7, #12]
 8019e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e04:	4b2d      	ldr	r3, [pc, #180]	; (8019ebc <xTaskResumeAll+0x124>)
 8019e06:	681b      	ldr	r3, [r3, #0]
 8019e08:	429a      	cmp	r2, r3
 8019e0a:	d903      	bls.n	8019e14 <xTaskResumeAll+0x7c>
 8019e0c:	68fb      	ldr	r3, [r7, #12]
 8019e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e10:	4a2a      	ldr	r2, [pc, #168]	; (8019ebc <xTaskResumeAll+0x124>)
 8019e12:	6013      	str	r3, [r2, #0]
 8019e14:	68fb      	ldr	r3, [r7, #12]
 8019e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e18:	4613      	mov	r3, r2
 8019e1a:	009b      	lsls	r3, r3, #2
 8019e1c:	4413      	add	r3, r2
 8019e1e:	009b      	lsls	r3, r3, #2
 8019e20:	4a27      	ldr	r2, [pc, #156]	; (8019ec0 <xTaskResumeAll+0x128>)
 8019e22:	441a      	add	r2, r3
 8019e24:	68fb      	ldr	r3, [r7, #12]
 8019e26:	3304      	adds	r3, #4
 8019e28:	4619      	mov	r1, r3
 8019e2a:	4610      	mov	r0, r2
 8019e2c:	f7fe fef1 	bl	8018c12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019e34:	4b23      	ldr	r3, [pc, #140]	; (8019ec4 <xTaskResumeAll+0x12c>)
 8019e36:	681b      	ldr	r3, [r3, #0]
 8019e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e3a:	429a      	cmp	r2, r3
 8019e3c:	d302      	bcc.n	8019e44 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8019e3e:	4b22      	ldr	r3, [pc, #136]	; (8019ec8 <xTaskResumeAll+0x130>)
 8019e40:	2201      	movs	r2, #1
 8019e42:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8019e44:	4b1c      	ldr	r3, [pc, #112]	; (8019eb8 <xTaskResumeAll+0x120>)
 8019e46:	681b      	ldr	r3, [r3, #0]
 8019e48:	2b00      	cmp	r3, #0
 8019e4a:	d1cb      	bne.n	8019de4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	d001      	beq.n	8019e56 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8019e52:	f000 fc09 	bl	801a668 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8019e56:	4b1d      	ldr	r3, [pc, #116]	; (8019ecc <xTaskResumeAll+0x134>)
 8019e58:	681b      	ldr	r3, [r3, #0]
 8019e5a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	2b00      	cmp	r3, #0
 8019e60:	d010      	beq.n	8019e84 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8019e62:	f000 f847 	bl	8019ef4 <xTaskIncrementTick>
 8019e66:	4603      	mov	r3, r0
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d002      	beq.n	8019e72 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8019e6c:	4b16      	ldr	r3, [pc, #88]	; (8019ec8 <xTaskResumeAll+0x130>)
 8019e6e:	2201      	movs	r2, #1
 8019e70:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	3b01      	subs	r3, #1
 8019e76:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d1f1      	bne.n	8019e62 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8019e7e:	4b13      	ldr	r3, [pc, #76]	; (8019ecc <xTaskResumeAll+0x134>)
 8019e80:	2200      	movs	r2, #0
 8019e82:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8019e84:	4b10      	ldr	r3, [pc, #64]	; (8019ec8 <xTaskResumeAll+0x130>)
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	2b00      	cmp	r3, #0
 8019e8a:	d009      	beq.n	8019ea0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8019e8c:	2301      	movs	r3, #1
 8019e8e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8019e90:	4b0f      	ldr	r3, [pc, #60]	; (8019ed0 <xTaskResumeAll+0x138>)
 8019e92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8019e96:	601a      	str	r2, [r3, #0]
 8019e98:	f3bf 8f4f 	dsb	sy
 8019e9c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8019ea0:	f001 f9c8 	bl	801b234 <vPortExitCritical>

	return xAlreadyYielded;
 8019ea4:	68bb      	ldr	r3, [r7, #8]
}
 8019ea6:	4618      	mov	r0, r3
 8019ea8:	3710      	adds	r7, #16
 8019eaa:	46bd      	mov	sp, r7
 8019eac:	bd80      	pop	{r7, pc}
 8019eae:	bf00      	nop
 8019eb0:	2400300c 	.word	0x2400300c
 8019eb4:	24002fe4 	.word	0x24002fe4
 8019eb8:	24002fa4 	.word	0x24002fa4
 8019ebc:	24002fec 	.word	0x24002fec
 8019ec0:	24002b14 	.word	0x24002b14
 8019ec4:	24002b10 	.word	0x24002b10
 8019ec8:	24002ff8 	.word	0x24002ff8
 8019ecc:	24002ff4 	.word	0x24002ff4
 8019ed0:	e000ed04 	.word	0xe000ed04

08019ed4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8019ed4:	b480      	push	{r7}
 8019ed6:	b083      	sub	sp, #12
 8019ed8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8019eda:	4b05      	ldr	r3, [pc, #20]	; (8019ef0 <xTaskGetTickCount+0x1c>)
 8019edc:	681b      	ldr	r3, [r3, #0]
 8019ede:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8019ee0:	687b      	ldr	r3, [r7, #4]
}
 8019ee2:	4618      	mov	r0, r3
 8019ee4:	370c      	adds	r7, #12
 8019ee6:	46bd      	mov	sp, r7
 8019ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eec:	4770      	bx	lr
 8019eee:	bf00      	nop
 8019ef0:	24002fe8 	.word	0x24002fe8

08019ef4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b086      	sub	sp, #24
 8019ef8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8019efa:	2300      	movs	r3, #0
 8019efc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8019efe:	4b53      	ldr	r3, [pc, #332]	; (801a04c <xTaskIncrementTick+0x158>)
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	2b00      	cmp	r3, #0
 8019f04:	f040 8095 	bne.w	801a032 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8019f08:	4b51      	ldr	r3, [pc, #324]	; (801a050 <xTaskIncrementTick+0x15c>)
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	3301      	adds	r3, #1
 8019f0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8019f10:	4a4f      	ldr	r2, [pc, #316]	; (801a050 <xTaskIncrementTick+0x15c>)
 8019f12:	693b      	ldr	r3, [r7, #16]
 8019f14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8019f16:	693b      	ldr	r3, [r7, #16]
 8019f18:	2b00      	cmp	r3, #0
 8019f1a:	d120      	bne.n	8019f5e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8019f1c:	4b4d      	ldr	r3, [pc, #308]	; (801a054 <xTaskIncrementTick+0x160>)
 8019f1e:	681b      	ldr	r3, [r3, #0]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d00a      	beq.n	8019f3c <xTaskIncrementTick+0x48>
	__asm volatile
 8019f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8019f2a:	f383 8811 	msr	BASEPRI, r3
 8019f2e:	f3bf 8f6f 	isb	sy
 8019f32:	f3bf 8f4f 	dsb	sy
 8019f36:	603b      	str	r3, [r7, #0]
}
 8019f38:	bf00      	nop
 8019f3a:	e7fe      	b.n	8019f3a <xTaskIncrementTick+0x46>
 8019f3c:	4b45      	ldr	r3, [pc, #276]	; (801a054 <xTaskIncrementTick+0x160>)
 8019f3e:	681b      	ldr	r3, [r3, #0]
 8019f40:	60fb      	str	r3, [r7, #12]
 8019f42:	4b45      	ldr	r3, [pc, #276]	; (801a058 <xTaskIncrementTick+0x164>)
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	4a43      	ldr	r2, [pc, #268]	; (801a054 <xTaskIncrementTick+0x160>)
 8019f48:	6013      	str	r3, [r2, #0]
 8019f4a:	4a43      	ldr	r2, [pc, #268]	; (801a058 <xTaskIncrementTick+0x164>)
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	6013      	str	r3, [r2, #0]
 8019f50:	4b42      	ldr	r3, [pc, #264]	; (801a05c <xTaskIncrementTick+0x168>)
 8019f52:	681b      	ldr	r3, [r3, #0]
 8019f54:	3301      	adds	r3, #1
 8019f56:	4a41      	ldr	r2, [pc, #260]	; (801a05c <xTaskIncrementTick+0x168>)
 8019f58:	6013      	str	r3, [r2, #0]
 8019f5a:	f000 fb85 	bl	801a668 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8019f5e:	4b40      	ldr	r3, [pc, #256]	; (801a060 <xTaskIncrementTick+0x16c>)
 8019f60:	681b      	ldr	r3, [r3, #0]
 8019f62:	693a      	ldr	r2, [r7, #16]
 8019f64:	429a      	cmp	r2, r3
 8019f66:	d349      	bcc.n	8019ffc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019f68:	4b3a      	ldr	r3, [pc, #232]	; (801a054 <xTaskIncrementTick+0x160>)
 8019f6a:	681b      	ldr	r3, [r3, #0]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	2b00      	cmp	r3, #0
 8019f70:	d104      	bne.n	8019f7c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8019f72:	4b3b      	ldr	r3, [pc, #236]	; (801a060 <xTaskIncrementTick+0x16c>)
 8019f74:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f78:	601a      	str	r2, [r3, #0]
					break;
 8019f7a:	e03f      	b.n	8019ffc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8019f7c:	4b35      	ldr	r3, [pc, #212]	; (801a054 <xTaskIncrementTick+0x160>)
 8019f7e:	681b      	ldr	r3, [r3, #0]
 8019f80:	68db      	ldr	r3, [r3, #12]
 8019f82:	68db      	ldr	r3, [r3, #12]
 8019f84:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8019f86:	68bb      	ldr	r3, [r7, #8]
 8019f88:	685b      	ldr	r3, [r3, #4]
 8019f8a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8019f8c:	693a      	ldr	r2, [r7, #16]
 8019f8e:	687b      	ldr	r3, [r7, #4]
 8019f90:	429a      	cmp	r2, r3
 8019f92:	d203      	bcs.n	8019f9c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8019f94:	4a32      	ldr	r2, [pc, #200]	; (801a060 <xTaskIncrementTick+0x16c>)
 8019f96:	687b      	ldr	r3, [r7, #4]
 8019f98:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8019f9a:	e02f      	b.n	8019ffc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8019f9c:	68bb      	ldr	r3, [r7, #8]
 8019f9e:	3304      	adds	r3, #4
 8019fa0:	4618      	mov	r0, r3
 8019fa2:	f7fe fe93 	bl	8018ccc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8019fa6:	68bb      	ldr	r3, [r7, #8]
 8019fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019faa:	2b00      	cmp	r3, #0
 8019fac:	d004      	beq.n	8019fb8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8019fae:	68bb      	ldr	r3, [r7, #8]
 8019fb0:	3318      	adds	r3, #24
 8019fb2:	4618      	mov	r0, r3
 8019fb4:	f7fe fe8a 	bl	8018ccc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8019fb8:	68bb      	ldr	r3, [r7, #8]
 8019fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fbc:	4b29      	ldr	r3, [pc, #164]	; (801a064 <xTaskIncrementTick+0x170>)
 8019fbe:	681b      	ldr	r3, [r3, #0]
 8019fc0:	429a      	cmp	r2, r3
 8019fc2:	d903      	bls.n	8019fcc <xTaskIncrementTick+0xd8>
 8019fc4:	68bb      	ldr	r3, [r7, #8]
 8019fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019fc8:	4a26      	ldr	r2, [pc, #152]	; (801a064 <xTaskIncrementTick+0x170>)
 8019fca:	6013      	str	r3, [r2, #0]
 8019fcc:	68bb      	ldr	r3, [r7, #8]
 8019fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fd0:	4613      	mov	r3, r2
 8019fd2:	009b      	lsls	r3, r3, #2
 8019fd4:	4413      	add	r3, r2
 8019fd6:	009b      	lsls	r3, r3, #2
 8019fd8:	4a23      	ldr	r2, [pc, #140]	; (801a068 <xTaskIncrementTick+0x174>)
 8019fda:	441a      	add	r2, r3
 8019fdc:	68bb      	ldr	r3, [r7, #8]
 8019fde:	3304      	adds	r3, #4
 8019fe0:	4619      	mov	r1, r3
 8019fe2:	4610      	mov	r0, r2
 8019fe4:	f7fe fe15 	bl	8018c12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8019fe8:	68bb      	ldr	r3, [r7, #8]
 8019fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019fec:	4b1f      	ldr	r3, [pc, #124]	; (801a06c <xTaskIncrementTick+0x178>)
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ff2:	429a      	cmp	r2, r3
 8019ff4:	d3b8      	bcc.n	8019f68 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8019ff6:	2301      	movs	r3, #1
 8019ff8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8019ffa:	e7b5      	b.n	8019f68 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8019ffc:	4b1b      	ldr	r3, [pc, #108]	; (801a06c <xTaskIncrementTick+0x178>)
 8019ffe:	681b      	ldr	r3, [r3, #0]
 801a000:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a002:	4919      	ldr	r1, [pc, #100]	; (801a068 <xTaskIncrementTick+0x174>)
 801a004:	4613      	mov	r3, r2
 801a006:	009b      	lsls	r3, r3, #2
 801a008:	4413      	add	r3, r2
 801a00a:	009b      	lsls	r3, r3, #2
 801a00c:	440b      	add	r3, r1
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	2b01      	cmp	r3, #1
 801a012:	d901      	bls.n	801a018 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801a014:	2301      	movs	r3, #1
 801a016:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 801a018:	4b15      	ldr	r3, [pc, #84]	; (801a070 <xTaskIncrementTick+0x17c>)
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	d101      	bne.n	801a024 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 801a020:	f7e8 fb1c 	bl	800265c <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801a024:	4b13      	ldr	r3, [pc, #76]	; (801a074 <xTaskIncrementTick+0x180>)
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	2b00      	cmp	r3, #0
 801a02a:	d009      	beq.n	801a040 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 801a02c:	2301      	movs	r3, #1
 801a02e:	617b      	str	r3, [r7, #20]
 801a030:	e006      	b.n	801a040 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801a032:	4b0f      	ldr	r3, [pc, #60]	; (801a070 <xTaskIncrementTick+0x17c>)
 801a034:	681b      	ldr	r3, [r3, #0]
 801a036:	3301      	adds	r3, #1
 801a038:	4a0d      	ldr	r2, [pc, #52]	; (801a070 <xTaskIncrementTick+0x17c>)
 801a03a:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 801a03c:	f7e8 fb0e 	bl	800265c <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 801a040:	697b      	ldr	r3, [r7, #20]
}
 801a042:	4618      	mov	r0, r3
 801a044:	3718      	adds	r7, #24
 801a046:	46bd      	mov	sp, r7
 801a048:	bd80      	pop	{r7, pc}
 801a04a:	bf00      	nop
 801a04c:	2400300c 	.word	0x2400300c
 801a050:	24002fe8 	.word	0x24002fe8
 801a054:	24002f9c 	.word	0x24002f9c
 801a058:	24002fa0 	.word	0x24002fa0
 801a05c:	24002ffc 	.word	0x24002ffc
 801a060:	24003004 	.word	0x24003004
 801a064:	24002fec 	.word	0x24002fec
 801a068:	24002b14 	.word	0x24002b14
 801a06c:	24002b10 	.word	0x24002b10
 801a070:	24002ff4 	.word	0x24002ff4
 801a074:	24002ff8 	.word	0x24002ff8

0801a078 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801a078:	b580      	push	{r7, lr}
 801a07a:	b084      	sub	sp, #16
 801a07c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801a07e:	4b2f      	ldr	r3, [pc, #188]	; (801a13c <vTaskSwitchContext+0xc4>)
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	2b00      	cmp	r3, #0
 801a084:	d003      	beq.n	801a08e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801a086:	4b2e      	ldr	r3, [pc, #184]	; (801a140 <vTaskSwitchContext+0xc8>)
 801a088:	2201      	movs	r2, #1
 801a08a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801a08c:	e052      	b.n	801a134 <vTaskSwitchContext+0xbc>
		xYieldPending = pdFALSE;
 801a08e:	4b2c      	ldr	r3, [pc, #176]	; (801a140 <vTaskSwitchContext+0xc8>)
 801a090:	2200      	movs	r2, #0
 801a092:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801a094:	4b2b      	ldr	r3, [pc, #172]	; (801a144 <vTaskSwitchContext+0xcc>)
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	681a      	ldr	r2, [r3, #0]
 801a09a:	4b2a      	ldr	r3, [pc, #168]	; (801a144 <vTaskSwitchContext+0xcc>)
 801a09c:	681b      	ldr	r3, [r3, #0]
 801a09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a0a0:	429a      	cmp	r2, r3
 801a0a2:	d808      	bhi.n	801a0b6 <vTaskSwitchContext+0x3e>
 801a0a4:	4b27      	ldr	r3, [pc, #156]	; (801a144 <vTaskSwitchContext+0xcc>)
 801a0a6:	681a      	ldr	r2, [r3, #0]
 801a0a8:	4b26      	ldr	r3, [pc, #152]	; (801a144 <vTaskSwitchContext+0xcc>)
 801a0aa:	681b      	ldr	r3, [r3, #0]
 801a0ac:	3334      	adds	r3, #52	; 0x34
 801a0ae:	4619      	mov	r1, r3
 801a0b0:	4610      	mov	r0, r2
 801a0b2:	f7e8 fae1 	bl	8002678 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a0b6:	4b24      	ldr	r3, [pc, #144]	; (801a148 <vTaskSwitchContext+0xd0>)
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	60fb      	str	r3, [r7, #12]
 801a0bc:	e010      	b.n	801a0e0 <vTaskSwitchContext+0x68>
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	2b00      	cmp	r3, #0
 801a0c2:	d10a      	bne.n	801a0da <vTaskSwitchContext+0x62>
	__asm volatile
 801a0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a0c8:	f383 8811 	msr	BASEPRI, r3
 801a0cc:	f3bf 8f6f 	isb	sy
 801a0d0:	f3bf 8f4f 	dsb	sy
 801a0d4:	607b      	str	r3, [r7, #4]
}
 801a0d6:	bf00      	nop
 801a0d8:	e7fe      	b.n	801a0d8 <vTaskSwitchContext+0x60>
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	3b01      	subs	r3, #1
 801a0de:	60fb      	str	r3, [r7, #12]
 801a0e0:	491a      	ldr	r1, [pc, #104]	; (801a14c <vTaskSwitchContext+0xd4>)
 801a0e2:	68fa      	ldr	r2, [r7, #12]
 801a0e4:	4613      	mov	r3, r2
 801a0e6:	009b      	lsls	r3, r3, #2
 801a0e8:	4413      	add	r3, r2
 801a0ea:	009b      	lsls	r3, r3, #2
 801a0ec:	440b      	add	r3, r1
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	2b00      	cmp	r3, #0
 801a0f2:	d0e4      	beq.n	801a0be <vTaskSwitchContext+0x46>
 801a0f4:	68fa      	ldr	r2, [r7, #12]
 801a0f6:	4613      	mov	r3, r2
 801a0f8:	009b      	lsls	r3, r3, #2
 801a0fa:	4413      	add	r3, r2
 801a0fc:	009b      	lsls	r3, r3, #2
 801a0fe:	4a13      	ldr	r2, [pc, #76]	; (801a14c <vTaskSwitchContext+0xd4>)
 801a100:	4413      	add	r3, r2
 801a102:	60bb      	str	r3, [r7, #8]
 801a104:	68bb      	ldr	r3, [r7, #8]
 801a106:	685b      	ldr	r3, [r3, #4]
 801a108:	685a      	ldr	r2, [r3, #4]
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	605a      	str	r2, [r3, #4]
 801a10e:	68bb      	ldr	r3, [r7, #8]
 801a110:	685a      	ldr	r2, [r3, #4]
 801a112:	68bb      	ldr	r3, [r7, #8]
 801a114:	3308      	adds	r3, #8
 801a116:	429a      	cmp	r2, r3
 801a118:	d104      	bne.n	801a124 <vTaskSwitchContext+0xac>
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	685b      	ldr	r3, [r3, #4]
 801a11e:	685a      	ldr	r2, [r3, #4]
 801a120:	68bb      	ldr	r3, [r7, #8]
 801a122:	605a      	str	r2, [r3, #4]
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	685b      	ldr	r3, [r3, #4]
 801a128:	68db      	ldr	r3, [r3, #12]
 801a12a:	4a06      	ldr	r2, [pc, #24]	; (801a144 <vTaskSwitchContext+0xcc>)
 801a12c:	6013      	str	r3, [r2, #0]
 801a12e:	4a06      	ldr	r2, [pc, #24]	; (801a148 <vTaskSwitchContext+0xd0>)
 801a130:	68fb      	ldr	r3, [r7, #12]
 801a132:	6013      	str	r3, [r2, #0]
}
 801a134:	bf00      	nop
 801a136:	3710      	adds	r7, #16
 801a138:	46bd      	mov	sp, r7
 801a13a:	bd80      	pop	{r7, pc}
 801a13c:	2400300c 	.word	0x2400300c
 801a140:	24002ff8 	.word	0x24002ff8
 801a144:	24002b10 	.word	0x24002b10
 801a148:	24002fec 	.word	0x24002fec
 801a14c:	24002b14 	.word	0x24002b14

0801a150 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b084      	sub	sp, #16
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
 801a158:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	2b00      	cmp	r3, #0
 801a15e:	d10a      	bne.n	801a176 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 801a160:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a164:	f383 8811 	msr	BASEPRI, r3
 801a168:	f3bf 8f6f 	isb	sy
 801a16c:	f3bf 8f4f 	dsb	sy
 801a170:	60fb      	str	r3, [r7, #12]
}
 801a172:	bf00      	nop
 801a174:	e7fe      	b.n	801a174 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a176:	4b07      	ldr	r3, [pc, #28]	; (801a194 <vTaskPlaceOnEventList+0x44>)
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	3318      	adds	r3, #24
 801a17c:	4619      	mov	r1, r3
 801a17e:	6878      	ldr	r0, [r7, #4]
 801a180:	f7fe fd6b 	bl	8018c5a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a184:	2101      	movs	r1, #1
 801a186:	6838      	ldr	r0, [r7, #0]
 801a188:	f000 fb32 	bl	801a7f0 <prvAddCurrentTaskToDelayedList>
}
 801a18c:	bf00      	nop
 801a18e:	3710      	adds	r7, #16
 801a190:	46bd      	mov	sp, r7
 801a192:	bd80      	pop	{r7, pc}
 801a194:	24002b10 	.word	0x24002b10

0801a198 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 801a198:	b580      	push	{r7, lr}
 801a19a:	b086      	sub	sp, #24
 801a19c:	af00      	add	r7, sp, #0
 801a19e:	60f8      	str	r0, [r7, #12]
 801a1a0:	60b9      	str	r1, [r7, #8]
 801a1a2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 801a1a4:	68fb      	ldr	r3, [r7, #12]
 801a1a6:	2b00      	cmp	r3, #0
 801a1a8:	d10a      	bne.n	801a1c0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 801a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1ae:	f383 8811 	msr	BASEPRI, r3
 801a1b2:	f3bf 8f6f 	isb	sy
 801a1b6:	f3bf 8f4f 	dsb	sy
 801a1ba:	617b      	str	r3, [r7, #20]
}
 801a1bc:	bf00      	nop
 801a1be:	e7fe      	b.n	801a1be <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 801a1c0:	4b11      	ldr	r3, [pc, #68]	; (801a208 <vTaskPlaceOnUnorderedEventList+0x70>)
 801a1c2:	681b      	ldr	r3, [r3, #0]
 801a1c4:	2b00      	cmp	r3, #0
 801a1c6:	d10a      	bne.n	801a1de <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 801a1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a1cc:	f383 8811 	msr	BASEPRI, r3
 801a1d0:	f3bf 8f6f 	isb	sy
 801a1d4:	f3bf 8f4f 	dsb	sy
 801a1d8:	613b      	str	r3, [r7, #16]
}
 801a1da:	bf00      	nop
 801a1dc:	e7fe      	b.n	801a1dc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801a1de:	4b0b      	ldr	r3, [pc, #44]	; (801a20c <vTaskPlaceOnUnorderedEventList+0x74>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	68ba      	ldr	r2, [r7, #8]
 801a1e4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 801a1e8:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a1ea:	4b08      	ldr	r3, [pc, #32]	; (801a20c <vTaskPlaceOnUnorderedEventList+0x74>)
 801a1ec:	681b      	ldr	r3, [r3, #0]
 801a1ee:	3318      	adds	r3, #24
 801a1f0:	4619      	mov	r1, r3
 801a1f2:	68f8      	ldr	r0, [r7, #12]
 801a1f4:	f7fe fd0d 	bl	8018c12 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801a1f8:	2101      	movs	r1, #1
 801a1fa:	6878      	ldr	r0, [r7, #4]
 801a1fc:	f000 faf8 	bl	801a7f0 <prvAddCurrentTaskToDelayedList>
}
 801a200:	bf00      	nop
 801a202:	3718      	adds	r7, #24
 801a204:	46bd      	mov	sp, r7
 801a206:	bd80      	pop	{r7, pc}
 801a208:	2400300c 	.word	0x2400300c
 801a20c:	24002b10 	.word	0x24002b10

0801a210 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 801a210:	b580      	push	{r7, lr}
 801a212:	b086      	sub	sp, #24
 801a214:	af00      	add	r7, sp, #0
 801a216:	60f8      	str	r0, [r7, #12]
 801a218:	60b9      	str	r1, [r7, #8]
 801a21a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d10a      	bne.n	801a238 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 801a222:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a226:	f383 8811 	msr	BASEPRI, r3
 801a22a:	f3bf 8f6f 	isb	sy
 801a22e:	f3bf 8f4f 	dsb	sy
 801a232:	617b      	str	r3, [r7, #20]
}
 801a234:	bf00      	nop
 801a236:	e7fe      	b.n	801a236 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801a238:	4b0a      	ldr	r3, [pc, #40]	; (801a264 <vTaskPlaceOnEventListRestricted+0x54>)
 801a23a:	681b      	ldr	r3, [r3, #0]
 801a23c:	3318      	adds	r3, #24
 801a23e:	4619      	mov	r1, r3
 801a240:	68f8      	ldr	r0, [r7, #12]
 801a242:	f7fe fce6 	bl	8018c12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	2b00      	cmp	r3, #0
 801a24a:	d002      	beq.n	801a252 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 801a24c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a250:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 801a252:	6879      	ldr	r1, [r7, #4]
 801a254:	68b8      	ldr	r0, [r7, #8]
 801a256:	f000 facb 	bl	801a7f0 <prvAddCurrentTaskToDelayedList>
	}
 801a25a:	bf00      	nop
 801a25c:	3718      	adds	r7, #24
 801a25e:	46bd      	mov	sp, r7
 801a260:	bd80      	pop	{r7, pc}
 801a262:	bf00      	nop
 801a264:	24002b10 	.word	0x24002b10

0801a268 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801a268:	b580      	push	{r7, lr}
 801a26a:	b086      	sub	sp, #24
 801a26c:	af00      	add	r7, sp, #0
 801a26e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	68db      	ldr	r3, [r3, #12]
 801a274:	68db      	ldr	r3, [r3, #12]
 801a276:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801a278:	693b      	ldr	r3, [r7, #16]
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d10a      	bne.n	801a294 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 801a27e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a282:	f383 8811 	msr	BASEPRI, r3
 801a286:	f3bf 8f6f 	isb	sy
 801a28a:	f3bf 8f4f 	dsb	sy
 801a28e:	60fb      	str	r3, [r7, #12]
}
 801a290:	bf00      	nop
 801a292:	e7fe      	b.n	801a292 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801a294:	693b      	ldr	r3, [r7, #16]
 801a296:	3318      	adds	r3, #24
 801a298:	4618      	mov	r0, r3
 801a29a:	f7fe fd17 	bl	8018ccc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a29e:	4b1e      	ldr	r3, [pc, #120]	; (801a318 <xTaskRemoveFromEventList+0xb0>)
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d11d      	bne.n	801a2e2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a2a6:	693b      	ldr	r3, [r7, #16]
 801a2a8:	3304      	adds	r3, #4
 801a2aa:	4618      	mov	r0, r3
 801a2ac:	f7fe fd0e 	bl	8018ccc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 801a2b0:	693b      	ldr	r3, [r7, #16]
 801a2b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2b4:	4b19      	ldr	r3, [pc, #100]	; (801a31c <xTaskRemoveFromEventList+0xb4>)
 801a2b6:	681b      	ldr	r3, [r3, #0]
 801a2b8:	429a      	cmp	r2, r3
 801a2ba:	d903      	bls.n	801a2c4 <xTaskRemoveFromEventList+0x5c>
 801a2bc:	693b      	ldr	r3, [r7, #16]
 801a2be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2c0:	4a16      	ldr	r2, [pc, #88]	; (801a31c <xTaskRemoveFromEventList+0xb4>)
 801a2c2:	6013      	str	r3, [r2, #0]
 801a2c4:	693b      	ldr	r3, [r7, #16]
 801a2c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2c8:	4613      	mov	r3, r2
 801a2ca:	009b      	lsls	r3, r3, #2
 801a2cc:	4413      	add	r3, r2
 801a2ce:	009b      	lsls	r3, r3, #2
 801a2d0:	4a13      	ldr	r2, [pc, #76]	; (801a320 <xTaskRemoveFromEventList+0xb8>)
 801a2d2:	441a      	add	r2, r3
 801a2d4:	693b      	ldr	r3, [r7, #16]
 801a2d6:	3304      	adds	r3, #4
 801a2d8:	4619      	mov	r1, r3
 801a2da:	4610      	mov	r0, r2
 801a2dc:	f7fe fc99 	bl	8018c12 <vListInsertEnd>
 801a2e0:	e005      	b.n	801a2ee <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801a2e2:	693b      	ldr	r3, [r7, #16]
 801a2e4:	3318      	adds	r3, #24
 801a2e6:	4619      	mov	r1, r3
 801a2e8:	480e      	ldr	r0, [pc, #56]	; (801a324 <xTaskRemoveFromEventList+0xbc>)
 801a2ea:	f7fe fc92 	bl	8018c12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a2ee:	693b      	ldr	r3, [r7, #16]
 801a2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a2f2:	4b0d      	ldr	r3, [pc, #52]	; (801a328 <xTaskRemoveFromEventList+0xc0>)
 801a2f4:	681b      	ldr	r3, [r3, #0]
 801a2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a2f8:	429a      	cmp	r2, r3
 801a2fa:	d905      	bls.n	801a308 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 801a2fc:	2301      	movs	r3, #1
 801a2fe:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801a300:	4b0a      	ldr	r3, [pc, #40]	; (801a32c <xTaskRemoveFromEventList+0xc4>)
 801a302:	2201      	movs	r2, #1
 801a304:	601a      	str	r2, [r3, #0]
 801a306:	e001      	b.n	801a30c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 801a308:	2300      	movs	r3, #0
 801a30a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 801a30c:	697b      	ldr	r3, [r7, #20]
}
 801a30e:	4618      	mov	r0, r3
 801a310:	3718      	adds	r7, #24
 801a312:	46bd      	mov	sp, r7
 801a314:	bd80      	pop	{r7, pc}
 801a316:	bf00      	nop
 801a318:	2400300c 	.word	0x2400300c
 801a31c:	24002fec 	.word	0x24002fec
 801a320:	24002b14 	.word	0x24002b14
 801a324:	24002fa4 	.word	0x24002fa4
 801a328:	24002b10 	.word	0x24002b10
 801a32c:	24002ff8 	.word	0x24002ff8

0801a330 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 801a330:	b580      	push	{r7, lr}
 801a332:	b086      	sub	sp, #24
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
 801a338:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 801a33a:	4b29      	ldr	r3, [pc, #164]	; (801a3e0 <vTaskRemoveFromUnorderedEventList+0xb0>)
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	2b00      	cmp	r3, #0
 801a340:	d10a      	bne.n	801a358 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 801a342:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a346:	f383 8811 	msr	BASEPRI, r3
 801a34a:	f3bf 8f6f 	isb	sy
 801a34e:	f3bf 8f4f 	dsb	sy
 801a352:	613b      	str	r3, [r7, #16]
}
 801a354:	bf00      	nop
 801a356:	e7fe      	b.n	801a356 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 801a358:	683b      	ldr	r3, [r7, #0]
 801a35a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801a35e:	687b      	ldr	r3, [r7, #4]
 801a360:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	68db      	ldr	r3, [r3, #12]
 801a366:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 801a368:	697b      	ldr	r3, [r7, #20]
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d10a      	bne.n	801a384 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 801a36e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a372:	f383 8811 	msr	BASEPRI, r3
 801a376:	f3bf 8f6f 	isb	sy
 801a37a:	f3bf 8f4f 	dsb	sy
 801a37e:	60fb      	str	r3, [r7, #12]
}
 801a380:	bf00      	nop
 801a382:	e7fe      	b.n	801a382 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 801a384:	6878      	ldr	r0, [r7, #4]
 801a386:	f7fe fca1 	bl	8018ccc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801a38a:	697b      	ldr	r3, [r7, #20]
 801a38c:	3304      	adds	r3, #4
 801a38e:	4618      	mov	r0, r3
 801a390:	f7fe fc9c 	bl	8018ccc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 801a394:	697b      	ldr	r3, [r7, #20]
 801a396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a398:	4b12      	ldr	r3, [pc, #72]	; (801a3e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	429a      	cmp	r2, r3
 801a39e:	d903      	bls.n	801a3a8 <vTaskRemoveFromUnorderedEventList+0x78>
 801a3a0:	697b      	ldr	r3, [r7, #20]
 801a3a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3a4:	4a0f      	ldr	r2, [pc, #60]	; (801a3e4 <vTaskRemoveFromUnorderedEventList+0xb4>)
 801a3a6:	6013      	str	r3, [r2, #0]
 801a3a8:	697b      	ldr	r3, [r7, #20]
 801a3aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3ac:	4613      	mov	r3, r2
 801a3ae:	009b      	lsls	r3, r3, #2
 801a3b0:	4413      	add	r3, r2
 801a3b2:	009b      	lsls	r3, r3, #2
 801a3b4:	4a0c      	ldr	r2, [pc, #48]	; (801a3e8 <vTaskRemoveFromUnorderedEventList+0xb8>)
 801a3b6:	441a      	add	r2, r3
 801a3b8:	697b      	ldr	r3, [r7, #20]
 801a3ba:	3304      	adds	r3, #4
 801a3bc:	4619      	mov	r1, r3
 801a3be:	4610      	mov	r0, r2
 801a3c0:	f7fe fc27 	bl	8018c12 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801a3c4:	697b      	ldr	r3, [r7, #20]
 801a3c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a3c8:	4b08      	ldr	r3, [pc, #32]	; (801a3ec <vTaskRemoveFromUnorderedEventList+0xbc>)
 801a3ca:	681b      	ldr	r3, [r3, #0]
 801a3cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a3ce:	429a      	cmp	r2, r3
 801a3d0:	d902      	bls.n	801a3d8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 801a3d2:	4b07      	ldr	r3, [pc, #28]	; (801a3f0 <vTaskRemoveFromUnorderedEventList+0xc0>)
 801a3d4:	2201      	movs	r2, #1
 801a3d6:	601a      	str	r2, [r3, #0]
	}
}
 801a3d8:	bf00      	nop
 801a3da:	3718      	adds	r7, #24
 801a3dc:	46bd      	mov	sp, r7
 801a3de:	bd80      	pop	{r7, pc}
 801a3e0:	2400300c 	.word	0x2400300c
 801a3e4:	24002fec 	.word	0x24002fec
 801a3e8:	24002b14 	.word	0x24002b14
 801a3ec:	24002b10 	.word	0x24002b10
 801a3f0:	24002ff8 	.word	0x24002ff8

0801a3f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801a3f4:	b480      	push	{r7}
 801a3f6:	b083      	sub	sp, #12
 801a3f8:	af00      	add	r7, sp, #0
 801a3fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 801a3fc:	4b06      	ldr	r3, [pc, #24]	; (801a418 <vTaskInternalSetTimeOutState+0x24>)
 801a3fe:	681a      	ldr	r2, [r3, #0]
 801a400:	687b      	ldr	r3, [r7, #4]
 801a402:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801a404:	4b05      	ldr	r3, [pc, #20]	; (801a41c <vTaskInternalSetTimeOutState+0x28>)
 801a406:	681a      	ldr	r2, [r3, #0]
 801a408:	687b      	ldr	r3, [r7, #4]
 801a40a:	605a      	str	r2, [r3, #4]
}
 801a40c:	bf00      	nop
 801a40e:	370c      	adds	r7, #12
 801a410:	46bd      	mov	sp, r7
 801a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a416:	4770      	bx	lr
 801a418:	24002ffc 	.word	0x24002ffc
 801a41c:	24002fe8 	.word	0x24002fe8

0801a420 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801a420:	b580      	push	{r7, lr}
 801a422:	b088      	sub	sp, #32
 801a424:	af00      	add	r7, sp, #0
 801a426:	6078      	str	r0, [r7, #4]
 801a428:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	d10a      	bne.n	801a446 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 801a430:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a434:	f383 8811 	msr	BASEPRI, r3
 801a438:	f3bf 8f6f 	isb	sy
 801a43c:	f3bf 8f4f 	dsb	sy
 801a440:	613b      	str	r3, [r7, #16]
}
 801a442:	bf00      	nop
 801a444:	e7fe      	b.n	801a444 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801a446:	683b      	ldr	r3, [r7, #0]
 801a448:	2b00      	cmp	r3, #0
 801a44a:	d10a      	bne.n	801a462 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 801a44c:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a450:	f383 8811 	msr	BASEPRI, r3
 801a454:	f3bf 8f6f 	isb	sy
 801a458:	f3bf 8f4f 	dsb	sy
 801a45c:	60fb      	str	r3, [r7, #12]
}
 801a45e:	bf00      	nop
 801a460:	e7fe      	b.n	801a460 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801a462:	f000 feb7 	bl	801b1d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801a466:	4b1d      	ldr	r3, [pc, #116]	; (801a4dc <xTaskCheckForTimeOut+0xbc>)
 801a468:	681b      	ldr	r3, [r3, #0]
 801a46a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801a46c:	687b      	ldr	r3, [r7, #4]
 801a46e:	685b      	ldr	r3, [r3, #4]
 801a470:	69ba      	ldr	r2, [r7, #24]
 801a472:	1ad3      	subs	r3, r2, r3
 801a474:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801a476:	683b      	ldr	r3, [r7, #0]
 801a478:	681b      	ldr	r3, [r3, #0]
 801a47a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a47e:	d102      	bne.n	801a486 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 801a480:	2300      	movs	r3, #0
 801a482:	61fb      	str	r3, [r7, #28]
 801a484:	e023      	b.n	801a4ce <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 801a486:	687b      	ldr	r3, [r7, #4]
 801a488:	681a      	ldr	r2, [r3, #0]
 801a48a:	4b15      	ldr	r3, [pc, #84]	; (801a4e0 <xTaskCheckForTimeOut+0xc0>)
 801a48c:	681b      	ldr	r3, [r3, #0]
 801a48e:	429a      	cmp	r2, r3
 801a490:	d007      	beq.n	801a4a2 <xTaskCheckForTimeOut+0x82>
 801a492:	687b      	ldr	r3, [r7, #4]
 801a494:	685b      	ldr	r3, [r3, #4]
 801a496:	69ba      	ldr	r2, [r7, #24]
 801a498:	429a      	cmp	r2, r3
 801a49a:	d302      	bcc.n	801a4a2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801a49c:	2301      	movs	r3, #1
 801a49e:	61fb      	str	r3, [r7, #28]
 801a4a0:	e015      	b.n	801a4ce <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801a4a2:	683b      	ldr	r3, [r7, #0]
 801a4a4:	681b      	ldr	r3, [r3, #0]
 801a4a6:	697a      	ldr	r2, [r7, #20]
 801a4a8:	429a      	cmp	r2, r3
 801a4aa:	d20b      	bcs.n	801a4c4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801a4ac:	683b      	ldr	r3, [r7, #0]
 801a4ae:	681a      	ldr	r2, [r3, #0]
 801a4b0:	697b      	ldr	r3, [r7, #20]
 801a4b2:	1ad2      	subs	r2, r2, r3
 801a4b4:	683b      	ldr	r3, [r7, #0]
 801a4b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 801a4b8:	6878      	ldr	r0, [r7, #4]
 801a4ba:	f7ff ff9b 	bl	801a3f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801a4be:	2300      	movs	r3, #0
 801a4c0:	61fb      	str	r3, [r7, #28]
 801a4c2:	e004      	b.n	801a4ce <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 801a4c4:	683b      	ldr	r3, [r7, #0]
 801a4c6:	2200      	movs	r2, #0
 801a4c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 801a4ca:	2301      	movs	r3, #1
 801a4cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801a4ce:	f000 feb1 	bl	801b234 <vPortExitCritical>

	return xReturn;
 801a4d2:	69fb      	ldr	r3, [r7, #28]
}
 801a4d4:	4618      	mov	r0, r3
 801a4d6:	3720      	adds	r7, #32
 801a4d8:	46bd      	mov	sp, r7
 801a4da:	bd80      	pop	{r7, pc}
 801a4dc:	24002fe8 	.word	0x24002fe8
 801a4e0:	24002ffc 	.word	0x24002ffc

0801a4e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801a4e4:	b480      	push	{r7}
 801a4e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801a4e8:	4b03      	ldr	r3, [pc, #12]	; (801a4f8 <vTaskMissedYield+0x14>)
 801a4ea:	2201      	movs	r2, #1
 801a4ec:	601a      	str	r2, [r3, #0]
}
 801a4ee:	bf00      	nop
 801a4f0:	46bd      	mov	sp, r7
 801a4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4f6:	4770      	bx	lr
 801a4f8:	24002ff8 	.word	0x24002ff8

0801a4fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801a4fc:	b580      	push	{r7, lr}
 801a4fe:	b082      	sub	sp, #8
 801a500:	af00      	add	r7, sp, #0
 801a502:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801a504:	f000 f852 	bl	801a5ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801a508:	4b06      	ldr	r3, [pc, #24]	; (801a524 <prvIdleTask+0x28>)
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	2b01      	cmp	r3, #1
 801a50e:	d9f9      	bls.n	801a504 <prvIdleTask+0x8>
			{
				taskYIELD();
 801a510:	4b05      	ldr	r3, [pc, #20]	; (801a528 <prvIdleTask+0x2c>)
 801a512:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801a516:	601a      	str	r2, [r3, #0]
 801a518:	f3bf 8f4f 	dsb	sy
 801a51c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801a520:	e7f0      	b.n	801a504 <prvIdleTask+0x8>
 801a522:	bf00      	nop
 801a524:	24002b14 	.word	0x24002b14
 801a528:	e000ed04 	.word	0xe000ed04

0801a52c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801a52c:	b580      	push	{r7, lr}
 801a52e:	b082      	sub	sp, #8
 801a530:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a532:	2300      	movs	r3, #0
 801a534:	607b      	str	r3, [r7, #4]
 801a536:	e00c      	b.n	801a552 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801a538:	687a      	ldr	r2, [r7, #4]
 801a53a:	4613      	mov	r3, r2
 801a53c:	009b      	lsls	r3, r3, #2
 801a53e:	4413      	add	r3, r2
 801a540:	009b      	lsls	r3, r3, #2
 801a542:	4a12      	ldr	r2, [pc, #72]	; (801a58c <prvInitialiseTaskLists+0x60>)
 801a544:	4413      	add	r3, r2
 801a546:	4618      	mov	r0, r3
 801a548:	f7fe fb36 	bl	8018bb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801a54c:	687b      	ldr	r3, [r7, #4]
 801a54e:	3301      	adds	r3, #1
 801a550:	607b      	str	r3, [r7, #4]
 801a552:	687b      	ldr	r3, [r7, #4]
 801a554:	2b37      	cmp	r3, #55	; 0x37
 801a556:	d9ef      	bls.n	801a538 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801a558:	480d      	ldr	r0, [pc, #52]	; (801a590 <prvInitialiseTaskLists+0x64>)
 801a55a:	f7fe fb2d 	bl	8018bb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801a55e:	480d      	ldr	r0, [pc, #52]	; (801a594 <prvInitialiseTaskLists+0x68>)
 801a560:	f7fe fb2a 	bl	8018bb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801a564:	480c      	ldr	r0, [pc, #48]	; (801a598 <prvInitialiseTaskLists+0x6c>)
 801a566:	f7fe fb27 	bl	8018bb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801a56a:	480c      	ldr	r0, [pc, #48]	; (801a59c <prvInitialiseTaskLists+0x70>)
 801a56c:	f7fe fb24 	bl	8018bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801a570:	480b      	ldr	r0, [pc, #44]	; (801a5a0 <prvInitialiseTaskLists+0x74>)
 801a572:	f7fe fb21 	bl	8018bb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801a576:	4b0b      	ldr	r3, [pc, #44]	; (801a5a4 <prvInitialiseTaskLists+0x78>)
 801a578:	4a05      	ldr	r2, [pc, #20]	; (801a590 <prvInitialiseTaskLists+0x64>)
 801a57a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801a57c:	4b0a      	ldr	r3, [pc, #40]	; (801a5a8 <prvInitialiseTaskLists+0x7c>)
 801a57e:	4a05      	ldr	r2, [pc, #20]	; (801a594 <prvInitialiseTaskLists+0x68>)
 801a580:	601a      	str	r2, [r3, #0]
}
 801a582:	bf00      	nop
 801a584:	3708      	adds	r7, #8
 801a586:	46bd      	mov	sp, r7
 801a588:	bd80      	pop	{r7, pc}
 801a58a:	bf00      	nop
 801a58c:	24002b14 	.word	0x24002b14
 801a590:	24002f74 	.word	0x24002f74
 801a594:	24002f88 	.word	0x24002f88
 801a598:	24002fa4 	.word	0x24002fa4
 801a59c:	24002fb8 	.word	0x24002fb8
 801a5a0:	24002fd0 	.word	0x24002fd0
 801a5a4:	24002f9c 	.word	0x24002f9c
 801a5a8:	24002fa0 	.word	0x24002fa0

0801a5ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801a5ac:	b580      	push	{r7, lr}
 801a5ae:	b082      	sub	sp, #8
 801a5b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a5b2:	e019      	b.n	801a5e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801a5b4:	f000 fe0e 	bl	801b1d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a5b8:	4b10      	ldr	r3, [pc, #64]	; (801a5fc <prvCheckTasksWaitingTermination+0x50>)
 801a5ba:	68db      	ldr	r3, [r3, #12]
 801a5bc:	68db      	ldr	r3, [r3, #12]
 801a5be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801a5c0:	687b      	ldr	r3, [r7, #4]
 801a5c2:	3304      	adds	r3, #4
 801a5c4:	4618      	mov	r0, r3
 801a5c6:	f7fe fb81 	bl	8018ccc <uxListRemove>
				--uxCurrentNumberOfTasks;
 801a5ca:	4b0d      	ldr	r3, [pc, #52]	; (801a600 <prvCheckTasksWaitingTermination+0x54>)
 801a5cc:	681b      	ldr	r3, [r3, #0]
 801a5ce:	3b01      	subs	r3, #1
 801a5d0:	4a0b      	ldr	r2, [pc, #44]	; (801a600 <prvCheckTasksWaitingTermination+0x54>)
 801a5d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801a5d4:	4b0b      	ldr	r3, [pc, #44]	; (801a604 <prvCheckTasksWaitingTermination+0x58>)
 801a5d6:	681b      	ldr	r3, [r3, #0]
 801a5d8:	3b01      	subs	r3, #1
 801a5da:	4a0a      	ldr	r2, [pc, #40]	; (801a604 <prvCheckTasksWaitingTermination+0x58>)
 801a5dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801a5de:	f000 fe29 	bl	801b234 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801a5e2:	6878      	ldr	r0, [r7, #4]
 801a5e4:	f000 f810 	bl	801a608 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801a5e8:	4b06      	ldr	r3, [pc, #24]	; (801a604 <prvCheckTasksWaitingTermination+0x58>)
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	2b00      	cmp	r3, #0
 801a5ee:	d1e1      	bne.n	801a5b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801a5f0:	bf00      	nop
 801a5f2:	bf00      	nop
 801a5f4:	3708      	adds	r7, #8
 801a5f6:	46bd      	mov	sp, r7
 801a5f8:	bd80      	pop	{r7, pc}
 801a5fa:	bf00      	nop
 801a5fc:	24002fb8 	.word	0x24002fb8
 801a600:	24002fe4 	.word	0x24002fe4
 801a604:	24002fcc 	.word	0x24002fcc

0801a608 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801a608:	b580      	push	{r7, lr}
 801a60a:	b084      	sub	sp, #16
 801a60c:	af00      	add	r7, sp, #0
 801a60e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801a610:	687b      	ldr	r3, [r7, #4]
 801a612:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a616:	2b00      	cmp	r3, #0
 801a618:	d108      	bne.n	801a62c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a61e:	4618      	mov	r0, r3
 801a620:	f000 ffc6 	bl	801b5b0 <vPortFree>
				vPortFree( pxTCB );
 801a624:	6878      	ldr	r0, [r7, #4]
 801a626:	f000 ffc3 	bl	801b5b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801a62a:	e018      	b.n	801a65e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a632:	2b01      	cmp	r3, #1
 801a634:	d103      	bne.n	801a63e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801a636:	6878      	ldr	r0, [r7, #4]
 801a638:	f000 ffba 	bl	801b5b0 <vPortFree>
	}
 801a63c:	e00f      	b.n	801a65e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801a63e:	687b      	ldr	r3, [r7, #4]
 801a640:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801a644:	2b02      	cmp	r3, #2
 801a646:	d00a      	beq.n	801a65e <prvDeleteTCB+0x56>
	__asm volatile
 801a648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a64c:	f383 8811 	msr	BASEPRI, r3
 801a650:	f3bf 8f6f 	isb	sy
 801a654:	f3bf 8f4f 	dsb	sy
 801a658:	60fb      	str	r3, [r7, #12]
}
 801a65a:	bf00      	nop
 801a65c:	e7fe      	b.n	801a65c <prvDeleteTCB+0x54>
	}
 801a65e:	bf00      	nop
 801a660:	3710      	adds	r7, #16
 801a662:	46bd      	mov	sp, r7
 801a664:	bd80      	pop	{r7, pc}
	...

0801a668 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801a668:	b480      	push	{r7}
 801a66a:	b083      	sub	sp, #12
 801a66c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801a66e:	4b0c      	ldr	r3, [pc, #48]	; (801a6a0 <prvResetNextTaskUnblockTime+0x38>)
 801a670:	681b      	ldr	r3, [r3, #0]
 801a672:	681b      	ldr	r3, [r3, #0]
 801a674:	2b00      	cmp	r3, #0
 801a676:	d104      	bne.n	801a682 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801a678:	4b0a      	ldr	r3, [pc, #40]	; (801a6a4 <prvResetNextTaskUnblockTime+0x3c>)
 801a67a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801a67e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801a680:	e008      	b.n	801a694 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a682:	4b07      	ldr	r3, [pc, #28]	; (801a6a0 <prvResetNextTaskUnblockTime+0x38>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	68db      	ldr	r3, [r3, #12]
 801a688:	68db      	ldr	r3, [r3, #12]
 801a68a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801a68c:	687b      	ldr	r3, [r7, #4]
 801a68e:	685b      	ldr	r3, [r3, #4]
 801a690:	4a04      	ldr	r2, [pc, #16]	; (801a6a4 <prvResetNextTaskUnblockTime+0x3c>)
 801a692:	6013      	str	r3, [r2, #0]
}
 801a694:	bf00      	nop
 801a696:	370c      	adds	r7, #12
 801a698:	46bd      	mov	sp, r7
 801a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a69e:	4770      	bx	lr
 801a6a0:	24002f9c 	.word	0x24002f9c
 801a6a4:	24003004 	.word	0x24003004

0801a6a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801a6a8:	b480      	push	{r7}
 801a6aa:	b083      	sub	sp, #12
 801a6ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801a6ae:	4b0b      	ldr	r3, [pc, #44]	; (801a6dc <xTaskGetSchedulerState+0x34>)
 801a6b0:	681b      	ldr	r3, [r3, #0]
 801a6b2:	2b00      	cmp	r3, #0
 801a6b4:	d102      	bne.n	801a6bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801a6b6:	2301      	movs	r3, #1
 801a6b8:	607b      	str	r3, [r7, #4]
 801a6ba:	e008      	b.n	801a6ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801a6bc:	4b08      	ldr	r3, [pc, #32]	; (801a6e0 <xTaskGetSchedulerState+0x38>)
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	2b00      	cmp	r3, #0
 801a6c2:	d102      	bne.n	801a6ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801a6c4:	2302      	movs	r3, #2
 801a6c6:	607b      	str	r3, [r7, #4]
 801a6c8:	e001      	b.n	801a6ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801a6ce:	687b      	ldr	r3, [r7, #4]
	}
 801a6d0:	4618      	mov	r0, r3
 801a6d2:	370c      	adds	r7, #12
 801a6d4:	46bd      	mov	sp, r7
 801a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a6da:	4770      	bx	lr
 801a6dc:	24002ff0 	.word	0x24002ff0
 801a6e0:	2400300c 	.word	0x2400300c

0801a6e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801a6e4:	b580      	push	{r7, lr}
 801a6e6:	b086      	sub	sp, #24
 801a6e8:	af00      	add	r7, sp, #0
 801a6ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 801a6f0:	2300      	movs	r3, #0
 801a6f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	d056      	beq.n	801a7a8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801a6fa:	4b2e      	ldr	r3, [pc, #184]	; (801a7b4 <xTaskPriorityDisinherit+0xd0>)
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	693a      	ldr	r2, [r7, #16]
 801a700:	429a      	cmp	r2, r3
 801a702:	d00a      	beq.n	801a71a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801a704:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a708:	f383 8811 	msr	BASEPRI, r3
 801a70c:	f3bf 8f6f 	isb	sy
 801a710:	f3bf 8f4f 	dsb	sy
 801a714:	60fb      	str	r3, [r7, #12]
}
 801a716:	bf00      	nop
 801a718:	e7fe      	b.n	801a718 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 801a71a:	693b      	ldr	r3, [r7, #16]
 801a71c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a71e:	2b00      	cmp	r3, #0
 801a720:	d10a      	bne.n	801a738 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801a722:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a726:	f383 8811 	msr	BASEPRI, r3
 801a72a:	f3bf 8f6f 	isb	sy
 801a72e:	f3bf 8f4f 	dsb	sy
 801a732:	60bb      	str	r3, [r7, #8]
}
 801a734:	bf00      	nop
 801a736:	e7fe      	b.n	801a736 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 801a738:	693b      	ldr	r3, [r7, #16]
 801a73a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a73c:	1e5a      	subs	r2, r3, #1
 801a73e:	693b      	ldr	r3, [r7, #16]
 801a740:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801a742:	693b      	ldr	r3, [r7, #16]
 801a744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a746:	693b      	ldr	r3, [r7, #16]
 801a748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801a74a:	429a      	cmp	r2, r3
 801a74c:	d02c      	beq.n	801a7a8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801a74e:	693b      	ldr	r3, [r7, #16]
 801a750:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801a752:	2b00      	cmp	r3, #0
 801a754:	d128      	bne.n	801a7a8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a756:	693b      	ldr	r3, [r7, #16]
 801a758:	3304      	adds	r3, #4
 801a75a:	4618      	mov	r0, r3
 801a75c:	f7fe fab6 	bl	8018ccc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801a760:	693b      	ldr	r3, [r7, #16]
 801a762:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801a764:	693b      	ldr	r3, [r7, #16]
 801a766:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a768:	693b      	ldr	r3, [r7, #16]
 801a76a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a76c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 801a770:	693b      	ldr	r3, [r7, #16]
 801a772:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801a774:	693b      	ldr	r3, [r7, #16]
 801a776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a778:	4b0f      	ldr	r3, [pc, #60]	; (801a7b8 <xTaskPriorityDisinherit+0xd4>)
 801a77a:	681b      	ldr	r3, [r3, #0]
 801a77c:	429a      	cmp	r2, r3
 801a77e:	d903      	bls.n	801a788 <xTaskPriorityDisinherit+0xa4>
 801a780:	693b      	ldr	r3, [r7, #16]
 801a782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a784:	4a0c      	ldr	r2, [pc, #48]	; (801a7b8 <xTaskPriorityDisinherit+0xd4>)
 801a786:	6013      	str	r3, [r2, #0]
 801a788:	693b      	ldr	r3, [r7, #16]
 801a78a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a78c:	4613      	mov	r3, r2
 801a78e:	009b      	lsls	r3, r3, #2
 801a790:	4413      	add	r3, r2
 801a792:	009b      	lsls	r3, r3, #2
 801a794:	4a09      	ldr	r2, [pc, #36]	; (801a7bc <xTaskPriorityDisinherit+0xd8>)
 801a796:	441a      	add	r2, r3
 801a798:	693b      	ldr	r3, [r7, #16]
 801a79a:	3304      	adds	r3, #4
 801a79c:	4619      	mov	r1, r3
 801a79e:	4610      	mov	r0, r2
 801a7a0:	f7fe fa37 	bl	8018c12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801a7a4:	2301      	movs	r3, #1
 801a7a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801a7a8:	697b      	ldr	r3, [r7, #20]
	}
 801a7aa:	4618      	mov	r0, r3
 801a7ac:	3718      	adds	r7, #24
 801a7ae:	46bd      	mov	sp, r7
 801a7b0:	bd80      	pop	{r7, pc}
 801a7b2:	bf00      	nop
 801a7b4:	24002b10 	.word	0x24002b10
 801a7b8:	24002fec 	.word	0x24002fec
 801a7bc:	24002b14 	.word	0x24002b14

0801a7c0 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 801a7c0:	b480      	push	{r7}
 801a7c2:	b083      	sub	sp, #12
 801a7c4:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801a7c6:	4b09      	ldr	r3, [pc, #36]	; (801a7ec <uxTaskResetEventItemValue+0x2c>)
 801a7c8:	681b      	ldr	r3, [r3, #0]
 801a7ca:	699b      	ldr	r3, [r3, #24]
 801a7cc:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801a7ce:	4b07      	ldr	r3, [pc, #28]	; (801a7ec <uxTaskResetEventItemValue+0x2c>)
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801a7d4:	4b05      	ldr	r3, [pc, #20]	; (801a7ec <uxTaskResetEventItemValue+0x2c>)
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 801a7dc:	619a      	str	r2, [r3, #24]

	return uxReturn;
 801a7de:	687b      	ldr	r3, [r7, #4]
}
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	370c      	adds	r7, #12
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ea:	4770      	bx	lr
 801a7ec:	24002b10 	.word	0x24002b10

0801a7f0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b084      	sub	sp, #16
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
 801a7f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801a7fa:	4b21      	ldr	r3, [pc, #132]	; (801a880 <prvAddCurrentTaskToDelayedList+0x90>)
 801a7fc:	681b      	ldr	r3, [r3, #0]
 801a7fe:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801a800:	4b20      	ldr	r3, [pc, #128]	; (801a884 <prvAddCurrentTaskToDelayedList+0x94>)
 801a802:	681b      	ldr	r3, [r3, #0]
 801a804:	3304      	adds	r3, #4
 801a806:	4618      	mov	r0, r3
 801a808:	f7fe fa60 	bl	8018ccc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801a812:	d10a      	bne.n	801a82a <prvAddCurrentTaskToDelayedList+0x3a>
 801a814:	683b      	ldr	r3, [r7, #0]
 801a816:	2b00      	cmp	r3, #0
 801a818:	d007      	beq.n	801a82a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a81a:	4b1a      	ldr	r3, [pc, #104]	; (801a884 <prvAddCurrentTaskToDelayedList+0x94>)
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	3304      	adds	r3, #4
 801a820:	4619      	mov	r1, r3
 801a822:	4819      	ldr	r0, [pc, #100]	; (801a888 <prvAddCurrentTaskToDelayedList+0x98>)
 801a824:	f7fe f9f5 	bl	8018c12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801a828:	e026      	b.n	801a878 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801a82a:	68fa      	ldr	r2, [r7, #12]
 801a82c:	687b      	ldr	r3, [r7, #4]
 801a82e:	4413      	add	r3, r2
 801a830:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801a832:	4b14      	ldr	r3, [pc, #80]	; (801a884 <prvAddCurrentTaskToDelayedList+0x94>)
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	68ba      	ldr	r2, [r7, #8]
 801a838:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801a83a:	68ba      	ldr	r2, [r7, #8]
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	429a      	cmp	r2, r3
 801a840:	d209      	bcs.n	801a856 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a842:	4b12      	ldr	r3, [pc, #72]	; (801a88c <prvAddCurrentTaskToDelayedList+0x9c>)
 801a844:	681a      	ldr	r2, [r3, #0]
 801a846:	4b0f      	ldr	r3, [pc, #60]	; (801a884 <prvAddCurrentTaskToDelayedList+0x94>)
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	3304      	adds	r3, #4
 801a84c:	4619      	mov	r1, r3
 801a84e:	4610      	mov	r0, r2
 801a850:	f7fe fa03 	bl	8018c5a <vListInsert>
}
 801a854:	e010      	b.n	801a878 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801a856:	4b0e      	ldr	r3, [pc, #56]	; (801a890 <prvAddCurrentTaskToDelayedList+0xa0>)
 801a858:	681a      	ldr	r2, [r3, #0]
 801a85a:	4b0a      	ldr	r3, [pc, #40]	; (801a884 <prvAddCurrentTaskToDelayedList+0x94>)
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	3304      	adds	r3, #4
 801a860:	4619      	mov	r1, r3
 801a862:	4610      	mov	r0, r2
 801a864:	f7fe f9f9 	bl	8018c5a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801a868:	4b0a      	ldr	r3, [pc, #40]	; (801a894 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a86a:	681b      	ldr	r3, [r3, #0]
 801a86c:	68ba      	ldr	r2, [r7, #8]
 801a86e:	429a      	cmp	r2, r3
 801a870:	d202      	bcs.n	801a878 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 801a872:	4a08      	ldr	r2, [pc, #32]	; (801a894 <prvAddCurrentTaskToDelayedList+0xa4>)
 801a874:	68bb      	ldr	r3, [r7, #8]
 801a876:	6013      	str	r3, [r2, #0]
}
 801a878:	bf00      	nop
 801a87a:	3710      	adds	r7, #16
 801a87c:	46bd      	mov	sp, r7
 801a87e:	bd80      	pop	{r7, pc}
 801a880:	24002fe8 	.word	0x24002fe8
 801a884:	24002b10 	.word	0x24002b10
 801a888:	24002fd0 	.word	0x24002fd0
 801a88c:	24002fa0 	.word	0x24002fa0
 801a890:	24002f9c 	.word	0x24002f9c
 801a894:	24003004 	.word	0x24003004

0801a898 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801a898:	b580      	push	{r7, lr}
 801a89a:	b08a      	sub	sp, #40	; 0x28
 801a89c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 801a89e:	2300      	movs	r3, #0
 801a8a0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801a8a2:	f000 fb07 	bl	801aeb4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801a8a6:	4b1c      	ldr	r3, [pc, #112]	; (801a918 <xTimerCreateTimerTask+0x80>)
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	2b00      	cmp	r3, #0
 801a8ac:	d021      	beq.n	801a8f2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 801a8ae:	2300      	movs	r3, #0
 801a8b0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801a8b2:	2300      	movs	r3, #0
 801a8b4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801a8b6:	1d3a      	adds	r2, r7, #4
 801a8b8:	f107 0108 	add.w	r1, r7, #8
 801a8bc:	f107 030c 	add.w	r3, r7, #12
 801a8c0:	4618      	mov	r0, r3
 801a8c2:	f7fd fef3 	bl	80186ac <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801a8c6:	6879      	ldr	r1, [r7, #4]
 801a8c8:	68bb      	ldr	r3, [r7, #8]
 801a8ca:	68fa      	ldr	r2, [r7, #12]
 801a8cc:	9202      	str	r2, [sp, #8]
 801a8ce:	9301      	str	r3, [sp, #4]
 801a8d0:	2302      	movs	r3, #2
 801a8d2:	9300      	str	r3, [sp, #0]
 801a8d4:	2300      	movs	r3, #0
 801a8d6:	460a      	mov	r2, r1
 801a8d8:	4910      	ldr	r1, [pc, #64]	; (801a91c <xTimerCreateTimerTask+0x84>)
 801a8da:	4811      	ldr	r0, [pc, #68]	; (801a920 <xTimerCreateTimerTask+0x88>)
 801a8dc:	f7fe ff0c 	bl	80196f8 <xTaskCreateStatic>
 801a8e0:	4603      	mov	r3, r0
 801a8e2:	4a10      	ldr	r2, [pc, #64]	; (801a924 <xTimerCreateTimerTask+0x8c>)
 801a8e4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801a8e6:	4b0f      	ldr	r3, [pc, #60]	; (801a924 <xTimerCreateTimerTask+0x8c>)
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d001      	beq.n	801a8f2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 801a8ee:	2301      	movs	r3, #1
 801a8f0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801a8f2:	697b      	ldr	r3, [r7, #20]
 801a8f4:	2b00      	cmp	r3, #0
 801a8f6:	d10a      	bne.n	801a90e <xTimerCreateTimerTask+0x76>
	__asm volatile
 801a8f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a8fc:	f383 8811 	msr	BASEPRI, r3
 801a900:	f3bf 8f6f 	isb	sy
 801a904:	f3bf 8f4f 	dsb	sy
 801a908:	613b      	str	r3, [r7, #16]
}
 801a90a:	bf00      	nop
 801a90c:	e7fe      	b.n	801a90c <xTimerCreateTimerTask+0x74>
	return xReturn;
 801a90e:	697b      	ldr	r3, [r7, #20]
}
 801a910:	4618      	mov	r0, r3
 801a912:	3718      	adds	r7, #24
 801a914:	46bd      	mov	sp, r7
 801a916:	bd80      	pop	{r7, pc}
 801a918:	24003040 	.word	0x24003040
 801a91c:	0801c4e4 	.word	0x0801c4e4
 801a920:	0801aa5d 	.word	0x0801aa5d
 801a924:	24003044 	.word	0x24003044

0801a928 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801a928:	b580      	push	{r7, lr}
 801a92a:	b08a      	sub	sp, #40	; 0x28
 801a92c:	af00      	add	r7, sp, #0
 801a92e:	60f8      	str	r0, [r7, #12]
 801a930:	60b9      	str	r1, [r7, #8]
 801a932:	607a      	str	r2, [r7, #4]
 801a934:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801a936:	2300      	movs	r3, #0
 801a938:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d10a      	bne.n	801a956 <xTimerGenericCommand+0x2e>
	__asm volatile
 801a940:	f04f 0350 	mov.w	r3, #80	; 0x50
 801a944:	f383 8811 	msr	BASEPRI, r3
 801a948:	f3bf 8f6f 	isb	sy
 801a94c:	f3bf 8f4f 	dsb	sy
 801a950:	623b      	str	r3, [r7, #32]
}
 801a952:	bf00      	nop
 801a954:	e7fe      	b.n	801a954 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801a956:	4b1a      	ldr	r3, [pc, #104]	; (801a9c0 <xTimerGenericCommand+0x98>)
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	2b00      	cmp	r3, #0
 801a95c:	d02a      	beq.n	801a9b4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801a966:	68fb      	ldr	r3, [r7, #12]
 801a968:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801a96a:	68bb      	ldr	r3, [r7, #8]
 801a96c:	2b05      	cmp	r3, #5
 801a96e:	dc18      	bgt.n	801a9a2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 801a970:	f7ff fe9a 	bl	801a6a8 <xTaskGetSchedulerState>
 801a974:	4603      	mov	r3, r0
 801a976:	2b02      	cmp	r3, #2
 801a978:	d109      	bne.n	801a98e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801a97a:	4b11      	ldr	r3, [pc, #68]	; (801a9c0 <xTimerGenericCommand+0x98>)
 801a97c:	6818      	ldr	r0, [r3, #0]
 801a97e:	f107 0110 	add.w	r1, r7, #16
 801a982:	2300      	movs	r3, #0
 801a984:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a986:	f7fe facf 	bl	8018f28 <xQueueGenericSend>
 801a98a:	6278      	str	r0, [r7, #36]	; 0x24
 801a98c:	e012      	b.n	801a9b4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801a98e:	4b0c      	ldr	r3, [pc, #48]	; (801a9c0 <xTimerGenericCommand+0x98>)
 801a990:	6818      	ldr	r0, [r3, #0]
 801a992:	f107 0110 	add.w	r1, r7, #16
 801a996:	2300      	movs	r3, #0
 801a998:	2200      	movs	r2, #0
 801a99a:	f7fe fac5 	bl	8018f28 <xQueueGenericSend>
 801a99e:	6278      	str	r0, [r7, #36]	; 0x24
 801a9a0:	e008      	b.n	801a9b4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801a9a2:	4b07      	ldr	r3, [pc, #28]	; (801a9c0 <xTimerGenericCommand+0x98>)
 801a9a4:	6818      	ldr	r0, [r3, #0]
 801a9a6:	f107 0110 	add.w	r1, r7, #16
 801a9aa:	2300      	movs	r3, #0
 801a9ac:	683a      	ldr	r2, [r7, #0]
 801a9ae:	f7fe fbb9 	bl	8019124 <xQueueGenericSendFromISR>
 801a9b2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801a9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801a9b6:	4618      	mov	r0, r3
 801a9b8:	3728      	adds	r7, #40	; 0x28
 801a9ba:	46bd      	mov	sp, r7
 801a9bc:	bd80      	pop	{r7, pc}
 801a9be:	bf00      	nop
 801a9c0:	24003040 	.word	0x24003040

0801a9c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b088      	sub	sp, #32
 801a9c8:	af02      	add	r7, sp, #8
 801a9ca:	6078      	str	r0, [r7, #4]
 801a9cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801a9ce:	4b22      	ldr	r3, [pc, #136]	; (801aa58 <prvProcessExpiredTimer+0x94>)
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	68db      	ldr	r3, [r3, #12]
 801a9d4:	68db      	ldr	r3, [r3, #12]
 801a9d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801a9d8:	697b      	ldr	r3, [r7, #20]
 801a9da:	3304      	adds	r3, #4
 801a9dc:	4618      	mov	r0, r3
 801a9de:	f7fe f975 	bl	8018ccc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801a9e2:	697b      	ldr	r3, [r7, #20]
 801a9e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801a9e8:	f003 0304 	and.w	r3, r3, #4
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d022      	beq.n	801aa36 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801a9f0:	697b      	ldr	r3, [r7, #20]
 801a9f2:	699a      	ldr	r2, [r3, #24]
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	18d1      	adds	r1, r2, r3
 801a9f8:	687b      	ldr	r3, [r7, #4]
 801a9fa:	683a      	ldr	r2, [r7, #0]
 801a9fc:	6978      	ldr	r0, [r7, #20]
 801a9fe:	f000 f8d1 	bl	801aba4 <prvInsertTimerInActiveList>
 801aa02:	4603      	mov	r3, r0
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d01f      	beq.n	801aa48 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801aa08:	2300      	movs	r3, #0
 801aa0a:	9300      	str	r3, [sp, #0]
 801aa0c:	2300      	movs	r3, #0
 801aa0e:	687a      	ldr	r2, [r7, #4]
 801aa10:	2100      	movs	r1, #0
 801aa12:	6978      	ldr	r0, [r7, #20]
 801aa14:	f7ff ff88 	bl	801a928 <xTimerGenericCommand>
 801aa18:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801aa1a:	693b      	ldr	r3, [r7, #16]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d113      	bne.n	801aa48 <prvProcessExpiredTimer+0x84>
	__asm volatile
 801aa20:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aa24:	f383 8811 	msr	BASEPRI, r3
 801aa28:	f3bf 8f6f 	isb	sy
 801aa2c:	f3bf 8f4f 	dsb	sy
 801aa30:	60fb      	str	r3, [r7, #12]
}
 801aa32:	bf00      	nop
 801aa34:	e7fe      	b.n	801aa34 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801aa36:	697b      	ldr	r3, [r7, #20]
 801aa38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801aa3c:	f023 0301 	bic.w	r3, r3, #1
 801aa40:	b2da      	uxtb	r2, r3
 801aa42:	697b      	ldr	r3, [r7, #20]
 801aa44:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801aa48:	697b      	ldr	r3, [r7, #20]
 801aa4a:	6a1b      	ldr	r3, [r3, #32]
 801aa4c:	6978      	ldr	r0, [r7, #20]
 801aa4e:	4798      	blx	r3
}
 801aa50:	bf00      	nop
 801aa52:	3718      	adds	r7, #24
 801aa54:	46bd      	mov	sp, r7
 801aa56:	bd80      	pop	{r7, pc}
 801aa58:	24003038 	.word	0x24003038

0801aa5c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b084      	sub	sp, #16
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801aa64:	f107 0308 	add.w	r3, r7, #8
 801aa68:	4618      	mov	r0, r3
 801aa6a:	f000 f857 	bl	801ab1c <prvGetNextExpireTime>
 801aa6e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 801aa70:	68bb      	ldr	r3, [r7, #8]
 801aa72:	4619      	mov	r1, r3
 801aa74:	68f8      	ldr	r0, [r7, #12]
 801aa76:	f000 f803 	bl	801aa80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801aa7a:	f000 f8d5 	bl	801ac28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 801aa7e:	e7f1      	b.n	801aa64 <prvTimerTask+0x8>

0801aa80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 801aa80:	b580      	push	{r7, lr}
 801aa82:	b084      	sub	sp, #16
 801aa84:	af00      	add	r7, sp, #0
 801aa86:	6078      	str	r0, [r7, #4]
 801aa88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801aa8a:	f7ff f977 	bl	8019d7c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801aa8e:	f107 0308 	add.w	r3, r7, #8
 801aa92:	4618      	mov	r0, r3
 801aa94:	f000 f866 	bl	801ab64 <prvSampleTimeNow>
 801aa98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801aa9a:	68bb      	ldr	r3, [r7, #8]
 801aa9c:	2b00      	cmp	r3, #0
 801aa9e:	d130      	bne.n	801ab02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 801aaa0:	683b      	ldr	r3, [r7, #0]
 801aaa2:	2b00      	cmp	r3, #0
 801aaa4:	d10a      	bne.n	801aabc <prvProcessTimerOrBlockTask+0x3c>
 801aaa6:	687a      	ldr	r2, [r7, #4]
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	429a      	cmp	r2, r3
 801aaac:	d806      	bhi.n	801aabc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801aaae:	f7ff f973 	bl	8019d98 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801aab2:	68f9      	ldr	r1, [r7, #12]
 801aab4:	6878      	ldr	r0, [r7, #4]
 801aab6:	f7ff ff85 	bl	801a9c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801aaba:	e024      	b.n	801ab06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801aabc:	683b      	ldr	r3, [r7, #0]
 801aabe:	2b00      	cmp	r3, #0
 801aac0:	d008      	beq.n	801aad4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801aac2:	4b13      	ldr	r3, [pc, #76]	; (801ab10 <prvProcessTimerOrBlockTask+0x90>)
 801aac4:	681b      	ldr	r3, [r3, #0]
 801aac6:	681b      	ldr	r3, [r3, #0]
 801aac8:	2b00      	cmp	r3, #0
 801aaca:	d101      	bne.n	801aad0 <prvProcessTimerOrBlockTask+0x50>
 801aacc:	2301      	movs	r3, #1
 801aace:	e000      	b.n	801aad2 <prvProcessTimerOrBlockTask+0x52>
 801aad0:	2300      	movs	r3, #0
 801aad2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801aad4:	4b0f      	ldr	r3, [pc, #60]	; (801ab14 <prvProcessTimerOrBlockTask+0x94>)
 801aad6:	6818      	ldr	r0, [r3, #0]
 801aad8:	687a      	ldr	r2, [r7, #4]
 801aada:	68fb      	ldr	r3, [r7, #12]
 801aadc:	1ad3      	subs	r3, r2, r3
 801aade:	683a      	ldr	r2, [r7, #0]
 801aae0:	4619      	mov	r1, r3
 801aae2:	f7fe fdd5 	bl	8019690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801aae6:	f7ff f957 	bl	8019d98 <xTaskResumeAll>
 801aaea:	4603      	mov	r3, r0
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d10a      	bne.n	801ab06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 801aaf0:	4b09      	ldr	r3, [pc, #36]	; (801ab18 <prvProcessTimerOrBlockTask+0x98>)
 801aaf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801aaf6:	601a      	str	r2, [r3, #0]
 801aaf8:	f3bf 8f4f 	dsb	sy
 801aafc:	f3bf 8f6f 	isb	sy
}
 801ab00:	e001      	b.n	801ab06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801ab02:	f7ff f949 	bl	8019d98 <xTaskResumeAll>
}
 801ab06:	bf00      	nop
 801ab08:	3710      	adds	r7, #16
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bd80      	pop	{r7, pc}
 801ab0e:	bf00      	nop
 801ab10:	2400303c 	.word	0x2400303c
 801ab14:	24003040 	.word	0x24003040
 801ab18:	e000ed04 	.word	0xe000ed04

0801ab1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801ab1c:	b480      	push	{r7}
 801ab1e:	b085      	sub	sp, #20
 801ab20:	af00      	add	r7, sp, #0
 801ab22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 801ab24:	4b0e      	ldr	r3, [pc, #56]	; (801ab60 <prvGetNextExpireTime+0x44>)
 801ab26:	681b      	ldr	r3, [r3, #0]
 801ab28:	681b      	ldr	r3, [r3, #0]
 801ab2a:	2b00      	cmp	r3, #0
 801ab2c:	d101      	bne.n	801ab32 <prvGetNextExpireTime+0x16>
 801ab2e:	2201      	movs	r2, #1
 801ab30:	e000      	b.n	801ab34 <prvGetNextExpireTime+0x18>
 801ab32:	2200      	movs	r2, #0
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801ab38:	687b      	ldr	r3, [r7, #4]
 801ab3a:	681b      	ldr	r3, [r3, #0]
 801ab3c:	2b00      	cmp	r3, #0
 801ab3e:	d105      	bne.n	801ab4c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801ab40:	4b07      	ldr	r3, [pc, #28]	; (801ab60 <prvGetNextExpireTime+0x44>)
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	68db      	ldr	r3, [r3, #12]
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	60fb      	str	r3, [r7, #12]
 801ab4a:	e001      	b.n	801ab50 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 801ab4c:	2300      	movs	r3, #0
 801ab4e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 801ab50:	68fb      	ldr	r3, [r7, #12]
}
 801ab52:	4618      	mov	r0, r3
 801ab54:	3714      	adds	r7, #20
 801ab56:	46bd      	mov	sp, r7
 801ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab5c:	4770      	bx	lr
 801ab5e:	bf00      	nop
 801ab60:	24003038 	.word	0x24003038

0801ab64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 801ab64:	b580      	push	{r7, lr}
 801ab66:	b084      	sub	sp, #16
 801ab68:	af00      	add	r7, sp, #0
 801ab6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 801ab6c:	f7ff f9b2 	bl	8019ed4 <xTaskGetTickCount>
 801ab70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 801ab72:	4b0b      	ldr	r3, [pc, #44]	; (801aba0 <prvSampleTimeNow+0x3c>)
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	68fa      	ldr	r2, [r7, #12]
 801ab78:	429a      	cmp	r2, r3
 801ab7a:	d205      	bcs.n	801ab88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 801ab7c:	f000 f936 	bl	801adec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 801ab80:	687b      	ldr	r3, [r7, #4]
 801ab82:	2201      	movs	r2, #1
 801ab84:	601a      	str	r2, [r3, #0]
 801ab86:	e002      	b.n	801ab8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	2200      	movs	r2, #0
 801ab8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801ab8e:	4a04      	ldr	r2, [pc, #16]	; (801aba0 <prvSampleTimeNow+0x3c>)
 801ab90:	68fb      	ldr	r3, [r7, #12]
 801ab92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801ab94:	68fb      	ldr	r3, [r7, #12]
}
 801ab96:	4618      	mov	r0, r3
 801ab98:	3710      	adds	r7, #16
 801ab9a:	46bd      	mov	sp, r7
 801ab9c:	bd80      	pop	{r7, pc}
 801ab9e:	bf00      	nop
 801aba0:	24003048 	.word	0x24003048

0801aba4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801aba4:	b580      	push	{r7, lr}
 801aba6:	b086      	sub	sp, #24
 801aba8:	af00      	add	r7, sp, #0
 801abaa:	60f8      	str	r0, [r7, #12]
 801abac:	60b9      	str	r1, [r7, #8]
 801abae:	607a      	str	r2, [r7, #4]
 801abb0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801abb2:	2300      	movs	r3, #0
 801abb4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	68ba      	ldr	r2, [r7, #8]
 801abba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	68fa      	ldr	r2, [r7, #12]
 801abc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801abc2:	68ba      	ldr	r2, [r7, #8]
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	429a      	cmp	r2, r3
 801abc8:	d812      	bhi.n	801abf0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801abca:	687a      	ldr	r2, [r7, #4]
 801abcc:	683b      	ldr	r3, [r7, #0]
 801abce:	1ad2      	subs	r2, r2, r3
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	699b      	ldr	r3, [r3, #24]
 801abd4:	429a      	cmp	r2, r3
 801abd6:	d302      	bcc.n	801abde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801abd8:	2301      	movs	r3, #1
 801abda:	617b      	str	r3, [r7, #20]
 801abdc:	e01b      	b.n	801ac16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801abde:	4b10      	ldr	r3, [pc, #64]	; (801ac20 <prvInsertTimerInActiveList+0x7c>)
 801abe0:	681a      	ldr	r2, [r3, #0]
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	3304      	adds	r3, #4
 801abe6:	4619      	mov	r1, r3
 801abe8:	4610      	mov	r0, r2
 801abea:	f7fe f836 	bl	8018c5a <vListInsert>
 801abee:	e012      	b.n	801ac16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 801abf0:	687a      	ldr	r2, [r7, #4]
 801abf2:	683b      	ldr	r3, [r7, #0]
 801abf4:	429a      	cmp	r2, r3
 801abf6:	d206      	bcs.n	801ac06 <prvInsertTimerInActiveList+0x62>
 801abf8:	68ba      	ldr	r2, [r7, #8]
 801abfa:	683b      	ldr	r3, [r7, #0]
 801abfc:	429a      	cmp	r2, r3
 801abfe:	d302      	bcc.n	801ac06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 801ac00:	2301      	movs	r3, #1
 801ac02:	617b      	str	r3, [r7, #20]
 801ac04:	e007      	b.n	801ac16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ac06:	4b07      	ldr	r3, [pc, #28]	; (801ac24 <prvInsertTimerInActiveList+0x80>)
 801ac08:	681a      	ldr	r2, [r3, #0]
 801ac0a:	68fb      	ldr	r3, [r7, #12]
 801ac0c:	3304      	adds	r3, #4
 801ac0e:	4619      	mov	r1, r3
 801ac10:	4610      	mov	r0, r2
 801ac12:	f7fe f822 	bl	8018c5a <vListInsert>
		}
	}

	return xProcessTimerNow;
 801ac16:	697b      	ldr	r3, [r7, #20]
}
 801ac18:	4618      	mov	r0, r3
 801ac1a:	3718      	adds	r7, #24
 801ac1c:	46bd      	mov	sp, r7
 801ac1e:	bd80      	pop	{r7, pc}
 801ac20:	2400303c 	.word	0x2400303c
 801ac24:	24003038 	.word	0x24003038

0801ac28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801ac28:	b580      	push	{r7, lr}
 801ac2a:	b08e      	sub	sp, #56	; 0x38
 801ac2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801ac2e:	e0ca      	b.n	801adc6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	2b00      	cmp	r3, #0
 801ac34:	da18      	bge.n	801ac68 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801ac36:	1d3b      	adds	r3, r7, #4
 801ac38:	3304      	adds	r3, #4
 801ac3a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 801ac3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	d10a      	bne.n	801ac58 <prvProcessReceivedCommands+0x30>
	__asm volatile
 801ac42:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ac46:	f383 8811 	msr	BASEPRI, r3
 801ac4a:	f3bf 8f6f 	isb	sy
 801ac4e:	f3bf 8f4f 	dsb	sy
 801ac52:	61fb      	str	r3, [r7, #28]
}
 801ac54:	bf00      	nop
 801ac56:	e7fe      	b.n	801ac56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 801ac58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ac5a:	681b      	ldr	r3, [r3, #0]
 801ac5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ac5e:	6850      	ldr	r0, [r2, #4]
 801ac60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ac62:	6892      	ldr	r2, [r2, #8]
 801ac64:	4611      	mov	r1, r2
 801ac66:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	2b00      	cmp	r3, #0
 801ac6c:	f2c0 80aa 	blt.w	801adc4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 801ac74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac76:	695b      	ldr	r3, [r3, #20]
 801ac78:	2b00      	cmp	r3, #0
 801ac7a:	d004      	beq.n	801ac86 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac7e:	3304      	adds	r3, #4
 801ac80:	4618      	mov	r0, r3
 801ac82:	f7fe f823 	bl	8018ccc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801ac86:	463b      	mov	r3, r7
 801ac88:	4618      	mov	r0, r3
 801ac8a:	f7ff ff6b 	bl	801ab64 <prvSampleTimeNow>
 801ac8e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	2b09      	cmp	r3, #9
 801ac94:	f200 8097 	bhi.w	801adc6 <prvProcessReceivedCommands+0x19e>
 801ac98:	a201      	add	r2, pc, #4	; (adr r2, 801aca0 <prvProcessReceivedCommands+0x78>)
 801ac9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac9e:	bf00      	nop
 801aca0:	0801acc9 	.word	0x0801acc9
 801aca4:	0801acc9 	.word	0x0801acc9
 801aca8:	0801acc9 	.word	0x0801acc9
 801acac:	0801ad3d 	.word	0x0801ad3d
 801acb0:	0801ad51 	.word	0x0801ad51
 801acb4:	0801ad9b 	.word	0x0801ad9b
 801acb8:	0801acc9 	.word	0x0801acc9
 801acbc:	0801acc9 	.word	0x0801acc9
 801acc0:	0801ad3d 	.word	0x0801ad3d
 801acc4:	0801ad51 	.word	0x0801ad51
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801acc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801acce:	f043 0301 	orr.w	r3, r3, #1
 801acd2:	b2da      	uxtb	r2, r3
 801acd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acd6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801acda:	68ba      	ldr	r2, [r7, #8]
 801acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acde:	699b      	ldr	r3, [r3, #24]
 801ace0:	18d1      	adds	r1, r2, r3
 801ace2:	68bb      	ldr	r3, [r7, #8]
 801ace4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ace6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ace8:	f7ff ff5c 	bl	801aba4 <prvInsertTimerInActiveList>
 801acec:	4603      	mov	r3, r0
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d069      	beq.n	801adc6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801acf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acf4:	6a1b      	ldr	r3, [r3, #32]
 801acf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801acf8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801acfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801acfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad00:	f003 0304 	and.w	r3, r3, #4
 801ad04:	2b00      	cmp	r3, #0
 801ad06:	d05e      	beq.n	801adc6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801ad08:	68ba      	ldr	r2, [r7, #8]
 801ad0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad0c:	699b      	ldr	r3, [r3, #24]
 801ad0e:	441a      	add	r2, r3
 801ad10:	2300      	movs	r3, #0
 801ad12:	9300      	str	r3, [sp, #0]
 801ad14:	2300      	movs	r3, #0
 801ad16:	2100      	movs	r1, #0
 801ad18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ad1a:	f7ff fe05 	bl	801a928 <xTimerGenericCommand>
 801ad1e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 801ad20:	6a3b      	ldr	r3, [r7, #32]
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d14f      	bne.n	801adc6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801ad26:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad2a:	f383 8811 	msr	BASEPRI, r3
 801ad2e:	f3bf 8f6f 	isb	sy
 801ad32:	f3bf 8f4f 	dsb	sy
 801ad36:	61bb      	str	r3, [r7, #24]
}
 801ad38:	bf00      	nop
 801ad3a:	e7fe      	b.n	801ad3a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801ad3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad42:	f023 0301 	bic.w	r3, r3, #1
 801ad46:	b2da      	uxtb	r2, r3
 801ad48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 801ad4e:	e03a      	b.n	801adc6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801ad50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ad56:	f043 0301 	orr.w	r3, r3, #1
 801ad5a:	b2da      	uxtb	r2, r3
 801ad5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 801ad62:	68ba      	ldr	r2, [r7, #8]
 801ad64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad66:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 801ad68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad6a:	699b      	ldr	r3, [r3, #24]
 801ad6c:	2b00      	cmp	r3, #0
 801ad6e:	d10a      	bne.n	801ad86 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 801ad70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ad74:	f383 8811 	msr	BASEPRI, r3
 801ad78:	f3bf 8f6f 	isb	sy
 801ad7c:	f3bf 8f4f 	dsb	sy
 801ad80:	617b      	str	r3, [r7, #20]
}
 801ad82:	bf00      	nop
 801ad84:	e7fe      	b.n	801ad84 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801ad86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad88:	699a      	ldr	r2, [r3, #24]
 801ad8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad8c:	18d1      	adds	r1, r2, r3
 801ad8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ad90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ad92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801ad94:	f7ff ff06 	bl	801aba4 <prvInsertTimerInActiveList>
					break;
 801ad98:	e015      	b.n	801adc6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801ad9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ad9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ada0:	f003 0302 	and.w	r3, r3, #2
 801ada4:	2b00      	cmp	r3, #0
 801ada6:	d103      	bne.n	801adb0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801ada8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801adaa:	f000 fc01 	bl	801b5b0 <vPortFree>
 801adae:	e00a      	b.n	801adc6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801adb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801adb6:	f023 0301 	bic.w	r3, r3, #1
 801adba:	b2da      	uxtb	r2, r3
 801adbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801adbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801adc2:	e000      	b.n	801adc6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801adc4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801adc6:	4b08      	ldr	r3, [pc, #32]	; (801ade8 <prvProcessReceivedCommands+0x1c0>)
 801adc8:	681b      	ldr	r3, [r3, #0]
 801adca:	1d39      	adds	r1, r7, #4
 801adcc:	2200      	movs	r2, #0
 801adce:	4618      	mov	r0, r3
 801add0:	f7fe fa44 	bl	801925c <xQueueReceive>
 801add4:	4603      	mov	r3, r0
 801add6:	2b00      	cmp	r3, #0
 801add8:	f47f af2a 	bne.w	801ac30 <prvProcessReceivedCommands+0x8>
	}
}
 801addc:	bf00      	nop
 801adde:	bf00      	nop
 801ade0:	3730      	adds	r7, #48	; 0x30
 801ade2:	46bd      	mov	sp, r7
 801ade4:	bd80      	pop	{r7, pc}
 801ade6:	bf00      	nop
 801ade8:	24003040 	.word	0x24003040

0801adec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 801adec:	b580      	push	{r7, lr}
 801adee:	b088      	sub	sp, #32
 801adf0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801adf2:	e048      	b.n	801ae86 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801adf4:	4b2d      	ldr	r3, [pc, #180]	; (801aeac <prvSwitchTimerLists+0xc0>)
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	68db      	ldr	r3, [r3, #12]
 801adfa:	681b      	ldr	r3, [r3, #0]
 801adfc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801adfe:	4b2b      	ldr	r3, [pc, #172]	; (801aeac <prvSwitchTimerLists+0xc0>)
 801ae00:	681b      	ldr	r3, [r3, #0]
 801ae02:	68db      	ldr	r3, [r3, #12]
 801ae04:	68db      	ldr	r3, [r3, #12]
 801ae06:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	3304      	adds	r3, #4
 801ae0c:	4618      	mov	r0, r3
 801ae0e:	f7fd ff5d 	bl	8018ccc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801ae12:	68fb      	ldr	r3, [r7, #12]
 801ae14:	6a1b      	ldr	r3, [r3, #32]
 801ae16:	68f8      	ldr	r0, [r7, #12]
 801ae18:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801ae1a:	68fb      	ldr	r3, [r7, #12]
 801ae1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801ae20:	f003 0304 	and.w	r3, r3, #4
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d02e      	beq.n	801ae86 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801ae28:	68fb      	ldr	r3, [r7, #12]
 801ae2a:	699b      	ldr	r3, [r3, #24]
 801ae2c:	693a      	ldr	r2, [r7, #16]
 801ae2e:	4413      	add	r3, r2
 801ae30:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 801ae32:	68ba      	ldr	r2, [r7, #8]
 801ae34:	693b      	ldr	r3, [r7, #16]
 801ae36:	429a      	cmp	r2, r3
 801ae38:	d90e      	bls.n	801ae58 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	68ba      	ldr	r2, [r7, #8]
 801ae3e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801ae40:	68fb      	ldr	r3, [r7, #12]
 801ae42:	68fa      	ldr	r2, [r7, #12]
 801ae44:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801ae46:	4b19      	ldr	r3, [pc, #100]	; (801aeac <prvSwitchTimerLists+0xc0>)
 801ae48:	681a      	ldr	r2, [r3, #0]
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	3304      	adds	r3, #4
 801ae4e:	4619      	mov	r1, r3
 801ae50:	4610      	mov	r0, r2
 801ae52:	f7fd ff02 	bl	8018c5a <vListInsert>
 801ae56:	e016      	b.n	801ae86 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801ae58:	2300      	movs	r3, #0
 801ae5a:	9300      	str	r3, [sp, #0]
 801ae5c:	2300      	movs	r3, #0
 801ae5e:	693a      	ldr	r2, [r7, #16]
 801ae60:	2100      	movs	r1, #0
 801ae62:	68f8      	ldr	r0, [r7, #12]
 801ae64:	f7ff fd60 	bl	801a928 <xTimerGenericCommand>
 801ae68:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 801ae6a:	687b      	ldr	r3, [r7, #4]
 801ae6c:	2b00      	cmp	r3, #0
 801ae6e:	d10a      	bne.n	801ae86 <prvSwitchTimerLists+0x9a>
	__asm volatile
 801ae70:	f04f 0350 	mov.w	r3, #80	; 0x50
 801ae74:	f383 8811 	msr	BASEPRI, r3
 801ae78:	f3bf 8f6f 	isb	sy
 801ae7c:	f3bf 8f4f 	dsb	sy
 801ae80:	603b      	str	r3, [r7, #0]
}
 801ae82:	bf00      	nop
 801ae84:	e7fe      	b.n	801ae84 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801ae86:	4b09      	ldr	r3, [pc, #36]	; (801aeac <prvSwitchTimerLists+0xc0>)
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d1b1      	bne.n	801adf4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 801ae90:	4b06      	ldr	r3, [pc, #24]	; (801aeac <prvSwitchTimerLists+0xc0>)
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801ae96:	4b06      	ldr	r3, [pc, #24]	; (801aeb0 <prvSwitchTimerLists+0xc4>)
 801ae98:	681b      	ldr	r3, [r3, #0]
 801ae9a:	4a04      	ldr	r2, [pc, #16]	; (801aeac <prvSwitchTimerLists+0xc0>)
 801ae9c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801ae9e:	4a04      	ldr	r2, [pc, #16]	; (801aeb0 <prvSwitchTimerLists+0xc4>)
 801aea0:	697b      	ldr	r3, [r7, #20]
 801aea2:	6013      	str	r3, [r2, #0]
}
 801aea4:	bf00      	nop
 801aea6:	3718      	adds	r7, #24
 801aea8:	46bd      	mov	sp, r7
 801aeaa:	bd80      	pop	{r7, pc}
 801aeac:	24003038 	.word	0x24003038
 801aeb0:	2400303c 	.word	0x2400303c

0801aeb4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801aeb4:	b580      	push	{r7, lr}
 801aeb6:	b082      	sub	sp, #8
 801aeb8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801aeba:	f000 f98b 	bl	801b1d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801aebe:	4b15      	ldr	r3, [pc, #84]	; (801af14 <prvCheckForValidListAndQueue+0x60>)
 801aec0:	681b      	ldr	r3, [r3, #0]
 801aec2:	2b00      	cmp	r3, #0
 801aec4:	d120      	bne.n	801af08 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801aec6:	4814      	ldr	r0, [pc, #80]	; (801af18 <prvCheckForValidListAndQueue+0x64>)
 801aec8:	f7fd fe76 	bl	8018bb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801aecc:	4813      	ldr	r0, [pc, #76]	; (801af1c <prvCheckForValidListAndQueue+0x68>)
 801aece:	f7fd fe73 	bl	8018bb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801aed2:	4b13      	ldr	r3, [pc, #76]	; (801af20 <prvCheckForValidListAndQueue+0x6c>)
 801aed4:	4a10      	ldr	r2, [pc, #64]	; (801af18 <prvCheckForValidListAndQueue+0x64>)
 801aed6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801aed8:	4b12      	ldr	r3, [pc, #72]	; (801af24 <prvCheckForValidListAndQueue+0x70>)
 801aeda:	4a10      	ldr	r2, [pc, #64]	; (801af1c <prvCheckForValidListAndQueue+0x68>)
 801aedc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801aede:	2300      	movs	r3, #0
 801aee0:	9300      	str	r3, [sp, #0]
 801aee2:	4b11      	ldr	r3, [pc, #68]	; (801af28 <prvCheckForValidListAndQueue+0x74>)
 801aee4:	4a11      	ldr	r2, [pc, #68]	; (801af2c <prvCheckForValidListAndQueue+0x78>)
 801aee6:	2110      	movs	r1, #16
 801aee8:	200a      	movs	r0, #10
 801aeea:	f7fd ff81 	bl	8018df0 <xQueueGenericCreateStatic>
 801aeee:	4603      	mov	r3, r0
 801aef0:	4a08      	ldr	r2, [pc, #32]	; (801af14 <prvCheckForValidListAndQueue+0x60>)
 801aef2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801aef4:	4b07      	ldr	r3, [pc, #28]	; (801af14 <prvCheckForValidListAndQueue+0x60>)
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	2b00      	cmp	r3, #0
 801aefa:	d005      	beq.n	801af08 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801aefc:	4b05      	ldr	r3, [pc, #20]	; (801af14 <prvCheckForValidListAndQueue+0x60>)
 801aefe:	681b      	ldr	r3, [r3, #0]
 801af00:	490b      	ldr	r1, [pc, #44]	; (801af30 <prvCheckForValidListAndQueue+0x7c>)
 801af02:	4618      	mov	r0, r3
 801af04:	f7fe fb9a 	bl	801963c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801af08:	f000 f994 	bl	801b234 <vPortExitCritical>
}
 801af0c:	bf00      	nop
 801af0e:	46bd      	mov	sp, r7
 801af10:	bd80      	pop	{r7, pc}
 801af12:	bf00      	nop
 801af14:	24003040 	.word	0x24003040
 801af18:	24003010 	.word	0x24003010
 801af1c:	24003024 	.word	0x24003024
 801af20:	24003038 	.word	0x24003038
 801af24:	2400303c 	.word	0x2400303c
 801af28:	240030ec 	.word	0x240030ec
 801af2c:	2400304c 	.word	0x2400304c
 801af30:	0801c4ec 	.word	0x0801c4ec

0801af34 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 801af34:	b580      	push	{r7, lr}
 801af36:	b08a      	sub	sp, #40	; 0x28
 801af38:	af00      	add	r7, sp, #0
 801af3a:	60f8      	str	r0, [r7, #12]
 801af3c:	60b9      	str	r1, [r7, #8]
 801af3e:	607a      	str	r2, [r7, #4]
 801af40:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 801af42:	f06f 0301 	mvn.w	r3, #1
 801af46:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801af48:	68fb      	ldr	r3, [r7, #12]
 801af4a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 801af4c:	68bb      	ldr	r3, [r7, #8]
 801af4e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801af54:	4b06      	ldr	r3, [pc, #24]	; (801af70 <xTimerPendFunctionCallFromISR+0x3c>)
 801af56:	6818      	ldr	r0, [r3, #0]
 801af58:	f107 0114 	add.w	r1, r7, #20
 801af5c:	2300      	movs	r3, #0
 801af5e:	683a      	ldr	r2, [r7, #0]
 801af60:	f7fe f8e0 	bl	8019124 <xQueueGenericSendFromISR>
 801af64:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 801af66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 801af68:	4618      	mov	r0, r3
 801af6a:	3728      	adds	r7, #40	; 0x28
 801af6c:	46bd      	mov	sp, r7
 801af6e:	bd80      	pop	{r7, pc}
 801af70:	24003040 	.word	0x24003040

0801af74 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801af74:	b480      	push	{r7}
 801af76:	b085      	sub	sp, #20
 801af78:	af00      	add	r7, sp, #0
 801af7a:	60f8      	str	r0, [r7, #12]
 801af7c:	60b9      	str	r1, [r7, #8]
 801af7e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801af80:	68fb      	ldr	r3, [r7, #12]
 801af82:	3b04      	subs	r3, #4
 801af84:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801af86:	68fb      	ldr	r3, [r7, #12]
 801af88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 801af8c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801af8e:	68fb      	ldr	r3, [r7, #12]
 801af90:	3b04      	subs	r3, #4
 801af92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801af94:	68bb      	ldr	r3, [r7, #8]
 801af96:	f023 0201 	bic.w	r2, r3, #1
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801af9e:	68fb      	ldr	r3, [r7, #12]
 801afa0:	3b04      	subs	r3, #4
 801afa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801afa4:	4a0c      	ldr	r2, [pc, #48]	; (801afd8 <pxPortInitialiseStack+0x64>)
 801afa6:	68fb      	ldr	r3, [r7, #12]
 801afa8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801afaa:	68fb      	ldr	r3, [r7, #12]
 801afac:	3b14      	subs	r3, #20
 801afae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801afb0:	687a      	ldr	r2, [r7, #4]
 801afb2:	68fb      	ldr	r3, [r7, #12]
 801afb4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801afb6:	68fb      	ldr	r3, [r7, #12]
 801afb8:	3b04      	subs	r3, #4
 801afba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801afbc:	68fb      	ldr	r3, [r7, #12]
 801afbe:	f06f 0202 	mvn.w	r2, #2
 801afc2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	3b20      	subs	r3, #32
 801afc8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801afca:	68fb      	ldr	r3, [r7, #12]
}
 801afcc:	4618      	mov	r0, r3
 801afce:	3714      	adds	r7, #20
 801afd0:	46bd      	mov	sp, r7
 801afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801afd6:	4770      	bx	lr
 801afd8:	0801afdd 	.word	0x0801afdd

0801afdc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801afdc:	b480      	push	{r7}
 801afde:	b085      	sub	sp, #20
 801afe0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801afe2:	2300      	movs	r3, #0
 801afe4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801afe6:	4b12      	ldr	r3, [pc, #72]	; (801b030 <prvTaskExitError+0x54>)
 801afe8:	681b      	ldr	r3, [r3, #0]
 801afea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801afee:	d00a      	beq.n	801b006 <prvTaskExitError+0x2a>
	__asm volatile
 801aff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801aff4:	f383 8811 	msr	BASEPRI, r3
 801aff8:	f3bf 8f6f 	isb	sy
 801affc:	f3bf 8f4f 	dsb	sy
 801b000:	60fb      	str	r3, [r7, #12]
}
 801b002:	bf00      	nop
 801b004:	e7fe      	b.n	801b004 <prvTaskExitError+0x28>
	__asm volatile
 801b006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b00a:	f383 8811 	msr	BASEPRI, r3
 801b00e:	f3bf 8f6f 	isb	sy
 801b012:	f3bf 8f4f 	dsb	sy
 801b016:	60bb      	str	r3, [r7, #8]
}
 801b018:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801b01a:	bf00      	nop
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	2b00      	cmp	r3, #0
 801b020:	d0fc      	beq.n	801b01c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801b022:	bf00      	nop
 801b024:	bf00      	nop
 801b026:	3714      	adds	r7, #20
 801b028:	46bd      	mov	sp, r7
 801b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b02e:	4770      	bx	lr
 801b030:	240000d8 	.word	0x240000d8
	...

0801b040 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801b040:	4b07      	ldr	r3, [pc, #28]	; (801b060 <pxCurrentTCBConst2>)
 801b042:	6819      	ldr	r1, [r3, #0]
 801b044:	6808      	ldr	r0, [r1, #0]
 801b046:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b04a:	f380 8809 	msr	PSP, r0
 801b04e:	f3bf 8f6f 	isb	sy
 801b052:	f04f 0000 	mov.w	r0, #0
 801b056:	f380 8811 	msr	BASEPRI, r0
 801b05a:	4770      	bx	lr
 801b05c:	f3af 8000 	nop.w

0801b060 <pxCurrentTCBConst2>:
 801b060:	24002b10 	.word	0x24002b10
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801b064:	bf00      	nop
 801b066:	bf00      	nop

0801b068 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801b068:	4808      	ldr	r0, [pc, #32]	; (801b08c <prvPortStartFirstTask+0x24>)
 801b06a:	6800      	ldr	r0, [r0, #0]
 801b06c:	6800      	ldr	r0, [r0, #0]
 801b06e:	f380 8808 	msr	MSP, r0
 801b072:	f04f 0000 	mov.w	r0, #0
 801b076:	f380 8814 	msr	CONTROL, r0
 801b07a:	b662      	cpsie	i
 801b07c:	b661      	cpsie	f
 801b07e:	f3bf 8f4f 	dsb	sy
 801b082:	f3bf 8f6f 	isb	sy
 801b086:	df00      	svc	0
 801b088:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801b08a:	bf00      	nop
 801b08c:	e000ed08 	.word	0xe000ed08

0801b090 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801b090:	b580      	push	{r7, lr}
 801b092:	b086      	sub	sp, #24
 801b094:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801b096:	4b46      	ldr	r3, [pc, #280]	; (801b1b0 <xPortStartScheduler+0x120>)
 801b098:	681b      	ldr	r3, [r3, #0]
 801b09a:	4a46      	ldr	r2, [pc, #280]	; (801b1b4 <xPortStartScheduler+0x124>)
 801b09c:	4293      	cmp	r3, r2
 801b09e:	d10a      	bne.n	801b0b6 <xPortStartScheduler+0x26>
	__asm volatile
 801b0a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0a4:	f383 8811 	msr	BASEPRI, r3
 801b0a8:	f3bf 8f6f 	isb	sy
 801b0ac:	f3bf 8f4f 	dsb	sy
 801b0b0:	613b      	str	r3, [r7, #16]
}
 801b0b2:	bf00      	nop
 801b0b4:	e7fe      	b.n	801b0b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801b0b6:	4b3e      	ldr	r3, [pc, #248]	; (801b1b0 <xPortStartScheduler+0x120>)
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	4a3f      	ldr	r2, [pc, #252]	; (801b1b8 <xPortStartScheduler+0x128>)
 801b0bc:	4293      	cmp	r3, r2
 801b0be:	d10a      	bne.n	801b0d6 <xPortStartScheduler+0x46>
	__asm volatile
 801b0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b0c4:	f383 8811 	msr	BASEPRI, r3
 801b0c8:	f3bf 8f6f 	isb	sy
 801b0cc:	f3bf 8f4f 	dsb	sy
 801b0d0:	60fb      	str	r3, [r7, #12]
}
 801b0d2:	bf00      	nop
 801b0d4:	e7fe      	b.n	801b0d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801b0d6:	4b39      	ldr	r3, [pc, #228]	; (801b1bc <xPortStartScheduler+0x12c>)
 801b0d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801b0da:	697b      	ldr	r3, [r7, #20]
 801b0dc:	781b      	ldrb	r3, [r3, #0]
 801b0de:	b2db      	uxtb	r3, r3
 801b0e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801b0e2:	697b      	ldr	r3, [r7, #20]
 801b0e4:	22ff      	movs	r2, #255	; 0xff
 801b0e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801b0e8:	697b      	ldr	r3, [r7, #20]
 801b0ea:	781b      	ldrb	r3, [r3, #0]
 801b0ec:	b2db      	uxtb	r3, r3
 801b0ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801b0f0:	78fb      	ldrb	r3, [r7, #3]
 801b0f2:	b2db      	uxtb	r3, r3
 801b0f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 801b0f8:	b2da      	uxtb	r2, r3
 801b0fa:	4b31      	ldr	r3, [pc, #196]	; (801b1c0 <xPortStartScheduler+0x130>)
 801b0fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801b0fe:	4b31      	ldr	r3, [pc, #196]	; (801b1c4 <xPortStartScheduler+0x134>)
 801b100:	2207      	movs	r2, #7
 801b102:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b104:	e009      	b.n	801b11a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 801b106:	4b2f      	ldr	r3, [pc, #188]	; (801b1c4 <xPortStartScheduler+0x134>)
 801b108:	681b      	ldr	r3, [r3, #0]
 801b10a:	3b01      	subs	r3, #1
 801b10c:	4a2d      	ldr	r2, [pc, #180]	; (801b1c4 <xPortStartScheduler+0x134>)
 801b10e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801b110:	78fb      	ldrb	r3, [r7, #3]
 801b112:	b2db      	uxtb	r3, r3
 801b114:	005b      	lsls	r3, r3, #1
 801b116:	b2db      	uxtb	r3, r3
 801b118:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801b11a:	78fb      	ldrb	r3, [r7, #3]
 801b11c:	b2db      	uxtb	r3, r3
 801b11e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b122:	2b80      	cmp	r3, #128	; 0x80
 801b124:	d0ef      	beq.n	801b106 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801b126:	4b27      	ldr	r3, [pc, #156]	; (801b1c4 <xPortStartScheduler+0x134>)
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	f1c3 0307 	rsb	r3, r3, #7
 801b12e:	2b04      	cmp	r3, #4
 801b130:	d00a      	beq.n	801b148 <xPortStartScheduler+0xb8>
	__asm volatile
 801b132:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b136:	f383 8811 	msr	BASEPRI, r3
 801b13a:	f3bf 8f6f 	isb	sy
 801b13e:	f3bf 8f4f 	dsb	sy
 801b142:	60bb      	str	r3, [r7, #8]
}
 801b144:	bf00      	nop
 801b146:	e7fe      	b.n	801b146 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801b148:	4b1e      	ldr	r3, [pc, #120]	; (801b1c4 <xPortStartScheduler+0x134>)
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	021b      	lsls	r3, r3, #8
 801b14e:	4a1d      	ldr	r2, [pc, #116]	; (801b1c4 <xPortStartScheduler+0x134>)
 801b150:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801b152:	4b1c      	ldr	r3, [pc, #112]	; (801b1c4 <xPortStartScheduler+0x134>)
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801b15a:	4a1a      	ldr	r2, [pc, #104]	; (801b1c4 <xPortStartScheduler+0x134>)
 801b15c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801b15e:	687b      	ldr	r3, [r7, #4]
 801b160:	b2da      	uxtb	r2, r3
 801b162:	697b      	ldr	r3, [r7, #20]
 801b164:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801b166:	4b18      	ldr	r3, [pc, #96]	; (801b1c8 <xPortStartScheduler+0x138>)
 801b168:	681b      	ldr	r3, [r3, #0]
 801b16a:	4a17      	ldr	r2, [pc, #92]	; (801b1c8 <xPortStartScheduler+0x138>)
 801b16c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 801b170:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801b172:	4b15      	ldr	r3, [pc, #84]	; (801b1c8 <xPortStartScheduler+0x138>)
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	4a14      	ldr	r2, [pc, #80]	; (801b1c8 <xPortStartScheduler+0x138>)
 801b178:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 801b17c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801b17e:	f000 f8dd 	bl	801b33c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801b182:	4b12      	ldr	r3, [pc, #72]	; (801b1cc <xPortStartScheduler+0x13c>)
 801b184:	2200      	movs	r2, #0
 801b186:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801b188:	f000 f8fc 	bl	801b384 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801b18c:	4b10      	ldr	r3, [pc, #64]	; (801b1d0 <xPortStartScheduler+0x140>)
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	4a0f      	ldr	r2, [pc, #60]	; (801b1d0 <xPortStartScheduler+0x140>)
 801b192:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801b196:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801b198:	f7ff ff66 	bl	801b068 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801b19c:	f7fe ff6c 	bl	801a078 <vTaskSwitchContext>
	prvTaskExitError();
 801b1a0:	f7ff ff1c 	bl	801afdc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801b1a4:	2300      	movs	r3, #0
}
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	3718      	adds	r7, #24
 801b1aa:	46bd      	mov	sp, r7
 801b1ac:	bd80      	pop	{r7, pc}
 801b1ae:	bf00      	nop
 801b1b0:	e000ed00 	.word	0xe000ed00
 801b1b4:	410fc271 	.word	0x410fc271
 801b1b8:	410fc270 	.word	0x410fc270
 801b1bc:	e000e400 	.word	0xe000e400
 801b1c0:	2400313c 	.word	0x2400313c
 801b1c4:	24003140 	.word	0x24003140
 801b1c8:	e000ed20 	.word	0xe000ed20
 801b1cc:	240000d8 	.word	0x240000d8
 801b1d0:	e000ef34 	.word	0xe000ef34

0801b1d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801b1d4:	b480      	push	{r7}
 801b1d6:	b083      	sub	sp, #12
 801b1d8:	af00      	add	r7, sp, #0
	__asm volatile
 801b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b1de:	f383 8811 	msr	BASEPRI, r3
 801b1e2:	f3bf 8f6f 	isb	sy
 801b1e6:	f3bf 8f4f 	dsb	sy
 801b1ea:	607b      	str	r3, [r7, #4]
}
 801b1ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801b1ee:	4b0f      	ldr	r3, [pc, #60]	; (801b22c <vPortEnterCritical+0x58>)
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	3301      	adds	r3, #1
 801b1f4:	4a0d      	ldr	r2, [pc, #52]	; (801b22c <vPortEnterCritical+0x58>)
 801b1f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801b1f8:	4b0c      	ldr	r3, [pc, #48]	; (801b22c <vPortEnterCritical+0x58>)
 801b1fa:	681b      	ldr	r3, [r3, #0]
 801b1fc:	2b01      	cmp	r3, #1
 801b1fe:	d10f      	bne.n	801b220 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801b200:	4b0b      	ldr	r3, [pc, #44]	; (801b230 <vPortEnterCritical+0x5c>)
 801b202:	681b      	ldr	r3, [r3, #0]
 801b204:	b2db      	uxtb	r3, r3
 801b206:	2b00      	cmp	r3, #0
 801b208:	d00a      	beq.n	801b220 <vPortEnterCritical+0x4c>
	__asm volatile
 801b20a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b20e:	f383 8811 	msr	BASEPRI, r3
 801b212:	f3bf 8f6f 	isb	sy
 801b216:	f3bf 8f4f 	dsb	sy
 801b21a:	603b      	str	r3, [r7, #0]
}
 801b21c:	bf00      	nop
 801b21e:	e7fe      	b.n	801b21e <vPortEnterCritical+0x4a>
	}
}
 801b220:	bf00      	nop
 801b222:	370c      	adds	r7, #12
 801b224:	46bd      	mov	sp, r7
 801b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b22a:	4770      	bx	lr
 801b22c:	240000d8 	.word	0x240000d8
 801b230:	e000ed04 	.word	0xe000ed04

0801b234 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801b234:	b480      	push	{r7}
 801b236:	b083      	sub	sp, #12
 801b238:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801b23a:	4b12      	ldr	r3, [pc, #72]	; (801b284 <vPortExitCritical+0x50>)
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	2b00      	cmp	r3, #0
 801b240:	d10a      	bne.n	801b258 <vPortExitCritical+0x24>
	__asm volatile
 801b242:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b246:	f383 8811 	msr	BASEPRI, r3
 801b24a:	f3bf 8f6f 	isb	sy
 801b24e:	f3bf 8f4f 	dsb	sy
 801b252:	607b      	str	r3, [r7, #4]
}
 801b254:	bf00      	nop
 801b256:	e7fe      	b.n	801b256 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801b258:	4b0a      	ldr	r3, [pc, #40]	; (801b284 <vPortExitCritical+0x50>)
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	3b01      	subs	r3, #1
 801b25e:	4a09      	ldr	r2, [pc, #36]	; (801b284 <vPortExitCritical+0x50>)
 801b260:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801b262:	4b08      	ldr	r3, [pc, #32]	; (801b284 <vPortExitCritical+0x50>)
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	2b00      	cmp	r3, #0
 801b268:	d105      	bne.n	801b276 <vPortExitCritical+0x42>
 801b26a:	2300      	movs	r3, #0
 801b26c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b26e:	683b      	ldr	r3, [r7, #0]
 801b270:	f383 8811 	msr	BASEPRI, r3
}
 801b274:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801b276:	bf00      	nop
 801b278:	370c      	adds	r7, #12
 801b27a:	46bd      	mov	sp, r7
 801b27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b280:	4770      	bx	lr
 801b282:	bf00      	nop
 801b284:	240000d8 	.word	0x240000d8
	...

0801b290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801b290:	f3ef 8009 	mrs	r0, PSP
 801b294:	f3bf 8f6f 	isb	sy
 801b298:	4b15      	ldr	r3, [pc, #84]	; (801b2f0 <pxCurrentTCBConst>)
 801b29a:	681a      	ldr	r2, [r3, #0]
 801b29c:	f01e 0f10 	tst.w	lr, #16
 801b2a0:	bf08      	it	eq
 801b2a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801b2a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2aa:	6010      	str	r0, [r2, #0]
 801b2ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 801b2b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 801b2b4:	f380 8811 	msr	BASEPRI, r0
 801b2b8:	f3bf 8f4f 	dsb	sy
 801b2bc:	f3bf 8f6f 	isb	sy
 801b2c0:	f7fe feda 	bl	801a078 <vTaskSwitchContext>
 801b2c4:	f04f 0000 	mov.w	r0, #0
 801b2c8:	f380 8811 	msr	BASEPRI, r0
 801b2cc:	bc09      	pop	{r0, r3}
 801b2ce:	6819      	ldr	r1, [r3, #0]
 801b2d0:	6808      	ldr	r0, [r1, #0]
 801b2d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2d6:	f01e 0f10 	tst.w	lr, #16
 801b2da:	bf08      	it	eq
 801b2dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801b2e0:	f380 8809 	msr	PSP, r0
 801b2e4:	f3bf 8f6f 	isb	sy
 801b2e8:	4770      	bx	lr
 801b2ea:	bf00      	nop
 801b2ec:	f3af 8000 	nop.w

0801b2f0 <pxCurrentTCBConst>:
 801b2f0:	24002b10 	.word	0x24002b10
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801b2f4:	bf00      	nop
 801b2f6:	bf00      	nop

0801b2f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b082      	sub	sp, #8
 801b2fc:	af00      	add	r7, sp, #0
	__asm volatile
 801b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b302:	f383 8811 	msr	BASEPRI, r3
 801b306:	f3bf 8f6f 	isb	sy
 801b30a:	f3bf 8f4f 	dsb	sy
 801b30e:	607b      	str	r3, [r7, #4]
}
 801b310:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801b312:	f7fe fdef 	bl	8019ef4 <xTaskIncrementTick>
 801b316:	4603      	mov	r3, r0
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d003      	beq.n	801b324 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801b31c:	4b06      	ldr	r3, [pc, #24]	; (801b338 <xPortSysTickHandler+0x40>)
 801b31e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801b322:	601a      	str	r2, [r3, #0]
 801b324:	2300      	movs	r3, #0
 801b326:	603b      	str	r3, [r7, #0]
	__asm volatile
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	f383 8811 	msr	BASEPRI, r3
}
 801b32e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801b330:	bf00      	nop
 801b332:	3708      	adds	r7, #8
 801b334:	46bd      	mov	sp, r7
 801b336:	bd80      	pop	{r7, pc}
 801b338:	e000ed04 	.word	0xe000ed04

0801b33c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801b33c:	b480      	push	{r7}
 801b33e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801b340:	4b0b      	ldr	r3, [pc, #44]	; (801b370 <vPortSetupTimerInterrupt+0x34>)
 801b342:	2200      	movs	r2, #0
 801b344:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801b346:	4b0b      	ldr	r3, [pc, #44]	; (801b374 <vPortSetupTimerInterrupt+0x38>)
 801b348:	2200      	movs	r2, #0
 801b34a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801b34c:	4b0a      	ldr	r3, [pc, #40]	; (801b378 <vPortSetupTimerInterrupt+0x3c>)
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	4a0a      	ldr	r2, [pc, #40]	; (801b37c <vPortSetupTimerInterrupt+0x40>)
 801b352:	fba2 2303 	umull	r2, r3, r2, r3
 801b356:	099b      	lsrs	r3, r3, #6
 801b358:	4a09      	ldr	r2, [pc, #36]	; (801b380 <vPortSetupTimerInterrupt+0x44>)
 801b35a:	3b01      	subs	r3, #1
 801b35c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801b35e:	4b04      	ldr	r3, [pc, #16]	; (801b370 <vPortSetupTimerInterrupt+0x34>)
 801b360:	2207      	movs	r2, #7
 801b362:	601a      	str	r2, [r3, #0]
}
 801b364:	bf00      	nop
 801b366:	46bd      	mov	sp, r7
 801b368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b36c:	4770      	bx	lr
 801b36e:	bf00      	nop
 801b370:	e000e010 	.word	0xe000e010
 801b374:	e000e018 	.word	0xe000e018
 801b378:	240000c8 	.word	0x240000c8
 801b37c:	10624dd3 	.word	0x10624dd3
 801b380:	e000e014 	.word	0xe000e014

0801b384 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801b384:	f8df 000c 	ldr.w	r0, [pc, #12]	; 801b394 <vPortEnableVFP+0x10>
 801b388:	6801      	ldr	r1, [r0, #0]
 801b38a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801b38e:	6001      	str	r1, [r0, #0]
 801b390:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801b392:	bf00      	nop
 801b394:	e000ed88 	.word	0xe000ed88

0801b398 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801b398:	b480      	push	{r7}
 801b39a:	b085      	sub	sp, #20
 801b39c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801b39e:	f3ef 8305 	mrs	r3, IPSR
 801b3a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 801b3a4:	68fb      	ldr	r3, [r7, #12]
 801b3a6:	2b0f      	cmp	r3, #15
 801b3a8:	d914      	bls.n	801b3d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801b3aa:	4a17      	ldr	r2, [pc, #92]	; (801b408 <vPortValidateInterruptPriority+0x70>)
 801b3ac:	68fb      	ldr	r3, [r7, #12]
 801b3ae:	4413      	add	r3, r2
 801b3b0:	781b      	ldrb	r3, [r3, #0]
 801b3b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 801b3b4:	4b15      	ldr	r3, [pc, #84]	; (801b40c <vPortValidateInterruptPriority+0x74>)
 801b3b6:	781b      	ldrb	r3, [r3, #0]
 801b3b8:	7afa      	ldrb	r2, [r7, #11]
 801b3ba:	429a      	cmp	r2, r3
 801b3bc:	d20a      	bcs.n	801b3d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801b3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3c2:	f383 8811 	msr	BASEPRI, r3
 801b3c6:	f3bf 8f6f 	isb	sy
 801b3ca:	f3bf 8f4f 	dsb	sy
 801b3ce:	607b      	str	r3, [r7, #4]
}
 801b3d0:	bf00      	nop
 801b3d2:	e7fe      	b.n	801b3d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801b3d4:	4b0e      	ldr	r3, [pc, #56]	; (801b410 <vPortValidateInterruptPriority+0x78>)
 801b3d6:	681b      	ldr	r3, [r3, #0]
 801b3d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801b3dc:	4b0d      	ldr	r3, [pc, #52]	; (801b414 <vPortValidateInterruptPriority+0x7c>)
 801b3de:	681b      	ldr	r3, [r3, #0]
 801b3e0:	429a      	cmp	r2, r3
 801b3e2:	d90a      	bls.n	801b3fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 801b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b3e8:	f383 8811 	msr	BASEPRI, r3
 801b3ec:	f3bf 8f6f 	isb	sy
 801b3f0:	f3bf 8f4f 	dsb	sy
 801b3f4:	603b      	str	r3, [r7, #0]
}
 801b3f6:	bf00      	nop
 801b3f8:	e7fe      	b.n	801b3f8 <vPortValidateInterruptPriority+0x60>
	}
 801b3fa:	bf00      	nop
 801b3fc:	3714      	adds	r7, #20
 801b3fe:	46bd      	mov	sp, r7
 801b400:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b404:	4770      	bx	lr
 801b406:	bf00      	nop
 801b408:	e000e3f0 	.word	0xe000e3f0
 801b40c:	2400313c 	.word	0x2400313c
 801b410:	e000ed0c 	.word	0xe000ed0c
 801b414:	24003140 	.word	0x24003140

0801b418 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801b418:	b580      	push	{r7, lr}
 801b41a:	b08a      	sub	sp, #40	; 0x28
 801b41c:	af00      	add	r7, sp, #0
 801b41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801b420:	2300      	movs	r3, #0
 801b422:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 801b424:	f7fe fcaa 	bl	8019d7c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801b428:	4b5b      	ldr	r3, [pc, #364]	; (801b598 <pvPortMalloc+0x180>)
 801b42a:	681b      	ldr	r3, [r3, #0]
 801b42c:	2b00      	cmp	r3, #0
 801b42e:	d101      	bne.n	801b434 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801b430:	f000 f920 	bl	801b674 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 801b434:	4b59      	ldr	r3, [pc, #356]	; (801b59c <pvPortMalloc+0x184>)
 801b436:	681a      	ldr	r2, [r3, #0]
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	4013      	ands	r3, r2
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	f040 8093 	bne.w	801b568 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	2b00      	cmp	r3, #0
 801b446:	d01d      	beq.n	801b484 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 801b448:	2208      	movs	r2, #8
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	4413      	add	r3, r2
 801b44e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	f003 0307 	and.w	r3, r3, #7
 801b456:	2b00      	cmp	r3, #0
 801b458:	d014      	beq.n	801b484 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	f023 0307 	bic.w	r3, r3, #7
 801b460:	3308      	adds	r3, #8
 801b462:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	f003 0307 	and.w	r3, r3, #7
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d00a      	beq.n	801b484 <pvPortMalloc+0x6c>
	__asm volatile
 801b46e:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b472:	f383 8811 	msr	BASEPRI, r3
 801b476:	f3bf 8f6f 	isb	sy
 801b47a:	f3bf 8f4f 	dsb	sy
 801b47e:	617b      	str	r3, [r7, #20]
}
 801b480:	bf00      	nop
 801b482:	e7fe      	b.n	801b482 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801b484:	687b      	ldr	r3, [r7, #4]
 801b486:	2b00      	cmp	r3, #0
 801b488:	d06e      	beq.n	801b568 <pvPortMalloc+0x150>
 801b48a:	4b45      	ldr	r3, [pc, #276]	; (801b5a0 <pvPortMalloc+0x188>)
 801b48c:	681b      	ldr	r3, [r3, #0]
 801b48e:	687a      	ldr	r2, [r7, #4]
 801b490:	429a      	cmp	r2, r3
 801b492:	d869      	bhi.n	801b568 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 801b494:	4b43      	ldr	r3, [pc, #268]	; (801b5a4 <pvPortMalloc+0x18c>)
 801b496:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 801b498:	4b42      	ldr	r3, [pc, #264]	; (801b5a4 <pvPortMalloc+0x18c>)
 801b49a:	681b      	ldr	r3, [r3, #0]
 801b49c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b49e:	e004      	b.n	801b4aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 801b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 801b4a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801b4aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4ac:	685b      	ldr	r3, [r3, #4]
 801b4ae:	687a      	ldr	r2, [r7, #4]
 801b4b0:	429a      	cmp	r2, r3
 801b4b2:	d903      	bls.n	801b4bc <pvPortMalloc+0xa4>
 801b4b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	2b00      	cmp	r3, #0
 801b4ba:	d1f1      	bne.n	801b4a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801b4bc:	4b36      	ldr	r3, [pc, #216]	; (801b598 <pvPortMalloc+0x180>)
 801b4be:	681b      	ldr	r3, [r3, #0]
 801b4c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4c2:	429a      	cmp	r2, r3
 801b4c4:	d050      	beq.n	801b568 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 801b4c6:	6a3b      	ldr	r3, [r7, #32]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	2208      	movs	r2, #8
 801b4cc:	4413      	add	r3, r2
 801b4ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 801b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4d2:	681a      	ldr	r2, [r3, #0]
 801b4d4:	6a3b      	ldr	r3, [r7, #32]
 801b4d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 801b4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b4da:	685a      	ldr	r2, [r3, #4]
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	1ad2      	subs	r2, r2, r3
 801b4e0:	2308      	movs	r3, #8
 801b4e2:	005b      	lsls	r3, r3, #1
 801b4e4:	429a      	cmp	r2, r3
 801b4e6:	d91f      	bls.n	801b528 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 801b4e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b4ea:	687b      	ldr	r3, [r7, #4]
 801b4ec:	4413      	add	r3, r2
 801b4ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 801b4f0:	69bb      	ldr	r3, [r7, #24]
 801b4f2:	f003 0307 	and.w	r3, r3, #7
 801b4f6:	2b00      	cmp	r3, #0
 801b4f8:	d00a      	beq.n	801b510 <pvPortMalloc+0xf8>
	__asm volatile
 801b4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b4fe:	f383 8811 	msr	BASEPRI, r3
 801b502:	f3bf 8f6f 	isb	sy
 801b506:	f3bf 8f4f 	dsb	sy
 801b50a:	613b      	str	r3, [r7, #16]
}
 801b50c:	bf00      	nop
 801b50e:	e7fe      	b.n	801b50e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 801b510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b512:	685a      	ldr	r2, [r3, #4]
 801b514:	687b      	ldr	r3, [r7, #4]
 801b516:	1ad2      	subs	r2, r2, r3
 801b518:	69bb      	ldr	r3, [r7, #24]
 801b51a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 801b51c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b51e:	687a      	ldr	r2, [r7, #4]
 801b520:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801b522:	69b8      	ldr	r0, [r7, #24]
 801b524:	f000 f908 	bl	801b738 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801b528:	4b1d      	ldr	r3, [pc, #116]	; (801b5a0 <pvPortMalloc+0x188>)
 801b52a:	681a      	ldr	r2, [r3, #0]
 801b52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b52e:	685b      	ldr	r3, [r3, #4]
 801b530:	1ad3      	subs	r3, r2, r3
 801b532:	4a1b      	ldr	r2, [pc, #108]	; (801b5a0 <pvPortMalloc+0x188>)
 801b534:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801b536:	4b1a      	ldr	r3, [pc, #104]	; (801b5a0 <pvPortMalloc+0x188>)
 801b538:	681a      	ldr	r2, [r3, #0]
 801b53a:	4b1b      	ldr	r3, [pc, #108]	; (801b5a8 <pvPortMalloc+0x190>)
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	429a      	cmp	r2, r3
 801b540:	d203      	bcs.n	801b54a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801b542:	4b17      	ldr	r3, [pc, #92]	; (801b5a0 <pvPortMalloc+0x188>)
 801b544:	681b      	ldr	r3, [r3, #0]
 801b546:	4a18      	ldr	r2, [pc, #96]	; (801b5a8 <pvPortMalloc+0x190>)
 801b548:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801b54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b54c:	685a      	ldr	r2, [r3, #4]
 801b54e:	4b13      	ldr	r3, [pc, #76]	; (801b59c <pvPortMalloc+0x184>)
 801b550:	681b      	ldr	r3, [r3, #0]
 801b552:	431a      	orrs	r2, r3
 801b554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b556:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801b558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b55a:	2200      	movs	r2, #0
 801b55c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801b55e:	4b13      	ldr	r3, [pc, #76]	; (801b5ac <pvPortMalloc+0x194>)
 801b560:	681b      	ldr	r3, [r3, #0]
 801b562:	3301      	adds	r3, #1
 801b564:	4a11      	ldr	r2, [pc, #68]	; (801b5ac <pvPortMalloc+0x194>)
 801b566:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801b568:	f7fe fc16 	bl	8019d98 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801b56c:	69fb      	ldr	r3, [r7, #28]
 801b56e:	f003 0307 	and.w	r3, r3, #7
 801b572:	2b00      	cmp	r3, #0
 801b574:	d00a      	beq.n	801b58c <pvPortMalloc+0x174>
	__asm volatile
 801b576:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b57a:	f383 8811 	msr	BASEPRI, r3
 801b57e:	f3bf 8f6f 	isb	sy
 801b582:	f3bf 8f4f 	dsb	sy
 801b586:	60fb      	str	r3, [r7, #12]
}
 801b588:	bf00      	nop
 801b58a:	e7fe      	b.n	801b58a <pvPortMalloc+0x172>
	return pvReturn;
 801b58c:	69fb      	ldr	r3, [r7, #28]
}
 801b58e:	4618      	mov	r0, r3
 801b590:	3728      	adds	r7, #40	; 0x28
 801b592:	46bd      	mov	sp, r7
 801b594:	bd80      	pop	{r7, pc}
 801b596:	bf00      	nop
 801b598:	24006d4c 	.word	0x24006d4c
 801b59c:	24006d60 	.word	0x24006d60
 801b5a0:	24006d50 	.word	0x24006d50
 801b5a4:	24006d44 	.word	0x24006d44
 801b5a8:	24006d54 	.word	0x24006d54
 801b5ac:	24006d58 	.word	0x24006d58

0801b5b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801b5b0:	b580      	push	{r7, lr}
 801b5b2:	b086      	sub	sp, #24
 801b5b4:	af00      	add	r7, sp, #0
 801b5b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801b5b8:	687b      	ldr	r3, [r7, #4]
 801b5ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801b5bc:	687b      	ldr	r3, [r7, #4]
 801b5be:	2b00      	cmp	r3, #0
 801b5c0:	d04d      	beq.n	801b65e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801b5c2:	2308      	movs	r3, #8
 801b5c4:	425b      	negs	r3, r3
 801b5c6:	697a      	ldr	r2, [r7, #20]
 801b5c8:	4413      	add	r3, r2
 801b5ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801b5cc:	697b      	ldr	r3, [r7, #20]
 801b5ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 801b5d0:	693b      	ldr	r3, [r7, #16]
 801b5d2:	685a      	ldr	r2, [r3, #4]
 801b5d4:	4b24      	ldr	r3, [pc, #144]	; (801b668 <vPortFree+0xb8>)
 801b5d6:	681b      	ldr	r3, [r3, #0]
 801b5d8:	4013      	ands	r3, r2
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	d10a      	bne.n	801b5f4 <vPortFree+0x44>
	__asm volatile
 801b5de:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b5e2:	f383 8811 	msr	BASEPRI, r3
 801b5e6:	f3bf 8f6f 	isb	sy
 801b5ea:	f3bf 8f4f 	dsb	sy
 801b5ee:	60fb      	str	r3, [r7, #12]
}
 801b5f0:	bf00      	nop
 801b5f2:	e7fe      	b.n	801b5f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801b5f4:	693b      	ldr	r3, [r7, #16]
 801b5f6:	681b      	ldr	r3, [r3, #0]
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d00a      	beq.n	801b612 <vPortFree+0x62>
	__asm volatile
 801b5fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 801b600:	f383 8811 	msr	BASEPRI, r3
 801b604:	f3bf 8f6f 	isb	sy
 801b608:	f3bf 8f4f 	dsb	sy
 801b60c:	60bb      	str	r3, [r7, #8]
}
 801b60e:	bf00      	nop
 801b610:	e7fe      	b.n	801b610 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801b612:	693b      	ldr	r3, [r7, #16]
 801b614:	685a      	ldr	r2, [r3, #4]
 801b616:	4b14      	ldr	r3, [pc, #80]	; (801b668 <vPortFree+0xb8>)
 801b618:	681b      	ldr	r3, [r3, #0]
 801b61a:	4013      	ands	r3, r2
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d01e      	beq.n	801b65e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801b620:	693b      	ldr	r3, [r7, #16]
 801b622:	681b      	ldr	r3, [r3, #0]
 801b624:	2b00      	cmp	r3, #0
 801b626:	d11a      	bne.n	801b65e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 801b628:	693b      	ldr	r3, [r7, #16]
 801b62a:	685a      	ldr	r2, [r3, #4]
 801b62c:	4b0e      	ldr	r3, [pc, #56]	; (801b668 <vPortFree+0xb8>)
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	43db      	mvns	r3, r3
 801b632:	401a      	ands	r2, r3
 801b634:	693b      	ldr	r3, [r7, #16]
 801b636:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 801b638:	f7fe fba0 	bl	8019d7c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 801b63c:	693b      	ldr	r3, [r7, #16]
 801b63e:	685a      	ldr	r2, [r3, #4]
 801b640:	4b0a      	ldr	r3, [pc, #40]	; (801b66c <vPortFree+0xbc>)
 801b642:	681b      	ldr	r3, [r3, #0]
 801b644:	4413      	add	r3, r2
 801b646:	4a09      	ldr	r2, [pc, #36]	; (801b66c <vPortFree+0xbc>)
 801b648:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 801b64a:	6938      	ldr	r0, [r7, #16]
 801b64c:	f000 f874 	bl	801b738 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801b650:	4b07      	ldr	r3, [pc, #28]	; (801b670 <vPortFree+0xc0>)
 801b652:	681b      	ldr	r3, [r3, #0]
 801b654:	3301      	adds	r3, #1
 801b656:	4a06      	ldr	r2, [pc, #24]	; (801b670 <vPortFree+0xc0>)
 801b658:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801b65a:	f7fe fb9d 	bl	8019d98 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801b65e:	bf00      	nop
 801b660:	3718      	adds	r7, #24
 801b662:	46bd      	mov	sp, r7
 801b664:	bd80      	pop	{r7, pc}
 801b666:	bf00      	nop
 801b668:	24006d60 	.word	0x24006d60
 801b66c:	24006d50 	.word	0x24006d50
 801b670:	24006d5c 	.word	0x24006d5c

0801b674 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 801b674:	b480      	push	{r7}
 801b676:	b085      	sub	sp, #20
 801b678:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801b67a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801b67e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801b680:	4b27      	ldr	r3, [pc, #156]	; (801b720 <prvHeapInit+0xac>)
 801b682:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 801b684:	68fb      	ldr	r3, [r7, #12]
 801b686:	f003 0307 	and.w	r3, r3, #7
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d00c      	beq.n	801b6a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801b68e:	68fb      	ldr	r3, [r7, #12]
 801b690:	3307      	adds	r3, #7
 801b692:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b694:	68fb      	ldr	r3, [r7, #12]
 801b696:	f023 0307 	bic.w	r3, r3, #7
 801b69a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801b69c:	68ba      	ldr	r2, [r7, #8]
 801b69e:	68fb      	ldr	r3, [r7, #12]
 801b6a0:	1ad3      	subs	r3, r2, r3
 801b6a2:	4a1f      	ldr	r2, [pc, #124]	; (801b720 <prvHeapInit+0xac>)
 801b6a4:	4413      	add	r3, r2
 801b6a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 801b6a8:	68fb      	ldr	r3, [r7, #12]
 801b6aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801b6ac:	4a1d      	ldr	r2, [pc, #116]	; (801b724 <prvHeapInit+0xb0>)
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801b6b2:	4b1c      	ldr	r3, [pc, #112]	; (801b724 <prvHeapInit+0xb0>)
 801b6b4:	2200      	movs	r2, #0
 801b6b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 801b6b8:	687b      	ldr	r3, [r7, #4]
 801b6ba:	68ba      	ldr	r2, [r7, #8]
 801b6bc:	4413      	add	r3, r2
 801b6be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801b6c0:	2208      	movs	r2, #8
 801b6c2:	68fb      	ldr	r3, [r7, #12]
 801b6c4:	1a9b      	subs	r3, r3, r2
 801b6c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 801b6c8:	68fb      	ldr	r3, [r7, #12]
 801b6ca:	f023 0307 	bic.w	r3, r3, #7
 801b6ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801b6d0:	68fb      	ldr	r3, [r7, #12]
 801b6d2:	4a15      	ldr	r2, [pc, #84]	; (801b728 <prvHeapInit+0xb4>)
 801b6d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 801b6d6:	4b14      	ldr	r3, [pc, #80]	; (801b728 <prvHeapInit+0xb4>)
 801b6d8:	681b      	ldr	r3, [r3, #0]
 801b6da:	2200      	movs	r2, #0
 801b6dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801b6de:	4b12      	ldr	r3, [pc, #72]	; (801b728 <prvHeapInit+0xb4>)
 801b6e0:	681b      	ldr	r3, [r3, #0]
 801b6e2:	2200      	movs	r2, #0
 801b6e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 801b6e6:	687b      	ldr	r3, [r7, #4]
 801b6e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801b6ea:	683b      	ldr	r3, [r7, #0]
 801b6ec:	68fa      	ldr	r2, [r7, #12]
 801b6ee:	1ad2      	subs	r2, r2, r3
 801b6f0:	683b      	ldr	r3, [r7, #0]
 801b6f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 801b6f4:	4b0c      	ldr	r3, [pc, #48]	; (801b728 <prvHeapInit+0xb4>)
 801b6f6:	681a      	ldr	r2, [r3, #0]
 801b6f8:	683b      	ldr	r3, [r7, #0]
 801b6fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b6fc:	683b      	ldr	r3, [r7, #0]
 801b6fe:	685b      	ldr	r3, [r3, #4]
 801b700:	4a0a      	ldr	r2, [pc, #40]	; (801b72c <prvHeapInit+0xb8>)
 801b702:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801b704:	683b      	ldr	r3, [r7, #0]
 801b706:	685b      	ldr	r3, [r3, #4]
 801b708:	4a09      	ldr	r2, [pc, #36]	; (801b730 <prvHeapInit+0xbc>)
 801b70a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801b70c:	4b09      	ldr	r3, [pc, #36]	; (801b734 <prvHeapInit+0xc0>)
 801b70e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801b712:	601a      	str	r2, [r3, #0]
}
 801b714:	bf00      	nop
 801b716:	3714      	adds	r7, #20
 801b718:	46bd      	mov	sp, r7
 801b71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b71e:	4770      	bx	lr
 801b720:	24003144 	.word	0x24003144
 801b724:	24006d44 	.word	0x24006d44
 801b728:	24006d4c 	.word	0x24006d4c
 801b72c:	24006d54 	.word	0x24006d54
 801b730:	24006d50 	.word	0x24006d50
 801b734:	24006d60 	.word	0x24006d60

0801b738 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 801b738:	b480      	push	{r7}
 801b73a:	b085      	sub	sp, #20
 801b73c:	af00      	add	r7, sp, #0
 801b73e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801b740:	4b28      	ldr	r3, [pc, #160]	; (801b7e4 <prvInsertBlockIntoFreeList+0xac>)
 801b742:	60fb      	str	r3, [r7, #12]
 801b744:	e002      	b.n	801b74c <prvInsertBlockIntoFreeList+0x14>
 801b746:	68fb      	ldr	r3, [r7, #12]
 801b748:	681b      	ldr	r3, [r3, #0]
 801b74a:	60fb      	str	r3, [r7, #12]
 801b74c:	68fb      	ldr	r3, [r7, #12]
 801b74e:	681b      	ldr	r3, [r3, #0]
 801b750:	687a      	ldr	r2, [r7, #4]
 801b752:	429a      	cmp	r2, r3
 801b754:	d8f7      	bhi.n	801b746 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 801b756:	68fb      	ldr	r3, [r7, #12]
 801b758:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801b75a:	68fb      	ldr	r3, [r7, #12]
 801b75c:	685b      	ldr	r3, [r3, #4]
 801b75e:	68ba      	ldr	r2, [r7, #8]
 801b760:	4413      	add	r3, r2
 801b762:	687a      	ldr	r2, [r7, #4]
 801b764:	429a      	cmp	r2, r3
 801b766:	d108      	bne.n	801b77a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801b768:	68fb      	ldr	r3, [r7, #12]
 801b76a:	685a      	ldr	r2, [r3, #4]
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	685b      	ldr	r3, [r3, #4]
 801b770:	441a      	add	r2, r3
 801b772:	68fb      	ldr	r3, [r7, #12]
 801b774:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801b776:	68fb      	ldr	r3, [r7, #12]
 801b778:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801b77e:	687b      	ldr	r3, [r7, #4]
 801b780:	685b      	ldr	r3, [r3, #4]
 801b782:	68ba      	ldr	r2, [r7, #8]
 801b784:	441a      	add	r2, r3
 801b786:	68fb      	ldr	r3, [r7, #12]
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	429a      	cmp	r2, r3
 801b78c:	d118      	bne.n	801b7c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801b78e:	68fb      	ldr	r3, [r7, #12]
 801b790:	681a      	ldr	r2, [r3, #0]
 801b792:	4b15      	ldr	r3, [pc, #84]	; (801b7e8 <prvInsertBlockIntoFreeList+0xb0>)
 801b794:	681b      	ldr	r3, [r3, #0]
 801b796:	429a      	cmp	r2, r3
 801b798:	d00d      	beq.n	801b7b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	685a      	ldr	r2, [r3, #4]
 801b79e:	68fb      	ldr	r3, [r7, #12]
 801b7a0:	681b      	ldr	r3, [r3, #0]
 801b7a2:	685b      	ldr	r3, [r3, #4]
 801b7a4:	441a      	add	r2, r3
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	681b      	ldr	r3, [r3, #0]
 801b7ae:	681a      	ldr	r2, [r3, #0]
 801b7b0:	687b      	ldr	r3, [r7, #4]
 801b7b2:	601a      	str	r2, [r3, #0]
 801b7b4:	e008      	b.n	801b7c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801b7b6:	4b0c      	ldr	r3, [pc, #48]	; (801b7e8 <prvInsertBlockIntoFreeList+0xb0>)
 801b7b8:	681a      	ldr	r2, [r3, #0]
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	601a      	str	r2, [r3, #0]
 801b7be:	e003      	b.n	801b7c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801b7c0:	68fb      	ldr	r3, [r7, #12]
 801b7c2:	681a      	ldr	r2, [r3, #0]
 801b7c4:	687b      	ldr	r3, [r7, #4]
 801b7c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801b7c8:	68fa      	ldr	r2, [r7, #12]
 801b7ca:	687b      	ldr	r3, [r7, #4]
 801b7cc:	429a      	cmp	r2, r3
 801b7ce:	d002      	beq.n	801b7d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801b7d0:	68fb      	ldr	r3, [r7, #12]
 801b7d2:	687a      	ldr	r2, [r7, #4]
 801b7d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b7d6:	bf00      	nop
 801b7d8:	3714      	adds	r7, #20
 801b7da:	46bd      	mov	sp, r7
 801b7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7e0:	4770      	bx	lr
 801b7e2:	bf00      	nop
 801b7e4:	24006d44 	.word	0x24006d44
 801b7e8:	24006d4c 	.word	0x24006d4c

0801b7ec <__errno>:
 801b7ec:	4b01      	ldr	r3, [pc, #4]	; (801b7f4 <__errno+0x8>)
 801b7ee:	6818      	ldr	r0, [r3, #0]
 801b7f0:	4770      	bx	lr
 801b7f2:	bf00      	nop
 801b7f4:	240000dc 	.word	0x240000dc

0801b7f8 <__libc_init_array>:
 801b7f8:	b570      	push	{r4, r5, r6, lr}
 801b7fa:	4d0d      	ldr	r5, [pc, #52]	; (801b830 <__libc_init_array+0x38>)
 801b7fc:	4c0d      	ldr	r4, [pc, #52]	; (801b834 <__libc_init_array+0x3c>)
 801b7fe:	1b64      	subs	r4, r4, r5
 801b800:	10a4      	asrs	r4, r4, #2
 801b802:	2600      	movs	r6, #0
 801b804:	42a6      	cmp	r6, r4
 801b806:	d109      	bne.n	801b81c <__libc_init_array+0x24>
 801b808:	4d0b      	ldr	r5, [pc, #44]	; (801b838 <__libc_init_array+0x40>)
 801b80a:	4c0c      	ldr	r4, [pc, #48]	; (801b83c <__libc_init_array+0x44>)
 801b80c:	f000 fd2c 	bl	801c268 <_init>
 801b810:	1b64      	subs	r4, r4, r5
 801b812:	10a4      	asrs	r4, r4, #2
 801b814:	2600      	movs	r6, #0
 801b816:	42a6      	cmp	r6, r4
 801b818:	d105      	bne.n	801b826 <__libc_init_array+0x2e>
 801b81a:	bd70      	pop	{r4, r5, r6, pc}
 801b81c:	f855 3b04 	ldr.w	r3, [r5], #4
 801b820:	4798      	blx	r3
 801b822:	3601      	adds	r6, #1
 801b824:	e7ee      	b.n	801b804 <__libc_init_array+0xc>
 801b826:	f855 3b04 	ldr.w	r3, [r5], #4
 801b82a:	4798      	blx	r3
 801b82c:	3601      	adds	r6, #1
 801b82e:	e7f2      	b.n	801b816 <__libc_init_array+0x1e>
 801b830:	0801c750 	.word	0x0801c750
 801b834:	0801c750 	.word	0x0801c750
 801b838:	0801c750 	.word	0x0801c750
 801b83c:	0801c754 	.word	0x0801c754

0801b840 <memcpy>:
 801b840:	440a      	add	r2, r1
 801b842:	4291      	cmp	r1, r2
 801b844:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801b848:	d100      	bne.n	801b84c <memcpy+0xc>
 801b84a:	4770      	bx	lr
 801b84c:	b510      	push	{r4, lr}
 801b84e:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b852:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b856:	4291      	cmp	r1, r2
 801b858:	d1f9      	bne.n	801b84e <memcpy+0xe>
 801b85a:	bd10      	pop	{r4, pc}

0801b85c <memset>:
 801b85c:	4402      	add	r2, r0
 801b85e:	4603      	mov	r3, r0
 801b860:	4293      	cmp	r3, r2
 801b862:	d100      	bne.n	801b866 <memset+0xa>
 801b864:	4770      	bx	lr
 801b866:	f803 1b01 	strb.w	r1, [r3], #1
 801b86a:	e7f9      	b.n	801b860 <memset+0x4>

0801b86c <_puts_r>:
 801b86c:	b570      	push	{r4, r5, r6, lr}
 801b86e:	460e      	mov	r6, r1
 801b870:	4605      	mov	r5, r0
 801b872:	b118      	cbz	r0, 801b87c <_puts_r+0x10>
 801b874:	6983      	ldr	r3, [r0, #24]
 801b876:	b90b      	cbnz	r3, 801b87c <_puts_r+0x10>
 801b878:	f000 fa48 	bl	801bd0c <__sinit>
 801b87c:	69ab      	ldr	r3, [r5, #24]
 801b87e:	68ac      	ldr	r4, [r5, #8]
 801b880:	b913      	cbnz	r3, 801b888 <_puts_r+0x1c>
 801b882:	4628      	mov	r0, r5
 801b884:	f000 fa42 	bl	801bd0c <__sinit>
 801b888:	4b2c      	ldr	r3, [pc, #176]	; (801b93c <_puts_r+0xd0>)
 801b88a:	429c      	cmp	r4, r3
 801b88c:	d120      	bne.n	801b8d0 <_puts_r+0x64>
 801b88e:	686c      	ldr	r4, [r5, #4]
 801b890:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b892:	07db      	lsls	r3, r3, #31
 801b894:	d405      	bmi.n	801b8a2 <_puts_r+0x36>
 801b896:	89a3      	ldrh	r3, [r4, #12]
 801b898:	0598      	lsls	r0, r3, #22
 801b89a:	d402      	bmi.n	801b8a2 <_puts_r+0x36>
 801b89c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b89e:	f000 fad3 	bl	801be48 <__retarget_lock_acquire_recursive>
 801b8a2:	89a3      	ldrh	r3, [r4, #12]
 801b8a4:	0719      	lsls	r1, r3, #28
 801b8a6:	d51d      	bpl.n	801b8e4 <_puts_r+0x78>
 801b8a8:	6923      	ldr	r3, [r4, #16]
 801b8aa:	b1db      	cbz	r3, 801b8e4 <_puts_r+0x78>
 801b8ac:	3e01      	subs	r6, #1
 801b8ae:	68a3      	ldr	r3, [r4, #8]
 801b8b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b8b4:	3b01      	subs	r3, #1
 801b8b6:	60a3      	str	r3, [r4, #8]
 801b8b8:	bb39      	cbnz	r1, 801b90a <_puts_r+0x9e>
 801b8ba:	2b00      	cmp	r3, #0
 801b8bc:	da38      	bge.n	801b930 <_puts_r+0xc4>
 801b8be:	4622      	mov	r2, r4
 801b8c0:	210a      	movs	r1, #10
 801b8c2:	4628      	mov	r0, r5
 801b8c4:	f000 f848 	bl	801b958 <__swbuf_r>
 801b8c8:	3001      	adds	r0, #1
 801b8ca:	d011      	beq.n	801b8f0 <_puts_r+0x84>
 801b8cc:	250a      	movs	r5, #10
 801b8ce:	e011      	b.n	801b8f4 <_puts_r+0x88>
 801b8d0:	4b1b      	ldr	r3, [pc, #108]	; (801b940 <_puts_r+0xd4>)
 801b8d2:	429c      	cmp	r4, r3
 801b8d4:	d101      	bne.n	801b8da <_puts_r+0x6e>
 801b8d6:	68ac      	ldr	r4, [r5, #8]
 801b8d8:	e7da      	b.n	801b890 <_puts_r+0x24>
 801b8da:	4b1a      	ldr	r3, [pc, #104]	; (801b944 <_puts_r+0xd8>)
 801b8dc:	429c      	cmp	r4, r3
 801b8de:	bf08      	it	eq
 801b8e0:	68ec      	ldreq	r4, [r5, #12]
 801b8e2:	e7d5      	b.n	801b890 <_puts_r+0x24>
 801b8e4:	4621      	mov	r1, r4
 801b8e6:	4628      	mov	r0, r5
 801b8e8:	f000 f888 	bl	801b9fc <__swsetup_r>
 801b8ec:	2800      	cmp	r0, #0
 801b8ee:	d0dd      	beq.n	801b8ac <_puts_r+0x40>
 801b8f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 801b8f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b8f6:	07da      	lsls	r2, r3, #31
 801b8f8:	d405      	bmi.n	801b906 <_puts_r+0x9a>
 801b8fa:	89a3      	ldrh	r3, [r4, #12]
 801b8fc:	059b      	lsls	r3, r3, #22
 801b8fe:	d402      	bmi.n	801b906 <_puts_r+0x9a>
 801b900:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b902:	f000 faa2 	bl	801be4a <__retarget_lock_release_recursive>
 801b906:	4628      	mov	r0, r5
 801b908:	bd70      	pop	{r4, r5, r6, pc}
 801b90a:	2b00      	cmp	r3, #0
 801b90c:	da04      	bge.n	801b918 <_puts_r+0xac>
 801b90e:	69a2      	ldr	r2, [r4, #24]
 801b910:	429a      	cmp	r2, r3
 801b912:	dc06      	bgt.n	801b922 <_puts_r+0xb6>
 801b914:	290a      	cmp	r1, #10
 801b916:	d004      	beq.n	801b922 <_puts_r+0xb6>
 801b918:	6823      	ldr	r3, [r4, #0]
 801b91a:	1c5a      	adds	r2, r3, #1
 801b91c:	6022      	str	r2, [r4, #0]
 801b91e:	7019      	strb	r1, [r3, #0]
 801b920:	e7c5      	b.n	801b8ae <_puts_r+0x42>
 801b922:	4622      	mov	r2, r4
 801b924:	4628      	mov	r0, r5
 801b926:	f000 f817 	bl	801b958 <__swbuf_r>
 801b92a:	3001      	adds	r0, #1
 801b92c:	d1bf      	bne.n	801b8ae <_puts_r+0x42>
 801b92e:	e7df      	b.n	801b8f0 <_puts_r+0x84>
 801b930:	6823      	ldr	r3, [r4, #0]
 801b932:	250a      	movs	r5, #10
 801b934:	1c5a      	adds	r2, r3, #1
 801b936:	6022      	str	r2, [r4, #0]
 801b938:	701d      	strb	r5, [r3, #0]
 801b93a:	e7db      	b.n	801b8f4 <_puts_r+0x88>
 801b93c:	0801c708 	.word	0x0801c708
 801b940:	0801c728 	.word	0x0801c728
 801b944:	0801c6e8 	.word	0x0801c6e8

0801b948 <puts>:
 801b948:	4b02      	ldr	r3, [pc, #8]	; (801b954 <puts+0xc>)
 801b94a:	4601      	mov	r1, r0
 801b94c:	6818      	ldr	r0, [r3, #0]
 801b94e:	f7ff bf8d 	b.w	801b86c <_puts_r>
 801b952:	bf00      	nop
 801b954:	240000dc 	.word	0x240000dc

0801b958 <__swbuf_r>:
 801b958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b95a:	460e      	mov	r6, r1
 801b95c:	4614      	mov	r4, r2
 801b95e:	4605      	mov	r5, r0
 801b960:	b118      	cbz	r0, 801b96a <__swbuf_r+0x12>
 801b962:	6983      	ldr	r3, [r0, #24]
 801b964:	b90b      	cbnz	r3, 801b96a <__swbuf_r+0x12>
 801b966:	f000 f9d1 	bl	801bd0c <__sinit>
 801b96a:	4b21      	ldr	r3, [pc, #132]	; (801b9f0 <__swbuf_r+0x98>)
 801b96c:	429c      	cmp	r4, r3
 801b96e:	d12b      	bne.n	801b9c8 <__swbuf_r+0x70>
 801b970:	686c      	ldr	r4, [r5, #4]
 801b972:	69a3      	ldr	r3, [r4, #24]
 801b974:	60a3      	str	r3, [r4, #8]
 801b976:	89a3      	ldrh	r3, [r4, #12]
 801b978:	071a      	lsls	r2, r3, #28
 801b97a:	d52f      	bpl.n	801b9dc <__swbuf_r+0x84>
 801b97c:	6923      	ldr	r3, [r4, #16]
 801b97e:	b36b      	cbz	r3, 801b9dc <__swbuf_r+0x84>
 801b980:	6923      	ldr	r3, [r4, #16]
 801b982:	6820      	ldr	r0, [r4, #0]
 801b984:	1ac0      	subs	r0, r0, r3
 801b986:	6963      	ldr	r3, [r4, #20]
 801b988:	b2f6      	uxtb	r6, r6
 801b98a:	4283      	cmp	r3, r0
 801b98c:	4637      	mov	r7, r6
 801b98e:	dc04      	bgt.n	801b99a <__swbuf_r+0x42>
 801b990:	4621      	mov	r1, r4
 801b992:	4628      	mov	r0, r5
 801b994:	f000 f926 	bl	801bbe4 <_fflush_r>
 801b998:	bb30      	cbnz	r0, 801b9e8 <__swbuf_r+0x90>
 801b99a:	68a3      	ldr	r3, [r4, #8]
 801b99c:	3b01      	subs	r3, #1
 801b99e:	60a3      	str	r3, [r4, #8]
 801b9a0:	6823      	ldr	r3, [r4, #0]
 801b9a2:	1c5a      	adds	r2, r3, #1
 801b9a4:	6022      	str	r2, [r4, #0]
 801b9a6:	701e      	strb	r6, [r3, #0]
 801b9a8:	6963      	ldr	r3, [r4, #20]
 801b9aa:	3001      	adds	r0, #1
 801b9ac:	4283      	cmp	r3, r0
 801b9ae:	d004      	beq.n	801b9ba <__swbuf_r+0x62>
 801b9b0:	89a3      	ldrh	r3, [r4, #12]
 801b9b2:	07db      	lsls	r3, r3, #31
 801b9b4:	d506      	bpl.n	801b9c4 <__swbuf_r+0x6c>
 801b9b6:	2e0a      	cmp	r6, #10
 801b9b8:	d104      	bne.n	801b9c4 <__swbuf_r+0x6c>
 801b9ba:	4621      	mov	r1, r4
 801b9bc:	4628      	mov	r0, r5
 801b9be:	f000 f911 	bl	801bbe4 <_fflush_r>
 801b9c2:	b988      	cbnz	r0, 801b9e8 <__swbuf_r+0x90>
 801b9c4:	4638      	mov	r0, r7
 801b9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b9c8:	4b0a      	ldr	r3, [pc, #40]	; (801b9f4 <__swbuf_r+0x9c>)
 801b9ca:	429c      	cmp	r4, r3
 801b9cc:	d101      	bne.n	801b9d2 <__swbuf_r+0x7a>
 801b9ce:	68ac      	ldr	r4, [r5, #8]
 801b9d0:	e7cf      	b.n	801b972 <__swbuf_r+0x1a>
 801b9d2:	4b09      	ldr	r3, [pc, #36]	; (801b9f8 <__swbuf_r+0xa0>)
 801b9d4:	429c      	cmp	r4, r3
 801b9d6:	bf08      	it	eq
 801b9d8:	68ec      	ldreq	r4, [r5, #12]
 801b9da:	e7ca      	b.n	801b972 <__swbuf_r+0x1a>
 801b9dc:	4621      	mov	r1, r4
 801b9de:	4628      	mov	r0, r5
 801b9e0:	f000 f80c 	bl	801b9fc <__swsetup_r>
 801b9e4:	2800      	cmp	r0, #0
 801b9e6:	d0cb      	beq.n	801b980 <__swbuf_r+0x28>
 801b9e8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b9ec:	e7ea      	b.n	801b9c4 <__swbuf_r+0x6c>
 801b9ee:	bf00      	nop
 801b9f0:	0801c708 	.word	0x0801c708
 801b9f4:	0801c728 	.word	0x0801c728
 801b9f8:	0801c6e8 	.word	0x0801c6e8

0801b9fc <__swsetup_r>:
 801b9fc:	4b32      	ldr	r3, [pc, #200]	; (801bac8 <__swsetup_r+0xcc>)
 801b9fe:	b570      	push	{r4, r5, r6, lr}
 801ba00:	681d      	ldr	r5, [r3, #0]
 801ba02:	4606      	mov	r6, r0
 801ba04:	460c      	mov	r4, r1
 801ba06:	b125      	cbz	r5, 801ba12 <__swsetup_r+0x16>
 801ba08:	69ab      	ldr	r3, [r5, #24]
 801ba0a:	b913      	cbnz	r3, 801ba12 <__swsetup_r+0x16>
 801ba0c:	4628      	mov	r0, r5
 801ba0e:	f000 f97d 	bl	801bd0c <__sinit>
 801ba12:	4b2e      	ldr	r3, [pc, #184]	; (801bacc <__swsetup_r+0xd0>)
 801ba14:	429c      	cmp	r4, r3
 801ba16:	d10f      	bne.n	801ba38 <__swsetup_r+0x3c>
 801ba18:	686c      	ldr	r4, [r5, #4]
 801ba1a:	89a3      	ldrh	r3, [r4, #12]
 801ba1c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ba20:	0719      	lsls	r1, r3, #28
 801ba22:	d42c      	bmi.n	801ba7e <__swsetup_r+0x82>
 801ba24:	06dd      	lsls	r5, r3, #27
 801ba26:	d411      	bmi.n	801ba4c <__swsetup_r+0x50>
 801ba28:	2309      	movs	r3, #9
 801ba2a:	6033      	str	r3, [r6, #0]
 801ba2c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801ba30:	81a3      	strh	r3, [r4, #12]
 801ba32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801ba36:	e03e      	b.n	801bab6 <__swsetup_r+0xba>
 801ba38:	4b25      	ldr	r3, [pc, #148]	; (801bad0 <__swsetup_r+0xd4>)
 801ba3a:	429c      	cmp	r4, r3
 801ba3c:	d101      	bne.n	801ba42 <__swsetup_r+0x46>
 801ba3e:	68ac      	ldr	r4, [r5, #8]
 801ba40:	e7eb      	b.n	801ba1a <__swsetup_r+0x1e>
 801ba42:	4b24      	ldr	r3, [pc, #144]	; (801bad4 <__swsetup_r+0xd8>)
 801ba44:	429c      	cmp	r4, r3
 801ba46:	bf08      	it	eq
 801ba48:	68ec      	ldreq	r4, [r5, #12]
 801ba4a:	e7e6      	b.n	801ba1a <__swsetup_r+0x1e>
 801ba4c:	0758      	lsls	r0, r3, #29
 801ba4e:	d512      	bpl.n	801ba76 <__swsetup_r+0x7a>
 801ba50:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ba52:	b141      	cbz	r1, 801ba66 <__swsetup_r+0x6a>
 801ba54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ba58:	4299      	cmp	r1, r3
 801ba5a:	d002      	beq.n	801ba62 <__swsetup_r+0x66>
 801ba5c:	4630      	mov	r0, r6
 801ba5e:	f000 fa5b 	bl	801bf18 <_free_r>
 801ba62:	2300      	movs	r3, #0
 801ba64:	6363      	str	r3, [r4, #52]	; 0x34
 801ba66:	89a3      	ldrh	r3, [r4, #12]
 801ba68:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ba6c:	81a3      	strh	r3, [r4, #12]
 801ba6e:	2300      	movs	r3, #0
 801ba70:	6063      	str	r3, [r4, #4]
 801ba72:	6923      	ldr	r3, [r4, #16]
 801ba74:	6023      	str	r3, [r4, #0]
 801ba76:	89a3      	ldrh	r3, [r4, #12]
 801ba78:	f043 0308 	orr.w	r3, r3, #8
 801ba7c:	81a3      	strh	r3, [r4, #12]
 801ba7e:	6923      	ldr	r3, [r4, #16]
 801ba80:	b94b      	cbnz	r3, 801ba96 <__swsetup_r+0x9a>
 801ba82:	89a3      	ldrh	r3, [r4, #12]
 801ba84:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ba88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ba8c:	d003      	beq.n	801ba96 <__swsetup_r+0x9a>
 801ba8e:	4621      	mov	r1, r4
 801ba90:	4630      	mov	r0, r6
 801ba92:	f000 fa01 	bl	801be98 <__smakebuf_r>
 801ba96:	89a0      	ldrh	r0, [r4, #12]
 801ba98:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ba9c:	f010 0301 	ands.w	r3, r0, #1
 801baa0:	d00a      	beq.n	801bab8 <__swsetup_r+0xbc>
 801baa2:	2300      	movs	r3, #0
 801baa4:	60a3      	str	r3, [r4, #8]
 801baa6:	6963      	ldr	r3, [r4, #20]
 801baa8:	425b      	negs	r3, r3
 801baaa:	61a3      	str	r3, [r4, #24]
 801baac:	6923      	ldr	r3, [r4, #16]
 801baae:	b943      	cbnz	r3, 801bac2 <__swsetup_r+0xc6>
 801bab0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bab4:	d1ba      	bne.n	801ba2c <__swsetup_r+0x30>
 801bab6:	bd70      	pop	{r4, r5, r6, pc}
 801bab8:	0781      	lsls	r1, r0, #30
 801baba:	bf58      	it	pl
 801babc:	6963      	ldrpl	r3, [r4, #20]
 801babe:	60a3      	str	r3, [r4, #8]
 801bac0:	e7f4      	b.n	801baac <__swsetup_r+0xb0>
 801bac2:	2000      	movs	r0, #0
 801bac4:	e7f7      	b.n	801bab6 <__swsetup_r+0xba>
 801bac6:	bf00      	nop
 801bac8:	240000dc 	.word	0x240000dc
 801bacc:	0801c708 	.word	0x0801c708
 801bad0:	0801c728 	.word	0x0801c728
 801bad4:	0801c6e8 	.word	0x0801c6e8

0801bad8 <__sflush_r>:
 801bad8:	898a      	ldrh	r2, [r1, #12]
 801bada:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bade:	4605      	mov	r5, r0
 801bae0:	0710      	lsls	r0, r2, #28
 801bae2:	460c      	mov	r4, r1
 801bae4:	d458      	bmi.n	801bb98 <__sflush_r+0xc0>
 801bae6:	684b      	ldr	r3, [r1, #4]
 801bae8:	2b00      	cmp	r3, #0
 801baea:	dc05      	bgt.n	801baf8 <__sflush_r+0x20>
 801baec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801baee:	2b00      	cmp	r3, #0
 801baf0:	dc02      	bgt.n	801baf8 <__sflush_r+0x20>
 801baf2:	2000      	movs	r0, #0
 801baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801baf8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bafa:	2e00      	cmp	r6, #0
 801bafc:	d0f9      	beq.n	801baf2 <__sflush_r+0x1a>
 801bafe:	2300      	movs	r3, #0
 801bb00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bb04:	682f      	ldr	r7, [r5, #0]
 801bb06:	602b      	str	r3, [r5, #0]
 801bb08:	d032      	beq.n	801bb70 <__sflush_r+0x98>
 801bb0a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bb0c:	89a3      	ldrh	r3, [r4, #12]
 801bb0e:	075a      	lsls	r2, r3, #29
 801bb10:	d505      	bpl.n	801bb1e <__sflush_r+0x46>
 801bb12:	6863      	ldr	r3, [r4, #4]
 801bb14:	1ac0      	subs	r0, r0, r3
 801bb16:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bb18:	b10b      	cbz	r3, 801bb1e <__sflush_r+0x46>
 801bb1a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bb1c:	1ac0      	subs	r0, r0, r3
 801bb1e:	2300      	movs	r3, #0
 801bb20:	4602      	mov	r2, r0
 801bb22:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bb24:	6a21      	ldr	r1, [r4, #32]
 801bb26:	4628      	mov	r0, r5
 801bb28:	47b0      	blx	r6
 801bb2a:	1c43      	adds	r3, r0, #1
 801bb2c:	89a3      	ldrh	r3, [r4, #12]
 801bb2e:	d106      	bne.n	801bb3e <__sflush_r+0x66>
 801bb30:	6829      	ldr	r1, [r5, #0]
 801bb32:	291d      	cmp	r1, #29
 801bb34:	d82c      	bhi.n	801bb90 <__sflush_r+0xb8>
 801bb36:	4a2a      	ldr	r2, [pc, #168]	; (801bbe0 <__sflush_r+0x108>)
 801bb38:	40ca      	lsrs	r2, r1
 801bb3a:	07d6      	lsls	r6, r2, #31
 801bb3c:	d528      	bpl.n	801bb90 <__sflush_r+0xb8>
 801bb3e:	2200      	movs	r2, #0
 801bb40:	6062      	str	r2, [r4, #4]
 801bb42:	04d9      	lsls	r1, r3, #19
 801bb44:	6922      	ldr	r2, [r4, #16]
 801bb46:	6022      	str	r2, [r4, #0]
 801bb48:	d504      	bpl.n	801bb54 <__sflush_r+0x7c>
 801bb4a:	1c42      	adds	r2, r0, #1
 801bb4c:	d101      	bne.n	801bb52 <__sflush_r+0x7a>
 801bb4e:	682b      	ldr	r3, [r5, #0]
 801bb50:	b903      	cbnz	r3, 801bb54 <__sflush_r+0x7c>
 801bb52:	6560      	str	r0, [r4, #84]	; 0x54
 801bb54:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb56:	602f      	str	r7, [r5, #0]
 801bb58:	2900      	cmp	r1, #0
 801bb5a:	d0ca      	beq.n	801baf2 <__sflush_r+0x1a>
 801bb5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb60:	4299      	cmp	r1, r3
 801bb62:	d002      	beq.n	801bb6a <__sflush_r+0x92>
 801bb64:	4628      	mov	r0, r5
 801bb66:	f000 f9d7 	bl	801bf18 <_free_r>
 801bb6a:	2000      	movs	r0, #0
 801bb6c:	6360      	str	r0, [r4, #52]	; 0x34
 801bb6e:	e7c1      	b.n	801baf4 <__sflush_r+0x1c>
 801bb70:	6a21      	ldr	r1, [r4, #32]
 801bb72:	2301      	movs	r3, #1
 801bb74:	4628      	mov	r0, r5
 801bb76:	47b0      	blx	r6
 801bb78:	1c41      	adds	r1, r0, #1
 801bb7a:	d1c7      	bne.n	801bb0c <__sflush_r+0x34>
 801bb7c:	682b      	ldr	r3, [r5, #0]
 801bb7e:	2b00      	cmp	r3, #0
 801bb80:	d0c4      	beq.n	801bb0c <__sflush_r+0x34>
 801bb82:	2b1d      	cmp	r3, #29
 801bb84:	d001      	beq.n	801bb8a <__sflush_r+0xb2>
 801bb86:	2b16      	cmp	r3, #22
 801bb88:	d101      	bne.n	801bb8e <__sflush_r+0xb6>
 801bb8a:	602f      	str	r7, [r5, #0]
 801bb8c:	e7b1      	b.n	801baf2 <__sflush_r+0x1a>
 801bb8e:	89a3      	ldrh	r3, [r4, #12]
 801bb90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb94:	81a3      	strh	r3, [r4, #12]
 801bb96:	e7ad      	b.n	801baf4 <__sflush_r+0x1c>
 801bb98:	690f      	ldr	r7, [r1, #16]
 801bb9a:	2f00      	cmp	r7, #0
 801bb9c:	d0a9      	beq.n	801baf2 <__sflush_r+0x1a>
 801bb9e:	0793      	lsls	r3, r2, #30
 801bba0:	680e      	ldr	r6, [r1, #0]
 801bba2:	bf08      	it	eq
 801bba4:	694b      	ldreq	r3, [r1, #20]
 801bba6:	600f      	str	r7, [r1, #0]
 801bba8:	bf18      	it	ne
 801bbaa:	2300      	movne	r3, #0
 801bbac:	eba6 0807 	sub.w	r8, r6, r7
 801bbb0:	608b      	str	r3, [r1, #8]
 801bbb2:	f1b8 0f00 	cmp.w	r8, #0
 801bbb6:	dd9c      	ble.n	801baf2 <__sflush_r+0x1a>
 801bbb8:	6a21      	ldr	r1, [r4, #32]
 801bbba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bbbc:	4643      	mov	r3, r8
 801bbbe:	463a      	mov	r2, r7
 801bbc0:	4628      	mov	r0, r5
 801bbc2:	47b0      	blx	r6
 801bbc4:	2800      	cmp	r0, #0
 801bbc6:	dc06      	bgt.n	801bbd6 <__sflush_r+0xfe>
 801bbc8:	89a3      	ldrh	r3, [r4, #12]
 801bbca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bbce:	81a3      	strh	r3, [r4, #12]
 801bbd0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bbd4:	e78e      	b.n	801baf4 <__sflush_r+0x1c>
 801bbd6:	4407      	add	r7, r0
 801bbd8:	eba8 0800 	sub.w	r8, r8, r0
 801bbdc:	e7e9      	b.n	801bbb2 <__sflush_r+0xda>
 801bbde:	bf00      	nop
 801bbe0:	20400001 	.word	0x20400001

0801bbe4 <_fflush_r>:
 801bbe4:	b538      	push	{r3, r4, r5, lr}
 801bbe6:	690b      	ldr	r3, [r1, #16]
 801bbe8:	4605      	mov	r5, r0
 801bbea:	460c      	mov	r4, r1
 801bbec:	b913      	cbnz	r3, 801bbf4 <_fflush_r+0x10>
 801bbee:	2500      	movs	r5, #0
 801bbf0:	4628      	mov	r0, r5
 801bbf2:	bd38      	pop	{r3, r4, r5, pc}
 801bbf4:	b118      	cbz	r0, 801bbfe <_fflush_r+0x1a>
 801bbf6:	6983      	ldr	r3, [r0, #24]
 801bbf8:	b90b      	cbnz	r3, 801bbfe <_fflush_r+0x1a>
 801bbfa:	f000 f887 	bl	801bd0c <__sinit>
 801bbfe:	4b14      	ldr	r3, [pc, #80]	; (801bc50 <_fflush_r+0x6c>)
 801bc00:	429c      	cmp	r4, r3
 801bc02:	d11b      	bne.n	801bc3c <_fflush_r+0x58>
 801bc04:	686c      	ldr	r4, [r5, #4]
 801bc06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d0ef      	beq.n	801bbee <_fflush_r+0xa>
 801bc0e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bc10:	07d0      	lsls	r0, r2, #31
 801bc12:	d404      	bmi.n	801bc1e <_fflush_r+0x3a>
 801bc14:	0599      	lsls	r1, r3, #22
 801bc16:	d402      	bmi.n	801bc1e <_fflush_r+0x3a>
 801bc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bc1a:	f000 f915 	bl	801be48 <__retarget_lock_acquire_recursive>
 801bc1e:	4628      	mov	r0, r5
 801bc20:	4621      	mov	r1, r4
 801bc22:	f7ff ff59 	bl	801bad8 <__sflush_r>
 801bc26:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bc28:	07da      	lsls	r2, r3, #31
 801bc2a:	4605      	mov	r5, r0
 801bc2c:	d4e0      	bmi.n	801bbf0 <_fflush_r+0xc>
 801bc2e:	89a3      	ldrh	r3, [r4, #12]
 801bc30:	059b      	lsls	r3, r3, #22
 801bc32:	d4dd      	bmi.n	801bbf0 <_fflush_r+0xc>
 801bc34:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bc36:	f000 f908 	bl	801be4a <__retarget_lock_release_recursive>
 801bc3a:	e7d9      	b.n	801bbf0 <_fflush_r+0xc>
 801bc3c:	4b05      	ldr	r3, [pc, #20]	; (801bc54 <_fflush_r+0x70>)
 801bc3e:	429c      	cmp	r4, r3
 801bc40:	d101      	bne.n	801bc46 <_fflush_r+0x62>
 801bc42:	68ac      	ldr	r4, [r5, #8]
 801bc44:	e7df      	b.n	801bc06 <_fflush_r+0x22>
 801bc46:	4b04      	ldr	r3, [pc, #16]	; (801bc58 <_fflush_r+0x74>)
 801bc48:	429c      	cmp	r4, r3
 801bc4a:	bf08      	it	eq
 801bc4c:	68ec      	ldreq	r4, [r5, #12]
 801bc4e:	e7da      	b.n	801bc06 <_fflush_r+0x22>
 801bc50:	0801c708 	.word	0x0801c708
 801bc54:	0801c728 	.word	0x0801c728
 801bc58:	0801c6e8 	.word	0x0801c6e8

0801bc5c <std>:
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	b510      	push	{r4, lr}
 801bc60:	4604      	mov	r4, r0
 801bc62:	e9c0 3300 	strd	r3, r3, [r0]
 801bc66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801bc6a:	6083      	str	r3, [r0, #8]
 801bc6c:	8181      	strh	r1, [r0, #12]
 801bc6e:	6643      	str	r3, [r0, #100]	; 0x64
 801bc70:	81c2      	strh	r2, [r0, #14]
 801bc72:	6183      	str	r3, [r0, #24]
 801bc74:	4619      	mov	r1, r3
 801bc76:	2208      	movs	r2, #8
 801bc78:	305c      	adds	r0, #92	; 0x5c
 801bc7a:	f7ff fdef 	bl	801b85c <memset>
 801bc7e:	4b05      	ldr	r3, [pc, #20]	; (801bc94 <std+0x38>)
 801bc80:	6263      	str	r3, [r4, #36]	; 0x24
 801bc82:	4b05      	ldr	r3, [pc, #20]	; (801bc98 <std+0x3c>)
 801bc84:	62a3      	str	r3, [r4, #40]	; 0x28
 801bc86:	4b05      	ldr	r3, [pc, #20]	; (801bc9c <std+0x40>)
 801bc88:	62e3      	str	r3, [r4, #44]	; 0x2c
 801bc8a:	4b05      	ldr	r3, [pc, #20]	; (801bca0 <std+0x44>)
 801bc8c:	6224      	str	r4, [r4, #32]
 801bc8e:	6323      	str	r3, [r4, #48]	; 0x30
 801bc90:	bd10      	pop	{r4, pc}
 801bc92:	bf00      	nop
 801bc94:	0801c0f9 	.word	0x0801c0f9
 801bc98:	0801c11b 	.word	0x0801c11b
 801bc9c:	0801c153 	.word	0x0801c153
 801bca0:	0801c177 	.word	0x0801c177

0801bca4 <_cleanup_r>:
 801bca4:	4901      	ldr	r1, [pc, #4]	; (801bcac <_cleanup_r+0x8>)
 801bca6:	f000 b8af 	b.w	801be08 <_fwalk_reent>
 801bcaa:	bf00      	nop
 801bcac:	0801bbe5 	.word	0x0801bbe5

0801bcb0 <__sfmoreglue>:
 801bcb0:	b570      	push	{r4, r5, r6, lr}
 801bcb2:	2268      	movs	r2, #104	; 0x68
 801bcb4:	1e4d      	subs	r5, r1, #1
 801bcb6:	4355      	muls	r5, r2
 801bcb8:	460e      	mov	r6, r1
 801bcba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801bcbe:	f000 f997 	bl	801bff0 <_malloc_r>
 801bcc2:	4604      	mov	r4, r0
 801bcc4:	b140      	cbz	r0, 801bcd8 <__sfmoreglue+0x28>
 801bcc6:	2100      	movs	r1, #0
 801bcc8:	e9c0 1600 	strd	r1, r6, [r0]
 801bccc:	300c      	adds	r0, #12
 801bcce:	60a0      	str	r0, [r4, #8]
 801bcd0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801bcd4:	f7ff fdc2 	bl	801b85c <memset>
 801bcd8:	4620      	mov	r0, r4
 801bcda:	bd70      	pop	{r4, r5, r6, pc}

0801bcdc <__sfp_lock_acquire>:
 801bcdc:	4801      	ldr	r0, [pc, #4]	; (801bce4 <__sfp_lock_acquire+0x8>)
 801bcde:	f000 b8b3 	b.w	801be48 <__retarget_lock_acquire_recursive>
 801bce2:	bf00      	nop
 801bce4:	24006d65 	.word	0x24006d65

0801bce8 <__sfp_lock_release>:
 801bce8:	4801      	ldr	r0, [pc, #4]	; (801bcf0 <__sfp_lock_release+0x8>)
 801bcea:	f000 b8ae 	b.w	801be4a <__retarget_lock_release_recursive>
 801bcee:	bf00      	nop
 801bcf0:	24006d65 	.word	0x24006d65

0801bcf4 <__sinit_lock_acquire>:
 801bcf4:	4801      	ldr	r0, [pc, #4]	; (801bcfc <__sinit_lock_acquire+0x8>)
 801bcf6:	f000 b8a7 	b.w	801be48 <__retarget_lock_acquire_recursive>
 801bcfa:	bf00      	nop
 801bcfc:	24006d66 	.word	0x24006d66

0801bd00 <__sinit_lock_release>:
 801bd00:	4801      	ldr	r0, [pc, #4]	; (801bd08 <__sinit_lock_release+0x8>)
 801bd02:	f000 b8a2 	b.w	801be4a <__retarget_lock_release_recursive>
 801bd06:	bf00      	nop
 801bd08:	24006d66 	.word	0x24006d66

0801bd0c <__sinit>:
 801bd0c:	b510      	push	{r4, lr}
 801bd0e:	4604      	mov	r4, r0
 801bd10:	f7ff fff0 	bl	801bcf4 <__sinit_lock_acquire>
 801bd14:	69a3      	ldr	r3, [r4, #24]
 801bd16:	b11b      	cbz	r3, 801bd20 <__sinit+0x14>
 801bd18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801bd1c:	f7ff bff0 	b.w	801bd00 <__sinit_lock_release>
 801bd20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801bd24:	6523      	str	r3, [r4, #80]	; 0x50
 801bd26:	4b13      	ldr	r3, [pc, #76]	; (801bd74 <__sinit+0x68>)
 801bd28:	4a13      	ldr	r2, [pc, #76]	; (801bd78 <__sinit+0x6c>)
 801bd2a:	681b      	ldr	r3, [r3, #0]
 801bd2c:	62a2      	str	r2, [r4, #40]	; 0x28
 801bd2e:	42a3      	cmp	r3, r4
 801bd30:	bf04      	itt	eq
 801bd32:	2301      	moveq	r3, #1
 801bd34:	61a3      	streq	r3, [r4, #24]
 801bd36:	4620      	mov	r0, r4
 801bd38:	f000 f820 	bl	801bd7c <__sfp>
 801bd3c:	6060      	str	r0, [r4, #4]
 801bd3e:	4620      	mov	r0, r4
 801bd40:	f000 f81c 	bl	801bd7c <__sfp>
 801bd44:	60a0      	str	r0, [r4, #8]
 801bd46:	4620      	mov	r0, r4
 801bd48:	f000 f818 	bl	801bd7c <__sfp>
 801bd4c:	2200      	movs	r2, #0
 801bd4e:	60e0      	str	r0, [r4, #12]
 801bd50:	2104      	movs	r1, #4
 801bd52:	6860      	ldr	r0, [r4, #4]
 801bd54:	f7ff ff82 	bl	801bc5c <std>
 801bd58:	68a0      	ldr	r0, [r4, #8]
 801bd5a:	2201      	movs	r2, #1
 801bd5c:	2109      	movs	r1, #9
 801bd5e:	f7ff ff7d 	bl	801bc5c <std>
 801bd62:	68e0      	ldr	r0, [r4, #12]
 801bd64:	2202      	movs	r2, #2
 801bd66:	2112      	movs	r1, #18
 801bd68:	f7ff ff78 	bl	801bc5c <std>
 801bd6c:	2301      	movs	r3, #1
 801bd6e:	61a3      	str	r3, [r4, #24]
 801bd70:	e7d2      	b.n	801bd18 <__sinit+0xc>
 801bd72:	bf00      	nop
 801bd74:	0801c6e4 	.word	0x0801c6e4
 801bd78:	0801bca5 	.word	0x0801bca5

0801bd7c <__sfp>:
 801bd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd7e:	4607      	mov	r7, r0
 801bd80:	f7ff ffac 	bl	801bcdc <__sfp_lock_acquire>
 801bd84:	4b1e      	ldr	r3, [pc, #120]	; (801be00 <__sfp+0x84>)
 801bd86:	681e      	ldr	r6, [r3, #0]
 801bd88:	69b3      	ldr	r3, [r6, #24]
 801bd8a:	b913      	cbnz	r3, 801bd92 <__sfp+0x16>
 801bd8c:	4630      	mov	r0, r6
 801bd8e:	f7ff ffbd 	bl	801bd0c <__sinit>
 801bd92:	3648      	adds	r6, #72	; 0x48
 801bd94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801bd98:	3b01      	subs	r3, #1
 801bd9a:	d503      	bpl.n	801bda4 <__sfp+0x28>
 801bd9c:	6833      	ldr	r3, [r6, #0]
 801bd9e:	b30b      	cbz	r3, 801bde4 <__sfp+0x68>
 801bda0:	6836      	ldr	r6, [r6, #0]
 801bda2:	e7f7      	b.n	801bd94 <__sfp+0x18>
 801bda4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801bda8:	b9d5      	cbnz	r5, 801bde0 <__sfp+0x64>
 801bdaa:	4b16      	ldr	r3, [pc, #88]	; (801be04 <__sfp+0x88>)
 801bdac:	60e3      	str	r3, [r4, #12]
 801bdae:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801bdb2:	6665      	str	r5, [r4, #100]	; 0x64
 801bdb4:	f000 f847 	bl	801be46 <__retarget_lock_init_recursive>
 801bdb8:	f7ff ff96 	bl	801bce8 <__sfp_lock_release>
 801bdbc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801bdc0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801bdc4:	6025      	str	r5, [r4, #0]
 801bdc6:	61a5      	str	r5, [r4, #24]
 801bdc8:	2208      	movs	r2, #8
 801bdca:	4629      	mov	r1, r5
 801bdcc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801bdd0:	f7ff fd44 	bl	801b85c <memset>
 801bdd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801bdd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801bddc:	4620      	mov	r0, r4
 801bdde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bde0:	3468      	adds	r4, #104	; 0x68
 801bde2:	e7d9      	b.n	801bd98 <__sfp+0x1c>
 801bde4:	2104      	movs	r1, #4
 801bde6:	4638      	mov	r0, r7
 801bde8:	f7ff ff62 	bl	801bcb0 <__sfmoreglue>
 801bdec:	4604      	mov	r4, r0
 801bdee:	6030      	str	r0, [r6, #0]
 801bdf0:	2800      	cmp	r0, #0
 801bdf2:	d1d5      	bne.n	801bda0 <__sfp+0x24>
 801bdf4:	f7ff ff78 	bl	801bce8 <__sfp_lock_release>
 801bdf8:	230c      	movs	r3, #12
 801bdfa:	603b      	str	r3, [r7, #0]
 801bdfc:	e7ee      	b.n	801bddc <__sfp+0x60>
 801bdfe:	bf00      	nop
 801be00:	0801c6e4 	.word	0x0801c6e4
 801be04:	ffff0001 	.word	0xffff0001

0801be08 <_fwalk_reent>:
 801be08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801be0c:	4606      	mov	r6, r0
 801be0e:	4688      	mov	r8, r1
 801be10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801be14:	2700      	movs	r7, #0
 801be16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801be1a:	f1b9 0901 	subs.w	r9, r9, #1
 801be1e:	d505      	bpl.n	801be2c <_fwalk_reent+0x24>
 801be20:	6824      	ldr	r4, [r4, #0]
 801be22:	2c00      	cmp	r4, #0
 801be24:	d1f7      	bne.n	801be16 <_fwalk_reent+0xe>
 801be26:	4638      	mov	r0, r7
 801be28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801be2c:	89ab      	ldrh	r3, [r5, #12]
 801be2e:	2b01      	cmp	r3, #1
 801be30:	d907      	bls.n	801be42 <_fwalk_reent+0x3a>
 801be32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801be36:	3301      	adds	r3, #1
 801be38:	d003      	beq.n	801be42 <_fwalk_reent+0x3a>
 801be3a:	4629      	mov	r1, r5
 801be3c:	4630      	mov	r0, r6
 801be3e:	47c0      	blx	r8
 801be40:	4307      	orrs	r7, r0
 801be42:	3568      	adds	r5, #104	; 0x68
 801be44:	e7e9      	b.n	801be1a <_fwalk_reent+0x12>

0801be46 <__retarget_lock_init_recursive>:
 801be46:	4770      	bx	lr

0801be48 <__retarget_lock_acquire_recursive>:
 801be48:	4770      	bx	lr

0801be4a <__retarget_lock_release_recursive>:
 801be4a:	4770      	bx	lr

0801be4c <__swhatbuf_r>:
 801be4c:	b570      	push	{r4, r5, r6, lr}
 801be4e:	460e      	mov	r6, r1
 801be50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801be54:	2900      	cmp	r1, #0
 801be56:	b096      	sub	sp, #88	; 0x58
 801be58:	4614      	mov	r4, r2
 801be5a:	461d      	mov	r5, r3
 801be5c:	da08      	bge.n	801be70 <__swhatbuf_r+0x24>
 801be5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801be62:	2200      	movs	r2, #0
 801be64:	602a      	str	r2, [r5, #0]
 801be66:	061a      	lsls	r2, r3, #24
 801be68:	d410      	bmi.n	801be8c <__swhatbuf_r+0x40>
 801be6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801be6e:	e00e      	b.n	801be8e <__swhatbuf_r+0x42>
 801be70:	466a      	mov	r2, sp
 801be72:	f000 f9a7 	bl	801c1c4 <_fstat_r>
 801be76:	2800      	cmp	r0, #0
 801be78:	dbf1      	blt.n	801be5e <__swhatbuf_r+0x12>
 801be7a:	9a01      	ldr	r2, [sp, #4]
 801be7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801be80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801be84:	425a      	negs	r2, r3
 801be86:	415a      	adcs	r2, r3
 801be88:	602a      	str	r2, [r5, #0]
 801be8a:	e7ee      	b.n	801be6a <__swhatbuf_r+0x1e>
 801be8c:	2340      	movs	r3, #64	; 0x40
 801be8e:	2000      	movs	r0, #0
 801be90:	6023      	str	r3, [r4, #0]
 801be92:	b016      	add	sp, #88	; 0x58
 801be94:	bd70      	pop	{r4, r5, r6, pc}
	...

0801be98 <__smakebuf_r>:
 801be98:	898b      	ldrh	r3, [r1, #12]
 801be9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801be9c:	079d      	lsls	r5, r3, #30
 801be9e:	4606      	mov	r6, r0
 801bea0:	460c      	mov	r4, r1
 801bea2:	d507      	bpl.n	801beb4 <__smakebuf_r+0x1c>
 801bea4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bea8:	6023      	str	r3, [r4, #0]
 801beaa:	6123      	str	r3, [r4, #16]
 801beac:	2301      	movs	r3, #1
 801beae:	6163      	str	r3, [r4, #20]
 801beb0:	b002      	add	sp, #8
 801beb2:	bd70      	pop	{r4, r5, r6, pc}
 801beb4:	ab01      	add	r3, sp, #4
 801beb6:	466a      	mov	r2, sp
 801beb8:	f7ff ffc8 	bl	801be4c <__swhatbuf_r>
 801bebc:	9900      	ldr	r1, [sp, #0]
 801bebe:	4605      	mov	r5, r0
 801bec0:	4630      	mov	r0, r6
 801bec2:	f000 f895 	bl	801bff0 <_malloc_r>
 801bec6:	b948      	cbnz	r0, 801bedc <__smakebuf_r+0x44>
 801bec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801becc:	059a      	lsls	r2, r3, #22
 801bece:	d4ef      	bmi.n	801beb0 <__smakebuf_r+0x18>
 801bed0:	f023 0303 	bic.w	r3, r3, #3
 801bed4:	f043 0302 	orr.w	r3, r3, #2
 801bed8:	81a3      	strh	r3, [r4, #12]
 801beda:	e7e3      	b.n	801bea4 <__smakebuf_r+0xc>
 801bedc:	4b0d      	ldr	r3, [pc, #52]	; (801bf14 <__smakebuf_r+0x7c>)
 801bede:	62b3      	str	r3, [r6, #40]	; 0x28
 801bee0:	89a3      	ldrh	r3, [r4, #12]
 801bee2:	6020      	str	r0, [r4, #0]
 801bee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bee8:	81a3      	strh	r3, [r4, #12]
 801beea:	9b00      	ldr	r3, [sp, #0]
 801beec:	6163      	str	r3, [r4, #20]
 801beee:	9b01      	ldr	r3, [sp, #4]
 801bef0:	6120      	str	r0, [r4, #16]
 801bef2:	b15b      	cbz	r3, 801bf0c <__smakebuf_r+0x74>
 801bef4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bef8:	4630      	mov	r0, r6
 801befa:	f000 f975 	bl	801c1e8 <_isatty_r>
 801befe:	b128      	cbz	r0, 801bf0c <__smakebuf_r+0x74>
 801bf00:	89a3      	ldrh	r3, [r4, #12]
 801bf02:	f023 0303 	bic.w	r3, r3, #3
 801bf06:	f043 0301 	orr.w	r3, r3, #1
 801bf0a:	81a3      	strh	r3, [r4, #12]
 801bf0c:	89a0      	ldrh	r0, [r4, #12]
 801bf0e:	4305      	orrs	r5, r0
 801bf10:	81a5      	strh	r5, [r4, #12]
 801bf12:	e7cd      	b.n	801beb0 <__smakebuf_r+0x18>
 801bf14:	0801bca5 	.word	0x0801bca5

0801bf18 <_free_r>:
 801bf18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bf1a:	2900      	cmp	r1, #0
 801bf1c:	d044      	beq.n	801bfa8 <_free_r+0x90>
 801bf1e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bf22:	9001      	str	r0, [sp, #4]
 801bf24:	2b00      	cmp	r3, #0
 801bf26:	f1a1 0404 	sub.w	r4, r1, #4
 801bf2a:	bfb8      	it	lt
 801bf2c:	18e4      	addlt	r4, r4, r3
 801bf2e:	f000 f97d 	bl	801c22c <__malloc_lock>
 801bf32:	4a1e      	ldr	r2, [pc, #120]	; (801bfac <_free_r+0x94>)
 801bf34:	9801      	ldr	r0, [sp, #4]
 801bf36:	6813      	ldr	r3, [r2, #0]
 801bf38:	b933      	cbnz	r3, 801bf48 <_free_r+0x30>
 801bf3a:	6063      	str	r3, [r4, #4]
 801bf3c:	6014      	str	r4, [r2, #0]
 801bf3e:	b003      	add	sp, #12
 801bf40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801bf44:	f000 b978 	b.w	801c238 <__malloc_unlock>
 801bf48:	42a3      	cmp	r3, r4
 801bf4a:	d908      	bls.n	801bf5e <_free_r+0x46>
 801bf4c:	6825      	ldr	r5, [r4, #0]
 801bf4e:	1961      	adds	r1, r4, r5
 801bf50:	428b      	cmp	r3, r1
 801bf52:	bf01      	itttt	eq
 801bf54:	6819      	ldreq	r1, [r3, #0]
 801bf56:	685b      	ldreq	r3, [r3, #4]
 801bf58:	1949      	addeq	r1, r1, r5
 801bf5a:	6021      	streq	r1, [r4, #0]
 801bf5c:	e7ed      	b.n	801bf3a <_free_r+0x22>
 801bf5e:	461a      	mov	r2, r3
 801bf60:	685b      	ldr	r3, [r3, #4]
 801bf62:	b10b      	cbz	r3, 801bf68 <_free_r+0x50>
 801bf64:	42a3      	cmp	r3, r4
 801bf66:	d9fa      	bls.n	801bf5e <_free_r+0x46>
 801bf68:	6811      	ldr	r1, [r2, #0]
 801bf6a:	1855      	adds	r5, r2, r1
 801bf6c:	42a5      	cmp	r5, r4
 801bf6e:	d10b      	bne.n	801bf88 <_free_r+0x70>
 801bf70:	6824      	ldr	r4, [r4, #0]
 801bf72:	4421      	add	r1, r4
 801bf74:	1854      	adds	r4, r2, r1
 801bf76:	42a3      	cmp	r3, r4
 801bf78:	6011      	str	r1, [r2, #0]
 801bf7a:	d1e0      	bne.n	801bf3e <_free_r+0x26>
 801bf7c:	681c      	ldr	r4, [r3, #0]
 801bf7e:	685b      	ldr	r3, [r3, #4]
 801bf80:	6053      	str	r3, [r2, #4]
 801bf82:	4421      	add	r1, r4
 801bf84:	6011      	str	r1, [r2, #0]
 801bf86:	e7da      	b.n	801bf3e <_free_r+0x26>
 801bf88:	d902      	bls.n	801bf90 <_free_r+0x78>
 801bf8a:	230c      	movs	r3, #12
 801bf8c:	6003      	str	r3, [r0, #0]
 801bf8e:	e7d6      	b.n	801bf3e <_free_r+0x26>
 801bf90:	6825      	ldr	r5, [r4, #0]
 801bf92:	1961      	adds	r1, r4, r5
 801bf94:	428b      	cmp	r3, r1
 801bf96:	bf04      	itt	eq
 801bf98:	6819      	ldreq	r1, [r3, #0]
 801bf9a:	685b      	ldreq	r3, [r3, #4]
 801bf9c:	6063      	str	r3, [r4, #4]
 801bf9e:	bf04      	itt	eq
 801bfa0:	1949      	addeq	r1, r1, r5
 801bfa2:	6021      	streq	r1, [r4, #0]
 801bfa4:	6054      	str	r4, [r2, #4]
 801bfa6:	e7ca      	b.n	801bf3e <_free_r+0x26>
 801bfa8:	b003      	add	sp, #12
 801bfaa:	bd30      	pop	{r4, r5, pc}
 801bfac:	24006d68 	.word	0x24006d68

0801bfb0 <sbrk_aligned>:
 801bfb0:	b570      	push	{r4, r5, r6, lr}
 801bfb2:	4e0e      	ldr	r6, [pc, #56]	; (801bfec <sbrk_aligned+0x3c>)
 801bfb4:	460c      	mov	r4, r1
 801bfb6:	6831      	ldr	r1, [r6, #0]
 801bfb8:	4605      	mov	r5, r0
 801bfba:	b911      	cbnz	r1, 801bfc2 <sbrk_aligned+0x12>
 801bfbc:	f000 f88c 	bl	801c0d8 <_sbrk_r>
 801bfc0:	6030      	str	r0, [r6, #0]
 801bfc2:	4621      	mov	r1, r4
 801bfc4:	4628      	mov	r0, r5
 801bfc6:	f000 f887 	bl	801c0d8 <_sbrk_r>
 801bfca:	1c43      	adds	r3, r0, #1
 801bfcc:	d00a      	beq.n	801bfe4 <sbrk_aligned+0x34>
 801bfce:	1cc4      	adds	r4, r0, #3
 801bfd0:	f024 0403 	bic.w	r4, r4, #3
 801bfd4:	42a0      	cmp	r0, r4
 801bfd6:	d007      	beq.n	801bfe8 <sbrk_aligned+0x38>
 801bfd8:	1a21      	subs	r1, r4, r0
 801bfda:	4628      	mov	r0, r5
 801bfdc:	f000 f87c 	bl	801c0d8 <_sbrk_r>
 801bfe0:	3001      	adds	r0, #1
 801bfe2:	d101      	bne.n	801bfe8 <sbrk_aligned+0x38>
 801bfe4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801bfe8:	4620      	mov	r0, r4
 801bfea:	bd70      	pop	{r4, r5, r6, pc}
 801bfec:	24006d6c 	.word	0x24006d6c

0801bff0 <_malloc_r>:
 801bff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bff4:	1ccd      	adds	r5, r1, #3
 801bff6:	f025 0503 	bic.w	r5, r5, #3
 801bffa:	3508      	adds	r5, #8
 801bffc:	2d0c      	cmp	r5, #12
 801bffe:	bf38      	it	cc
 801c000:	250c      	movcc	r5, #12
 801c002:	2d00      	cmp	r5, #0
 801c004:	4607      	mov	r7, r0
 801c006:	db01      	blt.n	801c00c <_malloc_r+0x1c>
 801c008:	42a9      	cmp	r1, r5
 801c00a:	d905      	bls.n	801c018 <_malloc_r+0x28>
 801c00c:	230c      	movs	r3, #12
 801c00e:	603b      	str	r3, [r7, #0]
 801c010:	2600      	movs	r6, #0
 801c012:	4630      	mov	r0, r6
 801c014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c018:	4e2e      	ldr	r6, [pc, #184]	; (801c0d4 <_malloc_r+0xe4>)
 801c01a:	f000 f907 	bl	801c22c <__malloc_lock>
 801c01e:	6833      	ldr	r3, [r6, #0]
 801c020:	461c      	mov	r4, r3
 801c022:	bb34      	cbnz	r4, 801c072 <_malloc_r+0x82>
 801c024:	4629      	mov	r1, r5
 801c026:	4638      	mov	r0, r7
 801c028:	f7ff ffc2 	bl	801bfb0 <sbrk_aligned>
 801c02c:	1c43      	adds	r3, r0, #1
 801c02e:	4604      	mov	r4, r0
 801c030:	d14d      	bne.n	801c0ce <_malloc_r+0xde>
 801c032:	6834      	ldr	r4, [r6, #0]
 801c034:	4626      	mov	r6, r4
 801c036:	2e00      	cmp	r6, #0
 801c038:	d140      	bne.n	801c0bc <_malloc_r+0xcc>
 801c03a:	6823      	ldr	r3, [r4, #0]
 801c03c:	4631      	mov	r1, r6
 801c03e:	4638      	mov	r0, r7
 801c040:	eb04 0803 	add.w	r8, r4, r3
 801c044:	f000 f848 	bl	801c0d8 <_sbrk_r>
 801c048:	4580      	cmp	r8, r0
 801c04a:	d13a      	bne.n	801c0c2 <_malloc_r+0xd2>
 801c04c:	6821      	ldr	r1, [r4, #0]
 801c04e:	3503      	adds	r5, #3
 801c050:	1a6d      	subs	r5, r5, r1
 801c052:	f025 0503 	bic.w	r5, r5, #3
 801c056:	3508      	adds	r5, #8
 801c058:	2d0c      	cmp	r5, #12
 801c05a:	bf38      	it	cc
 801c05c:	250c      	movcc	r5, #12
 801c05e:	4629      	mov	r1, r5
 801c060:	4638      	mov	r0, r7
 801c062:	f7ff ffa5 	bl	801bfb0 <sbrk_aligned>
 801c066:	3001      	adds	r0, #1
 801c068:	d02b      	beq.n	801c0c2 <_malloc_r+0xd2>
 801c06a:	6823      	ldr	r3, [r4, #0]
 801c06c:	442b      	add	r3, r5
 801c06e:	6023      	str	r3, [r4, #0]
 801c070:	e00e      	b.n	801c090 <_malloc_r+0xa0>
 801c072:	6822      	ldr	r2, [r4, #0]
 801c074:	1b52      	subs	r2, r2, r5
 801c076:	d41e      	bmi.n	801c0b6 <_malloc_r+0xc6>
 801c078:	2a0b      	cmp	r2, #11
 801c07a:	d916      	bls.n	801c0aa <_malloc_r+0xba>
 801c07c:	1961      	adds	r1, r4, r5
 801c07e:	42a3      	cmp	r3, r4
 801c080:	6025      	str	r5, [r4, #0]
 801c082:	bf18      	it	ne
 801c084:	6059      	strne	r1, [r3, #4]
 801c086:	6863      	ldr	r3, [r4, #4]
 801c088:	bf08      	it	eq
 801c08a:	6031      	streq	r1, [r6, #0]
 801c08c:	5162      	str	r2, [r4, r5]
 801c08e:	604b      	str	r3, [r1, #4]
 801c090:	4638      	mov	r0, r7
 801c092:	f104 060b 	add.w	r6, r4, #11
 801c096:	f000 f8cf 	bl	801c238 <__malloc_unlock>
 801c09a:	f026 0607 	bic.w	r6, r6, #7
 801c09e:	1d23      	adds	r3, r4, #4
 801c0a0:	1af2      	subs	r2, r6, r3
 801c0a2:	d0b6      	beq.n	801c012 <_malloc_r+0x22>
 801c0a4:	1b9b      	subs	r3, r3, r6
 801c0a6:	50a3      	str	r3, [r4, r2]
 801c0a8:	e7b3      	b.n	801c012 <_malloc_r+0x22>
 801c0aa:	6862      	ldr	r2, [r4, #4]
 801c0ac:	42a3      	cmp	r3, r4
 801c0ae:	bf0c      	ite	eq
 801c0b0:	6032      	streq	r2, [r6, #0]
 801c0b2:	605a      	strne	r2, [r3, #4]
 801c0b4:	e7ec      	b.n	801c090 <_malloc_r+0xa0>
 801c0b6:	4623      	mov	r3, r4
 801c0b8:	6864      	ldr	r4, [r4, #4]
 801c0ba:	e7b2      	b.n	801c022 <_malloc_r+0x32>
 801c0bc:	4634      	mov	r4, r6
 801c0be:	6876      	ldr	r6, [r6, #4]
 801c0c0:	e7b9      	b.n	801c036 <_malloc_r+0x46>
 801c0c2:	230c      	movs	r3, #12
 801c0c4:	603b      	str	r3, [r7, #0]
 801c0c6:	4638      	mov	r0, r7
 801c0c8:	f000 f8b6 	bl	801c238 <__malloc_unlock>
 801c0cc:	e7a1      	b.n	801c012 <_malloc_r+0x22>
 801c0ce:	6025      	str	r5, [r4, #0]
 801c0d0:	e7de      	b.n	801c090 <_malloc_r+0xa0>
 801c0d2:	bf00      	nop
 801c0d4:	24006d68 	.word	0x24006d68

0801c0d8 <_sbrk_r>:
 801c0d8:	b538      	push	{r3, r4, r5, lr}
 801c0da:	4d06      	ldr	r5, [pc, #24]	; (801c0f4 <_sbrk_r+0x1c>)
 801c0dc:	2300      	movs	r3, #0
 801c0de:	4604      	mov	r4, r0
 801c0e0:	4608      	mov	r0, r1
 801c0e2:	602b      	str	r3, [r5, #0]
 801c0e4:	f7e9 f8d4 	bl	8005290 <_sbrk>
 801c0e8:	1c43      	adds	r3, r0, #1
 801c0ea:	d102      	bne.n	801c0f2 <_sbrk_r+0x1a>
 801c0ec:	682b      	ldr	r3, [r5, #0]
 801c0ee:	b103      	cbz	r3, 801c0f2 <_sbrk_r+0x1a>
 801c0f0:	6023      	str	r3, [r4, #0]
 801c0f2:	bd38      	pop	{r3, r4, r5, pc}
 801c0f4:	24006d70 	.word	0x24006d70

0801c0f8 <__sread>:
 801c0f8:	b510      	push	{r4, lr}
 801c0fa:	460c      	mov	r4, r1
 801c0fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c100:	f000 f8a0 	bl	801c244 <_read_r>
 801c104:	2800      	cmp	r0, #0
 801c106:	bfab      	itete	ge
 801c108:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c10a:	89a3      	ldrhlt	r3, [r4, #12]
 801c10c:	181b      	addge	r3, r3, r0
 801c10e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c112:	bfac      	ite	ge
 801c114:	6563      	strge	r3, [r4, #84]	; 0x54
 801c116:	81a3      	strhlt	r3, [r4, #12]
 801c118:	bd10      	pop	{r4, pc}

0801c11a <__swrite>:
 801c11a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c11e:	461f      	mov	r7, r3
 801c120:	898b      	ldrh	r3, [r1, #12]
 801c122:	05db      	lsls	r3, r3, #23
 801c124:	4605      	mov	r5, r0
 801c126:	460c      	mov	r4, r1
 801c128:	4616      	mov	r6, r2
 801c12a:	d505      	bpl.n	801c138 <__swrite+0x1e>
 801c12c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c130:	2302      	movs	r3, #2
 801c132:	2200      	movs	r2, #0
 801c134:	f000 f868 	bl	801c208 <_lseek_r>
 801c138:	89a3      	ldrh	r3, [r4, #12]
 801c13a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c13e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c142:	81a3      	strh	r3, [r4, #12]
 801c144:	4632      	mov	r2, r6
 801c146:	463b      	mov	r3, r7
 801c148:	4628      	mov	r0, r5
 801c14a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c14e:	f000 b817 	b.w	801c180 <_write_r>

0801c152 <__sseek>:
 801c152:	b510      	push	{r4, lr}
 801c154:	460c      	mov	r4, r1
 801c156:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c15a:	f000 f855 	bl	801c208 <_lseek_r>
 801c15e:	1c43      	adds	r3, r0, #1
 801c160:	89a3      	ldrh	r3, [r4, #12]
 801c162:	bf15      	itete	ne
 801c164:	6560      	strne	r0, [r4, #84]	; 0x54
 801c166:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c16a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c16e:	81a3      	strheq	r3, [r4, #12]
 801c170:	bf18      	it	ne
 801c172:	81a3      	strhne	r3, [r4, #12]
 801c174:	bd10      	pop	{r4, pc}

0801c176 <__sclose>:
 801c176:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c17a:	f000 b813 	b.w	801c1a4 <_close_r>
	...

0801c180 <_write_r>:
 801c180:	b538      	push	{r3, r4, r5, lr}
 801c182:	4d07      	ldr	r5, [pc, #28]	; (801c1a0 <_write_r+0x20>)
 801c184:	4604      	mov	r4, r0
 801c186:	4608      	mov	r0, r1
 801c188:	4611      	mov	r1, r2
 801c18a:	2200      	movs	r2, #0
 801c18c:	602a      	str	r2, [r5, #0]
 801c18e:	461a      	mov	r2, r3
 801c190:	f7e9 f82d 	bl	80051ee <_write>
 801c194:	1c43      	adds	r3, r0, #1
 801c196:	d102      	bne.n	801c19e <_write_r+0x1e>
 801c198:	682b      	ldr	r3, [r5, #0]
 801c19a:	b103      	cbz	r3, 801c19e <_write_r+0x1e>
 801c19c:	6023      	str	r3, [r4, #0]
 801c19e:	bd38      	pop	{r3, r4, r5, pc}
 801c1a0:	24006d70 	.word	0x24006d70

0801c1a4 <_close_r>:
 801c1a4:	b538      	push	{r3, r4, r5, lr}
 801c1a6:	4d06      	ldr	r5, [pc, #24]	; (801c1c0 <_close_r+0x1c>)
 801c1a8:	2300      	movs	r3, #0
 801c1aa:	4604      	mov	r4, r0
 801c1ac:	4608      	mov	r0, r1
 801c1ae:	602b      	str	r3, [r5, #0]
 801c1b0:	f7e9 f839 	bl	8005226 <_close>
 801c1b4:	1c43      	adds	r3, r0, #1
 801c1b6:	d102      	bne.n	801c1be <_close_r+0x1a>
 801c1b8:	682b      	ldr	r3, [r5, #0]
 801c1ba:	b103      	cbz	r3, 801c1be <_close_r+0x1a>
 801c1bc:	6023      	str	r3, [r4, #0]
 801c1be:	bd38      	pop	{r3, r4, r5, pc}
 801c1c0:	24006d70 	.word	0x24006d70

0801c1c4 <_fstat_r>:
 801c1c4:	b538      	push	{r3, r4, r5, lr}
 801c1c6:	4d07      	ldr	r5, [pc, #28]	; (801c1e4 <_fstat_r+0x20>)
 801c1c8:	2300      	movs	r3, #0
 801c1ca:	4604      	mov	r4, r0
 801c1cc:	4608      	mov	r0, r1
 801c1ce:	4611      	mov	r1, r2
 801c1d0:	602b      	str	r3, [r5, #0]
 801c1d2:	f7e9 f834 	bl	800523e <_fstat>
 801c1d6:	1c43      	adds	r3, r0, #1
 801c1d8:	d102      	bne.n	801c1e0 <_fstat_r+0x1c>
 801c1da:	682b      	ldr	r3, [r5, #0]
 801c1dc:	b103      	cbz	r3, 801c1e0 <_fstat_r+0x1c>
 801c1de:	6023      	str	r3, [r4, #0]
 801c1e0:	bd38      	pop	{r3, r4, r5, pc}
 801c1e2:	bf00      	nop
 801c1e4:	24006d70 	.word	0x24006d70

0801c1e8 <_isatty_r>:
 801c1e8:	b538      	push	{r3, r4, r5, lr}
 801c1ea:	4d06      	ldr	r5, [pc, #24]	; (801c204 <_isatty_r+0x1c>)
 801c1ec:	2300      	movs	r3, #0
 801c1ee:	4604      	mov	r4, r0
 801c1f0:	4608      	mov	r0, r1
 801c1f2:	602b      	str	r3, [r5, #0]
 801c1f4:	f7e9 f833 	bl	800525e <_isatty>
 801c1f8:	1c43      	adds	r3, r0, #1
 801c1fa:	d102      	bne.n	801c202 <_isatty_r+0x1a>
 801c1fc:	682b      	ldr	r3, [r5, #0]
 801c1fe:	b103      	cbz	r3, 801c202 <_isatty_r+0x1a>
 801c200:	6023      	str	r3, [r4, #0]
 801c202:	bd38      	pop	{r3, r4, r5, pc}
 801c204:	24006d70 	.word	0x24006d70

0801c208 <_lseek_r>:
 801c208:	b538      	push	{r3, r4, r5, lr}
 801c20a:	4d07      	ldr	r5, [pc, #28]	; (801c228 <_lseek_r+0x20>)
 801c20c:	4604      	mov	r4, r0
 801c20e:	4608      	mov	r0, r1
 801c210:	4611      	mov	r1, r2
 801c212:	2200      	movs	r2, #0
 801c214:	602a      	str	r2, [r5, #0]
 801c216:	461a      	mov	r2, r3
 801c218:	f7e9 f82c 	bl	8005274 <_lseek>
 801c21c:	1c43      	adds	r3, r0, #1
 801c21e:	d102      	bne.n	801c226 <_lseek_r+0x1e>
 801c220:	682b      	ldr	r3, [r5, #0]
 801c222:	b103      	cbz	r3, 801c226 <_lseek_r+0x1e>
 801c224:	6023      	str	r3, [r4, #0]
 801c226:	bd38      	pop	{r3, r4, r5, pc}
 801c228:	24006d70 	.word	0x24006d70

0801c22c <__malloc_lock>:
 801c22c:	4801      	ldr	r0, [pc, #4]	; (801c234 <__malloc_lock+0x8>)
 801c22e:	f7ff be0b 	b.w	801be48 <__retarget_lock_acquire_recursive>
 801c232:	bf00      	nop
 801c234:	24006d64 	.word	0x24006d64

0801c238 <__malloc_unlock>:
 801c238:	4801      	ldr	r0, [pc, #4]	; (801c240 <__malloc_unlock+0x8>)
 801c23a:	f7ff be06 	b.w	801be4a <__retarget_lock_release_recursive>
 801c23e:	bf00      	nop
 801c240:	24006d64 	.word	0x24006d64

0801c244 <_read_r>:
 801c244:	b538      	push	{r3, r4, r5, lr}
 801c246:	4d07      	ldr	r5, [pc, #28]	; (801c264 <_read_r+0x20>)
 801c248:	4604      	mov	r4, r0
 801c24a:	4608      	mov	r0, r1
 801c24c:	4611      	mov	r1, r2
 801c24e:	2200      	movs	r2, #0
 801c250:	602a      	str	r2, [r5, #0]
 801c252:	461a      	mov	r2, r3
 801c254:	f7e8 ffae 	bl	80051b4 <_read>
 801c258:	1c43      	adds	r3, r0, #1
 801c25a:	d102      	bne.n	801c262 <_read_r+0x1e>
 801c25c:	682b      	ldr	r3, [r5, #0]
 801c25e:	b103      	cbz	r3, 801c262 <_read_r+0x1e>
 801c260:	6023      	str	r3, [r4, #0]
 801c262:	bd38      	pop	{r3, r4, r5, pc}
 801c264:	24006d70 	.word	0x24006d70

0801c268 <_init>:
 801c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c26a:	bf00      	nop
 801c26c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c26e:	bc08      	pop	{r3}
 801c270:	469e      	mov	lr, r3
 801c272:	4770      	bx	lr

0801c274 <_fini>:
 801c274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c276:	bf00      	nop
 801c278:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c27a:	bc08      	pop	{r3}
 801c27c:	469e      	mov	lr, r3
 801c27e:	4770      	bx	lr
