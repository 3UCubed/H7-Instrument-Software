
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016a90  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08016d30  08016d30  00026d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017144  08017144  00027144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801714c  0801714c  0002714c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017150  08017150  00027150  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017154  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000594c  24000120  0801725c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a6c  0801725c  00035a6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00033674  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000570c  00000000  00000000  000637aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002720  00000000  00000000  00068eb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002508  00000000  00000000  0006b5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  000400d0  00000000  00000000  0006dae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00032188  00000000  00000000  000adbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00194946  00000000  00000000  000dfd38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0027467e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000af58  00000000  00000000  002746d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016d18 	.word	0x08016d18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016d18 	.word	0x08016d18

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <vApplicationTickHook>:
/* Hook prototypes */
void vApplicationTickHook(void);

/* USER CODE BEGIN 3 */
void vApplicationTickHook( void )
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
   /* This function will be called by each tick interrupt if
   configUSE_TICK_HOOK is set to 1 in FreeRTOSConfig.h. User code can be
   added here, but the tick hook is called from an interrupt context, so
   code must not attempt to block, and only the interrupt safe FreeRTOS API
   functions can be used (those that end in FromISR()). */
	UptimeMillis++;
 80005e8:	4b04      	ldr	r3, [pc, #16]	; (80005fc <vApplicationTickHook+0x18>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	3301      	adds	r3, #1
 80005ee:	4a03      	ldr	r2, [pc, #12]	; (80005fc <vApplicationTickHook+0x18>)
 80005f0:	6013      	str	r3, [r2, #0]
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	24000c18 	.word	0x24000c18

08000600 <HAL_TIM_OC_DelayElapsedCallback>:
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
 8000606:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 800060c:	4293      	cmp	r3, r2
 800060e:	d106      	bne.n	800061e <HAL_TIM_OC_DelayElapsedCallback+0x1e>
	{
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 8000610:	4b12      	ldr	r3, [pc, #72]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2101      	movs	r1, #1
 8000616:	4618      	mov	r0, r3
 8000618:	f012 fb5a 	bl	8012cd0 <osEventFlagsSet>
	}
	else
	{
		printf("Unknown Timer Interrupt\n");
	}
}
 800061c:	e018      	b.n	8000650 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim2)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d106      	bne.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2102      	movs	r1, #2
 800062c:	4618      	mov	r0, r3
 800062e:	f012 fb4f 	bl	8012cd0 <osEventFlagsSet>
}
 8000632:	e00d      	b.n	8000650 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	else if (htim == &htim3)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d106      	bne.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	2104      	movs	r1, #4
 8000642:	4618      	mov	r0, r3
 8000644:	f012 fb44 	bl	8012cd0 <osEventFlagsSet>
}
 8000648:	e002      	b.n	8000650 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800064a:	4807      	ldr	r0, [pc, #28]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 800064c:	f015 ffb4 	bl	80165b8 <puts>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	24000508 	.word	0x24000508
 800065c:	24000c38 	.word	0x24000c38
 8000660:	24000554 	.word	0x24000554
 8000664:	240005a0 	.word	0x240005a0
 8000668:	08016d90 	.word	0x08016d90

0800066c <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	49f2      	ldr	r1, [pc, #968]	; (8000a40 <HAL_UART_RxCpltCallback+0x3d4>)
 8000678:	48f2      	ldr	r0, [pc, #968]	; (8000a44 <HAL_UART_RxCpltCallback+0x3d8>)
 800067a:	f00f fcc3 	bl	8010004 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800067e:	4bf0      	ldr	r3, [pc, #960]	; (8000a40 <HAL_UART_RxCpltCallback+0x3d4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2be0      	cmp	r3, #224	; 0xe0
 8000688:	f200 83e8 	bhi.w	8000e5c <HAL_UART_RxCpltCallback+0x7f0>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <HAL_UART_RxCpltCallback+0x28>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	08000a2d 	.word	0x08000a2d
 8000698:	08000a69 	.word	0x08000a69
 800069c:	08000aef 	.word	0x08000aef
 80006a0:	08000b19 	.word	0x08000b19
 80006a4:	08000b41 	.word	0x08000b41
 80006a8:	08000b6b 	.word	0x08000b6b
 80006ac:	08000b97 	.word	0x08000b97
 80006b0:	08000bc3 	.word	0x08000bc3
 80006b4:	08000bed 	.word	0x08000bed
 80006b8:	08000c19 	.word	0x08000c19
 80006bc:	08000c45 	.word	0x08000c45
 80006c0:	08000c77 	.word	0x08000c77
 80006c4:	08000ca9 	.word	0x08000ca9
 80006c8:	08000cfb 	.word	0x08000cfb
 80006cc:	08000e01 	.word	0x08000e01
 80006d0:	08000e31 	.word	0x08000e31
 80006d4:	08000a19 	.word	0x08000a19
 80006d8:	08000a55 	.word	0x08000a55
 80006dc:	08000ad9 	.word	0x08000ad9
 80006e0:	08000b05 	.word	0x08000b05
 80006e4:	08000b2d 	.word	0x08000b2d
 80006e8:	08000b55 	.word	0x08000b55
 80006ec:	08000b81 	.word	0x08000b81
 80006f0:	08000bad 	.word	0x08000bad
 80006f4:	08000bd9 	.word	0x08000bd9
 80006f8:	08000c01 	.word	0x08000c01
 80006fc:	08000c29 	.word	0x08000c29
 8000700:	08000c5b 	.word	0x08000c5b
 8000704:	08000c8d 	.word	0x08000c8d
 8000708:	08000cbf 	.word	0x08000cbf
 800070c:	08000dd9 	.word	0x08000dd9
 8000710:	08000e29 	.word	0x08000e29
 8000714:	08000e5d 	.word	0x08000e5d
 8000718:	08000e5d 	.word	0x08000e5d
 800071c:	08000e5d 	.word	0x08000e5d
 8000720:	08000e5d 	.word	0x08000e5d
 8000724:	08000e5d 	.word	0x08000e5d
 8000728:	08000e5d 	.word	0x08000e5d
 800072c:	08000e5d 	.word	0x08000e5d
 8000730:	08000e5d 	.word	0x08000e5d
 8000734:	08000e5d 	.word	0x08000e5d
 8000738:	08000e5d 	.word	0x08000e5d
 800073c:	08000e5d 	.word	0x08000e5d
 8000740:	08000e5d 	.word	0x08000e5d
 8000744:	08000e5d 	.word	0x08000e5d
 8000748:	08000e5d 	.word	0x08000e5d
 800074c:	08000e5d 	.word	0x08000e5d
 8000750:	08000e5d 	.word	0x08000e5d
 8000754:	08000e5d 	.word	0x08000e5d
 8000758:	08000e5d 	.word	0x08000e5d
 800075c:	08000e5d 	.word	0x08000e5d
 8000760:	08000e5d 	.word	0x08000e5d
 8000764:	08000e5d 	.word	0x08000e5d
 8000768:	08000e5d 	.word	0x08000e5d
 800076c:	08000e5d 	.word	0x08000e5d
 8000770:	08000e5d 	.word	0x08000e5d
 8000774:	08000e5d 	.word	0x08000e5d
 8000778:	08000e5d 	.word	0x08000e5d
 800077c:	08000e5d 	.word	0x08000e5d
 8000780:	08000e5d 	.word	0x08000e5d
 8000784:	08000e5d 	.word	0x08000e5d
 8000788:	08000e5d 	.word	0x08000e5d
 800078c:	08000e5d 	.word	0x08000e5d
 8000790:	08000e5d 	.word	0x08000e5d
 8000794:	08000e5d 	.word	0x08000e5d
 8000798:	08000e5d 	.word	0x08000e5d
 800079c:	08000e5d 	.word	0x08000e5d
 80007a0:	08000e5d 	.word	0x08000e5d
 80007a4:	08000e5d 	.word	0x08000e5d
 80007a8:	08000e5d 	.word	0x08000e5d
 80007ac:	08000e5d 	.word	0x08000e5d
 80007b0:	08000e5d 	.word	0x08000e5d
 80007b4:	08000e5d 	.word	0x08000e5d
 80007b8:	08000e5d 	.word	0x08000e5d
 80007bc:	08000e5d 	.word	0x08000e5d
 80007c0:	08000e5d 	.word	0x08000e5d
 80007c4:	08000e5d 	.word	0x08000e5d
 80007c8:	08000e5d 	.word	0x08000e5d
 80007cc:	08000e5d 	.word	0x08000e5d
 80007d0:	08000e5d 	.word	0x08000e5d
 80007d4:	08000e5d 	.word	0x08000e5d
 80007d8:	08000e5d 	.word	0x08000e5d
 80007dc:	08000e5d 	.word	0x08000e5d
 80007e0:	08000e5d 	.word	0x08000e5d
 80007e4:	08000e5d 	.word	0x08000e5d
 80007e8:	08000e5d 	.word	0x08000e5d
 80007ec:	08000e5d 	.word	0x08000e5d
 80007f0:	08000e5d 	.word	0x08000e5d
 80007f4:	08000e5d 	.word	0x08000e5d
 80007f8:	08000e5d 	.word	0x08000e5d
 80007fc:	08000e5d 	.word	0x08000e5d
 8000800:	08000e5d 	.word	0x08000e5d
 8000804:	08000e5d 	.word	0x08000e5d
 8000808:	08000e5d 	.word	0x08000e5d
 800080c:	08000e5d 	.word	0x08000e5d
 8000810:	08000e5d 	.word	0x08000e5d
 8000814:	08000e5d 	.word	0x08000e5d
 8000818:	08000e5d 	.word	0x08000e5d
 800081c:	08000e5d 	.word	0x08000e5d
 8000820:	08000e5d 	.word	0x08000e5d
 8000824:	08000e5d 	.word	0x08000e5d
 8000828:	08000e5d 	.word	0x08000e5d
 800082c:	08000e5d 	.word	0x08000e5d
 8000830:	08000e5d 	.word	0x08000e5d
 8000834:	08000e5d 	.word	0x08000e5d
 8000838:	08000e5d 	.word	0x08000e5d
 800083c:	08000e5d 	.word	0x08000e5d
 8000840:	08000e5d 	.word	0x08000e5d
 8000844:	08000e5d 	.word	0x08000e5d
 8000848:	08000e5d 	.word	0x08000e5d
 800084c:	08000e5d 	.word	0x08000e5d
 8000850:	08000e5d 	.word	0x08000e5d
 8000854:	08000e5d 	.word	0x08000e5d
 8000858:	08000e5d 	.word	0x08000e5d
 800085c:	08000e5d 	.word	0x08000e5d
 8000860:	08000e5d 	.word	0x08000e5d
 8000864:	08000e5d 	.word	0x08000e5d
 8000868:	08000e5d 	.word	0x08000e5d
 800086c:	08000e5d 	.word	0x08000e5d
 8000870:	08000e5d 	.word	0x08000e5d
 8000874:	08000e5d 	.word	0x08000e5d
 8000878:	08000e5d 	.word	0x08000e5d
 800087c:	08000e5d 	.word	0x08000e5d
 8000880:	08000e5d 	.word	0x08000e5d
 8000884:	08000e5d 	.word	0x08000e5d
 8000888:	08000e5d 	.word	0x08000e5d
 800088c:	08000e5d 	.word	0x08000e5d
 8000890:	08000e5d 	.word	0x08000e5d
 8000894:	08000e5d 	.word	0x08000e5d
 8000898:	08000e5d 	.word	0x08000e5d
 800089c:	08000e5d 	.word	0x08000e5d
 80008a0:	08000e5d 	.word	0x08000e5d
 80008a4:	08000e5d 	.word	0x08000e5d
 80008a8:	08000e5d 	.word	0x08000e5d
 80008ac:	08000e5d 	.word	0x08000e5d
 80008b0:	08000e5d 	.word	0x08000e5d
 80008b4:	08000e5d 	.word	0x08000e5d
 80008b8:	08000e5d 	.word	0x08000e5d
 80008bc:	08000e5d 	.word	0x08000e5d
 80008c0:	08000e5d 	.word	0x08000e5d
 80008c4:	08000e5d 	.word	0x08000e5d
 80008c8:	08000e5d 	.word	0x08000e5d
 80008cc:	08000e5d 	.word	0x08000e5d
 80008d0:	08000e5d 	.word	0x08000e5d
 80008d4:	08000e5d 	.word	0x08000e5d
 80008d8:	08000e5d 	.word	0x08000e5d
 80008dc:	08000e5d 	.word	0x08000e5d
 80008e0:	08000e5d 	.word	0x08000e5d
 80008e4:	08000e5d 	.word	0x08000e5d
 80008e8:	08000e5d 	.word	0x08000e5d
 80008ec:	08000e5d 	.word	0x08000e5d
 80008f0:	08000e5d 	.word	0x08000e5d
 80008f4:	08000e5d 	.word	0x08000e5d
 80008f8:	08000e5d 	.word	0x08000e5d
 80008fc:	08000e5d 	.word	0x08000e5d
 8000900:	08000e5d 	.word	0x08000e5d
 8000904:	08000e5d 	.word	0x08000e5d
 8000908:	08000e5d 	.word	0x08000e5d
 800090c:	08000e5d 	.word	0x08000e5d
 8000910:	08000e5d 	.word	0x08000e5d
 8000914:	08000e5d 	.word	0x08000e5d
 8000918:	08000e5d 	.word	0x08000e5d
 800091c:	08000e5d 	.word	0x08000e5d
 8000920:	08000e5d 	.word	0x08000e5d
 8000924:	08000e5d 	.word	0x08000e5d
 8000928:	08000e5d 	.word	0x08000e5d
 800092c:	08000e5d 	.word	0x08000e5d
 8000930:	08000e5d 	.word	0x08000e5d
 8000934:	08000e5d 	.word	0x08000e5d
 8000938:	08000e5d 	.word	0x08000e5d
 800093c:	08000e5d 	.word	0x08000e5d
 8000940:	08000e5d 	.word	0x08000e5d
 8000944:	08000e5d 	.word	0x08000e5d
 8000948:	08000e5d 	.word	0x08000e5d
 800094c:	08000e5d 	.word	0x08000e5d
 8000950:	08000e5d 	.word	0x08000e5d
 8000954:	08000e5d 	.word	0x08000e5d
 8000958:	08000e5d 	.word	0x08000e5d
 800095c:	08000e5d 	.word	0x08000e5d
 8000960:	08000e5d 	.word	0x08000e5d
 8000964:	08000e5d 	.word	0x08000e5d
 8000968:	08000e5d 	.word	0x08000e5d
 800096c:	08000e5d 	.word	0x08000e5d
 8000970:	08000e5d 	.word	0x08000e5d
 8000974:	08000e5d 	.word	0x08000e5d
 8000978:	08000e5d 	.word	0x08000e5d
 800097c:	08000e5d 	.word	0x08000e5d
 8000980:	08000e5d 	.word	0x08000e5d
 8000984:	08000e5d 	.word	0x08000e5d
 8000988:	08000e5d 	.word	0x08000e5d
 800098c:	08000e5d 	.word	0x08000e5d
 8000990:	08000e5d 	.word	0x08000e5d
 8000994:	08000e5d 	.word	0x08000e5d
 8000998:	08000e5d 	.word	0x08000e5d
 800099c:	08000e5d 	.word	0x08000e5d
 80009a0:	08000e5d 	.word	0x08000e5d
 80009a4:	08000e5d 	.word	0x08000e5d
 80009a8:	08000e5d 	.word	0x08000e5d
 80009ac:	08000e5d 	.word	0x08000e5d
 80009b0:	08000e5d 	.word	0x08000e5d
 80009b4:	08000e5d 	.word	0x08000e5d
 80009b8:	08000e5d 	.word	0x08000e5d
 80009bc:	08000e5d 	.word	0x08000e5d
 80009c0:	08000e5d 	.word	0x08000e5d
 80009c4:	08000e5d 	.word	0x08000e5d
 80009c8:	08000e5d 	.word	0x08000e5d
 80009cc:	08000e5d 	.word	0x08000e5d
 80009d0:	08000e5d 	.word	0x08000e5d
 80009d4:	08000e4b 	.word	0x08000e4b
 80009d8:	08000e5d 	.word	0x08000e5d
 80009dc:	08000e5d 	.word	0x08000e5d
 80009e0:	08000e5d 	.word	0x08000e5d
 80009e4:	08000e5d 	.word	0x08000e5d
 80009e8:	08000e5d 	.word	0x08000e5d
 80009ec:	08000e5d 	.word	0x08000e5d
 80009f0:	08000e5d 	.word	0x08000e5d
 80009f4:	08000e5d 	.word	0x08000e5d
 80009f8:	08000e5d 	.word	0x08000e5d
 80009fc:	08000e5d 	.word	0x08000e5d
 8000a00:	08000e5d 	.word	0x08000e5d
 8000a04:	08000e5d 	.word	0x08000e5d
 8000a08:	08000e5d 	.word	0x08000e5d
 8000a0c:	08000e5d 	.word	0x08000e5d
 8000a10:	08000e5d 	.word	0x08000e5d
 8000a14:	08000e39 	.word	0x08000e39
	case 0x10: {
		printf("SDN1 ON\n");
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a1a:	f015 fdcd 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a20:	2104      	movs	r1, #4
 8000a22:	2201      	movs	r2, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f008 f9c5 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000a2a:	e222      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a2e:	f015 fdc3 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a34:	2104      	movs	r1, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f008 f9bb 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000a3e:	e218      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
 8000a40:	24000c3c 	.word	0x24000c3c
 8000a44:	24000638 	.word	0x24000638
 8000a48:	08016da8 	.word	0x08016da8
 8000a4c:	58020400 	.word	0x58020400
 8000a50:	08016db0 	.word	0x08016db0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a54:	48b8      	ldr	r0, [pc, #736]	; (8000d38 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a56:	f015 fdaf 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a5a:	4bb8      	ldr	r3, [pc, #736]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4618      	mov	r0, r3
 8000a62:	f008 f9a7 	bl	8008db4 <HAL_GPIO_WritePin>

		break;
 8000a66:	e204      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a68:	48b5      	ldr	r0, [pc, #724]	; (8000d40 <HAL_UART_RxCpltCallback+0x6d4>)
 8000a6a:	f015 fda5 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a6e:	4bb3      	ldr	r3, [pc, #716]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a70:	2120      	movs	r1, #32
 8000a72:	2200      	movs	r2, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f008 f99d 	bl	8008db4 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a7a:	4bb0      	ldr	r3, [pc, #704]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f997 	bl	8008db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a86:	4baf      	ldr	r3, [pc, #700]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f008 f990 	bl	8008db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a94:	4bab      	ldr	r3, [pc, #684]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 f989 	bl	8008db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000aa2:	4ba8      	ldr	r3, [pc, #672]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 f982 	bl	8008db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ab0:	4ba4      	ldr	r3, [pc, #656]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 f97c 	bl	8008db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000abc:	4ba1      	ldr	r3, [pc, #644]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f008 f976 	bl	8008db4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ac8:	4b9e      	ldr	r3, [pc, #632]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f008 f96f 	bl	8008db4 <HAL_GPIO_WritePin>

		break;
 8000ad6:	e1cc      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000ad8:	489b      	ldr	r0, [pc, #620]	; (8000d48 <HAL_UART_RxCpltCallback+0x6dc>)
 8000ada:	f015 fd6d 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ade:	4b99      	ldr	r3, [pc, #612]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f008 f964 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000aec:	e1c1      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000aee:	4897      	ldr	r0, [pc, #604]	; (8000d4c <HAL_UART_RxCpltCallback+0x6e0>)
 8000af0:	f015 fd62 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000af4:	4b93      	ldr	r3, [pc, #588]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afa:	2200      	movs	r2, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f008 f959 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000b02:	e1b6      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b04:	4892      	ldr	r0, [pc, #584]	; (8000d50 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b06:	f015 fd57 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b0a:	4b8e      	ldr	r3, [pc, #568]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f008 f94f 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000b16:	e1ac      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b18:	488e      	ldr	r0, [pc, #568]	; (8000d54 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b1a:	f015 fd4d 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b1e:	4b89      	ldr	r3, [pc, #548]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	2200      	movs	r2, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f008 f945 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000b2a:	e1a2      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b2c:	488a      	ldr	r0, [pc, #552]	; (8000d58 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b2e:	f015 fd43 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b32:	4b84      	ldr	r3, [pc, #528]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	2201      	movs	r2, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 f93b 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000b3e:	e198      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b40:	4886      	ldr	r0, [pc, #536]	; (8000d5c <HAL_UART_RxCpltCallback+0x6f0>)
 8000b42:	f015 fd39 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b46:	4b7f      	ldr	r3, [pc, #508]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 f931 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000b52:	e18e      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b54:	4882      	ldr	r0, [pc, #520]	; (8000d60 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b56:	f015 fd2f 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b5a:	4b7a      	ldr	r3, [pc, #488]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	2201      	movs	r2, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 f926 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000b68:	e183      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b6a:	487e      	ldr	r0, [pc, #504]	; (8000d64 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b6c:	f015 fd24 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b70:	4b74      	ldr	r3, [pc, #464]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	2200      	movs	r2, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f008 f91b 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000b7e:	e178      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b80:	4879      	ldr	r0, [pc, #484]	; (8000d68 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b82:	f015 fd19 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b86:	4b6f      	ldr	r3, [pc, #444]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 f910 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000b94:	e16d      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b96:	4875      	ldr	r0, [pc, #468]	; (8000d6c <HAL_UART_RxCpltCallback+0x700>)
 8000b98:	f015 fd0e 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 f905 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000baa:	e162      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bac:	4870      	ldr	r0, [pc, #448]	; (8000d70 <HAL_UART_RxCpltCallback+0x704>)
 8000bae:	f015 fd03 	bl	80165b8 <puts>
	    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bb2:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f008 f8fa 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000bc0:	e157      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bc2:	486c      	ldr	r0, [pc, #432]	; (8000d74 <HAL_UART_RxCpltCallback+0x708>)
 8000bc4:	f015 fcf8 	bl	80165b8 <puts>
	    HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bc8:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f008 f8ef 	bl	8008db4 <HAL_GPIO_WritePin>

		break;
 8000bd6:	e14c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bd8:	4867      	ldr	r0, [pc, #412]	; (8000d78 <HAL_UART_RxCpltCallback+0x70c>)
 8000bda:	f015 fced 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bde:	4b57      	ldr	r3, [pc, #348]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	2201      	movs	r2, #1
 8000be4:	4618      	mov	r0, r3
 8000be6:	f008 f8e5 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000bea:	e142      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bec:	4863      	ldr	r0, [pc, #396]	; (8000d7c <HAL_UART_RxCpltCallback+0x710>)
 8000bee:	f015 fce3 	bl	80165b8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bf2:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000bf4:	2140      	movs	r1, #64	; 0x40
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f008 f8db 	bl	8008db4 <HAL_GPIO_WritePin>
		break;
 8000bfe:	e138      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c00:	485f      	ldr	r0, [pc, #380]	; (8000d80 <HAL_UART_RxCpltCallback+0x714>)
 8000c02:	f015 fcd9 	bl	80165b8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c06:	2300      	movs	r3, #0
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	4a5d      	ldr	r2, [pc, #372]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	485d      	ldr	r0, [pc, #372]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000c12:	f004 fd3f 	bl	8005694 <HAL_DAC_Start_DMA>
		break;
 8000c16:	e12c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c18:	485c      	ldr	r0, [pc, #368]	; (8000d8c <HAL_UART_RxCpltCallback+0x720>)
 8000c1a:	f015 fccd 	bl	80165b8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4859      	ldr	r0, [pc, #356]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000c22:	f004 fdf7 	bl	8005814 <HAL_DAC_Stop_DMA>
		break;
 8000c26:	e124      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c28:	4859      	ldr	r0, [pc, #356]	; (8000d90 <HAL_UART_RxCpltCallback+0x724>)
 8000c2a:	f015 fcc5 	bl	80165b8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c2e:	210c      	movs	r1, #12
 8000c30:	4858      	ldr	r0, [pc, #352]	; (8000d94 <HAL_UART_RxCpltCallback+0x728>)
 8000c32:	f00d fd07 	bl	800e644 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c36:	4b58      	ldr	r3, [pc, #352]	; (8000d98 <HAL_UART_RxCpltCallback+0x72c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <HAL_UART_RxCpltCallback+0x730>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	801a      	strh	r2, [r3, #0]
		break;
 8000c42:	e116      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c44:	4856      	ldr	r0, [pc, #344]	; (8000da0 <HAL_UART_RxCpltCallback+0x734>)
 8000c46:	f015 fcb7 	bl	80165b8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	4851      	ldr	r0, [pc, #324]	; (8000d94 <HAL_UART_RxCpltCallback+0x728>)
 8000c4e:	f00d fe53 	bl	800e8f8 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c52:	4b51      	ldr	r3, [pc, #324]	; (8000d98 <HAL_UART_RxCpltCallback+0x72c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
		break;
 8000c58:	e10b      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c5a:	4852      	ldr	r0, [pc, #328]	; (8000da4 <HAL_UART_RxCpltCallback+0x738>)
 8000c5c:	f015 fcac 	bl	80165b8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4851      	ldr	r0, [pc, #324]	; (8000da8 <HAL_UART_RxCpltCallback+0x73c>)
 8000c64:	f00d fcee 	bl	800e644 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <HAL_UART_RxCpltCallback+0x740>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c6e:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <HAL_UART_RxCpltCallback+0x744>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
		break;
 8000c74:	e0fd      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c76:	484f      	ldr	r0, [pc, #316]	; (8000db4 <HAL_UART_RxCpltCallback+0x748>)
 8000c78:	f015 fc9e 	bl	80165b8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	484a      	ldr	r0, [pc, #296]	; (8000da8 <HAL_UART_RxCpltCallback+0x73c>)
 8000c80:	f00d fe3a 	bl	800e8f8 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_UART_RxCpltCallback+0x740>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
		break;
 8000c8a:	e0f2      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c8c:	484a      	ldr	r0, [pc, #296]	; (8000db8 <HAL_UART_RxCpltCallback+0x74c>)
 8000c8e:	f015 fc93 	bl	80165b8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c92:	2100      	movs	r1, #0
 8000c94:	4849      	ldr	r0, [pc, #292]	; (8000dbc <HAL_UART_RxCpltCallback+0x750>)
 8000c96:	f00d fcd5 	bl	800e644 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000c9a:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_UART_RxCpltCallback+0x754>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000ca0:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <HAL_UART_RxCpltCallback+0x758>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
		break;
 8000ca6:	e0e4      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000ca8:	4847      	ldr	r0, [pc, #284]	; (8000dc8 <HAL_UART_RxCpltCallback+0x75c>)
 8000caa:	f015 fc85 	bl	80165b8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4842      	ldr	r0, [pc, #264]	; (8000dbc <HAL_UART_RxCpltCallback+0x750>)
 8000cb2:	f00d fe21 	bl	800e8f8 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000cb6:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <HAL_UART_RxCpltCallback+0x754>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
		break;
 8000cbc:	e0d9      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cbe:	4843      	ldr	r0, [pc, #268]	; (8000dcc <HAL_UART_RxCpltCallback+0x760>)
 8000cc0:	f015 fc7a 	bl	80165b8 <puts>
		if (step < 17) {
 8000cc4:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b10      	cmp	r3, #16
 8000cca:	f200 80cb 	bhi.w	8000e64 <HAL_UART_RxCpltCallback+0x7f8>
			step+=2;
 8000cce:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cd8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000cda:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4827      	ldr	r0, [pc, #156]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000cec:	f004 fe35 	bl	800595a <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4825      	ldr	r0, [pc, #148]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000cf4:	f004 fc76 	bl	80055e4 <HAL_DAC_Start>
		}
		break;
 8000cf8:	e0b4      	b.n	8000e64 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000cfa:	4836      	ldr	r0, [pc, #216]	; (8000dd4 <HAL_UART_RxCpltCallback+0x768>)
 8000cfc:	f015 fc5c 	bl	80165b8 <puts>
		if (step > 3) {
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	f240 80af 	bls.w	8000e68 <HAL_UART_RxCpltCallback+0x7fc>
			step-=2;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3b02      	subs	r3, #2
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d14:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_OUT[step]);
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	4818      	ldr	r0, [pc, #96]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000d28:	f004 fe17 	bl	800595a <HAL_DAC_SetValue>
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4816      	ldr	r0, [pc, #88]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000d30:	f004 fc58 	bl	80055e4 <HAL_DAC_Start>
		}
		break;
 8000d34:	e098      	b.n	8000e68 <HAL_UART_RxCpltCallback+0x7fc>
 8000d36:	bf00      	nop
 8000d38:	08016dbc 	.word	0x08016dbc
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	08016dc8 	.word	0x08016dc8
 8000d44:	58020800 	.word	0x58020800
 8000d48:	08016dd4 	.word	0x08016dd4
 8000d4c:	08016de0 	.word	0x08016de0
 8000d50:	08016df0 	.word	0x08016df0
 8000d54:	08016dfc 	.word	0x08016dfc
 8000d58:	08016e08 	.word	0x08016e08
 8000d5c:	08016e14 	.word	0x08016e14
 8000d60:	08016e24 	.word	0x08016e24
 8000d64:	08016e30 	.word	0x08016e30
 8000d68:	08016e3c 	.word	0x08016e3c
 8000d6c:	08016e48 	.word	0x08016e48
 8000d70:	08016e54 	.word	0x08016e54
 8000d74:	08016e64 	.word	0x08016e64
 8000d78:	08016e74 	.word	0x08016e74
 8000d7c:	08016e80 	.word	0x08016e80
 8000d80:	08016e90 	.word	0x08016e90
 8000d84:	24000010 	.word	0x24000010
 8000d88:	240002f4 	.word	0x240002f4
 8000d8c:	08016ea0 	.word	0x08016ea0
 8000d90:	08016eb0 	.word	0x08016eb0
 8000d94:	24000554 	.word	0x24000554
 8000d98:	24000c33 	.word	0x24000c33
 8000d9c:	24000c2e 	.word	0x24000c2e
 8000da0:	08016eb8 	.word	0x08016eb8
 8000da4:	08016ec4 	.word	0x08016ec4
 8000da8:	24000508 	.word	0x24000508
 8000dac:	24000c32 	.word	0x24000c32
 8000db0:	24000c2c 	.word	0x24000c2c
 8000db4:	08016ecc 	.word	0x08016ecc
 8000db8:	08016ed4 	.word	0x08016ed4
 8000dbc:	240005a0 	.word	0x240005a0
 8000dc0:	24000c34 	.word	0x24000c34
 8000dc4:	24000c30 	.word	0x24000c30
 8000dc8:	08016edc 	.word	0x08016edc
 8000dcc:	08016ee4 	.word	0x08016ee4
 8000dd0:	2400000c 	.word	0x2400000c
 8000dd4:	08016eec 	.word	0x08016eec
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000dd8:	4828      	ldr	r0, [pc, #160]	; (8000e7c <HAL_UART_RxCpltCallback+0x810>)
 8000dda:	f015 fbed 	bl	80165b8 <puts>
		if (cadence <= 50000){
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d840      	bhi.n	8000e6c <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000df2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dfe:	e035      	b.n	8000e6c <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e00:	4820      	ldr	r0, [pc, #128]	; (8000e84 <HAL_UART_RxCpltCallback+0x818>)
 8000e02:	f015 fbd9 	bl	80165b8 <puts>
		if (cadence >= 6250){
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d92e      	bls.n	8000e70 <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	085b      	lsrs	r3, r3, #1
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e1a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e26:	e023      	b.n	8000e70 <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e28:	4817      	ldr	r0, [pc, #92]	; (8000e88 <HAL_UART_RxCpltCallback+0x81c>)
 8000e2a:	f015 fbc5 	bl	80165b8 <puts>
		// TODO: Exit stop mode
		break;
 8000e2e:	e020      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e30:	4816      	ldr	r0, [pc, #88]	; (8000e8c <HAL_UART_RxCpltCallback+0x820>)
 8000e32:	f015 fbc1 	bl	80165b8 <puts>
		// TODO: Enter stop mode
		break;
 8000e36:	e01c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e38:	4815      	ldr	r0, [pc, #84]	; (8000e90 <HAL_UART_RxCpltCallback+0x824>)
 8000e3a:	f015 fbbd 	bl	80165b8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_RxCpltCallback+0x828>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f013 fc1a 	bl	801467c <xTaskResumeFromISR>
		break;
 8000e48:	e013      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e4a:	4813      	ldr	r0, [pc, #76]	; (8000e98 <HAL_UART_RxCpltCallback+0x82c>)
 8000e4c:	f015 fbb4 	bl	80165b8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_UART_RxCpltCallback+0x830>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f013 fc11 	bl	801467c <xTaskResumeFromISR>
		break;
 8000e5a:	e00a      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	default:{
		printf("Unknown Command\n");
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <HAL_UART_RxCpltCallback+0x834>)
 8000e5e:	f015 fbab 	bl	80165b8 <puts>
		break;
 8000e62:	e006      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e64:	bf00      	nop
 8000e66:	e004      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e68:	bf00      	nop
 8000e6a:	e002      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e70:	bf00      	nop
	}
	}
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08016ef8 	.word	0x08016ef8
 8000e80:	24000008 	.word	0x24000008
 8000e84:	08016f04 	.word	0x08016f04
 8000e88:	08016f10 	.word	0x08016f10
 8000e8c:	08016f20 	.word	0x08016f20
 8000e90:	08016f30 	.word	0x08016f30
 8000e94:	24000754 	.word	0x24000754
 8000e98:	08016f3c 	.word	0x08016f3c
 8000e9c:	240009b4 	.word	0x240009b4
 8000ea0:	08016f48 	.word	0x08016f48

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f002 fe08 	bl	8003abc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f8a6 	bl	8000ffc <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eb0:	f000 f92e 	bl	8001110 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 fed6 	bl	8001c64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb8:	f000 fe9c 	bl	8001bf4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ebc:	f000 fdb2 	bl	8001a24 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ec0:	f000 fe4c 	bl	8001b5c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ec4:	f000 fb3a 	bl	800153c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ec8:	f000 fc30 	bl	800172c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ecc:	f000 fd34 	bl	8001938 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ed0:	f000 fc84 	bl	80017dc <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ed4:	f000 fa6e 	bl	80013b4 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000ed8:	f000 f94a 	bl	8001170 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000edc:	f000 fafc 	bl	80014d8 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000ee0:	f000 fbcc 	bl	800167c <MX_SPI1_Init>
  MX_RTC_Init();
 8000ee4:	f000 fb6c 	bl	80015c0 <MX_RTC_Init>
  MX_TIM4_Init();
 8000ee8:	f000 fdea 	bl	8001ac0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	if (!handshake())
 8000eec:	f001 f8ae 	bl	800204c <handshake>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <main+0x56>
	{
		Error_Handler();
 8000ef6:	f001 feb3 	bl	8002c60 <Error_Handler>
	}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000efa:	f011 fd71 	bl	80129e0 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2108      	movs	r1, #8
 8000f02:	2010      	movs	r0, #16
 8000f04:	f011 ff8e 	bl	8012e24 <osMessageQueueNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a24      	ldr	r2, [pc, #144]	; (8000f9c <main+0xf8>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f0e:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <main+0xfc>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4824      	ldr	r0, [pc, #144]	; (8000fa4 <main+0x100>)
 8000f14:	f011 fdae 	bl	8012a74 <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a23      	ldr	r2, [pc, #140]	; (8000fa8 <main+0x104>)
 8000f1c:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f1e:	4a23      	ldr	r2, [pc, #140]	; (8000fac <main+0x108>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4823      	ldr	r0, [pc, #140]	; (8000fb0 <main+0x10c>)
 8000f24:	f011 fda6 	bl	8012a74 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a22      	ldr	r2, [pc, #136]	; (8000fb4 <main+0x110>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f2e:	4a22      	ldr	r2, [pc, #136]	; (8000fb8 <main+0x114>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4822      	ldr	r0, [pc, #136]	; (8000fbc <main+0x118>)
 8000f34:	f011 fd9e 	bl	8012a74 <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a21      	ldr	r2, [pc, #132]	; (8000fc0 <main+0x11c>)
 8000f3c:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f3e:	4a21      	ldr	r2, [pc, #132]	; (8000fc4 <main+0x120>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4821      	ldr	r0, [pc, #132]	; (8000fc8 <main+0x124>)
 8000f44:	f011 fd96 	bl	8012a74 <osThreadNew>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a20      	ldr	r2, [pc, #128]	; (8000fcc <main+0x128>)
 8000f4c:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f4e:	4a20      	ldr	r2, [pc, #128]	; (8000fd0 <main+0x12c>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	4820      	ldr	r0, [pc, #128]	; (8000fd4 <main+0x130>)
 8000f54:	f011 fd8e 	bl	8012a74 <osThreadNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a1f      	ldr	r2, [pc, #124]	; (8000fd8 <main+0x134>)
 8000f5c:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f5e:	4a1f      	ldr	r2, [pc, #124]	; (8000fdc <main+0x138>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <main+0x13c>)
 8000f64:	f011 fd86 	bl	8012a74 <osThreadNew>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <main+0x140>)
 8000f6c:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <main+0x144>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	481e      	ldr	r0, [pc, #120]	; (8000fec <main+0x148>)
 8000f74:	f011 fd7e 	bl	8012a74 <osThreadNew>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <main+0x14c>)
 8000f7c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f011 fe66 	bl	8012c50 <osEventFlagsNew>
 8000f84:	4603      	mov	r3, r0
 8000f86:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <main+0x150>)
 8000f88:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f8a:	f001 f8f3 	bl	8002174 <system_setup>
	printf("Starting kernal...\n");
 8000f8e:	481a      	ldr	r0, [pc, #104]	; (8000ff8 <main+0x154>)
 8000f90:	f015 fb12 	bl	80165b8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f94:	f011 fd48 	bl	8012a28 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f98:	e7fe      	b.n	8000f98 <main+0xf4>
 8000f9a:	bf00      	nop
 8000f9c:	24000c1c 	.word	0x24000c1c
 8000fa0:	08016fa4 	.word	0x08016fa4
 8000fa4:	0800294d 	.word	0x0800294d
 8000fa8:	24000744 	.word	0x24000744
 8000fac:	08016fc8 	.word	0x08016fc8
 8000fb0:	08002991 	.word	0x08002991
 8000fb4:	24000748 	.word	0x24000748
 8000fb8:	08016fec 	.word	0x08016fec
 8000fbc:	080029d5 	.word	0x080029d5
 8000fc0:	2400074c 	.word	0x2400074c
 8000fc4:	08017010 	.word	0x08017010
 8000fc8:	08002a19 	.word	0x08002a19
 8000fcc:	24000750 	.word	0x24000750
 8000fd0:	08017034 	.word	0x08017034
 8000fd4:	08002a3d 	.word	0x08002a3d
 8000fd8:	24000754 	.word	0x24000754
 8000fdc:	08017058 	.word	0x08017058
 8000fe0:	08002ae5 	.word	0x08002ae5
 8000fe4:	240009b4 	.word	0x240009b4
 8000fe8:	0801707c 	.word	0x0801707c
 8000fec:	08002b8d 	.word	0x08002b8d
 8000ff0:	24000c14 	.word	0x24000c14
 8000ff4:	24000c38 	.word	0x24000c38
 8000ff8:	08016f58 	.word	0x08016f58

08000ffc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b09c      	sub	sp, #112	; 0x70
 8001000:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001002:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001006:	224c      	movs	r2, #76	; 0x4c
 8001008:	2100      	movs	r1, #0
 800100a:	4618      	mov	r0, r3
 800100c:	f015 f97e 	bl	801630c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	2220      	movs	r2, #32
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f015 f978 	bl	801630c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800101c:	2002      	movs	r0, #2
 800101e:	f008 fcff 	bl	8009a20 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	4b37      	ldr	r3, [pc, #220]	; (8001104 <SystemClock_Config+0x108>)
 8001028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800102a:	4a36      	ldr	r2, [pc, #216]	; (8001104 <SystemClock_Config+0x108>)
 800102c:	f023 0301 	bic.w	r3, r3, #1
 8001030:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001032:	4b34      	ldr	r3, [pc, #208]	; (8001104 <SystemClock_Config+0x108>)
 8001034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001036:	f003 0301 	and.w	r3, r3, #1
 800103a:	603b      	str	r3, [r7, #0]
 800103c:	4b32      	ldr	r3, [pc, #200]	; (8001108 <SystemClock_Config+0x10c>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001044:	4a30      	ldr	r2, [pc, #192]	; (8001108 <SystemClock_Config+0x10c>)
 8001046:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800104a:	6193      	str	r3, [r2, #24]
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <SystemClock_Config+0x10c>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001054:	603b      	str	r3, [r7, #0]
 8001056:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001058:	bf00      	nop
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <SystemClock_Config+0x10c>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001062:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001066:	d1f8      	bne.n	800105a <SystemClock_Config+0x5e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001068:	f008 fcca 	bl	8009a00 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800106c:	f002 fd82 	bl	8003b74 <HAL_GetREVID>
 8001070:	4b26      	ldr	r3, [pc, #152]	; (800110c <SystemClock_Config+0x110>)
 8001072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001074:	4a25      	ldr	r2, [pc, #148]	; (800110c <SystemClock_Config+0x110>)
 8001076:	f023 0318 	bic.w	r3, r3, #24
 800107a:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 800107c:	2305      	movs	r3, #5
 800107e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001080:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001084:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001086:	2301      	movs	r3, #1
 8001088:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108a:	2302      	movs	r3, #2
 800108c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800108e:	2302      	movs	r3, #2
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001092:	2304      	movs	r3, #4
 8001094:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001096:	2320      	movs	r3, #32
 8001098:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800109a:	2304      	movs	r3, #4
 800109c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800109e:	2304      	movs	r3, #4
 80010a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a2:	2302      	movs	r3, #2
 80010a4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010a6:	2308      	movs	r3, #8
 80010a8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010aa:	2300      	movs	r3, #0
 80010ac:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b6:	4618      	mov	r0, r3
 80010b8:	f008 fcec 	bl	8009a94 <HAL_RCC_OscConfig>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80010c2:	f001 fdcd 	bl	8002c60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	233f      	movs	r3, #63	; 0x3f
 80010c8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ca:	2303      	movs	r3, #3
 80010cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2101      	movs	r1, #1
 80010ea:	4618      	mov	r0, r3
 80010ec:	f009 f92c 	bl	800a348 <HAL_RCC_ClockConfig>
 80010f0:	4603      	mov	r3, r0
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d001      	beq.n	80010fa <SystemClock_Config+0xfe>
  {
    Error_Handler();
 80010f6:	f001 fdb3 	bl	8002c60 <Error_Handler>
  }
}
 80010fa:	bf00      	nop
 80010fc:	3770      	adds	r7, #112	; 0x70
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	58000400 	.word	0x58000400
 8001108:	58024800 	.word	0x58024800
 800110c:	58024400 	.word	0x58024400

08001110 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b0      	sub	sp, #192	; 0xc0
 8001114:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	22c0      	movs	r2, #192	; 0xc0
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f015 f8f5 	bl	801630c <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001122:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800112e:	2304      	movs	r3, #4
 8001130:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001132:	2320      	movs	r3, #32
 8001134:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001136:	2308      	movs	r3, #8
 8001138:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800113a:	2304      	movs	r3, #4
 800113c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	4618      	mov	r0, r3
 8001158:	f009 fcc4 	bl	800aae4 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001162:	f001 fd7d 	bl	8002c60 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	37c0      	adds	r7, #192	; 0xc0
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	615a      	str	r2, [r3, #20]
 8001192:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001194:	4b7a      	ldr	r3, [pc, #488]	; (8001380 <MX_ADC1_Init+0x210>)
 8001196:	4a7b      	ldr	r2, [pc, #492]	; (8001384 <MX_ADC1_Init+0x214>)
 8001198:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800119a:	4b79      	ldr	r3, [pc, #484]	; (8001380 <MX_ADC1_Init+0x210>)
 800119c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a2:	4b77      	ldr	r3, [pc, #476]	; (8001380 <MX_ADC1_Init+0x210>)
 80011a4:	2208      	movs	r2, #8
 80011a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011a8:	4b75      	ldr	r3, [pc, #468]	; (8001380 <MX_ADC1_Init+0x210>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ae:	4b74      	ldr	r3, [pc, #464]	; (8001380 <MX_ADC1_Init+0x210>)
 80011b0:	2204      	movs	r2, #4
 80011b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b4:	4b72      	ldr	r3, [pc, #456]	; (8001380 <MX_ADC1_Init+0x210>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ba:	4b71      	ldr	r3, [pc, #452]	; (8001380 <MX_ADC1_Init+0x210>)
 80011bc:	2201      	movs	r2, #1
 80011be:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011c0:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <MX_ADC1_Init+0x210>)
 80011c2:	220b      	movs	r2, #11
 80011c4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b6e      	ldr	r3, [pc, #440]	; (8001380 <MX_ADC1_Init+0x210>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011cc:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <MX_ADC1_Init+0x210>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d2:	4b6b      	ldr	r3, [pc, #428]	; (8001380 <MX_ADC1_Init+0x210>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011d8:	4b69      	ldr	r3, [pc, #420]	; (8001380 <MX_ADC1_Init+0x210>)
 80011da:	2203      	movs	r2, #3
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011de:	4b68      	ldr	r3, [pc, #416]	; (8001380 <MX_ADC1_Init+0x210>)
 80011e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011e6:	4b66      	ldr	r3, [pc, #408]	; (8001380 <MX_ADC1_Init+0x210>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <MX_ADC1_Init+0x210>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f4:	4862      	ldr	r0, [pc, #392]	; (8001380 <MX_ADC1_Init+0x210>)
 80011f6:	f002 feed 	bl	8003fd4 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001200:	f001 fd2e 	bl	8002c60 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	485c      	ldr	r0, [pc, #368]	; (8001380 <MX_ADC1_Init+0x210>)
 8001210:	f004 f808 	bl	8005224 <HAL_ADCEx_MultiModeConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800121a:	f001 fd21 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800121e:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <MX_ADC1_Init+0x218>)
 8001220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001222:	2306      	movs	r3, #6
 8001224:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001226:	2307      	movs	r3, #7
 8001228:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800122a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800122e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001230:	2304      	movs	r3, #4
 8001232:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	4619      	mov	r1, r3
 8001240:	484f      	ldr	r0, [pc, #316]	; (8001380 <MX_ADC1_Init+0x210>)
 8001242:	f003 f94b 	bl	80044dc <HAL_ADC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800124c:	f001 fd08 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <MX_ADC1_Init+0x21c>)
 8001252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001254:	230c      	movs	r3, #12
 8001256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4848      	ldr	r0, [pc, #288]	; (8001380 <MX_ADC1_Init+0x210>)
 800125e:	f003 f93d 	bl	80044dc <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001268:	f001 fcfa 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800126c:	4b48      	ldr	r3, [pc, #288]	; (8001390 <MX_ADC1_Init+0x220>)
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001270:	2312      	movs	r3, #18
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	4841      	ldr	r0, [pc, #260]	; (8001380 <MX_ADC1_Init+0x210>)
 800127a:	f003 f92f 	bl	80044dc <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001284:	f001 fcec 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001288:	4b42      	ldr	r3, [pc, #264]	; (8001394 <MX_ADC1_Init+0x224>)
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800128c:	2318      	movs	r3, #24
 800128e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	483a      	ldr	r0, [pc, #232]	; (8001380 <MX_ADC1_Init+0x210>)
 8001296:	f003 f921 	bl	80044dc <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012a0:	f001 fcde 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012a4:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <MX_ADC1_Init+0x228>)
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4833      	ldr	r0, [pc, #204]	; (8001380 <MX_ADC1_Init+0x210>)
 80012b4:	f003 f912 	bl	80044dc <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012be:	f001 fccf 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <MX_ADC1_Init+0x22c>)
 80012c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012c6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	482b      	ldr	r0, [pc, #172]	; (8001380 <MX_ADC1_Init+0x210>)
 80012d2:	f003 f903 	bl	80044dc <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012dc:	f001 fcc0 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <MX_ADC1_Init+0x230>)
 80012e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012e4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4824      	ldr	r0, [pc, #144]	; (8001380 <MX_ADC1_Init+0x210>)
 80012f0:	f003 f8f4 	bl	80044dc <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012fa:	f001 fcb1 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <MX_ADC1_Init+0x234>)
 8001300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001302:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	481c      	ldr	r0, [pc, #112]	; (8001380 <MX_ADC1_Init+0x210>)
 800130e:	f003 f8e5 	bl	80044dc <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001318:	f001 fca2 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <MX_ADC1_Init+0x238>)
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001320:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4815      	ldr	r0, [pc, #84]	; (8001380 <MX_ADC1_Init+0x210>)
 800132c:	f003 f8d6 	bl	80044dc <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001336:	f001 fc93 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_ADC1_Init+0x23c>)
 800133c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800133e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001342:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_ADC1_Init+0x210>)
 800134a:	f003 f8c7 	bl	80044dc <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001354:	f001 fc84 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_ADC1_Init+0x240>)
 800135a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800135c:	f240 2306 	movw	r3, #518	; 0x206
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <MX_ADC1_Init+0x210>)
 8001368:	f003 f8b8 	bl	80044dc <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001372:	f001 fc75 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2400013c 	.word	0x2400013c
 8001384:	40022000 	.word	0x40022000
 8001388:	0c900008 	.word	0x0c900008
 800138c:	10c00010 	.word	0x10c00010
 8001390:	14f00020 	.word	0x14f00020
 8001394:	1d500080 	.word	0x1d500080
 8001398:	21800100 	.word	0x21800100
 800139c:	25b00200 	.word	0x25b00200
 80013a0:	2a000400 	.word	0x2a000400
 80013a4:	2e300800 	.word	0x2e300800
 80013a8:	3ac04000 	.word	0x3ac04000
 80013ac:	3ef08000 	.word	0x3ef08000
 80013b0:	47520000 	.word	0x47520000

080013b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013cc:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013ce:	4a3e      	ldr	r2, [pc, #248]	; (80014c8 <MX_ADC3_Init+0x114>)
 80013d0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013d4:	2208      	movs	r2, #8
 80013d6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013d8:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013da:	2201      	movs	r2, #1
 80013dc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013de:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013e0:	2204      	movs	r2, #4
 80013e2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001404:	2200      	movs	r2, #0
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <MX_ADC3_Init+0x110>)
 800140a:	2203      	movs	r2, #3
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001416:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001418:	2200      	movs	r2, #0
 800141a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_ADC3_Init+0x110>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001424:	4827      	ldr	r0, [pc, #156]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001426:	f002 fdd5 	bl	8003fd4 <HAL_ADC_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001430:	f001 fc16 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <MX_ADC3_Init+0x118>)
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001438:	2306      	movs	r3, #6
 800143a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800143c:	2307      	movs	r3, #7
 800143e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001440:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001444:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001446:	2304      	movs	r3, #4
 8001448:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001458:	f003 f840 	bl	80044dc <HAL_ADC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001462:	f001 fbfd 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_ADC3_Init+0x11c>)
 8001468:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800146a:	230c      	movs	r3, #12
 800146c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001474:	f003 f832 	bl	80044dc <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800147e:	f001 fbef 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001482:	2301      	movs	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001486:	2312      	movs	r3, #18
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001490:	f003 f824 	bl	80044dc <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800149a:	f001 fbe1 	bl	8002c60 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <MX_ADC3_Init+0x120>)
 80014a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014a2:	2318      	movs	r3, #24
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_ADC3_Init+0x110>)
 80014ac:	f003 f816 	bl	80044dc <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014b6:	f001 fbd3 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	240001a0 	.word	0x240001a0
 80014c8:	58026000 	.word	0x58026000
 80014cc:	cb840000 	.word	0xcb840000
 80014d0:	cfb80000 	.word	0xcfb80000
 80014d4:	04300002 	.word	0x04300002

080014d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2224      	movs	r2, #36	; 0x24
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f014 ff11 	bl	801630c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_DAC1_Init+0x5c>)
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_DAC1_Init+0x60>)
 80014ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <MX_DAC1_Init+0x5c>)
 80014f2:	f004 f855 	bl	80055a0 <HAL_DAC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014fc:	f001 fbb0 	bl	8002c60 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001504:	230a      	movs	r3, #10
 8001506:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800150c:	2301      	movs	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_DAC1_Init+0x5c>)
 800151c:	f004 fa70 	bl	8005a00 <HAL_DAC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001526:	f001 fb9b 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	240002f4 	.word	0x240002f4
 8001538:	40007400 	.word	0x40007400

0800153c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <MX_I2C1_Init+0x7c>)
 8001544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <MX_I2C1_Init+0x80>)
 800154a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_I2C1_Init+0x78>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001554:	2201      	movs	r2, #1
 8001556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_I2C1_Init+0x78>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x78>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001576:	480f      	ldr	r0, [pc, #60]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001578:	f007 fc36 	bl	8008de8 <HAL_I2C_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001582:	f001 fb6d 	bl	8002c60 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001586:	2100      	movs	r1, #0
 8001588:	480a      	ldr	r0, [pc, #40]	; (80015b4 <MX_I2C1_Init+0x78>)
 800158a:	f008 f97d 	bl	8009888 <HAL_I2CEx_ConfigAnalogFilter>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001594:	f001 fb64 	bl	8002c60 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001598:	2100      	movs	r1, #0
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_I2C1_Init+0x78>)
 800159c:	f008 f9bf 	bl	800991e <HAL_I2CEx_ConfigDigitalFilter>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015a6:	f001 fb5b 	bl	8002c60 <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f008 fa04 	bl	80099b8 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	24000380 	.word	0x24000380
 80015b8:	40005400 	.word	0x40005400
 80015bc:	0020081f 	.word	0x0020081f

080015c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_RTC_Init+0xb4>)
 80015da:	4a27      	ldr	r2, [pc, #156]	; (8001678 <MX_RTC_Init+0xb8>)
 80015dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <MX_RTC_Init+0xb4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 32;
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_RTC_Init+0xb4>)
 80015e6:	2220      	movs	r2, #32
 80015e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 1024;
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <MX_RTC_Init+0xb4>)
 80015ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_RTC_Init+0xb4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <MX_RTC_Init+0xb4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_RTC_Init+0xb4>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_RTC_Init+0xb4>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800160a:	481a      	ldr	r0, [pc, #104]	; (8001674 <MX_RTC_Init+0xb4>)
 800160c:	f00b ff68 	bl	800d4e0 <HAL_RTC_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001616:	f001 fb23 	bl	8002c60 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800161a:	2300      	movs	r3, #0
 800161c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800161e:	2300      	movs	r3, #0
 8001620:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001622:	2300      	movs	r3, #0
 8001624:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2201      	movs	r2, #1
 8001632:	4619      	mov	r1, r3
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <MX_RTC_Init+0xb4>)
 8001636:	f00b ffd5 	bl	800d5e4 <HAL_RTC_SetTime>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001640:	f001 fb0e 	bl	8002c60 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001644:	2301      	movs	r3, #1
 8001646:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001648:	2301      	movs	r3, #1
 800164a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800164c:	2301      	movs	r3, #1
 800164e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001650:	2300      	movs	r3, #0
 8001652:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	2201      	movs	r2, #1
 8001658:	4619      	mov	r1, r3
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <MX_RTC_Init+0xb4>)
 800165c:	f00c f8bc 	bl	800d7d8 <HAL_RTC_SetDate>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001666:	f001 fafb 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	240003d4 	.word	0x240003d4
 8001678:	58004000 	.word	0x58004000

0800167c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <MX_SPI1_Init+0xac>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001688:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800168c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001690:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001694:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001698:	220f      	movs	r2, #15
 800169a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_SPI1_Init+0xa8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016b2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_SPI1_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001710:	f00c fa08 	bl	800db24 <HAL_SPI_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800171a:	f001 faa1 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	240003f8 	.word	0x240003f8
 8001728:	40013000 	.word	0x40013000

0800172c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001732:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <MX_SPI2_Init+0xac>)
 8001734:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001738:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800173c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001740:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001744:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001748:	220f      	movs	r2, #15
 800174a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800175a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800175e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001762:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001766:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017c0:	f00c f9b0 	bl	800db24 <HAL_SPI_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017ca:	f001 fa49 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	24000480 	.word	0x24000480
 80017d8:	40003800 	.word	0x40003800

080017dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b09a      	sub	sp, #104	; 0x68
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	222c      	movs	r2, #44	; 0x2c
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f014 fd78 	bl	801630c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800181c:	4b44      	ldr	r3, [pc, #272]	; (8001930 <MX_TIM1_Init+0x154>)
 800181e:	4a45      	ldr	r2, [pc, #276]	; (8001934 <MX_TIM1_Init+0x158>)
 8001820:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001822:	4b43      	ldr	r3, [pc, #268]	; (8001930 <MX_TIM1_Init+0x154>)
 8001824:	2231      	movs	r2, #49	; 0x31
 8001826:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b41      	ldr	r3, [pc, #260]	; (8001930 <MX_TIM1_Init+0x154>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800182e:	4b40      	ldr	r3, [pc, #256]	; (8001930 <MX_TIM1_Init+0x154>)
 8001830:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001834:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b3e      	ldr	r3, [pc, #248]	; (8001930 <MX_TIM1_Init+0x154>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800183c:	4b3c      	ldr	r3, [pc, #240]	; (8001930 <MX_TIM1_Init+0x154>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	4b3b      	ldr	r3, [pc, #236]	; (8001930 <MX_TIM1_Init+0x154>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001848:	4839      	ldr	r0, [pc, #228]	; (8001930 <MX_TIM1_Init+0x154>)
 800184a:	f00c fdbc 	bl	800e3c6 <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001854:	f001 fa04 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800185e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001862:	4619      	mov	r1, r3
 8001864:	4832      	ldr	r0, [pc, #200]	; (8001930 <MX_TIM1_Init+0x154>)
 8001866:	f00d fba7 	bl	800efb8 <HAL_TIM_ConfigClockSource>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001870:	f001 f9f6 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001874:	482e      	ldr	r0, [pc, #184]	; (8001930 <MX_TIM1_Init+0x154>)
 8001876:	f00d f923 	bl	800eac0 <HAL_TIM_PWM_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001880:	f001 f9ee 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001890:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001894:	4619      	mov	r1, r3
 8001896:	4826      	ldr	r0, [pc, #152]	; (8001930 <MX_TIM1_Init+0x154>)
 8001898:	f00e f8e4 	bl	800fa64 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018a2:	f001 f9dd 	bl	8002c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 480-1;
 80018aa:	f240 13df 	movw	r3, #479	; 0x1df
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018b0:	2300      	movs	r3, #0
 80018b2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b4:	2300      	movs	r3, #0
 80018b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b8:	2300      	movs	r3, #0
 80018ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018bc:	2300      	movs	r3, #0
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018c0:	2300      	movs	r3, #0
 80018c2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	4818      	ldr	r0, [pc, #96]	; (8001930 <MX_TIM1_Init+0x154>)
 80018ce:	f00d fa5f 	bl	800ed90 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80018d8:	f001 f9c2 	bl	8002c60 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f6:	2300      	movs	r3, #0
 80018f8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018fa:	2300      	movs	r3, #0
 80018fc:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001902:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001904:	2300      	movs	r3, #0
 8001906:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001908:	2300      	movs	r3, #0
 800190a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800190c:	1d3b      	adds	r3, r7, #4
 800190e:	4619      	mov	r1, r3
 8001910:	4807      	ldr	r0, [pc, #28]	; (8001930 <MX_TIM1_Init+0x154>)
 8001912:	f00e f935 	bl	800fb80 <HAL_TIMEx_ConfigBreakDeadTime>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800191c:	f001 f9a0 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001920:	4803      	ldr	r0, [pc, #12]	; (8001930 <MX_TIM1_Init+0x154>)
 8001922:	f001 fd43 	bl	80033ac <HAL_TIM_MspPostInit>

}
 8001926:	bf00      	nop
 8001928:	3768      	adds	r7, #104	; 0x68
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	24000508 	.word	0x24000508
 8001934:	40010000 	.word	0x40010000

08001938 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08e      	sub	sp, #56	; 0x38
 800193c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
 8001946:	605a      	str	r2, [r3, #4]
 8001948:	609a      	str	r2, [r3, #8]
 800194a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800194c:	f107 031c 	add.w	r3, r7, #28
 8001950:	2200      	movs	r2, #0
 8001952:	601a      	str	r2, [r3, #0]
 8001954:	605a      	str	r2, [r3, #4]
 8001956:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001958:	463b      	mov	r3, r7
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
 800195e:	605a      	str	r2, [r3, #4]
 8001960:	609a      	str	r2, [r3, #8]
 8001962:	60da      	str	r2, [r3, #12]
 8001964:	611a      	str	r2, [r3, #16]
 8001966:	615a      	str	r2, [r3, #20]
 8001968:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800196a:	4b2d      	ldr	r3, [pc, #180]	; (8001a20 <MX_TIM2_Init+0xe8>)
 800196c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001970:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 8001972:	4b2b      	ldr	r3, [pc, #172]	; (8001a20 <MX_TIM2_Init+0xe8>)
 8001974:	2231      	movs	r2, #49	; 0x31
 8001976:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001978:	4b29      	ldr	r3, [pc, #164]	; (8001a20 <MX_TIM2_Init+0xe8>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800197e:	4b28      	ldr	r3, [pc, #160]	; (8001a20 <MX_TIM2_Init+0xe8>)
 8001980:	f640 4234 	movw	r2, #3124	; 0xc34
 8001984:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001986:	4b26      	ldr	r3, [pc, #152]	; (8001a20 <MX_TIM2_Init+0xe8>)
 8001988:	2200      	movs	r2, #0
 800198a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800198c:	4b24      	ldr	r3, [pc, #144]	; (8001a20 <MX_TIM2_Init+0xe8>)
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001992:	4823      	ldr	r0, [pc, #140]	; (8001a20 <MX_TIM2_Init+0xe8>)
 8001994:	f00c fd17 	bl	800e3c6 <HAL_TIM_Base_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800199e:	f001 f95f 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019ac:	4619      	mov	r1, r3
 80019ae:	481c      	ldr	r0, [pc, #112]	; (8001a20 <MX_TIM2_Init+0xe8>)
 80019b0:	f00d fb02 	bl	800efb8 <HAL_TIM_ConfigClockSource>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019ba:	f001 f951 	bl	8002c60 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019be:	4818      	ldr	r0, [pc, #96]	; (8001a20 <MX_TIM2_Init+0xe8>)
 80019c0:	f00d f87e 	bl	800eac0 <HAL_TIM_PWM_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019ca:	f001 f949 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ce:	2320      	movs	r3, #32
 80019d0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d6:	f107 031c 	add.w	r3, r7, #28
 80019da:	4619      	mov	r1, r3
 80019dc:	4810      	ldr	r0, [pc, #64]	; (8001a20 <MX_TIM2_Init+0xe8>)
 80019de:	f00e f841 	bl	800fa64 <HAL_TIMEx_MasterConfigSynchronization>
 80019e2:	4603      	mov	r3, r0
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d001      	beq.n	80019ec <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019e8:	f001 f93a 	bl	8002c60 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ec:	2360      	movs	r3, #96	; 0x60
 80019ee:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f4:	2300      	movs	r3, #0
 80019f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019fc:	463b      	mov	r3, r7
 80019fe:	220c      	movs	r2, #12
 8001a00:	4619      	mov	r1, r3
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <MX_TIM2_Init+0xe8>)
 8001a04:	f00d f9c4 	bl	800ed90 <HAL_TIM_PWM_ConfigChannel>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a0e:	f001 f927 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a12:	4803      	ldr	r0, [pc, #12]	; (8001a20 <MX_TIM2_Init+0xe8>)
 8001a14:	f001 fcca 	bl	80033ac <HAL_TIM_MspPostInit>

}
 8001a18:	bf00      	nop
 8001a1a:	3738      	adds	r7, #56	; 0x38
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	24000554 	.word	0x24000554

08001a24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0310 	add.w	r3, r7, #16
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	1d3b      	adds	r3, r7, #4
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	605a      	str	r2, [r3, #4]
 8001a40:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a42:	4b1d      	ldr	r3, [pc, #116]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a44:	4a1d      	ldr	r2, [pc, #116]	; (8001abc <MX_TIM3_Init+0x98>)
 8001a46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100-1;
 8001a48:	4b1b      	ldr	r3, [pc, #108]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a4a:	2263      	movs	r2, #99	; 0x63
 8001a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a56:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5c:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a68:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a6a:	f00c fcac 	bl	800e3c6 <HAL_TIM_Base_Init>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a74:	f001 f8f4 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7e:	f107 0310 	add.w	r3, r7, #16
 8001a82:	4619      	mov	r1, r3
 8001a84:	480c      	ldr	r0, [pc, #48]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001a86:	f00d fa97 	bl	800efb8 <HAL_TIM_ConfigClockSource>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001a90:	f001 f8e6 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <MX_TIM3_Init+0x94>)
 8001aa2:	f00d ffdf 	bl	800fa64 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d001      	beq.n	8001ab0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001aac:	f001 f8d8 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001ab0:	bf00      	nop
 8001ab2:	3720      	adds	r7, #32
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	240005a0 	.word	0x240005a0
 8001abc:	40000400 	.word	0x40000400

08001ac0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <MX_TIM4_Init+0x98>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 50-1;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001ae6:	2231      	movs	r2, #49	; 0x31
 8001ae8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001af6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b04:	4813      	ldr	r0, [pc, #76]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001b06:	f00c fc5e 	bl	800e3c6 <HAL_TIM_Base_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b10:	f001 f8a6 	bl	8002c60 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001b22:	f00d fa49 	bl	800efb8 <HAL_TIM_ConfigClockSource>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b2c:	f001 f898 	bl	8002c60 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001b3e:	f00d ff91 	bl	800fa64 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b48:	f001 f88a 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	240005ec 	.word	0x240005ec
 8001b58:	40000800 	.word	0x40000800

08001b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b62:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <MX_USART1_UART_Init+0x94>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b68:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba4:	4811      	ldr	r0, [pc, #68]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001ba6:	f00e f887 	bl	800fcb8 <HAL_UART_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bb0:	f001 f856 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001bb8:	f010 fe03 	bl	80127c2 <HAL_UARTEx_SetTxFifoThreshold>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bc2:	f001 f84d 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4808      	ldr	r0, [pc, #32]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001bca:	f010 fe38 	bl	801283e <HAL_UARTEx_SetRxFifoThreshold>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bd4:	f001 f844 	bl	8002c60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001bda:	f010 fdb9 	bl	8012750 <HAL_UARTEx_DisableFifoMode>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001be4:	f001 f83c 	bl	8002c60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	24000638 	.word	0x24000638
 8001bf0:	40011000 	.word	0x40011000

08001bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_DMA_Init+0x6c>)
 8001bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <MX_DMA_Init+0x6c>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_DMA_Init+0x6c>)
 8001c0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2105      	movs	r1, #5
 8001c1c:	200b      	movs	r0, #11
 8001c1e:	f003 fc97 	bl	8005550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c22:	200b      	movs	r0, #11
 8001c24:	f003 fcae 	bl	8005584 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	200c      	movs	r0, #12
 8001c2e:	f003 fc8f 	bl	8005550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c32:	200c      	movs	r0, #12
 8001c34:	f003 fca6 	bl	8005584 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2105      	movs	r1, #5
 8001c3c:	200d      	movs	r0, #13
 8001c3e:	f003 fc87 	bl	8005550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c42:	200d      	movs	r0, #13
 8001c44:	f003 fc9e 	bl	8005584 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2105      	movs	r1, #5
 8001c4c:	2010      	movs	r0, #16
 8001c4e:	f003 fc7f 	bl	8005550 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c52:	2010      	movs	r0, #16
 8001c54:	f003 fc96 	bl	8005584 <HAL_NVIC_EnableIRQ>

}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	58024400 	.word	0x58024400

08001c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	4a2b      	ldr	r2, [pc, #172]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbc:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001cf8:	4815      	ldr	r0, [pc, #84]	; (8001d50 <MX_GPIO_Init+0xec>)
 8001cfa:	f007 f85b 	bl	8008db4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2164      	movs	r1, #100	; 0x64
 8001d02:	4814      	ldr	r0, [pc, #80]	; (8001d54 <MX_GPIO_Init+0xf0>)
 8001d04:	f007 f856 	bl	8008db4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d08:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d0c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <MX_GPIO_Init+0xec>)
 8001d22:	f006 fe7f 	bl	8008a24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d26:	2364      	movs	r3, #100	; 0x64
 8001d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_GPIO_Init+0xf0>)
 8001d3e:	f006 fe71 	bl	8008a24 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58020800 	.word	0x58020800
 8001d54:	58020400 	.word	0x58020400

08001d58 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001d62:	2300      	movs	r3, #0
 8001d64:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	f107 0208 	add.w	r2, r7, #8
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <poll_i2c_sensor+0x7c>)
 8001d78:	f007 f8d2 	bl	8008f20 <HAL_I2C_Master_Transmit>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001d80:	7b7b      	ldrb	r3, [r7, #13]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001d86:	4814      	ldr	r0, [pc, #80]	; (8001dd8 <poll_i2c_sensor+0x80>)
 8001d88:	f014 fc16 	bl	80165b8 <puts>
 8001d8c:	e01c      	b.n	8001dc8 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	b299      	uxth	r1, r3
 8001d92:	f107 0208 	add.w	r2, r7, #8
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <poll_i2c_sensor+0x7c>)
 8001da0:	f007 f9d6 	bl	8009150 <HAL_I2C_Master_Receive>
 8001da4:	4603      	mov	r3, r0
 8001da6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001da8:	7b7b      	ldrb	r3, [r7, #13]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <poll_i2c_sensor+0x84>)
 8001db0:	f014 fc02 	bl	80165b8 <puts>
 8001db4:	e008      	b.n	8001dc8 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001db6:	7a3b      	ldrb	r3, [r7, #8]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dc0:	7a7a      	ldrb	r2, [r7, #9]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	10db      	asrs	r3, r3, #3
 8001dc6:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001dc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	24000380 	.word	0x24000380
 8001dd8:	08016f6c 	.word	0x08016f6c
 8001ddc:	08016f7c 	.word	0x08016f7c

08001de0 <receive_pmt_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001de8:	f107 010c 	add.w	r1, r7, #12
 8001dec:	2301      	movs	r3, #1
 8001dee:	2201      	movs	r2, #1
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <receive_pmt_spi+0x44>)
 8001df2:	f00b ffbb 	bl	800dd6c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001dfa:	7b7b      	ldrb	r3, [r7, #13]
 8001dfc:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <receive_pmt_spi+0x44>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <receive_pmt_spi+0x44>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e0c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7bba      	ldrb	r2, [r7, #14]
 8001e12:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3301      	adds	r3, #1
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	701a      	strb	r2, [r3, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	240003f8 	.word	0x240003f8

08001e28 <receive_erpa_spi>:
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001e30:	f107 010c 	add.w	r1, r7, #12
 8001e34:	2364      	movs	r3, #100	; 0x64
 8001e36:	2201      	movs	r2, #1
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <receive_erpa_spi+0x44>)
 8001e3a:	f00b ff97 	bl	800dd6c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e42:	7b7b      	ldrb	r3, [r7, #13]
 8001e44:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <receive_erpa_spi+0x44>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <receive_erpa_spi+0x44>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e54:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	701a      	strb	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	24000480 	.word	0x24000480

08001e70 <receive_erpa_adc>:
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];	// SWPmon --
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <receive_erpa_adc+0x30>)
 8001e7a:	885b      	ldrh	r3, [r3, #2]
 8001e7c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5]; 	// TEMP1 -- verified doesn't need to change
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <receive_erpa_adc+0x30>)
 8001e80:	895b      	ldrh	r3, [r3, #10]
 8001e82:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	89fa      	ldrh	r2, [r7, #14]
 8001e88:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	89ba      	ldrh	r2, [r7, #12]
 8001e90:	801a      	strh	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	24000ca0 	.word	0x24000ca0

08001ea4 <receive_hk_i2c>:
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001eac:	2390      	movs	r3, #144	; 0x90
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff52 	bl	8001d58 <poll_i2c_sensor>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001eb8:	2394      	movs	r3, #148	; 0x94
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff4c 	bl	8001d58 <poll_i2c_sensor>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001ec4:	2392      	movs	r3, #146	; 0x92
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff46 	bl	8001d58 <poll_i2c_sensor>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001ed0:	2396      	movs	r3, #150	; 0x96
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff40 	bl	8001d58 <poll_i2c_sensor>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	89fa      	ldrh	r2, [r7, #14]
 8001ee0:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	89ba      	ldrh	r2, [r7, #12]
 8001ee8:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	897a      	ldrh	r2, [r7, #10]
 8001ef0:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3306      	adds	r3, #6
 8001ef6:	893a      	ldrh	r2, [r7, #8]
 8001ef8:	801a      	strh	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <receive_hk_adc1>:
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b089      	sub	sp, #36	; 0x24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];	// BUSVmon -- verified doesn't need to change
 8001f0c:	4b21      	ldr	r3, [pc, #132]	; (8001f94 <receive_hk_adc1+0x90>)
 8001f0e:	8a9b      	ldrh	r3, [r3, #20]
 8001f10:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];	// BUSImon -- verified doesn't need to change
 8001f12:	4b20      	ldr	r3, [pc, #128]	; (8001f94 <receive_hk_adc1+0x90>)
 8001f14:	8a1b      	ldrh	r3, [r3, #16]
 8001f16:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];	// 2v5mon -- verified doesn't need to change
 8001f18:	4b1e      	ldr	r3, [pc, #120]	; (8001f94 <receive_hk_adc1+0x90>)
 8001f1a:	899b      	ldrh	r3, [r3, #12]
 8001f1c:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];	// n3v3mon --
 8001f1e:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <receive_hk_adc1+0x90>)
 8001f20:	8a5b      	ldrh	r3, [r3, #18]
 8001f22:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];	// n200v -- verified doesn't need to change
 8001f24:	4b1b      	ldr	r3, [pc, #108]	; (8001f94 <receive_hk_adc1+0x90>)
 8001f26:	889b      	ldrh	r3, [r3, #4]
 8001f28:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];	// n800v --
 8001f2a:	4b1a      	ldr	r3, [pc, #104]	; (8001f94 <receive_hk_adc1+0x90>)
 8001f2c:	88db      	ldrh	r3, [r3, #6]
 8001f2e:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];	// 5vmon --
 8001f30:	4b18      	ldr	r3, [pc, #96]	; (8001f94 <receive_hk_adc1+0x90>)
 8001f32:	89db      	ldrh	r3, [r3, #14]
 8001f34:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];	// 15vmon -- verified doesn't need to change
 8001f36:	4b17      	ldr	r3, [pc, #92]	; (8001f94 <receive_hk_adc1+0x90>)
 8001f38:	891b      	ldrh	r3, [r3, #8]
 8001f3a:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];	// 5vrefmon --
 8001f3c:	4b15      	ldr	r3, [pc, #84]	; (8001f94 <receive_hk_adc1+0x90>)
 8001f3e:	881b      	ldrh	r3, [r3, #0]
 8001f40:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	8bfa      	ldrh	r2, [r7, #30]
 8001f46:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3302      	adds	r3, #2
 8001f4c:	8bba      	ldrh	r2, [r7, #28]
 8001f4e:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	3304      	adds	r3, #4
 8001f54:	8b7a      	ldrh	r2, [r7, #26]
 8001f56:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	3306      	adds	r3, #6
 8001f5c:	8b3a      	ldrh	r2, [r7, #24]
 8001f5e:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3308      	adds	r3, #8
 8001f64:	8afa      	ldrh	r2, [r7, #22]
 8001f66:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	330a      	adds	r3, #10
 8001f6c:	8aba      	ldrh	r2, [r7, #20]
 8001f6e:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	330c      	adds	r3, #12
 8001f74:	8a7a      	ldrh	r2, [r7, #18]
 8001f76:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	330e      	adds	r3, #14
 8001f7c:	8a3a      	ldrh	r2, [r7, #16]
 8001f7e:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	3310      	adds	r3, #16
 8001f84:	89fa      	ldrh	r2, [r7, #14]
 8001f86:	801a      	strh	r2, [r3, #0]
}
 8001f88:	bf00      	nop
 8001f8a:	3724      	adds	r7, #36	; 0x24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	24000ca0 	.word	0x24000ca0

08001f98 <receive_hk_adc3>:
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001fa0:	4b10      	ldr	r3, [pc, #64]	; (8001fe4 <receive_hk_adc3+0x4c>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001fa6:	4b0f      	ldr	r3, [pc, #60]	; (8001fe4 <receive_hk_adc3+0x4c>)
 8001fa8:	885b      	ldrh	r3, [r3, #2]
 8001faa:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2]; 		// n5vmon --
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <receive_hk_adc3+0x4c>)
 8001fae:	889b      	ldrh	r3, [r3, #4]
 8001fb0:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];		// 3v3mon --
 8001fb2:	4b0c      	ldr	r3, [pc, #48]	; (8001fe4 <receive_hk_adc3+0x4c>)
 8001fb4:	88db      	ldrh	r3, [r3, #6]
 8001fb6:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	89fa      	ldrh	r2, [r7, #14]
 8001fbc:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	89ba      	ldrh	r2, [r7, #12]
 8001fc4:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	3304      	adds	r3, #4
 8001fca:	897a      	ldrh	r2, [r7, #10]
 8001fcc:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3306      	adds	r3, #6
 8001fd2:	893a      	ldrh	r2, [r7, #8]
 8001fd4:	801a      	strh	r2, [r3, #0]
}
 8001fd6:	bf00      	nop
 8001fd8:	3714      	adds	r7, #20
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	24000cc0 	.word	0x24000cc0

08001fe8 <HAL_UART_TxCpltCallback>:

// *********************************************************************************************************** HELPER FUNCTIONS
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <HAL_UART_TxCpltCallback+0x1c>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	24000000 	.word	0x24000000

08002008 <create_packet>:

packet_t create_packet(const uint8_t* data, uint16_t size) {
 8002008:	b580      	push	{r7, lr}
 800200a:	b086      	sub	sp, #24
 800200c:	af00      	add	r7, sp, #0
 800200e:	60f8      	str	r0, [r7, #12]
 8002010:	60b9      	str	r1, [r7, #8]
 8002012:	4613      	mov	r3, r2
 8002014:	80fb      	strh	r3, [r7, #6]
    packet_t packet;
    packet.array = (uint8_t*)malloc(size * sizeof(uint8_t)); // Allocate memory
 8002016:	88fb      	ldrh	r3, [r7, #6]
 8002018:	4618      	mov	r0, r3
 800201a:	f014 f959 	bl	80162d0 <malloc>
 800201e:	4603      	mov	r3, r0
 8002020:	613b      	str	r3, [r7, #16]
    if (packet.array == NULL) {
        // Memory allocation failed
        // Handle the error accordingly (e.g., return an error code or terminate the program)
    }
    memcpy(packet.array, data, size); // Copy the data into the packet array
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	88fa      	ldrh	r2, [r7, #6]
 8002026:	68b9      	ldr	r1, [r7, #8]
 8002028:	4618      	mov	r0, r3
 800202a:	f014 f961 	bl	80162f0 <memcpy>
    packet.size = size;
 800202e:	88fb      	ldrh	r3, [r7, #6]
 8002030:	82bb      	strh	r3, [r7, #20]
    return packet;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	461a      	mov	r2, r3
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800203e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	3718      	adds	r7, #24
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <handshake>:

int handshake()
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b090      	sub	sp, #64	; 0x40
 8002050:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8002052:	230a      	movs	r3, #10
 8002054:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do
	{
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8002056:	f107 011c 	add.w	r1, r7, #28
 800205a:	2364      	movs	r3, #100	; 0x64
 800205c:	2209      	movs	r2, #9
 800205e:	4842      	ldr	r0, [pc, #264]	; (8002168 <handshake+0x11c>)
 8002060:	f00d ff08 	bl	800fe74 <HAL_UART_Receive>
		key = rx_buffer[0];
 8002064:	7f3b      	ldrb	r3, [r7, #28]
 8002066:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	}while(key != 0xFF);
 800206a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800206e:	2bff      	cmp	r3, #255	; 0xff
 8002070:	d1f1      	bne.n	8002056 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8002072:	7f7b      	ldrb	r3, [r7, #29]
 8002074:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8002078:	7fbb      	ldrb	r3, [r7, #30]
 800207a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 800207e:	7ffb      	ldrb	r3, [r7, #31]
 8002080:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8002084:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002088:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 800208c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002090:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8002094:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8002098:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8]; // Combine MSB and LSB for milliseconds
 800209c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 80020b0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80020b4:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 80020b6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80020ba:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 80020bc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80020c0:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 80020c2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80020c6:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 80020c8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80020cc:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 80020ce:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 80020d2:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = 0;
 80020d4:	2300      	movs	r3, #0
 80020d6:	60bb      	str	r3, [r7, #8]


	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 80020d8:	f107 0318 	add.w	r3, r7, #24
 80020dc:	2200      	movs	r2, #0
 80020de:	4619      	mov	r1, r3
 80020e0:	4822      	ldr	r0, [pc, #136]	; (800216c <handshake+0x120>)
 80020e2:	f00b fb79 	bl	800d7d8 <HAL_RTC_SetDate>
 80020e6:	4603      	mov	r3, r0
 80020e8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 80020ec:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <handshake+0xac>
	{
		Error_Handler();
 80020f4:	f000 fdb4 	bl	8002c60 <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	2200      	movs	r2, #0
 80020fc:	4619      	mov	r1, r3
 80020fe:	481b      	ldr	r0, [pc, #108]	; (800216c <handshake+0x120>)
 8002100:	f00b fa70 	bl	800d5e4 <HAL_RTC_SetTime>
 8002104:	4603      	mov	r3, r0
 8002106:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK)
 800210a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800210e:	2b00      	cmp	r3, #0
 8002110:	d001      	beq.n	8002116 <handshake+0xca>
	{
		Error_Handler();
 8002112:	f000 fda5 	bl	8002c60 <Error_Handler>
	}

	HAL_TIM_Base_Start(&htim4);
 8002116:	4816      	ldr	r0, [pc, #88]	; (8002170 <handshake+0x124>)
 8002118:	f00c f9ac 	bl	800e474 <HAL_TIM_Base_Start>

	tx_buffer[0] = 0xFA;
 800211c:	23fa      	movs	r3, #250	; 0xfa
 800211e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 1;
 8002122:	2301      	movs	r3, #1
 8002124:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 8002128:	2300      	movs	r3, #0
 800212a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 2;
 8002134:	2302      	movs	r3, #2
 8002136:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for(int i = 0; i < allowed_tries; i++)
 800213a:	2300      	movs	r3, #0
 800213c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213e:	e009      	b.n	8002154 <handshake+0x108>
	{
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8002140:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002144:	2364      	movs	r3, #100	; 0x64
 8002146:	2205      	movs	r2, #5
 8002148:	4807      	ldr	r0, [pc, #28]	; (8002168 <handshake+0x11c>)
 800214a:	f00d fe05 	bl	800fd58 <HAL_UART_Transmit>
	for(int i = 0; i < allowed_tries; i++)
 800214e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002150:	3301      	adds	r3, #1
 8002152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002154:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002158:	429a      	cmp	r2, r3
 800215a:	dbf1      	blt.n	8002140 <handshake+0xf4>
	}

	return 1;
 800215c:	2301      	movs	r3, #1
}
 800215e:	4618      	mov	r0, r3
 8002160:	3740      	adds	r7, #64	; 0x40
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	24000638 	.word	0x24000638
 800216c:	240003d4 	.word	0x240003d4
 8002170:	240005ec 	.word	0x240005ec

08002174 <system_setup>:
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup()
{
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	TIM2->CCR4 = 312;
 8002178:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800217c:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002180:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 8002182:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002186:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800218a:	4815      	ldr	r0, [pc, #84]	; (80021e0 <system_setup+0x6c>)
 800218c:	f002 ffe6 	bl	800515c <HAL_ADCEx_Calibration_Start>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <system_setup+0x26>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 8002196:	f000 fd63 	bl	8002c60 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 800219a:	220b      	movs	r2, #11
 800219c:	4911      	ldr	r1, [pc, #68]	; (80021e4 <system_setup+0x70>)
 800219e:	4810      	ldr	r0, [pc, #64]	; (80021e0 <system_setup+0x6c>)
 80021a0:	f002 f8ba 	bl	8004318 <HAL_ADC_Start_DMA>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <system_setup+0x3a>
			ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80021aa:	f000 fd59 	bl	8002c60 <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80021ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80021b2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021b6:	480c      	ldr	r0, [pc, #48]	; (80021e8 <system_setup+0x74>)
 80021b8:	f002 ffd0 	bl	800515c <HAL_ADCEx_Calibration_Start>
 80021bc:	4603      	mov	r3, r0
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <system_setup+0x52>
			ADC_SINGLE_ENDED) != HAL_OK) {
		/* Calibration Error */
		Error_Handler();
 80021c2:	f000 fd4d 	bl	8002c60 <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80021c6:	2204      	movs	r2, #4
 80021c8:	4908      	ldr	r1, [pc, #32]	; (80021ec <system_setup+0x78>)
 80021ca:	4807      	ldr	r0, [pc, #28]	; (80021e8 <system_setup+0x74>)
 80021cc:	f002 f8a4 	bl	8004318 <HAL_ADC_Start_DMA>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <system_setup+0x66>
			ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80021d6:	f000 fd43 	bl	8002c60 <Error_Handler>
	}
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	2400013c 	.word	0x2400013c
 80021e4:	24000ca0 	.word	0x24000ca0
 80021e8:	240001a0 	.word	0x240001a0
 80021ec:	24000cc0 	.word	0x24000cc0

080021f0 <getTimestamp>:

    return ms * 1000 - st / ((SysTick->LOAD + 1) / 1000);
}

void getTimestamp(uint8_t *buffer)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	; 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 80021f8:	f107 030c 	add.w	r3, r7, #12
 80021fc:	2200      	movs	r2, #0
 80021fe:	4619      	mov	r1, r3
 8002200:	4827      	ldr	r0, [pc, #156]	; (80022a0 <getTimestamp+0xb0>)
 8002202:	f00b fa8d 	bl	800d720 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002206:	f107 0308 	add.w	r3, r7, #8
 800220a:	2200      	movs	r2, #0
 800220c:	4619      	mov	r1, r3
 800220e:	4824      	ldr	r0, [pc, #144]	; (80022a0 <getTimestamp+0xb0>)
 8002210:	f00b fb6a 	bl	800d8e8 <HAL_RTC_GetDate>

	uint32_t milliseconds = (1000 - (currentTime.SubSeconds * 1000) / hrtc.Init.SynchPrediv) * 1000;
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800221a:	fb03 f202 	mul.w	r2, r3, r2
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <getTimestamp+0xb0>)
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	fbb2 f3f3 	udiv	r3, r2, r3
 8002226:	4a1f      	ldr	r2, [pc, #124]	; (80022a4 <getTimestamp+0xb4>)
 8002228:	fb03 f202 	mul.w	r2, r3, r2
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <getTimestamp+0xb8>)
 800222e:	4413      	add	r3, r2
 8002230:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t micro = milliseconds + TIM4->CNT;
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <getTimestamp+0xbc>)
 8002234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002236:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002238:	4413      	add	r3, r2
 800223a:	623b      	str	r3, [r7, #32]


	buffer[0] = currentDate.Year;		// 0-99
 800223c:	7afa      	ldrb	r2, [r7, #11]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;		// 1-12
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	3301      	adds	r3, #1
 8002246:	7a7a      	ldrb	r2, [r7, #9]
 8002248:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;		// 1-31
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	3302      	adds	r3, #2
 800224e:	7aba      	ldrb	r2, [r7, #10]
 8002250:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;		// 0-23
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3303      	adds	r3, #3
 8002256:	7b3a      	ldrb	r2, [r7, #12]
 8002258:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;	// 0-59
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	3304      	adds	r3, #4
 800225e:	7b7a      	ldrb	r2, [r7, #13]
 8002260:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;	// 0-59
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3305      	adds	r3, #5
 8002266:	7bba      	ldrb	r2, [r7, #14]
 8002268:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((micro >> 24) & 0xFF);  // High byte of milliseconds
 800226a:	6a3b      	ldr	r3, [r7, #32]
 800226c:	0e1a      	lsrs	r2, r3, #24
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3306      	adds	r3, #6
 8002272:	b2d2      	uxtb	r2, r2
 8002274:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((micro >> 16) & 0xFF);  // High byte of milliseconds
 8002276:	6a3b      	ldr	r3, [r7, #32]
 8002278:	0c1a      	lsrs	r2, r3, #16
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	3307      	adds	r3, #7
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((micro >> 8) & 0xFF);  // High byte of milliseconds
 8002282:	6a3b      	ldr	r3, [r7, #32]
 8002284:	0a1a      	lsrs	r2, r3, #8
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	3308      	adds	r3, #8
 800228a:	b2d2      	uxtb	r2, r2
 800228c:	701a      	strb	r2, [r3, #0]
	buffer[9] = micro & 0xFF;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	3309      	adds	r3, #9
 8002292:	6a3a      	ldr	r2, [r7, #32]
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	701a      	strb	r2, [r3, #0]
}
 8002298:	bf00      	nop
 800229a:	3728      	adds	r7, #40	; 0x28
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	240003d4 	.word	0x240003d4
 80022a4:	fffffc18 	.word	0xfffffc18
 80022a8:	000f4240 	.word	0x000f4240
 80022ac:	40000800 	.word	0x40000800

080022b0 <sample_pmt>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt()
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80022b6:	bf00      	nop
 80022b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022bc:	4845      	ldr	r0, [pc, #276]	; (80023d4 <sample_pmt+0x124>)
 80022be:	f006 fd61 	bl	8008d84 <HAL_GPIO_ReadPin>
 80022c2:	4603      	mov	r3, r0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f7      	bne.n	80022b8 <sample_pmt+0x8>
	}
	uint8_t* buffer = (uint8_t*)malloc(PMT_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80022c8:	2010      	movs	r0, #16
 80022ca:	f014 f801 	bl	80162d0 <malloc>
 80022ce:	4603      	mov	r3, r0
 80022d0:	617b      	str	r3, [r7, #20]
	uint8_t* pmt_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 80022d2:	2002      	movs	r0, #2
 80022d4:	f013 fffc 	bl	80162d0 <malloc>
 80022d8:	4603      	mov	r3, r0
 80022da:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(10 * sizeof(uint8_t));
 80022dc:	200a      	movs	r0, #10
 80022de:	f013 fff7 	bl	80162d0 <malloc>
 80022e2:	4603      	mov	r3, r0
 80022e4:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80022e6:	68f8      	ldr	r0, [r7, #12]
 80022e8:	f7ff ff82 	bl	80021f0 <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80022ec:	6938      	ldr	r0, [r7, #16]
 80022ee:	f7ff fd77 	bl	8001de0 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	22bb      	movs	r2, #187	; 0xbb
 80022f6:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	3301      	adds	r3, #1
 80022fc:	22bb      	movs	r2, #187	; 0xbb
 80022fe:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 8002300:	4b35      	ldr	r3, [pc, #212]	; (80023d8 <sample_pmt+0x128>)
 8002302:	881b      	ldrh	r3, [r3, #0]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	b29a      	uxth	r2, r3
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	3302      	adds	r3, #2
 800230c:	b2d2      	uxtb	r2, r2
 800230e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 8002310:	4b31      	ldr	r3, [pc, #196]	; (80023d8 <sample_pmt+0x128>)
 8002312:	881a      	ldrh	r2, [r3, #0]
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3303      	adds	r3, #3
 8002318:	b2d2      	uxtb	r2, r2
 800231a:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	3304      	adds	r3, #4
 8002320:	693a      	ldr	r2, [r7, #16]
 8002322:	7812      	ldrb	r2, [r2, #0]
 8002324:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	3305      	adds	r3, #5
 800232a:	693a      	ldr	r2, [r7, #16]
 800232c:	7852      	ldrb	r2, [r2, #1]
 800232e:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3306      	adds	r3, #6
 8002334:	68fa      	ldr	r2, [r7, #12]
 8002336:	7812      	ldrb	r2, [r2, #0]
 8002338:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	3307      	adds	r3, #7
 800233e:	68fa      	ldr	r2, [r7, #12]
 8002340:	7852      	ldrb	r2, [r2, #1]
 8002342:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	3308      	adds	r3, #8
 8002348:	68fa      	ldr	r2, [r7, #12]
 800234a:	7892      	ldrb	r2, [r2, #2]
 800234c:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	3309      	adds	r3, #9
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	78d2      	ldrb	r2, [r2, #3]
 8002356:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	330a      	adds	r3, #10
 800235c:	68fa      	ldr	r2, [r7, #12]
 800235e:	7912      	ldrb	r2, [r2, #4]
 8002360:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	330b      	adds	r3, #11
 8002366:	68fa      	ldr	r2, [r7, #12]
 8002368:	7952      	ldrb	r2, [r2, #5]
 800236a:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	330c      	adds	r3, #12
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	7992      	ldrb	r2, [r2, #6]
 8002374:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	330d      	adds	r3, #13
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	79d2      	ldrb	r2, [r2, #7]
 800237e:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[8];
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	330e      	adds	r3, #14
 8002384:	68fa      	ldr	r2, [r7, #12]
 8002386:	7a12      	ldrb	r2, [r2, #8]
 8002388:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[9];
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	330f      	adds	r3, #15
 800238e:	68fa      	ldr	r2, [r7, #12]
 8002390:	7a52      	ldrb	r2, [r2, #9]
 8002392:	701a      	strb	r2, [r3, #0]


	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002394:	1d3b      	adds	r3, r7, #4
 8002396:	2210      	movs	r2, #16
 8002398:	6979      	ldr	r1, [r7, #20]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff fe34 	bl	8002008 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 80023a0:	4b0e      	ldr	r3, [pc, #56]	; (80023dc <sample_pmt+0x12c>)
 80023a2:	6818      	ldr	r0, [r3, #0]
 80023a4:	1d39      	adds	r1, r7, #4
 80023a6:	2300      	movs	r3, #0
 80023a8:	2200      	movs	r2, #0
 80023aa:	f010 fdaf 	bl	8012f0c <osMessageQueuePut>
	available_msgs++;
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <sample_pmt+0x130>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	3301      	adds	r3, #1
 80023b4:	4a0a      	ldr	r2, [pc, #40]	; (80023e0 <sample_pmt+0x130>)
 80023b6:	6013      	str	r3, [r2, #0]
	free(buffer);
 80023b8:	6978      	ldr	r0, [r7, #20]
 80023ba:	f013 ff91 	bl	80162e0 <free>
	free(pmt_spi);
 80023be:	6938      	ldr	r0, [r7, #16]
 80023c0:	f013 ff8e 	bl	80162e0 <free>
	free(timestamp);
 80023c4:	68f8      	ldr	r0, [r7, #12]
 80023c6:	f013 ff8b 	bl	80162e0 <free>
}
 80023ca:	bf00      	nop
 80023cc:	3718      	adds	r7, #24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	58020000 	.word	0x58020000
 80023d8:	24000c2c 	.word	0x24000c2c
 80023dc:	24000c1c 	.word	0x24000c1c
 80023e0:	24000c28 	.word	0x24000c28

080023e4 <sample_erpa>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa()
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80023ea:	bf00      	nop
 80023ec:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023f0:	4859      	ldr	r0, [pc, #356]	; (8002558 <sample_erpa+0x174>)
 80023f2:	f006 fcc7 	bl	8008d84 <HAL_GPIO_ReadPin>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1f7      	bne.n	80023ec <sample_erpa+0x8>
	}

	uint8_t* buffer = (uint8_t*)malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80023fc:	2014      	movs	r0, #20
 80023fe:	f013 ff67 	bl	80162d0 <malloc>
 8002402:	4603      	mov	r3, r0
 8002404:	617b      	str	r3, [r7, #20]

	uint8_t* erpa_spi = (uint8_t*)malloc(2 * sizeof(uint8_t));
 8002406:	2002      	movs	r0, #2
 8002408:	f013 ff62 	bl	80162d0 <malloc>
 800240c:	4603      	mov	r3, r0
 800240e:	613b      	str	r3, [r7, #16]
	uint16_t* erpa_adc = (uint16_t*)malloc(2 * sizeof(uint16_t));
 8002410:	2004      	movs	r0, #4
 8002412:	f013 ff5d 	bl	80162d0 <malloc>
 8002416:	4603      	mov	r3, r0
 8002418:	60fb      	str	r3, [r7, #12]
	uint8_t* timestamp = (uint8_t*)malloc(10 * sizeof(uint8_t));
 800241a:	200a      	movs	r0, #10
 800241c:	f013 ff58 	bl	80162d0 <malloc>
 8002420:	4603      	mov	r3, r0
 8002422:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 8002424:	68b8      	ldr	r0, [r7, #8]
 8002426:	f7ff fee3 	bl	80021f0 <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 800242a:	6938      	ldr	r0, [r7, #16]
 800242c:	f7ff fcfc 	bl	8001e28 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 8002430:	68f8      	ldr	r0, [r7, #12]
 8002432:	f7ff fd1d 	bl	8001e70 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 8002436:	697b      	ldr	r3, [r7, #20]
 8002438:	22aa      	movs	r2, #170	; 0xaa
 800243a:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	3301      	adds	r3, #1
 8002440:	22aa      	movs	r2, #170	; 0xaa
 8002442:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002444:	4b45      	ldr	r3, [pc, #276]	; (800255c <sample_erpa+0x178>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	b29a      	uxth	r2, r3
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	3302      	adds	r3, #2
 8002450:	b2d2      	uxtb	r2, r2
 8002452:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002454:	4b41      	ldr	r3, [pc, #260]	; (800255c <sample_erpa+0x178>)
 8002456:	881a      	ldrh	r2, [r3, #0]
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	3303      	adds	r3, #3
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	881b      	ldrh	r3, [r3, #0]
 8002464:	0a1b      	lsrs	r3, r3, #8
 8002466:	b29a      	uxth	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	3304      	adds	r3, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	881a      	ldrh	r2, [r3, #0]
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	3305      	adds	r3, #5
 8002478:	b2d2      	uxtb	r2, r2
 800247a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	3302      	adds	r3, #2
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	0a1b      	lsrs	r3, r3, #8
 8002484:	b29a      	uxth	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	3306      	adds	r3, #6
 800248a:	b2d2      	uxtb	r2, r2
 800248c:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	3302      	adds	r3, #2
 8002492:	881a      	ldrh	r2, [r3, #0]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3307      	adds	r3, #7
 8002498:	b2d2      	uxtb	r2, r2
 800249a:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3308      	adds	r3, #8
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	7812      	ldrb	r2, [r2, #0]
 80024a4:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	3309      	adds	r3, #9
 80024aa:	693a      	ldr	r2, [r7, #16]
 80024ac:	7852      	ldrb	r2, [r2, #1]
 80024ae:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	330a      	adds	r3, #10
 80024b4:	68ba      	ldr	r2, [r7, #8]
 80024b6:	7812      	ldrb	r2, [r2, #0]
 80024b8:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	330b      	adds	r3, #11
 80024be:	68ba      	ldr	r2, [r7, #8]
 80024c0:	7852      	ldrb	r2, [r2, #1]
 80024c2:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	330c      	adds	r3, #12
 80024c8:	68ba      	ldr	r2, [r7, #8]
 80024ca:	7892      	ldrb	r2, [r2, #2]
 80024cc:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	330d      	adds	r3, #13
 80024d2:	68ba      	ldr	r2, [r7, #8]
 80024d4:	78d2      	ldrb	r2, [r2, #3]
 80024d6:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	330e      	adds	r3, #14
 80024dc:	68ba      	ldr	r2, [r7, #8]
 80024de:	7912      	ldrb	r2, [r2, #4]
 80024e0:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	330f      	adds	r3, #15
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	7952      	ldrb	r2, [r2, #5]
 80024ea:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	3310      	adds	r3, #16
 80024f0:	68ba      	ldr	r2, [r7, #8]
 80024f2:	7992      	ldrb	r2, [r2, #6]
 80024f4:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	3311      	adds	r3, #17
 80024fa:	68ba      	ldr	r2, [r7, #8]
 80024fc:	79d2      	ldrb	r2, [r2, #7]
 80024fe:	701a      	strb	r2, [r3, #0]
	buffer[18] = timestamp[8];
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	3312      	adds	r3, #18
 8002504:	68ba      	ldr	r2, [r7, #8]
 8002506:	7a12      	ldrb	r2, [r2, #8]
 8002508:	701a      	strb	r2, [r3, #0]
	buffer[19] = timestamp[9];
 800250a:	697b      	ldr	r3, [r7, #20]
 800250c:	3313      	adds	r3, #19
 800250e:	68ba      	ldr	r2, [r7, #8]
 8002510:	7a52      	ldrb	r2, [r2, #9]
 8002512:	701a      	strb	r2, [r3, #0]




	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002514:	463b      	mov	r3, r7
 8002516:	2214      	movs	r2, #20
 8002518:	6979      	ldr	r1, [r7, #20]
 800251a:	4618      	mov	r0, r3
 800251c:	f7ff fd74 	bl	8002008 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 8002520:	4b0f      	ldr	r3, [pc, #60]	; (8002560 <sample_erpa+0x17c>)
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	4639      	mov	r1, r7
 8002526:	2300      	movs	r3, #0
 8002528:	2200      	movs	r2, #0
 800252a:	f010 fcef 	bl	8012f0c <osMessageQueuePut>
	available_msgs++;
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <sample_erpa+0x180>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	3301      	adds	r3, #1
 8002534:	4a0b      	ldr	r2, [pc, #44]	; (8002564 <sample_erpa+0x180>)
 8002536:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002538:	6978      	ldr	r0, [r7, #20]
 800253a:	f013 fed1 	bl	80162e0 <free>
	free(erpa_spi);
 800253e:	6938      	ldr	r0, [r7, #16]
 8002540:	f013 fece 	bl	80162e0 <free>
	free(erpa_adc);
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f013 fecb 	bl	80162e0 <free>
	free(timestamp);
 800254a:	68b8      	ldr	r0, [r7, #8]
 800254c:	f013 fec8 	bl	80162e0 <free>
}
 8002550:	bf00      	nop
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	58020400 	.word	0x58020400
 800255c:	24000c2e 	.word	0x24000c2e
 8002560:	24000c1c 	.word	0x24000c1c
 8002564:	24000c28 	.word	0x24000c28

08002568 <sample_hk>:
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk()
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af00      	add	r7, sp, #0
	uint8_t* buffer = (uint8_t*)malloc(HK_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 800256e:	2030      	movs	r0, #48	; 0x30
 8002570:	f013 feae 	bl	80162d0 <malloc>
 8002574:	4603      	mov	r3, r0
 8002576:	61fb      	str	r3, [r7, #28]

	static uint16_t last_i2c_reading[4];
	int16_t* hk_i2c = (int16_t*)malloc(4 * sizeof(int16_t));
 8002578:	2008      	movs	r0, #8
 800257a:	f013 fea9 	bl	80162d0 <malloc>
 800257e:	4603      	mov	r3, r0
 8002580:	61bb      	str	r3, [r7, #24]
	uint16_t* hk_adc1 = (uint16_t*)malloc(9 * sizeof(uint16_t));
 8002582:	2012      	movs	r0, #18
 8002584:	f013 fea4 	bl	80162d0 <malloc>
 8002588:	4603      	mov	r3, r0
 800258a:	617b      	str	r3, [r7, #20]
	uint16_t* hk_adc3 = (uint16_t*)malloc(4 * sizeof(uint16_t));
 800258c:	2008      	movs	r0, #8
 800258e:	f013 fe9f 	bl	80162d0 <malloc>
 8002592:	4603      	mov	r3, r0
 8002594:	613b      	str	r3, [r7, #16]
	uint8_t* timestamp = (uint8_t*)malloc(10 * sizeof(uint8_t));
 8002596:	200a      	movs	r0, #10
 8002598:	f013 fe9a 	bl	80162d0 <malloc>
 800259c:	4603      	mov	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80025a0:	68f8      	ldr	r0, [r7, #12]
 80025a2:	f7ff fe25 	bl	80021f0 <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999){
 80025a6:	4b13      	ldr	r3, [pc, #76]	; (80025f4 <sample_hk+0x8c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80025ae:	db25      	blt.n	80025fc <sample_hk+0x94>
		receive_hk_i2c(hk_i2c);
 80025b0:	69b8      	ldr	r0, [r7, #24]
 80025b2:	f7ff fc77 	bl	8001ea4 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <sample_hk+0x90>)
 80025c0:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	3302      	adds	r3, #2
 80025c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <sample_hk+0x90>)
 80025ce:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	3304      	adds	r3, #4
 80025d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025d8:	b29a      	uxth	r2, r3
 80025da:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <sample_hk+0x90>)
 80025dc:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80025de:	69bb      	ldr	r3, [r7, #24]
 80025e0:	3306      	adds	r3, #6
 80025e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e6:	b29a      	uxth	r2, r3
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <sample_hk+0x90>)
 80025ea:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80025ec:	4b01      	ldr	r3, [pc, #4]	; (80025f4 <sample_hk+0x8c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	601a      	str	r2, [r3, #0]
 80025f2:	e01f      	b.n	8002634 <sample_hk+0xcc>
 80025f4:	24000004 	.word	0x24000004
 80025f8:	24000cc8 	.word	0x24000cc8
	}
	else{
		TEMPERATURE_COUNTER++;
 80025fc:	4ba4      	ldr	r3, [pc, #656]	; (8002890 <sample_hk+0x328>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	3301      	adds	r3, #1
 8002602:	4aa3      	ldr	r2, [pc, #652]	; (8002890 <sample_hk+0x328>)
 8002604:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 8002606:	4ba3      	ldr	r3, [pc, #652]	; (8002894 <sample_hk+0x32c>)
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	b21a      	sxth	r2, r3
 800260c:	69bb      	ldr	r3, [r7, #24]
 800260e:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 8002610:	4ba0      	ldr	r3, [pc, #640]	; (8002894 <sample_hk+0x32c>)
 8002612:	885a      	ldrh	r2, [r3, #2]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	3302      	adds	r3, #2
 8002618:	b212      	sxth	r2, r2
 800261a:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 800261c:	4b9d      	ldr	r3, [pc, #628]	; (8002894 <sample_hk+0x32c>)
 800261e:	889a      	ldrh	r2, [r3, #4]
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	3304      	adds	r3, #4
 8002624:	b212      	sxth	r2, r2
 8002626:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 8002628:	4b9a      	ldr	r3, [pc, #616]	; (8002894 <sample_hk+0x32c>)
 800262a:	88da      	ldrh	r2, [r3, #6]
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	3306      	adds	r3, #6
 8002630:	b212      	sxth	r2, r2
 8002632:	801a      	strh	r2, [r3, #0]
	}
	receive_hk_adc1(hk_adc1);
 8002634:	6978      	ldr	r0, [r7, #20]
 8002636:	f7ff fc65 	bl	8001f04 <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 800263a:	6938      	ldr	r0, [r7, #16]
 800263c:	f7ff fcac 	bl	8001f98 <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	22cc      	movs	r2, #204	; 0xcc
 8002644:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	3301      	adds	r3, #1
 800264a:	22cc      	movs	r2, #204	; 0xcc
 800264c:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800264e:	4b92      	ldr	r3, [pc, #584]	; (8002898 <sample_hk+0x330>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	0a1b      	lsrs	r3, r3, #8
 8002654:	b29a      	uxth	r2, r3
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3302      	adds	r3, #2
 800265a:	b2d2      	uxtb	r2, r2
 800265c:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800265e:	4b8e      	ldr	r3, [pc, #568]	; (8002898 <sample_hk+0x330>)
 8002660:	881a      	ldrh	r2, [r3, #0]
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3303      	adds	r3, #3
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	3302      	adds	r3, #2
 800266e:	881b      	ldrh	r3, [r3, #0]
 8002670:	0a1b      	lsrs	r3, r3, #8
 8002672:	b29a      	uxth	r2, r3
 8002674:	69fb      	ldr	r3, [r7, #28]
 8002676:	3304      	adds	r3, #4
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	3302      	adds	r3, #2
 8002680:	881a      	ldrh	r2, [r3, #0]
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	3305      	adds	r3, #5
 8002686:	b2d2      	uxtb	r2, r2
 8002688:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	0a1b      	lsrs	r3, r3, #8
 8002690:	b29a      	uxth	r2, r3
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	3306      	adds	r3, #6
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	881a      	ldrh	r2, [r3, #0]
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	3307      	adds	r3, #7
 80026a2:	b2d2      	uxtb	r2, r2
 80026a4:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ac:	121a      	asrs	r2, r3, #8
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	3308      	adds	r3, #8
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80026b6:	69bb      	ldr	r3, [r7, #24]
 80026b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3309      	adds	r3, #9
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	3302      	adds	r3, #2
 80026c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026cc:	121a      	asrs	r2, r3, #8
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	330a      	adds	r3, #10
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	3302      	adds	r3, #2
 80026da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	330b      	adds	r3, #11
 80026e2:	b2d2      	uxtb	r2, r2
 80026e4:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	3304      	adds	r3, #4
 80026ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026ee:	121a      	asrs	r2, r3, #8
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	330c      	adds	r3, #12
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	3304      	adds	r3, #4
 80026fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	330d      	adds	r3, #13
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	3306      	adds	r3, #6
 800270c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002710:	121a      	asrs	r2, r3, #8
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	330e      	adds	r3, #14
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3306      	adds	r3, #6
 800271e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	330f      	adds	r3, #15
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	881b      	ldrh	r3, [r3, #0]
 800272e:	0a1b      	lsrs	r3, r3, #8
 8002730:	b29a      	uxth	r2, r3
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	3310      	adds	r3, #16
 8002736:	b2d2      	uxtb	r2, r2
 8002738:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	881a      	ldrh	r2, [r3, #0]
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	3311      	adds	r3, #17
 8002742:	b2d2      	uxtb	r2, r2
 8002744:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	3302      	adds	r3, #2
 800274a:	881b      	ldrh	r3, [r3, #0]
 800274c:	0a1b      	lsrs	r3, r3, #8
 800274e:	b29a      	uxth	r2, r3
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	3312      	adds	r3, #18
 8002754:	b2d2      	uxtb	r2, r2
 8002756:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	3302      	adds	r3, #2
 800275c:	881a      	ldrh	r2, [r3, #0]
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	3313      	adds	r3, #19
 8002762:	b2d2      	uxtb	r2, r2
 8002764:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3304      	adds	r3, #4
 800276a:	881b      	ldrh	r3, [r3, #0]
 800276c:	0a1b      	lsrs	r3, r3, #8
 800276e:	b29a      	uxth	r2, r3
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	3314      	adds	r3, #20
 8002774:	b2d2      	uxtb	r2, r2
 8002776:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	3304      	adds	r3, #4
 800277c:	881a      	ldrh	r2, [r3, #0]
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3315      	adds	r3, #21
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	3306      	adds	r3, #6
 800278a:	881b      	ldrh	r3, [r3, #0]
 800278c:	0a1b      	lsrs	r3, r3, #8
 800278e:	b29a      	uxth	r2, r3
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	3316      	adds	r3, #22
 8002794:	b2d2      	uxtb	r2, r2
 8002796:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	3306      	adds	r3, #6
 800279c:	881a      	ldrh	r2, [r3, #0]
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3317      	adds	r3, #23
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	330c      	adds	r3, #12
 80027aa:	881b      	ldrh	r3, [r3, #0]
 80027ac:	0a1b      	lsrs	r3, r3, #8
 80027ae:	b29a      	uxth	r2, r3
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3318      	adds	r3, #24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	330c      	adds	r3, #12
 80027bc:	881a      	ldrh	r2, [r3, #0]
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3319      	adds	r3, #25
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	3306      	adds	r3, #6
 80027ca:	881b      	ldrh	r3, [r3, #0]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	331a      	adds	r3, #26
 80027d4:	b2d2      	uxtb	r2, r2
 80027d6:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3306      	adds	r3, #6
 80027dc:	881a      	ldrh	r2, [r3, #0]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	331b      	adds	r3, #27
 80027e2:	b2d2      	uxtb	r2, r2
 80027e4:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	3304      	adds	r3, #4
 80027ea:	881b      	ldrh	r3, [r3, #0]
 80027ec:	0a1b      	lsrs	r3, r3, #8
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	331c      	adds	r3, #28
 80027f4:	b2d2      	uxtb	r2, r2
 80027f6:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	3304      	adds	r3, #4
 80027fc:	881a      	ldrh	r2, [r3, #0]
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	331d      	adds	r3, #29
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	330e      	adds	r3, #14
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	b29a      	uxth	r2, r3
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	331e      	adds	r3, #30
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	330e      	adds	r3, #14
 800281c:	881a      	ldrh	r2, [r3, #0]
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	331f      	adds	r3, #31
 8002822:	b2d2      	uxtb	r2, r2
 8002824:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	3310      	adds	r3, #16
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	0a1b      	lsrs	r3, r3, #8
 800282e:	b29a      	uxth	r2, r3
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	3320      	adds	r3, #32
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	3310      	adds	r3, #16
 800283c:	881a      	ldrh	r2, [r3, #0]
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	3321      	adds	r3, #33	; 0x21
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	3308      	adds	r3, #8
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	b29a      	uxth	r2, r3
 8002850:	69fb      	ldr	r3, [r7, #28]
 8002852:	3322      	adds	r3, #34	; 0x22
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	3308      	adds	r3, #8
 800285c:	881a      	ldrh	r2, [r3, #0]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	3323      	adds	r3, #35	; 0x23
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	330a      	adds	r3, #10
 800286a:	881b      	ldrh	r3, [r3, #0]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	b29a      	uxth	r2, r3
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	3324      	adds	r3, #36	; 0x24
 8002874:	b2d2      	uxtb	r2, r2
 8002876:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	330a      	adds	r3, #10
 800287c:	881a      	ldrh	r2, [r3, #0]
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3325      	adds	r3, #37	; 0x25
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3326      	adds	r3, #38	; 0x26
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	e006      	b.n	800289c <sample_hk+0x334>
 800288e:	bf00      	nop
 8002890:	24000004 	.word	0x24000004
 8002894:	24000cc8 	.word	0x24000cc8
 8002898:	24000c30 	.word	0x24000c30
 800289c:	7812      	ldrb	r2, [r2, #0]
 800289e:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	3327      	adds	r3, #39	; 0x27
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	7852      	ldrb	r2, [r2, #1]
 80028a8:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	3328      	adds	r3, #40	; 0x28
 80028ae:	68fa      	ldr	r2, [r7, #12]
 80028b0:	7892      	ldrb	r2, [r2, #2]
 80028b2:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	3329      	adds	r3, #41	; 0x29
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	78d2      	ldrb	r2, [r2, #3]
 80028bc:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	332a      	adds	r3, #42	; 0x2a
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	7912      	ldrb	r2, [r2, #4]
 80028c6:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	332b      	adds	r3, #43	; 0x2b
 80028cc:	68fa      	ldr	r2, [r7, #12]
 80028ce:	7952      	ldrb	r2, [r2, #5]
 80028d0:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	332c      	adds	r3, #44	; 0x2c
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	7992      	ldrb	r2, [r2, #6]
 80028da:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	332d      	adds	r3, #45	; 0x2d
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	79d2      	ldrb	r2, [r2, #7]
 80028e4:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	332e      	adds	r3, #46	; 0x2e
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	7a12      	ldrb	r2, [r2, #8]
 80028ee:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	332f      	adds	r3, #47	; 0x2f
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	7a52      	ldrb	r2, [r2, #9]
 80028f8:	701a      	strb	r2, [r3, #0]


	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80028fa:	1d3b      	adds	r3, r7, #4
 80028fc:	2230      	movs	r2, #48	; 0x30
 80028fe:	69f9      	ldr	r1, [r7, #28]
 8002900:	4618      	mov	r0, r3
 8002902:	f7ff fb81 	bl	8002008 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002906:	4b0f      	ldr	r3, [pc, #60]	; (8002944 <sample_hk+0x3dc>)
 8002908:	6818      	ldr	r0, [r3, #0]
 800290a:	1d39      	adds	r1, r7, #4
 800290c:	2300      	movs	r3, #0
 800290e:	2200      	movs	r2, #0
 8002910:	f010 fafc 	bl	8012f0c <osMessageQueuePut>
	available_msgs++;
 8002914:	4b0c      	ldr	r3, [pc, #48]	; (8002948 <sample_hk+0x3e0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	3301      	adds	r3, #1
 800291a:	4a0b      	ldr	r2, [pc, #44]	; (8002948 <sample_hk+0x3e0>)
 800291c:	6013      	str	r3, [r2, #0]

	free(buffer);
 800291e:	69f8      	ldr	r0, [r7, #28]
 8002920:	f013 fcde 	bl	80162e0 <free>
	free(hk_i2c);
 8002924:	69b8      	ldr	r0, [r7, #24]
 8002926:	f013 fcdb 	bl	80162e0 <free>
	free(hk_adc1);
 800292a:	6978      	ldr	r0, [r7, #20]
 800292c:	f013 fcd8 	bl	80162e0 <free>
	free(hk_adc3);
 8002930:	6938      	ldr	r0, [r7, #16]
 8002932:	f013 fcd5 	bl	80162e0 <free>
	free(timestamp);
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f013 fcd2 	bl	80162e0 <free>
}
 800293c:	bf00      	nop
 800293e:	3720      	adds	r7, #32
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	24000c1c 	.word	0x24000c1c
 8002948:	24000c28 	.word	0x24000c28

0800294c <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002954:	4b0b      	ldr	r3, [pc, #44]	; (8002984 <PMT_init+0x38>)
 8002956:	6818      	ldr	r0, [r3, #0]
 8002958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800295c:	2200      	movs	r2, #0
 800295e:	2101      	movs	r1, #1
 8002960:	f010 f9fa 	bl	8012d58 <osEventFlagsWait>
		if(PMT_ON){
 8002964:	4b08      	ldr	r3, [pc, #32]	; (8002988 <PMT_init+0x3c>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d007      	beq.n	800297c <PMT_init+0x30>
			sample_pmt();
 800296c:	f7ff fca0 	bl	80022b0 <sample_pmt>
			pmt_seq++;
 8002970:	4b06      	ldr	r3, [pc, #24]	; (800298c <PMT_init+0x40>)
 8002972:	881b      	ldrh	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	4b04      	ldr	r3, [pc, #16]	; (800298c <PMT_init+0x40>)
 800297a:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 800297c:	f010 f90c 	bl	8012b98 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002980:	e7e8      	b.n	8002954 <PMT_init+0x8>
 8002982:	bf00      	nop
 8002984:	24000c38 	.word	0x24000c38
 8002988:	24000c32 	.word	0x24000c32
 800298c:	24000c2c 	.word	0x24000c2c

08002990 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002998:	4b0b      	ldr	r3, [pc, #44]	; (80029c8 <ERPA_init+0x38>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029a0:	2200      	movs	r2, #0
 80029a2:	2102      	movs	r1, #2
 80029a4:	f010 f9d8 	bl	8012d58 <osEventFlagsWait>
		if (ERPA_ON)
 80029a8:	4b08      	ldr	r3, [pc, #32]	; (80029cc <ERPA_init+0x3c>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d007      	beq.n	80029c0 <ERPA_init+0x30>
		{
			sample_erpa();
 80029b0:	f7ff fd18 	bl	80023e4 <sample_erpa>
			erpa_seq++;
 80029b4:	4b06      	ldr	r3, [pc, #24]	; (80029d0 <ERPA_init+0x40>)
 80029b6:	881b      	ldrh	r3, [r3, #0]
 80029b8:	3301      	adds	r3, #1
 80029ba:	b29a      	uxth	r2, r3
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <ERPA_init+0x40>)
 80029be:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 80029c0:	f010 f8ea 	bl	8012b98 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80029c4:	e7e8      	b.n	8002998 <ERPA_init+0x8>
 80029c6:	bf00      	nop
 80029c8:	24000c38 	.word	0x24000c38
 80029cc:	24000c33 	.word	0x24000c33
 80029d0:	24000c2e 	.word	0x24000c2e

080029d4 <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for(;;)
	{
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HK_init+0x38>)
 80029de:	6818      	ldr	r0, [r3, #0]
 80029e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029e4:	2200      	movs	r2, #0
 80029e6:	2104      	movs	r1, #4
 80029e8:	f010 f9b6 	bl	8012d58 <osEventFlagsWait>
		if(HK_ON)
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <HK_init+0x3c>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d007      	beq.n	8002a04 <HK_init+0x30>
		{
			sample_hk();
 80029f4:	f7ff fdb8 	bl	8002568 <sample_hk>
			hk_seq++;
 80029f8:	4b06      	ldr	r3, [pc, #24]	; (8002a14 <HK_init+0x40>)
 80029fa:	881b      	ldrh	r3, [r3, #0]
 80029fc:	3301      	adds	r3, #1
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	4b04      	ldr	r3, [pc, #16]	; (8002a14 <HK_init+0x40>)
 8002a02:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002a04:	f010 f8c8 	bl	8012b98 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny, osWaitForever);
 8002a08:	e7e8      	b.n	80029dc <HK_init+0x8>
 8002a0a:	bf00      	nop
 8002a0c:	24000c38 	.word	0x24000c38
 8002a10:	24000c34 	.word	0x24000c34
 8002a14:	24000c30 	.word	0x24000c30

08002a18 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for(;;)
	{
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a20:	2201      	movs	r2, #1
 8002a22:	4904      	ldr	r1, [pc, #16]	; (8002a34 <UART_RX_init+0x1c>)
 8002a24:	4804      	ldr	r0, [pc, #16]	; (8002a38 <UART_RX_init+0x20>)
 8002a26:	f00d faed 	bl	8010004 <HAL_UART_Receive_IT>
		osDelay(5);
 8002a2a:	2005      	movs	r0, #5
 8002a2c:	f010 f8f5 	bl	8012c1a <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002a30:	e7f6      	b.n	8002a20 <UART_RX_init+0x8>
 8002a32:	bf00      	nop
 8002a34:	24000c3c 	.word	0x24000c3c
 8002a38:	24000638 	.word	0x24000638

08002a3c <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002a44:	4b24      	ldr	r3, [pc, #144]	; (8002ad8 <GPIO_on_init+0x9c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f010 f8c5 	bl	8012bd8 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002a4e:	4b23      	ldr	r3, [pc, #140]	; (8002adc <GPIO_on_init+0xa0>)
 8002a50:	2104      	movs	r1, #4
 8002a52:	2201      	movs	r2, #1
 8002a54:	4618      	mov	r0, r3
 8002a56:	f006 f9ad 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a5a:	2064      	movs	r0, #100	; 0x64
 8002a5c:	f010 f8dd 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002a60:	4b1e      	ldr	r3, [pc, #120]	; (8002adc <GPIO_on_init+0xa0>)
 8002a62:	2120      	movs	r1, #32
 8002a64:	2201      	movs	r2, #1
 8002a66:	4618      	mov	r0, r3
 8002a68:	f006 f9a4 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a6c:	2064      	movs	r0, #100	; 0x64
 8002a6e:	f010 f8d4 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 8002a72:	4b1b      	ldr	r3, [pc, #108]	; (8002ae0 <GPIO_on_init+0xa4>)
 8002a74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a78:	2201      	movs	r2, #1
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f006 f99a 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a80:	2064      	movs	r0, #100	; 0x64
 8002a82:	f010 f8ca 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002a86:	4b16      	ldr	r3, [pc, #88]	; (8002ae0 <GPIO_on_init+0xa4>)
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f006 f991 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a92:	2064      	movs	r0, #100	; 0x64
 8002a94:	f010 f8c1 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002a98:	4b11      	ldr	r3, [pc, #68]	; (8002ae0 <GPIO_on_init+0xa4>)
 8002a9a:	2140      	movs	r1, #64	; 0x40
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	f006 f988 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002aa4:	2064      	movs	r0, #100	; 0x64
 8002aa6:	f010 f8b8 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	; (8002ae0 <GPIO_on_init+0xa4>)
 8002aac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f006 f97e 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002ab8:	2064      	movs	r0, #100	; 0x64
 8002aba:	f010 f8ae 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002abe:	4b08      	ldr	r3, [pc, #32]	; (8002ae0 <GPIO_on_init+0xa4>)
 8002ac0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ac4:	2201      	movs	r2, #1
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f006 f974 	bl	8008db4 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 8002acc:	4b02      	ldr	r3, [pc, #8]	; (8002ad8 <GPIO_on_init+0x9c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f010 f881 	bl	8012bd8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002ad6:	e7ba      	b.n	8002a4e <GPIO_on_init+0x12>
 8002ad8:	24000754 	.word	0x24000754
 8002adc:	58020400 	.word	0x58020400
 8002ae0:	58020800 	.word	0x58020800

08002ae4 <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <GPIO_off_init+0x9c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f010 f871 	bl	8012bd8 <osThreadSuspend>
	/* Infinite loop */
	for(;;)
	{
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002af6:	4b23      	ldr	r3, [pc, #140]	; (8002b84 <GPIO_off_init+0xa0>)
 8002af8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002afc:	2200      	movs	r2, #0
 8002afe:	4618      	mov	r0, r3
 8002b00:	f006 f958 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b04:	2064      	movs	r0, #100	; 0x64
 8002b06:	f010 f888 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002b0a:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <GPIO_off_init+0xa0>)
 8002b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b10:	2200      	movs	r2, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f006 f94e 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b18:	2064      	movs	r0, #100	; 0x64
 8002b1a:	f010 f87e 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002b1e:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <GPIO_off_init+0xa0>)
 8002b20:	2140      	movs	r1, #64	; 0x40
 8002b22:	2200      	movs	r2, #0
 8002b24:	4618      	mov	r0, r3
 8002b26:	f006 f945 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b2a:	2064      	movs	r0, #100	; 0x64
 8002b2c:	f010 f875 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002b30:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <GPIO_off_init+0xa0>)
 8002b32:	2180      	movs	r1, #128	; 0x80
 8002b34:	2200      	movs	r2, #0
 8002b36:	4618      	mov	r0, r3
 8002b38:	f006 f93c 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b3c:	2064      	movs	r0, #100	; 0x64
 8002b3e:	f010 f86c 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <GPIO_off_init+0xa0>)
 8002b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b48:	2200      	movs	r2, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f006 f932 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b50:	2064      	movs	r0, #100	; 0x64
 8002b52:	f010 f862 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002b56:	4b0c      	ldr	r3, [pc, #48]	; (8002b88 <GPIO_off_init+0xa4>)
 8002b58:	2120      	movs	r1, #32
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f006 f929 	bl	8008db4 <HAL_GPIO_WritePin>
		osDelay(100);
 8002b62:	2064      	movs	r0, #100	; 0x64
 8002b64:	f010 f859 	bl	8012c1a <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002b68:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <GPIO_off_init+0xa4>)
 8002b6a:	2104      	movs	r1, #4
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f006 f920 	bl	8008db4 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002b74:	4b02      	ldr	r3, [pc, #8]	; (8002b80 <GPIO_off_init+0x9c>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f010 f82d 	bl	8012bd8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002b7e:	e7ba      	b.n	8002af6 <GPIO_off_init+0x12>
 8002b80:	240009b4 	.word	0x240009b4
 8002b84:	58020800 	.word	0x58020800
 8002b88:	58020400 	.word	0x58020400

08002b8c <UART_TX_init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
  static uint8_t tx_buffer[1000];
  uint32_t total_size = 0;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  osStatus_t status;

  while (1) {
    total_size = 0;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	60fb      	str	r3, [r7, #12]

    // Retrieve all messages from the queue and store them in tx_buffer
    do {
      status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002b9c:	4b22      	ldr	r3, [pc, #136]	; (8002c28 <UART_TX_init+0x9c>)
 8002b9e:	6818      	ldr	r0, [r3, #0]
 8002ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	4921      	ldr	r1, [pc, #132]	; (8002c2c <UART_TX_init+0xa0>)
 8002ba8:	f010 fa10 	bl	8012fcc <osMessageQueueGet>
 8002bac:	60b8      	str	r0, [r7, #8]
      if (status == osOK) {
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d11c      	bne.n	8002bee <UART_TX_init+0x62>
        if (total_size + msg.size <= 1000) {
 8002bb4:	4b1d      	ldr	r3, [pc, #116]	; (8002c2c <UART_TX_init+0xa0>)
 8002bb6:	889b      	ldrh	r3, [r3, #4]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	4413      	add	r3, r2
 8002bbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002bc2:	d818      	bhi.n	8002bf6 <UART_TX_init+0x6a>
          memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	4a1a      	ldr	r2, [pc, #104]	; (8002c30 <UART_TX_init+0xa4>)
 8002bc8:	4413      	add	r3, r2
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <UART_TX_init+0xa0>)
 8002bcc:	6811      	ldr	r1, [r2, #0]
 8002bce:	4a17      	ldr	r2, [pc, #92]	; (8002c2c <UART_TX_init+0xa0>)
 8002bd0:	8892      	ldrh	r2, [r2, #4]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f013 fb8c 	bl	80162f0 <memcpy>
          free(msg.array);
 8002bd8:	4b14      	ldr	r3, [pc, #80]	; (8002c2c <UART_TX_init+0xa0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f013 fb7f 	bl	80162e0 <free>
          total_size += msg.size;
 8002be2:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <UART_TX_init+0xa0>)
 8002be4:	889b      	ldrh	r3, [r3, #4]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	4413      	add	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]
        } else {

          break;
        }
      }
    } while (status == osOK);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d0d3      	beq.n	8002b9c <UART_TX_init+0x10>
 8002bf4:	e000      	b.n	8002bf8 <UART_TX_init+0x6c>
          break;
 8002bf6:	bf00      	nop

    if (total_size > 0) {
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d010      	beq.n	8002c20 <UART_TX_init+0x94>
      HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	461a      	mov	r2, r3
 8002c04:	490a      	ldr	r1, [pc, #40]	; (8002c30 <UART_TX_init+0xa4>)
 8002c06:	480b      	ldr	r0, [pc, #44]	; (8002c34 <UART_TX_init+0xa8>)
 8002c08:	f00d fa48 	bl	801009c <HAL_UART_Transmit_DMA>

      // Wait for transmission to complete
      while (tx_flag == 0) {
 8002c0c:	e001      	b.n	8002c12 <UART_TX_init+0x86>
        osThreadYield();
 8002c0e:	f00f ffc3 	bl	8012b98 <osThreadYield>
      while (tx_flag == 0) {
 8002c12:	4b09      	ldr	r3, [pc, #36]	; (8002c38 <UART_TX_init+0xac>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d0f9      	beq.n	8002c0e <UART_TX_init+0x82>
      }

      // Reset the flag
      tx_flag = 0;
 8002c1a:	4b07      	ldr	r3, [pc, #28]	; (8002c38 <UART_TX_init+0xac>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
    }

    // Yield thread control
    osThreadYield();
 8002c20:	f00f ffba 	bl	8012b98 <osThreadYield>
    total_size = 0;
 8002c24:	e7b8      	b.n	8002b98 <UART_TX_init+0xc>
 8002c26:	bf00      	nop
 8002c28:	24000c1c 	.word	0x24000c1c
 8002c2c:	24000c20 	.word	0x24000c20
 8002c30:	24000cd0 	.word	0x24000cd0
 8002c34:	24000638 	.word	0x24000638
 8002c38:	24000000 	.word	0x24000000

08002c3c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a04      	ldr	r2, [pc, #16]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d101      	bne.n	8002c52 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002c4e:	f000 ff71 	bl	8003b34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002c52:	bf00      	nop
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40001000 	.word	0x40001000

08002c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c64:	b672      	cpsid	i
}
 8002c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002c68:	e7fe      	b.n	8002c68 <Error_Handler+0x8>
	...

08002c6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c72:	4b0c      	ldr	r3, [pc, #48]	; (8002ca4 <HAL_MspInit+0x38>)
 8002c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c78:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_MspInit+0x38>)
 8002c7a:	f043 0302 	orr.w	r3, r3, #2
 8002c7e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_MspInit+0x38>)
 8002c84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	607b      	str	r3, [r7, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002c90:	2200      	movs	r2, #0
 8002c92:	210f      	movs	r1, #15
 8002c94:	f06f 0001 	mvn.w	r0, #1
 8002c98:	f002 fc5a 	bl	8005550 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c9c:	bf00      	nop
 8002c9e:	3708      	adds	r7, #8
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	58024400 	.word	0x58024400

08002ca8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b08e      	sub	sp, #56	; 0x38
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	605a      	str	r2, [r3, #4]
 8002cba:	609a      	str	r2, [r3, #8]
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a7b      	ldr	r2, [pc, #492]	; (8002eb4 <HAL_ADC_MspInit+0x20c>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	f040 8091 	bne.w	8002dee <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002ccc:	4b7a      	ldr	r3, [pc, #488]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002cce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002cd2:	4a79      	ldr	r2, [pc, #484]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002cd4:	f043 0320 	orr.w	r3, r3, #32
 8002cd8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002cdc:	4b76      	ldr	r3, [pc, #472]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ce2:	f003 0320 	and.w	r3, r3, #32
 8002ce6:	623b      	str	r3, [r7, #32]
 8002ce8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cea:	4b73      	ldr	r3, [pc, #460]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cf0:	4a71      	ldr	r2, [pc, #452]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002cf2:	f043 0304 	orr.w	r3, r3, #4
 8002cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cfa:	4b6f      	ldr	r3, [pc, #444]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d08:	4b6b      	ldr	r3, [pc, #428]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002d0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0e:	4a6a      	ldr	r2, [pc, #424]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d18:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	61bb      	str	r3, [r7, #24]
 8002d24:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d26:	4b64      	ldr	r3, [pc, #400]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002d28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d2c:	4a62      	ldr	r2, [pc, #392]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d36:	4b60      	ldr	r3, [pc, #384]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d3c:	f003 0302 	and.w	r3, r3, #2
 8002d40:	617b      	str	r3, [r7, #20]
 8002d42:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002d44:	2333      	movs	r3, #51	; 0x33
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d54:	4619      	mov	r1, r3
 8002d56:	4859      	ldr	r0, [pc, #356]	; (8002ebc <HAL_ADC_MspInit+0x214>)
 8002d58:	f005 fe64 	bl	8008a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002d5c:	23ce      	movs	r3, #206	; 0xce
 8002d5e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d60:	2303      	movs	r3, #3
 8002d62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d64:	2300      	movs	r3, #0
 8002d66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	4854      	ldr	r0, [pc, #336]	; (8002ec0 <HAL_ADC_MspInit+0x218>)
 8002d70:	f005 fe58 	bl	8008a24 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d74:	2303      	movs	r3, #3
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d78:	2303      	movs	r3, #3
 8002d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d84:	4619      	mov	r1, r3
 8002d86:	484f      	ldr	r0, [pc, #316]	; (8002ec4 <HAL_ADC_MspInit+0x21c>)
 8002d88:	f005 fe4c 	bl	8008a24 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002d8c:	4b4e      	ldr	r3, [pc, #312]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002d8e:	4a4f      	ldr	r2, [pc, #316]	; (8002ecc <HAL_ADC_MspInit+0x224>)
 8002d90:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d92:	4b4d      	ldr	r3, [pc, #308]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002d94:	2209      	movs	r2, #9
 8002d96:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d98:	4b4b      	ldr	r3, [pc, #300]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002da4:	4b48      	ldr	r3, [pc, #288]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002da6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002daa:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002dac:	4b46      	ldr	r3, [pc, #280]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002dae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002db2:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002db4:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002db6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dba:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002dbc:	4b42      	ldr	r3, [pc, #264]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002dbe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002dc2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002dc4:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dca:	4b3f      	ldr	r3, [pc, #252]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002dd0:	483d      	ldr	r0, [pc, #244]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002dd2:	f002 ffeb 	bl	8005dac <HAL_DMA_Init>
 8002dd6:	4603      	mov	r3, r0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002ddc:	f7ff ff40 	bl	8002c60 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a39      	ldr	r2, [pc, #228]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002de4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002de6:	4a38      	ldr	r2, [pc, #224]	; (8002ec8 <HAL_ADC_MspInit+0x220>)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002dec:	e05e      	b.n	8002eac <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a37      	ldr	r2, [pc, #220]	; (8002ed0 <HAL_ADC_MspInit+0x228>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d159      	bne.n	8002eac <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002df8:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002dfa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002dfe:	4a2e      	ldr	r2, [pc, #184]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e08:	4b2b      	ldr	r3, [pc, #172]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e16:	4b28      	ldr	r3, [pc, #160]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002e18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1c:	4a26      	ldr	r2, [pc, #152]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002e1e:	f043 0304 	orr.w	r3, r3, #4
 8002e22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e26:	4b24      	ldr	r3, [pc, #144]	; (8002eb8 <HAL_ADC_MspInit+0x210>)
 8002e28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	60fb      	str	r3, [r7, #12]
 8002e32:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002e34:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002e38:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002e3c:	f000 fea6 	bl	8003b8c <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002e40:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002e44:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002e48:	f000 fea0 	bl	8003b8c <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002e4c:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e4e:	4a22      	ldr	r2, [pc, #136]	; (8002ed8 <HAL_ADC_MspInit+0x230>)
 8002e50:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002e52:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e54:	2273      	movs	r2, #115	; 0x73
 8002e56:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e58:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e5e:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002e64:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6a:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002e6c:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e72:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002e74:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002e7a:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002e7c:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e82:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002e84:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e8a:	4b12      	ldr	r3, [pc, #72]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002e90:	4810      	ldr	r0, [pc, #64]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002e92:	f002 ff8b 	bl	8005dac <HAL_DMA_Init>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002e9c:	f7ff fee0 	bl	8002c60 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	4a0c      	ldr	r2, [pc, #48]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002ea4:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ea6:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_ADC_MspInit+0x22c>)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002eac:	bf00      	nop
 8002eae:	3738      	adds	r7, #56	; 0x38
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	58024400 	.word	0x58024400
 8002ebc:	58020800 	.word	0x58020800
 8002ec0:	58020000 	.word	0x58020000
 8002ec4:	58020400 	.word	0x58020400
 8002ec8:	24000204 	.word	0x24000204
 8002ecc:	40020010 	.word	0x40020010
 8002ed0:	58026000 	.word	0x58026000
 8002ed4:	2400027c 	.word	0x2400027c
 8002ed8:	40020028 	.word	0x40020028

08002edc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b08a      	sub	sp, #40	; 0x28
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ee4:	f107 0314 	add.w	r3, r7, #20
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4a34      	ldr	r2, [pc, #208]	; (8002fcc <HAL_DAC_MspInit+0xf0>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d161      	bne.n	8002fc2 <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002efe:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_DAC_MspInit+0xf4>)
 8002f00:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f04:	4a32      	ldr	r2, [pc, #200]	; (8002fd0 <HAL_DAC_MspInit+0xf4>)
 8002f06:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f0a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f0e:	4b30      	ldr	r3, [pc, #192]	; (8002fd0 <HAL_DAC_MspInit+0xf4>)
 8002f10:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f18:	613b      	str	r3, [r7, #16]
 8002f1a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1c:	4b2c      	ldr	r3, [pc, #176]	; (8002fd0 <HAL_DAC_MspInit+0xf4>)
 8002f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f22:	4a2b      	ldr	r2, [pc, #172]	; (8002fd0 <HAL_DAC_MspInit+0xf4>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f2c:	4b28      	ldr	r3, [pc, #160]	; (8002fd0 <HAL_DAC_MspInit+0xf4>)
 8002f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f32:	f003 0301 	and.w	r3, r3, #1
 8002f36:	60fb      	str	r3, [r7, #12]
 8002f38:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f3a:	2310      	movs	r3, #16
 8002f3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f46:	f107 0314 	add.w	r3, r7, #20
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	4821      	ldr	r0, [pc, #132]	; (8002fd4 <HAL_DAC_MspInit+0xf8>)
 8002f4e:	f005 fd69 	bl	8008a24 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002f52:	4b21      	ldr	r3, [pc, #132]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f54:	4a21      	ldr	r2, [pc, #132]	; (8002fdc <HAL_DAC_MspInit+0x100>)
 8002f56:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002f58:	4b1f      	ldr	r3, [pc, #124]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f5a:	2243      	movs	r2, #67	; 0x43
 8002f5c:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f5e:	4b1e      	ldr	r3, [pc, #120]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f60:	2240      	movs	r2, #64	; 0x40
 8002f62:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002f6a:	4b1b      	ldr	r3, [pc, #108]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f70:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f72:	4b19      	ldr	r3, [pc, #100]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f78:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f7a:	4b17      	ldr	r3, [pc, #92]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f80:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002f82:	4b15      	ldr	r3, [pc, #84]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f84:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f88:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002f96:	4810      	ldr	r0, [pc, #64]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002f98:	f002 ff08 	bl	8005dac <HAL_DMA_Init>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d001      	beq.n	8002fa6 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002fa2:	f7ff fe5d 	bl	8002c60 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a0b      	ldr	r2, [pc, #44]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002faa:	609a      	str	r2, [r3, #8]
 8002fac:	4a0a      	ldr	r2, [pc, #40]	; (8002fd8 <HAL_DAC_MspInit+0xfc>)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	2105      	movs	r1, #5
 8002fb6:	2036      	movs	r0, #54	; 0x36
 8002fb8:	f002 faca 	bl	8005550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002fbc:	2036      	movs	r0, #54	; 0x36
 8002fbe:	f002 fae1 	bl	8005584 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002fc2:	bf00      	nop
 8002fc4:	3728      	adds	r7, #40	; 0x28
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40007400 	.word	0x40007400
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	58020000 	.word	0x58020000
 8002fd8:	24000308 	.word	0x24000308
 8002fdc:	40020088 	.word	0x40020088

08002fe0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b0ba      	sub	sp, #232	; 0xe8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002fec:	2200      	movs	r2, #0
 8002fee:	601a      	str	r2, [r3, #0]
 8002ff0:	605a      	str	r2, [r3, #4]
 8002ff2:	609a      	str	r2, [r3, #8]
 8002ff4:	60da      	str	r2, [r3, #12]
 8002ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ff8:	f107 0310 	add.w	r3, r7, #16
 8002ffc:	22c0      	movs	r2, #192	; 0xc0
 8002ffe:	2100      	movs	r1, #0
 8003000:	4618      	mov	r0, r3
 8003002:	f013 f983 	bl	801630c <memset>
  if(hi2c->Instance==I2C1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a27      	ldr	r2, [pc, #156]	; (80030a8 <HAL_I2C_MspInit+0xc8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d146      	bne.n	800309e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003010:	f04f 0208 	mov.w	r2, #8
 8003014:	f04f 0300 	mov.w	r3, #0
 8003018:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800301c:	2300      	movs	r3, #0
 800301e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003022:	f107 0310 	add.w	r3, r7, #16
 8003026:	4618      	mov	r0, r3
 8003028:	f007 fd5c 	bl	800aae4 <HAL_RCCEx_PeriphCLKConfig>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8003032:	f7ff fe15 	bl	8002c60 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003036:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_I2C_MspInit+0xcc>)
 8003038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800303c:	4a1b      	ldr	r2, [pc, #108]	; (80030ac <HAL_I2C_MspInit+0xcc>)
 800303e:	f043 0302 	orr.w	r3, r3, #2
 8003042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_I2C_MspInit+0xcc>)
 8003048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800304c:	f003 0302 	and.w	r3, r3, #2
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003054:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003058:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800305c:	2312      	movs	r3, #18
 800305e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003062:	2300      	movs	r3, #0
 8003064:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003068:	2300      	movs	r3, #0
 800306a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800306e:	2304      	movs	r3, #4
 8003070:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003074:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003078:	4619      	mov	r1, r3
 800307a:	480d      	ldr	r0, [pc, #52]	; (80030b0 <HAL_I2C_MspInit+0xd0>)
 800307c:	f005 fcd2 	bl	8008a24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003080:	4b0a      	ldr	r3, [pc, #40]	; (80030ac <HAL_I2C_MspInit+0xcc>)
 8003082:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_I2C_MspInit+0xcc>)
 8003088:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800308c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003090:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_I2C_MspInit+0xcc>)
 8003092:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003096:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800309a:	60bb      	str	r3, [r7, #8]
 800309c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800309e:	bf00      	nop
 80030a0:	37e8      	adds	r7, #232	; 0xe8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40005400 	.word	0x40005400
 80030ac:	58024400 	.word	0x58024400
 80030b0:	58020400 	.word	0x58020400

080030b4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b0b2      	sub	sp, #200	; 0xc8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80030bc:	f107 0308 	add.w	r3, r7, #8
 80030c0:	22c0      	movs	r2, #192	; 0xc0
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f013 f921 	bl	801630c <memset>
  if(hrtc->Instance==RTC)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a10      	ldr	r2, [pc, #64]	; (8003110 <HAL_RTC_MspInit+0x5c>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d119      	bne.n	8003108 <HAL_RTC_MspInit+0x54>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80030d4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80030d8:	f04f 0300 	mov.w	r3, #0
 80030dc:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80030e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030e8:	f107 0308 	add.w	r3, r7, #8
 80030ec:	4618      	mov	r0, r3
 80030ee:	f007 fcf9 	bl	800aae4 <HAL_RCCEx_PeriphCLKConfig>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d001      	beq.n	80030fc <HAL_RTC_MspInit+0x48>
    {
      Error_Handler();
 80030f8:	f7ff fdb2 	bl	8002c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80030fc:	4b05      	ldr	r3, [pc, #20]	; (8003114 <HAL_RTC_MspInit+0x60>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_RTC_MspInit+0x60>)
 8003102:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003106:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003108:	bf00      	nop
 800310a:	37c8      	adds	r7, #200	; 0xc8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	58004000 	.word	0x58004000
 8003114:	58024400 	.word	0x58024400

08003118 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b0bc      	sub	sp, #240	; 0xf0
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003130:	f107 0318 	add.w	r3, r7, #24
 8003134:	22c0      	movs	r2, #192	; 0xc0
 8003136:	2100      	movs	r1, #0
 8003138:	4618      	mov	r0, r3
 800313a:	f013 f8e7 	bl	801630c <memset>
  if(hspi->Instance==SPI1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a4c      	ldr	r2, [pc, #304]	; (8003274 <HAL_SPI_MspInit+0x15c>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d145      	bne.n	80031d4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003148:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003154:	2300      	movs	r3, #0
 8003156:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	4618      	mov	r0, r3
 800315e:	f007 fcc1 	bl	800aae4 <HAL_RCCEx_PeriphCLKConfig>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003168:	f7ff fd7a 	bl	8002c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800316c:	4b42      	ldr	r3, [pc, #264]	; (8003278 <HAL_SPI_MspInit+0x160>)
 800316e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003172:	4a41      	ldr	r2, [pc, #260]	; (8003278 <HAL_SPI_MspInit+0x160>)
 8003174:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003178:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800317c:	4b3e      	ldr	r3, [pc, #248]	; (8003278 <HAL_SPI_MspInit+0x160>)
 800317e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800318a:	4b3b      	ldr	r3, [pc, #236]	; (8003278 <HAL_SPI_MspInit+0x160>)
 800318c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003190:	4a39      	ldr	r2, [pc, #228]	; (8003278 <HAL_SPI_MspInit+0x160>)
 8003192:	f043 0302 	orr.w	r3, r3, #2
 8003196:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800319a:	4b37      	ldr	r3, [pc, #220]	; (8003278 <HAL_SPI_MspInit+0x160>)
 800319c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80031a0:	f003 0302 	and.w	r3, r3, #2
 80031a4:	613b      	str	r3, [r7, #16]
 80031a6:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80031a8:	2318      	movs	r3, #24
 80031aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031ae:	2302      	movs	r3, #2
 80031b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031b4:	2300      	movs	r3, #0
 80031b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031ba:	2300      	movs	r3, #0
 80031bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80031c0:	2305      	movs	r3, #5
 80031c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80031c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80031ca:	4619      	mov	r1, r3
 80031cc:	482b      	ldr	r0, [pc, #172]	; (800327c <HAL_SPI_MspInit+0x164>)
 80031ce:	f005 fc29 	bl	8008a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80031d2:	e04a      	b.n	800326a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a29      	ldr	r2, [pc, #164]	; (8003280 <HAL_SPI_MspInit+0x168>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d145      	bne.n	800326a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80031de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80031e2:	f04f 0300 	mov.w	r3, #0
 80031e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80031ea:	2300      	movs	r3, #0
 80031ec:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80031ee:	f107 0318 	add.w	r3, r7, #24
 80031f2:	4618      	mov	r0, r3
 80031f4:	f007 fc76 	bl	800aae4 <HAL_RCCEx_PeriphCLKConfig>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80031fe:	f7ff fd2f 	bl	8002c60 <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003202:	4b1d      	ldr	r3, [pc, #116]	; (8003278 <HAL_SPI_MspInit+0x160>)
 8003204:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003208:	4a1b      	ldr	r2, [pc, #108]	; (8003278 <HAL_SPI_MspInit+0x160>)
 800320a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800320e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003212:	4b19      	ldr	r3, [pc, #100]	; (8003278 <HAL_SPI_MspInit+0x160>)
 8003214:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003220:	4b15      	ldr	r3, [pc, #84]	; (8003278 <HAL_SPI_MspInit+0x160>)
 8003222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003226:	4a14      	ldr	r2, [pc, #80]	; (8003278 <HAL_SPI_MspInit+0x160>)
 8003228:	f043 0302 	orr.w	r3, r3, #2
 800322c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003230:	4b11      	ldr	r3, [pc, #68]	; (8003278 <HAL_SPI_MspInit+0x160>)
 8003232:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	60bb      	str	r3, [r7, #8]
 800323c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800323e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003242:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003246:	2302      	movs	r3, #2
 8003248:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324c:	2300      	movs	r3, #0
 800324e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003258:	2305      	movs	r3, #5
 800325a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003262:	4619      	mov	r1, r3
 8003264:	4805      	ldr	r0, [pc, #20]	; (800327c <HAL_SPI_MspInit+0x164>)
 8003266:	f005 fbdd 	bl	8008a24 <HAL_GPIO_Init>
}
 800326a:	bf00      	nop
 800326c:	37f0      	adds	r7, #240	; 0xf0
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	40013000 	.word	0x40013000
 8003278:	58024400 	.word	0x58024400
 800327c:	58020400 	.word	0x58020400
 8003280:	40003800 	.word	0x40003800

08003284 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a42      	ldr	r2, [pc, #264]	; (800339c <HAL_TIM_Base_MspInit+0x118>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d12f      	bne.n	80032f6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003296:	4b42      	ldr	r3, [pc, #264]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 8003298:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800329c:	4a40      	ldr	r2, [pc, #256]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 800329e:	f043 0301 	orr.w	r3, r3, #1
 80032a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80032a6:	4b3e      	ldr	r3, [pc, #248]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 80032a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	617b      	str	r3, [r7, #20]
 80032b2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80032b4:	2200      	movs	r2, #0
 80032b6:	2105      	movs	r1, #5
 80032b8:	2018      	movs	r0, #24
 80032ba:	f002 f949 	bl	8005550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80032be:	2018      	movs	r0, #24
 80032c0:	f002 f960 	bl	8005584 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80032c4:	2200      	movs	r2, #0
 80032c6:	2105      	movs	r1, #5
 80032c8:	2019      	movs	r0, #25
 80032ca:	f002 f941 	bl	8005550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80032ce:	2019      	movs	r0, #25
 80032d0:	f002 f958 	bl	8005584 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80032d4:	2200      	movs	r2, #0
 80032d6:	2105      	movs	r1, #5
 80032d8:	201a      	movs	r0, #26
 80032da:	f002 f939 	bl	8005550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80032de:	201a      	movs	r0, #26
 80032e0:	f002 f950 	bl	8005584 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80032e4:	2200      	movs	r2, #0
 80032e6:	2105      	movs	r1, #5
 80032e8:	201b      	movs	r0, #27
 80032ea:	f002 f931 	bl	8005550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80032ee:	201b      	movs	r0, #27
 80032f0:	f002 f948 	bl	8005584 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032f4:	e04d      	b.n	8003392 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM2)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d117      	bne.n	8003330 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003300:	4b27      	ldr	r3, [pc, #156]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 8003302:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003306:	4a26      	ldr	r2, [pc, #152]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003310:	4b23      	ldr	r3, [pc, #140]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 8003312:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800331e:	2200      	movs	r2, #0
 8003320:	2105      	movs	r1, #5
 8003322:	201c      	movs	r0, #28
 8003324:	f002 f914 	bl	8005550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003328:	201c      	movs	r0, #28
 800332a:	f002 f92b 	bl	8005584 <HAL_NVIC_EnableIRQ>
}
 800332e:	e030      	b.n	8003392 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM3)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a1b      	ldr	r2, [pc, #108]	; (80033a4 <HAL_TIM_Base_MspInit+0x120>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d117      	bne.n	800336a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800333a:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 800333c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003340:	4a17      	ldr	r2, [pc, #92]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 8003342:	f043 0302 	orr.w	r3, r3, #2
 8003346:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800334a:	4b15      	ldr	r3, [pc, #84]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 800334c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003358:	2200      	movs	r2, #0
 800335a:	2105      	movs	r1, #5
 800335c:	201d      	movs	r0, #29
 800335e:	f002 f8f7 	bl	8005550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003362:	201d      	movs	r0, #29
 8003364:	f002 f90e 	bl	8005584 <HAL_NVIC_EnableIRQ>
}
 8003368:	e013      	b.n	8003392 <HAL_TIM_Base_MspInit+0x10e>
  else if(htim_base->Instance==TIM4)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a0e      	ldr	r2, [pc, #56]	; (80033a8 <HAL_TIM_Base_MspInit+0x124>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d10e      	bne.n	8003392 <HAL_TIM_Base_MspInit+0x10e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003374:	4b0a      	ldr	r3, [pc, #40]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 8003376:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800337a:	4a09      	ldr	r2, [pc, #36]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003384:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <HAL_TIM_Base_MspInit+0x11c>)
 8003386:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800338a:	f003 0304 	and.w	r3, r3, #4
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	68bb      	ldr	r3, [r7, #8]
}
 8003392:	bf00      	nop
 8003394:	3718      	adds	r7, #24
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40010000 	.word	0x40010000
 80033a0:	58024400 	.word	0x58024400
 80033a4:	40000400 	.word	0x40000400
 80033a8:	40000800 	.word	0x40000800

080033ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b08a      	sub	sp, #40	; 0x28
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033b4:	f107 0314 	add.w	r3, r7, #20
 80033b8:	2200      	movs	r2, #0
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	605a      	str	r2, [r3, #4]
 80033be:	609a      	str	r2, [r3, #8]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a26      	ldr	r2, [pc, #152]	; (8003464 <HAL_TIM_MspPostInit+0xb8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d120      	bne.n	8003410 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ce:	4b26      	ldr	r3, [pc, #152]	; (8003468 <HAL_TIM_MspPostInit+0xbc>)
 80033d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033d4:	4a24      	ldr	r2, [pc, #144]	; (8003468 <HAL_TIM_MspPostInit+0xbc>)
 80033d6:	f043 0301 	orr.w	r3, r3, #1
 80033da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033de:	4b22      	ldr	r3, [pc, #136]	; (8003468 <HAL_TIM_MspPostInit+0xbc>)
 80033e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033e4:	f003 0301 	and.w	r3, r3, #1
 80033e8:	613b      	str	r3, [r7, #16]
 80033ea:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80033ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f2:	2302      	movs	r3, #2
 80033f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f6:	2300      	movs	r3, #0
 80033f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033fa:	2300      	movs	r3, #0
 80033fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80033fe:	2301      	movs	r3, #1
 8003400:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003402:	f107 0314 	add.w	r3, r7, #20
 8003406:	4619      	mov	r1, r3
 8003408:	4818      	ldr	r0, [pc, #96]	; (800346c <HAL_TIM_MspPostInit+0xc0>)
 800340a:	f005 fb0b 	bl	8008a24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800340e:	e024      	b.n	800345a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003418:	d11f      	bne.n	800345a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800341a:	4b13      	ldr	r3, [pc, #76]	; (8003468 <HAL_TIM_MspPostInit+0xbc>)
 800341c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003420:	4a11      	ldr	r2, [pc, #68]	; (8003468 <HAL_TIM_MspPostInit+0xbc>)
 8003422:	f043 0302 	orr.w	r3, r3, #2
 8003426:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800342a:	4b0f      	ldr	r3, [pc, #60]	; (8003468 <HAL_TIM_MspPostInit+0xbc>)
 800342c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003438:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800343c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800343e:	2302      	movs	r3, #2
 8003440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003442:	2300      	movs	r3, #0
 8003444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003446:	2300      	movs	r3, #0
 8003448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800344a:	2301      	movs	r3, #1
 800344c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	4619      	mov	r1, r3
 8003454:	4806      	ldr	r0, [pc, #24]	; (8003470 <HAL_TIM_MspPostInit+0xc4>)
 8003456:	f005 fae5 	bl	8008a24 <HAL_GPIO_Init>
}
 800345a:	bf00      	nop
 800345c:	3728      	adds	r7, #40	; 0x28
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40010000 	.word	0x40010000
 8003468:	58024400 	.word	0x58024400
 800346c:	58020000 	.word	0x58020000
 8003470:	58020400 	.word	0x58020400

08003474 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b0ba      	sub	sp, #232	; 0xe8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800347c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003480:	2200      	movs	r2, #0
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	605a      	str	r2, [r3, #4]
 8003486:	609a      	str	r2, [r3, #8]
 8003488:	60da      	str	r2, [r3, #12]
 800348a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	22c0      	movs	r2, #192	; 0xc0
 8003492:	2100      	movs	r1, #0
 8003494:	4618      	mov	r0, r3
 8003496:	f012 ff39 	bl	801630c <memset>
  if(huart->Instance==USART1)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a41      	ldr	r2, [pc, #260]	; (80035a4 <HAL_UART_MspInit+0x130>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d17b      	bne.n	800359c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80034a4:	f04f 0201 	mov.w	r2, #1
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80034b0:	2300      	movs	r3, #0
 80034b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	4618      	mov	r0, r3
 80034bc:	f007 fb12 	bl	800aae4 <HAL_RCCEx_PeriphCLKConfig>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80034c6:	f7ff fbcb 	bl	8002c60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034ca:	4b37      	ldr	r3, [pc, #220]	; (80035a8 <HAL_UART_MspInit+0x134>)
 80034cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034d0:	4a35      	ldr	r2, [pc, #212]	; (80035a8 <HAL_UART_MspInit+0x134>)
 80034d2:	f043 0310 	orr.w	r3, r3, #16
 80034d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80034da:	4b33      	ldr	r3, [pc, #204]	; (80035a8 <HAL_UART_MspInit+0x134>)
 80034dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	60fb      	str	r3, [r7, #12]
 80034e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e8:	4b2f      	ldr	r3, [pc, #188]	; (80035a8 <HAL_UART_MspInit+0x134>)
 80034ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ee:	4a2e      	ldr	r2, [pc, #184]	; (80035a8 <HAL_UART_MspInit+0x134>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034f8:	4b2b      	ldr	r3, [pc, #172]	; (80035a8 <HAL_UART_MspInit+0x134>)
 80034fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	60bb      	str	r3, [r7, #8]
 8003504:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003506:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800350a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003514:	2300      	movs	r3, #0
 8003516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800351a:	2300      	movs	r3, #0
 800351c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003520:	2307      	movs	r3, #7
 8003522:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003526:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800352a:	4619      	mov	r1, r3
 800352c:	481f      	ldr	r0, [pc, #124]	; (80035ac <HAL_UART_MspInit+0x138>)
 800352e:	f005 fa79 	bl	8008a24 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003532:	4b1f      	ldr	r3, [pc, #124]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 8003534:	4a1f      	ldr	r2, [pc, #124]	; (80035b4 <HAL_UART_MspInit+0x140>)
 8003536:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003538:	4b1d      	ldr	r3, [pc, #116]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 800353a:	222a      	movs	r2, #42	; 0x2a
 800353c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800353e:	4b1c      	ldr	r3, [pc, #112]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 8003540:	2240      	movs	r2, #64	; 0x40
 8003542:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003544:	4b1a      	ldr	r3, [pc, #104]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 8003546:	2200      	movs	r2, #0
 8003548:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800354a:	4b19      	ldr	r3, [pc, #100]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 800354c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003550:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003552:	4b17      	ldr	r3, [pc, #92]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 8003554:	2200      	movs	r2, #0
 8003556:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003558:	4b15      	ldr	r3, [pc, #84]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 800355a:	2200      	movs	r2, #0
 800355c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800355e:	4b14      	ldr	r3, [pc, #80]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 8003560:	2200      	movs	r2, #0
 8003562:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 8003566:	2200      	movs	r2, #0
 8003568:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800356a:	4b11      	ldr	r3, [pc, #68]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 800356c:	2200      	movs	r2, #0
 800356e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003570:	480f      	ldr	r0, [pc, #60]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 8003572:	f002 fc1b 	bl	8005dac <HAL_DMA_Init>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d001      	beq.n	8003580 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800357c:	f7ff fb70 	bl	8002c60 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a0b      	ldr	r2, [pc, #44]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c
 8003586:	4a0a      	ldr	r2, [pc, #40]	; (80035b0 <HAL_UART_MspInit+0x13c>)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800358c:	2200      	movs	r2, #0
 800358e:	2105      	movs	r1, #5
 8003590:	2025      	movs	r0, #37	; 0x25
 8003592:	f001 ffdd 	bl	8005550 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003596:	2025      	movs	r0, #37	; 0x25
 8003598:	f001 fff4 	bl	8005584 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800359c:	bf00      	nop
 800359e:	37e8      	adds	r7, #232	; 0xe8
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bd80      	pop	{r7, pc}
 80035a4:	40011000 	.word	0x40011000
 80035a8:	58024400 	.word	0x58024400
 80035ac:	58020000 	.word	0x58020000
 80035b0:	240006cc 	.word	0x240006cc
 80035b4:	40020040 	.word	0x40020040

080035b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b090      	sub	sp, #64	; 0x40
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b0f      	cmp	r3, #15
 80035c4:	d827      	bhi.n	8003616 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80035c6:	2200      	movs	r2, #0
 80035c8:	6879      	ldr	r1, [r7, #4]
 80035ca:	2036      	movs	r0, #54	; 0x36
 80035cc:	f001 ffc0 	bl	8005550 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80035d0:	2036      	movs	r0, #54	; 0x36
 80035d2:	f001 ffd7 	bl	8005584 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80035d6:	4a29      	ldr	r2, [pc, #164]	; (800367c <HAL_InitTick+0xc4>)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80035dc:	4b28      	ldr	r3, [pc, #160]	; (8003680 <HAL_InitTick+0xc8>)
 80035de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035e2:	4a27      	ldr	r2, [pc, #156]	; (8003680 <HAL_InitTick+0xc8>)
 80035e4:	f043 0310 	orr.w	r3, r3, #16
 80035e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035ec:	4b24      	ldr	r3, [pc, #144]	; (8003680 <HAL_InitTick+0xc8>)
 80035ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035f2:	f003 0310 	and.w	r3, r3, #16
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035fa:	f107 0210 	add.w	r2, r7, #16
 80035fe:	f107 0314 	add.w	r3, r7, #20
 8003602:	4611      	mov	r1, r2
 8003604:	4618      	mov	r0, r3
 8003606:	f007 fa2b 	bl	800aa60 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800360e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003610:	2b00      	cmp	r3, #0
 8003612:	d106      	bne.n	8003622 <HAL_InitTick+0x6a>
 8003614:	e001      	b.n	800361a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e02b      	b.n	8003672 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800361a:	f007 f9f5 	bl	800aa08 <HAL_RCC_GetPCLK1Freq>
 800361e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003620:	e004      	b.n	800362c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003622:	f007 f9f1 	bl	800aa08 <HAL_RCC_GetPCLK1Freq>
 8003626:	4603      	mov	r3, r0
 8003628:	005b      	lsls	r3, r3, #1
 800362a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800362c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <HAL_InitTick+0xcc>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	0c9b      	lsrs	r3, r3, #18
 8003636:	3b01      	subs	r3, #1
 8003638:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800363a:	4b13      	ldr	r3, [pc, #76]	; (8003688 <HAL_InitTick+0xd0>)
 800363c:	4a13      	ldr	r2, [pc, #76]	; (800368c <HAL_InitTick+0xd4>)
 800363e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003640:	4b11      	ldr	r3, [pc, #68]	; (8003688 <HAL_InitTick+0xd0>)
 8003642:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003646:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003648:	4a0f      	ldr	r2, [pc, #60]	; (8003688 <HAL_InitTick+0xd0>)
 800364a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800364c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800364e:	4b0e      	ldr	r3, [pc, #56]	; (8003688 <HAL_InitTick+0xd0>)
 8003650:	2200      	movs	r2, #0
 8003652:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003654:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <HAL_InitTick+0xd0>)
 8003656:	2200      	movs	r2, #0
 8003658:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800365a:	480b      	ldr	r0, [pc, #44]	; (8003688 <HAL_InitTick+0xd0>)
 800365c:	f00a feb3 	bl	800e3c6 <HAL_TIM_Base_Init>
 8003660:	4603      	mov	r3, r0
 8003662:	2b00      	cmp	r3, #0
 8003664:	d104      	bne.n	8003670 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003666:	4808      	ldr	r0, [pc, #32]	; (8003688 <HAL_InitTick+0xd0>)
 8003668:	f00a ff74 	bl	800e554 <HAL_TIM_Base_Start_IT>
 800366c:	4603      	mov	r3, r0
 800366e:	e000      	b.n	8003672 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
}
 8003672:	4618      	mov	r0, r3
 8003674:	3740      	adds	r7, #64	; 0x40
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop
 800367c:	24000098 	.word	0x24000098
 8003680:	58024400 	.word	0x58024400
 8003684:	431bde83 	.word	0x431bde83
 8003688:	240010b8 	.word	0x240010b8
 800368c:	40001000 	.word	0x40001000

08003690 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003694:	e7fe      	b.n	8003694 <NMI_Handler+0x4>

08003696 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003696:	b480      	push	{r7}
 8003698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800369a:	e7fe      	b.n	800369a <HardFault_Handler+0x4>

0800369c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800369c:	b480      	push	{r7}
 800369e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80036a0:	e7fe      	b.n	80036a0 <MemManage_Handler+0x4>

080036a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80036a2:	b480      	push	{r7}
 80036a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80036a6:	e7fe      	b.n	80036a6 <BusFault_Handler+0x4>

080036a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036ac:	e7fe      	b.n	80036ac <UsageFault_Handler+0x4>

080036ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036ae:	b480      	push	{r7}
 80036b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036b2:	bf00      	nop
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80036c0:	4802      	ldr	r0, [pc, #8]	; (80036cc <DMA1_Stream0_IRQHandler+0x10>)
 80036c2:	f003 fe9d 	bl	8007400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	24000204 	.word	0x24000204

080036d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80036d4:	4802      	ldr	r0, [pc, #8]	; (80036e0 <DMA1_Stream1_IRQHandler+0x10>)
 80036d6:	f003 fe93 	bl	8007400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80036da:	bf00      	nop
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	2400027c 	.word	0x2400027c

080036e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80036e8:	4802      	ldr	r0, [pc, #8]	; (80036f4 <DMA1_Stream2_IRQHandler+0x10>)
 80036ea:	f003 fe89 	bl	8007400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80036ee:	bf00      	nop
 80036f0:	bd80      	pop	{r7, pc}
 80036f2:	bf00      	nop
 80036f4:	240006cc 	.word	0x240006cc

080036f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80036fc:	4802      	ldr	r0, [pc, #8]	; (8003708 <DMA1_Stream5_IRQHandler+0x10>)
 80036fe:	f003 fe7f 	bl	8007400 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003702:	bf00      	nop
 8003704:	bd80      	pop	{r7, pc}
 8003706:	bf00      	nop
 8003708:	24000308 	.word	0x24000308

0800370c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003710:	4802      	ldr	r0, [pc, #8]	; (800371c <TIM1_BRK_IRQHandler+0x10>)
 8003712:	f00b fa36 	bl	800eb82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003716:	bf00      	nop
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	24000508 	.word	0x24000508

08003720 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003724:	4802      	ldr	r0, [pc, #8]	; (8003730 <TIM1_UP_IRQHandler+0x10>)
 8003726:	f00b fa2c 	bl	800eb82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	24000508 	.word	0x24000508

08003734 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003738:	4802      	ldr	r0, [pc, #8]	; (8003744 <TIM1_TRG_COM_IRQHandler+0x10>)
 800373a:	f00b fa22 	bl	800eb82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800373e:	bf00      	nop
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	24000508 	.word	0x24000508

08003748 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800374c:	4802      	ldr	r0, [pc, #8]	; (8003758 <TIM1_CC_IRQHandler+0x10>)
 800374e:	f00b fa18 	bl	800eb82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003752:	bf00      	nop
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	24000508 	.word	0x24000508

0800375c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003760:	4802      	ldr	r0, [pc, #8]	; (800376c <TIM2_IRQHandler+0x10>)
 8003762:	f00b fa0e 	bl	800eb82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003766:	bf00      	nop
 8003768:	bd80      	pop	{r7, pc}
 800376a:	bf00      	nop
 800376c:	24000554 	.word	0x24000554

08003770 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003774:	4802      	ldr	r0, [pc, #8]	; (8003780 <TIM3_IRQHandler+0x10>)
 8003776:	f00b fa04 	bl	800eb82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
 800377e:	bf00      	nop
 8003780:	240005a0 	.word	0x240005a0

08003784 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003788:	4802      	ldr	r0, [pc, #8]	; (8003794 <USART1_IRQHandler+0x10>)
 800378a:	f00c fd07 	bl	801019c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800378e:	bf00      	nop
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	24000638 	.word	0x24000638

08003798 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 800379c:	4b06      	ldr	r3, [pc, #24]	; (80037b8 <TIM6_DAC_IRQHandler+0x20>)
 800379e:	791b      	ldrb	r3, [r3, #4]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80037a6:	4804      	ldr	r0, [pc, #16]	; (80037b8 <TIM6_DAC_IRQHandler+0x20>)
 80037a8:	f002 f881 	bl	80058ae <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80037ac:	4803      	ldr	r0, [pc, #12]	; (80037bc <TIM6_DAC_IRQHandler+0x24>)
 80037ae:	f00b f9e8 	bl	800eb82 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037b2:	bf00      	nop
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	240002f4 	.word	0x240002f4
 80037bc:	240010b8 	.word	0x240010b8

080037c0 <ITM_SendChar>:
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
 80037ca:	4b0f      	ldr	r3, [pc, #60]	; (8003808 <ITM_SendChar+0x48>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a0e      	ldr	r2, [pc, #56]	; (8003808 <ITM_SendChar+0x48>)
 80037d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037d4:	6013      	str	r3, [r2, #0]
 80037d6:	4b0d      	ldr	r3, [pc, #52]	; (800380c <ITM_SendChar+0x4c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a0c      	ldr	r2, [pc, #48]	; (800380c <ITM_SendChar+0x4c>)
 80037dc:	f043 0301 	orr.w	r3, r3, #1
 80037e0:	6013      	str	r3, [r2, #0]
 80037e2:	bf00      	nop
 80037e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f8      	beq.n	80037e4 <ITM_SendChar+0x24>
 80037f2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80037f6:	79fb      	ldrb	r3, [r7, #7]
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	bf00      	nop
 80037fc:	370c      	adds	r7, #12
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	e000edfc 	.word	0xe000edfc
 800380c:	e0000e00 	.word	0xe0000e00

08003810 <_read>:
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	e00a      	b.n	8003838 <_read+0x28>
 8003822:	f3af 8000 	nop.w
 8003826:	4601      	mov	r1, r0
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	60ba      	str	r2, [r7, #8]
 800382e:	b2ca      	uxtb	r2, r1
 8003830:	701a      	strb	r2, [r3, #0]
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	3301      	adds	r3, #1
 8003836:	617b      	str	r3, [r7, #20]
 8003838:	697a      	ldr	r2, [r7, #20]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	429a      	cmp	r2, r3
 800383e:	dbf0      	blt.n	8003822 <_read+0x12>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <_write>:
 800384a:	b580      	push	{r7, lr}
 800384c:	b086      	sub	sp, #24
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	e009      	b.n	8003870 <_write+0x26>
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	1c5a      	adds	r2, r3, #1
 8003860:	60ba      	str	r2, [r7, #8]
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ffab 	bl	80037c0 <ITM_SendChar>
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	3301      	adds	r3, #1
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	697a      	ldr	r2, [r7, #20]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	429a      	cmp	r2, r3
 8003876:	dbf1      	blt.n	800385c <_write+0x12>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4618      	mov	r0, r3
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <_close>:
 8003882:	b480      	push	{r7}
 8003884:	b083      	sub	sp, #12
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <_fstat>:
 800389a:	b480      	push	{r7}
 800389c:	b083      	sub	sp, #12
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	6039      	str	r1, [r7, #0]
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038aa:	605a      	str	r2, [r3, #4]
 80038ac:	2300      	movs	r3, #0
 80038ae:	4618      	mov	r0, r3
 80038b0:	370c      	adds	r7, #12
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <_isatty>:
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	6078      	str	r0, [r7, #4]
 80038c2:	2301      	movs	r3, #1
 80038c4:	4618      	mov	r0, r3
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <_lseek>:
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	607a      	str	r2, [r7, #4]
 80038dc:	2300      	movs	r3, #0
 80038de:	4618      	mov	r0, r3
 80038e0:	3714      	adds	r7, #20
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
	...

080038ec <_sbrk>:
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	4a14      	ldr	r2, [pc, #80]	; (8003948 <_sbrk+0x5c>)
 80038f6:	4b15      	ldr	r3, [pc, #84]	; (800394c <_sbrk+0x60>)
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	617b      	str	r3, [r7, #20]
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	4b13      	ldr	r3, [pc, #76]	; (8003950 <_sbrk+0x64>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d102      	bne.n	800390e <_sbrk+0x22>
 8003908:	4b11      	ldr	r3, [pc, #68]	; (8003950 <_sbrk+0x64>)
 800390a:	4a12      	ldr	r2, [pc, #72]	; (8003954 <_sbrk+0x68>)
 800390c:	601a      	str	r2, [r3, #0]
 800390e:	4b10      	ldr	r3, [pc, #64]	; (8003950 <_sbrk+0x64>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4413      	add	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	429a      	cmp	r2, r3
 800391a:	d207      	bcs.n	800392c <_sbrk+0x40>
 800391c:	f012 fcae 	bl	801627c <__errno>
 8003920:	4603      	mov	r3, r0
 8003922:	220c      	movs	r2, #12
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800392a:	e009      	b.n	8003940 <_sbrk+0x54>
 800392c:	4b08      	ldr	r3, [pc, #32]	; (8003950 <_sbrk+0x64>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	4b07      	ldr	r3, [pc, #28]	; (8003950 <_sbrk+0x64>)
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4413      	add	r3, r2
 800393a:	4a05      	ldr	r2, [pc, #20]	; (8003950 <_sbrk+0x64>)
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	4618      	mov	r0, r3
 8003942:	3718      	adds	r7, #24
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	24080000 	.word	0x24080000
 800394c:	00000400 	.word	0x00000400
 8003950:	24001104 	.word	0x24001104
 8003954:	24005a70 	.word	0x24005a70

08003958 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800395c:	4b37      	ldr	r3, [pc, #220]	; (8003a3c <SystemInit+0xe4>)
 800395e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003962:	4a36      	ldr	r2, [pc, #216]	; (8003a3c <SystemInit+0xe4>)
 8003964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800396c:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <SystemInit+0xe8>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 030f 	and.w	r3, r3, #15
 8003974:	2b06      	cmp	r3, #6
 8003976:	d807      	bhi.n	8003988 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003978:	4b31      	ldr	r3, [pc, #196]	; (8003a40 <SystemInit+0xe8>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f023 030f 	bic.w	r3, r3, #15
 8003980:	4a2f      	ldr	r2, [pc, #188]	; (8003a40 <SystemInit+0xe8>)
 8003982:	f043 0307 	orr.w	r3, r3, #7
 8003986:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003988:	4b2e      	ldr	r3, [pc, #184]	; (8003a44 <SystemInit+0xec>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a2d      	ldr	r2, [pc, #180]	; (8003a44 <SystemInit+0xec>)
 800398e:	f043 0301 	orr.w	r3, r3, #1
 8003992:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003994:	4b2b      	ldr	r3, [pc, #172]	; (8003a44 <SystemInit+0xec>)
 8003996:	2200      	movs	r2, #0
 8003998:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800399a:	4b2a      	ldr	r3, [pc, #168]	; (8003a44 <SystemInit+0xec>)
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	4929      	ldr	r1, [pc, #164]	; (8003a44 <SystemInit+0xec>)
 80039a0:	4b29      	ldr	r3, [pc, #164]	; (8003a48 <SystemInit+0xf0>)
 80039a2:	4013      	ands	r3, r2
 80039a4:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80039a6:	4b26      	ldr	r3, [pc, #152]	; (8003a40 <SystemInit+0xe8>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d007      	beq.n	80039c2 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80039b2:	4b23      	ldr	r3, [pc, #140]	; (8003a40 <SystemInit+0xe8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f023 030f 	bic.w	r3, r3, #15
 80039ba:	4a21      	ldr	r2, [pc, #132]	; (8003a40 <SystemInit+0xe8>)
 80039bc:	f043 0307 	orr.w	r3, r3, #7
 80039c0:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80039c2:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <SystemInit+0xec>)
 80039c4:	2200      	movs	r2, #0
 80039c6:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80039c8:	4b1e      	ldr	r3, [pc, #120]	; (8003a44 <SystemInit+0xec>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80039ce:	4b1d      	ldr	r3, [pc, #116]	; (8003a44 <SystemInit+0xec>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80039d4:	4b1b      	ldr	r3, [pc, #108]	; (8003a44 <SystemInit+0xec>)
 80039d6:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <SystemInit+0xf4>)
 80039d8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80039da:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <SystemInit+0xec>)
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <SystemInit+0xf8>)
 80039de:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80039e0:	4b18      	ldr	r3, [pc, #96]	; (8003a44 <SystemInit+0xec>)
 80039e2:	4a1c      	ldr	r2, [pc, #112]	; (8003a54 <SystemInit+0xfc>)
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80039e6:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <SystemInit+0xec>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80039ec:	4b15      	ldr	r3, [pc, #84]	; (8003a44 <SystemInit+0xec>)
 80039ee:	4a19      	ldr	r2, [pc, #100]	; (8003a54 <SystemInit+0xfc>)
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80039f2:	4b14      	ldr	r3, [pc, #80]	; (8003a44 <SystemInit+0xec>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80039f8:	4b12      	ldr	r3, [pc, #72]	; (8003a44 <SystemInit+0xec>)
 80039fa:	4a16      	ldr	r2, [pc, #88]	; (8003a54 <SystemInit+0xfc>)
 80039fc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <SystemInit+0xec>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <SystemInit+0xec>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <SystemInit+0xec>)
 8003a0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a0e:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003a10:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <SystemInit+0xec>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 8003a16:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <SystemInit+0x100>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b10      	ldr	r3, [pc, #64]	; (8003a5c <SystemInit+0x104>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a22:	d202      	bcs.n	8003a2a <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003a24:	4b0e      	ldr	r3, [pc, #56]	; (8003a60 <SystemInit+0x108>)
 8003a26:	2201      	movs	r2, #1
 8003a28:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003a2a:	4b0e      	ldr	r3, [pc, #56]	; (8003a64 <SystemInit+0x10c>)
 8003a2c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003a30:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003a32:	bf00      	nop
 8003a34:	46bd      	mov	sp, r7
 8003a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3a:	4770      	bx	lr
 8003a3c:	e000ed00 	.word	0xe000ed00
 8003a40:	52002000 	.word	0x52002000
 8003a44:	58024400 	.word	0x58024400
 8003a48:	eaf6ed7f 	.word	0xeaf6ed7f
 8003a4c:	02020200 	.word	0x02020200
 8003a50:	01ff0000 	.word	0x01ff0000
 8003a54:	01010280 	.word	0x01010280
 8003a58:	5c001000 	.word	0x5c001000
 8003a5c:	ffff0000 	.word	0xffff0000
 8003a60:	51008108 	.word	0x51008108
 8003a64:	52004000 	.word	0x52004000

08003a68 <Reset_Handler>:
 8003a68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003aa0 <LoopFillZerobss+0xe>
 8003a6c:	f7ff ff74 	bl	8003958 <SystemInit>
 8003a70:	480c      	ldr	r0, [pc, #48]	; (8003aa4 <LoopFillZerobss+0x12>)
 8003a72:	490d      	ldr	r1, [pc, #52]	; (8003aa8 <LoopFillZerobss+0x16>)
 8003a74:	4a0d      	ldr	r2, [pc, #52]	; (8003aac <LoopFillZerobss+0x1a>)
 8003a76:	2300      	movs	r3, #0
 8003a78:	e002      	b.n	8003a80 <LoopCopyDataInit>

08003a7a <CopyDataInit>:
 8003a7a:	58d4      	ldr	r4, [r2, r3]
 8003a7c:	50c4      	str	r4, [r0, r3]
 8003a7e:	3304      	adds	r3, #4

08003a80 <LoopCopyDataInit>:
 8003a80:	18c4      	adds	r4, r0, r3
 8003a82:	428c      	cmp	r4, r1
 8003a84:	d3f9      	bcc.n	8003a7a <CopyDataInit>
 8003a86:	4a0a      	ldr	r2, [pc, #40]	; (8003ab0 <LoopFillZerobss+0x1e>)
 8003a88:	4c0a      	ldr	r4, [pc, #40]	; (8003ab4 <LoopFillZerobss+0x22>)
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e001      	b.n	8003a92 <LoopFillZerobss>

08003a8e <FillZerobss>:
 8003a8e:	6013      	str	r3, [r2, #0]
 8003a90:	3204      	adds	r2, #4

08003a92 <LoopFillZerobss>:
 8003a92:	42a2      	cmp	r2, r4
 8003a94:	d3fb      	bcc.n	8003a8e <FillZerobss>
 8003a96:	f012 fbf7 	bl	8016288 <__libc_init_array>
 8003a9a:	f7fd fa03 	bl	8000ea4 <main>
 8003a9e:	4770      	bx	lr
 8003aa0:	24080000 	.word	0x24080000
 8003aa4:	24000000 	.word	0x24000000
 8003aa8:	24000108 	.word	0x24000108
 8003aac:	08017154 	.word	0x08017154
 8003ab0:	24000120 	.word	0x24000120
 8003ab4:	24005a6c 	.word	0x24005a6c

08003ab8 <ADC3_IRQHandler>:
 8003ab8:	e7fe      	b.n	8003ab8 <ADC3_IRQHandler>
	...

08003abc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ac2:	2003      	movs	r0, #3
 8003ac4:	f001 fd39 	bl	800553a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ac8:	f006 fdf4 	bl	800a6b4 <HAL_RCC_GetSysClockFreq>
 8003acc:	4602      	mov	r2, r0
 8003ace:	4b15      	ldr	r3, [pc, #84]	; (8003b24 <HAL_Init+0x68>)
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	0a1b      	lsrs	r3, r3, #8
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	4913      	ldr	r1, [pc, #76]	; (8003b28 <HAL_Init+0x6c>)
 8003ada:	5ccb      	ldrb	r3, [r1, r3]
 8003adc:	f003 031f 	and.w	r3, r3, #31
 8003ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ae6:	4b0f      	ldr	r3, [pc, #60]	; (8003b24 <HAL_Init+0x68>)
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <HAL_Init+0x6c>)
 8003af0:	5cd3      	ldrb	r3, [r2, r3]
 8003af2:	f003 031f 	and.w	r3, r3, #31
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	fa22 f303 	lsr.w	r3, r2, r3
 8003afc:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <HAL_Init+0x70>)
 8003afe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003b00:	4a0b      	ldr	r2, [pc, #44]	; (8003b30 <HAL_Init+0x74>)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003b06:	2005      	movs	r0, #5
 8003b08:	f7ff fd56 	bl	80035b8 <HAL_InitTick>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e002      	b.n	8003b1c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003b16:	f7ff f8a9 	bl	8002c6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b1a:	2300      	movs	r3, #0
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	3708      	adds	r7, #8
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	58024400 	.word	0x58024400
 8003b28:	080170a0 	.word	0x080170a0
 8003b2c:	24000094 	.word	0x24000094
 8003b30:	24000090 	.word	0x24000090

08003b34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003b38:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <HAL_IncTick+0x20>)
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b06      	ldr	r3, [pc, #24]	; (8003b58 <HAL_IncTick+0x24>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4413      	add	r3, r2
 8003b44:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <HAL_IncTick+0x24>)
 8003b46:	6013      	str	r3, [r2, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr
 8003b52:	bf00      	nop
 8003b54:	2400009c 	.word	0x2400009c
 8003b58:	24001108 	.word	0x24001108

08003b5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return uwTick;
 8003b60:	4b03      	ldr	r3, [pc, #12]	; (8003b70 <HAL_GetTick+0x14>)
 8003b62:	681b      	ldr	r3, [r3, #0]
}
 8003b64:	4618      	mov	r0, r3
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	24001108 	.word	0x24001108

08003b74 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003b78:	4b03      	ldr	r3, [pc, #12]	; (8003b88 <HAL_GetREVID+0x14>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	0c1b      	lsrs	r3, r3, #16
}
 8003b7e:	4618      	mov	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	5c001000 	.word	0x5c001000

08003b8c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003b96:	4b07      	ldr	r3, [pc, #28]	; (8003bb4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	43db      	mvns	r3, r3
 8003b9e:	401a      	ands	r2, r3
 8003ba0:	4904      	ldr	r1, [pc, #16]	; (8003bb4 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	604b      	str	r3, [r1, #4]
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr
 8003bb4:	58000400 	.word	0x58000400

08003bb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	689b      	ldr	r3, [r3, #8]
 8003bc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	609a      	str	r2, [r3, #8]
}
 8003bd2:	bf00      	nop
 8003bd4:	370c      	adds	r7, #12
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr

08003bde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
 8003be6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	431a      	orrs	r2, r3
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	609a      	str	r2, [r3, #8]
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	370c      	adds	r7, #12
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr

08003c20 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b087      	sub	sp, #28
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	60f8      	str	r0, [r7, #12]
 8003c28:	60b9      	str	r1, [r7, #8]
 8003c2a:	607a      	str	r2, [r7, #4]
 8003c2c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	3360      	adds	r3, #96	; 0x60
 8003c32:	461a      	mov	r2, r3
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003c54:	bf00      	nop
 8003c56:	371c      	adds	r7, #28
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b085      	sub	sp, #20
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	60f8      	str	r0, [r7, #12]
 8003c68:	60b9      	str	r1, [r7, #8]
 8003c6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	691b      	ldr	r3, [r3, #16]
 8003c70:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	431a      	orrs	r2, r3
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	611a      	str	r2, [r3, #16]
}
 8003c86:	bf00      	nop
 8003c88:	3714      	adds	r7, #20
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr

08003c92 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003c92:	b480      	push	{r7}
 8003c94:	b087      	sub	sp, #28
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	60f8      	str	r0, [r7, #12]
 8003c9a:	60b9      	str	r1, [r7, #8]
 8003c9c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3360      	adds	r3, #96	; 0x60
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	4413      	add	r3, r2
 8003caa:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	431a      	orrs	r2, r3
 8003cb8:	697b      	ldr	r3, [r7, #20]
 8003cba:	601a      	str	r2, [r3, #0]
  }
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr

08003cc8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	68db      	ldr	r3, [r3, #12]
 8003cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d101      	bne.n	8003ce0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e000      	b.n	8003ce2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	370c      	adds	r7, #12
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr

08003cee <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003cee:	b480      	push	{r7}
 8003cf0:	b087      	sub	sp, #28
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3330      	adds	r3, #48	; 0x30
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	0a1b      	lsrs	r3, r3, #8
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	f003 030c 	and.w	r3, r3, #12
 8003d0a:	4413      	add	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f003 031f 	and.w	r3, r3, #31
 8003d18:	211f      	movs	r1, #31
 8003d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d1e:	43db      	mvns	r3, r3
 8003d20:	401a      	ands	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	0e9b      	lsrs	r3, r3, #26
 8003d26:	f003 011f 	and.w	r1, r3, #31
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
 8003d30:	fa01 f303 	lsl.w	r3, r1, r3
 8003d34:	431a      	orrs	r2, r3
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003d3a:	bf00      	nop
 8003d3c:	371c      	adds	r7, #28
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr

08003d46 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
 8003d4e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f023 0203 	bic.w	r2, r3, #3
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	431a      	orrs	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	60da      	str	r2, [r3, #12]
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3314      	adds	r3, #20
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	0e5b      	lsrs	r3, r3, #25
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	f003 0304 	and.w	r3, r3, #4
 8003d88:	4413      	add	r3, r2
 8003d8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	0d1b      	lsrs	r3, r3, #20
 8003d94:	f003 031f 	and.w	r3, r3, #31
 8003d98:	2107      	movs	r1, #7
 8003d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d9e:	43db      	mvns	r3, r3
 8003da0:	401a      	ands	r2, r3
 8003da2:	68bb      	ldr	r3, [r7, #8]
 8003da4:	0d1b      	lsrs	r3, r3, #20
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	fa01 f303 	lsl.w	r3, r1, r3
 8003db0:	431a      	orrs	r2, r3
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003db6:	bf00      	nop
 8003db8:	371c      	adds	r7, #28
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
	...

08003dc4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b085      	sub	sp, #20
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003ddc:	43db      	mvns	r3, r3
 8003dde:	401a      	ands	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0318 	and.w	r3, r3, #24
 8003de6:	4908      	ldr	r1, [pc, #32]	; (8003e08 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003de8:	40d9      	lsrs	r1, r3
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	400b      	ands	r3, r1
 8003dee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003df2:	431a      	orrs	r2, r3
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003dfa:	bf00      	nop
 8003dfc:	3714      	adds	r7, #20
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	000fffff 	.word	0x000fffff

08003e0c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	689b      	ldr	r3, [r3, #8]
 8003e18:	f003 031f 	and.w	r3, r3, #31
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	370c      	adds	r7, #12
 8003e20:	46bd      	mov	sp, r7
 8003e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e26:	4770      	bx	lr

08003e28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	4b04      	ldr	r3, [pc, #16]	; (8003e48 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003e36:	4013      	ands	r3, r2
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	6093      	str	r3, [r2, #8]
}
 8003e3c:	bf00      	nop
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr
 8003e48:	5fffffc0 	.word	0x5fffffc0

08003e4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <LL_ADC_EnableInternalRegulator+0x24>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	6fffffc0 	.word	0x6fffffc0

08003e9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003eb0:	d101      	bne.n	8003eb6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e000      	b.n	8003eb8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr

08003ec4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	689a      	ldr	r2, [r3, #8]
 8003ed0:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <LL_ADC_Enable+0x24>)
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	f043 0201 	orr.w	r2, r3, #1
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr
 8003ee8:	7fffffc0 	.word	0x7fffffc0

08003eec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	4b05      	ldr	r3, [pc, #20]	; (8003f10 <LL_ADC_Disable+0x24>)
 8003efa:	4013      	ands	r3, r2
 8003efc:	f043 0202 	orr.w	r2, r3, #2
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr
 8003f10:	7fffffc0 	.word	0x7fffffc0

08003f14 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <LL_ADC_IsEnabled+0x18>
 8003f28:	2301      	movs	r3, #1
 8003f2a:	e000      	b.n	8003f2e <LL_ADC_IsEnabled+0x1a>
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	370c      	adds	r7, #12
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003f3a:	b480      	push	{r7}
 8003f3c:	b083      	sub	sp, #12
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f003 0302 	and.w	r3, r3, #2
 8003f4a:	2b02      	cmp	r3, #2
 8003f4c:	d101      	bne.n	8003f52 <LL_ADC_IsDisableOngoing+0x18>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e000      	b.n	8003f54 <LL_ADC_IsDisableOngoing+0x1a>
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr

08003f60 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b083      	sub	sp, #12
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	4b05      	ldr	r3, [pc, #20]	; (8003f84 <LL_ADC_REG_StartConversion+0x24>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	f043 0204 	orr.w	r2, r3, #4
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	7fffffc0 	.word	0x7fffffc0

08003f88 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	f003 0304 	and.w	r3, r3, #4
 8003f98:	2b04      	cmp	r3, #4
 8003f9a:	d101      	bne.n	8003fa0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e000      	b.n	8003fa2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d101      	bne.n	8003fc6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003fc6:	2300      	movs	r3, #0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003fd4:	b590      	push	{r4, r7, lr}
 8003fd6:	b089      	sub	sp, #36	; 0x24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003fdc:	2300      	movs	r3, #0
 8003fde:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e18f      	b.n	800430e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d109      	bne.n	8004010 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ffc:	6878      	ldr	r0, [r7, #4]
 8003ffe:	f7fe fe53 	bl	8002ca8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2200      	movs	r2, #0
 8004006:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7ff ff19 	bl	8003e4c <LL_ADC_IsDeepPowerDownEnabled>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d004      	beq.n	800402a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4618      	mov	r0, r3
 8004026:	f7ff feff 	bl	8003e28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4618      	mov	r0, r3
 8004030:	f7ff ff34 	bl	8003e9c <LL_ADC_IsInternalRegulatorEnabled>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d114      	bne.n	8004064 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff18 	bl	8003e74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004044:	4b87      	ldr	r3, [pc, #540]	; (8004264 <HAL_ADC_Init+0x290>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	099b      	lsrs	r3, r3, #6
 800404a:	4a87      	ldr	r2, [pc, #540]	; (8004268 <HAL_ADC_Init+0x294>)
 800404c:	fba2 2303 	umull	r2, r3, r2, r3
 8004050:	099b      	lsrs	r3, r3, #6
 8004052:	3301      	adds	r3, #1
 8004054:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004056:	e002      	b.n	800405e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004058:	68bb      	ldr	r3, [r7, #8]
 800405a:	3b01      	subs	r3, #1
 800405c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1f9      	bne.n	8004058 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff ff17 	bl	8003e9c <LL_ADC_IsInternalRegulatorEnabled>
 800406e:	4603      	mov	r3, r0
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10d      	bne.n	8004090 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004078:	f043 0210 	orr.w	r2, r3, #16
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004084:	f043 0201 	orr.w	r2, r3, #1
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7ff ff77 	bl	8003f88 <LL_ADC_REG_IsConversionOngoing>
 800409a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	f040 8129 	bne.w	80042fc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f040 8125 	bne.w	80042fc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80040ba:	f043 0202 	orr.w	r2, r3, #2
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7ff ff24 	bl	8003f14 <LL_ADC_IsEnabled>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d136      	bne.n	8004140 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a65      	ldr	r2, [pc, #404]	; (800426c <HAL_ADC_Init+0x298>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d004      	beq.n	80040e6 <HAL_ADC_Init+0x112>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a63      	ldr	r2, [pc, #396]	; (8004270 <HAL_ADC_Init+0x29c>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d10e      	bne.n	8004104 <HAL_ADC_Init+0x130>
 80040e6:	4861      	ldr	r0, [pc, #388]	; (800426c <HAL_ADC_Init+0x298>)
 80040e8:	f7ff ff14 	bl	8003f14 <LL_ADC_IsEnabled>
 80040ec:	4604      	mov	r4, r0
 80040ee:	4860      	ldr	r0, [pc, #384]	; (8004270 <HAL_ADC_Init+0x29c>)
 80040f0:	f7ff ff10 	bl	8003f14 <LL_ADC_IsEnabled>
 80040f4:	4603      	mov	r3, r0
 80040f6:	4323      	orrs	r3, r4
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	bf0c      	ite	eq
 80040fc:	2301      	moveq	r3, #1
 80040fe:	2300      	movne	r3, #0
 8004100:	b2db      	uxtb	r3, r3
 8004102:	e008      	b.n	8004116 <HAL_ADC_Init+0x142>
 8004104:	485b      	ldr	r0, [pc, #364]	; (8004274 <HAL_ADC_Init+0x2a0>)
 8004106:	f7ff ff05 	bl	8003f14 <LL_ADC_IsEnabled>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	bf0c      	ite	eq
 8004110:	2301      	moveq	r3, #1
 8004112:	2300      	movne	r3, #0
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d012      	beq.n	8004140 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a53      	ldr	r2, [pc, #332]	; (800426c <HAL_ADC_Init+0x298>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d004      	beq.n	800412e <HAL_ADC_Init+0x15a>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a51      	ldr	r2, [pc, #324]	; (8004270 <HAL_ADC_Init+0x29c>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d101      	bne.n	8004132 <HAL_ADC_Init+0x15e>
 800412e:	4a52      	ldr	r2, [pc, #328]	; (8004278 <HAL_ADC_Init+0x2a4>)
 8004130:	e000      	b.n	8004134 <HAL_ADC_Init+0x160>
 8004132:	4a52      	ldr	r2, [pc, #328]	; (800427c <HAL_ADC_Init+0x2a8>)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	4619      	mov	r1, r3
 800413a:	4610      	mov	r0, r2
 800413c:	f7ff fd3c 	bl	8003bb8 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004140:	f7ff fd18 	bl	8003b74 <HAL_GetREVID>
 8004144:	4603      	mov	r3, r0
 8004146:	f241 0203 	movw	r2, #4099	; 0x1003
 800414a:	4293      	cmp	r3, r2
 800414c:	d914      	bls.n	8004178 <HAL_ADC_Init+0x1a4>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b10      	cmp	r3, #16
 8004154:	d110      	bne.n	8004178 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	7d5b      	ldrb	r3, [r3, #21]
 800415a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004160:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004166:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	7f1b      	ldrb	r3, [r3, #28]
 800416c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800416e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004170:	f043 030c 	orr.w	r3, r3, #12
 8004174:	61bb      	str	r3, [r7, #24]
 8004176:	e00d      	b.n	8004194 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	7d5b      	ldrb	r3, [r3, #21]
 800417c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004182:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004188:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	7f1b      	ldrb	r3, [r3, #28]
 800418e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	7f1b      	ldrb	r3, [r3, #28]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d106      	bne.n	80041aa <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	045b      	lsls	r3, r3, #17
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d009      	beq.n	80041c6 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b6:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041be:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	4b2c      	ldr	r3, [pc, #176]	; (8004280 <HAL_ADC_Init+0x2ac>)
 80041ce:	4013      	ands	r3, r2
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	6812      	ldr	r2, [r2, #0]
 80041d4:	69b9      	ldr	r1, [r7, #24]
 80041d6:	430b      	orrs	r3, r1
 80041d8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff fed2 	bl	8003f88 <LL_ADC_REG_IsConversionOngoing>
 80041e4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f7ff fedf 	bl	8003fae <LL_ADC_INJ_IsConversionOngoing>
 80041f0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d15f      	bne.n	80042b8 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d15c      	bne.n	80042b8 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	7d1b      	ldrb	r3, [r3, #20]
 8004202:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8004208:	4313      	orrs	r3, r2
 800420a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	4b1c      	ldr	r3, [pc, #112]	; (8004284 <HAL_ADC_Init+0x2b0>)
 8004214:	4013      	ands	r3, r2
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	6812      	ldr	r2, [r2, #0]
 800421a:	69b9      	ldr	r1, [r7, #24]
 800421c:	430b      	orrs	r3, r1
 800421e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004226:	2b01      	cmp	r3, #1
 8004228:	d130      	bne.n	800428c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691a      	ldr	r2, [r3, #16]
 8004236:	4b14      	ldr	r3, [pc, #80]	; (8004288 <HAL_ADC_Init+0x2b4>)
 8004238:	4013      	ands	r3, r2
 800423a:	687a      	ldr	r2, [r7, #4]
 800423c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800423e:	3a01      	subs	r2, #1
 8004240:	0411      	lsls	r1, r2, #16
 8004242:	687a      	ldr	r2, [r7, #4]
 8004244:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004246:	4311      	orrs	r1, r2
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800424c:	4311      	orrs	r1, r2
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004252:	430a      	orrs	r2, r1
 8004254:	431a      	orrs	r2, r3
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	611a      	str	r2, [r3, #16]
 8004260:	e01c      	b.n	800429c <HAL_ADC_Init+0x2c8>
 8004262:	bf00      	nop
 8004264:	24000090 	.word	0x24000090
 8004268:	053e2d63 	.word	0x053e2d63
 800426c:	40022000 	.word	0x40022000
 8004270:	40022100 	.word	0x40022100
 8004274:	58026000 	.word	0x58026000
 8004278:	40022300 	.word	0x40022300
 800427c:	58026300 	.word	0x58026300
 8004280:	fff0c003 	.word	0xfff0c003
 8004284:	ffffbffc 	.word	0xffffbffc
 8004288:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f022 0201 	bic.w	r2, r2, #1
 800429a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	430a      	orrs	r2, r1
 80042b0:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fdec 	bl	8004e90 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d10c      	bne.n	80042da <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042c6:	f023 010f 	bic.w	r1, r3, #15
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	1e5a      	subs	r2, r3, #1
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	430a      	orrs	r2, r1
 80042d6:	631a      	str	r2, [r3, #48]	; 0x30
 80042d8:	e007      	b.n	80042ea <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 020f 	bic.w	r2, r2, #15
 80042e8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	f043 0201 	orr.w	r2, r3, #1
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
 80042fa:	e007      	b.n	800430c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f043 0210 	orr.w	r2, r3, #16
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800430c:	7ffb      	ldrb	r3, [r7, #31]
}
 800430e:	4618      	mov	r0, r3
 8004310:	3724      	adds	r7, #36	; 0x24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd90      	pop	{r4, r7, pc}
 8004316:	bf00      	nop

08004318 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a55      	ldr	r2, [pc, #340]	; (8004480 <HAL_ADC_Start_DMA+0x168>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d004      	beq.n	8004338 <HAL_ADC_Start_DMA+0x20>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a54      	ldr	r2, [pc, #336]	; (8004484 <HAL_ADC_Start_DMA+0x16c>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d101      	bne.n	800433c <HAL_ADC_Start_DMA+0x24>
 8004338:	4b53      	ldr	r3, [pc, #332]	; (8004488 <HAL_ADC_Start_DMA+0x170>)
 800433a:	e000      	b.n	800433e <HAL_ADC_Start_DMA+0x26>
 800433c:	4b53      	ldr	r3, [pc, #332]	; (800448c <HAL_ADC_Start_DMA+0x174>)
 800433e:	4618      	mov	r0, r3
 8004340:	f7ff fd64 	bl	8003e0c <LL_ADC_GetMultimode>
 8004344:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4618      	mov	r0, r3
 800434c:	f7ff fe1c 	bl	8003f88 <LL_ADC_REG_IsConversionOngoing>
 8004350:	4603      	mov	r3, r0
 8004352:	2b00      	cmp	r3, #0
 8004354:	f040 808c 	bne.w	8004470 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800435e:	2b01      	cmp	r3, #1
 8004360:	d101      	bne.n	8004366 <HAL_ADC_Start_DMA+0x4e>
 8004362:	2302      	movs	r3, #2
 8004364:	e087      	b.n	8004476 <HAL_ADC_Start_DMA+0x15e>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d005      	beq.n	8004380 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	2b05      	cmp	r3, #5
 8004378:	d002      	beq.n	8004380 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	2b09      	cmp	r3, #9
 800437e:	d170      	bne.n	8004462 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004380:	68f8      	ldr	r0, [r7, #12]
 8004382:	f000 fc07 	bl	8004b94 <ADC_Enable>
 8004386:	4603      	mov	r3, r0
 8004388:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800438a:	7dfb      	ldrb	r3, [r7, #23]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d163      	bne.n	8004458 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004394:	4b3e      	ldr	r3, [pc, #248]	; (8004490 <HAL_ADC_Start_DMA+0x178>)
 8004396:	4013      	ands	r3, r2
 8004398:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a37      	ldr	r2, [pc, #220]	; (8004484 <HAL_ADC_Start_DMA+0x16c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d002      	beq.n	80043b0 <HAL_ADC_Start_DMA+0x98>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	e000      	b.n	80043b2 <HAL_ADC_Start_DMA+0x9a>
 80043b0:	4b33      	ldr	r3, [pc, #204]	; (8004480 <HAL_ADC_Start_DMA+0x168>)
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	6812      	ldr	r2, [r2, #0]
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d002      	beq.n	80043c0 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d105      	bne.n	80043cc <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043c4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d006      	beq.n	80043e6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	f023 0206 	bic.w	r2, r3, #6
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	659a      	str	r2, [r3, #88]	; 0x58
 80043e4:	e002      	b.n	80043ec <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f0:	4a28      	ldr	r2, [pc, #160]	; (8004494 <HAL_ADC_Start_DMA+0x17c>)
 80043f2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043f8:	4a27      	ldr	r2, [pc, #156]	; (8004498 <HAL_ADC_Start_DMA+0x180>)
 80043fa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004400:	4a26      	ldr	r2, [pc, #152]	; (800449c <HAL_ADC_Start_DMA+0x184>)
 8004402:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	221c      	movs	r2, #28
 800440a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	685a      	ldr	r2, [r3, #4]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f042 0210 	orr.w	r2, r2, #16
 8004422:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	4619      	mov	r1, r3
 800442e:	4610      	mov	r0, r2
 8004430:	f7ff fc89 	bl	8003d46 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	3340      	adds	r3, #64	; 0x40
 800443e:	4619      	mov	r1, r3
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f002 f80e 	bl	8006464 <HAL_DMA_Start_IT>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4618      	mov	r0, r3
 8004452:	f7ff fd85 	bl	8003f60 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004456:	e00d      	b.n	8004474 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004460:	e008      	b.n	8004474 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800446e:	e001      	b.n	8004474 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004470:	2302      	movs	r3, #2
 8004472:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004474:	7dfb      	ldrb	r3, [r7, #23]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	40022000 	.word	0x40022000
 8004484:	40022100 	.word	0x40022100
 8004488:	40022300 	.word	0x40022300
 800448c:	58026300 	.word	0x58026300
 8004490:	fffff0fe 	.word	0xfffff0fe
 8004494:	08004d67 	.word	0x08004d67
 8004498:	08004e3f 	.word	0x08004e3f
 800449c:	08004e5b 	.word	0x08004e5b

080044a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80044bc:	bf00      	nop
 80044be:	370c      	adds	r7, #12
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr

080044c8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80044c8:	b480      	push	{r7}
 80044ca:	b083      	sub	sp, #12
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044da:	4770      	bx	lr

080044dc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80044dc:	b590      	push	{r4, r7, lr}
 80044de:	b0a1      	sub	sp, #132	; 0x84
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80044e6:	2300      	movs	r3, #0
 80044e8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80044ec:	2300      	movs	r3, #0
 80044ee:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	4a65      	ldr	r2, [pc, #404]	; (800468c <HAL_ADC_ConfigChannel+0x1b0>)
 80044f6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d101      	bne.n	8004506 <HAL_ADC_ConfigChannel+0x2a>
 8004502:	2302      	movs	r3, #2
 8004504:	e32e      	b.n	8004b64 <HAL_ADC_ConfigChannel+0x688>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2201      	movs	r2, #1
 800450a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7ff fd38 	bl	8003f88 <LL_ADC_REG_IsConversionOngoing>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	f040 8313 	bne.w	8004b46 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	2b00      	cmp	r3, #0
 8004526:	db2c      	blt.n	8004582 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004530:	2b00      	cmp	r3, #0
 8004532:	d108      	bne.n	8004546 <HAL_ADC_ConfigChannel+0x6a>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	0e9b      	lsrs	r3, r3, #26
 800453a:	f003 031f 	and.w	r3, r3, #31
 800453e:	2201      	movs	r2, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	e016      	b.n	8004574 <HAL_ADC_ConfigChannel+0x98>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800454c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800454e:	fa93 f3a3 	rbit	r3, r3
 8004552:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004554:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004556:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004558:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800455e:	2320      	movs	r3, #32
 8004560:	e003      	b.n	800456a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004562:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004564:	fab3 f383 	clz	r3, r3
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 031f 	and.w	r3, r3, #31
 800456e:	2201      	movs	r2, #1
 8004570:	fa02 f303 	lsl.w	r3, r2, r3
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6812      	ldr	r2, [r2, #0]
 8004578:	69d1      	ldr	r1, [r2, #28]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	430b      	orrs	r3, r1
 8004580:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6818      	ldr	r0, [r3, #0]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	6859      	ldr	r1, [r3, #4]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7ff fbad 	bl	8003cee <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7ff fcf5 	bl	8003f88 <LL_ADC_REG_IsConversionOngoing>
 800459e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff fd02 	bl	8003fae <LL_ADC_INJ_IsConversionOngoing>
 80045aa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80045ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	f040 80b8 	bne.w	8004724 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80045b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f040 80b4 	bne.w	8004724 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6818      	ldr	r0, [r3, #0]
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	6819      	ldr	r1, [r3, #0]
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	461a      	mov	r2, r3
 80045ca:	f7ff fbcf 	bl	8003d6c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80045ce:	4b30      	ldr	r3, [pc, #192]	; (8004690 <HAL_ADC_ConfigChannel+0x1b4>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80045d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80045da:	d10b      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x118>
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	089b      	lsrs	r3, r3, #2
 80045e8:	f003 0307 	and.w	r3, r3, #7
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fa02 f303 	lsl.w	r3, r2, r3
 80045f2:	e01d      	b.n	8004630 <HAL_ADC_ConfigChannel+0x154>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	68db      	ldr	r3, [r3, #12]
 80045fa:	f003 0310 	and.w	r3, r3, #16
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <HAL_ADC_ConfigChannel+0x13e>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	695a      	ldr	r2, [r3, #20]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	089b      	lsrs	r3, r3, #2
 800460e:	f003 0307 	and.w	r3, r3, #7
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fa02 f303 	lsl.w	r3, r2, r3
 8004618:	e00a      	b.n	8004630 <HAL_ADC_ConfigChannel+0x154>
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695a      	ldr	r2, [r3, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	089b      	lsrs	r3, r3, #2
 8004626:	f003 0304 	and.w	r3, r3, #4
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b04      	cmp	r3, #4
 8004638:	d02c      	beq.n	8004694 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	6919      	ldr	r1, [r3, #16]
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004648:	f7ff faea 	bl	8003c20 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6818      	ldr	r0, [r3, #0]
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	6919      	ldr	r1, [r3, #16]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	7e5b      	ldrb	r3, [r3, #25]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d102      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x186>
 800465c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004660:	e000      	b.n	8004664 <HAL_ADC_ConfigChannel+0x188>
 8004662:	2300      	movs	r3, #0
 8004664:	461a      	mov	r2, r3
 8004666:	f7ff fb14 	bl	8003c92 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6818      	ldr	r0, [r3, #0]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	6919      	ldr	r1, [r3, #16]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	7e1b      	ldrb	r3, [r3, #24]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d102      	bne.n	8004680 <HAL_ADC_ConfigChannel+0x1a4>
 800467a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800467e:	e000      	b.n	8004682 <HAL_ADC_ConfigChannel+0x1a6>
 8004680:	2300      	movs	r3, #0
 8004682:	461a      	mov	r2, r3
 8004684:	f7ff faec 	bl	8003c60 <LL_ADC_SetDataRightShift>
 8004688:	e04c      	b.n	8004724 <HAL_ADC_ConfigChannel+0x248>
 800468a:	bf00      	nop
 800468c:	47ff0000 	.word	0x47ff0000
 8004690:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800469a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	069b      	lsls	r3, r3, #26
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d107      	bne.n	80046b8 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046b6:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80046be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	069b      	lsls	r3, r3, #26
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d107      	bne.n	80046dc <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046da:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	069b      	lsls	r3, r3, #26
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d107      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80046fe:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004706:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	069b      	lsls	r3, r3, #26
 8004710:	429a      	cmp	r2, r3
 8004712:	d107      	bne.n	8004724 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004722:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f7ff fbf3 	bl	8003f14 <LL_ADC_IsEnabled>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	f040 8211 	bne.w	8004b58 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6818      	ldr	r0, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	6819      	ldr	r1, [r3, #0]
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	461a      	mov	r2, r3
 8004744:	f7ff fb3e 	bl	8003dc4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	4aa1      	ldr	r2, [pc, #644]	; (80049d4 <HAL_ADC_ConfigChannel+0x4f8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	f040 812e 	bne.w	80049b0 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10b      	bne.n	800477c <HAL_ADC_ConfigChannel+0x2a0>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	0e9b      	lsrs	r3, r3, #26
 800476a:	3301      	adds	r3, #1
 800476c:	f003 031f 	and.w	r3, r3, #31
 8004770:	2b09      	cmp	r3, #9
 8004772:	bf94      	ite	ls
 8004774:	2301      	movls	r3, #1
 8004776:	2300      	movhi	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e019      	b.n	80047b0 <HAL_ADC_ConfigChannel+0x2d4>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004782:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004784:	fa93 f3a3 	rbit	r3, r3
 8004788:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800478a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800478c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800478e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004794:	2320      	movs	r3, #32
 8004796:	e003      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004798:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	3301      	adds	r3, #1
 80047a2:	f003 031f 	and.w	r3, r3, #31
 80047a6:	2b09      	cmp	r3, #9
 80047a8:	bf94      	ite	ls
 80047aa:	2301      	movls	r3, #1
 80047ac:	2300      	movhi	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d079      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d107      	bne.n	80047d0 <HAL_ADC_ConfigChannel+0x2f4>
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	0e9b      	lsrs	r3, r3, #26
 80047c6:	3301      	adds	r3, #1
 80047c8:	069b      	lsls	r3, r3, #26
 80047ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047ce:	e015      	b.n	80047fc <HAL_ADC_ConfigChannel+0x320>
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047d8:	fa93 f3a3 	rbit	r3, r3
 80047dc:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80047de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047e0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80047e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80047e8:	2320      	movs	r3, #32
 80047ea:	e003      	b.n	80047f4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80047ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047ee:	fab3 f383 	clz	r3, r3
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	3301      	adds	r3, #1
 80047f6:	069b      	lsls	r3, r3, #26
 80047f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004804:	2b00      	cmp	r3, #0
 8004806:	d109      	bne.n	800481c <HAL_ADC_ConfigChannel+0x340>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	0e9b      	lsrs	r3, r3, #26
 800480e:	3301      	adds	r3, #1
 8004810:	f003 031f 	and.w	r3, r3, #31
 8004814:	2101      	movs	r1, #1
 8004816:	fa01 f303 	lsl.w	r3, r1, r3
 800481a:	e017      	b.n	800484c <HAL_ADC_ConfigChannel+0x370>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800482a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800482e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004834:	2320      	movs	r3, #32
 8004836:	e003      	b.n	8004840 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004838:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	f003 031f 	and.w	r3, r3, #31
 8004846:	2101      	movs	r1, #1
 8004848:	fa01 f303 	lsl.w	r3, r1, r3
 800484c:	ea42 0103 	orr.w	r1, r2, r3
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <HAL_ADC_ConfigChannel+0x396>
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	0e9b      	lsrs	r3, r3, #26
 8004862:	3301      	adds	r3, #1
 8004864:	f003 021f 	and.w	r2, r3, #31
 8004868:	4613      	mov	r3, r2
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	4413      	add	r3, r2
 800486e:	051b      	lsls	r3, r3, #20
 8004870:	e018      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x3c8>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800487a:	fa93 f3a3 	rbit	r3, r3
 800487e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004882:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004886:	2b00      	cmp	r3, #0
 8004888:	d101      	bne.n	800488e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800488a:	2320      	movs	r3, #32
 800488c:	e003      	b.n	8004896 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800488e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004890:	fab3 f383 	clz	r3, r3
 8004894:	b2db      	uxtb	r3, r3
 8004896:	3301      	adds	r3, #1
 8004898:	f003 021f 	and.w	r2, r3, #31
 800489c:	4613      	mov	r3, r2
 800489e:	005b      	lsls	r3, r3, #1
 80048a0:	4413      	add	r3, r2
 80048a2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048a4:	430b      	orrs	r3, r1
 80048a6:	e07e      	b.n	80049a6 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <HAL_ADC_ConfigChannel+0x3e8>
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	0e9b      	lsrs	r3, r3, #26
 80048ba:	3301      	adds	r3, #1
 80048bc:	069b      	lsls	r3, r3, #26
 80048be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048c2:	e015      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x414>
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048cc:	fa93 f3a3 	rbit	r3, r3
 80048d0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80048d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80048d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80048dc:	2320      	movs	r3, #32
 80048de:	e003      	b.n	80048e8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80048e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048e2:	fab3 f383 	clz	r3, r3
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	3301      	adds	r3, #1
 80048ea:	069b      	lsls	r3, r3, #26
 80048ec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d109      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x434>
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	0e9b      	lsrs	r3, r3, #26
 8004902:	3301      	adds	r3, #1
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	2101      	movs	r1, #1
 800490a:	fa01 f303 	lsl.w	r3, r1, r3
 800490e:	e017      	b.n	8004940 <HAL_ADC_ConfigChannel+0x464>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	61bb      	str	r3, [r7, #24]
  return result;
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004922:	6a3b      	ldr	r3, [r7, #32]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 8004928:	2320      	movs	r3, #32
 800492a:	e003      	b.n	8004934 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	fab3 f383 	clz	r3, r3
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3301      	adds	r3, #1
 8004936:	f003 031f 	and.w	r3, r3, #31
 800493a:	2101      	movs	r1, #1
 800493c:	fa01 f303 	lsl.w	r3, r1, r3
 8004940:	ea42 0103 	orr.w	r1, r2, r3
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10d      	bne.n	800496c <HAL_ADC_ConfigChannel+0x490>
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	0e9b      	lsrs	r3, r3, #26
 8004956:	3301      	adds	r3, #1
 8004958:	f003 021f 	and.w	r2, r3, #31
 800495c:	4613      	mov	r3, r2
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	4413      	add	r3, r2
 8004962:	3b1e      	subs	r3, #30
 8004964:	051b      	lsls	r3, r3, #20
 8004966:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800496a:	e01b      	b.n	80049a4 <HAL_ADC_ConfigChannel+0x4c8>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	fa93 f3a3 	rbit	r3, r3
 8004978:	60fb      	str	r3, [r7, #12]
  return result;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d101      	bne.n	8004988 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004984:	2320      	movs	r3, #32
 8004986:	e003      	b.n	8004990 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	fab3 f383 	clz	r3, r3
 800498e:	b2db      	uxtb	r3, r3
 8004990:	3301      	adds	r3, #1
 8004992:	f003 021f 	and.w	r2, r3, #31
 8004996:	4613      	mov	r3, r2
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	4413      	add	r3, r2
 800499c:	3b1e      	subs	r3, #30
 800499e:	051b      	lsls	r3, r3, #20
 80049a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a4:	430b      	orrs	r3, r1
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	6892      	ldr	r2, [r2, #8]
 80049aa:	4619      	mov	r1, r3
 80049ac:	f7ff f9de 	bl	8003d6c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	f280 80cf 	bge.w	8004b58 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a06      	ldr	r2, [pc, #24]	; (80049d8 <HAL_ADC_ConfigChannel+0x4fc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <HAL_ADC_ConfigChannel+0x4f2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a04      	ldr	r2, [pc, #16]	; (80049dc <HAL_ADC_ConfigChannel+0x500>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d10a      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x508>
 80049ce:	4b04      	ldr	r3, [pc, #16]	; (80049e0 <HAL_ADC_ConfigChannel+0x504>)
 80049d0:	e009      	b.n	80049e6 <HAL_ADC_ConfigChannel+0x50a>
 80049d2:	bf00      	nop
 80049d4:	47ff0000 	.word	0x47ff0000
 80049d8:	40022000 	.word	0x40022000
 80049dc:	40022100 	.word	0x40022100
 80049e0:	40022300 	.word	0x40022300
 80049e4:	4b61      	ldr	r3, [pc, #388]	; (8004b6c <HAL_ADC_ConfigChannel+0x690>)
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7ff f90c 	bl	8003c04 <LL_ADC_GetCommonPathInternalCh>
 80049ec:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	4a5f      	ldr	r2, [pc, #380]	; (8004b70 <HAL_ADC_ConfigChannel+0x694>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d004      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x526>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a5d      	ldr	r2, [pc, #372]	; (8004b74 <HAL_ADC_ConfigChannel+0x698>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d10e      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x544>
 8004a02:	485b      	ldr	r0, [pc, #364]	; (8004b70 <HAL_ADC_ConfigChannel+0x694>)
 8004a04:	f7ff fa86 	bl	8003f14 <LL_ADC_IsEnabled>
 8004a08:	4604      	mov	r4, r0
 8004a0a:	485a      	ldr	r0, [pc, #360]	; (8004b74 <HAL_ADC_ConfigChannel+0x698>)
 8004a0c:	f7ff fa82 	bl	8003f14 <LL_ADC_IsEnabled>
 8004a10:	4603      	mov	r3, r0
 8004a12:	4323      	orrs	r3, r4
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	bf0c      	ite	eq
 8004a18:	2301      	moveq	r3, #1
 8004a1a:	2300      	movne	r3, #0
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	e008      	b.n	8004a32 <HAL_ADC_ConfigChannel+0x556>
 8004a20:	4855      	ldr	r0, [pc, #340]	; (8004b78 <HAL_ADC_ConfigChannel+0x69c>)
 8004a22:	f7ff fa77 	bl	8003f14 <LL_ADC_IsEnabled>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	bf0c      	ite	eq
 8004a2c:	2301      	moveq	r3, #1
 8004a2e:	2300      	movne	r3, #0
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d07d      	beq.n	8004b32 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a50      	ldr	r2, [pc, #320]	; (8004b7c <HAL_ADC_ConfigChannel+0x6a0>)
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d130      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x5c6>
 8004a40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a42:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d12b      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a4a      	ldr	r2, [pc, #296]	; (8004b78 <HAL_ADC_ConfigChannel+0x69c>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	f040 8081 	bne.w	8004b58 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a45      	ldr	r2, [pc, #276]	; (8004b70 <HAL_ADC_ConfigChannel+0x694>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_ADC_ConfigChannel+0x58e>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a43      	ldr	r2, [pc, #268]	; (8004b74 <HAL_ADC_ConfigChannel+0x698>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d101      	bne.n	8004a6e <HAL_ADC_ConfigChannel+0x592>
 8004a6a:	4a45      	ldr	r2, [pc, #276]	; (8004b80 <HAL_ADC_ConfigChannel+0x6a4>)
 8004a6c:	e000      	b.n	8004a70 <HAL_ADC_ConfigChannel+0x594>
 8004a6e:	4a3f      	ldr	r2, [pc, #252]	; (8004b6c <HAL_ADC_ConfigChannel+0x690>)
 8004a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a72:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7ff f8b0 	bl	8003bde <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a7e:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <HAL_ADC_ConfigChannel+0x6a8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	099b      	lsrs	r3, r3, #6
 8004a84:	4a40      	ldr	r2, [pc, #256]	; (8004b88 <HAL_ADC_ConfigChannel+0x6ac>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	099b      	lsrs	r3, r3, #6
 8004a8c:	3301      	adds	r3, #1
 8004a8e:	005b      	lsls	r3, r3, #1
 8004a90:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a92:	e002      	b.n	8004a9a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	3b01      	subs	r3, #1
 8004a98:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d1f9      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004aa0:	e05a      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a39      	ldr	r2, [pc, #228]	; (8004b8c <HAL_ADC_ConfigChannel+0x6b0>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d11e      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x60e>
 8004aac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004aae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d119      	bne.n	8004aea <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2f      	ldr	r2, [pc, #188]	; (8004b78 <HAL_ADC_ConfigChannel+0x69c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d14b      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <HAL_ADC_ConfigChannel+0x694>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_ADC_ConfigChannel+0x5f8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a29      	ldr	r2, [pc, #164]	; (8004b74 <HAL_ADC_ConfigChannel+0x698>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d101      	bne.n	8004ad8 <HAL_ADC_ConfigChannel+0x5fc>
 8004ad4:	4a2a      	ldr	r2, [pc, #168]	; (8004b80 <HAL_ADC_ConfigChannel+0x6a4>)
 8004ad6:	e000      	b.n	8004ada <HAL_ADC_ConfigChannel+0x5fe>
 8004ad8:	4a24      	ldr	r2, [pc, #144]	; (8004b6c <HAL_ADC_ConfigChannel+0x690>)
 8004ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004adc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	4610      	mov	r0, r2
 8004ae4:	f7ff f87b 	bl	8003bde <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ae8:	e036      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a28      	ldr	r2, [pc, #160]	; (8004b90 <HAL_ADC_ConfigChannel+0x6b4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d131      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x67c>
 8004af4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d12c      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a1d      	ldr	r2, [pc, #116]	; (8004b78 <HAL_ADC_ConfigChannel+0x69c>)
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d127      	bne.n	8004b58 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a18      	ldr	r2, [pc, #96]	; (8004b70 <HAL_ADC_ConfigChannel+0x694>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_ADC_ConfigChannel+0x640>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a17      	ldr	r2, [pc, #92]	; (8004b74 <HAL_ADC_ConfigChannel+0x698>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_ConfigChannel+0x644>
 8004b1c:	4a18      	ldr	r2, [pc, #96]	; (8004b80 <HAL_ADC_ConfigChannel+0x6a4>)
 8004b1e:	e000      	b.n	8004b22 <HAL_ADC_ConfigChannel+0x646>
 8004b20:	4a12      	ldr	r2, [pc, #72]	; (8004b6c <HAL_ADC_ConfigChannel+0x690>)
 8004b22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b24:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004b28:	4619      	mov	r1, r3
 8004b2a:	4610      	mov	r0, r2
 8004b2c:	f7ff f857 	bl	8003bde <LL_ADC_SetCommonPathInternalCh>
 8004b30:	e012      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b36:	f043 0220 	orr.w	r2, r3, #32
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004b44:	e008      	b.n	8004b58 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b4a:	f043 0220 	orr.w	r2, r3, #32
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004b52:	2301      	movs	r3, #1
 8004b54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004b60:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3784      	adds	r7, #132	; 0x84
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd90      	pop	{r4, r7, pc}
 8004b6c:	58026300 	.word	0x58026300
 8004b70:	40022000 	.word	0x40022000
 8004b74:	40022100 	.word	0x40022100
 8004b78:	58026000 	.word	0x58026000
 8004b7c:	cb840000 	.word	0xcb840000
 8004b80:	40022300 	.word	0x40022300
 8004b84:	24000090 	.word	0x24000090
 8004b88:	053e2d63 	.word	0x053e2d63
 8004b8c:	c7520000 	.word	0xc7520000
 8004b90:	cfb80000 	.word	0xcfb80000

08004b94 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff f9b7 	bl	8003f14 <LL_ADC_IsEnabled>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d16e      	bne.n	8004c8a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689a      	ldr	r2, [r3, #8]
 8004bb2:	4b38      	ldr	r3, [pc, #224]	; (8004c94 <ADC_Enable+0x100>)
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00d      	beq.n	8004bd6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	f043 0210 	orr.w	r2, r3, #16
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bca:	f043 0201 	orr.w	r2, r3, #1
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e05a      	b.n	8004c8c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f7ff f972 	bl	8003ec4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004be0:	f7fe ffbc 	bl	8003b5c <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a2b      	ldr	r2, [pc, #172]	; (8004c98 <ADC_Enable+0x104>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d004      	beq.n	8004bfa <ADC_Enable+0x66>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a29      	ldr	r2, [pc, #164]	; (8004c9c <ADC_Enable+0x108>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d101      	bne.n	8004bfe <ADC_Enable+0x6a>
 8004bfa:	4b29      	ldr	r3, [pc, #164]	; (8004ca0 <ADC_Enable+0x10c>)
 8004bfc:	e000      	b.n	8004c00 <ADC_Enable+0x6c>
 8004bfe:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <ADC_Enable+0x110>)
 8004c00:	4618      	mov	r0, r3
 8004c02:	f7ff f903 	bl	8003e0c <LL_ADC_GetMultimode>
 8004c06:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a23      	ldr	r2, [pc, #140]	; (8004c9c <ADC_Enable+0x108>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d002      	beq.n	8004c18 <ADC_Enable+0x84>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	e000      	b.n	8004c1a <ADC_Enable+0x86>
 8004c18:	4b1f      	ldr	r3, [pc, #124]	; (8004c98 <ADC_Enable+0x104>)
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6812      	ldr	r2, [r2, #0]
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d02c      	beq.n	8004c7c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d130      	bne.n	8004c8a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c28:	e028      	b.n	8004c7c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4618      	mov	r0, r3
 8004c30:	f7ff f970 	bl	8003f14 <LL_ADC_IsEnabled>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d104      	bne.n	8004c44 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7ff f940 	bl	8003ec4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004c44:	f7fe ff8a 	bl	8003b5c <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d914      	bls.n	8004c7c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0301 	and.w	r3, r3, #1
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d00d      	beq.n	8004c7c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c64:	f043 0210 	orr.w	r2, r3, #16
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c70:	f043 0201 	orr.w	r2, r3, #1
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e007      	b.n	8004c8c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d1cf      	bne.n	8004c2a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}
 8004c94:	8000003f 	.word	0x8000003f
 8004c98:	40022000 	.word	0x40022000
 8004c9c:	40022100 	.word	0x40022100
 8004ca0:	40022300 	.word	0x40022300
 8004ca4:	58026300 	.word	0x58026300

08004ca8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f7ff f940 	bl	8003f3a <LL_ADC_IsDisableOngoing>
 8004cba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	f7ff f927 	bl	8003f14 <LL_ADC_IsEnabled>
 8004cc6:	4603      	mov	r3, r0
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d047      	beq.n	8004d5c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d144      	bne.n	8004d5c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	f003 030d 	and.w	r3, r3, #13
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d10c      	bne.n	8004cfa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff f901 	bl	8003eec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2203      	movs	r2, #3
 8004cf0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004cf2:	f7fe ff33 	bl	8003b5c <HAL_GetTick>
 8004cf6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004cf8:	e029      	b.n	8004d4e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cfe:	f043 0210 	orr.w	r2, r3, #16
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0a:	f043 0201 	orr.w	r2, r3, #1
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e023      	b.n	8004d5e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004d16:	f7fe ff21 	bl	8003b5c <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d914      	bls.n	8004d4e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	689b      	ldr	r3, [r3, #8]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00d      	beq.n	8004d4e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d36:	f043 0210 	orr.w	r2, r3, #16
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d42:	f043 0201 	orr.w	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e007      	b.n	8004d5e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	f003 0301 	and.w	r3, r3, #1
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1dc      	bne.n	8004d16 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3710      	adds	r7, #16
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}

08004d66 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d66:	b580      	push	{r7, lr}
 8004d68:	b084      	sub	sp, #16
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d72:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d14b      	bne.n	8004e18 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0308 	and.w	r3, r3, #8
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d021      	beq.n	8004dde <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fe ff92 	bl	8003cc8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d032      	beq.n	8004e10 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	68db      	ldr	r3, [r3, #12]
 8004db0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d12b      	bne.n	8004e10 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d11f      	bne.n	8004e10 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd4:	f043 0201 	orr.w	r2, r3, #1
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	655a      	str	r2, [r3, #84]	; 0x54
 8004ddc:	e018      	b.n	8004e10 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0303 	and.w	r3, r3, #3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d111      	bne.n	8004e10 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004df0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d105      	bne.n	8004e10 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	f043 0201 	orr.w	r2, r3, #1
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e10:	68f8      	ldr	r0, [r7, #12]
 8004e12:	f7ff fb45 	bl	80044a0 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004e16:	e00e      	b.n	8004e36 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1c:	f003 0310 	and.w	r3, r3, #16
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d003      	beq.n	8004e2c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004e24:	68f8      	ldr	r0, [r7, #12]
 8004e26:	f7ff fb4f 	bl	80044c8 <HAL_ADC_ErrorCallback>
}
 8004e2a:	e004      	b.n	8004e36 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	4798      	blx	r3
}
 8004e36:	bf00      	nop
 8004e38:	3710      	adds	r7, #16
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}

08004e3e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b084      	sub	sp, #16
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e4a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004e4c:	68f8      	ldr	r0, [r7, #12]
 8004e4e:	f7ff fb31 	bl	80044b4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e52:	bf00      	nop
 8004e54:	3710      	adds	r7, #16
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}

08004e5a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004e5a:	b580      	push	{r7, lr}
 8004e5c:	b084      	sub	sp, #16
 8004e5e:	af00      	add	r7, sp, #0
 8004e60:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	f043 0204 	orr.w	r2, r3, #4
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004e80:	68f8      	ldr	r0, [r7, #12]
 8004e82:	f7ff fb21 	bl	80044c8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004e86:	bf00      	nop
 8004e88:	3710      	adds	r7, #16
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a7a      	ldr	r2, [pc, #488]	; (8005088 <ADC_ConfigureBoostMode+0x1f8>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <ADC_ConfigureBoostMode+0x1c>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4a79      	ldr	r2, [pc, #484]	; (800508c <ADC_ConfigureBoostMode+0x1fc>)
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d109      	bne.n	8004ec0 <ADC_ConfigureBoostMode+0x30>
 8004eac:	4b78      	ldr	r3, [pc, #480]	; (8005090 <ADC_ConfigureBoostMode+0x200>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e008      	b.n	8004ed2 <ADC_ConfigureBoostMode+0x42>
 8004ec0:	4b74      	ldr	r3, [pc, #464]	; (8005094 <ADC_ConfigureBoostMode+0x204>)
 8004ec2:	689b      	ldr	r3, [r3, #8]
 8004ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	bf14      	ite	ne
 8004ecc:	2301      	movne	r3, #1
 8004ece:	2300      	moveq	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d01c      	beq.n	8004f10 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004ed6:	f005 fd67 	bl	800a9a8 <HAL_RCC_GetHCLKFreq>
 8004eda:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004ee4:	d010      	beq.n	8004f08 <ADC_ConfigureBoostMode+0x78>
 8004ee6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eea:	d873      	bhi.n	8004fd4 <ADC_ConfigureBoostMode+0x144>
 8004eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ef0:	d002      	beq.n	8004ef8 <ADC_ConfigureBoostMode+0x68>
 8004ef2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ef6:	d16d      	bne.n	8004fd4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	0c1b      	lsrs	r3, r3, #16
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f04:	60fb      	str	r3, [r7, #12]
        break;
 8004f06:	e068      	b.n	8004fda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	089b      	lsrs	r3, r3, #2
 8004f0c:	60fb      	str	r3, [r7, #12]
        break;
 8004f0e:	e064      	b.n	8004fda <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004f10:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004f14:	f04f 0100 	mov.w	r1, #0
 8004f18:	f006 ffee 	bl	800bef8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004f1c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f26:	d051      	beq.n	8004fcc <ADC_ConfigureBoostMode+0x13c>
 8004f28:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004f2c:	d854      	bhi.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
 8004f2e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f32:	d047      	beq.n	8004fc4 <ADC_ConfigureBoostMode+0x134>
 8004f34:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004f38:	d84e      	bhi.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
 8004f3a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f3e:	d03d      	beq.n	8004fbc <ADC_ConfigureBoostMode+0x12c>
 8004f40:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004f44:	d848      	bhi.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
 8004f46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f4a:	d033      	beq.n	8004fb4 <ADC_ConfigureBoostMode+0x124>
 8004f4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004f50:	d842      	bhi.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
 8004f52:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f56:	d029      	beq.n	8004fac <ADC_ConfigureBoostMode+0x11c>
 8004f58:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004f5c:	d83c      	bhi.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
 8004f5e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f62:	d01a      	beq.n	8004f9a <ADC_ConfigureBoostMode+0x10a>
 8004f64:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004f68:	d836      	bhi.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
 8004f6a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f6e:	d014      	beq.n	8004f9a <ADC_ConfigureBoostMode+0x10a>
 8004f70:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004f74:	d830      	bhi.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
 8004f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f7a:	d00e      	beq.n	8004f9a <ADC_ConfigureBoostMode+0x10a>
 8004f7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f80:	d82a      	bhi.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
 8004f82:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f86:	d008      	beq.n	8004f9a <ADC_ConfigureBoostMode+0x10a>
 8004f88:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004f8c:	d824      	bhi.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
 8004f8e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f92:	d002      	beq.n	8004f9a <ADC_ConfigureBoostMode+0x10a>
 8004f94:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f98:	d11e      	bne.n	8004fd8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	0c9b      	lsrs	r3, r3, #18
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa8:	60fb      	str	r3, [r7, #12]
        break;
 8004faa:	e016      	b.n	8004fda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	091b      	lsrs	r3, r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]
        break;
 8004fb2:	e012      	b.n	8004fda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	095b      	lsrs	r3, r3, #5
 8004fb8:	60fb      	str	r3, [r7, #12]
        break;
 8004fba:	e00e      	b.n	8004fda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	099b      	lsrs	r3, r3, #6
 8004fc0:	60fb      	str	r3, [r7, #12]
        break;
 8004fc2:	e00a      	b.n	8004fda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	09db      	lsrs	r3, r3, #7
 8004fc8:	60fb      	str	r3, [r7, #12]
        break;
 8004fca:	e006      	b.n	8004fda <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	0a1b      	lsrs	r3, r3, #8
 8004fd0:	60fb      	str	r3, [r7, #12]
        break;
 8004fd2:	e002      	b.n	8004fda <ADC_ConfigureBoostMode+0x14a>
        break;
 8004fd4:	bf00      	nop
 8004fd6:	e000      	b.n	8004fda <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004fd8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004fda:	f7fe fdcb 	bl	8003b74 <HAL_GetREVID>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d815      	bhi.n	8005014 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <ADC_ConfigureBoostMode+0x208>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d908      	bls.n	8005002 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	689a      	ldr	r2, [r3, #8]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ffe:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005000:	e03e      	b.n	8005080 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005010:	609a      	str	r2, [r3, #8]
}
 8005012:	e035      	b.n	8005080 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	085b      	lsrs	r3, r3, #1
 8005018:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	4a1f      	ldr	r2, [pc, #124]	; (800509c <ADC_ConfigureBoostMode+0x20c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d808      	bhi.n	8005034 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689a      	ldr	r2, [r3, #8]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005030:	609a      	str	r2, [r3, #8]
}
 8005032:	e025      	b.n	8005080 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4a1a      	ldr	r2, [pc, #104]	; (80050a0 <ADC_ConfigureBoostMode+0x210>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d80a      	bhi.n	8005052 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800504e:	609a      	str	r2, [r3, #8]
}
 8005050:	e016      	b.n	8005080 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	4a13      	ldr	r2, [pc, #76]	; (80050a4 <ADC_ConfigureBoostMode+0x214>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d80a      	bhi.n	8005070 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	689b      	ldr	r3, [r3, #8]
 8005060:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800506c:	609a      	str	r2, [r3, #8]
}
 800506e:	e007      	b.n	8005080 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800507e:	609a      	str	r2, [r3, #8]
}
 8005080:	bf00      	nop
 8005082:	3710      	adds	r7, #16
 8005084:	46bd      	mov	sp, r7
 8005086:	bd80      	pop	{r7, pc}
 8005088:	40022000 	.word	0x40022000
 800508c:	40022100 	.word	0x40022100
 8005090:	40022300 	.word	0x40022300
 8005094:	58026300 	.word	0x58026300
 8005098:	01312d00 	.word	0x01312d00
 800509c:	005f5e10 	.word	0x005f5e10
 80050a0:	00bebc20 	.word	0x00bebc20
 80050a4:	017d7840 	.word	0x017d7840

080050a8 <LL_ADC_IsEnabled>:
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 0301 	and.w	r3, r3, #1
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d101      	bne.n	80050c0 <LL_ADC_IsEnabled+0x18>
 80050bc:	2301      	movs	r3, #1
 80050be:	e000      	b.n	80050c2 <LL_ADC_IsEnabled+0x1a>
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	370c      	adds	r7, #12
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
	...

080050d0 <LL_ADC_StartCalibration>:
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	60f8      	str	r0, [r7, #12]
 80050d8:	60b9      	str	r1, [r7, #8]
 80050da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	689a      	ldr	r2, [r3, #8]
 80050e0:	4b09      	ldr	r3, [pc, #36]	; (8005108 <LL_ADC_StartCalibration+0x38>)
 80050e2:	4013      	ands	r3, r2
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80050ea:	687a      	ldr	r2, [r7, #4]
 80050ec:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80050f0:	430a      	orrs	r2, r1
 80050f2:	4313      	orrs	r3, r2
 80050f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	609a      	str	r2, [r3, #8]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	3ffeffc0 	.word	0x3ffeffc0

0800510c <LL_ADC_IsCalibrationOnGoing>:
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800511c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005120:	d101      	bne.n	8005126 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005122:	2301      	movs	r3, #1
 8005124:	e000      	b.n	8005128 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005126:	2300      	movs	r3, #0
}
 8005128:	4618      	mov	r0, r3
 800512a:	370c      	adds	r7, #12
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <LL_ADC_REG_IsConversionOngoing>:
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b04      	cmp	r3, #4
 8005146:	d101      	bne.n	800514c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005148:	2301      	movs	r3, #1
 800514a:	e000      	b.n	800514e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800514c:	2300      	movs	r3, #0
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b086      	sub	sp, #24
 8005160:	af00      	add	r7, sp, #0
 8005162:	60f8      	str	r0, [r7, #12]
 8005164:	60b9      	str	r1, [r7, #8]
 8005166:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005168:	2300      	movs	r3, #0
 800516a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005172:	2b01      	cmp	r3, #1
 8005174:	d101      	bne.n	800517a <HAL_ADCEx_Calibration_Start+0x1e>
 8005176:	2302      	movs	r3, #2
 8005178:	e04c      	b.n	8005214 <HAL_ADCEx_Calibration_Start+0xb8>
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	2201      	movs	r2, #1
 800517e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff fd90 	bl	8004ca8 <ADC_Disable>
 8005188:	4603      	mov	r3, r0
 800518a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800518c:	7dfb      	ldrb	r3, [r7, #23]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d135      	bne.n	80051fe <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005196:	4b21      	ldr	r3, [pc, #132]	; (800521c <HAL_ADCEx_Calibration_Start+0xc0>)
 8005198:	4013      	ands	r3, r2
 800519a:	f043 0202 	orr.w	r2, r3, #2
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	687a      	ldr	r2, [r7, #4]
 80051a8:	68b9      	ldr	r1, [r7, #8]
 80051aa:	4618      	mov	r0, r3
 80051ac:	f7ff ff90 	bl	80050d0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80051b0:	e014      	b.n	80051dc <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	3301      	adds	r3, #1
 80051b6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	4a19      	ldr	r2, [pc, #100]	; (8005220 <HAL_ADCEx_Calibration_Start+0xc4>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d30d      	bcc.n	80051dc <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	f023 0312 	bic.w	r3, r3, #18
 80051c8:	f043 0210 	orr.w	r2, r3, #16
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e01b      	b.n	8005214 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff ff93 	bl	800510c <LL_ADC_IsCalibrationOnGoing>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e2      	bne.n	80051b2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051f0:	f023 0303 	bic.w	r3, r3, #3
 80051f4:	f043 0201 	orr.w	r2, r3, #1
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	655a      	str	r2, [r3, #84]	; 0x54
 80051fc:	e005      	b.n	800520a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	f043 0210 	orr.w	r2, r3, #16
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2200      	movs	r2, #0
 800520e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005212:	7dfb      	ldrb	r3, [r7, #23]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3718      	adds	r7, #24
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	ffffeefd 	.word	0xffffeefd
 8005220:	25c3f800 	.word	0x25c3f800

08005224 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005224:	b590      	push	{r4, r7, lr}
 8005226:	b09f      	sub	sp, #124	; 0x7c
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800522e:	2300      	movs	r3, #0
 8005230:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800523a:	2b01      	cmp	r3, #1
 800523c:	d101      	bne.n	8005242 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800523e:	2302      	movs	r3, #2
 8005240:	e0be      	b.n	80053c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800524a:	2300      	movs	r3, #0
 800524c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800524e:	2300      	movs	r3, #0
 8005250:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a5c      	ldr	r2, [pc, #368]	; (80053c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d102      	bne.n	8005262 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800525c:	4b5b      	ldr	r3, [pc, #364]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	e001      	b.n	8005266 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005262:	2300      	movs	r3, #0
 8005264:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d10b      	bne.n	8005284 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005270:	f043 0220 	orr.w	r2, r3, #32
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e09d      	b.n	80053c0 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	4618      	mov	r0, r3
 8005288:	f7ff ff54 	bl	8005134 <LL_ADC_REG_IsConversionOngoing>
 800528c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f7ff ff4e 	bl	8005134 <LL_ADC_REG_IsConversionOngoing>
 8005298:	4603      	mov	r3, r0
 800529a:	2b00      	cmp	r3, #0
 800529c:	d17f      	bne.n	800539e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800529e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d17c      	bne.n	800539e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a47      	ldr	r2, [pc, #284]	; (80053c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d004      	beq.n	80052b8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a46      	ldr	r2, [pc, #280]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d101      	bne.n	80052bc <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80052b8:	4b45      	ldr	r3, [pc, #276]	; (80053d0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80052ba:	e000      	b.n	80052be <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80052bc:	4b45      	ldr	r3, [pc, #276]	; (80053d4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80052be:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d039      	beq.n	800533c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80052c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	685b      	ldr	r3, [r3, #4]
 80052d4:	431a      	orrs	r2, r3
 80052d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a3a      	ldr	r2, [pc, #232]	; (80053c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d004      	beq.n	80052ee <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a38      	ldr	r2, [pc, #224]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d10e      	bne.n	800530c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80052ee:	4836      	ldr	r0, [pc, #216]	; (80053c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80052f0:	f7ff feda 	bl	80050a8 <LL_ADC_IsEnabled>
 80052f4:	4604      	mov	r4, r0
 80052f6:	4835      	ldr	r0, [pc, #212]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80052f8:	f7ff fed6 	bl	80050a8 <LL_ADC_IsEnabled>
 80052fc:	4603      	mov	r3, r0
 80052fe:	4323      	orrs	r3, r4
 8005300:	2b00      	cmp	r3, #0
 8005302:	bf0c      	ite	eq
 8005304:	2301      	moveq	r3, #1
 8005306:	2300      	movne	r3, #0
 8005308:	b2db      	uxtb	r3, r3
 800530a:	e008      	b.n	800531e <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 800530c:	4832      	ldr	r0, [pc, #200]	; (80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800530e:	f7ff fecb 	bl	80050a8 <LL_ADC_IsEnabled>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	bf0c      	ite	eq
 8005318:	2301      	moveq	r3, #1
 800531a:	2300      	movne	r3, #0
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b00      	cmp	r3, #0
 8005320:	d047      	beq.n	80053b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005324:	689a      	ldr	r2, [r3, #8]
 8005326:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005328:	4013      	ands	r3, r2
 800532a:	683a      	ldr	r2, [r7, #0]
 800532c:	6811      	ldr	r1, [r2, #0]
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	6892      	ldr	r2, [r2, #8]
 8005332:	430a      	orrs	r2, r1
 8005334:	431a      	orrs	r2, r3
 8005336:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005338:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800533a:	e03a      	b.n	80053b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800533c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005346:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a1e      	ldr	r2, [pc, #120]	; (80053c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d004      	beq.n	800535c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d10e      	bne.n	800537a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800535c:	481a      	ldr	r0, [pc, #104]	; (80053c8 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800535e:	f7ff fea3 	bl	80050a8 <LL_ADC_IsEnabled>
 8005362:	4604      	mov	r4, r0
 8005364:	4819      	ldr	r0, [pc, #100]	; (80053cc <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005366:	f7ff fe9f 	bl	80050a8 <LL_ADC_IsEnabled>
 800536a:	4603      	mov	r3, r0
 800536c:	4323      	orrs	r3, r4
 800536e:	2b00      	cmp	r3, #0
 8005370:	bf0c      	ite	eq
 8005372:	2301      	moveq	r3, #1
 8005374:	2300      	movne	r3, #0
 8005376:	b2db      	uxtb	r3, r3
 8005378:	e008      	b.n	800538c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800537a:	4817      	ldr	r0, [pc, #92]	; (80053d8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800537c:	f7ff fe94 	bl	80050a8 <LL_ADC_IsEnabled>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	bf0c      	ite	eq
 8005386:	2301      	moveq	r3, #1
 8005388:	2300      	movne	r3, #0
 800538a:	b2db      	uxtb	r3, r3
 800538c:	2b00      	cmp	r3, #0
 800538e:	d010      	beq.n	80053b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	4b11      	ldr	r3, [pc, #68]	; (80053dc <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005396:	4013      	ands	r3, r2
 8005398:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800539a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800539c:	e009      	b.n	80053b2 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a2:	f043 0220 	orr.w	r2, r3, #32
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80053b0:	e000      	b.n	80053b4 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80053b2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80053bc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	377c      	adds	r7, #124	; 0x7c
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd90      	pop	{r4, r7, pc}
 80053c8:	40022000 	.word	0x40022000
 80053cc:	40022100 	.word	0x40022100
 80053d0:	40022300 	.word	0x40022300
 80053d4:	58026300 	.word	0x58026300
 80053d8:	58026000 	.word	0x58026000
 80053dc:	fffff0e0 	.word	0xfffff0e0

080053e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b085      	sub	sp, #20
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f003 0307 	and.w	r3, r3, #7
 80053ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80053f0:	4b0b      	ldr	r3, [pc, #44]	; (8005420 <__NVIC_SetPriorityGrouping+0x40>)
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80053fc:	4013      	ands	r3, r2
 80053fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005408:	4b06      	ldr	r3, [pc, #24]	; (8005424 <__NVIC_SetPriorityGrouping+0x44>)
 800540a:	4313      	orrs	r3, r2
 800540c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800540e:	4a04      	ldr	r2, [pc, #16]	; (8005420 <__NVIC_SetPriorityGrouping+0x40>)
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	60d3      	str	r3, [r2, #12]
}
 8005414:	bf00      	nop
 8005416:	3714      	adds	r7, #20
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	e000ed00 	.word	0xe000ed00
 8005424:	05fa0000 	.word	0x05fa0000

08005428 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005428:	b480      	push	{r7}
 800542a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800542c:	4b04      	ldr	r3, [pc, #16]	; (8005440 <__NVIC_GetPriorityGrouping+0x18>)
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	f003 0307 	and.w	r3, r3, #7
}
 8005436:	4618      	mov	r0, r3
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	e000ed00 	.word	0xe000ed00

08005444 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005444:	b480      	push	{r7}
 8005446:	b083      	sub	sp, #12
 8005448:	af00      	add	r7, sp, #0
 800544a:	4603      	mov	r3, r0
 800544c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800544e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005452:	2b00      	cmp	r3, #0
 8005454:	db0b      	blt.n	800546e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005456:	88fb      	ldrh	r3, [r7, #6]
 8005458:	f003 021f 	and.w	r2, r3, #31
 800545c:	4907      	ldr	r1, [pc, #28]	; (800547c <__NVIC_EnableIRQ+0x38>)
 800545e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005462:	095b      	lsrs	r3, r3, #5
 8005464:	2001      	movs	r0, #1
 8005466:	fa00 f202 	lsl.w	r2, r0, r2
 800546a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	e000e100 	.word	0xe000e100

08005480 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005480:	b480      	push	{r7}
 8005482:	b083      	sub	sp, #12
 8005484:	af00      	add	r7, sp, #0
 8005486:	4603      	mov	r3, r0
 8005488:	6039      	str	r1, [r7, #0]
 800548a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800548c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005490:	2b00      	cmp	r3, #0
 8005492:	db0a      	blt.n	80054aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	b2da      	uxtb	r2, r3
 8005498:	490c      	ldr	r1, [pc, #48]	; (80054cc <__NVIC_SetPriority+0x4c>)
 800549a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800549e:	0112      	lsls	r2, r2, #4
 80054a0:	b2d2      	uxtb	r2, r2
 80054a2:	440b      	add	r3, r1
 80054a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054a8:	e00a      	b.n	80054c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	b2da      	uxtb	r2, r3
 80054ae:	4908      	ldr	r1, [pc, #32]	; (80054d0 <__NVIC_SetPriority+0x50>)
 80054b0:	88fb      	ldrh	r3, [r7, #6]
 80054b2:	f003 030f 	and.w	r3, r3, #15
 80054b6:	3b04      	subs	r3, #4
 80054b8:	0112      	lsls	r2, r2, #4
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	440b      	add	r3, r1
 80054be:	761a      	strb	r2, [r3, #24]
}
 80054c0:	bf00      	nop
 80054c2:	370c      	adds	r7, #12
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	e000e100 	.word	0xe000e100
 80054d0:	e000ed00 	.word	0xe000ed00

080054d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b089      	sub	sp, #36	; 0x24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	60f8      	str	r0, [r7, #12]
 80054dc:	60b9      	str	r1, [r7, #8]
 80054de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f003 0307 	and.w	r3, r3, #7
 80054e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80054e8:	69fb      	ldr	r3, [r7, #28]
 80054ea:	f1c3 0307 	rsb	r3, r3, #7
 80054ee:	2b04      	cmp	r3, #4
 80054f0:	bf28      	it	cs
 80054f2:	2304      	movcs	r3, #4
 80054f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	3304      	adds	r3, #4
 80054fa:	2b06      	cmp	r3, #6
 80054fc:	d902      	bls.n	8005504 <NVIC_EncodePriority+0x30>
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	3b03      	subs	r3, #3
 8005502:	e000      	b.n	8005506 <NVIC_EncodePriority+0x32>
 8005504:	2300      	movs	r3, #0
 8005506:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005508:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	fa02 f303 	lsl.w	r3, r2, r3
 8005512:	43da      	mvns	r2, r3
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	401a      	ands	r2, r3
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800551c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	fa01 f303 	lsl.w	r3, r1, r3
 8005526:	43d9      	mvns	r1, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800552c:	4313      	orrs	r3, r2
         );
}
 800552e:	4618      	mov	r0, r3
 8005530:	3724      	adds	r7, #36	; 0x24
 8005532:	46bd      	mov	sp, r7
 8005534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005538:	4770      	bx	lr

0800553a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800553a:	b580      	push	{r7, lr}
 800553c:	b082      	sub	sp, #8
 800553e:	af00      	add	r7, sp, #0
 8005540:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff ff4c 	bl	80053e0 <__NVIC_SetPriorityGrouping>
}
 8005548:	bf00      	nop
 800554a:	3708      	adds	r7, #8
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b086      	sub	sp, #24
 8005554:	af00      	add	r7, sp, #0
 8005556:	4603      	mov	r3, r0
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800555e:	f7ff ff63 	bl	8005428 <__NVIC_GetPriorityGrouping>
 8005562:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	6978      	ldr	r0, [r7, #20]
 800556a:	f7ff ffb3 	bl	80054d4 <NVIC_EncodePriority>
 800556e:	4602      	mov	r2, r0
 8005570:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005574:	4611      	mov	r1, r2
 8005576:	4618      	mov	r0, r3
 8005578:	f7ff ff82 	bl	8005480 <__NVIC_SetPriority>
}
 800557c:	bf00      	nop
 800557e:	3718      	adds	r7, #24
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b082      	sub	sp, #8
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800558e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005592:	4618      	mov	r0, r3
 8005594:	f7ff ff56 	bl	8005444 <__NVIC_EnableIRQ>
}
 8005598:	bf00      	nop
 800559a:	3708      	adds	r7, #8
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e014      	b.n	80055dc <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	791b      	ldrb	r3, [r3, #4]
 80055b6:	b2db      	uxtb	r3, r3
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d105      	bne.n	80055c8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fd fc8a 	bl	8002edc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2201      	movs	r2, #1
 80055d8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3708      	adds	r7, #8
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d101      	bne.n	80055f8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80055f4:	2301      	movs	r3, #1
 80055f6:	e046      	b.n	8005686 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	795b      	ldrb	r3, [r3, #5]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d101      	bne.n	8005604 <HAL_DAC_Start+0x20>
 8005600:	2302      	movs	r3, #2
 8005602:	e040      	b.n	8005686 <HAL_DAC_Start+0xa2>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2202      	movs	r2, #2
 800560e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6819      	ldr	r1, [r3, #0]
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f003 0310 	and.w	r3, r3, #16
 800561c:	2201      	movs	r2, #1
 800561e:	409a      	lsls	r2, r3
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d10f      	bne.n	800564e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005638:	2b02      	cmp	r3, #2
 800563a:	d11d      	bne.n	8005678 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f042 0201 	orr.w	r2, r2, #1
 800564a:	605a      	str	r2, [r3, #4]
 800564c:	e014      	b.n	8005678 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2102      	movs	r1, #2
 8005660:	fa01 f303 	lsl.w	r3, r1, r3
 8005664:	429a      	cmp	r2, r3
 8005666:	d107      	bne.n	8005678 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f042 0202 	orr.w	r2, r2, #2
 8005676:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
	...

08005694 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
 80056a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e0a2      	b.n	80057f2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	795b      	ldrb	r3, [r3, #5]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d101      	bne.n	80056b8 <HAL_DAC_Start_DMA+0x24>
 80056b4:	2302      	movs	r3, #2
 80056b6:	e09c      	b.n	80057f2 <HAL_DAC_Start_DMA+0x15e>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2202      	movs	r2, #2
 80056c2:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d129      	bne.n	800571e <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	4a4b      	ldr	r2, [pc, #300]	; (80057fc <HAL_DAC_Start_DMA+0x168>)
 80056d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	4a4a      	ldr	r2, [pc, #296]	; (8005800 <HAL_DAC_Start_DMA+0x16c>)
 80056d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	4a49      	ldr	r2, [pc, #292]	; (8005804 <HAL_DAC_Start_DMA+0x170>)
 80056e0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80056f0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80056f2:	6a3b      	ldr	r3, [r7, #32]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_DAC_Start_DMA+0x6c>
 80056f8:	6a3b      	ldr	r3, [r7, #32]
 80056fa:	2b04      	cmp	r3, #4
 80056fc:	d005      	beq.n	800570a <HAL_DAC_Start_DMA+0x76>
 80056fe:	e009      	b.n	8005714 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	3308      	adds	r3, #8
 8005706:	613b      	str	r3, [r7, #16]
        break;
 8005708:	e033      	b.n	8005772 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	330c      	adds	r3, #12
 8005710:	613b      	str	r3, [r7, #16]
        break;
 8005712:	e02e      	b.n	8005772 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3310      	adds	r3, #16
 800571a:	613b      	str	r3, [r7, #16]
        break;
 800571c:	e029      	b.n	8005772 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	4a39      	ldr	r2, [pc, #228]	; (8005808 <HAL_DAC_Start_DMA+0x174>)
 8005724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	4a38      	ldr	r2, [pc, #224]	; (800580c <HAL_DAC_Start_DMA+0x178>)
 800572c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	4a37      	ldr	r2, [pc, #220]	; (8005810 <HAL_DAC_Start_DMA+0x17c>)
 8005734:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005744:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005746:	6a3b      	ldr	r3, [r7, #32]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d003      	beq.n	8005754 <HAL_DAC_Start_DMA+0xc0>
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d005      	beq.n	800575e <HAL_DAC_Start_DMA+0xca>
 8005752:	e009      	b.n	8005768 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	3314      	adds	r3, #20
 800575a:	613b      	str	r3, [r7, #16]
        break;
 800575c:	e009      	b.n	8005772 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3318      	adds	r3, #24
 8005764:	613b      	str	r3, [r7, #16]
        break;
 8005766:	e004      	b.n	8005772 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	331c      	adds	r3, #28
 800576e:	613b      	str	r3, [r7, #16]
        break;
 8005770:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d111      	bne.n	800579c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	681a      	ldr	r2, [r3, #0]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005786:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6898      	ldr	r0, [r3, #8]
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	693a      	ldr	r2, [r7, #16]
 8005792:	f000 fe67 	bl	8006464 <HAL_DMA_Start_IT>
 8005796:	4603      	mov	r3, r0
 8005798:	75fb      	strb	r3, [r7, #23]
 800579a:	e010      	b.n	80057be <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681a      	ldr	r2, [r3, #0]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80057aa:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	68d8      	ldr	r0, [r3, #12]
 80057b0:	6879      	ldr	r1, [r7, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	f000 fe55 	bl	8006464 <HAL_DMA_Start_IT>
 80057ba:	4603      	mov	r3, r0
 80057bc:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2200      	movs	r2, #0
 80057c2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80057c4:	7dfb      	ldrb	r3, [r7, #23]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10c      	bne.n	80057e4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2201      	movs	r2, #1
 80057d8:	409a      	lsls	r2, r3
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]
 80057e2:	e005      	b.n	80057f0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f043 0204 	orr.w	r2, r3, #4
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80057f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3718      	adds	r7, #24
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	08005c85 	.word	0x08005c85
 8005800:	08005ca7 	.word	0x08005ca7
 8005804:	08005cc3 	.word	0x08005cc3
 8005808:	08005d41 	.word	0x08005d41
 800580c:	08005d63 	.word	0x08005d63
 8005810:	08005d7f 	.word	0x08005d7f

08005814 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b082      	sub	sp, #8
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d101      	bne.n	8005828 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005824:	2301      	movs	r3, #1
 8005826:	e03e      	b.n	80058a6 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6819      	ldr	r1, [r3, #0]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	f003 0310 	and.w	r3, r3, #16
 8005834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005838:	fa02 f303 	lsl.w	r3, r2, r3
 800583c:	43da      	mvns	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	400a      	ands	r2, r1
 8005844:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	6819      	ldr	r1, [r3, #0]
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	f003 0310 	and.w	r3, r3, #16
 8005852:	2201      	movs	r2, #1
 8005854:	fa02 f303 	lsl.w	r3, r2, r3
 8005858:	43da      	mvns	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	400a      	ands	r2, r1
 8005860:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d10d      	bne.n	8005884 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	4618      	mov	r0, r3
 800586e:	f001 f863 	bl	8006938 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	e00c      	b.n	800589e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	68db      	ldr	r3, [r3, #12]
 8005888:	4618      	mov	r0, r3
 800588a:	f001 f855 	bl	8006938 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800589c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80058ae:	b580      	push	{r7, lr}
 80058b0:	b084      	sub	sp, #16
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c4:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d01d      	beq.n	800590c <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d018      	beq.n	800590c <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2204      	movs	r2, #4
 80058de:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f043 0201 	orr.w	r2, r3, #1
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005904:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f86f 	bl	80059ea <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005912:	2b00      	cmp	r3, #0
 8005914:	d01d      	beq.n	8005952 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d018      	beq.n	8005952 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2204      	movs	r2, #4
 8005924:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	f043 0202 	orr.w	r2, r3, #2
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800593a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	681a      	ldr	r2, [r3, #0]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800594a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f9ed 	bl	8005d2c <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005952:	bf00      	nop
 8005954:	3710      	adds	r7, #16
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}

0800595a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800595a:	b480      	push	{r7}
 800595c:	b087      	sub	sp, #28
 800595e:	af00      	add	r7, sp, #0
 8005960:	60f8      	str	r0, [r7, #12]
 8005962:	60b9      	str	r1, [r7, #8]
 8005964:	607a      	str	r2, [r7, #4]
 8005966:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005968:	2300      	movs	r3, #0
 800596a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e015      	b.n	80059a2 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d105      	bne.n	800598e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005982:	697a      	ldr	r2, [r7, #20]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	3308      	adds	r3, #8
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e004      	b.n	8005998 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800598e:	697a      	ldr	r2, [r7, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4413      	add	r3, r2
 8005994:	3314      	adds	r3, #20
 8005996:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005998:	697b      	ldr	r3, [r7, #20]
 800599a:	461a      	mov	r2, r3
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr

080059ae <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80059ae:	b480      	push	{r7}
 80059b0:	b083      	sub	sp, #12
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80059b6:	bf00      	nop
 80059b8:	370c      	adds	r7, #12
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr

080059c2 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80059c2:	b480      	push	{r7}
 80059c4:	b083      	sub	sp, #12
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80059ca:	bf00      	nop
 80059cc:	370c      	adds	r7, #12
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b083      	sub	sp, #12
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80059de:	bf00      	nop
 80059e0:	370c      	adds	r7, #12
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80059f2:	bf00      	nop
 80059f4:	370c      	adds	r7, #12
 80059f6:	46bd      	mov	sp, r7
 80059f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fc:	4770      	bx	lr
	...

08005a00 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b08a      	sub	sp, #40	; 0x28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_DAC_ConfigChannel+0x1e>
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e12a      	b.n	8005c78 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	795b      	ldrb	r3, [r3, #5]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_DAC_ConfigChannel+0x2e>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e124      	b.n	8005c78 <HAL_DAC_ConfigChannel+0x278>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2201      	movs	r2, #1
 8005a32:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	2202      	movs	r2, #2
 8005a38:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	2b04      	cmp	r3, #4
 8005a40:	d17a      	bne.n	8005b38 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005a42:	f7fe f88b 	bl	8003b5c <HAL_GetTick>
 8005a46:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d13d      	bne.n	8005aca <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a4e:	e018      	b.n	8005a82 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a50:	f7fe f884 	bl	8003b5c <HAL_GetTick>
 8005a54:	4602      	mov	r2, r0
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	1ad3      	subs	r3, r2, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d911      	bls.n	8005a82 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a64:	4b86      	ldr	r3, [pc, #536]	; (8005c80 <HAL_DAC_ConfigChannel+0x280>)
 8005a66:	4013      	ands	r3, r2
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d00a      	beq.n	8005a82 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	691b      	ldr	r3, [r3, #16]
 8005a70:	f043 0208 	orr.w	r2, r3, #8
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2203      	movs	r2, #3
 8005a7c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e0fa      	b.n	8005c78 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a88:	4b7d      	ldr	r3, [pc, #500]	; (8005c80 <HAL_DAC_ConfigChannel+0x280>)
 8005a8a:	4013      	ands	r3, r2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1df      	bne.n	8005a50 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68ba      	ldr	r2, [r7, #8]
 8005a96:	6992      	ldr	r2, [r2, #24]
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
 8005a9a:	e020      	b.n	8005ade <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005a9c:	f7fe f85e 	bl	8003b5c <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	2b01      	cmp	r3, #1
 8005aa8:	d90f      	bls.n	8005aca <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	da0a      	bge.n	8005aca <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	691b      	ldr	r3, [r3, #16]
 8005ab8:	f043 0208 	orr.w	r2, r3, #8
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0d6      	b.n	8005c78 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	dbe3      	blt.n	8005a9c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	6992      	ldr	r2, [r2, #24]
 8005adc:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f003 0310 	and.w	r3, r3, #16
 8005aea:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005aee:	fa01 f303 	lsl.w	r3, r1, r3
 8005af2:	43db      	mvns	r3, r3
 8005af4:	ea02 0103 	and.w	r1, r2, r3
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	69da      	ldr	r2, [r3, #28]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f003 0310 	and.w	r3, r3, #16
 8005b02:	409a      	lsls	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	430a      	orrs	r2, r1
 8005b0a:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	f003 0310 	and.w	r3, r3, #16
 8005b18:	21ff      	movs	r1, #255	; 0xff
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	43db      	mvns	r3, r3
 8005b20:	ea02 0103 	and.w	r1, r2, r3
 8005b24:	68bb      	ldr	r3, [r7, #8]
 8005b26:	6a1a      	ldr	r2, [r3, #32]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	409a      	lsls	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	430a      	orrs	r2, r1
 8005b36:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d11d      	bne.n	8005b7c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	221f      	movs	r2, #31
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	69ba      	ldr	r2, [r7, #24]
 8005b70:	4313      	orrs	r3, r2
 8005b72:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	69ba      	ldr	r2, [r7, #24]
 8005b7a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b82:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	f003 0310 	and.w	r3, r3, #16
 8005b8a:	2207      	movs	r2, #7
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	43db      	mvns	r3, r3
 8005b92:	69ba      	ldr	r2, [r7, #24]
 8005b94:	4013      	ands	r3, r2
 8005b96:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005b98:	68bb      	ldr	r3, [r7, #8]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d102      	bne.n	8005ba6 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ba4:	e00f      	b.n	8005bc6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	2b02      	cmp	r3, #2
 8005bac:	d102      	bne.n	8005bb4 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb2:	e008      	b.n	8005bc6 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d102      	bne.n	8005bc2 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8005bc0:	e001      	b.n	8005bc6 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	681a      	ldr	r2, [r3, #0]
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f003 0310 	and.w	r3, r3, #16
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	fa02 f303 	lsl.w	r3, r2, r3
 8005be2:	69ba      	ldr	r2, [r7, #24]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	69ba      	ldr	r2, [r7, #24]
 8005bee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6819      	ldr	r1, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f003 0310 	and.w	r3, r3, #16
 8005bfc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005c00:	fa02 f303 	lsl.w	r3, r2, r3
 8005c04:	43da      	mvns	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f003 0310 	and.w	r3, r3, #16
 8005c1c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005c20:	fa02 f303 	lsl.w	r3, r2, r3
 8005c24:	43db      	mvns	r3, r3
 8005c26:	69ba      	ldr	r2, [r7, #24]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f003 0310 	and.w	r3, r3, #16
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c3e:	69ba      	ldr	r2, [r7, #24]
 8005c40:	4313      	orrs	r3, r2
 8005c42:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	69ba      	ldr	r2, [r7, #24]
 8005c4a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	6819      	ldr	r1, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	f003 0310 	and.w	r3, r3, #16
 8005c58:	22c0      	movs	r2, #192	; 0xc0
 8005c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5e:	43da      	mvns	r2, r3
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	400a      	ands	r2, r1
 8005c66:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2200      	movs	r2, #0
 8005c72:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005c74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3728      	adds	r7, #40	; 0x28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	20008000 	.word	0x20008000

08005c84 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f7ff fe8b 	bl	80059ae <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	711a      	strb	r2, [r3, #4]
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005cb4:	68f8      	ldr	r0, [r7, #12]
 8005cb6:	f7ff fe84 	bl	80059c2 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005cba:	bf00      	nop
 8005cbc:	3710      	adds	r7, #16
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b084      	sub	sp, #16
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	f043 0204 	orr.w	r2, r3, #4
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005cdc:	68f8      	ldr	r0, [r7, #12]
 8005cde:	f7ff fe7a 	bl	80059d6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	711a      	strb	r2, [r3, #4]
}
 8005ce8:	bf00      	nop
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}

08005cf0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005d4e:	68f8      	ldr	r0, [r7, #12]
 8005d50:	f7ff ffce 	bl	8005cf0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2201      	movs	r2, #1
 8005d58:	711a      	strb	r2, [r3, #4]
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d6e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005d70:	68f8      	ldr	r0, [r7, #12]
 8005d72:	f7ff ffc7 	bl	8005d04 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005d76:	bf00      	nop
 8005d78:	3710      	adds	r7, #16
 8005d7a:	46bd      	mov	sp, r7
 8005d7c:	bd80      	pop	{r7, pc}

08005d7e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005d7e:	b580      	push	{r7, lr}
 8005d80:	b084      	sub	sp, #16
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	f043 0204 	orr.w	r2, r3, #4
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005d98:	68f8      	ldr	r0, [r7, #12]
 8005d9a:	f7ff ffbd 	bl	8005d18 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2201      	movs	r2, #1
 8005da2:	711a      	strb	r2, [r3, #4]
}
 8005da4:	bf00      	nop
 8005da6:	3710      	adds	r7, #16
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005db4:	f7fd fed2 	bl	8003b5c <HAL_GetTick>
 8005db8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d101      	bne.n	8005dc4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e316      	b.n	80063f2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a66      	ldr	r2, [pc, #408]	; (8005f64 <HAL_DMA_Init+0x1b8>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d04a      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a65      	ldr	r2, [pc, #404]	; (8005f68 <HAL_DMA_Init+0x1bc>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d045      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	4a63      	ldr	r2, [pc, #396]	; (8005f6c <HAL_DMA_Init+0x1c0>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d040      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4a62      	ldr	r2, [pc, #392]	; (8005f70 <HAL_DMA_Init+0x1c4>)
 8005de8:	4293      	cmp	r3, r2
 8005dea:	d03b      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a60      	ldr	r2, [pc, #384]	; (8005f74 <HAL_DMA_Init+0x1c8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d036      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a5f      	ldr	r2, [pc, #380]	; (8005f78 <HAL_DMA_Init+0x1cc>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d031      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a5d      	ldr	r2, [pc, #372]	; (8005f7c <HAL_DMA_Init+0x1d0>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d02c      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a5c      	ldr	r2, [pc, #368]	; (8005f80 <HAL_DMA_Init+0x1d4>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d027      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a5a      	ldr	r2, [pc, #360]	; (8005f84 <HAL_DMA_Init+0x1d8>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d022      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a59      	ldr	r2, [pc, #356]	; (8005f88 <HAL_DMA_Init+0x1dc>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d01d      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a57      	ldr	r2, [pc, #348]	; (8005f8c <HAL_DMA_Init+0x1e0>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d018      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a56      	ldr	r2, [pc, #344]	; (8005f90 <HAL_DMA_Init+0x1e4>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d013      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a54      	ldr	r2, [pc, #336]	; (8005f94 <HAL_DMA_Init+0x1e8>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d00e      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a53      	ldr	r2, [pc, #332]	; (8005f98 <HAL_DMA_Init+0x1ec>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d009      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a51      	ldr	r2, [pc, #324]	; (8005f9c <HAL_DMA_Init+0x1f0>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_DMA_Init+0xb8>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a50      	ldr	r2, [pc, #320]	; (8005fa0 <HAL_DMA_Init+0x1f4>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d101      	bne.n	8005e68 <HAL_DMA_Init+0xbc>
 8005e64:	2301      	movs	r3, #1
 8005e66:	e000      	b.n	8005e6a <HAL_DMA_Init+0xbe>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 813b 	beq.w	80060e6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2202      	movs	r2, #2
 8005e74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a37      	ldr	r2, [pc, #220]	; (8005f64 <HAL_DMA_Init+0x1b8>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d04a      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a36      	ldr	r2, [pc, #216]	; (8005f68 <HAL_DMA_Init+0x1bc>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d045      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	4a34      	ldr	r2, [pc, #208]	; (8005f6c <HAL_DMA_Init+0x1c0>)
 8005e9a:	4293      	cmp	r3, r2
 8005e9c:	d040      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a33      	ldr	r2, [pc, #204]	; (8005f70 <HAL_DMA_Init+0x1c4>)
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	d03b      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a31      	ldr	r2, [pc, #196]	; (8005f74 <HAL_DMA_Init+0x1c8>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d036      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	4a30      	ldr	r2, [pc, #192]	; (8005f78 <HAL_DMA_Init+0x1cc>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d031      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	4a2e      	ldr	r2, [pc, #184]	; (8005f7c <HAL_DMA_Init+0x1d0>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d02c      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4a2d      	ldr	r2, [pc, #180]	; (8005f80 <HAL_DMA_Init+0x1d4>)
 8005ecc:	4293      	cmp	r3, r2
 8005ece:	d027      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a2b      	ldr	r2, [pc, #172]	; (8005f84 <HAL_DMA_Init+0x1d8>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d022      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4a2a      	ldr	r2, [pc, #168]	; (8005f88 <HAL_DMA_Init+0x1dc>)
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	d01d      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a28      	ldr	r2, [pc, #160]	; (8005f8c <HAL_DMA_Init+0x1e0>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a27      	ldr	r2, [pc, #156]	; (8005f90 <HAL_DMA_Init+0x1e4>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a25      	ldr	r2, [pc, #148]	; (8005f94 <HAL_DMA_Init+0x1e8>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a24      	ldr	r2, [pc, #144]	; (8005f98 <HAL_DMA_Init+0x1ec>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a22      	ldr	r2, [pc, #136]	; (8005f9c <HAL_DMA_Init+0x1f0>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_DMA_Init+0x174>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a21      	ldr	r2, [pc, #132]	; (8005fa0 <HAL_DMA_Init+0x1f4>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d108      	bne.n	8005f32 <HAL_DMA_Init+0x186>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0201 	bic.w	r2, r2, #1
 8005f2e:	601a      	str	r2, [r3, #0]
 8005f30:	e007      	b.n	8005f42 <HAL_DMA_Init+0x196>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 0201 	bic.w	r2, r2, #1
 8005f40:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005f42:	e02f      	b.n	8005fa4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f44:	f7fd fe0a 	bl	8003b5c <HAL_GetTick>
 8005f48:	4602      	mov	r2, r0
 8005f4a:	693b      	ldr	r3, [r7, #16]
 8005f4c:	1ad3      	subs	r3, r2, r3
 8005f4e:	2b05      	cmp	r3, #5
 8005f50:	d928      	bls.n	8005fa4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	2220      	movs	r2, #32
 8005f56:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2203      	movs	r2, #3
 8005f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e246      	b.n	80063f2 <HAL_DMA_Init+0x646>
 8005f64:	40020010 	.word	0x40020010
 8005f68:	40020028 	.word	0x40020028
 8005f6c:	40020040 	.word	0x40020040
 8005f70:	40020058 	.word	0x40020058
 8005f74:	40020070 	.word	0x40020070
 8005f78:	40020088 	.word	0x40020088
 8005f7c:	400200a0 	.word	0x400200a0
 8005f80:	400200b8 	.word	0x400200b8
 8005f84:	40020410 	.word	0x40020410
 8005f88:	40020428 	.word	0x40020428
 8005f8c:	40020440 	.word	0x40020440
 8005f90:	40020458 	.word	0x40020458
 8005f94:	40020470 	.word	0x40020470
 8005f98:	40020488 	.word	0x40020488
 8005f9c:	400204a0 	.word	0x400204a0
 8005fa0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1c8      	bne.n	8005f44 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4b83      	ldr	r3, [pc, #524]	; (80061cc <HAL_DMA_Init+0x420>)
 8005fbe:	4013      	ands	r3, r2
 8005fc0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005fca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	691b      	ldr	r3, [r3, #16]
 8005fd0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005fd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	699b      	ldr	r3, [r3, #24]
 8005fdc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005fe2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a1b      	ldr	r3, [r3, #32]
 8005fe8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005fea:	697a      	ldr	r2, [r7, #20]
 8005fec:	4313      	orrs	r3, r2
 8005fee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ff4:	2b04      	cmp	r3, #4
 8005ff6:	d107      	bne.n	8006008 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006000:	4313      	orrs	r3, r2
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	4313      	orrs	r3, r2
 8006006:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8006008:	4b71      	ldr	r3, [pc, #452]	; (80061d0 <HAL_DMA_Init+0x424>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b71      	ldr	r3, [pc, #452]	; (80061d4 <HAL_DMA_Init+0x428>)
 800600e:	4013      	ands	r3, r2
 8006010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006014:	d328      	bcc.n	8006068 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b28      	cmp	r3, #40	; 0x28
 800601c:	d903      	bls.n	8006026 <HAL_DMA_Init+0x27a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	2b2e      	cmp	r3, #46	; 0x2e
 8006024:	d917      	bls.n	8006056 <HAL_DMA_Init+0x2aa>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2b3e      	cmp	r3, #62	; 0x3e
 800602c:	d903      	bls.n	8006036 <HAL_DMA_Init+0x28a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	2b42      	cmp	r3, #66	; 0x42
 8006034:	d90f      	bls.n	8006056 <HAL_DMA_Init+0x2aa>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	2b46      	cmp	r3, #70	; 0x46
 800603c:	d903      	bls.n	8006046 <HAL_DMA_Init+0x29a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	2b48      	cmp	r3, #72	; 0x48
 8006044:	d907      	bls.n	8006056 <HAL_DMA_Init+0x2aa>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	2b4e      	cmp	r3, #78	; 0x4e
 800604c:	d905      	bls.n	800605a <HAL_DMA_Init+0x2ae>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	2b52      	cmp	r3, #82	; 0x52
 8006054:	d801      	bhi.n	800605a <HAL_DMA_Init+0x2ae>
 8006056:	2301      	movs	r3, #1
 8006058:	e000      	b.n	800605c <HAL_DMA_Init+0x2b0>
 800605a:	2300      	movs	r3, #0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d003      	beq.n	8006068 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006066:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	697a      	ldr	r2, [r7, #20]
 800606e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	695b      	ldr	r3, [r3, #20]
 8006076:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f023 0307 	bic.w	r3, r3, #7
 800607e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	697a      	ldr	r2, [r7, #20]
 8006086:	4313      	orrs	r3, r2
 8006088:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800608e:	2b04      	cmp	r3, #4
 8006090:	d117      	bne.n	80060c2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006096:	697a      	ldr	r2, [r7, #20]
 8006098:	4313      	orrs	r3, r2
 800609a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d00e      	beq.n	80060c2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f002 fb33 	bl	8008710 <DMA_CheckFifoParam>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2240      	movs	r2, #64	; 0x40
 80060b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	e197      	b.n	80063f2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f002 fa6e 	bl	80085ac <DMA_CalcBaseAndBitshift>
 80060d0:	4603      	mov	r3, r0
 80060d2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d8:	f003 031f 	and.w	r3, r3, #31
 80060dc:	223f      	movs	r2, #63	; 0x3f
 80060de:	409a      	lsls	r2, r3
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	609a      	str	r2, [r3, #8]
 80060e4:	e0cd      	b.n	8006282 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a3b      	ldr	r2, [pc, #236]	; (80061d8 <HAL_DMA_Init+0x42c>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d022      	beq.n	8006136 <HAL_DMA_Init+0x38a>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a39      	ldr	r2, [pc, #228]	; (80061dc <HAL_DMA_Init+0x430>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d01d      	beq.n	8006136 <HAL_DMA_Init+0x38a>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a38      	ldr	r2, [pc, #224]	; (80061e0 <HAL_DMA_Init+0x434>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d018      	beq.n	8006136 <HAL_DMA_Init+0x38a>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a36      	ldr	r2, [pc, #216]	; (80061e4 <HAL_DMA_Init+0x438>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d013      	beq.n	8006136 <HAL_DMA_Init+0x38a>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a35      	ldr	r2, [pc, #212]	; (80061e8 <HAL_DMA_Init+0x43c>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d00e      	beq.n	8006136 <HAL_DMA_Init+0x38a>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a33      	ldr	r2, [pc, #204]	; (80061ec <HAL_DMA_Init+0x440>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d009      	beq.n	8006136 <HAL_DMA_Init+0x38a>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a32      	ldr	r2, [pc, #200]	; (80061f0 <HAL_DMA_Init+0x444>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d004      	beq.n	8006136 <HAL_DMA_Init+0x38a>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a30      	ldr	r2, [pc, #192]	; (80061f4 <HAL_DMA_Init+0x448>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d101      	bne.n	800613a <HAL_DMA_Init+0x38e>
 8006136:	2301      	movs	r3, #1
 8006138:	e000      	b.n	800613c <HAL_DMA_Init+0x390>
 800613a:	2300      	movs	r3, #0
 800613c:	2b00      	cmp	r3, #0
 800613e:	f000 8097 	beq.w	8006270 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	4a24      	ldr	r2, [pc, #144]	; (80061d8 <HAL_DMA_Init+0x42c>)
 8006148:	4293      	cmp	r3, r2
 800614a:	d021      	beq.n	8006190 <HAL_DMA_Init+0x3e4>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a22      	ldr	r2, [pc, #136]	; (80061dc <HAL_DMA_Init+0x430>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d01c      	beq.n	8006190 <HAL_DMA_Init+0x3e4>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a21      	ldr	r2, [pc, #132]	; (80061e0 <HAL_DMA_Init+0x434>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d017      	beq.n	8006190 <HAL_DMA_Init+0x3e4>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4a1f      	ldr	r2, [pc, #124]	; (80061e4 <HAL_DMA_Init+0x438>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d012      	beq.n	8006190 <HAL_DMA_Init+0x3e4>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1e      	ldr	r2, [pc, #120]	; (80061e8 <HAL_DMA_Init+0x43c>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d00d      	beq.n	8006190 <HAL_DMA_Init+0x3e4>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <HAL_DMA_Init+0x440>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d008      	beq.n	8006190 <HAL_DMA_Init+0x3e4>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <HAL_DMA_Init+0x444>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d003      	beq.n	8006190 <HAL_DMA_Init+0x3e4>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a19      	ldr	r2, [pc, #100]	; (80061f4 <HAL_DMA_Init+0x448>)
 800618e:	4293      	cmp	r3, r2
 8006190:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2202      	movs	r2, #2
 8006196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	4b12      	ldr	r3, [pc, #72]	; (80061f8 <HAL_DMA_Init+0x44c>)
 80061ae:	4013      	ands	r3, r2
 80061b0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	2b40      	cmp	r3, #64	; 0x40
 80061b8:	d020      	beq.n	80061fc <HAL_DMA_Init+0x450>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	2b80      	cmp	r3, #128	; 0x80
 80061c0:	d102      	bne.n	80061c8 <HAL_DMA_Init+0x41c>
 80061c2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061c6:	e01a      	b.n	80061fe <HAL_DMA_Init+0x452>
 80061c8:	2300      	movs	r3, #0
 80061ca:	e018      	b.n	80061fe <HAL_DMA_Init+0x452>
 80061cc:	fe10803f 	.word	0xfe10803f
 80061d0:	5c001000 	.word	0x5c001000
 80061d4:	ffff0000 	.word	0xffff0000
 80061d8:	58025408 	.word	0x58025408
 80061dc:	5802541c 	.word	0x5802541c
 80061e0:	58025430 	.word	0x58025430
 80061e4:	58025444 	.word	0x58025444
 80061e8:	58025458 	.word	0x58025458
 80061ec:	5802546c 	.word	0x5802546c
 80061f0:	58025480 	.word	0x58025480
 80061f4:	58025494 	.word	0x58025494
 80061f8:	fffe000f 	.word	0xfffe000f
 80061fc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	68d2      	ldr	r2, [r2, #12]
 8006202:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006204:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800620c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	695b      	ldr	r3, [r3, #20]
 8006212:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006214:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800621c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	69db      	ldr	r3, [r3, #28]
 8006222:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006224:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6a1b      	ldr	r3, [r3, #32]
 800622a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800622c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800622e:	697a      	ldr	r2, [r7, #20]
 8006230:	4313      	orrs	r3, r2
 8006232:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	697a      	ldr	r2, [r7, #20]
 800623a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	461a      	mov	r2, r3
 8006242:	4b6e      	ldr	r3, [pc, #440]	; (80063fc <HAL_DMA_Init+0x650>)
 8006244:	4413      	add	r3, r2
 8006246:	4a6e      	ldr	r2, [pc, #440]	; (8006400 <HAL_DMA_Init+0x654>)
 8006248:	fba2 2303 	umull	r2, r3, r2, r3
 800624c:	091b      	lsrs	r3, r3, #4
 800624e:	009a      	lsls	r2, r3, #2
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f002 f9a9 	bl	80085ac <DMA_CalcBaseAndBitshift>
 800625a:	4603      	mov	r3, r0
 800625c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006262:	f003 031f 	and.w	r3, r3, #31
 8006266:	2201      	movs	r2, #1
 8006268:	409a      	lsls	r2, r3
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	605a      	str	r2, [r3, #4]
 800626e:	e008      	b.n	8006282 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2240      	movs	r2, #64	; 0x40
 8006274:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2203      	movs	r2, #3
 800627a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e0b7      	b.n	80063f2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	4a5f      	ldr	r2, [pc, #380]	; (8006404 <HAL_DMA_Init+0x658>)
 8006288:	4293      	cmp	r3, r2
 800628a:	d072      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a5d      	ldr	r2, [pc, #372]	; (8006408 <HAL_DMA_Init+0x65c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d06d      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a5c      	ldr	r2, [pc, #368]	; (800640c <HAL_DMA_Init+0x660>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d068      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a5a      	ldr	r2, [pc, #360]	; (8006410 <HAL_DMA_Init+0x664>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d063      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a59      	ldr	r2, [pc, #356]	; (8006414 <HAL_DMA_Init+0x668>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d05e      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a57      	ldr	r2, [pc, #348]	; (8006418 <HAL_DMA_Init+0x66c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d059      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a56      	ldr	r2, [pc, #344]	; (800641c <HAL_DMA_Init+0x670>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d054      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a54      	ldr	r2, [pc, #336]	; (8006420 <HAL_DMA_Init+0x674>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d04f      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a53      	ldr	r2, [pc, #332]	; (8006424 <HAL_DMA_Init+0x678>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d04a      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a51      	ldr	r2, [pc, #324]	; (8006428 <HAL_DMA_Init+0x67c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d045      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a50      	ldr	r2, [pc, #320]	; (800642c <HAL_DMA_Init+0x680>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d040      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a4e      	ldr	r2, [pc, #312]	; (8006430 <HAL_DMA_Init+0x684>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d03b      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a4d      	ldr	r2, [pc, #308]	; (8006434 <HAL_DMA_Init+0x688>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d036      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a4b      	ldr	r2, [pc, #300]	; (8006438 <HAL_DMA_Init+0x68c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d031      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a4a      	ldr	r2, [pc, #296]	; (800643c <HAL_DMA_Init+0x690>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d02c      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	4a48      	ldr	r2, [pc, #288]	; (8006440 <HAL_DMA_Init+0x694>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d027      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a47      	ldr	r2, [pc, #284]	; (8006444 <HAL_DMA_Init+0x698>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d022      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a45      	ldr	r2, [pc, #276]	; (8006448 <HAL_DMA_Init+0x69c>)
 8006332:	4293      	cmp	r3, r2
 8006334:	d01d      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	4a44      	ldr	r2, [pc, #272]	; (800644c <HAL_DMA_Init+0x6a0>)
 800633c:	4293      	cmp	r3, r2
 800633e:	d018      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a42      	ldr	r2, [pc, #264]	; (8006450 <HAL_DMA_Init+0x6a4>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d013      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4a41      	ldr	r2, [pc, #260]	; (8006454 <HAL_DMA_Init+0x6a8>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d00e      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	4a3f      	ldr	r2, [pc, #252]	; (8006458 <HAL_DMA_Init+0x6ac>)
 800635a:	4293      	cmp	r3, r2
 800635c:	d009      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a3e      	ldr	r2, [pc, #248]	; (800645c <HAL_DMA_Init+0x6b0>)
 8006364:	4293      	cmp	r3, r2
 8006366:	d004      	beq.n	8006372 <HAL_DMA_Init+0x5c6>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a3c      	ldr	r2, [pc, #240]	; (8006460 <HAL_DMA_Init+0x6b4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d101      	bne.n	8006376 <HAL_DMA_Init+0x5ca>
 8006372:	2301      	movs	r3, #1
 8006374:	e000      	b.n	8006378 <HAL_DMA_Init+0x5cc>
 8006376:	2300      	movs	r3, #0
 8006378:	2b00      	cmp	r3, #0
 800637a:	d032      	beq.n	80063e2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f002 fa43 	bl	8008808 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	2b80      	cmp	r3, #128	; 0x80
 8006388:	d102      	bne.n	8006390 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685a      	ldr	r2, [r3, #4]
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006398:	b2d2      	uxtb	r2, r2
 800639a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80063a4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d010      	beq.n	80063d0 <HAL_DMA_Init+0x624>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	2b08      	cmp	r3, #8
 80063b4:	d80c      	bhi.n	80063d0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f002 fac0 	bl	800893c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80063cc:	605a      	str	r2, [r3, #4]
 80063ce:	e008      	b.n	80063e2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2200      	movs	r2, #0
 80063e0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	a7fdabf8 	.word	0xa7fdabf8
 8006400:	cccccccd 	.word	0xcccccccd
 8006404:	40020010 	.word	0x40020010
 8006408:	40020028 	.word	0x40020028
 800640c:	40020040 	.word	0x40020040
 8006410:	40020058 	.word	0x40020058
 8006414:	40020070 	.word	0x40020070
 8006418:	40020088 	.word	0x40020088
 800641c:	400200a0 	.word	0x400200a0
 8006420:	400200b8 	.word	0x400200b8
 8006424:	40020410 	.word	0x40020410
 8006428:	40020428 	.word	0x40020428
 800642c:	40020440 	.word	0x40020440
 8006430:	40020458 	.word	0x40020458
 8006434:	40020470 	.word	0x40020470
 8006438:	40020488 	.word	0x40020488
 800643c:	400204a0 	.word	0x400204a0
 8006440:	400204b8 	.word	0x400204b8
 8006444:	58025408 	.word	0x58025408
 8006448:	5802541c 	.word	0x5802541c
 800644c:	58025430 	.word	0x58025430
 8006450:	58025444 	.word	0x58025444
 8006454:	58025458 	.word	0x58025458
 8006458:	5802546c 	.word	0x5802546c
 800645c:	58025480 	.word	0x58025480
 8006460:	58025494 	.word	0x58025494

08006464 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
 8006470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006472:	2300      	movs	r3, #0
 8006474:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e226      	b.n	80068ce <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006486:	2b01      	cmp	r3, #1
 8006488:	d101      	bne.n	800648e <HAL_DMA_Start_IT+0x2a>
 800648a:	2302      	movs	r3, #2
 800648c:	e21f      	b.n	80068ce <HAL_DMA_Start_IT+0x46a>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2201      	movs	r2, #1
 8006492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b01      	cmp	r3, #1
 80064a0:	f040 820a 	bne.w	80068b8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2202      	movs	r2, #2
 80064a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a68      	ldr	r2, [pc, #416]	; (8006658 <HAL_DMA_Start_IT+0x1f4>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d04a      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a66      	ldr	r2, [pc, #408]	; (800665c <HAL_DMA_Start_IT+0x1f8>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d045      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a65      	ldr	r2, [pc, #404]	; (8006660 <HAL_DMA_Start_IT+0x1fc>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d040      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a63      	ldr	r2, [pc, #396]	; (8006664 <HAL_DMA_Start_IT+0x200>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d03b      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a62      	ldr	r2, [pc, #392]	; (8006668 <HAL_DMA_Start_IT+0x204>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d036      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a60      	ldr	r2, [pc, #384]	; (800666c <HAL_DMA_Start_IT+0x208>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d031      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a5f      	ldr	r2, [pc, #380]	; (8006670 <HAL_DMA_Start_IT+0x20c>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d02c      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a5d      	ldr	r2, [pc, #372]	; (8006674 <HAL_DMA_Start_IT+0x210>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d027      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a5c      	ldr	r2, [pc, #368]	; (8006678 <HAL_DMA_Start_IT+0x214>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d022      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a5a      	ldr	r2, [pc, #360]	; (800667c <HAL_DMA_Start_IT+0x218>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d01d      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a59      	ldr	r2, [pc, #356]	; (8006680 <HAL_DMA_Start_IT+0x21c>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d018      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a57      	ldr	r2, [pc, #348]	; (8006684 <HAL_DMA_Start_IT+0x220>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d013      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a56      	ldr	r2, [pc, #344]	; (8006688 <HAL_DMA_Start_IT+0x224>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d00e      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a54      	ldr	r2, [pc, #336]	; (800668c <HAL_DMA_Start_IT+0x228>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d009      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4a53      	ldr	r2, [pc, #332]	; (8006690 <HAL_DMA_Start_IT+0x22c>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d004      	beq.n	8006552 <HAL_DMA_Start_IT+0xee>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a51      	ldr	r2, [pc, #324]	; (8006694 <HAL_DMA_Start_IT+0x230>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d108      	bne.n	8006564 <HAL_DMA_Start_IT+0x100>
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681a      	ldr	r2, [r3, #0]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 0201 	bic.w	r2, r2, #1
 8006560:	601a      	str	r2, [r3, #0]
 8006562:	e007      	b.n	8006574 <HAL_DMA_Start_IT+0x110>
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f022 0201 	bic.w	r2, r2, #1
 8006572:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	687a      	ldr	r2, [r7, #4]
 8006578:	68b9      	ldr	r1, [r7, #8]
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f001 fe6a 	bl	8008254 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4a34      	ldr	r2, [pc, #208]	; (8006658 <HAL_DMA_Start_IT+0x1f4>)
 8006586:	4293      	cmp	r3, r2
 8006588:	d04a      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a33      	ldr	r2, [pc, #204]	; (800665c <HAL_DMA_Start_IT+0x1f8>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d045      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a31      	ldr	r2, [pc, #196]	; (8006660 <HAL_DMA_Start_IT+0x1fc>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d040      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a30      	ldr	r2, [pc, #192]	; (8006664 <HAL_DMA_Start_IT+0x200>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d03b      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a2e      	ldr	r2, [pc, #184]	; (8006668 <HAL_DMA_Start_IT+0x204>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d036      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a2d      	ldr	r2, [pc, #180]	; (800666c <HAL_DMA_Start_IT+0x208>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d031      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a2b      	ldr	r2, [pc, #172]	; (8006670 <HAL_DMA_Start_IT+0x20c>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d02c      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a2a      	ldr	r2, [pc, #168]	; (8006674 <HAL_DMA_Start_IT+0x210>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d027      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a28      	ldr	r2, [pc, #160]	; (8006678 <HAL_DMA_Start_IT+0x214>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d022      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a27      	ldr	r2, [pc, #156]	; (800667c <HAL_DMA_Start_IT+0x218>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d01d      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a25      	ldr	r2, [pc, #148]	; (8006680 <HAL_DMA_Start_IT+0x21c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d018      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a24      	ldr	r2, [pc, #144]	; (8006684 <HAL_DMA_Start_IT+0x220>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d013      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a22      	ldr	r2, [pc, #136]	; (8006688 <HAL_DMA_Start_IT+0x224>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00e      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a21      	ldr	r2, [pc, #132]	; (800668c <HAL_DMA_Start_IT+0x228>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d009      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a1f      	ldr	r2, [pc, #124]	; (8006690 <HAL_DMA_Start_IT+0x22c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d004      	beq.n	8006620 <HAL_DMA_Start_IT+0x1bc>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a1e      	ldr	r2, [pc, #120]	; (8006694 <HAL_DMA_Start_IT+0x230>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d101      	bne.n	8006624 <HAL_DMA_Start_IT+0x1c0>
 8006620:	2301      	movs	r3, #1
 8006622:	e000      	b.n	8006626 <HAL_DMA_Start_IT+0x1c2>
 8006624:	2300      	movs	r3, #0
 8006626:	2b00      	cmp	r3, #0
 8006628:	d036      	beq.n	8006698 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f023 021e 	bic.w	r2, r3, #30
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f042 0216 	orr.w	r2, r2, #22
 800663c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	2b00      	cmp	r3, #0
 8006644:	d03e      	beq.n	80066c4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	681a      	ldr	r2, [r3, #0]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f042 0208 	orr.w	r2, r2, #8
 8006654:	601a      	str	r2, [r3, #0]
 8006656:	e035      	b.n	80066c4 <HAL_DMA_Start_IT+0x260>
 8006658:	40020010 	.word	0x40020010
 800665c:	40020028 	.word	0x40020028
 8006660:	40020040 	.word	0x40020040
 8006664:	40020058 	.word	0x40020058
 8006668:	40020070 	.word	0x40020070
 800666c:	40020088 	.word	0x40020088
 8006670:	400200a0 	.word	0x400200a0
 8006674:	400200b8 	.word	0x400200b8
 8006678:	40020410 	.word	0x40020410
 800667c:	40020428 	.word	0x40020428
 8006680:	40020440 	.word	0x40020440
 8006684:	40020458 	.word	0x40020458
 8006688:	40020470 	.word	0x40020470
 800668c:	40020488 	.word	0x40020488
 8006690:	400204a0 	.word	0x400204a0
 8006694:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f023 020e 	bic.w	r2, r3, #14
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f042 020a 	orr.w	r2, r2, #10
 80066aa:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f042 0204 	orr.w	r2, r2, #4
 80066c2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a83      	ldr	r2, [pc, #524]	; (80068d8 <HAL_DMA_Start_IT+0x474>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d072      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a82      	ldr	r2, [pc, #520]	; (80068dc <HAL_DMA_Start_IT+0x478>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d06d      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a80      	ldr	r2, [pc, #512]	; (80068e0 <HAL_DMA_Start_IT+0x47c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d068      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a7f      	ldr	r2, [pc, #508]	; (80068e4 <HAL_DMA_Start_IT+0x480>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d063      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a7d      	ldr	r2, [pc, #500]	; (80068e8 <HAL_DMA_Start_IT+0x484>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d05e      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a7c      	ldr	r2, [pc, #496]	; (80068ec <HAL_DMA_Start_IT+0x488>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d059      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a7a      	ldr	r2, [pc, #488]	; (80068f0 <HAL_DMA_Start_IT+0x48c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d054      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a79      	ldr	r2, [pc, #484]	; (80068f4 <HAL_DMA_Start_IT+0x490>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d04f      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a77      	ldr	r2, [pc, #476]	; (80068f8 <HAL_DMA_Start_IT+0x494>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d04a      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a76      	ldr	r2, [pc, #472]	; (80068fc <HAL_DMA_Start_IT+0x498>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d045      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a74      	ldr	r2, [pc, #464]	; (8006900 <HAL_DMA_Start_IT+0x49c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d040      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a73      	ldr	r2, [pc, #460]	; (8006904 <HAL_DMA_Start_IT+0x4a0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d03b      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a71      	ldr	r2, [pc, #452]	; (8006908 <HAL_DMA_Start_IT+0x4a4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d036      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a70      	ldr	r2, [pc, #448]	; (800690c <HAL_DMA_Start_IT+0x4a8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d031      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a6e      	ldr	r2, [pc, #440]	; (8006910 <HAL_DMA_Start_IT+0x4ac>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d02c      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a6d      	ldr	r2, [pc, #436]	; (8006914 <HAL_DMA_Start_IT+0x4b0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d027      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	4a6b      	ldr	r2, [pc, #428]	; (8006918 <HAL_DMA_Start_IT+0x4b4>)
 800676a:	4293      	cmp	r3, r2
 800676c:	d022      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a6a      	ldr	r2, [pc, #424]	; (800691c <HAL_DMA_Start_IT+0x4b8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d01d      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4a68      	ldr	r2, [pc, #416]	; (8006920 <HAL_DMA_Start_IT+0x4bc>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d018      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a67      	ldr	r2, [pc, #412]	; (8006924 <HAL_DMA_Start_IT+0x4c0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d013      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4a65      	ldr	r2, [pc, #404]	; (8006928 <HAL_DMA_Start_IT+0x4c4>)
 8006792:	4293      	cmp	r3, r2
 8006794:	d00e      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a64      	ldr	r2, [pc, #400]	; (800692c <HAL_DMA_Start_IT+0x4c8>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d009      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a62      	ldr	r2, [pc, #392]	; (8006930 <HAL_DMA_Start_IT+0x4cc>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d004      	beq.n	80067b4 <HAL_DMA_Start_IT+0x350>
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a61      	ldr	r2, [pc, #388]	; (8006934 <HAL_DMA_Start_IT+0x4d0>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d101      	bne.n	80067b8 <HAL_DMA_Start_IT+0x354>
 80067b4:	2301      	movs	r3, #1
 80067b6:	e000      	b.n	80067ba <HAL_DMA_Start_IT+0x356>
 80067b8:	2300      	movs	r3, #0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d01a      	beq.n	80067f4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067da:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067ee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80067f2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	4a37      	ldr	r2, [pc, #220]	; (80068d8 <HAL_DMA_Start_IT+0x474>)
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d04a      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4a36      	ldr	r2, [pc, #216]	; (80068dc <HAL_DMA_Start_IT+0x478>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d045      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4a34      	ldr	r2, [pc, #208]	; (80068e0 <HAL_DMA_Start_IT+0x47c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d040      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4a33      	ldr	r2, [pc, #204]	; (80068e4 <HAL_DMA_Start_IT+0x480>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d03b      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4a31      	ldr	r2, [pc, #196]	; (80068e8 <HAL_DMA_Start_IT+0x484>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d036      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a30      	ldr	r2, [pc, #192]	; (80068ec <HAL_DMA_Start_IT+0x488>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d031      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a2e      	ldr	r2, [pc, #184]	; (80068f0 <HAL_DMA_Start_IT+0x48c>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d02c      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4a2d      	ldr	r2, [pc, #180]	; (80068f4 <HAL_DMA_Start_IT+0x490>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d027      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	4a2b      	ldr	r2, [pc, #172]	; (80068f8 <HAL_DMA_Start_IT+0x494>)
 800684a:	4293      	cmp	r3, r2
 800684c:	d022      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a2a      	ldr	r2, [pc, #168]	; (80068fc <HAL_DMA_Start_IT+0x498>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d01d      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a28      	ldr	r2, [pc, #160]	; (8006900 <HAL_DMA_Start_IT+0x49c>)
 800685e:	4293      	cmp	r3, r2
 8006860:	d018      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a27      	ldr	r2, [pc, #156]	; (8006904 <HAL_DMA_Start_IT+0x4a0>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d013      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a25      	ldr	r2, [pc, #148]	; (8006908 <HAL_DMA_Start_IT+0x4a4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d00e      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a24      	ldr	r2, [pc, #144]	; (800690c <HAL_DMA_Start_IT+0x4a8>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d009      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	4a22      	ldr	r2, [pc, #136]	; (8006910 <HAL_DMA_Start_IT+0x4ac>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d004      	beq.n	8006894 <HAL_DMA_Start_IT+0x430>
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a21      	ldr	r2, [pc, #132]	; (8006914 <HAL_DMA_Start_IT+0x4b0>)
 8006890:	4293      	cmp	r3, r2
 8006892:	d108      	bne.n	80068a6 <HAL_DMA_Start_IT+0x442>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f042 0201 	orr.w	r2, r2, #1
 80068a2:	601a      	str	r2, [r3, #0]
 80068a4:	e012      	b.n	80068cc <HAL_DMA_Start_IT+0x468>
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f042 0201 	orr.w	r2, r2, #1
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	e009      	b.n	80068cc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068be:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80068cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	40020010 	.word	0x40020010
 80068dc:	40020028 	.word	0x40020028
 80068e0:	40020040 	.word	0x40020040
 80068e4:	40020058 	.word	0x40020058
 80068e8:	40020070 	.word	0x40020070
 80068ec:	40020088 	.word	0x40020088
 80068f0:	400200a0 	.word	0x400200a0
 80068f4:	400200b8 	.word	0x400200b8
 80068f8:	40020410 	.word	0x40020410
 80068fc:	40020428 	.word	0x40020428
 8006900:	40020440 	.word	0x40020440
 8006904:	40020458 	.word	0x40020458
 8006908:	40020470 	.word	0x40020470
 800690c:	40020488 	.word	0x40020488
 8006910:	400204a0 	.word	0x400204a0
 8006914:	400204b8 	.word	0x400204b8
 8006918:	58025408 	.word	0x58025408
 800691c:	5802541c 	.word	0x5802541c
 8006920:	58025430 	.word	0x58025430
 8006924:	58025444 	.word	0x58025444
 8006928:	58025458 	.word	0x58025458
 800692c:	5802546c 	.word	0x5802546c
 8006930:	58025480 	.word	0x58025480
 8006934:	58025494 	.word	0x58025494

08006938 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006940:	f7fd f90c 	bl	8003b5c <HAL_GetTick>
 8006944:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d101      	bne.n	8006950 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800694c:	2301      	movs	r3, #1
 800694e:	e2dc      	b.n	8006f0a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b02      	cmp	r3, #2
 800695a:	d008      	beq.n	800696e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2280      	movs	r2, #128	; 0x80
 8006960:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e2cd      	b.n	8006f0a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a76      	ldr	r2, [pc, #472]	; (8006b4c <HAL_DMA_Abort+0x214>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d04a      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a74      	ldr	r2, [pc, #464]	; (8006b50 <HAL_DMA_Abort+0x218>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d045      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a73      	ldr	r2, [pc, #460]	; (8006b54 <HAL_DMA_Abort+0x21c>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d040      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a71      	ldr	r2, [pc, #452]	; (8006b58 <HAL_DMA_Abort+0x220>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d03b      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a70      	ldr	r2, [pc, #448]	; (8006b5c <HAL_DMA_Abort+0x224>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d036      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a6e      	ldr	r2, [pc, #440]	; (8006b60 <HAL_DMA_Abort+0x228>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d031      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a6d      	ldr	r2, [pc, #436]	; (8006b64 <HAL_DMA_Abort+0x22c>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d02c      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a6b      	ldr	r2, [pc, #428]	; (8006b68 <HAL_DMA_Abort+0x230>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d027      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a6a      	ldr	r2, [pc, #424]	; (8006b6c <HAL_DMA_Abort+0x234>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d022      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a68      	ldr	r2, [pc, #416]	; (8006b70 <HAL_DMA_Abort+0x238>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d01d      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a67      	ldr	r2, [pc, #412]	; (8006b74 <HAL_DMA_Abort+0x23c>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d018      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4a65      	ldr	r2, [pc, #404]	; (8006b78 <HAL_DMA_Abort+0x240>)
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d013      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a64      	ldr	r2, [pc, #400]	; (8006b7c <HAL_DMA_Abort+0x244>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d00e      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a62      	ldr	r2, [pc, #392]	; (8006b80 <HAL_DMA_Abort+0x248>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d009      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a61      	ldr	r2, [pc, #388]	; (8006b84 <HAL_DMA_Abort+0x24c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d004      	beq.n	8006a0e <HAL_DMA_Abort+0xd6>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a5f      	ldr	r2, [pc, #380]	; (8006b88 <HAL_DMA_Abort+0x250>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d101      	bne.n	8006a12 <HAL_DMA_Abort+0xda>
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e000      	b.n	8006a14 <HAL_DMA_Abort+0xdc>
 8006a12:	2300      	movs	r3, #0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d013      	beq.n	8006a40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 021e 	bic.w	r2, r2, #30
 8006a26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	695a      	ldr	r2, [r3, #20]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	617b      	str	r3, [r7, #20]
 8006a3e:	e00a      	b.n	8006a56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 020e 	bic.w	r2, r2, #14
 8006a4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a3c      	ldr	r2, [pc, #240]	; (8006b4c <HAL_DMA_Abort+0x214>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d072      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a3a      	ldr	r2, [pc, #232]	; (8006b50 <HAL_DMA_Abort+0x218>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d06d      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a39      	ldr	r2, [pc, #228]	; (8006b54 <HAL_DMA_Abort+0x21c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d068      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a37      	ldr	r2, [pc, #220]	; (8006b58 <HAL_DMA_Abort+0x220>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d063      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a36      	ldr	r2, [pc, #216]	; (8006b5c <HAL_DMA_Abort+0x224>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d05e      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a34      	ldr	r2, [pc, #208]	; (8006b60 <HAL_DMA_Abort+0x228>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d059      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a33      	ldr	r2, [pc, #204]	; (8006b64 <HAL_DMA_Abort+0x22c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d054      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a31      	ldr	r2, [pc, #196]	; (8006b68 <HAL_DMA_Abort+0x230>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d04f      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a30      	ldr	r2, [pc, #192]	; (8006b6c <HAL_DMA_Abort+0x234>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d04a      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a2e      	ldr	r2, [pc, #184]	; (8006b70 <HAL_DMA_Abort+0x238>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d045      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a2d      	ldr	r2, [pc, #180]	; (8006b74 <HAL_DMA_Abort+0x23c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d040      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a2b      	ldr	r2, [pc, #172]	; (8006b78 <HAL_DMA_Abort+0x240>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d03b      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a2a      	ldr	r2, [pc, #168]	; (8006b7c <HAL_DMA_Abort+0x244>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d036      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a28      	ldr	r2, [pc, #160]	; (8006b80 <HAL_DMA_Abort+0x248>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d031      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a27      	ldr	r2, [pc, #156]	; (8006b84 <HAL_DMA_Abort+0x24c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d02c      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a25      	ldr	r2, [pc, #148]	; (8006b88 <HAL_DMA_Abort+0x250>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d027      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a24      	ldr	r2, [pc, #144]	; (8006b8c <HAL_DMA_Abort+0x254>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d022      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a22      	ldr	r2, [pc, #136]	; (8006b90 <HAL_DMA_Abort+0x258>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d01d      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a21      	ldr	r2, [pc, #132]	; (8006b94 <HAL_DMA_Abort+0x25c>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d018      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a1f      	ldr	r2, [pc, #124]	; (8006b98 <HAL_DMA_Abort+0x260>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d013      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a1e      	ldr	r2, [pc, #120]	; (8006b9c <HAL_DMA_Abort+0x264>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d00e      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ba0 <HAL_DMA_Abort+0x268>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d009      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4a1b      	ldr	r2, [pc, #108]	; (8006ba4 <HAL_DMA_Abort+0x26c>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d004      	beq.n	8006b46 <HAL_DMA_Abort+0x20e>
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	4a19      	ldr	r2, [pc, #100]	; (8006ba8 <HAL_DMA_Abort+0x270>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d132      	bne.n	8006bac <HAL_DMA_Abort+0x274>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e031      	b.n	8006bae <HAL_DMA_Abort+0x276>
 8006b4a:	bf00      	nop
 8006b4c:	40020010 	.word	0x40020010
 8006b50:	40020028 	.word	0x40020028
 8006b54:	40020040 	.word	0x40020040
 8006b58:	40020058 	.word	0x40020058
 8006b5c:	40020070 	.word	0x40020070
 8006b60:	40020088 	.word	0x40020088
 8006b64:	400200a0 	.word	0x400200a0
 8006b68:	400200b8 	.word	0x400200b8
 8006b6c:	40020410 	.word	0x40020410
 8006b70:	40020428 	.word	0x40020428
 8006b74:	40020440 	.word	0x40020440
 8006b78:	40020458 	.word	0x40020458
 8006b7c:	40020470 	.word	0x40020470
 8006b80:	40020488 	.word	0x40020488
 8006b84:	400204a0 	.word	0x400204a0
 8006b88:	400204b8 	.word	0x400204b8
 8006b8c:	58025408 	.word	0x58025408
 8006b90:	5802541c 	.word	0x5802541c
 8006b94:	58025430 	.word	0x58025430
 8006b98:	58025444 	.word	0x58025444
 8006b9c:	58025458 	.word	0x58025458
 8006ba0:	5802546c 	.word	0x5802546c
 8006ba4:	58025480 	.word	0x58025480
 8006ba8:	58025494 	.word	0x58025494
 8006bac:	2300      	movs	r3, #0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d007      	beq.n	8006bc2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a6d      	ldr	r2, [pc, #436]	; (8006d7c <HAL_DMA_Abort+0x444>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d04a      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a6b      	ldr	r2, [pc, #428]	; (8006d80 <HAL_DMA_Abort+0x448>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d045      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a6a      	ldr	r2, [pc, #424]	; (8006d84 <HAL_DMA_Abort+0x44c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d040      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a68      	ldr	r2, [pc, #416]	; (8006d88 <HAL_DMA_Abort+0x450>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d03b      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a67      	ldr	r2, [pc, #412]	; (8006d8c <HAL_DMA_Abort+0x454>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d036      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a65      	ldr	r2, [pc, #404]	; (8006d90 <HAL_DMA_Abort+0x458>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d031      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a64      	ldr	r2, [pc, #400]	; (8006d94 <HAL_DMA_Abort+0x45c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d02c      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a62      	ldr	r2, [pc, #392]	; (8006d98 <HAL_DMA_Abort+0x460>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d027      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a61      	ldr	r2, [pc, #388]	; (8006d9c <HAL_DMA_Abort+0x464>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d022      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	4a5f      	ldr	r2, [pc, #380]	; (8006da0 <HAL_DMA_Abort+0x468>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d01d      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	4a5e      	ldr	r2, [pc, #376]	; (8006da4 <HAL_DMA_Abort+0x46c>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d018      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a5c      	ldr	r2, [pc, #368]	; (8006da8 <HAL_DMA_Abort+0x470>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d013      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a5b      	ldr	r2, [pc, #364]	; (8006dac <HAL_DMA_Abort+0x474>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00e      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a59      	ldr	r2, [pc, #356]	; (8006db0 <HAL_DMA_Abort+0x478>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d009      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	4a58      	ldr	r2, [pc, #352]	; (8006db4 <HAL_DMA_Abort+0x47c>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d004      	beq.n	8006c62 <HAL_DMA_Abort+0x32a>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	4a56      	ldr	r2, [pc, #344]	; (8006db8 <HAL_DMA_Abort+0x480>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d108      	bne.n	8006c74 <HAL_DMA_Abort+0x33c>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	e007      	b.n	8006c84 <HAL_DMA_Abort+0x34c>
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f022 0201 	bic.w	r2, r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006c84:	e013      	b.n	8006cae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006c86:	f7fc ff69 	bl	8003b5c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b05      	cmp	r3, #5
 8006c92:	d90c      	bls.n	8006cae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2220      	movs	r2, #32
 8006c98:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006caa:	2301      	movs	r3, #1
 8006cac:	e12d      	b.n	8006f0a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0301 	and.w	r3, r3, #1
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1e5      	bne.n	8006c86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	4a2f      	ldr	r2, [pc, #188]	; (8006d7c <HAL_DMA_Abort+0x444>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d04a      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	4a2d      	ldr	r2, [pc, #180]	; (8006d80 <HAL_DMA_Abort+0x448>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d045      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a2c      	ldr	r2, [pc, #176]	; (8006d84 <HAL_DMA_Abort+0x44c>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d040      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	4a2a      	ldr	r2, [pc, #168]	; (8006d88 <HAL_DMA_Abort+0x450>)
 8006cde:	4293      	cmp	r3, r2
 8006ce0:	d03b      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4a29      	ldr	r2, [pc, #164]	; (8006d8c <HAL_DMA_Abort+0x454>)
 8006ce8:	4293      	cmp	r3, r2
 8006cea:	d036      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <HAL_DMA_Abort+0x458>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	4a26      	ldr	r2, [pc, #152]	; (8006d94 <HAL_DMA_Abort+0x45c>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d02c      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a24      	ldr	r2, [pc, #144]	; (8006d98 <HAL_DMA_Abort+0x460>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d027      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a23      	ldr	r2, [pc, #140]	; (8006d9c <HAL_DMA_Abort+0x464>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d022      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	4a21      	ldr	r2, [pc, #132]	; (8006da0 <HAL_DMA_Abort+0x468>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d01d      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a20      	ldr	r2, [pc, #128]	; (8006da4 <HAL_DMA_Abort+0x46c>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d018      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	4a1e      	ldr	r2, [pc, #120]	; (8006da8 <HAL_DMA_Abort+0x470>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d013      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	4a1d      	ldr	r2, [pc, #116]	; (8006dac <HAL_DMA_Abort+0x474>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00e      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a1b      	ldr	r2, [pc, #108]	; (8006db0 <HAL_DMA_Abort+0x478>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d009      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	4a1a      	ldr	r2, [pc, #104]	; (8006db4 <HAL_DMA_Abort+0x47c>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d004      	beq.n	8006d5a <HAL_DMA_Abort+0x422>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a18      	ldr	r2, [pc, #96]	; (8006db8 <HAL_DMA_Abort+0x480>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d101      	bne.n	8006d5e <HAL_DMA_Abort+0x426>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <HAL_DMA_Abort+0x428>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d02b      	beq.n	8006dbc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d68:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d6e:	f003 031f 	and.w	r3, r3, #31
 8006d72:	223f      	movs	r2, #63	; 0x3f
 8006d74:	409a      	lsls	r2, r3
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	609a      	str	r2, [r3, #8]
 8006d7a:	e02a      	b.n	8006dd2 <HAL_DMA_Abort+0x49a>
 8006d7c:	40020010 	.word	0x40020010
 8006d80:	40020028 	.word	0x40020028
 8006d84:	40020040 	.word	0x40020040
 8006d88:	40020058 	.word	0x40020058
 8006d8c:	40020070 	.word	0x40020070
 8006d90:	40020088 	.word	0x40020088
 8006d94:	400200a0 	.word	0x400200a0
 8006d98:	400200b8 	.word	0x400200b8
 8006d9c:	40020410 	.word	0x40020410
 8006da0:	40020428 	.word	0x40020428
 8006da4:	40020440 	.word	0x40020440
 8006da8:	40020458 	.word	0x40020458
 8006dac:	40020470 	.word	0x40020470
 8006db0:	40020488 	.word	0x40020488
 8006db4:	400204a0 	.word	0x400204a0
 8006db8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dc6:	f003 031f 	and.w	r3, r3, #31
 8006dca:	2201      	movs	r2, #1
 8006dcc:	409a      	lsls	r2, r3
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	4a4f      	ldr	r2, [pc, #316]	; (8006f14 <HAL_DMA_Abort+0x5dc>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d072      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	4a4d      	ldr	r2, [pc, #308]	; (8006f18 <HAL_DMA_Abort+0x5e0>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d06d      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a4c      	ldr	r2, [pc, #304]	; (8006f1c <HAL_DMA_Abort+0x5e4>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d068      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a4a      	ldr	r2, [pc, #296]	; (8006f20 <HAL_DMA_Abort+0x5e8>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d063      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a49      	ldr	r2, [pc, #292]	; (8006f24 <HAL_DMA_Abort+0x5ec>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d05e      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a47      	ldr	r2, [pc, #284]	; (8006f28 <HAL_DMA_Abort+0x5f0>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d059      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a46      	ldr	r2, [pc, #280]	; (8006f2c <HAL_DMA_Abort+0x5f4>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d054      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a44      	ldr	r2, [pc, #272]	; (8006f30 <HAL_DMA_Abort+0x5f8>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d04f      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	4a43      	ldr	r2, [pc, #268]	; (8006f34 <HAL_DMA_Abort+0x5fc>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d04a      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4a41      	ldr	r2, [pc, #260]	; (8006f38 <HAL_DMA_Abort+0x600>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d045      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	4a40      	ldr	r2, [pc, #256]	; (8006f3c <HAL_DMA_Abort+0x604>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d040      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a3e      	ldr	r2, [pc, #248]	; (8006f40 <HAL_DMA_Abort+0x608>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d03b      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	4a3d      	ldr	r2, [pc, #244]	; (8006f44 <HAL_DMA_Abort+0x60c>)
 8006e50:	4293      	cmp	r3, r2
 8006e52:	d036      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4a3b      	ldr	r2, [pc, #236]	; (8006f48 <HAL_DMA_Abort+0x610>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d031      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a3a      	ldr	r2, [pc, #232]	; (8006f4c <HAL_DMA_Abort+0x614>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d02c      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a38      	ldr	r2, [pc, #224]	; (8006f50 <HAL_DMA_Abort+0x618>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d027      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4a37      	ldr	r2, [pc, #220]	; (8006f54 <HAL_DMA_Abort+0x61c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d022      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a35      	ldr	r2, [pc, #212]	; (8006f58 <HAL_DMA_Abort+0x620>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d01d      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	4a34      	ldr	r2, [pc, #208]	; (8006f5c <HAL_DMA_Abort+0x624>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d018      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a32      	ldr	r2, [pc, #200]	; (8006f60 <HAL_DMA_Abort+0x628>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d013      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a31      	ldr	r2, [pc, #196]	; (8006f64 <HAL_DMA_Abort+0x62c>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d00e      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a2f      	ldr	r2, [pc, #188]	; (8006f68 <HAL_DMA_Abort+0x630>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a2e      	ldr	r2, [pc, #184]	; (8006f6c <HAL_DMA_Abort+0x634>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d004      	beq.n	8006ec2 <HAL_DMA_Abort+0x58a>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a2c      	ldr	r2, [pc, #176]	; (8006f70 <HAL_DMA_Abort+0x638>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d101      	bne.n	8006ec6 <HAL_DMA_Abort+0x58e>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <HAL_DMA_Abort+0x590>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d015      	beq.n	8006ef8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006ed4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00c      	beq.n	8006ef8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee2:	681a      	ldr	r2, [r3, #0]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006eec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006ef6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3718      	adds	r7, #24
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	40020010 	.word	0x40020010
 8006f18:	40020028 	.word	0x40020028
 8006f1c:	40020040 	.word	0x40020040
 8006f20:	40020058 	.word	0x40020058
 8006f24:	40020070 	.word	0x40020070
 8006f28:	40020088 	.word	0x40020088
 8006f2c:	400200a0 	.word	0x400200a0
 8006f30:	400200b8 	.word	0x400200b8
 8006f34:	40020410 	.word	0x40020410
 8006f38:	40020428 	.word	0x40020428
 8006f3c:	40020440 	.word	0x40020440
 8006f40:	40020458 	.word	0x40020458
 8006f44:	40020470 	.word	0x40020470
 8006f48:	40020488 	.word	0x40020488
 8006f4c:	400204a0 	.word	0x400204a0
 8006f50:	400204b8 	.word	0x400204b8
 8006f54:	58025408 	.word	0x58025408
 8006f58:	5802541c 	.word	0x5802541c
 8006f5c:	58025430 	.word	0x58025430
 8006f60:	58025444 	.word	0x58025444
 8006f64:	58025458 	.word	0x58025458
 8006f68:	5802546c 	.word	0x5802546c
 8006f6c:	58025480 	.word	0x58025480
 8006f70:	58025494 	.word	0x58025494

08006f74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d101      	bne.n	8006f86 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006f82:	2301      	movs	r3, #1
 8006f84:	e237      	b.n	80073f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f8c:	b2db      	uxtb	r3, r3
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d004      	beq.n	8006f9c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2280      	movs	r2, #128	; 0x80
 8006f96:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e22c      	b.n	80073f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a5c      	ldr	r2, [pc, #368]	; (8007114 <HAL_DMA_Abort_IT+0x1a0>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d04a      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a5b      	ldr	r2, [pc, #364]	; (8007118 <HAL_DMA_Abort_IT+0x1a4>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d045      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a59      	ldr	r2, [pc, #356]	; (800711c <HAL_DMA_Abort_IT+0x1a8>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d040      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a58      	ldr	r2, [pc, #352]	; (8007120 <HAL_DMA_Abort_IT+0x1ac>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d03b      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a56      	ldr	r2, [pc, #344]	; (8007124 <HAL_DMA_Abort_IT+0x1b0>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d036      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a55      	ldr	r2, [pc, #340]	; (8007128 <HAL_DMA_Abort_IT+0x1b4>)
 8006fd4:	4293      	cmp	r3, r2
 8006fd6:	d031      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a53      	ldr	r2, [pc, #332]	; (800712c <HAL_DMA_Abort_IT+0x1b8>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d02c      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a52      	ldr	r2, [pc, #328]	; (8007130 <HAL_DMA_Abort_IT+0x1bc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d027      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a50      	ldr	r2, [pc, #320]	; (8007134 <HAL_DMA_Abort_IT+0x1c0>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d022      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a4f      	ldr	r2, [pc, #316]	; (8007138 <HAL_DMA_Abort_IT+0x1c4>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d01d      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a4d      	ldr	r2, [pc, #308]	; (800713c <HAL_DMA_Abort_IT+0x1c8>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d018      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a4c      	ldr	r2, [pc, #304]	; (8007140 <HAL_DMA_Abort_IT+0x1cc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d013      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a4a      	ldr	r2, [pc, #296]	; (8007144 <HAL_DMA_Abort_IT+0x1d0>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d00e      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a49      	ldr	r2, [pc, #292]	; (8007148 <HAL_DMA_Abort_IT+0x1d4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d009      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a47      	ldr	r2, [pc, #284]	; (800714c <HAL_DMA_Abort_IT+0x1d8>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d004      	beq.n	800703c <HAL_DMA_Abort_IT+0xc8>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a46      	ldr	r2, [pc, #280]	; (8007150 <HAL_DMA_Abort_IT+0x1dc>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d101      	bne.n	8007040 <HAL_DMA_Abort_IT+0xcc>
 800703c:	2301      	movs	r3, #1
 800703e:	e000      	b.n	8007042 <HAL_DMA_Abort_IT+0xce>
 8007040:	2300      	movs	r3, #0
 8007042:	2b00      	cmp	r3, #0
 8007044:	f000 8086 	beq.w	8007154 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2204      	movs	r2, #4
 800704c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a2f      	ldr	r2, [pc, #188]	; (8007114 <HAL_DMA_Abort_IT+0x1a0>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d04a      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a2e      	ldr	r2, [pc, #184]	; (8007118 <HAL_DMA_Abort_IT+0x1a4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d045      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a2c      	ldr	r2, [pc, #176]	; (800711c <HAL_DMA_Abort_IT+0x1a8>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d040      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a2b      	ldr	r2, [pc, #172]	; (8007120 <HAL_DMA_Abort_IT+0x1ac>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d03b      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a29      	ldr	r2, [pc, #164]	; (8007124 <HAL_DMA_Abort_IT+0x1b0>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d036      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a28      	ldr	r2, [pc, #160]	; (8007128 <HAL_DMA_Abort_IT+0x1b4>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d031      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a26      	ldr	r2, [pc, #152]	; (800712c <HAL_DMA_Abort_IT+0x1b8>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d02c      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a25      	ldr	r2, [pc, #148]	; (8007130 <HAL_DMA_Abort_IT+0x1bc>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d027      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a23      	ldr	r2, [pc, #140]	; (8007134 <HAL_DMA_Abort_IT+0x1c0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d022      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a22      	ldr	r2, [pc, #136]	; (8007138 <HAL_DMA_Abort_IT+0x1c4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d01d      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a20      	ldr	r2, [pc, #128]	; (800713c <HAL_DMA_Abort_IT+0x1c8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d018      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a1f      	ldr	r2, [pc, #124]	; (8007140 <HAL_DMA_Abort_IT+0x1cc>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d013      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1d      	ldr	r2, [pc, #116]	; (8007144 <HAL_DMA_Abort_IT+0x1d0>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d00e      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1c      	ldr	r2, [pc, #112]	; (8007148 <HAL_DMA_Abort_IT+0x1d4>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d009      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a1a      	ldr	r2, [pc, #104]	; (800714c <HAL_DMA_Abort_IT+0x1d8>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d004      	beq.n	80070f0 <HAL_DMA_Abort_IT+0x17c>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a19      	ldr	r2, [pc, #100]	; (8007150 <HAL_DMA_Abort_IT+0x1dc>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d108      	bne.n	8007102 <HAL_DMA_Abort_IT+0x18e>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0201 	bic.w	r2, r2, #1
 80070fe:	601a      	str	r2, [r3, #0]
 8007100:	e178      	b.n	80073f4 <HAL_DMA_Abort_IT+0x480>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	681a      	ldr	r2, [r3, #0]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f022 0201 	bic.w	r2, r2, #1
 8007110:	601a      	str	r2, [r3, #0]
 8007112:	e16f      	b.n	80073f4 <HAL_DMA_Abort_IT+0x480>
 8007114:	40020010 	.word	0x40020010
 8007118:	40020028 	.word	0x40020028
 800711c:	40020040 	.word	0x40020040
 8007120:	40020058 	.word	0x40020058
 8007124:	40020070 	.word	0x40020070
 8007128:	40020088 	.word	0x40020088
 800712c:	400200a0 	.word	0x400200a0
 8007130:	400200b8 	.word	0x400200b8
 8007134:	40020410 	.word	0x40020410
 8007138:	40020428 	.word	0x40020428
 800713c:	40020440 	.word	0x40020440
 8007140:	40020458 	.word	0x40020458
 8007144:	40020470 	.word	0x40020470
 8007148:	40020488 	.word	0x40020488
 800714c:	400204a0 	.word	0x400204a0
 8007150:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f022 020e 	bic.w	r2, r2, #14
 8007162:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a6c      	ldr	r2, [pc, #432]	; (800731c <HAL_DMA_Abort_IT+0x3a8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d04a      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a6b      	ldr	r2, [pc, #428]	; (8007320 <HAL_DMA_Abort_IT+0x3ac>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d045      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a69      	ldr	r2, [pc, #420]	; (8007324 <HAL_DMA_Abort_IT+0x3b0>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d040      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a68      	ldr	r2, [pc, #416]	; (8007328 <HAL_DMA_Abort_IT+0x3b4>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d03b      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a66      	ldr	r2, [pc, #408]	; (800732c <HAL_DMA_Abort_IT+0x3b8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d036      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a65      	ldr	r2, [pc, #404]	; (8007330 <HAL_DMA_Abort_IT+0x3bc>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d031      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a63      	ldr	r2, [pc, #396]	; (8007334 <HAL_DMA_Abort_IT+0x3c0>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d02c      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a62      	ldr	r2, [pc, #392]	; (8007338 <HAL_DMA_Abort_IT+0x3c4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d027      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a60      	ldr	r2, [pc, #384]	; (800733c <HAL_DMA_Abort_IT+0x3c8>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d022      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a5f      	ldr	r2, [pc, #380]	; (8007340 <HAL_DMA_Abort_IT+0x3cc>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d01d      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a5d      	ldr	r2, [pc, #372]	; (8007344 <HAL_DMA_Abort_IT+0x3d0>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d018      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a5c      	ldr	r2, [pc, #368]	; (8007348 <HAL_DMA_Abort_IT+0x3d4>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d013      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a5a      	ldr	r2, [pc, #360]	; (800734c <HAL_DMA_Abort_IT+0x3d8>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d00e      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a59      	ldr	r2, [pc, #356]	; (8007350 <HAL_DMA_Abort_IT+0x3dc>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d009      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a57      	ldr	r2, [pc, #348]	; (8007354 <HAL_DMA_Abort_IT+0x3e0>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d004      	beq.n	8007204 <HAL_DMA_Abort_IT+0x290>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a56      	ldr	r2, [pc, #344]	; (8007358 <HAL_DMA_Abort_IT+0x3e4>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d108      	bne.n	8007216 <HAL_DMA_Abort_IT+0x2a2>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f022 0201 	bic.w	r2, r2, #1
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	e007      	b.n	8007226 <HAL_DMA_Abort_IT+0x2b2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681a      	ldr	r2, [r3, #0]
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f022 0201 	bic.w	r2, r2, #1
 8007224:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a3c      	ldr	r2, [pc, #240]	; (800731c <HAL_DMA_Abort_IT+0x3a8>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d072      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a3a      	ldr	r2, [pc, #232]	; (8007320 <HAL_DMA_Abort_IT+0x3ac>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d06d      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4a39      	ldr	r2, [pc, #228]	; (8007324 <HAL_DMA_Abort_IT+0x3b0>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d068      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a37      	ldr	r2, [pc, #220]	; (8007328 <HAL_DMA_Abort_IT+0x3b4>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d063      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a36      	ldr	r2, [pc, #216]	; (800732c <HAL_DMA_Abort_IT+0x3b8>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d05e      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	4a34      	ldr	r2, [pc, #208]	; (8007330 <HAL_DMA_Abort_IT+0x3bc>)
 800725e:	4293      	cmp	r3, r2
 8007260:	d059      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a33      	ldr	r2, [pc, #204]	; (8007334 <HAL_DMA_Abort_IT+0x3c0>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d054      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a31      	ldr	r2, [pc, #196]	; (8007338 <HAL_DMA_Abort_IT+0x3c4>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d04f      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a30      	ldr	r2, [pc, #192]	; (800733c <HAL_DMA_Abort_IT+0x3c8>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d04a      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a2e      	ldr	r2, [pc, #184]	; (8007340 <HAL_DMA_Abort_IT+0x3cc>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d045      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a2d      	ldr	r2, [pc, #180]	; (8007344 <HAL_DMA_Abort_IT+0x3d0>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d040      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a2b      	ldr	r2, [pc, #172]	; (8007348 <HAL_DMA_Abort_IT+0x3d4>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d03b      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	4a2a      	ldr	r2, [pc, #168]	; (800734c <HAL_DMA_Abort_IT+0x3d8>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d036      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	4a28      	ldr	r2, [pc, #160]	; (8007350 <HAL_DMA_Abort_IT+0x3dc>)
 80072ae:	4293      	cmp	r3, r2
 80072b0:	d031      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	4a27      	ldr	r2, [pc, #156]	; (8007354 <HAL_DMA_Abort_IT+0x3e0>)
 80072b8:	4293      	cmp	r3, r2
 80072ba:	d02c      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a25      	ldr	r2, [pc, #148]	; (8007358 <HAL_DMA_Abort_IT+0x3e4>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d027      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a24      	ldr	r2, [pc, #144]	; (800735c <HAL_DMA_Abort_IT+0x3e8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d022      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a22      	ldr	r2, [pc, #136]	; (8007360 <HAL_DMA_Abort_IT+0x3ec>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d01d      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	4a21      	ldr	r2, [pc, #132]	; (8007364 <HAL_DMA_Abort_IT+0x3f0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d018      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4a1f      	ldr	r2, [pc, #124]	; (8007368 <HAL_DMA_Abort_IT+0x3f4>)
 80072ea:	4293      	cmp	r3, r2
 80072ec:	d013      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a1e      	ldr	r2, [pc, #120]	; (800736c <HAL_DMA_Abort_IT+0x3f8>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d00e      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a1c      	ldr	r2, [pc, #112]	; (8007370 <HAL_DMA_Abort_IT+0x3fc>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d009      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a1b      	ldr	r2, [pc, #108]	; (8007374 <HAL_DMA_Abort_IT+0x400>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d004      	beq.n	8007316 <HAL_DMA_Abort_IT+0x3a2>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a19      	ldr	r2, [pc, #100]	; (8007378 <HAL_DMA_Abort_IT+0x404>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d132      	bne.n	800737c <HAL_DMA_Abort_IT+0x408>
 8007316:	2301      	movs	r3, #1
 8007318:	e031      	b.n	800737e <HAL_DMA_Abort_IT+0x40a>
 800731a:	bf00      	nop
 800731c:	40020010 	.word	0x40020010
 8007320:	40020028 	.word	0x40020028
 8007324:	40020040 	.word	0x40020040
 8007328:	40020058 	.word	0x40020058
 800732c:	40020070 	.word	0x40020070
 8007330:	40020088 	.word	0x40020088
 8007334:	400200a0 	.word	0x400200a0
 8007338:	400200b8 	.word	0x400200b8
 800733c:	40020410 	.word	0x40020410
 8007340:	40020428 	.word	0x40020428
 8007344:	40020440 	.word	0x40020440
 8007348:	40020458 	.word	0x40020458
 800734c:	40020470 	.word	0x40020470
 8007350:	40020488 	.word	0x40020488
 8007354:	400204a0 	.word	0x400204a0
 8007358:	400204b8 	.word	0x400204b8
 800735c:	58025408 	.word	0x58025408
 8007360:	5802541c 	.word	0x5802541c
 8007364:	58025430 	.word	0x58025430
 8007368:	58025444 	.word	0x58025444
 800736c:	58025458 	.word	0x58025458
 8007370:	5802546c 	.word	0x5802546c
 8007374:	58025480 	.word	0x58025480
 8007378:	58025494 	.word	0x58025494
 800737c:	2300      	movs	r3, #0
 800737e:	2b00      	cmp	r3, #0
 8007380:	d028      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007386:	681a      	ldr	r2, [r3, #0]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800738c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007390:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007396:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800739c:	f003 031f 	and.w	r3, r3, #31
 80073a0:	2201      	movs	r2, #1
 80073a2:	409a      	lsls	r2, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80073b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00c      	beq.n	80073d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073be:	681a      	ldr	r2, [r3, #0]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80073d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2201      	movs	r2, #1
 80073d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80073f4:	2300      	movs	r3, #0
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3710      	adds	r7, #16
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop

08007400 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	; 0x28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800740c:	4b67      	ldr	r3, [pc, #412]	; (80075ac <HAL_DMA_IRQHandler+0x1ac>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a67      	ldr	r2, [pc, #412]	; (80075b0 <HAL_DMA_IRQHandler+0x1b0>)
 8007412:	fba2 2303 	umull	r2, r3, r2, r3
 8007416:	0a9b      	lsrs	r3, r3, #10
 8007418:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800741e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007424:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8007426:	6a3b      	ldr	r3, [r7, #32]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a5f      	ldr	r2, [pc, #380]	; (80075b4 <HAL_DMA_IRQHandler+0x1b4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d04a      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a5d      	ldr	r2, [pc, #372]	; (80075b8 <HAL_DMA_IRQHandler+0x1b8>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d045      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a5c      	ldr	r2, [pc, #368]	; (80075bc <HAL_DMA_IRQHandler+0x1bc>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d040      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a5a      	ldr	r2, [pc, #360]	; (80075c0 <HAL_DMA_IRQHandler+0x1c0>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d03b      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a59      	ldr	r2, [pc, #356]	; (80075c4 <HAL_DMA_IRQHandler+0x1c4>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d036      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a57      	ldr	r2, [pc, #348]	; (80075c8 <HAL_DMA_IRQHandler+0x1c8>)
 800746a:	4293      	cmp	r3, r2
 800746c:	d031      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	4a56      	ldr	r2, [pc, #344]	; (80075cc <HAL_DMA_IRQHandler+0x1cc>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d02c      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a54      	ldr	r2, [pc, #336]	; (80075d0 <HAL_DMA_IRQHandler+0x1d0>)
 800747e:	4293      	cmp	r3, r2
 8007480:	d027      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a53      	ldr	r2, [pc, #332]	; (80075d4 <HAL_DMA_IRQHandler+0x1d4>)
 8007488:	4293      	cmp	r3, r2
 800748a:	d022      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4a51      	ldr	r2, [pc, #324]	; (80075d8 <HAL_DMA_IRQHandler+0x1d8>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d01d      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a50      	ldr	r2, [pc, #320]	; (80075dc <HAL_DMA_IRQHandler+0x1dc>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d018      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4a4e      	ldr	r2, [pc, #312]	; (80075e0 <HAL_DMA_IRQHandler+0x1e0>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	4a4d      	ldr	r2, [pc, #308]	; (80075e4 <HAL_DMA_IRQHandler+0x1e4>)
 80074b0:	4293      	cmp	r3, r2
 80074b2:	d00e      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	4a4b      	ldr	r2, [pc, #300]	; (80075e8 <HAL_DMA_IRQHandler+0x1e8>)
 80074ba:	4293      	cmp	r3, r2
 80074bc:	d009      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	4a4a      	ldr	r2, [pc, #296]	; (80075ec <HAL_DMA_IRQHandler+0x1ec>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d004      	beq.n	80074d2 <HAL_DMA_IRQHandler+0xd2>
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a48      	ldr	r2, [pc, #288]	; (80075f0 <HAL_DMA_IRQHandler+0x1f0>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d101      	bne.n	80074d6 <HAL_DMA_IRQHandler+0xd6>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <HAL_DMA_IRQHandler+0xd8>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 842b 	beq.w	8007d34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074e2:	f003 031f 	and.w	r3, r3, #31
 80074e6:	2208      	movs	r2, #8
 80074e8:	409a      	lsls	r2, r3
 80074ea:	69bb      	ldr	r3, [r7, #24]
 80074ec:	4013      	ands	r3, r2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f000 80a2 	beq.w	8007638 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a2e      	ldr	r2, [pc, #184]	; (80075b4 <HAL_DMA_IRQHandler+0x1b4>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d04a      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4a2d      	ldr	r2, [pc, #180]	; (80075b8 <HAL_DMA_IRQHandler+0x1b8>)
 8007504:	4293      	cmp	r3, r2
 8007506:	d045      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	4a2b      	ldr	r2, [pc, #172]	; (80075bc <HAL_DMA_IRQHandler+0x1bc>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d040      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a2a      	ldr	r2, [pc, #168]	; (80075c0 <HAL_DMA_IRQHandler+0x1c0>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d03b      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a28      	ldr	r2, [pc, #160]	; (80075c4 <HAL_DMA_IRQHandler+0x1c4>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d036      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a27      	ldr	r2, [pc, #156]	; (80075c8 <HAL_DMA_IRQHandler+0x1c8>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d031      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a25      	ldr	r2, [pc, #148]	; (80075cc <HAL_DMA_IRQHandler+0x1cc>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d02c      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a24      	ldr	r2, [pc, #144]	; (80075d0 <HAL_DMA_IRQHandler+0x1d0>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d027      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a22      	ldr	r2, [pc, #136]	; (80075d4 <HAL_DMA_IRQHandler+0x1d4>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d022      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a21      	ldr	r2, [pc, #132]	; (80075d8 <HAL_DMA_IRQHandler+0x1d8>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d01d      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a1f      	ldr	r2, [pc, #124]	; (80075dc <HAL_DMA_IRQHandler+0x1dc>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d018      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a1e      	ldr	r2, [pc, #120]	; (80075e0 <HAL_DMA_IRQHandler+0x1e0>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d013      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a1c      	ldr	r2, [pc, #112]	; (80075e4 <HAL_DMA_IRQHandler+0x1e4>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d00e      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a1b      	ldr	r2, [pc, #108]	; (80075e8 <HAL_DMA_IRQHandler+0x1e8>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d009      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a19      	ldr	r2, [pc, #100]	; (80075ec <HAL_DMA_IRQHandler+0x1ec>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d004      	beq.n	8007594 <HAL_DMA_IRQHandler+0x194>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a18      	ldr	r2, [pc, #96]	; (80075f0 <HAL_DMA_IRQHandler+0x1f0>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d12f      	bne.n	80075f4 <HAL_DMA_IRQHandler+0x1f4>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	bf14      	ite	ne
 80075a2:	2301      	movne	r3, #1
 80075a4:	2300      	moveq	r3, #0
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	e02e      	b.n	8007608 <HAL_DMA_IRQHandler+0x208>
 80075aa:	bf00      	nop
 80075ac:	24000090 	.word	0x24000090
 80075b0:	1b4e81b5 	.word	0x1b4e81b5
 80075b4:	40020010 	.word	0x40020010
 80075b8:	40020028 	.word	0x40020028
 80075bc:	40020040 	.word	0x40020040
 80075c0:	40020058 	.word	0x40020058
 80075c4:	40020070 	.word	0x40020070
 80075c8:	40020088 	.word	0x40020088
 80075cc:	400200a0 	.word	0x400200a0
 80075d0:	400200b8 	.word	0x400200b8
 80075d4:	40020410 	.word	0x40020410
 80075d8:	40020428 	.word	0x40020428
 80075dc:	40020440 	.word	0x40020440
 80075e0:	40020458 	.word	0x40020458
 80075e4:	40020470 	.word	0x40020470
 80075e8:	40020488 	.word	0x40020488
 80075ec:	400204a0 	.word	0x400204a0
 80075f0:	400204b8 	.word	0x400204b8
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0308 	and.w	r3, r3, #8
 80075fe:	2b00      	cmp	r3, #0
 8007600:	bf14      	ite	ne
 8007602:	2301      	movne	r3, #1
 8007604:	2300      	moveq	r3, #0
 8007606:	b2db      	uxtb	r3, r3
 8007608:	2b00      	cmp	r3, #0
 800760a:	d015      	beq.n	8007638 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	681a      	ldr	r2, [r3, #0]
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	f022 0204 	bic.w	r2, r2, #4
 800761a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007620:	f003 031f 	and.w	r3, r3, #31
 8007624:	2208      	movs	r2, #8
 8007626:	409a      	lsls	r2, r3
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007630:	f043 0201 	orr.w	r2, r3, #1
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800763c:	f003 031f 	and.w	r3, r3, #31
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	fa22 f303 	lsr.w	r3, r2, r3
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d06e      	beq.n	800772c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a69      	ldr	r2, [pc, #420]	; (80077f8 <HAL_DMA_IRQHandler+0x3f8>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d04a      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a67      	ldr	r2, [pc, #412]	; (80077fc <HAL_DMA_IRQHandler+0x3fc>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d045      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a66      	ldr	r2, [pc, #408]	; (8007800 <HAL_DMA_IRQHandler+0x400>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d040      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a64      	ldr	r2, [pc, #400]	; (8007804 <HAL_DMA_IRQHandler+0x404>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d03b      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a63      	ldr	r2, [pc, #396]	; (8007808 <HAL_DMA_IRQHandler+0x408>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d036      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a61      	ldr	r2, [pc, #388]	; (800780c <HAL_DMA_IRQHandler+0x40c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d031      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a60      	ldr	r2, [pc, #384]	; (8007810 <HAL_DMA_IRQHandler+0x410>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d02c      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a5e      	ldr	r2, [pc, #376]	; (8007814 <HAL_DMA_IRQHandler+0x414>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d027      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a5d      	ldr	r2, [pc, #372]	; (8007818 <HAL_DMA_IRQHandler+0x418>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d022      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a5b      	ldr	r2, [pc, #364]	; (800781c <HAL_DMA_IRQHandler+0x41c>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d01d      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a5a      	ldr	r2, [pc, #360]	; (8007820 <HAL_DMA_IRQHandler+0x420>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d018      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	4a58      	ldr	r2, [pc, #352]	; (8007824 <HAL_DMA_IRQHandler+0x424>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d013      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a57      	ldr	r2, [pc, #348]	; (8007828 <HAL_DMA_IRQHandler+0x428>)
 80076cc:	4293      	cmp	r3, r2
 80076ce:	d00e      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	4a55      	ldr	r2, [pc, #340]	; (800782c <HAL_DMA_IRQHandler+0x42c>)
 80076d6:	4293      	cmp	r3, r2
 80076d8:	d009      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	4a54      	ldr	r2, [pc, #336]	; (8007830 <HAL_DMA_IRQHandler+0x430>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d004      	beq.n	80076ee <HAL_DMA_IRQHandler+0x2ee>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	4a52      	ldr	r2, [pc, #328]	; (8007834 <HAL_DMA_IRQHandler+0x434>)
 80076ea:	4293      	cmp	r3, r2
 80076ec:	d10a      	bne.n	8007704 <HAL_DMA_IRQHandler+0x304>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	695b      	ldr	r3, [r3, #20]
 80076f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	bf14      	ite	ne
 80076fc:	2301      	movne	r3, #1
 80076fe:	2300      	moveq	r3, #0
 8007700:	b2db      	uxtb	r3, r3
 8007702:	e003      	b.n	800770c <HAL_DMA_IRQHandler+0x30c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2300      	movs	r3, #0
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00d      	beq.n	800772c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007714:	f003 031f 	and.w	r3, r3, #31
 8007718:	2201      	movs	r2, #1
 800771a:	409a      	lsls	r2, r3
 800771c:	6a3b      	ldr	r3, [r7, #32]
 800771e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007724:	f043 0202 	orr.w	r2, r3, #2
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007730:	f003 031f 	and.w	r3, r3, #31
 8007734:	2204      	movs	r2, #4
 8007736:	409a      	lsls	r2, r3
 8007738:	69bb      	ldr	r3, [r7, #24]
 800773a:	4013      	ands	r3, r2
 800773c:	2b00      	cmp	r3, #0
 800773e:	f000 808f 	beq.w	8007860 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4a2c      	ldr	r2, [pc, #176]	; (80077f8 <HAL_DMA_IRQHandler+0x3f8>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d04a      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a2a      	ldr	r2, [pc, #168]	; (80077fc <HAL_DMA_IRQHandler+0x3fc>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d045      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	4a29      	ldr	r2, [pc, #164]	; (8007800 <HAL_DMA_IRQHandler+0x400>)
 800775c:	4293      	cmp	r3, r2
 800775e:	d040      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	4a27      	ldr	r2, [pc, #156]	; (8007804 <HAL_DMA_IRQHandler+0x404>)
 8007766:	4293      	cmp	r3, r2
 8007768:	d03b      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	4a26      	ldr	r2, [pc, #152]	; (8007808 <HAL_DMA_IRQHandler+0x408>)
 8007770:	4293      	cmp	r3, r2
 8007772:	d036      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a24      	ldr	r2, [pc, #144]	; (800780c <HAL_DMA_IRQHandler+0x40c>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d031      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a23      	ldr	r2, [pc, #140]	; (8007810 <HAL_DMA_IRQHandler+0x410>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d02c      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a21      	ldr	r2, [pc, #132]	; (8007814 <HAL_DMA_IRQHandler+0x414>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d027      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	4a20      	ldr	r2, [pc, #128]	; (8007818 <HAL_DMA_IRQHandler+0x418>)
 8007798:	4293      	cmp	r3, r2
 800779a:	d022      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a1e      	ldr	r2, [pc, #120]	; (800781c <HAL_DMA_IRQHandler+0x41c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d01d      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4a1d      	ldr	r2, [pc, #116]	; (8007820 <HAL_DMA_IRQHandler+0x420>)
 80077ac:	4293      	cmp	r3, r2
 80077ae:	d018      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <HAL_DMA_IRQHandler+0x424>)
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d013      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1a      	ldr	r2, [pc, #104]	; (8007828 <HAL_DMA_IRQHandler+0x428>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d00e      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a18      	ldr	r2, [pc, #96]	; (800782c <HAL_DMA_IRQHandler+0x42c>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d009      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	4a17      	ldr	r2, [pc, #92]	; (8007830 <HAL_DMA_IRQHandler+0x430>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d004      	beq.n	80077e2 <HAL_DMA_IRQHandler+0x3e2>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a15      	ldr	r2, [pc, #84]	; (8007834 <HAL_DMA_IRQHandler+0x434>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d12a      	bne.n	8007838 <HAL_DMA_IRQHandler+0x438>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f003 0302 	and.w	r3, r3, #2
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	bf14      	ite	ne
 80077f0:	2301      	movne	r3, #1
 80077f2:	2300      	moveq	r3, #0
 80077f4:	b2db      	uxtb	r3, r3
 80077f6:	e023      	b.n	8007840 <HAL_DMA_IRQHandler+0x440>
 80077f8:	40020010 	.word	0x40020010
 80077fc:	40020028 	.word	0x40020028
 8007800:	40020040 	.word	0x40020040
 8007804:	40020058 	.word	0x40020058
 8007808:	40020070 	.word	0x40020070
 800780c:	40020088 	.word	0x40020088
 8007810:	400200a0 	.word	0x400200a0
 8007814:	400200b8 	.word	0x400200b8
 8007818:	40020410 	.word	0x40020410
 800781c:	40020428 	.word	0x40020428
 8007820:	40020440 	.word	0x40020440
 8007824:	40020458 	.word	0x40020458
 8007828:	40020470 	.word	0x40020470
 800782c:	40020488 	.word	0x40020488
 8007830:	400204a0 	.word	0x400204a0
 8007834:	400204b8 	.word	0x400204b8
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2300      	movs	r3, #0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00d      	beq.n	8007860 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007848:	f003 031f 	and.w	r3, r3, #31
 800784c:	2204      	movs	r2, #4
 800784e:	409a      	lsls	r2, r3
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007858:	f043 0204 	orr.w	r2, r3, #4
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007864:	f003 031f 	and.w	r3, r3, #31
 8007868:	2210      	movs	r2, #16
 800786a:	409a      	lsls	r2, r3
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	4013      	ands	r3, r2
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80a6 	beq.w	80079c2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a85      	ldr	r2, [pc, #532]	; (8007a90 <HAL_DMA_IRQHandler+0x690>)
 800787c:	4293      	cmp	r3, r2
 800787e:	d04a      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4a83      	ldr	r2, [pc, #524]	; (8007a94 <HAL_DMA_IRQHandler+0x694>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d045      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a82      	ldr	r2, [pc, #520]	; (8007a98 <HAL_DMA_IRQHandler+0x698>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d040      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a80      	ldr	r2, [pc, #512]	; (8007a9c <HAL_DMA_IRQHandler+0x69c>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d03b      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a7f      	ldr	r2, [pc, #508]	; (8007aa0 <HAL_DMA_IRQHandler+0x6a0>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d036      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a7d      	ldr	r2, [pc, #500]	; (8007aa4 <HAL_DMA_IRQHandler+0x6a4>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d031      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a7c      	ldr	r2, [pc, #496]	; (8007aa8 <HAL_DMA_IRQHandler+0x6a8>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d02c      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a7a      	ldr	r2, [pc, #488]	; (8007aac <HAL_DMA_IRQHandler+0x6ac>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d027      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a79      	ldr	r2, [pc, #484]	; (8007ab0 <HAL_DMA_IRQHandler+0x6b0>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d022      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a77      	ldr	r2, [pc, #476]	; (8007ab4 <HAL_DMA_IRQHandler+0x6b4>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d01d      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a76      	ldr	r2, [pc, #472]	; (8007ab8 <HAL_DMA_IRQHandler+0x6b8>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d018      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a74      	ldr	r2, [pc, #464]	; (8007abc <HAL_DMA_IRQHandler+0x6bc>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d013      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a73      	ldr	r2, [pc, #460]	; (8007ac0 <HAL_DMA_IRQHandler+0x6c0>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d00e      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a71      	ldr	r2, [pc, #452]	; (8007ac4 <HAL_DMA_IRQHandler+0x6c4>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d009      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a70      	ldr	r2, [pc, #448]	; (8007ac8 <HAL_DMA_IRQHandler+0x6c8>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d004      	beq.n	8007916 <HAL_DMA_IRQHandler+0x516>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a6e      	ldr	r2, [pc, #440]	; (8007acc <HAL_DMA_IRQHandler+0x6cc>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d10a      	bne.n	800792c <HAL_DMA_IRQHandler+0x52c>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0308 	and.w	r3, r3, #8
 8007920:	2b00      	cmp	r3, #0
 8007922:	bf14      	ite	ne
 8007924:	2301      	movne	r3, #1
 8007926:	2300      	moveq	r3, #0
 8007928:	b2db      	uxtb	r3, r3
 800792a:	e009      	b.n	8007940 <HAL_DMA_IRQHandler+0x540>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f003 0304 	and.w	r3, r3, #4
 8007936:	2b00      	cmp	r3, #0
 8007938:	bf14      	ite	ne
 800793a:	2301      	movne	r3, #1
 800793c:	2300      	moveq	r3, #0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	2b00      	cmp	r3, #0
 8007942:	d03e      	beq.n	80079c2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007948:	f003 031f 	and.w	r3, r3, #31
 800794c:	2210      	movs	r2, #16
 800794e:	409a      	lsls	r2, r3
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800795e:	2b00      	cmp	r3, #0
 8007960:	d018      	beq.n	8007994 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d108      	bne.n	8007982 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007974:	2b00      	cmp	r3, #0
 8007976:	d024      	beq.n	80079c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	4798      	blx	r3
 8007980:	e01f      	b.n	80079c2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007986:	2b00      	cmp	r3, #0
 8007988:	d01b      	beq.n	80079c2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	4798      	blx	r3
 8007992:	e016      	b.n	80079c2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d107      	bne.n	80079b2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f022 0208 	bic.w	r2, r2, #8
 80079b0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d003      	beq.n	80079c2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079c6:	f003 031f 	and.w	r3, r3, #31
 80079ca:	2220      	movs	r2, #32
 80079cc:	409a      	lsls	r2, r3
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	4013      	ands	r3, r2
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	f000 8110 	beq.w	8007bf8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4a2c      	ldr	r2, [pc, #176]	; (8007a90 <HAL_DMA_IRQHandler+0x690>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d04a      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a2b      	ldr	r2, [pc, #172]	; (8007a94 <HAL_DMA_IRQHandler+0x694>)
 80079e8:	4293      	cmp	r3, r2
 80079ea:	d045      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	4a29      	ldr	r2, [pc, #164]	; (8007a98 <HAL_DMA_IRQHandler+0x698>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d040      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a28      	ldr	r2, [pc, #160]	; (8007a9c <HAL_DMA_IRQHandler+0x69c>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d03b      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a26      	ldr	r2, [pc, #152]	; (8007aa0 <HAL_DMA_IRQHandler+0x6a0>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d036      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a25      	ldr	r2, [pc, #148]	; (8007aa4 <HAL_DMA_IRQHandler+0x6a4>)
 8007a10:	4293      	cmp	r3, r2
 8007a12:	d031      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	4a23      	ldr	r2, [pc, #140]	; (8007aa8 <HAL_DMA_IRQHandler+0x6a8>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d02c      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	4a22      	ldr	r2, [pc, #136]	; (8007aac <HAL_DMA_IRQHandler+0x6ac>)
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d027      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a20      	ldr	r2, [pc, #128]	; (8007ab0 <HAL_DMA_IRQHandler+0x6b0>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d022      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4a1f      	ldr	r2, [pc, #124]	; (8007ab4 <HAL_DMA_IRQHandler+0x6b4>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d01d      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1d      	ldr	r2, [pc, #116]	; (8007ab8 <HAL_DMA_IRQHandler+0x6b8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d018      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1c      	ldr	r2, [pc, #112]	; (8007abc <HAL_DMA_IRQHandler+0x6bc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d013      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1a      	ldr	r2, [pc, #104]	; (8007ac0 <HAL_DMA_IRQHandler+0x6c0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00e      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a19      	ldr	r2, [pc, #100]	; (8007ac4 <HAL_DMA_IRQHandler+0x6c4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d009      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a17      	ldr	r2, [pc, #92]	; (8007ac8 <HAL_DMA_IRQHandler+0x6c8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d004      	beq.n	8007a78 <HAL_DMA_IRQHandler+0x678>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a16      	ldr	r2, [pc, #88]	; (8007acc <HAL_DMA_IRQHandler+0x6cc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d12b      	bne.n	8007ad0 <HAL_DMA_IRQHandler+0x6d0>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0310 	and.w	r3, r3, #16
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	bf14      	ite	ne
 8007a86:	2301      	movne	r3, #1
 8007a88:	2300      	moveq	r3, #0
 8007a8a:	b2db      	uxtb	r3, r3
 8007a8c:	e02a      	b.n	8007ae4 <HAL_DMA_IRQHandler+0x6e4>
 8007a8e:	bf00      	nop
 8007a90:	40020010 	.word	0x40020010
 8007a94:	40020028 	.word	0x40020028
 8007a98:	40020040 	.word	0x40020040
 8007a9c:	40020058 	.word	0x40020058
 8007aa0:	40020070 	.word	0x40020070
 8007aa4:	40020088 	.word	0x40020088
 8007aa8:	400200a0 	.word	0x400200a0
 8007aac:	400200b8 	.word	0x400200b8
 8007ab0:	40020410 	.word	0x40020410
 8007ab4:	40020428 	.word	0x40020428
 8007ab8:	40020440 	.word	0x40020440
 8007abc:	40020458 	.word	0x40020458
 8007ac0:	40020470 	.word	0x40020470
 8007ac4:	40020488 	.word	0x40020488
 8007ac8:	400204a0 	.word	0x400204a0
 8007acc:	400204b8 	.word	0x400204b8
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f003 0302 	and.w	r3, r3, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	bf14      	ite	ne
 8007ade:	2301      	movne	r3, #1
 8007ae0:	2300      	moveq	r3, #0
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	f000 8087 	beq.w	8007bf8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aee:	f003 031f 	and.w	r3, r3, #31
 8007af2:	2220      	movs	r2, #32
 8007af4:	409a      	lsls	r2, r3
 8007af6:	6a3b      	ldr	r3, [r7, #32]
 8007af8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b04      	cmp	r3, #4
 8007b04:	d139      	bne.n	8007b7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f022 0216 	bic.w	r2, r2, #22
 8007b14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	695a      	ldr	r2, [r3, #20]
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <HAL_DMA_IRQHandler+0x736>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d007      	beq.n	8007b46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f022 0208 	bic.w	r2, r2, #8
 8007b44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b4a:	f003 031f 	and.w	r3, r3, #31
 8007b4e:	223f      	movs	r2, #63	; 0x3f
 8007b50:	409a      	lsls	r2, r3
 8007b52:	6a3b      	ldr	r3, [r7, #32]
 8007b54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	f000 834a 	beq.w	8008204 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b74:	6878      	ldr	r0, [r7, #4]
 8007b76:	4798      	blx	r3
          }
          return;
 8007b78:	e344      	b.n	8008204 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d018      	beq.n	8007bba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d108      	bne.n	8007ba8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d02c      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	4798      	blx	r3
 8007ba6:	e027      	b.n	8007bf8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d023      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	4798      	blx	r3
 8007bb8:	e01e      	b.n	8007bf8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d10f      	bne.n	8007be8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f022 0210 	bic.w	r2, r2, #16
 8007bd6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d003      	beq.n	8007bf8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	f000 8306 	beq.w	800820e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c06:	f003 0301 	and.w	r3, r3, #1
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 8088 	beq.w	8007d20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2204      	movs	r2, #4
 8007c14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a7a      	ldr	r2, [pc, #488]	; (8007e08 <HAL_DMA_IRQHandler+0xa08>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d04a      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a79      	ldr	r2, [pc, #484]	; (8007e0c <HAL_DMA_IRQHandler+0xa0c>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d045      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a77      	ldr	r2, [pc, #476]	; (8007e10 <HAL_DMA_IRQHandler+0xa10>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d040      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a76      	ldr	r2, [pc, #472]	; (8007e14 <HAL_DMA_IRQHandler+0xa14>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d03b      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a74      	ldr	r2, [pc, #464]	; (8007e18 <HAL_DMA_IRQHandler+0xa18>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d036      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a73      	ldr	r2, [pc, #460]	; (8007e1c <HAL_DMA_IRQHandler+0xa1c>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d031      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a71      	ldr	r2, [pc, #452]	; (8007e20 <HAL_DMA_IRQHandler+0xa20>)
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d02c      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	4a70      	ldr	r2, [pc, #448]	; (8007e24 <HAL_DMA_IRQHandler+0xa24>)
 8007c64:	4293      	cmp	r3, r2
 8007c66:	d027      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a6e      	ldr	r2, [pc, #440]	; (8007e28 <HAL_DMA_IRQHandler+0xa28>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d022      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	4a6d      	ldr	r2, [pc, #436]	; (8007e2c <HAL_DMA_IRQHandler+0xa2c>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d01d      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a6b      	ldr	r2, [pc, #428]	; (8007e30 <HAL_DMA_IRQHandler+0xa30>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d018      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	4a6a      	ldr	r2, [pc, #424]	; (8007e34 <HAL_DMA_IRQHandler+0xa34>)
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	d013      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4a68      	ldr	r2, [pc, #416]	; (8007e38 <HAL_DMA_IRQHandler+0xa38>)
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d00e      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a67      	ldr	r2, [pc, #412]	; (8007e3c <HAL_DMA_IRQHandler+0xa3c>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d009      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a65      	ldr	r2, [pc, #404]	; (8007e40 <HAL_DMA_IRQHandler+0xa40>)
 8007caa:	4293      	cmp	r3, r2
 8007cac:	d004      	beq.n	8007cb8 <HAL_DMA_IRQHandler+0x8b8>
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4a64      	ldr	r2, [pc, #400]	; (8007e44 <HAL_DMA_IRQHandler+0xa44>)
 8007cb4:	4293      	cmp	r3, r2
 8007cb6:	d108      	bne.n	8007cca <HAL_DMA_IRQHandler+0x8ca>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	681a      	ldr	r2, [r3, #0]
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f022 0201 	bic.w	r2, r2, #1
 8007cc6:	601a      	str	r2, [r3, #0]
 8007cc8:	e007      	b.n	8007cda <HAL_DMA_IRQHandler+0x8da>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	60fb      	str	r3, [r7, #12]
 8007ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d307      	bcc.n	8007cf6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1f2      	bne.n	8007cda <HAL_DMA_IRQHandler+0x8da>
 8007cf4:	e000      	b.n	8007cf8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007cf6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d004      	beq.n	8007d10 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2203      	movs	r2, #3
 8007d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007d0e:	e003      	b.n	8007d18 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2201      	movs	r2, #1
 8007d14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	f000 8272 	beq.w	800820e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	4798      	blx	r3
 8007d32:	e26c      	b.n	800820e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	4a43      	ldr	r2, [pc, #268]	; (8007e48 <HAL_DMA_IRQHandler+0xa48>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d022      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x984>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	4a42      	ldr	r2, [pc, #264]	; (8007e4c <HAL_DMA_IRQHandler+0xa4c>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d01d      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x984>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a40      	ldr	r2, [pc, #256]	; (8007e50 <HAL_DMA_IRQHandler+0xa50>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d018      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x984>
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a3f      	ldr	r2, [pc, #252]	; (8007e54 <HAL_DMA_IRQHandler+0xa54>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d013      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x984>
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	4a3d      	ldr	r2, [pc, #244]	; (8007e58 <HAL_DMA_IRQHandler+0xa58>)
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d00e      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x984>
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4a3c      	ldr	r2, [pc, #240]	; (8007e5c <HAL_DMA_IRQHandler+0xa5c>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d009      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x984>
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a3a      	ldr	r2, [pc, #232]	; (8007e60 <HAL_DMA_IRQHandler+0xa60>)
 8007d76:	4293      	cmp	r3, r2
 8007d78:	d004      	beq.n	8007d84 <HAL_DMA_IRQHandler+0x984>
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a39      	ldr	r2, [pc, #228]	; (8007e64 <HAL_DMA_IRQHandler+0xa64>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d101      	bne.n	8007d88 <HAL_DMA_IRQHandler+0x988>
 8007d84:	2301      	movs	r3, #1
 8007d86:	e000      	b.n	8007d8a <HAL_DMA_IRQHandler+0x98a>
 8007d88:	2300      	movs	r3, #0
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 823f 	beq.w	800820e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d9c:	f003 031f 	and.w	r3, r3, #31
 8007da0:	2204      	movs	r2, #4
 8007da2:	409a      	lsls	r2, r3
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	4013      	ands	r3, r2
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	f000 80cd 	beq.w	8007f48 <HAL_DMA_IRQHandler+0xb48>
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	f003 0304 	and.w	r3, r3, #4
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	f000 80c7 	beq.w	8007f48 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007dbe:	f003 031f 	and.w	r3, r3, #31
 8007dc2:	2204      	movs	r2, #4
 8007dc4:	409a      	lsls	r2, r3
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d049      	beq.n	8007e68 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d109      	bne.n	8007df2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 8210 	beq.w	8008208 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007df0:	e20a      	b.n	8008208 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f000 8206 	beq.w	8008208 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e04:	e200      	b.n	8008208 <HAL_DMA_IRQHandler+0xe08>
 8007e06:	bf00      	nop
 8007e08:	40020010 	.word	0x40020010
 8007e0c:	40020028 	.word	0x40020028
 8007e10:	40020040 	.word	0x40020040
 8007e14:	40020058 	.word	0x40020058
 8007e18:	40020070 	.word	0x40020070
 8007e1c:	40020088 	.word	0x40020088
 8007e20:	400200a0 	.word	0x400200a0
 8007e24:	400200b8 	.word	0x400200b8
 8007e28:	40020410 	.word	0x40020410
 8007e2c:	40020428 	.word	0x40020428
 8007e30:	40020440 	.word	0x40020440
 8007e34:	40020458 	.word	0x40020458
 8007e38:	40020470 	.word	0x40020470
 8007e3c:	40020488 	.word	0x40020488
 8007e40:	400204a0 	.word	0x400204a0
 8007e44:	400204b8 	.word	0x400204b8
 8007e48:	58025408 	.word	0x58025408
 8007e4c:	5802541c 	.word	0x5802541c
 8007e50:	58025430 	.word	0x58025430
 8007e54:	58025444 	.word	0x58025444
 8007e58:	58025458 	.word	0x58025458
 8007e5c:	5802546c 	.word	0x5802546c
 8007e60:	58025480 	.word	0x58025480
 8007e64:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	f003 0320 	and.w	r3, r3, #32
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d160      	bne.n	8007f34 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	4a7f      	ldr	r2, [pc, #508]	; (8008074 <HAL_DMA_IRQHandler+0xc74>)
 8007e78:	4293      	cmp	r3, r2
 8007e7a:	d04a      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a7d      	ldr	r2, [pc, #500]	; (8008078 <HAL_DMA_IRQHandler+0xc78>)
 8007e82:	4293      	cmp	r3, r2
 8007e84:	d045      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4a7c      	ldr	r2, [pc, #496]	; (800807c <HAL_DMA_IRQHandler+0xc7c>)
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d040      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	4a7a      	ldr	r2, [pc, #488]	; (8008080 <HAL_DMA_IRQHandler+0xc80>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d03b      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4a79      	ldr	r2, [pc, #484]	; (8008084 <HAL_DMA_IRQHandler+0xc84>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d036      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a77      	ldr	r2, [pc, #476]	; (8008088 <HAL_DMA_IRQHandler+0xc88>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d031      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4a76      	ldr	r2, [pc, #472]	; (800808c <HAL_DMA_IRQHandler+0xc8c>)
 8007eb4:	4293      	cmp	r3, r2
 8007eb6:	d02c      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	4a74      	ldr	r2, [pc, #464]	; (8008090 <HAL_DMA_IRQHandler+0xc90>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d027      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a73      	ldr	r2, [pc, #460]	; (8008094 <HAL_DMA_IRQHandler+0xc94>)
 8007ec8:	4293      	cmp	r3, r2
 8007eca:	d022      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	4a71      	ldr	r2, [pc, #452]	; (8008098 <HAL_DMA_IRQHandler+0xc98>)
 8007ed2:	4293      	cmp	r3, r2
 8007ed4:	d01d      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a70      	ldr	r2, [pc, #448]	; (800809c <HAL_DMA_IRQHandler+0xc9c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d018      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a6e      	ldr	r2, [pc, #440]	; (80080a0 <HAL_DMA_IRQHandler+0xca0>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d013      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a6d      	ldr	r2, [pc, #436]	; (80080a4 <HAL_DMA_IRQHandler+0xca4>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d00e      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a6b      	ldr	r2, [pc, #428]	; (80080a8 <HAL_DMA_IRQHandler+0xca8>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d009      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a6a      	ldr	r2, [pc, #424]	; (80080ac <HAL_DMA_IRQHandler+0xcac>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d004      	beq.n	8007f12 <HAL_DMA_IRQHandler+0xb12>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a68      	ldr	r2, [pc, #416]	; (80080b0 <HAL_DMA_IRQHandler+0xcb0>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d108      	bne.n	8007f24 <HAL_DMA_IRQHandler+0xb24>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0208 	bic.w	r2, r2, #8
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	e007      	b.n	8007f34 <HAL_DMA_IRQHandler+0xb34>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681a      	ldr	r2, [r3, #0]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f022 0204 	bic.w	r2, r2, #4
 8007f32:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	f000 8165 	beq.w	8008208 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f46:	e15f      	b.n	8008208 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f4c:	f003 031f 	and.w	r3, r3, #31
 8007f50:	2202      	movs	r2, #2
 8007f52:	409a      	lsls	r2, r3
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	4013      	ands	r3, r2
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f000 80c5 	beq.w	80080e8 <HAL_DMA_IRQHandler+0xce8>
 8007f5e:	693b      	ldr	r3, [r7, #16]
 8007f60:	f003 0302 	and.w	r3, r3, #2
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	f000 80bf 	beq.w	80080e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f6e:	f003 031f 	and.w	r3, r3, #31
 8007f72:	2202      	movs	r2, #2
 8007f74:	409a      	lsls	r2, r3
 8007f76:	69fb      	ldr	r3, [r7, #28]
 8007f78:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007f7a:	693b      	ldr	r3, [r7, #16]
 8007f7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d018      	beq.n	8007fb6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d109      	bne.n	8007fa2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	f000 813a 	beq.w	800820c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fa0:	e134      	b.n	800820c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	f000 8130 	beq.w	800820c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb0:	6878      	ldr	r0, [r7, #4]
 8007fb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fb4:	e12a      	b.n	800820c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	f003 0320 	and.w	r3, r3, #32
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	f040 8089 	bne.w	80080d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a2b      	ldr	r2, [pc, #172]	; (8008074 <HAL_DMA_IRQHandler+0xc74>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d04a      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a29      	ldr	r2, [pc, #164]	; (8008078 <HAL_DMA_IRQHandler+0xc78>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d045      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a28      	ldr	r2, [pc, #160]	; (800807c <HAL_DMA_IRQHandler+0xc7c>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d040      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a26      	ldr	r2, [pc, #152]	; (8008080 <HAL_DMA_IRQHandler+0xc80>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d03b      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a25      	ldr	r2, [pc, #148]	; (8008084 <HAL_DMA_IRQHandler+0xc84>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d036      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a23      	ldr	r2, [pc, #140]	; (8008088 <HAL_DMA_IRQHandler+0xc88>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d031      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a22      	ldr	r2, [pc, #136]	; (800808c <HAL_DMA_IRQHandler+0xc8c>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d02c      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a20      	ldr	r2, [pc, #128]	; (8008090 <HAL_DMA_IRQHandler+0xc90>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d027      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a1f      	ldr	r2, [pc, #124]	; (8008094 <HAL_DMA_IRQHandler+0xc94>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d022      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	4a1d      	ldr	r2, [pc, #116]	; (8008098 <HAL_DMA_IRQHandler+0xc98>)
 8008022:	4293      	cmp	r3, r2
 8008024:	d01d      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a1c      	ldr	r2, [pc, #112]	; (800809c <HAL_DMA_IRQHandler+0xc9c>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d018      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a1a      	ldr	r2, [pc, #104]	; (80080a0 <HAL_DMA_IRQHandler+0xca0>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d013      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a19      	ldr	r2, [pc, #100]	; (80080a4 <HAL_DMA_IRQHandler+0xca4>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d00e      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	4a17      	ldr	r2, [pc, #92]	; (80080a8 <HAL_DMA_IRQHandler+0xca8>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d009      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	4a16      	ldr	r2, [pc, #88]	; (80080ac <HAL_DMA_IRQHandler+0xcac>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d004      	beq.n	8008062 <HAL_DMA_IRQHandler+0xc62>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a14      	ldr	r2, [pc, #80]	; (80080b0 <HAL_DMA_IRQHandler+0xcb0>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d128      	bne.n	80080b4 <HAL_DMA_IRQHandler+0xcb4>
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	681a      	ldr	r2, [r3, #0]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	f022 0214 	bic.w	r2, r2, #20
 8008070:	601a      	str	r2, [r3, #0]
 8008072:	e027      	b.n	80080c4 <HAL_DMA_IRQHandler+0xcc4>
 8008074:	40020010 	.word	0x40020010
 8008078:	40020028 	.word	0x40020028
 800807c:	40020040 	.word	0x40020040
 8008080:	40020058 	.word	0x40020058
 8008084:	40020070 	.word	0x40020070
 8008088:	40020088 	.word	0x40020088
 800808c:	400200a0 	.word	0x400200a0
 8008090:	400200b8 	.word	0x400200b8
 8008094:	40020410 	.word	0x40020410
 8008098:	40020428 	.word	0x40020428
 800809c:	40020440 	.word	0x40020440
 80080a0:	40020458 	.word	0x40020458
 80080a4:	40020470 	.word	0x40020470
 80080a8:	40020488 	.word	0x40020488
 80080ac:	400204a0 	.word	0x400204a0
 80080b0:	400204b8 	.word	0x400204b8
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f022 020a 	bic.w	r2, r2, #10
 80080c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d8:	2b00      	cmp	r3, #0
 80080da:	f000 8097 	beq.w	800820c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080e6:	e091      	b.n	800820c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ec:	f003 031f 	and.w	r3, r3, #31
 80080f0:	2208      	movs	r2, #8
 80080f2:	409a      	lsls	r2, r3
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	4013      	ands	r3, r2
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	f000 8088 	beq.w	800820e <HAL_DMA_IRQHandler+0xe0e>
 80080fe:	693b      	ldr	r3, [r7, #16]
 8008100:	f003 0308 	and.w	r3, r3, #8
 8008104:	2b00      	cmp	r3, #0
 8008106:	f000 8082 	beq.w	800820e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a41      	ldr	r2, [pc, #260]	; (8008214 <HAL_DMA_IRQHandler+0xe14>)
 8008110:	4293      	cmp	r3, r2
 8008112:	d04a      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a3f      	ldr	r2, [pc, #252]	; (8008218 <HAL_DMA_IRQHandler+0xe18>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d045      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	4a3e      	ldr	r2, [pc, #248]	; (800821c <HAL_DMA_IRQHandler+0xe1c>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d040      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a3c      	ldr	r2, [pc, #240]	; (8008220 <HAL_DMA_IRQHandler+0xe20>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d03b      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a3b      	ldr	r2, [pc, #236]	; (8008224 <HAL_DMA_IRQHandler+0xe24>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d036      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a39      	ldr	r2, [pc, #228]	; (8008228 <HAL_DMA_IRQHandler+0xe28>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d031      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a38      	ldr	r2, [pc, #224]	; (800822c <HAL_DMA_IRQHandler+0xe2c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d02c      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a36      	ldr	r2, [pc, #216]	; (8008230 <HAL_DMA_IRQHandler+0xe30>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d027      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	4a35      	ldr	r2, [pc, #212]	; (8008234 <HAL_DMA_IRQHandler+0xe34>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d022      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a33      	ldr	r2, [pc, #204]	; (8008238 <HAL_DMA_IRQHandler+0xe38>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d01d      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a32      	ldr	r2, [pc, #200]	; (800823c <HAL_DMA_IRQHandler+0xe3c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d018      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a30      	ldr	r2, [pc, #192]	; (8008240 <HAL_DMA_IRQHandler+0xe40>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d013      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a2f      	ldr	r2, [pc, #188]	; (8008244 <HAL_DMA_IRQHandler+0xe44>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d00e      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a2d      	ldr	r2, [pc, #180]	; (8008248 <HAL_DMA_IRQHandler+0xe48>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d009      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a2c      	ldr	r2, [pc, #176]	; (800824c <HAL_DMA_IRQHandler+0xe4c>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d004      	beq.n	80081aa <HAL_DMA_IRQHandler+0xdaa>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a2a      	ldr	r2, [pc, #168]	; (8008250 <HAL_DMA_IRQHandler+0xe50>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d108      	bne.n	80081bc <HAL_DMA_IRQHandler+0xdbc>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	f022 021c 	bic.w	r2, r2, #28
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	e007      	b.n	80081cc <HAL_DMA_IRQHandler+0xdcc>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f022 020e 	bic.w	r2, r2, #14
 80081ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d0:	f003 031f 	and.w	r3, r3, #31
 80081d4:	2201      	movs	r2, #1
 80081d6:	409a      	lsls	r2, r3
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2201      	movs	r2, #1
 80081e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2200      	movs	r2, #0
 80081ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d009      	beq.n	800820e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	4798      	blx	r3
 8008202:	e004      	b.n	800820e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008204:	bf00      	nop
 8008206:	e002      	b.n	800820e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008208:	bf00      	nop
 800820a:	e000      	b.n	800820e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800820c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800820e:	3728      	adds	r7, #40	; 0x28
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	40020010 	.word	0x40020010
 8008218:	40020028 	.word	0x40020028
 800821c:	40020040 	.word	0x40020040
 8008220:	40020058 	.word	0x40020058
 8008224:	40020070 	.word	0x40020070
 8008228:	40020088 	.word	0x40020088
 800822c:	400200a0 	.word	0x400200a0
 8008230:	400200b8 	.word	0x400200b8
 8008234:	40020410 	.word	0x40020410
 8008238:	40020428 	.word	0x40020428
 800823c:	40020440 	.word	0x40020440
 8008240:	40020458 	.word	0x40020458
 8008244:	40020470 	.word	0x40020470
 8008248:	40020488 	.word	0x40020488
 800824c:	400204a0 	.word	0x400204a0
 8008250:	400204b8 	.word	0x400204b8

08008254 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008254:	b480      	push	{r7}
 8008256:	b087      	sub	sp, #28
 8008258:	af00      	add	r7, sp, #0
 800825a:	60f8      	str	r0, [r7, #12]
 800825c:	60b9      	str	r1, [r7, #8]
 800825e:	607a      	str	r2, [r7, #4]
 8008260:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008266:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800826c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a7f      	ldr	r2, [pc, #508]	; (8008470 <DMA_SetConfig+0x21c>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d072      	beq.n	800835e <DMA_SetConfig+0x10a>
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	4a7d      	ldr	r2, [pc, #500]	; (8008474 <DMA_SetConfig+0x220>)
 800827e:	4293      	cmp	r3, r2
 8008280:	d06d      	beq.n	800835e <DMA_SetConfig+0x10a>
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4a7c      	ldr	r2, [pc, #496]	; (8008478 <DMA_SetConfig+0x224>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d068      	beq.n	800835e <DMA_SetConfig+0x10a>
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4a7a      	ldr	r2, [pc, #488]	; (800847c <DMA_SetConfig+0x228>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d063      	beq.n	800835e <DMA_SetConfig+0x10a>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	4a79      	ldr	r2, [pc, #484]	; (8008480 <DMA_SetConfig+0x22c>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d05e      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	4a77      	ldr	r2, [pc, #476]	; (8008484 <DMA_SetConfig+0x230>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d059      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a76      	ldr	r2, [pc, #472]	; (8008488 <DMA_SetConfig+0x234>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d054      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a74      	ldr	r2, [pc, #464]	; (800848c <DMA_SetConfig+0x238>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d04f      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a73      	ldr	r2, [pc, #460]	; (8008490 <DMA_SetConfig+0x23c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d04a      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a71      	ldr	r2, [pc, #452]	; (8008494 <DMA_SetConfig+0x240>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d045      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a70      	ldr	r2, [pc, #448]	; (8008498 <DMA_SetConfig+0x244>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d040      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a6e      	ldr	r2, [pc, #440]	; (800849c <DMA_SetConfig+0x248>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d03b      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a6d      	ldr	r2, [pc, #436]	; (80084a0 <DMA_SetConfig+0x24c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d036      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a6b      	ldr	r2, [pc, #428]	; (80084a4 <DMA_SetConfig+0x250>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d031      	beq.n	800835e <DMA_SetConfig+0x10a>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a6a      	ldr	r2, [pc, #424]	; (80084a8 <DMA_SetConfig+0x254>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d02c      	beq.n	800835e <DMA_SetConfig+0x10a>
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a68      	ldr	r2, [pc, #416]	; (80084ac <DMA_SetConfig+0x258>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d027      	beq.n	800835e <DMA_SetConfig+0x10a>
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a67      	ldr	r2, [pc, #412]	; (80084b0 <DMA_SetConfig+0x25c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d022      	beq.n	800835e <DMA_SetConfig+0x10a>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a65      	ldr	r2, [pc, #404]	; (80084b4 <DMA_SetConfig+0x260>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d01d      	beq.n	800835e <DMA_SetConfig+0x10a>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a64      	ldr	r2, [pc, #400]	; (80084b8 <DMA_SetConfig+0x264>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d018      	beq.n	800835e <DMA_SetConfig+0x10a>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a62      	ldr	r2, [pc, #392]	; (80084bc <DMA_SetConfig+0x268>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d013      	beq.n	800835e <DMA_SetConfig+0x10a>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a61      	ldr	r2, [pc, #388]	; (80084c0 <DMA_SetConfig+0x26c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d00e      	beq.n	800835e <DMA_SetConfig+0x10a>
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a5f      	ldr	r2, [pc, #380]	; (80084c4 <DMA_SetConfig+0x270>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d009      	beq.n	800835e <DMA_SetConfig+0x10a>
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	4a5e      	ldr	r2, [pc, #376]	; (80084c8 <DMA_SetConfig+0x274>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d004      	beq.n	800835e <DMA_SetConfig+0x10a>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4a5c      	ldr	r2, [pc, #368]	; (80084cc <DMA_SetConfig+0x278>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d101      	bne.n	8008362 <DMA_SetConfig+0x10e>
 800835e:	2301      	movs	r3, #1
 8008360:	e000      	b.n	8008364 <DMA_SetConfig+0x110>
 8008362:	2300      	movs	r3, #0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00d      	beq.n	8008384 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008370:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008382:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4a39      	ldr	r2, [pc, #228]	; (8008470 <DMA_SetConfig+0x21c>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d04a      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	4a38      	ldr	r2, [pc, #224]	; (8008474 <DMA_SetConfig+0x220>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d045      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a36      	ldr	r2, [pc, #216]	; (8008478 <DMA_SetConfig+0x224>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d040      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a35      	ldr	r2, [pc, #212]	; (800847c <DMA_SetConfig+0x228>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d03b      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	4a33      	ldr	r2, [pc, #204]	; (8008480 <DMA_SetConfig+0x22c>)
 80083b2:	4293      	cmp	r3, r2
 80083b4:	d036      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a32      	ldr	r2, [pc, #200]	; (8008484 <DMA_SetConfig+0x230>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d031      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a30      	ldr	r2, [pc, #192]	; (8008488 <DMA_SetConfig+0x234>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d02c      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	4a2f      	ldr	r2, [pc, #188]	; (800848c <DMA_SetConfig+0x238>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d027      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	4a2d      	ldr	r2, [pc, #180]	; (8008490 <DMA_SetConfig+0x23c>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d022      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a2c      	ldr	r2, [pc, #176]	; (8008494 <DMA_SetConfig+0x240>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d01d      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4a2a      	ldr	r2, [pc, #168]	; (8008498 <DMA_SetConfig+0x244>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d018      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	4a29      	ldr	r2, [pc, #164]	; (800849c <DMA_SetConfig+0x248>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d013      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	4a27      	ldr	r2, [pc, #156]	; (80084a0 <DMA_SetConfig+0x24c>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d00e      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a26      	ldr	r2, [pc, #152]	; (80084a4 <DMA_SetConfig+0x250>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d009      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a24      	ldr	r2, [pc, #144]	; (80084a8 <DMA_SetConfig+0x254>)
 8008416:	4293      	cmp	r3, r2
 8008418:	d004      	beq.n	8008424 <DMA_SetConfig+0x1d0>
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a23      	ldr	r2, [pc, #140]	; (80084ac <DMA_SetConfig+0x258>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d101      	bne.n	8008428 <DMA_SetConfig+0x1d4>
 8008424:	2301      	movs	r3, #1
 8008426:	e000      	b.n	800842a <DMA_SetConfig+0x1d6>
 8008428:	2300      	movs	r3, #0
 800842a:	2b00      	cmp	r3, #0
 800842c:	d059      	beq.n	80084e2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008432:	f003 031f 	and.w	r3, r3, #31
 8008436:	223f      	movs	r2, #63	; 0x3f
 8008438:	409a      	lsls	r2, r3
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800844c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	683a      	ldr	r2, [r7, #0]
 8008454:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	689b      	ldr	r3, [r3, #8]
 800845a:	2b40      	cmp	r3, #64	; 0x40
 800845c:	d138      	bne.n	80084d0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68ba      	ldr	r2, [r7, #8]
 800846c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800846e:	e086      	b.n	800857e <DMA_SetConfig+0x32a>
 8008470:	40020010 	.word	0x40020010
 8008474:	40020028 	.word	0x40020028
 8008478:	40020040 	.word	0x40020040
 800847c:	40020058 	.word	0x40020058
 8008480:	40020070 	.word	0x40020070
 8008484:	40020088 	.word	0x40020088
 8008488:	400200a0 	.word	0x400200a0
 800848c:	400200b8 	.word	0x400200b8
 8008490:	40020410 	.word	0x40020410
 8008494:	40020428 	.word	0x40020428
 8008498:	40020440 	.word	0x40020440
 800849c:	40020458 	.word	0x40020458
 80084a0:	40020470 	.word	0x40020470
 80084a4:	40020488 	.word	0x40020488
 80084a8:	400204a0 	.word	0x400204a0
 80084ac:	400204b8 	.word	0x400204b8
 80084b0:	58025408 	.word	0x58025408
 80084b4:	5802541c 	.word	0x5802541c
 80084b8:	58025430 	.word	0x58025430
 80084bc:	58025444 	.word	0x58025444
 80084c0:	58025458 	.word	0x58025458
 80084c4:	5802546c 	.word	0x5802546c
 80084c8:	58025480 	.word	0x58025480
 80084cc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	68ba      	ldr	r2, [r7, #8]
 80084d6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	60da      	str	r2, [r3, #12]
}
 80084e0:	e04d      	b.n	800857e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a29      	ldr	r2, [pc, #164]	; (800858c <DMA_SetConfig+0x338>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d022      	beq.n	8008532 <DMA_SetConfig+0x2de>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	4a27      	ldr	r2, [pc, #156]	; (8008590 <DMA_SetConfig+0x33c>)
 80084f2:	4293      	cmp	r3, r2
 80084f4:	d01d      	beq.n	8008532 <DMA_SetConfig+0x2de>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a26      	ldr	r2, [pc, #152]	; (8008594 <DMA_SetConfig+0x340>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d018      	beq.n	8008532 <DMA_SetConfig+0x2de>
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	4a24      	ldr	r2, [pc, #144]	; (8008598 <DMA_SetConfig+0x344>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d013      	beq.n	8008532 <DMA_SetConfig+0x2de>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	4a23      	ldr	r2, [pc, #140]	; (800859c <DMA_SetConfig+0x348>)
 8008510:	4293      	cmp	r3, r2
 8008512:	d00e      	beq.n	8008532 <DMA_SetConfig+0x2de>
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	4a21      	ldr	r2, [pc, #132]	; (80085a0 <DMA_SetConfig+0x34c>)
 800851a:	4293      	cmp	r3, r2
 800851c:	d009      	beq.n	8008532 <DMA_SetConfig+0x2de>
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	4a20      	ldr	r2, [pc, #128]	; (80085a4 <DMA_SetConfig+0x350>)
 8008524:	4293      	cmp	r3, r2
 8008526:	d004      	beq.n	8008532 <DMA_SetConfig+0x2de>
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a1e      	ldr	r2, [pc, #120]	; (80085a8 <DMA_SetConfig+0x354>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d101      	bne.n	8008536 <DMA_SetConfig+0x2e2>
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <DMA_SetConfig+0x2e4>
 8008536:	2300      	movs	r3, #0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d020      	beq.n	800857e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008540:	f003 031f 	and.w	r3, r3, #31
 8008544:	2201      	movs	r2, #1
 8008546:	409a      	lsls	r2, r3
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	683a      	ldr	r2, [r7, #0]
 8008552:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	2b40      	cmp	r3, #64	; 0x40
 800855a:	d108      	bne.n	800856e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	68ba      	ldr	r2, [r7, #8]
 800856a:	60da      	str	r2, [r3, #12]
}
 800856c:	e007      	b.n	800857e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	68ba      	ldr	r2, [r7, #8]
 8008574:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	60da      	str	r2, [r3, #12]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	58025408 	.word	0x58025408
 8008590:	5802541c 	.word	0x5802541c
 8008594:	58025430 	.word	0x58025430
 8008598:	58025444 	.word	0x58025444
 800859c:	58025458 	.word	0x58025458
 80085a0:	5802546c 	.word	0x5802546c
 80085a4:	58025480 	.word	0x58025480
 80085a8:	58025494 	.word	0x58025494

080085ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b085      	sub	sp, #20
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a42      	ldr	r2, [pc, #264]	; (80086c4 <DMA_CalcBaseAndBitshift+0x118>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d04a      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a41      	ldr	r2, [pc, #260]	; (80086c8 <DMA_CalcBaseAndBitshift+0x11c>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d045      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a3f      	ldr	r2, [pc, #252]	; (80086cc <DMA_CalcBaseAndBitshift+0x120>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d040      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a3e      	ldr	r2, [pc, #248]	; (80086d0 <DMA_CalcBaseAndBitshift+0x124>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d03b      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a3c      	ldr	r2, [pc, #240]	; (80086d4 <DMA_CalcBaseAndBitshift+0x128>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d036      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a3b      	ldr	r2, [pc, #236]	; (80086d8 <DMA_CalcBaseAndBitshift+0x12c>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d031      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a39      	ldr	r2, [pc, #228]	; (80086dc <DMA_CalcBaseAndBitshift+0x130>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d02c      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a38      	ldr	r2, [pc, #224]	; (80086e0 <DMA_CalcBaseAndBitshift+0x134>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d027      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a36      	ldr	r2, [pc, #216]	; (80086e4 <DMA_CalcBaseAndBitshift+0x138>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d022      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a35      	ldr	r2, [pc, #212]	; (80086e8 <DMA_CalcBaseAndBitshift+0x13c>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d01d      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a33      	ldr	r2, [pc, #204]	; (80086ec <DMA_CalcBaseAndBitshift+0x140>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d018      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a32      	ldr	r2, [pc, #200]	; (80086f0 <DMA_CalcBaseAndBitshift+0x144>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d013      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a30      	ldr	r2, [pc, #192]	; (80086f4 <DMA_CalcBaseAndBitshift+0x148>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d00e      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a2f      	ldr	r2, [pc, #188]	; (80086f8 <DMA_CalcBaseAndBitshift+0x14c>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d009      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a2d      	ldr	r2, [pc, #180]	; (80086fc <DMA_CalcBaseAndBitshift+0x150>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d004      	beq.n	8008654 <DMA_CalcBaseAndBitshift+0xa8>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a2c      	ldr	r2, [pc, #176]	; (8008700 <DMA_CalcBaseAndBitshift+0x154>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d101      	bne.n	8008658 <DMA_CalcBaseAndBitshift+0xac>
 8008654:	2301      	movs	r3, #1
 8008656:	e000      	b.n	800865a <DMA_CalcBaseAndBitshift+0xae>
 8008658:	2300      	movs	r3, #0
 800865a:	2b00      	cmp	r3, #0
 800865c:	d024      	beq.n	80086a8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	b2db      	uxtb	r3, r3
 8008664:	3b10      	subs	r3, #16
 8008666:	4a27      	ldr	r2, [pc, #156]	; (8008704 <DMA_CalcBaseAndBitshift+0x158>)
 8008668:	fba2 2303 	umull	r2, r3, r2, r3
 800866c:	091b      	lsrs	r3, r3, #4
 800866e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f003 0307 	and.w	r3, r3, #7
 8008676:	4a24      	ldr	r2, [pc, #144]	; (8008708 <DMA_CalcBaseAndBitshift+0x15c>)
 8008678:	5cd3      	ldrb	r3, [r2, r3]
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b03      	cmp	r3, #3
 8008684:	d908      	bls.n	8008698 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	4b1f      	ldr	r3, [pc, #124]	; (800870c <DMA_CalcBaseAndBitshift+0x160>)
 800868e:	4013      	ands	r3, r2
 8008690:	1d1a      	adds	r2, r3, #4
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	659a      	str	r2, [r3, #88]	; 0x58
 8008696:	e00d      	b.n	80086b4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	461a      	mov	r2, r3
 800869e:	4b1b      	ldr	r3, [pc, #108]	; (800870c <DMA_CalcBaseAndBitshift+0x160>)
 80086a0:	4013      	ands	r3, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	6593      	str	r3, [r2, #88]	; 0x58
 80086a6:	e005      	b.n	80086b4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3714      	adds	r7, #20
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	40020010 	.word	0x40020010
 80086c8:	40020028 	.word	0x40020028
 80086cc:	40020040 	.word	0x40020040
 80086d0:	40020058 	.word	0x40020058
 80086d4:	40020070 	.word	0x40020070
 80086d8:	40020088 	.word	0x40020088
 80086dc:	400200a0 	.word	0x400200a0
 80086e0:	400200b8 	.word	0x400200b8
 80086e4:	40020410 	.word	0x40020410
 80086e8:	40020428 	.word	0x40020428
 80086ec:	40020440 	.word	0x40020440
 80086f0:	40020458 	.word	0x40020458
 80086f4:	40020470 	.word	0x40020470
 80086f8:	40020488 	.word	0x40020488
 80086fc:	400204a0 	.word	0x400204a0
 8008700:	400204b8 	.word	0x400204b8
 8008704:	aaaaaaab 	.word	0xaaaaaaab
 8008708:	080170b0 	.word	0x080170b0
 800870c:	fffffc00 	.word	0xfffffc00

08008710 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008718:	2300      	movs	r3, #0
 800871a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	699b      	ldr	r3, [r3, #24]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d120      	bne.n	8008766 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008728:	2b03      	cmp	r3, #3
 800872a:	d858      	bhi.n	80087de <DMA_CheckFifoParam+0xce>
 800872c:	a201      	add	r2, pc, #4	; (adr r2, 8008734 <DMA_CheckFifoParam+0x24>)
 800872e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008732:	bf00      	nop
 8008734:	08008745 	.word	0x08008745
 8008738:	08008757 	.word	0x08008757
 800873c:	08008745 	.word	0x08008745
 8008740:	080087df 	.word	0x080087df
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008748:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d048      	beq.n	80087e2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008750:	2301      	movs	r3, #1
 8008752:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008754:	e045      	b.n	80087e2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800875a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800875e:	d142      	bne.n	80087e6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008760:	2301      	movs	r3, #1
 8008762:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008764:	e03f      	b.n	80087e6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876e:	d123      	bne.n	80087b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008774:	2b03      	cmp	r3, #3
 8008776:	d838      	bhi.n	80087ea <DMA_CheckFifoParam+0xda>
 8008778:	a201      	add	r2, pc, #4	; (adr r2, 8008780 <DMA_CheckFifoParam+0x70>)
 800877a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800877e:	bf00      	nop
 8008780:	08008791 	.word	0x08008791
 8008784:	08008797 	.word	0x08008797
 8008788:	08008791 	.word	0x08008791
 800878c:	080087a9 	.word	0x080087a9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
        break;
 8008794:	e030      	b.n	80087f8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d025      	beq.n	80087ee <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80087a2:	2301      	movs	r3, #1
 80087a4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80087a6:	e022      	b.n	80087ee <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80087b0:	d11f      	bne.n	80087f2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80087b2:	2301      	movs	r3, #1
 80087b4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80087b6:	e01c      	b.n	80087f2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087bc:	2b02      	cmp	r3, #2
 80087be:	d902      	bls.n	80087c6 <DMA_CheckFifoParam+0xb6>
 80087c0:	2b03      	cmp	r3, #3
 80087c2:	d003      	beq.n	80087cc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80087c4:	e018      	b.n	80087f8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80087c6:	2301      	movs	r3, #1
 80087c8:	73fb      	strb	r3, [r7, #15]
        break;
 80087ca:	e015      	b.n	80087f8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d00e      	beq.n	80087f6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80087d8:	2301      	movs	r3, #1
 80087da:	73fb      	strb	r3, [r7, #15]
    break;
 80087dc:	e00b      	b.n	80087f6 <DMA_CheckFifoParam+0xe6>
        break;
 80087de:	bf00      	nop
 80087e0:	e00a      	b.n	80087f8 <DMA_CheckFifoParam+0xe8>
        break;
 80087e2:	bf00      	nop
 80087e4:	e008      	b.n	80087f8 <DMA_CheckFifoParam+0xe8>
        break;
 80087e6:	bf00      	nop
 80087e8:	e006      	b.n	80087f8 <DMA_CheckFifoParam+0xe8>
        break;
 80087ea:	bf00      	nop
 80087ec:	e004      	b.n	80087f8 <DMA_CheckFifoParam+0xe8>
        break;
 80087ee:	bf00      	nop
 80087f0:	e002      	b.n	80087f8 <DMA_CheckFifoParam+0xe8>
        break;
 80087f2:	bf00      	nop
 80087f4:	e000      	b.n	80087f8 <DMA_CheckFifoParam+0xe8>
    break;
 80087f6:	bf00      	nop
    }
  }

  return status;
 80087f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	3714      	adds	r7, #20
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr
 8008806:	bf00      	nop

08008808 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008808:	b480      	push	{r7}
 800880a:	b085      	sub	sp, #20
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a38      	ldr	r2, [pc, #224]	; (80088fc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d022      	beq.n	8008866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a36      	ldr	r2, [pc, #216]	; (8008900 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d01d      	beq.n	8008866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a35      	ldr	r2, [pc, #212]	; (8008904 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d018      	beq.n	8008866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a33      	ldr	r2, [pc, #204]	; (8008908 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d013      	beq.n	8008866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a32      	ldr	r2, [pc, #200]	; (800890c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d00e      	beq.n	8008866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a30      	ldr	r2, [pc, #192]	; (8008910 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d009      	beq.n	8008866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a2f      	ldr	r2, [pc, #188]	; (8008914 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d004      	beq.n	8008866 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a2d      	ldr	r2, [pc, #180]	; (8008918 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d101      	bne.n	800886a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008866:	2301      	movs	r3, #1
 8008868:	e000      	b.n	800886c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800886a:	2300      	movs	r3, #0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01a      	beq.n	80088a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	b2db      	uxtb	r3, r3
 8008876:	3b08      	subs	r3, #8
 8008878:	4a28      	ldr	r2, [pc, #160]	; (800891c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800887a:	fba2 2303 	umull	r2, r3, r2, r3
 800887e:	091b      	lsrs	r3, r3, #4
 8008880:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4b26      	ldr	r3, [pc, #152]	; (8008920 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a24      	ldr	r2, [pc, #144]	; (8008924 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008894:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	f003 031f 	and.w	r3, r3, #31
 800889c:	2201      	movs	r2, #1
 800889e:	409a      	lsls	r2, r3
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80088a4:	e024      	b.n	80088f0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	b2db      	uxtb	r3, r3
 80088ac:	3b10      	subs	r3, #16
 80088ae:	4a1e      	ldr	r2, [pc, #120]	; (8008928 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80088b0:	fba2 2303 	umull	r2, r3, r2, r3
 80088b4:	091b      	lsrs	r3, r3, #4
 80088b6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	4a1c      	ldr	r2, [pc, #112]	; (800892c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d806      	bhi.n	80088ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	4a1b      	ldr	r2, [pc, #108]	; (8008930 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d902      	bls.n	80088ce <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	3308      	adds	r3, #8
 80088cc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	4b18      	ldr	r3, [pc, #96]	; (8008934 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	461a      	mov	r2, r3
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a16      	ldr	r2, [pc, #88]	; (8008938 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80088e0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	f003 031f 	and.w	r3, r3, #31
 80088e8:	2201      	movs	r2, #1
 80088ea:	409a      	lsls	r2, r3
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	669a      	str	r2, [r3, #104]	; 0x68
}
 80088f0:	bf00      	nop
 80088f2:	3714      	adds	r7, #20
 80088f4:	46bd      	mov	sp, r7
 80088f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fa:	4770      	bx	lr
 80088fc:	58025408 	.word	0x58025408
 8008900:	5802541c 	.word	0x5802541c
 8008904:	58025430 	.word	0x58025430
 8008908:	58025444 	.word	0x58025444
 800890c:	58025458 	.word	0x58025458
 8008910:	5802546c 	.word	0x5802546c
 8008914:	58025480 	.word	0x58025480
 8008918:	58025494 	.word	0x58025494
 800891c:	cccccccd 	.word	0xcccccccd
 8008920:	16009600 	.word	0x16009600
 8008924:	58025880 	.word	0x58025880
 8008928:	aaaaaaab 	.word	0xaaaaaaab
 800892c:	400204b8 	.word	0x400204b8
 8008930:	4002040f 	.word	0x4002040f
 8008934:	10008200 	.word	0x10008200
 8008938:	40020880 	.word	0x40020880

0800893c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800893c:	b480      	push	{r7}
 800893e:	b085      	sub	sp, #20
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	b2db      	uxtb	r3, r3
 800894a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d04a      	beq.n	80089e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2b08      	cmp	r3, #8
 8008956:	d847      	bhi.n	80089e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a25      	ldr	r2, [pc, #148]	; (80089f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d022      	beq.n	80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	4a24      	ldr	r2, [pc, #144]	; (80089f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008968:	4293      	cmp	r3, r2
 800896a:	d01d      	beq.n	80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4a22      	ldr	r2, [pc, #136]	; (80089fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008972:	4293      	cmp	r3, r2
 8008974:	d018      	beq.n	80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	4a21      	ldr	r2, [pc, #132]	; (8008a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d013      	beq.n	80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	4a1f      	ldr	r2, [pc, #124]	; (8008a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008986:	4293      	cmp	r3, r2
 8008988:	d00e      	beq.n	80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a1e      	ldr	r2, [pc, #120]	; (8008a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d009      	beq.n	80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a1c      	ldr	r2, [pc, #112]	; (8008a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d004      	beq.n	80089a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a1b      	ldr	r2, [pc, #108]	; (8008a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d101      	bne.n	80089ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80089a8:	2301      	movs	r3, #1
 80089aa:	e000      	b.n	80089ae <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80089ac:	2300      	movs	r3, #0
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d00a      	beq.n	80089c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	4b17      	ldr	r3, [pc, #92]	; (8008a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80089b6:	4413      	add	r3, r2
 80089b8:	009b      	lsls	r3, r3, #2
 80089ba:	461a      	mov	r2, r3
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	4a15      	ldr	r2, [pc, #84]	; (8008a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80089c4:	671a      	str	r2, [r3, #112]	; 0x70
 80089c6:	e009      	b.n	80089dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	4b14      	ldr	r3, [pc, #80]	; (8008a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	461a      	mov	r2, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	4a11      	ldr	r2, [pc, #68]	; (8008a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80089da:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	3b01      	subs	r3, #1
 80089e0:	2201      	movs	r2, #1
 80089e2:	409a      	lsls	r2, r3
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80089e8:	bf00      	nop
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	58025408 	.word	0x58025408
 80089f8:	5802541c 	.word	0x5802541c
 80089fc:	58025430 	.word	0x58025430
 8008a00:	58025444 	.word	0x58025444
 8008a04:	58025458 	.word	0x58025458
 8008a08:	5802546c 	.word	0x5802546c
 8008a0c:	58025480 	.word	0x58025480
 8008a10:	58025494 	.word	0x58025494
 8008a14:	1600963f 	.word	0x1600963f
 8008a18:	58025940 	.word	0x58025940
 8008a1c:	1000823f 	.word	0x1000823f
 8008a20:	40020940 	.word	0x40020940

08008a24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a24:	b480      	push	{r7}
 8008a26:	b089      	sub	sp, #36	; 0x24
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
 8008a2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a2e:	2300      	movs	r3, #0
 8008a30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008a32:	4b89      	ldr	r3, [pc, #548]	; (8008c58 <HAL_GPIO_Init+0x234>)
 8008a34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008a36:	e194      	b.n	8008d62 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	2101      	movs	r1, #1
 8008a3e:	69fb      	ldr	r3, [r7, #28]
 8008a40:	fa01 f303 	lsl.w	r3, r1, r3
 8008a44:	4013      	ands	r3, r2
 8008a46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f000 8186 	beq.w	8008d5c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	f003 0303 	and.w	r3, r3, #3
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d005      	beq.n	8008a68 <HAL_GPIO_Init+0x44>
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	f003 0303 	and.w	r3, r3, #3
 8008a64:	2b02      	cmp	r3, #2
 8008a66:	d130      	bne.n	8008aca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	2203      	movs	r2, #3
 8008a74:	fa02 f303 	lsl.w	r3, r2, r3
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	69ba      	ldr	r2, [r7, #24]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	005b      	lsls	r3, r3, #1
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	69ba      	ldr	r2, [r7, #24]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	69ba      	ldr	r2, [r7, #24]
 8008a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	69fb      	ldr	r3, [r7, #28]
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	43db      	mvns	r3, r3
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	091b      	lsrs	r3, r3, #4
 8008ab4:	f003 0201 	and.w	r2, r3, #1
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	fa02 f303 	lsl.w	r3, r2, r3
 8008abe:	69ba      	ldr	r2, [r7, #24]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	69ba      	ldr	r2, [r7, #24]
 8008ac8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 0303 	and.w	r3, r3, #3
 8008ad2:	2b03      	cmp	r3, #3
 8008ad4:	d017      	beq.n	8008b06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	68db      	ldr	r3, [r3, #12]
 8008ada:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	005b      	lsls	r3, r3, #1
 8008ae0:	2203      	movs	r2, #3
 8008ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ae6:	43db      	mvns	r3, r3
 8008ae8:	69ba      	ldr	r2, [r7, #24]
 8008aea:	4013      	ands	r3, r2
 8008aec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008aee:	683b      	ldr	r3, [r7, #0]
 8008af0:	689a      	ldr	r2, [r3, #8]
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	fa02 f303 	lsl.w	r3, r2, r3
 8008afa:	69ba      	ldr	r2, [r7, #24]
 8008afc:	4313      	orrs	r3, r2
 8008afe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	685b      	ldr	r3, [r3, #4]
 8008b0a:	f003 0303 	and.w	r3, r3, #3
 8008b0e:	2b02      	cmp	r3, #2
 8008b10:	d123      	bne.n	8008b5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b12:	69fb      	ldr	r3, [r7, #28]
 8008b14:	08da      	lsrs	r2, r3, #3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	3208      	adds	r2, #8
 8008b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008b20:	69fb      	ldr	r3, [r7, #28]
 8008b22:	f003 0307 	and.w	r3, r3, #7
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	220f      	movs	r2, #15
 8008b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b2e:	43db      	mvns	r3, r3
 8008b30:	69ba      	ldr	r2, [r7, #24]
 8008b32:	4013      	ands	r3, r2
 8008b34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	691a      	ldr	r2, [r3, #16]
 8008b3a:	69fb      	ldr	r3, [r7, #28]
 8008b3c:	f003 0307 	and.w	r3, r3, #7
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	fa02 f303 	lsl.w	r3, r2, r3
 8008b46:	69ba      	ldr	r2, [r7, #24]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008b4c:	69fb      	ldr	r3, [r7, #28]
 8008b4e:	08da      	lsrs	r2, r3, #3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	3208      	adds	r2, #8
 8008b54:	69b9      	ldr	r1, [r7, #24]
 8008b56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b60:	69fb      	ldr	r3, [r7, #28]
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	2203      	movs	r2, #3
 8008b66:	fa02 f303 	lsl.w	r3, r2, r3
 8008b6a:	43db      	mvns	r3, r3
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	685b      	ldr	r3, [r3, #4]
 8008b76:	f003 0203 	and.w	r2, r3, #3
 8008b7a:	69fb      	ldr	r3, [r7, #28]
 8008b7c:	005b      	lsls	r3, r3, #1
 8008b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b82:	69ba      	ldr	r2, [r7, #24]
 8008b84:	4313      	orrs	r3, r2
 8008b86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	69ba      	ldr	r2, [r7, #24]
 8008b8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	f000 80e0 	beq.w	8008d5c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b9c:	4b2f      	ldr	r3, [pc, #188]	; (8008c5c <HAL_GPIO_Init+0x238>)
 8008b9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ba2:	4a2e      	ldr	r2, [pc, #184]	; (8008c5c <HAL_GPIO_Init+0x238>)
 8008ba4:	f043 0302 	orr.w	r3, r3, #2
 8008ba8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008bac:	4b2b      	ldr	r3, [pc, #172]	; (8008c5c <HAL_GPIO_Init+0x238>)
 8008bae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bb2:	f003 0302 	and.w	r3, r3, #2
 8008bb6:	60fb      	str	r3, [r7, #12]
 8008bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bba:	4a29      	ldr	r2, [pc, #164]	; (8008c60 <HAL_GPIO_Init+0x23c>)
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	089b      	lsrs	r3, r3, #2
 8008bc0:	3302      	adds	r3, #2
 8008bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008bc8:	69fb      	ldr	r3, [r7, #28]
 8008bca:	f003 0303 	and.w	r3, r3, #3
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	220f      	movs	r2, #15
 8008bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8008bd6:	43db      	mvns	r3, r3
 8008bd8:	69ba      	ldr	r2, [r7, #24]
 8008bda:	4013      	ands	r3, r2
 8008bdc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	4a20      	ldr	r2, [pc, #128]	; (8008c64 <HAL_GPIO_Init+0x240>)
 8008be2:	4293      	cmp	r3, r2
 8008be4:	d052      	beq.n	8008c8c <HAL_GPIO_Init+0x268>
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a1f      	ldr	r2, [pc, #124]	; (8008c68 <HAL_GPIO_Init+0x244>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d031      	beq.n	8008c52 <HAL_GPIO_Init+0x22e>
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	4a1e      	ldr	r2, [pc, #120]	; (8008c6c <HAL_GPIO_Init+0x248>)
 8008bf2:	4293      	cmp	r3, r2
 8008bf4:	d02b      	beq.n	8008c4e <HAL_GPIO_Init+0x22a>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	4a1d      	ldr	r2, [pc, #116]	; (8008c70 <HAL_GPIO_Init+0x24c>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d025      	beq.n	8008c4a <HAL_GPIO_Init+0x226>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4a1c      	ldr	r2, [pc, #112]	; (8008c74 <HAL_GPIO_Init+0x250>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d01f      	beq.n	8008c46 <HAL_GPIO_Init+0x222>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	4a1b      	ldr	r2, [pc, #108]	; (8008c78 <HAL_GPIO_Init+0x254>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d019      	beq.n	8008c42 <HAL_GPIO_Init+0x21e>
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	4a1a      	ldr	r2, [pc, #104]	; (8008c7c <HAL_GPIO_Init+0x258>)
 8008c12:	4293      	cmp	r3, r2
 8008c14:	d013      	beq.n	8008c3e <HAL_GPIO_Init+0x21a>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a19      	ldr	r2, [pc, #100]	; (8008c80 <HAL_GPIO_Init+0x25c>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d00d      	beq.n	8008c3a <HAL_GPIO_Init+0x216>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a18      	ldr	r2, [pc, #96]	; (8008c84 <HAL_GPIO_Init+0x260>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d007      	beq.n	8008c36 <HAL_GPIO_Init+0x212>
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	4a17      	ldr	r2, [pc, #92]	; (8008c88 <HAL_GPIO_Init+0x264>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d101      	bne.n	8008c32 <HAL_GPIO_Init+0x20e>
 8008c2e:	2309      	movs	r3, #9
 8008c30:	e02d      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c32:	230a      	movs	r3, #10
 8008c34:	e02b      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c36:	2308      	movs	r3, #8
 8008c38:	e029      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c3a:	2307      	movs	r3, #7
 8008c3c:	e027      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c3e:	2306      	movs	r3, #6
 8008c40:	e025      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c42:	2305      	movs	r3, #5
 8008c44:	e023      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c46:	2304      	movs	r3, #4
 8008c48:	e021      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	e01f      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c4e:	2302      	movs	r3, #2
 8008c50:	e01d      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c52:	2301      	movs	r3, #1
 8008c54:	e01b      	b.n	8008c8e <HAL_GPIO_Init+0x26a>
 8008c56:	bf00      	nop
 8008c58:	58000080 	.word	0x58000080
 8008c5c:	58024400 	.word	0x58024400
 8008c60:	58000400 	.word	0x58000400
 8008c64:	58020000 	.word	0x58020000
 8008c68:	58020400 	.word	0x58020400
 8008c6c:	58020800 	.word	0x58020800
 8008c70:	58020c00 	.word	0x58020c00
 8008c74:	58021000 	.word	0x58021000
 8008c78:	58021400 	.word	0x58021400
 8008c7c:	58021800 	.word	0x58021800
 8008c80:	58021c00 	.word	0x58021c00
 8008c84:	58022000 	.word	0x58022000
 8008c88:	58022400 	.word	0x58022400
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	69fa      	ldr	r2, [r7, #28]
 8008c90:	f002 0203 	and.w	r2, r2, #3
 8008c94:	0092      	lsls	r2, r2, #2
 8008c96:	4093      	lsls	r3, r2
 8008c98:	69ba      	ldr	r2, [r7, #24]
 8008c9a:	4313      	orrs	r3, r2
 8008c9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c9e:	4938      	ldr	r1, [pc, #224]	; (8008d80 <HAL_GPIO_Init+0x35c>)
 8008ca0:	69fb      	ldr	r3, [r7, #28]
 8008ca2:	089b      	lsrs	r3, r3, #2
 8008ca4:	3302      	adds	r3, #2
 8008ca6:	69ba      	ldr	r2, [r7, #24]
 8008ca8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008cac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	43db      	mvns	r3, r3
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	4013      	ands	r3, r2
 8008cbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008cd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008cda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008cde:	685b      	ldr	r3, [r3, #4]
 8008ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	43db      	mvns	r3, r3
 8008ce6:	69ba      	ldr	r2, [r7, #24]
 8008ce8:	4013      	ands	r3, r2
 8008cea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d003      	beq.n	8008d00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008cf8:	69ba      	ldr	r2, [r7, #24]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008d00:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	43db      	mvns	r3, r3
 8008d12:	69ba      	ldr	r2, [r7, #24]
 8008d14:	4013      	ands	r3, r2
 8008d16:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	685b      	ldr	r3, [r3, #4]
 8008d1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d003      	beq.n	8008d2c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008d24:	69ba      	ldr	r2, [r7, #24]
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008d2c:	697b      	ldr	r3, [r7, #20]
 8008d2e:	69ba      	ldr	r2, [r7, #24]
 8008d30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008d38:	693b      	ldr	r3, [r7, #16]
 8008d3a:	43db      	mvns	r3, r3
 8008d3c:	69ba      	ldr	r2, [r7, #24]
 8008d3e:	4013      	ands	r3, r2
 8008d40:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d42:	683b      	ldr	r3, [r7, #0]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d003      	beq.n	8008d56 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008d4e:	69ba      	ldr	r2, [r7, #24]
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	69ba      	ldr	r2, [r7, #24]
 8008d5a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008d5c:	69fb      	ldr	r3, [r7, #28]
 8008d5e:	3301      	adds	r3, #1
 8008d60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008d62:	683b      	ldr	r3, [r7, #0]
 8008d64:	681a      	ldr	r2, [r3, #0]
 8008d66:	69fb      	ldr	r3, [r7, #28]
 8008d68:	fa22 f303 	lsr.w	r3, r2, r3
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	f47f ae63 	bne.w	8008a38 <HAL_GPIO_Init+0x14>
  }
}
 8008d72:	bf00      	nop
 8008d74:	bf00      	nop
 8008d76:	3724      	adds	r7, #36	; 0x24
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr
 8008d80:	58000400 	.word	0x58000400

08008d84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b085      	sub	sp, #20
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	460b      	mov	r3, r1
 8008d8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	691a      	ldr	r2, [r3, #16]
 8008d94:	887b      	ldrh	r3, [r7, #2]
 8008d96:	4013      	ands	r3, r2
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008d9c:	2301      	movs	r3, #1
 8008d9e:	73fb      	strb	r3, [r7, #15]
 8008da0:	e001      	b.n	8008da6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008da2:	2300      	movs	r3, #0
 8008da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008da8:	4618      	mov	r0, r3
 8008daa:	3714      	adds	r7, #20
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	807b      	strh	r3, [r7, #2]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008dc4:	787b      	ldrb	r3, [r7, #1]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008dca:	887a      	ldrh	r2, [r7, #2]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008dd0:	e003      	b.n	8008dda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008dd2:	887b      	ldrh	r3, [r7, #2]
 8008dd4:	041a      	lsls	r2, r3, #16
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	619a      	str	r2, [r3, #24]
}
 8008dda:	bf00      	nop
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr
	...

08008de8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d101      	bne.n	8008dfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008df6:	2301      	movs	r3, #1
 8008df8:	e08b      	b.n	8008f12 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e00:	b2db      	uxtb	r3, r3
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d106      	bne.n	8008e14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f7fa f8e6 	bl	8002fe0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2224      	movs	r2, #36	; 0x24
 8008e18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f022 0201 	bic.w	r2, r2, #1
 8008e2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685a      	ldr	r2, [r3, #4]
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008e38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	689a      	ldr	r2, [r3, #8]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008e48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d107      	bne.n	8008e62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689a      	ldr	r2, [r3, #8]
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008e5e:	609a      	str	r2, [r3, #8]
 8008e60:	e006      	b.n	8008e70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	689a      	ldr	r2, [r3, #8]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008e6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68db      	ldr	r3, [r3, #12]
 8008e74:	2b02      	cmp	r3, #2
 8008e76:	d108      	bne.n	8008e8a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	685a      	ldr	r2, [r3, #4]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e86:	605a      	str	r2, [r3, #4]
 8008e88:	e007      	b.n	8008e9a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e98:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6859      	ldr	r1, [r3, #4]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681a      	ldr	r2, [r3, #0]
 8008ea4:	4b1d      	ldr	r3, [pc, #116]	; (8008f1c <HAL_I2C_Init+0x134>)
 8008ea6:	430b      	orrs	r3, r1
 8008ea8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	68da      	ldr	r2, [r3, #12]
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008eb8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	691a      	ldr	r2, [r3, #16]
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	430a      	orrs	r2, r1
 8008ed2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	69d9      	ldr	r1, [r3, #28]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	6a1a      	ldr	r2, [r3, #32]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	430a      	orrs	r2, r1
 8008ee2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	681a      	ldr	r2, [r3, #0]
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f042 0201 	orr.w	r2, r2, #1
 8008ef2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2220      	movs	r2, #32
 8008efe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	2200      	movs	r2, #0
 8008f06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008f10:	2300      	movs	r3, #0
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	3708      	adds	r7, #8
 8008f16:	46bd      	mov	sp, r7
 8008f18:	bd80      	pop	{r7, pc}
 8008f1a:	bf00      	nop
 8008f1c:	02008000 	.word	0x02008000

08008f20 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b088      	sub	sp, #32
 8008f24:	af02      	add	r7, sp, #8
 8008f26:	60f8      	str	r0, [r7, #12]
 8008f28:	607a      	str	r2, [r7, #4]
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	460b      	mov	r3, r1
 8008f2e:	817b      	strh	r3, [r7, #10]
 8008f30:	4613      	mov	r3, r2
 8008f32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f3a:	b2db      	uxtb	r3, r3
 8008f3c:	2b20      	cmp	r3, #32
 8008f3e:	f040 80fd 	bne.w	800913c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	d101      	bne.n	8008f50 <HAL_I2C_Master_Transmit+0x30>
 8008f4c:	2302      	movs	r3, #2
 8008f4e:	e0f6      	b.n	800913e <HAL_I2C_Master_Transmit+0x21e>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008f58:	f7fa fe00 	bl	8003b5c <HAL_GetTick>
 8008f5c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	9300      	str	r3, [sp, #0]
 8008f62:	2319      	movs	r3, #25
 8008f64:	2201      	movs	r2, #1
 8008f66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fa0a 	bl	8009384 <I2C_WaitOnFlagUntilTimeout>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d001      	beq.n	8008f7a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e0e1      	b.n	800913e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2221      	movs	r2, #33	; 0x21
 8008f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	2210      	movs	r2, #16
 8008f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	687a      	ldr	r2, [r7, #4]
 8008f94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	893a      	ldrh	r2, [r7, #8]
 8008f9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa6:	b29b      	uxth	r3, r3
 8008fa8:	2bff      	cmp	r3, #255	; 0xff
 8008faa:	d906      	bls.n	8008fba <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	22ff      	movs	r2, #255	; 0xff
 8008fb0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008fb2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fb6:	617b      	str	r3, [r7, #20]
 8008fb8:	e007      	b.n	8008fca <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fbe:	b29a      	uxth	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008fc4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fc8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d024      	beq.n	800901c <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fd6:	781a      	ldrb	r2, [r3, #0]
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe2:	1c5a      	adds	r2, r3, #1
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fec:	b29b      	uxth	r3, r3
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	b29a      	uxth	r2, r3
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	b29a      	uxth	r2, r3
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009006:	b2db      	uxtb	r3, r3
 8009008:	3301      	adds	r3, #1
 800900a:	b2da      	uxtb	r2, r3
 800900c:	8979      	ldrh	r1, [r7, #10]
 800900e:	4b4e      	ldr	r3, [pc, #312]	; (8009148 <HAL_I2C_Master_Transmit+0x228>)
 8009010:	9300      	str	r3, [sp, #0]
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	68f8      	ldr	r0, [r7, #12]
 8009016:	f000 fc05 	bl	8009824 <I2C_TransferConfig>
 800901a:	e066      	b.n	80090ea <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009020:	b2da      	uxtb	r2, r3
 8009022:	8979      	ldrh	r1, [r7, #10]
 8009024:	4b48      	ldr	r3, [pc, #288]	; (8009148 <HAL_I2C_Master_Transmit+0x228>)
 8009026:	9300      	str	r3, [sp, #0]
 8009028:	697b      	ldr	r3, [r7, #20]
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fbfa 	bl	8009824 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8009030:	e05b      	b.n	80090ea <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009032:	693a      	ldr	r2, [r7, #16]
 8009034:	6a39      	ldr	r1, [r7, #32]
 8009036:	68f8      	ldr	r0, [r7, #12]
 8009038:	f000 f9fd 	bl	8009436 <I2C_WaitOnTXISFlagUntilTimeout>
 800903c:	4603      	mov	r3, r0
 800903e:	2b00      	cmp	r3, #0
 8009040:	d001      	beq.n	8009046 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8009042:	2301      	movs	r3, #1
 8009044:	e07b      	b.n	800913e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904a:	781a      	ldrb	r2, [r3, #0]
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009060:	b29b      	uxth	r3, r3
 8009062:	3b01      	subs	r3, #1
 8009064:	b29a      	uxth	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800906e:	3b01      	subs	r3, #1
 8009070:	b29a      	uxth	r2, r3
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800907a:	b29b      	uxth	r3, r3
 800907c:	2b00      	cmp	r3, #0
 800907e:	d034      	beq.n	80090ea <HAL_I2C_Master_Transmit+0x1ca>
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009084:	2b00      	cmp	r3, #0
 8009086:	d130      	bne.n	80090ea <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	9300      	str	r3, [sp, #0]
 800908c:	6a3b      	ldr	r3, [r7, #32]
 800908e:	2200      	movs	r2, #0
 8009090:	2180      	movs	r1, #128	; 0x80
 8009092:	68f8      	ldr	r0, [r7, #12]
 8009094:	f000 f976 	bl	8009384 <I2C_WaitOnFlagUntilTimeout>
 8009098:	4603      	mov	r3, r0
 800909a:	2b00      	cmp	r3, #0
 800909c:	d001      	beq.n	80090a2 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e04d      	b.n	800913e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2bff      	cmp	r3, #255	; 0xff
 80090aa:	d90e      	bls.n	80090ca <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	22ff      	movs	r2, #255	; 0xff
 80090b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	8979      	ldrh	r1, [r7, #10]
 80090ba:	2300      	movs	r3, #0
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 fbae 	bl	8009824 <I2C_TransferConfig>
 80090c8:	e00f      	b.n	80090ea <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	8979      	ldrh	r1, [r7, #10]
 80090dc:	2300      	movs	r3, #0
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fb9d 	bl	8009824 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ee:	b29b      	uxth	r3, r3
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d19e      	bne.n	8009032 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090f4:	693a      	ldr	r2, [r7, #16]
 80090f6:	6a39      	ldr	r1, [r7, #32]
 80090f8:	68f8      	ldr	r0, [r7, #12]
 80090fa:	f000 f9e3 	bl	80094c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b00      	cmp	r3, #0
 8009102:	d001      	beq.n	8009108 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009104:	2301      	movs	r3, #1
 8009106:	e01a      	b.n	800913e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	2220      	movs	r2, #32
 800910e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	6859      	ldr	r1, [r3, #4]
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	4b0c      	ldr	r3, [pc, #48]	; (800914c <HAL_I2C_Master_Transmit+0x22c>)
 800911c:	400b      	ands	r3, r1
 800911e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2220      	movs	r2, #32
 8009124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	2200      	movs	r2, #0
 800912c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009138:	2300      	movs	r3, #0
 800913a:	e000      	b.n	800913e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800913c:	2302      	movs	r3, #2
  }
}
 800913e:	4618      	mov	r0, r3
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	80002000 	.word	0x80002000
 800914c:	fe00e800 	.word	0xfe00e800

08009150 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af02      	add	r7, sp, #8
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	607a      	str	r2, [r7, #4]
 800915a:	461a      	mov	r2, r3
 800915c:	460b      	mov	r3, r1
 800915e:	817b      	strh	r3, [r7, #10]
 8009160:	4613      	mov	r3, r2
 8009162:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800916a:	b2db      	uxtb	r3, r3
 800916c:	2b20      	cmp	r3, #32
 800916e:	f040 80db 	bne.w	8009328 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009178:	2b01      	cmp	r3, #1
 800917a:	d101      	bne.n	8009180 <HAL_I2C_Master_Receive+0x30>
 800917c:	2302      	movs	r3, #2
 800917e:	e0d4      	b.n	800932a <HAL_I2C_Master_Receive+0x1da>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2201      	movs	r2, #1
 8009184:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009188:	f7fa fce8 	bl	8003b5c <HAL_GetTick>
 800918c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800918e:	697b      	ldr	r3, [r7, #20]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	2319      	movs	r3, #25
 8009194:	2201      	movs	r2, #1
 8009196:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800919a:	68f8      	ldr	r0, [r7, #12]
 800919c:	f000 f8f2 	bl	8009384 <I2C_WaitOnFlagUntilTimeout>
 80091a0:	4603      	mov	r3, r0
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d001      	beq.n	80091aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e0bf      	b.n	800932a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	2222      	movs	r2, #34	; 0x22
 80091ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2210      	movs	r2, #16
 80091b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	2200      	movs	r2, #0
 80091be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	893a      	ldrh	r2, [r7, #8]
 80091ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2200      	movs	r2, #0
 80091d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091d6:	b29b      	uxth	r3, r3
 80091d8:	2bff      	cmp	r3, #255	; 0xff
 80091da:	d90e      	bls.n	80091fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	22ff      	movs	r2, #255	; 0xff
 80091e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091e6:	b2da      	uxtb	r2, r3
 80091e8:	8979      	ldrh	r1, [r7, #10]
 80091ea:	4b52      	ldr	r3, [pc, #328]	; (8009334 <HAL_I2C_Master_Receive+0x1e4>)
 80091ec:	9300      	str	r3, [sp, #0]
 80091ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f000 fb16 	bl	8009824 <I2C_TransferConfig>
 80091f8:	e06d      	b.n	80092d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009208:	b2da      	uxtb	r2, r3
 800920a:	8979      	ldrh	r1, [r7, #10]
 800920c:	4b49      	ldr	r3, [pc, #292]	; (8009334 <HAL_I2C_Master_Receive+0x1e4>)
 800920e:	9300      	str	r3, [sp, #0]
 8009210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009214:	68f8      	ldr	r0, [r7, #12]
 8009216:	f000 fb05 	bl	8009824 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800921a:	e05c      	b.n	80092d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	6a39      	ldr	r1, [r7, #32]
 8009220:	68f8      	ldr	r0, [r7, #12]
 8009222:	f000 f993 	bl	800954c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009226:	4603      	mov	r3, r0
 8009228:	2b00      	cmp	r3, #0
 800922a:	d001      	beq.n	8009230 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800922c:	2301      	movs	r3, #1
 800922e:	e07c      	b.n	800932a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800923a:	b2d2      	uxtb	r2, r2
 800923c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924c:	3b01      	subs	r3, #1
 800924e:	b29a      	uxth	r2, r3
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009258:	b29b      	uxth	r3, r3
 800925a:	3b01      	subs	r3, #1
 800925c:	b29a      	uxth	r2, r3
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009266:	b29b      	uxth	r3, r3
 8009268:	2b00      	cmp	r3, #0
 800926a:	d034      	beq.n	80092d6 <HAL_I2C_Master_Receive+0x186>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009270:	2b00      	cmp	r3, #0
 8009272:	d130      	bne.n	80092d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	9300      	str	r3, [sp, #0]
 8009278:	6a3b      	ldr	r3, [r7, #32]
 800927a:	2200      	movs	r2, #0
 800927c:	2180      	movs	r1, #128	; 0x80
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f000 f880 	bl	8009384 <I2C_WaitOnFlagUntilTimeout>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d001      	beq.n	800928e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800928a:	2301      	movs	r3, #1
 800928c:	e04d      	b.n	800932a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009292:	b29b      	uxth	r3, r3
 8009294:	2bff      	cmp	r3, #255	; 0xff
 8009296:	d90e      	bls.n	80092b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	22ff      	movs	r2, #255	; 0xff
 800929c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092a2:	b2da      	uxtb	r2, r3
 80092a4:	8979      	ldrh	r1, [r7, #10]
 80092a6:	2300      	movs	r3, #0
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 fab8 	bl	8009824 <I2C_TransferConfig>
 80092b4:	e00f      	b.n	80092d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092ba:	b29a      	uxth	r2, r3
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	8979      	ldrh	r1, [r7, #10]
 80092c8:	2300      	movs	r3, #0
 80092ca:	9300      	str	r3, [sp, #0]
 80092cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80092d0:	68f8      	ldr	r0, [r7, #12]
 80092d2:	f000 faa7 	bl	8009824 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80092da:	b29b      	uxth	r3, r3
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d19d      	bne.n	800921c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	6a39      	ldr	r1, [r7, #32]
 80092e4:	68f8      	ldr	r0, [r7, #12]
 80092e6:	f000 f8ed 	bl	80094c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80092ea:	4603      	mov	r3, r0
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e01a      	b.n	800932a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	2220      	movs	r2, #32
 80092fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	6859      	ldr	r1, [r3, #4]
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	4b0c      	ldr	r3, [pc, #48]	; (8009338 <HAL_I2C_Master_Receive+0x1e8>)
 8009308:	400b      	ands	r3, r1
 800930a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	2220      	movs	r2, #32
 8009310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	2200      	movs	r2, #0
 8009318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2200      	movs	r2, #0
 8009320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009324:	2300      	movs	r3, #0
 8009326:	e000      	b.n	800932a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8009328:	2302      	movs	r3, #2
  }
}
 800932a:	4618      	mov	r0, r3
 800932c:	3718      	adds	r7, #24
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	80002400 	.word	0x80002400
 8009338:	fe00e800 	.word	0xfe00e800

0800933c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800933c:	b480      	push	{r7}
 800933e:	b083      	sub	sp, #12
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699b      	ldr	r3, [r3, #24]
 800934a:	f003 0302 	and.w	r3, r3, #2
 800934e:	2b02      	cmp	r3, #2
 8009350:	d103      	bne.n	800935a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2200      	movs	r2, #0
 8009358:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	2b01      	cmp	r3, #1
 8009366:	d007      	beq.n	8009378 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	699a      	ldr	r2, [r3, #24]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f042 0201 	orr.w	r2, r2, #1
 8009376:	619a      	str	r2, [r3, #24]
  }
}
 8009378:	bf00      	nop
 800937a:	370c      	adds	r7, #12
 800937c:	46bd      	mov	sp, r7
 800937e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009382:	4770      	bx	lr

08009384 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009384:	b580      	push	{r7, lr}
 8009386:	b084      	sub	sp, #16
 8009388:	af00      	add	r7, sp, #0
 800938a:	60f8      	str	r0, [r7, #12]
 800938c:	60b9      	str	r1, [r7, #8]
 800938e:	603b      	str	r3, [r7, #0]
 8009390:	4613      	mov	r3, r2
 8009392:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009394:	e03b      	b.n	800940e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	6839      	ldr	r1, [r7, #0]
 800939a:	68f8      	ldr	r0, [r7, #12]
 800939c:	f000 f962 	bl	8009664 <I2C_IsErrorOccurred>
 80093a0:	4603      	mov	r3, r0
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d001      	beq.n	80093aa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80093a6:	2301      	movs	r3, #1
 80093a8:	e041      	b.n	800942e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80093b0:	d02d      	beq.n	800940e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b2:	f7fa fbd3 	bl	8003b5c <HAL_GetTick>
 80093b6:	4602      	mov	r2, r0
 80093b8:	69bb      	ldr	r3, [r7, #24]
 80093ba:	1ad3      	subs	r3, r2, r3
 80093bc:	683a      	ldr	r2, [r7, #0]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d302      	bcc.n	80093c8 <I2C_WaitOnFlagUntilTimeout+0x44>
 80093c2:	683b      	ldr	r3, [r7, #0]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d122      	bne.n	800940e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	699a      	ldr	r2, [r3, #24]
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	4013      	ands	r3, r2
 80093d2:	68ba      	ldr	r2, [r7, #8]
 80093d4:	429a      	cmp	r2, r3
 80093d6:	bf0c      	ite	eq
 80093d8:	2301      	moveq	r3, #1
 80093da:	2300      	movne	r3, #0
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	461a      	mov	r2, r3
 80093e0:	79fb      	ldrb	r3, [r7, #7]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d113      	bne.n	800940e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093ea:	f043 0220 	orr.w	r2, r3, #32
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	2220      	movs	r2, #32
 80093f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	2200      	movs	r2, #0
 80093fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2200      	movs	r2, #0
 8009406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e00f      	b.n	800942e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	699a      	ldr	r2, [r3, #24]
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	4013      	ands	r3, r2
 8009418:	68ba      	ldr	r2, [r7, #8]
 800941a:	429a      	cmp	r2, r3
 800941c:	bf0c      	ite	eq
 800941e:	2301      	moveq	r3, #1
 8009420:	2300      	movne	r3, #0
 8009422:	b2db      	uxtb	r3, r3
 8009424:	461a      	mov	r2, r3
 8009426:	79fb      	ldrb	r3, [r7, #7]
 8009428:	429a      	cmp	r2, r3
 800942a:	d0b4      	beq.n	8009396 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800942c:	2300      	movs	r3, #0
}
 800942e:	4618      	mov	r0, r3
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}

08009436 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009436:	b580      	push	{r7, lr}
 8009438:	b084      	sub	sp, #16
 800943a:	af00      	add	r7, sp, #0
 800943c:	60f8      	str	r0, [r7, #12]
 800943e:	60b9      	str	r1, [r7, #8]
 8009440:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009442:	e033      	b.n	80094ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009444:	687a      	ldr	r2, [r7, #4]
 8009446:	68b9      	ldr	r1, [r7, #8]
 8009448:	68f8      	ldr	r0, [r7, #12]
 800944a:	f000 f90b 	bl	8009664 <I2C_IsErrorOccurred>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009454:	2301      	movs	r3, #1
 8009456:	e031      	b.n	80094bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800945e:	d025      	beq.n	80094ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009460:	f7fa fb7c 	bl	8003b5c <HAL_GetTick>
 8009464:	4602      	mov	r2, r0
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	1ad3      	subs	r3, r2, r3
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	429a      	cmp	r2, r3
 800946e:	d302      	bcc.n	8009476 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d11a      	bne.n	80094ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	f003 0302 	and.w	r3, r3, #2
 8009480:	2b02      	cmp	r3, #2
 8009482:	d013      	beq.n	80094ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009488:	f043 0220 	orr.w	r2, r3, #32
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2220      	movs	r2, #32
 8009494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2200      	movs	r2, #0
 80094a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80094a8:	2301      	movs	r3, #1
 80094aa:	e007      	b.n	80094bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	699b      	ldr	r3, [r3, #24]
 80094b2:	f003 0302 	and.w	r3, r3, #2
 80094b6:	2b02      	cmp	r3, #2
 80094b8:	d1c4      	bne.n	8009444 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80094ba:	2300      	movs	r3, #0
}
 80094bc:	4618      	mov	r0, r3
 80094be:	3710      	adds	r7, #16
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	60f8      	str	r0, [r7, #12]
 80094cc:	60b9      	str	r1, [r7, #8]
 80094ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80094d0:	e02f      	b.n	8009532 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 f8c4 	bl	8009664 <I2C_IsErrorOccurred>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80094e2:	2301      	movs	r3, #1
 80094e4:	e02d      	b.n	8009542 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094e6:	f7fa fb39 	bl	8003b5c <HAL_GetTick>
 80094ea:	4602      	mov	r2, r0
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	68ba      	ldr	r2, [r7, #8]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d302      	bcc.n	80094fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d11a      	bne.n	8009532 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	699b      	ldr	r3, [r3, #24]
 8009502:	f003 0320 	and.w	r3, r3, #32
 8009506:	2b20      	cmp	r3, #32
 8009508:	d013      	beq.n	8009532 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800950e:	f043 0220 	orr.w	r2, r3, #32
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2220      	movs	r2, #32
 800951a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	2200      	movs	r2, #0
 8009522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	2200      	movs	r2, #0
 800952a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800952e:	2301      	movs	r3, #1
 8009530:	e007      	b.n	8009542 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	f003 0320 	and.w	r3, r3, #32
 800953c:	2b20      	cmp	r3, #32
 800953e:	d1c8      	bne.n	80094d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b086      	sub	sp, #24
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800955c:	e071      	b.n	8009642 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800955e:	687a      	ldr	r2, [r7, #4]
 8009560:	68b9      	ldr	r1, [r7, #8]
 8009562:	68f8      	ldr	r0, [r7, #12]
 8009564:	f000 f87e 	bl	8009664 <I2C_IsErrorOccurred>
 8009568:	4603      	mov	r3, r0
 800956a:	2b00      	cmp	r3, #0
 800956c:	d001      	beq.n	8009572 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800956e:	2301      	movs	r3, #1
 8009570:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	699b      	ldr	r3, [r3, #24]
 8009578:	f003 0320 	and.w	r3, r3, #32
 800957c:	2b20      	cmp	r3, #32
 800957e:	d13b      	bne.n	80095f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009580:	7dfb      	ldrb	r3, [r7, #23]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d138      	bne.n	80095f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699b      	ldr	r3, [r3, #24]
 800958c:	f003 0304 	and.w	r3, r3, #4
 8009590:	2b04      	cmp	r3, #4
 8009592:	d105      	bne.n	80095a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009598:	2b00      	cmp	r3, #0
 800959a:	d001      	beq.n	80095a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800959c:	2300      	movs	r3, #0
 800959e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	699b      	ldr	r3, [r3, #24]
 80095a6:	f003 0310 	and.w	r3, r3, #16
 80095aa:	2b10      	cmp	r3, #16
 80095ac:	d121      	bne.n	80095f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2210      	movs	r2, #16
 80095b4:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	2204      	movs	r2, #4
 80095ba:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2220      	movs	r2, #32
 80095c2:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	6859      	ldr	r1, [r3, #4]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	4b24      	ldr	r3, [pc, #144]	; (8009660 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80095d0:	400b      	ands	r3, r1
 80095d2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	2220      	movs	r2, #32
 80095d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	2200      	movs	r2, #0
 80095e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	2200      	movs	r2, #0
 80095e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80095ec:	2301      	movs	r3, #1
 80095ee:	75fb      	strb	r3, [r7, #23]
 80095f0:	e002      	b.n	80095f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80095f2:	68fb      	ldr	r3, [r7, #12]
 80095f4:	2200      	movs	r2, #0
 80095f6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80095f8:	f7fa fab0 	bl	8003b5c <HAL_GetTick>
 80095fc:	4602      	mov	r2, r0
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	1ad3      	subs	r3, r2, r3
 8009602:	68ba      	ldr	r2, [r7, #8]
 8009604:	429a      	cmp	r2, r3
 8009606:	d302      	bcc.n	800960e <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 8009608:	68bb      	ldr	r3, [r7, #8]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d119      	bne.n	8009642 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 800960e:	7dfb      	ldrb	r3, [r7, #23]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d116      	bne.n	8009642 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	f003 0304 	and.w	r3, r3, #4
 800961e:	2b04      	cmp	r3, #4
 8009620:	d00f      	beq.n	8009642 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009626:	f043 0220 	orr.w	r2, r3, #32
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	2220      	movs	r2, #32
 8009632:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	2200      	movs	r2, #0
 800963a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800963e:	2301      	movs	r3, #1
 8009640:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b04      	cmp	r3, #4
 800964e:	d002      	beq.n	8009656 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009650:	7dfb      	ldrb	r3, [r7, #23]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d083      	beq.n	800955e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009656:	7dfb      	ldrb	r3, [r7, #23]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3718      	adds	r7, #24
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}
 8009660:	fe00e800 	.word	0xfe00e800

08009664 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b08a      	sub	sp, #40	; 0x28
 8009668:	af00      	add	r7, sp, #0
 800966a:	60f8      	str	r0, [r7, #12]
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009670:	2300      	movs	r3, #0
 8009672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800967e:	2300      	movs	r3, #0
 8009680:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	2b00      	cmp	r3, #0
 800968e:	d068      	beq.n	8009762 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	2210      	movs	r2, #16
 8009696:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009698:	e049      	b.n	800972e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800969a:	68bb      	ldr	r3, [r7, #8]
 800969c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80096a0:	d045      	beq.n	800972e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80096a2:	f7fa fa5b 	bl	8003b5c <HAL_GetTick>
 80096a6:	4602      	mov	r2, r0
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	1ad3      	subs	r3, r2, r3
 80096ac:	68ba      	ldr	r2, [r7, #8]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d302      	bcc.n	80096b8 <I2C_IsErrorOccurred+0x54>
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d13a      	bne.n	800972e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	685b      	ldr	r3, [r3, #4]
 80096be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80096ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	699b      	ldr	r3, [r3, #24]
 80096d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096da:	d121      	bne.n	8009720 <I2C_IsErrorOccurred+0xbc>
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096e2:	d01d      	beq.n	8009720 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80096e4:	7cfb      	ldrb	r3, [r7, #19]
 80096e6:	2b20      	cmp	r3, #32
 80096e8:	d01a      	beq.n	8009720 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	685a      	ldr	r2, [r3, #4]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80096f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80096fa:	f7fa fa2f 	bl	8003b5c <HAL_GetTick>
 80096fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009700:	e00e      	b.n	8009720 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009702:	f7fa fa2b 	bl	8003b5c <HAL_GetTick>
 8009706:	4602      	mov	r2, r0
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	1ad3      	subs	r3, r2, r3
 800970c:	2b19      	cmp	r3, #25
 800970e:	d907      	bls.n	8009720 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009710:	6a3b      	ldr	r3, [r7, #32]
 8009712:	f043 0320 	orr.w	r3, r3, #32
 8009716:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8009718:	2301      	movs	r3, #1
 800971a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800971e:	e006      	b.n	800972e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f003 0320 	and.w	r3, r3, #32
 800972a:	2b20      	cmp	r3, #32
 800972c:	d1e9      	bne.n	8009702 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	f003 0320 	and.w	r3, r3, #32
 8009738:	2b20      	cmp	r3, #32
 800973a:	d003      	beq.n	8009744 <I2C_IsErrorOccurred+0xe0>
 800973c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009740:	2b00      	cmp	r3, #0
 8009742:	d0aa      	beq.n	800969a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009744:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009748:	2b00      	cmp	r3, #0
 800974a:	d103      	bne.n	8009754 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	2220      	movs	r2, #32
 8009752:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	f043 0304 	orr.w	r3, r3, #4
 800975a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800975c:	2301      	movs	r3, #1
 800975e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800976a:	69bb      	ldr	r3, [r7, #24]
 800976c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009770:	2b00      	cmp	r3, #0
 8009772:	d00b      	beq.n	800978c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	f043 0301 	orr.w	r3, r3, #1
 800977a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009784:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009786:	2301      	movs	r3, #1
 8009788:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800978c:	69bb      	ldr	r3, [r7, #24]
 800978e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009792:	2b00      	cmp	r3, #0
 8009794:	d00b      	beq.n	80097ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009796:	6a3b      	ldr	r3, [r7, #32]
 8009798:	f043 0308 	orr.w	r3, r3, #8
 800979c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80097a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80097a8:	2301      	movs	r3, #1
 80097aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80097ae:	69bb      	ldr	r3, [r7, #24]
 80097b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d00b      	beq.n	80097d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	f043 0302 	orr.w	r3, r3, #2
 80097be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80097c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80097ca:	2301      	movs	r3, #1
 80097cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80097d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d01c      	beq.n	8009812 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80097d8:	68f8      	ldr	r0, [r7, #12]
 80097da:	f7ff fdaf 	bl	800933c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	6859      	ldr	r1, [r3, #4]
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681a      	ldr	r2, [r3, #0]
 80097e8:	4b0d      	ldr	r3, [pc, #52]	; (8009820 <I2C_IsErrorOccurred+0x1bc>)
 80097ea:	400b      	ands	r3, r1
 80097ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80097f2:	6a3b      	ldr	r3, [r7, #32]
 80097f4:	431a      	orrs	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2220      	movs	r2, #32
 80097fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	2200      	movs	r2, #0
 8009806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	2200      	movs	r2, #0
 800980e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009812:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009816:	4618      	mov	r0, r3
 8009818:	3728      	adds	r7, #40	; 0x28
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	fe00e800 	.word	0xfe00e800

08009824 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	60f8      	str	r0, [r7, #12]
 800982c:	607b      	str	r3, [r7, #4]
 800982e:	460b      	mov	r3, r1
 8009830:	817b      	strh	r3, [r7, #10]
 8009832:	4613      	mov	r3, r2
 8009834:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009836:	897b      	ldrh	r3, [r7, #10]
 8009838:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800983c:	7a7b      	ldrb	r3, [r7, #9]
 800983e:	041b      	lsls	r3, r3, #16
 8009840:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009844:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	4313      	orrs	r3, r2
 800984e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009852:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685a      	ldr	r2, [r3, #4]
 800985a:	6a3b      	ldr	r3, [r7, #32]
 800985c:	0d5b      	lsrs	r3, r3, #21
 800985e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009862:	4b08      	ldr	r3, [pc, #32]	; (8009884 <I2C_TransferConfig+0x60>)
 8009864:	430b      	orrs	r3, r1
 8009866:	43db      	mvns	r3, r3
 8009868:	ea02 0103 	and.w	r1, r2, r3
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	697a      	ldr	r2, [r7, #20]
 8009872:	430a      	orrs	r2, r1
 8009874:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009876:	bf00      	nop
 8009878:	371c      	adds	r7, #28
 800987a:	46bd      	mov	sp, r7
 800987c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009880:	4770      	bx	lr
 8009882:	bf00      	nop
 8009884:	03ff63ff 	.word	0x03ff63ff

08009888 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009888:	b480      	push	{r7}
 800988a:	b083      	sub	sp, #12
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
 8009890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b20      	cmp	r3, #32
 800989c:	d138      	bne.n	8009910 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098a4:	2b01      	cmp	r3, #1
 80098a6:	d101      	bne.n	80098ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80098a8:	2302      	movs	r3, #2
 80098aa:	e032      	b.n	8009912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2201      	movs	r2, #1
 80098b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2224      	movs	r2, #36	; 0x24
 80098b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f022 0201 	bic.w	r2, r2, #1
 80098ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	681a      	ldr	r2, [r3, #0]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80098da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	6819      	ldr	r1, [r3, #0]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	683a      	ldr	r2, [r7, #0]
 80098e8:	430a      	orrs	r2, r1
 80098ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0201 	orr.w	r2, r2, #1
 80098fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2220      	movs	r2, #32
 8009900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2200      	movs	r2, #0
 8009908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800990c:	2300      	movs	r3, #0
 800990e:	e000      	b.n	8009912 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009910:	2302      	movs	r3, #2
  }
}
 8009912:	4618      	mov	r0, r3
 8009914:	370c      	adds	r7, #12
 8009916:	46bd      	mov	sp, r7
 8009918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800991c:	4770      	bx	lr

0800991e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800991e:	b480      	push	{r7}
 8009920:	b085      	sub	sp, #20
 8009922:	af00      	add	r7, sp, #0
 8009924:	6078      	str	r0, [r7, #4]
 8009926:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800992e:	b2db      	uxtb	r3, r3
 8009930:	2b20      	cmp	r3, #32
 8009932:	d139      	bne.n	80099a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800993a:	2b01      	cmp	r3, #1
 800993c:	d101      	bne.n	8009942 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800993e:	2302      	movs	r3, #2
 8009940:	e033      	b.n	80099aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2201      	movs	r2, #1
 8009946:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2224      	movs	r2, #36	; 0x24
 800994e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681a      	ldr	r2, [r3, #0]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f022 0201 	bic.w	r2, r2, #1
 8009960:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009970:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	021b      	lsls	r3, r3, #8
 8009976:	68fa      	ldr	r2, [r7, #12]
 8009978:	4313      	orrs	r3, r2
 800997a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f042 0201 	orr.w	r2, r2, #1
 8009992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2220      	movs	r2, #32
 8009998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80099a4:	2300      	movs	r3, #0
 80099a6:	e000      	b.n	80099aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80099a8:	2302      	movs	r3, #2
  }
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3714      	adds	r7, #20
 80099ae:	46bd      	mov	sp, r7
 80099b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b4:	4770      	bx	lr
	...

080099b8 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b085      	sub	sp, #20
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80099c0:	4b0d      	ldr	r3, [pc, #52]	; (80099f8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80099c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099c6:	4a0c      	ldr	r2, [pc, #48]	; (80099f8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80099c8:	f043 0302 	orr.w	r3, r3, #2
 80099cc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80099d0:	4b09      	ldr	r3, [pc, #36]	; (80099f8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80099d2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099d6:	f003 0302 	and.w	r3, r3, #2
 80099da:	60fb      	str	r3, [r7, #12]
 80099dc:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80099de:	4b07      	ldr	r3, [pc, #28]	; (80099fc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	4906      	ldr	r1, [pc, #24]	; (80099fc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	4313      	orrs	r3, r2
 80099e8:	604b      	str	r3, [r1, #4]
}
 80099ea:	bf00      	nop
 80099ec:	3714      	adds	r7, #20
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr
 80099f6:	bf00      	nop
 80099f8:	58024400 	.word	0x58024400
 80099fc:	58000400 	.word	0x58000400

08009a00 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009a00:	b480      	push	{r7}
 8009a02:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009a04:	4b05      	ldr	r3, [pc, #20]	; (8009a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a04      	ldr	r2, [pc, #16]	; (8009a1c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009a0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009a0e:	6013      	str	r3, [r2, #0]
}
 8009a10:	bf00      	nop
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr
 8009a1a:	bf00      	nop
 8009a1c:	58024800 	.word	0x58024800

08009a20 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009a28:	4b19      	ldr	r3, [pc, #100]	; (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a2a:	68db      	ldr	r3, [r3, #12]
 8009a2c:	f003 0304 	and.w	r3, r3, #4
 8009a30:	2b04      	cmp	r3, #4
 8009a32:	d00a      	beq.n	8009a4a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009a34:	4b16      	ldr	r3, [pc, #88]	; (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a36:	68db      	ldr	r3, [r3, #12]
 8009a38:	f003 0307 	and.w	r3, r3, #7
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d001      	beq.n	8009a46 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009a42:	2301      	movs	r3, #1
 8009a44:	e01f      	b.n	8009a86 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009a46:	2300      	movs	r3, #0
 8009a48:	e01d      	b.n	8009a86 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009a4a:	4b11      	ldr	r3, [pc, #68]	; (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a4c:	68db      	ldr	r3, [r3, #12]
 8009a4e:	f023 0207 	bic.w	r2, r3, #7
 8009a52:	490f      	ldr	r1, [pc, #60]	; (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009a5a:	f7fa f87f 	bl	8003b5c <HAL_GetTick>
 8009a5e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a60:	e009      	b.n	8009a76 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009a62:	f7fa f87b 	bl	8003b5c <HAL_GetTick>
 8009a66:	4602      	mov	r2, r0
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	1ad3      	subs	r3, r2, r3
 8009a6c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009a70:	d901      	bls.n	8009a76 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e007      	b.n	8009a86 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009a76:	4b06      	ldr	r3, [pc, #24]	; (8009a90 <HAL_PWREx_ConfigSupply+0x70>)
 8009a78:	685b      	ldr	r3, [r3, #4]
 8009a7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009a7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009a82:	d1ee      	bne.n	8009a62 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009a84:	2300      	movs	r3, #0
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3710      	adds	r7, #16
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}
 8009a8e:	bf00      	nop
 8009a90:	58024800 	.word	0x58024800

08009a94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a94:	b580      	push	{r7, lr}
 8009a96:	b08c      	sub	sp, #48	; 0x30
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d102      	bne.n	8009aa8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009aa2:	2301      	movs	r3, #1
 8009aa4:	f000 bc48 	b.w	800a338 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	f000 8088 	beq.w	8009bc6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ab6:	4b99      	ldr	r3, [pc, #612]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009ab8:	691b      	ldr	r3, [r3, #16]
 8009aba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009abe:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ac0:	4b96      	ldr	r3, [pc, #600]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac8:	2b10      	cmp	r3, #16
 8009aca:	d007      	beq.n	8009adc <HAL_RCC_OscConfig+0x48>
 8009acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ace:	2b18      	cmp	r3, #24
 8009ad0:	d111      	bne.n	8009af6 <HAL_RCC_OscConfig+0x62>
 8009ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad4:	f003 0303 	and.w	r3, r3, #3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d10c      	bne.n	8009af6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009adc:	4b8f      	ldr	r3, [pc, #572]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d06d      	beq.n	8009bc4 <HAL_RCC_OscConfig+0x130>
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d169      	bne.n	8009bc4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009af0:	2301      	movs	r3, #1
 8009af2:	f000 bc21 	b.w	800a338 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009afe:	d106      	bne.n	8009b0e <HAL_RCC_OscConfig+0x7a>
 8009b00:	4b86      	ldr	r3, [pc, #536]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a85      	ldr	r2, [pc, #532]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b0a:	6013      	str	r3, [r2, #0]
 8009b0c:	e02e      	b.n	8009b6c <HAL_RCC_OscConfig+0xd8>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	685b      	ldr	r3, [r3, #4]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d10c      	bne.n	8009b30 <HAL_RCC_OscConfig+0x9c>
 8009b16:	4b81      	ldr	r3, [pc, #516]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a80      	ldr	r2, [pc, #512]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b20:	6013      	str	r3, [r2, #0]
 8009b22:	4b7e      	ldr	r3, [pc, #504]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	4a7d      	ldr	r2, [pc, #500]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b2c:	6013      	str	r3, [r2, #0]
 8009b2e:	e01d      	b.n	8009b6c <HAL_RCC_OscConfig+0xd8>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009b38:	d10c      	bne.n	8009b54 <HAL_RCC_OscConfig+0xc0>
 8009b3a:	4b78      	ldr	r3, [pc, #480]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	4a77      	ldr	r2, [pc, #476]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009b44:	6013      	str	r3, [r2, #0]
 8009b46:	4b75      	ldr	r3, [pc, #468]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	4a74      	ldr	r2, [pc, #464]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009b50:	6013      	str	r3, [r2, #0]
 8009b52:	e00b      	b.n	8009b6c <HAL_RCC_OscConfig+0xd8>
 8009b54:	4b71      	ldr	r3, [pc, #452]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a70      	ldr	r2, [pc, #448]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b5e:	6013      	str	r3, [r2, #0]
 8009b60:	4b6e      	ldr	r3, [pc, #440]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a6d      	ldr	r2, [pc, #436]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d013      	beq.n	8009b9c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b74:	f7f9 fff2 	bl	8003b5c <HAL_GetTick>
 8009b78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b7a:	e008      	b.n	8009b8e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b7c:	f7f9 ffee 	bl	8003b5c <HAL_GetTick>
 8009b80:	4602      	mov	r2, r0
 8009b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2b64      	cmp	r3, #100	; 0x64
 8009b88:	d901      	bls.n	8009b8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e3d4      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b8e:	4b63      	ldr	r3, [pc, #396]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d0f0      	beq.n	8009b7c <HAL_RCC_OscConfig+0xe8>
 8009b9a:	e014      	b.n	8009bc6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b9c:	f7f9 ffde 	bl	8003b5c <HAL_GetTick>
 8009ba0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009ba2:	e008      	b.n	8009bb6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009ba4:	f7f9 ffda 	bl	8003b5c <HAL_GetTick>
 8009ba8:	4602      	mov	r2, r0
 8009baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bac:	1ad3      	subs	r3, r2, r3
 8009bae:	2b64      	cmp	r3, #100	; 0x64
 8009bb0:	d901      	bls.n	8009bb6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009bb2:	2303      	movs	r3, #3
 8009bb4:	e3c0      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009bb6:	4b59      	ldr	r3, [pc, #356]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d1f0      	bne.n	8009ba4 <HAL_RCC_OscConfig+0x110>
 8009bc2:	e000      	b.n	8009bc6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009bc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0302 	and.w	r3, r3, #2
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	f000 80ca 	beq.w	8009d68 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bd4:	4b51      	ldr	r3, [pc, #324]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009bd6:	691b      	ldr	r3, [r3, #16]
 8009bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009bdc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bde:	4b4f      	ldr	r3, [pc, #316]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009be2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009be4:	6a3b      	ldr	r3, [r7, #32]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d007      	beq.n	8009bfa <HAL_RCC_OscConfig+0x166>
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	2b18      	cmp	r3, #24
 8009bee:	d156      	bne.n	8009c9e <HAL_RCC_OscConfig+0x20a>
 8009bf0:	69fb      	ldr	r3, [r7, #28]
 8009bf2:	f003 0303 	and.w	r3, r3, #3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d151      	bne.n	8009c9e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bfa:	4b48      	ldr	r3, [pc, #288]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 0304 	and.w	r3, r3, #4
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d005      	beq.n	8009c12 <HAL_RCC_OscConfig+0x17e>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d101      	bne.n	8009c12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e392      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c12:	4b42      	ldr	r3, [pc, #264]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	f023 0219 	bic.w	r2, r3, #25
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	493f      	ldr	r1, [pc, #252]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c24:	f7f9 ff9a 	bl	8003b5c <HAL_GetTick>
 8009c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c2a:	e008      	b.n	8009c3e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c2c:	f7f9 ff96 	bl	8003b5c <HAL_GetTick>
 8009c30:	4602      	mov	r2, r0
 8009c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c34:	1ad3      	subs	r3, r2, r3
 8009c36:	2b02      	cmp	r3, #2
 8009c38:	d901      	bls.n	8009c3e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009c3a:	2303      	movs	r3, #3
 8009c3c:	e37c      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c3e:	4b37      	ldr	r3, [pc, #220]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f003 0304 	and.w	r3, r3, #4
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0f0      	beq.n	8009c2c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c4a:	f7f9 ff93 	bl	8003b74 <HAL_GetREVID>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c54:	4293      	cmp	r3, r2
 8009c56:	d817      	bhi.n	8009c88 <HAL_RCC_OscConfig+0x1f4>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	691b      	ldr	r3, [r3, #16]
 8009c5c:	2b40      	cmp	r3, #64	; 0x40
 8009c5e:	d108      	bne.n	8009c72 <HAL_RCC_OscConfig+0x1de>
 8009c60:	4b2e      	ldr	r3, [pc, #184]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009c62:	685b      	ldr	r3, [r3, #4]
 8009c64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009c68:	4a2c      	ldr	r2, [pc, #176]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009c6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c6e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c70:	e07a      	b.n	8009d68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c72:	4b2a      	ldr	r3, [pc, #168]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009c74:	685b      	ldr	r3, [r3, #4]
 8009c76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	691b      	ldr	r3, [r3, #16]
 8009c7e:	031b      	lsls	r3, r3, #12
 8009c80:	4926      	ldr	r1, [pc, #152]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009c82:	4313      	orrs	r3, r2
 8009c84:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c86:	e06f      	b.n	8009d68 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c88:	4b24      	ldr	r3, [pc, #144]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	691b      	ldr	r3, [r3, #16]
 8009c94:	061b      	lsls	r3, r3, #24
 8009c96:	4921      	ldr	r1, [pc, #132]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009c9c:	e064      	b.n	8009d68 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d047      	beq.n	8009d36 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ca6:	4b1d      	ldr	r3, [pc, #116]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f023 0219 	bic.w	r2, r3, #25
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	491a      	ldr	r1, [pc, #104]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009cb8:	f7f9 ff50 	bl	8003b5c <HAL_GetTick>
 8009cbc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cbe:	e008      	b.n	8009cd2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009cc0:	f7f9 ff4c 	bl	8003b5c <HAL_GetTick>
 8009cc4:	4602      	mov	r2, r0
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc8:	1ad3      	subs	r3, r2, r3
 8009cca:	2b02      	cmp	r3, #2
 8009ccc:	d901      	bls.n	8009cd2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e332      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009cd2:	4b12      	ldr	r3, [pc, #72]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	f003 0304 	and.w	r3, r3, #4
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d0f0      	beq.n	8009cc0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009cde:	f7f9 ff49 	bl	8003b74 <HAL_GetREVID>
 8009ce2:	4603      	mov	r3, r0
 8009ce4:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d819      	bhi.n	8009d20 <HAL_RCC_OscConfig+0x28c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	691b      	ldr	r3, [r3, #16]
 8009cf0:	2b40      	cmp	r3, #64	; 0x40
 8009cf2:	d108      	bne.n	8009d06 <HAL_RCC_OscConfig+0x272>
 8009cf4:	4b09      	ldr	r3, [pc, #36]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009cf6:	685b      	ldr	r3, [r3, #4]
 8009cf8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009cfc:	4a07      	ldr	r2, [pc, #28]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009cfe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009d02:	6053      	str	r3, [r2, #4]
 8009d04:	e030      	b.n	8009d68 <HAL_RCC_OscConfig+0x2d4>
 8009d06:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	691b      	ldr	r3, [r3, #16]
 8009d12:	031b      	lsls	r3, r3, #12
 8009d14:	4901      	ldr	r1, [pc, #4]	; (8009d1c <HAL_RCC_OscConfig+0x288>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	604b      	str	r3, [r1, #4]
 8009d1a:	e025      	b.n	8009d68 <HAL_RCC_OscConfig+0x2d4>
 8009d1c:	58024400 	.word	0x58024400
 8009d20:	4b9a      	ldr	r3, [pc, #616]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	691b      	ldr	r3, [r3, #16]
 8009d2c:	061b      	lsls	r3, r3, #24
 8009d2e:	4997      	ldr	r1, [pc, #604]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	604b      	str	r3, [r1, #4]
 8009d34:	e018      	b.n	8009d68 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009d36:	4b95      	ldr	r3, [pc, #596]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	4a94      	ldr	r2, [pc, #592]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009d3c:	f023 0301 	bic.w	r3, r3, #1
 8009d40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d42:	f7f9 ff0b 	bl	8003b5c <HAL_GetTick>
 8009d46:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d48:	e008      	b.n	8009d5c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009d4a:	f7f9 ff07 	bl	8003b5c <HAL_GetTick>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	1ad3      	subs	r3, r2, r3
 8009d54:	2b02      	cmp	r3, #2
 8009d56:	d901      	bls.n	8009d5c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e2ed      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009d5c:	4b8b      	ldr	r3, [pc, #556]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	f003 0304 	and.w	r3, r3, #4
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1f0      	bne.n	8009d4a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f003 0310 	and.w	r3, r3, #16
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	f000 80a9 	beq.w	8009ec8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d76:	4b85      	ldr	r3, [pc, #532]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d7e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d80:	4b82      	ldr	r3, [pc, #520]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d84:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009d86:	69bb      	ldr	r3, [r7, #24]
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d007      	beq.n	8009d9c <HAL_RCC_OscConfig+0x308>
 8009d8c:	69bb      	ldr	r3, [r7, #24]
 8009d8e:	2b18      	cmp	r3, #24
 8009d90:	d13a      	bne.n	8009e08 <HAL_RCC_OscConfig+0x374>
 8009d92:	697b      	ldr	r3, [r7, #20]
 8009d94:	f003 0303 	and.w	r3, r3, #3
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d135      	bne.n	8009e08 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009d9c:	4b7b      	ldr	r3, [pc, #492]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d005      	beq.n	8009db4 <HAL_RCC_OscConfig+0x320>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	69db      	ldr	r3, [r3, #28]
 8009dac:	2b80      	cmp	r3, #128	; 0x80
 8009dae:	d001      	beq.n	8009db4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009db0:	2301      	movs	r3, #1
 8009db2:	e2c1      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009db4:	f7f9 fede 	bl	8003b74 <HAL_GetREVID>
 8009db8:	4603      	mov	r3, r0
 8009dba:	f241 0203 	movw	r2, #4099	; 0x1003
 8009dbe:	4293      	cmp	r3, r2
 8009dc0:	d817      	bhi.n	8009df2 <HAL_RCC_OscConfig+0x35e>
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	2b20      	cmp	r3, #32
 8009dc8:	d108      	bne.n	8009ddc <HAL_RCC_OscConfig+0x348>
 8009dca:	4b70      	ldr	r3, [pc, #448]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009dd2:	4a6e      	ldr	r2, [pc, #440]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009dd4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009dd8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009dda:	e075      	b.n	8009ec8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ddc:	4b6b      	ldr	r3, [pc, #428]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009dde:	685b      	ldr	r3, [r3, #4]
 8009de0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	6a1b      	ldr	r3, [r3, #32]
 8009de8:	069b      	lsls	r3, r3, #26
 8009dea:	4968      	ldr	r1, [pc, #416]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009df0:	e06a      	b.n	8009ec8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009df2:	4b66      	ldr	r3, [pc, #408]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	6a1b      	ldr	r3, [r3, #32]
 8009dfe:	061b      	lsls	r3, r3, #24
 8009e00:	4962      	ldr	r1, [pc, #392]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e02:	4313      	orrs	r3, r2
 8009e04:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e06:	e05f      	b.n	8009ec8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	69db      	ldr	r3, [r3, #28]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d042      	beq.n	8009e96 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009e10:	4b5e      	ldr	r3, [pc, #376]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a5d      	ldr	r2, [pc, #372]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e1c:	f7f9 fe9e 	bl	8003b5c <HAL_GetTick>
 8009e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e22:	e008      	b.n	8009e36 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009e24:	f7f9 fe9a 	bl	8003b5c <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d901      	bls.n	8009e36 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e280      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009e36:	4b55      	ldr	r3, [pc, #340]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0f0      	beq.n	8009e24 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e42:	f7f9 fe97 	bl	8003b74 <HAL_GetREVID>
 8009e46:	4603      	mov	r3, r0
 8009e48:	f241 0203 	movw	r2, #4099	; 0x1003
 8009e4c:	4293      	cmp	r3, r2
 8009e4e:	d817      	bhi.n	8009e80 <HAL_RCC_OscConfig+0x3ec>
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6a1b      	ldr	r3, [r3, #32]
 8009e54:	2b20      	cmp	r3, #32
 8009e56:	d108      	bne.n	8009e6a <HAL_RCC_OscConfig+0x3d6>
 8009e58:	4b4c      	ldr	r3, [pc, #304]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e5a:	685b      	ldr	r3, [r3, #4]
 8009e5c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009e60:	4a4a      	ldr	r2, [pc, #296]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e62:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009e66:	6053      	str	r3, [r2, #4]
 8009e68:	e02e      	b.n	8009ec8 <HAL_RCC_OscConfig+0x434>
 8009e6a:	4b48      	ldr	r3, [pc, #288]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6a1b      	ldr	r3, [r3, #32]
 8009e76:	069b      	lsls	r3, r3, #26
 8009e78:	4944      	ldr	r1, [pc, #272]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	604b      	str	r3, [r1, #4]
 8009e7e:	e023      	b.n	8009ec8 <HAL_RCC_OscConfig+0x434>
 8009e80:	4b42      	ldr	r3, [pc, #264]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	6a1b      	ldr	r3, [r3, #32]
 8009e8c:	061b      	lsls	r3, r3, #24
 8009e8e:	493f      	ldr	r1, [pc, #252]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e90:	4313      	orrs	r3, r2
 8009e92:	60cb      	str	r3, [r1, #12]
 8009e94:	e018      	b.n	8009ec8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009e96:	4b3d      	ldr	r3, [pc, #244]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	4a3c      	ldr	r2, [pc, #240]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009e9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ea0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ea2:	f7f9 fe5b 	bl	8003b5c <HAL_GetTick>
 8009ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ea8:	e008      	b.n	8009ebc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009eaa:	f7f9 fe57 	bl	8003b5c <HAL_GetTick>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb2:	1ad3      	subs	r3, r2, r3
 8009eb4:	2b02      	cmp	r3, #2
 8009eb6:	d901      	bls.n	8009ebc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009eb8:	2303      	movs	r3, #3
 8009eba:	e23d      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ebc:	4b33      	ldr	r3, [pc, #204]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d1f0      	bne.n	8009eaa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	f003 0308 	and.w	r3, r3, #8
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d036      	beq.n	8009f42 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	695b      	ldr	r3, [r3, #20]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d019      	beq.n	8009f10 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009edc:	4b2b      	ldr	r3, [pc, #172]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009ede:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ee0:	4a2a      	ldr	r2, [pc, #168]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009ee2:	f043 0301 	orr.w	r3, r3, #1
 8009ee6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ee8:	f7f9 fe38 	bl	8003b5c <HAL_GetTick>
 8009eec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009eee:	e008      	b.n	8009f02 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009ef0:	f7f9 fe34 	bl	8003b5c <HAL_GetTick>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ef8:	1ad3      	subs	r3, r2, r3
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d901      	bls.n	8009f02 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009efe:	2303      	movs	r3, #3
 8009f00:	e21a      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009f02:	4b22      	ldr	r3, [pc, #136]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f06:	f003 0302 	and.w	r3, r3, #2
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d0f0      	beq.n	8009ef0 <HAL_RCC_OscConfig+0x45c>
 8009f0e:	e018      	b.n	8009f42 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009f10:	4b1e      	ldr	r3, [pc, #120]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f14:	4a1d      	ldr	r2, [pc, #116]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009f16:	f023 0301 	bic.w	r3, r3, #1
 8009f1a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f1c:	f7f9 fe1e 	bl	8003b5c <HAL_GetTick>
 8009f20:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f22:	e008      	b.n	8009f36 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009f24:	f7f9 fe1a 	bl	8003b5c <HAL_GetTick>
 8009f28:	4602      	mov	r2, r0
 8009f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f2c:	1ad3      	subs	r3, r2, r3
 8009f2e:	2b02      	cmp	r3, #2
 8009f30:	d901      	bls.n	8009f36 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009f32:	2303      	movs	r3, #3
 8009f34:	e200      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009f36:	4b15      	ldr	r3, [pc, #84]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f3a:	f003 0302 	and.w	r3, r3, #2
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1f0      	bne.n	8009f24 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 0320 	and.w	r3, r3, #32
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d039      	beq.n	8009fc2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	699b      	ldr	r3, [r3, #24]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d01c      	beq.n	8009f90 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009f56:	4b0d      	ldr	r3, [pc, #52]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a0c      	ldr	r2, [pc, #48]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009f5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009f60:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f62:	f7f9 fdfb 	bl	8003b5c <HAL_GetTick>
 8009f66:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f68:	e008      	b.n	8009f7c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009f6a:	f7f9 fdf7 	bl	8003b5c <HAL_GetTick>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f72:	1ad3      	subs	r3, r2, r3
 8009f74:	2b02      	cmp	r3, #2
 8009f76:	d901      	bls.n	8009f7c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009f78:	2303      	movs	r3, #3
 8009f7a:	e1dd      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009f7c:	4b03      	ldr	r3, [pc, #12]	; (8009f8c <HAL_RCC_OscConfig+0x4f8>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d0f0      	beq.n	8009f6a <HAL_RCC_OscConfig+0x4d6>
 8009f88:	e01b      	b.n	8009fc2 <HAL_RCC_OscConfig+0x52e>
 8009f8a:	bf00      	nop
 8009f8c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009f90:	4b9b      	ldr	r3, [pc, #620]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a9a      	ldr	r2, [pc, #616]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 8009f96:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009f9a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009f9c:	f7f9 fdde 	bl	8003b5c <HAL_GetTick>
 8009fa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009fa2:	e008      	b.n	8009fb6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009fa4:	f7f9 fdda 	bl	8003b5c <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	2b02      	cmp	r3, #2
 8009fb0:	d901      	bls.n	8009fb6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009fb2:	2303      	movs	r3, #3
 8009fb4:	e1c0      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009fb6:	4b92      	ldr	r3, [pc, #584]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d1f0      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0304 	and.w	r3, r3, #4
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 8081 	beq.w	800a0d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009fd0:	4b8c      	ldr	r3, [pc, #560]	; (800a204 <HAL_RCC_OscConfig+0x770>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	4a8b      	ldr	r2, [pc, #556]	; (800a204 <HAL_RCC_OscConfig+0x770>)
 8009fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009fdc:	f7f9 fdbe 	bl	8003b5c <HAL_GetTick>
 8009fe0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009fe2:	e008      	b.n	8009ff6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009fe4:	f7f9 fdba 	bl	8003b5c <HAL_GetTick>
 8009fe8:	4602      	mov	r2, r0
 8009fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fec:	1ad3      	subs	r3, r2, r3
 8009fee:	2b64      	cmp	r3, #100	; 0x64
 8009ff0:	d901      	bls.n	8009ff6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e1a0      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ff6:	4b83      	ldr	r3, [pc, #524]	; (800a204 <HAL_RCC_OscConfig+0x770>)
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d0f0      	beq.n	8009fe4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	2b01      	cmp	r3, #1
 800a008:	d106      	bne.n	800a018 <HAL_RCC_OscConfig+0x584>
 800a00a:	4b7d      	ldr	r3, [pc, #500]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a00c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a00e:	4a7c      	ldr	r2, [pc, #496]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a010:	f043 0301 	orr.w	r3, r3, #1
 800a014:	6713      	str	r3, [r2, #112]	; 0x70
 800a016:	e02d      	b.n	800a074 <HAL_RCC_OscConfig+0x5e0>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	689b      	ldr	r3, [r3, #8]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d10c      	bne.n	800a03a <HAL_RCC_OscConfig+0x5a6>
 800a020:	4b77      	ldr	r3, [pc, #476]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a024:	4a76      	ldr	r2, [pc, #472]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a026:	f023 0301 	bic.w	r3, r3, #1
 800a02a:	6713      	str	r3, [r2, #112]	; 0x70
 800a02c:	4b74      	ldr	r3, [pc, #464]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a02e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a030:	4a73      	ldr	r2, [pc, #460]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a032:	f023 0304 	bic.w	r3, r3, #4
 800a036:	6713      	str	r3, [r2, #112]	; 0x70
 800a038:	e01c      	b.n	800a074 <HAL_RCC_OscConfig+0x5e0>
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	689b      	ldr	r3, [r3, #8]
 800a03e:	2b05      	cmp	r3, #5
 800a040:	d10c      	bne.n	800a05c <HAL_RCC_OscConfig+0x5c8>
 800a042:	4b6f      	ldr	r3, [pc, #444]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a044:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a046:	4a6e      	ldr	r2, [pc, #440]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a048:	f043 0304 	orr.w	r3, r3, #4
 800a04c:	6713      	str	r3, [r2, #112]	; 0x70
 800a04e:	4b6c      	ldr	r3, [pc, #432]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a052:	4a6b      	ldr	r2, [pc, #428]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a054:	f043 0301 	orr.w	r3, r3, #1
 800a058:	6713      	str	r3, [r2, #112]	; 0x70
 800a05a:	e00b      	b.n	800a074 <HAL_RCC_OscConfig+0x5e0>
 800a05c:	4b68      	ldr	r3, [pc, #416]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a060:	4a67      	ldr	r2, [pc, #412]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a062:	f023 0301 	bic.w	r3, r3, #1
 800a066:	6713      	str	r3, [r2, #112]	; 0x70
 800a068:	4b65      	ldr	r3, [pc, #404]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a06a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a06c:	4a64      	ldr	r2, [pc, #400]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a06e:	f023 0304 	bic.w	r3, r3, #4
 800a072:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	689b      	ldr	r3, [r3, #8]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d015      	beq.n	800a0a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a07c:	f7f9 fd6e 	bl	8003b5c <HAL_GetTick>
 800a080:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a082:	e00a      	b.n	800a09a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a084:	f7f9 fd6a 	bl	8003b5c <HAL_GetTick>
 800a088:	4602      	mov	r2, r0
 800a08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a092:	4293      	cmp	r3, r2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e14e      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a09a:	4b59      	ldr	r3, [pc, #356]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d0ee      	beq.n	800a084 <HAL_RCC_OscConfig+0x5f0>
 800a0a6:	e014      	b.n	800a0d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0a8:	f7f9 fd58 	bl	8003b5c <HAL_GetTick>
 800a0ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0ae:	e00a      	b.n	800a0c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0b0:	f7f9 fd54 	bl	8003b5c <HAL_GetTick>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0b8:	1ad3      	subs	r3, r2, r3
 800a0ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d901      	bls.n	800a0c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e138      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a0c6:	4b4e      	ldr	r3, [pc, #312]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0ca:	f003 0302 	and.w	r3, r3, #2
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d1ee      	bne.n	800a0b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	f000 812d 	beq.w	800a336 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a0dc:	4b48      	ldr	r3, [pc, #288]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0e4:	2b18      	cmp	r3, #24
 800a0e6:	f000 80bd 	beq.w	800a264 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0ee:	2b02      	cmp	r3, #2
 800a0f0:	f040 809e 	bne.w	800a230 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0f4:	4b42      	ldr	r3, [pc, #264]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	4a41      	ldr	r2, [pc, #260]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a0fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a100:	f7f9 fd2c 	bl	8003b5c <HAL_GetTick>
 800a104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a106:	e008      	b.n	800a11a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a108:	f7f9 fd28 	bl	8003b5c <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	2b02      	cmp	r3, #2
 800a114:	d901      	bls.n	800a11a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e10e      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a11a:	4b39      	ldr	r3, [pc, #228]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a122:	2b00      	cmp	r3, #0
 800a124:	d1f0      	bne.n	800a108 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a126:	4b36      	ldr	r3, [pc, #216]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a128:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a12a:	4b37      	ldr	r3, [pc, #220]	; (800a208 <HAL_RCC_OscConfig+0x774>)
 800a12c:	4013      	ands	r3, r2
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a136:	0112      	lsls	r2, r2, #4
 800a138:	430a      	orrs	r2, r1
 800a13a:	4931      	ldr	r1, [pc, #196]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a13c:	4313      	orrs	r3, r2
 800a13e:	628b      	str	r3, [r1, #40]	; 0x28
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a144:	3b01      	subs	r3, #1
 800a146:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a14e:	3b01      	subs	r3, #1
 800a150:	025b      	lsls	r3, r3, #9
 800a152:	b29b      	uxth	r3, r3
 800a154:	431a      	orrs	r2, r3
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a15a:	3b01      	subs	r3, #1
 800a15c:	041b      	lsls	r3, r3, #16
 800a15e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a162:	431a      	orrs	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a168:	3b01      	subs	r3, #1
 800a16a:	061b      	lsls	r3, r3, #24
 800a16c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a170:	4923      	ldr	r1, [pc, #140]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a172:	4313      	orrs	r3, r2
 800a174:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a176:	4b22      	ldr	r3, [pc, #136]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17a:	4a21      	ldr	r2, [pc, #132]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a17c:	f023 0301 	bic.w	r3, r3, #1
 800a180:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a182:	4b1f      	ldr	r3, [pc, #124]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a186:	4b21      	ldr	r3, [pc, #132]	; (800a20c <HAL_RCC_OscConfig+0x778>)
 800a188:	4013      	ands	r3, r2
 800a18a:	687a      	ldr	r2, [r7, #4]
 800a18c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a18e:	00d2      	lsls	r2, r2, #3
 800a190:	491b      	ldr	r1, [pc, #108]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a192:	4313      	orrs	r3, r2
 800a194:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a196:	4b1a      	ldr	r3, [pc, #104]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a19a:	f023 020c 	bic.w	r2, r3, #12
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a2:	4917      	ldr	r1, [pc, #92]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1a4:	4313      	orrs	r3, r2
 800a1a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a1a8:	4b15      	ldr	r3, [pc, #84]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ac:	f023 0202 	bic.w	r2, r3, #2
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a1b4:	4912      	ldr	r1, [pc, #72]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a1ba:	4b11      	ldr	r3, [pc, #68]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1be:	4a10      	ldr	r2, [pc, #64]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a1c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a1c6:	4b0e      	ldr	r3, [pc, #56]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ca:	4a0d      	ldr	r2, [pc, #52]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a1d2:	4b0b      	ldr	r3, [pc, #44]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1d6:	4a0a      	ldr	r2, [pc, #40]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a1dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a1de:	4b08      	ldr	r3, [pc, #32]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e2:	4a07      	ldr	r2, [pc, #28]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1e4:	f043 0301 	orr.w	r3, r3, #1
 800a1e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a1ea:	4b05      	ldr	r3, [pc, #20]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a04      	ldr	r2, [pc, #16]	; (800a200 <HAL_RCC_OscConfig+0x76c>)
 800a1f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a1f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f6:	f7f9 fcb1 	bl	8003b5c <HAL_GetTick>
 800a1fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a1fc:	e011      	b.n	800a222 <HAL_RCC_OscConfig+0x78e>
 800a1fe:	bf00      	nop
 800a200:	58024400 	.word	0x58024400
 800a204:	58024800 	.word	0x58024800
 800a208:	fffffc0c 	.word	0xfffffc0c
 800a20c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a210:	f7f9 fca4 	bl	8003b5c <HAL_GetTick>
 800a214:	4602      	mov	r2, r0
 800a216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a218:	1ad3      	subs	r3, r2, r3
 800a21a:	2b02      	cmp	r3, #2
 800a21c:	d901      	bls.n	800a222 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a21e:	2303      	movs	r3, #3
 800a220:	e08a      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a222:	4b47      	ldr	r3, [pc, #284]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0f0      	beq.n	800a210 <HAL_RCC_OscConfig+0x77c>
 800a22e:	e082      	b.n	800a336 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a230:	4b43      	ldr	r3, [pc, #268]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4a42      	ldr	r2, [pc, #264]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a236:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a23a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a23c:	f7f9 fc8e 	bl	8003b5c <HAL_GetTick>
 800a240:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a242:	e008      	b.n	800a256 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a244:	f7f9 fc8a 	bl	8003b5c <HAL_GetTick>
 800a248:	4602      	mov	r2, r0
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	1ad3      	subs	r3, r2, r3
 800a24e:	2b02      	cmp	r3, #2
 800a250:	d901      	bls.n	800a256 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a252:	2303      	movs	r3, #3
 800a254:	e070      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a256:	4b3a      	ldr	r3, [pc, #232]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d1f0      	bne.n	800a244 <HAL_RCC_OscConfig+0x7b0>
 800a262:	e068      	b.n	800a336 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a264:	4b36      	ldr	r3, [pc, #216]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a266:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a268:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a26a:	4b35      	ldr	r3, [pc, #212]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a26c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a274:	2b01      	cmp	r3, #1
 800a276:	d031      	beq.n	800a2dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	f003 0203 	and.w	r2, r3, #3
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a282:	429a      	cmp	r2, r3
 800a284:	d12a      	bne.n	800a2dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	091b      	lsrs	r3, r3, #4
 800a28a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a292:	429a      	cmp	r2, r3
 800a294:	d122      	bne.n	800a2dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2a2:	429a      	cmp	r2, r3
 800a2a4:	d11a      	bne.n	800a2dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	0a5b      	lsrs	r3, r3, #9
 800a2aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2b4:	429a      	cmp	r2, r3
 800a2b6:	d111      	bne.n	800a2dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	0c1b      	lsrs	r3, r3, #16
 800a2bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d108      	bne.n	800a2dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	0e1b      	lsrs	r3, r3, #24
 800a2ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d001      	beq.n	800a2e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a2dc:	2301      	movs	r3, #1
 800a2de:	e02b      	b.n	800a338 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a2e0:	4b17      	ldr	r3, [pc, #92]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a2e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2e4:	08db      	lsrs	r3, r3, #3
 800a2e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a2ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d01f      	beq.n	800a336 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a2f6:	4b12      	ldr	r3, [pc, #72]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fa:	4a11      	ldr	r2, [pc, #68]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a2fc:	f023 0301 	bic.w	r3, r3, #1
 800a300:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a302:	f7f9 fc2b 	bl	8003b5c <HAL_GetTick>
 800a306:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a308:	bf00      	nop
 800a30a:	f7f9 fc27 	bl	8003b5c <HAL_GetTick>
 800a30e:	4602      	mov	r2, r0
 800a310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a312:	4293      	cmp	r3, r2
 800a314:	d0f9      	beq.n	800a30a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a316:	4b0a      	ldr	r3, [pc, #40]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a31a:	4b0a      	ldr	r3, [pc, #40]	; (800a344 <HAL_RCC_OscConfig+0x8b0>)
 800a31c:	4013      	ands	r3, r2
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a322:	00d2      	lsls	r2, r2, #3
 800a324:	4906      	ldr	r1, [pc, #24]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a326:	4313      	orrs	r3, r2
 800a328:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a32a:	4b05      	ldr	r3, [pc, #20]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a32e:	4a04      	ldr	r2, [pc, #16]	; (800a340 <HAL_RCC_OscConfig+0x8ac>)
 800a330:	f043 0301 	orr.w	r3, r3, #1
 800a334:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a336:	2300      	movs	r3, #0
}
 800a338:	4618      	mov	r0, r3
 800a33a:	3730      	adds	r7, #48	; 0x30
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	58024400 	.word	0x58024400
 800a344:	ffff0007 	.word	0xffff0007

0800a348 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b086      	sub	sp, #24
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d101      	bne.n	800a35c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a358:	2301      	movs	r3, #1
 800a35a:	e19c      	b.n	800a696 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a35c:	4b8a      	ldr	r3, [pc, #552]	; (800a588 <HAL_RCC_ClockConfig+0x240>)
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f003 030f 	and.w	r3, r3, #15
 800a364:	683a      	ldr	r2, [r7, #0]
 800a366:	429a      	cmp	r2, r3
 800a368:	d910      	bls.n	800a38c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a36a:	4b87      	ldr	r3, [pc, #540]	; (800a588 <HAL_RCC_ClockConfig+0x240>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f023 020f 	bic.w	r2, r3, #15
 800a372:	4985      	ldr	r1, [pc, #532]	; (800a588 <HAL_RCC_ClockConfig+0x240>)
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	4313      	orrs	r3, r2
 800a378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a37a:	4b83      	ldr	r3, [pc, #524]	; (800a588 <HAL_RCC_ClockConfig+0x240>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f003 030f 	and.w	r3, r3, #15
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d001      	beq.n	800a38c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a388:	2301      	movs	r3, #1
 800a38a:	e184      	b.n	800a696 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b00      	cmp	r3, #0
 800a396:	d010      	beq.n	800a3ba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	691a      	ldr	r2, [r3, #16]
 800a39c:	4b7b      	ldr	r3, [pc, #492]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a39e:	699b      	ldr	r3, [r3, #24]
 800a3a0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d908      	bls.n	800a3ba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3a8:	4b78      	ldr	r3, [pc, #480]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a3aa:	699b      	ldr	r3, [r3, #24]
 800a3ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	691b      	ldr	r3, [r3, #16]
 800a3b4:	4975      	ldr	r1, [pc, #468]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a3b6:	4313      	orrs	r3, r2
 800a3b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f003 0308 	and.w	r3, r3, #8
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d010      	beq.n	800a3e8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	695a      	ldr	r2, [r3, #20]
 800a3ca:	4b70      	ldr	r3, [pc, #448]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a3cc:	69db      	ldr	r3, [r3, #28]
 800a3ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d908      	bls.n	800a3e8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a3d6:	4b6d      	ldr	r3, [pc, #436]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a3d8:	69db      	ldr	r3, [r3, #28]
 800a3da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	695b      	ldr	r3, [r3, #20]
 800a3e2:	496a      	ldr	r1, [pc, #424]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a3e4:	4313      	orrs	r3, r2
 800a3e6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f003 0310 	and.w	r3, r3, #16
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d010      	beq.n	800a416 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	699a      	ldr	r2, [r3, #24]
 800a3f8:	4b64      	ldr	r3, [pc, #400]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a3fa:	69db      	ldr	r3, [r3, #28]
 800a3fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a400:	429a      	cmp	r2, r3
 800a402:	d908      	bls.n	800a416 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a404:	4b61      	ldr	r3, [pc, #388]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a406:	69db      	ldr	r3, [r3, #28]
 800a408:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	699b      	ldr	r3, [r3, #24]
 800a410:	495e      	ldr	r1, [pc, #376]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a412:	4313      	orrs	r3, r2
 800a414:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f003 0320 	and.w	r3, r3, #32
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d010      	beq.n	800a444 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	69da      	ldr	r2, [r3, #28]
 800a426:	4b59      	ldr	r3, [pc, #356]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a428:	6a1b      	ldr	r3, [r3, #32]
 800a42a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a42e:	429a      	cmp	r2, r3
 800a430:	d908      	bls.n	800a444 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a432:	4b56      	ldr	r3, [pc, #344]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a434:	6a1b      	ldr	r3, [r3, #32]
 800a436:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	69db      	ldr	r3, [r3, #28]
 800a43e:	4953      	ldr	r1, [pc, #332]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a440:	4313      	orrs	r3, r2
 800a442:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	f003 0302 	and.w	r3, r3, #2
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d010      	beq.n	800a472 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68da      	ldr	r2, [r3, #12]
 800a454:	4b4d      	ldr	r3, [pc, #308]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a456:	699b      	ldr	r3, [r3, #24]
 800a458:	f003 030f 	and.w	r3, r3, #15
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d908      	bls.n	800a472 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a460:	4b4a      	ldr	r3, [pc, #296]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a462:	699b      	ldr	r3, [r3, #24]
 800a464:	f023 020f 	bic.w	r2, r3, #15
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	68db      	ldr	r3, [r3, #12]
 800a46c:	4947      	ldr	r1, [pc, #284]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a46e:	4313      	orrs	r3, r2
 800a470:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d055      	beq.n	800a52a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a47e:	4b43      	ldr	r3, [pc, #268]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	689b      	ldr	r3, [r3, #8]
 800a48a:	4940      	ldr	r1, [pc, #256]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a48c:	4313      	orrs	r3, r2
 800a48e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	2b02      	cmp	r3, #2
 800a496:	d107      	bne.n	800a4a8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a498:	4b3c      	ldr	r3, [pc, #240]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d121      	bne.n	800a4e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e0f6      	b.n	800a696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	685b      	ldr	r3, [r3, #4]
 800a4ac:	2b03      	cmp	r3, #3
 800a4ae:	d107      	bne.n	800a4c0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a4b0:	4b36      	ldr	r3, [pc, #216]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d115      	bne.n	800a4e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e0ea      	b.n	800a696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d107      	bne.n	800a4d8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a4c8:	4b30      	ldr	r3, [pc, #192]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d109      	bne.n	800a4e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4d4:	2301      	movs	r3, #1
 800a4d6:	e0de      	b.n	800a696 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a4d8:	4b2c      	ldr	r3, [pc, #176]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f003 0304 	and.w	r3, r3, #4
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d101      	bne.n	800a4e8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	e0d6      	b.n	800a696 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a4e8:	4b28      	ldr	r3, [pc, #160]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a4ea:	691b      	ldr	r3, [r3, #16]
 800a4ec:	f023 0207 	bic.w	r2, r3, #7
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	4925      	ldr	r1, [pc, #148]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4fa:	f7f9 fb2f 	bl	8003b5c <HAL_GetTick>
 800a4fe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a500:	e00a      	b.n	800a518 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a502:	f7f9 fb2b 	bl	8003b5c <HAL_GetTick>
 800a506:	4602      	mov	r2, r0
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	1ad3      	subs	r3, r2, r3
 800a50c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a510:	4293      	cmp	r3, r2
 800a512:	d901      	bls.n	800a518 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a514:	2303      	movs	r3, #3
 800a516:	e0be      	b.n	800a696 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a518:	4b1c      	ldr	r3, [pc, #112]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	685b      	ldr	r3, [r3, #4]
 800a524:	00db      	lsls	r3, r3, #3
 800a526:	429a      	cmp	r2, r3
 800a528:	d1eb      	bne.n	800a502 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	f003 0302 	and.w	r3, r3, #2
 800a532:	2b00      	cmp	r3, #0
 800a534:	d010      	beq.n	800a558 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	68da      	ldr	r2, [r3, #12]
 800a53a:	4b14      	ldr	r3, [pc, #80]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a53c:	699b      	ldr	r3, [r3, #24]
 800a53e:	f003 030f 	and.w	r3, r3, #15
 800a542:	429a      	cmp	r2, r3
 800a544:	d208      	bcs.n	800a558 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a546:	4b11      	ldr	r3, [pc, #68]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a548:	699b      	ldr	r3, [r3, #24]
 800a54a:	f023 020f 	bic.w	r2, r3, #15
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	490e      	ldr	r1, [pc, #56]	; (800a58c <HAL_RCC_ClockConfig+0x244>)
 800a554:	4313      	orrs	r3, r2
 800a556:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a558:	4b0b      	ldr	r3, [pc, #44]	; (800a588 <HAL_RCC_ClockConfig+0x240>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f003 030f 	and.w	r3, r3, #15
 800a560:	683a      	ldr	r2, [r7, #0]
 800a562:	429a      	cmp	r2, r3
 800a564:	d214      	bcs.n	800a590 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a566:	4b08      	ldr	r3, [pc, #32]	; (800a588 <HAL_RCC_ClockConfig+0x240>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f023 020f 	bic.w	r2, r3, #15
 800a56e:	4906      	ldr	r1, [pc, #24]	; (800a588 <HAL_RCC_ClockConfig+0x240>)
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	4313      	orrs	r3, r2
 800a574:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a576:	4b04      	ldr	r3, [pc, #16]	; (800a588 <HAL_RCC_ClockConfig+0x240>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	f003 030f 	and.w	r3, r3, #15
 800a57e:	683a      	ldr	r2, [r7, #0]
 800a580:	429a      	cmp	r2, r3
 800a582:	d005      	beq.n	800a590 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e086      	b.n	800a696 <HAL_RCC_ClockConfig+0x34e>
 800a588:	52002000 	.word	0x52002000
 800a58c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	f003 0304 	and.w	r3, r3, #4
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d010      	beq.n	800a5be <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	691a      	ldr	r2, [r3, #16]
 800a5a0:	4b3f      	ldr	r3, [pc, #252]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a5a2:	699b      	ldr	r3, [r3, #24]
 800a5a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d208      	bcs.n	800a5be <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5ac:	4b3c      	ldr	r3, [pc, #240]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a5ae:	699b      	ldr	r3, [r3, #24]
 800a5b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	691b      	ldr	r3, [r3, #16]
 800a5b8:	4939      	ldr	r1, [pc, #228]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a5ba:	4313      	orrs	r3, r2
 800a5bc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f003 0308 	and.w	r3, r3, #8
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d010      	beq.n	800a5ec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	695a      	ldr	r2, [r3, #20]
 800a5ce:	4b34      	ldr	r3, [pc, #208]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a5d0:	69db      	ldr	r3, [r3, #28]
 800a5d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d208      	bcs.n	800a5ec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a5da:	4b31      	ldr	r3, [pc, #196]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a5dc:	69db      	ldr	r3, [r3, #28]
 800a5de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	492e      	ldr	r1, [pc, #184]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	f003 0310 	and.w	r3, r3, #16
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d010      	beq.n	800a61a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	699a      	ldr	r2, [r3, #24]
 800a5fc:	4b28      	ldr	r3, [pc, #160]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a5fe:	69db      	ldr	r3, [r3, #28]
 800a600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a604:	429a      	cmp	r2, r3
 800a606:	d208      	bcs.n	800a61a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a608:	4b25      	ldr	r3, [pc, #148]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a60a:	69db      	ldr	r3, [r3, #28]
 800a60c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	699b      	ldr	r3, [r3, #24]
 800a614:	4922      	ldr	r1, [pc, #136]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a616:	4313      	orrs	r3, r2
 800a618:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f003 0320 	and.w	r3, r3, #32
 800a622:	2b00      	cmp	r3, #0
 800a624:	d010      	beq.n	800a648 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	69da      	ldr	r2, [r3, #28]
 800a62a:	4b1d      	ldr	r3, [pc, #116]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a62c:	6a1b      	ldr	r3, [r3, #32]
 800a62e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a632:	429a      	cmp	r2, r3
 800a634:	d208      	bcs.n	800a648 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a636:	4b1a      	ldr	r3, [pc, #104]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a638:	6a1b      	ldr	r3, [r3, #32]
 800a63a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	69db      	ldr	r3, [r3, #28]
 800a642:	4917      	ldr	r1, [pc, #92]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a644:	4313      	orrs	r3, r2
 800a646:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a648:	f000 f834 	bl	800a6b4 <HAL_RCC_GetSysClockFreq>
 800a64c:	4602      	mov	r2, r0
 800a64e:	4b14      	ldr	r3, [pc, #80]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a650:	699b      	ldr	r3, [r3, #24]
 800a652:	0a1b      	lsrs	r3, r3, #8
 800a654:	f003 030f 	and.w	r3, r3, #15
 800a658:	4912      	ldr	r1, [pc, #72]	; (800a6a4 <HAL_RCC_ClockConfig+0x35c>)
 800a65a:	5ccb      	ldrb	r3, [r1, r3]
 800a65c:	f003 031f 	and.w	r3, r3, #31
 800a660:	fa22 f303 	lsr.w	r3, r2, r3
 800a664:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a666:	4b0e      	ldr	r3, [pc, #56]	; (800a6a0 <HAL_RCC_ClockConfig+0x358>)
 800a668:	699b      	ldr	r3, [r3, #24]
 800a66a:	f003 030f 	and.w	r3, r3, #15
 800a66e:	4a0d      	ldr	r2, [pc, #52]	; (800a6a4 <HAL_RCC_ClockConfig+0x35c>)
 800a670:	5cd3      	ldrb	r3, [r2, r3]
 800a672:	f003 031f 	and.w	r3, r3, #31
 800a676:	693a      	ldr	r2, [r7, #16]
 800a678:	fa22 f303 	lsr.w	r3, r2, r3
 800a67c:	4a0a      	ldr	r2, [pc, #40]	; (800a6a8 <HAL_RCC_ClockConfig+0x360>)
 800a67e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a680:	4a0a      	ldr	r2, [pc, #40]	; (800a6ac <HAL_RCC_ClockConfig+0x364>)
 800a682:	693b      	ldr	r3, [r7, #16]
 800a684:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a686:	4b0a      	ldr	r3, [pc, #40]	; (800a6b0 <HAL_RCC_ClockConfig+0x368>)
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4618      	mov	r0, r3
 800a68c:	f7f8 ff94 	bl	80035b8 <HAL_InitTick>
 800a690:	4603      	mov	r3, r0
 800a692:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a694:	7bfb      	ldrb	r3, [r7, #15]
}
 800a696:	4618      	mov	r0, r3
 800a698:	3718      	adds	r7, #24
 800a69a:	46bd      	mov	sp, r7
 800a69c:	bd80      	pop	{r7, pc}
 800a69e:	bf00      	nop
 800a6a0:	58024400 	.word	0x58024400
 800a6a4:	080170a0 	.word	0x080170a0
 800a6a8:	24000094 	.word	0x24000094
 800a6ac:	24000090 	.word	0x24000090
 800a6b0:	24000098 	.word	0x24000098

0800a6b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b089      	sub	sp, #36	; 0x24
 800a6b8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a6ba:	4bb3      	ldr	r3, [pc, #716]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6bc:	691b      	ldr	r3, [r3, #16]
 800a6be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a6c2:	2b18      	cmp	r3, #24
 800a6c4:	f200 8155 	bhi.w	800a972 <HAL_RCC_GetSysClockFreq+0x2be>
 800a6c8:	a201      	add	r2, pc, #4	; (adr r2, 800a6d0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a6ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6ce:	bf00      	nop
 800a6d0:	0800a735 	.word	0x0800a735
 800a6d4:	0800a973 	.word	0x0800a973
 800a6d8:	0800a973 	.word	0x0800a973
 800a6dc:	0800a973 	.word	0x0800a973
 800a6e0:	0800a973 	.word	0x0800a973
 800a6e4:	0800a973 	.word	0x0800a973
 800a6e8:	0800a973 	.word	0x0800a973
 800a6ec:	0800a973 	.word	0x0800a973
 800a6f0:	0800a75b 	.word	0x0800a75b
 800a6f4:	0800a973 	.word	0x0800a973
 800a6f8:	0800a973 	.word	0x0800a973
 800a6fc:	0800a973 	.word	0x0800a973
 800a700:	0800a973 	.word	0x0800a973
 800a704:	0800a973 	.word	0x0800a973
 800a708:	0800a973 	.word	0x0800a973
 800a70c:	0800a973 	.word	0x0800a973
 800a710:	0800a761 	.word	0x0800a761
 800a714:	0800a973 	.word	0x0800a973
 800a718:	0800a973 	.word	0x0800a973
 800a71c:	0800a973 	.word	0x0800a973
 800a720:	0800a973 	.word	0x0800a973
 800a724:	0800a973 	.word	0x0800a973
 800a728:	0800a973 	.word	0x0800a973
 800a72c:	0800a973 	.word	0x0800a973
 800a730:	0800a767 	.word	0x0800a767
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a734:	4b94      	ldr	r3, [pc, #592]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f003 0320 	and.w	r3, r3, #32
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d009      	beq.n	800a754 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a740:	4b91      	ldr	r3, [pc, #580]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	08db      	lsrs	r3, r3, #3
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	4a90      	ldr	r2, [pc, #576]	; (800a98c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a74c:	fa22 f303 	lsr.w	r3, r2, r3
 800a750:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a752:	e111      	b.n	800a978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a754:	4b8d      	ldr	r3, [pc, #564]	; (800a98c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a756:	61bb      	str	r3, [r7, #24]
      break;
 800a758:	e10e      	b.n	800a978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a75a:	4b8d      	ldr	r3, [pc, #564]	; (800a990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a75c:	61bb      	str	r3, [r7, #24]
      break;
 800a75e:	e10b      	b.n	800a978 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a760:	4b8c      	ldr	r3, [pc, #560]	; (800a994 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a762:	61bb      	str	r3, [r7, #24]
      break;
 800a764:	e108      	b.n	800a978 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a766:	4b88      	ldr	r3, [pc, #544]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a76a:	f003 0303 	and.w	r3, r3, #3
 800a76e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a770:	4b85      	ldr	r3, [pc, #532]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a774:	091b      	lsrs	r3, r3, #4
 800a776:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a77a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a77c:	4b82      	ldr	r3, [pc, #520]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a77e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a780:	f003 0301 	and.w	r3, r3, #1
 800a784:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a786:	4b80      	ldr	r3, [pc, #512]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78a:	08db      	lsrs	r3, r3, #3
 800a78c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a790:	68fa      	ldr	r2, [r7, #12]
 800a792:	fb02 f303 	mul.w	r3, r2, r3
 800a796:	ee07 3a90 	vmov	s15, r3
 800a79a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a79e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a7a2:	693b      	ldr	r3, [r7, #16]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 80e1 	beq.w	800a96c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a7aa:	697b      	ldr	r3, [r7, #20]
 800a7ac:	2b02      	cmp	r3, #2
 800a7ae:	f000 8083 	beq.w	800a8b8 <HAL_RCC_GetSysClockFreq+0x204>
 800a7b2:	697b      	ldr	r3, [r7, #20]
 800a7b4:	2b02      	cmp	r3, #2
 800a7b6:	f200 80a1 	bhi.w	800a8fc <HAL_RCC_GetSysClockFreq+0x248>
 800a7ba:	697b      	ldr	r3, [r7, #20]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d003      	beq.n	800a7c8 <HAL_RCC_GetSysClockFreq+0x114>
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	2b01      	cmp	r3, #1
 800a7c4:	d056      	beq.n	800a874 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a7c6:	e099      	b.n	800a8fc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7c8:	4b6f      	ldr	r3, [pc, #444]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	f003 0320 	and.w	r3, r3, #32
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d02d      	beq.n	800a830 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7d4:	4b6c      	ldr	r3, [pc, #432]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	08db      	lsrs	r3, r3, #3
 800a7da:	f003 0303 	and.w	r3, r3, #3
 800a7de:	4a6b      	ldr	r2, [pc, #428]	; (800a98c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800a7e4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	ee07 3a90 	vmov	s15, r3
 800a7ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7fe:	4b62      	ldr	r3, [pc, #392]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a802:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a806:	ee07 3a90 	vmov	s15, r3
 800a80a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a80e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a812:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a816:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a81e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a822:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a826:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a82e:	e087      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	ee07 3a90 	vmov	s15, r3
 800a836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a83a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a99c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a83e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a842:	4b51      	ldr	r3, [pc, #324]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a84a:	ee07 3a90 	vmov	s15, r3
 800a84e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a852:	ed97 6a02 	vldr	s12, [r7, #8]
 800a856:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a85a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a85e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a862:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a86a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a86e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a872:	e065      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	ee07 3a90 	vmov	s15, r3
 800a87a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a87e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a9a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a886:	4b40      	ldr	r3, [pc, #256]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a88a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a88e:	ee07 3a90 	vmov	s15, r3
 800a892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a896:	ed97 6a02 	vldr	s12, [r7, #8]
 800a89a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a89e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8b6:	e043      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8b8:	693b      	ldr	r3, [r7, #16]
 800a8ba:	ee07 3a90 	vmov	s15, r3
 800a8be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8c2:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a9a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a8c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8ca:	4b2f      	ldr	r3, [pc, #188]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a8cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8d2:	ee07 3a90 	vmov	s15, r3
 800a8d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8da:	ed97 6a02 	vldr	s12, [r7, #8]
 800a8de:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a8e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a8ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8f6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a8fa:	e021      	b.n	800a940 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	ee07 3a90 	vmov	s15, r3
 800a902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a906:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a9a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a90a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a90e:	4b1e      	ldr	r3, [pc, #120]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a916:	ee07 3a90 	vmov	s15, r3
 800a91a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a91e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a922:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a998 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a92a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a92e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a93a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a93e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a940:	4b11      	ldr	r3, [pc, #68]	; (800a988 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a944:	0a5b      	lsrs	r3, r3, #9
 800a946:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a94a:	3301      	adds	r3, #1
 800a94c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	ee07 3a90 	vmov	s15, r3
 800a954:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a958:	edd7 6a07 	vldr	s13, [r7, #28]
 800a95c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a964:	ee17 3a90 	vmov	r3, s15
 800a968:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a96a:	e005      	b.n	800a978 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a96c:	2300      	movs	r3, #0
 800a96e:	61bb      	str	r3, [r7, #24]
      break;
 800a970:	e002      	b.n	800a978 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a972:	4b07      	ldr	r3, [pc, #28]	; (800a990 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a974:	61bb      	str	r3, [r7, #24]
      break;
 800a976:	bf00      	nop
  }

  return sysclockfreq;
 800a978:	69bb      	ldr	r3, [r7, #24]
}
 800a97a:	4618      	mov	r0, r3
 800a97c:	3724      	adds	r7, #36	; 0x24
 800a97e:	46bd      	mov	sp, r7
 800a980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a984:	4770      	bx	lr
 800a986:	bf00      	nop
 800a988:	58024400 	.word	0x58024400
 800a98c:	03d09000 	.word	0x03d09000
 800a990:	003d0900 	.word	0x003d0900
 800a994:	017d7840 	.word	0x017d7840
 800a998:	46000000 	.word	0x46000000
 800a99c:	4c742400 	.word	0x4c742400
 800a9a0:	4a742400 	.word	0x4a742400
 800a9a4:	4bbebc20 	.word	0x4bbebc20

0800a9a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b082      	sub	sp, #8
 800a9ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a9ae:	f7ff fe81 	bl	800a6b4 <HAL_RCC_GetSysClockFreq>
 800a9b2:	4602      	mov	r2, r0
 800a9b4:	4b10      	ldr	r3, [pc, #64]	; (800a9f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	0a1b      	lsrs	r3, r3, #8
 800a9ba:	f003 030f 	and.w	r3, r3, #15
 800a9be:	490f      	ldr	r1, [pc, #60]	; (800a9fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a9c0:	5ccb      	ldrb	r3, [r1, r3]
 800a9c2:	f003 031f 	and.w	r3, r3, #31
 800a9c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a9ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a9cc:	4b0a      	ldr	r3, [pc, #40]	; (800a9f8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a9ce:	699b      	ldr	r3, [r3, #24]
 800a9d0:	f003 030f 	and.w	r3, r3, #15
 800a9d4:	4a09      	ldr	r2, [pc, #36]	; (800a9fc <HAL_RCC_GetHCLKFreq+0x54>)
 800a9d6:	5cd3      	ldrb	r3, [r2, r3]
 800a9d8:	f003 031f 	and.w	r3, r3, #31
 800a9dc:	687a      	ldr	r2, [r7, #4]
 800a9de:	fa22 f303 	lsr.w	r3, r2, r3
 800a9e2:	4a07      	ldr	r2, [pc, #28]	; (800aa00 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a9e6:	4a07      	ldr	r2, [pc, #28]	; (800aa04 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a9ec:	4b04      	ldr	r3, [pc, #16]	; (800aa00 <HAL_RCC_GetHCLKFreq+0x58>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3708      	adds	r7, #8
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	bd80      	pop	{r7, pc}
 800a9f8:	58024400 	.word	0x58024400
 800a9fc:	080170a0 	.word	0x080170a0
 800aa00:	24000094 	.word	0x24000094
 800aa04:	24000090 	.word	0x24000090

0800aa08 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800aa0c:	f7ff ffcc 	bl	800a9a8 <HAL_RCC_GetHCLKFreq>
 800aa10:	4602      	mov	r2, r0
 800aa12:	4b06      	ldr	r3, [pc, #24]	; (800aa2c <HAL_RCC_GetPCLK1Freq+0x24>)
 800aa14:	69db      	ldr	r3, [r3, #28]
 800aa16:	091b      	lsrs	r3, r3, #4
 800aa18:	f003 0307 	and.w	r3, r3, #7
 800aa1c:	4904      	ldr	r1, [pc, #16]	; (800aa30 <HAL_RCC_GetPCLK1Freq+0x28>)
 800aa1e:	5ccb      	ldrb	r3, [r1, r3]
 800aa20:	f003 031f 	and.w	r3, r3, #31
 800aa24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	bd80      	pop	{r7, pc}
 800aa2c:	58024400 	.word	0x58024400
 800aa30:	080170a0 	.word	0x080170a0

0800aa34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aa38:	f7ff ffb6 	bl	800a9a8 <HAL_RCC_GetHCLKFreq>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aa40:	69db      	ldr	r3, [r3, #28]
 800aa42:	0a1b      	lsrs	r3, r3, #8
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	4904      	ldr	r1, [pc, #16]	; (800aa5c <HAL_RCC_GetPCLK2Freq+0x28>)
 800aa4a:	5ccb      	ldrb	r3, [r1, r3]
 800aa4c:	f003 031f 	and.w	r3, r3, #31
 800aa50:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aa54:	4618      	mov	r0, r3
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	58024400 	.word	0x58024400
 800aa5c:	080170a0 	.word	0x080170a0

0800aa60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b083      	sub	sp, #12
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]
 800aa68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	223f      	movs	r2, #63	; 0x3f
 800aa6e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800aa70:	4b1a      	ldr	r3, [pc, #104]	; (800aadc <HAL_RCC_GetClockConfig+0x7c>)
 800aa72:	691b      	ldr	r3, [r3, #16]
 800aa74:	f003 0207 	and.w	r2, r3, #7
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800aa7c:	4b17      	ldr	r3, [pc, #92]	; (800aadc <HAL_RCC_GetClockConfig+0x7c>)
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800aa88:	4b14      	ldr	r3, [pc, #80]	; (800aadc <HAL_RCC_GetClockConfig+0x7c>)
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	f003 020f 	and.w	r2, r3, #15
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800aa94:	4b11      	ldr	r3, [pc, #68]	; (800aadc <HAL_RCC_GetClockConfig+0x7c>)
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800aaa0:	4b0e      	ldr	r3, [pc, #56]	; (800aadc <HAL_RCC_GetClockConfig+0x7c>)
 800aaa2:	69db      	ldr	r3, [r3, #28]
 800aaa4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800aaac:	4b0b      	ldr	r3, [pc, #44]	; (800aadc <HAL_RCC_GetClockConfig+0x7c>)
 800aaae:	69db      	ldr	r3, [r3, #28]
 800aab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800aab8:	4b08      	ldr	r3, [pc, #32]	; (800aadc <HAL_RCC_GetClockConfig+0x7c>)
 800aaba:	6a1b      	ldr	r3, [r3, #32]
 800aabc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800aac4:	4b06      	ldr	r3, [pc, #24]	; (800aae0 <HAL_RCC_GetClockConfig+0x80>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f003 020f 	and.w	r2, r3, #15
 800aacc:	683b      	ldr	r3, [r7, #0]
 800aace:	601a      	str	r2, [r3, #0]
}
 800aad0:	bf00      	nop
 800aad2:	370c      	adds	r7, #12
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr
 800aadc:	58024400 	.word	0x58024400
 800aae0:	52002000 	.word	0x52002000

0800aae4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800aae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aae8:	b0ca      	sub	sp, #296	; 0x128
 800aaea:	af00      	add	r7, sp, #0
 800aaec:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aaf0:	2300      	movs	r3, #0
 800aaf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aafc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab04:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ab08:	2500      	movs	r5, #0
 800ab0a:	ea54 0305 	orrs.w	r3, r4, r5
 800ab0e:	d049      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ab10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab16:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab1a:	d02f      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ab1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ab20:	d828      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ab22:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab26:	d01a      	beq.n	800ab5e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ab28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ab2c:	d822      	bhi.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ab32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ab36:	d007      	beq.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ab38:	e01c      	b.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab3a:	4bb8      	ldr	r3, [pc, #736]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab3e:	4ab7      	ldr	r2, [pc, #732]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab46:	e01a      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4c:	3308      	adds	r3, #8
 800ab4e:	2102      	movs	r1, #2
 800ab50:	4618      	mov	r0, r3
 800ab52:	f002 fb61 	bl	800d218 <RCCEx_PLL2_Config>
 800ab56:	4603      	mov	r3, r0
 800ab58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab5c:	e00f      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ab5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab62:	3328      	adds	r3, #40	; 0x28
 800ab64:	2102      	movs	r1, #2
 800ab66:	4618      	mov	r0, r3
 800ab68:	f002 fc08 	bl	800d37c <RCCEx_PLL3_Config>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ab72:	e004      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab74:	2301      	movs	r3, #1
 800ab76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab7a:	e000      	b.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ab7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d10a      	bne.n	800ab9c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ab86:	4ba5      	ldr	r3, [pc, #660]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab8a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ab94:	4aa1      	ldr	r2, [pc, #644]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab96:	430b      	orrs	r3, r1
 800ab98:	6513      	str	r3, [r2, #80]	; 0x50
 800ab9a:	e003      	b.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abac:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800abb0:	f04f 0900 	mov.w	r9, #0
 800abb4:	ea58 0309 	orrs.w	r3, r8, r9
 800abb8:	d047      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800abba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800abc0:	2b04      	cmp	r3, #4
 800abc2:	d82a      	bhi.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x136>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800abe1 	.word	0x0800abe1
 800abd0:	0800abef 	.word	0x0800abef
 800abd4:	0800ac05 	.word	0x0800ac05
 800abd8:	0800ac23 	.word	0x0800ac23
 800abdc:	0800ac23 	.word	0x0800ac23
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abe0:	4b8e      	ldr	r3, [pc, #568]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe4:	4a8d      	ldr	r2, [pc, #564]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abe6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800abea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800abec:	e01a      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf2:	3308      	adds	r3, #8
 800abf4:	2100      	movs	r1, #0
 800abf6:	4618      	mov	r0, r3
 800abf8:	f002 fb0e 	bl	800d218 <RCCEx_PLL2_Config>
 800abfc:	4603      	mov	r3, r0
 800abfe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac02:	e00f      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac08:	3328      	adds	r3, #40	; 0x28
 800ac0a:	2100      	movs	r1, #0
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	f002 fbb5 	bl	800d37c <RCCEx_PLL3_Config>
 800ac12:	4603      	mov	r3, r0
 800ac14:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac18:	e004      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ac1a:	2301      	movs	r3, #1
 800ac1c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac20:	e000      	b.n	800ac24 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ac22:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	d10a      	bne.n	800ac42 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ac2c:	4b7b      	ldr	r3, [pc, #492]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac30:	f023 0107 	bic.w	r1, r3, #7
 800ac34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac3a:	4a78      	ldr	r2, [pc, #480]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac3c:	430b      	orrs	r3, r1
 800ac3e:	6513      	str	r3, [r2, #80]	; 0x50
 800ac40:	e003      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ac4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac52:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ac56:	f04f 0b00 	mov.w	fp, #0
 800ac5a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ac5e:	d04c      	beq.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ac60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac6a:	d030      	beq.n	800acce <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ac6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac70:	d829      	bhi.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ac72:	2bc0      	cmp	r3, #192	; 0xc0
 800ac74:	d02d      	beq.n	800acd2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ac76:	2bc0      	cmp	r3, #192	; 0xc0
 800ac78:	d825      	bhi.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ac7a:	2b80      	cmp	r3, #128	; 0x80
 800ac7c:	d018      	beq.n	800acb0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ac7e:	2b80      	cmp	r3, #128	; 0x80
 800ac80:	d821      	bhi.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d002      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ac86:	2b40      	cmp	r3, #64	; 0x40
 800ac88:	d007      	beq.n	800ac9a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ac8a:	e01c      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac8c:	4b63      	ldr	r3, [pc, #396]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac90:	4a62      	ldr	r2, [pc, #392]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ac98:	e01c      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac9e:	3308      	adds	r3, #8
 800aca0:	2100      	movs	r1, #0
 800aca2:	4618      	mov	r0, r3
 800aca4:	f002 fab8 	bl	800d218 <RCCEx_PLL2_Config>
 800aca8:	4603      	mov	r3, r0
 800acaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800acae:	e011      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acb4:	3328      	adds	r3, #40	; 0x28
 800acb6:	2100      	movs	r1, #0
 800acb8:	4618      	mov	r0, r3
 800acba:	f002 fb5f 	bl	800d37c <RCCEx_PLL3_Config>
 800acbe:	4603      	mov	r3, r0
 800acc0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800acc4:	e006      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800acc6:	2301      	movs	r3, #1
 800acc8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800accc:	e002      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800acce:	bf00      	nop
 800acd0:	e000      	b.n	800acd4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800acd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800acd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d10a      	bne.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800acdc:	4b4f      	ldr	r3, [pc, #316]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ace0:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ace4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800acea:	4a4c      	ldr	r2, [pc, #304]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800acec:	430b      	orrs	r3, r1
 800acee:	6513      	str	r3, [r2, #80]	; 0x50
 800acf0:	e003      	b.n	800acfa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800acfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad02:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800ad06:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ad10:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ad14:	460b      	mov	r3, r1
 800ad16:	4313      	orrs	r3, r2
 800ad18:	d053      	beq.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ad1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad1e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ad22:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad26:	d035      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ad28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ad2c:	d82e      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ad2e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad32:	d031      	beq.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ad34:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ad38:	d828      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ad3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad3e:	d01a      	beq.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ad40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ad44:	d822      	bhi.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d003      	beq.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ad4a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad4e:	d007      	beq.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ad50:	e01c      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad52:	4b32      	ldr	r3, [pc, #200]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad56:	4a31      	ldr	r2, [pc, #196]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad5c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad5e:	e01c      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad64:	3308      	adds	r3, #8
 800ad66:	2100      	movs	r1, #0
 800ad68:	4618      	mov	r0, r3
 800ad6a:	f002 fa55 	bl	800d218 <RCCEx_PLL2_Config>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ad74:	e011      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad7a:	3328      	adds	r3, #40	; 0x28
 800ad7c:	2100      	movs	r1, #0
 800ad7e:	4618      	mov	r0, r3
 800ad80:	f002 fafc 	bl	800d37c <RCCEx_PLL3_Config>
 800ad84:	4603      	mov	r3, r0
 800ad86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad8a:	e006      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad92:	e002      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ad94:	bf00      	nop
 800ad96:	e000      	b.n	800ad9a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ad98:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d10b      	bne.n	800adba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ada2:	4b1e      	ldr	r3, [pc, #120]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ada4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ada6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800adaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adae:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800adb2:	4a1a      	ldr	r2, [pc, #104]	; (800ae1c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adb4:	430b      	orrs	r3, r1
 800adb6:	6593      	str	r3, [r2, #88]	; 0x58
 800adb8:	e003      	b.n	800adc2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800adc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adca:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800adce:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800add2:	2300      	movs	r3, #0
 800add4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800add8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800addc:	460b      	mov	r3, r1
 800adde:	4313      	orrs	r3, r2
 800ade0:	d056      	beq.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ade2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800adea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adee:	d038      	beq.n	800ae62 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800adf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800adf4:	d831      	bhi.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800adf6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800adfa:	d034      	beq.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800adfc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ae00:	d82b      	bhi.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ae02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae06:	d01d      	beq.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800ae08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ae0c:	d825      	bhi.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d006      	beq.n	800ae20 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ae12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ae16:	d00a      	beq.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ae18:	e01f      	b.n	800ae5a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ae1a:	bf00      	nop
 800ae1c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae20:	4ba2      	ldr	r3, [pc, #648]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae24:	4aa1      	ldr	r2, [pc, #644]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae2c:	e01c      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae32:	3308      	adds	r3, #8
 800ae34:	2100      	movs	r1, #0
 800ae36:	4618      	mov	r0, r3
 800ae38:	f002 f9ee 	bl	800d218 <RCCEx_PLL2_Config>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ae42:	e011      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae48:	3328      	adds	r3, #40	; 0x28
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f002 fa95 	bl	800d37c <RCCEx_PLL3_Config>
 800ae52:	4603      	mov	r3, r0
 800ae54:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae58:	e006      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae60:	e002      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ae62:	bf00      	nop
 800ae64:	e000      	b.n	800ae68 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ae66:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae68:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d10b      	bne.n	800ae88 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ae70:	4b8e      	ldr	r3, [pc, #568]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae74:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ae78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ae80:	4a8a      	ldr	r2, [pc, #552]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae82:	430b      	orrs	r3, r1
 800ae84:	6593      	str	r3, [r2, #88]	; 0x58
 800ae86:	e003      	b.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ae90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae98:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ae9c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800aea0:	2300      	movs	r3, #0
 800aea2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800aea6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800aeaa:	460b      	mov	r3, r1
 800aeac:	4313      	orrs	r3, r2
 800aeae:	d03a      	beq.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800aeb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aeb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aeb6:	2b30      	cmp	r3, #48	; 0x30
 800aeb8:	d01f      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800aeba:	2b30      	cmp	r3, #48	; 0x30
 800aebc:	d819      	bhi.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aebe:	2b20      	cmp	r3, #32
 800aec0:	d00c      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800aec2:	2b20      	cmp	r3, #32
 800aec4:	d815      	bhi.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d019      	beq.n	800aefe <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800aeca:	2b10      	cmp	r3, #16
 800aecc:	d111      	bne.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aece:	4b77      	ldr	r3, [pc, #476]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aed2:	4a76      	ldr	r2, [pc, #472]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aeda:	e011      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aedc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee0:	3308      	adds	r3, #8
 800aee2:	2102      	movs	r1, #2
 800aee4:	4618      	mov	r0, r3
 800aee6:	f002 f997 	bl	800d218 <RCCEx_PLL2_Config>
 800aeea:	4603      	mov	r3, r0
 800aeec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800aef0:	e006      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800aef2:	2301      	movs	r3, #1
 800aef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aef8:	e002      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aefa:	bf00      	nop
 800aefc:	e000      	b.n	800af00 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800aefe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af04:	2b00      	cmp	r3, #0
 800af06:	d10a      	bne.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800af08:	4b68      	ldr	r3, [pc, #416]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af0c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800af10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800af16:	4a65      	ldr	r2, [pc, #404]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af18:	430b      	orrs	r3, r1
 800af1a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800af1c:	e003      	b.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af22:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800af26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800af32:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800af36:	2300      	movs	r3, #0
 800af38:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800af3c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800af40:	460b      	mov	r3, r1
 800af42:	4313      	orrs	r3, r2
 800af44:	d051      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800af46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af50:	d035      	beq.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800af52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800af56:	d82e      	bhi.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800af58:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af5c:	d031      	beq.n	800afc2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800af5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800af62:	d828      	bhi.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800af64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af68:	d01a      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800af6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af6e:	d822      	bhi.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800af70:	2b00      	cmp	r3, #0
 800af72:	d003      	beq.n	800af7c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800af74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800af78:	d007      	beq.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800af7a:	e01c      	b.n	800afb6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af7c:	4b4b      	ldr	r3, [pc, #300]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af80:	4a4a      	ldr	r2, [pc, #296]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af86:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af88:	e01c      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af8e:	3308      	adds	r3, #8
 800af90:	2100      	movs	r1, #0
 800af92:	4618      	mov	r0, r3
 800af94:	f002 f940 	bl	800d218 <RCCEx_PLL2_Config>
 800af98:	4603      	mov	r3, r0
 800af9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800af9e:	e011      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800afa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afa4:	3328      	adds	r3, #40	; 0x28
 800afa6:	2100      	movs	r1, #0
 800afa8:	4618      	mov	r0, r3
 800afaa:	f002 f9e7 	bl	800d37c <RCCEx_PLL3_Config>
 800afae:	4603      	mov	r3, r0
 800afb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800afb4:	e006      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800afb6:	2301      	movs	r3, #1
 800afb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afbc:	e002      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800afbe:	bf00      	nop
 800afc0:	e000      	b.n	800afc4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800afc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afc4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afc8:	2b00      	cmp	r3, #0
 800afca:	d10a      	bne.n	800afe2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800afcc:	4b37      	ldr	r3, [pc, #220]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afd0:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800afd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afda:	4a34      	ldr	r2, [pc, #208]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800afdc:	430b      	orrs	r3, r1
 800afde:	6513      	str	r3, [r2, #80]	; 0x50
 800afe0:	e003      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afe6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800afea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aff6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800affa:	2300      	movs	r3, #0
 800affc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b000:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b004:	460b      	mov	r3, r1
 800b006:	4313      	orrs	r3, r2
 800b008:	d056      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b00a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b00e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b014:	d033      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b016:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b01a:	d82c      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b01c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b020:	d02f      	beq.n	800b082 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b022:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b026:	d826      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b028:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b02c:	d02b      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b02e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b032:	d820      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b034:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b038:	d012      	beq.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b03a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b03e:	d81a      	bhi.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b040:	2b00      	cmp	r3, #0
 800b042:	d022      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b048:	d115      	bne.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b04a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b04e:	3308      	adds	r3, #8
 800b050:	2101      	movs	r1, #1
 800b052:	4618      	mov	r0, r3
 800b054:	f002 f8e0 	bl	800d218 <RCCEx_PLL2_Config>
 800b058:	4603      	mov	r3, r0
 800b05a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b05e:	e015      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b064:	3328      	adds	r3, #40	; 0x28
 800b066:	2101      	movs	r1, #1
 800b068:	4618      	mov	r0, r3
 800b06a:	f002 f987 	bl	800d37c <RCCEx_PLL3_Config>
 800b06e:	4603      	mov	r3, r0
 800b070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b074:	e00a      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b07c:	e006      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b07e:	bf00      	nop
 800b080:	e004      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b082:	bf00      	nop
 800b084:	e002      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b086:	bf00      	nop
 800b088:	e000      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b08a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b08c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10d      	bne.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b094:	4b05      	ldr	r3, [pc, #20]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b096:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b098:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b0a2:	4a02      	ldr	r2, [pc, #8]	; (800b0ac <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0a4:	430b      	orrs	r3, r1
 800b0a6:	6513      	str	r3, [r2, #80]	; 0x50
 800b0a8:	e006      	b.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b0aa:	bf00      	nop
 800b0ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b0b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0c0:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b0c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b0ce:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	d055      	beq.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b0d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0dc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b0e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0e4:	d033      	beq.n	800b14e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b0e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0ea:	d82c      	bhi.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b0ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0f0:	d02f      	beq.n	800b152 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0f6:	d826      	bhi.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b0f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0fc:	d02b      	beq.n	800b156 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b0fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b102:	d820      	bhi.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b104:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b108:	d012      	beq.n	800b130 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b10a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b10e:	d81a      	bhi.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b110:	2b00      	cmp	r3, #0
 800b112:	d022      	beq.n	800b15a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b114:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b118:	d115      	bne.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b11a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b11e:	3308      	adds	r3, #8
 800b120:	2101      	movs	r1, #1
 800b122:	4618      	mov	r0, r3
 800b124:	f002 f878 	bl	800d218 <RCCEx_PLL2_Config>
 800b128:	4603      	mov	r3, r0
 800b12a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b12e:	e015      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b134:	3328      	adds	r3, #40	; 0x28
 800b136:	2101      	movs	r1, #1
 800b138:	4618      	mov	r0, r3
 800b13a:	f002 f91f 	bl	800d37c <RCCEx_PLL3_Config>
 800b13e:	4603      	mov	r3, r0
 800b140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b144:	e00a      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b146:	2301      	movs	r3, #1
 800b148:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b14c:	e006      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b14e:	bf00      	nop
 800b150:	e004      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b152:	bf00      	nop
 800b154:	e002      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b156:	bf00      	nop
 800b158:	e000      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b15a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b15c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10b      	bne.n	800b17c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b164:	4ba3      	ldr	r3, [pc, #652]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b168:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b16c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b174:	4a9f      	ldr	r2, [pc, #636]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b176:	430b      	orrs	r3, r1
 800b178:	6593      	str	r3, [r2, #88]	; 0x58
 800b17a:	e003      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b17c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b180:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b18c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b190:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b194:	2300      	movs	r3, #0
 800b196:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b19a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b19e:	460b      	mov	r3, r1
 800b1a0:	4313      	orrs	r3, r2
 800b1a2:	d037      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b1a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1ae:	d00e      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b1b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b1b4:	d816      	bhi.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d018      	beq.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b1ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b1be:	d111      	bne.n	800b1e4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1c0:	4b8c      	ldr	r3, [pc, #560]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c4:	4a8b      	ldr	r2, [pc, #556]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b1cc:	e00f      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b1ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	2101      	movs	r1, #1
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f002 f81e 	bl	800d218 <RCCEx_PLL2_Config>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b1e2:	e004      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1ea:	e000      	b.n	800b1ee <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b1ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d10a      	bne.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b1f6:	4b7f      	ldr	r3, [pc, #508]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1fa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b204:	4a7b      	ldr	r2, [pc, #492]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b206:	430b      	orrs	r3, r1
 800b208:	6513      	str	r3, [r2, #80]	; 0x50
 800b20a:	e003      	b.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b20c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b21c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b224:	2300      	movs	r3, #0
 800b226:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b22a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b22e:	460b      	mov	r3, r1
 800b230:	4313      	orrs	r3, r2
 800b232:	d039      	beq.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b234:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b23a:	2b03      	cmp	r3, #3
 800b23c:	d81c      	bhi.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b23e:	a201      	add	r2, pc, #4	; (adr r2, 800b244 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b244:	0800b281 	.word	0x0800b281
 800b248:	0800b255 	.word	0x0800b255
 800b24c:	0800b263 	.word	0x0800b263
 800b250:	0800b281 	.word	0x0800b281
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b254:	4b67      	ldr	r3, [pc, #412]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b258:	4a66      	ldr	r2, [pc, #408]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b25a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b25e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b260:	e00f      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b266:	3308      	adds	r3, #8
 800b268:	2102      	movs	r1, #2
 800b26a:	4618      	mov	r0, r3
 800b26c:	f001 ffd4 	bl	800d218 <RCCEx_PLL2_Config>
 800b270:	4603      	mov	r3, r0
 800b272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b276:	e004      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b278:	2301      	movs	r3, #1
 800b27a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b27e:	e000      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b280:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b286:	2b00      	cmp	r3, #0
 800b288:	d10a      	bne.n	800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b28a:	4b5a      	ldr	r3, [pc, #360]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b28c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b28e:	f023 0103 	bic.w	r1, r3, #3
 800b292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b296:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b298:	4a56      	ldr	r2, [pc, #344]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b29a:	430b      	orrs	r3, r1
 800b29c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b29e:	e003      	b.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b2a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2b0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b2b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b2b8:	2300      	movs	r3, #0
 800b2ba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b2be:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b2c2:	460b      	mov	r3, r1
 800b2c4:	4313      	orrs	r3, r2
 800b2c6:	f000 809f 	beq.w	800b408 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2ca:	4b4b      	ldr	r3, [pc, #300]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	4a4a      	ldr	r2, [pc, #296]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b2d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2d4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b2d6:	f7f8 fc41 	bl	8003b5c <HAL_GetTick>
 800b2da:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2de:	e00b      	b.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2e0:	f7f8 fc3c 	bl	8003b5c <HAL_GetTick>
 800b2e4:	4602      	mov	r2, r0
 800b2e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	2b64      	cmp	r3, #100	; 0x64
 800b2ee:	d903      	bls.n	800b2f8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2f6:	e005      	b.n	800b304 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b2f8:	4b3f      	ldr	r3, [pc, #252]	; (800b3f8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b300:	2b00      	cmp	r3, #0
 800b302:	d0ed      	beq.n	800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b304:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d179      	bne.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b30c:	4b39      	ldr	r3, [pc, #228]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b30e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b310:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b318:	4053      	eors	r3, r2
 800b31a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d015      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b322:	4b34      	ldr	r3, [pc, #208]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b326:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b32a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b32e:	4b31      	ldr	r3, [pc, #196]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b332:	4a30      	ldr	r2, [pc, #192]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b338:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b33a:	4b2e      	ldr	r3, [pc, #184]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b33c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b33e:	4a2d      	ldr	r2, [pc, #180]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b344:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b346:	4a2b      	ldr	r2, [pc, #172]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b348:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b34c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b34e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b352:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b35a:	d118      	bne.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b35c:	f7f8 fbfe 	bl	8003b5c <HAL_GetTick>
 800b360:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b364:	e00d      	b.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b366:	f7f8 fbf9 	bl	8003b5c <HAL_GetTick>
 800b36a:	4602      	mov	r2, r0
 800b36c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b370:	1ad2      	subs	r2, r2, r3
 800b372:	f241 3388 	movw	r3, #5000	; 0x1388
 800b376:	429a      	cmp	r2, r3
 800b378:	d903      	bls.n	800b382 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b380:	e005      	b.n	800b38e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b382:	4b1c      	ldr	r3, [pc, #112]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b384:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b386:	f003 0302 	and.w	r3, r3, #2
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d0eb      	beq.n	800b366 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b38e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b392:	2b00      	cmp	r3, #0
 800b394:	d129      	bne.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b39a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b39e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b3a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b3a6:	d10e      	bne.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b3a8:	4b12      	ldr	r3, [pc, #72]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b3b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3b8:	091a      	lsrs	r2, r3, #4
 800b3ba:	4b10      	ldr	r3, [pc, #64]	; (800b3fc <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b3bc:	4013      	ands	r3, r2
 800b3be:	4a0d      	ldr	r2, [pc, #52]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3c0:	430b      	orrs	r3, r1
 800b3c2:	6113      	str	r3, [r2, #16]
 800b3c4:	e005      	b.n	800b3d2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b3c6:	4b0b      	ldr	r3, [pc, #44]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	4a0a      	ldr	r2, [pc, #40]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3cc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b3d0:	6113      	str	r3, [r2, #16]
 800b3d2:	4b08      	ldr	r3, [pc, #32]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3d4:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b3e2:	4a04      	ldr	r2, [pc, #16]	; (800b3f4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3e4:	430b      	orrs	r3, r1
 800b3e6:	6713      	str	r3, [r2, #112]	; 0x70
 800b3e8:	e00e      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b3ea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3ee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b3f2:	e009      	b.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b3f4:	58024400 	.word	0x58024400
 800b3f8:	58024800 	.word	0x58024800
 800b3fc:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b400:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b404:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b408:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f002 0301 	and.w	r3, r2, #1
 800b414:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b418:	2300      	movs	r3, #0
 800b41a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b41e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b422:	460b      	mov	r3, r1
 800b424:	4313      	orrs	r3, r2
 800b426:	f000 8089 	beq.w	800b53c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b42a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b42e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b430:	2b28      	cmp	r3, #40	; 0x28
 800b432:	d86b      	bhi.n	800b50c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b434:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b436:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43a:	bf00      	nop
 800b43c:	0800b515 	.word	0x0800b515
 800b440:	0800b50d 	.word	0x0800b50d
 800b444:	0800b50d 	.word	0x0800b50d
 800b448:	0800b50d 	.word	0x0800b50d
 800b44c:	0800b50d 	.word	0x0800b50d
 800b450:	0800b50d 	.word	0x0800b50d
 800b454:	0800b50d 	.word	0x0800b50d
 800b458:	0800b50d 	.word	0x0800b50d
 800b45c:	0800b4e1 	.word	0x0800b4e1
 800b460:	0800b50d 	.word	0x0800b50d
 800b464:	0800b50d 	.word	0x0800b50d
 800b468:	0800b50d 	.word	0x0800b50d
 800b46c:	0800b50d 	.word	0x0800b50d
 800b470:	0800b50d 	.word	0x0800b50d
 800b474:	0800b50d 	.word	0x0800b50d
 800b478:	0800b50d 	.word	0x0800b50d
 800b47c:	0800b4f7 	.word	0x0800b4f7
 800b480:	0800b50d 	.word	0x0800b50d
 800b484:	0800b50d 	.word	0x0800b50d
 800b488:	0800b50d 	.word	0x0800b50d
 800b48c:	0800b50d 	.word	0x0800b50d
 800b490:	0800b50d 	.word	0x0800b50d
 800b494:	0800b50d 	.word	0x0800b50d
 800b498:	0800b50d 	.word	0x0800b50d
 800b49c:	0800b515 	.word	0x0800b515
 800b4a0:	0800b50d 	.word	0x0800b50d
 800b4a4:	0800b50d 	.word	0x0800b50d
 800b4a8:	0800b50d 	.word	0x0800b50d
 800b4ac:	0800b50d 	.word	0x0800b50d
 800b4b0:	0800b50d 	.word	0x0800b50d
 800b4b4:	0800b50d 	.word	0x0800b50d
 800b4b8:	0800b50d 	.word	0x0800b50d
 800b4bc:	0800b515 	.word	0x0800b515
 800b4c0:	0800b50d 	.word	0x0800b50d
 800b4c4:	0800b50d 	.word	0x0800b50d
 800b4c8:	0800b50d 	.word	0x0800b50d
 800b4cc:	0800b50d 	.word	0x0800b50d
 800b4d0:	0800b50d 	.word	0x0800b50d
 800b4d4:	0800b50d 	.word	0x0800b50d
 800b4d8:	0800b50d 	.word	0x0800b50d
 800b4dc:	0800b515 	.word	0x0800b515
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e4:	3308      	adds	r3, #8
 800b4e6:	2101      	movs	r1, #1
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	f001 fe95 	bl	800d218 <RCCEx_PLL2_Config>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b4f4:	e00f      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fa:	3328      	adds	r3, #40	; 0x28
 800b4fc:	2101      	movs	r1, #1
 800b4fe:	4618      	mov	r0, r3
 800b500:	f001 ff3c 	bl	800d37c <RCCEx_PLL3_Config>
 800b504:	4603      	mov	r3, r0
 800b506:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b50a:	e004      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b50c:	2301      	movs	r3, #1
 800b50e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b512:	e000      	b.n	800b516 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b514:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d10a      	bne.n	800b534 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b51e:	4bbf      	ldr	r3, [pc, #764]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b522:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b52a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b52c:	4abb      	ldr	r2, [pc, #748]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b52e:	430b      	orrs	r3, r1
 800b530:	6553      	str	r3, [r2, #84]	; 0x54
 800b532:	e003      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b534:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b538:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b53c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b540:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b544:	f002 0302 	and.w	r3, r2, #2
 800b548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b54c:	2300      	movs	r3, #0
 800b54e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b552:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b556:	460b      	mov	r3, r1
 800b558:	4313      	orrs	r3, r2
 800b55a:	d041      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b55c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b562:	2b05      	cmp	r3, #5
 800b564:	d824      	bhi.n	800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b566:	a201      	add	r2, pc, #4	; (adr r2, 800b56c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56c:	0800b5b9 	.word	0x0800b5b9
 800b570:	0800b585 	.word	0x0800b585
 800b574:	0800b59b 	.word	0x0800b59b
 800b578:	0800b5b9 	.word	0x0800b5b9
 800b57c:	0800b5b9 	.word	0x0800b5b9
 800b580:	0800b5b9 	.word	0x0800b5b9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b588:	3308      	adds	r3, #8
 800b58a:	2101      	movs	r1, #1
 800b58c:	4618      	mov	r0, r3
 800b58e:	f001 fe43 	bl	800d218 <RCCEx_PLL2_Config>
 800b592:	4603      	mov	r3, r0
 800b594:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b598:	e00f      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b59a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b59e:	3328      	adds	r3, #40	; 0x28
 800b5a0:	2101      	movs	r1, #1
 800b5a2:	4618      	mov	r0, r3
 800b5a4:	f001 feea 	bl	800d37c <RCCEx_PLL3_Config>
 800b5a8:	4603      	mov	r3, r0
 800b5aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b5ae:	e004      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5b0:	2301      	movs	r3, #1
 800b5b2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5b6:	e000      	b.n	800b5ba <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b5b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d10a      	bne.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b5c2:	4b96      	ldr	r3, [pc, #600]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5c6:	f023 0107 	bic.w	r1, r3, #7
 800b5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b5d0:	4a92      	ldr	r2, [pc, #584]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5d2:	430b      	orrs	r3, r1
 800b5d4:	6553      	str	r3, [r2, #84]	; 0x54
 800b5d6:	e003      	b.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e8:	f002 0304 	and.w	r3, r2, #4
 800b5ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b5f6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4313      	orrs	r3, r2
 800b5fe:	d044      	beq.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b604:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b608:	2b05      	cmp	r3, #5
 800b60a:	d825      	bhi.n	800b658 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b60c:	a201      	add	r2, pc, #4	; (adr r2, 800b614 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b60e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b612:	bf00      	nop
 800b614:	0800b661 	.word	0x0800b661
 800b618:	0800b62d 	.word	0x0800b62d
 800b61c:	0800b643 	.word	0x0800b643
 800b620:	0800b661 	.word	0x0800b661
 800b624:	0800b661 	.word	0x0800b661
 800b628:	0800b661 	.word	0x0800b661
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b630:	3308      	adds	r3, #8
 800b632:	2101      	movs	r1, #1
 800b634:	4618      	mov	r0, r3
 800b636:	f001 fdef 	bl	800d218 <RCCEx_PLL2_Config>
 800b63a:	4603      	mov	r3, r0
 800b63c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b640:	e00f      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b646:	3328      	adds	r3, #40	; 0x28
 800b648:	2101      	movs	r1, #1
 800b64a:	4618      	mov	r0, r3
 800b64c:	f001 fe96 	bl	800d37c <RCCEx_PLL3_Config>
 800b650:	4603      	mov	r3, r0
 800b652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b656:	e004      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b65e:	e000      	b.n	800b662 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b660:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b662:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b666:	2b00      	cmp	r3, #0
 800b668:	d10b      	bne.n	800b682 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b66a:	4b6c      	ldr	r3, [pc, #432]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b66c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b66e:	f023 0107 	bic.w	r1, r3, #7
 800b672:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b67a:	4a68      	ldr	r2, [pc, #416]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b67c:	430b      	orrs	r3, r1
 800b67e:	6593      	str	r3, [r2, #88]	; 0x58
 800b680:	e003      	b.n	800b68a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b682:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b686:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b68a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b68e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b692:	f002 0320 	and.w	r3, r2, #32
 800b696:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b69a:	2300      	movs	r3, #0
 800b69c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b6a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b6a4:	460b      	mov	r3, r1
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	d055      	beq.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b6b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6b6:	d033      	beq.n	800b720 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b6b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b6bc:	d82c      	bhi.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b6be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c2:	d02f      	beq.n	800b724 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b6c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b6c8:	d826      	bhi.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b6ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6ce:	d02b      	beq.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b6d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b6d4:	d820      	bhi.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b6d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6da:	d012      	beq.n	800b702 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b6dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6e0:	d81a      	bhi.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d022      	beq.n	800b72c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b6e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6ea:	d115      	bne.n	800b718 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	2100      	movs	r1, #0
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f001 fd8f 	bl	800d218 <RCCEx_PLL2_Config>
 800b6fa:	4603      	mov	r3, r0
 800b6fc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b700:	e015      	b.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b702:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b706:	3328      	adds	r3, #40	; 0x28
 800b708:	2102      	movs	r1, #2
 800b70a:	4618      	mov	r0, r3
 800b70c:	f001 fe36 	bl	800d37c <RCCEx_PLL3_Config>
 800b710:	4603      	mov	r3, r0
 800b712:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b716:	e00a      	b.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b718:	2301      	movs	r3, #1
 800b71a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b71e:	e006      	b.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b720:	bf00      	nop
 800b722:	e004      	b.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b724:	bf00      	nop
 800b726:	e002      	b.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b728:	bf00      	nop
 800b72a:	e000      	b.n	800b72e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b72c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b72e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b732:	2b00      	cmp	r3, #0
 800b734:	d10b      	bne.n	800b74e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b736:	4b39      	ldr	r3, [pc, #228]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b73a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b73e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b746:	4a35      	ldr	r2, [pc, #212]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b748:	430b      	orrs	r3, r1
 800b74a:	6553      	str	r3, [r2, #84]	; 0x54
 800b74c:	e003      	b.n	800b756 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b74e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b752:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b762:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b766:	2300      	movs	r3, #0
 800b768:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b76c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b770:	460b      	mov	r3, r1
 800b772:	4313      	orrs	r3, r2
 800b774:	d058      	beq.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b77a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b77e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b782:	d033      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b784:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b788:	d82c      	bhi.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b78a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b78e:	d02f      	beq.n	800b7f0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b794:	d826      	bhi.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b796:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b79a:	d02b      	beq.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b79c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b7a0:	d820      	bhi.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b7a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7a6:	d012      	beq.n	800b7ce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b7a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b7ac:	d81a      	bhi.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d022      	beq.n	800b7f8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b7b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b7b6:	d115      	bne.n	800b7e4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b7b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7bc:	3308      	adds	r3, #8
 800b7be:	2100      	movs	r1, #0
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f001 fd29 	bl	800d218 <RCCEx_PLL2_Config>
 800b7c6:	4603      	mov	r3, r0
 800b7c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b7cc:	e015      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d2:	3328      	adds	r3, #40	; 0x28
 800b7d4:	2102      	movs	r1, #2
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f001 fdd0 	bl	800d37c <RCCEx_PLL3_Config>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b7e2:	e00a      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7e4:	2301      	movs	r3, #1
 800b7e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7ea:	e006      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b7ec:	bf00      	nop
 800b7ee:	e004      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b7f0:	bf00      	nop
 800b7f2:	e002      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b7f4:	bf00      	nop
 800b7f6:	e000      	b.n	800b7fa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10e      	bne.n	800b820 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b802:	4b06      	ldr	r3, [pc, #24]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b806:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b812:	4a02      	ldr	r2, [pc, #8]	; (800b81c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b814:	430b      	orrs	r3, r1
 800b816:	6593      	str	r3, [r2, #88]	; 0x58
 800b818:	e006      	b.n	800b828 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b81a:	bf00      	nop
 800b81c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b820:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b824:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b82c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b830:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b834:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b838:	2300      	movs	r3, #0
 800b83a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b83e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b842:	460b      	mov	r3, r1
 800b844:	4313      	orrs	r3, r2
 800b846:	d055      	beq.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b848:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b850:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b854:	d033      	beq.n	800b8be <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b856:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b85a:	d82c      	bhi.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b85c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b860:	d02f      	beq.n	800b8c2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b862:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b866:	d826      	bhi.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b868:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b86c:	d02b      	beq.n	800b8c6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b86e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b872:	d820      	bhi.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b874:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b878:	d012      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b87a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b87e:	d81a      	bhi.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b880:	2b00      	cmp	r3, #0
 800b882:	d022      	beq.n	800b8ca <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b884:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b888:	d115      	bne.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b88a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88e:	3308      	adds	r3, #8
 800b890:	2100      	movs	r1, #0
 800b892:	4618      	mov	r0, r3
 800b894:	f001 fcc0 	bl	800d218 <RCCEx_PLL2_Config>
 800b898:	4603      	mov	r3, r0
 800b89a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b89e:	e015      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a4:	3328      	adds	r3, #40	; 0x28
 800b8a6:	2102      	movs	r1, #2
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f001 fd67 	bl	800d37c <RCCEx_PLL3_Config>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b8b4:	e00a      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8bc:	e006      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b8be:	bf00      	nop
 800b8c0:	e004      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b8c2:	bf00      	nop
 800b8c4:	e002      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b8c6:	bf00      	nop
 800b8c8:	e000      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b8ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10b      	bne.n	800b8ec <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b8d4:	4ba1      	ldr	r3, [pc, #644]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8d8:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b8dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b8e4:	4a9d      	ldr	r2, [pc, #628]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8e6:	430b      	orrs	r3, r1
 800b8e8:	6593      	str	r3, [r2, #88]	; 0x58
 800b8ea:	e003      	b.n	800b8f4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b8f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8fc:	f002 0308 	and.w	r3, r2, #8
 800b900:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b904:	2300      	movs	r3, #0
 800b906:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b90a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b90e:	460b      	mov	r3, r1
 800b910:	4313      	orrs	r3, r2
 800b912:	d01e      	beq.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b914:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b91c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b920:	d10c      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b922:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b926:	3328      	adds	r3, #40	; 0x28
 800b928:	2102      	movs	r1, #2
 800b92a:	4618      	mov	r0, r3
 800b92c:	f001 fd26 	bl	800d37c <RCCEx_PLL3_Config>
 800b930:	4603      	mov	r3, r0
 800b932:	2b00      	cmp	r3, #0
 800b934:	d002      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b936:	2301      	movs	r3, #1
 800b938:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b93c:	4b87      	ldr	r3, [pc, #540]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b93e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b940:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b94c:	4a83      	ldr	r2, [pc, #524]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b94e:	430b      	orrs	r3, r1
 800b950:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b95a:	f002 0310 	and.w	r3, r2, #16
 800b95e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b962:	2300      	movs	r3, #0
 800b964:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b968:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b96c:	460b      	mov	r3, r1
 800b96e:	4313      	orrs	r3, r2
 800b970:	d01e      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b976:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b97a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b97e:	d10c      	bne.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b984:	3328      	adds	r3, #40	; 0x28
 800b986:	2102      	movs	r1, #2
 800b988:	4618      	mov	r0, r3
 800b98a:	f001 fcf7 	bl	800d37c <RCCEx_PLL3_Config>
 800b98e:	4603      	mov	r3, r0
 800b990:	2b00      	cmp	r3, #0
 800b992:	d002      	beq.n	800b99a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b994:	2301      	movs	r3, #1
 800b996:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b99a:	4b70      	ldr	r3, [pc, #448]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b99c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b99e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b9a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b9aa:	4a6c      	ldr	r2, [pc, #432]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9ac:	430b      	orrs	r3, r1
 800b9ae:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b9b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9b8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b9bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b9c6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	d03e      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b9d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b9d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9dc:	d022      	beq.n	800ba24 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b9de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b9e2:	d81b      	bhi.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d003      	beq.n	800b9f0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b9e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9ec:	d00b      	beq.n	800ba06 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b9ee:	e015      	b.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f4:	3308      	adds	r3, #8
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	4618      	mov	r0, r3
 800b9fa:	f001 fc0d 	bl	800d218 <RCCEx_PLL2_Config>
 800b9fe:	4603      	mov	r3, r0
 800ba00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ba04:	e00f      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ba06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba0a:	3328      	adds	r3, #40	; 0x28
 800ba0c:	2102      	movs	r1, #2
 800ba0e:	4618      	mov	r0, r3
 800ba10:	f001 fcb4 	bl	800d37c <RCCEx_PLL3_Config>
 800ba14:	4603      	mov	r3, r0
 800ba16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800ba1a:	e004      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba22:	e000      	b.n	800ba26 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800ba24:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d10b      	bne.n	800ba46 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ba2e:	4b4b      	ldr	r3, [pc, #300]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba32:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800ba36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba3a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800ba3e:	4a47      	ldr	r2, [pc, #284]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba40:	430b      	orrs	r3, r1
 800ba42:	6593      	str	r3, [r2, #88]	; 0x58
 800ba44:	e003      	b.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ba4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800ba5a:	67bb      	str	r3, [r7, #120]	; 0x78
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ba60:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800ba64:	460b      	mov	r3, r1
 800ba66:	4313      	orrs	r3, r2
 800ba68:	d03b      	beq.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800ba6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ba72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba76:	d01f      	beq.n	800bab8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800ba78:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ba7c:	d818      	bhi.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800ba7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ba82:	d003      	beq.n	800ba8c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800ba84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba88:	d007      	beq.n	800ba9a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800ba8a:	e011      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba8c:	4b33      	ldr	r3, [pc, #204]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba90:	4a32      	ldr	r2, [pc, #200]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800ba98:	e00f      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba9e:	3328      	adds	r3, #40	; 0x28
 800baa0:	2101      	movs	r1, #1
 800baa2:	4618      	mov	r0, r3
 800baa4:	f001 fc6a 	bl	800d37c <RCCEx_PLL3_Config>
 800baa8:	4603      	mov	r3, r0
 800baaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800baae:	e004      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bab0:	2301      	movs	r3, #1
 800bab2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bab6:	e000      	b.n	800baba <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bab8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d10b      	bne.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bac2:	4b26      	ldr	r3, [pc, #152]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac6:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800baca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bad2:	4a22      	ldr	r2, [pc, #136]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bad4:	430b      	orrs	r3, r1
 800bad6:	6553      	str	r3, [r2, #84]	; 0x54
 800bad8:	e003      	b.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bade:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800baea:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800baee:	673b      	str	r3, [r7, #112]	; 0x70
 800baf0:	2300      	movs	r3, #0
 800baf2:	677b      	str	r3, [r7, #116]	; 0x74
 800baf4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800baf8:	460b      	mov	r3, r1
 800bafa:	4313      	orrs	r3, r2
 800bafc:	d034      	beq.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bafe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d003      	beq.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bb08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb0c:	d007      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bb0e:	e011      	b.n	800bb34 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb10:	4b12      	ldr	r3, [pc, #72]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb14:	4a11      	ldr	r2, [pc, #68]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb1a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bb1c:	e00e      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb22:	3308      	adds	r3, #8
 800bb24:	2102      	movs	r1, #2
 800bb26:	4618      	mov	r0, r3
 800bb28:	f001 fb76 	bl	800d218 <RCCEx_PLL2_Config>
 800bb2c:	4603      	mov	r3, r0
 800bb2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bb32:	e003      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bb34:	2301      	movs	r3, #1
 800bb36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10d      	bne.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bb44:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bb4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb52:	4a02      	ldr	r2, [pc, #8]	; (800bb5c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb54:	430b      	orrs	r3, r1
 800bb56:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bb58:	e006      	b.n	800bb68 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bb5a:	bf00      	nop
 800bb5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb70:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bb74:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb76:	2300      	movs	r3, #0
 800bb78:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb7a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bb7e:	460b      	mov	r3, r1
 800bb80:	4313      	orrs	r3, r2
 800bb82:	d00c      	beq.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb88:	3328      	adds	r3, #40	; 0x28
 800bb8a:	2102      	movs	r1, #2
 800bb8c:	4618      	mov	r0, r3
 800bb8e:	f001 fbf5 	bl	800d37c <RCCEx_PLL3_Config>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d002      	beq.n	800bb9e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bb9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bba6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bbaa:	663b      	str	r3, [r7, #96]	; 0x60
 800bbac:	2300      	movs	r3, #0
 800bbae:	667b      	str	r3, [r7, #100]	; 0x64
 800bbb0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bbb4:	460b      	mov	r3, r1
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	d038      	beq.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bbba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bbc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbc6:	d018      	beq.n	800bbfa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bbc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbcc:	d811      	bhi.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bbce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbd2:	d014      	beq.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bbd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbd8:	d80b      	bhi.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d011      	beq.n	800bc02 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bbde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbe2:	d106      	bne.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbe4:	4bc3      	ldr	r3, [pc, #780]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe8:	4ac2      	ldr	r2, [pc, #776]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bbf0:	e008      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbf8:	e004      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bbfa:	bf00      	nop
 800bbfc:	e002      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bbfe:	bf00      	nop
 800bc00:	e000      	b.n	800bc04 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bc02:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d10b      	bne.n	800bc24 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc0c:	4bb9      	ldr	r3, [pc, #740]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc10:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bc14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bc1c:	4ab5      	ldr	r2, [pc, #724]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc1e:	430b      	orrs	r3, r1
 800bc20:	6553      	str	r3, [r2, #84]	; 0x54
 800bc22:	e003      	b.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bc2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc34:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bc38:	65bb      	str	r3, [r7, #88]	; 0x58
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bc3e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bc42:	460b      	mov	r3, r1
 800bc44:	4313      	orrs	r3, r2
 800bc46:	d009      	beq.n	800bc5c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bc48:	4baa      	ldr	r3, [pc, #680]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc4c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bc50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bc56:	4aa7      	ldr	r2, [pc, #668]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc58:	430b      	orrs	r3, r1
 800bc5a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bc5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc64:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bc68:	653b      	str	r3, [r7, #80]	; 0x50
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	657b      	str	r3, [r7, #84]	; 0x54
 800bc6e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bc72:	460b      	mov	r3, r1
 800bc74:	4313      	orrs	r3, r2
 800bc76:	d00a      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bc78:	4b9e      	ldr	r3, [pc, #632]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bc80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc84:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bc88:	4a9a      	ldr	r2, [pc, #616]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc8a:	430b      	orrs	r3, r1
 800bc8c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bc9a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bc9c:	2300      	movs	r3, #0
 800bc9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bca0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bca4:	460b      	mov	r3, r1
 800bca6:	4313      	orrs	r3, r2
 800bca8:	d009      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bcaa:	4b92      	ldr	r3, [pc, #584]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcae:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bcb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bcb8:	4a8e      	ldr	r2, [pc, #568]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcba:	430b      	orrs	r3, r1
 800bcbc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bcbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcc6:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bcca:	643b      	str	r3, [r7, #64]	; 0x40
 800bccc:	2300      	movs	r3, #0
 800bcce:	647b      	str	r3, [r7, #68]	; 0x44
 800bcd0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bcd4:	460b      	mov	r3, r1
 800bcd6:	4313      	orrs	r3, r2
 800bcd8:	d00e      	beq.n	800bcf8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bcda:	4b86      	ldr	r3, [pc, #536]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcdc:	691b      	ldr	r3, [r3, #16]
 800bcde:	4a85      	ldr	r2, [pc, #532]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bce0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bce4:	6113      	str	r3, [r2, #16]
 800bce6:	4b83      	ldr	r3, [pc, #524]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bce8:	6919      	ldr	r1, [r3, #16]
 800bcea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcee:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bcf2:	4a80      	ldr	r2, [pc, #512]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bcf4:	430b      	orrs	r3, r1
 800bcf6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bcf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bd04:	63bb      	str	r3, [r7, #56]	; 0x38
 800bd06:	2300      	movs	r3, #0
 800bd08:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bd0a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bd0e:	460b      	mov	r3, r1
 800bd10:	4313      	orrs	r3, r2
 800bd12:	d009      	beq.n	800bd28 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bd14:	4b77      	ldr	r3, [pc, #476]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd18:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bd1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd22:	4a74      	ldr	r2, [pc, #464]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd24:	430b      	orrs	r3, r1
 800bd26:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bd28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd30:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bd34:	633b      	str	r3, [r7, #48]	; 0x30
 800bd36:	2300      	movs	r3, #0
 800bd38:	637b      	str	r3, [r7, #52]	; 0x34
 800bd3a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bd3e:	460b      	mov	r3, r1
 800bd40:	4313      	orrs	r3, r2
 800bd42:	d00a      	beq.n	800bd5a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bd44:	4b6b      	ldr	r3, [pc, #428]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bd48:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bd4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bd54:	4a67      	ldr	r2, [pc, #412]	; (800bef4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bd56:	430b      	orrs	r3, r1
 800bd58:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bd5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd62:	2100      	movs	r1, #0
 800bd64:	62b9      	str	r1, [r7, #40]	; 0x28
 800bd66:	f003 0301 	and.w	r3, r3, #1
 800bd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bd6c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bd70:	460b      	mov	r3, r1
 800bd72:	4313      	orrs	r3, r2
 800bd74:	d011      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd7a:	3308      	adds	r3, #8
 800bd7c:	2100      	movs	r1, #0
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f001 fa4a 	bl	800d218 <RCCEx_PLL2_Config>
 800bd84:	4603      	mov	r3, r0
 800bd86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d003      	beq.n	800bd9a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bd9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda2:	2100      	movs	r1, #0
 800bda4:	6239      	str	r1, [r7, #32]
 800bda6:	f003 0302 	and.w	r3, r3, #2
 800bdaa:	627b      	str	r3, [r7, #36]	; 0x24
 800bdac:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bdb0:	460b      	mov	r3, r1
 800bdb2:	4313      	orrs	r3, r2
 800bdb4:	d011      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bdb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdba:	3308      	adds	r3, #8
 800bdbc:	2101      	movs	r1, #1
 800bdbe:	4618      	mov	r0, r3
 800bdc0:	f001 fa2a 	bl	800d218 <RCCEx_PLL2_Config>
 800bdc4:	4603      	mov	r3, r0
 800bdc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bdca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d003      	beq.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bdda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bde2:	2100      	movs	r1, #0
 800bde4:	61b9      	str	r1, [r7, #24]
 800bde6:	f003 0304 	and.w	r3, r3, #4
 800bdea:	61fb      	str	r3, [r7, #28]
 800bdec:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	d011      	beq.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bdf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdfa:	3308      	adds	r3, #8
 800bdfc:	2102      	movs	r1, #2
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 fa0a 	bl	800d218 <RCCEx_PLL2_Config>
 800be04:	4603      	mov	r3, r0
 800be06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800be0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be0e:	2b00      	cmp	r3, #0
 800be10:	d003      	beq.n	800be1a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800be1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be22:	2100      	movs	r1, #0
 800be24:	6139      	str	r1, [r7, #16]
 800be26:	f003 0308 	and.w	r3, r3, #8
 800be2a:	617b      	str	r3, [r7, #20]
 800be2c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800be30:	460b      	mov	r3, r1
 800be32:	4313      	orrs	r3, r2
 800be34:	d011      	beq.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800be36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3a:	3328      	adds	r3, #40	; 0x28
 800be3c:	2100      	movs	r1, #0
 800be3e:	4618      	mov	r0, r3
 800be40:	f001 fa9c 	bl	800d37c <RCCEx_PLL3_Config>
 800be44:	4603      	mov	r3, r0
 800be46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800be4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d003      	beq.n	800be5a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800be5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be62:	2100      	movs	r1, #0
 800be64:	60b9      	str	r1, [r7, #8]
 800be66:	f003 0310 	and.w	r3, r3, #16
 800be6a:	60fb      	str	r3, [r7, #12]
 800be6c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800be70:	460b      	mov	r3, r1
 800be72:	4313      	orrs	r3, r2
 800be74:	d011      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be7a:	3328      	adds	r3, #40	; 0x28
 800be7c:	2101      	movs	r1, #1
 800be7e:	4618      	mov	r0, r3
 800be80:	f001 fa7c 	bl	800d37c <RCCEx_PLL3_Config>
 800be84:	4603      	mov	r3, r0
 800be86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800be8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800be9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bea2:	2100      	movs	r1, #0
 800bea4:	6039      	str	r1, [r7, #0]
 800bea6:	f003 0320 	and.w	r3, r3, #32
 800beaa:	607b      	str	r3, [r7, #4]
 800beac:	e9d7 1200 	ldrd	r1, r2, [r7]
 800beb0:	460b      	mov	r3, r1
 800beb2:	4313      	orrs	r3, r2
 800beb4:	d011      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800beb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beba:	3328      	adds	r3, #40	; 0x28
 800bebc:	2102      	movs	r1, #2
 800bebe:	4618      	mov	r0, r3
 800bec0:	f001 fa5c 	bl	800d37c <RCCEx_PLL3_Config>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800beca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bece:	2b00      	cmp	r3, #0
 800bed0:	d003      	beq.n	800beda <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bed2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bed6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800beda:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d101      	bne.n	800bee6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bee2:	2300      	movs	r3, #0
 800bee4:	e000      	b.n	800bee8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bee6:	2301      	movs	r3, #1
}
 800bee8:	4618      	mov	r0, r3
 800beea:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800beee:	46bd      	mov	sp, r7
 800bef0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bef4:	58024400 	.word	0x58024400

0800bef8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b090      	sub	sp, #64	; 0x40
 800befc:	af00      	add	r7, sp, #0
 800befe:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bf02:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf06:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bf0a:	430b      	orrs	r3, r1
 800bf0c:	f040 8094 	bne.w	800c038 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bf10:	4b9e      	ldr	r3, [pc, #632]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf14:	f003 0307 	and.w	r3, r3, #7
 800bf18:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	2b04      	cmp	r3, #4
 800bf1e:	f200 8087 	bhi.w	800c030 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bf22:	a201      	add	r2, pc, #4	; (adr r2, 800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bf24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf28:	0800bf3d 	.word	0x0800bf3d
 800bf2c:	0800bf65 	.word	0x0800bf65
 800bf30:	0800bf8d 	.word	0x0800bf8d
 800bf34:	0800c029 	.word	0x0800c029
 800bf38:	0800bfb5 	.word	0x0800bfb5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf3c:	4b93      	ldr	r3, [pc, #588]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf48:	d108      	bne.n	800bf5c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f001 f810 	bl	800cf74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf58:	f000 bd45 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf60:	f000 bd41 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf64:	4b89      	ldr	r3, [pc, #548]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf70:	d108      	bne.n	800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf72:	f107 0318 	add.w	r3, r7, #24
 800bf76:	4618      	mov	r0, r3
 800bf78:	f000 fd54 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf80:	f000 bd31 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf84:	2300      	movs	r3, #0
 800bf86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf88:	f000 bd2d 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf8c:	4b7f      	ldr	r3, [pc, #508]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf98:	d108      	bne.n	800bfac <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf9a:	f107 030c 	add.w	r3, r7, #12
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	f000 fe94 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfa8:	f000 bd1d 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfac:	2300      	movs	r3, #0
 800bfae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfb0:	f000 bd19 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfb4:	4b75      	ldr	r3, [pc, #468]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfbc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfbe:	4b73      	ldr	r3, [pc, #460]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	f003 0304 	and.w	r3, r3, #4
 800bfc6:	2b04      	cmp	r3, #4
 800bfc8:	d10c      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bfca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d109      	bne.n	800bfe4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfd0:	4b6e      	ldr	r3, [pc, #440]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	08db      	lsrs	r3, r3, #3
 800bfd6:	f003 0303 	and.w	r3, r3, #3
 800bfda:	4a6d      	ldr	r2, [pc, #436]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bfdc:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe2:	e01f      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfe4:	4b69      	ldr	r3, [pc, #420]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bff0:	d106      	bne.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bff8:	d102      	bne.n	800c000 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bffa:	4b66      	ldr	r3, [pc, #408]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bffc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bffe:	e011      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c000:	4b62      	ldr	r3, [pc, #392]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c008:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c00c:	d106      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c00e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c010:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c014:	d102      	bne.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c016:	4b60      	ldr	r3, [pc, #384]	; (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c018:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c01a:	e003      	b.n	800c024 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c01c:	2300      	movs	r3, #0
 800c01e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c020:	f000 bce1 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c024:	f000 bcdf 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c028:	4b5c      	ldr	r3, [pc, #368]	; (800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c02a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02c:	f000 bcdb 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c030:	2300      	movs	r3, #0
 800c032:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c034:	f000 bcd7 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c038:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c03c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c040:	430b      	orrs	r3, r1
 800c042:	f040 80ad 	bne.w	800c1a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c046:	4b51      	ldr	r3, [pc, #324]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c04a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c04e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c052:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c056:	d056      	beq.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c05a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c05e:	f200 8090 	bhi.w	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c064:	2bc0      	cmp	r3, #192	; 0xc0
 800c066:	f000 8088 	beq.w	800c17a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c06a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06c:	2bc0      	cmp	r3, #192	; 0xc0
 800c06e:	f200 8088 	bhi.w	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c074:	2b80      	cmp	r3, #128	; 0x80
 800c076:	d032      	beq.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07a:	2b80      	cmp	r3, #128	; 0x80
 800c07c:	f200 8081 	bhi.w	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c082:	2b00      	cmp	r3, #0
 800c084:	d003      	beq.n	800c08e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c088:	2b40      	cmp	r3, #64	; 0x40
 800c08a:	d014      	beq.n	800c0b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c08c:	e079      	b.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c08e:	4b3f      	ldr	r3, [pc, #252]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c096:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c09a:	d108      	bne.n	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c09c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f000 ff67 	bl	800cf74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0aa:	f000 bc9c 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0b2:	f000 bc98 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0b6:	4b35      	ldr	r3, [pc, #212]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0c2:	d108      	bne.n	800c0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0c4:	f107 0318 	add.w	r3, r7, #24
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f000 fcab 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0ce:	69bb      	ldr	r3, [r7, #24]
 800c0d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0d2:	f000 bc88 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0d6:	2300      	movs	r3, #0
 800c0d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0da:	f000 bc84 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0de:	4b2b      	ldr	r3, [pc, #172]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0ea:	d108      	bne.n	800c0fe <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c0ec:	f107 030c 	add.w	r3, r7, #12
 800c0f0:	4618      	mov	r0, r3
 800c0f2:	f000 fdeb 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0fa:	f000 bc74 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0fe:	2300      	movs	r3, #0
 800c100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c102:	f000 bc70 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c106:	4b21      	ldr	r3, [pc, #132]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c10a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c10e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c110:	4b1e      	ldr	r3, [pc, #120]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	f003 0304 	and.w	r3, r3, #4
 800c118:	2b04      	cmp	r3, #4
 800c11a:	d10c      	bne.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d109      	bne.n	800c136 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c122:	4b1a      	ldr	r3, [pc, #104]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	08db      	lsrs	r3, r3, #3
 800c128:	f003 0303 	and.w	r3, r3, #3
 800c12c:	4a18      	ldr	r2, [pc, #96]	; (800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c12e:	fa22 f303 	lsr.w	r3, r2, r3
 800c132:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c134:	e01f      	b.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c136:	4b15      	ldr	r3, [pc, #84]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c13e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c142:	d106      	bne.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c146:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c14a:	d102      	bne.n	800c152 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c14c:	4b11      	ldr	r3, [pc, #68]	; (800c194 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c14e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c150:	e011      	b.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c152:	4b0e      	ldr	r3, [pc, #56]	; (800c18c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c15a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c15e:	d106      	bne.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c162:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c166:	d102      	bne.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c168:	4b0b      	ldr	r3, [pc, #44]	; (800c198 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c16a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c16c:	e003      	b.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c16e:	2300      	movs	r3, #0
 800c170:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c172:	f000 bc38 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c176:	f000 bc36 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c17a:	4b08      	ldr	r3, [pc, #32]	; (800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c17c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c17e:	f000 bc32 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c186:	f000 bc2e 	b.w	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c18a:	bf00      	nop
 800c18c:	58024400 	.word	0x58024400
 800c190:	03d09000 	.word	0x03d09000
 800c194:	003d0900 	.word	0x003d0900
 800c198:	017d7840 	.word	0x017d7840
 800c19c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c1a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1a4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c1a8:	430b      	orrs	r3, r1
 800c1aa:	f040 809c 	bne.w	800c2e6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c1ae:	4b9e      	ldr	r3, [pc, #632]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1b2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c1b6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1be:	d054      	beq.n	800c26a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c1c6:	f200 808b 	bhi.w	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c1d0:	f000 8083 	beq.w	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c1da:	f200 8081 	bhi.w	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1e4:	d02f      	beq.n	800c246 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c1ec:	d878      	bhi.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c1ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d004      	beq.n	800c1fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c1fa:	d012      	beq.n	800c222 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c1fc:	e070      	b.n	800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1fe:	4b8a      	ldr	r3, [pc, #552]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c206:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c20a:	d107      	bne.n	800c21c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c20c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c210:	4618      	mov	r0, r3
 800c212:	f000 feaf 	bl	800cf74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c21a:	e3e4      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c21c:	2300      	movs	r3, #0
 800c21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c220:	e3e1      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c222:	4b81      	ldr	r3, [pc, #516]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c22a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c22e:	d107      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c230:	f107 0318 	add.w	r3, r7, #24
 800c234:	4618      	mov	r0, r3
 800c236:	f000 fbf5 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c23a:	69bb      	ldr	r3, [r7, #24]
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c23e:	e3d2      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c244:	e3cf      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c246:	4b78      	ldr	r3, [pc, #480]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c24e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c252:	d107      	bne.n	800c264 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c254:	f107 030c 	add.w	r3, r7, #12
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 fd37 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c262:	e3c0      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c264:	2300      	movs	r3, #0
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c268:	e3bd      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c26a:	4b6f      	ldr	r3, [pc, #444]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c26c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c26e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c272:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c274:	4b6c      	ldr	r3, [pc, #432]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	f003 0304 	and.w	r3, r3, #4
 800c27c:	2b04      	cmp	r3, #4
 800c27e:	d10c      	bne.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c282:	2b00      	cmp	r3, #0
 800c284:	d109      	bne.n	800c29a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c286:	4b68      	ldr	r3, [pc, #416]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	08db      	lsrs	r3, r3, #3
 800c28c:	f003 0303 	and.w	r3, r3, #3
 800c290:	4a66      	ldr	r2, [pc, #408]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c292:	fa22 f303 	lsr.w	r3, r2, r3
 800c296:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c298:	e01e      	b.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c29a:	4b63      	ldr	r3, [pc, #396]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2a6:	d106      	bne.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c2a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2ae:	d102      	bne.n	800c2b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2b0:	4b5f      	ldr	r3, [pc, #380]	; (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2b4:	e010      	b.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2b6:	4b5c      	ldr	r3, [pc, #368]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2c2:	d106      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c2c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2ca:	d102      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2cc:	4b59      	ldr	r3, [pc, #356]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c2ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d0:	e002      	b.n	800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2d6:	e386      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2d8:	e385      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2da:	4b57      	ldr	r3, [pc, #348]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c2dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2de:	e382      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c2e0:	2300      	movs	r3, #0
 800c2e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2e4:	e37f      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c2e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ea:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c2ee:	430b      	orrs	r3, r1
 800c2f0:	f040 80a7 	bne.w	800c442 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c2f4:	4b4c      	ldr	r3, [pc, #304]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c2f8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c2fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c304:	d055      	beq.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c308:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c30c:	f200 8096 	bhi.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c312:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c316:	f000 8084 	beq.w	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c31c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c320:	f200 808c 	bhi.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c326:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c32a:	d030      	beq.n	800c38e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c32c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c32e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c332:	f200 8083 	bhi.w	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c336:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d004      	beq.n	800c346 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c33c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c33e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c342:	d012      	beq.n	800c36a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c344:	e07a      	b.n	800c43c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c346:	4b38      	ldr	r3, [pc, #224]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c34e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c352:	d107      	bne.n	800c364 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c354:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c358:	4618      	mov	r0, r3
 800c35a:	f000 fe0b 	bl	800cf74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c35e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c360:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c362:	e340      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c364:	2300      	movs	r3, #0
 800c366:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c368:	e33d      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c36a:	4b2f      	ldr	r3, [pc, #188]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c376:	d107      	bne.n	800c388 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c378:	f107 0318 	add.w	r3, r7, #24
 800c37c:	4618      	mov	r0, r3
 800c37e:	f000 fb51 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c382:	69bb      	ldr	r3, [r7, #24]
 800c384:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c386:	e32e      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c388:	2300      	movs	r3, #0
 800c38a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c38c:	e32b      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c38e:	4b26      	ldr	r3, [pc, #152]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c396:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c39a:	d107      	bne.n	800c3ac <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c39c:	f107 030c 	add.w	r3, r7, #12
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	f000 fc93 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3aa:	e31c      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3b0:	e319      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3b2:	4b1d      	ldr	r3, [pc, #116]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3b6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3ba:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3bc:	4b1a      	ldr	r3, [pc, #104]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 0304 	and.w	r3, r3, #4
 800c3c4:	2b04      	cmp	r3, #4
 800c3c6:	d10c      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d109      	bne.n	800c3e2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3ce:	4b16      	ldr	r3, [pc, #88]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	08db      	lsrs	r3, r3, #3
 800c3d4:	f003 0303 	and.w	r3, r3, #3
 800c3d8:	4a14      	ldr	r2, [pc, #80]	; (800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c3da:	fa22 f303 	lsr.w	r3, r2, r3
 800c3de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3e0:	e01e      	b.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3e2:	4b11      	ldr	r3, [pc, #68]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3ee:	d106      	bne.n	800c3fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3f2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c3f6:	d102      	bne.n	800c3fe <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c3f8:	4b0d      	ldr	r3, [pc, #52]	; (800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c3fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3fc:	e010      	b.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c3fe:	4b0a      	ldr	r3, [pc, #40]	; (800c428 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c406:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c40a:	d106      	bne.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c40c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c40e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c412:	d102      	bne.n	800c41a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c414:	4b07      	ldr	r3, [pc, #28]	; (800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c416:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c418:	e002      	b.n	800c420 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c41e:	e2e2      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c420:	e2e1      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c422:	4b05      	ldr	r3, [pc, #20]	; (800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c426:	e2de      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c428:	58024400 	.word	0x58024400
 800c42c:	03d09000 	.word	0x03d09000
 800c430:	003d0900 	.word	0x003d0900
 800c434:	017d7840 	.word	0x017d7840
 800c438:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c43c:	2300      	movs	r3, #0
 800c43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c440:	e2d1      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c442:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c446:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c44a:	430b      	orrs	r3, r1
 800c44c:	f040 809c 	bne.w	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c450:	4b93      	ldr	r3, [pc, #588]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c454:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c458:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c45a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c460:	d054      	beq.n	800c50c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c464:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c468:	f200 808b 	bhi.w	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c46c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c472:	f000 8083 	beq.w	800c57c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c478:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c47c:	f200 8081 	bhi.w	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c486:	d02f      	beq.n	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c48e:	d878      	bhi.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c492:	2b00      	cmp	r3, #0
 800c494:	d004      	beq.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c49c:	d012      	beq.n	800c4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c49e:	e070      	b.n	800c582 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c4a0:	4b7f      	ldr	r3, [pc, #508]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c4a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c4ac:	d107      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c4ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	f000 fd5e 	bl	800cf74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4bc:	e293      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4c2:	e290      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4c4:	4b76      	ldr	r3, [pc, #472]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4d0:	d107      	bne.n	800c4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4d2:	f107 0318 	add.w	r3, r7, #24
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 faa4 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c4dc:	69bb      	ldr	r3, [r7, #24]
 800c4de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e0:	e281      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4e2:	2300      	movs	r3, #0
 800c4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e6:	e27e      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4e8:	4b6d      	ldr	r3, [pc, #436]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4f4:	d107      	bne.n	800c506 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4f6:	f107 030c 	add.w	r3, r7, #12
 800c4fa:	4618      	mov	r0, r3
 800c4fc:	f000 fbe6 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c500:	68fb      	ldr	r3, [r7, #12]
 800c502:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c504:	e26f      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c506:	2300      	movs	r3, #0
 800c508:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c50a:	e26c      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c50c:	4b64      	ldr	r3, [pc, #400]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c50e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c510:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c514:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c516:	4b62      	ldr	r3, [pc, #392]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f003 0304 	and.w	r3, r3, #4
 800c51e:	2b04      	cmp	r3, #4
 800c520:	d10c      	bne.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c522:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c524:	2b00      	cmp	r3, #0
 800c526:	d109      	bne.n	800c53c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c528:	4b5d      	ldr	r3, [pc, #372]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	08db      	lsrs	r3, r3, #3
 800c52e:	f003 0303 	and.w	r3, r3, #3
 800c532:	4a5c      	ldr	r2, [pc, #368]	; (800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c534:	fa22 f303 	lsr.w	r3, r2, r3
 800c538:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c53a:	e01e      	b.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c53c:	4b58      	ldr	r3, [pc, #352]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c548:	d106      	bne.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c54a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c550:	d102      	bne.n	800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c552:	4b55      	ldr	r3, [pc, #340]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c554:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c556:	e010      	b.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c558:	4b51      	ldr	r3, [pc, #324]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c560:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c564:	d106      	bne.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c568:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c56c:	d102      	bne.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c56e:	4b4f      	ldr	r3, [pc, #316]	; (800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c572:	e002      	b.n	800c57a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c574:	2300      	movs	r3, #0
 800c576:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c578:	e235      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c57a:	e234      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c57c:	4b4c      	ldr	r3, [pc, #304]	; (800c6b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c57e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c580:	e231      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c582:	2300      	movs	r3, #0
 800c584:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c586:	e22e      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c58c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c590:	430b      	orrs	r3, r1
 800c592:	f040 808f 	bne.w	800c6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c596:	4b42      	ldr	r3, [pc, #264]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c59a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c59e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5a6:	d06b      	beq.n	800c680 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c5a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c5ae:	d874      	bhi.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5b6:	d056      	beq.n	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c5b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c5be:	d86c      	bhi.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c5c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c5c6:	d03b      	beq.n	800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ca:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c5ce:	d864      	bhi.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5d6:	d021      	beq.n	800c61c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5de:	d85c      	bhi.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c5e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d004      	beq.n	800c5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5ec:	d004      	beq.n	800c5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c5ee:	e054      	b.n	800c69a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c5f0:	f7fe fa0a 	bl	800aa08 <HAL_RCC_GetPCLK1Freq>
 800c5f4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c5f6:	e1f6      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5f8:	4b29      	ldr	r3, [pc, #164]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c604:	d107      	bne.n	800c616 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c606:	f107 0318 	add.w	r3, r7, #24
 800c60a:	4618      	mov	r0, r3
 800c60c:	f000 fa0a 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c610:	69fb      	ldr	r3, [r7, #28]
 800c612:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c614:	e1e7      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c616:	2300      	movs	r3, #0
 800c618:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c61a:	e1e4      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c61c:	4b20      	ldr	r3, [pc, #128]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c624:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c628:	d107      	bne.n	800c63a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c62a:	f107 030c 	add.w	r3, r7, #12
 800c62e:	4618      	mov	r0, r3
 800c630:	f000 fb4c 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c638:	e1d5      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c63a:	2300      	movs	r3, #0
 800c63c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c63e:	e1d2      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c640:	4b17      	ldr	r3, [pc, #92]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f003 0304 	and.w	r3, r3, #4
 800c648:	2b04      	cmp	r3, #4
 800c64a:	d109      	bne.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c64c:	4b14      	ldr	r3, [pc, #80]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	08db      	lsrs	r3, r3, #3
 800c652:	f003 0303 	and.w	r3, r3, #3
 800c656:	4a13      	ldr	r2, [pc, #76]	; (800c6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c658:	fa22 f303 	lsr.w	r3, r2, r3
 800c65c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c65e:	e1c2      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c664:	e1bf      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c666:	4b0e      	ldr	r3, [pc, #56]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c66e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c672:	d102      	bne.n	800c67a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c674:	4b0c      	ldr	r3, [pc, #48]	; (800c6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c676:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c678:	e1b5      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c67a:	2300      	movs	r3, #0
 800c67c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c67e:	e1b2      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c680:	4b07      	ldr	r3, [pc, #28]	; (800c6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c682:	681b      	ldr	r3, [r3, #0]
 800c684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c688:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c68c:	d102      	bne.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c68e:	4b07      	ldr	r3, [pc, #28]	; (800c6ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c692:	e1a8      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c694:	2300      	movs	r3, #0
 800c696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c698:	e1a5      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c69a:	2300      	movs	r3, #0
 800c69c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69e:	e1a2      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c6a0:	58024400 	.word	0x58024400
 800c6a4:	03d09000 	.word	0x03d09000
 800c6a8:	003d0900 	.word	0x003d0900
 800c6ac:	017d7840 	.word	0x017d7840
 800c6b0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c6b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6b8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c6bc:	430b      	orrs	r3, r1
 800c6be:	d173      	bne.n	800c7a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c6c0:	4b9c      	ldr	r3, [pc, #624]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c6c8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6d0:	d02f      	beq.n	800c732 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c6d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c6d8:	d863      	bhi.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d004      	beq.n	800c6ea <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c6e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6e6:	d012      	beq.n	800c70e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c6e8:	e05b      	b.n	800c7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6ea:	4b92      	ldr	r3, [pc, #584]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6f6:	d107      	bne.n	800c708 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f8:	f107 0318 	add.w	r3, r7, #24
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	f000 f991 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c702:	69bb      	ldr	r3, [r7, #24]
 800c704:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c706:	e16e      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c708:	2300      	movs	r3, #0
 800c70a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70c:	e16b      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c70e:	4b89      	ldr	r3, [pc, #548]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c71a:	d107      	bne.n	800c72c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c71c:	f107 030c 	add.w	r3, r7, #12
 800c720:	4618      	mov	r0, r3
 800c722:	f000 fad3 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c726:	697b      	ldr	r3, [r7, #20]
 800c728:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c72a:	e15c      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c72c:	2300      	movs	r3, #0
 800c72e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c730:	e159      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c732:	4b80      	ldr	r3, [pc, #512]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c736:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c73a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c73c:	4b7d      	ldr	r3, [pc, #500]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 0304 	and.w	r3, r3, #4
 800c744:	2b04      	cmp	r3, #4
 800c746:	d10c      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d109      	bne.n	800c762 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c74e:	4b79      	ldr	r3, [pc, #484]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	08db      	lsrs	r3, r3, #3
 800c754:	f003 0303 	and.w	r3, r3, #3
 800c758:	4a77      	ldr	r2, [pc, #476]	; (800c938 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c75a:	fa22 f303 	lsr.w	r3, r2, r3
 800c75e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c760:	e01e      	b.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c762:	4b74      	ldr	r3, [pc, #464]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c76a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c76e:	d106      	bne.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c772:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c776:	d102      	bne.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c778:	4b70      	ldr	r3, [pc, #448]	; (800c93c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c77c:	e010      	b.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c77e:	4b6d      	ldr	r3, [pc, #436]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c786:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c78a:	d106      	bne.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c78e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c792:	d102      	bne.n	800c79a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c794:	4b6a      	ldr	r3, [pc, #424]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c796:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c798:	e002      	b.n	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c79a:	2300      	movs	r3, #0
 800c79c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c79e:	e122      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7a0:	e121      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c7a2:	2300      	movs	r3, #0
 800c7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a6:	e11e      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c7a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7ac:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c7b0:	430b      	orrs	r3, r1
 800c7b2:	d133      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c7b4:	4b5f      	ldr	r3, [pc, #380]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c7b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c7bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c7be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d004      	beq.n	800c7ce <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c7ca:	d012      	beq.n	800c7f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c7cc:	e023      	b.n	800c816 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7ce:	4b59      	ldr	r3, [pc, #356]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7da:	d107      	bne.n	800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c7dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f000 fbc7 	bl	800cf74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7ea:	e0fc      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7ec:	2300      	movs	r3, #0
 800c7ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7f0:	e0f9      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c7f2:	4b50      	ldr	r3, [pc, #320]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c7fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c7fe:	d107      	bne.n	800c810 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c800:	f107 0318 	add.w	r3, r7, #24
 800c804:	4618      	mov	r0, r3
 800c806:	f000 f90d 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c80a:	6a3b      	ldr	r3, [r7, #32]
 800c80c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c80e:	e0ea      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c810:	2300      	movs	r3, #0
 800c812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c814:	e0e7      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c816:	2300      	movs	r3, #0
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c81a:	e0e4      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c81c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c820:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c824:	430b      	orrs	r3, r1
 800c826:	f040 808d 	bne.w	800c944 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c82a:	4b42      	ldr	r3, [pc, #264]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c82e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c832:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c836:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c83a:	d06b      	beq.n	800c914 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c83c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c83e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c842:	d874      	bhi.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c84a:	d056      	beq.n	800c8fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c84c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c84e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c852:	d86c      	bhi.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c856:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c85a:	d03b      	beq.n	800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c85c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c85e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c862:	d864      	bhi.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c866:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c86a:	d021      	beq.n	800c8b0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c86c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c86e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c872:	d85c      	bhi.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c876:	2b00      	cmp	r3, #0
 800c878:	d004      	beq.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c880:	d004      	beq.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c882:	e054      	b.n	800c92e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c884:	f000 f8b8 	bl	800c9f8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c888:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c88a:	e0ac      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c88c:	4b29      	ldr	r3, [pc, #164]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c894:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c898:	d107      	bne.n	800c8aa <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c89a:	f107 0318 	add.w	r3, r7, #24
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f000 f8c0 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c8a4:	69fb      	ldr	r3, [r7, #28]
 800c8a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a8:	e09d      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8aa:	2300      	movs	r3, #0
 800c8ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ae:	e09a      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c8b0:	4b20      	ldr	r3, [pc, #128]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c8b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8bc:	d107      	bne.n	800c8ce <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c8be:	f107 030c 	add.w	r3, r7, #12
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f000 fa02 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8cc:	e08b      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d2:	e088      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c8d4:	4b17      	ldr	r3, [pc, #92]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	f003 0304 	and.w	r3, r3, #4
 800c8dc:	2b04      	cmp	r3, #4
 800c8de:	d109      	bne.n	800c8f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c8e0:	4b14      	ldr	r3, [pc, #80]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	08db      	lsrs	r3, r3, #3
 800c8e6:	f003 0303 	and.w	r3, r3, #3
 800c8ea:	4a13      	ldr	r2, [pc, #76]	; (800c938 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c8ec:	fa22 f303 	lsr.w	r3, r2, r3
 800c8f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8f2:	e078      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f8:	e075      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c8fa:	4b0e      	ldr	r3, [pc, #56]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c902:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c906:	d102      	bne.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c908:	4b0c      	ldr	r3, [pc, #48]	; (800c93c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c90a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c90c:	e06b      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c90e:	2300      	movs	r3, #0
 800c910:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c912:	e068      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c914:	4b07      	ldr	r3, [pc, #28]	; (800c934 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c916:	681b      	ldr	r3, [r3, #0]
 800c918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c91c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c920:	d102      	bne.n	800c928 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c922:	4b07      	ldr	r3, [pc, #28]	; (800c940 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c924:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c926:	e05e      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c928:	2300      	movs	r3, #0
 800c92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c92c:	e05b      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c92e:	2300      	movs	r3, #0
 800c930:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c932:	e058      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c934:	58024400 	.word	0x58024400
 800c938:	03d09000 	.word	0x03d09000
 800c93c:	003d0900 	.word	0x003d0900
 800c940:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c944:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c948:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c94c:	430b      	orrs	r3, r1
 800c94e:	d148      	bne.n	800c9e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c950:	4b27      	ldr	r3, [pc, #156]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c954:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c958:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c95a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c95c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c960:	d02a      	beq.n	800c9b8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c964:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c968:	d838      	bhi.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d004      	beq.n	800c97a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c970:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c972:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c976:	d00d      	beq.n	800c994 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c978:	e030      	b.n	800c9dc <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c97a:	4b1d      	ldr	r3, [pc, #116]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c982:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c986:	d102      	bne.n	800c98e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c988:	4b1a      	ldr	r3, [pc, #104]	; (800c9f4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c98a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c98c:	e02b      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c98e:	2300      	movs	r3, #0
 800c990:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c992:	e028      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c994:	4b16      	ldr	r3, [pc, #88]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c99c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9a0:	d107      	bne.n	800c9b2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c9a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	f000 fae4 	bl	800cf74 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c9ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b0:	e019      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9b6:	e016      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c9b8:	4b0d      	ldr	r3, [pc, #52]	; (800c9f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c9c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c9c4:	d107      	bne.n	800c9d6 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c9c6:	f107 0318 	add.w	r3, r7, #24
 800c9ca:	4618      	mov	r0, r3
 800c9cc:	f000 f82a 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9d4:	e007      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9da:	e004      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c9dc:	2300      	movs	r3, #0
 800c9de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9e0:	e001      	b.n	800c9e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c9e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3740      	adds	r7, #64	; 0x40
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	58024400 	.word	0x58024400
 800c9f4:	017d7840 	.word	0x017d7840

0800c9f8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c9f8:	b580      	push	{r7, lr}
 800c9fa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c9fc:	f7fd ffd4 	bl	800a9a8 <HAL_RCC_GetHCLKFreq>
 800ca00:	4602      	mov	r2, r0
 800ca02:	4b06      	ldr	r3, [pc, #24]	; (800ca1c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ca04:	6a1b      	ldr	r3, [r3, #32]
 800ca06:	091b      	lsrs	r3, r3, #4
 800ca08:	f003 0307 	and.w	r3, r3, #7
 800ca0c:	4904      	ldr	r1, [pc, #16]	; (800ca20 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ca0e:	5ccb      	ldrb	r3, [r1, r3]
 800ca10:	f003 031f 	and.w	r3, r3, #31
 800ca14:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	58024400 	.word	0x58024400
 800ca20:	080170a0 	.word	0x080170a0

0800ca24 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b089      	sub	sp, #36	; 0x24
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ca2c:	4ba1      	ldr	r3, [pc, #644]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca30:	f003 0303 	and.w	r3, r3, #3
 800ca34:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ca36:	4b9f      	ldr	r3, [pc, #636]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca3a:	0b1b      	lsrs	r3, r3, #12
 800ca3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ca40:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ca42:	4b9c      	ldr	r3, [pc, #624]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca46:	091b      	lsrs	r3, r3, #4
 800ca48:	f003 0301 	and.w	r3, r3, #1
 800ca4c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ca4e:	4b99      	ldr	r3, [pc, #612]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca52:	08db      	lsrs	r3, r3, #3
 800ca54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ca58:	693a      	ldr	r2, [r7, #16]
 800ca5a:	fb02 f303 	mul.w	r3, r2, r3
 800ca5e:	ee07 3a90 	vmov	s15, r3
 800ca62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca66:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	f000 8111 	beq.w	800cc94 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ca72:	69bb      	ldr	r3, [r7, #24]
 800ca74:	2b02      	cmp	r3, #2
 800ca76:	f000 8083 	beq.w	800cb80 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ca7a:	69bb      	ldr	r3, [r7, #24]
 800ca7c:	2b02      	cmp	r3, #2
 800ca7e:	f200 80a1 	bhi.w	800cbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d003      	beq.n	800ca90 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ca88:	69bb      	ldr	r3, [r7, #24]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d056      	beq.n	800cb3c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ca8e:	e099      	b.n	800cbc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ca90:	4b88      	ldr	r3, [pc, #544]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f003 0320 	and.w	r3, r3, #32
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d02d      	beq.n	800caf8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ca9c:	4b85      	ldr	r3, [pc, #532]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca9e:	681b      	ldr	r3, [r3, #0]
 800caa0:	08db      	lsrs	r3, r3, #3
 800caa2:	f003 0303 	and.w	r3, r3, #3
 800caa6:	4a84      	ldr	r2, [pc, #528]	; (800ccb8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800caa8:	fa22 f303 	lsr.w	r3, r2, r3
 800caac:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	ee07 3a90 	vmov	s15, r3
 800cab4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cac6:	4b7b      	ldr	r3, [pc, #492]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cace:	ee07 3a90 	vmov	s15, r3
 800cad2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cad6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cada:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ccbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cade:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cae2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cae6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800caf6:	e087      	b.n	800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	ee07 3a90 	vmov	s15, r3
 800cafe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb02:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ccc0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cb06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb0a:	4b6a      	ldr	r3, [pc, #424]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb12:	ee07 3a90 	vmov	s15, r3
 800cb16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb1a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb1e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ccbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb3a:	e065      	b.n	800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb3c:	697b      	ldr	r3, [r7, #20]
 800cb3e:	ee07 3a90 	vmov	s15, r3
 800cb42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb46:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ccc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cb4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb4e:	4b59      	ldr	r3, [pc, #356]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb56:	ee07 3a90 	vmov	s15, r3
 800cb5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cb5e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cb62:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ccbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cb66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cb6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cb6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cb72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cb76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cb7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cb7e:	e043      	b.n	800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cb80:	697b      	ldr	r3, [r7, #20]
 800cb82:	ee07 3a90 	vmov	s15, r3
 800cb86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb8a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ccc8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cb8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cb92:	4b48      	ldr	r3, [pc, #288]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb9a:	ee07 3a90 	vmov	s15, r3
 800cb9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cba2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cba6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ccbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cbbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cbc2:	e021      	b.n	800cc08 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cbc4:	697b      	ldr	r3, [r7, #20]
 800cbc6:	ee07 3a90 	vmov	s15, r3
 800cbca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbce:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ccc4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cbd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cbd6:	4b37      	ldr	r3, [pc, #220]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cbd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cbda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbde:	ee07 3a90 	vmov	s15, r3
 800cbe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cbe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cbea:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ccbc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cbee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cbf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cbf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cbfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cbfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc06:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cc08:	4b2a      	ldr	r3, [pc, #168]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc0c:	0a5b      	lsrs	r3, r3, #9
 800cc0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc12:	ee07 3a90 	vmov	s15, r3
 800cc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc22:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc2e:	ee17 2a90 	vmov	r2, s15
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cc36:	4b1f      	ldr	r3, [pc, #124]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc3a:	0c1b      	lsrs	r3, r3, #16
 800cc3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc40:	ee07 3a90 	vmov	s15, r3
 800cc44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc50:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc5c:	ee17 2a90 	vmov	r2, s15
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cc64:	4b13      	ldr	r3, [pc, #76]	; (800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc68:	0e1b      	lsrs	r3, r3, #24
 800cc6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc6e:	ee07 3a90 	vmov	s15, r3
 800cc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc76:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cc7a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cc7e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cc82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cc86:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cc8a:	ee17 2a90 	vmov	r2, s15
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cc92:	e008      	b.n	800cca6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2200      	movs	r2, #0
 800cc98:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	2200      	movs	r2, #0
 800cc9e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2200      	movs	r2, #0
 800cca4:	609a      	str	r2, [r3, #8]
}
 800cca6:	bf00      	nop
 800cca8:	3724      	adds	r7, #36	; 0x24
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr
 800ccb2:	bf00      	nop
 800ccb4:	58024400 	.word	0x58024400
 800ccb8:	03d09000 	.word	0x03d09000
 800ccbc:	46000000 	.word	0x46000000
 800ccc0:	4c742400 	.word	0x4c742400
 800ccc4:	4a742400 	.word	0x4a742400
 800ccc8:	4bbebc20 	.word	0x4bbebc20

0800cccc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cccc:	b480      	push	{r7}
 800ccce:	b089      	sub	sp, #36	; 0x24
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccd4:	4ba1      	ldr	r3, [pc, #644]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccd8:	f003 0303 	and.w	r3, r3, #3
 800ccdc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ccde:	4b9f      	ldr	r3, [pc, #636]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cce2:	0d1b      	lsrs	r3, r3, #20
 800cce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cce8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ccea:	4b9c      	ldr	r3, [pc, #624]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccee:	0a1b      	lsrs	r3, r3, #8
 800ccf0:	f003 0301 	and.w	r3, r3, #1
 800ccf4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ccf6:	4b99      	ldr	r3, [pc, #612]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ccfa:	08db      	lsrs	r3, r3, #3
 800ccfc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cd00:	693a      	ldr	r2, [r7, #16]
 800cd02:	fb02 f303 	mul.w	r3, r2, r3
 800cd06:	ee07 3a90 	vmov	s15, r3
 800cd0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd0e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	f000 8111 	beq.w	800cf3c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cd1a:	69bb      	ldr	r3, [r7, #24]
 800cd1c:	2b02      	cmp	r3, #2
 800cd1e:	f000 8083 	beq.w	800ce28 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cd22:	69bb      	ldr	r3, [r7, #24]
 800cd24:	2b02      	cmp	r3, #2
 800cd26:	f200 80a1 	bhi.w	800ce6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cd2a:	69bb      	ldr	r3, [r7, #24]
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d003      	beq.n	800cd38 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cd30:	69bb      	ldr	r3, [r7, #24]
 800cd32:	2b01      	cmp	r3, #1
 800cd34:	d056      	beq.n	800cde4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cd36:	e099      	b.n	800ce6c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd38:	4b88      	ldr	r3, [pc, #544]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f003 0320 	and.w	r3, r3, #32
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d02d      	beq.n	800cda0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd44:	4b85      	ldr	r3, [pc, #532]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	08db      	lsrs	r3, r3, #3
 800cd4a:	f003 0303 	and.w	r3, r3, #3
 800cd4e:	4a84      	ldr	r2, [pc, #528]	; (800cf60 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cd50:	fa22 f303 	lsr.w	r3, r2, r3
 800cd54:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd56:	68bb      	ldr	r3, [r7, #8]
 800cd58:	ee07 3a90 	vmov	s15, r3
 800cd5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd6e:	4b7b      	ldr	r3, [pc, #492]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd76:	ee07 3a90 	vmov	s15, r3
 800cd7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd7e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd82:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cf64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd9a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd9e:	e087      	b.n	800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	ee07 3a90 	vmov	s15, r3
 800cda6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdaa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cf68 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cdae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdb2:	4b6a      	ldr	r3, [pc, #424]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdba:	ee07 3a90 	vmov	s15, r3
 800cdbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdc2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdc6:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cf64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cdca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdda:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cde2:	e065      	b.n	800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cde4:	697b      	ldr	r3, [r7, #20]
 800cde6:	ee07 3a90 	vmov	s15, r3
 800cdea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdee:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cf6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cdf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdf6:	4b59      	ldr	r3, [pc, #356]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdfe:	ee07 3a90 	vmov	s15, r3
 800ce02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce0a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cf64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce26:	e043      	b.n	800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce28:	697b      	ldr	r3, [r7, #20]
 800ce2a:	ee07 3a90 	vmov	s15, r3
 800ce2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce32:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cf70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ce36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce3a:	4b48      	ldr	r3, [pc, #288]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce42:	ee07 3a90 	vmov	s15, r3
 800ce46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce4e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce6a:	e021      	b.n	800ceb0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ce6c:	697b      	ldr	r3, [r7, #20]
 800ce6e:	ee07 3a90 	vmov	s15, r3
 800ce72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce76:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cf6c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ce7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce7e:	4b37      	ldr	r3, [pc, #220]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce86:	ee07 3a90 	vmov	s15, r3
 800ce8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce92:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cf64 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ce96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ceae:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800ceb0:	4b2a      	ldr	r3, [pc, #168]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ceb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ceb4:	0a5b      	lsrs	r3, r3, #9
 800ceb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceba:	ee07 3a90 	vmov	s15, r3
 800cebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceca:	edd7 6a07 	vldr	s13, [r7, #28]
 800cece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ced2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ced6:	ee17 2a90 	vmov	r2, s15
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cede:	4b1f      	ldr	r3, [pc, #124]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cee2:	0c1b      	lsrs	r3, r3, #16
 800cee4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cee8:	ee07 3a90 	vmov	s15, r3
 800ceec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cef0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cef4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cef8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cefc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf04:	ee17 2a90 	vmov	r2, s15
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cf0c:	4b13      	ldr	r3, [pc, #76]	; (800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf10:	0e1b      	lsrs	r3, r3, #24
 800cf12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf16:	ee07 3a90 	vmov	s15, r3
 800cf1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf22:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf26:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf32:	ee17 2a90 	vmov	r2, s15
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cf3a:	e008      	b.n	800cf4e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	609a      	str	r2, [r3, #8]
}
 800cf4e:	bf00      	nop
 800cf50:	3724      	adds	r7, #36	; 0x24
 800cf52:	46bd      	mov	sp, r7
 800cf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf58:	4770      	bx	lr
 800cf5a:	bf00      	nop
 800cf5c:	58024400 	.word	0x58024400
 800cf60:	03d09000 	.word	0x03d09000
 800cf64:	46000000 	.word	0x46000000
 800cf68:	4c742400 	.word	0x4c742400
 800cf6c:	4a742400 	.word	0x4a742400
 800cf70:	4bbebc20 	.word	0x4bbebc20

0800cf74 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800cf74:	b480      	push	{r7}
 800cf76:	b089      	sub	sp, #36	; 0x24
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf7c:	4ba0      	ldr	r3, [pc, #640]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf80:	f003 0303 	and.w	r3, r3, #3
 800cf84:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800cf86:	4b9e      	ldr	r3, [pc, #632]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf8a:	091b      	lsrs	r3, r3, #4
 800cf8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf90:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800cf92:	4b9b      	ldr	r3, [pc, #620]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800cf9c:	4b98      	ldr	r3, [pc, #608]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfa0:	08db      	lsrs	r3, r3, #3
 800cfa2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cfa6:	693a      	ldr	r2, [r7, #16]
 800cfa8:	fb02 f303 	mul.w	r3, r2, r3
 800cfac:	ee07 3a90 	vmov	s15, r3
 800cfb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	f000 8111 	beq.w	800d1e2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800cfc0:	69bb      	ldr	r3, [r7, #24]
 800cfc2:	2b02      	cmp	r3, #2
 800cfc4:	f000 8083 	beq.w	800d0ce <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cfc8:	69bb      	ldr	r3, [r7, #24]
 800cfca:	2b02      	cmp	r3, #2
 800cfcc:	f200 80a1 	bhi.w	800d112 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cfd0:	69bb      	ldr	r3, [r7, #24]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d003      	beq.n	800cfde <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800cfd6:	69bb      	ldr	r3, [r7, #24]
 800cfd8:	2b01      	cmp	r3, #1
 800cfda:	d056      	beq.n	800d08a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800cfdc:	e099      	b.n	800d112 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfde:	4b88      	ldr	r3, [pc, #544]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	f003 0320 	and.w	r3, r3, #32
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d02d      	beq.n	800d046 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cfea:	4b85      	ldr	r3, [pc, #532]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	08db      	lsrs	r3, r3, #3
 800cff0:	f003 0303 	and.w	r3, r3, #3
 800cff4:	4a83      	ldr	r2, [pc, #524]	; (800d204 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cff6:	fa22 f303 	lsr.w	r3, r2, r3
 800cffa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cffc:	68bb      	ldr	r3, [r7, #8]
 800cffe:	ee07 3a90 	vmov	s15, r3
 800d002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	ee07 3a90 	vmov	s15, r3
 800d00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d010:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d014:	4b7a      	ldr	r3, [pc, #488]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d01c:	ee07 3a90 	vmov	s15, r3
 800d020:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d024:	ed97 6a03 	vldr	s12, [r7, #12]
 800d028:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d02c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d030:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d034:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d038:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d03c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d040:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d044:	e087      	b.n	800d156 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	ee07 3a90 	vmov	s15, r3
 800d04c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d050:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d20c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d054:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d058:	4b69      	ldr	r3, [pc, #420]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d05a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d060:	ee07 3a90 	vmov	s15, r3
 800d064:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d068:	ed97 6a03 	vldr	s12, [r7, #12]
 800d06c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d070:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d074:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d07c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d080:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d084:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d088:	e065      	b.n	800d156 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d08a:	697b      	ldr	r3, [r7, #20]
 800d08c:	ee07 3a90 	vmov	s15, r3
 800d090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d094:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d210 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d098:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d09c:	4b58      	ldr	r3, [pc, #352]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0a4:	ee07 3a90 	vmov	s15, r3
 800d0a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0ac:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0b0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0b4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0c8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0cc:	e043      	b.n	800d156 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	ee07 3a90 	vmov	s15, r3
 800d0d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0d8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d214 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d0dc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0e0:	4b47      	ldr	r3, [pc, #284]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0e8:	ee07 3a90 	vmov	s15, r3
 800d0ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0f0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0f4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d0f8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0fc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d100:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d104:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d108:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d10c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d110:	e021      	b.n	800d156 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d112:	697b      	ldr	r3, [r7, #20]
 800d114:	ee07 3a90 	vmov	s15, r3
 800d118:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d11c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d20c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d120:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d124:	4b36      	ldr	r3, [pc, #216]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d128:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d12c:	ee07 3a90 	vmov	s15, r3
 800d130:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d134:	ed97 6a03 	vldr	s12, [r7, #12]
 800d138:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d208 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d13c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d140:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d144:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d148:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d14c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d150:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d154:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d156:	4b2a      	ldr	r3, [pc, #168]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d15a:	0a5b      	lsrs	r3, r3, #9
 800d15c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d160:	ee07 3a90 	vmov	s15, r3
 800d164:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d168:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d16c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d170:	edd7 6a07 	vldr	s13, [r7, #28]
 800d174:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d17c:	ee17 2a90 	vmov	r2, s15
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d184:	4b1e      	ldr	r3, [pc, #120]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d188:	0c1b      	lsrs	r3, r3, #16
 800d18a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d18e:	ee07 3a90 	vmov	s15, r3
 800d192:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d196:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d19a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d19e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1aa:	ee17 2a90 	vmov	r2, s15
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d1b2:	4b13      	ldr	r3, [pc, #76]	; (800d200 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1b6:	0e1b      	lsrs	r3, r3, #24
 800d1b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1bc:	ee07 3a90 	vmov	s15, r3
 800d1c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1cc:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1d8:	ee17 2a90 	vmov	r2, s15
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d1e0:	e008      	b.n	800d1f4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2200      	movs	r2, #0
 800d1e6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	2200      	movs	r2, #0
 800d1f2:	609a      	str	r2, [r3, #8]
}
 800d1f4:	bf00      	nop
 800d1f6:	3724      	adds	r7, #36	; 0x24
 800d1f8:	46bd      	mov	sp, r7
 800d1fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1fe:	4770      	bx	lr
 800d200:	58024400 	.word	0x58024400
 800d204:	03d09000 	.word	0x03d09000
 800d208:	46000000 	.word	0x46000000
 800d20c:	4c742400 	.word	0x4c742400
 800d210:	4a742400 	.word	0x4a742400
 800d214:	4bbebc20 	.word	0x4bbebc20

0800d218 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d218:	b580      	push	{r7, lr}
 800d21a:	b084      	sub	sp, #16
 800d21c:	af00      	add	r7, sp, #0
 800d21e:	6078      	str	r0, [r7, #4]
 800d220:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d222:	2300      	movs	r3, #0
 800d224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d226:	4b53      	ldr	r3, [pc, #332]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d22a:	f003 0303 	and.w	r3, r3, #3
 800d22e:	2b03      	cmp	r3, #3
 800d230:	d101      	bne.n	800d236 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d232:	2301      	movs	r3, #1
 800d234:	e099      	b.n	800d36a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d236:	4b4f      	ldr	r3, [pc, #316]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	4a4e      	ldr	r2, [pc, #312]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d23c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d242:	f7f6 fc8b 	bl	8003b5c <HAL_GetTick>
 800d246:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d248:	e008      	b.n	800d25c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d24a:	f7f6 fc87 	bl	8003b5c <HAL_GetTick>
 800d24e:	4602      	mov	r2, r0
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	1ad3      	subs	r3, r2, r3
 800d254:	2b02      	cmp	r3, #2
 800d256:	d901      	bls.n	800d25c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d258:	2303      	movs	r3, #3
 800d25a:	e086      	b.n	800d36a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d25c:	4b45      	ldr	r3, [pc, #276]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d264:	2b00      	cmp	r3, #0
 800d266:	d1f0      	bne.n	800d24a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d268:	4b42      	ldr	r3, [pc, #264]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d26a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	031b      	lsls	r3, r3, #12
 800d276:	493f      	ldr	r1, [pc, #252]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d278:	4313      	orrs	r3, r2
 800d27a:	628b      	str	r3, [r1, #40]	; 0x28
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	685b      	ldr	r3, [r3, #4]
 800d280:	3b01      	subs	r3, #1
 800d282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	3b01      	subs	r3, #1
 800d28c:	025b      	lsls	r3, r3, #9
 800d28e:	b29b      	uxth	r3, r3
 800d290:	431a      	orrs	r2, r3
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	68db      	ldr	r3, [r3, #12]
 800d296:	3b01      	subs	r3, #1
 800d298:	041b      	lsls	r3, r3, #16
 800d29a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d29e:	431a      	orrs	r2, r3
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	691b      	ldr	r3, [r3, #16]
 800d2a4:	3b01      	subs	r3, #1
 800d2a6:	061b      	lsls	r3, r3, #24
 800d2a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d2ac:	4931      	ldr	r1, [pc, #196]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2ae:	4313      	orrs	r3, r2
 800d2b0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d2b2:	4b30      	ldr	r3, [pc, #192]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	695b      	ldr	r3, [r3, #20]
 800d2be:	492d      	ldr	r1, [pc, #180]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2c0:	4313      	orrs	r3, r2
 800d2c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d2c4:	4b2b      	ldr	r3, [pc, #172]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2c8:	f023 0220 	bic.w	r2, r3, #32
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	4928      	ldr	r1, [pc, #160]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d2d6:	4b27      	ldr	r3, [pc, #156]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2da:	4a26      	ldr	r2, [pc, #152]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2dc:	f023 0310 	bic.w	r3, r3, #16
 800d2e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d2e2:	4b24      	ldr	r3, [pc, #144]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2e6:	4b24      	ldr	r3, [pc, #144]	; (800d378 <RCCEx_PLL2_Config+0x160>)
 800d2e8:	4013      	ands	r3, r2
 800d2ea:	687a      	ldr	r2, [r7, #4]
 800d2ec:	69d2      	ldr	r2, [r2, #28]
 800d2ee:	00d2      	lsls	r2, r2, #3
 800d2f0:	4920      	ldr	r1, [pc, #128]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2f2:	4313      	orrs	r3, r2
 800d2f4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d2f6:	4b1f      	ldr	r3, [pc, #124]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fa:	4a1e      	ldr	r2, [pc, #120]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d2fc:	f043 0310 	orr.w	r3, r3, #16
 800d300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d106      	bne.n	800d316 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d308:	4b1a      	ldr	r3, [pc, #104]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d30a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30c:	4a19      	ldr	r2, [pc, #100]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d30e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d312:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d314:	e00f      	b.n	800d336 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2b01      	cmp	r3, #1
 800d31a:	d106      	bne.n	800d32a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d31c:	4b15      	ldr	r3, [pc, #84]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d320:	4a14      	ldr	r2, [pc, #80]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d322:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d326:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d328:	e005      	b.n	800d336 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d32a:	4b12      	ldr	r3, [pc, #72]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d32c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d32e:	4a11      	ldr	r2, [pc, #68]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d334:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d336:	4b0f      	ldr	r3, [pc, #60]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	4a0e      	ldr	r2, [pc, #56]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d33c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d342:	f7f6 fc0b 	bl	8003b5c <HAL_GetTick>
 800d346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d348:	e008      	b.n	800d35c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d34a:	f7f6 fc07 	bl	8003b5c <HAL_GetTick>
 800d34e:	4602      	mov	r2, r0
 800d350:	68bb      	ldr	r3, [r7, #8]
 800d352:	1ad3      	subs	r3, r2, r3
 800d354:	2b02      	cmp	r3, #2
 800d356:	d901      	bls.n	800d35c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d358:	2303      	movs	r3, #3
 800d35a:	e006      	b.n	800d36a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d35c:	4b05      	ldr	r3, [pc, #20]	; (800d374 <RCCEx_PLL2_Config+0x15c>)
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d364:	2b00      	cmp	r3, #0
 800d366:	d0f0      	beq.n	800d34a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d368:	7bfb      	ldrb	r3, [r7, #15]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3710      	adds	r7, #16
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	58024400 	.word	0x58024400
 800d378:	ffff0007 	.word	0xffff0007

0800d37c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b084      	sub	sp, #16
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d38a:	4b53      	ldr	r3, [pc, #332]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d38c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d38e:	f003 0303 	and.w	r3, r3, #3
 800d392:	2b03      	cmp	r3, #3
 800d394:	d101      	bne.n	800d39a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	e099      	b.n	800d4ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d39a:	4b4f      	ldr	r3, [pc, #316]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	4a4e      	ldr	r2, [pc, #312]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d3a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d3a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d3a6:	f7f6 fbd9 	bl	8003b5c <HAL_GetTick>
 800d3aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d3ac:	e008      	b.n	800d3c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d3ae:	f7f6 fbd5 	bl	8003b5c <HAL_GetTick>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	68bb      	ldr	r3, [r7, #8]
 800d3b6:	1ad3      	subs	r3, r2, r3
 800d3b8:	2b02      	cmp	r3, #2
 800d3ba:	d901      	bls.n	800d3c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d3bc:	2303      	movs	r3, #3
 800d3be:	e086      	b.n	800d4ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d3c0:	4b45      	ldr	r3, [pc, #276]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	d1f0      	bne.n	800d3ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d3cc:	4b42      	ldr	r3, [pc, #264]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d3ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	051b      	lsls	r3, r3, #20
 800d3da:	493f      	ldr	r1, [pc, #252]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d3dc:	4313      	orrs	r3, r2
 800d3de:	628b      	str	r3, [r1, #40]	; 0x28
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	685b      	ldr	r3, [r3, #4]
 800d3e4:	3b01      	subs	r3, #1
 800d3e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	689b      	ldr	r3, [r3, #8]
 800d3ee:	3b01      	subs	r3, #1
 800d3f0:	025b      	lsls	r3, r3, #9
 800d3f2:	b29b      	uxth	r3, r3
 800d3f4:	431a      	orrs	r2, r3
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	68db      	ldr	r3, [r3, #12]
 800d3fa:	3b01      	subs	r3, #1
 800d3fc:	041b      	lsls	r3, r3, #16
 800d3fe:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d402:	431a      	orrs	r2, r3
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	691b      	ldr	r3, [r3, #16]
 800d408:	3b01      	subs	r3, #1
 800d40a:	061b      	lsls	r3, r3, #24
 800d40c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d410:	4931      	ldr	r1, [pc, #196]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d412:	4313      	orrs	r3, r2
 800d414:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d416:	4b30      	ldr	r3, [pc, #192]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	695b      	ldr	r3, [r3, #20]
 800d422:	492d      	ldr	r1, [pc, #180]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d424:	4313      	orrs	r3, r2
 800d426:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d428:	4b2b      	ldr	r3, [pc, #172]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	699b      	ldr	r3, [r3, #24]
 800d434:	4928      	ldr	r1, [pc, #160]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d436:	4313      	orrs	r3, r2
 800d438:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d43a:	4b27      	ldr	r3, [pc, #156]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d43c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d43e:	4a26      	ldr	r2, [pc, #152]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d444:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d446:	4b24      	ldr	r3, [pc, #144]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d448:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d44a:	4b24      	ldr	r3, [pc, #144]	; (800d4dc <RCCEx_PLL3_Config+0x160>)
 800d44c:	4013      	ands	r3, r2
 800d44e:	687a      	ldr	r2, [r7, #4]
 800d450:	69d2      	ldr	r2, [r2, #28]
 800d452:	00d2      	lsls	r2, r2, #3
 800d454:	4920      	ldr	r1, [pc, #128]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d456:	4313      	orrs	r3, r2
 800d458:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d45a:	4b1f      	ldr	r3, [pc, #124]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d45c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d45e:	4a1e      	ldr	r2, [pc, #120]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d464:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d106      	bne.n	800d47a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d46c:	4b1a      	ldr	r3, [pc, #104]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d46e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d470:	4a19      	ldr	r2, [pc, #100]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d472:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d476:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d478:	e00f      	b.n	800d49a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d106      	bne.n	800d48e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d480:	4b15      	ldr	r3, [pc, #84]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d484:	4a14      	ldr	r2, [pc, #80]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d486:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d48a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d48c:	e005      	b.n	800d49a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d48e:	4b12      	ldr	r3, [pc, #72]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d492:	4a11      	ldr	r2, [pc, #68]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d494:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d498:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d49a:	4b0f      	ldr	r3, [pc, #60]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	4a0e      	ldr	r2, [pc, #56]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d4a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d4a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d4a6:	f7f6 fb59 	bl	8003b5c <HAL_GetTick>
 800d4aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4ac:	e008      	b.n	800d4c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d4ae:	f7f6 fb55 	bl	8003b5c <HAL_GetTick>
 800d4b2:	4602      	mov	r2, r0
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	1ad3      	subs	r3, r2, r3
 800d4b8:	2b02      	cmp	r3, #2
 800d4ba:	d901      	bls.n	800d4c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d4bc:	2303      	movs	r3, #3
 800d4be:	e006      	b.n	800d4ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4c0:	4b05      	ldr	r3, [pc, #20]	; (800d4d8 <RCCEx_PLL3_Config+0x15c>)
 800d4c2:	681b      	ldr	r3, [r3, #0]
 800d4c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d0f0      	beq.n	800d4ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	3710      	adds	r7, #16
 800d4d2:	46bd      	mov	sp, r7
 800d4d4:	bd80      	pop	{r7, pc}
 800d4d6:	bf00      	nop
 800d4d8:	58024400 	.word	0x58024400
 800d4dc:	ffff0007 	.word	0xffff0007

0800d4e0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b084      	sub	sp, #16
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d071      	beq.n	800d5d6 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d4f8:	b2db      	uxtb	r3, r3
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d106      	bne.n	800d50c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2200      	movs	r2, #0
 800d502:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f7f5 fdd4 	bl	80030b4 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	2202      	movs	r2, #2
 800d510:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	f003 0310 	and.w	r3, r3, #16
 800d51e:	2b10      	cmp	r3, #16
 800d520:	d050      	beq.n	800d5c4 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	22ca      	movs	r2, #202	; 0xca
 800d528:	625a      	str	r2, [r3, #36]	; 0x24
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	2253      	movs	r2, #83	; 0x53
 800d530:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f000 fa4a 	bl	800d9cc <RTC_EnterInitMode>
 800d538:	4603      	mov	r3, r0
 800d53a:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d124      	bne.n	800d58c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	681b      	ldr	r3, [r3, #0]
 800d546:	6899      	ldr	r1, [r3, #8]
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681a      	ldr	r2, [r3, #0]
 800d54c:	4b24      	ldr	r3, [pc, #144]	; (800d5e0 <HAL_RTC_Init+0x100>)
 800d54e:	400b      	ands	r3, r1
 800d550:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	6899      	ldr	r1, [r3, #8]
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	685a      	ldr	r2, [r3, #4]
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	431a      	orrs	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	699b      	ldr	r3, [r3, #24]
 800d566:	431a      	orrs	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	430a      	orrs	r2, r1
 800d56e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	689b      	ldr	r3, [r3, #8]
 800d574:	0419      	lsls	r1, r3, #16
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	68da      	ldr	r2, [r3, #12]
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	430a      	orrs	r2, r1
 800d580:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 fa56 	bl	800da34 <RTC_ExitInitMode>
 800d588:	4603      	mov	r3, r0
 800d58a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d58c:	7bfb      	ldrb	r3, [r7, #15]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d113      	bne.n	800d5ba <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	f022 0203 	bic.w	r2, r2, #3
 800d5a0:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	69da      	ldr	r2, [r3, #28]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	695b      	ldr	r3, [r3, #20]
 800d5b0:	431a      	orrs	r2, r3
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	430a      	orrs	r2, r1
 800d5b8:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	22ff      	movs	r2, #255	; 0xff
 800d5c0:	625a      	str	r2, [r3, #36]	; 0x24
 800d5c2:	e001      	b.n	800d5c8 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d5c8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d103      	bne.n	800d5d6 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d5d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3710      	adds	r7, #16
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}
 800d5e0:	ff8fffbf 	.word	0xff8fffbf

0800d5e4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d5e4:	b590      	push	{r4, r7, lr}
 800d5e6:	b087      	sub	sp, #28
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	60f8      	str	r0, [r7, #12]
 800d5ec:	60b9      	str	r1, [r7, #8]
 800d5ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d5f6:	2b01      	cmp	r3, #1
 800d5f8:	d101      	bne.n	800d5fe <HAL_RTC_SetTime+0x1a>
 800d5fa:	2302      	movs	r3, #2
 800d5fc:	e089      	b.n	800d712 <HAL_RTC_SetTime+0x12e>
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	2201      	movs	r2, #1
 800d602:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d606:	68fb      	ldr	r3, [r7, #12]
 800d608:	2202      	movs	r2, #2
 800d60a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	22ca      	movs	r2, #202	; 0xca
 800d614:	625a      	str	r2, [r3, #36]	; 0x24
 800d616:	68fb      	ldr	r3, [r7, #12]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	2253      	movs	r2, #83	; 0x53
 800d61c:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f000 f9d4 	bl	800d9cc <RTC_EnterInitMode>
 800d624:	4603      	mov	r3, r0
 800d626:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d628:	7cfb      	ldrb	r3, [r7, #19]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d161      	bne.n	800d6f2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d126      	bne.n	800d682 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	689b      	ldr	r3, [r3, #8]
 800d63a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d102      	bne.n	800d648 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d642:	68bb      	ldr	r3, [r7, #8]
 800d644:	2200      	movs	r2, #0
 800d646:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	4618      	mov	r0, r3
 800d64e:	f000 fa2f 	bl	800dab0 <RTC_ByteToBcd2>
 800d652:	4603      	mov	r3, r0
 800d654:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	785b      	ldrb	r3, [r3, #1]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f000 fa28 	bl	800dab0 <RTC_ByteToBcd2>
 800d660:	4603      	mov	r3, r0
 800d662:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d664:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	789b      	ldrb	r3, [r3, #2]
 800d66a:	4618      	mov	r0, r3
 800d66c:	f000 fa20 	bl	800dab0 <RTC_ByteToBcd2>
 800d670:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d672:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	78db      	ldrb	r3, [r3, #3]
 800d67a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d67c:	4313      	orrs	r3, r2
 800d67e:	617b      	str	r3, [r7, #20]
 800d680:	e018      	b.n	800d6b4 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d102      	bne.n	800d696 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	2200      	movs	r2, #0
 800d694:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	781b      	ldrb	r3, [r3, #0]
 800d69a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d69c:	68bb      	ldr	r3, [r7, #8]
 800d69e:	785b      	ldrb	r3, [r3, #1]
 800d6a0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d6a2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d6a8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	78db      	ldrb	r3, [r3, #3]
 800d6ae:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	681a      	ldr	r2, [r3, #0]
 800d6b8:	6979      	ldr	r1, [r7, #20]
 800d6ba:	4b18      	ldr	r3, [pc, #96]	; (800d71c <HAL_RTC_SetTime+0x138>)
 800d6bc:	400b      	ands	r3, r1
 800d6be:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	689a      	ldr	r2, [r3, #8]
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d6ce:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d6d0:	68fb      	ldr	r3, [r7, #12]
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	6899      	ldr	r1, [r3, #8]
 800d6d6:	68bb      	ldr	r3, [r7, #8]
 800d6d8:	68da      	ldr	r2, [r3, #12]
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	691b      	ldr	r3, [r3, #16]
 800d6de:	431a      	orrs	r2, r3
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	430a      	orrs	r2, r1
 800d6e6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d6e8:	68f8      	ldr	r0, [r7, #12]
 800d6ea:	f000 f9a3 	bl	800da34 <RTC_ExitInitMode>
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	681b      	ldr	r3, [r3, #0]
 800d6f6:	22ff      	movs	r2, #255	; 0xff
 800d6f8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d6fa:	7cfb      	ldrb	r3, [r7, #19]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d103      	bne.n	800d708 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	2201      	movs	r2, #1
 800d704:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	2200      	movs	r2, #0
 800d70c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d710:	7cfb      	ldrb	r3, [r7, #19]
}
 800d712:	4618      	mov	r0, r3
 800d714:	371c      	adds	r7, #28
 800d716:	46bd      	mov	sp, r7
 800d718:	bd90      	pop	{r4, r7, pc}
 800d71a:	bf00      	nop
 800d71c:	007f7f7f 	.word	0x007f7f7f

0800d720 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b086      	sub	sp, #24
 800d724:	af00      	add	r7, sp, #0
 800d726:	60f8      	str	r0, [r7, #12]
 800d728:	60b9      	str	r1, [r7, #8]
 800d72a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	691b      	ldr	r3, [r3, #16]
 800d73c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d740:	68bb      	ldr	r3, [r7, #8]
 800d742:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	681a      	ldr	r2, [r3, #0]
 800d74a:	4b22      	ldr	r3, [pc, #136]	; (800d7d4 <HAL_RTC_GetTime+0xb4>)
 800d74c:	4013      	ands	r3, r2
 800d74e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d750:	697b      	ldr	r3, [r7, #20]
 800d752:	0c1b      	lsrs	r3, r3, #16
 800d754:	b2db      	uxtb	r3, r3
 800d756:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d75a:	b2da      	uxtb	r2, r3
 800d75c:	68bb      	ldr	r3, [r7, #8]
 800d75e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d760:	697b      	ldr	r3, [r7, #20]
 800d762:	0a1b      	lsrs	r3, r3, #8
 800d764:	b2db      	uxtb	r3, r3
 800d766:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d76a:	b2da      	uxtb	r2, r3
 800d76c:	68bb      	ldr	r3, [r7, #8]
 800d76e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d770:	697b      	ldr	r3, [r7, #20]
 800d772:	b2db      	uxtb	r3, r3
 800d774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d778:	b2da      	uxtb	r2, r3
 800d77a:	68bb      	ldr	r3, [r7, #8]
 800d77c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d77e:	697b      	ldr	r3, [r7, #20]
 800d780:	0d9b      	lsrs	r3, r3, #22
 800d782:	b2db      	uxtb	r3, r3
 800d784:	f003 0301 	and.w	r3, r3, #1
 800d788:	b2da      	uxtb	r2, r3
 800d78a:	68bb      	ldr	r3, [r7, #8]
 800d78c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d11a      	bne.n	800d7ca <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d794:	68bb      	ldr	r3, [r7, #8]
 800d796:	781b      	ldrb	r3, [r3, #0]
 800d798:	4618      	mov	r0, r3
 800d79a:	f000 f9a9 	bl	800daf0 <RTC_Bcd2ToByte>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	68bb      	ldr	r3, [r7, #8]
 800d7a4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	785b      	ldrb	r3, [r3, #1]
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	f000 f9a0 	bl	800daf0 <RTC_Bcd2ToByte>
 800d7b0:	4603      	mov	r3, r0
 800d7b2:	461a      	mov	r2, r3
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d7b8:	68bb      	ldr	r3, [r7, #8]
 800d7ba:	789b      	ldrb	r3, [r3, #2]
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f000 f997 	bl	800daf0 <RTC_Bcd2ToByte>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	461a      	mov	r2, r3
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d7ca:	2300      	movs	r3, #0
}
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	3718      	adds	r7, #24
 800d7d0:	46bd      	mov	sp, r7
 800d7d2:	bd80      	pop	{r7, pc}
 800d7d4:	007f7f7f 	.word	0x007f7f7f

0800d7d8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d7d8:	b590      	push	{r4, r7, lr}
 800d7da:	b087      	sub	sp, #28
 800d7dc:	af00      	add	r7, sp, #0
 800d7de:	60f8      	str	r0, [r7, #12]
 800d7e0:	60b9      	str	r1, [r7, #8]
 800d7e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d7ea:	2b01      	cmp	r3, #1
 800d7ec:	d101      	bne.n	800d7f2 <HAL_RTC_SetDate+0x1a>
 800d7ee:	2302      	movs	r3, #2
 800d7f0:	e073      	b.n	800d8da <HAL_RTC_SetDate+0x102>
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	2201      	movs	r2, #1
 800d7f6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	2202      	movs	r2, #2
 800d7fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	d10e      	bne.n	800d826 <HAL_RTC_SetDate+0x4e>
 800d808:	68bb      	ldr	r3, [r7, #8]
 800d80a:	785b      	ldrb	r3, [r3, #1]
 800d80c:	f003 0310 	and.w	r3, r3, #16
 800d810:	2b00      	cmp	r3, #0
 800d812:	d008      	beq.n	800d826 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d814:	68bb      	ldr	r3, [r7, #8]
 800d816:	785b      	ldrb	r3, [r3, #1]
 800d818:	f023 0310 	bic.w	r3, r3, #16
 800d81c:	b2db      	uxtb	r3, r3
 800d81e:	330a      	adds	r3, #10
 800d820:	b2da      	uxtb	r2, r3
 800d822:	68bb      	ldr	r3, [r7, #8]
 800d824:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d11c      	bne.n	800d866 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d82c:	68bb      	ldr	r3, [r7, #8]
 800d82e:	78db      	ldrb	r3, [r3, #3]
 800d830:	4618      	mov	r0, r3
 800d832:	f000 f93d 	bl	800dab0 <RTC_ByteToBcd2>
 800d836:	4603      	mov	r3, r0
 800d838:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	785b      	ldrb	r3, [r3, #1]
 800d83e:	4618      	mov	r0, r3
 800d840:	f000 f936 	bl	800dab0 <RTC_ByteToBcd2>
 800d844:	4603      	mov	r3, r0
 800d846:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d848:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d84a:	68bb      	ldr	r3, [r7, #8]
 800d84c:	789b      	ldrb	r3, [r3, #2]
 800d84e:	4618      	mov	r0, r3
 800d850:	f000 f92e 	bl	800dab0 <RTC_ByteToBcd2>
 800d854:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d856:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d860:	4313      	orrs	r3, r2
 800d862:	617b      	str	r3, [r7, #20]
 800d864:	e00e      	b.n	800d884 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	78db      	ldrb	r3, [r3, #3]
 800d86a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d86c:	68bb      	ldr	r3, [r7, #8]
 800d86e:	785b      	ldrb	r3, [r3, #1]
 800d870:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d872:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d874:	68ba      	ldr	r2, [r7, #8]
 800d876:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d878:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	781b      	ldrb	r3, [r3, #0]
 800d87e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d880:	4313      	orrs	r3, r2
 800d882:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	22ca      	movs	r2, #202	; 0xca
 800d88a:	625a      	str	r2, [r3, #36]	; 0x24
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2253      	movs	r2, #83	; 0x53
 800d892:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d894:	68f8      	ldr	r0, [r7, #12]
 800d896:	f000 f899 	bl	800d9cc <RTC_EnterInitMode>
 800d89a:	4603      	mov	r3, r0
 800d89c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d89e:	7cfb      	ldrb	r3, [r7, #19]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d10a      	bne.n	800d8ba <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	681a      	ldr	r2, [r3, #0]
 800d8a8:	6979      	ldr	r1, [r7, #20]
 800d8aa:	4b0e      	ldr	r3, [pc, #56]	; (800d8e4 <HAL_RTC_SetDate+0x10c>)
 800d8ac:	400b      	ands	r3, r1
 800d8ae:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d8b0:	68f8      	ldr	r0, [r7, #12]
 800d8b2:	f000 f8bf 	bl	800da34 <RTC_ExitInitMode>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	22ff      	movs	r2, #255	; 0xff
 800d8c0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d8c2:	7cfb      	ldrb	r3, [r7, #19]
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d103      	bne.n	800d8d0 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	2201      	movs	r2, #1
 800d8cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	2200      	movs	r2, #0
 800d8d4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d8d8:	7cfb      	ldrb	r3, [r7, #19]


}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	371c      	adds	r7, #28
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd90      	pop	{r4, r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	00ffff3f 	.word	0x00ffff3f

0800d8e8 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b086      	sub	sp, #24
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60f8      	str	r0, [r7, #12]
 800d8f0:	60b9      	str	r1, [r7, #8]
 800d8f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	685a      	ldr	r2, [r3, #4]
 800d8fa:	4b21      	ldr	r3, [pc, #132]	; (800d980 <HAL_RTC_GetDate+0x98>)
 800d8fc:	4013      	ands	r3, r2
 800d8fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d900:	697b      	ldr	r3, [r7, #20]
 800d902:	0c1b      	lsrs	r3, r3, #16
 800d904:	b2da      	uxtb	r2, r3
 800d906:	68bb      	ldr	r3, [r7, #8]
 800d908:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	0a1b      	lsrs	r3, r3, #8
 800d90e:	b2db      	uxtb	r3, r3
 800d910:	f003 031f 	and.w	r3, r3, #31
 800d914:	b2da      	uxtb	r2, r3
 800d916:	68bb      	ldr	r3, [r7, #8]
 800d918:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	b2db      	uxtb	r3, r3
 800d91e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d922:	b2da      	uxtb	r2, r3
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d928:	697b      	ldr	r3, [r7, #20]
 800d92a:	0b5b      	lsrs	r3, r3, #13
 800d92c:	b2db      	uxtb	r3, r3
 800d92e:	f003 0307 	and.w	r3, r3, #7
 800d932:	b2da      	uxtb	r2, r3
 800d934:	68bb      	ldr	r3, [r7, #8]
 800d936:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d11a      	bne.n	800d974 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d93e:	68bb      	ldr	r3, [r7, #8]
 800d940:	78db      	ldrb	r3, [r3, #3]
 800d942:	4618      	mov	r0, r3
 800d944:	f000 f8d4 	bl	800daf0 <RTC_Bcd2ToByte>
 800d948:	4603      	mov	r3, r0
 800d94a:	461a      	mov	r2, r3
 800d94c:	68bb      	ldr	r3, [r7, #8]
 800d94e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	785b      	ldrb	r3, [r3, #1]
 800d954:	4618      	mov	r0, r3
 800d956:	f000 f8cb 	bl	800daf0 <RTC_Bcd2ToByte>
 800d95a:	4603      	mov	r3, r0
 800d95c:	461a      	mov	r2, r3
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d962:	68bb      	ldr	r3, [r7, #8]
 800d964:	789b      	ldrb	r3, [r3, #2]
 800d966:	4618      	mov	r0, r3
 800d968:	f000 f8c2 	bl	800daf0 <RTC_Bcd2ToByte>
 800d96c:	4603      	mov	r3, r0
 800d96e:	461a      	mov	r2, r3
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d974:	2300      	movs	r3, #0
}
 800d976:	4618      	mov	r0, r3
 800d978:	3718      	adds	r7, #24
 800d97a:	46bd      	mov	sp, r7
 800d97c:	bd80      	pop	{r7, pc}
 800d97e:	bf00      	nop
 800d980:	00ffff3f 	.word	0x00ffff3f

0800d984 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d984:	b580      	push	{r7, lr}
 800d986:	b084      	sub	sp, #16
 800d988:	af00      	add	r7, sp, #0
 800d98a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	4a0d      	ldr	r2, [pc, #52]	; (800d9c8 <HAL_RTC_WaitForSynchro+0x44>)
 800d992:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d994:	f7f6 f8e2 	bl	8003b5c <HAL_GetTick>
 800d998:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d99a:	e009      	b.n	800d9b0 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d99c:	f7f6 f8de 	bl	8003b5c <HAL_GetTick>
 800d9a0:	4602      	mov	r2, r0
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	1ad3      	subs	r3, r2, r3
 800d9a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9aa:	d901      	bls.n	800d9b0 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d9ac:	2303      	movs	r3, #3
 800d9ae:	e007      	b.n	800d9c0 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	f003 0320 	and.w	r3, r3, #32
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d0ee      	beq.n	800d99c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d9be:	2300      	movs	r3, #0
}
 800d9c0:	4618      	mov	r0, r3
 800d9c2:	3710      	adds	r7, #16
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	bd80      	pop	{r7, pc}
 800d9c8:	0003ff5f 	.word	0x0003ff5f

0800d9cc <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d120      	bne.n	800da28 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d9ee:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d9f0:	f7f6 f8b4 	bl	8003b5c <HAL_GetTick>
 800d9f4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d9f6:	e00d      	b.n	800da14 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d9f8:	f7f6 f8b0 	bl	8003b5c <HAL_GetTick>
 800d9fc:	4602      	mov	r2, r0
 800d9fe:	68bb      	ldr	r3, [r7, #8]
 800da00:	1ad3      	subs	r3, r2, r3
 800da02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800da06:	d905      	bls.n	800da14 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800da08:	2303      	movs	r3, #3
 800da0a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2203      	movs	r2, #3
 800da10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d102      	bne.n	800da28 <RTC_EnterInitMode+0x5c>
 800da22:	7bfb      	ldrb	r3, [r7, #15]
 800da24:	2b03      	cmp	r3, #3
 800da26:	d1e7      	bne.n	800d9f8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800da28:	7bfb      	ldrb	r3, [r7, #15]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
	...

0800da34 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800da34:	b580      	push	{r7, lr}
 800da36:	b084      	sub	sp, #16
 800da38:	af00      	add	r7, sp, #0
 800da3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800da3c:	2300      	movs	r3, #0
 800da3e:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800da40:	4b1a      	ldr	r3, [pc, #104]	; (800daac <RTC_ExitInitMode+0x78>)
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	4a19      	ldr	r2, [pc, #100]	; (800daac <RTC_ExitInitMode+0x78>)
 800da46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800da4a:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800da4c:	4b17      	ldr	r3, [pc, #92]	; (800daac <RTC_ExitInitMode+0x78>)
 800da4e:	689b      	ldr	r3, [r3, #8]
 800da50:	f003 0320 	and.w	r3, r3, #32
 800da54:	2b00      	cmp	r3, #0
 800da56:	d10c      	bne.n	800da72 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7ff ff93 	bl	800d984 <HAL_RTC_WaitForSynchro>
 800da5e:	4603      	mov	r3, r0
 800da60:	2b00      	cmp	r3, #0
 800da62:	d01e      	beq.n	800daa2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2203      	movs	r2, #3
 800da68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800da6c:	2303      	movs	r3, #3
 800da6e:	73fb      	strb	r3, [r7, #15]
 800da70:	e017      	b.n	800daa2 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800da72:	4b0e      	ldr	r3, [pc, #56]	; (800daac <RTC_ExitInitMode+0x78>)
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	4a0d      	ldr	r2, [pc, #52]	; (800daac <RTC_ExitInitMode+0x78>)
 800da78:	f023 0320 	bic.w	r3, r3, #32
 800da7c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7ff ff80 	bl	800d984 <HAL_RTC_WaitForSynchro>
 800da84:	4603      	mov	r3, r0
 800da86:	2b00      	cmp	r3, #0
 800da88:	d005      	beq.n	800da96 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2203      	movs	r2, #3
 800da8e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800da92:	2303      	movs	r3, #3
 800da94:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800da96:	4b05      	ldr	r3, [pc, #20]	; (800daac <RTC_ExitInitMode+0x78>)
 800da98:	689b      	ldr	r3, [r3, #8]
 800da9a:	4a04      	ldr	r2, [pc, #16]	; (800daac <RTC_ExitInitMode+0x78>)
 800da9c:	f043 0320 	orr.w	r3, r3, #32
 800daa0:	6093      	str	r3, [r2, #8]
  }

  return status;
 800daa2:	7bfb      	ldrb	r3, [r7, #15]
}
 800daa4:	4618      	mov	r0, r3
 800daa6:	3710      	adds	r7, #16
 800daa8:	46bd      	mov	sp, r7
 800daaa:	bd80      	pop	{r7, pc}
 800daac:	58004000 	.word	0x58004000

0800dab0 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b085      	sub	sp, #20
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	4603      	mov	r3, r0
 800dab8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800daba:	2300      	movs	r3, #0
 800dabc:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800dabe:	79fb      	ldrb	r3, [r7, #7]
 800dac0:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800dac2:	e005      	b.n	800dad0 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	3301      	adds	r3, #1
 800dac8:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800daca:	7afb      	ldrb	r3, [r7, #11]
 800dacc:	3b0a      	subs	r3, #10
 800dace:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800dad0:	7afb      	ldrb	r3, [r7, #11]
 800dad2:	2b09      	cmp	r3, #9
 800dad4:	d8f6      	bhi.n	800dac4 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	011b      	lsls	r3, r3, #4
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	7afb      	ldrb	r3, [r7, #11]
 800dae0:	4313      	orrs	r3, r2
 800dae2:	b2db      	uxtb	r3, r3
}
 800dae4:	4618      	mov	r0, r3
 800dae6:	3714      	adds	r7, #20
 800dae8:	46bd      	mov	sp, r7
 800daea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daee:	4770      	bx	lr

0800daf0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800daf0:	b480      	push	{r7}
 800daf2:	b085      	sub	sp, #20
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	4603      	mov	r3, r0
 800daf8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800dafa:	79fb      	ldrb	r3, [r7, #7]
 800dafc:	091b      	lsrs	r3, r3, #4
 800dafe:	b2db      	uxtb	r3, r3
 800db00:	461a      	mov	r2, r3
 800db02:	0092      	lsls	r2, r2, #2
 800db04:	4413      	add	r3, r2
 800db06:	005b      	lsls	r3, r3, #1
 800db08:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800db0a:	79fb      	ldrb	r3, [r7, #7]
 800db0c:	f003 030f 	and.w	r3, r3, #15
 800db10:	b2da      	uxtb	r2, r3
 800db12:	7bfb      	ldrb	r3, [r7, #15]
 800db14:	4413      	add	r3, r2
 800db16:	b2db      	uxtb	r3, r3
}
 800db18:	4618      	mov	r0, r3
 800db1a:	3714      	adds	r7, #20
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800db24:	b580      	push	{r7, lr}
 800db26:	b084      	sub	sp, #16
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d101      	bne.n	800db36 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800db32:	2301      	movs	r3, #1
 800db34:	e10f      	b.n	800dd56 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2200      	movs	r2, #0
 800db3a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	4a87      	ldr	r2, [pc, #540]	; (800dd60 <HAL_SPI_Init+0x23c>)
 800db42:	4293      	cmp	r3, r2
 800db44:	d00f      	beq.n	800db66 <HAL_SPI_Init+0x42>
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	4a86      	ldr	r2, [pc, #536]	; (800dd64 <HAL_SPI_Init+0x240>)
 800db4c:	4293      	cmp	r3, r2
 800db4e:	d00a      	beq.n	800db66 <HAL_SPI_Init+0x42>
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	681b      	ldr	r3, [r3, #0]
 800db54:	4a84      	ldr	r2, [pc, #528]	; (800dd68 <HAL_SPI_Init+0x244>)
 800db56:	4293      	cmp	r3, r2
 800db58:	d005      	beq.n	800db66 <HAL_SPI_Init+0x42>
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	68db      	ldr	r3, [r3, #12]
 800db5e:	2b0f      	cmp	r3, #15
 800db60:	d901      	bls.n	800db66 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800db62:	2301      	movs	r3, #1
 800db64:	e0f7      	b.n	800dd56 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800db66:	6878      	ldr	r0, [r7, #4]
 800db68:	f000 fc12 	bl	800e390 <SPI_GetPacketSize>
 800db6c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	4a7b      	ldr	r2, [pc, #492]	; (800dd60 <HAL_SPI_Init+0x23c>)
 800db74:	4293      	cmp	r3, r2
 800db76:	d00c      	beq.n	800db92 <HAL_SPI_Init+0x6e>
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	681b      	ldr	r3, [r3, #0]
 800db7c:	4a79      	ldr	r2, [pc, #484]	; (800dd64 <HAL_SPI_Init+0x240>)
 800db7e:	4293      	cmp	r3, r2
 800db80:	d007      	beq.n	800db92 <HAL_SPI_Init+0x6e>
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	4a78      	ldr	r2, [pc, #480]	; (800dd68 <HAL_SPI_Init+0x244>)
 800db88:	4293      	cmp	r3, r2
 800db8a:	d002      	beq.n	800db92 <HAL_SPI_Init+0x6e>
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	2b08      	cmp	r3, #8
 800db90:	d811      	bhi.n	800dbb6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800db96:	4a72      	ldr	r2, [pc, #456]	; (800dd60 <HAL_SPI_Init+0x23c>)
 800db98:	4293      	cmp	r3, r2
 800db9a:	d009      	beq.n	800dbb0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	681b      	ldr	r3, [r3, #0]
 800dba0:	4a70      	ldr	r2, [pc, #448]	; (800dd64 <HAL_SPI_Init+0x240>)
 800dba2:	4293      	cmp	r3, r2
 800dba4:	d004      	beq.n	800dbb0 <HAL_SPI_Init+0x8c>
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a6f      	ldr	r2, [pc, #444]	; (800dd68 <HAL_SPI_Init+0x244>)
 800dbac:	4293      	cmp	r3, r2
 800dbae:	d104      	bne.n	800dbba <HAL_SPI_Init+0x96>
 800dbb0:	68fb      	ldr	r3, [r7, #12]
 800dbb2:	2b10      	cmp	r3, #16
 800dbb4:	d901      	bls.n	800dbba <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800dbb6:	2301      	movs	r3, #1
 800dbb8:	e0cd      	b.n	800dd56 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dbc0:	b2db      	uxtb	r3, r3
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d106      	bne.n	800dbd4 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	2200      	movs	r2, #0
 800dbca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dbce:	6878      	ldr	r0, [r7, #4]
 800dbd0:	f7f5 faa2 	bl	8003118 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2202      	movs	r2, #2
 800dbd8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f022 0201 	bic.w	r2, r2, #1
 800dbea:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800dbf6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	699b      	ldr	r3, [r3, #24]
 800dbfc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dc00:	d119      	bne.n	800dc36 <HAL_SPI_Init+0x112>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	685b      	ldr	r3, [r3, #4]
 800dc06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc0a:	d103      	bne.n	800dc14 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	d008      	beq.n	800dc26 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d10c      	bne.n	800dc36 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dc20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dc24:	d107      	bne.n	800dc36 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	681a      	ldr	r2, [r3, #0]
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dc34:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	685b      	ldr	r3, [r3, #4]
 800dc3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d00f      	beq.n	800dc62 <HAL_SPI_Init+0x13e>
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	68db      	ldr	r3, [r3, #12]
 800dc46:	2b06      	cmp	r3, #6
 800dc48:	d90b      	bls.n	800dc62 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	681b      	ldr	r3, [r3, #0]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	430a      	orrs	r2, r1
 800dc5e:	601a      	str	r2, [r3, #0]
 800dc60:	e007      	b.n	800dc72 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dc70:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	69da      	ldr	r2, [r3, #28]
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc7a:	431a      	orrs	r2, r3
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	431a      	orrs	r2, r3
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc84:	ea42 0103 	orr.w	r1, r2, r3
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	68da      	ldr	r2, [r3, #12]
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	430a      	orrs	r2, r1
 800dc92:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9c:	431a      	orrs	r2, r3
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca2:	431a      	orrs	r2, r3
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	431a      	orrs	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	691b      	ldr	r3, [r3, #16]
 800dcae:	431a      	orrs	r2, r3
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	695b      	ldr	r3, [r3, #20]
 800dcb4:	431a      	orrs	r2, r3
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	6a1b      	ldr	r3, [r3, #32]
 800dcba:	431a      	orrs	r2, r3
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	431a      	orrs	r2, r3
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dcc6:	431a      	orrs	r2, r3
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	689b      	ldr	r3, [r3, #8]
 800dccc:	431a      	orrs	r2, r3
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dcd2:	ea42 0103 	orr.w	r1, r2, r3
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	681b      	ldr	r3, [r3, #0]
 800dcde:	430a      	orrs	r2, r1
 800dce0:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	685b      	ldr	r3, [r3, #4]
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d113      	bne.n	800dd12 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	689b      	ldr	r3, [r3, #8]
 800dcf0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dcfc:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	681b      	ldr	r3, [r3, #0]
 800dd02:	689b      	ldr	r3, [r3, #8]
 800dd04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dd10:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f022 0201 	bic.w	r2, r2, #1
 800dd20:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d00a      	beq.n	800dd44 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	68db      	ldr	r3, [r3, #12]
 800dd34:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	430a      	orrs	r2, r1
 800dd42:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2200      	movs	r2, #0
 800dd48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2201      	movs	r2, #1
 800dd50:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dd54:	2300      	movs	r3, #0
}
 800dd56:	4618      	mov	r0, r3
 800dd58:	3710      	adds	r7, #16
 800dd5a:	46bd      	mov	sp, r7
 800dd5c:	bd80      	pop	{r7, pc}
 800dd5e:	bf00      	nop
 800dd60:	40013000 	.word	0x40013000
 800dd64:	40003800 	.word	0x40003800
 800dd68:	40003c00 	.word	0x40003c00

0800dd6c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b088      	sub	sp, #32
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	60f8      	str	r0, [r7, #12]
 800dd74:	60b9      	str	r1, [r7, #8]
 800dd76:	603b      	str	r3, [r7, #0]
 800dd78:	4613      	mov	r3, r2
 800dd7a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd80:	095b      	lsrs	r3, r3, #5
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	3301      	adds	r3, #1
 800dd86:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	3330      	adds	r3, #48	; 0x30
 800dd8e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dd90:	f7f5 fee4 	bl	8003b5c <HAL_GetTick>
 800dd94:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dd9c:	b2db      	uxtb	r3, r3
 800dd9e:	2b01      	cmp	r3, #1
 800dda0:	d001      	beq.n	800dda6 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800dda2:	2302      	movs	r3, #2
 800dda4:	e250      	b.n	800e248 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d002      	beq.n	800ddb2 <HAL_SPI_Receive+0x46>
 800ddac:	88fb      	ldrh	r3, [r7, #6]
 800ddae:	2b00      	cmp	r3, #0
 800ddb0:	d101      	bne.n	800ddb6 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800ddb2:	2301      	movs	r3, #1
 800ddb4:	e248      	b.n	800e248 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d101      	bne.n	800ddc4 <HAL_SPI_Receive+0x58>
 800ddc0:	2302      	movs	r3, #2
 800ddc2:	e241      	b.n	800e248 <HAL_SPI_Receive+0x4dc>
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2204      	movs	r2, #4
 800ddd0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	2200      	movs	r2, #0
 800ddd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	88fa      	ldrh	r2, [r7, #6]
 800dde6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	88fa      	ldrh	r2, [r7, #6]
 800ddee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800de00:	68fb      	ldr	r3, [r7, #12]
 800de02:	2200      	movs	r2, #0
 800de04:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	2200      	movs	r2, #0
 800de0c:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2200      	movs	r2, #0
 800de12:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	689b      	ldr	r3, [r3, #8]
 800de18:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800de1c:	d108      	bne.n	800de30 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	681a      	ldr	r2, [r3, #0]
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800de2c:	601a      	str	r2, [r3, #0]
 800de2e:	e009      	b.n	800de44 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	68db      	ldr	r3, [r3, #12]
 800de36:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	681b      	ldr	r3, [r3, #0]
 800de3e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800de42:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	681b      	ldr	r3, [r3, #0]
 800de48:	685a      	ldr	r2, [r3, #4]
 800de4a:	4b95      	ldr	r3, [pc, #596]	; (800e0a0 <HAL_SPI_Receive+0x334>)
 800de4c:	4013      	ands	r3, r2
 800de4e:	88f9      	ldrh	r1, [r7, #6]
 800de50:	68fa      	ldr	r2, [r7, #12]
 800de52:	6812      	ldr	r2, [r2, #0]
 800de54:	430b      	orrs	r3, r1
 800de56:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	681a      	ldr	r2, [r3, #0]
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	f042 0201 	orr.w	r2, r2, #1
 800de66:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800de68:	68fb      	ldr	r3, [r7, #12]
 800de6a:	685b      	ldr	r3, [r3, #4]
 800de6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800de70:	d107      	bne.n	800de82 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de80:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	2b0f      	cmp	r3, #15
 800de88:	d96c      	bls.n	800df64 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800de8a:	e064      	b.n	800df56 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	695b      	ldr	r3, [r3, #20]
 800de92:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	695b      	ldr	r3, [r3, #20]
 800de9a:	f003 0301 	and.w	r3, r3, #1
 800de9e:	2b01      	cmp	r3, #1
 800dea0:	d114      	bne.n	800decc <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	681a      	ldr	r2, [r3, #0]
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800deac:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deb2:	1d1a      	adds	r2, r3, #4
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800debe:	b29b      	uxth	r3, r3
 800dec0:	3b01      	subs	r3, #1
 800dec2:	b29a      	uxth	r2, r3
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800deca:	e044      	b.n	800df56 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ded2:	b29b      	uxth	r3, r3
 800ded4:	8bfa      	ldrh	r2, [r7, #30]
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d919      	bls.n	800df0e <HAL_SPI_Receive+0x1a2>
 800deda:	693b      	ldr	r3, [r7, #16]
 800dedc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d014      	beq.n	800df0e <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	681a      	ldr	r2, [r3, #0]
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800deec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800deee:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800def4:	1d1a      	adds	r2, r3, #4
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df00:	b29b      	uxth	r3, r3
 800df02:	3b01      	subs	r3, #1
 800df04:	b29a      	uxth	r2, r3
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df0c:	e023      	b.n	800df56 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df0e:	f7f5 fe25 	bl	8003b5c <HAL_GetTick>
 800df12:	4602      	mov	r2, r0
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	1ad3      	subs	r3, r2, r3
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	429a      	cmp	r2, r3
 800df1c:	d803      	bhi.n	800df26 <HAL_SPI_Receive+0x1ba>
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df24:	d102      	bne.n	800df2c <HAL_SPI_Receive+0x1c0>
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d114      	bne.n	800df56 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df2c:	68f8      	ldr	r0, [r7, #12]
 800df2e:	f000 f98f 	bl	800e250 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df38:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	2201      	movs	r2, #1
 800df46:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	2200      	movs	r2, #0
 800df4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800df52:	2303      	movs	r3, #3
 800df54:	e178      	b.n	800e248 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df5c:	b29b      	uxth	r3, r3
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d194      	bne.n	800de8c <HAL_SPI_Receive+0x120>
 800df62:	e15e      	b.n	800e222 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	68db      	ldr	r3, [r3, #12]
 800df68:	2b07      	cmp	r3, #7
 800df6a:	f240 8153 	bls.w	800e214 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800df6e:	e08f      	b.n	800e090 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	681b      	ldr	r3, [r3, #0]
 800df7c:	695b      	ldr	r3, [r3, #20]
 800df7e:	f003 0301 	and.w	r3, r3, #1
 800df82:	2b01      	cmp	r3, #1
 800df84:	d114      	bne.n	800dfb0 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df8a:	69ba      	ldr	r2, [r7, #24]
 800df8c:	8812      	ldrh	r2, [r2, #0]
 800df8e:	b292      	uxth	r2, r2
 800df90:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df96:	1c9a      	adds	r2, r3, #2
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfa2:	b29b      	uxth	r3, r3
 800dfa4:	3b01      	subs	r3, #1
 800dfa6:	b29a      	uxth	r2, r3
 800dfa8:	68fb      	ldr	r3, [r7, #12]
 800dfaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfae:	e06f      	b.n	800e090 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfb6:	b29b      	uxth	r3, r3
 800dfb8:	8bfa      	ldrh	r2, [r7, #30]
 800dfba:	429a      	cmp	r2, r3
 800dfbc:	d924      	bls.n	800e008 <HAL_SPI_Receive+0x29c>
 800dfbe:	693b      	ldr	r3, [r7, #16]
 800dfc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d01f      	beq.n	800e008 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfcc:	69ba      	ldr	r2, [r7, #24]
 800dfce:	8812      	ldrh	r2, [r2, #0]
 800dfd0:	b292      	uxth	r2, r2
 800dfd2:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfd8:	1c9a      	adds	r2, r3, #2
 800dfda:	68fb      	ldr	r3, [r7, #12]
 800dfdc:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfe2:	69ba      	ldr	r2, [r7, #24]
 800dfe4:	8812      	ldrh	r2, [r2, #0]
 800dfe6:	b292      	uxth	r2, r2
 800dfe8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfee:	1c9a      	adds	r2, r3, #2
 800dff0:	68fb      	ldr	r3, [r7, #12]
 800dff2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dffa:	b29b      	uxth	r3, r3
 800dffc:	3b02      	subs	r3, #2
 800dffe:	b29a      	uxth	r2, r3
 800e000:	68fb      	ldr	r3, [r7, #12]
 800e002:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e006:	e043      	b.n	800e090 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e00e:	b29b      	uxth	r3, r3
 800e010:	2b01      	cmp	r3, #1
 800e012:	d119      	bne.n	800e048 <HAL_SPI_Receive+0x2dc>
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e01a:	2b00      	cmp	r3, #0
 800e01c:	d014      	beq.n	800e048 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e022:	69ba      	ldr	r2, [r7, #24]
 800e024:	8812      	ldrh	r2, [r2, #0]
 800e026:	b292      	uxth	r2, r2
 800e028:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e02e:	1c9a      	adds	r2, r3, #2
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e03a:	b29b      	uxth	r3, r3
 800e03c:	3b01      	subs	r3, #1
 800e03e:	b29a      	uxth	r2, r3
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e046:	e023      	b.n	800e090 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e048:	f7f5 fd88 	bl	8003b5c <HAL_GetTick>
 800e04c:	4602      	mov	r2, r0
 800e04e:	697b      	ldr	r3, [r7, #20]
 800e050:	1ad3      	subs	r3, r2, r3
 800e052:	683a      	ldr	r2, [r7, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d803      	bhi.n	800e060 <HAL_SPI_Receive+0x2f4>
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e05e:	d102      	bne.n	800e066 <HAL_SPI_Receive+0x2fa>
 800e060:	683b      	ldr	r3, [r7, #0]
 800e062:	2b00      	cmp	r3, #0
 800e064:	d114      	bne.n	800e090 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e066:	68f8      	ldr	r0, [r7, #12]
 800e068:	f000 f8f2 	bl	800e250 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e072:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e07c:	68fb      	ldr	r3, [r7, #12]
 800e07e:	2201      	movs	r2, #1
 800e080:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2200      	movs	r2, #0
 800e088:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e08c:	2303      	movs	r3, #3
 800e08e:	e0db      	b.n	800e248 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e096:	b29b      	uxth	r3, r3
 800e098:	2b00      	cmp	r3, #0
 800e09a:	f47f af69 	bne.w	800df70 <HAL_SPI_Receive+0x204>
 800e09e:	e0c0      	b.n	800e222 <HAL_SPI_Receive+0x4b6>
 800e0a0:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	681b      	ldr	r3, [r3, #0]
 800e0a8:	695b      	ldr	r3, [r3, #20]
 800e0aa:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	681b      	ldr	r3, [r3, #0]
 800e0b0:	695b      	ldr	r3, [r3, #20]
 800e0b2:	f003 0301 	and.w	r3, r3, #1
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d117      	bne.n	800e0ea <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0c6:	7812      	ldrb	r2, [r2, #0]
 800e0c8:	b2d2      	uxtb	r2, r2
 800e0ca:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0d0:	1c5a      	adds	r2, r3, #1
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0dc:	b29b      	uxth	r3, r3
 800e0de:	3b01      	subs	r3, #1
 800e0e0:	b29a      	uxth	r2, r3
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0e8:	e094      	b.n	800e214 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0f0:	b29b      	uxth	r3, r3
 800e0f2:	8bfa      	ldrh	r2, [r7, #30]
 800e0f4:	429a      	cmp	r2, r3
 800e0f6:	d946      	bls.n	800e186 <HAL_SPI_Receive+0x41a>
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d041      	beq.n	800e186 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	681b      	ldr	r3, [r3, #0]
 800e106:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e10e:	7812      	ldrb	r2, [r2, #0]
 800e110:	b2d2      	uxtb	r2, r2
 800e112:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e118:	1c5a      	adds	r2, r3, #1
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e12a:	7812      	ldrb	r2, [r2, #0]
 800e12c:	b2d2      	uxtb	r2, r2
 800e12e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e134:	1c5a      	adds	r2, r3, #1
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e146:	7812      	ldrb	r2, [r2, #0]
 800e148:	b2d2      	uxtb	r2, r2
 800e14a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e150:	1c5a      	adds	r2, r3, #1
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e162:	7812      	ldrb	r2, [r2, #0]
 800e164:	b2d2      	uxtb	r2, r2
 800e166:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e168:	68fb      	ldr	r3, [r7, #12]
 800e16a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e16c:	1c5a      	adds	r2, r3, #1
 800e16e:	68fb      	ldr	r3, [r7, #12]
 800e170:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e178:	b29b      	uxth	r3, r3
 800e17a:	3b04      	subs	r3, #4
 800e17c:	b29a      	uxth	r2, r3
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e184:	e046      	b.n	800e214 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e18c:	b29b      	uxth	r3, r3
 800e18e:	2b03      	cmp	r3, #3
 800e190:	d81c      	bhi.n	800e1cc <HAL_SPI_Receive+0x460>
 800e192:	693b      	ldr	r3, [r7, #16]
 800e194:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e198:	2b00      	cmp	r3, #0
 800e19a:	d017      	beq.n	800e1cc <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1a8:	7812      	ldrb	r2, [r2, #0]
 800e1aa:	b2d2      	uxtb	r2, r2
 800e1ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e1ae:	68fb      	ldr	r3, [r7, #12]
 800e1b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1b2:	1c5a      	adds	r2, r3, #1
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e1be:	b29b      	uxth	r3, r3
 800e1c0:	3b01      	subs	r3, #1
 800e1c2:	b29a      	uxth	r2, r3
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e1ca:	e023      	b.n	800e214 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e1cc:	f7f5 fcc6 	bl	8003b5c <HAL_GetTick>
 800e1d0:	4602      	mov	r2, r0
 800e1d2:	697b      	ldr	r3, [r7, #20]
 800e1d4:	1ad3      	subs	r3, r2, r3
 800e1d6:	683a      	ldr	r2, [r7, #0]
 800e1d8:	429a      	cmp	r2, r3
 800e1da:	d803      	bhi.n	800e1e4 <HAL_SPI_Receive+0x478>
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e1e2:	d102      	bne.n	800e1ea <HAL_SPI_Receive+0x47e>
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d114      	bne.n	800e214 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e1ea:	68f8      	ldr	r0, [r7, #12]
 800e1ec:	f000 f830 	bl	800e250 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e1f0:	68fb      	ldr	r3, [r7, #12]
 800e1f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1f6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	2201      	movs	r2, #1
 800e204:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	2200      	movs	r2, #0
 800e20c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e210:	2303      	movs	r3, #3
 800e212:	e019      	b.n	800e248 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e21a:	b29b      	uxth	r3, r3
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	f47f af41 	bne.w	800e0a4 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e222:	68f8      	ldr	r0, [r7, #12]
 800e224:	f000 f814 	bl	800e250 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	2201      	movs	r2, #1
 800e22c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	2200      	movs	r2, #0
 800e234:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d001      	beq.n	800e246 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e242:	2301      	movs	r3, #1
 800e244:	e000      	b.n	800e248 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e246:	2300      	movs	r3, #0
  }
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3720      	adds	r7, #32
 800e24c:	46bd      	mov	sp, r7
 800e24e:	bd80      	pop	{r7, pc}

0800e250 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e250:	b480      	push	{r7}
 800e252:	b085      	sub	sp, #20
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	695b      	ldr	r3, [r3, #20]
 800e25e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	699a      	ldr	r2, [r3, #24]
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f042 0208 	orr.w	r2, r2, #8
 800e26e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	699a      	ldr	r2, [r3, #24]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	681b      	ldr	r3, [r3, #0]
 800e27a:	f042 0210 	orr.w	r2, r2, #16
 800e27e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f022 0201 	bic.w	r2, r2, #1
 800e28e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	6919      	ldr	r1, [r3, #16]
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	681a      	ldr	r2, [r3, #0]
 800e29a:	4b3c      	ldr	r3, [pc, #240]	; (800e38c <SPI_CloseTransfer+0x13c>)
 800e29c:	400b      	ands	r3, r1
 800e29e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	689a      	ldr	r2, [r3, #8]
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e2ae:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	2b04      	cmp	r3, #4
 800e2ba:	d014      	beq.n	800e2e6 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	f003 0320 	and.w	r3, r3, #32
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d00f      	beq.n	800e2e6 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e2cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	681b      	ldr	r3, [r3, #0]
 800e2da:	699a      	ldr	r2, [r3, #24]
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	f042 0220 	orr.w	r2, r2, #32
 800e2e4:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	2b03      	cmp	r3, #3
 800e2f0:	d014      	beq.n	800e31c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d00f      	beq.n	800e31c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e302:	f043 0204 	orr.w	r2, r3, #4
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	699a      	ldr	r2, [r3, #24]
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e31a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e31c:	68fb      	ldr	r3, [r7, #12]
 800e31e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00f      	beq.n	800e346 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e32c:	f043 0201 	orr.w	r2, r3, #1
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	699a      	ldr	r2, [r3, #24]
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e344:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d00f      	beq.n	800e370 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e356:	f043 0208 	orr.w	r2, r3, #8
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	699a      	ldr	r2, [r3, #24]
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e36e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	2200      	movs	r2, #0
 800e374:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	2200      	movs	r2, #0
 800e37c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e380:	bf00      	nop
 800e382:	3714      	adds	r7, #20
 800e384:	46bd      	mov	sp, r7
 800e386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38a:	4770      	bx	lr
 800e38c:	fffffc90 	.word	0xfffffc90

0800e390 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e390:	b480      	push	{r7}
 800e392:	b085      	sub	sp, #20
 800e394:	af00      	add	r7, sp, #0
 800e396:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e39c:	095b      	lsrs	r3, r3, #5
 800e39e:	3301      	adds	r3, #1
 800e3a0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	68db      	ldr	r3, [r3, #12]
 800e3a6:	3301      	adds	r3, #1
 800e3a8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	3307      	adds	r3, #7
 800e3ae:	08db      	lsrs	r3, r3, #3
 800e3b0:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e3b2:	68bb      	ldr	r3, [r7, #8]
 800e3b4:	68fa      	ldr	r2, [r7, #12]
 800e3b6:	fb02 f303 	mul.w	r3, r2, r3
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3714      	adds	r7, #20
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3c4:	4770      	bx	lr

0800e3c6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e3c6:	b580      	push	{r7, lr}
 800e3c8:	b082      	sub	sp, #8
 800e3ca:	af00      	add	r7, sp, #0
 800e3cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	e049      	b.n	800e46c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e3de:	b2db      	uxtb	r3, r3
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d106      	bne.n	800e3f2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	2200      	movs	r2, #0
 800e3e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f7f4 ff49 	bl	8003284 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	2202      	movs	r2, #2
 800e3f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	3304      	adds	r3, #4
 800e402:	4619      	mov	r1, r3
 800e404:	4610      	mov	r0, r2
 800e406:	f000 feed 	bl	800f1e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2201      	movs	r2, #1
 800e40e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	2201      	movs	r2, #1
 800e416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	2201      	movs	r2, #1
 800e41e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	2201      	movs	r2, #1
 800e426:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e42a:	687b      	ldr	r3, [r7, #4]
 800e42c:	2201      	movs	r2, #1
 800e42e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2201      	movs	r2, #1
 800e436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2201      	movs	r2, #1
 800e43e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2201      	movs	r2, #1
 800e446:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2201      	movs	r2, #1
 800e44e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e452:	687b      	ldr	r3, [r7, #4]
 800e454:	2201      	movs	r2, #1
 800e456:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2201      	movs	r2, #1
 800e45e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2201      	movs	r2, #1
 800e466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3708      	adds	r7, #8
 800e470:	46bd      	mov	sp, r7
 800e472:	bd80      	pop	{r7, pc}

0800e474 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800e474:	b480      	push	{r7}
 800e476:	b085      	sub	sp, #20
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e482:	b2db      	uxtb	r3, r3
 800e484:	2b01      	cmp	r3, #1
 800e486:	d001      	beq.n	800e48c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800e488:	2301      	movs	r3, #1
 800e48a:	e04c      	b.n	800e526 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2202      	movs	r2, #2
 800e490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	4a26      	ldr	r2, [pc, #152]	; (800e534 <HAL_TIM_Base_Start+0xc0>)
 800e49a:	4293      	cmp	r3, r2
 800e49c:	d022      	beq.n	800e4e4 <HAL_TIM_Base_Start+0x70>
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e4a6:	d01d      	beq.n	800e4e4 <HAL_TIM_Base_Start+0x70>
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	4a22      	ldr	r2, [pc, #136]	; (800e538 <HAL_TIM_Base_Start+0xc4>)
 800e4ae:	4293      	cmp	r3, r2
 800e4b0:	d018      	beq.n	800e4e4 <HAL_TIM_Base_Start+0x70>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	4a21      	ldr	r2, [pc, #132]	; (800e53c <HAL_TIM_Base_Start+0xc8>)
 800e4b8:	4293      	cmp	r3, r2
 800e4ba:	d013      	beq.n	800e4e4 <HAL_TIM_Base_Start+0x70>
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	4a1f      	ldr	r2, [pc, #124]	; (800e540 <HAL_TIM_Base_Start+0xcc>)
 800e4c2:	4293      	cmp	r3, r2
 800e4c4:	d00e      	beq.n	800e4e4 <HAL_TIM_Base_Start+0x70>
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a1e      	ldr	r2, [pc, #120]	; (800e544 <HAL_TIM_Base_Start+0xd0>)
 800e4cc:	4293      	cmp	r3, r2
 800e4ce:	d009      	beq.n	800e4e4 <HAL_TIM_Base_Start+0x70>
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	4a1c      	ldr	r2, [pc, #112]	; (800e548 <HAL_TIM_Base_Start+0xd4>)
 800e4d6:	4293      	cmp	r3, r2
 800e4d8:	d004      	beq.n	800e4e4 <HAL_TIM_Base_Start+0x70>
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a1b      	ldr	r2, [pc, #108]	; (800e54c <HAL_TIM_Base_Start+0xd8>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d115      	bne.n	800e510 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	681b      	ldr	r3, [r3, #0]
 800e4e8:	689a      	ldr	r2, [r3, #8]
 800e4ea:	4b19      	ldr	r3, [pc, #100]	; (800e550 <HAL_TIM_Base_Start+0xdc>)
 800e4ec:	4013      	ands	r3, r2
 800e4ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	2b06      	cmp	r3, #6
 800e4f4:	d015      	beq.n	800e522 <HAL_TIM_Base_Start+0xae>
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e4fc:	d011      	beq.n	800e522 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	681a      	ldr	r2, [r3, #0]
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	f042 0201 	orr.w	r2, r2, #1
 800e50c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e50e:	e008      	b.n	800e522 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	681a      	ldr	r2, [r3, #0]
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	f042 0201 	orr.w	r2, r2, #1
 800e51e:	601a      	str	r2, [r3, #0]
 800e520:	e000      	b.n	800e524 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e522:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e524:	2300      	movs	r3, #0
}
 800e526:	4618      	mov	r0, r3
 800e528:	3714      	adds	r7, #20
 800e52a:	46bd      	mov	sp, r7
 800e52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	40010000 	.word	0x40010000
 800e538:	40000400 	.word	0x40000400
 800e53c:	40000800 	.word	0x40000800
 800e540:	40000c00 	.word	0x40000c00
 800e544:	40010400 	.word	0x40010400
 800e548:	40001800 	.word	0x40001800
 800e54c:	40014000 	.word	0x40014000
 800e550:	00010007 	.word	0x00010007

0800e554 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e554:	b480      	push	{r7}
 800e556:	b085      	sub	sp, #20
 800e558:	af00      	add	r7, sp, #0
 800e55a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e562:	b2db      	uxtb	r3, r3
 800e564:	2b01      	cmp	r3, #1
 800e566:	d001      	beq.n	800e56c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e568:	2301      	movs	r3, #1
 800e56a:	e054      	b.n	800e616 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	2202      	movs	r2, #2
 800e570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	687b      	ldr	r3, [r7, #4]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f042 0201 	orr.w	r2, r2, #1
 800e582:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	4a26      	ldr	r2, [pc, #152]	; (800e624 <HAL_TIM_Base_Start_IT+0xd0>)
 800e58a:	4293      	cmp	r3, r2
 800e58c:	d022      	beq.n	800e5d4 <HAL_TIM_Base_Start_IT+0x80>
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e596:	d01d      	beq.n	800e5d4 <HAL_TIM_Base_Start_IT+0x80>
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	4a22      	ldr	r2, [pc, #136]	; (800e628 <HAL_TIM_Base_Start_IT+0xd4>)
 800e59e:	4293      	cmp	r3, r2
 800e5a0:	d018      	beq.n	800e5d4 <HAL_TIM_Base_Start_IT+0x80>
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	4a21      	ldr	r2, [pc, #132]	; (800e62c <HAL_TIM_Base_Start_IT+0xd8>)
 800e5a8:	4293      	cmp	r3, r2
 800e5aa:	d013      	beq.n	800e5d4 <HAL_TIM_Base_Start_IT+0x80>
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	4a1f      	ldr	r2, [pc, #124]	; (800e630 <HAL_TIM_Base_Start_IT+0xdc>)
 800e5b2:	4293      	cmp	r3, r2
 800e5b4:	d00e      	beq.n	800e5d4 <HAL_TIM_Base_Start_IT+0x80>
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	4a1e      	ldr	r2, [pc, #120]	; (800e634 <HAL_TIM_Base_Start_IT+0xe0>)
 800e5bc:	4293      	cmp	r3, r2
 800e5be:	d009      	beq.n	800e5d4 <HAL_TIM_Base_Start_IT+0x80>
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	4a1c      	ldr	r2, [pc, #112]	; (800e638 <HAL_TIM_Base_Start_IT+0xe4>)
 800e5c6:	4293      	cmp	r3, r2
 800e5c8:	d004      	beq.n	800e5d4 <HAL_TIM_Base_Start_IT+0x80>
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	4a1b      	ldr	r2, [pc, #108]	; (800e63c <HAL_TIM_Base_Start_IT+0xe8>)
 800e5d0:	4293      	cmp	r3, r2
 800e5d2:	d115      	bne.n	800e600 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	681b      	ldr	r3, [r3, #0]
 800e5d8:	689a      	ldr	r2, [r3, #8]
 800e5da:	4b19      	ldr	r3, [pc, #100]	; (800e640 <HAL_TIM_Base_Start_IT+0xec>)
 800e5dc:	4013      	ands	r3, r2
 800e5de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5e0:	68fb      	ldr	r3, [r7, #12]
 800e5e2:	2b06      	cmp	r3, #6
 800e5e4:	d015      	beq.n	800e612 <HAL_TIM_Base_Start_IT+0xbe>
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e5ec:	d011      	beq.n	800e612 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	681a      	ldr	r2, [r3, #0]
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	f042 0201 	orr.w	r2, r2, #1
 800e5fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e5fe:	e008      	b.n	800e612 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	681b      	ldr	r3, [r3, #0]
 800e604:	681a      	ldr	r2, [r3, #0]
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	f042 0201 	orr.w	r2, r2, #1
 800e60e:	601a      	str	r2, [r3, #0]
 800e610:	e000      	b.n	800e614 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e612:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3714      	adds	r7, #20
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
 800e622:	bf00      	nop
 800e624:	40010000 	.word	0x40010000
 800e628:	40000400 	.word	0x40000400
 800e62c:	40000800 	.word	0x40000800
 800e630:	40000c00 	.word	0x40000c00
 800e634:	40010400 	.word	0x40010400
 800e638:	40001800 	.word	0x40001800
 800e63c:	40014000 	.word	0x40014000
 800e640:	00010007 	.word	0x00010007

0800e644 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
 800e64c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e64e:	2300      	movs	r3, #0
 800e650:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e652:	683b      	ldr	r3, [r7, #0]
 800e654:	2b00      	cmp	r3, #0
 800e656:	d109      	bne.n	800e66c <HAL_TIM_OC_Start_IT+0x28>
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	2b01      	cmp	r3, #1
 800e662:	bf14      	ite	ne
 800e664:	2301      	movne	r3, #1
 800e666:	2300      	moveq	r3, #0
 800e668:	b2db      	uxtb	r3, r3
 800e66a:	e03c      	b.n	800e6e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e66c:	683b      	ldr	r3, [r7, #0]
 800e66e:	2b04      	cmp	r3, #4
 800e670:	d109      	bne.n	800e686 <HAL_TIM_OC_Start_IT+0x42>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e678:	b2db      	uxtb	r3, r3
 800e67a:	2b01      	cmp	r3, #1
 800e67c:	bf14      	ite	ne
 800e67e:	2301      	movne	r3, #1
 800e680:	2300      	moveq	r3, #0
 800e682:	b2db      	uxtb	r3, r3
 800e684:	e02f      	b.n	800e6e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	2b08      	cmp	r3, #8
 800e68a:	d109      	bne.n	800e6a0 <HAL_TIM_OC_Start_IT+0x5c>
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e692:	b2db      	uxtb	r3, r3
 800e694:	2b01      	cmp	r3, #1
 800e696:	bf14      	ite	ne
 800e698:	2301      	movne	r3, #1
 800e69a:	2300      	moveq	r3, #0
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	e022      	b.n	800e6e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2b0c      	cmp	r3, #12
 800e6a4:	d109      	bne.n	800e6ba <HAL_TIM_OC_Start_IT+0x76>
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e6ac:	b2db      	uxtb	r3, r3
 800e6ae:	2b01      	cmp	r3, #1
 800e6b0:	bf14      	ite	ne
 800e6b2:	2301      	movne	r3, #1
 800e6b4:	2300      	moveq	r3, #0
 800e6b6:	b2db      	uxtb	r3, r3
 800e6b8:	e015      	b.n	800e6e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	2b10      	cmp	r3, #16
 800e6be:	d109      	bne.n	800e6d4 <HAL_TIM_OC_Start_IT+0x90>
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e6c6:	b2db      	uxtb	r3, r3
 800e6c8:	2b01      	cmp	r3, #1
 800e6ca:	bf14      	ite	ne
 800e6cc:	2301      	movne	r3, #1
 800e6ce:	2300      	moveq	r3, #0
 800e6d0:	b2db      	uxtb	r3, r3
 800e6d2:	e008      	b.n	800e6e6 <HAL_TIM_OC_Start_IT+0xa2>
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	2b01      	cmp	r3, #1
 800e6de:	bf14      	ite	ne
 800e6e0:	2301      	movne	r3, #1
 800e6e2:	2300      	moveq	r3, #0
 800e6e4:	b2db      	uxtb	r3, r3
 800e6e6:	2b00      	cmp	r3, #0
 800e6e8:	d001      	beq.n	800e6ee <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e6ea:	2301      	movs	r3, #1
 800e6ec:	e0ec      	b.n	800e8c8 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e6ee:	683b      	ldr	r3, [r7, #0]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d104      	bne.n	800e6fe <HAL_TIM_OC_Start_IT+0xba>
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2202      	movs	r2, #2
 800e6f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e6fc:	e023      	b.n	800e746 <HAL_TIM_OC_Start_IT+0x102>
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	2b04      	cmp	r3, #4
 800e702:	d104      	bne.n	800e70e <HAL_TIM_OC_Start_IT+0xca>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	2202      	movs	r2, #2
 800e708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e70c:	e01b      	b.n	800e746 <HAL_TIM_OC_Start_IT+0x102>
 800e70e:	683b      	ldr	r3, [r7, #0]
 800e710:	2b08      	cmp	r3, #8
 800e712:	d104      	bne.n	800e71e <HAL_TIM_OC_Start_IT+0xda>
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	2202      	movs	r2, #2
 800e718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e71c:	e013      	b.n	800e746 <HAL_TIM_OC_Start_IT+0x102>
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	2b0c      	cmp	r3, #12
 800e722:	d104      	bne.n	800e72e <HAL_TIM_OC_Start_IT+0xea>
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	2202      	movs	r2, #2
 800e728:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e72c:	e00b      	b.n	800e746 <HAL_TIM_OC_Start_IT+0x102>
 800e72e:	683b      	ldr	r3, [r7, #0]
 800e730:	2b10      	cmp	r3, #16
 800e732:	d104      	bne.n	800e73e <HAL_TIM_OC_Start_IT+0xfa>
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	2202      	movs	r2, #2
 800e738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e73c:	e003      	b.n	800e746 <HAL_TIM_OC_Start_IT+0x102>
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	2202      	movs	r2, #2
 800e742:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e746:	683b      	ldr	r3, [r7, #0]
 800e748:	2b0c      	cmp	r3, #12
 800e74a:	d841      	bhi.n	800e7d0 <HAL_TIM_OC_Start_IT+0x18c>
 800e74c:	a201      	add	r2, pc, #4	; (adr r2, 800e754 <HAL_TIM_OC_Start_IT+0x110>)
 800e74e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e752:	bf00      	nop
 800e754:	0800e789 	.word	0x0800e789
 800e758:	0800e7d1 	.word	0x0800e7d1
 800e75c:	0800e7d1 	.word	0x0800e7d1
 800e760:	0800e7d1 	.word	0x0800e7d1
 800e764:	0800e79b 	.word	0x0800e79b
 800e768:	0800e7d1 	.word	0x0800e7d1
 800e76c:	0800e7d1 	.word	0x0800e7d1
 800e770:	0800e7d1 	.word	0x0800e7d1
 800e774:	0800e7ad 	.word	0x0800e7ad
 800e778:	0800e7d1 	.word	0x0800e7d1
 800e77c:	0800e7d1 	.word	0x0800e7d1
 800e780:	0800e7d1 	.word	0x0800e7d1
 800e784:	0800e7bf 	.word	0x0800e7bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	68da      	ldr	r2, [r3, #12]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	f042 0202 	orr.w	r2, r2, #2
 800e796:	60da      	str	r2, [r3, #12]
      break;
 800e798:	e01d      	b.n	800e7d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	68da      	ldr	r2, [r3, #12]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f042 0204 	orr.w	r2, r2, #4
 800e7a8:	60da      	str	r2, [r3, #12]
      break;
 800e7aa:	e014      	b.n	800e7d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	68da      	ldr	r2, [r3, #12]
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	f042 0208 	orr.w	r2, r2, #8
 800e7ba:	60da      	str	r2, [r3, #12]
      break;
 800e7bc:	e00b      	b.n	800e7d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	68da      	ldr	r2, [r3, #12]
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f042 0210 	orr.w	r2, r2, #16
 800e7cc:	60da      	str	r2, [r3, #12]
      break;
 800e7ce:	e002      	b.n	800e7d6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e7d0:	2301      	movs	r3, #1
 800e7d2:	73fb      	strb	r3, [r7, #15]
      break;
 800e7d4:	bf00      	nop
  }

  if (status == HAL_OK)
 800e7d6:	7bfb      	ldrb	r3, [r7, #15]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d174      	bne.n	800e8c6 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	2201      	movs	r2, #1
 800e7e2:	6839      	ldr	r1, [r7, #0]
 800e7e4:	4618      	mov	r0, r3
 800e7e6:	f001 f917 	bl	800fa18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	681b      	ldr	r3, [r3, #0]
 800e7ee:	4a38      	ldr	r2, [pc, #224]	; (800e8d0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d013      	beq.n	800e81c <HAL_TIM_OC_Start_IT+0x1d8>
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	4a36      	ldr	r2, [pc, #216]	; (800e8d4 <HAL_TIM_OC_Start_IT+0x290>)
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	d00e      	beq.n	800e81c <HAL_TIM_OC_Start_IT+0x1d8>
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	681b      	ldr	r3, [r3, #0]
 800e802:	4a35      	ldr	r2, [pc, #212]	; (800e8d8 <HAL_TIM_OC_Start_IT+0x294>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d009      	beq.n	800e81c <HAL_TIM_OC_Start_IT+0x1d8>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	4a33      	ldr	r2, [pc, #204]	; (800e8dc <HAL_TIM_OC_Start_IT+0x298>)
 800e80e:	4293      	cmp	r3, r2
 800e810:	d004      	beq.n	800e81c <HAL_TIM_OC_Start_IT+0x1d8>
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	681b      	ldr	r3, [r3, #0]
 800e816:	4a32      	ldr	r2, [pc, #200]	; (800e8e0 <HAL_TIM_OC_Start_IT+0x29c>)
 800e818:	4293      	cmp	r3, r2
 800e81a:	d101      	bne.n	800e820 <HAL_TIM_OC_Start_IT+0x1dc>
 800e81c:	2301      	movs	r3, #1
 800e81e:	e000      	b.n	800e822 <HAL_TIM_OC_Start_IT+0x1de>
 800e820:	2300      	movs	r3, #0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d007      	beq.n	800e836 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e834:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4a25      	ldr	r2, [pc, #148]	; (800e8d0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e83c:	4293      	cmp	r3, r2
 800e83e:	d022      	beq.n	800e886 <HAL_TIM_OC_Start_IT+0x242>
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e848:	d01d      	beq.n	800e886 <HAL_TIM_OC_Start_IT+0x242>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	4a25      	ldr	r2, [pc, #148]	; (800e8e4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e850:	4293      	cmp	r3, r2
 800e852:	d018      	beq.n	800e886 <HAL_TIM_OC_Start_IT+0x242>
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	4a23      	ldr	r2, [pc, #140]	; (800e8e8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e85a:	4293      	cmp	r3, r2
 800e85c:	d013      	beq.n	800e886 <HAL_TIM_OC_Start_IT+0x242>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	4a22      	ldr	r2, [pc, #136]	; (800e8ec <HAL_TIM_OC_Start_IT+0x2a8>)
 800e864:	4293      	cmp	r3, r2
 800e866:	d00e      	beq.n	800e886 <HAL_TIM_OC_Start_IT+0x242>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	4a19      	ldr	r2, [pc, #100]	; (800e8d4 <HAL_TIM_OC_Start_IT+0x290>)
 800e86e:	4293      	cmp	r3, r2
 800e870:	d009      	beq.n	800e886 <HAL_TIM_OC_Start_IT+0x242>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	4a1e      	ldr	r2, [pc, #120]	; (800e8f0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e878:	4293      	cmp	r3, r2
 800e87a:	d004      	beq.n	800e886 <HAL_TIM_OC_Start_IT+0x242>
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	681b      	ldr	r3, [r3, #0]
 800e880:	4a15      	ldr	r2, [pc, #84]	; (800e8d8 <HAL_TIM_OC_Start_IT+0x294>)
 800e882:	4293      	cmp	r3, r2
 800e884:	d115      	bne.n	800e8b2 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	689a      	ldr	r2, [r3, #8]
 800e88c:	4b19      	ldr	r3, [pc, #100]	; (800e8f4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e88e:	4013      	ands	r3, r2
 800e890:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e892:	68bb      	ldr	r3, [r7, #8]
 800e894:	2b06      	cmp	r3, #6
 800e896:	d015      	beq.n	800e8c4 <HAL_TIM_OC_Start_IT+0x280>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e89e:	d011      	beq.n	800e8c4 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	681a      	ldr	r2, [r3, #0]
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	f042 0201 	orr.w	r2, r2, #1
 800e8ae:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8b0:	e008      	b.n	800e8c4 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	681a      	ldr	r2, [r3, #0]
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f042 0201 	orr.w	r2, r2, #1
 800e8c0:	601a      	str	r2, [r3, #0]
 800e8c2:	e000      	b.n	800e8c6 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e8c4:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e8c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8c8:	4618      	mov	r0, r3
 800e8ca:	3710      	adds	r7, #16
 800e8cc:	46bd      	mov	sp, r7
 800e8ce:	bd80      	pop	{r7, pc}
 800e8d0:	40010000 	.word	0x40010000
 800e8d4:	40010400 	.word	0x40010400
 800e8d8:	40014000 	.word	0x40014000
 800e8dc:	40014400 	.word	0x40014400
 800e8e0:	40014800 	.word	0x40014800
 800e8e4:	40000400 	.word	0x40000400
 800e8e8:	40000800 	.word	0x40000800
 800e8ec:	40000c00 	.word	0x40000c00
 800e8f0:	40001800 	.word	0x40001800
 800e8f4:	00010007 	.word	0x00010007

0800e8f8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e8f8:	b580      	push	{r7, lr}
 800e8fa:	b084      	sub	sp, #16
 800e8fc:	af00      	add	r7, sp, #0
 800e8fe:	6078      	str	r0, [r7, #4]
 800e900:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e902:	2300      	movs	r3, #0
 800e904:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	2b0c      	cmp	r3, #12
 800e90a:	d841      	bhi.n	800e990 <HAL_TIM_OC_Stop_IT+0x98>
 800e90c:	a201      	add	r2, pc, #4	; (adr r2, 800e914 <HAL_TIM_OC_Stop_IT+0x1c>)
 800e90e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e912:	bf00      	nop
 800e914:	0800e949 	.word	0x0800e949
 800e918:	0800e991 	.word	0x0800e991
 800e91c:	0800e991 	.word	0x0800e991
 800e920:	0800e991 	.word	0x0800e991
 800e924:	0800e95b 	.word	0x0800e95b
 800e928:	0800e991 	.word	0x0800e991
 800e92c:	0800e991 	.word	0x0800e991
 800e930:	0800e991 	.word	0x0800e991
 800e934:	0800e96d 	.word	0x0800e96d
 800e938:	0800e991 	.word	0x0800e991
 800e93c:	0800e991 	.word	0x0800e991
 800e940:	0800e991 	.word	0x0800e991
 800e944:	0800e97f 	.word	0x0800e97f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	681b      	ldr	r3, [r3, #0]
 800e94c:	68da      	ldr	r2, [r3, #12]
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	f022 0202 	bic.w	r2, r2, #2
 800e956:	60da      	str	r2, [r3, #12]
      break;
 800e958:	e01d      	b.n	800e996 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	68da      	ldr	r2, [r3, #12]
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	f022 0204 	bic.w	r2, r2, #4
 800e968:	60da      	str	r2, [r3, #12]
      break;
 800e96a:	e014      	b.n	800e996 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	68da      	ldr	r2, [r3, #12]
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	681b      	ldr	r3, [r3, #0]
 800e976:	f022 0208 	bic.w	r2, r2, #8
 800e97a:	60da      	str	r2, [r3, #12]
      break;
 800e97c:	e00b      	b.n	800e996 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	68da      	ldr	r2, [r3, #12]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f022 0210 	bic.w	r2, r2, #16
 800e98c:	60da      	str	r2, [r3, #12]
      break;
 800e98e:	e002      	b.n	800e996 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e990:	2301      	movs	r3, #1
 800e992:	73fb      	strb	r3, [r7, #15]
      break;
 800e994:	bf00      	nop
  }

  if (status == HAL_OK)
 800e996:	7bfb      	ldrb	r3, [r7, #15]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	f040 8081 	bne.w	800eaa0 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	2200      	movs	r2, #0
 800e9a4:	6839      	ldr	r1, [r7, #0]
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f001 f836 	bl	800fa18 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a3e      	ldr	r2, [pc, #248]	; (800eaac <HAL_TIM_OC_Stop_IT+0x1b4>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d013      	beq.n	800e9de <HAL_TIM_OC_Stop_IT+0xe6>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a3d      	ldr	r2, [pc, #244]	; (800eab0 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d00e      	beq.n	800e9de <HAL_TIM_OC_Stop_IT+0xe6>
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	4a3b      	ldr	r2, [pc, #236]	; (800eab4 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800e9c6:	4293      	cmp	r3, r2
 800e9c8:	d009      	beq.n	800e9de <HAL_TIM_OC_Stop_IT+0xe6>
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	4a3a      	ldr	r2, [pc, #232]	; (800eab8 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800e9d0:	4293      	cmp	r3, r2
 800e9d2:	d004      	beq.n	800e9de <HAL_TIM_OC_Stop_IT+0xe6>
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	681b      	ldr	r3, [r3, #0]
 800e9d8:	4a38      	ldr	r2, [pc, #224]	; (800eabc <HAL_TIM_OC_Stop_IT+0x1c4>)
 800e9da:	4293      	cmp	r3, r2
 800e9dc:	d101      	bne.n	800e9e2 <HAL_TIM_OC_Stop_IT+0xea>
 800e9de:	2301      	movs	r3, #1
 800e9e0:	e000      	b.n	800e9e4 <HAL_TIM_OC_Stop_IT+0xec>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d017      	beq.n	800ea18 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	6a1a      	ldr	r2, [r3, #32]
 800e9ee:	f241 1311 	movw	r3, #4369	; 0x1111
 800e9f2:	4013      	ands	r3, r2
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d10f      	bne.n	800ea18 <HAL_TIM_OC_Stop_IT+0x120>
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	681b      	ldr	r3, [r3, #0]
 800e9fc:	6a1a      	ldr	r2, [r3, #32]
 800e9fe:	f240 4344 	movw	r3, #1092	; 0x444
 800ea02:	4013      	ands	r3, r2
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d107      	bne.n	800ea18 <HAL_TIM_OC_Stop_IT+0x120>
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ea16:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	6a1a      	ldr	r2, [r3, #32]
 800ea1e:	f241 1311 	movw	r3, #4369	; 0x1111
 800ea22:	4013      	ands	r3, r2
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d10f      	bne.n	800ea48 <HAL_TIM_OC_Stop_IT+0x150>
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	6a1a      	ldr	r2, [r3, #32]
 800ea2e:	f240 4344 	movw	r3, #1092	; 0x444
 800ea32:	4013      	ands	r3, r2
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d107      	bne.n	800ea48 <HAL_TIM_OC_Stop_IT+0x150>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	681a      	ldr	r2, [r3, #0]
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	f022 0201 	bic.w	r2, r2, #1
 800ea46:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800ea48:	683b      	ldr	r3, [r7, #0]
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	d104      	bne.n	800ea58 <HAL_TIM_OC_Stop_IT+0x160>
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	2201      	movs	r2, #1
 800ea52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ea56:	e023      	b.n	800eaa0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	2b04      	cmp	r3, #4
 800ea5c:	d104      	bne.n	800ea68 <HAL_TIM_OC_Stop_IT+0x170>
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	2201      	movs	r2, #1
 800ea62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ea66:	e01b      	b.n	800eaa0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	2b08      	cmp	r3, #8
 800ea6c:	d104      	bne.n	800ea78 <HAL_TIM_OC_Stop_IT+0x180>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2201      	movs	r2, #1
 800ea72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ea76:	e013      	b.n	800eaa0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	2b0c      	cmp	r3, #12
 800ea7c:	d104      	bne.n	800ea88 <HAL_TIM_OC_Stop_IT+0x190>
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	2201      	movs	r2, #1
 800ea82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ea86:	e00b      	b.n	800eaa0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	2b10      	cmp	r3, #16
 800ea8c:	d104      	bne.n	800ea98 <HAL_TIM_OC_Stop_IT+0x1a0>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2201      	movs	r2, #1
 800ea92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ea96:	e003      	b.n	800eaa0 <HAL_TIM_OC_Stop_IT+0x1a8>
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2201      	movs	r2, #1
 800ea9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800eaa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}
 800eaaa:	bf00      	nop
 800eaac:	40010000 	.word	0x40010000
 800eab0:	40010400 	.word	0x40010400
 800eab4:	40014000 	.word	0x40014000
 800eab8:	40014400 	.word	0x40014400
 800eabc:	40014800 	.word	0x40014800

0800eac0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800eac0:	b580      	push	{r7, lr}
 800eac2:	b082      	sub	sp, #8
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d101      	bne.n	800ead2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800eace:	2301      	movs	r3, #1
 800ead0:	e049      	b.n	800eb66 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ead8:	b2db      	uxtb	r3, r3
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d106      	bne.n	800eaec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	2200      	movs	r2, #0
 800eae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 f841 	bl	800eb6e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	2202      	movs	r2, #2
 800eaf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681a      	ldr	r2, [r3, #0]
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	3304      	adds	r3, #4
 800eafc:	4619      	mov	r1, r3
 800eafe:	4610      	mov	r0, r2
 800eb00:	f000 fb70 	bl	800f1e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	2201      	movs	r2, #1
 800eb08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2201      	movs	r2, #1
 800eb10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	2201      	movs	r2, #1
 800eb18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2201      	movs	r2, #1
 800eb20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	2201      	movs	r2, #1
 800eb28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2201      	movs	r2, #1
 800eb30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2201      	movs	r2, #1
 800eb38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	2201      	movs	r2, #1
 800eb40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	2201      	movs	r2, #1
 800eb48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	2201      	movs	r2, #1
 800eb58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2201      	movs	r2, #1
 800eb60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eb64:	2300      	movs	r3, #0
}
 800eb66:	4618      	mov	r0, r3
 800eb68:	3708      	adds	r7, #8
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}

0800eb6e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800eb6e:	b480      	push	{r7}
 800eb70:	b083      	sub	sp, #12
 800eb72:	af00      	add	r7, sp, #0
 800eb74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800eb76:	bf00      	nop
 800eb78:	370c      	adds	r7, #12
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb80:	4770      	bx	lr

0800eb82 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800eb82:	b580      	push	{r7, lr}
 800eb84:	b084      	sub	sp, #16
 800eb86:	af00      	add	r7, sp, #0
 800eb88:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	68db      	ldr	r3, [r3, #12]
 800eb90:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	691b      	ldr	r3, [r3, #16]
 800eb98:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800eb9a:	68bb      	ldr	r3, [r7, #8]
 800eb9c:	f003 0302 	and.w	r3, r3, #2
 800eba0:	2b00      	cmp	r3, #0
 800eba2:	d020      	beq.n	800ebe6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	f003 0302 	and.w	r3, r3, #2
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d01b      	beq.n	800ebe6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f06f 0202 	mvn.w	r2, #2
 800ebb6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	2201      	movs	r2, #1
 800ebbc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	699b      	ldr	r3, [r3, #24]
 800ebc4:	f003 0303 	and.w	r3, r3, #3
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d003      	beq.n	800ebd4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ebcc:	6878      	ldr	r0, [r7, #4]
 800ebce:	f000 faeb 	bl	800f1a8 <HAL_TIM_IC_CaptureCallback>
 800ebd2:	e005      	b.n	800ebe0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ebd4:	6878      	ldr	r0, [r7, #4]
 800ebd6:	f7f1 fd13 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ebda:	6878      	ldr	r0, [r7, #4]
 800ebdc:	f000 faee 	bl	800f1bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	f003 0304 	and.w	r3, r3, #4
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d020      	beq.n	800ec32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f003 0304 	and.w	r3, r3, #4
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d01b      	beq.n	800ec32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f06f 0204 	mvn.w	r2, #4
 800ec02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2202      	movs	r2, #2
 800ec08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	699b      	ldr	r3, [r3, #24]
 800ec10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d003      	beq.n	800ec20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f000 fac5 	bl	800f1a8 <HAL_TIM_IC_CaptureCallback>
 800ec1e:	e005      	b.n	800ec2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec20:	6878      	ldr	r0, [r7, #4]
 800ec22:	f7f1 fced 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec26:	6878      	ldr	r0, [r7, #4]
 800ec28:	f000 fac8 	bl	800f1bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	2200      	movs	r2, #0
 800ec30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ec32:	68bb      	ldr	r3, [r7, #8]
 800ec34:	f003 0308 	and.w	r3, r3, #8
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d020      	beq.n	800ec7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	f003 0308 	and.w	r3, r3, #8
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d01b      	beq.n	800ec7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	f06f 0208 	mvn.w	r2, #8
 800ec4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	2204      	movs	r2, #4
 800ec54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	69db      	ldr	r3, [r3, #28]
 800ec5c:	f003 0303 	and.w	r3, r3, #3
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d003      	beq.n	800ec6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ec64:	6878      	ldr	r0, [r7, #4]
 800ec66:	f000 fa9f 	bl	800f1a8 <HAL_TIM_IC_CaptureCallback>
 800ec6a:	e005      	b.n	800ec78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ec6c:	6878      	ldr	r0, [r7, #4]
 800ec6e:	f7f1 fcc7 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f000 faa2 	bl	800f1bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ec7e:	68bb      	ldr	r3, [r7, #8]
 800ec80:	f003 0310 	and.w	r3, r3, #16
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d020      	beq.n	800ecca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	f003 0310 	and.w	r3, r3, #16
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d01b      	beq.n	800ecca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	681b      	ldr	r3, [r3, #0]
 800ec96:	f06f 0210 	mvn.w	r2, #16
 800ec9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2208      	movs	r2, #8
 800eca0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	69db      	ldr	r3, [r3, #28]
 800eca8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d003      	beq.n	800ecb8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 fa79 	bl	800f1a8 <HAL_TIM_IC_CaptureCallback>
 800ecb6:	e005      	b.n	800ecc4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ecb8:	6878      	ldr	r0, [r7, #4]
 800ecba:	f7f1 fca1 	bl	8000600 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f000 fa7c 	bl	800f1bc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2200      	movs	r2, #0
 800ecc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	f003 0301 	and.w	r3, r3, #1
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d00c      	beq.n	800ecee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f003 0301 	and.w	r3, r3, #1
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d007      	beq.n	800ecee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	f06f 0201 	mvn.w	r2, #1
 800ece6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ece8:	6878      	ldr	r0, [r7, #4]
 800ecea:	f7f3 ffa7 	bl	8002c3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ecee:	68bb      	ldr	r3, [r7, #8]
 800ecf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ecf4:	2b00      	cmp	r3, #0
 800ecf6:	d104      	bne.n	800ed02 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800ecf8:	68bb      	ldr	r3, [r7, #8]
 800ecfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ecfe:	2b00      	cmp	r3, #0
 800ed00:	d00c      	beq.n	800ed1c <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d007      	beq.n	800ed1c <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ed0c:	687b      	ldr	r3, [r7, #4]
 800ed0e:	681b      	ldr	r3, [r3, #0]
 800ed10:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800ed14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ed16:	6878      	ldr	r0, [r7, #4]
 800ed18:	f000 ffba 	bl	800fc90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ed1c:	68bb      	ldr	r3, [r7, #8]
 800ed1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d00c      	beq.n	800ed40 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d007      	beq.n	800ed40 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ed38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	f000 ffb2 	bl	800fca4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ed40:	68bb      	ldr	r3, [r7, #8]
 800ed42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d00c      	beq.n	800ed64 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ed4a:	68fb      	ldr	r3, [r7, #12]
 800ed4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d007      	beq.n	800ed64 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ed5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ed5e:	6878      	ldr	r0, [r7, #4]
 800ed60:	f000 fa36 	bl	800f1d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ed64:	68bb      	ldr	r3, [r7, #8]
 800ed66:	f003 0320 	and.w	r3, r3, #32
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00c      	beq.n	800ed88 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	f003 0320 	and.w	r3, r3, #32
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d007      	beq.n	800ed88 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	681b      	ldr	r3, [r3, #0]
 800ed7c:	f06f 0220 	mvn.w	r2, #32
 800ed80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	f000 ff7a 	bl	800fc7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ed88:	bf00      	nop
 800ed8a:	3710      	adds	r7, #16
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b086      	sub	sp, #24
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	60f8      	str	r0, [r7, #12]
 800ed98:	60b9      	str	r1, [r7, #8]
 800ed9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d101      	bne.n	800edae <HAL_TIM_PWM_ConfigChannel+0x1e>
 800edaa:	2302      	movs	r3, #2
 800edac:	e0ff      	b.n	800efae <HAL_TIM_PWM_ConfigChannel+0x21e>
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	2201      	movs	r2, #1
 800edb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	2b14      	cmp	r3, #20
 800edba:	f200 80f0 	bhi.w	800ef9e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800edbe:	a201      	add	r2, pc, #4	; (adr r2, 800edc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800edc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800edc4:	0800ee19 	.word	0x0800ee19
 800edc8:	0800ef9f 	.word	0x0800ef9f
 800edcc:	0800ef9f 	.word	0x0800ef9f
 800edd0:	0800ef9f 	.word	0x0800ef9f
 800edd4:	0800ee59 	.word	0x0800ee59
 800edd8:	0800ef9f 	.word	0x0800ef9f
 800eddc:	0800ef9f 	.word	0x0800ef9f
 800ede0:	0800ef9f 	.word	0x0800ef9f
 800ede4:	0800ee9b 	.word	0x0800ee9b
 800ede8:	0800ef9f 	.word	0x0800ef9f
 800edec:	0800ef9f 	.word	0x0800ef9f
 800edf0:	0800ef9f 	.word	0x0800ef9f
 800edf4:	0800eedb 	.word	0x0800eedb
 800edf8:	0800ef9f 	.word	0x0800ef9f
 800edfc:	0800ef9f 	.word	0x0800ef9f
 800ee00:	0800ef9f 	.word	0x0800ef9f
 800ee04:	0800ef1d 	.word	0x0800ef1d
 800ee08:	0800ef9f 	.word	0x0800ef9f
 800ee0c:	0800ef9f 	.word	0x0800ef9f
 800ee10:	0800ef9f 	.word	0x0800ef9f
 800ee14:	0800ef5d 	.word	0x0800ef5d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ee18:	68fb      	ldr	r3, [r7, #12]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	68b9      	ldr	r1, [r7, #8]
 800ee1e:	4618      	mov	r0, r3
 800ee20:	f000 fa86 	bl	800f330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	699a      	ldr	r2, [r3, #24]
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	f042 0208 	orr.w	r2, r2, #8
 800ee32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	699a      	ldr	r2, [r3, #24]
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	681b      	ldr	r3, [r3, #0]
 800ee3e:	f022 0204 	bic.w	r2, r2, #4
 800ee42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ee44:	68fb      	ldr	r3, [r7, #12]
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	6999      	ldr	r1, [r3, #24]
 800ee4a:	68bb      	ldr	r3, [r7, #8]
 800ee4c:	691a      	ldr	r2, [r3, #16]
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	430a      	orrs	r2, r1
 800ee54:	619a      	str	r2, [r3, #24]
      break;
 800ee56:	e0a5      	b.n	800efa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ee58:	68fb      	ldr	r3, [r7, #12]
 800ee5a:	681b      	ldr	r3, [r3, #0]
 800ee5c:	68b9      	ldr	r1, [r7, #8]
 800ee5e:	4618      	mov	r0, r3
 800ee60:	f000 faf6 	bl	800f450 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	699a      	ldr	r2, [r3, #24]
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ee72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	681b      	ldr	r3, [r3, #0]
 800ee78:	699a      	ldr	r2, [r3, #24]
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	681b      	ldr	r3, [r3, #0]
 800ee7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ee82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	6999      	ldr	r1, [r3, #24]
 800ee8a:	68bb      	ldr	r3, [r7, #8]
 800ee8c:	691b      	ldr	r3, [r3, #16]
 800ee8e:	021a      	lsls	r2, r3, #8
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	430a      	orrs	r2, r1
 800ee96:	619a      	str	r2, [r3, #24]
      break;
 800ee98:	e084      	b.n	800efa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	681b      	ldr	r3, [r3, #0]
 800ee9e:	68b9      	ldr	r1, [r7, #8]
 800eea0:	4618      	mov	r0, r3
 800eea2:	f000 fb5f 	bl	800f564 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	69da      	ldr	r2, [r3, #28]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	f042 0208 	orr.w	r2, r2, #8
 800eeb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	681b      	ldr	r3, [r3, #0]
 800eeba:	69da      	ldr	r2, [r3, #28]
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	f022 0204 	bic.w	r2, r2, #4
 800eec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	69d9      	ldr	r1, [r3, #28]
 800eecc:	68bb      	ldr	r3, [r7, #8]
 800eece:	691a      	ldr	r2, [r3, #16]
 800eed0:	68fb      	ldr	r3, [r7, #12]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	430a      	orrs	r2, r1
 800eed6:	61da      	str	r2, [r3, #28]
      break;
 800eed8:	e064      	b.n	800efa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	68b9      	ldr	r1, [r7, #8]
 800eee0:	4618      	mov	r0, r3
 800eee2:	f000 fbc7 	bl	800f674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	69da      	ldr	r2, [r3, #28]
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	69da      	ldr	r2, [r3, #28]
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ef06:	68fb      	ldr	r3, [r7, #12]
 800ef08:	681b      	ldr	r3, [r3, #0]
 800ef0a:	69d9      	ldr	r1, [r3, #28]
 800ef0c:	68bb      	ldr	r3, [r7, #8]
 800ef0e:	691b      	ldr	r3, [r3, #16]
 800ef10:	021a      	lsls	r2, r3, #8
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	430a      	orrs	r2, r1
 800ef18:	61da      	str	r2, [r3, #28]
      break;
 800ef1a:	e043      	b.n	800efa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	681b      	ldr	r3, [r3, #0]
 800ef20:	68b9      	ldr	r1, [r7, #8]
 800ef22:	4618      	mov	r0, r3
 800ef24:	f000 fc10 	bl	800f748 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	f042 0208 	orr.w	r2, r2, #8
 800ef36:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	f022 0204 	bic.w	r2, r2, #4
 800ef46:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	691a      	ldr	r2, [r3, #16]
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	681b      	ldr	r3, [r3, #0]
 800ef56:	430a      	orrs	r2, r1
 800ef58:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ef5a:	e023      	b.n	800efa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	68b9      	ldr	r1, [r7, #8]
 800ef62:	4618      	mov	r0, r3
 800ef64:	f000 fc54 	bl	800f810 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef6e:	68fb      	ldr	r3, [r7, #12]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ef76:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ef78:	68fb      	ldr	r3, [r7, #12]
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef7e:	68fb      	ldr	r3, [r7, #12]
 800ef80:	681b      	ldr	r3, [r3, #0]
 800ef82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ef86:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	691b      	ldr	r3, [r3, #16]
 800ef92:	021a      	lsls	r2, r3, #8
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	681b      	ldr	r3, [r3, #0]
 800ef98:	430a      	orrs	r2, r1
 800ef9a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ef9c:	e002      	b.n	800efa4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ef9e:	2301      	movs	r3, #1
 800efa0:	75fb      	strb	r3, [r7, #23]
      break;
 800efa2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2200      	movs	r2, #0
 800efa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800efac:	7dfb      	ldrb	r3, [r7, #23]
}
 800efae:	4618      	mov	r0, r3
 800efb0:	3718      	adds	r7, #24
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}
 800efb6:	bf00      	nop

0800efb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800efb8:	b580      	push	{r7, lr}
 800efba:	b084      	sub	sp, #16
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800efc2:	2300      	movs	r3, #0
 800efc4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d101      	bne.n	800efd4 <HAL_TIM_ConfigClockSource+0x1c>
 800efd0:	2302      	movs	r3, #2
 800efd2:	e0dc      	b.n	800f18e <HAL_TIM_ConfigClockSource+0x1d6>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	2201      	movs	r2, #1
 800efd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	2202      	movs	r2, #2
 800efe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	689b      	ldr	r3, [r3, #8]
 800efea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800efec:	68ba      	ldr	r2, [r7, #8]
 800efee:	4b6a      	ldr	r3, [pc, #424]	; (800f198 <HAL_TIM_ConfigClockSource+0x1e0>)
 800eff0:	4013      	ands	r3, r2
 800eff2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800effa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	68ba      	ldr	r2, [r7, #8]
 800f002:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800f004:	683b      	ldr	r3, [r7, #0]
 800f006:	681b      	ldr	r3, [r3, #0]
 800f008:	4a64      	ldr	r2, [pc, #400]	; (800f19c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	f000 80a9 	beq.w	800f162 <HAL_TIM_ConfigClockSource+0x1aa>
 800f010:	4a62      	ldr	r2, [pc, #392]	; (800f19c <HAL_TIM_ConfigClockSource+0x1e4>)
 800f012:	4293      	cmp	r3, r2
 800f014:	f200 80ae 	bhi.w	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f018:	4a61      	ldr	r2, [pc, #388]	; (800f1a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	f000 80a1 	beq.w	800f162 <HAL_TIM_ConfigClockSource+0x1aa>
 800f020:	4a5f      	ldr	r2, [pc, #380]	; (800f1a0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800f022:	4293      	cmp	r3, r2
 800f024:	f200 80a6 	bhi.w	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f028:	4a5e      	ldr	r2, [pc, #376]	; (800f1a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	f000 8099 	beq.w	800f162 <HAL_TIM_ConfigClockSource+0x1aa>
 800f030:	4a5c      	ldr	r2, [pc, #368]	; (800f1a4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800f032:	4293      	cmp	r3, r2
 800f034:	f200 809e 	bhi.w	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f038:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f03c:	f000 8091 	beq.w	800f162 <HAL_TIM_ConfigClockSource+0x1aa>
 800f040:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f044:	f200 8096 	bhi.w	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f048:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f04c:	f000 8089 	beq.w	800f162 <HAL_TIM_ConfigClockSource+0x1aa>
 800f050:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f054:	f200 808e 	bhi.w	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f05c:	d03e      	beq.n	800f0dc <HAL_TIM_ConfigClockSource+0x124>
 800f05e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f062:	f200 8087 	bhi.w	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f066:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f06a:	f000 8086 	beq.w	800f17a <HAL_TIM_ConfigClockSource+0x1c2>
 800f06e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f072:	d87f      	bhi.n	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f074:	2b70      	cmp	r3, #112	; 0x70
 800f076:	d01a      	beq.n	800f0ae <HAL_TIM_ConfigClockSource+0xf6>
 800f078:	2b70      	cmp	r3, #112	; 0x70
 800f07a:	d87b      	bhi.n	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f07c:	2b60      	cmp	r3, #96	; 0x60
 800f07e:	d050      	beq.n	800f122 <HAL_TIM_ConfigClockSource+0x16a>
 800f080:	2b60      	cmp	r3, #96	; 0x60
 800f082:	d877      	bhi.n	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f084:	2b50      	cmp	r3, #80	; 0x50
 800f086:	d03c      	beq.n	800f102 <HAL_TIM_ConfigClockSource+0x14a>
 800f088:	2b50      	cmp	r3, #80	; 0x50
 800f08a:	d873      	bhi.n	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f08c:	2b40      	cmp	r3, #64	; 0x40
 800f08e:	d058      	beq.n	800f142 <HAL_TIM_ConfigClockSource+0x18a>
 800f090:	2b40      	cmp	r3, #64	; 0x40
 800f092:	d86f      	bhi.n	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f094:	2b30      	cmp	r3, #48	; 0x30
 800f096:	d064      	beq.n	800f162 <HAL_TIM_ConfigClockSource+0x1aa>
 800f098:	2b30      	cmp	r3, #48	; 0x30
 800f09a:	d86b      	bhi.n	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f09c:	2b20      	cmp	r3, #32
 800f09e:	d060      	beq.n	800f162 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0a0:	2b20      	cmp	r3, #32
 800f0a2:	d867      	bhi.n	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
 800f0a4:	2b00      	cmp	r3, #0
 800f0a6:	d05c      	beq.n	800f162 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0a8:	2b10      	cmp	r3, #16
 800f0aa:	d05a      	beq.n	800f162 <HAL_TIM_ConfigClockSource+0x1aa>
 800f0ac:	e062      	b.n	800f174 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6818      	ldr	r0, [r3, #0]
 800f0b2:	683b      	ldr	r3, [r7, #0]
 800f0b4:	6899      	ldr	r1, [r3, #8]
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	685a      	ldr	r2, [r3, #4]
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	68db      	ldr	r3, [r3, #12]
 800f0be:	f000 fc8b 	bl	800f9d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	689b      	ldr	r3, [r3, #8]
 800f0c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800f0ca:	68bb      	ldr	r3, [r7, #8]
 800f0cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800f0d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	68ba      	ldr	r2, [r7, #8]
 800f0d8:	609a      	str	r2, [r3, #8]
      break;
 800f0da:	e04f      	b.n	800f17c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	6818      	ldr	r0, [r3, #0]
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	6899      	ldr	r1, [r3, #8]
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	685a      	ldr	r2, [r3, #4]
 800f0e8:	683b      	ldr	r3, [r7, #0]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	f000 fc74 	bl	800f9d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	689a      	ldr	r2, [r3, #8]
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800f0fe:	609a      	str	r2, [r3, #8]
      break;
 800f100:	e03c      	b.n	800f17c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	6818      	ldr	r0, [r3, #0]
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	6859      	ldr	r1, [r3, #4]
 800f10a:	683b      	ldr	r3, [r7, #0]
 800f10c:	68db      	ldr	r3, [r3, #12]
 800f10e:	461a      	mov	r2, r3
 800f110:	f000 fbe4 	bl	800f8dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	681b      	ldr	r3, [r3, #0]
 800f118:	2150      	movs	r1, #80	; 0x50
 800f11a:	4618      	mov	r0, r3
 800f11c:	f000 fc3e 	bl	800f99c <TIM_ITRx_SetConfig>
      break;
 800f120:	e02c      	b.n	800f17c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6818      	ldr	r0, [r3, #0]
 800f126:	683b      	ldr	r3, [r7, #0]
 800f128:	6859      	ldr	r1, [r3, #4]
 800f12a:	683b      	ldr	r3, [r7, #0]
 800f12c:	68db      	ldr	r3, [r3, #12]
 800f12e:	461a      	mov	r2, r3
 800f130:	f000 fc03 	bl	800f93a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	681b      	ldr	r3, [r3, #0]
 800f138:	2160      	movs	r1, #96	; 0x60
 800f13a:	4618      	mov	r0, r3
 800f13c:	f000 fc2e 	bl	800f99c <TIM_ITRx_SetConfig>
      break;
 800f140:	e01c      	b.n	800f17c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	6818      	ldr	r0, [r3, #0]
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	6859      	ldr	r1, [r3, #4]
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	68db      	ldr	r3, [r3, #12]
 800f14e:	461a      	mov	r2, r3
 800f150:	f000 fbc4 	bl	800f8dc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2140      	movs	r1, #64	; 0x40
 800f15a:	4618      	mov	r0, r3
 800f15c:	f000 fc1e 	bl	800f99c <TIM_ITRx_SetConfig>
      break;
 800f160:	e00c      	b.n	800f17c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	681a      	ldr	r2, [r3, #0]
 800f166:	683b      	ldr	r3, [r7, #0]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	4619      	mov	r1, r3
 800f16c:	4610      	mov	r0, r2
 800f16e:	f000 fc15 	bl	800f99c <TIM_ITRx_SetConfig>
      break;
 800f172:	e003      	b.n	800f17c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800f174:	2301      	movs	r3, #1
 800f176:	73fb      	strb	r3, [r7, #15]
      break;
 800f178:	e000      	b.n	800f17c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800f17a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2201      	movs	r2, #1
 800f180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800f18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3710      	adds	r7, #16
 800f192:	46bd      	mov	sp, r7
 800f194:	bd80      	pop	{r7, pc}
 800f196:	bf00      	nop
 800f198:	ffceff88 	.word	0xffceff88
 800f19c:	00100040 	.word	0x00100040
 800f1a0:	00100030 	.word	0x00100030
 800f1a4:	00100020 	.word	0x00100020

0800f1a8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f1a8:	b480      	push	{r7}
 800f1aa:	b083      	sub	sp, #12
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f1b0:	bf00      	nop
 800f1b2:	370c      	adds	r7, #12
 800f1b4:	46bd      	mov	sp, r7
 800f1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ba:	4770      	bx	lr

0800f1bc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f1c4:	bf00      	nop
 800f1c6:	370c      	adds	r7, #12
 800f1c8:	46bd      	mov	sp, r7
 800f1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ce:	4770      	bx	lr

0800f1d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f1d0:	b480      	push	{r7}
 800f1d2:	b083      	sub	sp, #12
 800f1d4:	af00      	add	r7, sp, #0
 800f1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f1d8:	bf00      	nop
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f1e4:	b480      	push	{r7}
 800f1e6:	b085      	sub	sp, #20
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	4a46      	ldr	r2, [pc, #280]	; (800f310 <TIM_Base_SetConfig+0x12c>)
 800f1f8:	4293      	cmp	r3, r2
 800f1fa:	d013      	beq.n	800f224 <TIM_Base_SetConfig+0x40>
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f202:	d00f      	beq.n	800f224 <TIM_Base_SetConfig+0x40>
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	4a43      	ldr	r2, [pc, #268]	; (800f314 <TIM_Base_SetConfig+0x130>)
 800f208:	4293      	cmp	r3, r2
 800f20a:	d00b      	beq.n	800f224 <TIM_Base_SetConfig+0x40>
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	4a42      	ldr	r2, [pc, #264]	; (800f318 <TIM_Base_SetConfig+0x134>)
 800f210:	4293      	cmp	r3, r2
 800f212:	d007      	beq.n	800f224 <TIM_Base_SetConfig+0x40>
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	4a41      	ldr	r2, [pc, #260]	; (800f31c <TIM_Base_SetConfig+0x138>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d003      	beq.n	800f224 <TIM_Base_SetConfig+0x40>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	4a40      	ldr	r2, [pc, #256]	; (800f320 <TIM_Base_SetConfig+0x13c>)
 800f220:	4293      	cmp	r3, r2
 800f222:	d108      	bne.n	800f236 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f224:	68fb      	ldr	r3, [r7, #12]
 800f226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f22a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f22c:	683b      	ldr	r3, [r7, #0]
 800f22e:	685b      	ldr	r3, [r3, #4]
 800f230:	68fa      	ldr	r2, [r7, #12]
 800f232:	4313      	orrs	r3, r2
 800f234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	4a35      	ldr	r2, [pc, #212]	; (800f310 <TIM_Base_SetConfig+0x12c>)
 800f23a:	4293      	cmp	r3, r2
 800f23c:	d01f      	beq.n	800f27e <TIM_Base_SetConfig+0x9a>
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f244:	d01b      	beq.n	800f27e <TIM_Base_SetConfig+0x9a>
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	4a32      	ldr	r2, [pc, #200]	; (800f314 <TIM_Base_SetConfig+0x130>)
 800f24a:	4293      	cmp	r3, r2
 800f24c:	d017      	beq.n	800f27e <TIM_Base_SetConfig+0x9a>
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4a31      	ldr	r2, [pc, #196]	; (800f318 <TIM_Base_SetConfig+0x134>)
 800f252:	4293      	cmp	r3, r2
 800f254:	d013      	beq.n	800f27e <TIM_Base_SetConfig+0x9a>
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	4a30      	ldr	r2, [pc, #192]	; (800f31c <TIM_Base_SetConfig+0x138>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d00f      	beq.n	800f27e <TIM_Base_SetConfig+0x9a>
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	4a2f      	ldr	r2, [pc, #188]	; (800f320 <TIM_Base_SetConfig+0x13c>)
 800f262:	4293      	cmp	r3, r2
 800f264:	d00b      	beq.n	800f27e <TIM_Base_SetConfig+0x9a>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	4a2e      	ldr	r2, [pc, #184]	; (800f324 <TIM_Base_SetConfig+0x140>)
 800f26a:	4293      	cmp	r3, r2
 800f26c:	d007      	beq.n	800f27e <TIM_Base_SetConfig+0x9a>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	4a2d      	ldr	r2, [pc, #180]	; (800f328 <TIM_Base_SetConfig+0x144>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d003      	beq.n	800f27e <TIM_Base_SetConfig+0x9a>
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4a2c      	ldr	r2, [pc, #176]	; (800f32c <TIM_Base_SetConfig+0x148>)
 800f27a:	4293      	cmp	r3, r2
 800f27c:	d108      	bne.n	800f290 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f284:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f286:	683b      	ldr	r3, [r7, #0]
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	68fa      	ldr	r2, [r7, #12]
 800f28c:	4313      	orrs	r3, r2
 800f28e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	695b      	ldr	r3, [r3, #20]
 800f29a:	4313      	orrs	r3, r2
 800f29c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	68fa      	ldr	r2, [r7, #12]
 800f2a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	689a      	ldr	r2, [r3, #8]
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a16      	ldr	r2, [pc, #88]	; (800f310 <TIM_Base_SetConfig+0x12c>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d00f      	beq.n	800f2dc <TIM_Base_SetConfig+0xf8>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4a18      	ldr	r2, [pc, #96]	; (800f320 <TIM_Base_SetConfig+0x13c>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d00b      	beq.n	800f2dc <TIM_Base_SetConfig+0xf8>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a17      	ldr	r2, [pc, #92]	; (800f324 <TIM_Base_SetConfig+0x140>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d007      	beq.n	800f2dc <TIM_Base_SetConfig+0xf8>
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	4a16      	ldr	r2, [pc, #88]	; (800f328 <TIM_Base_SetConfig+0x144>)
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	d003      	beq.n	800f2dc <TIM_Base_SetConfig+0xf8>
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	4a15      	ldr	r2, [pc, #84]	; (800f32c <TIM_Base_SetConfig+0x148>)
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d103      	bne.n	800f2e4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	691a      	ldr	r2, [r3, #16]
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2201      	movs	r2, #1
 800f2e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	691b      	ldr	r3, [r3, #16]
 800f2ee:	f003 0301 	and.w	r3, r3, #1
 800f2f2:	2b01      	cmp	r3, #1
 800f2f4:	d105      	bne.n	800f302 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	691b      	ldr	r3, [r3, #16]
 800f2fa:	f023 0201 	bic.w	r2, r3, #1
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	611a      	str	r2, [r3, #16]
  }
}
 800f302:	bf00      	nop
 800f304:	3714      	adds	r7, #20
 800f306:	46bd      	mov	sp, r7
 800f308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	40010000 	.word	0x40010000
 800f314:	40000400 	.word	0x40000400
 800f318:	40000800 	.word	0x40000800
 800f31c:	40000c00 	.word	0x40000c00
 800f320:	40010400 	.word	0x40010400
 800f324:	40014000 	.word	0x40014000
 800f328:	40014400 	.word	0x40014400
 800f32c:	40014800 	.word	0x40014800

0800f330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f330:	b480      	push	{r7}
 800f332:	b087      	sub	sp, #28
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
 800f338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	6a1b      	ldr	r3, [r3, #32]
 800f33e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	6a1b      	ldr	r3, [r3, #32]
 800f344:	f023 0201 	bic.w	r2, r3, #1
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	685b      	ldr	r3, [r3, #4]
 800f350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	699b      	ldr	r3, [r3, #24]
 800f356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f358:	68fa      	ldr	r2, [r7, #12]
 800f35a:	4b37      	ldr	r3, [pc, #220]	; (800f438 <TIM_OC1_SetConfig+0x108>)
 800f35c:	4013      	ands	r3, r2
 800f35e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	f023 0303 	bic.w	r3, r3, #3
 800f366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f368:	683b      	ldr	r3, [r7, #0]
 800f36a:	681b      	ldr	r3, [r3, #0]
 800f36c:	68fa      	ldr	r2, [r7, #12]
 800f36e:	4313      	orrs	r3, r2
 800f370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	f023 0302 	bic.w	r3, r3, #2
 800f378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	689b      	ldr	r3, [r3, #8]
 800f37e:	697a      	ldr	r2, [r7, #20]
 800f380:	4313      	orrs	r3, r2
 800f382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f384:	687b      	ldr	r3, [r7, #4]
 800f386:	4a2d      	ldr	r2, [pc, #180]	; (800f43c <TIM_OC1_SetConfig+0x10c>)
 800f388:	4293      	cmp	r3, r2
 800f38a:	d00f      	beq.n	800f3ac <TIM_OC1_SetConfig+0x7c>
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	4a2c      	ldr	r2, [pc, #176]	; (800f440 <TIM_OC1_SetConfig+0x110>)
 800f390:	4293      	cmp	r3, r2
 800f392:	d00b      	beq.n	800f3ac <TIM_OC1_SetConfig+0x7c>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	4a2b      	ldr	r2, [pc, #172]	; (800f444 <TIM_OC1_SetConfig+0x114>)
 800f398:	4293      	cmp	r3, r2
 800f39a:	d007      	beq.n	800f3ac <TIM_OC1_SetConfig+0x7c>
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	4a2a      	ldr	r2, [pc, #168]	; (800f448 <TIM_OC1_SetConfig+0x118>)
 800f3a0:	4293      	cmp	r3, r2
 800f3a2:	d003      	beq.n	800f3ac <TIM_OC1_SetConfig+0x7c>
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	4a29      	ldr	r2, [pc, #164]	; (800f44c <TIM_OC1_SetConfig+0x11c>)
 800f3a8:	4293      	cmp	r3, r2
 800f3aa:	d10c      	bne.n	800f3c6 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f3ac:	697b      	ldr	r3, [r7, #20]
 800f3ae:	f023 0308 	bic.w	r3, r3, #8
 800f3b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f3b4:	683b      	ldr	r3, [r7, #0]
 800f3b6:	68db      	ldr	r3, [r3, #12]
 800f3b8:	697a      	ldr	r2, [r7, #20]
 800f3ba:	4313      	orrs	r3, r2
 800f3bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	f023 0304 	bic.w	r3, r3, #4
 800f3c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a1c      	ldr	r2, [pc, #112]	; (800f43c <TIM_OC1_SetConfig+0x10c>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d00f      	beq.n	800f3ee <TIM_OC1_SetConfig+0xbe>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a1b      	ldr	r2, [pc, #108]	; (800f440 <TIM_OC1_SetConfig+0x110>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d00b      	beq.n	800f3ee <TIM_OC1_SetConfig+0xbe>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a1a      	ldr	r2, [pc, #104]	; (800f444 <TIM_OC1_SetConfig+0x114>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d007      	beq.n	800f3ee <TIM_OC1_SetConfig+0xbe>
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	4a19      	ldr	r2, [pc, #100]	; (800f448 <TIM_OC1_SetConfig+0x118>)
 800f3e2:	4293      	cmp	r3, r2
 800f3e4:	d003      	beq.n	800f3ee <TIM_OC1_SetConfig+0xbe>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4a18      	ldr	r2, [pc, #96]	; (800f44c <TIM_OC1_SetConfig+0x11c>)
 800f3ea:	4293      	cmp	r3, r2
 800f3ec:	d111      	bne.n	800f412 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f3ee:	693b      	ldr	r3, [r7, #16]
 800f3f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f3f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f3f6:	693b      	ldr	r3, [r7, #16]
 800f3f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f3fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	695b      	ldr	r3, [r3, #20]
 800f402:	693a      	ldr	r2, [r7, #16]
 800f404:	4313      	orrs	r3, r2
 800f406:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	699b      	ldr	r3, [r3, #24]
 800f40c:	693a      	ldr	r2, [r7, #16]
 800f40e:	4313      	orrs	r3, r2
 800f410:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	693a      	ldr	r2, [r7, #16]
 800f416:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	68fa      	ldr	r2, [r7, #12]
 800f41c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	685a      	ldr	r2, [r3, #4]
 800f422:	687b      	ldr	r3, [r7, #4]
 800f424:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	697a      	ldr	r2, [r7, #20]
 800f42a:	621a      	str	r2, [r3, #32]
}
 800f42c:	bf00      	nop
 800f42e:	371c      	adds	r7, #28
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr
 800f438:	fffeff8f 	.word	0xfffeff8f
 800f43c:	40010000 	.word	0x40010000
 800f440:	40010400 	.word	0x40010400
 800f444:	40014000 	.word	0x40014000
 800f448:	40014400 	.word	0x40014400
 800f44c:	40014800 	.word	0x40014800

0800f450 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f450:	b480      	push	{r7}
 800f452:	b087      	sub	sp, #28
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
 800f458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6a1b      	ldr	r3, [r3, #32]
 800f45e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6a1b      	ldr	r3, [r3, #32]
 800f464:	f023 0210 	bic.w	r2, r3, #16
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	699b      	ldr	r3, [r3, #24]
 800f476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f478:	68fa      	ldr	r2, [r7, #12]
 800f47a:	4b34      	ldr	r3, [pc, #208]	; (800f54c <TIM_OC2_SetConfig+0xfc>)
 800f47c:	4013      	ands	r3, r2
 800f47e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f486:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f488:	683b      	ldr	r3, [r7, #0]
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	021b      	lsls	r3, r3, #8
 800f48e:	68fa      	ldr	r2, [r7, #12]
 800f490:	4313      	orrs	r3, r2
 800f492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	f023 0320 	bic.w	r3, r3, #32
 800f49a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	689b      	ldr	r3, [r3, #8]
 800f4a0:	011b      	lsls	r3, r3, #4
 800f4a2:	697a      	ldr	r2, [r7, #20]
 800f4a4:	4313      	orrs	r3, r2
 800f4a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	4a29      	ldr	r2, [pc, #164]	; (800f550 <TIM_OC2_SetConfig+0x100>)
 800f4ac:	4293      	cmp	r3, r2
 800f4ae:	d003      	beq.n	800f4b8 <TIM_OC2_SetConfig+0x68>
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	4a28      	ldr	r2, [pc, #160]	; (800f554 <TIM_OC2_SetConfig+0x104>)
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d10d      	bne.n	800f4d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f4b8:	697b      	ldr	r3, [r7, #20]
 800f4ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f4be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	68db      	ldr	r3, [r3, #12]
 800f4c4:	011b      	lsls	r3, r3, #4
 800f4c6:	697a      	ldr	r2, [r7, #20]
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f4cc:	697b      	ldr	r3, [r7, #20]
 800f4ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	4a1e      	ldr	r2, [pc, #120]	; (800f550 <TIM_OC2_SetConfig+0x100>)
 800f4d8:	4293      	cmp	r3, r2
 800f4da:	d00f      	beq.n	800f4fc <TIM_OC2_SetConfig+0xac>
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	4a1d      	ldr	r2, [pc, #116]	; (800f554 <TIM_OC2_SetConfig+0x104>)
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d00b      	beq.n	800f4fc <TIM_OC2_SetConfig+0xac>
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	4a1c      	ldr	r2, [pc, #112]	; (800f558 <TIM_OC2_SetConfig+0x108>)
 800f4e8:	4293      	cmp	r3, r2
 800f4ea:	d007      	beq.n	800f4fc <TIM_OC2_SetConfig+0xac>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	4a1b      	ldr	r2, [pc, #108]	; (800f55c <TIM_OC2_SetConfig+0x10c>)
 800f4f0:	4293      	cmp	r3, r2
 800f4f2:	d003      	beq.n	800f4fc <TIM_OC2_SetConfig+0xac>
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	4a1a      	ldr	r2, [pc, #104]	; (800f560 <TIM_OC2_SetConfig+0x110>)
 800f4f8:	4293      	cmp	r3, r2
 800f4fa:	d113      	bne.n	800f524 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f4fc:	693b      	ldr	r3, [r7, #16]
 800f4fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f502:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f504:	693b      	ldr	r3, [r7, #16]
 800f506:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f50a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f50c:	683b      	ldr	r3, [r7, #0]
 800f50e:	695b      	ldr	r3, [r3, #20]
 800f510:	009b      	lsls	r3, r3, #2
 800f512:	693a      	ldr	r2, [r7, #16]
 800f514:	4313      	orrs	r3, r2
 800f516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	699b      	ldr	r3, [r3, #24]
 800f51c:	009b      	lsls	r3, r3, #2
 800f51e:	693a      	ldr	r2, [r7, #16]
 800f520:	4313      	orrs	r3, r2
 800f522:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	693a      	ldr	r2, [r7, #16]
 800f528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	68fa      	ldr	r2, [r7, #12]
 800f52e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f530:	683b      	ldr	r3, [r7, #0]
 800f532:	685a      	ldr	r2, [r3, #4]
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	697a      	ldr	r2, [r7, #20]
 800f53c:	621a      	str	r2, [r3, #32]
}
 800f53e:	bf00      	nop
 800f540:	371c      	adds	r7, #28
 800f542:	46bd      	mov	sp, r7
 800f544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f548:	4770      	bx	lr
 800f54a:	bf00      	nop
 800f54c:	feff8fff 	.word	0xfeff8fff
 800f550:	40010000 	.word	0x40010000
 800f554:	40010400 	.word	0x40010400
 800f558:	40014000 	.word	0x40014000
 800f55c:	40014400 	.word	0x40014400
 800f560:	40014800 	.word	0x40014800

0800f564 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f564:	b480      	push	{r7}
 800f566:	b087      	sub	sp, #28
 800f568:	af00      	add	r7, sp, #0
 800f56a:	6078      	str	r0, [r7, #4]
 800f56c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6a1b      	ldr	r3, [r3, #32]
 800f572:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	6a1b      	ldr	r3, [r3, #32]
 800f578:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	69db      	ldr	r3, [r3, #28]
 800f58a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f58c:	68fa      	ldr	r2, [r7, #12]
 800f58e:	4b33      	ldr	r3, [pc, #204]	; (800f65c <TIM_OC3_SetConfig+0xf8>)
 800f590:	4013      	ands	r3, r2
 800f592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	f023 0303 	bic.w	r3, r3, #3
 800f59a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f59c:	683b      	ldr	r3, [r7, #0]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	68fa      	ldr	r2, [r7, #12]
 800f5a2:	4313      	orrs	r3, r2
 800f5a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f5a6:	697b      	ldr	r3, [r7, #20]
 800f5a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f5ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	689b      	ldr	r3, [r3, #8]
 800f5b2:	021b      	lsls	r3, r3, #8
 800f5b4:	697a      	ldr	r2, [r7, #20]
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4a28      	ldr	r2, [pc, #160]	; (800f660 <TIM_OC3_SetConfig+0xfc>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d003      	beq.n	800f5ca <TIM_OC3_SetConfig+0x66>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a27      	ldr	r2, [pc, #156]	; (800f664 <TIM_OC3_SetConfig+0x100>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d10d      	bne.n	800f5e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f5ca:	697b      	ldr	r3, [r7, #20]
 800f5cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f5d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f5d2:	683b      	ldr	r3, [r7, #0]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	021b      	lsls	r3, r3, #8
 800f5d8:	697a      	ldr	r2, [r7, #20]
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f5de:	697b      	ldr	r3, [r7, #20]
 800f5e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f5e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	4a1d      	ldr	r2, [pc, #116]	; (800f660 <TIM_OC3_SetConfig+0xfc>)
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	d00f      	beq.n	800f60e <TIM_OC3_SetConfig+0xaa>
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	4a1c      	ldr	r2, [pc, #112]	; (800f664 <TIM_OC3_SetConfig+0x100>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d00b      	beq.n	800f60e <TIM_OC3_SetConfig+0xaa>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4a1b      	ldr	r2, [pc, #108]	; (800f668 <TIM_OC3_SetConfig+0x104>)
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	d007      	beq.n	800f60e <TIM_OC3_SetConfig+0xaa>
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4a1a      	ldr	r2, [pc, #104]	; (800f66c <TIM_OC3_SetConfig+0x108>)
 800f602:	4293      	cmp	r3, r2
 800f604:	d003      	beq.n	800f60e <TIM_OC3_SetConfig+0xaa>
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	4a19      	ldr	r2, [pc, #100]	; (800f670 <TIM_OC3_SetConfig+0x10c>)
 800f60a:	4293      	cmp	r3, r2
 800f60c:	d113      	bne.n	800f636 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f60e:	693b      	ldr	r3, [r7, #16]
 800f610:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f614:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f616:	693b      	ldr	r3, [r7, #16]
 800f618:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f61c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	695b      	ldr	r3, [r3, #20]
 800f622:	011b      	lsls	r3, r3, #4
 800f624:	693a      	ldr	r2, [r7, #16]
 800f626:	4313      	orrs	r3, r2
 800f628:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f62a:	683b      	ldr	r3, [r7, #0]
 800f62c:	699b      	ldr	r3, [r3, #24]
 800f62e:	011b      	lsls	r3, r3, #4
 800f630:	693a      	ldr	r2, [r7, #16]
 800f632:	4313      	orrs	r3, r2
 800f634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	693a      	ldr	r2, [r7, #16]
 800f63a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	68fa      	ldr	r2, [r7, #12]
 800f640:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	685a      	ldr	r2, [r3, #4]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	697a      	ldr	r2, [r7, #20]
 800f64e:	621a      	str	r2, [r3, #32]
}
 800f650:	bf00      	nop
 800f652:	371c      	adds	r7, #28
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	fffeff8f 	.word	0xfffeff8f
 800f660:	40010000 	.word	0x40010000
 800f664:	40010400 	.word	0x40010400
 800f668:	40014000 	.word	0x40014000
 800f66c:	40014400 	.word	0x40014400
 800f670:	40014800 	.word	0x40014800

0800f674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f674:	b480      	push	{r7}
 800f676:	b087      	sub	sp, #28
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	6a1b      	ldr	r3, [r3, #32]
 800f682:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	6a1b      	ldr	r3, [r3, #32]
 800f688:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	685b      	ldr	r3, [r3, #4]
 800f694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	69db      	ldr	r3, [r3, #28]
 800f69a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f69c:	68fa      	ldr	r2, [r7, #12]
 800f69e:	4b24      	ldr	r3, [pc, #144]	; (800f730 <TIM_OC4_SetConfig+0xbc>)
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f6aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f6ac:	683b      	ldr	r3, [r7, #0]
 800f6ae:	681b      	ldr	r3, [r3, #0]
 800f6b0:	021b      	lsls	r3, r3, #8
 800f6b2:	68fa      	ldr	r2, [r7, #12]
 800f6b4:	4313      	orrs	r3, r2
 800f6b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f6b8:	693b      	ldr	r3, [r7, #16]
 800f6ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f6be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f6c0:	683b      	ldr	r3, [r7, #0]
 800f6c2:	689b      	ldr	r3, [r3, #8]
 800f6c4:	031b      	lsls	r3, r3, #12
 800f6c6:	693a      	ldr	r2, [r7, #16]
 800f6c8:	4313      	orrs	r3, r2
 800f6ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	4a19      	ldr	r2, [pc, #100]	; (800f734 <TIM_OC4_SetConfig+0xc0>)
 800f6d0:	4293      	cmp	r3, r2
 800f6d2:	d00f      	beq.n	800f6f4 <TIM_OC4_SetConfig+0x80>
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	4a18      	ldr	r2, [pc, #96]	; (800f738 <TIM_OC4_SetConfig+0xc4>)
 800f6d8:	4293      	cmp	r3, r2
 800f6da:	d00b      	beq.n	800f6f4 <TIM_OC4_SetConfig+0x80>
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	4a17      	ldr	r2, [pc, #92]	; (800f73c <TIM_OC4_SetConfig+0xc8>)
 800f6e0:	4293      	cmp	r3, r2
 800f6e2:	d007      	beq.n	800f6f4 <TIM_OC4_SetConfig+0x80>
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	4a16      	ldr	r2, [pc, #88]	; (800f740 <TIM_OC4_SetConfig+0xcc>)
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	d003      	beq.n	800f6f4 <TIM_OC4_SetConfig+0x80>
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	4a15      	ldr	r2, [pc, #84]	; (800f744 <TIM_OC4_SetConfig+0xd0>)
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d109      	bne.n	800f708 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f6f4:	697b      	ldr	r3, [r7, #20]
 800f6f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f6fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	695b      	ldr	r3, [r3, #20]
 800f700:	019b      	lsls	r3, r3, #6
 800f702:	697a      	ldr	r2, [r7, #20]
 800f704:	4313      	orrs	r3, r2
 800f706:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	697a      	ldr	r2, [r7, #20]
 800f70c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	68fa      	ldr	r2, [r7, #12]
 800f712:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f714:	683b      	ldr	r3, [r7, #0]
 800f716:	685a      	ldr	r2, [r3, #4]
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	693a      	ldr	r2, [r7, #16]
 800f720:	621a      	str	r2, [r3, #32]
}
 800f722:	bf00      	nop
 800f724:	371c      	adds	r7, #28
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr
 800f72e:	bf00      	nop
 800f730:	feff8fff 	.word	0xfeff8fff
 800f734:	40010000 	.word	0x40010000
 800f738:	40010400 	.word	0x40010400
 800f73c:	40014000 	.word	0x40014000
 800f740:	40014400 	.word	0x40014400
 800f744:	40014800 	.word	0x40014800

0800f748 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f748:	b480      	push	{r7}
 800f74a:	b087      	sub	sp, #28
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6078      	str	r0, [r7, #4]
 800f750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	6a1b      	ldr	r3, [r3, #32]
 800f756:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	6a1b      	ldr	r3, [r3, #32]
 800f75c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	685b      	ldr	r3, [r3, #4]
 800f768:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f770:	68fa      	ldr	r2, [r7, #12]
 800f772:	4b21      	ldr	r3, [pc, #132]	; (800f7f8 <TIM_OC5_SetConfig+0xb0>)
 800f774:	4013      	ands	r3, r2
 800f776:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f778:	683b      	ldr	r3, [r7, #0]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	4313      	orrs	r3, r2
 800f780:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f782:	693b      	ldr	r3, [r7, #16]
 800f784:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f788:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f78a:	683b      	ldr	r3, [r7, #0]
 800f78c:	689b      	ldr	r3, [r3, #8]
 800f78e:	041b      	lsls	r3, r3, #16
 800f790:	693a      	ldr	r2, [r7, #16]
 800f792:	4313      	orrs	r3, r2
 800f794:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	4a18      	ldr	r2, [pc, #96]	; (800f7fc <TIM_OC5_SetConfig+0xb4>)
 800f79a:	4293      	cmp	r3, r2
 800f79c:	d00f      	beq.n	800f7be <TIM_OC5_SetConfig+0x76>
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	4a17      	ldr	r2, [pc, #92]	; (800f800 <TIM_OC5_SetConfig+0xb8>)
 800f7a2:	4293      	cmp	r3, r2
 800f7a4:	d00b      	beq.n	800f7be <TIM_OC5_SetConfig+0x76>
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	4a16      	ldr	r2, [pc, #88]	; (800f804 <TIM_OC5_SetConfig+0xbc>)
 800f7aa:	4293      	cmp	r3, r2
 800f7ac:	d007      	beq.n	800f7be <TIM_OC5_SetConfig+0x76>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	4a15      	ldr	r2, [pc, #84]	; (800f808 <TIM_OC5_SetConfig+0xc0>)
 800f7b2:	4293      	cmp	r3, r2
 800f7b4:	d003      	beq.n	800f7be <TIM_OC5_SetConfig+0x76>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	4a14      	ldr	r2, [pc, #80]	; (800f80c <TIM_OC5_SetConfig+0xc4>)
 800f7ba:	4293      	cmp	r3, r2
 800f7bc:	d109      	bne.n	800f7d2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f7be:	697b      	ldr	r3, [r7, #20]
 800f7c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f7c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	695b      	ldr	r3, [r3, #20]
 800f7ca:	021b      	lsls	r3, r3, #8
 800f7cc:	697a      	ldr	r2, [r7, #20]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	697a      	ldr	r2, [r7, #20]
 800f7d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	68fa      	ldr	r2, [r7, #12]
 800f7dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	685a      	ldr	r2, [r3, #4]
 800f7e2:	687b      	ldr	r3, [r7, #4]
 800f7e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	693a      	ldr	r2, [r7, #16]
 800f7ea:	621a      	str	r2, [r3, #32]
}
 800f7ec:	bf00      	nop
 800f7ee:	371c      	adds	r7, #28
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr
 800f7f8:	fffeff8f 	.word	0xfffeff8f
 800f7fc:	40010000 	.word	0x40010000
 800f800:	40010400 	.word	0x40010400
 800f804:	40014000 	.word	0x40014000
 800f808:	40014400 	.word	0x40014400
 800f80c:	40014800 	.word	0x40014800

0800f810 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f810:	b480      	push	{r7}
 800f812:	b087      	sub	sp, #28
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	6a1b      	ldr	r3, [r3, #32]
 800f81e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f820:	687b      	ldr	r3, [r7, #4]
 800f822:	6a1b      	ldr	r3, [r3, #32]
 800f824:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f828:	687b      	ldr	r3, [r7, #4]
 800f82a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f838:	68fa      	ldr	r2, [r7, #12]
 800f83a:	4b22      	ldr	r3, [pc, #136]	; (800f8c4 <TIM_OC6_SetConfig+0xb4>)
 800f83c:	4013      	ands	r3, r2
 800f83e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	681b      	ldr	r3, [r3, #0]
 800f844:	021b      	lsls	r3, r3, #8
 800f846:	68fa      	ldr	r2, [r7, #12]
 800f848:	4313      	orrs	r3, r2
 800f84a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f84c:	693b      	ldr	r3, [r7, #16]
 800f84e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f852:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	689b      	ldr	r3, [r3, #8]
 800f858:	051b      	lsls	r3, r3, #20
 800f85a:	693a      	ldr	r2, [r7, #16]
 800f85c:	4313      	orrs	r3, r2
 800f85e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a19      	ldr	r2, [pc, #100]	; (800f8c8 <TIM_OC6_SetConfig+0xb8>)
 800f864:	4293      	cmp	r3, r2
 800f866:	d00f      	beq.n	800f888 <TIM_OC6_SetConfig+0x78>
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	4a18      	ldr	r2, [pc, #96]	; (800f8cc <TIM_OC6_SetConfig+0xbc>)
 800f86c:	4293      	cmp	r3, r2
 800f86e:	d00b      	beq.n	800f888 <TIM_OC6_SetConfig+0x78>
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	4a17      	ldr	r2, [pc, #92]	; (800f8d0 <TIM_OC6_SetConfig+0xc0>)
 800f874:	4293      	cmp	r3, r2
 800f876:	d007      	beq.n	800f888 <TIM_OC6_SetConfig+0x78>
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4a16      	ldr	r2, [pc, #88]	; (800f8d4 <TIM_OC6_SetConfig+0xc4>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d003      	beq.n	800f888 <TIM_OC6_SetConfig+0x78>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	4a15      	ldr	r2, [pc, #84]	; (800f8d8 <TIM_OC6_SetConfig+0xc8>)
 800f884:	4293      	cmp	r3, r2
 800f886:	d109      	bne.n	800f89c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f88e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	695b      	ldr	r3, [r3, #20]
 800f894:	029b      	lsls	r3, r3, #10
 800f896:	697a      	ldr	r2, [r7, #20]
 800f898:	4313      	orrs	r3, r2
 800f89a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	697a      	ldr	r2, [r7, #20]
 800f8a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	68fa      	ldr	r2, [r7, #12]
 800f8a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f8a8:	683b      	ldr	r3, [r7, #0]
 800f8aa:	685a      	ldr	r2, [r3, #4]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	693a      	ldr	r2, [r7, #16]
 800f8b4:	621a      	str	r2, [r3, #32]
}
 800f8b6:	bf00      	nop
 800f8b8:	371c      	adds	r7, #28
 800f8ba:	46bd      	mov	sp, r7
 800f8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8c0:	4770      	bx	lr
 800f8c2:	bf00      	nop
 800f8c4:	feff8fff 	.word	0xfeff8fff
 800f8c8:	40010000 	.word	0x40010000
 800f8cc:	40010400 	.word	0x40010400
 800f8d0:	40014000 	.word	0x40014000
 800f8d4:	40014400 	.word	0x40014400
 800f8d8:	40014800 	.word	0x40014800

0800f8dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f8dc:	b480      	push	{r7}
 800f8de:	b087      	sub	sp, #28
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f8e8:	68fb      	ldr	r3, [r7, #12]
 800f8ea:	6a1b      	ldr	r3, [r3, #32]
 800f8ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f8ee:	68fb      	ldr	r3, [r7, #12]
 800f8f0:	6a1b      	ldr	r3, [r3, #32]
 800f8f2:	f023 0201 	bic.w	r2, r3, #1
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	699b      	ldr	r3, [r3, #24]
 800f8fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f900:	693b      	ldr	r3, [r7, #16]
 800f902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	011b      	lsls	r3, r3, #4
 800f90c:	693a      	ldr	r2, [r7, #16]
 800f90e:	4313      	orrs	r3, r2
 800f910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f912:	697b      	ldr	r3, [r7, #20]
 800f914:	f023 030a 	bic.w	r3, r3, #10
 800f918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f91a:	697a      	ldr	r2, [r7, #20]
 800f91c:	68bb      	ldr	r3, [r7, #8]
 800f91e:	4313      	orrs	r3, r2
 800f920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	693a      	ldr	r2, [r7, #16]
 800f926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	697a      	ldr	r2, [r7, #20]
 800f92c:	621a      	str	r2, [r3, #32]
}
 800f92e:	bf00      	nop
 800f930:	371c      	adds	r7, #28
 800f932:	46bd      	mov	sp, r7
 800f934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f938:	4770      	bx	lr

0800f93a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f93a:	b480      	push	{r7}
 800f93c:	b087      	sub	sp, #28
 800f93e:	af00      	add	r7, sp, #0
 800f940:	60f8      	str	r0, [r7, #12]
 800f942:	60b9      	str	r1, [r7, #8]
 800f944:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	6a1b      	ldr	r3, [r3, #32]
 800f94a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	6a1b      	ldr	r3, [r3, #32]
 800f950:	f023 0210 	bic.w	r2, r3, #16
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	699b      	ldr	r3, [r3, #24]
 800f95c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f95e:	693b      	ldr	r3, [r7, #16]
 800f960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	031b      	lsls	r3, r3, #12
 800f96a:	693a      	ldr	r2, [r7, #16]
 800f96c:	4313      	orrs	r3, r2
 800f96e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f970:	697b      	ldr	r3, [r7, #20]
 800f972:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f976:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f978:	68bb      	ldr	r3, [r7, #8]
 800f97a:	011b      	lsls	r3, r3, #4
 800f97c:	697a      	ldr	r2, [r7, #20]
 800f97e:	4313      	orrs	r3, r2
 800f980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	693a      	ldr	r2, [r7, #16]
 800f986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	697a      	ldr	r2, [r7, #20]
 800f98c:	621a      	str	r2, [r3, #32]
}
 800f98e:	bf00      	nop
 800f990:	371c      	adds	r7, #28
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
	...

0800f99c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f99c:	b480      	push	{r7}
 800f99e:	b085      	sub	sp, #20
 800f9a0:	af00      	add	r7, sp, #0
 800f9a2:	6078      	str	r0, [r7, #4]
 800f9a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	689b      	ldr	r3, [r3, #8]
 800f9aa:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f9ac:	68fa      	ldr	r2, [r7, #12]
 800f9ae:	4b09      	ldr	r3, [pc, #36]	; (800f9d4 <TIM_ITRx_SetConfig+0x38>)
 800f9b0:	4013      	ands	r3, r2
 800f9b2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f9b4:	683a      	ldr	r2, [r7, #0]
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	f043 0307 	orr.w	r3, r3, #7
 800f9be:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	68fa      	ldr	r2, [r7, #12]
 800f9c4:	609a      	str	r2, [r3, #8]
}
 800f9c6:	bf00      	nop
 800f9c8:	3714      	adds	r7, #20
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d0:	4770      	bx	lr
 800f9d2:	bf00      	nop
 800f9d4:	ffcfff8f 	.word	0xffcfff8f

0800f9d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f9d8:	b480      	push	{r7}
 800f9da:	b087      	sub	sp, #28
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	60f8      	str	r0, [r7, #12]
 800f9e0:	60b9      	str	r1, [r7, #8]
 800f9e2:	607a      	str	r2, [r7, #4]
 800f9e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	689b      	ldr	r3, [r3, #8]
 800f9ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f9ec:	697b      	ldr	r3, [r7, #20]
 800f9ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f9f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f9f4:	683b      	ldr	r3, [r7, #0]
 800f9f6:	021a      	lsls	r2, r3, #8
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	431a      	orrs	r2, r3
 800f9fc:	68bb      	ldr	r3, [r7, #8]
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	697a      	ldr	r2, [r7, #20]
 800fa02:	4313      	orrs	r3, r2
 800fa04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	697a      	ldr	r2, [r7, #20]
 800fa0a:	609a      	str	r2, [r3, #8]
}
 800fa0c:	bf00      	nop
 800fa0e:	371c      	adds	r7, #28
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fa18:	b480      	push	{r7}
 800fa1a:	b087      	sub	sp, #28
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	60f8      	str	r0, [r7, #12]
 800fa20:	60b9      	str	r1, [r7, #8]
 800fa22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fa24:	68bb      	ldr	r3, [r7, #8]
 800fa26:	f003 031f 	and.w	r3, r3, #31
 800fa2a:	2201      	movs	r2, #1
 800fa2c:	fa02 f303 	lsl.w	r3, r2, r3
 800fa30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	6a1a      	ldr	r2, [r3, #32]
 800fa36:	697b      	ldr	r3, [r7, #20]
 800fa38:	43db      	mvns	r3, r3
 800fa3a:	401a      	ands	r2, r3
 800fa3c:	68fb      	ldr	r3, [r7, #12]
 800fa3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fa40:	68fb      	ldr	r3, [r7, #12]
 800fa42:	6a1a      	ldr	r2, [r3, #32]
 800fa44:	68bb      	ldr	r3, [r7, #8]
 800fa46:	f003 031f 	and.w	r3, r3, #31
 800fa4a:	6879      	ldr	r1, [r7, #4]
 800fa4c:	fa01 f303 	lsl.w	r3, r1, r3
 800fa50:	431a      	orrs	r2, r3
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	621a      	str	r2, [r3, #32]
}
 800fa56:	bf00      	nop
 800fa58:	371c      	adds	r7, #28
 800fa5a:	46bd      	mov	sp, r7
 800fa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa60:	4770      	bx	lr
	...

0800fa64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d101      	bne.n	800fa7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fa78:	2302      	movs	r3, #2
 800fa7a:	e06d      	b.n	800fb58 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2201      	movs	r2, #1
 800fa80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	2202      	movs	r2, #2
 800fa88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fa94:	687b      	ldr	r3, [r7, #4]
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	689b      	ldr	r3, [r3, #8]
 800fa9a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	681b      	ldr	r3, [r3, #0]
 800faa0:	4a30      	ldr	r2, [pc, #192]	; (800fb64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800faa2:	4293      	cmp	r3, r2
 800faa4:	d004      	beq.n	800fab0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	681b      	ldr	r3, [r3, #0]
 800faaa:	4a2f      	ldr	r2, [pc, #188]	; (800fb68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800faac:	4293      	cmp	r3, r2
 800faae:	d108      	bne.n	800fac2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fab6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fab8:	683b      	ldr	r3, [r7, #0]
 800faba:	685b      	ldr	r3, [r3, #4]
 800fabc:	68fa      	ldr	r2, [r7, #12]
 800fabe:	4313      	orrs	r3, r2
 800fac0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fac2:	68fb      	ldr	r3, [r7, #12]
 800fac4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fac8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	68fa      	ldr	r2, [r7, #12]
 800fad0:	4313      	orrs	r3, r2
 800fad2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	68fa      	ldr	r2, [r7, #12]
 800fada:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	4a20      	ldr	r2, [pc, #128]	; (800fb64 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800fae2:	4293      	cmp	r3, r2
 800fae4:	d022      	beq.n	800fb2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800faee:	d01d      	beq.n	800fb2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	681b      	ldr	r3, [r3, #0]
 800faf4:	4a1d      	ldr	r2, [pc, #116]	; (800fb6c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800faf6:	4293      	cmp	r3, r2
 800faf8:	d018      	beq.n	800fb2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	4a1c      	ldr	r2, [pc, #112]	; (800fb70 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800fb00:	4293      	cmp	r3, r2
 800fb02:	d013      	beq.n	800fb2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	4a1a      	ldr	r2, [pc, #104]	; (800fb74 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	d00e      	beq.n	800fb2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	4a15      	ldr	r2, [pc, #84]	; (800fb68 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800fb14:	4293      	cmp	r3, r2
 800fb16:	d009      	beq.n	800fb2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	4a16      	ldr	r2, [pc, #88]	; (800fb78 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fb1e:	4293      	cmp	r3, r2
 800fb20:	d004      	beq.n	800fb2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	681b      	ldr	r3, [r3, #0]
 800fb26:	4a15      	ldr	r2, [pc, #84]	; (800fb7c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fb28:	4293      	cmp	r3, r2
 800fb2a:	d10c      	bne.n	800fb46 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fb2c:	68bb      	ldr	r3, [r7, #8]
 800fb2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fb32:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fb34:	683b      	ldr	r3, [r7, #0]
 800fb36:	689b      	ldr	r3, [r3, #8]
 800fb38:	68ba      	ldr	r2, [r7, #8]
 800fb3a:	4313      	orrs	r3, r2
 800fb3c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fb3e:	687b      	ldr	r3, [r7, #4]
 800fb40:	681b      	ldr	r3, [r3, #0]
 800fb42:	68ba      	ldr	r2, [r7, #8]
 800fb44:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	2201      	movs	r2, #1
 800fb4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	2200      	movs	r2, #0
 800fb52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fb56:	2300      	movs	r3, #0
}
 800fb58:	4618      	mov	r0, r3
 800fb5a:	3714      	adds	r7, #20
 800fb5c:	46bd      	mov	sp, r7
 800fb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb62:	4770      	bx	lr
 800fb64:	40010000 	.word	0x40010000
 800fb68:	40010400 	.word	0x40010400
 800fb6c:	40000400 	.word	0x40000400
 800fb70:	40000800 	.word	0x40000800
 800fb74:	40000c00 	.word	0x40000c00
 800fb78:	40001800 	.word	0x40001800
 800fb7c:	40014000 	.word	0x40014000

0800fb80 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fb80:	b480      	push	{r7}
 800fb82:	b085      	sub	sp, #20
 800fb84:	af00      	add	r7, sp, #0
 800fb86:	6078      	str	r0, [r7, #4]
 800fb88:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb94:	2b01      	cmp	r3, #1
 800fb96:	d101      	bne.n	800fb9c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fb98:	2302      	movs	r3, #2
 800fb9a:	e065      	b.n	800fc68 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	2201      	movs	r2, #1
 800fba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fbaa:	683b      	ldr	r3, [r7, #0]
 800fbac:	68db      	ldr	r3, [r3, #12]
 800fbae:	4313      	orrs	r3, r2
 800fbb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fbb2:	68fb      	ldr	r3, [r7, #12]
 800fbb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fbb8:	683b      	ldr	r3, [r7, #0]
 800fbba:	689b      	ldr	r3, [r3, #8]
 800fbbc:	4313      	orrs	r3, r2
 800fbbe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fbc6:	683b      	ldr	r3, [r7, #0]
 800fbc8:	685b      	ldr	r3, [r3, #4]
 800fbca:	4313      	orrs	r3, r2
 800fbcc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fbd4:	683b      	ldr	r3, [r7, #0]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	4313      	orrs	r3, r2
 800fbda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	691b      	ldr	r3, [r3, #16]
 800fbe6:	4313      	orrs	r3, r2
 800fbe8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fbf0:	683b      	ldr	r3, [r7, #0]
 800fbf2:	695b      	ldr	r3, [r3, #20]
 800fbf4:	4313      	orrs	r3, r2
 800fbf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc02:	4313      	orrs	r3, r2
 800fc04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	699b      	ldr	r3, [r3, #24]
 800fc10:	041b      	lsls	r3, r3, #16
 800fc12:	4313      	orrs	r3, r2
 800fc14:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	4a16      	ldr	r2, [pc, #88]	; (800fc74 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fc1c:	4293      	cmp	r3, r2
 800fc1e:	d004      	beq.n	800fc2a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	681b      	ldr	r3, [r3, #0]
 800fc24:	4a14      	ldr	r2, [pc, #80]	; (800fc78 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fc26:	4293      	cmp	r3, r2
 800fc28:	d115      	bne.n	800fc56 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fc2a:	68fb      	ldr	r3, [r7, #12]
 800fc2c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fc30:	683b      	ldr	r3, [r7, #0]
 800fc32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc34:	051b      	lsls	r3, r3, #20
 800fc36:	4313      	orrs	r3, r2
 800fc38:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	69db      	ldr	r3, [r3, #28]
 800fc44:	4313      	orrs	r3, r2
 800fc46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fc4e:	683b      	ldr	r3, [r7, #0]
 800fc50:	6a1b      	ldr	r3, [r3, #32]
 800fc52:	4313      	orrs	r3, r2
 800fc54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2200      	movs	r2, #0
 800fc62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc66:	2300      	movs	r3, #0
}
 800fc68:	4618      	mov	r0, r3
 800fc6a:	3714      	adds	r7, #20
 800fc6c:	46bd      	mov	sp, r7
 800fc6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc72:	4770      	bx	lr
 800fc74:	40010000 	.word	0x40010000
 800fc78:	40010400 	.word	0x40010400

0800fc7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc98:	bf00      	nop
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fcac:	bf00      	nop
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	d101      	bne.n	800fcca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fcc6:	2301      	movs	r3, #1
 800fcc8:	e042      	b.n	800fd50 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d106      	bne.n	800fce2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2200      	movs	r2, #0
 800fcd8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fcdc:	6878      	ldr	r0, [r7, #4]
 800fcde:	f7f3 fbc9 	bl	8003474 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2224      	movs	r2, #36	; 0x24
 800fce6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	681b      	ldr	r3, [r3, #0]
 800fcee:	681a      	ldr	r2, [r3, #0]
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	f022 0201 	bic.w	r2, r2, #1
 800fcf8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d002      	beq.n	800fd08 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f001 fb8c 	bl	8011420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd08:	6878      	ldr	r0, [r7, #4]
 800fd0a:	f000 fe21 	bl	8010950 <UART_SetConfig>
 800fd0e:	4603      	mov	r3, r0
 800fd10:	2b01      	cmp	r3, #1
 800fd12:	d101      	bne.n	800fd18 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fd14:	2301      	movs	r3, #1
 800fd16:	e01b      	b.n	800fd50 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	685a      	ldr	r2, [r3, #4]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fd26:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	689a      	ldr	r2, [r3, #8]
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fd36:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	681b      	ldr	r3, [r3, #0]
 800fd3c:	681a      	ldr	r2, [r3, #0]
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	681b      	ldr	r3, [r3, #0]
 800fd42:	f042 0201 	orr.w	r2, r2, #1
 800fd46:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f001 fc0b 	bl	8011564 <UART_CheckIdleState>
 800fd4e:	4603      	mov	r3, r0
}
 800fd50:	4618      	mov	r0, r3
 800fd52:	3708      	adds	r7, #8
 800fd54:	46bd      	mov	sp, r7
 800fd56:	bd80      	pop	{r7, pc}

0800fd58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fd58:	b580      	push	{r7, lr}
 800fd5a:	b08a      	sub	sp, #40	; 0x28
 800fd5c:	af02      	add	r7, sp, #8
 800fd5e:	60f8      	str	r0, [r7, #12]
 800fd60:	60b9      	str	r1, [r7, #8]
 800fd62:	603b      	str	r3, [r7, #0]
 800fd64:	4613      	mov	r3, r2
 800fd66:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fd6e:	2b20      	cmp	r3, #32
 800fd70:	d17b      	bne.n	800fe6a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fd72:	68bb      	ldr	r3, [r7, #8]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d002      	beq.n	800fd7e <HAL_UART_Transmit+0x26>
 800fd78:	88fb      	ldrh	r3, [r7, #6]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d101      	bne.n	800fd82 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fd7e:	2301      	movs	r3, #1
 800fd80:	e074      	b.n	800fe6c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	2200      	movs	r2, #0
 800fd86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2221      	movs	r2, #33	; 0x21
 800fd8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fd92:	f7f3 fee3 	bl	8003b5c <HAL_GetTick>
 800fd96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fd98:	68fb      	ldr	r3, [r7, #12]
 800fd9a:	88fa      	ldrh	r2, [r7, #6]
 800fd9c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	88fa      	ldrh	r2, [r7, #6]
 800fda4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	689b      	ldr	r3, [r3, #8]
 800fdac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdb0:	d108      	bne.n	800fdc4 <HAL_UART_Transmit+0x6c>
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	691b      	ldr	r3, [r3, #16]
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	d104      	bne.n	800fdc4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fdba:	2300      	movs	r3, #0
 800fdbc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fdbe:	68bb      	ldr	r3, [r7, #8]
 800fdc0:	61bb      	str	r3, [r7, #24]
 800fdc2:	e003      	b.n	800fdcc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fdc4:	68bb      	ldr	r3, [r7, #8]
 800fdc6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fdc8:	2300      	movs	r3, #0
 800fdca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fdcc:	e030      	b.n	800fe30 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fdce:	683b      	ldr	r3, [r7, #0]
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	2180      	movs	r1, #128	; 0x80
 800fdd8:	68f8      	ldr	r0, [r7, #12]
 800fdda:	f001 fc6d 	bl	80116b8 <UART_WaitOnFlagUntilTimeout>
 800fdde:	4603      	mov	r3, r0
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d005      	beq.n	800fdf0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	2220      	movs	r2, #32
 800fde8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fdec:	2303      	movs	r3, #3
 800fdee:	e03d      	b.n	800fe6c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fdf0:	69fb      	ldr	r3, [r7, #28]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d10b      	bne.n	800fe0e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fdf6:	69bb      	ldr	r3, [r7, #24]
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fe04:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fe06:	69bb      	ldr	r3, [r7, #24]
 800fe08:	3302      	adds	r3, #2
 800fe0a:	61bb      	str	r3, [r7, #24]
 800fe0c:	e007      	b.n	800fe1e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fe0e:	69fb      	ldr	r3, [r7, #28]
 800fe10:	781a      	ldrb	r2, [r3, #0]
 800fe12:	68fb      	ldr	r3, [r7, #12]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fe18:	69fb      	ldr	r3, [r7, #28]
 800fe1a:	3301      	adds	r3, #1
 800fe1c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fe1e:	68fb      	ldr	r3, [r7, #12]
 800fe20:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	3b01      	subs	r3, #1
 800fe28:	b29a      	uxth	r2, r3
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fe36:	b29b      	uxth	r3, r3
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1c8      	bne.n	800fdce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fe3c:	683b      	ldr	r3, [r7, #0]
 800fe3e:	9300      	str	r3, [sp, #0]
 800fe40:	697b      	ldr	r3, [r7, #20]
 800fe42:	2200      	movs	r2, #0
 800fe44:	2140      	movs	r1, #64	; 0x40
 800fe46:	68f8      	ldr	r0, [r7, #12]
 800fe48:	f001 fc36 	bl	80116b8 <UART_WaitOnFlagUntilTimeout>
 800fe4c:	4603      	mov	r3, r0
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d005      	beq.n	800fe5e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fe52:	68fb      	ldr	r3, [r7, #12]
 800fe54:	2220      	movs	r2, #32
 800fe56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fe5a:	2303      	movs	r3, #3
 800fe5c:	e006      	b.n	800fe6c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	2220      	movs	r2, #32
 800fe62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fe66:	2300      	movs	r3, #0
 800fe68:	e000      	b.n	800fe6c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fe6a:	2302      	movs	r3, #2
  }
}
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	3720      	adds	r7, #32
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b08a      	sub	sp, #40	; 0x28
 800fe78:	af02      	add	r7, sp, #8
 800fe7a:	60f8      	str	r0, [r7, #12]
 800fe7c:	60b9      	str	r1, [r7, #8]
 800fe7e:	603b      	str	r3, [r7, #0]
 800fe80:	4613      	mov	r3, r2
 800fe82:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe84:	68fb      	ldr	r3, [r7, #12]
 800fe86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe8a:	2b20      	cmp	r3, #32
 800fe8c:	f040 80b5 	bne.w	800fffa <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d002      	beq.n	800fe9c <HAL_UART_Receive+0x28>
 800fe96:	88fb      	ldrh	r3, [r7, #6]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d101      	bne.n	800fea0 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	e0ad      	b.n	800fffc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fea0:	68fb      	ldr	r3, [r7, #12]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	2222      	movs	r2, #34	; 0x22
 800feac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800feb0:	68fb      	ldr	r3, [r7, #12]
 800feb2:	2200      	movs	r2, #0
 800feb4:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800feb6:	f7f3 fe51 	bl	8003b5c <HAL_GetTick>
 800feba:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800febc:	68fb      	ldr	r3, [r7, #12]
 800febe:	88fa      	ldrh	r2, [r7, #6]
 800fec0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	88fa      	ldrh	r2, [r7, #6]
 800fec8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	689b      	ldr	r3, [r3, #8]
 800fed0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fed4:	d10e      	bne.n	800fef4 <HAL_UART_Receive+0x80>
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	691b      	ldr	r3, [r3, #16]
 800feda:	2b00      	cmp	r3, #0
 800fedc:	d105      	bne.n	800feea <HAL_UART_Receive+0x76>
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fee4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fee8:	e02d      	b.n	800ff46 <HAL_UART_Receive+0xd2>
 800feea:	68fb      	ldr	r3, [r7, #12]
 800feec:	22ff      	movs	r2, #255	; 0xff
 800feee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fef2:	e028      	b.n	800ff46 <HAL_UART_Receive+0xd2>
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	689b      	ldr	r3, [r3, #8]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d10d      	bne.n	800ff18 <HAL_UART_Receive+0xa4>
 800fefc:	68fb      	ldr	r3, [r7, #12]
 800fefe:	691b      	ldr	r3, [r3, #16]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d104      	bne.n	800ff0e <HAL_UART_Receive+0x9a>
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	22ff      	movs	r2, #255	; 0xff
 800ff08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff0c:	e01b      	b.n	800ff46 <HAL_UART_Receive+0xd2>
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	227f      	movs	r2, #127	; 0x7f
 800ff12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff16:	e016      	b.n	800ff46 <HAL_UART_Receive+0xd2>
 800ff18:	68fb      	ldr	r3, [r7, #12]
 800ff1a:	689b      	ldr	r3, [r3, #8]
 800ff1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ff20:	d10d      	bne.n	800ff3e <HAL_UART_Receive+0xca>
 800ff22:	68fb      	ldr	r3, [r7, #12]
 800ff24:	691b      	ldr	r3, [r3, #16]
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d104      	bne.n	800ff34 <HAL_UART_Receive+0xc0>
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	227f      	movs	r2, #127	; 0x7f
 800ff2e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff32:	e008      	b.n	800ff46 <HAL_UART_Receive+0xd2>
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	223f      	movs	r2, #63	; 0x3f
 800ff38:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ff3c:	e003      	b.n	800ff46 <HAL_UART_Receive+0xd2>
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	2200      	movs	r2, #0
 800ff42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff4c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	689b      	ldr	r3, [r3, #8]
 800ff52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ff56:	d108      	bne.n	800ff6a <HAL_UART_Receive+0xf6>
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	691b      	ldr	r3, [r3, #16]
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d104      	bne.n	800ff6a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800ff60:	2300      	movs	r3, #0
 800ff62:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ff64:	68bb      	ldr	r3, [r7, #8]
 800ff66:	61bb      	str	r3, [r7, #24]
 800ff68:	e003      	b.n	800ff72 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800ff6a:	68bb      	ldr	r3, [r7, #8]
 800ff6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ff6e:	2300      	movs	r3, #0
 800ff70:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ff72:	e036      	b.n	800ffe2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ff74:	683b      	ldr	r3, [r7, #0]
 800ff76:	9300      	str	r3, [sp, #0]
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	2200      	movs	r2, #0
 800ff7c:	2120      	movs	r1, #32
 800ff7e:	68f8      	ldr	r0, [r7, #12]
 800ff80:	f001 fb9a 	bl	80116b8 <UART_WaitOnFlagUntilTimeout>
 800ff84:	4603      	mov	r3, r0
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d005      	beq.n	800ff96 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2220      	movs	r2, #32
 800ff8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800ff92:	2303      	movs	r3, #3
 800ff94:	e032      	b.n	800fffc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800ff96:	69fb      	ldr	r3, [r7, #28]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d10c      	bne.n	800ffb6 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	681b      	ldr	r3, [r3, #0]
 800ffa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffa2:	b29a      	uxth	r2, r3
 800ffa4:	8a7b      	ldrh	r3, [r7, #18]
 800ffa6:	4013      	ands	r3, r2
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	69bb      	ldr	r3, [r7, #24]
 800ffac:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ffae:	69bb      	ldr	r3, [r7, #24]
 800ffb0:	3302      	adds	r3, #2
 800ffb2:	61bb      	str	r3, [r7, #24]
 800ffb4:	e00c      	b.n	800ffd0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffbc:	b2da      	uxtb	r2, r3
 800ffbe:	8a7b      	ldrh	r3, [r7, #18]
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	4013      	ands	r3, r2
 800ffc4:	b2da      	uxtb	r2, r3
 800ffc6:	69fb      	ldr	r3, [r7, #28]
 800ffc8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800ffca:	69fb      	ldr	r3, [r7, #28]
 800ffcc:	3301      	adds	r3, #1
 800ffce:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffd6:	b29b      	uxth	r3, r3
 800ffd8:	3b01      	subs	r3, #1
 800ffda:	b29a      	uxth	r2, r3
 800ffdc:	68fb      	ldr	r3, [r7, #12]
 800ffde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ffe8:	b29b      	uxth	r3, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d1c2      	bne.n	800ff74 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	2220      	movs	r2, #32
 800fff2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fff6:	2300      	movs	r3, #0
 800fff8:	e000      	b.n	800fffc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fffa:	2302      	movs	r3, #2
  }
}
 800fffc:	4618      	mov	r0, r3
 800fffe:	3720      	adds	r7, #32
 8010000:	46bd      	mov	sp, r7
 8010002:	bd80      	pop	{r7, pc}

08010004 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b08a      	sub	sp, #40	; 0x28
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	4613      	mov	r3, r2
 8010010:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010018:	2b20      	cmp	r3, #32
 801001a:	d137      	bne.n	801008c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 801001c:	68bb      	ldr	r3, [r7, #8]
 801001e:	2b00      	cmp	r3, #0
 8010020:	d002      	beq.n	8010028 <HAL_UART_Receive_IT+0x24>
 8010022:	88fb      	ldrh	r3, [r7, #6]
 8010024:	2b00      	cmp	r3, #0
 8010026:	d101      	bne.n	801002c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8010028:	2301      	movs	r3, #1
 801002a:	e030      	b.n	801008e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	2200      	movs	r2, #0
 8010030:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010032:	68fb      	ldr	r3, [r7, #12]
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	4a18      	ldr	r2, [pc, #96]	; (8010098 <HAL_UART_Receive_IT+0x94>)
 8010038:	4293      	cmp	r3, r2
 801003a:	d01f      	beq.n	801007c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	681b      	ldr	r3, [r3, #0]
 8010040:	685b      	ldr	r3, [r3, #4]
 8010042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010046:	2b00      	cmp	r3, #0
 8010048:	d018      	beq.n	801007c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	e853 3f00 	ldrex	r3, [r3]
 8010056:	613b      	str	r3, [r7, #16]
   return(result);
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801005e:	627b      	str	r3, [r7, #36]	; 0x24
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	461a      	mov	r2, r3
 8010066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010068:	623b      	str	r3, [r7, #32]
 801006a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801006c:	69f9      	ldr	r1, [r7, #28]
 801006e:	6a3a      	ldr	r2, [r7, #32]
 8010070:	e841 2300 	strex	r3, r2, [r1]
 8010074:	61bb      	str	r3, [r7, #24]
   return(result);
 8010076:	69bb      	ldr	r3, [r7, #24]
 8010078:	2b00      	cmp	r3, #0
 801007a:	d1e6      	bne.n	801004a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801007c:	88fb      	ldrh	r3, [r7, #6]
 801007e:	461a      	mov	r2, r3
 8010080:	68b9      	ldr	r1, [r7, #8]
 8010082:	68f8      	ldr	r0, [r7, #12]
 8010084:	f001 fb86 	bl	8011794 <UART_Start_Receive_IT>
 8010088:	4603      	mov	r3, r0
 801008a:	e000      	b.n	801008e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801008c:	2302      	movs	r3, #2
  }
}
 801008e:	4618      	mov	r0, r3
 8010090:	3728      	adds	r7, #40	; 0x28
 8010092:	46bd      	mov	sp, r7
 8010094:	bd80      	pop	{r7, pc}
 8010096:	bf00      	nop
 8010098:	58000c00 	.word	0x58000c00

0801009c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801009c:	b580      	push	{r7, lr}
 801009e:	b08a      	sub	sp, #40	; 0x28
 80100a0:	af00      	add	r7, sp, #0
 80100a2:	60f8      	str	r0, [r7, #12]
 80100a4:	60b9      	str	r1, [r7, #8]
 80100a6:	4613      	mov	r3, r2
 80100a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80100aa:	68fb      	ldr	r3, [r7, #12]
 80100ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80100b0:	2b20      	cmp	r3, #32
 80100b2:	d167      	bne.n	8010184 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d002      	beq.n	80100c0 <HAL_UART_Transmit_DMA+0x24>
 80100ba:	88fb      	ldrh	r3, [r7, #6]
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d101      	bne.n	80100c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80100c0:	2301      	movs	r3, #1
 80100c2:	e060      	b.n	8010186 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80100c4:	68fb      	ldr	r3, [r7, #12]
 80100c6:	68ba      	ldr	r2, [r7, #8]
 80100c8:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	88fa      	ldrh	r2, [r7, #6]
 80100ce:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	88fa      	ldrh	r2, [r7, #6]
 80100d6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	2200      	movs	r2, #0
 80100de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2221      	movs	r2, #33	; 0x21
 80100e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 80100ea:	68fb      	ldr	r3, [r7, #12]
 80100ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d028      	beq.n	8010144 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100f6:	4a26      	ldr	r2, [pc, #152]	; (8010190 <HAL_UART_Transmit_DMA+0xf4>)
 80100f8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80100fe:	4a25      	ldr	r2, [pc, #148]	; (8010194 <HAL_UART_Transmit_DMA+0xf8>)
 8010100:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010106:	4a24      	ldr	r2, [pc, #144]	; (8010198 <HAL_UART_Transmit_DMA+0xfc>)
 8010108:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801010e:	2200      	movs	r2, #0
 8010110:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8010116:	68fb      	ldr	r3, [r7, #12]
 8010118:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801011a:	4619      	mov	r1, r3
 801011c:	68fb      	ldr	r3, [r7, #12]
 801011e:	681b      	ldr	r3, [r3, #0]
 8010120:	3328      	adds	r3, #40	; 0x28
 8010122:	461a      	mov	r2, r3
 8010124:	88fb      	ldrh	r3, [r7, #6]
 8010126:	f7f6 f99d 	bl	8006464 <HAL_DMA_Start_IT>
 801012a:	4603      	mov	r3, r0
 801012c:	2b00      	cmp	r3, #0
 801012e:	d009      	beq.n	8010144 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010130:	68fb      	ldr	r3, [r7, #12]
 8010132:	2210      	movs	r2, #16
 8010134:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	2220      	movs	r2, #32
 801013c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 8010140:	2301      	movs	r3, #1
 8010142:	e020      	b.n	8010186 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	2240      	movs	r2, #64	; 0x40
 801014a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801014c:	68fb      	ldr	r3, [r7, #12]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	3308      	adds	r3, #8
 8010152:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010154:	697b      	ldr	r3, [r7, #20]
 8010156:	e853 3f00 	ldrex	r3, [r3]
 801015a:	613b      	str	r3, [r7, #16]
   return(result);
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010162:	627b      	str	r3, [r7, #36]	; 0x24
 8010164:	68fb      	ldr	r3, [r7, #12]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	3308      	adds	r3, #8
 801016a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801016c:	623a      	str	r2, [r7, #32]
 801016e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010170:	69f9      	ldr	r1, [r7, #28]
 8010172:	6a3a      	ldr	r2, [r7, #32]
 8010174:	e841 2300 	strex	r3, r2, [r1]
 8010178:	61bb      	str	r3, [r7, #24]
   return(result);
 801017a:	69bb      	ldr	r3, [r7, #24]
 801017c:	2b00      	cmp	r3, #0
 801017e:	d1e5      	bne.n	801014c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8010180:	2300      	movs	r3, #0
 8010182:	e000      	b.n	8010186 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8010184:	2302      	movs	r3, #2
  }
}
 8010186:	4618      	mov	r0, r3
 8010188:	3728      	adds	r7, #40	; 0x28
 801018a:	46bd      	mov	sp, r7
 801018c:	bd80      	pop	{r7, pc}
 801018e:	bf00      	nop
 8010190:	08011b29 	.word	0x08011b29
 8010194:	08011bbf 	.word	0x08011bbf
 8010198:	08011bdb 	.word	0x08011bdb

0801019c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801019c:	b580      	push	{r7, lr}
 801019e:	b0ba      	sub	sp, #232	; 0xe8
 80101a0:	af00      	add	r7, sp, #0
 80101a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	69db      	ldr	r3, [r3, #28]
 80101aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	689b      	ldr	r3, [r3, #8]
 80101be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80101c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80101c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80101ca:	4013      	ands	r3, r2
 80101cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80101d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d11b      	bne.n	8010210 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80101d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80101dc:	f003 0320 	and.w	r3, r3, #32
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d015      	beq.n	8010210 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80101e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80101e8:	f003 0320 	and.w	r3, r3, #32
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	d105      	bne.n	80101fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80101f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80101f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80101f8:	2b00      	cmp	r3, #0
 80101fa:	d009      	beq.n	8010210 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010200:	2b00      	cmp	r3, #0
 8010202:	f000 8377 	beq.w	80108f4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8010206:	687b      	ldr	r3, [r7, #4]
 8010208:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	4798      	blx	r3
      }
      return;
 801020e:	e371      	b.n	80108f4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010214:	2b00      	cmp	r3, #0
 8010216:	f000 8123 	beq.w	8010460 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801021a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801021e:	4b8d      	ldr	r3, [pc, #564]	; (8010454 <HAL_UART_IRQHandler+0x2b8>)
 8010220:	4013      	ands	r3, r2
 8010222:	2b00      	cmp	r3, #0
 8010224:	d106      	bne.n	8010234 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8010226:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801022a:	4b8b      	ldr	r3, [pc, #556]	; (8010458 <HAL_UART_IRQHandler+0x2bc>)
 801022c:	4013      	ands	r3, r2
 801022e:	2b00      	cmp	r3, #0
 8010230:	f000 8116 	beq.w	8010460 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010238:	f003 0301 	and.w	r3, r3, #1
 801023c:	2b00      	cmp	r3, #0
 801023e:	d011      	beq.n	8010264 <HAL_UART_IRQHandler+0xc8>
 8010240:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010248:	2b00      	cmp	r3, #0
 801024a:	d00b      	beq.n	8010264 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2201      	movs	r2, #1
 8010252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801025a:	f043 0201 	orr.w	r2, r3, #1
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010268:	f003 0302 	and.w	r3, r3, #2
 801026c:	2b00      	cmp	r3, #0
 801026e:	d011      	beq.n	8010294 <HAL_UART_IRQHandler+0xf8>
 8010270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010274:	f003 0301 	and.w	r3, r3, #1
 8010278:	2b00      	cmp	r3, #0
 801027a:	d00b      	beq.n	8010294 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	2202      	movs	r2, #2
 8010282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801028a:	f043 0204 	orr.w	r2, r3, #4
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010298:	f003 0304 	and.w	r3, r3, #4
 801029c:	2b00      	cmp	r3, #0
 801029e:	d011      	beq.n	80102c4 <HAL_UART_IRQHandler+0x128>
 80102a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80102a4:	f003 0301 	and.w	r3, r3, #1
 80102a8:	2b00      	cmp	r3, #0
 80102aa:	d00b      	beq.n	80102c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	2204      	movs	r2, #4
 80102b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102ba:	f043 0202 	orr.w	r2, r3, #2
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80102c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80102c8:	f003 0308 	and.w	r3, r3, #8
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	d017      	beq.n	8010300 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80102d4:	f003 0320 	and.w	r3, r3, #32
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d105      	bne.n	80102e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80102dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80102e0:	4b5c      	ldr	r3, [pc, #368]	; (8010454 <HAL_UART_IRQHandler+0x2b8>)
 80102e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d00b      	beq.n	8010300 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	681b      	ldr	r3, [r3, #0]
 80102ec:	2208      	movs	r2, #8
 80102ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80102f6:	f043 0208 	orr.w	r2, r3, #8
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010300:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010304:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010308:	2b00      	cmp	r3, #0
 801030a:	d012      	beq.n	8010332 <HAL_UART_IRQHandler+0x196>
 801030c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010310:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010314:	2b00      	cmp	r3, #0
 8010316:	d00c      	beq.n	8010332 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010320:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010328:	f043 0220 	orr.w	r2, r3, #32
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010338:	2b00      	cmp	r3, #0
 801033a:	f000 82dd 	beq.w	80108f8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801033e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010342:	f003 0320 	and.w	r3, r3, #32
 8010346:	2b00      	cmp	r3, #0
 8010348:	d013      	beq.n	8010372 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801034a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801034e:	f003 0320 	and.w	r3, r3, #32
 8010352:	2b00      	cmp	r3, #0
 8010354:	d105      	bne.n	8010362 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010356:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801035a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801035e:	2b00      	cmp	r3, #0
 8010360:	d007      	beq.n	8010372 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010366:	2b00      	cmp	r3, #0
 8010368:	d003      	beq.n	8010372 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010378:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	681b      	ldr	r3, [r3, #0]
 8010380:	689b      	ldr	r3, [r3, #8]
 8010382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010386:	2b40      	cmp	r3, #64	; 0x40
 8010388:	d005      	beq.n	8010396 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801038a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801038e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010392:	2b00      	cmp	r3, #0
 8010394:	d054      	beq.n	8010440 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010396:	6878      	ldr	r0, [r7, #4]
 8010398:	f001 fb60 	bl	8011a5c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	689b      	ldr	r3, [r3, #8]
 80103a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80103a6:	2b40      	cmp	r3, #64	; 0x40
 80103a8:	d146      	bne.n	8010438 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	681b      	ldr	r3, [r3, #0]
 80103ae:	3308      	adds	r3, #8
 80103b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80103b8:	e853 3f00 	ldrex	r3, [r3]
 80103bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80103c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80103c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	3308      	adds	r3, #8
 80103d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80103d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80103da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80103e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80103e6:	e841 2300 	strex	r3, r2, [r1]
 80103ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80103ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d1d9      	bne.n	80103aa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d017      	beq.n	8010430 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010406:	4a15      	ldr	r2, [pc, #84]	; (801045c <HAL_UART_IRQHandler+0x2c0>)
 8010408:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010410:	4618      	mov	r0, r3
 8010412:	f7f6 fdaf 	bl	8006f74 <HAL_DMA_Abort_IT>
 8010416:	4603      	mov	r3, r0
 8010418:	2b00      	cmp	r3, #0
 801041a:	d019      	beq.n	8010450 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010422:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010424:	687a      	ldr	r2, [r7, #4]
 8010426:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801042a:	4610      	mov	r0, r2
 801042c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801042e:	e00f      	b.n	8010450 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010430:	6878      	ldr	r0, [r7, #4]
 8010432:	f000 fa77 	bl	8010924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010436:	e00b      	b.n	8010450 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 fa73 	bl	8010924 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801043e:	e007      	b.n	8010450 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010440:	6878      	ldr	r0, [r7, #4]
 8010442:	f000 fa6f 	bl	8010924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	2200      	movs	r2, #0
 801044a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801044e:	e253      	b.n	80108f8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010450:	bf00      	nop
    return;
 8010452:	e251      	b.n	80108f8 <HAL_UART_IRQHandler+0x75c>
 8010454:	10000001 	.word	0x10000001
 8010458:	04000120 	.word	0x04000120
 801045c:	08011c5b 	.word	0x08011c5b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010464:	2b01      	cmp	r3, #1
 8010466:	f040 81e7 	bne.w	8010838 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801046a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801046e:	f003 0310 	and.w	r3, r3, #16
 8010472:	2b00      	cmp	r3, #0
 8010474:	f000 81e0 	beq.w	8010838 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801047c:	f003 0310 	and.w	r3, r3, #16
 8010480:	2b00      	cmp	r3, #0
 8010482:	f000 81d9 	beq.w	8010838 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	2210      	movs	r2, #16
 801048c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	689b      	ldr	r3, [r3, #8]
 8010494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010498:	2b40      	cmp	r3, #64	; 0x40
 801049a:	f040 8151 	bne.w	8010740 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	4a96      	ldr	r2, [pc, #600]	; (8010700 <HAL_UART_IRQHandler+0x564>)
 80104a8:	4293      	cmp	r3, r2
 80104aa:	d068      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	4a93      	ldr	r2, [pc, #588]	; (8010704 <HAL_UART_IRQHandler+0x568>)
 80104b6:	4293      	cmp	r3, r2
 80104b8:	d061      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104c0:	681b      	ldr	r3, [r3, #0]
 80104c2:	4a91      	ldr	r2, [pc, #580]	; (8010708 <HAL_UART_IRQHandler+0x56c>)
 80104c4:	4293      	cmp	r3, r2
 80104c6:	d05a      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	4a8e      	ldr	r2, [pc, #568]	; (801070c <HAL_UART_IRQHandler+0x570>)
 80104d2:	4293      	cmp	r3, r2
 80104d4:	d053      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104dc:	681b      	ldr	r3, [r3, #0]
 80104de:	4a8c      	ldr	r2, [pc, #560]	; (8010710 <HAL_UART_IRQHandler+0x574>)
 80104e0:	4293      	cmp	r3, r2
 80104e2:	d04c      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104ea:	681b      	ldr	r3, [r3, #0]
 80104ec:	4a89      	ldr	r2, [pc, #548]	; (8010714 <HAL_UART_IRQHandler+0x578>)
 80104ee:	4293      	cmp	r3, r2
 80104f0:	d045      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104f8:	681b      	ldr	r3, [r3, #0]
 80104fa:	4a87      	ldr	r2, [pc, #540]	; (8010718 <HAL_UART_IRQHandler+0x57c>)
 80104fc:	4293      	cmp	r3, r2
 80104fe:	d03e      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010506:	681b      	ldr	r3, [r3, #0]
 8010508:	4a84      	ldr	r2, [pc, #528]	; (801071c <HAL_UART_IRQHandler+0x580>)
 801050a:	4293      	cmp	r3, r2
 801050c:	d037      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	4a82      	ldr	r2, [pc, #520]	; (8010720 <HAL_UART_IRQHandler+0x584>)
 8010518:	4293      	cmp	r3, r2
 801051a:	d030      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	4a7f      	ldr	r2, [pc, #508]	; (8010724 <HAL_UART_IRQHandler+0x588>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d029      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010530:	681b      	ldr	r3, [r3, #0]
 8010532:	4a7d      	ldr	r2, [pc, #500]	; (8010728 <HAL_UART_IRQHandler+0x58c>)
 8010534:	4293      	cmp	r3, r2
 8010536:	d022      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	4a7a      	ldr	r2, [pc, #488]	; (801072c <HAL_UART_IRQHandler+0x590>)
 8010542:	4293      	cmp	r3, r2
 8010544:	d01b      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	4a78      	ldr	r2, [pc, #480]	; (8010730 <HAL_UART_IRQHandler+0x594>)
 8010550:	4293      	cmp	r3, r2
 8010552:	d014      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	4a75      	ldr	r2, [pc, #468]	; (8010734 <HAL_UART_IRQHandler+0x598>)
 801055e:	4293      	cmp	r3, r2
 8010560:	d00d      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	4a73      	ldr	r2, [pc, #460]	; (8010738 <HAL_UART_IRQHandler+0x59c>)
 801056c:	4293      	cmp	r3, r2
 801056e:	d006      	beq.n	801057e <HAL_UART_IRQHandler+0x3e2>
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010576:	681b      	ldr	r3, [r3, #0]
 8010578:	4a70      	ldr	r2, [pc, #448]	; (801073c <HAL_UART_IRQHandler+0x5a0>)
 801057a:	4293      	cmp	r3, r2
 801057c:	d106      	bne.n	801058c <HAL_UART_IRQHandler+0x3f0>
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	685b      	ldr	r3, [r3, #4]
 8010588:	b29b      	uxth	r3, r3
 801058a:	e005      	b.n	8010598 <HAL_UART_IRQHandler+0x3fc>
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010592:	681b      	ldr	r3, [r3, #0]
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	b29b      	uxth	r3, r3
 8010598:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801059c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	f000 81ab 	beq.w	80108fc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80105ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80105b0:	429a      	cmp	r2, r3
 80105b2:	f080 81a3 	bcs.w	80108fc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80105bc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80105c6:	69db      	ldr	r3, [r3, #28]
 80105c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105cc:	f000 8087 	beq.w	80106de <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80105dc:	e853 3f00 	ldrex	r3, [r3]
 80105e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80105e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80105e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80105ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	461a      	mov	r2, r3
 80105f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80105fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80105fe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010602:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8010606:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801060a:	e841 2300 	strex	r3, r2, [r1]
 801060e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010612:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8010616:	2b00      	cmp	r3, #0
 8010618:	d1da      	bne.n	80105d0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	3308      	adds	r3, #8
 8010620:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010622:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010624:	e853 3f00 	ldrex	r3, [r3]
 8010628:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801062a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801062c:	f023 0301 	bic.w	r3, r3, #1
 8010630:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	3308      	adds	r3, #8
 801063a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801063e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010642:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010644:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010646:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801064a:	e841 2300 	strex	r3, r2, [r1]
 801064e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010652:	2b00      	cmp	r3, #0
 8010654:	d1e1      	bne.n	801061a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	3308      	adds	r3, #8
 801065c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801065e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010660:	e853 3f00 	ldrex	r3, [r3]
 8010664:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010666:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010668:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801066c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	681b      	ldr	r3, [r3, #0]
 8010674:	3308      	adds	r3, #8
 8010676:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801067a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801067c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801067e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010680:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010682:	e841 2300 	strex	r3, r2, [r1]
 8010686:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801068a:	2b00      	cmp	r3, #0
 801068c:	d1e3      	bne.n	8010656 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	2220      	movs	r2, #32
 8010692:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80106a4:	e853 3f00 	ldrex	r3, [r3]
 80106a8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80106aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80106ac:	f023 0310 	bic.w	r3, r3, #16
 80106b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	681b      	ldr	r3, [r3, #0]
 80106b8:	461a      	mov	r2, r3
 80106ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80106be:	65bb      	str	r3, [r7, #88]	; 0x58
 80106c0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80106c4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80106c6:	e841 2300 	strex	r3, r2, [r1]
 80106ca:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80106cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d1e4      	bne.n	801069c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80106d8:	4618      	mov	r0, r3
 80106da:	f7f6 f92d 	bl	8006938 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	2202      	movs	r2, #2
 80106e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80106f0:	b29b      	uxth	r3, r3
 80106f2:	1ad3      	subs	r3, r2, r3
 80106f4:	b29b      	uxth	r3, r3
 80106f6:	4619      	mov	r1, r3
 80106f8:	6878      	ldr	r0, [r7, #4]
 80106fa:	f000 f91d 	bl	8010938 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80106fe:	e0fd      	b.n	80108fc <HAL_UART_IRQHandler+0x760>
 8010700:	40020010 	.word	0x40020010
 8010704:	40020028 	.word	0x40020028
 8010708:	40020040 	.word	0x40020040
 801070c:	40020058 	.word	0x40020058
 8010710:	40020070 	.word	0x40020070
 8010714:	40020088 	.word	0x40020088
 8010718:	400200a0 	.word	0x400200a0
 801071c:	400200b8 	.word	0x400200b8
 8010720:	40020410 	.word	0x40020410
 8010724:	40020428 	.word	0x40020428
 8010728:	40020440 	.word	0x40020440
 801072c:	40020458 	.word	0x40020458
 8010730:	40020470 	.word	0x40020470
 8010734:	40020488 	.word	0x40020488
 8010738:	400204a0 	.word	0x400204a0
 801073c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010740:	687b      	ldr	r3, [r7, #4]
 8010742:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801074c:	b29b      	uxth	r3, r3
 801074e:	1ad3      	subs	r3, r2, r3
 8010750:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801075a:	b29b      	uxth	r3, r3
 801075c:	2b00      	cmp	r3, #0
 801075e:	f000 80cf 	beq.w	8010900 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010762:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010766:	2b00      	cmp	r3, #0
 8010768:	f000 80ca 	beq.w	8010900 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010774:	e853 3f00 	ldrex	r3, [r3]
 8010778:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801077a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801077c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	461a      	mov	r2, r3
 801078a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801078e:	647b      	str	r3, [r7, #68]	; 0x44
 8010790:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010792:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010794:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010796:	e841 2300 	strex	r3, r2, [r1]
 801079a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801079c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801079e:	2b00      	cmp	r3, #0
 80107a0:	d1e4      	bne.n	801076c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	681b      	ldr	r3, [r3, #0]
 80107a6:	3308      	adds	r3, #8
 80107a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ac:	e853 3f00 	ldrex	r3, [r3]
 80107b0:	623b      	str	r3, [r7, #32]
   return(result);
 80107b2:	6a3a      	ldr	r2, [r7, #32]
 80107b4:	4b55      	ldr	r3, [pc, #340]	; (801090c <HAL_UART_IRQHandler+0x770>)
 80107b6:	4013      	ands	r3, r2
 80107b8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	3308      	adds	r3, #8
 80107c2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80107c6:	633a      	str	r2, [r7, #48]	; 0x30
 80107c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80107ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80107cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80107ce:	e841 2300 	strex	r3, r2, [r1]
 80107d2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80107d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d1e3      	bne.n	80107a2 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2220      	movs	r2, #32
 80107de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	2200      	movs	r2, #0
 80107e6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	2200      	movs	r2, #0
 80107ec:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	e853 3f00 	ldrex	r3, [r3]
 80107fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	f023 0310 	bic.w	r3, r3, #16
 8010802:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	461a      	mov	r2, r3
 801080c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010810:	61fb      	str	r3, [r7, #28]
 8010812:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010814:	69b9      	ldr	r1, [r7, #24]
 8010816:	69fa      	ldr	r2, [r7, #28]
 8010818:	e841 2300 	strex	r3, r2, [r1]
 801081c:	617b      	str	r3, [r7, #20]
   return(result);
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d1e4      	bne.n	80107ee <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	2202      	movs	r2, #2
 8010828:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801082a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801082e:	4619      	mov	r1, r3
 8010830:	6878      	ldr	r0, [r7, #4]
 8010832:	f000 f881 	bl	8010938 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010836:	e063      	b.n	8010900 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801083c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010840:	2b00      	cmp	r3, #0
 8010842:	d00e      	beq.n	8010862 <HAL_UART_IRQHandler+0x6c6>
 8010844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010848:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801084c:	2b00      	cmp	r3, #0
 801084e:	d008      	beq.n	8010862 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	681b      	ldr	r3, [r3, #0]
 8010854:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010858:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801085a:	6878      	ldr	r0, [r7, #4]
 801085c:	f001 ff5a 	bl	8012714 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010860:	e051      	b.n	8010906 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801086a:	2b00      	cmp	r3, #0
 801086c:	d014      	beq.n	8010898 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801086e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010876:	2b00      	cmp	r3, #0
 8010878:	d105      	bne.n	8010886 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801087a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801087e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010882:	2b00      	cmp	r3, #0
 8010884:	d008      	beq.n	8010898 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010886:	687b      	ldr	r3, [r7, #4]
 8010888:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801088a:	2b00      	cmp	r3, #0
 801088c:	d03a      	beq.n	8010904 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010892:	6878      	ldr	r0, [r7, #4]
 8010894:	4798      	blx	r3
    }
    return;
 8010896:	e035      	b.n	8010904 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010898:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801089c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	d009      	beq.n	80108b8 <HAL_UART_IRQHandler+0x71c>
 80108a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d003      	beq.n	80108b8 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80108b0:	6878      	ldr	r0, [r7, #4]
 80108b2:	f001 f9e8 	bl	8011c86 <UART_EndTransmit_IT>
    return;
 80108b6:	e026      	b.n	8010906 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80108b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d009      	beq.n	80108d8 <HAL_UART_IRQHandler+0x73c>
 80108c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80108cc:	2b00      	cmp	r3, #0
 80108ce:	d003      	beq.n	80108d8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80108d0:	6878      	ldr	r0, [r7, #4]
 80108d2:	f001 ff33 	bl	801273c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108d6:	e016      	b.n	8010906 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80108d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80108dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d010      	beq.n	8010906 <HAL_UART_IRQHandler+0x76a>
 80108e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	da0c      	bge.n	8010906 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80108ec:	6878      	ldr	r0, [r7, #4]
 80108ee:	f001 ff1b 	bl	8012728 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80108f2:	e008      	b.n	8010906 <HAL_UART_IRQHandler+0x76a>
      return;
 80108f4:	bf00      	nop
 80108f6:	e006      	b.n	8010906 <HAL_UART_IRQHandler+0x76a>
    return;
 80108f8:	bf00      	nop
 80108fa:	e004      	b.n	8010906 <HAL_UART_IRQHandler+0x76a>
      return;
 80108fc:	bf00      	nop
 80108fe:	e002      	b.n	8010906 <HAL_UART_IRQHandler+0x76a>
      return;
 8010900:	bf00      	nop
 8010902:	e000      	b.n	8010906 <HAL_UART_IRQHandler+0x76a>
    return;
 8010904:	bf00      	nop
  }
}
 8010906:	37e8      	adds	r7, #232	; 0xe8
 8010908:	46bd      	mov	sp, r7
 801090a:	bd80      	pop	{r7, pc}
 801090c:	effffffe 	.word	0xeffffffe

08010910 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010910:	b480      	push	{r7}
 8010912:	b083      	sub	sp, #12
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8010918:	bf00      	nop
 801091a:	370c      	adds	r7, #12
 801091c:	46bd      	mov	sp, r7
 801091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010922:	4770      	bx	lr

08010924 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010924:	b480      	push	{r7}
 8010926:	b083      	sub	sp, #12
 8010928:	af00      	add	r7, sp, #0
 801092a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801092c:	bf00      	nop
 801092e:	370c      	adds	r7, #12
 8010930:	46bd      	mov	sp, r7
 8010932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010936:	4770      	bx	lr

08010938 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010938:	b480      	push	{r7}
 801093a:	b083      	sub	sp, #12
 801093c:	af00      	add	r7, sp, #0
 801093e:	6078      	str	r0, [r7, #4]
 8010940:	460b      	mov	r3, r1
 8010942:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010944:	bf00      	nop
 8010946:	370c      	adds	r7, #12
 8010948:	46bd      	mov	sp, r7
 801094a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801094e:	4770      	bx	lr

08010950 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010950:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010954:	b092      	sub	sp, #72	; 0x48
 8010956:	af00      	add	r7, sp, #0
 8010958:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801095a:	2300      	movs	r3, #0
 801095c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	689a      	ldr	r2, [r3, #8]
 8010964:	697b      	ldr	r3, [r7, #20]
 8010966:	691b      	ldr	r3, [r3, #16]
 8010968:	431a      	orrs	r2, r3
 801096a:	697b      	ldr	r3, [r7, #20]
 801096c:	695b      	ldr	r3, [r3, #20]
 801096e:	431a      	orrs	r2, r3
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	69db      	ldr	r3, [r3, #28]
 8010974:	4313      	orrs	r3, r2
 8010976:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	681a      	ldr	r2, [r3, #0]
 801097e:	4bbe      	ldr	r3, [pc, #760]	; (8010c78 <UART_SetConfig+0x328>)
 8010980:	4013      	ands	r3, r2
 8010982:	697a      	ldr	r2, [r7, #20]
 8010984:	6812      	ldr	r2, [r2, #0]
 8010986:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010988:	430b      	orrs	r3, r1
 801098a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801098c:	697b      	ldr	r3, [r7, #20]
 801098e:	681b      	ldr	r3, [r3, #0]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	68da      	ldr	r2, [r3, #12]
 801099a:	697b      	ldr	r3, [r7, #20]
 801099c:	681b      	ldr	r3, [r3, #0]
 801099e:	430a      	orrs	r2, r1
 80109a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80109a2:	697b      	ldr	r3, [r7, #20]
 80109a4:	699b      	ldr	r3, [r3, #24]
 80109a6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80109a8:	697b      	ldr	r3, [r7, #20]
 80109aa:	681b      	ldr	r3, [r3, #0]
 80109ac:	4ab3      	ldr	r2, [pc, #716]	; (8010c7c <UART_SetConfig+0x32c>)
 80109ae:	4293      	cmp	r3, r2
 80109b0:	d004      	beq.n	80109bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80109b2:	697b      	ldr	r3, [r7, #20]
 80109b4:	6a1b      	ldr	r3, [r3, #32]
 80109b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80109b8:	4313      	orrs	r3, r2
 80109ba:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80109bc:	697b      	ldr	r3, [r7, #20]
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	689a      	ldr	r2, [r3, #8]
 80109c2:	4baf      	ldr	r3, [pc, #700]	; (8010c80 <UART_SetConfig+0x330>)
 80109c4:	4013      	ands	r3, r2
 80109c6:	697a      	ldr	r2, [r7, #20]
 80109c8:	6812      	ldr	r2, [r2, #0]
 80109ca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80109cc:	430b      	orrs	r3, r1
 80109ce:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80109d0:	697b      	ldr	r3, [r7, #20]
 80109d2:	681b      	ldr	r3, [r3, #0]
 80109d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109d6:	f023 010f 	bic.w	r1, r3, #15
 80109da:	697b      	ldr	r3, [r7, #20]
 80109dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	681b      	ldr	r3, [r3, #0]
 80109e2:	430a      	orrs	r2, r1
 80109e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	4aa6      	ldr	r2, [pc, #664]	; (8010c84 <UART_SetConfig+0x334>)
 80109ec:	4293      	cmp	r3, r2
 80109ee:	d177      	bne.n	8010ae0 <UART_SetConfig+0x190>
 80109f0:	4ba5      	ldr	r3, [pc, #660]	; (8010c88 <UART_SetConfig+0x338>)
 80109f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109f4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80109f8:	2b28      	cmp	r3, #40	; 0x28
 80109fa:	d86d      	bhi.n	8010ad8 <UART_SetConfig+0x188>
 80109fc:	a201      	add	r2, pc, #4	; (adr r2, 8010a04 <UART_SetConfig+0xb4>)
 80109fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a02:	bf00      	nop
 8010a04:	08010aa9 	.word	0x08010aa9
 8010a08:	08010ad9 	.word	0x08010ad9
 8010a0c:	08010ad9 	.word	0x08010ad9
 8010a10:	08010ad9 	.word	0x08010ad9
 8010a14:	08010ad9 	.word	0x08010ad9
 8010a18:	08010ad9 	.word	0x08010ad9
 8010a1c:	08010ad9 	.word	0x08010ad9
 8010a20:	08010ad9 	.word	0x08010ad9
 8010a24:	08010ab1 	.word	0x08010ab1
 8010a28:	08010ad9 	.word	0x08010ad9
 8010a2c:	08010ad9 	.word	0x08010ad9
 8010a30:	08010ad9 	.word	0x08010ad9
 8010a34:	08010ad9 	.word	0x08010ad9
 8010a38:	08010ad9 	.word	0x08010ad9
 8010a3c:	08010ad9 	.word	0x08010ad9
 8010a40:	08010ad9 	.word	0x08010ad9
 8010a44:	08010ab9 	.word	0x08010ab9
 8010a48:	08010ad9 	.word	0x08010ad9
 8010a4c:	08010ad9 	.word	0x08010ad9
 8010a50:	08010ad9 	.word	0x08010ad9
 8010a54:	08010ad9 	.word	0x08010ad9
 8010a58:	08010ad9 	.word	0x08010ad9
 8010a5c:	08010ad9 	.word	0x08010ad9
 8010a60:	08010ad9 	.word	0x08010ad9
 8010a64:	08010ac1 	.word	0x08010ac1
 8010a68:	08010ad9 	.word	0x08010ad9
 8010a6c:	08010ad9 	.word	0x08010ad9
 8010a70:	08010ad9 	.word	0x08010ad9
 8010a74:	08010ad9 	.word	0x08010ad9
 8010a78:	08010ad9 	.word	0x08010ad9
 8010a7c:	08010ad9 	.word	0x08010ad9
 8010a80:	08010ad9 	.word	0x08010ad9
 8010a84:	08010ac9 	.word	0x08010ac9
 8010a88:	08010ad9 	.word	0x08010ad9
 8010a8c:	08010ad9 	.word	0x08010ad9
 8010a90:	08010ad9 	.word	0x08010ad9
 8010a94:	08010ad9 	.word	0x08010ad9
 8010a98:	08010ad9 	.word	0x08010ad9
 8010a9c:	08010ad9 	.word	0x08010ad9
 8010aa0:	08010ad9 	.word	0x08010ad9
 8010aa4:	08010ad1 	.word	0x08010ad1
 8010aa8:	2301      	movs	r3, #1
 8010aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010aae:	e222      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ab0:	2304      	movs	r3, #4
 8010ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ab6:	e21e      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ab8:	2308      	movs	r3, #8
 8010aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010abe:	e21a      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ac0:	2310      	movs	r3, #16
 8010ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ac6:	e216      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ac8:	2320      	movs	r3, #32
 8010aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ace:	e212      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ad0:	2340      	movs	r3, #64	; 0x40
 8010ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ad6:	e20e      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ad8:	2380      	movs	r3, #128	; 0x80
 8010ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ade:	e20a      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	4a69      	ldr	r2, [pc, #420]	; (8010c8c <UART_SetConfig+0x33c>)
 8010ae6:	4293      	cmp	r3, r2
 8010ae8:	d130      	bne.n	8010b4c <UART_SetConfig+0x1fc>
 8010aea:	4b67      	ldr	r3, [pc, #412]	; (8010c88 <UART_SetConfig+0x338>)
 8010aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aee:	f003 0307 	and.w	r3, r3, #7
 8010af2:	2b05      	cmp	r3, #5
 8010af4:	d826      	bhi.n	8010b44 <UART_SetConfig+0x1f4>
 8010af6:	a201      	add	r2, pc, #4	; (adr r2, 8010afc <UART_SetConfig+0x1ac>)
 8010af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010afc:	08010b15 	.word	0x08010b15
 8010b00:	08010b1d 	.word	0x08010b1d
 8010b04:	08010b25 	.word	0x08010b25
 8010b08:	08010b2d 	.word	0x08010b2d
 8010b0c:	08010b35 	.word	0x08010b35
 8010b10:	08010b3d 	.word	0x08010b3d
 8010b14:	2300      	movs	r3, #0
 8010b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b1a:	e1ec      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b1c:	2304      	movs	r3, #4
 8010b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b22:	e1e8      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b24:	2308      	movs	r3, #8
 8010b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b2a:	e1e4      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b2c:	2310      	movs	r3, #16
 8010b2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b32:	e1e0      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b34:	2320      	movs	r3, #32
 8010b36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b3a:	e1dc      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b3c:	2340      	movs	r3, #64	; 0x40
 8010b3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b42:	e1d8      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b44:	2380      	movs	r3, #128	; 0x80
 8010b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4a:	e1d4      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b4c:	697b      	ldr	r3, [r7, #20]
 8010b4e:	681b      	ldr	r3, [r3, #0]
 8010b50:	4a4f      	ldr	r2, [pc, #316]	; (8010c90 <UART_SetConfig+0x340>)
 8010b52:	4293      	cmp	r3, r2
 8010b54:	d130      	bne.n	8010bb8 <UART_SetConfig+0x268>
 8010b56:	4b4c      	ldr	r3, [pc, #304]	; (8010c88 <UART_SetConfig+0x338>)
 8010b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b5a:	f003 0307 	and.w	r3, r3, #7
 8010b5e:	2b05      	cmp	r3, #5
 8010b60:	d826      	bhi.n	8010bb0 <UART_SetConfig+0x260>
 8010b62:	a201      	add	r2, pc, #4	; (adr r2, 8010b68 <UART_SetConfig+0x218>)
 8010b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b68:	08010b81 	.word	0x08010b81
 8010b6c:	08010b89 	.word	0x08010b89
 8010b70:	08010b91 	.word	0x08010b91
 8010b74:	08010b99 	.word	0x08010b99
 8010b78:	08010ba1 	.word	0x08010ba1
 8010b7c:	08010ba9 	.word	0x08010ba9
 8010b80:	2300      	movs	r3, #0
 8010b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b86:	e1b6      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b88:	2304      	movs	r3, #4
 8010b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8e:	e1b2      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b90:	2308      	movs	r3, #8
 8010b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b96:	e1ae      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010b98:	2310      	movs	r3, #16
 8010b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9e:	e1aa      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ba0:	2320      	movs	r3, #32
 8010ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba6:	e1a6      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ba8:	2340      	movs	r3, #64	; 0x40
 8010baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bae:	e1a2      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010bb0:	2380      	movs	r3, #128	; 0x80
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb6:	e19e      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010bb8:	697b      	ldr	r3, [r7, #20]
 8010bba:	681b      	ldr	r3, [r3, #0]
 8010bbc:	4a35      	ldr	r2, [pc, #212]	; (8010c94 <UART_SetConfig+0x344>)
 8010bbe:	4293      	cmp	r3, r2
 8010bc0:	d130      	bne.n	8010c24 <UART_SetConfig+0x2d4>
 8010bc2:	4b31      	ldr	r3, [pc, #196]	; (8010c88 <UART_SetConfig+0x338>)
 8010bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bc6:	f003 0307 	and.w	r3, r3, #7
 8010bca:	2b05      	cmp	r3, #5
 8010bcc:	d826      	bhi.n	8010c1c <UART_SetConfig+0x2cc>
 8010bce:	a201      	add	r2, pc, #4	; (adr r2, 8010bd4 <UART_SetConfig+0x284>)
 8010bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bd4:	08010bed 	.word	0x08010bed
 8010bd8:	08010bf5 	.word	0x08010bf5
 8010bdc:	08010bfd 	.word	0x08010bfd
 8010be0:	08010c05 	.word	0x08010c05
 8010be4:	08010c0d 	.word	0x08010c0d
 8010be8:	08010c15 	.word	0x08010c15
 8010bec:	2300      	movs	r3, #0
 8010bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bf2:	e180      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010bf4:	2304      	movs	r3, #4
 8010bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfa:	e17c      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010bfc:	2308      	movs	r3, #8
 8010bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c02:	e178      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010c04:	2310      	movs	r3, #16
 8010c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0a:	e174      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010c0c:	2320      	movs	r3, #32
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c12:	e170      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010c14:	2340      	movs	r3, #64	; 0x40
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1a:	e16c      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010c1c:	2380      	movs	r3, #128	; 0x80
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c22:	e168      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	681b      	ldr	r3, [r3, #0]
 8010c28:	4a1b      	ldr	r2, [pc, #108]	; (8010c98 <UART_SetConfig+0x348>)
 8010c2a:	4293      	cmp	r3, r2
 8010c2c:	d142      	bne.n	8010cb4 <UART_SetConfig+0x364>
 8010c2e:	4b16      	ldr	r3, [pc, #88]	; (8010c88 <UART_SetConfig+0x338>)
 8010c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c32:	f003 0307 	and.w	r3, r3, #7
 8010c36:	2b05      	cmp	r3, #5
 8010c38:	d838      	bhi.n	8010cac <UART_SetConfig+0x35c>
 8010c3a:	a201      	add	r2, pc, #4	; (adr r2, 8010c40 <UART_SetConfig+0x2f0>)
 8010c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c40:	08010c59 	.word	0x08010c59
 8010c44:	08010c61 	.word	0x08010c61
 8010c48:	08010c69 	.word	0x08010c69
 8010c4c:	08010c71 	.word	0x08010c71
 8010c50:	08010c9d 	.word	0x08010c9d
 8010c54:	08010ca5 	.word	0x08010ca5
 8010c58:	2300      	movs	r3, #0
 8010c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c5e:	e14a      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010c60:	2304      	movs	r3, #4
 8010c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c66:	e146      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010c68:	2308      	movs	r3, #8
 8010c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6e:	e142      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010c70:	2310      	movs	r3, #16
 8010c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c76:	e13e      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010c78:	cfff69f3 	.word	0xcfff69f3
 8010c7c:	58000c00 	.word	0x58000c00
 8010c80:	11fff4ff 	.word	0x11fff4ff
 8010c84:	40011000 	.word	0x40011000
 8010c88:	58024400 	.word	0x58024400
 8010c8c:	40004400 	.word	0x40004400
 8010c90:	40004800 	.word	0x40004800
 8010c94:	40004c00 	.word	0x40004c00
 8010c98:	40005000 	.word	0x40005000
 8010c9c:	2320      	movs	r3, #32
 8010c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca2:	e128      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ca4:	2340      	movs	r3, #64	; 0x40
 8010ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010caa:	e124      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010cac:	2380      	movs	r3, #128	; 0x80
 8010cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb2:	e120      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010cb4:	697b      	ldr	r3, [r7, #20]
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	4acb      	ldr	r2, [pc, #812]	; (8010fe8 <UART_SetConfig+0x698>)
 8010cba:	4293      	cmp	r3, r2
 8010cbc:	d176      	bne.n	8010dac <UART_SetConfig+0x45c>
 8010cbe:	4bcb      	ldr	r3, [pc, #812]	; (8010fec <UART_SetConfig+0x69c>)
 8010cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010cc2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010cc6:	2b28      	cmp	r3, #40	; 0x28
 8010cc8:	d86c      	bhi.n	8010da4 <UART_SetConfig+0x454>
 8010cca:	a201      	add	r2, pc, #4	; (adr r2, 8010cd0 <UART_SetConfig+0x380>)
 8010ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cd0:	08010d75 	.word	0x08010d75
 8010cd4:	08010da5 	.word	0x08010da5
 8010cd8:	08010da5 	.word	0x08010da5
 8010cdc:	08010da5 	.word	0x08010da5
 8010ce0:	08010da5 	.word	0x08010da5
 8010ce4:	08010da5 	.word	0x08010da5
 8010ce8:	08010da5 	.word	0x08010da5
 8010cec:	08010da5 	.word	0x08010da5
 8010cf0:	08010d7d 	.word	0x08010d7d
 8010cf4:	08010da5 	.word	0x08010da5
 8010cf8:	08010da5 	.word	0x08010da5
 8010cfc:	08010da5 	.word	0x08010da5
 8010d00:	08010da5 	.word	0x08010da5
 8010d04:	08010da5 	.word	0x08010da5
 8010d08:	08010da5 	.word	0x08010da5
 8010d0c:	08010da5 	.word	0x08010da5
 8010d10:	08010d85 	.word	0x08010d85
 8010d14:	08010da5 	.word	0x08010da5
 8010d18:	08010da5 	.word	0x08010da5
 8010d1c:	08010da5 	.word	0x08010da5
 8010d20:	08010da5 	.word	0x08010da5
 8010d24:	08010da5 	.word	0x08010da5
 8010d28:	08010da5 	.word	0x08010da5
 8010d2c:	08010da5 	.word	0x08010da5
 8010d30:	08010d8d 	.word	0x08010d8d
 8010d34:	08010da5 	.word	0x08010da5
 8010d38:	08010da5 	.word	0x08010da5
 8010d3c:	08010da5 	.word	0x08010da5
 8010d40:	08010da5 	.word	0x08010da5
 8010d44:	08010da5 	.word	0x08010da5
 8010d48:	08010da5 	.word	0x08010da5
 8010d4c:	08010da5 	.word	0x08010da5
 8010d50:	08010d95 	.word	0x08010d95
 8010d54:	08010da5 	.word	0x08010da5
 8010d58:	08010da5 	.word	0x08010da5
 8010d5c:	08010da5 	.word	0x08010da5
 8010d60:	08010da5 	.word	0x08010da5
 8010d64:	08010da5 	.word	0x08010da5
 8010d68:	08010da5 	.word	0x08010da5
 8010d6c:	08010da5 	.word	0x08010da5
 8010d70:	08010d9d 	.word	0x08010d9d
 8010d74:	2301      	movs	r3, #1
 8010d76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d7a:	e0bc      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010d7c:	2304      	movs	r3, #4
 8010d7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d82:	e0b8      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010d84:	2308      	movs	r3, #8
 8010d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d8a:	e0b4      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010d8c:	2310      	movs	r3, #16
 8010d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d92:	e0b0      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010d94:	2320      	movs	r3, #32
 8010d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d9a:	e0ac      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010d9c:	2340      	movs	r3, #64	; 0x40
 8010d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010da2:	e0a8      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010da4:	2380      	movs	r3, #128	; 0x80
 8010da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010daa:	e0a4      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010dac:	697b      	ldr	r3, [r7, #20]
 8010dae:	681b      	ldr	r3, [r3, #0]
 8010db0:	4a8f      	ldr	r2, [pc, #572]	; (8010ff0 <UART_SetConfig+0x6a0>)
 8010db2:	4293      	cmp	r3, r2
 8010db4:	d130      	bne.n	8010e18 <UART_SetConfig+0x4c8>
 8010db6:	4b8d      	ldr	r3, [pc, #564]	; (8010fec <UART_SetConfig+0x69c>)
 8010db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010dba:	f003 0307 	and.w	r3, r3, #7
 8010dbe:	2b05      	cmp	r3, #5
 8010dc0:	d826      	bhi.n	8010e10 <UART_SetConfig+0x4c0>
 8010dc2:	a201      	add	r2, pc, #4	; (adr r2, 8010dc8 <UART_SetConfig+0x478>)
 8010dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010dc8:	08010de1 	.word	0x08010de1
 8010dcc:	08010de9 	.word	0x08010de9
 8010dd0:	08010df1 	.word	0x08010df1
 8010dd4:	08010df9 	.word	0x08010df9
 8010dd8:	08010e01 	.word	0x08010e01
 8010ddc:	08010e09 	.word	0x08010e09
 8010de0:	2300      	movs	r3, #0
 8010de2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010de6:	e086      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010de8:	2304      	movs	r3, #4
 8010dea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dee:	e082      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010df0:	2308      	movs	r3, #8
 8010df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010df6:	e07e      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010df8:	2310      	movs	r3, #16
 8010dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010dfe:	e07a      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e00:	2320      	movs	r3, #32
 8010e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e06:	e076      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e08:	2340      	movs	r3, #64	; 0x40
 8010e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e0e:	e072      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e10:	2380      	movs	r3, #128	; 0x80
 8010e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e16:	e06e      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e18:	697b      	ldr	r3, [r7, #20]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	4a75      	ldr	r2, [pc, #468]	; (8010ff4 <UART_SetConfig+0x6a4>)
 8010e1e:	4293      	cmp	r3, r2
 8010e20:	d130      	bne.n	8010e84 <UART_SetConfig+0x534>
 8010e22:	4b72      	ldr	r3, [pc, #456]	; (8010fec <UART_SetConfig+0x69c>)
 8010e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010e26:	f003 0307 	and.w	r3, r3, #7
 8010e2a:	2b05      	cmp	r3, #5
 8010e2c:	d826      	bhi.n	8010e7c <UART_SetConfig+0x52c>
 8010e2e:	a201      	add	r2, pc, #4	; (adr r2, 8010e34 <UART_SetConfig+0x4e4>)
 8010e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010e34:	08010e4d 	.word	0x08010e4d
 8010e38:	08010e55 	.word	0x08010e55
 8010e3c:	08010e5d 	.word	0x08010e5d
 8010e40:	08010e65 	.word	0x08010e65
 8010e44:	08010e6d 	.word	0x08010e6d
 8010e48:	08010e75 	.word	0x08010e75
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e52:	e050      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e54:	2304      	movs	r3, #4
 8010e56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e5a:	e04c      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e5c:	2308      	movs	r3, #8
 8010e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e62:	e048      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e64:	2310      	movs	r3, #16
 8010e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e6a:	e044      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e6c:	2320      	movs	r3, #32
 8010e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e72:	e040      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e74:	2340      	movs	r3, #64	; 0x40
 8010e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e7a:	e03c      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e7c:	2380      	movs	r3, #128	; 0x80
 8010e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010e82:	e038      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	681b      	ldr	r3, [r3, #0]
 8010e88:	4a5b      	ldr	r2, [pc, #364]	; (8010ff8 <UART_SetConfig+0x6a8>)
 8010e8a:	4293      	cmp	r3, r2
 8010e8c:	d130      	bne.n	8010ef0 <UART_SetConfig+0x5a0>
 8010e8e:	4b57      	ldr	r3, [pc, #348]	; (8010fec <UART_SetConfig+0x69c>)
 8010e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e92:	f003 0307 	and.w	r3, r3, #7
 8010e96:	2b05      	cmp	r3, #5
 8010e98:	d826      	bhi.n	8010ee8 <UART_SetConfig+0x598>
 8010e9a:	a201      	add	r2, pc, #4	; (adr r2, 8010ea0 <UART_SetConfig+0x550>)
 8010e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ea0:	08010eb9 	.word	0x08010eb9
 8010ea4:	08010ec1 	.word	0x08010ec1
 8010ea8:	08010ec9 	.word	0x08010ec9
 8010eac:	08010ed1 	.word	0x08010ed1
 8010eb0:	08010ed9 	.word	0x08010ed9
 8010eb4:	08010ee1 	.word	0x08010ee1
 8010eb8:	2302      	movs	r3, #2
 8010eba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ebe:	e01a      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ec0:	2304      	movs	r3, #4
 8010ec2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ec6:	e016      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ec8:	2308      	movs	r3, #8
 8010eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ece:	e012      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ed0:	2310      	movs	r3, #16
 8010ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ed6:	e00e      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ed8:	2320      	movs	r3, #32
 8010eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ede:	e00a      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ee0:	2340      	movs	r3, #64	; 0x40
 8010ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ee6:	e006      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ee8:	2380      	movs	r3, #128	; 0x80
 8010eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010eee:	e002      	b.n	8010ef6 <UART_SetConfig+0x5a6>
 8010ef0:	2380      	movs	r3, #128	; 0x80
 8010ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010ef6:	697b      	ldr	r3, [r7, #20]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	4a3f      	ldr	r2, [pc, #252]	; (8010ff8 <UART_SetConfig+0x6a8>)
 8010efc:	4293      	cmp	r3, r2
 8010efe:	f040 80f8 	bne.w	80110f2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010f02:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f06:	2b20      	cmp	r3, #32
 8010f08:	dc46      	bgt.n	8010f98 <UART_SetConfig+0x648>
 8010f0a:	2b02      	cmp	r3, #2
 8010f0c:	f2c0 8082 	blt.w	8011014 <UART_SetConfig+0x6c4>
 8010f10:	3b02      	subs	r3, #2
 8010f12:	2b1e      	cmp	r3, #30
 8010f14:	d87e      	bhi.n	8011014 <UART_SetConfig+0x6c4>
 8010f16:	a201      	add	r2, pc, #4	; (adr r2, 8010f1c <UART_SetConfig+0x5cc>)
 8010f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f1c:	08010f9f 	.word	0x08010f9f
 8010f20:	08011015 	.word	0x08011015
 8010f24:	08010fa7 	.word	0x08010fa7
 8010f28:	08011015 	.word	0x08011015
 8010f2c:	08011015 	.word	0x08011015
 8010f30:	08011015 	.word	0x08011015
 8010f34:	08010fb7 	.word	0x08010fb7
 8010f38:	08011015 	.word	0x08011015
 8010f3c:	08011015 	.word	0x08011015
 8010f40:	08011015 	.word	0x08011015
 8010f44:	08011015 	.word	0x08011015
 8010f48:	08011015 	.word	0x08011015
 8010f4c:	08011015 	.word	0x08011015
 8010f50:	08011015 	.word	0x08011015
 8010f54:	08010fc7 	.word	0x08010fc7
 8010f58:	08011015 	.word	0x08011015
 8010f5c:	08011015 	.word	0x08011015
 8010f60:	08011015 	.word	0x08011015
 8010f64:	08011015 	.word	0x08011015
 8010f68:	08011015 	.word	0x08011015
 8010f6c:	08011015 	.word	0x08011015
 8010f70:	08011015 	.word	0x08011015
 8010f74:	08011015 	.word	0x08011015
 8010f78:	08011015 	.word	0x08011015
 8010f7c:	08011015 	.word	0x08011015
 8010f80:	08011015 	.word	0x08011015
 8010f84:	08011015 	.word	0x08011015
 8010f88:	08011015 	.word	0x08011015
 8010f8c:	08011015 	.word	0x08011015
 8010f90:	08011015 	.word	0x08011015
 8010f94:	08011007 	.word	0x08011007
 8010f98:	2b40      	cmp	r3, #64	; 0x40
 8010f9a:	d037      	beq.n	801100c <UART_SetConfig+0x6bc>
 8010f9c:	e03a      	b.n	8011014 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010f9e:	f7fb fd2b 	bl	800c9f8 <HAL_RCCEx_GetD3PCLK1Freq>
 8010fa2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010fa4:	e03c      	b.n	8011020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010faa:	4618      	mov	r0, r3
 8010fac:	f7fb fd3a 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fb4:	e034      	b.n	8011020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010fb6:	f107 0318 	add.w	r3, r7, #24
 8010fba:	4618      	mov	r0, r3
 8010fbc:	f7fb fe86 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fc4:	e02c      	b.n	8011020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fc6:	4b09      	ldr	r3, [pc, #36]	; (8010fec <UART_SetConfig+0x69c>)
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	f003 0320 	and.w	r3, r3, #32
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	d016      	beq.n	8011000 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010fd2:	4b06      	ldr	r3, [pc, #24]	; (8010fec <UART_SetConfig+0x69c>)
 8010fd4:	681b      	ldr	r3, [r3, #0]
 8010fd6:	08db      	lsrs	r3, r3, #3
 8010fd8:	f003 0303 	and.w	r3, r3, #3
 8010fdc:	4a07      	ldr	r2, [pc, #28]	; (8010ffc <UART_SetConfig+0x6ac>)
 8010fde:	fa22 f303 	lsr.w	r3, r2, r3
 8010fe2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010fe4:	e01c      	b.n	8011020 <UART_SetConfig+0x6d0>
 8010fe6:	bf00      	nop
 8010fe8:	40011400 	.word	0x40011400
 8010fec:	58024400 	.word	0x58024400
 8010ff0:	40007800 	.word	0x40007800
 8010ff4:	40007c00 	.word	0x40007c00
 8010ff8:	58000c00 	.word	0x58000c00
 8010ffc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8011000:	4b9d      	ldr	r3, [pc, #628]	; (8011278 <UART_SetConfig+0x928>)
 8011002:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011004:	e00c      	b.n	8011020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011006:	4b9d      	ldr	r3, [pc, #628]	; (801127c <UART_SetConfig+0x92c>)
 8011008:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801100a:	e009      	b.n	8011020 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801100c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011010:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011012:	e005      	b.n	8011020 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8011014:	2300      	movs	r3, #0
 8011016:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011018:	2301      	movs	r3, #1
 801101a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801101e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8011020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011022:	2b00      	cmp	r3, #0
 8011024:	f000 81de 	beq.w	80113e4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8011028:	697b      	ldr	r3, [r7, #20]
 801102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801102c:	4a94      	ldr	r2, [pc, #592]	; (8011280 <UART_SetConfig+0x930>)
 801102e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011032:	461a      	mov	r2, r3
 8011034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011036:	fbb3 f3f2 	udiv	r3, r3, r2
 801103a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801103c:	697b      	ldr	r3, [r7, #20]
 801103e:	685a      	ldr	r2, [r3, #4]
 8011040:	4613      	mov	r3, r2
 8011042:	005b      	lsls	r3, r3, #1
 8011044:	4413      	add	r3, r2
 8011046:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011048:	429a      	cmp	r2, r3
 801104a:	d305      	bcc.n	8011058 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801104c:	697b      	ldr	r3, [r7, #20]
 801104e:	685b      	ldr	r3, [r3, #4]
 8011050:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8011052:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011054:	429a      	cmp	r2, r3
 8011056:	d903      	bls.n	8011060 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8011058:	2301      	movs	r3, #1
 801105a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801105e:	e1c1      	b.n	80113e4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011062:	2200      	movs	r2, #0
 8011064:	60bb      	str	r3, [r7, #8]
 8011066:	60fa      	str	r2, [r7, #12]
 8011068:	697b      	ldr	r3, [r7, #20]
 801106a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801106c:	4a84      	ldr	r2, [pc, #528]	; (8011280 <UART_SetConfig+0x930>)
 801106e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011072:	b29b      	uxth	r3, r3
 8011074:	2200      	movs	r2, #0
 8011076:	603b      	str	r3, [r7, #0]
 8011078:	607a      	str	r2, [r7, #4]
 801107a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801107e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8011082:	f7ef f92d 	bl	80002e0 <__aeabi_uldivmod>
 8011086:	4602      	mov	r2, r0
 8011088:	460b      	mov	r3, r1
 801108a:	4610      	mov	r0, r2
 801108c:	4619      	mov	r1, r3
 801108e:	f04f 0200 	mov.w	r2, #0
 8011092:	f04f 0300 	mov.w	r3, #0
 8011096:	020b      	lsls	r3, r1, #8
 8011098:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801109c:	0202      	lsls	r2, r0, #8
 801109e:	6979      	ldr	r1, [r7, #20]
 80110a0:	6849      	ldr	r1, [r1, #4]
 80110a2:	0849      	lsrs	r1, r1, #1
 80110a4:	2000      	movs	r0, #0
 80110a6:	460c      	mov	r4, r1
 80110a8:	4605      	mov	r5, r0
 80110aa:	eb12 0804 	adds.w	r8, r2, r4
 80110ae:	eb43 0905 	adc.w	r9, r3, r5
 80110b2:	697b      	ldr	r3, [r7, #20]
 80110b4:	685b      	ldr	r3, [r3, #4]
 80110b6:	2200      	movs	r2, #0
 80110b8:	469a      	mov	sl, r3
 80110ba:	4693      	mov	fp, r2
 80110bc:	4652      	mov	r2, sl
 80110be:	465b      	mov	r3, fp
 80110c0:	4640      	mov	r0, r8
 80110c2:	4649      	mov	r1, r9
 80110c4:	f7ef f90c 	bl	80002e0 <__aeabi_uldivmod>
 80110c8:	4602      	mov	r2, r0
 80110ca:	460b      	mov	r3, r1
 80110cc:	4613      	mov	r3, r2
 80110ce:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80110d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110d6:	d308      	bcc.n	80110ea <UART_SetConfig+0x79a>
 80110d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80110da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80110de:	d204      	bcs.n	80110ea <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80110e0:	697b      	ldr	r3, [r7, #20]
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80110e6:	60da      	str	r2, [r3, #12]
 80110e8:	e17c      	b.n	80113e4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80110ea:	2301      	movs	r3, #1
 80110ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80110f0:	e178      	b.n	80113e4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	69db      	ldr	r3, [r3, #28]
 80110f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80110fa:	f040 80c5 	bne.w	8011288 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80110fe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8011102:	2b20      	cmp	r3, #32
 8011104:	dc48      	bgt.n	8011198 <UART_SetConfig+0x848>
 8011106:	2b00      	cmp	r3, #0
 8011108:	db7b      	blt.n	8011202 <UART_SetConfig+0x8b2>
 801110a:	2b20      	cmp	r3, #32
 801110c:	d879      	bhi.n	8011202 <UART_SetConfig+0x8b2>
 801110e:	a201      	add	r2, pc, #4	; (adr r2, 8011114 <UART_SetConfig+0x7c4>)
 8011110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011114:	0801119f 	.word	0x0801119f
 8011118:	080111a7 	.word	0x080111a7
 801111c:	08011203 	.word	0x08011203
 8011120:	08011203 	.word	0x08011203
 8011124:	080111af 	.word	0x080111af
 8011128:	08011203 	.word	0x08011203
 801112c:	08011203 	.word	0x08011203
 8011130:	08011203 	.word	0x08011203
 8011134:	080111bf 	.word	0x080111bf
 8011138:	08011203 	.word	0x08011203
 801113c:	08011203 	.word	0x08011203
 8011140:	08011203 	.word	0x08011203
 8011144:	08011203 	.word	0x08011203
 8011148:	08011203 	.word	0x08011203
 801114c:	08011203 	.word	0x08011203
 8011150:	08011203 	.word	0x08011203
 8011154:	080111cf 	.word	0x080111cf
 8011158:	08011203 	.word	0x08011203
 801115c:	08011203 	.word	0x08011203
 8011160:	08011203 	.word	0x08011203
 8011164:	08011203 	.word	0x08011203
 8011168:	08011203 	.word	0x08011203
 801116c:	08011203 	.word	0x08011203
 8011170:	08011203 	.word	0x08011203
 8011174:	08011203 	.word	0x08011203
 8011178:	08011203 	.word	0x08011203
 801117c:	08011203 	.word	0x08011203
 8011180:	08011203 	.word	0x08011203
 8011184:	08011203 	.word	0x08011203
 8011188:	08011203 	.word	0x08011203
 801118c:	08011203 	.word	0x08011203
 8011190:	08011203 	.word	0x08011203
 8011194:	080111f5 	.word	0x080111f5
 8011198:	2b40      	cmp	r3, #64	; 0x40
 801119a:	d02e      	beq.n	80111fa <UART_SetConfig+0x8aa>
 801119c:	e031      	b.n	8011202 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801119e:	f7f9 fc33 	bl	800aa08 <HAL_RCC_GetPCLK1Freq>
 80111a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80111a4:	e033      	b.n	801120e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80111a6:	f7f9 fc45 	bl	800aa34 <HAL_RCC_GetPCLK2Freq>
 80111aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80111ac:	e02f      	b.n	801120e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80111ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80111b2:	4618      	mov	r0, r3
 80111b4:	f7fb fc36 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80111b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111bc:	e027      	b.n	801120e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80111be:	f107 0318 	add.w	r3, r7, #24
 80111c2:	4618      	mov	r0, r3
 80111c4:	f7fb fd82 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111cc:	e01f      	b.n	801120e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80111ce:	4b2d      	ldr	r3, [pc, #180]	; (8011284 <UART_SetConfig+0x934>)
 80111d0:	681b      	ldr	r3, [r3, #0]
 80111d2:	f003 0320 	and.w	r3, r3, #32
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d009      	beq.n	80111ee <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80111da:	4b2a      	ldr	r3, [pc, #168]	; (8011284 <UART_SetConfig+0x934>)
 80111dc:	681b      	ldr	r3, [r3, #0]
 80111de:	08db      	lsrs	r3, r3, #3
 80111e0:	f003 0303 	and.w	r3, r3, #3
 80111e4:	4a24      	ldr	r2, [pc, #144]	; (8011278 <UART_SetConfig+0x928>)
 80111e6:	fa22 f303 	lsr.w	r3, r2, r3
 80111ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80111ec:	e00f      	b.n	801120e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80111ee:	4b22      	ldr	r3, [pc, #136]	; (8011278 <UART_SetConfig+0x928>)
 80111f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111f2:	e00c      	b.n	801120e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80111f4:	4b21      	ldr	r3, [pc, #132]	; (801127c <UART_SetConfig+0x92c>)
 80111f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111f8:	e009      	b.n	801120e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80111fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80111fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011200:	e005      	b.n	801120e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011202:	2300      	movs	r3, #0
 8011204:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011206:	2301      	movs	r3, #1
 8011208:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801120c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801120e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011210:	2b00      	cmp	r3, #0
 8011212:	f000 80e7 	beq.w	80113e4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011216:	697b      	ldr	r3, [r7, #20]
 8011218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801121a:	4a19      	ldr	r2, [pc, #100]	; (8011280 <UART_SetConfig+0x930>)
 801121c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011220:	461a      	mov	r2, r3
 8011222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011224:	fbb3 f3f2 	udiv	r3, r3, r2
 8011228:	005a      	lsls	r2, r3, #1
 801122a:	697b      	ldr	r3, [r7, #20]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	085b      	lsrs	r3, r3, #1
 8011230:	441a      	add	r2, r3
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	685b      	ldr	r3, [r3, #4]
 8011236:	fbb2 f3f3 	udiv	r3, r2, r3
 801123a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801123c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801123e:	2b0f      	cmp	r3, #15
 8011240:	d916      	bls.n	8011270 <UART_SetConfig+0x920>
 8011242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011244:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011248:	d212      	bcs.n	8011270 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801124a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801124c:	b29b      	uxth	r3, r3
 801124e:	f023 030f 	bic.w	r3, r3, #15
 8011252:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011256:	085b      	lsrs	r3, r3, #1
 8011258:	b29b      	uxth	r3, r3
 801125a:	f003 0307 	and.w	r3, r3, #7
 801125e:	b29a      	uxth	r2, r3
 8011260:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011262:	4313      	orrs	r3, r2
 8011264:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011266:	697b      	ldr	r3, [r7, #20]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801126c:	60da      	str	r2, [r3, #12]
 801126e:	e0b9      	b.n	80113e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011270:	2301      	movs	r3, #1
 8011272:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011276:	e0b5      	b.n	80113e4 <UART_SetConfig+0xa94>
 8011278:	03d09000 	.word	0x03d09000
 801127c:	003d0900 	.word	0x003d0900
 8011280:	080170b8 	.word	0x080170b8
 8011284:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011288:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801128c:	2b20      	cmp	r3, #32
 801128e:	dc49      	bgt.n	8011324 <UART_SetConfig+0x9d4>
 8011290:	2b00      	cmp	r3, #0
 8011292:	db7c      	blt.n	801138e <UART_SetConfig+0xa3e>
 8011294:	2b20      	cmp	r3, #32
 8011296:	d87a      	bhi.n	801138e <UART_SetConfig+0xa3e>
 8011298:	a201      	add	r2, pc, #4	; (adr r2, 80112a0 <UART_SetConfig+0x950>)
 801129a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801129e:	bf00      	nop
 80112a0:	0801132b 	.word	0x0801132b
 80112a4:	08011333 	.word	0x08011333
 80112a8:	0801138f 	.word	0x0801138f
 80112ac:	0801138f 	.word	0x0801138f
 80112b0:	0801133b 	.word	0x0801133b
 80112b4:	0801138f 	.word	0x0801138f
 80112b8:	0801138f 	.word	0x0801138f
 80112bc:	0801138f 	.word	0x0801138f
 80112c0:	0801134b 	.word	0x0801134b
 80112c4:	0801138f 	.word	0x0801138f
 80112c8:	0801138f 	.word	0x0801138f
 80112cc:	0801138f 	.word	0x0801138f
 80112d0:	0801138f 	.word	0x0801138f
 80112d4:	0801138f 	.word	0x0801138f
 80112d8:	0801138f 	.word	0x0801138f
 80112dc:	0801138f 	.word	0x0801138f
 80112e0:	0801135b 	.word	0x0801135b
 80112e4:	0801138f 	.word	0x0801138f
 80112e8:	0801138f 	.word	0x0801138f
 80112ec:	0801138f 	.word	0x0801138f
 80112f0:	0801138f 	.word	0x0801138f
 80112f4:	0801138f 	.word	0x0801138f
 80112f8:	0801138f 	.word	0x0801138f
 80112fc:	0801138f 	.word	0x0801138f
 8011300:	0801138f 	.word	0x0801138f
 8011304:	0801138f 	.word	0x0801138f
 8011308:	0801138f 	.word	0x0801138f
 801130c:	0801138f 	.word	0x0801138f
 8011310:	0801138f 	.word	0x0801138f
 8011314:	0801138f 	.word	0x0801138f
 8011318:	0801138f 	.word	0x0801138f
 801131c:	0801138f 	.word	0x0801138f
 8011320:	08011381 	.word	0x08011381
 8011324:	2b40      	cmp	r3, #64	; 0x40
 8011326:	d02e      	beq.n	8011386 <UART_SetConfig+0xa36>
 8011328:	e031      	b.n	801138e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801132a:	f7f9 fb6d 	bl	800aa08 <HAL_RCC_GetPCLK1Freq>
 801132e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011330:	e033      	b.n	801139a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011332:	f7f9 fb7f 	bl	800aa34 <HAL_RCC_GetPCLK2Freq>
 8011336:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011338:	e02f      	b.n	801139a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801133a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801133e:	4618      	mov	r0, r3
 8011340:	f7fb fb70 	bl	800ca24 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011346:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011348:	e027      	b.n	801139a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801134a:	f107 0318 	add.w	r3, r7, #24
 801134e:	4618      	mov	r0, r3
 8011350:	f7fb fcbc 	bl	800cccc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011354:	69fb      	ldr	r3, [r7, #28]
 8011356:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011358:	e01f      	b.n	801139a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801135a:	4b2d      	ldr	r3, [pc, #180]	; (8011410 <UART_SetConfig+0xac0>)
 801135c:	681b      	ldr	r3, [r3, #0]
 801135e:	f003 0320 	and.w	r3, r3, #32
 8011362:	2b00      	cmp	r3, #0
 8011364:	d009      	beq.n	801137a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011366:	4b2a      	ldr	r3, [pc, #168]	; (8011410 <UART_SetConfig+0xac0>)
 8011368:	681b      	ldr	r3, [r3, #0]
 801136a:	08db      	lsrs	r3, r3, #3
 801136c:	f003 0303 	and.w	r3, r3, #3
 8011370:	4a28      	ldr	r2, [pc, #160]	; (8011414 <UART_SetConfig+0xac4>)
 8011372:	fa22 f303 	lsr.w	r3, r2, r3
 8011376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011378:	e00f      	b.n	801139a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801137a:	4b26      	ldr	r3, [pc, #152]	; (8011414 <UART_SetConfig+0xac4>)
 801137c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801137e:	e00c      	b.n	801139a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011380:	4b25      	ldr	r3, [pc, #148]	; (8011418 <UART_SetConfig+0xac8>)
 8011382:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011384:	e009      	b.n	801139a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011386:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801138a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801138c:	e005      	b.n	801139a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801138e:	2300      	movs	r3, #0
 8011390:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011392:	2301      	movs	r3, #1
 8011394:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011398:	bf00      	nop
    }

    if (pclk != 0U)
 801139a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801139c:	2b00      	cmp	r3, #0
 801139e:	d021      	beq.n	80113e4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80113a0:	697b      	ldr	r3, [r7, #20]
 80113a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a4:	4a1d      	ldr	r2, [pc, #116]	; (801141c <UART_SetConfig+0xacc>)
 80113a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80113aa:	461a      	mov	r2, r3
 80113ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80113b2:	697b      	ldr	r3, [r7, #20]
 80113b4:	685b      	ldr	r3, [r3, #4]
 80113b6:	085b      	lsrs	r3, r3, #1
 80113b8:	441a      	add	r2, r3
 80113ba:	697b      	ldr	r3, [r7, #20]
 80113bc:	685b      	ldr	r3, [r3, #4]
 80113be:	fbb2 f3f3 	udiv	r3, r2, r3
 80113c2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80113c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113c6:	2b0f      	cmp	r3, #15
 80113c8:	d909      	bls.n	80113de <UART_SetConfig+0xa8e>
 80113ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113d0:	d205      	bcs.n	80113de <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80113d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113d4:	b29a      	uxth	r2, r3
 80113d6:	697b      	ldr	r3, [r7, #20]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	60da      	str	r2, [r3, #12]
 80113dc:	e002      	b.n	80113e4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80113de:	2301      	movs	r3, #1
 80113e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80113e4:	697b      	ldr	r3, [r7, #20]
 80113e6:	2201      	movs	r2, #1
 80113e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80113ec:	697b      	ldr	r3, [r7, #20]
 80113ee:	2201      	movs	r2, #1
 80113f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80113f4:	697b      	ldr	r3, [r7, #20]
 80113f6:	2200      	movs	r2, #0
 80113f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80113fa:	697b      	ldr	r3, [r7, #20]
 80113fc:	2200      	movs	r2, #0
 80113fe:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011400:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011404:	4618      	mov	r0, r3
 8011406:	3748      	adds	r7, #72	; 0x48
 8011408:	46bd      	mov	sp, r7
 801140a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801140e:	bf00      	nop
 8011410:	58024400 	.word	0x58024400
 8011414:	03d09000 	.word	0x03d09000
 8011418:	003d0900 	.word	0x003d0900
 801141c:	080170b8 	.word	0x080170b8

08011420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011420:	b480      	push	{r7}
 8011422:	b083      	sub	sp, #12
 8011424:	af00      	add	r7, sp, #0
 8011426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8011428:	687b      	ldr	r3, [r7, #4]
 801142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801142c:	f003 0308 	and.w	r3, r3, #8
 8011430:	2b00      	cmp	r3, #0
 8011432:	d00a      	beq.n	801144a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	681b      	ldr	r3, [r3, #0]
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011442:	687b      	ldr	r3, [r7, #4]
 8011444:	681b      	ldr	r3, [r3, #0]
 8011446:	430a      	orrs	r2, r1
 8011448:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801144e:	f003 0301 	and.w	r3, r3, #1
 8011452:	2b00      	cmp	r3, #0
 8011454:	d00a      	beq.n	801146c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	685b      	ldr	r3, [r3, #4]
 801145c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	430a      	orrs	r2, r1
 801146a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011470:	f003 0302 	and.w	r3, r3, #2
 8011474:	2b00      	cmp	r3, #0
 8011476:	d00a      	beq.n	801148e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011478:	687b      	ldr	r3, [r7, #4]
 801147a:	681b      	ldr	r3, [r3, #0]
 801147c:	685b      	ldr	r3, [r3, #4]
 801147e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	430a      	orrs	r2, r1
 801148c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011492:	f003 0304 	and.w	r3, r3, #4
 8011496:	2b00      	cmp	r3, #0
 8011498:	d00a      	beq.n	80114b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801149a:	687b      	ldr	r3, [r7, #4]
 801149c:	681b      	ldr	r3, [r3, #0]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80114a8:	687b      	ldr	r3, [r7, #4]
 80114aa:	681b      	ldr	r3, [r3, #0]
 80114ac:	430a      	orrs	r2, r1
 80114ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114b4:	f003 0310 	and.w	r3, r3, #16
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d00a      	beq.n	80114d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	689b      	ldr	r3, [r3, #8]
 80114c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80114c6:	687b      	ldr	r3, [r7, #4]
 80114c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80114ca:	687b      	ldr	r3, [r7, #4]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	430a      	orrs	r2, r1
 80114d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114d6:	f003 0320 	and.w	r3, r3, #32
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d00a      	beq.n	80114f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	689b      	ldr	r3, [r3, #8]
 80114e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80114e8:	687b      	ldr	r3, [r7, #4]
 80114ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	430a      	orrs	r2, r1
 80114f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80114f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	d01a      	beq.n	8011536 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	685b      	ldr	r3, [r3, #4]
 8011506:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801150e:	687b      	ldr	r3, [r7, #4]
 8011510:	681b      	ldr	r3, [r3, #0]
 8011512:	430a      	orrs	r2, r1
 8011514:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8011516:	687b      	ldr	r3, [r7, #4]
 8011518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801151a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801151e:	d10a      	bne.n	8011536 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011520:	687b      	ldr	r3, [r7, #4]
 8011522:	681b      	ldr	r3, [r3, #0]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	430a      	orrs	r2, r1
 8011534:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801153a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801153e:	2b00      	cmp	r3, #0
 8011540:	d00a      	beq.n	8011558 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011542:	687b      	ldr	r3, [r7, #4]
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	685b      	ldr	r3, [r3, #4]
 8011548:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	681b      	ldr	r3, [r3, #0]
 8011554:	430a      	orrs	r2, r1
 8011556:	605a      	str	r2, [r3, #4]
  }
}
 8011558:	bf00      	nop
 801155a:	370c      	adds	r7, #12
 801155c:	46bd      	mov	sp, r7
 801155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011562:	4770      	bx	lr

08011564 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b098      	sub	sp, #96	; 0x60
 8011568:	af02      	add	r7, sp, #8
 801156a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2200      	movs	r2, #0
 8011570:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011574:	f7f2 faf2 	bl	8003b5c <HAL_GetTick>
 8011578:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	681b      	ldr	r3, [r3, #0]
 801157e:	681b      	ldr	r3, [r3, #0]
 8011580:	f003 0308 	and.w	r3, r3, #8
 8011584:	2b08      	cmp	r3, #8
 8011586:	d12f      	bne.n	80115e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011588:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801158c:	9300      	str	r3, [sp, #0]
 801158e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011590:	2200      	movs	r2, #0
 8011592:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011596:	6878      	ldr	r0, [r7, #4]
 8011598:	f000 f88e 	bl	80116b8 <UART_WaitOnFlagUntilTimeout>
 801159c:	4603      	mov	r3, r0
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d022      	beq.n	80115e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80115a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115aa:	e853 3f00 	ldrex	r3, [r3]
 80115ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80115b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80115b6:	653b      	str	r3, [r7, #80]	; 0x50
 80115b8:	687b      	ldr	r3, [r7, #4]
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	461a      	mov	r2, r3
 80115be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115c0:	647b      	str	r3, [r7, #68]	; 0x44
 80115c2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80115c4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80115c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80115c8:	e841 2300 	strex	r3, r2, [r1]
 80115cc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80115ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d1e6      	bne.n	80115a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	2220      	movs	r2, #32
 80115d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80115e4:	2303      	movs	r3, #3
 80115e6:	e063      	b.n	80116b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	f003 0304 	and.w	r3, r3, #4
 80115f2:	2b04      	cmp	r3, #4
 80115f4:	d149      	bne.n	801168a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80115f6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80115fa:	9300      	str	r3, [sp, #0]
 80115fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115fe:	2200      	movs	r2, #0
 8011600:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f000 f857 	bl	80116b8 <UART_WaitOnFlagUntilTimeout>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d03c      	beq.n	801168a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011610:	687b      	ldr	r3, [r7, #4]
 8011612:	681b      	ldr	r3, [r3, #0]
 8011614:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011618:	e853 3f00 	ldrex	r3, [r3]
 801161c:	623b      	str	r3, [r7, #32]
   return(result);
 801161e:	6a3b      	ldr	r3, [r7, #32]
 8011620:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011624:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	681b      	ldr	r3, [r3, #0]
 801162a:	461a      	mov	r2, r3
 801162c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801162e:	633b      	str	r3, [r7, #48]	; 0x30
 8011630:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011636:	e841 2300 	strex	r3, r2, [r1]
 801163a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801163e:	2b00      	cmp	r3, #0
 8011640:	d1e6      	bne.n	8011610 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	681b      	ldr	r3, [r3, #0]
 8011646:	3308      	adds	r3, #8
 8011648:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	e853 3f00 	ldrex	r3, [r3]
 8011650:	60fb      	str	r3, [r7, #12]
   return(result);
 8011652:	68fb      	ldr	r3, [r7, #12]
 8011654:	f023 0301 	bic.w	r3, r3, #1
 8011658:	64bb      	str	r3, [r7, #72]	; 0x48
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	3308      	adds	r3, #8
 8011660:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011662:	61fa      	str	r2, [r7, #28]
 8011664:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011666:	69b9      	ldr	r1, [r7, #24]
 8011668:	69fa      	ldr	r2, [r7, #28]
 801166a:	e841 2300 	strex	r3, r2, [r1]
 801166e:	617b      	str	r3, [r7, #20]
   return(result);
 8011670:	697b      	ldr	r3, [r7, #20]
 8011672:	2b00      	cmp	r3, #0
 8011674:	d1e5      	bne.n	8011642 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	2220      	movs	r2, #32
 801167a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	2200      	movs	r2, #0
 8011682:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011686:	2303      	movs	r3, #3
 8011688:	e012      	b.n	80116b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	2220      	movs	r2, #32
 801168e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011692:	687b      	ldr	r3, [r7, #4]
 8011694:	2220      	movs	r2, #32
 8011696:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2200      	movs	r2, #0
 801169e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80116a0:	687b      	ldr	r3, [r7, #4]
 80116a2:	2200      	movs	r2, #0
 80116a4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2200      	movs	r2, #0
 80116aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80116ae:	2300      	movs	r3, #0
}
 80116b0:	4618      	mov	r0, r3
 80116b2:	3758      	adds	r7, #88	; 0x58
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b084      	sub	sp, #16
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	603b      	str	r3, [r7, #0]
 80116c4:	4613      	mov	r3, r2
 80116c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80116c8:	e04f      	b.n	801176a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80116ca:	69bb      	ldr	r3, [r7, #24]
 80116cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80116d0:	d04b      	beq.n	801176a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80116d2:	f7f2 fa43 	bl	8003b5c <HAL_GetTick>
 80116d6:	4602      	mov	r2, r0
 80116d8:	683b      	ldr	r3, [r7, #0]
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	69ba      	ldr	r2, [r7, #24]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d302      	bcc.n	80116e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80116e2:	69bb      	ldr	r3, [r7, #24]
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d101      	bne.n	80116ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80116e8:	2303      	movs	r3, #3
 80116ea:	e04e      	b.n	801178a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	681b      	ldr	r3, [r3, #0]
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	f003 0304 	and.w	r3, r3, #4
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d037      	beq.n	801176a <UART_WaitOnFlagUntilTimeout+0xb2>
 80116fa:	68bb      	ldr	r3, [r7, #8]
 80116fc:	2b80      	cmp	r3, #128	; 0x80
 80116fe:	d034      	beq.n	801176a <UART_WaitOnFlagUntilTimeout+0xb2>
 8011700:	68bb      	ldr	r3, [r7, #8]
 8011702:	2b40      	cmp	r3, #64	; 0x40
 8011704:	d031      	beq.n	801176a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8011706:	68fb      	ldr	r3, [r7, #12]
 8011708:	681b      	ldr	r3, [r3, #0]
 801170a:	69db      	ldr	r3, [r3, #28]
 801170c:	f003 0308 	and.w	r3, r3, #8
 8011710:	2b08      	cmp	r3, #8
 8011712:	d110      	bne.n	8011736 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	2208      	movs	r2, #8
 801171a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801171c:	68f8      	ldr	r0, [r7, #12]
 801171e:	f000 f99d 	bl	8011a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	2208      	movs	r2, #8
 8011726:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801172a:	68fb      	ldr	r3, [r7, #12]
 801172c:	2200      	movs	r2, #0
 801172e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011732:	2301      	movs	r3, #1
 8011734:	e029      	b.n	801178a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	69db      	ldr	r3, [r3, #28]
 801173c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011740:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011744:	d111      	bne.n	801176a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	681b      	ldr	r3, [r3, #0]
 801174a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801174e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011750:	68f8      	ldr	r0, [r7, #12]
 8011752:	f000 f983 	bl	8011a5c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	2220      	movs	r2, #32
 801175a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	2200      	movs	r2, #0
 8011762:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011766:	2303      	movs	r3, #3
 8011768:	e00f      	b.n	801178a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	681b      	ldr	r3, [r3, #0]
 801176e:	69da      	ldr	r2, [r3, #28]
 8011770:	68bb      	ldr	r3, [r7, #8]
 8011772:	4013      	ands	r3, r2
 8011774:	68ba      	ldr	r2, [r7, #8]
 8011776:	429a      	cmp	r2, r3
 8011778:	bf0c      	ite	eq
 801177a:	2301      	moveq	r3, #1
 801177c:	2300      	movne	r3, #0
 801177e:	b2db      	uxtb	r3, r3
 8011780:	461a      	mov	r2, r3
 8011782:	79fb      	ldrb	r3, [r7, #7]
 8011784:	429a      	cmp	r2, r3
 8011786:	d0a0      	beq.n	80116ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011788:	2300      	movs	r3, #0
}
 801178a:	4618      	mov	r0, r3
 801178c:	3710      	adds	r7, #16
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
	...

08011794 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011794:	b480      	push	{r7}
 8011796:	b0a3      	sub	sp, #140	; 0x8c
 8011798:	af00      	add	r7, sp, #0
 801179a:	60f8      	str	r0, [r7, #12]
 801179c:	60b9      	str	r1, [r7, #8]
 801179e:	4613      	mov	r3, r2
 80117a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80117a2:	68fb      	ldr	r3, [r7, #12]
 80117a4:	68ba      	ldr	r2, [r7, #8]
 80117a6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	88fa      	ldrh	r2, [r7, #6]
 80117ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	88fa      	ldrh	r2, [r7, #6]
 80117b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	2200      	movs	r2, #0
 80117bc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	689b      	ldr	r3, [r3, #8]
 80117c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80117c6:	d10e      	bne.n	80117e6 <UART_Start_Receive_IT+0x52>
 80117c8:	68fb      	ldr	r3, [r7, #12]
 80117ca:	691b      	ldr	r3, [r3, #16]
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d105      	bne.n	80117dc <UART_Start_Receive_IT+0x48>
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80117d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80117da:	e02d      	b.n	8011838 <UART_Start_Receive_IT+0xa4>
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	22ff      	movs	r2, #255	; 0xff
 80117e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80117e4:	e028      	b.n	8011838 <UART_Start_Receive_IT+0xa4>
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	689b      	ldr	r3, [r3, #8]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d10d      	bne.n	801180a <UART_Start_Receive_IT+0x76>
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	691b      	ldr	r3, [r3, #16]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d104      	bne.n	8011800 <UART_Start_Receive_IT+0x6c>
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	22ff      	movs	r2, #255	; 0xff
 80117fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80117fe:	e01b      	b.n	8011838 <UART_Start_Receive_IT+0xa4>
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	227f      	movs	r2, #127	; 0x7f
 8011804:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011808:	e016      	b.n	8011838 <UART_Start_Receive_IT+0xa4>
 801180a:	68fb      	ldr	r3, [r7, #12]
 801180c:	689b      	ldr	r3, [r3, #8]
 801180e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011812:	d10d      	bne.n	8011830 <UART_Start_Receive_IT+0x9c>
 8011814:	68fb      	ldr	r3, [r7, #12]
 8011816:	691b      	ldr	r3, [r3, #16]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d104      	bne.n	8011826 <UART_Start_Receive_IT+0x92>
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	227f      	movs	r2, #127	; 0x7f
 8011820:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011824:	e008      	b.n	8011838 <UART_Start_Receive_IT+0xa4>
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	223f      	movs	r2, #63	; 0x3f
 801182a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801182e:	e003      	b.n	8011838 <UART_Start_Receive_IT+0xa4>
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	2200      	movs	r2, #0
 8011834:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011838:	68fb      	ldr	r3, [r7, #12]
 801183a:	2200      	movs	r2, #0
 801183c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	2222      	movs	r2, #34	; 0x22
 8011844:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011848:	68fb      	ldr	r3, [r7, #12]
 801184a:	681b      	ldr	r3, [r3, #0]
 801184c:	3308      	adds	r3, #8
 801184e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011852:	e853 3f00 	ldrex	r3, [r3]
 8011856:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011858:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801185a:	f043 0301 	orr.w	r3, r3, #1
 801185e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011862:	68fb      	ldr	r3, [r7, #12]
 8011864:	681b      	ldr	r3, [r3, #0]
 8011866:	3308      	adds	r3, #8
 8011868:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801186c:	673a      	str	r2, [r7, #112]	; 0x70
 801186e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011870:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011872:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011874:	e841 2300 	strex	r3, r2, [r1]
 8011878:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801187a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801187c:	2b00      	cmp	r3, #0
 801187e:	d1e3      	bne.n	8011848 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011884:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011888:	d14f      	bne.n	801192a <UART_Start_Receive_IT+0x196>
 801188a:	68fb      	ldr	r3, [r7, #12]
 801188c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011890:	88fa      	ldrh	r2, [r7, #6]
 8011892:	429a      	cmp	r2, r3
 8011894:	d349      	bcc.n	801192a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	689b      	ldr	r3, [r3, #8]
 801189a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801189e:	d107      	bne.n	80118b0 <UART_Start_Receive_IT+0x11c>
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	691b      	ldr	r3, [r3, #16]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d103      	bne.n	80118b0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	4a47      	ldr	r2, [pc, #284]	; (80119c8 <UART_Start_Receive_IT+0x234>)
 80118ac:	675a      	str	r2, [r3, #116]	; 0x74
 80118ae:	e002      	b.n	80118b6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	4a46      	ldr	r2, [pc, #280]	; (80119cc <UART_Start_Receive_IT+0x238>)
 80118b4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	691b      	ldr	r3, [r3, #16]
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d01a      	beq.n	80118f4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80118be:	68fb      	ldr	r3, [r7, #12]
 80118c0:	681b      	ldr	r3, [r3, #0]
 80118c2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118c6:	e853 3f00 	ldrex	r3, [r3]
 80118ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80118cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80118ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80118d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	461a      	mov	r2, r3
 80118dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80118e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118e2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118e4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80118e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80118e8:	e841 2300 	strex	r3, r2, [r1]
 80118ec:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80118ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118f0:	2b00      	cmp	r3, #0
 80118f2:	d1e4      	bne.n	80118be <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	3308      	adds	r3, #8
 80118fa:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80118fe:	e853 3f00 	ldrex	r3, [r3]
 8011902:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011906:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801190a:	67fb      	str	r3, [r7, #124]	; 0x7c
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	681b      	ldr	r3, [r3, #0]
 8011910:	3308      	adds	r3, #8
 8011912:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011914:	64ba      	str	r2, [r7, #72]	; 0x48
 8011916:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011918:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801191a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801191c:	e841 2300 	strex	r3, r2, [r1]
 8011920:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011924:	2b00      	cmp	r3, #0
 8011926:	d1e5      	bne.n	80118f4 <UART_Start_Receive_IT+0x160>
 8011928:	e046      	b.n	80119b8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801192a:	68fb      	ldr	r3, [r7, #12]
 801192c:	689b      	ldr	r3, [r3, #8]
 801192e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011932:	d107      	bne.n	8011944 <UART_Start_Receive_IT+0x1b0>
 8011934:	68fb      	ldr	r3, [r7, #12]
 8011936:	691b      	ldr	r3, [r3, #16]
 8011938:	2b00      	cmp	r3, #0
 801193a:	d103      	bne.n	8011944 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	4a24      	ldr	r2, [pc, #144]	; (80119d0 <UART_Start_Receive_IT+0x23c>)
 8011940:	675a      	str	r2, [r3, #116]	; 0x74
 8011942:	e002      	b.n	801194a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	4a23      	ldr	r2, [pc, #140]	; (80119d4 <UART_Start_Receive_IT+0x240>)
 8011948:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	691b      	ldr	r3, [r3, #16]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d019      	beq.n	8011986 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	681b      	ldr	r3, [r3, #0]
 8011956:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801195a:	e853 3f00 	ldrex	r3, [r3]
 801195e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011962:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011966:	677b      	str	r3, [r7, #116]	; 0x74
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	681b      	ldr	r3, [r3, #0]
 801196c:	461a      	mov	r2, r3
 801196e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011970:	637b      	str	r3, [r7, #52]	; 0x34
 8011972:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011974:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011976:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011978:	e841 2300 	strex	r3, r2, [r1]
 801197c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011980:	2b00      	cmp	r3, #0
 8011982:	d1e6      	bne.n	8011952 <UART_Start_Receive_IT+0x1be>
 8011984:	e018      	b.n	80119b8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801198c:	697b      	ldr	r3, [r7, #20]
 801198e:	e853 3f00 	ldrex	r3, [r3]
 8011992:	613b      	str	r3, [r7, #16]
   return(result);
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	f043 0320 	orr.w	r3, r3, #32
 801199a:	67bb      	str	r3, [r7, #120]	; 0x78
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	681b      	ldr	r3, [r3, #0]
 80119a0:	461a      	mov	r2, r3
 80119a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80119a4:	623b      	str	r3, [r7, #32]
 80119a6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119a8:	69f9      	ldr	r1, [r7, #28]
 80119aa:	6a3a      	ldr	r2, [r7, #32]
 80119ac:	e841 2300 	strex	r3, r2, [r1]
 80119b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80119b2:	69bb      	ldr	r3, [r7, #24]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d1e6      	bne.n	8011986 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80119b8:	2300      	movs	r3, #0
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	378c      	adds	r7, #140	; 0x8c
 80119be:	46bd      	mov	sp, r7
 80119c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c4:	4770      	bx	lr
 80119c6:	bf00      	nop
 80119c8:	080123ad 	.word	0x080123ad
 80119cc:	0801204d 	.word	0x0801204d
 80119d0:	08011e95 	.word	0x08011e95
 80119d4:	08011cdd 	.word	0x08011cdd

080119d8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80119d8:	b480      	push	{r7}
 80119da:	b08f      	sub	sp, #60	; 0x3c
 80119dc:	af00      	add	r7, sp, #0
 80119de:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80119e0:	687b      	ldr	r3, [r7, #4]
 80119e2:	681b      	ldr	r3, [r3, #0]
 80119e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80119e6:	6a3b      	ldr	r3, [r7, #32]
 80119e8:	e853 3f00 	ldrex	r3, [r3]
 80119ec:	61fb      	str	r3, [r7, #28]
   return(result);
 80119ee:	69fb      	ldr	r3, [r7, #28]
 80119f0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80119f4:	637b      	str	r3, [r7, #52]	; 0x34
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	681b      	ldr	r3, [r3, #0]
 80119fa:	461a      	mov	r2, r3
 80119fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011a00:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011a04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a06:	e841 2300 	strex	r3, r2, [r1]
 8011a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1e6      	bne.n	80119e0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	3308      	adds	r3, #8
 8011a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	e853 3f00 	ldrex	r3, [r3]
 8011a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a22:	68bb      	ldr	r3, [r7, #8]
 8011a24:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8011a28:	633b      	str	r3, [r7, #48]	; 0x30
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	681b      	ldr	r3, [r3, #0]
 8011a2e:	3308      	adds	r3, #8
 8011a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011a32:	61ba      	str	r2, [r7, #24]
 8011a34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a36:	6979      	ldr	r1, [r7, #20]
 8011a38:	69ba      	ldr	r2, [r7, #24]
 8011a3a:	e841 2300 	strex	r3, r2, [r1]
 8011a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8011a40:	693b      	ldr	r3, [r7, #16]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d1e5      	bne.n	8011a12 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a46:	687b      	ldr	r3, [r7, #4]
 8011a48:	2220      	movs	r2, #32
 8011a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011a4e:	bf00      	nop
 8011a50:	373c      	adds	r7, #60	; 0x3c
 8011a52:	46bd      	mov	sp, r7
 8011a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a58:	4770      	bx	lr
	...

08011a5c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011a5c:	b480      	push	{r7}
 8011a5e:	b095      	sub	sp, #84	; 0x54
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a6c:	e853 3f00 	ldrex	r3, [r3]
 8011a70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a74:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011a78:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	681b      	ldr	r3, [r3, #0]
 8011a7e:	461a      	mov	r2, r3
 8011a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011a82:	643b      	str	r3, [r7, #64]	; 0x40
 8011a84:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a86:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011a88:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011a8a:	e841 2300 	strex	r3, r2, [r1]
 8011a8e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d1e6      	bne.n	8011a64 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011a96:	687b      	ldr	r3, [r7, #4]
 8011a98:	681b      	ldr	r3, [r3, #0]
 8011a9a:	3308      	adds	r3, #8
 8011a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a9e:	6a3b      	ldr	r3, [r7, #32]
 8011aa0:	e853 3f00 	ldrex	r3, [r3]
 8011aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8011aa6:	69fa      	ldr	r2, [r7, #28]
 8011aa8:	4b1e      	ldr	r3, [pc, #120]	; (8011b24 <UART_EndRxTransfer+0xc8>)
 8011aaa:	4013      	ands	r3, r2
 8011aac:	64bb      	str	r3, [r7, #72]	; 0x48
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	681b      	ldr	r3, [r3, #0]
 8011ab2:	3308      	adds	r3, #8
 8011ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ab6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011ab8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011aba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011abc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011abe:	e841 2300 	strex	r3, r2, [r1]
 8011ac2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d1e5      	bne.n	8011a96 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ace:	2b01      	cmp	r3, #1
 8011ad0:	d118      	bne.n	8011b04 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011ad2:	687b      	ldr	r3, [r7, #4]
 8011ad4:	681b      	ldr	r3, [r3, #0]
 8011ad6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ad8:	68fb      	ldr	r3, [r7, #12]
 8011ada:	e853 3f00 	ldrex	r3, [r3]
 8011ade:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	f023 0310 	bic.w	r3, r3, #16
 8011ae6:	647b      	str	r3, [r7, #68]	; 0x44
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	681b      	ldr	r3, [r3, #0]
 8011aec:	461a      	mov	r2, r3
 8011aee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011af0:	61bb      	str	r3, [r7, #24]
 8011af2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011af4:	6979      	ldr	r1, [r7, #20]
 8011af6:	69ba      	ldr	r2, [r7, #24]
 8011af8:	e841 2300 	strex	r3, r2, [r1]
 8011afc:	613b      	str	r3, [r7, #16]
   return(result);
 8011afe:	693b      	ldr	r3, [r7, #16]
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d1e6      	bne.n	8011ad2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	2220      	movs	r2, #32
 8011b08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	2200      	movs	r2, #0
 8011b10:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	2200      	movs	r2, #0
 8011b16:	675a      	str	r2, [r3, #116]	; 0x74
}
 8011b18:	bf00      	nop
 8011b1a:	3754      	adds	r7, #84	; 0x54
 8011b1c:	46bd      	mov	sp, r7
 8011b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b22:	4770      	bx	lr
 8011b24:	effffffe 	.word	0xeffffffe

08011b28 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b090      	sub	sp, #64	; 0x40
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b34:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	69db      	ldr	r3, [r3, #28]
 8011b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011b3e:	d037      	beq.n	8011bb0 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b42:	2200      	movs	r2, #0
 8011b44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b4a:	681b      	ldr	r3, [r3, #0]
 8011b4c:	3308      	adds	r3, #8
 8011b4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b52:	e853 3f00 	ldrex	r3, [r3]
 8011b56:	623b      	str	r3, [r7, #32]
   return(result);
 8011b58:	6a3b      	ldr	r3, [r7, #32]
 8011b5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011b5e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011b60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	3308      	adds	r3, #8
 8011b66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b68:	633a      	str	r2, [r7, #48]	; 0x30
 8011b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011b6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b70:	e841 2300 	strex	r3, r2, [r1]
 8011b74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b78:	2b00      	cmp	r3, #0
 8011b7a:	d1e5      	bne.n	8011b48 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b7e:	681b      	ldr	r3, [r3, #0]
 8011b80:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b82:	693b      	ldr	r3, [r7, #16]
 8011b84:	e853 3f00 	ldrex	r3, [r3]
 8011b88:	60fb      	str	r3, [r7, #12]
   return(result);
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011b90:	637b      	str	r3, [r7, #52]	; 0x34
 8011b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b94:	681b      	ldr	r3, [r3, #0]
 8011b96:	461a      	mov	r2, r3
 8011b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b9a:	61fb      	str	r3, [r7, #28]
 8011b9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b9e:	69b9      	ldr	r1, [r7, #24]
 8011ba0:	69fa      	ldr	r2, [r7, #28]
 8011ba2:	e841 2300 	strex	r3, r2, [r1]
 8011ba6:	617b      	str	r3, [r7, #20]
   return(result);
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	2b00      	cmp	r3, #0
 8011bac:	d1e6      	bne.n	8011b7c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011bae:	e002      	b.n	8011bb6 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011bb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011bb2:	f7f0 fa19 	bl	8001fe8 <HAL_UART_TxCpltCallback>
}
 8011bb6:	bf00      	nop
 8011bb8:	3740      	adds	r7, #64	; 0x40
 8011bba:	46bd      	mov	sp, r7
 8011bbc:	bd80      	pop	{r7, pc}

08011bbe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011bbe:	b580      	push	{r7, lr}
 8011bc0:	b084      	sub	sp, #16
 8011bc2:	af00      	add	r7, sp, #0
 8011bc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bca:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8011bcc:	68f8      	ldr	r0, [r7, #12]
 8011bce:	f7fe fe9f 	bl	8010910 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011bd2:	bf00      	nop
 8011bd4:	3710      	adds	r7, #16
 8011bd6:	46bd      	mov	sp, r7
 8011bd8:	bd80      	pop	{r7, pc}

08011bda <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011bda:	b580      	push	{r7, lr}
 8011bdc:	b086      	sub	sp, #24
 8011bde:	af00      	add	r7, sp, #0
 8011be0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011be6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011be8:	697b      	ldr	r3, [r7, #20]
 8011bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011bee:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011bf0:	697b      	ldr	r3, [r7, #20]
 8011bf2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011bf6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011bf8:	697b      	ldr	r3, [r7, #20]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	689b      	ldr	r3, [r3, #8]
 8011bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011c02:	2b80      	cmp	r3, #128	; 0x80
 8011c04:	d109      	bne.n	8011c1a <UART_DMAError+0x40>
 8011c06:	693b      	ldr	r3, [r7, #16]
 8011c08:	2b21      	cmp	r3, #33	; 0x21
 8011c0a:	d106      	bne.n	8011c1a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011c0c:	697b      	ldr	r3, [r7, #20]
 8011c0e:	2200      	movs	r2, #0
 8011c10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011c14:	6978      	ldr	r0, [r7, #20]
 8011c16:	f7ff fedf 	bl	80119d8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	689b      	ldr	r3, [r3, #8]
 8011c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011c24:	2b40      	cmp	r3, #64	; 0x40
 8011c26:	d109      	bne.n	8011c3c <UART_DMAError+0x62>
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2b22      	cmp	r3, #34	; 0x22
 8011c2c:	d106      	bne.n	8011c3c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011c2e:	697b      	ldr	r3, [r7, #20]
 8011c30:	2200      	movs	r2, #0
 8011c32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011c36:	6978      	ldr	r0, [r7, #20]
 8011c38:	f7ff ff10 	bl	8011a5c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011c3c:	697b      	ldr	r3, [r7, #20]
 8011c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011c42:	f043 0210 	orr.w	r2, r3, #16
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011c4c:	6978      	ldr	r0, [r7, #20]
 8011c4e:	f7fe fe69 	bl	8010924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c52:	bf00      	nop
 8011c54:	3718      	adds	r7, #24
 8011c56:	46bd      	mov	sp, r7
 8011c58:	bd80      	pop	{r7, pc}

08011c5a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011c5a:	b580      	push	{r7, lr}
 8011c5c:	b084      	sub	sp, #16
 8011c5e:	af00      	add	r7, sp, #0
 8011c60:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011c62:	687b      	ldr	r3, [r7, #4]
 8011c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011c66:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2200      	movs	r2, #0
 8011c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	2200      	movs	r2, #0
 8011c74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011c78:	68f8      	ldr	r0, [r7, #12]
 8011c7a:	f7fe fe53 	bl	8010924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011c7e:	bf00      	nop
 8011c80:	3710      	adds	r7, #16
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b088      	sub	sp, #32
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011c8e:	687b      	ldr	r3, [r7, #4]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	e853 3f00 	ldrex	r3, [r3]
 8011c9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ca2:	61fb      	str	r3, [r7, #28]
 8011ca4:	687b      	ldr	r3, [r7, #4]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	461a      	mov	r2, r3
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	61bb      	str	r3, [r7, #24]
 8011cae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cb0:	6979      	ldr	r1, [r7, #20]
 8011cb2:	69ba      	ldr	r2, [r7, #24]
 8011cb4:	e841 2300 	strex	r3, r2, [r1]
 8011cb8:	613b      	str	r3, [r7, #16]
   return(result);
 8011cba:	693b      	ldr	r3, [r7, #16]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d1e6      	bne.n	8011c8e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011cc0:	687b      	ldr	r3, [r7, #4]
 8011cc2:	2220      	movs	r2, #32
 8011cc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011cc8:	687b      	ldr	r3, [r7, #4]
 8011cca:	2200      	movs	r2, #0
 8011ccc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011cce:	6878      	ldr	r0, [r7, #4]
 8011cd0:	f7f0 f98a 	bl	8001fe8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011cd4:	bf00      	nop
 8011cd6:	3720      	adds	r7, #32
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}

08011cdc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011cdc:	b580      	push	{r7, lr}
 8011cde:	b09c      	sub	sp, #112	; 0x70
 8011ce0:	af00      	add	r7, sp, #0
 8011ce2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cea:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011cee:	687b      	ldr	r3, [r7, #4]
 8011cf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011cf4:	2b22      	cmp	r3, #34	; 0x22
 8011cf6:	f040 80be 	bne.w	8011e76 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d00:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011d04:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011d08:	b2d9      	uxtb	r1, r3
 8011d0a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011d0e:	b2da      	uxtb	r2, r3
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d14:	400a      	ands	r2, r1
 8011d16:	b2d2      	uxtb	r2, r2
 8011d18:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011d1e:	1c5a      	adds	r2, r3, #1
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011d24:	687b      	ldr	r3, [r7, #4]
 8011d26:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	3b01      	subs	r3, #1
 8011d2e:	b29a      	uxth	r2, r3
 8011d30:	687b      	ldr	r3, [r7, #4]
 8011d32:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011d36:	687b      	ldr	r3, [r7, #4]
 8011d38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d3c:	b29b      	uxth	r3, r3
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	f040 80a1 	bne.w	8011e86 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	681b      	ldr	r3, [r3, #0]
 8011d48:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d4c:	e853 3f00 	ldrex	r3, [r3]
 8011d50:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d58:	66bb      	str	r3, [r7, #104]	; 0x68
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	461a      	mov	r2, r3
 8011d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011d62:	65bb      	str	r3, [r7, #88]	; 0x58
 8011d64:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d66:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011d68:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011d6a:	e841 2300 	strex	r3, r2, [r1]
 8011d6e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d1e6      	bne.n	8011d44 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	3308      	adds	r3, #8
 8011d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d80:	e853 3f00 	ldrex	r3, [r3]
 8011d84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d88:	f023 0301 	bic.w	r3, r3, #1
 8011d8c:	667b      	str	r3, [r7, #100]	; 0x64
 8011d8e:	687b      	ldr	r3, [r7, #4]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	3308      	adds	r3, #8
 8011d94:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011d96:	647a      	str	r2, [r7, #68]	; 0x44
 8011d98:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d9a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011d9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011d9e:	e841 2300 	strex	r3, r2, [r1]
 8011da2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011da4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d1e5      	bne.n	8011d76 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	2220      	movs	r2, #32
 8011dae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011db2:	687b      	ldr	r3, [r7, #4]
 8011db4:	2200      	movs	r2, #0
 8011db6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	2200      	movs	r2, #0
 8011dbc:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011dbe:	687b      	ldr	r3, [r7, #4]
 8011dc0:	681b      	ldr	r3, [r3, #0]
 8011dc2:	4a33      	ldr	r2, [pc, #204]	; (8011e90 <UART_RxISR_8BIT+0x1b4>)
 8011dc4:	4293      	cmp	r3, r2
 8011dc6:	d01f      	beq.n	8011e08 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	681b      	ldr	r3, [r3, #0]
 8011dcc:	685b      	ldr	r3, [r3, #4]
 8011dce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d018      	beq.n	8011e08 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	681b      	ldr	r3, [r3, #0]
 8011dda:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dde:	e853 3f00 	ldrex	r3, [r3]
 8011de2:	623b      	str	r3, [r7, #32]
   return(result);
 8011de4:	6a3b      	ldr	r3, [r7, #32]
 8011de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011dea:	663b      	str	r3, [r7, #96]	; 0x60
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	681b      	ldr	r3, [r3, #0]
 8011df0:	461a      	mov	r2, r3
 8011df2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011df4:	633b      	str	r3, [r7, #48]	; 0x30
 8011df6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011df8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011dfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dfc:	e841 2300 	strex	r3, r2, [r1]
 8011e00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d1e6      	bne.n	8011dd6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e0c:	2b01      	cmp	r3, #1
 8011e0e:	d12e      	bne.n	8011e6e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	2200      	movs	r2, #0
 8011e14:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	681b      	ldr	r3, [r3, #0]
 8011e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011e1c:	693b      	ldr	r3, [r7, #16]
 8011e1e:	e853 3f00 	ldrex	r3, [r3]
 8011e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8011e24:	68fb      	ldr	r3, [r7, #12]
 8011e26:	f023 0310 	bic.w	r3, r3, #16
 8011e2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	461a      	mov	r2, r3
 8011e32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011e34:	61fb      	str	r3, [r7, #28]
 8011e36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e38:	69b9      	ldr	r1, [r7, #24]
 8011e3a:	69fa      	ldr	r2, [r7, #28]
 8011e3c:	e841 2300 	strex	r3, r2, [r1]
 8011e40:	617b      	str	r3, [r7, #20]
   return(result);
 8011e42:	697b      	ldr	r3, [r7, #20]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d1e6      	bne.n	8011e16 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	69db      	ldr	r3, [r3, #28]
 8011e4e:	f003 0310 	and.w	r3, r3, #16
 8011e52:	2b10      	cmp	r3, #16
 8011e54:	d103      	bne.n	8011e5e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2210      	movs	r2, #16
 8011e5c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e5e:	687b      	ldr	r3, [r7, #4]
 8011e60:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011e64:	4619      	mov	r1, r3
 8011e66:	6878      	ldr	r0, [r7, #4]
 8011e68:	f7fe fd66 	bl	8010938 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011e6c:	e00b      	b.n	8011e86 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011e6e:	6878      	ldr	r0, [r7, #4]
 8011e70:	f7ee fbfc 	bl	800066c <HAL_UART_RxCpltCallback>
}
 8011e74:	e007      	b.n	8011e86 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	699a      	ldr	r2, [r3, #24]
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	f042 0208 	orr.w	r2, r2, #8
 8011e84:	619a      	str	r2, [r3, #24]
}
 8011e86:	bf00      	nop
 8011e88:	3770      	adds	r7, #112	; 0x70
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bd80      	pop	{r7, pc}
 8011e8e:	bf00      	nop
 8011e90:	58000c00 	.word	0x58000c00

08011e94 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b09c      	sub	sp, #112	; 0x70
 8011e98:	af00      	add	r7, sp, #0
 8011e9a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ea2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011ea6:	687b      	ldr	r3, [r7, #4]
 8011ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011eac:	2b22      	cmp	r3, #34	; 0x22
 8011eae:	f040 80be 	bne.w	801202e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eb8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ec0:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011ec2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011ec6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011eca:	4013      	ands	r3, r2
 8011ecc:	b29a      	uxth	r2, r3
 8011ece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ed0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ed6:	1c9a      	adds	r2, r3, #2
 8011ed8:	687b      	ldr	r3, [r7, #4]
 8011eda:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011edc:	687b      	ldr	r3, [r7, #4]
 8011ede:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ee2:	b29b      	uxth	r3, r3
 8011ee4:	3b01      	subs	r3, #1
 8011ee6:	b29a      	uxth	r2, r3
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ef4:	b29b      	uxth	r3, r3
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	f040 80a1 	bne.w	801203e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011efc:	687b      	ldr	r3, [r7, #4]
 8011efe:	681b      	ldr	r3, [r3, #0]
 8011f00:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f02:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011f04:	e853 3f00 	ldrex	r3, [r3]
 8011f08:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011f0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011f10:	667b      	str	r3, [r7, #100]	; 0x64
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	461a      	mov	r2, r3
 8011f18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011f1a:	657b      	str	r3, [r7, #84]	; 0x54
 8011f1c:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f1e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011f20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011f22:	e841 2300 	strex	r3, r2, [r1]
 8011f26:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011f28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d1e6      	bne.n	8011efc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	3308      	adds	r3, #8
 8011f34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011f38:	e853 3f00 	ldrex	r3, [r3]
 8011f3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f40:	f023 0301 	bic.w	r3, r3, #1
 8011f44:	663b      	str	r3, [r7, #96]	; 0x60
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	681b      	ldr	r3, [r3, #0]
 8011f4a:	3308      	adds	r3, #8
 8011f4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011f4e:	643a      	str	r2, [r7, #64]	; 0x40
 8011f50:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011f54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011f56:	e841 2300 	strex	r3, r2, [r1]
 8011f5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d1e5      	bne.n	8011f2e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011f62:	687b      	ldr	r3, [r7, #4]
 8011f64:	2220      	movs	r2, #32
 8011f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011f6a:	687b      	ldr	r3, [r7, #4]
 8011f6c:	2200      	movs	r2, #0
 8011f6e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011f70:	687b      	ldr	r3, [r7, #4]
 8011f72:	2200      	movs	r2, #0
 8011f74:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	681b      	ldr	r3, [r3, #0]
 8011f7a:	4a33      	ldr	r2, [pc, #204]	; (8012048 <UART_RxISR_16BIT+0x1b4>)
 8011f7c:	4293      	cmp	r3, r2
 8011f7e:	d01f      	beq.n	8011fc0 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011f80:	687b      	ldr	r3, [r7, #4]
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d018      	beq.n	8011fc0 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011f8e:	687b      	ldr	r3, [r7, #4]
 8011f90:	681b      	ldr	r3, [r3, #0]
 8011f92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f94:	6a3b      	ldr	r3, [r7, #32]
 8011f96:	e853 3f00 	ldrex	r3, [r3]
 8011f9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011f9c:	69fb      	ldr	r3, [r7, #28]
 8011f9e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011fa2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011fa4:	687b      	ldr	r3, [r7, #4]
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	461a      	mov	r2, r3
 8011faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011fae:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011fb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011fb4:	e841 2300 	strex	r3, r2, [r1]
 8011fb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d1e6      	bne.n	8011f8e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fc4:	2b01      	cmp	r3, #1
 8011fc6:	d12e      	bne.n	8012026 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	2200      	movs	r2, #0
 8011fcc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011fce:	687b      	ldr	r3, [r7, #4]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	e853 3f00 	ldrex	r3, [r3]
 8011fda:	60bb      	str	r3, [r7, #8]
   return(result);
 8011fdc:	68bb      	ldr	r3, [r7, #8]
 8011fde:	f023 0310 	bic.w	r3, r3, #16
 8011fe2:	65bb      	str	r3, [r7, #88]	; 0x58
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	461a      	mov	r2, r3
 8011fea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011fec:	61bb      	str	r3, [r7, #24]
 8011fee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ff0:	6979      	ldr	r1, [r7, #20]
 8011ff2:	69ba      	ldr	r2, [r7, #24]
 8011ff4:	e841 2300 	strex	r3, r2, [r1]
 8011ff8:	613b      	str	r3, [r7, #16]
   return(result);
 8011ffa:	693b      	ldr	r3, [r7, #16]
 8011ffc:	2b00      	cmp	r3, #0
 8011ffe:	d1e6      	bne.n	8011fce <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	69db      	ldr	r3, [r3, #28]
 8012006:	f003 0310 	and.w	r3, r3, #16
 801200a:	2b10      	cmp	r3, #16
 801200c:	d103      	bne.n	8012016 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	2210      	movs	r2, #16
 8012014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801201c:	4619      	mov	r1, r3
 801201e:	6878      	ldr	r0, [r7, #4]
 8012020:	f7fe fc8a 	bl	8010938 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012024:	e00b      	b.n	801203e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8012026:	6878      	ldr	r0, [r7, #4]
 8012028:	f7ee fb20 	bl	800066c <HAL_UART_RxCpltCallback>
}
 801202c:	e007      	b.n	801203e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	681b      	ldr	r3, [r3, #0]
 8012032:	699a      	ldr	r2, [r3, #24]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	f042 0208 	orr.w	r2, r2, #8
 801203c:	619a      	str	r2, [r3, #24]
}
 801203e:	bf00      	nop
 8012040:	3770      	adds	r7, #112	; 0x70
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	58000c00 	.word	0x58000c00

0801204c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801204c:	b580      	push	{r7, lr}
 801204e:	b0ac      	sub	sp, #176	; 0xb0
 8012050:	af00      	add	r7, sp, #0
 8012052:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801205a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	681b      	ldr	r3, [r3, #0]
 8012062:	69db      	ldr	r3, [r3, #28]
 8012064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012068:	687b      	ldr	r3, [r7, #4]
 801206a:	681b      	ldr	r3, [r3, #0]
 801206c:	681b      	ldr	r3, [r3, #0]
 801206e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	681b      	ldr	r3, [r3, #0]
 8012076:	689b      	ldr	r3, [r3, #8]
 8012078:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012082:	2b22      	cmp	r3, #34	; 0x22
 8012084:	f040 8180 	bne.w	8012388 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801208e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012092:	e123      	b.n	80122dc <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801209a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801209e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80120a2:	b2d9      	uxtb	r1, r3
 80120a4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80120a8:	b2da      	uxtb	r2, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120ae:	400a      	ands	r2, r1
 80120b0:	b2d2      	uxtb	r2, r2
 80120b2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80120b8:	1c5a      	adds	r2, r3, #1
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120c4:	b29b      	uxth	r3, r3
 80120c6:	3b01      	subs	r3, #1
 80120c8:	b29a      	uxth	r2, r3
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	69db      	ldr	r3, [r3, #28]
 80120d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80120da:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120de:	f003 0307 	and.w	r3, r3, #7
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d053      	beq.n	801218e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80120e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120ea:	f003 0301 	and.w	r3, r3, #1
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d011      	beq.n	8012116 <UART_RxISR_8BIT_FIFOEN+0xca>
 80120f2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80120f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d00b      	beq.n	8012116 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80120fe:	687b      	ldr	r3, [r7, #4]
 8012100:	681b      	ldr	r3, [r3, #0]
 8012102:	2201      	movs	r2, #1
 8012104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801210c:	f043 0201 	orr.w	r2, r3, #1
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012116:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801211a:	f003 0302 	and.w	r3, r3, #2
 801211e:	2b00      	cmp	r3, #0
 8012120:	d011      	beq.n	8012146 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8012122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012126:	f003 0301 	and.w	r3, r3, #1
 801212a:	2b00      	cmp	r3, #0
 801212c:	d00b      	beq.n	8012146 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681b      	ldr	r3, [r3, #0]
 8012132:	2202      	movs	r2, #2
 8012134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801213c:	f043 0204 	orr.w	r2, r3, #4
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8012146:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801214a:	f003 0304 	and.w	r3, r3, #4
 801214e:	2b00      	cmp	r3, #0
 8012150:	d011      	beq.n	8012176 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8012152:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012156:	f003 0301 	and.w	r3, r3, #1
 801215a:	2b00      	cmp	r3, #0
 801215c:	d00b      	beq.n	8012176 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	2204      	movs	r2, #4
 8012164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801216c:	f043 0202 	orr.w	r2, r3, #2
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801217c:	2b00      	cmp	r3, #0
 801217e:	d006      	beq.n	801218e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8012180:	6878      	ldr	r0, [r7, #4]
 8012182:	f7fe fbcf 	bl	8010924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	2200      	movs	r2, #0
 801218a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012194:	b29b      	uxth	r3, r3
 8012196:	2b00      	cmp	r3, #0
 8012198:	f040 80a0 	bne.w	80122dc <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80121a4:	e853 3f00 	ldrex	r3, [r3]
 80121a8:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80121aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80121ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80121b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80121b4:	687b      	ldr	r3, [r7, #4]
 80121b6:	681b      	ldr	r3, [r3, #0]
 80121b8:	461a      	mov	r2, r3
 80121ba:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80121be:	67fb      	str	r3, [r7, #124]	; 0x7c
 80121c0:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121c2:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80121c4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80121c6:	e841 2300 	strex	r3, r2, [r1]
 80121ca:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80121cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d1e4      	bne.n	801219c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	3308      	adds	r3, #8
 80121d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80121da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80121dc:	e853 3f00 	ldrex	r3, [r3]
 80121e0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80121e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80121e4:	4b6e      	ldr	r3, [pc, #440]	; (80123a0 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80121e6:	4013      	ands	r3, r2
 80121e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	681b      	ldr	r3, [r3, #0]
 80121f0:	3308      	adds	r3, #8
 80121f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80121f6:	66ba      	str	r2, [r7, #104]	; 0x68
 80121f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80121fa:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80121fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80121fe:	e841 2300 	strex	r3, r2, [r1]
 8012202:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012206:	2b00      	cmp	r3, #0
 8012208:	d1e3      	bne.n	80121d2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	2220      	movs	r2, #32
 801220e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2200      	movs	r2, #0
 8012216:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	2200      	movs	r2, #0
 801221c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	681b      	ldr	r3, [r3, #0]
 8012222:	4a60      	ldr	r2, [pc, #384]	; (80123a4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012224:	4293      	cmp	r3, r2
 8012226:	d021      	beq.n	801226c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	681b      	ldr	r3, [r3, #0]
 801222c:	685b      	ldr	r3, [r3, #4]
 801222e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012232:	2b00      	cmp	r3, #0
 8012234:	d01a      	beq.n	801226c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801223c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801223e:	e853 3f00 	ldrex	r3, [r3]
 8012242:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012244:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012246:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801224a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801224e:	687b      	ldr	r3, [r7, #4]
 8012250:	681b      	ldr	r3, [r3, #0]
 8012252:	461a      	mov	r2, r3
 8012254:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012258:	657b      	str	r3, [r7, #84]	; 0x54
 801225a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801225c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801225e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012260:	e841 2300 	strex	r3, r2, [r1]
 8012264:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012268:	2b00      	cmp	r3, #0
 801226a:	d1e4      	bne.n	8012236 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012270:	2b01      	cmp	r3, #1
 8012272:	d130      	bne.n	80122d6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	2200      	movs	r2, #0
 8012278:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	681b      	ldr	r3, [r3, #0]
 801227e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012282:	e853 3f00 	ldrex	r3, [r3]
 8012286:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228a:	f023 0310 	bic.w	r3, r3, #16
 801228e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	461a      	mov	r2, r3
 8012298:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801229c:	643b      	str	r3, [r7, #64]	; 0x40
 801229e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80122a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80122a4:	e841 2300 	strex	r3, r2, [r1]
 80122a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80122aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d1e4      	bne.n	801227a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	69db      	ldr	r3, [r3, #28]
 80122b6:	f003 0310 	and.w	r3, r3, #16
 80122ba:	2b10      	cmp	r3, #16
 80122bc:	d103      	bne.n	80122c6 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80122be:	687b      	ldr	r3, [r7, #4]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	2210      	movs	r2, #16
 80122c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80122cc:	4619      	mov	r1, r3
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f7fe fb32 	bl	8010938 <HAL_UARTEx_RxEventCallback>
 80122d4:	e002      	b.n	80122dc <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80122d6:	6878      	ldr	r0, [r7, #4]
 80122d8:	f7ee f9c8 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80122dc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80122e0:	2b00      	cmp	r3, #0
 80122e2:	d006      	beq.n	80122f2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80122e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80122e8:	f003 0320 	and.w	r3, r3, #32
 80122ec:	2b00      	cmp	r3, #0
 80122ee:	f47f aed1 	bne.w	8012094 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80122f2:	687b      	ldr	r3, [r7, #4]
 80122f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122f8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80122fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012300:	2b00      	cmp	r3, #0
 8012302:	d049      	beq.n	8012398 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801230a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 801230e:	429a      	cmp	r2, r3
 8012310:	d242      	bcs.n	8012398 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	3308      	adds	r3, #8
 8012318:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801231a:	6a3b      	ldr	r3, [r7, #32]
 801231c:	e853 3f00 	ldrex	r3, [r3]
 8012320:	61fb      	str	r3, [r7, #28]
   return(result);
 8012322:	69fb      	ldr	r3, [r7, #28]
 8012324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	3308      	adds	r3, #8
 8012332:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012336:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012338:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801233a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801233c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801233e:	e841 2300 	strex	r3, r2, [r1]
 8012342:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012346:	2b00      	cmp	r3, #0
 8012348:	d1e3      	bne.n	8012312 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	4a16      	ldr	r2, [pc, #88]	; (80123a8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801234e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012356:	68fb      	ldr	r3, [r7, #12]
 8012358:	e853 3f00 	ldrex	r3, [r3]
 801235c:	60bb      	str	r3, [r7, #8]
   return(result);
 801235e:	68bb      	ldr	r3, [r7, #8]
 8012360:	f043 0320 	orr.w	r3, r3, #32
 8012364:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	461a      	mov	r2, r3
 801236e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012372:	61bb      	str	r3, [r7, #24]
 8012374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012376:	6979      	ldr	r1, [r7, #20]
 8012378:	69ba      	ldr	r2, [r7, #24]
 801237a:	e841 2300 	strex	r3, r2, [r1]
 801237e:	613b      	str	r3, [r7, #16]
   return(result);
 8012380:	693b      	ldr	r3, [r7, #16]
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1e4      	bne.n	8012350 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012386:	e007      	b.n	8012398 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	681b      	ldr	r3, [r3, #0]
 801238c:	699a      	ldr	r2, [r3, #24]
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	681b      	ldr	r3, [r3, #0]
 8012392:	f042 0208 	orr.w	r2, r2, #8
 8012396:	619a      	str	r2, [r3, #24]
}
 8012398:	bf00      	nop
 801239a:	37b0      	adds	r7, #176	; 0xb0
 801239c:	46bd      	mov	sp, r7
 801239e:	bd80      	pop	{r7, pc}
 80123a0:	effffffe 	.word	0xeffffffe
 80123a4:	58000c00 	.word	0x58000c00
 80123a8:	08011cdd 	.word	0x08011cdd

080123ac <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b0ae      	sub	sp, #184	; 0xb8
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80123ba:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80123be:	687b      	ldr	r3, [r7, #4]
 80123c0:	681b      	ldr	r3, [r3, #0]
 80123c2:	69db      	ldr	r3, [r3, #28]
 80123c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	681b      	ldr	r3, [r3, #0]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	681b      	ldr	r3, [r3, #0]
 80123d6:	689b      	ldr	r3, [r3, #8]
 80123d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80123e2:	2b22      	cmp	r3, #34	; 0x22
 80123e4:	f040 8184 	bne.w	80126f0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80123ee:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80123f2:	e127      	b.n	8012644 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	681b      	ldr	r3, [r3, #0]
 80123f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123fa:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012402:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8012406:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801240a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 801240e:	4013      	ands	r3, r2
 8012410:	b29a      	uxth	r2, r3
 8012412:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8012416:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801241c:	1c9a      	adds	r2, r3, #2
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012428:	b29b      	uxth	r3, r3
 801242a:	3b01      	subs	r3, #1
 801242c:	b29a      	uxth	r2, r3
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012434:	687b      	ldr	r3, [r7, #4]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	69db      	ldr	r3, [r3, #28]
 801243a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801243e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012442:	f003 0307 	and.w	r3, r3, #7
 8012446:	2b00      	cmp	r3, #0
 8012448:	d053      	beq.n	80124f2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801244a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801244e:	f003 0301 	and.w	r3, r3, #1
 8012452:	2b00      	cmp	r3, #0
 8012454:	d011      	beq.n	801247a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012456:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801245a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801245e:	2b00      	cmp	r3, #0
 8012460:	d00b      	beq.n	801247a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	2201      	movs	r2, #1
 8012468:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012470:	f043 0201 	orr.w	r2, r3, #1
 8012474:	687b      	ldr	r3, [r7, #4]
 8012476:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801247a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801247e:	f003 0302 	and.w	r3, r3, #2
 8012482:	2b00      	cmp	r3, #0
 8012484:	d011      	beq.n	80124aa <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012486:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801248a:	f003 0301 	and.w	r3, r3, #1
 801248e:	2b00      	cmp	r3, #0
 8012490:	d00b      	beq.n	80124aa <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681b      	ldr	r3, [r3, #0]
 8012496:	2202      	movs	r2, #2
 8012498:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124a0:	f043 0204 	orr.w	r2, r3, #4
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80124aa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80124ae:	f003 0304 	and.w	r3, r3, #4
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d011      	beq.n	80124da <UART_RxISR_16BIT_FIFOEN+0x12e>
 80124b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80124ba:	f003 0301 	and.w	r3, r3, #1
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d00b      	beq.n	80124da <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80124c2:	687b      	ldr	r3, [r7, #4]
 80124c4:	681b      	ldr	r3, [r3, #0]
 80124c6:	2204      	movs	r2, #4
 80124c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124d0:	f043 0202 	orr.w	r2, r3, #2
 80124d4:	687b      	ldr	r3, [r7, #4]
 80124d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d006      	beq.n	80124f2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f7fe fa1d 	bl	8010924 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	2200      	movs	r2, #0
 80124ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80124f8:	b29b      	uxth	r3, r3
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	f040 80a2 	bne.w	8012644 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	681b      	ldr	r3, [r3, #0]
 8012504:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012506:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8012508:	e853 3f00 	ldrex	r3, [r3]
 801250c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801250e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012510:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012514:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	461a      	mov	r2, r3
 801251e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012522:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012526:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012528:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801252a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801252e:	e841 2300 	strex	r3, r2, [r1]
 8012532:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012534:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012536:	2b00      	cmp	r3, #0
 8012538:	d1e2      	bne.n	8012500 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	681b      	ldr	r3, [r3, #0]
 801253e:	3308      	adds	r3, #8
 8012540:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012542:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012544:	e853 3f00 	ldrex	r3, [r3]
 8012548:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801254a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801254c:	4b6e      	ldr	r3, [pc, #440]	; (8012708 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801254e:	4013      	ands	r3, r2
 8012550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	3308      	adds	r3, #8
 801255a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801255e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012560:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012562:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012564:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012566:	e841 2300 	strex	r3, r2, [r1]
 801256a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801256c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801256e:	2b00      	cmp	r3, #0
 8012570:	d1e3      	bne.n	801253a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012572:	687b      	ldr	r3, [r7, #4]
 8012574:	2220      	movs	r2, #32
 8012576:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2200      	movs	r2, #0
 801257e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	2200      	movs	r2, #0
 8012584:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012586:	687b      	ldr	r3, [r7, #4]
 8012588:	681b      	ldr	r3, [r3, #0]
 801258a:	4a60      	ldr	r2, [pc, #384]	; (801270c <UART_RxISR_16BIT_FIFOEN+0x360>)
 801258c:	4293      	cmp	r3, r2
 801258e:	d021      	beq.n	80125d4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	685b      	ldr	r3, [r3, #4]
 8012596:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801259a:	2b00      	cmp	r3, #0
 801259c:	d01a      	beq.n	80125d4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80125a6:	e853 3f00 	ldrex	r3, [r3]
 80125aa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80125ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80125ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80125b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	681b      	ldr	r3, [r3, #0]
 80125ba:	461a      	mov	r2, r3
 80125bc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80125c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80125c2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80125c4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80125c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80125c8:	e841 2300 	strex	r3, r2, [r1]
 80125cc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80125ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d1e4      	bne.n	801259e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80125d8:	2b01      	cmp	r3, #1
 80125da:	d130      	bne.n	801263e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	2200      	movs	r2, #0
 80125e0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80125e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80125ea:	e853 3f00 	ldrex	r3, [r3]
 80125ee:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80125f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80125f2:	f023 0310 	bic.w	r3, r3, #16
 80125f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	461a      	mov	r2, r3
 8012600:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012604:	647b      	str	r3, [r7, #68]	; 0x44
 8012606:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012608:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801260a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801260c:	e841 2300 	strex	r3, r2, [r1]
 8012610:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012614:	2b00      	cmp	r3, #0
 8012616:	d1e4      	bne.n	80125e2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	681b      	ldr	r3, [r3, #0]
 801261c:	69db      	ldr	r3, [r3, #28]
 801261e:	f003 0310 	and.w	r3, r3, #16
 8012622:	2b10      	cmp	r3, #16
 8012624:	d103      	bne.n	801262e <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	2210      	movs	r2, #16
 801262c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012634:	4619      	mov	r1, r3
 8012636:	6878      	ldr	r0, [r7, #4]
 8012638:	f7fe f97e 	bl	8010938 <HAL_UARTEx_RxEventCallback>
 801263c:	e002      	b.n	8012644 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f7ee f814 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012644:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012648:	2b00      	cmp	r3, #0
 801264a:	d006      	beq.n	801265a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801264c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012650:	f003 0320 	and.w	r3, r3, #32
 8012654:	2b00      	cmp	r3, #0
 8012656:	f47f aecd 	bne.w	80123f4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012660:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012664:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012668:	2b00      	cmp	r3, #0
 801266a:	d049      	beq.n	8012700 <UART_RxISR_16BIT_FIFOEN+0x354>
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012672:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012676:	429a      	cmp	r2, r3
 8012678:	d242      	bcs.n	8012700 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	3308      	adds	r3, #8
 8012680:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012684:	e853 3f00 	ldrex	r3, [r3]
 8012688:	623b      	str	r3, [r7, #32]
   return(result);
 801268a:	6a3b      	ldr	r3, [r7, #32]
 801268c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012690:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	3308      	adds	r3, #8
 801269a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801269e:	633a      	str	r2, [r7, #48]	; 0x30
 80126a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80126a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126a6:	e841 2300 	strex	r3, r2, [r1]
 80126aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80126ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d1e3      	bne.n	801267a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	4a16      	ldr	r2, [pc, #88]	; (8012710 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80126b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	681b      	ldr	r3, [r3, #0]
 80126bc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80126be:	693b      	ldr	r3, [r7, #16]
 80126c0:	e853 3f00 	ldrex	r3, [r3]
 80126c4:	60fb      	str	r3, [r7, #12]
   return(result);
 80126c6:	68fb      	ldr	r3, [r7, #12]
 80126c8:	f043 0320 	orr.w	r3, r3, #32
 80126cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	681b      	ldr	r3, [r3, #0]
 80126d4:	461a      	mov	r2, r3
 80126d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80126da:	61fb      	str	r3, [r7, #28]
 80126dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80126de:	69b9      	ldr	r1, [r7, #24]
 80126e0:	69fa      	ldr	r2, [r7, #28]
 80126e2:	e841 2300 	strex	r3, r2, [r1]
 80126e6:	617b      	str	r3, [r7, #20]
   return(result);
 80126e8:	697b      	ldr	r3, [r7, #20]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d1e4      	bne.n	80126b8 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80126ee:	e007      	b.n	8012700 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	699a      	ldr	r2, [r3, #24]
 80126f6:	687b      	ldr	r3, [r7, #4]
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	f042 0208 	orr.w	r2, r2, #8
 80126fe:	619a      	str	r2, [r3, #24]
}
 8012700:	bf00      	nop
 8012702:	37b8      	adds	r7, #184	; 0xb8
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}
 8012708:	effffffe 	.word	0xeffffffe
 801270c:	58000c00 	.word	0x58000c00
 8012710:	08011e95 	.word	0x08011e95

08012714 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012714:	b480      	push	{r7}
 8012716:	b083      	sub	sp, #12
 8012718:	af00      	add	r7, sp, #0
 801271a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801271c:	bf00      	nop
 801271e:	370c      	adds	r7, #12
 8012720:	46bd      	mov	sp, r7
 8012722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012726:	4770      	bx	lr

08012728 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8012728:	b480      	push	{r7}
 801272a:	b083      	sub	sp, #12
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012730:	bf00      	nop
 8012732:	370c      	adds	r7, #12
 8012734:	46bd      	mov	sp, r7
 8012736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801273a:	4770      	bx	lr

0801273c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801273c:	b480      	push	{r7}
 801273e:	b083      	sub	sp, #12
 8012740:	af00      	add	r7, sp, #0
 8012742:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012744:	bf00      	nop
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr

08012750 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012750:	b480      	push	{r7}
 8012752:	b085      	sub	sp, #20
 8012754:	af00      	add	r7, sp, #0
 8012756:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801275e:	2b01      	cmp	r3, #1
 8012760:	d101      	bne.n	8012766 <HAL_UARTEx_DisableFifoMode+0x16>
 8012762:	2302      	movs	r3, #2
 8012764:	e027      	b.n	80127b6 <HAL_UARTEx_DisableFifoMode+0x66>
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2201      	movs	r2, #1
 801276a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801276e:	687b      	ldr	r3, [r7, #4]
 8012770:	2224      	movs	r2, #36	; 0x24
 8012772:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	681b      	ldr	r3, [r3, #0]
 801277c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	681a      	ldr	r2, [r3, #0]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	f022 0201 	bic.w	r2, r2, #1
 801278c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012794:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	2200      	movs	r2, #0
 801279a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801279c:	687b      	ldr	r3, [r7, #4]
 801279e:	681b      	ldr	r3, [r3, #0]
 80127a0:	68fa      	ldr	r2, [r7, #12]
 80127a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	2220      	movs	r2, #32
 80127a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	2200      	movs	r2, #0
 80127b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80127b4:	2300      	movs	r3, #0
}
 80127b6:	4618      	mov	r0, r3
 80127b8:	3714      	adds	r7, #20
 80127ba:	46bd      	mov	sp, r7
 80127bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127c0:	4770      	bx	lr

080127c2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80127c2:	b580      	push	{r7, lr}
 80127c4:	b084      	sub	sp, #16
 80127c6:	af00      	add	r7, sp, #0
 80127c8:	6078      	str	r0, [r7, #4]
 80127ca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80127cc:	687b      	ldr	r3, [r7, #4]
 80127ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80127d2:	2b01      	cmp	r3, #1
 80127d4:	d101      	bne.n	80127da <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80127d6:	2302      	movs	r3, #2
 80127d8:	e02d      	b.n	8012836 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	2201      	movs	r2, #1
 80127de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2224      	movs	r2, #36	; 0x24
 80127e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	681b      	ldr	r3, [r3, #0]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80127f2:	687b      	ldr	r3, [r7, #4]
 80127f4:	681b      	ldr	r3, [r3, #0]
 80127f6:	681a      	ldr	r2, [r3, #0]
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	f022 0201 	bic.w	r2, r2, #1
 8012800:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012802:	687b      	ldr	r3, [r7, #4]
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	689b      	ldr	r3, [r3, #8]
 8012808:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801280c:	687b      	ldr	r3, [r7, #4]
 801280e:	681b      	ldr	r3, [r3, #0]
 8012810:	683a      	ldr	r2, [r7, #0]
 8012812:	430a      	orrs	r2, r1
 8012814:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012816:	6878      	ldr	r0, [r7, #4]
 8012818:	f000 f850 	bl	80128bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	68fa      	ldr	r2, [r7, #12]
 8012822:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012824:	687b      	ldr	r3, [r7, #4]
 8012826:	2220      	movs	r2, #32
 8012828:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2200      	movs	r2, #0
 8012830:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012834:	2300      	movs	r3, #0
}
 8012836:	4618      	mov	r0, r3
 8012838:	3710      	adds	r7, #16
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}

0801283e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801283e:	b580      	push	{r7, lr}
 8012840:	b084      	sub	sp, #16
 8012842:	af00      	add	r7, sp, #0
 8012844:	6078      	str	r0, [r7, #4]
 8012846:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801284e:	2b01      	cmp	r3, #1
 8012850:	d101      	bne.n	8012856 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012852:	2302      	movs	r3, #2
 8012854:	e02d      	b.n	80128b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2201      	movs	r2, #1
 801285a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	2224      	movs	r2, #36	; 0x24
 8012862:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	681b      	ldr	r3, [r3, #0]
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	681a      	ldr	r2, [r3, #0]
 8012874:	687b      	ldr	r3, [r7, #4]
 8012876:	681b      	ldr	r3, [r3, #0]
 8012878:	f022 0201 	bic.w	r2, r2, #1
 801287c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	689b      	ldr	r3, [r3, #8]
 8012884:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012888:	687b      	ldr	r3, [r7, #4]
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	683a      	ldr	r2, [r7, #0]
 801288e:	430a      	orrs	r2, r1
 8012890:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f000 f812 	bl	80128bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	681b      	ldr	r3, [r3, #0]
 801289c:	68fa      	ldr	r2, [r7, #12]
 801289e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2220      	movs	r2, #32
 80128a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	2200      	movs	r2, #0
 80128ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80128b0:	2300      	movs	r3, #0
}
 80128b2:	4618      	mov	r0, r3
 80128b4:	3710      	adds	r7, #16
 80128b6:	46bd      	mov	sp, r7
 80128b8:	bd80      	pop	{r7, pc}
	...

080128bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80128bc:	b480      	push	{r7}
 80128be:	b085      	sub	sp, #20
 80128c0:	af00      	add	r7, sp, #0
 80128c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d108      	bne.n	80128de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80128cc:	687b      	ldr	r3, [r7, #4]
 80128ce:	2201      	movs	r2, #1
 80128d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	2201      	movs	r2, #1
 80128d8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80128dc:	e031      	b.n	8012942 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80128de:	2310      	movs	r3, #16
 80128e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80128e2:	2310      	movs	r3, #16
 80128e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	689b      	ldr	r3, [r3, #8]
 80128ec:	0e5b      	lsrs	r3, r3, #25
 80128ee:	b2db      	uxtb	r3, r3
 80128f0:	f003 0307 	and.w	r3, r3, #7
 80128f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	681b      	ldr	r3, [r3, #0]
 80128fa:	689b      	ldr	r3, [r3, #8]
 80128fc:	0f5b      	lsrs	r3, r3, #29
 80128fe:	b2db      	uxtb	r3, r3
 8012900:	f003 0307 	and.w	r3, r3, #7
 8012904:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012906:	7bbb      	ldrb	r3, [r7, #14]
 8012908:	7b3a      	ldrb	r2, [r7, #12]
 801290a:	4911      	ldr	r1, [pc, #68]	; (8012950 <UARTEx_SetNbDataToProcess+0x94>)
 801290c:	5c8a      	ldrb	r2, [r1, r2]
 801290e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012912:	7b3a      	ldrb	r2, [r7, #12]
 8012914:	490f      	ldr	r1, [pc, #60]	; (8012954 <UARTEx_SetNbDataToProcess+0x98>)
 8012916:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8012918:	fb93 f3f2 	sdiv	r3, r3, r2
 801291c:	b29a      	uxth	r2, r3
 801291e:	687b      	ldr	r3, [r7, #4]
 8012920:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012924:	7bfb      	ldrb	r3, [r7, #15]
 8012926:	7b7a      	ldrb	r2, [r7, #13]
 8012928:	4909      	ldr	r1, [pc, #36]	; (8012950 <UARTEx_SetNbDataToProcess+0x94>)
 801292a:	5c8a      	ldrb	r2, [r1, r2]
 801292c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012930:	7b7a      	ldrb	r2, [r7, #13]
 8012932:	4908      	ldr	r1, [pc, #32]	; (8012954 <UARTEx_SetNbDataToProcess+0x98>)
 8012934:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012936:	fb93 f3f2 	sdiv	r3, r3, r2
 801293a:	b29a      	uxth	r2, r3
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012942:	bf00      	nop
 8012944:	3714      	adds	r7, #20
 8012946:	46bd      	mov	sp, r7
 8012948:	f85d 7b04 	ldr.w	r7, [sp], #4
 801294c:	4770      	bx	lr
 801294e:	bf00      	nop
 8012950:	080170d0 	.word	0x080170d0
 8012954:	080170d8 	.word	0x080170d8

08012958 <__NVIC_SetPriority>:
{
 8012958:	b480      	push	{r7}
 801295a:	b083      	sub	sp, #12
 801295c:	af00      	add	r7, sp, #0
 801295e:	4603      	mov	r3, r0
 8012960:	6039      	str	r1, [r7, #0]
 8012962:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012964:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012968:	2b00      	cmp	r3, #0
 801296a:	db0a      	blt.n	8012982 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801296c:	683b      	ldr	r3, [r7, #0]
 801296e:	b2da      	uxtb	r2, r3
 8012970:	490c      	ldr	r1, [pc, #48]	; (80129a4 <__NVIC_SetPriority+0x4c>)
 8012972:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012976:	0112      	lsls	r2, r2, #4
 8012978:	b2d2      	uxtb	r2, r2
 801297a:	440b      	add	r3, r1
 801297c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012980:	e00a      	b.n	8012998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012982:	683b      	ldr	r3, [r7, #0]
 8012984:	b2da      	uxtb	r2, r3
 8012986:	4908      	ldr	r1, [pc, #32]	; (80129a8 <__NVIC_SetPriority+0x50>)
 8012988:	88fb      	ldrh	r3, [r7, #6]
 801298a:	f003 030f 	and.w	r3, r3, #15
 801298e:	3b04      	subs	r3, #4
 8012990:	0112      	lsls	r2, r2, #4
 8012992:	b2d2      	uxtb	r2, r2
 8012994:	440b      	add	r3, r1
 8012996:	761a      	strb	r2, [r3, #24]
}
 8012998:	bf00      	nop
 801299a:	370c      	adds	r7, #12
 801299c:	46bd      	mov	sp, r7
 801299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a2:	4770      	bx	lr
 80129a4:	e000e100 	.word	0xe000e100
 80129a8:	e000ed00 	.word	0xe000ed00

080129ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80129ac:	b580      	push	{r7, lr}
 80129ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80129b0:	4b05      	ldr	r3, [pc, #20]	; (80129c8 <SysTick_Handler+0x1c>)
 80129b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80129b4:	f002 fbc2 	bl	801513c <xTaskGetSchedulerState>
 80129b8:	4603      	mov	r3, r0
 80129ba:	2b01      	cmp	r3, #1
 80129bc:	d001      	beq.n	80129c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80129be:	f003 f9e3 	bl	8015d88 <xPortSysTickHandler>
  }
}
 80129c2:	bf00      	nop
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	e000e010 	.word	0xe000e010

080129cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80129cc:	b580      	push	{r7, lr}
 80129ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80129d0:	2100      	movs	r1, #0
 80129d2:	f06f 0004 	mvn.w	r0, #4
 80129d6:	f7ff ffbf 	bl	8012958 <__NVIC_SetPriority>
#endif
}
 80129da:	bf00      	nop
 80129dc:	bd80      	pop	{r7, pc}
	...

080129e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80129e0:	b480      	push	{r7}
 80129e2:	b083      	sub	sp, #12
 80129e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129e6:	f3ef 8305 	mrs	r3, IPSR
 80129ea:	603b      	str	r3, [r7, #0]
  return(result);
 80129ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d003      	beq.n	80129fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80129f2:	f06f 0305 	mvn.w	r3, #5
 80129f6:	607b      	str	r3, [r7, #4]
 80129f8:	e00c      	b.n	8012a14 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80129fa:	4b0a      	ldr	r3, [pc, #40]	; (8012a24 <osKernelInitialize+0x44>)
 80129fc:	681b      	ldr	r3, [r3, #0]
 80129fe:	2b00      	cmp	r3, #0
 8012a00:	d105      	bne.n	8012a0e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012a02:	4b08      	ldr	r3, [pc, #32]	; (8012a24 <osKernelInitialize+0x44>)
 8012a04:	2201      	movs	r2, #1
 8012a06:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8012a08:	2300      	movs	r3, #0
 8012a0a:	607b      	str	r3, [r7, #4]
 8012a0c:	e002      	b.n	8012a14 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a12:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012a14:	687b      	ldr	r3, [r7, #4]
}
 8012a16:	4618      	mov	r0, r3
 8012a18:	370c      	adds	r7, #12
 8012a1a:	46bd      	mov	sp, r7
 8012a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a20:	4770      	bx	lr
 8012a22:	bf00      	nop
 8012a24:	2400110c 	.word	0x2400110c

08012a28 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8012a28:	b580      	push	{r7, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a2e:	f3ef 8305 	mrs	r3, IPSR
 8012a32:	603b      	str	r3, [r7, #0]
  return(result);
 8012a34:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d003      	beq.n	8012a42 <osKernelStart+0x1a>
    stat = osErrorISR;
 8012a3a:	f06f 0305 	mvn.w	r3, #5
 8012a3e:	607b      	str	r3, [r7, #4]
 8012a40:	e010      	b.n	8012a64 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012a42:	4b0b      	ldr	r3, [pc, #44]	; (8012a70 <osKernelStart+0x48>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	2b01      	cmp	r3, #1
 8012a48:	d109      	bne.n	8012a5e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8012a4a:	f7ff ffbf 	bl	80129cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012a4e:	4b08      	ldr	r3, [pc, #32]	; (8012a70 <osKernelStart+0x48>)
 8012a50:	2202      	movs	r2, #2
 8012a52:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012a54:	f001 fe84 	bl	8014760 <vTaskStartScheduler>
      stat = osOK;
 8012a58:	2300      	movs	r3, #0
 8012a5a:	607b      	str	r3, [r7, #4]
 8012a5c:	e002      	b.n	8012a64 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012a5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012a64:	687b      	ldr	r3, [r7, #4]
}
 8012a66:	4618      	mov	r0, r3
 8012a68:	3708      	adds	r7, #8
 8012a6a:	46bd      	mov	sp, r7
 8012a6c:	bd80      	pop	{r7, pc}
 8012a6e:	bf00      	nop
 8012a70:	2400110c 	.word	0x2400110c

08012a74 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012a74:	b580      	push	{r7, lr}
 8012a76:	b08e      	sub	sp, #56	; 0x38
 8012a78:	af04      	add	r7, sp, #16
 8012a7a:	60f8      	str	r0, [r7, #12]
 8012a7c:	60b9      	str	r1, [r7, #8]
 8012a7e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012a80:	2300      	movs	r3, #0
 8012a82:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a84:	f3ef 8305 	mrs	r3, IPSR
 8012a88:	617b      	str	r3, [r7, #20]
  return(result);
 8012a8a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8012a8c:	2b00      	cmp	r3, #0
 8012a8e:	d17e      	bne.n	8012b8e <osThreadNew+0x11a>
 8012a90:	68fb      	ldr	r3, [r7, #12]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d07b      	beq.n	8012b8e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012a96:	2380      	movs	r3, #128	; 0x80
 8012a98:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8012a9a:	2318      	movs	r3, #24
 8012a9c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8012a9e:	2300      	movs	r3, #0
 8012aa0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012aa6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	d045      	beq.n	8012b3a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	d002      	beq.n	8012abc <osThreadNew+0x48>
        name = attr->name;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	699b      	ldr	r3, [r3, #24]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d002      	beq.n	8012aca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012ac4:	687b      	ldr	r3, [r7, #4]
 8012ac6:	699b      	ldr	r3, [r3, #24]
 8012ac8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8012aca:	69fb      	ldr	r3, [r7, #28]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d008      	beq.n	8012ae2 <osThreadNew+0x6e>
 8012ad0:	69fb      	ldr	r3, [r7, #28]
 8012ad2:	2b38      	cmp	r3, #56	; 0x38
 8012ad4:	d805      	bhi.n	8012ae2 <osThreadNew+0x6e>
 8012ad6:	687b      	ldr	r3, [r7, #4]
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	f003 0301 	and.w	r3, r3, #1
 8012ade:	2b00      	cmp	r3, #0
 8012ae0:	d001      	beq.n	8012ae6 <osThreadNew+0x72>
        return (NULL);
 8012ae2:	2300      	movs	r3, #0
 8012ae4:	e054      	b.n	8012b90 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	695b      	ldr	r3, [r3, #20]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d003      	beq.n	8012af6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	695b      	ldr	r3, [r3, #20]
 8012af2:	089b      	lsrs	r3, r3, #2
 8012af4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	689b      	ldr	r3, [r3, #8]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d00e      	beq.n	8012b1c <osThreadNew+0xa8>
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	2b5b      	cmp	r3, #91	; 0x5b
 8012b04:	d90a      	bls.n	8012b1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d006      	beq.n	8012b1c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012b0e:	687b      	ldr	r3, [r7, #4]
 8012b10:	695b      	ldr	r3, [r3, #20]
 8012b12:	2b00      	cmp	r3, #0
 8012b14:	d002      	beq.n	8012b1c <osThreadNew+0xa8>
        mem = 1;
 8012b16:	2301      	movs	r3, #1
 8012b18:	61bb      	str	r3, [r7, #24]
 8012b1a:	e010      	b.n	8012b3e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	689b      	ldr	r3, [r3, #8]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d10c      	bne.n	8012b3e <osThreadNew+0xca>
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d108      	bne.n	8012b3e <osThreadNew+0xca>
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	691b      	ldr	r3, [r3, #16]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d104      	bne.n	8012b3e <osThreadNew+0xca>
          mem = 0;
 8012b34:	2300      	movs	r3, #0
 8012b36:	61bb      	str	r3, [r7, #24]
 8012b38:	e001      	b.n	8012b3e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8012b3a:	2300      	movs	r3, #0
 8012b3c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012b3e:	69bb      	ldr	r3, [r7, #24]
 8012b40:	2b01      	cmp	r3, #1
 8012b42:	d110      	bne.n	8012b66 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012b48:	687a      	ldr	r2, [r7, #4]
 8012b4a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012b4c:	9202      	str	r2, [sp, #8]
 8012b4e:	9301      	str	r3, [sp, #4]
 8012b50:	69fb      	ldr	r3, [r7, #28]
 8012b52:	9300      	str	r3, [sp, #0]
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	6a3a      	ldr	r2, [r7, #32]
 8012b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b5a:	68f8      	ldr	r0, [r7, #12]
 8012b5c:	f001 fb10 	bl	8014180 <xTaskCreateStatic>
 8012b60:	4603      	mov	r3, r0
 8012b62:	613b      	str	r3, [r7, #16]
 8012b64:	e013      	b.n	8012b8e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012b66:	69bb      	ldr	r3, [r7, #24]
 8012b68:	2b00      	cmp	r3, #0
 8012b6a:	d110      	bne.n	8012b8e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012b6c:	6a3b      	ldr	r3, [r7, #32]
 8012b6e:	b29a      	uxth	r2, r3
 8012b70:	f107 0310 	add.w	r3, r7, #16
 8012b74:	9301      	str	r3, [sp, #4]
 8012b76:	69fb      	ldr	r3, [r7, #28]
 8012b78:	9300      	str	r3, [sp, #0]
 8012b7a:	68bb      	ldr	r3, [r7, #8]
 8012b7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012b7e:	68f8      	ldr	r0, [r7, #12]
 8012b80:	f001 fb5b 	bl	801423a <xTaskCreate>
 8012b84:	4603      	mov	r3, r0
 8012b86:	2b01      	cmp	r3, #1
 8012b88:	d001      	beq.n	8012b8e <osThreadNew+0x11a>
            hTask = NULL;
 8012b8a:	2300      	movs	r3, #0
 8012b8c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8012b8e:	693b      	ldr	r3, [r7, #16]
}
 8012b90:	4618      	mov	r0, r3
 8012b92:	3728      	adds	r7, #40	; 0x28
 8012b94:	46bd      	mov	sp, r7
 8012b96:	bd80      	pop	{r7, pc}

08012b98 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b9e:	f3ef 8305 	mrs	r3, IPSR
 8012ba2:	603b      	str	r3, [r7, #0]
  return(result);
 8012ba4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d003      	beq.n	8012bb2 <osThreadYield+0x1a>
    stat = osErrorISR;
 8012baa:	f06f 0305 	mvn.w	r3, #5
 8012bae:	607b      	str	r3, [r7, #4]
 8012bb0:	e009      	b.n	8012bc6 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012bb2:	2300      	movs	r3, #0
 8012bb4:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012bb6:	4b07      	ldr	r3, [pc, #28]	; (8012bd4 <osThreadYield+0x3c>)
 8012bb8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012bbc:	601a      	str	r2, [r3, #0]
 8012bbe:	f3bf 8f4f 	dsb	sy
 8012bc2:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012bc6:	687b      	ldr	r3, [r7, #4]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	370c      	adds	r7, #12
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr
 8012bd4:	e000ed04 	.word	0xe000ed04

08012bd8 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 8012bd8:	b580      	push	{r7, lr}
 8012bda:	b086      	sub	sp, #24
 8012bdc:	af00      	add	r7, sp, #0
 8012bde:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012be4:	f3ef 8305 	mrs	r3, IPSR
 8012be8:	60fb      	str	r3, [r7, #12]
  return(result);
 8012bea:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d003      	beq.n	8012bf8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012bf0:	f06f 0305 	mvn.w	r3, #5
 8012bf4:	617b      	str	r3, [r7, #20]
 8012bf6:	e00b      	b.n	8012c10 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012bf8:	693b      	ldr	r3, [r7, #16]
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d103      	bne.n	8012c06 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012bfe:	f06f 0303 	mvn.w	r3, #3
 8012c02:	617b      	str	r3, [r7, #20]
 8012c04:	e004      	b.n	8012c10 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012c06:	2300      	movs	r3, #0
 8012c08:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012c0a:	6938      	ldr	r0, [r7, #16]
 8012c0c:	f001 fc8e 	bl	801452c <vTaskSuspend>
  }

  return (stat);
 8012c10:	697b      	ldr	r3, [r7, #20]
}
 8012c12:	4618      	mov	r0, r3
 8012c14:	3718      	adds	r7, #24
 8012c16:	46bd      	mov	sp, r7
 8012c18:	bd80      	pop	{r7, pc}

08012c1a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012c1a:	b580      	push	{r7, lr}
 8012c1c:	b084      	sub	sp, #16
 8012c1e:	af00      	add	r7, sp, #0
 8012c20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c22:	f3ef 8305 	mrs	r3, IPSR
 8012c26:	60bb      	str	r3, [r7, #8]
  return(result);
 8012c28:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d003      	beq.n	8012c36 <osDelay+0x1c>
    stat = osErrorISR;
 8012c2e:	f06f 0305 	mvn.w	r3, #5
 8012c32:	60fb      	str	r3, [r7, #12]
 8012c34:	e007      	b.n	8012c46 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012c36:	2300      	movs	r3, #0
 8012c38:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d002      	beq.n	8012c46 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012c40:	6878      	ldr	r0, [r7, #4]
 8012c42:	f001 fc3f 	bl	80144c4 <vTaskDelay>
    }
  }

  return (stat);
 8012c46:	68fb      	ldr	r3, [r7, #12]
}
 8012c48:	4618      	mov	r0, r3
 8012c4a:	3710      	adds	r7, #16
 8012c4c:	46bd      	mov	sp, r7
 8012c4e:	bd80      	pop	{r7, pc}

08012c50 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012c50:	b580      	push	{r7, lr}
 8012c52:	b086      	sub	sp, #24
 8012c54:	af00      	add	r7, sp, #0
 8012c56:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012c58:	2300      	movs	r3, #0
 8012c5a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c5c:	f3ef 8305 	mrs	r3, IPSR
 8012c60:	60fb      	str	r3, [r7, #12]
  return(result);
 8012c62:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d12d      	bne.n	8012cc4 <osEventFlagsNew+0x74>
    mem = -1;
 8012c68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c6c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d015      	beq.n	8012ca0 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	689b      	ldr	r3, [r3, #8]
 8012c78:	2b00      	cmp	r3, #0
 8012c7a:	d006      	beq.n	8012c8a <osEventFlagsNew+0x3a>
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	2b1f      	cmp	r3, #31
 8012c82:	d902      	bls.n	8012c8a <osEventFlagsNew+0x3a>
        mem = 1;
 8012c84:	2301      	movs	r3, #1
 8012c86:	613b      	str	r3, [r7, #16]
 8012c88:	e00c      	b.n	8012ca4 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	2b00      	cmp	r3, #0
 8012c90:	d108      	bne.n	8012ca4 <osEventFlagsNew+0x54>
 8012c92:	687b      	ldr	r3, [r7, #4]
 8012c94:	68db      	ldr	r3, [r3, #12]
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d104      	bne.n	8012ca4 <osEventFlagsNew+0x54>
          mem = 0;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	613b      	str	r3, [r7, #16]
 8012c9e:	e001      	b.n	8012ca4 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012ca0:	2300      	movs	r3, #0
 8012ca2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012ca4:	693b      	ldr	r3, [r7, #16]
 8012ca6:	2b01      	cmp	r3, #1
 8012ca8:	d106      	bne.n	8012cb8 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	689b      	ldr	r3, [r3, #8]
 8012cae:	4618      	mov	r0, r3
 8012cb0:	f000 fa1e 	bl	80130f0 <xEventGroupCreateStatic>
 8012cb4:	6178      	str	r0, [r7, #20]
 8012cb6:	e005      	b.n	8012cc4 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012cb8:	693b      	ldr	r3, [r7, #16]
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d102      	bne.n	8012cc4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012cbe:	f000 fa4e 	bl	801315e <xEventGroupCreate>
 8012cc2:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012cc4:	697b      	ldr	r3, [r7, #20]
}
 8012cc6:	4618      	mov	r0, r3
 8012cc8:	3718      	adds	r7, #24
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	bd80      	pop	{r7, pc}
	...

08012cd0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012cd0:	b580      	push	{r7, lr}
 8012cd2:	b086      	sub	sp, #24
 8012cd4:	af00      	add	r7, sp, #0
 8012cd6:	6078      	str	r0, [r7, #4]
 8012cd8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012cde:	693b      	ldr	r3, [r7, #16]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d004      	beq.n	8012cee <osEventFlagsSet+0x1e>
 8012ce4:	683b      	ldr	r3, [r7, #0]
 8012ce6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012cea:	2b00      	cmp	r3, #0
 8012cec:	d003      	beq.n	8012cf6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012cee:	f06f 0303 	mvn.w	r3, #3
 8012cf2:	617b      	str	r3, [r7, #20]
 8012cf4:	e028      	b.n	8012d48 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cf6:	f3ef 8305 	mrs	r3, IPSR
 8012cfa:	60fb      	str	r3, [r7, #12]
  return(result);
 8012cfc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d01d      	beq.n	8012d3e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012d02:	2300      	movs	r3, #0
 8012d04:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012d06:	f107 0308 	add.w	r3, r7, #8
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	6839      	ldr	r1, [r7, #0]
 8012d0e:	6938      	ldr	r0, [r7, #16]
 8012d10:	f000 fbc8 	bl	80134a4 <xEventGroupSetBitsFromISR>
 8012d14:	4603      	mov	r3, r0
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d103      	bne.n	8012d22 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012d1a:	f06f 0302 	mvn.w	r3, #2
 8012d1e:	617b      	str	r3, [r7, #20]
 8012d20:	e012      	b.n	8012d48 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012d22:	683b      	ldr	r3, [r7, #0]
 8012d24:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d00d      	beq.n	8012d48 <osEventFlagsSet+0x78>
 8012d2c:	4b09      	ldr	r3, [pc, #36]	; (8012d54 <osEventFlagsSet+0x84>)
 8012d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d32:	601a      	str	r2, [r3, #0]
 8012d34:	f3bf 8f4f 	dsb	sy
 8012d38:	f3bf 8f6f 	isb	sy
 8012d3c:	e004      	b.n	8012d48 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012d3e:	6839      	ldr	r1, [r7, #0]
 8012d40:	6938      	ldr	r0, [r7, #16]
 8012d42:	f000 faf5 	bl	8013330 <xEventGroupSetBits>
 8012d46:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012d48:	697b      	ldr	r3, [r7, #20]
}
 8012d4a:	4618      	mov	r0, r3
 8012d4c:	3718      	adds	r7, #24
 8012d4e:	46bd      	mov	sp, r7
 8012d50:	bd80      	pop	{r7, pc}
 8012d52:	bf00      	nop
 8012d54:	e000ed04 	.word	0xe000ed04

08012d58 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b08c      	sub	sp, #48	; 0x30
 8012d5c:	af02      	add	r7, sp, #8
 8012d5e:	60f8      	str	r0, [r7, #12]
 8012d60:	60b9      	str	r1, [r7, #8]
 8012d62:	607a      	str	r2, [r7, #4]
 8012d64:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012d66:	68fb      	ldr	r3, [r7, #12]
 8012d68:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012d6a:	69bb      	ldr	r3, [r7, #24]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d004      	beq.n	8012d7a <osEventFlagsWait+0x22>
 8012d70:	68bb      	ldr	r3, [r7, #8]
 8012d72:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d003      	beq.n	8012d82 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012d7a:	f06f 0303 	mvn.w	r3, #3
 8012d7e:	61fb      	str	r3, [r7, #28]
 8012d80:	e04b      	b.n	8012e1a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d82:	f3ef 8305 	mrs	r3, IPSR
 8012d86:	617b      	str	r3, [r7, #20]
  return(result);
 8012d88:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012d8a:	2b00      	cmp	r3, #0
 8012d8c:	d003      	beq.n	8012d96 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012d8e:	f06f 0305 	mvn.w	r3, #5
 8012d92:	61fb      	str	r3, [r7, #28]
 8012d94:	e041      	b.n	8012e1a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	f003 0301 	and.w	r3, r3, #1
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d002      	beq.n	8012da6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012da0:	2301      	movs	r3, #1
 8012da2:	627b      	str	r3, [r7, #36]	; 0x24
 8012da4:	e001      	b.n	8012daa <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012da6:	2300      	movs	r3, #0
 8012da8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	f003 0302 	and.w	r3, r3, #2
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012db4:	2300      	movs	r3, #0
 8012db6:	623b      	str	r3, [r7, #32]
 8012db8:	e001      	b.n	8012dbe <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012dba:	2301      	movs	r3, #1
 8012dbc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012dbe:	683b      	ldr	r3, [r7, #0]
 8012dc0:	9300      	str	r3, [sp, #0]
 8012dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc4:	6a3a      	ldr	r2, [r7, #32]
 8012dc6:	68b9      	ldr	r1, [r7, #8]
 8012dc8:	69b8      	ldr	r0, [r7, #24]
 8012dca:	f000 f9e3 	bl	8013194 <xEventGroupWaitBits>
 8012dce:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	f003 0301 	and.w	r3, r3, #1
 8012dd6:	2b00      	cmp	r3, #0
 8012dd8:	d010      	beq.n	8012dfc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012dda:	68ba      	ldr	r2, [r7, #8]
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	4013      	ands	r3, r2
 8012de0:	68ba      	ldr	r2, [r7, #8]
 8012de2:	429a      	cmp	r2, r3
 8012de4:	d019      	beq.n	8012e1a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d003      	beq.n	8012df4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012dec:	f06f 0301 	mvn.w	r3, #1
 8012df0:	61fb      	str	r3, [r7, #28]
 8012df2:	e012      	b.n	8012e1a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012df4:	f06f 0302 	mvn.w	r3, #2
 8012df8:	61fb      	str	r3, [r7, #28]
 8012dfa:	e00e      	b.n	8012e1a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012dfc:	68ba      	ldr	r2, [r7, #8]
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	4013      	ands	r3, r2
 8012e02:	2b00      	cmp	r3, #0
 8012e04:	d109      	bne.n	8012e1a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d003      	beq.n	8012e14 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012e0c:	f06f 0301 	mvn.w	r3, #1
 8012e10:	61fb      	str	r3, [r7, #28]
 8012e12:	e002      	b.n	8012e1a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012e14:	f06f 0302 	mvn.w	r3, #2
 8012e18:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012e1a:	69fb      	ldr	r3, [r7, #28]
}
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	3728      	adds	r7, #40	; 0x28
 8012e20:	46bd      	mov	sp, r7
 8012e22:	bd80      	pop	{r7, pc}

08012e24 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b08a      	sub	sp, #40	; 0x28
 8012e28:	af02      	add	r7, sp, #8
 8012e2a:	60f8      	str	r0, [r7, #12]
 8012e2c:	60b9      	str	r1, [r7, #8]
 8012e2e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012e30:	2300      	movs	r3, #0
 8012e32:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e34:	f3ef 8305 	mrs	r3, IPSR
 8012e38:	613b      	str	r3, [r7, #16]
  return(result);
 8012e3a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012e3c:	2b00      	cmp	r3, #0
 8012e3e:	d15f      	bne.n	8012f00 <osMessageQueueNew+0xdc>
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d05c      	beq.n	8012f00 <osMessageQueueNew+0xdc>
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	2b00      	cmp	r3, #0
 8012e4a:	d059      	beq.n	8012f00 <osMessageQueueNew+0xdc>
    mem = -1;
 8012e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012e50:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d029      	beq.n	8012eac <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	689b      	ldr	r3, [r3, #8]
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d012      	beq.n	8012e86 <osMessageQueueNew+0x62>
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	68db      	ldr	r3, [r3, #12]
 8012e64:	2b4f      	cmp	r3, #79	; 0x4f
 8012e66:	d90e      	bls.n	8012e86 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d00a      	beq.n	8012e86 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	695a      	ldr	r2, [r3, #20]
 8012e74:	68fb      	ldr	r3, [r7, #12]
 8012e76:	68b9      	ldr	r1, [r7, #8]
 8012e78:	fb01 f303 	mul.w	r3, r1, r3
 8012e7c:	429a      	cmp	r2, r3
 8012e7e:	d302      	bcc.n	8012e86 <osMessageQueueNew+0x62>
        mem = 1;
 8012e80:	2301      	movs	r3, #1
 8012e82:	61bb      	str	r3, [r7, #24]
 8012e84:	e014      	b.n	8012eb0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	689b      	ldr	r3, [r3, #8]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d110      	bne.n	8012eb0 <osMessageQueueNew+0x8c>
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	2b00      	cmp	r3, #0
 8012e94:	d10c      	bne.n	8012eb0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d108      	bne.n	8012eb0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012e9e:	687b      	ldr	r3, [r7, #4]
 8012ea0:	695b      	ldr	r3, [r3, #20]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d104      	bne.n	8012eb0 <osMessageQueueNew+0x8c>
          mem = 0;
 8012ea6:	2300      	movs	r3, #0
 8012ea8:	61bb      	str	r3, [r7, #24]
 8012eaa:	e001      	b.n	8012eb0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012eac:	2300      	movs	r3, #0
 8012eae:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012eb0:	69bb      	ldr	r3, [r7, #24]
 8012eb2:	2b01      	cmp	r3, #1
 8012eb4:	d10b      	bne.n	8012ece <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	691a      	ldr	r2, [r3, #16]
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	689b      	ldr	r3, [r3, #8]
 8012ebe:	2100      	movs	r1, #0
 8012ec0:	9100      	str	r1, [sp, #0]
 8012ec2:	68b9      	ldr	r1, [r7, #8]
 8012ec4:	68f8      	ldr	r0, [r7, #12]
 8012ec6:	f000 fc1d 	bl	8013704 <xQueueGenericCreateStatic>
 8012eca:	61f8      	str	r0, [r7, #28]
 8012ecc:	e008      	b.n	8012ee0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012ece:	69bb      	ldr	r3, [r7, #24]
 8012ed0:	2b00      	cmp	r3, #0
 8012ed2:	d105      	bne.n	8012ee0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012ed4:	2200      	movs	r2, #0
 8012ed6:	68b9      	ldr	r1, [r7, #8]
 8012ed8:	68f8      	ldr	r0, [r7, #12]
 8012eda:	f000 fc8b 	bl	80137f4 <xQueueGenericCreate>
 8012ede:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012ee0:	69fb      	ldr	r3, [r7, #28]
 8012ee2:	2b00      	cmp	r3, #0
 8012ee4:	d00c      	beq.n	8012f00 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d003      	beq.n	8012ef4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	617b      	str	r3, [r7, #20]
 8012ef2:	e001      	b.n	8012ef8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012ef8:	6979      	ldr	r1, [r7, #20]
 8012efa:	69f8      	ldr	r0, [r7, #28]
 8012efc:	f001 f8e2 	bl	80140c4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012f00:	69fb      	ldr	r3, [r7, #28]
}
 8012f02:	4618      	mov	r0, r3
 8012f04:	3720      	adds	r7, #32
 8012f06:	46bd      	mov	sp, r7
 8012f08:	bd80      	pop	{r7, pc}
	...

08012f0c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	b088      	sub	sp, #32
 8012f10:	af00      	add	r7, sp, #0
 8012f12:	60f8      	str	r0, [r7, #12]
 8012f14:	60b9      	str	r1, [r7, #8]
 8012f16:	603b      	str	r3, [r7, #0]
 8012f18:	4613      	mov	r3, r2
 8012f1a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012f1c:	68fb      	ldr	r3, [r7, #12]
 8012f1e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012f20:	2300      	movs	r3, #0
 8012f22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012f24:	f3ef 8305 	mrs	r3, IPSR
 8012f28:	617b      	str	r3, [r7, #20]
  return(result);
 8012f2a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012f2c:	2b00      	cmp	r3, #0
 8012f2e:	d028      	beq.n	8012f82 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012f30:	69bb      	ldr	r3, [r7, #24]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d005      	beq.n	8012f42 <osMessageQueuePut+0x36>
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d002      	beq.n	8012f42 <osMessageQueuePut+0x36>
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d003      	beq.n	8012f4a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012f42:	f06f 0303 	mvn.w	r3, #3
 8012f46:	61fb      	str	r3, [r7, #28]
 8012f48:	e038      	b.n	8012fbc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012f4a:	2300      	movs	r3, #0
 8012f4c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012f4e:	f107 0210 	add.w	r2, r7, #16
 8012f52:	2300      	movs	r3, #0
 8012f54:	68b9      	ldr	r1, [r7, #8]
 8012f56:	69b8      	ldr	r0, [r7, #24]
 8012f58:	f000 fda8 	bl	8013aac <xQueueGenericSendFromISR>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b01      	cmp	r3, #1
 8012f60:	d003      	beq.n	8012f6a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012f62:	f06f 0302 	mvn.w	r3, #2
 8012f66:	61fb      	str	r3, [r7, #28]
 8012f68:	e028      	b.n	8012fbc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012f6a:	693b      	ldr	r3, [r7, #16]
 8012f6c:	2b00      	cmp	r3, #0
 8012f6e:	d025      	beq.n	8012fbc <osMessageQueuePut+0xb0>
 8012f70:	4b15      	ldr	r3, [pc, #84]	; (8012fc8 <osMessageQueuePut+0xbc>)
 8012f72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f76:	601a      	str	r2, [r3, #0]
 8012f78:	f3bf 8f4f 	dsb	sy
 8012f7c:	f3bf 8f6f 	isb	sy
 8012f80:	e01c      	b.n	8012fbc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012f82:	69bb      	ldr	r3, [r7, #24]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	d002      	beq.n	8012f8e <osMessageQueuePut+0x82>
 8012f88:	68bb      	ldr	r3, [r7, #8]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d103      	bne.n	8012f96 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012f8e:	f06f 0303 	mvn.w	r3, #3
 8012f92:	61fb      	str	r3, [r7, #28]
 8012f94:	e012      	b.n	8012fbc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012f96:	2300      	movs	r3, #0
 8012f98:	683a      	ldr	r2, [r7, #0]
 8012f9a:	68b9      	ldr	r1, [r7, #8]
 8012f9c:	69b8      	ldr	r0, [r7, #24]
 8012f9e:	f000 fc87 	bl	80138b0 <xQueueGenericSend>
 8012fa2:	4603      	mov	r3, r0
 8012fa4:	2b01      	cmp	r3, #1
 8012fa6:	d009      	beq.n	8012fbc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012fa8:	683b      	ldr	r3, [r7, #0]
 8012faa:	2b00      	cmp	r3, #0
 8012fac:	d003      	beq.n	8012fb6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012fae:	f06f 0301 	mvn.w	r3, #1
 8012fb2:	61fb      	str	r3, [r7, #28]
 8012fb4:	e002      	b.n	8012fbc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012fb6:	f06f 0302 	mvn.w	r3, #2
 8012fba:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012fbc:	69fb      	ldr	r3, [r7, #28]
}
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	3720      	adds	r7, #32
 8012fc2:	46bd      	mov	sp, r7
 8012fc4:	bd80      	pop	{r7, pc}
 8012fc6:	bf00      	nop
 8012fc8:	e000ed04 	.word	0xe000ed04

08012fcc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b088      	sub	sp, #32
 8012fd0:	af00      	add	r7, sp, #0
 8012fd2:	60f8      	str	r0, [r7, #12]
 8012fd4:	60b9      	str	r1, [r7, #8]
 8012fd6:	607a      	str	r2, [r7, #4]
 8012fd8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012fda:	68fb      	ldr	r3, [r7, #12]
 8012fdc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012fde:	2300      	movs	r3, #0
 8012fe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012fe2:	f3ef 8305 	mrs	r3, IPSR
 8012fe6:	617b      	str	r3, [r7, #20]
  return(result);
 8012fe8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012fea:	2b00      	cmp	r3, #0
 8012fec:	d028      	beq.n	8013040 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012fee:	69bb      	ldr	r3, [r7, #24]
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d005      	beq.n	8013000 <osMessageQueueGet+0x34>
 8012ff4:	68bb      	ldr	r3, [r7, #8]
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d002      	beq.n	8013000 <osMessageQueueGet+0x34>
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d003      	beq.n	8013008 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8013000:	f06f 0303 	mvn.w	r3, #3
 8013004:	61fb      	str	r3, [r7, #28]
 8013006:	e037      	b.n	8013078 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8013008:	2300      	movs	r3, #0
 801300a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 801300c:	f107 0310 	add.w	r3, r7, #16
 8013010:	461a      	mov	r2, r3
 8013012:	68b9      	ldr	r1, [r7, #8]
 8013014:	69b8      	ldr	r0, [r7, #24]
 8013016:	f000 fec5 	bl	8013da4 <xQueueReceiveFromISR>
 801301a:	4603      	mov	r3, r0
 801301c:	2b01      	cmp	r3, #1
 801301e:	d003      	beq.n	8013028 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8013020:	f06f 0302 	mvn.w	r3, #2
 8013024:	61fb      	str	r3, [r7, #28]
 8013026:	e027      	b.n	8013078 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8013028:	693b      	ldr	r3, [r7, #16]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d024      	beq.n	8013078 <osMessageQueueGet+0xac>
 801302e:	4b15      	ldr	r3, [pc, #84]	; (8013084 <osMessageQueueGet+0xb8>)
 8013030:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013034:	601a      	str	r2, [r3, #0]
 8013036:	f3bf 8f4f 	dsb	sy
 801303a:	f3bf 8f6f 	isb	sy
 801303e:	e01b      	b.n	8013078 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8013040:	69bb      	ldr	r3, [r7, #24]
 8013042:	2b00      	cmp	r3, #0
 8013044:	d002      	beq.n	801304c <osMessageQueueGet+0x80>
 8013046:	68bb      	ldr	r3, [r7, #8]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d103      	bne.n	8013054 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 801304c:	f06f 0303 	mvn.w	r3, #3
 8013050:	61fb      	str	r3, [r7, #28]
 8013052:	e011      	b.n	8013078 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8013054:	683a      	ldr	r2, [r7, #0]
 8013056:	68b9      	ldr	r1, [r7, #8]
 8013058:	69b8      	ldr	r0, [r7, #24]
 801305a:	f000 fdc3 	bl	8013be4 <xQueueReceive>
 801305e:	4603      	mov	r3, r0
 8013060:	2b01      	cmp	r3, #1
 8013062:	d009      	beq.n	8013078 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8013064:	683b      	ldr	r3, [r7, #0]
 8013066:	2b00      	cmp	r3, #0
 8013068:	d003      	beq.n	8013072 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 801306a:	f06f 0301 	mvn.w	r3, #1
 801306e:	61fb      	str	r3, [r7, #28]
 8013070:	e002      	b.n	8013078 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8013072:	f06f 0302 	mvn.w	r3, #2
 8013076:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8013078:	69fb      	ldr	r3, [r7, #28]
}
 801307a:	4618      	mov	r0, r3
 801307c:	3720      	adds	r7, #32
 801307e:	46bd      	mov	sp, r7
 8013080:	bd80      	pop	{r7, pc}
 8013082:	bf00      	nop
 8013084:	e000ed04 	.word	0xe000ed04

08013088 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8013088:	b480      	push	{r7}
 801308a:	b085      	sub	sp, #20
 801308c:	af00      	add	r7, sp, #0
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8013094:	68fb      	ldr	r3, [r7, #12]
 8013096:	4a07      	ldr	r2, [pc, #28]	; (80130b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8013098:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	4a06      	ldr	r2, [pc, #24]	; (80130b8 <vApplicationGetIdleTaskMemory+0x30>)
 801309e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2280      	movs	r2, #128	; 0x80
 80130a4:	601a      	str	r2, [r3, #0]
}
 80130a6:	bf00      	nop
 80130a8:	3714      	adds	r7, #20
 80130aa:	46bd      	mov	sp, r7
 80130ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130b0:	4770      	bx	lr
 80130b2:	bf00      	nop
 80130b4:	24001110 	.word	0x24001110
 80130b8:	2400116c 	.word	0x2400116c

080130bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80130bc:	b480      	push	{r7}
 80130be:	b085      	sub	sp, #20
 80130c0:	af00      	add	r7, sp, #0
 80130c2:	60f8      	str	r0, [r7, #12]
 80130c4:	60b9      	str	r1, [r7, #8]
 80130c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80130c8:	68fb      	ldr	r3, [r7, #12]
 80130ca:	4a07      	ldr	r2, [pc, #28]	; (80130e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80130cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80130ce:	68bb      	ldr	r3, [r7, #8]
 80130d0:	4a06      	ldr	r2, [pc, #24]	; (80130ec <vApplicationGetTimerTaskMemory+0x30>)
 80130d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80130d4:	687b      	ldr	r3, [r7, #4]
 80130d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80130da:	601a      	str	r2, [r3, #0]
}
 80130dc:	bf00      	nop
 80130de:	3714      	adds	r7, #20
 80130e0:	46bd      	mov	sp, r7
 80130e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130e6:	4770      	bx	lr
 80130e8:	2400136c 	.word	0x2400136c
 80130ec:	240013c8 	.word	0x240013c8

080130f0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80130f0:	b580      	push	{r7, lr}
 80130f2:	b086      	sub	sp, #24
 80130f4:	af00      	add	r7, sp, #0
 80130f6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d10a      	bne.n	8013114 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80130fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013102:	f383 8811 	msr	BASEPRI, r3
 8013106:	f3bf 8f6f 	isb	sy
 801310a:	f3bf 8f4f 	dsb	sy
 801310e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8013110:	bf00      	nop
 8013112:	e7fe      	b.n	8013112 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8013114:	2320      	movs	r3, #32
 8013116:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8013118:	68bb      	ldr	r3, [r7, #8]
 801311a:	2b20      	cmp	r3, #32
 801311c:	d00a      	beq.n	8013134 <xEventGroupCreateStatic+0x44>
	__asm volatile
 801311e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013122:	f383 8811 	msr	BASEPRI, r3
 8013126:	f3bf 8f6f 	isb	sy
 801312a:	f3bf 8f4f 	dsb	sy
 801312e:	60fb      	str	r3, [r7, #12]
}
 8013130:	bf00      	nop
 8013132:	e7fe      	b.n	8013132 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8013134:	687b      	ldr	r3, [r7, #4]
 8013136:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8013138:	697b      	ldr	r3, [r7, #20]
 801313a:	2b00      	cmp	r3, #0
 801313c:	d00a      	beq.n	8013154 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 801313e:	697b      	ldr	r3, [r7, #20]
 8013140:	2200      	movs	r2, #0
 8013142:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013144:	697b      	ldr	r3, [r7, #20]
 8013146:	3304      	adds	r3, #4
 8013148:	4618      	mov	r0, r3
 801314a:	f000 f9bf 	bl	80134cc <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 801314e:	697b      	ldr	r3, [r7, #20]
 8013150:	2201      	movs	r2, #1
 8013152:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8013154:	697b      	ldr	r3, [r7, #20]
	}
 8013156:	4618      	mov	r0, r3
 8013158:	3718      	adds	r7, #24
 801315a:	46bd      	mov	sp, r7
 801315c:	bd80      	pop	{r7, pc}

0801315e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 801315e:	b580      	push	{r7, lr}
 8013160:	b082      	sub	sp, #8
 8013162:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8013164:	2020      	movs	r0, #32
 8013166:	f002 fe9f 	bl	8015ea8 <pvPortMalloc>
 801316a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	2b00      	cmp	r3, #0
 8013170:	d00a      	beq.n	8013188 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8013172:	687b      	ldr	r3, [r7, #4]
 8013174:	2200      	movs	r2, #0
 8013176:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	3304      	adds	r3, #4
 801317c:	4618      	mov	r0, r3
 801317e:	f000 f9a5 	bl	80134cc <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	2200      	movs	r2, #0
 8013186:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8013188:	687b      	ldr	r3, [r7, #4]
	}
 801318a:	4618      	mov	r0, r3
 801318c:	3708      	adds	r7, #8
 801318e:	46bd      	mov	sp, r7
 8013190:	bd80      	pop	{r7, pc}
	...

08013194 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8013194:	b580      	push	{r7, lr}
 8013196:	b090      	sub	sp, #64	; 0x40
 8013198:	af00      	add	r7, sp, #0
 801319a:	60f8      	str	r0, [r7, #12]
 801319c:	60b9      	str	r1, [r7, #8]
 801319e:	607a      	str	r2, [r7, #4]
 80131a0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80131a6:	2300      	movs	r3, #0
 80131a8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80131aa:	2300      	movs	r3, #0
 80131ac:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80131ae:	68fb      	ldr	r3, [r7, #12]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d10a      	bne.n	80131ca <xEventGroupWaitBits+0x36>
	__asm volatile
 80131b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131b8:	f383 8811 	msr	BASEPRI, r3
 80131bc:	f3bf 8f6f 	isb	sy
 80131c0:	f3bf 8f4f 	dsb	sy
 80131c4:	623b      	str	r3, [r7, #32]
}
 80131c6:	bf00      	nop
 80131c8:	e7fe      	b.n	80131c8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80131ca:	68bb      	ldr	r3, [r7, #8]
 80131cc:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d00a      	beq.n	80131ea <xEventGroupWaitBits+0x56>
	__asm volatile
 80131d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131d8:	f383 8811 	msr	BASEPRI, r3
 80131dc:	f3bf 8f6f 	isb	sy
 80131e0:	f3bf 8f4f 	dsb	sy
 80131e4:	61fb      	str	r3, [r7, #28]
}
 80131e6:	bf00      	nop
 80131e8:	e7fe      	b.n	80131e8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80131ea:	68bb      	ldr	r3, [r7, #8]
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d10a      	bne.n	8013206 <xEventGroupWaitBits+0x72>
	__asm volatile
 80131f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131f4:	f383 8811 	msr	BASEPRI, r3
 80131f8:	f3bf 8f6f 	isb	sy
 80131fc:	f3bf 8f4f 	dsb	sy
 8013200:	61bb      	str	r3, [r7, #24]
}
 8013202:	bf00      	nop
 8013204:	e7fe      	b.n	8013204 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013206:	f001 ff99 	bl	801513c <xTaskGetSchedulerState>
 801320a:	4603      	mov	r3, r0
 801320c:	2b00      	cmp	r3, #0
 801320e:	d102      	bne.n	8013216 <xEventGroupWaitBits+0x82>
 8013210:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013212:	2b00      	cmp	r3, #0
 8013214:	d101      	bne.n	801321a <xEventGroupWaitBits+0x86>
 8013216:	2301      	movs	r3, #1
 8013218:	e000      	b.n	801321c <xEventGroupWaitBits+0x88>
 801321a:	2300      	movs	r3, #0
 801321c:	2b00      	cmp	r3, #0
 801321e:	d10a      	bne.n	8013236 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013224:	f383 8811 	msr	BASEPRI, r3
 8013228:	f3bf 8f6f 	isb	sy
 801322c:	f3bf 8f4f 	dsb	sy
 8013230:	617b      	str	r3, [r7, #20]
}
 8013232:	bf00      	nop
 8013234:	e7fe      	b.n	8013234 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013236:	f001 faf9 	bl	801482c <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801323a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013240:	683a      	ldr	r2, [r7, #0]
 8013242:	68b9      	ldr	r1, [r7, #8]
 8013244:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013246:	f000 f90b 	bl	8013460 <prvTestWaitCondition>
 801324a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801324e:	2b00      	cmp	r3, #0
 8013250:	d00e      	beq.n	8013270 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013254:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013256:	2300      	movs	r3, #0
 8013258:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d028      	beq.n	80132b2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013262:	681a      	ldr	r2, [r3, #0]
 8013264:	68bb      	ldr	r3, [r7, #8]
 8013266:	43db      	mvns	r3, r3
 8013268:	401a      	ands	r2, r3
 801326a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801326c:	601a      	str	r2, [r3, #0]
 801326e:	e020      	b.n	80132b2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013272:	2b00      	cmp	r3, #0
 8013274:	d104      	bne.n	8013280 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013278:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801327a:	2301      	movs	r3, #1
 801327c:	633b      	str	r3, [r7, #48]	; 0x30
 801327e:	e018      	b.n	80132b2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	2b00      	cmp	r3, #0
 8013284:	d003      	beq.n	801328e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013288:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801328c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801328e:	683b      	ldr	r3, [r7, #0]
 8013290:	2b00      	cmp	r3, #0
 8013292:	d003      	beq.n	801329c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013296:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801329a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801329c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801329e:	1d18      	adds	r0, r3, #4
 80132a0:	68ba      	ldr	r2, [r7, #8]
 80132a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80132a4:	4313      	orrs	r3, r2
 80132a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80132a8:	4619      	mov	r1, r3
 80132aa:	f001 fcbf 	bl	8014c2c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80132ae:	2300      	movs	r3, #0
 80132b0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80132b2:	f001 fac9 	bl	8014848 <xTaskResumeAll>
 80132b6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80132b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80132ba:	2b00      	cmp	r3, #0
 80132bc:	d031      	beq.n	8013322 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80132be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d107      	bne.n	80132d4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80132c4:	4b19      	ldr	r3, [pc, #100]	; (801332c <xEventGroupWaitBits+0x198>)
 80132c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80132ca:	601a      	str	r2, [r3, #0]
 80132cc:	f3bf 8f4f 	dsb	sy
 80132d0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80132d4:	f001 ffbe 	bl	8015254 <uxTaskResetEventItemValue>
 80132d8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80132da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80132dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d11a      	bne.n	801331a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80132e4:	f002 fcbe 	bl	8015c64 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80132e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80132ee:	683a      	ldr	r2, [r7, #0]
 80132f0:	68b9      	ldr	r1, [r7, #8]
 80132f2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80132f4:	f000 f8b4 	bl	8013460 <prvTestWaitCondition>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d009      	beq.n	8013312 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	2b00      	cmp	r3, #0
 8013302:	d006      	beq.n	8013312 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013304:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013306:	681a      	ldr	r2, [r3, #0]
 8013308:	68bb      	ldr	r3, [r7, #8]
 801330a:	43db      	mvns	r3, r3
 801330c:	401a      	ands	r2, r3
 801330e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013310:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013312:	2301      	movs	r3, #1
 8013314:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013316:	f002 fcd5 	bl	8015cc4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801331c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013320:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013322:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013324:	4618      	mov	r0, r3
 8013326:	3740      	adds	r7, #64	; 0x40
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	e000ed04 	.word	0xe000ed04

08013330 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b08e      	sub	sp, #56	; 0x38
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
 8013338:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801333a:	2300      	movs	r3, #0
 801333c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013342:	2300      	movs	r3, #0
 8013344:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	2b00      	cmp	r3, #0
 801334a:	d10a      	bne.n	8013362 <xEventGroupSetBits+0x32>
	__asm volatile
 801334c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013350:	f383 8811 	msr	BASEPRI, r3
 8013354:	f3bf 8f6f 	isb	sy
 8013358:	f3bf 8f4f 	dsb	sy
 801335c:	613b      	str	r3, [r7, #16]
}
 801335e:	bf00      	nop
 8013360:	e7fe      	b.n	8013360 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013362:	683b      	ldr	r3, [r7, #0]
 8013364:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013368:	2b00      	cmp	r3, #0
 801336a:	d00a      	beq.n	8013382 <xEventGroupSetBits+0x52>
	__asm volatile
 801336c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013370:	f383 8811 	msr	BASEPRI, r3
 8013374:	f3bf 8f6f 	isb	sy
 8013378:	f3bf 8f4f 	dsb	sy
 801337c:	60fb      	str	r3, [r7, #12]
}
 801337e:	bf00      	nop
 8013380:	e7fe      	b.n	8013380 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013384:	3304      	adds	r3, #4
 8013386:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801338a:	3308      	adds	r3, #8
 801338c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801338e:	f001 fa4d 	bl	801482c <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013394:	68db      	ldr	r3, [r3, #12]
 8013396:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801339a:	681a      	ldr	r2, [r3, #0]
 801339c:	683b      	ldr	r3, [r7, #0]
 801339e:	431a      	orrs	r2, r3
 80133a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133a2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80133a4:	e03c      	b.n	8013420 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80133a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133a8:	685b      	ldr	r3, [r3, #4]
 80133aa:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80133ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80133ae:	681b      	ldr	r3, [r3, #0]
 80133b0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80133b2:	2300      	movs	r3, #0
 80133b4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80133b6:	69bb      	ldr	r3, [r7, #24]
 80133b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80133bc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80133be:	69bb      	ldr	r3, [r7, #24]
 80133c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80133c4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80133c6:	697b      	ldr	r3, [r7, #20]
 80133c8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80133cc:	2b00      	cmp	r3, #0
 80133ce:	d108      	bne.n	80133e2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80133d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133d2:	681a      	ldr	r2, [r3, #0]
 80133d4:	69bb      	ldr	r3, [r7, #24]
 80133d6:	4013      	ands	r3, r2
 80133d8:	2b00      	cmp	r3, #0
 80133da:	d00b      	beq.n	80133f4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80133dc:	2301      	movs	r3, #1
 80133de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80133e0:	e008      	b.n	80133f4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80133e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133e4:	681a      	ldr	r2, [r3, #0]
 80133e6:	69bb      	ldr	r3, [r7, #24]
 80133e8:	4013      	ands	r3, r2
 80133ea:	69ba      	ldr	r2, [r7, #24]
 80133ec:	429a      	cmp	r2, r3
 80133ee:	d101      	bne.n	80133f4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80133f0:	2301      	movs	r3, #1
 80133f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80133f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d010      	beq.n	801341c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80133fa:	697b      	ldr	r3, [r7, #20]
 80133fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013400:	2b00      	cmp	r3, #0
 8013402:	d003      	beq.n	801340c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013406:	69bb      	ldr	r3, [r7, #24]
 8013408:	4313      	orrs	r3, r2
 801340a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801340c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013414:	4619      	mov	r1, r3
 8013416:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013418:	f001 fcd4 	bl	8014dc4 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013420:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013422:	6a3b      	ldr	r3, [r7, #32]
 8013424:	429a      	cmp	r2, r3
 8013426:	d1be      	bne.n	80133a6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801342e:	43db      	mvns	r3, r3
 8013430:	401a      	ands	r2, r3
 8013432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013434:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013436:	f001 fa07 	bl	8014848 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801343a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801343c:	681b      	ldr	r3, [r3, #0]
}
 801343e:	4618      	mov	r0, r3
 8013440:	3738      	adds	r7, #56	; 0x38
 8013442:	46bd      	mov	sp, r7
 8013444:	bd80      	pop	{r7, pc}

08013446 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013446:	b580      	push	{r7, lr}
 8013448:	b082      	sub	sp, #8
 801344a:	af00      	add	r7, sp, #0
 801344c:	6078      	str	r0, [r7, #4]
 801344e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013450:	6839      	ldr	r1, [r7, #0]
 8013452:	6878      	ldr	r0, [r7, #4]
 8013454:	f7ff ff6c 	bl	8013330 <xEventGroupSetBits>
}
 8013458:	bf00      	nop
 801345a:	3708      	adds	r7, #8
 801345c:	46bd      	mov	sp, r7
 801345e:	bd80      	pop	{r7, pc}

08013460 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013460:	b480      	push	{r7}
 8013462:	b087      	sub	sp, #28
 8013464:	af00      	add	r7, sp, #0
 8013466:	60f8      	str	r0, [r7, #12]
 8013468:	60b9      	str	r1, [r7, #8]
 801346a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801346c:	2300      	movs	r3, #0
 801346e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013470:	687b      	ldr	r3, [r7, #4]
 8013472:	2b00      	cmp	r3, #0
 8013474:	d107      	bne.n	8013486 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013476:	68fa      	ldr	r2, [r7, #12]
 8013478:	68bb      	ldr	r3, [r7, #8]
 801347a:	4013      	ands	r3, r2
 801347c:	2b00      	cmp	r3, #0
 801347e:	d00a      	beq.n	8013496 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013480:	2301      	movs	r3, #1
 8013482:	617b      	str	r3, [r7, #20]
 8013484:	e007      	b.n	8013496 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013486:	68fa      	ldr	r2, [r7, #12]
 8013488:	68bb      	ldr	r3, [r7, #8]
 801348a:	4013      	ands	r3, r2
 801348c:	68ba      	ldr	r2, [r7, #8]
 801348e:	429a      	cmp	r2, r3
 8013490:	d101      	bne.n	8013496 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013492:	2301      	movs	r3, #1
 8013494:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013496:	697b      	ldr	r3, [r7, #20]
}
 8013498:	4618      	mov	r0, r3
 801349a:	371c      	adds	r7, #28
 801349c:	46bd      	mov	sp, r7
 801349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134a2:	4770      	bx	lr

080134a4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80134a4:	b580      	push	{r7, lr}
 80134a6:	b086      	sub	sp, #24
 80134a8:	af00      	add	r7, sp, #0
 80134aa:	60f8      	str	r0, [r7, #12]
 80134ac:	60b9      	str	r1, [r7, #8]
 80134ae:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80134b0:	687b      	ldr	r3, [r7, #4]
 80134b2:	68ba      	ldr	r2, [r7, #8]
 80134b4:	68f9      	ldr	r1, [r7, #12]
 80134b6:	4804      	ldr	r0, [pc, #16]	; (80134c8 <xEventGroupSetBitsFromISR+0x24>)
 80134b8:	f002 fa86 	bl	80159c8 <xTimerPendFunctionCallFromISR>
 80134bc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80134be:	697b      	ldr	r3, [r7, #20]
	}
 80134c0:	4618      	mov	r0, r3
 80134c2:	3718      	adds	r7, #24
 80134c4:	46bd      	mov	sp, r7
 80134c6:	bd80      	pop	{r7, pc}
 80134c8:	08013447 	.word	0x08013447

080134cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80134cc:	b480      	push	{r7}
 80134ce:	b083      	sub	sp, #12
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	f103 0208 	add.w	r2, r3, #8
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80134e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	f103 0208 	add.w	r2, r3, #8
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f103 0208 	add.w	r2, r3, #8
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	2200      	movs	r2, #0
 80134fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013500:	bf00      	nop
 8013502:	370c      	adds	r7, #12
 8013504:	46bd      	mov	sp, r7
 8013506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801350a:	4770      	bx	lr

0801350c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801350c:	b480      	push	{r7}
 801350e:	b083      	sub	sp, #12
 8013510:	af00      	add	r7, sp, #0
 8013512:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013514:	687b      	ldr	r3, [r7, #4]
 8013516:	2200      	movs	r2, #0
 8013518:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801351a:	bf00      	nop
 801351c:	370c      	adds	r7, #12
 801351e:	46bd      	mov	sp, r7
 8013520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013524:	4770      	bx	lr

08013526 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013526:	b480      	push	{r7}
 8013528:	b085      	sub	sp, #20
 801352a:	af00      	add	r7, sp, #0
 801352c:	6078      	str	r0, [r7, #4]
 801352e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013530:	687b      	ldr	r3, [r7, #4]
 8013532:	685b      	ldr	r3, [r3, #4]
 8013534:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013536:	683b      	ldr	r3, [r7, #0]
 8013538:	68fa      	ldr	r2, [r7, #12]
 801353a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801353c:	68fb      	ldr	r3, [r7, #12]
 801353e:	689a      	ldr	r2, [r3, #8]
 8013540:	683b      	ldr	r3, [r7, #0]
 8013542:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013544:	68fb      	ldr	r3, [r7, #12]
 8013546:	689b      	ldr	r3, [r3, #8]
 8013548:	683a      	ldr	r2, [r7, #0]
 801354a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801354c:	68fb      	ldr	r3, [r7, #12]
 801354e:	683a      	ldr	r2, [r7, #0]
 8013550:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013552:	683b      	ldr	r3, [r7, #0]
 8013554:	687a      	ldr	r2, [r7, #4]
 8013556:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	1c5a      	adds	r2, r3, #1
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	601a      	str	r2, [r3, #0]
}
 8013562:	bf00      	nop
 8013564:	3714      	adds	r7, #20
 8013566:	46bd      	mov	sp, r7
 8013568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356c:	4770      	bx	lr

0801356e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801356e:	b480      	push	{r7}
 8013570:	b085      	sub	sp, #20
 8013572:	af00      	add	r7, sp, #0
 8013574:	6078      	str	r0, [r7, #4]
 8013576:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013578:	683b      	ldr	r3, [r7, #0]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013584:	d103      	bne.n	801358e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	691b      	ldr	r3, [r3, #16]
 801358a:	60fb      	str	r3, [r7, #12]
 801358c:	e00c      	b.n	80135a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801358e:	687b      	ldr	r3, [r7, #4]
 8013590:	3308      	adds	r3, #8
 8013592:	60fb      	str	r3, [r7, #12]
 8013594:	e002      	b.n	801359c <vListInsert+0x2e>
 8013596:	68fb      	ldr	r3, [r7, #12]
 8013598:	685b      	ldr	r3, [r3, #4]
 801359a:	60fb      	str	r3, [r7, #12]
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	685b      	ldr	r3, [r3, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	68ba      	ldr	r2, [r7, #8]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d2f6      	bcs.n	8013596 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80135a8:	68fb      	ldr	r3, [r7, #12]
 80135aa:	685a      	ldr	r2, [r3, #4]
 80135ac:	683b      	ldr	r3, [r7, #0]
 80135ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80135b0:	683b      	ldr	r3, [r7, #0]
 80135b2:	685b      	ldr	r3, [r3, #4]
 80135b4:	683a      	ldr	r2, [r7, #0]
 80135b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80135b8:	683b      	ldr	r3, [r7, #0]
 80135ba:	68fa      	ldr	r2, [r7, #12]
 80135bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	683a      	ldr	r2, [r7, #0]
 80135c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80135c4:	683b      	ldr	r3, [r7, #0]
 80135c6:	687a      	ldr	r2, [r7, #4]
 80135c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80135ca:	687b      	ldr	r3, [r7, #4]
 80135cc:	681b      	ldr	r3, [r3, #0]
 80135ce:	1c5a      	adds	r2, r3, #1
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	601a      	str	r2, [r3, #0]
}
 80135d4:	bf00      	nop
 80135d6:	3714      	adds	r7, #20
 80135d8:	46bd      	mov	sp, r7
 80135da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135de:	4770      	bx	lr

080135e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80135e0:	b480      	push	{r7}
 80135e2:	b085      	sub	sp, #20
 80135e4:	af00      	add	r7, sp, #0
 80135e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	691b      	ldr	r3, [r3, #16]
 80135ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	685b      	ldr	r3, [r3, #4]
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	6892      	ldr	r2, [r2, #8]
 80135f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	689b      	ldr	r3, [r3, #8]
 80135fc:	687a      	ldr	r2, [r7, #4]
 80135fe:	6852      	ldr	r2, [r2, #4]
 8013600:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013602:	68fb      	ldr	r3, [r7, #12]
 8013604:	685b      	ldr	r3, [r3, #4]
 8013606:	687a      	ldr	r2, [r7, #4]
 8013608:	429a      	cmp	r2, r3
 801360a:	d103      	bne.n	8013614 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	689a      	ldr	r2, [r3, #8]
 8013610:	68fb      	ldr	r3, [r7, #12]
 8013612:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	2200      	movs	r2, #0
 8013618:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801361a:	68fb      	ldr	r3, [r7, #12]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	1e5a      	subs	r2, r3, #1
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	681b      	ldr	r3, [r3, #0]
}
 8013628:	4618      	mov	r0, r3
 801362a:	3714      	adds	r7, #20
 801362c:	46bd      	mov	sp, r7
 801362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013632:	4770      	bx	lr

08013634 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013634:	b580      	push	{r7, lr}
 8013636:	b084      	sub	sp, #16
 8013638:	af00      	add	r7, sp, #0
 801363a:	6078      	str	r0, [r7, #4]
 801363c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013642:	68fb      	ldr	r3, [r7, #12]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d10a      	bne.n	801365e <xQueueGenericReset+0x2a>
	__asm volatile
 8013648:	f04f 0350 	mov.w	r3, #80	; 0x50
 801364c:	f383 8811 	msr	BASEPRI, r3
 8013650:	f3bf 8f6f 	isb	sy
 8013654:	f3bf 8f4f 	dsb	sy
 8013658:	60bb      	str	r3, [r7, #8]
}
 801365a:	bf00      	nop
 801365c:	e7fe      	b.n	801365c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801365e:	f002 fb01 	bl	8015c64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	681a      	ldr	r2, [r3, #0]
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801366a:	68f9      	ldr	r1, [r7, #12]
 801366c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801366e:	fb01 f303 	mul.w	r3, r1, r3
 8013672:	441a      	add	r2, r3
 8013674:	68fb      	ldr	r3, [r7, #12]
 8013676:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	2200      	movs	r2, #0
 801367c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801367e:	68fb      	ldr	r3, [r7, #12]
 8013680:	681a      	ldr	r2, [r3, #0]
 8013682:	68fb      	ldr	r3, [r7, #12]
 8013684:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	681a      	ldr	r2, [r3, #0]
 801368a:	68fb      	ldr	r3, [r7, #12]
 801368c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801368e:	3b01      	subs	r3, #1
 8013690:	68f9      	ldr	r1, [r7, #12]
 8013692:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013694:	fb01 f303 	mul.w	r3, r1, r3
 8013698:	441a      	add	r2, r3
 801369a:	68fb      	ldr	r3, [r7, #12]
 801369c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801369e:	68fb      	ldr	r3, [r7, #12]
 80136a0:	22ff      	movs	r2, #255	; 0xff
 80136a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	22ff      	movs	r2, #255	; 0xff
 80136aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80136ae:	683b      	ldr	r3, [r7, #0]
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	d114      	bne.n	80136de <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	691b      	ldr	r3, [r3, #16]
 80136b8:	2b00      	cmp	r3, #0
 80136ba:	d01a      	beq.n	80136f2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	3310      	adds	r3, #16
 80136c0:	4618      	mov	r0, r3
 80136c2:	f001 fb1b 	bl	8014cfc <xTaskRemoveFromEventList>
 80136c6:	4603      	mov	r3, r0
 80136c8:	2b00      	cmp	r3, #0
 80136ca:	d012      	beq.n	80136f2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80136cc:	4b0c      	ldr	r3, [pc, #48]	; (8013700 <xQueueGenericReset+0xcc>)
 80136ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80136d2:	601a      	str	r2, [r3, #0]
 80136d4:	f3bf 8f4f 	dsb	sy
 80136d8:	f3bf 8f6f 	isb	sy
 80136dc:	e009      	b.n	80136f2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	3310      	adds	r3, #16
 80136e2:	4618      	mov	r0, r3
 80136e4:	f7ff fef2 	bl	80134cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	3324      	adds	r3, #36	; 0x24
 80136ec:	4618      	mov	r0, r3
 80136ee:	f7ff feed 	bl	80134cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80136f2:	f002 fae7 	bl	8015cc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80136f6:	2301      	movs	r3, #1
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3710      	adds	r7, #16
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}
 8013700:	e000ed04 	.word	0xe000ed04

08013704 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013704:	b580      	push	{r7, lr}
 8013706:	b08e      	sub	sp, #56	; 0x38
 8013708:	af02      	add	r7, sp, #8
 801370a:	60f8      	str	r0, [r7, #12]
 801370c:	60b9      	str	r1, [r7, #8]
 801370e:	607a      	str	r2, [r7, #4]
 8013710:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013712:	68fb      	ldr	r3, [r7, #12]
 8013714:	2b00      	cmp	r3, #0
 8013716:	d10a      	bne.n	801372e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013718:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371c:	f383 8811 	msr	BASEPRI, r3
 8013720:	f3bf 8f6f 	isb	sy
 8013724:	f3bf 8f4f 	dsb	sy
 8013728:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801372a:	bf00      	nop
 801372c:	e7fe      	b.n	801372c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801372e:	683b      	ldr	r3, [r7, #0]
 8013730:	2b00      	cmp	r3, #0
 8013732:	d10a      	bne.n	801374a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013738:	f383 8811 	msr	BASEPRI, r3
 801373c:	f3bf 8f6f 	isb	sy
 8013740:	f3bf 8f4f 	dsb	sy
 8013744:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013746:	bf00      	nop
 8013748:	e7fe      	b.n	8013748 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801374a:	687b      	ldr	r3, [r7, #4]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d002      	beq.n	8013756 <xQueueGenericCreateStatic+0x52>
 8013750:	68bb      	ldr	r3, [r7, #8]
 8013752:	2b00      	cmp	r3, #0
 8013754:	d001      	beq.n	801375a <xQueueGenericCreateStatic+0x56>
 8013756:	2301      	movs	r3, #1
 8013758:	e000      	b.n	801375c <xQueueGenericCreateStatic+0x58>
 801375a:	2300      	movs	r3, #0
 801375c:	2b00      	cmp	r3, #0
 801375e:	d10a      	bne.n	8013776 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013764:	f383 8811 	msr	BASEPRI, r3
 8013768:	f3bf 8f6f 	isb	sy
 801376c:	f3bf 8f4f 	dsb	sy
 8013770:	623b      	str	r3, [r7, #32]
}
 8013772:	bf00      	nop
 8013774:	e7fe      	b.n	8013774 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	2b00      	cmp	r3, #0
 801377a:	d102      	bne.n	8013782 <xQueueGenericCreateStatic+0x7e>
 801377c:	68bb      	ldr	r3, [r7, #8]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d101      	bne.n	8013786 <xQueueGenericCreateStatic+0x82>
 8013782:	2301      	movs	r3, #1
 8013784:	e000      	b.n	8013788 <xQueueGenericCreateStatic+0x84>
 8013786:	2300      	movs	r3, #0
 8013788:	2b00      	cmp	r3, #0
 801378a:	d10a      	bne.n	80137a2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801378c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013790:	f383 8811 	msr	BASEPRI, r3
 8013794:	f3bf 8f6f 	isb	sy
 8013798:	f3bf 8f4f 	dsb	sy
 801379c:	61fb      	str	r3, [r7, #28]
}
 801379e:	bf00      	nop
 80137a0:	e7fe      	b.n	80137a0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80137a2:	2350      	movs	r3, #80	; 0x50
 80137a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	2b50      	cmp	r3, #80	; 0x50
 80137aa:	d00a      	beq.n	80137c2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80137ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b0:	f383 8811 	msr	BASEPRI, r3
 80137b4:	f3bf 8f6f 	isb	sy
 80137b8:	f3bf 8f4f 	dsb	sy
 80137bc:	61bb      	str	r3, [r7, #24]
}
 80137be:	bf00      	nop
 80137c0:	e7fe      	b.n	80137c0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80137c2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80137c4:	683b      	ldr	r3, [r7, #0]
 80137c6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80137c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137ca:	2b00      	cmp	r3, #0
 80137cc:	d00d      	beq.n	80137ea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80137ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137d0:	2201      	movs	r2, #1
 80137d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80137d6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	9300      	str	r3, [sp, #0]
 80137de:	4613      	mov	r3, r2
 80137e0:	687a      	ldr	r2, [r7, #4]
 80137e2:	68b9      	ldr	r1, [r7, #8]
 80137e4:	68f8      	ldr	r0, [r7, #12]
 80137e6:	f000 f83f 	bl	8013868 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80137ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80137ec:	4618      	mov	r0, r3
 80137ee:	3730      	adds	r7, #48	; 0x30
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}

080137f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80137f4:	b580      	push	{r7, lr}
 80137f6:	b08a      	sub	sp, #40	; 0x28
 80137f8:	af02      	add	r7, sp, #8
 80137fa:	60f8      	str	r0, [r7, #12]
 80137fc:	60b9      	str	r1, [r7, #8]
 80137fe:	4613      	mov	r3, r2
 8013800:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	2b00      	cmp	r3, #0
 8013806:	d10a      	bne.n	801381e <xQueueGenericCreate+0x2a>
	__asm volatile
 8013808:	f04f 0350 	mov.w	r3, #80	; 0x50
 801380c:	f383 8811 	msr	BASEPRI, r3
 8013810:	f3bf 8f6f 	isb	sy
 8013814:	f3bf 8f4f 	dsb	sy
 8013818:	613b      	str	r3, [r7, #16]
}
 801381a:	bf00      	nop
 801381c:	e7fe      	b.n	801381c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	68ba      	ldr	r2, [r7, #8]
 8013822:	fb02 f303 	mul.w	r3, r2, r3
 8013826:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013828:	69fb      	ldr	r3, [r7, #28]
 801382a:	3350      	adds	r3, #80	; 0x50
 801382c:	4618      	mov	r0, r3
 801382e:	f002 fb3b 	bl	8015ea8 <pvPortMalloc>
 8013832:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013834:	69bb      	ldr	r3, [r7, #24]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d011      	beq.n	801385e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801383e:	697b      	ldr	r3, [r7, #20]
 8013840:	3350      	adds	r3, #80	; 0x50
 8013842:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013844:	69bb      	ldr	r3, [r7, #24]
 8013846:	2200      	movs	r2, #0
 8013848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801384c:	79fa      	ldrb	r2, [r7, #7]
 801384e:	69bb      	ldr	r3, [r7, #24]
 8013850:	9300      	str	r3, [sp, #0]
 8013852:	4613      	mov	r3, r2
 8013854:	697a      	ldr	r2, [r7, #20]
 8013856:	68b9      	ldr	r1, [r7, #8]
 8013858:	68f8      	ldr	r0, [r7, #12]
 801385a:	f000 f805 	bl	8013868 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801385e:	69bb      	ldr	r3, [r7, #24]
	}
 8013860:	4618      	mov	r0, r3
 8013862:	3720      	adds	r7, #32
 8013864:	46bd      	mov	sp, r7
 8013866:	bd80      	pop	{r7, pc}

08013868 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013868:	b580      	push	{r7, lr}
 801386a:	b084      	sub	sp, #16
 801386c:	af00      	add	r7, sp, #0
 801386e:	60f8      	str	r0, [r7, #12]
 8013870:	60b9      	str	r1, [r7, #8]
 8013872:	607a      	str	r2, [r7, #4]
 8013874:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013876:	68bb      	ldr	r3, [r7, #8]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d103      	bne.n	8013884 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801387c:	69bb      	ldr	r3, [r7, #24]
 801387e:	69ba      	ldr	r2, [r7, #24]
 8013880:	601a      	str	r2, [r3, #0]
 8013882:	e002      	b.n	801388a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013884:	69bb      	ldr	r3, [r7, #24]
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801388a:	69bb      	ldr	r3, [r7, #24]
 801388c:	68fa      	ldr	r2, [r7, #12]
 801388e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013890:	69bb      	ldr	r3, [r7, #24]
 8013892:	68ba      	ldr	r2, [r7, #8]
 8013894:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013896:	2101      	movs	r1, #1
 8013898:	69b8      	ldr	r0, [r7, #24]
 801389a:	f7ff fecb 	bl	8013634 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	78fa      	ldrb	r2, [r7, #3]
 80138a2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80138a6:	bf00      	nop
 80138a8:	3710      	adds	r7, #16
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bd80      	pop	{r7, pc}
	...

080138b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80138b0:	b580      	push	{r7, lr}
 80138b2:	b08e      	sub	sp, #56	; 0x38
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	60f8      	str	r0, [r7, #12]
 80138b8:	60b9      	str	r1, [r7, #8]
 80138ba:	607a      	str	r2, [r7, #4]
 80138bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80138be:	2300      	movs	r3, #0
 80138c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80138c2:	68fb      	ldr	r3, [r7, #12]
 80138c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80138c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138c8:	2b00      	cmp	r3, #0
 80138ca:	d10a      	bne.n	80138e2 <xQueueGenericSend+0x32>
	__asm volatile
 80138cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138d0:	f383 8811 	msr	BASEPRI, r3
 80138d4:	f3bf 8f6f 	isb	sy
 80138d8:	f3bf 8f4f 	dsb	sy
 80138dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80138de:	bf00      	nop
 80138e0:	e7fe      	b.n	80138e0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138e2:	68bb      	ldr	r3, [r7, #8]
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	d103      	bne.n	80138f0 <xQueueGenericSend+0x40>
 80138e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d101      	bne.n	80138f4 <xQueueGenericSend+0x44>
 80138f0:	2301      	movs	r3, #1
 80138f2:	e000      	b.n	80138f6 <xQueueGenericSend+0x46>
 80138f4:	2300      	movs	r3, #0
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d10a      	bne.n	8013910 <xQueueGenericSend+0x60>
	__asm volatile
 80138fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138fe:	f383 8811 	msr	BASEPRI, r3
 8013902:	f3bf 8f6f 	isb	sy
 8013906:	f3bf 8f4f 	dsb	sy
 801390a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801390c:	bf00      	nop
 801390e:	e7fe      	b.n	801390e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	2b02      	cmp	r3, #2
 8013914:	d103      	bne.n	801391e <xQueueGenericSend+0x6e>
 8013916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801391a:	2b01      	cmp	r3, #1
 801391c:	d101      	bne.n	8013922 <xQueueGenericSend+0x72>
 801391e:	2301      	movs	r3, #1
 8013920:	e000      	b.n	8013924 <xQueueGenericSend+0x74>
 8013922:	2300      	movs	r3, #0
 8013924:	2b00      	cmp	r3, #0
 8013926:	d10a      	bne.n	801393e <xQueueGenericSend+0x8e>
	__asm volatile
 8013928:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392c:	f383 8811 	msr	BASEPRI, r3
 8013930:	f3bf 8f6f 	isb	sy
 8013934:	f3bf 8f4f 	dsb	sy
 8013938:	623b      	str	r3, [r7, #32]
}
 801393a:	bf00      	nop
 801393c:	e7fe      	b.n	801393c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801393e:	f001 fbfd 	bl	801513c <xTaskGetSchedulerState>
 8013942:	4603      	mov	r3, r0
 8013944:	2b00      	cmp	r3, #0
 8013946:	d102      	bne.n	801394e <xQueueGenericSend+0x9e>
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2b00      	cmp	r3, #0
 801394c:	d101      	bne.n	8013952 <xQueueGenericSend+0xa2>
 801394e:	2301      	movs	r3, #1
 8013950:	e000      	b.n	8013954 <xQueueGenericSend+0xa4>
 8013952:	2300      	movs	r3, #0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d10a      	bne.n	801396e <xQueueGenericSend+0xbe>
	__asm volatile
 8013958:	f04f 0350 	mov.w	r3, #80	; 0x50
 801395c:	f383 8811 	msr	BASEPRI, r3
 8013960:	f3bf 8f6f 	isb	sy
 8013964:	f3bf 8f4f 	dsb	sy
 8013968:	61fb      	str	r3, [r7, #28]
}
 801396a:	bf00      	nop
 801396c:	e7fe      	b.n	801396c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801396e:	f002 f979 	bl	8015c64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801397a:	429a      	cmp	r2, r3
 801397c:	d302      	bcc.n	8013984 <xQueueGenericSend+0xd4>
 801397e:	683b      	ldr	r3, [r7, #0]
 8013980:	2b02      	cmp	r3, #2
 8013982:	d129      	bne.n	80139d8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013984:	683a      	ldr	r2, [r7, #0]
 8013986:	68b9      	ldr	r1, [r7, #8]
 8013988:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801398a:	f000 fa8b 	bl	8013ea4 <prvCopyDataToQueue>
 801398e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013994:	2b00      	cmp	r3, #0
 8013996:	d010      	beq.n	80139ba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801399a:	3324      	adds	r3, #36	; 0x24
 801399c:	4618      	mov	r0, r3
 801399e:	f001 f9ad 	bl	8014cfc <xTaskRemoveFromEventList>
 80139a2:	4603      	mov	r3, r0
 80139a4:	2b00      	cmp	r3, #0
 80139a6:	d013      	beq.n	80139d0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80139a8:	4b3f      	ldr	r3, [pc, #252]	; (8013aa8 <xQueueGenericSend+0x1f8>)
 80139aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139ae:	601a      	str	r2, [r3, #0]
 80139b0:	f3bf 8f4f 	dsb	sy
 80139b4:	f3bf 8f6f 	isb	sy
 80139b8:	e00a      	b.n	80139d0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80139ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139bc:	2b00      	cmp	r3, #0
 80139be:	d007      	beq.n	80139d0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80139c0:	4b39      	ldr	r3, [pc, #228]	; (8013aa8 <xQueueGenericSend+0x1f8>)
 80139c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139c6:	601a      	str	r2, [r3, #0]
 80139c8:	f3bf 8f4f 	dsb	sy
 80139cc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80139d0:	f002 f978 	bl	8015cc4 <vPortExitCritical>
				return pdPASS;
 80139d4:	2301      	movs	r3, #1
 80139d6:	e063      	b.n	8013aa0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d103      	bne.n	80139e6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80139de:	f002 f971 	bl	8015cc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80139e2:	2300      	movs	r3, #0
 80139e4:	e05c      	b.n	8013aa0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80139e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139e8:	2b00      	cmp	r3, #0
 80139ea:	d106      	bne.n	80139fa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80139ec:	f107 0314 	add.w	r3, r7, #20
 80139f0:	4618      	mov	r0, r3
 80139f2:	f001 fa49 	bl	8014e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80139f6:	2301      	movs	r3, #1
 80139f8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80139fa:	f002 f963 	bl	8015cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80139fe:	f000 ff15 	bl	801482c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013a02:	f002 f92f 	bl	8015c64 <vPortEnterCritical>
 8013a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013a0c:	b25b      	sxtb	r3, r3
 8013a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a12:	d103      	bne.n	8013a1c <xQueueGenericSend+0x16c>
 8013a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a16:	2200      	movs	r2, #0
 8013a18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013a22:	b25b      	sxtb	r3, r3
 8013a24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013a28:	d103      	bne.n	8013a32 <xQueueGenericSend+0x182>
 8013a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a2c:	2200      	movs	r2, #0
 8013a2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013a32:	f002 f947 	bl	8015cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013a36:	1d3a      	adds	r2, r7, #4
 8013a38:	f107 0314 	add.w	r3, r7, #20
 8013a3c:	4611      	mov	r1, r2
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f001 fa38 	bl	8014eb4 <xTaskCheckForTimeOut>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d124      	bne.n	8013a94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8013a4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a4c:	f000 fb22 	bl	8014094 <prvIsQueueFull>
 8013a50:	4603      	mov	r3, r0
 8013a52:	2b00      	cmp	r3, #0
 8013a54:	d018      	beq.n	8013a88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a58:	3310      	adds	r3, #16
 8013a5a:	687a      	ldr	r2, [r7, #4]
 8013a5c:	4611      	mov	r1, r2
 8013a5e:	4618      	mov	r0, r3
 8013a60:	f001 f8c0 	bl	8014be4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013a64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a66:	f000 faad 	bl	8013fc4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8013a6a:	f000 feed 	bl	8014848 <xTaskResumeAll>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f47f af7c 	bne.w	801396e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013a76:	4b0c      	ldr	r3, [pc, #48]	; (8013aa8 <xQueueGenericSend+0x1f8>)
 8013a78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a7c:	601a      	str	r2, [r3, #0]
 8013a7e:	f3bf 8f4f 	dsb	sy
 8013a82:	f3bf 8f6f 	isb	sy
 8013a86:	e772      	b.n	801396e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a8a:	f000 fa9b 	bl	8013fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013a8e:	f000 fedb 	bl	8014848 <xTaskResumeAll>
 8013a92:	e76c      	b.n	801396e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013a94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a96:	f000 fa95 	bl	8013fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013a9a:	f000 fed5 	bl	8014848 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8013a9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013aa0:	4618      	mov	r0, r3
 8013aa2:	3738      	adds	r7, #56	; 0x38
 8013aa4:	46bd      	mov	sp, r7
 8013aa6:	bd80      	pop	{r7, pc}
 8013aa8:	e000ed04 	.word	0xe000ed04

08013aac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8013aac:	b580      	push	{r7, lr}
 8013aae:	b090      	sub	sp, #64	; 0x40
 8013ab0:	af00      	add	r7, sp, #0
 8013ab2:	60f8      	str	r0, [r7, #12]
 8013ab4:	60b9      	str	r1, [r7, #8]
 8013ab6:	607a      	str	r2, [r7, #4]
 8013ab8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013aba:	68fb      	ldr	r3, [r7, #12]
 8013abc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8013abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d10a      	bne.n	8013ada <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac8:	f383 8811 	msr	BASEPRI, r3
 8013acc:	f3bf 8f6f 	isb	sy
 8013ad0:	f3bf 8f4f 	dsb	sy
 8013ad4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8013ad6:	bf00      	nop
 8013ad8:	e7fe      	b.n	8013ad8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ada:	68bb      	ldr	r3, [r7, #8]
 8013adc:	2b00      	cmp	r3, #0
 8013ade:	d103      	bne.n	8013ae8 <xQueueGenericSendFromISR+0x3c>
 8013ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d101      	bne.n	8013aec <xQueueGenericSendFromISR+0x40>
 8013ae8:	2301      	movs	r3, #1
 8013aea:	e000      	b.n	8013aee <xQueueGenericSendFromISR+0x42>
 8013aec:	2300      	movs	r3, #0
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d10a      	bne.n	8013b08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013af6:	f383 8811 	msr	BASEPRI, r3
 8013afa:	f3bf 8f6f 	isb	sy
 8013afe:	f3bf 8f4f 	dsb	sy
 8013b02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013b04:	bf00      	nop
 8013b06:	e7fe      	b.n	8013b06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013b08:	683b      	ldr	r3, [r7, #0]
 8013b0a:	2b02      	cmp	r3, #2
 8013b0c:	d103      	bne.n	8013b16 <xQueueGenericSendFromISR+0x6a>
 8013b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b12:	2b01      	cmp	r3, #1
 8013b14:	d101      	bne.n	8013b1a <xQueueGenericSendFromISR+0x6e>
 8013b16:	2301      	movs	r3, #1
 8013b18:	e000      	b.n	8013b1c <xQueueGenericSendFromISR+0x70>
 8013b1a:	2300      	movs	r3, #0
 8013b1c:	2b00      	cmp	r3, #0
 8013b1e:	d10a      	bne.n	8013b36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b24:	f383 8811 	msr	BASEPRI, r3
 8013b28:	f3bf 8f6f 	isb	sy
 8013b2c:	f3bf 8f4f 	dsb	sy
 8013b30:	623b      	str	r3, [r7, #32]
}
 8013b32:	bf00      	nop
 8013b34:	e7fe      	b.n	8013b34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013b36:	f002 f977 	bl	8015e28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8013b3a:	f3ef 8211 	mrs	r2, BASEPRI
 8013b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b42:	f383 8811 	msr	BASEPRI, r3
 8013b46:	f3bf 8f6f 	isb	sy
 8013b4a:	f3bf 8f4f 	dsb	sy
 8013b4e:	61fa      	str	r2, [r7, #28]
 8013b50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013b52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013b54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013b5e:	429a      	cmp	r2, r3
 8013b60:	d302      	bcc.n	8013b68 <xQueueGenericSendFromISR+0xbc>
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	2b02      	cmp	r3, #2
 8013b66:	d12f      	bne.n	8013bc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013b76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013b78:	683a      	ldr	r2, [r7, #0]
 8013b7a:	68b9      	ldr	r1, [r7, #8]
 8013b7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013b7e:	f000 f991 	bl	8013ea4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013b82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013b86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b8a:	d112      	bne.n	8013bb2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d016      	beq.n	8013bc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b96:	3324      	adds	r3, #36	; 0x24
 8013b98:	4618      	mov	r0, r3
 8013b9a:	f001 f8af 	bl	8014cfc <xTaskRemoveFromEventList>
 8013b9e:	4603      	mov	r3, r0
 8013ba0:	2b00      	cmp	r3, #0
 8013ba2:	d00e      	beq.n	8013bc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	2b00      	cmp	r3, #0
 8013ba8:	d00b      	beq.n	8013bc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	2201      	movs	r2, #1
 8013bae:	601a      	str	r2, [r3, #0]
 8013bb0:	e007      	b.n	8013bc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013bb6:	3301      	adds	r3, #1
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	b25a      	sxtb	r2, r3
 8013bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013bc2:	2301      	movs	r3, #1
 8013bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013bc6:	e001      	b.n	8013bcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013bc8:	2300      	movs	r3, #0
 8013bca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013bce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8013bd0:	697b      	ldr	r3, [r7, #20]
 8013bd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8013bd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013bd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013bda:	4618      	mov	r0, r3
 8013bdc:	3740      	adds	r7, #64	; 0x40
 8013bde:	46bd      	mov	sp, r7
 8013be0:	bd80      	pop	{r7, pc}
	...

08013be4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013be4:	b580      	push	{r7, lr}
 8013be6:	b08c      	sub	sp, #48	; 0x30
 8013be8:	af00      	add	r7, sp, #0
 8013bea:	60f8      	str	r0, [r7, #12]
 8013bec:	60b9      	str	r1, [r7, #8]
 8013bee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013bf0:	2300      	movs	r3, #0
 8013bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013bf4:	68fb      	ldr	r3, [r7, #12]
 8013bf6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d10a      	bne.n	8013c14 <xQueueReceive+0x30>
	__asm volatile
 8013bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c02:	f383 8811 	msr	BASEPRI, r3
 8013c06:	f3bf 8f6f 	isb	sy
 8013c0a:	f3bf 8f4f 	dsb	sy
 8013c0e:	623b      	str	r3, [r7, #32]
}
 8013c10:	bf00      	nop
 8013c12:	e7fe      	b.n	8013c12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013c14:	68bb      	ldr	r3, [r7, #8]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d103      	bne.n	8013c22 <xQueueReceive+0x3e>
 8013c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d101      	bne.n	8013c26 <xQueueReceive+0x42>
 8013c22:	2301      	movs	r3, #1
 8013c24:	e000      	b.n	8013c28 <xQueueReceive+0x44>
 8013c26:	2300      	movs	r3, #0
 8013c28:	2b00      	cmp	r3, #0
 8013c2a:	d10a      	bne.n	8013c42 <xQueueReceive+0x5e>
	__asm volatile
 8013c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c30:	f383 8811 	msr	BASEPRI, r3
 8013c34:	f3bf 8f6f 	isb	sy
 8013c38:	f3bf 8f4f 	dsb	sy
 8013c3c:	61fb      	str	r3, [r7, #28]
}
 8013c3e:	bf00      	nop
 8013c40:	e7fe      	b.n	8013c40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013c42:	f001 fa7b 	bl	801513c <xTaskGetSchedulerState>
 8013c46:	4603      	mov	r3, r0
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d102      	bne.n	8013c52 <xQueueReceive+0x6e>
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	2b00      	cmp	r3, #0
 8013c50:	d101      	bne.n	8013c56 <xQueueReceive+0x72>
 8013c52:	2301      	movs	r3, #1
 8013c54:	e000      	b.n	8013c58 <xQueueReceive+0x74>
 8013c56:	2300      	movs	r3, #0
 8013c58:	2b00      	cmp	r3, #0
 8013c5a:	d10a      	bne.n	8013c72 <xQueueReceive+0x8e>
	__asm volatile
 8013c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c60:	f383 8811 	msr	BASEPRI, r3
 8013c64:	f3bf 8f6f 	isb	sy
 8013c68:	f3bf 8f4f 	dsb	sy
 8013c6c:	61bb      	str	r3, [r7, #24]
}
 8013c6e:	bf00      	nop
 8013c70:	e7fe      	b.n	8013c70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013c72:	f001 fff7 	bl	8015c64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d01f      	beq.n	8013cc2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c82:	68b9      	ldr	r1, [r7, #8]
 8013c84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013c86:	f000 f977 	bl	8013f78 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c8c:	1e5a      	subs	r2, r3, #1
 8013c8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c94:	691b      	ldr	r3, [r3, #16]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d00f      	beq.n	8013cba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c9c:	3310      	adds	r3, #16
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f001 f82c 	bl	8014cfc <xTaskRemoveFromEventList>
 8013ca4:	4603      	mov	r3, r0
 8013ca6:	2b00      	cmp	r3, #0
 8013ca8:	d007      	beq.n	8013cba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013caa:	4b3d      	ldr	r3, [pc, #244]	; (8013da0 <xQueueReceive+0x1bc>)
 8013cac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013cb0:	601a      	str	r2, [r3, #0]
 8013cb2:	f3bf 8f4f 	dsb	sy
 8013cb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013cba:	f002 f803 	bl	8015cc4 <vPortExitCritical>
				return pdPASS;
 8013cbe:	2301      	movs	r3, #1
 8013cc0:	e069      	b.n	8013d96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d103      	bne.n	8013cd0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013cc8:	f001 fffc 	bl	8015cc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013ccc:	2300      	movs	r3, #0
 8013cce:	e062      	b.n	8013d96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d106      	bne.n	8013ce4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013cd6:	f107 0310 	add.w	r3, r7, #16
 8013cda:	4618      	mov	r0, r3
 8013cdc:	f001 f8d4 	bl	8014e88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ce0:	2301      	movs	r3, #1
 8013ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ce4:	f001 ffee 	bl	8015cc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ce8:	f000 fda0 	bl	801482c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013cec:	f001 ffba 	bl	8015c64 <vPortEnterCritical>
 8013cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013cf6:	b25b      	sxtb	r3, r3
 8013cf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013cfc:	d103      	bne.n	8013d06 <xQueueReceive+0x122>
 8013cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d00:	2200      	movs	r2, #0
 8013d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013d0c:	b25b      	sxtb	r3, r3
 8013d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013d12:	d103      	bne.n	8013d1c <xQueueReceive+0x138>
 8013d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d16:	2200      	movs	r2, #0
 8013d18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013d1c:	f001 ffd2 	bl	8015cc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013d20:	1d3a      	adds	r2, r7, #4
 8013d22:	f107 0310 	add.w	r3, r7, #16
 8013d26:	4611      	mov	r1, r2
 8013d28:	4618      	mov	r0, r3
 8013d2a:	f001 f8c3 	bl	8014eb4 <xTaskCheckForTimeOut>
 8013d2e:	4603      	mov	r3, r0
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d123      	bne.n	8013d7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d36:	f000 f997 	bl	8014068 <prvIsQueueEmpty>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	2b00      	cmp	r3, #0
 8013d3e:	d017      	beq.n	8013d70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013d42:	3324      	adds	r3, #36	; 0x24
 8013d44:	687a      	ldr	r2, [r7, #4]
 8013d46:	4611      	mov	r1, r2
 8013d48:	4618      	mov	r0, r3
 8013d4a:	f000 ff4b 	bl	8014be4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d50:	f000 f938 	bl	8013fc4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013d54:	f000 fd78 	bl	8014848 <xTaskResumeAll>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d189      	bne.n	8013c72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013d5e:	4b10      	ldr	r3, [pc, #64]	; (8013da0 <xQueueReceive+0x1bc>)
 8013d60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013d64:	601a      	str	r2, [r3, #0]
 8013d66:	f3bf 8f4f 	dsb	sy
 8013d6a:	f3bf 8f6f 	isb	sy
 8013d6e:	e780      	b.n	8013c72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013d70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d72:	f000 f927 	bl	8013fc4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013d76:	f000 fd67 	bl	8014848 <xTaskResumeAll>
 8013d7a:	e77a      	b.n	8013c72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013d7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d7e:	f000 f921 	bl	8013fc4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013d82:	f000 fd61 	bl	8014848 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013d86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013d88:	f000 f96e 	bl	8014068 <prvIsQueueEmpty>
 8013d8c:	4603      	mov	r3, r0
 8013d8e:	2b00      	cmp	r3, #0
 8013d90:	f43f af6f 	beq.w	8013c72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013d94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3730      	adds	r7, #48	; 0x30
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	e000ed04 	.word	0xe000ed04

08013da4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013da4:	b580      	push	{r7, lr}
 8013da6:	b08e      	sub	sp, #56	; 0x38
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	60f8      	str	r0, [r7, #12]
 8013dac:	60b9      	str	r1, [r7, #8]
 8013dae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013db0:	68fb      	ldr	r3, [r7, #12]
 8013db2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d10a      	bne.n	8013dd0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dbe:	f383 8811 	msr	BASEPRI, r3
 8013dc2:	f3bf 8f6f 	isb	sy
 8013dc6:	f3bf 8f4f 	dsb	sy
 8013dca:	623b      	str	r3, [r7, #32]
}
 8013dcc:	bf00      	nop
 8013dce:	e7fe      	b.n	8013dce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013dd0:	68bb      	ldr	r3, [r7, #8]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d103      	bne.n	8013dde <xQueueReceiveFromISR+0x3a>
 8013dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dda:	2b00      	cmp	r3, #0
 8013ddc:	d101      	bne.n	8013de2 <xQueueReceiveFromISR+0x3e>
 8013dde:	2301      	movs	r3, #1
 8013de0:	e000      	b.n	8013de4 <xQueueReceiveFromISR+0x40>
 8013de2:	2300      	movs	r3, #0
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d10a      	bne.n	8013dfe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013dec:	f383 8811 	msr	BASEPRI, r3
 8013df0:	f3bf 8f6f 	isb	sy
 8013df4:	f3bf 8f4f 	dsb	sy
 8013df8:	61fb      	str	r3, [r7, #28]
}
 8013dfa:	bf00      	nop
 8013dfc:	e7fe      	b.n	8013dfc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013dfe:	f002 f813 	bl	8015e28 <vPortValidateInterruptPriority>
	__asm volatile
 8013e02:	f3ef 8211 	mrs	r2, BASEPRI
 8013e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013e0a:	f383 8811 	msr	BASEPRI, r3
 8013e0e:	f3bf 8f6f 	isb	sy
 8013e12:	f3bf 8f4f 	dsb	sy
 8013e16:	61ba      	str	r2, [r7, #24]
 8013e18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013e1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013e1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d02f      	beq.n	8013e8a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013e34:	68b9      	ldr	r1, [r7, #8]
 8013e36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013e38:	f000 f89e 	bl	8013f78 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013e3e:	1e5a      	subs	r2, r3, #1
 8013e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013e44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013e48:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013e4c:	d112      	bne.n	8013e74 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e50:	691b      	ldr	r3, [r3, #16]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d016      	beq.n	8013e84 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e58:	3310      	adds	r3, #16
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f000 ff4e 	bl	8014cfc <xTaskRemoveFromEventList>
 8013e60:	4603      	mov	r3, r0
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d00e      	beq.n	8013e84 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	2b00      	cmp	r3, #0
 8013e6a:	d00b      	beq.n	8013e84 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2201      	movs	r2, #1
 8013e70:	601a      	str	r2, [r3, #0]
 8013e72:	e007      	b.n	8013e84 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e78:	3301      	adds	r3, #1
 8013e7a:	b2db      	uxtb	r3, r3
 8013e7c:	b25a      	sxtb	r2, r3
 8013e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013e84:	2301      	movs	r3, #1
 8013e86:	637b      	str	r3, [r7, #52]	; 0x34
 8013e88:	e001      	b.n	8013e8e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013e8a:	2300      	movs	r3, #0
 8013e8c:	637b      	str	r3, [r7, #52]	; 0x34
 8013e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013e92:	693b      	ldr	r3, [r7, #16]
 8013e94:	f383 8811 	msr	BASEPRI, r3
}
 8013e98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013e9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013e9c:	4618      	mov	r0, r3
 8013e9e:	3738      	adds	r7, #56	; 0x38
 8013ea0:	46bd      	mov	sp, r7
 8013ea2:	bd80      	pop	{r7, pc}

08013ea4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013ea4:	b580      	push	{r7, lr}
 8013ea6:	b086      	sub	sp, #24
 8013ea8:	af00      	add	r7, sp, #0
 8013eaa:	60f8      	str	r0, [r7, #12]
 8013eac:	60b9      	str	r1, [r7, #8]
 8013eae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013eb0:	2300      	movs	r3, #0
 8013eb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013eb4:	68fb      	ldr	r3, [r7, #12]
 8013eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013eb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013eba:	68fb      	ldr	r3, [r7, #12]
 8013ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ebe:	2b00      	cmp	r3, #0
 8013ec0:	d10d      	bne.n	8013ede <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	2b00      	cmp	r3, #0
 8013ec8:	d14d      	bne.n	8013f66 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013eca:	68fb      	ldr	r3, [r7, #12]
 8013ecc:	689b      	ldr	r3, [r3, #8]
 8013ece:	4618      	mov	r0, r3
 8013ed0:	f001 f952 	bl	8015178 <xTaskPriorityDisinherit>
 8013ed4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013ed6:	68fb      	ldr	r3, [r7, #12]
 8013ed8:	2200      	movs	r2, #0
 8013eda:	609a      	str	r2, [r3, #8]
 8013edc:	e043      	b.n	8013f66 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	2b00      	cmp	r3, #0
 8013ee2:	d119      	bne.n	8013f18 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	6858      	ldr	r0, [r3, #4]
 8013ee8:	68fb      	ldr	r3, [r7, #12]
 8013eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eec:	461a      	mov	r2, r3
 8013eee:	68b9      	ldr	r1, [r7, #8]
 8013ef0:	f002 f9fe 	bl	80162f0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	685a      	ldr	r2, [r3, #4]
 8013ef8:	68fb      	ldr	r3, [r7, #12]
 8013efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013efc:	441a      	add	r2, r3
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	685a      	ldr	r2, [r3, #4]
 8013f06:	68fb      	ldr	r3, [r7, #12]
 8013f08:	689b      	ldr	r3, [r3, #8]
 8013f0a:	429a      	cmp	r2, r3
 8013f0c:	d32b      	bcc.n	8013f66 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013f0e:	68fb      	ldr	r3, [r7, #12]
 8013f10:	681a      	ldr	r2, [r3, #0]
 8013f12:	68fb      	ldr	r3, [r7, #12]
 8013f14:	605a      	str	r2, [r3, #4]
 8013f16:	e026      	b.n	8013f66 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	68d8      	ldr	r0, [r3, #12]
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f20:	461a      	mov	r2, r3
 8013f22:	68b9      	ldr	r1, [r7, #8]
 8013f24:	f002 f9e4 	bl	80162f0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013f28:	68fb      	ldr	r3, [r7, #12]
 8013f2a:	68da      	ldr	r2, [r3, #12]
 8013f2c:	68fb      	ldr	r3, [r7, #12]
 8013f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f30:	425b      	negs	r3, r3
 8013f32:	441a      	add	r2, r3
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013f38:	68fb      	ldr	r3, [r7, #12]
 8013f3a:	68da      	ldr	r2, [r3, #12]
 8013f3c:	68fb      	ldr	r3, [r7, #12]
 8013f3e:	681b      	ldr	r3, [r3, #0]
 8013f40:	429a      	cmp	r2, r3
 8013f42:	d207      	bcs.n	8013f54 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	689a      	ldr	r2, [r3, #8]
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f4c:	425b      	negs	r3, r3
 8013f4e:	441a      	add	r2, r3
 8013f50:	68fb      	ldr	r3, [r7, #12]
 8013f52:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2b02      	cmp	r3, #2
 8013f58:	d105      	bne.n	8013f66 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013f5a:	693b      	ldr	r3, [r7, #16]
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d002      	beq.n	8013f66 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013f60:	693b      	ldr	r3, [r7, #16]
 8013f62:	3b01      	subs	r3, #1
 8013f64:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013f66:	693b      	ldr	r3, [r7, #16]
 8013f68:	1c5a      	adds	r2, r3, #1
 8013f6a:	68fb      	ldr	r3, [r7, #12]
 8013f6c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013f6e:	697b      	ldr	r3, [r7, #20]
}
 8013f70:	4618      	mov	r0, r3
 8013f72:	3718      	adds	r7, #24
 8013f74:	46bd      	mov	sp, r7
 8013f76:	bd80      	pop	{r7, pc}

08013f78 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013f78:	b580      	push	{r7, lr}
 8013f7a:	b082      	sub	sp, #8
 8013f7c:	af00      	add	r7, sp, #0
 8013f7e:	6078      	str	r0, [r7, #4]
 8013f80:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013f82:	687b      	ldr	r3, [r7, #4]
 8013f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f86:	2b00      	cmp	r3, #0
 8013f88:	d018      	beq.n	8013fbc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	68da      	ldr	r2, [r3, #12]
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f92:	441a      	add	r2, r3
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	68da      	ldr	r2, [r3, #12]
 8013f9c:	687b      	ldr	r3, [r7, #4]
 8013f9e:	689b      	ldr	r3, [r3, #8]
 8013fa0:	429a      	cmp	r2, r3
 8013fa2:	d303      	bcc.n	8013fac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	681a      	ldr	r2, [r3, #0]
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	68d9      	ldr	r1, [r3, #12]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	6838      	ldr	r0, [r7, #0]
 8013fb8:	f002 f99a 	bl	80162f0 <memcpy>
	}
}
 8013fbc:	bf00      	nop
 8013fbe:	3708      	adds	r7, #8
 8013fc0:	46bd      	mov	sp, r7
 8013fc2:	bd80      	pop	{r7, pc}

08013fc4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b084      	sub	sp, #16
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013fcc:	f001 fe4a 	bl	8015c64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013fd6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013fd8:	e011      	b.n	8013ffe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d012      	beq.n	8014008 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013fe2:	687b      	ldr	r3, [r7, #4]
 8013fe4:	3324      	adds	r3, #36	; 0x24
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f000 fe88 	bl	8014cfc <xTaskRemoveFromEventList>
 8013fec:	4603      	mov	r3, r0
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d001      	beq.n	8013ff6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013ff2:	f000 ffc1 	bl	8014f78 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013ff6:	7bfb      	ldrb	r3, [r7, #15]
 8013ff8:	3b01      	subs	r3, #1
 8013ffa:	b2db      	uxtb	r3, r3
 8013ffc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013ffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014002:	2b00      	cmp	r3, #0
 8014004:	dce9      	bgt.n	8013fda <prvUnlockQueue+0x16>
 8014006:	e000      	b.n	801400a <prvUnlockQueue+0x46>
					break;
 8014008:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801400a:	687b      	ldr	r3, [r7, #4]
 801400c:	22ff      	movs	r2, #255	; 0xff
 801400e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8014012:	f001 fe57 	bl	8015cc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8014016:	f001 fe25 	bl	8015c64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014020:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014022:	e011      	b.n	8014048 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	691b      	ldr	r3, [r3, #16]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d012      	beq.n	8014052 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	3310      	adds	r3, #16
 8014030:	4618      	mov	r0, r3
 8014032:	f000 fe63 	bl	8014cfc <xTaskRemoveFromEventList>
 8014036:	4603      	mov	r3, r0
 8014038:	2b00      	cmp	r3, #0
 801403a:	d001      	beq.n	8014040 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801403c:	f000 ff9c 	bl	8014f78 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8014040:	7bbb      	ldrb	r3, [r7, #14]
 8014042:	3b01      	subs	r3, #1
 8014044:	b2db      	uxtb	r3, r3
 8014046:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8014048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801404c:	2b00      	cmp	r3, #0
 801404e:	dce9      	bgt.n	8014024 <prvUnlockQueue+0x60>
 8014050:	e000      	b.n	8014054 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8014052:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8014054:	687b      	ldr	r3, [r7, #4]
 8014056:	22ff      	movs	r2, #255	; 0xff
 8014058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801405c:	f001 fe32 	bl	8015cc4 <vPortExitCritical>
}
 8014060:	bf00      	nop
 8014062:	3710      	adds	r7, #16
 8014064:	46bd      	mov	sp, r7
 8014066:	bd80      	pop	{r7, pc}

08014068 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8014068:	b580      	push	{r7, lr}
 801406a:	b084      	sub	sp, #16
 801406c:	af00      	add	r7, sp, #0
 801406e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8014070:	f001 fdf8 	bl	8015c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014078:	2b00      	cmp	r3, #0
 801407a:	d102      	bne.n	8014082 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801407c:	2301      	movs	r3, #1
 801407e:	60fb      	str	r3, [r7, #12]
 8014080:	e001      	b.n	8014086 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8014082:	2300      	movs	r3, #0
 8014084:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8014086:	f001 fe1d 	bl	8015cc4 <vPortExitCritical>

	return xReturn;
 801408a:	68fb      	ldr	r3, [r7, #12]
}
 801408c:	4618      	mov	r0, r3
 801408e:	3710      	adds	r7, #16
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b084      	sub	sp, #16
 8014098:	af00      	add	r7, sp, #0
 801409a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801409c:	f001 fde2 	bl	8015c64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140a8:	429a      	cmp	r2, r3
 80140aa:	d102      	bne.n	80140b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80140ac:	2301      	movs	r3, #1
 80140ae:	60fb      	str	r3, [r7, #12]
 80140b0:	e001      	b.n	80140b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80140b2:	2300      	movs	r3, #0
 80140b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80140b6:	f001 fe05 	bl	8015cc4 <vPortExitCritical>

	return xReturn;
 80140ba:	68fb      	ldr	r3, [r7, #12]
}
 80140bc:	4618      	mov	r0, r3
 80140be:	3710      	adds	r7, #16
 80140c0:	46bd      	mov	sp, r7
 80140c2:	bd80      	pop	{r7, pc}

080140c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80140c4:	b480      	push	{r7}
 80140c6:	b085      	sub	sp, #20
 80140c8:	af00      	add	r7, sp, #0
 80140ca:	6078      	str	r0, [r7, #4]
 80140cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80140ce:	2300      	movs	r3, #0
 80140d0:	60fb      	str	r3, [r7, #12]
 80140d2:	e014      	b.n	80140fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80140d4:	4a0f      	ldr	r2, [pc, #60]	; (8014114 <vQueueAddToRegistry+0x50>)
 80140d6:	68fb      	ldr	r3, [r7, #12]
 80140d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80140dc:	2b00      	cmp	r3, #0
 80140de:	d10b      	bne.n	80140f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80140e0:	490c      	ldr	r1, [pc, #48]	; (8014114 <vQueueAddToRegistry+0x50>)
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	683a      	ldr	r2, [r7, #0]
 80140e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80140ea:	4a0a      	ldr	r2, [pc, #40]	; (8014114 <vQueueAddToRegistry+0x50>)
 80140ec:	68fb      	ldr	r3, [r7, #12]
 80140ee:	00db      	lsls	r3, r3, #3
 80140f0:	4413      	add	r3, r2
 80140f2:	687a      	ldr	r2, [r7, #4]
 80140f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80140f6:	e006      	b.n	8014106 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80140f8:	68fb      	ldr	r3, [r7, #12]
 80140fa:	3301      	adds	r3, #1
 80140fc:	60fb      	str	r3, [r7, #12]
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	2b07      	cmp	r3, #7
 8014102:	d9e7      	bls.n	80140d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8014104:	bf00      	nop
 8014106:	bf00      	nop
 8014108:	3714      	adds	r7, #20
 801410a:	46bd      	mov	sp, r7
 801410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014110:	4770      	bx	lr
 8014112:	bf00      	nop
 8014114:	240017c8 	.word	0x240017c8

08014118 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014118:	b580      	push	{r7, lr}
 801411a:	b086      	sub	sp, #24
 801411c:	af00      	add	r7, sp, #0
 801411e:	60f8      	str	r0, [r7, #12]
 8014120:	60b9      	str	r1, [r7, #8]
 8014122:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8014124:	68fb      	ldr	r3, [r7, #12]
 8014126:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8014128:	f001 fd9c 	bl	8015c64 <vPortEnterCritical>
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8014132:	b25b      	sxtb	r3, r3
 8014134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014138:	d103      	bne.n	8014142 <vQueueWaitForMessageRestricted+0x2a>
 801413a:	697b      	ldr	r3, [r7, #20]
 801413c:	2200      	movs	r2, #0
 801413e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8014142:	697b      	ldr	r3, [r7, #20]
 8014144:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8014148:	b25b      	sxtb	r3, r3
 801414a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801414e:	d103      	bne.n	8014158 <vQueueWaitForMessageRestricted+0x40>
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	2200      	movs	r2, #0
 8014154:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8014158:	f001 fdb4 	bl	8015cc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 801415c:	697b      	ldr	r3, [r7, #20]
 801415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8014160:	2b00      	cmp	r3, #0
 8014162:	d106      	bne.n	8014172 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	3324      	adds	r3, #36	; 0x24
 8014168:	687a      	ldr	r2, [r7, #4]
 801416a:	68b9      	ldr	r1, [r7, #8]
 801416c:	4618      	mov	r0, r3
 801416e:	f000 fd99 	bl	8014ca4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8014172:	6978      	ldr	r0, [r7, #20]
 8014174:	f7ff ff26 	bl	8013fc4 <prvUnlockQueue>
	}
 8014178:	bf00      	nop
 801417a:	3718      	adds	r7, #24
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}

08014180 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8014180:	b580      	push	{r7, lr}
 8014182:	b08e      	sub	sp, #56	; 0x38
 8014184:	af04      	add	r7, sp, #16
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	607a      	str	r2, [r7, #4]
 801418c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 801418e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014190:	2b00      	cmp	r3, #0
 8014192:	d10a      	bne.n	80141aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8014194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014198:	f383 8811 	msr	BASEPRI, r3
 801419c:	f3bf 8f6f 	isb	sy
 80141a0:	f3bf 8f4f 	dsb	sy
 80141a4:	623b      	str	r3, [r7, #32]
}
 80141a6:	bf00      	nop
 80141a8:	e7fe      	b.n	80141a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80141aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d10a      	bne.n	80141c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80141b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141b4:	f383 8811 	msr	BASEPRI, r3
 80141b8:	f3bf 8f6f 	isb	sy
 80141bc:	f3bf 8f4f 	dsb	sy
 80141c0:	61fb      	str	r3, [r7, #28]
}
 80141c2:	bf00      	nop
 80141c4:	e7fe      	b.n	80141c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80141c6:	235c      	movs	r3, #92	; 0x5c
 80141c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80141ca:	693b      	ldr	r3, [r7, #16]
 80141cc:	2b5c      	cmp	r3, #92	; 0x5c
 80141ce:	d00a      	beq.n	80141e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80141d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80141d4:	f383 8811 	msr	BASEPRI, r3
 80141d8:	f3bf 8f6f 	isb	sy
 80141dc:	f3bf 8f4f 	dsb	sy
 80141e0:	61bb      	str	r3, [r7, #24]
}
 80141e2:	bf00      	nop
 80141e4:	e7fe      	b.n	80141e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80141e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80141e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d01e      	beq.n	801422c <xTaskCreateStatic+0xac>
 80141ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d01b      	beq.n	801422c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80141f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80141f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80141fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80141fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80141fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014200:	2202      	movs	r2, #2
 8014202:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014206:	2300      	movs	r3, #0
 8014208:	9303      	str	r3, [sp, #12]
 801420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801420c:	9302      	str	r3, [sp, #8]
 801420e:	f107 0314 	add.w	r3, r7, #20
 8014212:	9301      	str	r3, [sp, #4]
 8014214:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014216:	9300      	str	r3, [sp, #0]
 8014218:	683b      	ldr	r3, [r7, #0]
 801421a:	687a      	ldr	r2, [r7, #4]
 801421c:	68b9      	ldr	r1, [r7, #8]
 801421e:	68f8      	ldr	r0, [r7, #12]
 8014220:	f000 f850 	bl	80142c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014224:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014226:	f000 f8dd 	bl	80143e4 <prvAddNewTaskToReadyList>
 801422a:	e001      	b.n	8014230 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801422c:	2300      	movs	r3, #0
 801422e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014230:	697b      	ldr	r3, [r7, #20]
	}
 8014232:	4618      	mov	r0, r3
 8014234:	3728      	adds	r7, #40	; 0x28
 8014236:	46bd      	mov	sp, r7
 8014238:	bd80      	pop	{r7, pc}

0801423a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801423a:	b580      	push	{r7, lr}
 801423c:	b08c      	sub	sp, #48	; 0x30
 801423e:	af04      	add	r7, sp, #16
 8014240:	60f8      	str	r0, [r7, #12]
 8014242:	60b9      	str	r1, [r7, #8]
 8014244:	603b      	str	r3, [r7, #0]
 8014246:	4613      	mov	r3, r2
 8014248:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801424a:	88fb      	ldrh	r3, [r7, #6]
 801424c:	009b      	lsls	r3, r3, #2
 801424e:	4618      	mov	r0, r3
 8014250:	f001 fe2a 	bl	8015ea8 <pvPortMalloc>
 8014254:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	2b00      	cmp	r3, #0
 801425a:	d00e      	beq.n	801427a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801425c:	205c      	movs	r0, #92	; 0x5c
 801425e:	f001 fe23 	bl	8015ea8 <pvPortMalloc>
 8014262:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	2b00      	cmp	r3, #0
 8014268:	d003      	beq.n	8014272 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801426a:	69fb      	ldr	r3, [r7, #28]
 801426c:	697a      	ldr	r2, [r7, #20]
 801426e:	631a      	str	r2, [r3, #48]	; 0x30
 8014270:	e005      	b.n	801427e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014272:	6978      	ldr	r0, [r7, #20]
 8014274:	f001 fee4 	bl	8016040 <vPortFree>
 8014278:	e001      	b.n	801427e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801427a:	2300      	movs	r3, #0
 801427c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801427e:	69fb      	ldr	r3, [r7, #28]
 8014280:	2b00      	cmp	r3, #0
 8014282:	d017      	beq.n	80142b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014284:	69fb      	ldr	r3, [r7, #28]
 8014286:	2200      	movs	r2, #0
 8014288:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801428c:	88fa      	ldrh	r2, [r7, #6]
 801428e:	2300      	movs	r3, #0
 8014290:	9303      	str	r3, [sp, #12]
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	9302      	str	r3, [sp, #8]
 8014296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014298:	9301      	str	r3, [sp, #4]
 801429a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801429c:	9300      	str	r3, [sp, #0]
 801429e:	683b      	ldr	r3, [r7, #0]
 80142a0:	68b9      	ldr	r1, [r7, #8]
 80142a2:	68f8      	ldr	r0, [r7, #12]
 80142a4:	f000 f80e 	bl	80142c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80142a8:	69f8      	ldr	r0, [r7, #28]
 80142aa:	f000 f89b 	bl	80143e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80142ae:	2301      	movs	r3, #1
 80142b0:	61bb      	str	r3, [r7, #24]
 80142b2:	e002      	b.n	80142ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80142b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80142b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80142ba:	69bb      	ldr	r3, [r7, #24]
	}
 80142bc:	4618      	mov	r0, r3
 80142be:	3720      	adds	r7, #32
 80142c0:	46bd      	mov	sp, r7
 80142c2:	bd80      	pop	{r7, pc}

080142c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80142c4:	b580      	push	{r7, lr}
 80142c6:	b088      	sub	sp, #32
 80142c8:	af00      	add	r7, sp, #0
 80142ca:	60f8      	str	r0, [r7, #12]
 80142cc:	60b9      	str	r1, [r7, #8]
 80142ce:	607a      	str	r2, [r7, #4]
 80142d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80142d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80142d6:	687b      	ldr	r3, [r7, #4]
 80142d8:	009b      	lsls	r3, r3, #2
 80142da:	461a      	mov	r2, r3
 80142dc:	21a5      	movs	r1, #165	; 0xa5
 80142de:	f002 f815 	bl	801630c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80142e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80142e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80142e6:	6879      	ldr	r1, [r7, #4]
 80142e8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80142ec:	440b      	add	r3, r1
 80142ee:	009b      	lsls	r3, r3, #2
 80142f0:	4413      	add	r3, r2
 80142f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80142f4:	69bb      	ldr	r3, [r7, #24]
 80142f6:	f023 0307 	bic.w	r3, r3, #7
 80142fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80142fc:	69bb      	ldr	r3, [r7, #24]
 80142fe:	f003 0307 	and.w	r3, r3, #7
 8014302:	2b00      	cmp	r3, #0
 8014304:	d00a      	beq.n	801431c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014306:	f04f 0350 	mov.w	r3, #80	; 0x50
 801430a:	f383 8811 	msr	BASEPRI, r3
 801430e:	f3bf 8f6f 	isb	sy
 8014312:	f3bf 8f4f 	dsb	sy
 8014316:	617b      	str	r3, [r7, #20]
}
 8014318:	bf00      	nop
 801431a:	e7fe      	b.n	801431a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801431c:	68bb      	ldr	r3, [r7, #8]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d01f      	beq.n	8014362 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014322:	2300      	movs	r3, #0
 8014324:	61fb      	str	r3, [r7, #28]
 8014326:	e012      	b.n	801434e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014328:	68ba      	ldr	r2, [r7, #8]
 801432a:	69fb      	ldr	r3, [r7, #28]
 801432c:	4413      	add	r3, r2
 801432e:	7819      	ldrb	r1, [r3, #0]
 8014330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014332:	69fb      	ldr	r3, [r7, #28]
 8014334:	4413      	add	r3, r2
 8014336:	3334      	adds	r3, #52	; 0x34
 8014338:	460a      	mov	r2, r1
 801433a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801433c:	68ba      	ldr	r2, [r7, #8]
 801433e:	69fb      	ldr	r3, [r7, #28]
 8014340:	4413      	add	r3, r2
 8014342:	781b      	ldrb	r3, [r3, #0]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d006      	beq.n	8014356 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014348:	69fb      	ldr	r3, [r7, #28]
 801434a:	3301      	adds	r3, #1
 801434c:	61fb      	str	r3, [r7, #28]
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	2b0f      	cmp	r3, #15
 8014352:	d9e9      	bls.n	8014328 <prvInitialiseNewTask+0x64>
 8014354:	e000      	b.n	8014358 <prvInitialiseNewTask+0x94>
			{
				break;
 8014356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801435a:	2200      	movs	r2, #0
 801435c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014360:	e003      	b.n	801436a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014364:	2200      	movs	r2, #0
 8014366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801436c:	2b37      	cmp	r3, #55	; 0x37
 801436e:	d901      	bls.n	8014374 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014370:	2337      	movs	r3, #55	; 0x37
 8014372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801437c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801437e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014382:	2200      	movs	r2, #0
 8014384:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014388:	3304      	adds	r3, #4
 801438a:	4618      	mov	r0, r3
 801438c:	f7ff f8be 	bl	801350c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014392:	3318      	adds	r3, #24
 8014394:	4618      	mov	r0, r3
 8014396:	f7ff f8b9 	bl	801350c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801439a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801439c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801439e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80143a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80143a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80143aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80143b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b2:	2200      	movs	r2, #0
 80143b4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80143b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143b8:	2200      	movs	r2, #0
 80143ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80143be:	683a      	ldr	r2, [r7, #0]
 80143c0:	68f9      	ldr	r1, [r7, #12]
 80143c2:	69b8      	ldr	r0, [r7, #24]
 80143c4:	f001 fb20 	bl	8015a08 <pxPortInitialiseStack>
 80143c8:	4602      	mov	r2, r0
 80143ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80143cc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80143ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d0:	2b00      	cmp	r3, #0
 80143d2:	d002      	beq.n	80143da <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80143d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80143d8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80143da:	bf00      	nop
 80143dc:	3720      	adds	r7, #32
 80143de:	46bd      	mov	sp, r7
 80143e0:	bd80      	pop	{r7, pc}
	...

080143e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80143e4:	b580      	push	{r7, lr}
 80143e6:	b082      	sub	sp, #8
 80143e8:	af00      	add	r7, sp, #0
 80143ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80143ec:	f001 fc3a 	bl	8015c64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80143f0:	4b2d      	ldr	r3, [pc, #180]	; (80144a8 <prvAddNewTaskToReadyList+0xc4>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	3301      	adds	r3, #1
 80143f6:	4a2c      	ldr	r2, [pc, #176]	; (80144a8 <prvAddNewTaskToReadyList+0xc4>)
 80143f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80143fa:	4b2c      	ldr	r3, [pc, #176]	; (80144ac <prvAddNewTaskToReadyList+0xc8>)
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	2b00      	cmp	r3, #0
 8014400:	d109      	bne.n	8014416 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014402:	4a2a      	ldr	r2, [pc, #168]	; (80144ac <prvAddNewTaskToReadyList+0xc8>)
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014408:	4b27      	ldr	r3, [pc, #156]	; (80144a8 <prvAddNewTaskToReadyList+0xc4>)
 801440a:	681b      	ldr	r3, [r3, #0]
 801440c:	2b01      	cmp	r3, #1
 801440e:	d110      	bne.n	8014432 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014410:	f000 fdd6 	bl	8014fc0 <prvInitialiseTaskLists>
 8014414:	e00d      	b.n	8014432 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014416:	4b26      	ldr	r3, [pc, #152]	; (80144b0 <prvAddNewTaskToReadyList+0xcc>)
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	2b00      	cmp	r3, #0
 801441c:	d109      	bne.n	8014432 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801441e:	4b23      	ldr	r3, [pc, #140]	; (80144ac <prvAddNewTaskToReadyList+0xc8>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014428:	429a      	cmp	r2, r3
 801442a:	d802      	bhi.n	8014432 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801442c:	4a1f      	ldr	r2, [pc, #124]	; (80144ac <prvAddNewTaskToReadyList+0xc8>)
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014432:	4b20      	ldr	r3, [pc, #128]	; (80144b4 <prvAddNewTaskToReadyList+0xd0>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	3301      	adds	r3, #1
 8014438:	4a1e      	ldr	r2, [pc, #120]	; (80144b4 <prvAddNewTaskToReadyList+0xd0>)
 801443a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801443c:	4b1d      	ldr	r3, [pc, #116]	; (80144b4 <prvAddNewTaskToReadyList+0xd0>)
 801443e:	681a      	ldr	r2, [r3, #0]
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014448:	4b1b      	ldr	r3, [pc, #108]	; (80144b8 <prvAddNewTaskToReadyList+0xd4>)
 801444a:	681b      	ldr	r3, [r3, #0]
 801444c:	429a      	cmp	r2, r3
 801444e:	d903      	bls.n	8014458 <prvAddNewTaskToReadyList+0x74>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014454:	4a18      	ldr	r2, [pc, #96]	; (80144b8 <prvAddNewTaskToReadyList+0xd4>)
 8014456:	6013      	str	r3, [r2, #0]
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801445c:	4613      	mov	r3, r2
 801445e:	009b      	lsls	r3, r3, #2
 8014460:	4413      	add	r3, r2
 8014462:	009b      	lsls	r3, r3, #2
 8014464:	4a15      	ldr	r2, [pc, #84]	; (80144bc <prvAddNewTaskToReadyList+0xd8>)
 8014466:	441a      	add	r2, r3
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	3304      	adds	r3, #4
 801446c:	4619      	mov	r1, r3
 801446e:	4610      	mov	r0, r2
 8014470:	f7ff f859 	bl	8013526 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014474:	f001 fc26 	bl	8015cc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014478:	4b0d      	ldr	r3, [pc, #52]	; (80144b0 <prvAddNewTaskToReadyList+0xcc>)
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	2b00      	cmp	r3, #0
 801447e:	d00e      	beq.n	801449e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014480:	4b0a      	ldr	r3, [pc, #40]	; (80144ac <prvAddNewTaskToReadyList+0xc8>)
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801448a:	429a      	cmp	r2, r3
 801448c:	d207      	bcs.n	801449e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801448e:	4b0c      	ldr	r3, [pc, #48]	; (80144c0 <prvAddNewTaskToReadyList+0xdc>)
 8014490:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014494:	601a      	str	r2, [r3, #0]
 8014496:	f3bf 8f4f 	dsb	sy
 801449a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801449e:	bf00      	nop
 80144a0:	3708      	adds	r7, #8
 80144a2:	46bd      	mov	sp, r7
 80144a4:	bd80      	pop	{r7, pc}
 80144a6:	bf00      	nop
 80144a8:	24001cdc 	.word	0x24001cdc
 80144ac:	24001808 	.word	0x24001808
 80144b0:	24001ce8 	.word	0x24001ce8
 80144b4:	24001cf8 	.word	0x24001cf8
 80144b8:	24001ce4 	.word	0x24001ce4
 80144bc:	2400180c 	.word	0x2400180c
 80144c0:	e000ed04 	.word	0xe000ed04

080144c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b084      	sub	sp, #16
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80144cc:	2300      	movs	r3, #0
 80144ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80144d0:	687b      	ldr	r3, [r7, #4]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d017      	beq.n	8014506 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80144d6:	4b13      	ldr	r3, [pc, #76]	; (8014524 <vTaskDelay+0x60>)
 80144d8:	681b      	ldr	r3, [r3, #0]
 80144da:	2b00      	cmp	r3, #0
 80144dc:	d00a      	beq.n	80144f4 <vTaskDelay+0x30>
	__asm volatile
 80144de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144e2:	f383 8811 	msr	BASEPRI, r3
 80144e6:	f3bf 8f6f 	isb	sy
 80144ea:	f3bf 8f4f 	dsb	sy
 80144ee:	60bb      	str	r3, [r7, #8]
}
 80144f0:	bf00      	nop
 80144f2:	e7fe      	b.n	80144f2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80144f4:	f000 f99a 	bl	801482c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80144f8:	2100      	movs	r1, #0
 80144fa:	6878      	ldr	r0, [r7, #4]
 80144fc:	f000 fec2 	bl	8015284 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014500:	f000 f9a2 	bl	8014848 <xTaskResumeAll>
 8014504:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	2b00      	cmp	r3, #0
 801450a:	d107      	bne.n	801451c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 801450c:	4b06      	ldr	r3, [pc, #24]	; (8014528 <vTaskDelay+0x64>)
 801450e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014512:	601a      	str	r2, [r3, #0]
 8014514:	f3bf 8f4f 	dsb	sy
 8014518:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801451c:	bf00      	nop
 801451e:	3710      	adds	r7, #16
 8014520:	46bd      	mov	sp, r7
 8014522:	bd80      	pop	{r7, pc}
 8014524:	24001d04 	.word	0x24001d04
 8014528:	e000ed04 	.word	0xe000ed04

0801452c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 801452c:	b580      	push	{r7, lr}
 801452e:	b084      	sub	sp, #16
 8014530:	af00      	add	r7, sp, #0
 8014532:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014534:	f001 fb96 	bl	8015c64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	2b00      	cmp	r3, #0
 801453c:	d102      	bne.n	8014544 <vTaskSuspend+0x18>
 801453e:	4b30      	ldr	r3, [pc, #192]	; (8014600 <vTaskSuspend+0xd4>)
 8014540:	681b      	ldr	r3, [r3, #0]
 8014542:	e000      	b.n	8014546 <vTaskSuspend+0x1a>
 8014544:	687b      	ldr	r3, [r7, #4]
 8014546:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014548:	68fb      	ldr	r3, [r7, #12]
 801454a:	3304      	adds	r3, #4
 801454c:	4618      	mov	r0, r3
 801454e:	f7ff f847 	bl	80135e0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014552:	68fb      	ldr	r3, [r7, #12]
 8014554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014556:	2b00      	cmp	r3, #0
 8014558:	d004      	beq.n	8014564 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	3318      	adds	r3, #24
 801455e:	4618      	mov	r0, r3
 8014560:	f7ff f83e 	bl	80135e0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014564:	68fb      	ldr	r3, [r7, #12]
 8014566:	3304      	adds	r3, #4
 8014568:	4619      	mov	r1, r3
 801456a:	4826      	ldr	r0, [pc, #152]	; (8014604 <vTaskSuspend+0xd8>)
 801456c:	f7fe ffdb 	bl	8013526 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014570:	68fb      	ldr	r3, [r7, #12]
 8014572:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014576:	b2db      	uxtb	r3, r3
 8014578:	2b01      	cmp	r3, #1
 801457a:	d103      	bne.n	8014584 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801457c:	68fb      	ldr	r3, [r7, #12]
 801457e:	2200      	movs	r2, #0
 8014580:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014584:	f001 fb9e 	bl	8015cc4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014588:	4b1f      	ldr	r3, [pc, #124]	; (8014608 <vTaskSuspend+0xdc>)
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	2b00      	cmp	r3, #0
 801458e:	d005      	beq.n	801459c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014590:	f001 fb68 	bl	8015c64 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014594:	f000 fdb2 	bl	80150fc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014598:	f001 fb94 	bl	8015cc4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801459c:	4b18      	ldr	r3, [pc, #96]	; (8014600 <vTaskSuspend+0xd4>)
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	68fa      	ldr	r2, [r7, #12]
 80145a2:	429a      	cmp	r2, r3
 80145a4:	d127      	bne.n	80145f6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80145a6:	4b18      	ldr	r3, [pc, #96]	; (8014608 <vTaskSuspend+0xdc>)
 80145a8:	681b      	ldr	r3, [r3, #0]
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d017      	beq.n	80145de <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80145ae:	4b17      	ldr	r3, [pc, #92]	; (801460c <vTaskSuspend+0xe0>)
 80145b0:	681b      	ldr	r3, [r3, #0]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d00a      	beq.n	80145cc <vTaskSuspend+0xa0>
	__asm volatile
 80145b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ba:	f383 8811 	msr	BASEPRI, r3
 80145be:	f3bf 8f6f 	isb	sy
 80145c2:	f3bf 8f4f 	dsb	sy
 80145c6:	60bb      	str	r3, [r7, #8]
}
 80145c8:	bf00      	nop
 80145ca:	e7fe      	b.n	80145ca <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80145cc:	4b10      	ldr	r3, [pc, #64]	; (8014610 <vTaskSuspend+0xe4>)
 80145ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80145d2:	601a      	str	r2, [r3, #0]
 80145d4:	f3bf 8f4f 	dsb	sy
 80145d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80145dc:	e00b      	b.n	80145f6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80145de:	4b09      	ldr	r3, [pc, #36]	; (8014604 <vTaskSuspend+0xd8>)
 80145e0:	681a      	ldr	r2, [r3, #0]
 80145e2:	4b0c      	ldr	r3, [pc, #48]	; (8014614 <vTaskSuspend+0xe8>)
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d103      	bne.n	80145f2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80145ea:	4b05      	ldr	r3, [pc, #20]	; (8014600 <vTaskSuspend+0xd4>)
 80145ec:	2200      	movs	r2, #0
 80145ee:	601a      	str	r2, [r3, #0]
	}
 80145f0:	e001      	b.n	80145f6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80145f2:	f000 fa99 	bl	8014b28 <vTaskSwitchContext>
	}
 80145f6:	bf00      	nop
 80145f8:	3710      	adds	r7, #16
 80145fa:	46bd      	mov	sp, r7
 80145fc:	bd80      	pop	{r7, pc}
 80145fe:	bf00      	nop
 8014600:	24001808 	.word	0x24001808
 8014604:	24001cc8 	.word	0x24001cc8
 8014608:	24001ce8 	.word	0x24001ce8
 801460c:	24001d04 	.word	0x24001d04
 8014610:	e000ed04 	.word	0xe000ed04
 8014614:	24001cdc 	.word	0x24001cdc

08014618 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8014618:	b480      	push	{r7}
 801461a:	b087      	sub	sp, #28
 801461c:	af00      	add	r7, sp, #0
 801461e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014620:	2300      	movs	r3, #0
 8014622:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014624:	687b      	ldr	r3, [r7, #4]
 8014626:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d10a      	bne.n	8014644 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 801462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014632:	f383 8811 	msr	BASEPRI, r3
 8014636:	f3bf 8f6f 	isb	sy
 801463a:	f3bf 8f4f 	dsb	sy
 801463e:	60fb      	str	r3, [r7, #12]
}
 8014640:	bf00      	nop
 8014642:	e7fe      	b.n	8014642 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014644:	693b      	ldr	r3, [r7, #16]
 8014646:	695b      	ldr	r3, [r3, #20]
 8014648:	4a0a      	ldr	r2, [pc, #40]	; (8014674 <prvTaskIsTaskSuspended+0x5c>)
 801464a:	4293      	cmp	r3, r2
 801464c:	d10a      	bne.n	8014664 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801464e:	693b      	ldr	r3, [r7, #16]
 8014650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014652:	4a09      	ldr	r2, [pc, #36]	; (8014678 <prvTaskIsTaskSuspended+0x60>)
 8014654:	4293      	cmp	r3, r2
 8014656:	d005      	beq.n	8014664 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014658:	693b      	ldr	r3, [r7, #16]
 801465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801465c:	2b00      	cmp	r3, #0
 801465e:	d101      	bne.n	8014664 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014660:	2301      	movs	r3, #1
 8014662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014664:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014666:	4618      	mov	r0, r3
 8014668:	371c      	adds	r7, #28
 801466a:	46bd      	mov	sp, r7
 801466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014670:	4770      	bx	lr
 8014672:	bf00      	nop
 8014674:	24001cc8 	.word	0x24001cc8
 8014678:	24001c9c 	.word	0x24001c9c

0801467c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 801467c:	b580      	push	{r7, lr}
 801467e:	b08a      	sub	sp, #40	; 0x28
 8014680:	af00      	add	r7, sp, #0
 8014682:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014684:	2300      	movs	r3, #0
 8014686:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	2b00      	cmp	r3, #0
 8014690:	d10a      	bne.n	80146a8 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014696:	f383 8811 	msr	BASEPRI, r3
 801469a:	f3bf 8f6f 	isb	sy
 801469e:	f3bf 8f4f 	dsb	sy
 80146a2:	61bb      	str	r3, [r7, #24]
}
 80146a4:	bf00      	nop
 80146a6:	e7fe      	b.n	80146a6 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80146a8:	f001 fbbe 	bl	8015e28 <vPortValidateInterruptPriority>
	__asm volatile
 80146ac:	f3ef 8211 	mrs	r2, BASEPRI
 80146b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146b4:	f383 8811 	msr	BASEPRI, r3
 80146b8:	f3bf 8f6f 	isb	sy
 80146bc:	f3bf 8f4f 	dsb	sy
 80146c0:	617a      	str	r2, [r7, #20]
 80146c2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80146c4:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80146c6:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80146c8:	6a38      	ldr	r0, [r7, #32]
 80146ca:	f7ff ffa5 	bl	8014618 <prvTaskIsTaskSuspended>
 80146ce:	4603      	mov	r3, r0
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d030      	beq.n	8014736 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80146d4:	4b1d      	ldr	r3, [pc, #116]	; (801474c <xTaskResumeFromISR+0xd0>)
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	2b00      	cmp	r3, #0
 80146da:	d126      	bne.n	801472a <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80146dc:	6a3b      	ldr	r3, [r7, #32]
 80146de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146e0:	4b1b      	ldr	r3, [pc, #108]	; (8014750 <xTaskResumeFromISR+0xd4>)
 80146e2:	681b      	ldr	r3, [r3, #0]
 80146e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d301      	bcc.n	80146ee <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80146ea:	2301      	movs	r3, #1
 80146ec:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80146ee:	6a3b      	ldr	r3, [r7, #32]
 80146f0:	3304      	adds	r3, #4
 80146f2:	4618      	mov	r0, r3
 80146f4:	f7fe ff74 	bl	80135e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80146f8:	6a3b      	ldr	r3, [r7, #32]
 80146fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146fc:	4b15      	ldr	r3, [pc, #84]	; (8014754 <xTaskResumeFromISR+0xd8>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	429a      	cmp	r2, r3
 8014702:	d903      	bls.n	801470c <xTaskResumeFromISR+0x90>
 8014704:	6a3b      	ldr	r3, [r7, #32]
 8014706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014708:	4a12      	ldr	r2, [pc, #72]	; (8014754 <xTaskResumeFromISR+0xd8>)
 801470a:	6013      	str	r3, [r2, #0]
 801470c:	6a3b      	ldr	r3, [r7, #32]
 801470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014710:	4613      	mov	r3, r2
 8014712:	009b      	lsls	r3, r3, #2
 8014714:	4413      	add	r3, r2
 8014716:	009b      	lsls	r3, r3, #2
 8014718:	4a0f      	ldr	r2, [pc, #60]	; (8014758 <xTaskResumeFromISR+0xdc>)
 801471a:	441a      	add	r2, r3
 801471c:	6a3b      	ldr	r3, [r7, #32]
 801471e:	3304      	adds	r3, #4
 8014720:	4619      	mov	r1, r3
 8014722:	4610      	mov	r0, r2
 8014724:	f7fe feff 	bl	8013526 <vListInsertEnd>
 8014728:	e005      	b.n	8014736 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801472a:	6a3b      	ldr	r3, [r7, #32]
 801472c:	3318      	adds	r3, #24
 801472e:	4619      	mov	r1, r3
 8014730:	480a      	ldr	r0, [pc, #40]	; (801475c <xTaskResumeFromISR+0xe0>)
 8014732:	f7fe fef8 	bl	8013526 <vListInsertEnd>
 8014736:	69fb      	ldr	r3, [r7, #28]
 8014738:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	f383 8811 	msr	BASEPRI, r3
}
 8014740:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014744:	4618      	mov	r0, r3
 8014746:	3728      	adds	r7, #40	; 0x28
 8014748:	46bd      	mov	sp, r7
 801474a:	bd80      	pop	{r7, pc}
 801474c:	24001d04 	.word	0x24001d04
 8014750:	24001808 	.word	0x24001808
 8014754:	24001ce4 	.word	0x24001ce4
 8014758:	2400180c 	.word	0x2400180c
 801475c:	24001c9c 	.word	0x24001c9c

08014760 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014760:	b580      	push	{r7, lr}
 8014762:	b08a      	sub	sp, #40	; 0x28
 8014764:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014766:	2300      	movs	r3, #0
 8014768:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801476a:	2300      	movs	r3, #0
 801476c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801476e:	463a      	mov	r2, r7
 8014770:	1d39      	adds	r1, r7, #4
 8014772:	f107 0308 	add.w	r3, r7, #8
 8014776:	4618      	mov	r0, r3
 8014778:	f7fe fc86 	bl	8013088 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801477c:	6839      	ldr	r1, [r7, #0]
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	68ba      	ldr	r2, [r7, #8]
 8014782:	9202      	str	r2, [sp, #8]
 8014784:	9301      	str	r3, [sp, #4]
 8014786:	2300      	movs	r3, #0
 8014788:	9300      	str	r3, [sp, #0]
 801478a:	2300      	movs	r3, #0
 801478c:	460a      	mov	r2, r1
 801478e:	4921      	ldr	r1, [pc, #132]	; (8014814 <vTaskStartScheduler+0xb4>)
 8014790:	4821      	ldr	r0, [pc, #132]	; (8014818 <vTaskStartScheduler+0xb8>)
 8014792:	f7ff fcf5 	bl	8014180 <xTaskCreateStatic>
 8014796:	4603      	mov	r3, r0
 8014798:	4a20      	ldr	r2, [pc, #128]	; (801481c <vTaskStartScheduler+0xbc>)
 801479a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801479c:	4b1f      	ldr	r3, [pc, #124]	; (801481c <vTaskStartScheduler+0xbc>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	2b00      	cmp	r3, #0
 80147a2:	d002      	beq.n	80147aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80147a4:	2301      	movs	r3, #1
 80147a6:	617b      	str	r3, [r7, #20]
 80147a8:	e001      	b.n	80147ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80147aa:	2300      	movs	r3, #0
 80147ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80147ae:	697b      	ldr	r3, [r7, #20]
 80147b0:	2b01      	cmp	r3, #1
 80147b2:	d102      	bne.n	80147ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80147b4:	f000 fdba 	bl	801532c <xTimerCreateTimerTask>
 80147b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80147ba:	697b      	ldr	r3, [r7, #20]
 80147bc:	2b01      	cmp	r3, #1
 80147be:	d116      	bne.n	80147ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80147c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147c4:	f383 8811 	msr	BASEPRI, r3
 80147c8:	f3bf 8f6f 	isb	sy
 80147cc:	f3bf 8f4f 	dsb	sy
 80147d0:	613b      	str	r3, [r7, #16]
}
 80147d2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80147d4:	4b12      	ldr	r3, [pc, #72]	; (8014820 <vTaskStartScheduler+0xc0>)
 80147d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80147dc:	4b11      	ldr	r3, [pc, #68]	; (8014824 <vTaskStartScheduler+0xc4>)
 80147de:	2201      	movs	r2, #1
 80147e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80147e2:	4b11      	ldr	r3, [pc, #68]	; (8014828 <vTaskStartScheduler+0xc8>)
 80147e4:	2200      	movs	r2, #0
 80147e6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80147e8:	f001 f99a 	bl	8015b20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80147ec:	e00e      	b.n	801480c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80147ee:	697b      	ldr	r3, [r7, #20]
 80147f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147f4:	d10a      	bne.n	801480c <vTaskStartScheduler+0xac>
	__asm volatile
 80147f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147fa:	f383 8811 	msr	BASEPRI, r3
 80147fe:	f3bf 8f6f 	isb	sy
 8014802:	f3bf 8f4f 	dsb	sy
 8014806:	60fb      	str	r3, [r7, #12]
}
 8014808:	bf00      	nop
 801480a:	e7fe      	b.n	801480a <vTaskStartScheduler+0xaa>
}
 801480c:	bf00      	nop
 801480e:	3718      	adds	r7, #24
 8014810:	46bd      	mov	sp, r7
 8014812:	bd80      	pop	{r7, pc}
 8014814:	08016f8c 	.word	0x08016f8c
 8014818:	08014f91 	.word	0x08014f91
 801481c:	24001d00 	.word	0x24001d00
 8014820:	24001cfc 	.word	0x24001cfc
 8014824:	24001ce8 	.word	0x24001ce8
 8014828:	24001ce0 	.word	0x24001ce0

0801482c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801482c:	b480      	push	{r7}
 801482e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014830:	4b04      	ldr	r3, [pc, #16]	; (8014844 <vTaskSuspendAll+0x18>)
 8014832:	681b      	ldr	r3, [r3, #0]
 8014834:	3301      	adds	r3, #1
 8014836:	4a03      	ldr	r2, [pc, #12]	; (8014844 <vTaskSuspendAll+0x18>)
 8014838:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801483a:	bf00      	nop
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr
 8014844:	24001d04 	.word	0x24001d04

08014848 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014848:	b580      	push	{r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801484e:	2300      	movs	r3, #0
 8014850:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014852:	2300      	movs	r3, #0
 8014854:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014856:	4b42      	ldr	r3, [pc, #264]	; (8014960 <xTaskResumeAll+0x118>)
 8014858:	681b      	ldr	r3, [r3, #0]
 801485a:	2b00      	cmp	r3, #0
 801485c:	d10a      	bne.n	8014874 <xTaskResumeAll+0x2c>
	__asm volatile
 801485e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014862:	f383 8811 	msr	BASEPRI, r3
 8014866:	f3bf 8f6f 	isb	sy
 801486a:	f3bf 8f4f 	dsb	sy
 801486e:	603b      	str	r3, [r7, #0]
}
 8014870:	bf00      	nop
 8014872:	e7fe      	b.n	8014872 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014874:	f001 f9f6 	bl	8015c64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014878:	4b39      	ldr	r3, [pc, #228]	; (8014960 <xTaskResumeAll+0x118>)
 801487a:	681b      	ldr	r3, [r3, #0]
 801487c:	3b01      	subs	r3, #1
 801487e:	4a38      	ldr	r2, [pc, #224]	; (8014960 <xTaskResumeAll+0x118>)
 8014880:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014882:	4b37      	ldr	r3, [pc, #220]	; (8014960 <xTaskResumeAll+0x118>)
 8014884:	681b      	ldr	r3, [r3, #0]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d162      	bne.n	8014950 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801488a:	4b36      	ldr	r3, [pc, #216]	; (8014964 <xTaskResumeAll+0x11c>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d05e      	beq.n	8014950 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014892:	e02f      	b.n	80148f4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014894:	4b34      	ldr	r3, [pc, #208]	; (8014968 <xTaskResumeAll+0x120>)
 8014896:	68db      	ldr	r3, [r3, #12]
 8014898:	68db      	ldr	r3, [r3, #12]
 801489a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	3318      	adds	r3, #24
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7fe fe9d 	bl	80135e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	3304      	adds	r3, #4
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7fe fe98 	bl	80135e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80148b0:	68fb      	ldr	r3, [r7, #12]
 80148b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148b4:	4b2d      	ldr	r3, [pc, #180]	; (801496c <xTaskResumeAll+0x124>)
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d903      	bls.n	80148c4 <xTaskResumeAll+0x7c>
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148c0:	4a2a      	ldr	r2, [pc, #168]	; (801496c <xTaskResumeAll+0x124>)
 80148c2:	6013      	str	r3, [r2, #0]
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148c8:	4613      	mov	r3, r2
 80148ca:	009b      	lsls	r3, r3, #2
 80148cc:	4413      	add	r3, r2
 80148ce:	009b      	lsls	r3, r3, #2
 80148d0:	4a27      	ldr	r2, [pc, #156]	; (8014970 <xTaskResumeAll+0x128>)
 80148d2:	441a      	add	r2, r3
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	3304      	adds	r3, #4
 80148d8:	4619      	mov	r1, r3
 80148da:	4610      	mov	r0, r2
 80148dc:	f7fe fe23 	bl	8013526 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148e4:	4b23      	ldr	r3, [pc, #140]	; (8014974 <xTaskResumeAll+0x12c>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148ea:	429a      	cmp	r2, r3
 80148ec:	d302      	bcc.n	80148f4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80148ee:	4b22      	ldr	r3, [pc, #136]	; (8014978 <xTaskResumeAll+0x130>)
 80148f0:	2201      	movs	r2, #1
 80148f2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80148f4:	4b1c      	ldr	r3, [pc, #112]	; (8014968 <xTaskResumeAll+0x120>)
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	2b00      	cmp	r3, #0
 80148fa:	d1cb      	bne.n	8014894 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d001      	beq.n	8014906 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014902:	f000 fbfb 	bl	80150fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8014906:	4b1d      	ldr	r3, [pc, #116]	; (801497c <xTaskResumeAll+0x134>)
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d010      	beq.n	8014934 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014912:	f000 f847 	bl	80149a4 <xTaskIncrementTick>
 8014916:	4603      	mov	r3, r0
 8014918:	2b00      	cmp	r3, #0
 801491a:	d002      	beq.n	8014922 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801491c:	4b16      	ldr	r3, [pc, #88]	; (8014978 <xTaskResumeAll+0x130>)
 801491e:	2201      	movs	r2, #1
 8014920:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014922:	687b      	ldr	r3, [r7, #4]
 8014924:	3b01      	subs	r3, #1
 8014926:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	2b00      	cmp	r3, #0
 801492c:	d1f1      	bne.n	8014912 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801492e:	4b13      	ldr	r3, [pc, #76]	; (801497c <xTaskResumeAll+0x134>)
 8014930:	2200      	movs	r2, #0
 8014932:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014934:	4b10      	ldr	r3, [pc, #64]	; (8014978 <xTaskResumeAll+0x130>)
 8014936:	681b      	ldr	r3, [r3, #0]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d009      	beq.n	8014950 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801493c:	2301      	movs	r3, #1
 801493e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014940:	4b0f      	ldr	r3, [pc, #60]	; (8014980 <xTaskResumeAll+0x138>)
 8014942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014946:	601a      	str	r2, [r3, #0]
 8014948:	f3bf 8f4f 	dsb	sy
 801494c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014950:	f001 f9b8 	bl	8015cc4 <vPortExitCritical>

	return xAlreadyYielded;
 8014954:	68bb      	ldr	r3, [r7, #8]
}
 8014956:	4618      	mov	r0, r3
 8014958:	3710      	adds	r7, #16
 801495a:	46bd      	mov	sp, r7
 801495c:	bd80      	pop	{r7, pc}
 801495e:	bf00      	nop
 8014960:	24001d04 	.word	0x24001d04
 8014964:	24001cdc 	.word	0x24001cdc
 8014968:	24001c9c 	.word	0x24001c9c
 801496c:	24001ce4 	.word	0x24001ce4
 8014970:	2400180c 	.word	0x2400180c
 8014974:	24001808 	.word	0x24001808
 8014978:	24001cf0 	.word	0x24001cf0
 801497c:	24001cec 	.word	0x24001cec
 8014980:	e000ed04 	.word	0xe000ed04

08014984 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014984:	b480      	push	{r7}
 8014986:	b083      	sub	sp, #12
 8014988:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801498a:	4b05      	ldr	r3, [pc, #20]	; (80149a0 <xTaskGetTickCount+0x1c>)
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014990:	687b      	ldr	r3, [r7, #4]
}
 8014992:	4618      	mov	r0, r3
 8014994:	370c      	adds	r7, #12
 8014996:	46bd      	mov	sp, r7
 8014998:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499c:	4770      	bx	lr
 801499e:	bf00      	nop
 80149a0:	24001ce0 	.word	0x24001ce0

080149a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b086      	sub	sp, #24
 80149a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80149aa:	2300      	movs	r3, #0
 80149ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80149ae:	4b53      	ldr	r3, [pc, #332]	; (8014afc <xTaskIncrementTick+0x158>)
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	f040 8095 	bne.w	8014ae2 <xTaskIncrementTick+0x13e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80149b8:	4b51      	ldr	r3, [pc, #324]	; (8014b00 <xTaskIncrementTick+0x15c>)
 80149ba:	681b      	ldr	r3, [r3, #0]
 80149bc:	3301      	adds	r3, #1
 80149be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80149c0:	4a4f      	ldr	r2, [pc, #316]	; (8014b00 <xTaskIncrementTick+0x15c>)
 80149c2:	693b      	ldr	r3, [r7, #16]
 80149c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80149c6:	693b      	ldr	r3, [r7, #16]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d120      	bne.n	8014a0e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80149cc:	4b4d      	ldr	r3, [pc, #308]	; (8014b04 <xTaskIncrementTick+0x160>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	681b      	ldr	r3, [r3, #0]
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d00a      	beq.n	80149ec <xTaskIncrementTick+0x48>
	__asm volatile
 80149d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149da:	f383 8811 	msr	BASEPRI, r3
 80149de:	f3bf 8f6f 	isb	sy
 80149e2:	f3bf 8f4f 	dsb	sy
 80149e6:	603b      	str	r3, [r7, #0]
}
 80149e8:	bf00      	nop
 80149ea:	e7fe      	b.n	80149ea <xTaskIncrementTick+0x46>
 80149ec:	4b45      	ldr	r3, [pc, #276]	; (8014b04 <xTaskIncrementTick+0x160>)
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	60fb      	str	r3, [r7, #12]
 80149f2:	4b45      	ldr	r3, [pc, #276]	; (8014b08 <xTaskIncrementTick+0x164>)
 80149f4:	681b      	ldr	r3, [r3, #0]
 80149f6:	4a43      	ldr	r2, [pc, #268]	; (8014b04 <xTaskIncrementTick+0x160>)
 80149f8:	6013      	str	r3, [r2, #0]
 80149fa:	4a43      	ldr	r2, [pc, #268]	; (8014b08 <xTaskIncrementTick+0x164>)
 80149fc:	68fb      	ldr	r3, [r7, #12]
 80149fe:	6013      	str	r3, [r2, #0]
 8014a00:	4b42      	ldr	r3, [pc, #264]	; (8014b0c <xTaskIncrementTick+0x168>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	3301      	adds	r3, #1
 8014a06:	4a41      	ldr	r2, [pc, #260]	; (8014b0c <xTaskIncrementTick+0x168>)
 8014a08:	6013      	str	r3, [r2, #0]
 8014a0a:	f000 fb77 	bl	80150fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014a0e:	4b40      	ldr	r3, [pc, #256]	; (8014b10 <xTaskIncrementTick+0x16c>)
 8014a10:	681b      	ldr	r3, [r3, #0]
 8014a12:	693a      	ldr	r2, [r7, #16]
 8014a14:	429a      	cmp	r2, r3
 8014a16:	d349      	bcc.n	8014aac <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014a18:	4b3a      	ldr	r3, [pc, #232]	; (8014b04 <xTaskIncrementTick+0x160>)
 8014a1a:	681b      	ldr	r3, [r3, #0]
 8014a1c:	681b      	ldr	r3, [r3, #0]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d104      	bne.n	8014a2c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014a22:	4b3b      	ldr	r3, [pc, #236]	; (8014b10 <xTaskIncrementTick+0x16c>)
 8014a24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014a28:	601a      	str	r2, [r3, #0]
					break;
 8014a2a:	e03f      	b.n	8014aac <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a2c:	4b35      	ldr	r3, [pc, #212]	; (8014b04 <xTaskIncrementTick+0x160>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	68db      	ldr	r3, [r3, #12]
 8014a34:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014a36:	68bb      	ldr	r3, [r7, #8]
 8014a38:	685b      	ldr	r3, [r3, #4]
 8014a3a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014a3c:	693a      	ldr	r2, [r7, #16]
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	429a      	cmp	r2, r3
 8014a42:	d203      	bcs.n	8014a4c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014a44:	4a32      	ldr	r2, [pc, #200]	; (8014b10 <xTaskIncrementTick+0x16c>)
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8014a4a:	e02f      	b.n	8014aac <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014a4c:	68bb      	ldr	r3, [r7, #8]
 8014a4e:	3304      	adds	r3, #4
 8014a50:	4618      	mov	r0, r3
 8014a52:	f7fe fdc5 	bl	80135e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014a56:	68bb      	ldr	r3, [r7, #8]
 8014a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014a5a:	2b00      	cmp	r3, #0
 8014a5c:	d004      	beq.n	8014a68 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014a5e:	68bb      	ldr	r3, [r7, #8]
 8014a60:	3318      	adds	r3, #24
 8014a62:	4618      	mov	r0, r3
 8014a64:	f7fe fdbc 	bl	80135e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a6c:	4b29      	ldr	r3, [pc, #164]	; (8014b14 <xTaskIncrementTick+0x170>)
 8014a6e:	681b      	ldr	r3, [r3, #0]
 8014a70:	429a      	cmp	r2, r3
 8014a72:	d903      	bls.n	8014a7c <xTaskIncrementTick+0xd8>
 8014a74:	68bb      	ldr	r3, [r7, #8]
 8014a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014a78:	4a26      	ldr	r2, [pc, #152]	; (8014b14 <xTaskIncrementTick+0x170>)
 8014a7a:	6013      	str	r3, [r2, #0]
 8014a7c:	68bb      	ldr	r3, [r7, #8]
 8014a7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a80:	4613      	mov	r3, r2
 8014a82:	009b      	lsls	r3, r3, #2
 8014a84:	4413      	add	r3, r2
 8014a86:	009b      	lsls	r3, r3, #2
 8014a88:	4a23      	ldr	r2, [pc, #140]	; (8014b18 <xTaskIncrementTick+0x174>)
 8014a8a:	441a      	add	r2, r3
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	3304      	adds	r3, #4
 8014a90:	4619      	mov	r1, r3
 8014a92:	4610      	mov	r0, r2
 8014a94:	f7fe fd47 	bl	8013526 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014a98:	68bb      	ldr	r3, [r7, #8]
 8014a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014a9c:	4b1f      	ldr	r3, [pc, #124]	; (8014b1c <xTaskIncrementTick+0x178>)
 8014a9e:	681b      	ldr	r3, [r3, #0]
 8014aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014aa2:	429a      	cmp	r2, r3
 8014aa4:	d3b8      	bcc.n	8014a18 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014aa6:	2301      	movs	r3, #1
 8014aa8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014aaa:	e7b5      	b.n	8014a18 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8014aac:	4b1b      	ldr	r3, [pc, #108]	; (8014b1c <xTaskIncrementTick+0x178>)
 8014aae:	681b      	ldr	r3, [r3, #0]
 8014ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014ab2:	4919      	ldr	r1, [pc, #100]	; (8014b18 <xTaskIncrementTick+0x174>)
 8014ab4:	4613      	mov	r3, r2
 8014ab6:	009b      	lsls	r3, r3, #2
 8014ab8:	4413      	add	r3, r2
 8014aba:	009b      	lsls	r3, r3, #2
 8014abc:	440b      	add	r3, r1
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	2b01      	cmp	r3, #1
 8014ac2:	d901      	bls.n	8014ac8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014ac4:	2301      	movs	r3, #1
 8014ac6:	617b      	str	r3, [r7, #20]

		#if ( configUSE_TICK_HOOK == 1 )
		{
			/* Guard against the tick hook being called when the pended tick
			count is being unwound (when the scheduler is being unlocked). */
			if( xPendedTicks == ( TickType_t ) 0 )
 8014ac8:	4b15      	ldr	r3, [pc, #84]	; (8014b20 <xTaskIncrementTick+0x17c>)
 8014aca:	681b      	ldr	r3, [r3, #0]
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d101      	bne.n	8014ad4 <xTaskIncrementTick+0x130>
			{
				vApplicationTickHook();
 8014ad0:	f7eb fd88 	bl	80005e4 <vApplicationTickHook>
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014ad4:	4b13      	ldr	r3, [pc, #76]	; (8014b24 <xTaskIncrementTick+0x180>)
 8014ad6:	681b      	ldr	r3, [r3, #0]
 8014ad8:	2b00      	cmp	r3, #0
 8014ada:	d009      	beq.n	8014af0 <xTaskIncrementTick+0x14c>
			{
				xSwitchRequired = pdTRUE;
 8014adc:	2301      	movs	r3, #1
 8014ade:	617b      	str	r3, [r7, #20]
 8014ae0:	e006      	b.n	8014af0 <xTaskIncrementTick+0x14c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8014ae2:	4b0f      	ldr	r3, [pc, #60]	; (8014b20 <xTaskIncrementTick+0x17c>)
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	3301      	adds	r3, #1
 8014ae8:	4a0d      	ldr	r2, [pc, #52]	; (8014b20 <xTaskIncrementTick+0x17c>)
 8014aea:	6013      	str	r3, [r2, #0]

		/* The tick hook gets called at regular intervals, even if the
		scheduler is locked. */
		#if ( configUSE_TICK_HOOK == 1 )
		{
			vApplicationTickHook();
 8014aec:	f7eb fd7a 	bl	80005e4 <vApplicationTickHook>
		}
		#endif
	}

	return xSwitchRequired;
 8014af0:	697b      	ldr	r3, [r7, #20]
}
 8014af2:	4618      	mov	r0, r3
 8014af4:	3718      	adds	r7, #24
 8014af6:	46bd      	mov	sp, r7
 8014af8:	bd80      	pop	{r7, pc}
 8014afa:	bf00      	nop
 8014afc:	24001d04 	.word	0x24001d04
 8014b00:	24001ce0 	.word	0x24001ce0
 8014b04:	24001c94 	.word	0x24001c94
 8014b08:	24001c98 	.word	0x24001c98
 8014b0c:	24001cf4 	.word	0x24001cf4
 8014b10:	24001cfc 	.word	0x24001cfc
 8014b14:	24001ce4 	.word	0x24001ce4
 8014b18:	2400180c 	.word	0x2400180c
 8014b1c:	24001808 	.word	0x24001808
 8014b20:	24001cec 	.word	0x24001cec
 8014b24:	24001cf0 	.word	0x24001cf0

08014b28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014b28:	b480      	push	{r7}
 8014b2a:	b085      	sub	sp, #20
 8014b2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014b2e:	4b28      	ldr	r3, [pc, #160]	; (8014bd0 <vTaskSwitchContext+0xa8>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	2b00      	cmp	r3, #0
 8014b34:	d003      	beq.n	8014b3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014b36:	4b27      	ldr	r3, [pc, #156]	; (8014bd4 <vTaskSwitchContext+0xac>)
 8014b38:	2201      	movs	r2, #1
 8014b3a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014b3c:	e041      	b.n	8014bc2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014b3e:	4b25      	ldr	r3, [pc, #148]	; (8014bd4 <vTaskSwitchContext+0xac>)
 8014b40:	2200      	movs	r2, #0
 8014b42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014b44:	4b24      	ldr	r3, [pc, #144]	; (8014bd8 <vTaskSwitchContext+0xb0>)
 8014b46:	681b      	ldr	r3, [r3, #0]
 8014b48:	60fb      	str	r3, [r7, #12]
 8014b4a:	e010      	b.n	8014b6e <vTaskSwitchContext+0x46>
 8014b4c:	68fb      	ldr	r3, [r7, #12]
 8014b4e:	2b00      	cmp	r3, #0
 8014b50:	d10a      	bne.n	8014b68 <vTaskSwitchContext+0x40>
	__asm volatile
 8014b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b56:	f383 8811 	msr	BASEPRI, r3
 8014b5a:	f3bf 8f6f 	isb	sy
 8014b5e:	f3bf 8f4f 	dsb	sy
 8014b62:	607b      	str	r3, [r7, #4]
}
 8014b64:	bf00      	nop
 8014b66:	e7fe      	b.n	8014b66 <vTaskSwitchContext+0x3e>
 8014b68:	68fb      	ldr	r3, [r7, #12]
 8014b6a:	3b01      	subs	r3, #1
 8014b6c:	60fb      	str	r3, [r7, #12]
 8014b6e:	491b      	ldr	r1, [pc, #108]	; (8014bdc <vTaskSwitchContext+0xb4>)
 8014b70:	68fa      	ldr	r2, [r7, #12]
 8014b72:	4613      	mov	r3, r2
 8014b74:	009b      	lsls	r3, r3, #2
 8014b76:	4413      	add	r3, r2
 8014b78:	009b      	lsls	r3, r3, #2
 8014b7a:	440b      	add	r3, r1
 8014b7c:	681b      	ldr	r3, [r3, #0]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d0e4      	beq.n	8014b4c <vTaskSwitchContext+0x24>
 8014b82:	68fa      	ldr	r2, [r7, #12]
 8014b84:	4613      	mov	r3, r2
 8014b86:	009b      	lsls	r3, r3, #2
 8014b88:	4413      	add	r3, r2
 8014b8a:	009b      	lsls	r3, r3, #2
 8014b8c:	4a13      	ldr	r2, [pc, #76]	; (8014bdc <vTaskSwitchContext+0xb4>)
 8014b8e:	4413      	add	r3, r2
 8014b90:	60bb      	str	r3, [r7, #8]
 8014b92:	68bb      	ldr	r3, [r7, #8]
 8014b94:	685b      	ldr	r3, [r3, #4]
 8014b96:	685a      	ldr	r2, [r3, #4]
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	605a      	str	r2, [r3, #4]
 8014b9c:	68bb      	ldr	r3, [r7, #8]
 8014b9e:	685a      	ldr	r2, [r3, #4]
 8014ba0:	68bb      	ldr	r3, [r7, #8]
 8014ba2:	3308      	adds	r3, #8
 8014ba4:	429a      	cmp	r2, r3
 8014ba6:	d104      	bne.n	8014bb2 <vTaskSwitchContext+0x8a>
 8014ba8:	68bb      	ldr	r3, [r7, #8]
 8014baa:	685b      	ldr	r3, [r3, #4]
 8014bac:	685a      	ldr	r2, [r3, #4]
 8014bae:	68bb      	ldr	r3, [r7, #8]
 8014bb0:	605a      	str	r2, [r3, #4]
 8014bb2:	68bb      	ldr	r3, [r7, #8]
 8014bb4:	685b      	ldr	r3, [r3, #4]
 8014bb6:	68db      	ldr	r3, [r3, #12]
 8014bb8:	4a09      	ldr	r2, [pc, #36]	; (8014be0 <vTaskSwitchContext+0xb8>)
 8014bba:	6013      	str	r3, [r2, #0]
 8014bbc:	4a06      	ldr	r2, [pc, #24]	; (8014bd8 <vTaskSwitchContext+0xb0>)
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	6013      	str	r3, [r2, #0]
}
 8014bc2:	bf00      	nop
 8014bc4:	3714      	adds	r7, #20
 8014bc6:	46bd      	mov	sp, r7
 8014bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bcc:	4770      	bx	lr
 8014bce:	bf00      	nop
 8014bd0:	24001d04 	.word	0x24001d04
 8014bd4:	24001cf0 	.word	0x24001cf0
 8014bd8:	24001ce4 	.word	0x24001ce4
 8014bdc:	2400180c 	.word	0x2400180c
 8014be0:	24001808 	.word	0x24001808

08014be4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014be4:	b580      	push	{r7, lr}
 8014be6:	b084      	sub	sp, #16
 8014be8:	af00      	add	r7, sp, #0
 8014bea:	6078      	str	r0, [r7, #4]
 8014bec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	d10a      	bne.n	8014c0a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bf8:	f383 8811 	msr	BASEPRI, r3
 8014bfc:	f3bf 8f6f 	isb	sy
 8014c00:	f3bf 8f4f 	dsb	sy
 8014c04:	60fb      	str	r3, [r7, #12]
}
 8014c06:	bf00      	nop
 8014c08:	e7fe      	b.n	8014c08 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c0a:	4b07      	ldr	r3, [pc, #28]	; (8014c28 <vTaskPlaceOnEventList+0x44>)
 8014c0c:	681b      	ldr	r3, [r3, #0]
 8014c0e:	3318      	adds	r3, #24
 8014c10:	4619      	mov	r1, r3
 8014c12:	6878      	ldr	r0, [r7, #4]
 8014c14:	f7fe fcab 	bl	801356e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c18:	2101      	movs	r1, #1
 8014c1a:	6838      	ldr	r0, [r7, #0]
 8014c1c:	f000 fb32 	bl	8015284 <prvAddCurrentTaskToDelayedList>
}
 8014c20:	bf00      	nop
 8014c22:	3710      	adds	r7, #16
 8014c24:	46bd      	mov	sp, r7
 8014c26:	bd80      	pop	{r7, pc}
 8014c28:	24001808 	.word	0x24001808

08014c2c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014c2c:	b580      	push	{r7, lr}
 8014c2e:	b086      	sub	sp, #24
 8014c30:	af00      	add	r7, sp, #0
 8014c32:	60f8      	str	r0, [r7, #12]
 8014c34:	60b9      	str	r1, [r7, #8]
 8014c36:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014c38:	68fb      	ldr	r3, [r7, #12]
 8014c3a:	2b00      	cmp	r3, #0
 8014c3c:	d10a      	bne.n	8014c54 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c42:	f383 8811 	msr	BASEPRI, r3
 8014c46:	f3bf 8f6f 	isb	sy
 8014c4a:	f3bf 8f4f 	dsb	sy
 8014c4e:	617b      	str	r3, [r7, #20]
}
 8014c50:	bf00      	nop
 8014c52:	e7fe      	b.n	8014c52 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014c54:	4b11      	ldr	r3, [pc, #68]	; (8014c9c <vTaskPlaceOnUnorderedEventList+0x70>)
 8014c56:	681b      	ldr	r3, [r3, #0]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d10a      	bne.n	8014c72 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c60:	f383 8811 	msr	BASEPRI, r3
 8014c64:	f3bf 8f6f 	isb	sy
 8014c68:	f3bf 8f4f 	dsb	sy
 8014c6c:	613b      	str	r3, [r7, #16]
}
 8014c6e:	bf00      	nop
 8014c70:	e7fe      	b.n	8014c70 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014c72:	4b0b      	ldr	r3, [pc, #44]	; (8014ca0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	68ba      	ldr	r2, [r7, #8]
 8014c78:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014c7c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014c7e:	4b08      	ldr	r3, [pc, #32]	; (8014ca0 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	3318      	adds	r3, #24
 8014c84:	4619      	mov	r1, r3
 8014c86:	68f8      	ldr	r0, [r7, #12]
 8014c88:	f7fe fc4d 	bl	8013526 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014c8c:	2101      	movs	r1, #1
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f000 faf8 	bl	8015284 <prvAddCurrentTaskToDelayedList>
}
 8014c94:	bf00      	nop
 8014c96:	3718      	adds	r7, #24
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	bd80      	pop	{r7, pc}
 8014c9c:	24001d04 	.word	0x24001d04
 8014ca0:	24001808 	.word	0x24001808

08014ca4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b086      	sub	sp, #24
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	60f8      	str	r0, [r7, #12]
 8014cac:	60b9      	str	r1, [r7, #8]
 8014cae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014cb0:	68fb      	ldr	r3, [r7, #12]
 8014cb2:	2b00      	cmp	r3, #0
 8014cb4:	d10a      	bne.n	8014ccc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cba:	f383 8811 	msr	BASEPRI, r3
 8014cbe:	f3bf 8f6f 	isb	sy
 8014cc2:	f3bf 8f4f 	dsb	sy
 8014cc6:	617b      	str	r3, [r7, #20]
}
 8014cc8:	bf00      	nop
 8014cca:	e7fe      	b.n	8014cca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014ccc:	4b0a      	ldr	r3, [pc, #40]	; (8014cf8 <vTaskPlaceOnEventListRestricted+0x54>)
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	3318      	adds	r3, #24
 8014cd2:	4619      	mov	r1, r3
 8014cd4:	68f8      	ldr	r0, [r7, #12]
 8014cd6:	f7fe fc26 	bl	8013526 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d002      	beq.n	8014ce6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014ce0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014ce4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014ce6:	6879      	ldr	r1, [r7, #4]
 8014ce8:	68b8      	ldr	r0, [r7, #8]
 8014cea:	f000 facb 	bl	8015284 <prvAddCurrentTaskToDelayedList>
	}
 8014cee:	bf00      	nop
 8014cf0:	3718      	adds	r7, #24
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	bd80      	pop	{r7, pc}
 8014cf6:	bf00      	nop
 8014cf8:	24001808 	.word	0x24001808

08014cfc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b086      	sub	sp, #24
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	68db      	ldr	r3, [r3, #12]
 8014d08:	68db      	ldr	r3, [r3, #12]
 8014d0a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014d0c:	693b      	ldr	r3, [r7, #16]
 8014d0e:	2b00      	cmp	r3, #0
 8014d10:	d10a      	bne.n	8014d28 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014d16:	f383 8811 	msr	BASEPRI, r3
 8014d1a:	f3bf 8f6f 	isb	sy
 8014d1e:	f3bf 8f4f 	dsb	sy
 8014d22:	60fb      	str	r3, [r7, #12]
}
 8014d24:	bf00      	nop
 8014d26:	e7fe      	b.n	8014d26 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014d28:	693b      	ldr	r3, [r7, #16]
 8014d2a:	3318      	adds	r3, #24
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7fe fc57 	bl	80135e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014d32:	4b1e      	ldr	r3, [pc, #120]	; (8014dac <xTaskRemoveFromEventList+0xb0>)
 8014d34:	681b      	ldr	r3, [r3, #0]
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	d11d      	bne.n	8014d76 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d3a:	693b      	ldr	r3, [r7, #16]
 8014d3c:	3304      	adds	r3, #4
 8014d3e:	4618      	mov	r0, r3
 8014d40:	f7fe fc4e 	bl	80135e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014d44:	693b      	ldr	r3, [r7, #16]
 8014d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d48:	4b19      	ldr	r3, [pc, #100]	; (8014db0 <xTaskRemoveFromEventList+0xb4>)
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d903      	bls.n	8014d58 <xTaskRemoveFromEventList+0x5c>
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d54:	4a16      	ldr	r2, [pc, #88]	; (8014db0 <xTaskRemoveFromEventList+0xb4>)
 8014d56:	6013      	str	r3, [r2, #0]
 8014d58:	693b      	ldr	r3, [r7, #16]
 8014d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d5c:	4613      	mov	r3, r2
 8014d5e:	009b      	lsls	r3, r3, #2
 8014d60:	4413      	add	r3, r2
 8014d62:	009b      	lsls	r3, r3, #2
 8014d64:	4a13      	ldr	r2, [pc, #76]	; (8014db4 <xTaskRemoveFromEventList+0xb8>)
 8014d66:	441a      	add	r2, r3
 8014d68:	693b      	ldr	r3, [r7, #16]
 8014d6a:	3304      	adds	r3, #4
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	4610      	mov	r0, r2
 8014d70:	f7fe fbd9 	bl	8013526 <vListInsertEnd>
 8014d74:	e005      	b.n	8014d82 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014d76:	693b      	ldr	r3, [r7, #16]
 8014d78:	3318      	adds	r3, #24
 8014d7a:	4619      	mov	r1, r3
 8014d7c:	480e      	ldr	r0, [pc, #56]	; (8014db8 <xTaskRemoveFromEventList+0xbc>)
 8014d7e:	f7fe fbd2 	bl	8013526 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d82:	693b      	ldr	r3, [r7, #16]
 8014d84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d86:	4b0d      	ldr	r3, [pc, #52]	; (8014dbc <xTaskRemoveFromEventList+0xc0>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d8c:	429a      	cmp	r2, r3
 8014d8e:	d905      	bls.n	8014d9c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014d90:	2301      	movs	r3, #1
 8014d92:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014d94:	4b0a      	ldr	r3, [pc, #40]	; (8014dc0 <xTaskRemoveFromEventList+0xc4>)
 8014d96:	2201      	movs	r2, #1
 8014d98:	601a      	str	r2, [r3, #0]
 8014d9a:	e001      	b.n	8014da0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014d9c:	2300      	movs	r3, #0
 8014d9e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014da0:	697b      	ldr	r3, [r7, #20]
}
 8014da2:	4618      	mov	r0, r3
 8014da4:	3718      	adds	r7, #24
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}
 8014daa:	bf00      	nop
 8014dac:	24001d04 	.word	0x24001d04
 8014db0:	24001ce4 	.word	0x24001ce4
 8014db4:	2400180c 	.word	0x2400180c
 8014db8:	24001c9c 	.word	0x24001c9c
 8014dbc:	24001808 	.word	0x24001808
 8014dc0:	24001cf0 	.word	0x24001cf0

08014dc4 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b086      	sub	sp, #24
 8014dc8:	af00      	add	r7, sp, #0
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014dce:	4b29      	ldr	r3, [pc, #164]	; (8014e74 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014dd0:	681b      	ldr	r3, [r3, #0]
 8014dd2:	2b00      	cmp	r3, #0
 8014dd4:	d10a      	bne.n	8014dec <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dda:	f383 8811 	msr	BASEPRI, r3
 8014dde:	f3bf 8f6f 	isb	sy
 8014de2:	f3bf 8f4f 	dsb	sy
 8014de6:	613b      	str	r3, [r7, #16]
}
 8014de8:	bf00      	nop
 8014dea:	e7fe      	b.n	8014dea <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014dec:	683b      	ldr	r3, [r7, #0]
 8014dee:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014df2:	687b      	ldr	r3, [r7, #4]
 8014df4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	68db      	ldr	r3, [r3, #12]
 8014dfa:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014dfc:	697b      	ldr	r3, [r7, #20]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d10a      	bne.n	8014e18 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014e06:	f383 8811 	msr	BASEPRI, r3
 8014e0a:	f3bf 8f6f 	isb	sy
 8014e0e:	f3bf 8f4f 	dsb	sy
 8014e12:	60fb      	str	r3, [r7, #12]
}
 8014e14:	bf00      	nop
 8014e16:	e7fe      	b.n	8014e16 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014e18:	6878      	ldr	r0, [r7, #4]
 8014e1a:	f7fe fbe1 	bl	80135e0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014e1e:	697b      	ldr	r3, [r7, #20]
 8014e20:	3304      	adds	r3, #4
 8014e22:	4618      	mov	r0, r3
 8014e24:	f7fe fbdc 	bl	80135e0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014e28:	697b      	ldr	r3, [r7, #20]
 8014e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e2c:	4b12      	ldr	r3, [pc, #72]	; (8014e78 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d903      	bls.n	8014e3c <vTaskRemoveFromUnorderedEventList+0x78>
 8014e34:	697b      	ldr	r3, [r7, #20]
 8014e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e38:	4a0f      	ldr	r2, [pc, #60]	; (8014e78 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014e3a:	6013      	str	r3, [r2, #0]
 8014e3c:	697b      	ldr	r3, [r7, #20]
 8014e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e40:	4613      	mov	r3, r2
 8014e42:	009b      	lsls	r3, r3, #2
 8014e44:	4413      	add	r3, r2
 8014e46:	009b      	lsls	r3, r3, #2
 8014e48:	4a0c      	ldr	r2, [pc, #48]	; (8014e7c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014e4a:	441a      	add	r2, r3
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	3304      	adds	r3, #4
 8014e50:	4619      	mov	r1, r3
 8014e52:	4610      	mov	r0, r2
 8014e54:	f7fe fb67 	bl	8013526 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014e58:	697b      	ldr	r3, [r7, #20]
 8014e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014e5c:	4b08      	ldr	r3, [pc, #32]	; (8014e80 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014e5e:	681b      	ldr	r3, [r3, #0]
 8014e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014e62:	429a      	cmp	r2, r3
 8014e64:	d902      	bls.n	8014e6c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014e66:	4b07      	ldr	r3, [pc, #28]	; (8014e84 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014e68:	2201      	movs	r2, #1
 8014e6a:	601a      	str	r2, [r3, #0]
	}
}
 8014e6c:	bf00      	nop
 8014e6e:	3718      	adds	r7, #24
 8014e70:	46bd      	mov	sp, r7
 8014e72:	bd80      	pop	{r7, pc}
 8014e74:	24001d04 	.word	0x24001d04
 8014e78:	24001ce4 	.word	0x24001ce4
 8014e7c:	2400180c 	.word	0x2400180c
 8014e80:	24001808 	.word	0x24001808
 8014e84:	24001cf0 	.word	0x24001cf0

08014e88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014e88:	b480      	push	{r7}
 8014e8a:	b083      	sub	sp, #12
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014e90:	4b06      	ldr	r3, [pc, #24]	; (8014eac <vTaskInternalSetTimeOutState+0x24>)
 8014e92:	681a      	ldr	r2, [r3, #0]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014e98:	4b05      	ldr	r3, [pc, #20]	; (8014eb0 <vTaskInternalSetTimeOutState+0x28>)
 8014e9a:	681a      	ldr	r2, [r3, #0]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	605a      	str	r2, [r3, #4]
}
 8014ea0:	bf00      	nop
 8014ea2:	370c      	adds	r7, #12
 8014ea4:	46bd      	mov	sp, r7
 8014ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014eaa:	4770      	bx	lr
 8014eac:	24001cf4 	.word	0x24001cf4
 8014eb0:	24001ce0 	.word	0x24001ce0

08014eb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b088      	sub	sp, #32
 8014eb8:	af00      	add	r7, sp, #0
 8014eba:	6078      	str	r0, [r7, #4]
 8014ebc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	2b00      	cmp	r3, #0
 8014ec2:	d10a      	bne.n	8014eda <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ec8:	f383 8811 	msr	BASEPRI, r3
 8014ecc:	f3bf 8f6f 	isb	sy
 8014ed0:	f3bf 8f4f 	dsb	sy
 8014ed4:	613b      	str	r3, [r7, #16]
}
 8014ed6:	bf00      	nop
 8014ed8:	e7fe      	b.n	8014ed8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014eda:	683b      	ldr	r3, [r7, #0]
 8014edc:	2b00      	cmp	r3, #0
 8014ede:	d10a      	bne.n	8014ef6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ee4:	f383 8811 	msr	BASEPRI, r3
 8014ee8:	f3bf 8f6f 	isb	sy
 8014eec:	f3bf 8f4f 	dsb	sy
 8014ef0:	60fb      	str	r3, [r7, #12]
}
 8014ef2:	bf00      	nop
 8014ef4:	e7fe      	b.n	8014ef4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014ef6:	f000 feb5 	bl	8015c64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014efa:	4b1d      	ldr	r3, [pc, #116]	; (8014f70 <xTaskCheckForTimeOut+0xbc>)
 8014efc:	681b      	ldr	r3, [r3, #0]
 8014efe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	685b      	ldr	r3, [r3, #4]
 8014f04:	69ba      	ldr	r2, [r7, #24]
 8014f06:	1ad3      	subs	r3, r2, r3
 8014f08:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014f0a:	683b      	ldr	r3, [r7, #0]
 8014f0c:	681b      	ldr	r3, [r3, #0]
 8014f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f12:	d102      	bne.n	8014f1a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014f14:	2300      	movs	r3, #0
 8014f16:	61fb      	str	r3, [r7, #28]
 8014f18:	e023      	b.n	8014f62 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	681a      	ldr	r2, [r3, #0]
 8014f1e:	4b15      	ldr	r3, [pc, #84]	; (8014f74 <xTaskCheckForTimeOut+0xc0>)
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	d007      	beq.n	8014f36 <xTaskCheckForTimeOut+0x82>
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	685b      	ldr	r3, [r3, #4]
 8014f2a:	69ba      	ldr	r2, [r7, #24]
 8014f2c:	429a      	cmp	r2, r3
 8014f2e:	d302      	bcc.n	8014f36 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014f30:	2301      	movs	r3, #1
 8014f32:	61fb      	str	r3, [r7, #28]
 8014f34:	e015      	b.n	8014f62 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	681b      	ldr	r3, [r3, #0]
 8014f3a:	697a      	ldr	r2, [r7, #20]
 8014f3c:	429a      	cmp	r2, r3
 8014f3e:	d20b      	bcs.n	8014f58 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	681a      	ldr	r2, [r3, #0]
 8014f44:	697b      	ldr	r3, [r7, #20]
 8014f46:	1ad2      	subs	r2, r2, r3
 8014f48:	683b      	ldr	r3, [r7, #0]
 8014f4a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014f4c:	6878      	ldr	r0, [r7, #4]
 8014f4e:	f7ff ff9b 	bl	8014e88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014f52:	2300      	movs	r3, #0
 8014f54:	61fb      	str	r3, [r7, #28]
 8014f56:	e004      	b.n	8014f62 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014f58:	683b      	ldr	r3, [r7, #0]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014f5e:	2301      	movs	r3, #1
 8014f60:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014f62:	f000 feaf 	bl	8015cc4 <vPortExitCritical>

	return xReturn;
 8014f66:	69fb      	ldr	r3, [r7, #28]
}
 8014f68:	4618      	mov	r0, r3
 8014f6a:	3720      	adds	r7, #32
 8014f6c:	46bd      	mov	sp, r7
 8014f6e:	bd80      	pop	{r7, pc}
 8014f70:	24001ce0 	.word	0x24001ce0
 8014f74:	24001cf4 	.word	0x24001cf4

08014f78 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014f78:	b480      	push	{r7}
 8014f7a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014f7c:	4b03      	ldr	r3, [pc, #12]	; (8014f8c <vTaskMissedYield+0x14>)
 8014f7e:	2201      	movs	r2, #1
 8014f80:	601a      	str	r2, [r3, #0]
}
 8014f82:	bf00      	nop
 8014f84:	46bd      	mov	sp, r7
 8014f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f8a:	4770      	bx	lr
 8014f8c:	24001cf0 	.word	0x24001cf0

08014f90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b082      	sub	sp, #8
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014f98:	f000 f852 	bl	8015040 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014f9c:	4b06      	ldr	r3, [pc, #24]	; (8014fb8 <prvIdleTask+0x28>)
 8014f9e:	681b      	ldr	r3, [r3, #0]
 8014fa0:	2b01      	cmp	r3, #1
 8014fa2:	d9f9      	bls.n	8014f98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014fa4:	4b05      	ldr	r3, [pc, #20]	; (8014fbc <prvIdleTask+0x2c>)
 8014fa6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014faa:	601a      	str	r2, [r3, #0]
 8014fac:	f3bf 8f4f 	dsb	sy
 8014fb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014fb4:	e7f0      	b.n	8014f98 <prvIdleTask+0x8>
 8014fb6:	bf00      	nop
 8014fb8:	2400180c 	.word	0x2400180c
 8014fbc:	e000ed04 	.word	0xe000ed04

08014fc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b082      	sub	sp, #8
 8014fc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014fc6:	2300      	movs	r3, #0
 8014fc8:	607b      	str	r3, [r7, #4]
 8014fca:	e00c      	b.n	8014fe6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014fcc:	687a      	ldr	r2, [r7, #4]
 8014fce:	4613      	mov	r3, r2
 8014fd0:	009b      	lsls	r3, r3, #2
 8014fd2:	4413      	add	r3, r2
 8014fd4:	009b      	lsls	r3, r3, #2
 8014fd6:	4a12      	ldr	r2, [pc, #72]	; (8015020 <prvInitialiseTaskLists+0x60>)
 8014fd8:	4413      	add	r3, r2
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7fe fa76 	bl	80134cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	3301      	adds	r3, #1
 8014fe4:	607b      	str	r3, [r7, #4]
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	2b37      	cmp	r3, #55	; 0x37
 8014fea:	d9ef      	bls.n	8014fcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014fec:	480d      	ldr	r0, [pc, #52]	; (8015024 <prvInitialiseTaskLists+0x64>)
 8014fee:	f7fe fa6d 	bl	80134cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014ff2:	480d      	ldr	r0, [pc, #52]	; (8015028 <prvInitialiseTaskLists+0x68>)
 8014ff4:	f7fe fa6a 	bl	80134cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014ff8:	480c      	ldr	r0, [pc, #48]	; (801502c <prvInitialiseTaskLists+0x6c>)
 8014ffa:	f7fe fa67 	bl	80134cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014ffe:	480c      	ldr	r0, [pc, #48]	; (8015030 <prvInitialiseTaskLists+0x70>)
 8015000:	f7fe fa64 	bl	80134cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8015004:	480b      	ldr	r0, [pc, #44]	; (8015034 <prvInitialiseTaskLists+0x74>)
 8015006:	f7fe fa61 	bl	80134cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801500a:	4b0b      	ldr	r3, [pc, #44]	; (8015038 <prvInitialiseTaskLists+0x78>)
 801500c:	4a05      	ldr	r2, [pc, #20]	; (8015024 <prvInitialiseTaskLists+0x64>)
 801500e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8015010:	4b0a      	ldr	r3, [pc, #40]	; (801503c <prvInitialiseTaskLists+0x7c>)
 8015012:	4a05      	ldr	r2, [pc, #20]	; (8015028 <prvInitialiseTaskLists+0x68>)
 8015014:	601a      	str	r2, [r3, #0]
}
 8015016:	bf00      	nop
 8015018:	3708      	adds	r7, #8
 801501a:	46bd      	mov	sp, r7
 801501c:	bd80      	pop	{r7, pc}
 801501e:	bf00      	nop
 8015020:	2400180c 	.word	0x2400180c
 8015024:	24001c6c 	.word	0x24001c6c
 8015028:	24001c80 	.word	0x24001c80
 801502c:	24001c9c 	.word	0x24001c9c
 8015030:	24001cb0 	.word	0x24001cb0
 8015034:	24001cc8 	.word	0x24001cc8
 8015038:	24001c94 	.word	0x24001c94
 801503c:	24001c98 	.word	0x24001c98

08015040 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8015040:	b580      	push	{r7, lr}
 8015042:	b082      	sub	sp, #8
 8015044:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8015046:	e019      	b.n	801507c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8015048:	f000 fe0c 	bl	8015c64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801504c:	4b10      	ldr	r3, [pc, #64]	; (8015090 <prvCheckTasksWaitingTermination+0x50>)
 801504e:	68db      	ldr	r3, [r3, #12]
 8015050:	68db      	ldr	r3, [r3, #12]
 8015052:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	3304      	adds	r3, #4
 8015058:	4618      	mov	r0, r3
 801505a:	f7fe fac1 	bl	80135e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 801505e:	4b0d      	ldr	r3, [pc, #52]	; (8015094 <prvCheckTasksWaitingTermination+0x54>)
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	3b01      	subs	r3, #1
 8015064:	4a0b      	ldr	r2, [pc, #44]	; (8015094 <prvCheckTasksWaitingTermination+0x54>)
 8015066:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8015068:	4b0b      	ldr	r3, [pc, #44]	; (8015098 <prvCheckTasksWaitingTermination+0x58>)
 801506a:	681b      	ldr	r3, [r3, #0]
 801506c:	3b01      	subs	r3, #1
 801506e:	4a0a      	ldr	r2, [pc, #40]	; (8015098 <prvCheckTasksWaitingTermination+0x58>)
 8015070:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8015072:	f000 fe27 	bl	8015cc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8015076:	6878      	ldr	r0, [r7, #4]
 8015078:	f000 f810 	bl	801509c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801507c:	4b06      	ldr	r3, [pc, #24]	; (8015098 <prvCheckTasksWaitingTermination+0x58>)
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d1e1      	bne.n	8015048 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8015084:	bf00      	nop
 8015086:	bf00      	nop
 8015088:	3708      	adds	r7, #8
 801508a:	46bd      	mov	sp, r7
 801508c:	bd80      	pop	{r7, pc}
 801508e:	bf00      	nop
 8015090:	24001cb0 	.word	0x24001cb0
 8015094:	24001cdc 	.word	0x24001cdc
 8015098:	24001cc4 	.word	0x24001cc4

0801509c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801509c:	b580      	push	{r7, lr}
 801509e:	b084      	sub	sp, #16
 80150a0:	af00      	add	r7, sp, #0
 80150a2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	d108      	bne.n	80150c0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80150b2:	4618      	mov	r0, r3
 80150b4:	f000 ffc4 	bl	8016040 <vPortFree>
				vPortFree( pxTCB );
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f000 ffc1 	bl	8016040 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80150be:	e018      	b.n	80150f2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150c6:	2b01      	cmp	r3, #1
 80150c8:	d103      	bne.n	80150d2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f000 ffb8 	bl	8016040 <vPortFree>
	}
 80150d0:	e00f      	b.n	80150f2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80150d2:	687b      	ldr	r3, [r7, #4]
 80150d4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80150d8:	2b02      	cmp	r3, #2
 80150da:	d00a      	beq.n	80150f2 <prvDeleteTCB+0x56>
	__asm volatile
 80150dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150e0:	f383 8811 	msr	BASEPRI, r3
 80150e4:	f3bf 8f6f 	isb	sy
 80150e8:	f3bf 8f4f 	dsb	sy
 80150ec:	60fb      	str	r3, [r7, #12]
}
 80150ee:	bf00      	nop
 80150f0:	e7fe      	b.n	80150f0 <prvDeleteTCB+0x54>
	}
 80150f2:	bf00      	nop
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
	...

080150fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80150fc:	b480      	push	{r7}
 80150fe:	b083      	sub	sp, #12
 8015100:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8015102:	4b0c      	ldr	r3, [pc, #48]	; (8015134 <prvResetNextTaskUnblockTime+0x38>)
 8015104:	681b      	ldr	r3, [r3, #0]
 8015106:	681b      	ldr	r3, [r3, #0]
 8015108:	2b00      	cmp	r3, #0
 801510a:	d104      	bne.n	8015116 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801510c:	4b0a      	ldr	r3, [pc, #40]	; (8015138 <prvResetNextTaskUnblockTime+0x3c>)
 801510e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015112:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015114:	e008      	b.n	8015128 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015116:	4b07      	ldr	r3, [pc, #28]	; (8015134 <prvResetNextTaskUnblockTime+0x38>)
 8015118:	681b      	ldr	r3, [r3, #0]
 801511a:	68db      	ldr	r3, [r3, #12]
 801511c:	68db      	ldr	r3, [r3, #12]
 801511e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	685b      	ldr	r3, [r3, #4]
 8015124:	4a04      	ldr	r2, [pc, #16]	; (8015138 <prvResetNextTaskUnblockTime+0x3c>)
 8015126:	6013      	str	r3, [r2, #0]
}
 8015128:	bf00      	nop
 801512a:	370c      	adds	r7, #12
 801512c:	46bd      	mov	sp, r7
 801512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015132:	4770      	bx	lr
 8015134:	24001c94 	.word	0x24001c94
 8015138:	24001cfc 	.word	0x24001cfc

0801513c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801513c:	b480      	push	{r7}
 801513e:	b083      	sub	sp, #12
 8015140:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015142:	4b0b      	ldr	r3, [pc, #44]	; (8015170 <xTaskGetSchedulerState+0x34>)
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	2b00      	cmp	r3, #0
 8015148:	d102      	bne.n	8015150 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801514a:	2301      	movs	r3, #1
 801514c:	607b      	str	r3, [r7, #4]
 801514e:	e008      	b.n	8015162 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015150:	4b08      	ldr	r3, [pc, #32]	; (8015174 <xTaskGetSchedulerState+0x38>)
 8015152:	681b      	ldr	r3, [r3, #0]
 8015154:	2b00      	cmp	r3, #0
 8015156:	d102      	bne.n	801515e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8015158:	2302      	movs	r3, #2
 801515a:	607b      	str	r3, [r7, #4]
 801515c:	e001      	b.n	8015162 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801515e:	2300      	movs	r3, #0
 8015160:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015162:	687b      	ldr	r3, [r7, #4]
	}
 8015164:	4618      	mov	r0, r3
 8015166:	370c      	adds	r7, #12
 8015168:	46bd      	mov	sp, r7
 801516a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801516e:	4770      	bx	lr
 8015170:	24001ce8 	.word	0x24001ce8
 8015174:	24001d04 	.word	0x24001d04

08015178 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8015178:	b580      	push	{r7, lr}
 801517a:	b086      	sub	sp, #24
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015180:	687b      	ldr	r3, [r7, #4]
 8015182:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015184:	2300      	movs	r3, #0
 8015186:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	2b00      	cmp	r3, #0
 801518c:	d056      	beq.n	801523c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801518e:	4b2e      	ldr	r3, [pc, #184]	; (8015248 <xTaskPriorityDisinherit+0xd0>)
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	693a      	ldr	r2, [r7, #16]
 8015194:	429a      	cmp	r2, r3
 8015196:	d00a      	beq.n	80151ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8015198:	f04f 0350 	mov.w	r3, #80	; 0x50
 801519c:	f383 8811 	msr	BASEPRI, r3
 80151a0:	f3bf 8f6f 	isb	sy
 80151a4:	f3bf 8f4f 	dsb	sy
 80151a8:	60fb      	str	r3, [r7, #12]
}
 80151aa:	bf00      	nop
 80151ac:	e7fe      	b.n	80151ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80151ae:	693b      	ldr	r3, [r7, #16]
 80151b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d10a      	bne.n	80151cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80151b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80151ba:	f383 8811 	msr	BASEPRI, r3
 80151be:	f3bf 8f6f 	isb	sy
 80151c2:	f3bf 8f4f 	dsb	sy
 80151c6:	60bb      	str	r3, [r7, #8]
}
 80151c8:	bf00      	nop
 80151ca:	e7fe      	b.n	80151ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151d0:	1e5a      	subs	r2, r3, #1
 80151d2:	693b      	ldr	r3, [r7, #16]
 80151d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80151d6:	693b      	ldr	r3, [r7, #16]
 80151d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80151da:	693b      	ldr	r3, [r7, #16]
 80151dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80151de:	429a      	cmp	r2, r3
 80151e0:	d02c      	beq.n	801523c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80151e2:	693b      	ldr	r3, [r7, #16]
 80151e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d128      	bne.n	801523c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80151ea:	693b      	ldr	r3, [r7, #16]
 80151ec:	3304      	adds	r3, #4
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7fe f9f6 	bl	80135e0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80151f4:	693b      	ldr	r3, [r7, #16]
 80151f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80151f8:	693b      	ldr	r3, [r7, #16]
 80151fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80151fc:	693b      	ldr	r3, [r7, #16]
 80151fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015200:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8015204:	693b      	ldr	r3, [r7, #16]
 8015206:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8015208:	693b      	ldr	r3, [r7, #16]
 801520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801520c:	4b0f      	ldr	r3, [pc, #60]	; (801524c <xTaskPriorityDisinherit+0xd4>)
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	429a      	cmp	r2, r3
 8015212:	d903      	bls.n	801521c <xTaskPriorityDisinherit+0xa4>
 8015214:	693b      	ldr	r3, [r7, #16]
 8015216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015218:	4a0c      	ldr	r2, [pc, #48]	; (801524c <xTaskPriorityDisinherit+0xd4>)
 801521a:	6013      	str	r3, [r2, #0]
 801521c:	693b      	ldr	r3, [r7, #16]
 801521e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015220:	4613      	mov	r3, r2
 8015222:	009b      	lsls	r3, r3, #2
 8015224:	4413      	add	r3, r2
 8015226:	009b      	lsls	r3, r3, #2
 8015228:	4a09      	ldr	r2, [pc, #36]	; (8015250 <xTaskPriorityDisinherit+0xd8>)
 801522a:	441a      	add	r2, r3
 801522c:	693b      	ldr	r3, [r7, #16]
 801522e:	3304      	adds	r3, #4
 8015230:	4619      	mov	r1, r3
 8015232:	4610      	mov	r0, r2
 8015234:	f7fe f977 	bl	8013526 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8015238:	2301      	movs	r3, #1
 801523a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 801523c:	697b      	ldr	r3, [r7, #20]
	}
 801523e:	4618      	mov	r0, r3
 8015240:	3718      	adds	r7, #24
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	24001808 	.word	0x24001808
 801524c:	24001ce4 	.word	0x24001ce4
 8015250:	2400180c 	.word	0x2400180c

08015254 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015254:	b480      	push	{r7}
 8015256:	b083      	sub	sp, #12
 8015258:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801525a:	4b09      	ldr	r3, [pc, #36]	; (8015280 <uxTaskResetEventItemValue+0x2c>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	699b      	ldr	r3, [r3, #24]
 8015260:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015262:	4b07      	ldr	r3, [pc, #28]	; (8015280 <uxTaskResetEventItemValue+0x2c>)
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015268:	4b05      	ldr	r3, [pc, #20]	; (8015280 <uxTaskResetEventItemValue+0x2c>)
 801526a:	681b      	ldr	r3, [r3, #0]
 801526c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015270:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015272:	687b      	ldr	r3, [r7, #4]
}
 8015274:	4618      	mov	r0, r3
 8015276:	370c      	adds	r7, #12
 8015278:	46bd      	mov	sp, r7
 801527a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801527e:	4770      	bx	lr
 8015280:	24001808 	.word	0x24001808

08015284 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015284:	b580      	push	{r7, lr}
 8015286:	b084      	sub	sp, #16
 8015288:	af00      	add	r7, sp, #0
 801528a:	6078      	str	r0, [r7, #4]
 801528c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801528e:	4b21      	ldr	r3, [pc, #132]	; (8015314 <prvAddCurrentTaskToDelayedList+0x90>)
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015294:	4b20      	ldr	r3, [pc, #128]	; (8015318 <prvAddCurrentTaskToDelayedList+0x94>)
 8015296:	681b      	ldr	r3, [r3, #0]
 8015298:	3304      	adds	r3, #4
 801529a:	4618      	mov	r0, r3
 801529c:	f7fe f9a0 	bl	80135e0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80152a0:	687b      	ldr	r3, [r7, #4]
 80152a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80152a6:	d10a      	bne.n	80152be <prvAddCurrentTaskToDelayedList+0x3a>
 80152a8:	683b      	ldr	r3, [r7, #0]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d007      	beq.n	80152be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152ae:	4b1a      	ldr	r3, [pc, #104]	; (8015318 <prvAddCurrentTaskToDelayedList+0x94>)
 80152b0:	681b      	ldr	r3, [r3, #0]
 80152b2:	3304      	adds	r3, #4
 80152b4:	4619      	mov	r1, r3
 80152b6:	4819      	ldr	r0, [pc, #100]	; (801531c <prvAddCurrentTaskToDelayedList+0x98>)
 80152b8:	f7fe f935 	bl	8013526 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80152bc:	e026      	b.n	801530c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80152be:	68fa      	ldr	r2, [r7, #12]
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	4413      	add	r3, r2
 80152c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80152c6:	4b14      	ldr	r3, [pc, #80]	; (8015318 <prvAddCurrentTaskToDelayedList+0x94>)
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	68ba      	ldr	r2, [r7, #8]
 80152cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80152ce:	68ba      	ldr	r2, [r7, #8]
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	429a      	cmp	r2, r3
 80152d4:	d209      	bcs.n	80152ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152d6:	4b12      	ldr	r3, [pc, #72]	; (8015320 <prvAddCurrentTaskToDelayedList+0x9c>)
 80152d8:	681a      	ldr	r2, [r3, #0]
 80152da:	4b0f      	ldr	r3, [pc, #60]	; (8015318 <prvAddCurrentTaskToDelayedList+0x94>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	3304      	adds	r3, #4
 80152e0:	4619      	mov	r1, r3
 80152e2:	4610      	mov	r0, r2
 80152e4:	f7fe f943 	bl	801356e <vListInsert>
}
 80152e8:	e010      	b.n	801530c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80152ea:	4b0e      	ldr	r3, [pc, #56]	; (8015324 <prvAddCurrentTaskToDelayedList+0xa0>)
 80152ec:	681a      	ldr	r2, [r3, #0]
 80152ee:	4b0a      	ldr	r3, [pc, #40]	; (8015318 <prvAddCurrentTaskToDelayedList+0x94>)
 80152f0:	681b      	ldr	r3, [r3, #0]
 80152f2:	3304      	adds	r3, #4
 80152f4:	4619      	mov	r1, r3
 80152f6:	4610      	mov	r0, r2
 80152f8:	f7fe f939 	bl	801356e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80152fc:	4b0a      	ldr	r3, [pc, #40]	; (8015328 <prvAddCurrentTaskToDelayedList+0xa4>)
 80152fe:	681b      	ldr	r3, [r3, #0]
 8015300:	68ba      	ldr	r2, [r7, #8]
 8015302:	429a      	cmp	r2, r3
 8015304:	d202      	bcs.n	801530c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8015306:	4a08      	ldr	r2, [pc, #32]	; (8015328 <prvAddCurrentTaskToDelayedList+0xa4>)
 8015308:	68bb      	ldr	r3, [r7, #8]
 801530a:	6013      	str	r3, [r2, #0]
}
 801530c:	bf00      	nop
 801530e:	3710      	adds	r7, #16
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	24001ce0 	.word	0x24001ce0
 8015318:	24001808 	.word	0x24001808
 801531c:	24001cc8 	.word	0x24001cc8
 8015320:	24001c98 	.word	0x24001c98
 8015324:	24001c94 	.word	0x24001c94
 8015328:	24001cfc 	.word	0x24001cfc

0801532c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801532c:	b580      	push	{r7, lr}
 801532e:	b08a      	sub	sp, #40	; 0x28
 8015330:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015332:	2300      	movs	r3, #0
 8015334:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8015336:	f000 fb07 	bl	8015948 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801533a:	4b1c      	ldr	r3, [pc, #112]	; (80153ac <xTimerCreateTimerTask+0x80>)
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	2b00      	cmp	r3, #0
 8015340:	d021      	beq.n	8015386 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015342:	2300      	movs	r3, #0
 8015344:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015346:	2300      	movs	r3, #0
 8015348:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801534a:	1d3a      	adds	r2, r7, #4
 801534c:	f107 0108 	add.w	r1, r7, #8
 8015350:	f107 030c 	add.w	r3, r7, #12
 8015354:	4618      	mov	r0, r3
 8015356:	f7fd feb1 	bl	80130bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801535a:	6879      	ldr	r1, [r7, #4]
 801535c:	68bb      	ldr	r3, [r7, #8]
 801535e:	68fa      	ldr	r2, [r7, #12]
 8015360:	9202      	str	r2, [sp, #8]
 8015362:	9301      	str	r3, [sp, #4]
 8015364:	2302      	movs	r3, #2
 8015366:	9300      	str	r3, [sp, #0]
 8015368:	2300      	movs	r3, #0
 801536a:	460a      	mov	r2, r1
 801536c:	4910      	ldr	r1, [pc, #64]	; (80153b0 <xTimerCreateTimerTask+0x84>)
 801536e:	4811      	ldr	r0, [pc, #68]	; (80153b4 <xTimerCreateTimerTask+0x88>)
 8015370:	f7fe ff06 	bl	8014180 <xTaskCreateStatic>
 8015374:	4603      	mov	r3, r0
 8015376:	4a10      	ldr	r2, [pc, #64]	; (80153b8 <xTimerCreateTimerTask+0x8c>)
 8015378:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801537a:	4b0f      	ldr	r3, [pc, #60]	; (80153b8 <xTimerCreateTimerTask+0x8c>)
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d001      	beq.n	8015386 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015382:	2301      	movs	r3, #1
 8015384:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015386:	697b      	ldr	r3, [r7, #20]
 8015388:	2b00      	cmp	r3, #0
 801538a:	d10a      	bne.n	80153a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801538c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015390:	f383 8811 	msr	BASEPRI, r3
 8015394:	f3bf 8f6f 	isb	sy
 8015398:	f3bf 8f4f 	dsb	sy
 801539c:	613b      	str	r3, [r7, #16]
}
 801539e:	bf00      	nop
 80153a0:	e7fe      	b.n	80153a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80153a2:	697b      	ldr	r3, [r7, #20]
}
 80153a4:	4618      	mov	r0, r3
 80153a6:	3718      	adds	r7, #24
 80153a8:	46bd      	mov	sp, r7
 80153aa:	bd80      	pop	{r7, pc}
 80153ac:	24001d38 	.word	0x24001d38
 80153b0:	08016f94 	.word	0x08016f94
 80153b4:	080154f1 	.word	0x080154f1
 80153b8:	24001d3c 	.word	0x24001d3c

080153bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b08a      	sub	sp, #40	; 0x28
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	607a      	str	r2, [r7, #4]
 80153c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80153ca:	2300      	movs	r3, #0
 80153cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d10a      	bne.n	80153ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80153d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153d8:	f383 8811 	msr	BASEPRI, r3
 80153dc:	f3bf 8f6f 	isb	sy
 80153e0:	f3bf 8f4f 	dsb	sy
 80153e4:	623b      	str	r3, [r7, #32]
}
 80153e6:	bf00      	nop
 80153e8:	e7fe      	b.n	80153e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80153ea:	4b1a      	ldr	r3, [pc, #104]	; (8015454 <xTimerGenericCommand+0x98>)
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d02a      	beq.n	8015448 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80153f2:	68bb      	ldr	r3, [r7, #8]
 80153f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80153fe:	68bb      	ldr	r3, [r7, #8]
 8015400:	2b05      	cmp	r3, #5
 8015402:	dc18      	bgt.n	8015436 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8015404:	f7ff fe9a 	bl	801513c <xTaskGetSchedulerState>
 8015408:	4603      	mov	r3, r0
 801540a:	2b02      	cmp	r3, #2
 801540c:	d109      	bne.n	8015422 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801540e:	4b11      	ldr	r3, [pc, #68]	; (8015454 <xTimerGenericCommand+0x98>)
 8015410:	6818      	ldr	r0, [r3, #0]
 8015412:	f107 0110 	add.w	r1, r7, #16
 8015416:	2300      	movs	r3, #0
 8015418:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801541a:	f7fe fa49 	bl	80138b0 <xQueueGenericSend>
 801541e:	6278      	str	r0, [r7, #36]	; 0x24
 8015420:	e012      	b.n	8015448 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015422:	4b0c      	ldr	r3, [pc, #48]	; (8015454 <xTimerGenericCommand+0x98>)
 8015424:	6818      	ldr	r0, [r3, #0]
 8015426:	f107 0110 	add.w	r1, r7, #16
 801542a:	2300      	movs	r3, #0
 801542c:	2200      	movs	r2, #0
 801542e:	f7fe fa3f 	bl	80138b0 <xQueueGenericSend>
 8015432:	6278      	str	r0, [r7, #36]	; 0x24
 8015434:	e008      	b.n	8015448 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8015436:	4b07      	ldr	r3, [pc, #28]	; (8015454 <xTimerGenericCommand+0x98>)
 8015438:	6818      	ldr	r0, [r3, #0]
 801543a:	f107 0110 	add.w	r1, r7, #16
 801543e:	2300      	movs	r3, #0
 8015440:	683a      	ldr	r2, [r7, #0]
 8015442:	f7fe fb33 	bl	8013aac <xQueueGenericSendFromISR>
 8015446:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801544a:	4618      	mov	r0, r3
 801544c:	3728      	adds	r7, #40	; 0x28
 801544e:	46bd      	mov	sp, r7
 8015450:	bd80      	pop	{r7, pc}
 8015452:	bf00      	nop
 8015454:	24001d38 	.word	0x24001d38

08015458 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015458:	b580      	push	{r7, lr}
 801545a:	b088      	sub	sp, #32
 801545c:	af02      	add	r7, sp, #8
 801545e:	6078      	str	r0, [r7, #4]
 8015460:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015462:	4b22      	ldr	r3, [pc, #136]	; (80154ec <prvProcessExpiredTimer+0x94>)
 8015464:	681b      	ldr	r3, [r3, #0]
 8015466:	68db      	ldr	r3, [r3, #12]
 8015468:	68db      	ldr	r3, [r3, #12]
 801546a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	3304      	adds	r3, #4
 8015470:	4618      	mov	r0, r3
 8015472:	f7fe f8b5 	bl	80135e0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015476:	697b      	ldr	r3, [r7, #20]
 8015478:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801547c:	f003 0304 	and.w	r3, r3, #4
 8015480:	2b00      	cmp	r3, #0
 8015482:	d022      	beq.n	80154ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015484:	697b      	ldr	r3, [r7, #20]
 8015486:	699a      	ldr	r2, [r3, #24]
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	18d1      	adds	r1, r2, r3
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	683a      	ldr	r2, [r7, #0]
 8015490:	6978      	ldr	r0, [r7, #20]
 8015492:	f000 f8d1 	bl	8015638 <prvInsertTimerInActiveList>
 8015496:	4603      	mov	r3, r0
 8015498:	2b00      	cmp	r3, #0
 801549a:	d01f      	beq.n	80154dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801549c:	2300      	movs	r3, #0
 801549e:	9300      	str	r3, [sp, #0]
 80154a0:	2300      	movs	r3, #0
 80154a2:	687a      	ldr	r2, [r7, #4]
 80154a4:	2100      	movs	r1, #0
 80154a6:	6978      	ldr	r0, [r7, #20]
 80154a8:	f7ff ff88 	bl	80153bc <xTimerGenericCommand>
 80154ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80154ae:	693b      	ldr	r3, [r7, #16]
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d113      	bne.n	80154dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80154b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80154b8:	f383 8811 	msr	BASEPRI, r3
 80154bc:	f3bf 8f6f 	isb	sy
 80154c0:	f3bf 8f4f 	dsb	sy
 80154c4:	60fb      	str	r3, [r7, #12]
}
 80154c6:	bf00      	nop
 80154c8:	e7fe      	b.n	80154c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80154ca:	697b      	ldr	r3, [r7, #20]
 80154cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80154d0:	f023 0301 	bic.w	r3, r3, #1
 80154d4:	b2da      	uxtb	r2, r3
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80154dc:	697b      	ldr	r3, [r7, #20]
 80154de:	6a1b      	ldr	r3, [r3, #32]
 80154e0:	6978      	ldr	r0, [r7, #20]
 80154e2:	4798      	blx	r3
}
 80154e4:	bf00      	nop
 80154e6:	3718      	adds	r7, #24
 80154e8:	46bd      	mov	sp, r7
 80154ea:	bd80      	pop	{r7, pc}
 80154ec:	24001d30 	.word	0x24001d30

080154f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80154f0:	b580      	push	{r7, lr}
 80154f2:	b084      	sub	sp, #16
 80154f4:	af00      	add	r7, sp, #0
 80154f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80154f8:	f107 0308 	add.w	r3, r7, #8
 80154fc:	4618      	mov	r0, r3
 80154fe:	f000 f857 	bl	80155b0 <prvGetNextExpireTime>
 8015502:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8015504:	68bb      	ldr	r3, [r7, #8]
 8015506:	4619      	mov	r1, r3
 8015508:	68f8      	ldr	r0, [r7, #12]
 801550a:	f000 f803 	bl	8015514 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801550e:	f000 f8d5 	bl	80156bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015512:	e7f1      	b.n	80154f8 <prvTimerTask+0x8>

08015514 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015514:	b580      	push	{r7, lr}
 8015516:	b084      	sub	sp, #16
 8015518:	af00      	add	r7, sp, #0
 801551a:	6078      	str	r0, [r7, #4]
 801551c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801551e:	f7ff f985 	bl	801482c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015522:	f107 0308 	add.w	r3, r7, #8
 8015526:	4618      	mov	r0, r3
 8015528:	f000 f866 	bl	80155f8 <prvSampleTimeNow>
 801552c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801552e:	68bb      	ldr	r3, [r7, #8]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d130      	bne.n	8015596 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015534:	683b      	ldr	r3, [r7, #0]
 8015536:	2b00      	cmp	r3, #0
 8015538:	d10a      	bne.n	8015550 <prvProcessTimerOrBlockTask+0x3c>
 801553a:	687a      	ldr	r2, [r7, #4]
 801553c:	68fb      	ldr	r3, [r7, #12]
 801553e:	429a      	cmp	r2, r3
 8015540:	d806      	bhi.n	8015550 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015542:	f7ff f981 	bl	8014848 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015546:	68f9      	ldr	r1, [r7, #12]
 8015548:	6878      	ldr	r0, [r7, #4]
 801554a:	f7ff ff85 	bl	8015458 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801554e:	e024      	b.n	801559a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015550:	683b      	ldr	r3, [r7, #0]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d008      	beq.n	8015568 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015556:	4b13      	ldr	r3, [pc, #76]	; (80155a4 <prvProcessTimerOrBlockTask+0x90>)
 8015558:	681b      	ldr	r3, [r3, #0]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d101      	bne.n	8015564 <prvProcessTimerOrBlockTask+0x50>
 8015560:	2301      	movs	r3, #1
 8015562:	e000      	b.n	8015566 <prvProcessTimerOrBlockTask+0x52>
 8015564:	2300      	movs	r3, #0
 8015566:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015568:	4b0f      	ldr	r3, [pc, #60]	; (80155a8 <prvProcessTimerOrBlockTask+0x94>)
 801556a:	6818      	ldr	r0, [r3, #0]
 801556c:	687a      	ldr	r2, [r7, #4]
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	1ad3      	subs	r3, r2, r3
 8015572:	683a      	ldr	r2, [r7, #0]
 8015574:	4619      	mov	r1, r3
 8015576:	f7fe fdcf 	bl	8014118 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801557a:	f7ff f965 	bl	8014848 <xTaskResumeAll>
 801557e:	4603      	mov	r3, r0
 8015580:	2b00      	cmp	r3, #0
 8015582:	d10a      	bne.n	801559a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015584:	4b09      	ldr	r3, [pc, #36]	; (80155ac <prvProcessTimerOrBlockTask+0x98>)
 8015586:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801558a:	601a      	str	r2, [r3, #0]
 801558c:	f3bf 8f4f 	dsb	sy
 8015590:	f3bf 8f6f 	isb	sy
}
 8015594:	e001      	b.n	801559a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015596:	f7ff f957 	bl	8014848 <xTaskResumeAll>
}
 801559a:	bf00      	nop
 801559c:	3710      	adds	r7, #16
 801559e:	46bd      	mov	sp, r7
 80155a0:	bd80      	pop	{r7, pc}
 80155a2:	bf00      	nop
 80155a4:	24001d34 	.word	0x24001d34
 80155a8:	24001d38 	.word	0x24001d38
 80155ac:	e000ed04 	.word	0xe000ed04

080155b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80155b0:	b480      	push	{r7}
 80155b2:	b085      	sub	sp, #20
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80155b8:	4b0e      	ldr	r3, [pc, #56]	; (80155f4 <prvGetNextExpireTime+0x44>)
 80155ba:	681b      	ldr	r3, [r3, #0]
 80155bc:	681b      	ldr	r3, [r3, #0]
 80155be:	2b00      	cmp	r3, #0
 80155c0:	d101      	bne.n	80155c6 <prvGetNextExpireTime+0x16>
 80155c2:	2201      	movs	r2, #1
 80155c4:	e000      	b.n	80155c8 <prvGetNextExpireTime+0x18>
 80155c6:	2200      	movs	r2, #0
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	681b      	ldr	r3, [r3, #0]
 80155d0:	2b00      	cmp	r3, #0
 80155d2:	d105      	bne.n	80155e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80155d4:	4b07      	ldr	r3, [pc, #28]	; (80155f4 <prvGetNextExpireTime+0x44>)
 80155d6:	681b      	ldr	r3, [r3, #0]
 80155d8:	68db      	ldr	r3, [r3, #12]
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	60fb      	str	r3, [r7, #12]
 80155de:	e001      	b.n	80155e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80155e0:	2300      	movs	r3, #0
 80155e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80155e4:	68fb      	ldr	r3, [r7, #12]
}
 80155e6:	4618      	mov	r0, r3
 80155e8:	3714      	adds	r7, #20
 80155ea:	46bd      	mov	sp, r7
 80155ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155f0:	4770      	bx	lr
 80155f2:	bf00      	nop
 80155f4:	24001d30 	.word	0x24001d30

080155f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b084      	sub	sp, #16
 80155fc:	af00      	add	r7, sp, #0
 80155fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8015600:	f7ff f9c0 	bl	8014984 <xTaskGetTickCount>
 8015604:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8015606:	4b0b      	ldr	r3, [pc, #44]	; (8015634 <prvSampleTimeNow+0x3c>)
 8015608:	681b      	ldr	r3, [r3, #0]
 801560a:	68fa      	ldr	r2, [r7, #12]
 801560c:	429a      	cmp	r2, r3
 801560e:	d205      	bcs.n	801561c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015610:	f000 f936 	bl	8015880 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	2201      	movs	r2, #1
 8015618:	601a      	str	r2, [r3, #0]
 801561a:	e002      	b.n	8015622 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	2200      	movs	r2, #0
 8015620:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015622:	4a04      	ldr	r2, [pc, #16]	; (8015634 <prvSampleTimeNow+0x3c>)
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8015628:	68fb      	ldr	r3, [r7, #12]
}
 801562a:	4618      	mov	r0, r3
 801562c:	3710      	adds	r7, #16
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	24001d40 	.word	0x24001d40

08015638 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8015638:	b580      	push	{r7, lr}
 801563a:	b086      	sub	sp, #24
 801563c:	af00      	add	r7, sp, #0
 801563e:	60f8      	str	r0, [r7, #12]
 8015640:	60b9      	str	r1, [r7, #8]
 8015642:	607a      	str	r2, [r7, #4]
 8015644:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015646:	2300      	movs	r3, #0
 8015648:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801564a:	68fb      	ldr	r3, [r7, #12]
 801564c:	68ba      	ldr	r2, [r7, #8]
 801564e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	68fa      	ldr	r2, [r7, #12]
 8015654:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015656:	68ba      	ldr	r2, [r7, #8]
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	429a      	cmp	r2, r3
 801565c:	d812      	bhi.n	8015684 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801565e:	687a      	ldr	r2, [r7, #4]
 8015660:	683b      	ldr	r3, [r7, #0]
 8015662:	1ad2      	subs	r2, r2, r3
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	699b      	ldr	r3, [r3, #24]
 8015668:	429a      	cmp	r2, r3
 801566a:	d302      	bcc.n	8015672 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801566c:	2301      	movs	r3, #1
 801566e:	617b      	str	r3, [r7, #20]
 8015670:	e01b      	b.n	80156aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015672:	4b10      	ldr	r3, [pc, #64]	; (80156b4 <prvInsertTimerInActiveList+0x7c>)
 8015674:	681a      	ldr	r2, [r3, #0]
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	3304      	adds	r3, #4
 801567a:	4619      	mov	r1, r3
 801567c:	4610      	mov	r0, r2
 801567e:	f7fd ff76 	bl	801356e <vListInsert>
 8015682:	e012      	b.n	80156aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015684:	687a      	ldr	r2, [r7, #4]
 8015686:	683b      	ldr	r3, [r7, #0]
 8015688:	429a      	cmp	r2, r3
 801568a:	d206      	bcs.n	801569a <prvInsertTimerInActiveList+0x62>
 801568c:	68ba      	ldr	r2, [r7, #8]
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	429a      	cmp	r2, r3
 8015692:	d302      	bcc.n	801569a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015694:	2301      	movs	r3, #1
 8015696:	617b      	str	r3, [r7, #20]
 8015698:	e007      	b.n	80156aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801569a:	4b07      	ldr	r3, [pc, #28]	; (80156b8 <prvInsertTimerInActiveList+0x80>)
 801569c:	681a      	ldr	r2, [r3, #0]
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	3304      	adds	r3, #4
 80156a2:	4619      	mov	r1, r3
 80156a4:	4610      	mov	r0, r2
 80156a6:	f7fd ff62 	bl	801356e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80156aa:	697b      	ldr	r3, [r7, #20]
}
 80156ac:	4618      	mov	r0, r3
 80156ae:	3718      	adds	r7, #24
 80156b0:	46bd      	mov	sp, r7
 80156b2:	bd80      	pop	{r7, pc}
 80156b4:	24001d34 	.word	0x24001d34
 80156b8:	24001d30 	.word	0x24001d30

080156bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80156bc:	b580      	push	{r7, lr}
 80156be:	b08e      	sub	sp, #56	; 0x38
 80156c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80156c2:	e0ca      	b.n	801585a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80156c4:	687b      	ldr	r3, [r7, #4]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	da18      	bge.n	80156fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80156ca:	1d3b      	adds	r3, r7, #4
 80156cc:	3304      	adds	r3, #4
 80156ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80156d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156d2:	2b00      	cmp	r3, #0
 80156d4:	d10a      	bne.n	80156ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80156d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156da:	f383 8811 	msr	BASEPRI, r3
 80156de:	f3bf 8f6f 	isb	sy
 80156e2:	f3bf 8f4f 	dsb	sy
 80156e6:	61fb      	str	r3, [r7, #28]
}
 80156e8:	bf00      	nop
 80156ea:	e7fe      	b.n	80156ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80156ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156f2:	6850      	ldr	r0, [r2, #4]
 80156f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156f6:	6892      	ldr	r2, [r2, #8]
 80156f8:	4611      	mov	r1, r2
 80156fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80156fc:	687b      	ldr	r3, [r7, #4]
 80156fe:	2b00      	cmp	r3, #0
 8015700:	f2c0 80aa 	blt.w	8015858 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8015708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801570a:	695b      	ldr	r3, [r3, #20]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d004      	beq.n	801571a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015710:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015712:	3304      	adds	r3, #4
 8015714:	4618      	mov	r0, r3
 8015716:	f7fd ff63 	bl	80135e0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801571a:	463b      	mov	r3, r7
 801571c:	4618      	mov	r0, r3
 801571e:	f7ff ff6b 	bl	80155f8 <prvSampleTimeNow>
 8015722:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015724:	687b      	ldr	r3, [r7, #4]
 8015726:	2b09      	cmp	r3, #9
 8015728:	f200 8097 	bhi.w	801585a <prvProcessReceivedCommands+0x19e>
 801572c:	a201      	add	r2, pc, #4	; (adr r2, 8015734 <prvProcessReceivedCommands+0x78>)
 801572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015732:	bf00      	nop
 8015734:	0801575d 	.word	0x0801575d
 8015738:	0801575d 	.word	0x0801575d
 801573c:	0801575d 	.word	0x0801575d
 8015740:	080157d1 	.word	0x080157d1
 8015744:	080157e5 	.word	0x080157e5
 8015748:	0801582f 	.word	0x0801582f
 801574c:	0801575d 	.word	0x0801575d
 8015750:	0801575d 	.word	0x0801575d
 8015754:	080157d1 	.word	0x080157d1
 8015758:	080157e5 	.word	0x080157e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801575e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015762:	f043 0301 	orr.w	r3, r3, #1
 8015766:	b2da      	uxtb	r2, r3
 8015768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801576a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801576e:	68ba      	ldr	r2, [r7, #8]
 8015770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015772:	699b      	ldr	r3, [r3, #24]
 8015774:	18d1      	adds	r1, r2, r3
 8015776:	68bb      	ldr	r3, [r7, #8]
 8015778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801577a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801577c:	f7ff ff5c 	bl	8015638 <prvInsertTimerInActiveList>
 8015780:	4603      	mov	r3, r0
 8015782:	2b00      	cmp	r3, #0
 8015784:	d069      	beq.n	801585a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015788:	6a1b      	ldr	r3, [r3, #32]
 801578a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801578c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015790:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015794:	f003 0304 	and.w	r3, r3, #4
 8015798:	2b00      	cmp	r3, #0
 801579a:	d05e      	beq.n	801585a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801579c:	68ba      	ldr	r2, [r7, #8]
 801579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a0:	699b      	ldr	r3, [r3, #24]
 80157a2:	441a      	add	r2, r3
 80157a4:	2300      	movs	r3, #0
 80157a6:	9300      	str	r3, [sp, #0]
 80157a8:	2300      	movs	r3, #0
 80157aa:	2100      	movs	r1, #0
 80157ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157ae:	f7ff fe05 	bl	80153bc <xTimerGenericCommand>
 80157b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80157b4:	6a3b      	ldr	r3, [r7, #32]
 80157b6:	2b00      	cmp	r3, #0
 80157b8:	d14f      	bne.n	801585a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80157ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157be:	f383 8811 	msr	BASEPRI, r3
 80157c2:	f3bf 8f6f 	isb	sy
 80157c6:	f3bf 8f4f 	dsb	sy
 80157ca:	61bb      	str	r3, [r7, #24]
}
 80157cc:	bf00      	nop
 80157ce:	e7fe      	b.n	80157ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80157d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157d6:	f023 0301 	bic.w	r3, r3, #1
 80157da:	b2da      	uxtb	r2, r3
 80157dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80157e2:	e03a      	b.n	801585a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80157e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157ea:	f043 0301 	orr.w	r3, r3, #1
 80157ee:	b2da      	uxtb	r2, r3
 80157f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80157f6:	68ba      	ldr	r2, [r7, #8]
 80157f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80157fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157fe:	699b      	ldr	r3, [r3, #24]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d10a      	bne.n	801581a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8015804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015808:	f383 8811 	msr	BASEPRI, r3
 801580c:	f3bf 8f6f 	isb	sy
 8015810:	f3bf 8f4f 	dsb	sy
 8015814:	617b      	str	r3, [r7, #20]
}
 8015816:	bf00      	nop
 8015818:	e7fe      	b.n	8015818 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801581c:	699a      	ldr	r2, [r3, #24]
 801581e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015820:	18d1      	adds	r1, r2, r3
 8015822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015828:	f7ff ff06 	bl	8015638 <prvInsertTimerInActiveList>
					break;
 801582c:	e015      	b.n	801585a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 801582e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015834:	f003 0302 	and.w	r3, r3, #2
 8015838:	2b00      	cmp	r3, #0
 801583a:	d103      	bne.n	8015844 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 801583c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801583e:	f000 fbff 	bl	8016040 <vPortFree>
 8015842:	e00a      	b.n	801585a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015846:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801584a:	f023 0301 	bic.w	r3, r3, #1
 801584e:	b2da      	uxtb	r2, r3
 8015850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015852:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015856:	e000      	b.n	801585a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015858:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801585a:	4b08      	ldr	r3, [pc, #32]	; (801587c <prvProcessReceivedCommands+0x1c0>)
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	1d39      	adds	r1, r7, #4
 8015860:	2200      	movs	r2, #0
 8015862:	4618      	mov	r0, r3
 8015864:	f7fe f9be 	bl	8013be4 <xQueueReceive>
 8015868:	4603      	mov	r3, r0
 801586a:	2b00      	cmp	r3, #0
 801586c:	f47f af2a 	bne.w	80156c4 <prvProcessReceivedCommands+0x8>
	}
}
 8015870:	bf00      	nop
 8015872:	bf00      	nop
 8015874:	3730      	adds	r7, #48	; 0x30
 8015876:	46bd      	mov	sp, r7
 8015878:	bd80      	pop	{r7, pc}
 801587a:	bf00      	nop
 801587c:	24001d38 	.word	0x24001d38

08015880 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015880:	b580      	push	{r7, lr}
 8015882:	b088      	sub	sp, #32
 8015884:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015886:	e048      	b.n	801591a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015888:	4b2d      	ldr	r3, [pc, #180]	; (8015940 <prvSwitchTimerLists+0xc0>)
 801588a:	681b      	ldr	r3, [r3, #0]
 801588c:	68db      	ldr	r3, [r3, #12]
 801588e:	681b      	ldr	r3, [r3, #0]
 8015890:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015892:	4b2b      	ldr	r3, [pc, #172]	; (8015940 <prvSwitchTimerLists+0xc0>)
 8015894:	681b      	ldr	r3, [r3, #0]
 8015896:	68db      	ldr	r3, [r3, #12]
 8015898:	68db      	ldr	r3, [r3, #12]
 801589a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801589c:	68fb      	ldr	r3, [r7, #12]
 801589e:	3304      	adds	r3, #4
 80158a0:	4618      	mov	r0, r3
 80158a2:	f7fd fe9d 	bl	80135e0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80158a6:	68fb      	ldr	r3, [r7, #12]
 80158a8:	6a1b      	ldr	r3, [r3, #32]
 80158aa:	68f8      	ldr	r0, [r7, #12]
 80158ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80158b4:	f003 0304 	and.w	r3, r3, #4
 80158b8:	2b00      	cmp	r3, #0
 80158ba:	d02e      	beq.n	801591a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80158bc:	68fb      	ldr	r3, [r7, #12]
 80158be:	699b      	ldr	r3, [r3, #24]
 80158c0:	693a      	ldr	r2, [r7, #16]
 80158c2:	4413      	add	r3, r2
 80158c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80158c6:	68ba      	ldr	r2, [r7, #8]
 80158c8:	693b      	ldr	r3, [r7, #16]
 80158ca:	429a      	cmp	r2, r3
 80158cc:	d90e      	bls.n	80158ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80158ce:	68fb      	ldr	r3, [r7, #12]
 80158d0:	68ba      	ldr	r2, [r7, #8]
 80158d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	68fa      	ldr	r2, [r7, #12]
 80158d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80158da:	4b19      	ldr	r3, [pc, #100]	; (8015940 <prvSwitchTimerLists+0xc0>)
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	68fb      	ldr	r3, [r7, #12]
 80158e0:	3304      	adds	r3, #4
 80158e2:	4619      	mov	r1, r3
 80158e4:	4610      	mov	r0, r2
 80158e6:	f7fd fe42 	bl	801356e <vListInsert>
 80158ea:	e016      	b.n	801591a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80158ec:	2300      	movs	r3, #0
 80158ee:	9300      	str	r3, [sp, #0]
 80158f0:	2300      	movs	r3, #0
 80158f2:	693a      	ldr	r2, [r7, #16]
 80158f4:	2100      	movs	r1, #0
 80158f6:	68f8      	ldr	r0, [r7, #12]
 80158f8:	f7ff fd60 	bl	80153bc <xTimerGenericCommand>
 80158fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	2b00      	cmp	r3, #0
 8015902:	d10a      	bne.n	801591a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8015904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015908:	f383 8811 	msr	BASEPRI, r3
 801590c:	f3bf 8f6f 	isb	sy
 8015910:	f3bf 8f4f 	dsb	sy
 8015914:	603b      	str	r3, [r7, #0]
}
 8015916:	bf00      	nop
 8015918:	e7fe      	b.n	8015918 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801591a:	4b09      	ldr	r3, [pc, #36]	; (8015940 <prvSwitchTimerLists+0xc0>)
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	681b      	ldr	r3, [r3, #0]
 8015920:	2b00      	cmp	r3, #0
 8015922:	d1b1      	bne.n	8015888 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015924:	4b06      	ldr	r3, [pc, #24]	; (8015940 <prvSwitchTimerLists+0xc0>)
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801592a:	4b06      	ldr	r3, [pc, #24]	; (8015944 <prvSwitchTimerLists+0xc4>)
 801592c:	681b      	ldr	r3, [r3, #0]
 801592e:	4a04      	ldr	r2, [pc, #16]	; (8015940 <prvSwitchTimerLists+0xc0>)
 8015930:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015932:	4a04      	ldr	r2, [pc, #16]	; (8015944 <prvSwitchTimerLists+0xc4>)
 8015934:	697b      	ldr	r3, [r7, #20]
 8015936:	6013      	str	r3, [r2, #0]
}
 8015938:	bf00      	nop
 801593a:	3718      	adds	r7, #24
 801593c:	46bd      	mov	sp, r7
 801593e:	bd80      	pop	{r7, pc}
 8015940:	24001d30 	.word	0x24001d30
 8015944:	24001d34 	.word	0x24001d34

08015948 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015948:	b580      	push	{r7, lr}
 801594a:	b082      	sub	sp, #8
 801594c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801594e:	f000 f989 	bl	8015c64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015952:	4b15      	ldr	r3, [pc, #84]	; (80159a8 <prvCheckForValidListAndQueue+0x60>)
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	2b00      	cmp	r3, #0
 8015958:	d120      	bne.n	801599c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801595a:	4814      	ldr	r0, [pc, #80]	; (80159ac <prvCheckForValidListAndQueue+0x64>)
 801595c:	f7fd fdb6 	bl	80134cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015960:	4813      	ldr	r0, [pc, #76]	; (80159b0 <prvCheckForValidListAndQueue+0x68>)
 8015962:	f7fd fdb3 	bl	80134cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015966:	4b13      	ldr	r3, [pc, #76]	; (80159b4 <prvCheckForValidListAndQueue+0x6c>)
 8015968:	4a10      	ldr	r2, [pc, #64]	; (80159ac <prvCheckForValidListAndQueue+0x64>)
 801596a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801596c:	4b12      	ldr	r3, [pc, #72]	; (80159b8 <prvCheckForValidListAndQueue+0x70>)
 801596e:	4a10      	ldr	r2, [pc, #64]	; (80159b0 <prvCheckForValidListAndQueue+0x68>)
 8015970:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015972:	2300      	movs	r3, #0
 8015974:	9300      	str	r3, [sp, #0]
 8015976:	4b11      	ldr	r3, [pc, #68]	; (80159bc <prvCheckForValidListAndQueue+0x74>)
 8015978:	4a11      	ldr	r2, [pc, #68]	; (80159c0 <prvCheckForValidListAndQueue+0x78>)
 801597a:	2110      	movs	r1, #16
 801597c:	200a      	movs	r0, #10
 801597e:	f7fd fec1 	bl	8013704 <xQueueGenericCreateStatic>
 8015982:	4603      	mov	r3, r0
 8015984:	4a08      	ldr	r2, [pc, #32]	; (80159a8 <prvCheckForValidListAndQueue+0x60>)
 8015986:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015988:	4b07      	ldr	r3, [pc, #28]	; (80159a8 <prvCheckForValidListAndQueue+0x60>)
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d005      	beq.n	801599c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015990:	4b05      	ldr	r3, [pc, #20]	; (80159a8 <prvCheckForValidListAndQueue+0x60>)
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	490b      	ldr	r1, [pc, #44]	; (80159c4 <prvCheckForValidListAndQueue+0x7c>)
 8015996:	4618      	mov	r0, r3
 8015998:	f7fe fb94 	bl	80140c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801599c:	f000 f992 	bl	8015cc4 <vPortExitCritical>
}
 80159a0:	bf00      	nop
 80159a2:	46bd      	mov	sp, r7
 80159a4:	bd80      	pop	{r7, pc}
 80159a6:	bf00      	nop
 80159a8:	24001d38 	.word	0x24001d38
 80159ac:	24001d08 	.word	0x24001d08
 80159b0:	24001d1c 	.word	0x24001d1c
 80159b4:	24001d30 	.word	0x24001d30
 80159b8:	24001d34 	.word	0x24001d34
 80159bc:	24001de4 	.word	0x24001de4
 80159c0:	24001d44 	.word	0x24001d44
 80159c4:	08016f9c 	.word	0x08016f9c

080159c8 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80159c8:	b580      	push	{r7, lr}
 80159ca:	b08a      	sub	sp, #40	; 0x28
 80159cc:	af00      	add	r7, sp, #0
 80159ce:	60f8      	str	r0, [r7, #12]
 80159d0:	60b9      	str	r1, [r7, #8]
 80159d2:	607a      	str	r2, [r7, #4]
 80159d4:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80159d6:	f06f 0301 	mvn.w	r3, #1
 80159da:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80159e0:	68bb      	ldr	r3, [r7, #8]
 80159e2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80159e8:	4b06      	ldr	r3, [pc, #24]	; (8015a04 <xTimerPendFunctionCallFromISR+0x3c>)
 80159ea:	6818      	ldr	r0, [r3, #0]
 80159ec:	f107 0114 	add.w	r1, r7, #20
 80159f0:	2300      	movs	r3, #0
 80159f2:	683a      	ldr	r2, [r7, #0]
 80159f4:	f7fe f85a 	bl	8013aac <xQueueGenericSendFromISR>
 80159f8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80159fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80159fc:	4618      	mov	r0, r3
 80159fe:	3728      	adds	r7, #40	; 0x28
 8015a00:	46bd      	mov	sp, r7
 8015a02:	bd80      	pop	{r7, pc}
 8015a04:	24001d38 	.word	0x24001d38

08015a08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8015a08:	b480      	push	{r7}
 8015a0a:	b085      	sub	sp, #20
 8015a0c:	af00      	add	r7, sp, #0
 8015a0e:	60f8      	str	r0, [r7, #12]
 8015a10:	60b9      	str	r1, [r7, #8]
 8015a12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	3b04      	subs	r3, #4
 8015a18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8015a1a:	68fb      	ldr	r3, [r7, #12]
 8015a1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015a20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	3b04      	subs	r3, #4
 8015a26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8015a28:	68bb      	ldr	r3, [r7, #8]
 8015a2a:	f023 0201 	bic.w	r2, r3, #1
 8015a2e:	68fb      	ldr	r3, [r7, #12]
 8015a30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	3b04      	subs	r3, #4
 8015a36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8015a38:	4a0c      	ldr	r2, [pc, #48]	; (8015a6c <pxPortInitialiseStack+0x64>)
 8015a3a:	68fb      	ldr	r3, [r7, #12]
 8015a3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015a3e:	68fb      	ldr	r3, [r7, #12]
 8015a40:	3b14      	subs	r3, #20
 8015a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015a44:	687a      	ldr	r2, [r7, #4]
 8015a46:	68fb      	ldr	r3, [r7, #12]
 8015a48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8015a4a:	68fb      	ldr	r3, [r7, #12]
 8015a4c:	3b04      	subs	r3, #4
 8015a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	f06f 0202 	mvn.w	r2, #2
 8015a56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015a58:	68fb      	ldr	r3, [r7, #12]
 8015a5a:	3b20      	subs	r3, #32
 8015a5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015a5e:	68fb      	ldr	r3, [r7, #12]
}
 8015a60:	4618      	mov	r0, r3
 8015a62:	3714      	adds	r7, #20
 8015a64:	46bd      	mov	sp, r7
 8015a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6a:	4770      	bx	lr
 8015a6c:	08015a71 	.word	0x08015a71

08015a70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015a70:	b480      	push	{r7}
 8015a72:	b085      	sub	sp, #20
 8015a74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015a76:	2300      	movs	r3, #0
 8015a78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8015a7a:	4b12      	ldr	r3, [pc, #72]	; (8015ac4 <prvTaskExitError+0x54>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015a82:	d00a      	beq.n	8015a9a <prvTaskExitError+0x2a>
	__asm volatile
 8015a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a88:	f383 8811 	msr	BASEPRI, r3
 8015a8c:	f3bf 8f6f 	isb	sy
 8015a90:	f3bf 8f4f 	dsb	sy
 8015a94:	60fb      	str	r3, [r7, #12]
}
 8015a96:	bf00      	nop
 8015a98:	e7fe      	b.n	8015a98 <prvTaskExitError+0x28>
	__asm volatile
 8015a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a9e:	f383 8811 	msr	BASEPRI, r3
 8015aa2:	f3bf 8f6f 	isb	sy
 8015aa6:	f3bf 8f4f 	dsb	sy
 8015aaa:	60bb      	str	r3, [r7, #8]
}
 8015aac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8015aae:	bf00      	nop
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d0fc      	beq.n	8015ab0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015ab6:	bf00      	nop
 8015ab8:	bf00      	nop
 8015aba:	3714      	adds	r7, #20
 8015abc:	46bd      	mov	sp, r7
 8015abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ac2:	4770      	bx	lr
 8015ac4:	240000a0 	.word	0x240000a0
	...

08015ad0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015ad0:	4b07      	ldr	r3, [pc, #28]	; (8015af0 <pxCurrentTCBConst2>)
 8015ad2:	6819      	ldr	r1, [r3, #0]
 8015ad4:	6808      	ldr	r0, [r1, #0]
 8015ad6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015ada:	f380 8809 	msr	PSP, r0
 8015ade:	f3bf 8f6f 	isb	sy
 8015ae2:	f04f 0000 	mov.w	r0, #0
 8015ae6:	f380 8811 	msr	BASEPRI, r0
 8015aea:	4770      	bx	lr
 8015aec:	f3af 8000 	nop.w

08015af0 <pxCurrentTCBConst2>:
 8015af0:	24001808 	.word	0x24001808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8015af4:	bf00      	nop
 8015af6:	bf00      	nop

08015af8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8015af8:	4808      	ldr	r0, [pc, #32]	; (8015b1c <prvPortStartFirstTask+0x24>)
 8015afa:	6800      	ldr	r0, [r0, #0]
 8015afc:	6800      	ldr	r0, [r0, #0]
 8015afe:	f380 8808 	msr	MSP, r0
 8015b02:	f04f 0000 	mov.w	r0, #0
 8015b06:	f380 8814 	msr	CONTROL, r0
 8015b0a:	b662      	cpsie	i
 8015b0c:	b661      	cpsie	f
 8015b0e:	f3bf 8f4f 	dsb	sy
 8015b12:	f3bf 8f6f 	isb	sy
 8015b16:	df00      	svc	0
 8015b18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015b1a:	bf00      	nop
 8015b1c:	e000ed08 	.word	0xe000ed08

08015b20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015b20:	b580      	push	{r7, lr}
 8015b22:	b086      	sub	sp, #24
 8015b24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015b26:	4b46      	ldr	r3, [pc, #280]	; (8015c40 <xPortStartScheduler+0x120>)
 8015b28:	681b      	ldr	r3, [r3, #0]
 8015b2a:	4a46      	ldr	r2, [pc, #280]	; (8015c44 <xPortStartScheduler+0x124>)
 8015b2c:	4293      	cmp	r3, r2
 8015b2e:	d10a      	bne.n	8015b46 <xPortStartScheduler+0x26>
	__asm volatile
 8015b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b34:	f383 8811 	msr	BASEPRI, r3
 8015b38:	f3bf 8f6f 	isb	sy
 8015b3c:	f3bf 8f4f 	dsb	sy
 8015b40:	613b      	str	r3, [r7, #16]
}
 8015b42:	bf00      	nop
 8015b44:	e7fe      	b.n	8015b44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015b46:	4b3e      	ldr	r3, [pc, #248]	; (8015c40 <xPortStartScheduler+0x120>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	4a3f      	ldr	r2, [pc, #252]	; (8015c48 <xPortStartScheduler+0x128>)
 8015b4c:	4293      	cmp	r3, r2
 8015b4e:	d10a      	bne.n	8015b66 <xPortStartScheduler+0x46>
	__asm volatile
 8015b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b54:	f383 8811 	msr	BASEPRI, r3
 8015b58:	f3bf 8f6f 	isb	sy
 8015b5c:	f3bf 8f4f 	dsb	sy
 8015b60:	60fb      	str	r3, [r7, #12]
}
 8015b62:	bf00      	nop
 8015b64:	e7fe      	b.n	8015b64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015b66:	4b39      	ldr	r3, [pc, #228]	; (8015c4c <xPortStartScheduler+0x12c>)
 8015b68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015b6a:	697b      	ldr	r3, [r7, #20]
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	b2db      	uxtb	r3, r3
 8015b70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015b72:	697b      	ldr	r3, [r7, #20]
 8015b74:	22ff      	movs	r2, #255	; 0xff
 8015b76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	781b      	ldrb	r3, [r3, #0]
 8015b7c:	b2db      	uxtb	r3, r3
 8015b7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015b80:	78fb      	ldrb	r3, [r7, #3]
 8015b82:	b2db      	uxtb	r3, r3
 8015b84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015b88:	b2da      	uxtb	r2, r3
 8015b8a:	4b31      	ldr	r3, [pc, #196]	; (8015c50 <xPortStartScheduler+0x130>)
 8015b8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015b8e:	4b31      	ldr	r3, [pc, #196]	; (8015c54 <xPortStartScheduler+0x134>)
 8015b90:	2207      	movs	r2, #7
 8015b92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015b94:	e009      	b.n	8015baa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015b96:	4b2f      	ldr	r3, [pc, #188]	; (8015c54 <xPortStartScheduler+0x134>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	3b01      	subs	r3, #1
 8015b9c:	4a2d      	ldr	r2, [pc, #180]	; (8015c54 <xPortStartScheduler+0x134>)
 8015b9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015ba0:	78fb      	ldrb	r3, [r7, #3]
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	005b      	lsls	r3, r3, #1
 8015ba6:	b2db      	uxtb	r3, r3
 8015ba8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015baa:	78fb      	ldrb	r3, [r7, #3]
 8015bac:	b2db      	uxtb	r3, r3
 8015bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015bb2:	2b80      	cmp	r3, #128	; 0x80
 8015bb4:	d0ef      	beq.n	8015b96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015bb6:	4b27      	ldr	r3, [pc, #156]	; (8015c54 <xPortStartScheduler+0x134>)
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	f1c3 0307 	rsb	r3, r3, #7
 8015bbe:	2b04      	cmp	r3, #4
 8015bc0:	d00a      	beq.n	8015bd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc6:	f383 8811 	msr	BASEPRI, r3
 8015bca:	f3bf 8f6f 	isb	sy
 8015bce:	f3bf 8f4f 	dsb	sy
 8015bd2:	60bb      	str	r3, [r7, #8]
}
 8015bd4:	bf00      	nop
 8015bd6:	e7fe      	b.n	8015bd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015bd8:	4b1e      	ldr	r3, [pc, #120]	; (8015c54 <xPortStartScheduler+0x134>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	021b      	lsls	r3, r3, #8
 8015bde:	4a1d      	ldr	r2, [pc, #116]	; (8015c54 <xPortStartScheduler+0x134>)
 8015be0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015be2:	4b1c      	ldr	r3, [pc, #112]	; (8015c54 <xPortStartScheduler+0x134>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015bea:	4a1a      	ldr	r2, [pc, #104]	; (8015c54 <xPortStartScheduler+0x134>)
 8015bec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015bee:	687b      	ldr	r3, [r7, #4]
 8015bf0:	b2da      	uxtb	r2, r3
 8015bf2:	697b      	ldr	r3, [r7, #20]
 8015bf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015bf6:	4b18      	ldr	r3, [pc, #96]	; (8015c58 <xPortStartScheduler+0x138>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	4a17      	ldr	r2, [pc, #92]	; (8015c58 <xPortStartScheduler+0x138>)
 8015bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015c00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015c02:	4b15      	ldr	r3, [pc, #84]	; (8015c58 <xPortStartScheduler+0x138>)
 8015c04:	681b      	ldr	r3, [r3, #0]
 8015c06:	4a14      	ldr	r2, [pc, #80]	; (8015c58 <xPortStartScheduler+0x138>)
 8015c08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015c0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015c0e:	f000 f8dd 	bl	8015dcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015c12:	4b12      	ldr	r3, [pc, #72]	; (8015c5c <xPortStartScheduler+0x13c>)
 8015c14:	2200      	movs	r2, #0
 8015c16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015c18:	f000 f8fc 	bl	8015e14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015c1c:	4b10      	ldr	r3, [pc, #64]	; (8015c60 <xPortStartScheduler+0x140>)
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	4a0f      	ldr	r2, [pc, #60]	; (8015c60 <xPortStartScheduler+0x140>)
 8015c22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015c26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015c28:	f7ff ff66 	bl	8015af8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015c2c:	f7fe ff7c 	bl	8014b28 <vTaskSwitchContext>
	prvTaskExitError();
 8015c30:	f7ff ff1e 	bl	8015a70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015c34:	2300      	movs	r3, #0
}
 8015c36:	4618      	mov	r0, r3
 8015c38:	3718      	adds	r7, #24
 8015c3a:	46bd      	mov	sp, r7
 8015c3c:	bd80      	pop	{r7, pc}
 8015c3e:	bf00      	nop
 8015c40:	e000ed00 	.word	0xe000ed00
 8015c44:	410fc271 	.word	0x410fc271
 8015c48:	410fc270 	.word	0x410fc270
 8015c4c:	e000e400 	.word	0xe000e400
 8015c50:	24001e34 	.word	0x24001e34
 8015c54:	24001e38 	.word	0x24001e38
 8015c58:	e000ed20 	.word	0xe000ed20
 8015c5c:	240000a0 	.word	0x240000a0
 8015c60:	e000ef34 	.word	0xe000ef34

08015c64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015c64:	b480      	push	{r7}
 8015c66:	b083      	sub	sp, #12
 8015c68:	af00      	add	r7, sp, #0
	__asm volatile
 8015c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c6e:	f383 8811 	msr	BASEPRI, r3
 8015c72:	f3bf 8f6f 	isb	sy
 8015c76:	f3bf 8f4f 	dsb	sy
 8015c7a:	607b      	str	r3, [r7, #4]
}
 8015c7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015c7e:	4b0f      	ldr	r3, [pc, #60]	; (8015cbc <vPortEnterCritical+0x58>)
 8015c80:	681b      	ldr	r3, [r3, #0]
 8015c82:	3301      	adds	r3, #1
 8015c84:	4a0d      	ldr	r2, [pc, #52]	; (8015cbc <vPortEnterCritical+0x58>)
 8015c86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015c88:	4b0c      	ldr	r3, [pc, #48]	; (8015cbc <vPortEnterCritical+0x58>)
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	2b01      	cmp	r3, #1
 8015c8e:	d10f      	bne.n	8015cb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015c90:	4b0b      	ldr	r3, [pc, #44]	; (8015cc0 <vPortEnterCritical+0x5c>)
 8015c92:	681b      	ldr	r3, [r3, #0]
 8015c94:	b2db      	uxtb	r3, r3
 8015c96:	2b00      	cmp	r3, #0
 8015c98:	d00a      	beq.n	8015cb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8015c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c9e:	f383 8811 	msr	BASEPRI, r3
 8015ca2:	f3bf 8f6f 	isb	sy
 8015ca6:	f3bf 8f4f 	dsb	sy
 8015caa:	603b      	str	r3, [r7, #0]
}
 8015cac:	bf00      	nop
 8015cae:	e7fe      	b.n	8015cae <vPortEnterCritical+0x4a>
	}
}
 8015cb0:	bf00      	nop
 8015cb2:	370c      	adds	r7, #12
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cba:	4770      	bx	lr
 8015cbc:	240000a0 	.word	0x240000a0
 8015cc0:	e000ed04 	.word	0xe000ed04

08015cc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b083      	sub	sp, #12
 8015cc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015cca:	4b12      	ldr	r3, [pc, #72]	; (8015d14 <vPortExitCritical+0x50>)
 8015ccc:	681b      	ldr	r3, [r3, #0]
 8015cce:	2b00      	cmp	r3, #0
 8015cd0:	d10a      	bne.n	8015ce8 <vPortExitCritical+0x24>
	__asm volatile
 8015cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cd6:	f383 8811 	msr	BASEPRI, r3
 8015cda:	f3bf 8f6f 	isb	sy
 8015cde:	f3bf 8f4f 	dsb	sy
 8015ce2:	607b      	str	r3, [r7, #4]
}
 8015ce4:	bf00      	nop
 8015ce6:	e7fe      	b.n	8015ce6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015ce8:	4b0a      	ldr	r3, [pc, #40]	; (8015d14 <vPortExitCritical+0x50>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	3b01      	subs	r3, #1
 8015cee:	4a09      	ldr	r2, [pc, #36]	; (8015d14 <vPortExitCritical+0x50>)
 8015cf0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015cf2:	4b08      	ldr	r3, [pc, #32]	; (8015d14 <vPortExitCritical+0x50>)
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d105      	bne.n	8015d06 <vPortExitCritical+0x42>
 8015cfa:	2300      	movs	r3, #0
 8015cfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015cfe:	683b      	ldr	r3, [r7, #0]
 8015d00:	f383 8811 	msr	BASEPRI, r3
}
 8015d04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015d06:	bf00      	nop
 8015d08:	370c      	adds	r7, #12
 8015d0a:	46bd      	mov	sp, r7
 8015d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d10:	4770      	bx	lr
 8015d12:	bf00      	nop
 8015d14:	240000a0 	.word	0x240000a0
	...

08015d20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015d20:	f3ef 8009 	mrs	r0, PSP
 8015d24:	f3bf 8f6f 	isb	sy
 8015d28:	4b15      	ldr	r3, [pc, #84]	; (8015d80 <pxCurrentTCBConst>)
 8015d2a:	681a      	ldr	r2, [r3, #0]
 8015d2c:	f01e 0f10 	tst.w	lr, #16
 8015d30:	bf08      	it	eq
 8015d32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015d36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d3a:	6010      	str	r0, [r2, #0]
 8015d3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015d40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015d44:	f380 8811 	msr	BASEPRI, r0
 8015d48:	f3bf 8f4f 	dsb	sy
 8015d4c:	f3bf 8f6f 	isb	sy
 8015d50:	f7fe feea 	bl	8014b28 <vTaskSwitchContext>
 8015d54:	f04f 0000 	mov.w	r0, #0
 8015d58:	f380 8811 	msr	BASEPRI, r0
 8015d5c:	bc09      	pop	{r0, r3}
 8015d5e:	6819      	ldr	r1, [r3, #0]
 8015d60:	6808      	ldr	r0, [r1, #0]
 8015d62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d66:	f01e 0f10 	tst.w	lr, #16
 8015d6a:	bf08      	it	eq
 8015d6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015d70:	f380 8809 	msr	PSP, r0
 8015d74:	f3bf 8f6f 	isb	sy
 8015d78:	4770      	bx	lr
 8015d7a:	bf00      	nop
 8015d7c:	f3af 8000 	nop.w

08015d80 <pxCurrentTCBConst>:
 8015d80:	24001808 	.word	0x24001808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015d84:	bf00      	nop
 8015d86:	bf00      	nop

08015d88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015d88:	b580      	push	{r7, lr}
 8015d8a:	b082      	sub	sp, #8
 8015d8c:	af00      	add	r7, sp, #0
	__asm volatile
 8015d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d92:	f383 8811 	msr	BASEPRI, r3
 8015d96:	f3bf 8f6f 	isb	sy
 8015d9a:	f3bf 8f4f 	dsb	sy
 8015d9e:	607b      	str	r3, [r7, #4]
}
 8015da0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015da2:	f7fe fdff 	bl	80149a4 <xTaskIncrementTick>
 8015da6:	4603      	mov	r3, r0
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d003      	beq.n	8015db4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015dac:	4b06      	ldr	r3, [pc, #24]	; (8015dc8 <xPortSysTickHandler+0x40>)
 8015dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015db2:	601a      	str	r2, [r3, #0]
 8015db4:	2300      	movs	r3, #0
 8015db6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015db8:	683b      	ldr	r3, [r7, #0]
 8015dba:	f383 8811 	msr	BASEPRI, r3
}
 8015dbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015dc0:	bf00      	nop
 8015dc2:	3708      	adds	r7, #8
 8015dc4:	46bd      	mov	sp, r7
 8015dc6:	bd80      	pop	{r7, pc}
 8015dc8:	e000ed04 	.word	0xe000ed04

08015dcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015dcc:	b480      	push	{r7}
 8015dce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015dd0:	4b0b      	ldr	r3, [pc, #44]	; (8015e00 <vPortSetupTimerInterrupt+0x34>)
 8015dd2:	2200      	movs	r2, #0
 8015dd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015dd6:	4b0b      	ldr	r3, [pc, #44]	; (8015e04 <vPortSetupTimerInterrupt+0x38>)
 8015dd8:	2200      	movs	r2, #0
 8015dda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015ddc:	4b0a      	ldr	r3, [pc, #40]	; (8015e08 <vPortSetupTimerInterrupt+0x3c>)
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	4a0a      	ldr	r2, [pc, #40]	; (8015e0c <vPortSetupTimerInterrupt+0x40>)
 8015de2:	fba2 2303 	umull	r2, r3, r2, r3
 8015de6:	099b      	lsrs	r3, r3, #6
 8015de8:	4a09      	ldr	r2, [pc, #36]	; (8015e10 <vPortSetupTimerInterrupt+0x44>)
 8015dea:	3b01      	subs	r3, #1
 8015dec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015dee:	4b04      	ldr	r3, [pc, #16]	; (8015e00 <vPortSetupTimerInterrupt+0x34>)
 8015df0:	2207      	movs	r2, #7
 8015df2:	601a      	str	r2, [r3, #0]
}
 8015df4:	bf00      	nop
 8015df6:	46bd      	mov	sp, r7
 8015df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015dfc:	4770      	bx	lr
 8015dfe:	bf00      	nop
 8015e00:	e000e010 	.word	0xe000e010
 8015e04:	e000e018 	.word	0xe000e018
 8015e08:	24000090 	.word	0x24000090
 8015e0c:	10624dd3 	.word	0x10624dd3
 8015e10:	e000e014 	.word	0xe000e014

08015e14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015e14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015e24 <vPortEnableVFP+0x10>
 8015e18:	6801      	ldr	r1, [r0, #0]
 8015e1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015e1e:	6001      	str	r1, [r0, #0]
 8015e20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015e22:	bf00      	nop
 8015e24:	e000ed88 	.word	0xe000ed88

08015e28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015e28:	b480      	push	{r7}
 8015e2a:	b085      	sub	sp, #20
 8015e2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015e2e:	f3ef 8305 	mrs	r3, IPSR
 8015e32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015e34:	68fb      	ldr	r3, [r7, #12]
 8015e36:	2b0f      	cmp	r3, #15
 8015e38:	d914      	bls.n	8015e64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015e3a:	4a17      	ldr	r2, [pc, #92]	; (8015e98 <vPortValidateInterruptPriority+0x70>)
 8015e3c:	68fb      	ldr	r3, [r7, #12]
 8015e3e:	4413      	add	r3, r2
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015e44:	4b15      	ldr	r3, [pc, #84]	; (8015e9c <vPortValidateInterruptPriority+0x74>)
 8015e46:	781b      	ldrb	r3, [r3, #0]
 8015e48:	7afa      	ldrb	r2, [r7, #11]
 8015e4a:	429a      	cmp	r2, r3
 8015e4c:	d20a      	bcs.n	8015e64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e52:	f383 8811 	msr	BASEPRI, r3
 8015e56:	f3bf 8f6f 	isb	sy
 8015e5a:	f3bf 8f4f 	dsb	sy
 8015e5e:	607b      	str	r3, [r7, #4]
}
 8015e60:	bf00      	nop
 8015e62:	e7fe      	b.n	8015e62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015e64:	4b0e      	ldr	r3, [pc, #56]	; (8015ea0 <vPortValidateInterruptPriority+0x78>)
 8015e66:	681b      	ldr	r3, [r3, #0]
 8015e68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015e6c:	4b0d      	ldr	r3, [pc, #52]	; (8015ea4 <vPortValidateInterruptPriority+0x7c>)
 8015e6e:	681b      	ldr	r3, [r3, #0]
 8015e70:	429a      	cmp	r2, r3
 8015e72:	d90a      	bls.n	8015e8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e78:	f383 8811 	msr	BASEPRI, r3
 8015e7c:	f3bf 8f6f 	isb	sy
 8015e80:	f3bf 8f4f 	dsb	sy
 8015e84:	603b      	str	r3, [r7, #0]
}
 8015e86:	bf00      	nop
 8015e88:	e7fe      	b.n	8015e88 <vPortValidateInterruptPriority+0x60>
	}
 8015e8a:	bf00      	nop
 8015e8c:	3714      	adds	r7, #20
 8015e8e:	46bd      	mov	sp, r7
 8015e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e94:	4770      	bx	lr
 8015e96:	bf00      	nop
 8015e98:	e000e3f0 	.word	0xe000e3f0
 8015e9c:	24001e34 	.word	0x24001e34
 8015ea0:	e000ed0c 	.word	0xe000ed0c
 8015ea4:	24001e38 	.word	0x24001e38

08015ea8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015ea8:	b580      	push	{r7, lr}
 8015eaa:	b08a      	sub	sp, #40	; 0x28
 8015eac:	af00      	add	r7, sp, #0
 8015eae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015eb0:	2300      	movs	r3, #0
 8015eb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015eb4:	f7fe fcba 	bl	801482c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015eb8:	4b5b      	ldr	r3, [pc, #364]	; (8016028 <pvPortMalloc+0x180>)
 8015eba:	681b      	ldr	r3, [r3, #0]
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d101      	bne.n	8015ec4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015ec0:	f000 f920 	bl	8016104 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015ec4:	4b59      	ldr	r3, [pc, #356]	; (801602c <pvPortMalloc+0x184>)
 8015ec6:	681a      	ldr	r2, [r3, #0]
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	4013      	ands	r3, r2
 8015ecc:	2b00      	cmp	r3, #0
 8015ece:	f040 8093 	bne.w	8015ff8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015ed2:	687b      	ldr	r3, [r7, #4]
 8015ed4:	2b00      	cmp	r3, #0
 8015ed6:	d01d      	beq.n	8015f14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015ed8:	2208      	movs	r2, #8
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	4413      	add	r3, r2
 8015ede:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f003 0307 	and.w	r3, r3, #7
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d014      	beq.n	8015f14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	f023 0307 	bic.w	r3, r3, #7
 8015ef0:	3308      	adds	r3, #8
 8015ef2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f003 0307 	and.w	r3, r3, #7
 8015efa:	2b00      	cmp	r3, #0
 8015efc:	d00a      	beq.n	8015f14 <pvPortMalloc+0x6c>
	__asm volatile
 8015efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f02:	f383 8811 	msr	BASEPRI, r3
 8015f06:	f3bf 8f6f 	isb	sy
 8015f0a:	f3bf 8f4f 	dsb	sy
 8015f0e:	617b      	str	r3, [r7, #20]
}
 8015f10:	bf00      	nop
 8015f12:	e7fe      	b.n	8015f12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	2b00      	cmp	r3, #0
 8015f18:	d06e      	beq.n	8015ff8 <pvPortMalloc+0x150>
 8015f1a:	4b45      	ldr	r3, [pc, #276]	; (8016030 <pvPortMalloc+0x188>)
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	687a      	ldr	r2, [r7, #4]
 8015f20:	429a      	cmp	r2, r3
 8015f22:	d869      	bhi.n	8015ff8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015f24:	4b43      	ldr	r3, [pc, #268]	; (8016034 <pvPortMalloc+0x18c>)
 8015f26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015f28:	4b42      	ldr	r3, [pc, #264]	; (8016034 <pvPortMalloc+0x18c>)
 8015f2a:	681b      	ldr	r3, [r3, #0]
 8015f2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f2e:	e004      	b.n	8015f3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3c:	685b      	ldr	r3, [r3, #4]
 8015f3e:	687a      	ldr	r2, [r7, #4]
 8015f40:	429a      	cmp	r2, r3
 8015f42:	d903      	bls.n	8015f4c <pvPortMalloc+0xa4>
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	681b      	ldr	r3, [r3, #0]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d1f1      	bne.n	8015f30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015f4c:	4b36      	ldr	r3, [pc, #216]	; (8016028 <pvPortMalloc+0x180>)
 8015f4e:	681b      	ldr	r3, [r3, #0]
 8015f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f52:	429a      	cmp	r2, r3
 8015f54:	d050      	beq.n	8015ff8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015f56:	6a3b      	ldr	r3, [r7, #32]
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	2208      	movs	r2, #8
 8015f5c:	4413      	add	r3, r2
 8015f5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f62:	681a      	ldr	r2, [r3, #0]
 8015f64:	6a3b      	ldr	r3, [r7, #32]
 8015f66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6a:	685a      	ldr	r2, [r3, #4]
 8015f6c:	687b      	ldr	r3, [r7, #4]
 8015f6e:	1ad2      	subs	r2, r2, r3
 8015f70:	2308      	movs	r3, #8
 8015f72:	005b      	lsls	r3, r3, #1
 8015f74:	429a      	cmp	r2, r3
 8015f76:	d91f      	bls.n	8015fb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	4413      	add	r3, r2
 8015f7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015f80:	69bb      	ldr	r3, [r7, #24]
 8015f82:	f003 0307 	and.w	r3, r3, #7
 8015f86:	2b00      	cmp	r3, #0
 8015f88:	d00a      	beq.n	8015fa0 <pvPortMalloc+0xf8>
	__asm volatile
 8015f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f8e:	f383 8811 	msr	BASEPRI, r3
 8015f92:	f3bf 8f6f 	isb	sy
 8015f96:	f3bf 8f4f 	dsb	sy
 8015f9a:	613b      	str	r3, [r7, #16]
}
 8015f9c:	bf00      	nop
 8015f9e:	e7fe      	b.n	8015f9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa2:	685a      	ldr	r2, [r3, #4]
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	1ad2      	subs	r2, r2, r3
 8015fa8:	69bb      	ldr	r3, [r7, #24]
 8015faa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fae:	687a      	ldr	r2, [r7, #4]
 8015fb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015fb2:	69b8      	ldr	r0, [r7, #24]
 8015fb4:	f000 f908 	bl	80161c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015fb8:	4b1d      	ldr	r3, [pc, #116]	; (8016030 <pvPortMalloc+0x188>)
 8015fba:	681a      	ldr	r2, [r3, #0]
 8015fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fbe:	685b      	ldr	r3, [r3, #4]
 8015fc0:	1ad3      	subs	r3, r2, r3
 8015fc2:	4a1b      	ldr	r2, [pc, #108]	; (8016030 <pvPortMalloc+0x188>)
 8015fc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015fc6:	4b1a      	ldr	r3, [pc, #104]	; (8016030 <pvPortMalloc+0x188>)
 8015fc8:	681a      	ldr	r2, [r3, #0]
 8015fca:	4b1b      	ldr	r3, [pc, #108]	; (8016038 <pvPortMalloc+0x190>)
 8015fcc:	681b      	ldr	r3, [r3, #0]
 8015fce:	429a      	cmp	r2, r3
 8015fd0:	d203      	bcs.n	8015fda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015fd2:	4b17      	ldr	r3, [pc, #92]	; (8016030 <pvPortMalloc+0x188>)
 8015fd4:	681b      	ldr	r3, [r3, #0]
 8015fd6:	4a18      	ldr	r2, [pc, #96]	; (8016038 <pvPortMalloc+0x190>)
 8015fd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fdc:	685a      	ldr	r2, [r3, #4]
 8015fde:	4b13      	ldr	r3, [pc, #76]	; (801602c <pvPortMalloc+0x184>)
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	431a      	orrs	r2, r3
 8015fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fea:	2200      	movs	r2, #0
 8015fec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015fee:	4b13      	ldr	r3, [pc, #76]	; (801603c <pvPortMalloc+0x194>)
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	3301      	adds	r3, #1
 8015ff4:	4a11      	ldr	r2, [pc, #68]	; (801603c <pvPortMalloc+0x194>)
 8015ff6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015ff8:	f7fe fc26 	bl	8014848 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015ffc:	69fb      	ldr	r3, [r7, #28]
 8015ffe:	f003 0307 	and.w	r3, r3, #7
 8016002:	2b00      	cmp	r3, #0
 8016004:	d00a      	beq.n	801601c <pvPortMalloc+0x174>
	__asm volatile
 8016006:	f04f 0350 	mov.w	r3, #80	; 0x50
 801600a:	f383 8811 	msr	BASEPRI, r3
 801600e:	f3bf 8f6f 	isb	sy
 8016012:	f3bf 8f4f 	dsb	sy
 8016016:	60fb      	str	r3, [r7, #12]
}
 8016018:	bf00      	nop
 801601a:	e7fe      	b.n	801601a <pvPortMalloc+0x172>
	return pvReturn;
 801601c:	69fb      	ldr	r3, [r7, #28]
}
 801601e:	4618      	mov	r0, r3
 8016020:	3728      	adds	r7, #40	; 0x28
 8016022:	46bd      	mov	sp, r7
 8016024:	bd80      	pop	{r7, pc}
 8016026:	bf00      	nop
 8016028:	24005a44 	.word	0x24005a44
 801602c:	24005a58 	.word	0x24005a58
 8016030:	24005a48 	.word	0x24005a48
 8016034:	24005a3c 	.word	0x24005a3c
 8016038:	24005a4c 	.word	0x24005a4c
 801603c:	24005a50 	.word	0x24005a50

08016040 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8016040:	b580      	push	{r7, lr}
 8016042:	b086      	sub	sp, #24
 8016044:	af00      	add	r7, sp, #0
 8016046:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8016048:	687b      	ldr	r3, [r7, #4]
 801604a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d04d      	beq.n	80160ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8016052:	2308      	movs	r3, #8
 8016054:	425b      	negs	r3, r3
 8016056:	697a      	ldr	r2, [r7, #20]
 8016058:	4413      	add	r3, r2
 801605a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801605c:	697b      	ldr	r3, [r7, #20]
 801605e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8016060:	693b      	ldr	r3, [r7, #16]
 8016062:	685a      	ldr	r2, [r3, #4]
 8016064:	4b24      	ldr	r3, [pc, #144]	; (80160f8 <vPortFree+0xb8>)
 8016066:	681b      	ldr	r3, [r3, #0]
 8016068:	4013      	ands	r3, r2
 801606a:	2b00      	cmp	r3, #0
 801606c:	d10a      	bne.n	8016084 <vPortFree+0x44>
	__asm volatile
 801606e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016072:	f383 8811 	msr	BASEPRI, r3
 8016076:	f3bf 8f6f 	isb	sy
 801607a:	f3bf 8f4f 	dsb	sy
 801607e:	60fb      	str	r3, [r7, #12]
}
 8016080:	bf00      	nop
 8016082:	e7fe      	b.n	8016082 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8016084:	693b      	ldr	r3, [r7, #16]
 8016086:	681b      	ldr	r3, [r3, #0]
 8016088:	2b00      	cmp	r3, #0
 801608a:	d00a      	beq.n	80160a2 <vPortFree+0x62>
	__asm volatile
 801608c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8016090:	f383 8811 	msr	BASEPRI, r3
 8016094:	f3bf 8f6f 	isb	sy
 8016098:	f3bf 8f4f 	dsb	sy
 801609c:	60bb      	str	r3, [r7, #8]
}
 801609e:	bf00      	nop
 80160a0:	e7fe      	b.n	80160a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80160a2:	693b      	ldr	r3, [r7, #16]
 80160a4:	685a      	ldr	r2, [r3, #4]
 80160a6:	4b14      	ldr	r3, [pc, #80]	; (80160f8 <vPortFree+0xb8>)
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	4013      	ands	r3, r2
 80160ac:	2b00      	cmp	r3, #0
 80160ae:	d01e      	beq.n	80160ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80160b0:	693b      	ldr	r3, [r7, #16]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d11a      	bne.n	80160ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80160b8:	693b      	ldr	r3, [r7, #16]
 80160ba:	685a      	ldr	r2, [r3, #4]
 80160bc:	4b0e      	ldr	r3, [pc, #56]	; (80160f8 <vPortFree+0xb8>)
 80160be:	681b      	ldr	r3, [r3, #0]
 80160c0:	43db      	mvns	r3, r3
 80160c2:	401a      	ands	r2, r3
 80160c4:	693b      	ldr	r3, [r7, #16]
 80160c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80160c8:	f7fe fbb0 	bl	801482c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80160cc:	693b      	ldr	r3, [r7, #16]
 80160ce:	685a      	ldr	r2, [r3, #4]
 80160d0:	4b0a      	ldr	r3, [pc, #40]	; (80160fc <vPortFree+0xbc>)
 80160d2:	681b      	ldr	r3, [r3, #0]
 80160d4:	4413      	add	r3, r2
 80160d6:	4a09      	ldr	r2, [pc, #36]	; (80160fc <vPortFree+0xbc>)
 80160d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80160da:	6938      	ldr	r0, [r7, #16]
 80160dc:	f000 f874 	bl	80161c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80160e0:	4b07      	ldr	r3, [pc, #28]	; (8016100 <vPortFree+0xc0>)
 80160e2:	681b      	ldr	r3, [r3, #0]
 80160e4:	3301      	adds	r3, #1
 80160e6:	4a06      	ldr	r2, [pc, #24]	; (8016100 <vPortFree+0xc0>)
 80160e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80160ea:	f7fe fbad 	bl	8014848 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80160ee:	bf00      	nop
 80160f0:	3718      	adds	r7, #24
 80160f2:	46bd      	mov	sp, r7
 80160f4:	bd80      	pop	{r7, pc}
 80160f6:	bf00      	nop
 80160f8:	24005a58 	.word	0x24005a58
 80160fc:	24005a48 	.word	0x24005a48
 8016100:	24005a54 	.word	0x24005a54

08016104 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8016104:	b480      	push	{r7}
 8016106:	b085      	sub	sp, #20
 8016108:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801610a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801610e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016110:	4b27      	ldr	r3, [pc, #156]	; (80161b0 <prvHeapInit+0xac>)
 8016112:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	f003 0307 	and.w	r3, r3, #7
 801611a:	2b00      	cmp	r3, #0
 801611c:	d00c      	beq.n	8016138 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	3307      	adds	r3, #7
 8016122:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016124:	68fb      	ldr	r3, [r7, #12]
 8016126:	f023 0307 	bic.w	r3, r3, #7
 801612a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801612c:	68ba      	ldr	r2, [r7, #8]
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	1ad3      	subs	r3, r2, r3
 8016132:	4a1f      	ldr	r2, [pc, #124]	; (80161b0 <prvHeapInit+0xac>)
 8016134:	4413      	add	r3, r2
 8016136:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016138:	68fb      	ldr	r3, [r7, #12]
 801613a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801613c:	4a1d      	ldr	r2, [pc, #116]	; (80161b4 <prvHeapInit+0xb0>)
 801613e:	687b      	ldr	r3, [r7, #4]
 8016140:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016142:	4b1c      	ldr	r3, [pc, #112]	; (80161b4 <prvHeapInit+0xb0>)
 8016144:	2200      	movs	r2, #0
 8016146:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	68ba      	ldr	r2, [r7, #8]
 801614c:	4413      	add	r3, r2
 801614e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016150:	2208      	movs	r2, #8
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	1a9b      	subs	r3, r3, r2
 8016156:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016158:	68fb      	ldr	r3, [r7, #12]
 801615a:	f023 0307 	bic.w	r3, r3, #7
 801615e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016160:	68fb      	ldr	r3, [r7, #12]
 8016162:	4a15      	ldr	r2, [pc, #84]	; (80161b8 <prvHeapInit+0xb4>)
 8016164:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016166:	4b14      	ldr	r3, [pc, #80]	; (80161b8 <prvHeapInit+0xb4>)
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	2200      	movs	r2, #0
 801616c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801616e:	4b12      	ldr	r3, [pc, #72]	; (80161b8 <prvHeapInit+0xb4>)
 8016170:	681b      	ldr	r3, [r3, #0]
 8016172:	2200      	movs	r2, #0
 8016174:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	68fa      	ldr	r2, [r7, #12]
 801617e:	1ad2      	subs	r2, r2, r3
 8016180:	683b      	ldr	r3, [r7, #0]
 8016182:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016184:	4b0c      	ldr	r3, [pc, #48]	; (80161b8 <prvHeapInit+0xb4>)
 8016186:	681a      	ldr	r2, [r3, #0]
 8016188:	683b      	ldr	r3, [r7, #0]
 801618a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801618c:	683b      	ldr	r3, [r7, #0]
 801618e:	685b      	ldr	r3, [r3, #4]
 8016190:	4a0a      	ldr	r2, [pc, #40]	; (80161bc <prvHeapInit+0xb8>)
 8016192:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016194:	683b      	ldr	r3, [r7, #0]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	4a09      	ldr	r2, [pc, #36]	; (80161c0 <prvHeapInit+0xbc>)
 801619a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801619c:	4b09      	ldr	r3, [pc, #36]	; (80161c4 <prvHeapInit+0xc0>)
 801619e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80161a2:	601a      	str	r2, [r3, #0]
}
 80161a4:	bf00      	nop
 80161a6:	3714      	adds	r7, #20
 80161a8:	46bd      	mov	sp, r7
 80161aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ae:	4770      	bx	lr
 80161b0:	24001e3c 	.word	0x24001e3c
 80161b4:	24005a3c 	.word	0x24005a3c
 80161b8:	24005a44 	.word	0x24005a44
 80161bc:	24005a4c 	.word	0x24005a4c
 80161c0:	24005a48 	.word	0x24005a48
 80161c4:	24005a58 	.word	0x24005a58

080161c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80161c8:	b480      	push	{r7}
 80161ca:	b085      	sub	sp, #20
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80161d0:	4b28      	ldr	r3, [pc, #160]	; (8016274 <prvInsertBlockIntoFreeList+0xac>)
 80161d2:	60fb      	str	r3, [r7, #12]
 80161d4:	e002      	b.n	80161dc <prvInsertBlockIntoFreeList+0x14>
 80161d6:	68fb      	ldr	r3, [r7, #12]
 80161d8:	681b      	ldr	r3, [r3, #0]
 80161da:	60fb      	str	r3, [r7, #12]
 80161dc:	68fb      	ldr	r3, [r7, #12]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	687a      	ldr	r2, [r7, #4]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d8f7      	bhi.n	80161d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	685b      	ldr	r3, [r3, #4]
 80161ee:	68ba      	ldr	r2, [r7, #8]
 80161f0:	4413      	add	r3, r2
 80161f2:	687a      	ldr	r2, [r7, #4]
 80161f4:	429a      	cmp	r2, r3
 80161f6:	d108      	bne.n	801620a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	685a      	ldr	r2, [r3, #4]
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	441a      	add	r2, r3
 8016202:	68fb      	ldr	r3, [r7, #12]
 8016204:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8016206:	68fb      	ldr	r3, [r7, #12]
 8016208:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	685b      	ldr	r3, [r3, #4]
 8016212:	68ba      	ldr	r2, [r7, #8]
 8016214:	441a      	add	r2, r3
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	681b      	ldr	r3, [r3, #0]
 801621a:	429a      	cmp	r2, r3
 801621c:	d118      	bne.n	8016250 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	681a      	ldr	r2, [r3, #0]
 8016222:	4b15      	ldr	r3, [pc, #84]	; (8016278 <prvInsertBlockIntoFreeList+0xb0>)
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	429a      	cmp	r2, r3
 8016228:	d00d      	beq.n	8016246 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	685a      	ldr	r2, [r3, #4]
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	681b      	ldr	r3, [r3, #0]
 8016232:	685b      	ldr	r3, [r3, #4]
 8016234:	441a      	add	r2, r3
 8016236:	687b      	ldr	r3, [r7, #4]
 8016238:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801623a:	68fb      	ldr	r3, [r7, #12]
 801623c:	681b      	ldr	r3, [r3, #0]
 801623e:	681a      	ldr	r2, [r3, #0]
 8016240:	687b      	ldr	r3, [r7, #4]
 8016242:	601a      	str	r2, [r3, #0]
 8016244:	e008      	b.n	8016258 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016246:	4b0c      	ldr	r3, [pc, #48]	; (8016278 <prvInsertBlockIntoFreeList+0xb0>)
 8016248:	681a      	ldr	r2, [r3, #0]
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	601a      	str	r2, [r3, #0]
 801624e:	e003      	b.n	8016258 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	681a      	ldr	r2, [r3, #0]
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016258:	68fa      	ldr	r2, [r7, #12]
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	429a      	cmp	r2, r3
 801625e:	d002      	beq.n	8016266 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016260:	68fb      	ldr	r3, [r7, #12]
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016266:	bf00      	nop
 8016268:	3714      	adds	r7, #20
 801626a:	46bd      	mov	sp, r7
 801626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016270:	4770      	bx	lr
 8016272:	bf00      	nop
 8016274:	24005a3c 	.word	0x24005a3c
 8016278:	24005a44 	.word	0x24005a44

0801627c <__errno>:
 801627c:	4b01      	ldr	r3, [pc, #4]	; (8016284 <__errno+0x8>)
 801627e:	6818      	ldr	r0, [r3, #0]
 8016280:	4770      	bx	lr
 8016282:	bf00      	nop
 8016284:	240000a4 	.word	0x240000a4

08016288 <__libc_init_array>:
 8016288:	b570      	push	{r4, r5, r6, lr}
 801628a:	4d0d      	ldr	r5, [pc, #52]	; (80162c0 <__libc_init_array+0x38>)
 801628c:	4c0d      	ldr	r4, [pc, #52]	; (80162c4 <__libc_init_array+0x3c>)
 801628e:	1b64      	subs	r4, r4, r5
 8016290:	10a4      	asrs	r4, r4, #2
 8016292:	2600      	movs	r6, #0
 8016294:	42a6      	cmp	r6, r4
 8016296:	d109      	bne.n	80162ac <__libc_init_array+0x24>
 8016298:	4d0b      	ldr	r5, [pc, #44]	; (80162c8 <__libc_init_array+0x40>)
 801629a:	4c0c      	ldr	r4, [pc, #48]	; (80162cc <__libc_init_array+0x44>)
 801629c:	f000 fd3c 	bl	8016d18 <_init>
 80162a0:	1b64      	subs	r4, r4, r5
 80162a2:	10a4      	asrs	r4, r4, #2
 80162a4:	2600      	movs	r6, #0
 80162a6:	42a6      	cmp	r6, r4
 80162a8:	d105      	bne.n	80162b6 <__libc_init_array+0x2e>
 80162aa:	bd70      	pop	{r4, r5, r6, pc}
 80162ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80162b0:	4798      	blx	r3
 80162b2:	3601      	adds	r6, #1
 80162b4:	e7ee      	b.n	8016294 <__libc_init_array+0xc>
 80162b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80162ba:	4798      	blx	r3
 80162bc:	3601      	adds	r6, #1
 80162be:	e7f2      	b.n	80162a6 <__libc_init_array+0x1e>
 80162c0:	0801714c 	.word	0x0801714c
 80162c4:	0801714c 	.word	0x0801714c
 80162c8:	0801714c 	.word	0x0801714c
 80162cc:	08017150 	.word	0x08017150

080162d0 <malloc>:
 80162d0:	4b02      	ldr	r3, [pc, #8]	; (80162dc <malloc+0xc>)
 80162d2:	4601      	mov	r1, r0
 80162d4:	6818      	ldr	r0, [r3, #0]
 80162d6:	f000 b88d 	b.w	80163f4 <_malloc_r>
 80162da:	bf00      	nop
 80162dc:	240000a4 	.word	0x240000a4

080162e0 <free>:
 80162e0:	4b02      	ldr	r3, [pc, #8]	; (80162ec <free+0xc>)
 80162e2:	4601      	mov	r1, r0
 80162e4:	6818      	ldr	r0, [r3, #0]
 80162e6:	f000 b819 	b.w	801631c <_free_r>
 80162ea:	bf00      	nop
 80162ec:	240000a4 	.word	0x240000a4

080162f0 <memcpy>:
 80162f0:	440a      	add	r2, r1
 80162f2:	4291      	cmp	r1, r2
 80162f4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80162f8:	d100      	bne.n	80162fc <memcpy+0xc>
 80162fa:	4770      	bx	lr
 80162fc:	b510      	push	{r4, lr}
 80162fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016302:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016306:	4291      	cmp	r1, r2
 8016308:	d1f9      	bne.n	80162fe <memcpy+0xe>
 801630a:	bd10      	pop	{r4, pc}

0801630c <memset>:
 801630c:	4402      	add	r2, r0
 801630e:	4603      	mov	r3, r0
 8016310:	4293      	cmp	r3, r2
 8016312:	d100      	bne.n	8016316 <memset+0xa>
 8016314:	4770      	bx	lr
 8016316:	f803 1b01 	strb.w	r1, [r3], #1
 801631a:	e7f9      	b.n	8016310 <memset+0x4>

0801631c <_free_r>:
 801631c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801631e:	2900      	cmp	r1, #0
 8016320:	d044      	beq.n	80163ac <_free_r+0x90>
 8016322:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016326:	9001      	str	r0, [sp, #4]
 8016328:	2b00      	cmp	r3, #0
 801632a:	f1a1 0404 	sub.w	r4, r1, #4
 801632e:	bfb8      	it	lt
 8016330:	18e4      	addlt	r4, r4, r3
 8016332:	f000 fc39 	bl	8016ba8 <__malloc_lock>
 8016336:	4a1e      	ldr	r2, [pc, #120]	; (80163b0 <_free_r+0x94>)
 8016338:	9801      	ldr	r0, [sp, #4]
 801633a:	6813      	ldr	r3, [r2, #0]
 801633c:	b933      	cbnz	r3, 801634c <_free_r+0x30>
 801633e:	6063      	str	r3, [r4, #4]
 8016340:	6014      	str	r4, [r2, #0]
 8016342:	b003      	add	sp, #12
 8016344:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016348:	f000 bc34 	b.w	8016bb4 <__malloc_unlock>
 801634c:	42a3      	cmp	r3, r4
 801634e:	d908      	bls.n	8016362 <_free_r+0x46>
 8016350:	6825      	ldr	r5, [r4, #0]
 8016352:	1961      	adds	r1, r4, r5
 8016354:	428b      	cmp	r3, r1
 8016356:	bf01      	itttt	eq
 8016358:	6819      	ldreq	r1, [r3, #0]
 801635a:	685b      	ldreq	r3, [r3, #4]
 801635c:	1949      	addeq	r1, r1, r5
 801635e:	6021      	streq	r1, [r4, #0]
 8016360:	e7ed      	b.n	801633e <_free_r+0x22>
 8016362:	461a      	mov	r2, r3
 8016364:	685b      	ldr	r3, [r3, #4]
 8016366:	b10b      	cbz	r3, 801636c <_free_r+0x50>
 8016368:	42a3      	cmp	r3, r4
 801636a:	d9fa      	bls.n	8016362 <_free_r+0x46>
 801636c:	6811      	ldr	r1, [r2, #0]
 801636e:	1855      	adds	r5, r2, r1
 8016370:	42a5      	cmp	r5, r4
 8016372:	d10b      	bne.n	801638c <_free_r+0x70>
 8016374:	6824      	ldr	r4, [r4, #0]
 8016376:	4421      	add	r1, r4
 8016378:	1854      	adds	r4, r2, r1
 801637a:	42a3      	cmp	r3, r4
 801637c:	6011      	str	r1, [r2, #0]
 801637e:	d1e0      	bne.n	8016342 <_free_r+0x26>
 8016380:	681c      	ldr	r4, [r3, #0]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	6053      	str	r3, [r2, #4]
 8016386:	4421      	add	r1, r4
 8016388:	6011      	str	r1, [r2, #0]
 801638a:	e7da      	b.n	8016342 <_free_r+0x26>
 801638c:	d902      	bls.n	8016394 <_free_r+0x78>
 801638e:	230c      	movs	r3, #12
 8016390:	6003      	str	r3, [r0, #0]
 8016392:	e7d6      	b.n	8016342 <_free_r+0x26>
 8016394:	6825      	ldr	r5, [r4, #0]
 8016396:	1961      	adds	r1, r4, r5
 8016398:	428b      	cmp	r3, r1
 801639a:	bf04      	itt	eq
 801639c:	6819      	ldreq	r1, [r3, #0]
 801639e:	685b      	ldreq	r3, [r3, #4]
 80163a0:	6063      	str	r3, [r4, #4]
 80163a2:	bf04      	itt	eq
 80163a4:	1949      	addeq	r1, r1, r5
 80163a6:	6021      	streq	r1, [r4, #0]
 80163a8:	6054      	str	r4, [r2, #4]
 80163aa:	e7ca      	b.n	8016342 <_free_r+0x26>
 80163ac:	b003      	add	sp, #12
 80163ae:	bd30      	pop	{r4, r5, pc}
 80163b0:	24005a5c 	.word	0x24005a5c

080163b4 <sbrk_aligned>:
 80163b4:	b570      	push	{r4, r5, r6, lr}
 80163b6:	4e0e      	ldr	r6, [pc, #56]	; (80163f0 <sbrk_aligned+0x3c>)
 80163b8:	460c      	mov	r4, r1
 80163ba:	6831      	ldr	r1, [r6, #0]
 80163bc:	4605      	mov	r5, r0
 80163be:	b911      	cbnz	r1, 80163c6 <sbrk_aligned+0x12>
 80163c0:	f000 f902 	bl	80165c8 <_sbrk_r>
 80163c4:	6030      	str	r0, [r6, #0]
 80163c6:	4621      	mov	r1, r4
 80163c8:	4628      	mov	r0, r5
 80163ca:	f000 f8fd 	bl	80165c8 <_sbrk_r>
 80163ce:	1c43      	adds	r3, r0, #1
 80163d0:	d00a      	beq.n	80163e8 <sbrk_aligned+0x34>
 80163d2:	1cc4      	adds	r4, r0, #3
 80163d4:	f024 0403 	bic.w	r4, r4, #3
 80163d8:	42a0      	cmp	r0, r4
 80163da:	d007      	beq.n	80163ec <sbrk_aligned+0x38>
 80163dc:	1a21      	subs	r1, r4, r0
 80163de:	4628      	mov	r0, r5
 80163e0:	f000 f8f2 	bl	80165c8 <_sbrk_r>
 80163e4:	3001      	adds	r0, #1
 80163e6:	d101      	bne.n	80163ec <sbrk_aligned+0x38>
 80163e8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80163ec:	4620      	mov	r0, r4
 80163ee:	bd70      	pop	{r4, r5, r6, pc}
 80163f0:	24005a60 	.word	0x24005a60

080163f4 <_malloc_r>:
 80163f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80163f8:	1ccd      	adds	r5, r1, #3
 80163fa:	f025 0503 	bic.w	r5, r5, #3
 80163fe:	3508      	adds	r5, #8
 8016400:	2d0c      	cmp	r5, #12
 8016402:	bf38      	it	cc
 8016404:	250c      	movcc	r5, #12
 8016406:	2d00      	cmp	r5, #0
 8016408:	4607      	mov	r7, r0
 801640a:	db01      	blt.n	8016410 <_malloc_r+0x1c>
 801640c:	42a9      	cmp	r1, r5
 801640e:	d905      	bls.n	801641c <_malloc_r+0x28>
 8016410:	230c      	movs	r3, #12
 8016412:	603b      	str	r3, [r7, #0]
 8016414:	2600      	movs	r6, #0
 8016416:	4630      	mov	r0, r6
 8016418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801641c:	4e2e      	ldr	r6, [pc, #184]	; (80164d8 <_malloc_r+0xe4>)
 801641e:	f000 fbc3 	bl	8016ba8 <__malloc_lock>
 8016422:	6833      	ldr	r3, [r6, #0]
 8016424:	461c      	mov	r4, r3
 8016426:	bb34      	cbnz	r4, 8016476 <_malloc_r+0x82>
 8016428:	4629      	mov	r1, r5
 801642a:	4638      	mov	r0, r7
 801642c:	f7ff ffc2 	bl	80163b4 <sbrk_aligned>
 8016430:	1c43      	adds	r3, r0, #1
 8016432:	4604      	mov	r4, r0
 8016434:	d14d      	bne.n	80164d2 <_malloc_r+0xde>
 8016436:	6834      	ldr	r4, [r6, #0]
 8016438:	4626      	mov	r6, r4
 801643a:	2e00      	cmp	r6, #0
 801643c:	d140      	bne.n	80164c0 <_malloc_r+0xcc>
 801643e:	6823      	ldr	r3, [r4, #0]
 8016440:	4631      	mov	r1, r6
 8016442:	4638      	mov	r0, r7
 8016444:	eb04 0803 	add.w	r8, r4, r3
 8016448:	f000 f8be 	bl	80165c8 <_sbrk_r>
 801644c:	4580      	cmp	r8, r0
 801644e:	d13a      	bne.n	80164c6 <_malloc_r+0xd2>
 8016450:	6821      	ldr	r1, [r4, #0]
 8016452:	3503      	adds	r5, #3
 8016454:	1a6d      	subs	r5, r5, r1
 8016456:	f025 0503 	bic.w	r5, r5, #3
 801645a:	3508      	adds	r5, #8
 801645c:	2d0c      	cmp	r5, #12
 801645e:	bf38      	it	cc
 8016460:	250c      	movcc	r5, #12
 8016462:	4629      	mov	r1, r5
 8016464:	4638      	mov	r0, r7
 8016466:	f7ff ffa5 	bl	80163b4 <sbrk_aligned>
 801646a:	3001      	adds	r0, #1
 801646c:	d02b      	beq.n	80164c6 <_malloc_r+0xd2>
 801646e:	6823      	ldr	r3, [r4, #0]
 8016470:	442b      	add	r3, r5
 8016472:	6023      	str	r3, [r4, #0]
 8016474:	e00e      	b.n	8016494 <_malloc_r+0xa0>
 8016476:	6822      	ldr	r2, [r4, #0]
 8016478:	1b52      	subs	r2, r2, r5
 801647a:	d41e      	bmi.n	80164ba <_malloc_r+0xc6>
 801647c:	2a0b      	cmp	r2, #11
 801647e:	d916      	bls.n	80164ae <_malloc_r+0xba>
 8016480:	1961      	adds	r1, r4, r5
 8016482:	42a3      	cmp	r3, r4
 8016484:	6025      	str	r5, [r4, #0]
 8016486:	bf18      	it	ne
 8016488:	6059      	strne	r1, [r3, #4]
 801648a:	6863      	ldr	r3, [r4, #4]
 801648c:	bf08      	it	eq
 801648e:	6031      	streq	r1, [r6, #0]
 8016490:	5162      	str	r2, [r4, r5]
 8016492:	604b      	str	r3, [r1, #4]
 8016494:	4638      	mov	r0, r7
 8016496:	f104 060b 	add.w	r6, r4, #11
 801649a:	f000 fb8b 	bl	8016bb4 <__malloc_unlock>
 801649e:	f026 0607 	bic.w	r6, r6, #7
 80164a2:	1d23      	adds	r3, r4, #4
 80164a4:	1af2      	subs	r2, r6, r3
 80164a6:	d0b6      	beq.n	8016416 <_malloc_r+0x22>
 80164a8:	1b9b      	subs	r3, r3, r6
 80164aa:	50a3      	str	r3, [r4, r2]
 80164ac:	e7b3      	b.n	8016416 <_malloc_r+0x22>
 80164ae:	6862      	ldr	r2, [r4, #4]
 80164b0:	42a3      	cmp	r3, r4
 80164b2:	bf0c      	ite	eq
 80164b4:	6032      	streq	r2, [r6, #0]
 80164b6:	605a      	strne	r2, [r3, #4]
 80164b8:	e7ec      	b.n	8016494 <_malloc_r+0xa0>
 80164ba:	4623      	mov	r3, r4
 80164bc:	6864      	ldr	r4, [r4, #4]
 80164be:	e7b2      	b.n	8016426 <_malloc_r+0x32>
 80164c0:	4634      	mov	r4, r6
 80164c2:	6876      	ldr	r6, [r6, #4]
 80164c4:	e7b9      	b.n	801643a <_malloc_r+0x46>
 80164c6:	230c      	movs	r3, #12
 80164c8:	603b      	str	r3, [r7, #0]
 80164ca:	4638      	mov	r0, r7
 80164cc:	f000 fb72 	bl	8016bb4 <__malloc_unlock>
 80164d0:	e7a1      	b.n	8016416 <_malloc_r+0x22>
 80164d2:	6025      	str	r5, [r4, #0]
 80164d4:	e7de      	b.n	8016494 <_malloc_r+0xa0>
 80164d6:	bf00      	nop
 80164d8:	24005a5c 	.word	0x24005a5c

080164dc <_puts_r>:
 80164dc:	b570      	push	{r4, r5, r6, lr}
 80164de:	460e      	mov	r6, r1
 80164e0:	4605      	mov	r5, r0
 80164e2:	b118      	cbz	r0, 80164ec <_puts_r+0x10>
 80164e4:	6983      	ldr	r3, [r0, #24]
 80164e6:	b90b      	cbnz	r3, 80164ec <_puts_r+0x10>
 80164e8:	f000 fa58 	bl	801699c <__sinit>
 80164ec:	69ab      	ldr	r3, [r5, #24]
 80164ee:	68ac      	ldr	r4, [r5, #8]
 80164f0:	b913      	cbnz	r3, 80164f8 <_puts_r+0x1c>
 80164f2:	4628      	mov	r0, r5
 80164f4:	f000 fa52 	bl	801699c <__sinit>
 80164f8:	4b2c      	ldr	r3, [pc, #176]	; (80165ac <_puts_r+0xd0>)
 80164fa:	429c      	cmp	r4, r3
 80164fc:	d120      	bne.n	8016540 <_puts_r+0x64>
 80164fe:	686c      	ldr	r4, [r5, #4]
 8016500:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016502:	07db      	lsls	r3, r3, #31
 8016504:	d405      	bmi.n	8016512 <_puts_r+0x36>
 8016506:	89a3      	ldrh	r3, [r4, #12]
 8016508:	0598      	lsls	r0, r3, #22
 801650a:	d402      	bmi.n	8016512 <_puts_r+0x36>
 801650c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801650e:	f000 fae3 	bl	8016ad8 <__retarget_lock_acquire_recursive>
 8016512:	89a3      	ldrh	r3, [r4, #12]
 8016514:	0719      	lsls	r1, r3, #28
 8016516:	d51d      	bpl.n	8016554 <_puts_r+0x78>
 8016518:	6923      	ldr	r3, [r4, #16]
 801651a:	b1db      	cbz	r3, 8016554 <_puts_r+0x78>
 801651c:	3e01      	subs	r6, #1
 801651e:	68a3      	ldr	r3, [r4, #8]
 8016520:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016524:	3b01      	subs	r3, #1
 8016526:	60a3      	str	r3, [r4, #8]
 8016528:	bb39      	cbnz	r1, 801657a <_puts_r+0x9e>
 801652a:	2b00      	cmp	r3, #0
 801652c:	da38      	bge.n	80165a0 <_puts_r+0xc4>
 801652e:	4622      	mov	r2, r4
 8016530:	210a      	movs	r1, #10
 8016532:	4628      	mov	r0, r5
 8016534:	f000 f858 	bl	80165e8 <__swbuf_r>
 8016538:	3001      	adds	r0, #1
 801653a:	d011      	beq.n	8016560 <_puts_r+0x84>
 801653c:	250a      	movs	r5, #10
 801653e:	e011      	b.n	8016564 <_puts_r+0x88>
 8016540:	4b1b      	ldr	r3, [pc, #108]	; (80165b0 <_puts_r+0xd4>)
 8016542:	429c      	cmp	r4, r3
 8016544:	d101      	bne.n	801654a <_puts_r+0x6e>
 8016546:	68ac      	ldr	r4, [r5, #8]
 8016548:	e7da      	b.n	8016500 <_puts_r+0x24>
 801654a:	4b1a      	ldr	r3, [pc, #104]	; (80165b4 <_puts_r+0xd8>)
 801654c:	429c      	cmp	r4, r3
 801654e:	bf08      	it	eq
 8016550:	68ec      	ldreq	r4, [r5, #12]
 8016552:	e7d5      	b.n	8016500 <_puts_r+0x24>
 8016554:	4621      	mov	r1, r4
 8016556:	4628      	mov	r0, r5
 8016558:	f000 f898 	bl	801668c <__swsetup_r>
 801655c:	2800      	cmp	r0, #0
 801655e:	d0dd      	beq.n	801651c <_puts_r+0x40>
 8016560:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016564:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016566:	07da      	lsls	r2, r3, #31
 8016568:	d405      	bmi.n	8016576 <_puts_r+0x9a>
 801656a:	89a3      	ldrh	r3, [r4, #12]
 801656c:	059b      	lsls	r3, r3, #22
 801656e:	d402      	bmi.n	8016576 <_puts_r+0x9a>
 8016570:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016572:	f000 fab2 	bl	8016ada <__retarget_lock_release_recursive>
 8016576:	4628      	mov	r0, r5
 8016578:	bd70      	pop	{r4, r5, r6, pc}
 801657a:	2b00      	cmp	r3, #0
 801657c:	da04      	bge.n	8016588 <_puts_r+0xac>
 801657e:	69a2      	ldr	r2, [r4, #24]
 8016580:	429a      	cmp	r2, r3
 8016582:	dc06      	bgt.n	8016592 <_puts_r+0xb6>
 8016584:	290a      	cmp	r1, #10
 8016586:	d004      	beq.n	8016592 <_puts_r+0xb6>
 8016588:	6823      	ldr	r3, [r4, #0]
 801658a:	1c5a      	adds	r2, r3, #1
 801658c:	6022      	str	r2, [r4, #0]
 801658e:	7019      	strb	r1, [r3, #0]
 8016590:	e7c5      	b.n	801651e <_puts_r+0x42>
 8016592:	4622      	mov	r2, r4
 8016594:	4628      	mov	r0, r5
 8016596:	f000 f827 	bl	80165e8 <__swbuf_r>
 801659a:	3001      	adds	r0, #1
 801659c:	d1bf      	bne.n	801651e <_puts_r+0x42>
 801659e:	e7df      	b.n	8016560 <_puts_r+0x84>
 80165a0:	6823      	ldr	r3, [r4, #0]
 80165a2:	250a      	movs	r5, #10
 80165a4:	1c5a      	adds	r2, r3, #1
 80165a6:	6022      	str	r2, [r4, #0]
 80165a8:	701d      	strb	r5, [r3, #0]
 80165aa:	e7db      	b.n	8016564 <_puts_r+0x88>
 80165ac:	08017104 	.word	0x08017104
 80165b0:	08017124 	.word	0x08017124
 80165b4:	080170e4 	.word	0x080170e4

080165b8 <puts>:
 80165b8:	4b02      	ldr	r3, [pc, #8]	; (80165c4 <puts+0xc>)
 80165ba:	4601      	mov	r1, r0
 80165bc:	6818      	ldr	r0, [r3, #0]
 80165be:	f7ff bf8d 	b.w	80164dc <_puts_r>
 80165c2:	bf00      	nop
 80165c4:	240000a4 	.word	0x240000a4

080165c8 <_sbrk_r>:
 80165c8:	b538      	push	{r3, r4, r5, lr}
 80165ca:	4d06      	ldr	r5, [pc, #24]	; (80165e4 <_sbrk_r+0x1c>)
 80165cc:	2300      	movs	r3, #0
 80165ce:	4604      	mov	r4, r0
 80165d0:	4608      	mov	r0, r1
 80165d2:	602b      	str	r3, [r5, #0]
 80165d4:	f7ed f98a 	bl	80038ec <_sbrk>
 80165d8:	1c43      	adds	r3, r0, #1
 80165da:	d102      	bne.n	80165e2 <_sbrk_r+0x1a>
 80165dc:	682b      	ldr	r3, [r5, #0]
 80165de:	b103      	cbz	r3, 80165e2 <_sbrk_r+0x1a>
 80165e0:	6023      	str	r3, [r4, #0]
 80165e2:	bd38      	pop	{r3, r4, r5, pc}
 80165e4:	24005a68 	.word	0x24005a68

080165e8 <__swbuf_r>:
 80165e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165ea:	460e      	mov	r6, r1
 80165ec:	4614      	mov	r4, r2
 80165ee:	4605      	mov	r5, r0
 80165f0:	b118      	cbz	r0, 80165fa <__swbuf_r+0x12>
 80165f2:	6983      	ldr	r3, [r0, #24]
 80165f4:	b90b      	cbnz	r3, 80165fa <__swbuf_r+0x12>
 80165f6:	f000 f9d1 	bl	801699c <__sinit>
 80165fa:	4b21      	ldr	r3, [pc, #132]	; (8016680 <__swbuf_r+0x98>)
 80165fc:	429c      	cmp	r4, r3
 80165fe:	d12b      	bne.n	8016658 <__swbuf_r+0x70>
 8016600:	686c      	ldr	r4, [r5, #4]
 8016602:	69a3      	ldr	r3, [r4, #24]
 8016604:	60a3      	str	r3, [r4, #8]
 8016606:	89a3      	ldrh	r3, [r4, #12]
 8016608:	071a      	lsls	r2, r3, #28
 801660a:	d52f      	bpl.n	801666c <__swbuf_r+0x84>
 801660c:	6923      	ldr	r3, [r4, #16]
 801660e:	b36b      	cbz	r3, 801666c <__swbuf_r+0x84>
 8016610:	6923      	ldr	r3, [r4, #16]
 8016612:	6820      	ldr	r0, [r4, #0]
 8016614:	1ac0      	subs	r0, r0, r3
 8016616:	6963      	ldr	r3, [r4, #20]
 8016618:	b2f6      	uxtb	r6, r6
 801661a:	4283      	cmp	r3, r0
 801661c:	4637      	mov	r7, r6
 801661e:	dc04      	bgt.n	801662a <__swbuf_r+0x42>
 8016620:	4621      	mov	r1, r4
 8016622:	4628      	mov	r0, r5
 8016624:	f000 f926 	bl	8016874 <_fflush_r>
 8016628:	bb30      	cbnz	r0, 8016678 <__swbuf_r+0x90>
 801662a:	68a3      	ldr	r3, [r4, #8]
 801662c:	3b01      	subs	r3, #1
 801662e:	60a3      	str	r3, [r4, #8]
 8016630:	6823      	ldr	r3, [r4, #0]
 8016632:	1c5a      	adds	r2, r3, #1
 8016634:	6022      	str	r2, [r4, #0]
 8016636:	701e      	strb	r6, [r3, #0]
 8016638:	6963      	ldr	r3, [r4, #20]
 801663a:	3001      	adds	r0, #1
 801663c:	4283      	cmp	r3, r0
 801663e:	d004      	beq.n	801664a <__swbuf_r+0x62>
 8016640:	89a3      	ldrh	r3, [r4, #12]
 8016642:	07db      	lsls	r3, r3, #31
 8016644:	d506      	bpl.n	8016654 <__swbuf_r+0x6c>
 8016646:	2e0a      	cmp	r6, #10
 8016648:	d104      	bne.n	8016654 <__swbuf_r+0x6c>
 801664a:	4621      	mov	r1, r4
 801664c:	4628      	mov	r0, r5
 801664e:	f000 f911 	bl	8016874 <_fflush_r>
 8016652:	b988      	cbnz	r0, 8016678 <__swbuf_r+0x90>
 8016654:	4638      	mov	r0, r7
 8016656:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016658:	4b0a      	ldr	r3, [pc, #40]	; (8016684 <__swbuf_r+0x9c>)
 801665a:	429c      	cmp	r4, r3
 801665c:	d101      	bne.n	8016662 <__swbuf_r+0x7a>
 801665e:	68ac      	ldr	r4, [r5, #8]
 8016660:	e7cf      	b.n	8016602 <__swbuf_r+0x1a>
 8016662:	4b09      	ldr	r3, [pc, #36]	; (8016688 <__swbuf_r+0xa0>)
 8016664:	429c      	cmp	r4, r3
 8016666:	bf08      	it	eq
 8016668:	68ec      	ldreq	r4, [r5, #12]
 801666a:	e7ca      	b.n	8016602 <__swbuf_r+0x1a>
 801666c:	4621      	mov	r1, r4
 801666e:	4628      	mov	r0, r5
 8016670:	f000 f80c 	bl	801668c <__swsetup_r>
 8016674:	2800      	cmp	r0, #0
 8016676:	d0cb      	beq.n	8016610 <__swbuf_r+0x28>
 8016678:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801667c:	e7ea      	b.n	8016654 <__swbuf_r+0x6c>
 801667e:	bf00      	nop
 8016680:	08017104 	.word	0x08017104
 8016684:	08017124 	.word	0x08017124
 8016688:	080170e4 	.word	0x080170e4

0801668c <__swsetup_r>:
 801668c:	4b32      	ldr	r3, [pc, #200]	; (8016758 <__swsetup_r+0xcc>)
 801668e:	b570      	push	{r4, r5, r6, lr}
 8016690:	681d      	ldr	r5, [r3, #0]
 8016692:	4606      	mov	r6, r0
 8016694:	460c      	mov	r4, r1
 8016696:	b125      	cbz	r5, 80166a2 <__swsetup_r+0x16>
 8016698:	69ab      	ldr	r3, [r5, #24]
 801669a:	b913      	cbnz	r3, 80166a2 <__swsetup_r+0x16>
 801669c:	4628      	mov	r0, r5
 801669e:	f000 f97d 	bl	801699c <__sinit>
 80166a2:	4b2e      	ldr	r3, [pc, #184]	; (801675c <__swsetup_r+0xd0>)
 80166a4:	429c      	cmp	r4, r3
 80166a6:	d10f      	bne.n	80166c8 <__swsetup_r+0x3c>
 80166a8:	686c      	ldr	r4, [r5, #4]
 80166aa:	89a3      	ldrh	r3, [r4, #12]
 80166ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80166b0:	0719      	lsls	r1, r3, #28
 80166b2:	d42c      	bmi.n	801670e <__swsetup_r+0x82>
 80166b4:	06dd      	lsls	r5, r3, #27
 80166b6:	d411      	bmi.n	80166dc <__swsetup_r+0x50>
 80166b8:	2309      	movs	r3, #9
 80166ba:	6033      	str	r3, [r6, #0]
 80166bc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80166c0:	81a3      	strh	r3, [r4, #12]
 80166c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80166c6:	e03e      	b.n	8016746 <__swsetup_r+0xba>
 80166c8:	4b25      	ldr	r3, [pc, #148]	; (8016760 <__swsetup_r+0xd4>)
 80166ca:	429c      	cmp	r4, r3
 80166cc:	d101      	bne.n	80166d2 <__swsetup_r+0x46>
 80166ce:	68ac      	ldr	r4, [r5, #8]
 80166d0:	e7eb      	b.n	80166aa <__swsetup_r+0x1e>
 80166d2:	4b24      	ldr	r3, [pc, #144]	; (8016764 <__swsetup_r+0xd8>)
 80166d4:	429c      	cmp	r4, r3
 80166d6:	bf08      	it	eq
 80166d8:	68ec      	ldreq	r4, [r5, #12]
 80166da:	e7e6      	b.n	80166aa <__swsetup_r+0x1e>
 80166dc:	0758      	lsls	r0, r3, #29
 80166de:	d512      	bpl.n	8016706 <__swsetup_r+0x7a>
 80166e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166e2:	b141      	cbz	r1, 80166f6 <__swsetup_r+0x6a>
 80166e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166e8:	4299      	cmp	r1, r3
 80166ea:	d002      	beq.n	80166f2 <__swsetup_r+0x66>
 80166ec:	4630      	mov	r0, r6
 80166ee:	f7ff fe15 	bl	801631c <_free_r>
 80166f2:	2300      	movs	r3, #0
 80166f4:	6363      	str	r3, [r4, #52]	; 0x34
 80166f6:	89a3      	ldrh	r3, [r4, #12]
 80166f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80166fc:	81a3      	strh	r3, [r4, #12]
 80166fe:	2300      	movs	r3, #0
 8016700:	6063      	str	r3, [r4, #4]
 8016702:	6923      	ldr	r3, [r4, #16]
 8016704:	6023      	str	r3, [r4, #0]
 8016706:	89a3      	ldrh	r3, [r4, #12]
 8016708:	f043 0308 	orr.w	r3, r3, #8
 801670c:	81a3      	strh	r3, [r4, #12]
 801670e:	6923      	ldr	r3, [r4, #16]
 8016710:	b94b      	cbnz	r3, 8016726 <__swsetup_r+0x9a>
 8016712:	89a3      	ldrh	r3, [r4, #12]
 8016714:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801671c:	d003      	beq.n	8016726 <__swsetup_r+0x9a>
 801671e:	4621      	mov	r1, r4
 8016720:	4630      	mov	r0, r6
 8016722:	f000 fa01 	bl	8016b28 <__smakebuf_r>
 8016726:	89a0      	ldrh	r0, [r4, #12]
 8016728:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801672c:	f010 0301 	ands.w	r3, r0, #1
 8016730:	d00a      	beq.n	8016748 <__swsetup_r+0xbc>
 8016732:	2300      	movs	r3, #0
 8016734:	60a3      	str	r3, [r4, #8]
 8016736:	6963      	ldr	r3, [r4, #20]
 8016738:	425b      	negs	r3, r3
 801673a:	61a3      	str	r3, [r4, #24]
 801673c:	6923      	ldr	r3, [r4, #16]
 801673e:	b943      	cbnz	r3, 8016752 <__swsetup_r+0xc6>
 8016740:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016744:	d1ba      	bne.n	80166bc <__swsetup_r+0x30>
 8016746:	bd70      	pop	{r4, r5, r6, pc}
 8016748:	0781      	lsls	r1, r0, #30
 801674a:	bf58      	it	pl
 801674c:	6963      	ldrpl	r3, [r4, #20]
 801674e:	60a3      	str	r3, [r4, #8]
 8016750:	e7f4      	b.n	801673c <__swsetup_r+0xb0>
 8016752:	2000      	movs	r0, #0
 8016754:	e7f7      	b.n	8016746 <__swsetup_r+0xba>
 8016756:	bf00      	nop
 8016758:	240000a4 	.word	0x240000a4
 801675c:	08017104 	.word	0x08017104
 8016760:	08017124 	.word	0x08017124
 8016764:	080170e4 	.word	0x080170e4

08016768 <__sflush_r>:
 8016768:	898a      	ldrh	r2, [r1, #12]
 801676a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801676e:	4605      	mov	r5, r0
 8016770:	0710      	lsls	r0, r2, #28
 8016772:	460c      	mov	r4, r1
 8016774:	d458      	bmi.n	8016828 <__sflush_r+0xc0>
 8016776:	684b      	ldr	r3, [r1, #4]
 8016778:	2b00      	cmp	r3, #0
 801677a:	dc05      	bgt.n	8016788 <__sflush_r+0x20>
 801677c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801677e:	2b00      	cmp	r3, #0
 8016780:	dc02      	bgt.n	8016788 <__sflush_r+0x20>
 8016782:	2000      	movs	r0, #0
 8016784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016788:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801678a:	2e00      	cmp	r6, #0
 801678c:	d0f9      	beq.n	8016782 <__sflush_r+0x1a>
 801678e:	2300      	movs	r3, #0
 8016790:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016794:	682f      	ldr	r7, [r5, #0]
 8016796:	602b      	str	r3, [r5, #0]
 8016798:	d032      	beq.n	8016800 <__sflush_r+0x98>
 801679a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801679c:	89a3      	ldrh	r3, [r4, #12]
 801679e:	075a      	lsls	r2, r3, #29
 80167a0:	d505      	bpl.n	80167ae <__sflush_r+0x46>
 80167a2:	6863      	ldr	r3, [r4, #4]
 80167a4:	1ac0      	subs	r0, r0, r3
 80167a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80167a8:	b10b      	cbz	r3, 80167ae <__sflush_r+0x46>
 80167aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80167ac:	1ac0      	subs	r0, r0, r3
 80167ae:	2300      	movs	r3, #0
 80167b0:	4602      	mov	r2, r0
 80167b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80167b4:	6a21      	ldr	r1, [r4, #32]
 80167b6:	4628      	mov	r0, r5
 80167b8:	47b0      	blx	r6
 80167ba:	1c43      	adds	r3, r0, #1
 80167bc:	89a3      	ldrh	r3, [r4, #12]
 80167be:	d106      	bne.n	80167ce <__sflush_r+0x66>
 80167c0:	6829      	ldr	r1, [r5, #0]
 80167c2:	291d      	cmp	r1, #29
 80167c4:	d82c      	bhi.n	8016820 <__sflush_r+0xb8>
 80167c6:	4a2a      	ldr	r2, [pc, #168]	; (8016870 <__sflush_r+0x108>)
 80167c8:	40ca      	lsrs	r2, r1
 80167ca:	07d6      	lsls	r6, r2, #31
 80167cc:	d528      	bpl.n	8016820 <__sflush_r+0xb8>
 80167ce:	2200      	movs	r2, #0
 80167d0:	6062      	str	r2, [r4, #4]
 80167d2:	04d9      	lsls	r1, r3, #19
 80167d4:	6922      	ldr	r2, [r4, #16]
 80167d6:	6022      	str	r2, [r4, #0]
 80167d8:	d504      	bpl.n	80167e4 <__sflush_r+0x7c>
 80167da:	1c42      	adds	r2, r0, #1
 80167dc:	d101      	bne.n	80167e2 <__sflush_r+0x7a>
 80167de:	682b      	ldr	r3, [r5, #0]
 80167e0:	b903      	cbnz	r3, 80167e4 <__sflush_r+0x7c>
 80167e2:	6560      	str	r0, [r4, #84]	; 0x54
 80167e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167e6:	602f      	str	r7, [r5, #0]
 80167e8:	2900      	cmp	r1, #0
 80167ea:	d0ca      	beq.n	8016782 <__sflush_r+0x1a>
 80167ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167f0:	4299      	cmp	r1, r3
 80167f2:	d002      	beq.n	80167fa <__sflush_r+0x92>
 80167f4:	4628      	mov	r0, r5
 80167f6:	f7ff fd91 	bl	801631c <_free_r>
 80167fa:	2000      	movs	r0, #0
 80167fc:	6360      	str	r0, [r4, #52]	; 0x34
 80167fe:	e7c1      	b.n	8016784 <__sflush_r+0x1c>
 8016800:	6a21      	ldr	r1, [r4, #32]
 8016802:	2301      	movs	r3, #1
 8016804:	4628      	mov	r0, r5
 8016806:	47b0      	blx	r6
 8016808:	1c41      	adds	r1, r0, #1
 801680a:	d1c7      	bne.n	801679c <__sflush_r+0x34>
 801680c:	682b      	ldr	r3, [r5, #0]
 801680e:	2b00      	cmp	r3, #0
 8016810:	d0c4      	beq.n	801679c <__sflush_r+0x34>
 8016812:	2b1d      	cmp	r3, #29
 8016814:	d001      	beq.n	801681a <__sflush_r+0xb2>
 8016816:	2b16      	cmp	r3, #22
 8016818:	d101      	bne.n	801681e <__sflush_r+0xb6>
 801681a:	602f      	str	r7, [r5, #0]
 801681c:	e7b1      	b.n	8016782 <__sflush_r+0x1a>
 801681e:	89a3      	ldrh	r3, [r4, #12]
 8016820:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016824:	81a3      	strh	r3, [r4, #12]
 8016826:	e7ad      	b.n	8016784 <__sflush_r+0x1c>
 8016828:	690f      	ldr	r7, [r1, #16]
 801682a:	2f00      	cmp	r7, #0
 801682c:	d0a9      	beq.n	8016782 <__sflush_r+0x1a>
 801682e:	0793      	lsls	r3, r2, #30
 8016830:	680e      	ldr	r6, [r1, #0]
 8016832:	bf08      	it	eq
 8016834:	694b      	ldreq	r3, [r1, #20]
 8016836:	600f      	str	r7, [r1, #0]
 8016838:	bf18      	it	ne
 801683a:	2300      	movne	r3, #0
 801683c:	eba6 0807 	sub.w	r8, r6, r7
 8016840:	608b      	str	r3, [r1, #8]
 8016842:	f1b8 0f00 	cmp.w	r8, #0
 8016846:	dd9c      	ble.n	8016782 <__sflush_r+0x1a>
 8016848:	6a21      	ldr	r1, [r4, #32]
 801684a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801684c:	4643      	mov	r3, r8
 801684e:	463a      	mov	r2, r7
 8016850:	4628      	mov	r0, r5
 8016852:	47b0      	blx	r6
 8016854:	2800      	cmp	r0, #0
 8016856:	dc06      	bgt.n	8016866 <__sflush_r+0xfe>
 8016858:	89a3      	ldrh	r3, [r4, #12]
 801685a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801685e:	81a3      	strh	r3, [r4, #12]
 8016860:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016864:	e78e      	b.n	8016784 <__sflush_r+0x1c>
 8016866:	4407      	add	r7, r0
 8016868:	eba8 0800 	sub.w	r8, r8, r0
 801686c:	e7e9      	b.n	8016842 <__sflush_r+0xda>
 801686e:	bf00      	nop
 8016870:	20400001 	.word	0x20400001

08016874 <_fflush_r>:
 8016874:	b538      	push	{r3, r4, r5, lr}
 8016876:	690b      	ldr	r3, [r1, #16]
 8016878:	4605      	mov	r5, r0
 801687a:	460c      	mov	r4, r1
 801687c:	b913      	cbnz	r3, 8016884 <_fflush_r+0x10>
 801687e:	2500      	movs	r5, #0
 8016880:	4628      	mov	r0, r5
 8016882:	bd38      	pop	{r3, r4, r5, pc}
 8016884:	b118      	cbz	r0, 801688e <_fflush_r+0x1a>
 8016886:	6983      	ldr	r3, [r0, #24]
 8016888:	b90b      	cbnz	r3, 801688e <_fflush_r+0x1a>
 801688a:	f000 f887 	bl	801699c <__sinit>
 801688e:	4b14      	ldr	r3, [pc, #80]	; (80168e0 <_fflush_r+0x6c>)
 8016890:	429c      	cmp	r4, r3
 8016892:	d11b      	bne.n	80168cc <_fflush_r+0x58>
 8016894:	686c      	ldr	r4, [r5, #4]
 8016896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801689a:	2b00      	cmp	r3, #0
 801689c:	d0ef      	beq.n	801687e <_fflush_r+0xa>
 801689e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80168a0:	07d0      	lsls	r0, r2, #31
 80168a2:	d404      	bmi.n	80168ae <_fflush_r+0x3a>
 80168a4:	0599      	lsls	r1, r3, #22
 80168a6:	d402      	bmi.n	80168ae <_fflush_r+0x3a>
 80168a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168aa:	f000 f915 	bl	8016ad8 <__retarget_lock_acquire_recursive>
 80168ae:	4628      	mov	r0, r5
 80168b0:	4621      	mov	r1, r4
 80168b2:	f7ff ff59 	bl	8016768 <__sflush_r>
 80168b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80168b8:	07da      	lsls	r2, r3, #31
 80168ba:	4605      	mov	r5, r0
 80168bc:	d4e0      	bmi.n	8016880 <_fflush_r+0xc>
 80168be:	89a3      	ldrh	r3, [r4, #12]
 80168c0:	059b      	lsls	r3, r3, #22
 80168c2:	d4dd      	bmi.n	8016880 <_fflush_r+0xc>
 80168c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80168c6:	f000 f908 	bl	8016ada <__retarget_lock_release_recursive>
 80168ca:	e7d9      	b.n	8016880 <_fflush_r+0xc>
 80168cc:	4b05      	ldr	r3, [pc, #20]	; (80168e4 <_fflush_r+0x70>)
 80168ce:	429c      	cmp	r4, r3
 80168d0:	d101      	bne.n	80168d6 <_fflush_r+0x62>
 80168d2:	68ac      	ldr	r4, [r5, #8]
 80168d4:	e7df      	b.n	8016896 <_fflush_r+0x22>
 80168d6:	4b04      	ldr	r3, [pc, #16]	; (80168e8 <_fflush_r+0x74>)
 80168d8:	429c      	cmp	r4, r3
 80168da:	bf08      	it	eq
 80168dc:	68ec      	ldreq	r4, [r5, #12]
 80168de:	e7da      	b.n	8016896 <_fflush_r+0x22>
 80168e0:	08017104 	.word	0x08017104
 80168e4:	08017124 	.word	0x08017124
 80168e8:	080170e4 	.word	0x080170e4

080168ec <std>:
 80168ec:	2300      	movs	r3, #0
 80168ee:	b510      	push	{r4, lr}
 80168f0:	4604      	mov	r4, r0
 80168f2:	e9c0 3300 	strd	r3, r3, [r0]
 80168f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80168fa:	6083      	str	r3, [r0, #8]
 80168fc:	8181      	strh	r1, [r0, #12]
 80168fe:	6643      	str	r3, [r0, #100]	; 0x64
 8016900:	81c2      	strh	r2, [r0, #14]
 8016902:	6183      	str	r3, [r0, #24]
 8016904:	4619      	mov	r1, r3
 8016906:	2208      	movs	r2, #8
 8016908:	305c      	adds	r0, #92	; 0x5c
 801690a:	f7ff fcff 	bl	801630c <memset>
 801690e:	4b05      	ldr	r3, [pc, #20]	; (8016924 <std+0x38>)
 8016910:	6263      	str	r3, [r4, #36]	; 0x24
 8016912:	4b05      	ldr	r3, [pc, #20]	; (8016928 <std+0x3c>)
 8016914:	62a3      	str	r3, [r4, #40]	; 0x28
 8016916:	4b05      	ldr	r3, [pc, #20]	; (801692c <std+0x40>)
 8016918:	62e3      	str	r3, [r4, #44]	; 0x2c
 801691a:	4b05      	ldr	r3, [pc, #20]	; (8016930 <std+0x44>)
 801691c:	6224      	str	r4, [r4, #32]
 801691e:	6323      	str	r3, [r4, #48]	; 0x30
 8016920:	bd10      	pop	{r4, pc}
 8016922:	bf00      	nop
 8016924:	08016bc1 	.word	0x08016bc1
 8016928:	08016be3 	.word	0x08016be3
 801692c:	08016c1b 	.word	0x08016c1b
 8016930:	08016c3f 	.word	0x08016c3f

08016934 <_cleanup_r>:
 8016934:	4901      	ldr	r1, [pc, #4]	; (801693c <_cleanup_r+0x8>)
 8016936:	f000 b8af 	b.w	8016a98 <_fwalk_reent>
 801693a:	bf00      	nop
 801693c:	08016875 	.word	0x08016875

08016940 <__sfmoreglue>:
 8016940:	b570      	push	{r4, r5, r6, lr}
 8016942:	2268      	movs	r2, #104	; 0x68
 8016944:	1e4d      	subs	r5, r1, #1
 8016946:	4355      	muls	r5, r2
 8016948:	460e      	mov	r6, r1
 801694a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801694e:	f7ff fd51 	bl	80163f4 <_malloc_r>
 8016952:	4604      	mov	r4, r0
 8016954:	b140      	cbz	r0, 8016968 <__sfmoreglue+0x28>
 8016956:	2100      	movs	r1, #0
 8016958:	e9c0 1600 	strd	r1, r6, [r0]
 801695c:	300c      	adds	r0, #12
 801695e:	60a0      	str	r0, [r4, #8]
 8016960:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016964:	f7ff fcd2 	bl	801630c <memset>
 8016968:	4620      	mov	r0, r4
 801696a:	bd70      	pop	{r4, r5, r6, pc}

0801696c <__sfp_lock_acquire>:
 801696c:	4801      	ldr	r0, [pc, #4]	; (8016974 <__sfp_lock_acquire+0x8>)
 801696e:	f000 b8b3 	b.w	8016ad8 <__retarget_lock_acquire_recursive>
 8016972:	bf00      	nop
 8016974:	24005a65 	.word	0x24005a65

08016978 <__sfp_lock_release>:
 8016978:	4801      	ldr	r0, [pc, #4]	; (8016980 <__sfp_lock_release+0x8>)
 801697a:	f000 b8ae 	b.w	8016ada <__retarget_lock_release_recursive>
 801697e:	bf00      	nop
 8016980:	24005a65 	.word	0x24005a65

08016984 <__sinit_lock_acquire>:
 8016984:	4801      	ldr	r0, [pc, #4]	; (801698c <__sinit_lock_acquire+0x8>)
 8016986:	f000 b8a7 	b.w	8016ad8 <__retarget_lock_acquire_recursive>
 801698a:	bf00      	nop
 801698c:	24005a66 	.word	0x24005a66

08016990 <__sinit_lock_release>:
 8016990:	4801      	ldr	r0, [pc, #4]	; (8016998 <__sinit_lock_release+0x8>)
 8016992:	f000 b8a2 	b.w	8016ada <__retarget_lock_release_recursive>
 8016996:	bf00      	nop
 8016998:	24005a66 	.word	0x24005a66

0801699c <__sinit>:
 801699c:	b510      	push	{r4, lr}
 801699e:	4604      	mov	r4, r0
 80169a0:	f7ff fff0 	bl	8016984 <__sinit_lock_acquire>
 80169a4:	69a3      	ldr	r3, [r4, #24]
 80169a6:	b11b      	cbz	r3, 80169b0 <__sinit+0x14>
 80169a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80169ac:	f7ff bff0 	b.w	8016990 <__sinit_lock_release>
 80169b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80169b4:	6523      	str	r3, [r4, #80]	; 0x50
 80169b6:	4b13      	ldr	r3, [pc, #76]	; (8016a04 <__sinit+0x68>)
 80169b8:	4a13      	ldr	r2, [pc, #76]	; (8016a08 <__sinit+0x6c>)
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80169be:	42a3      	cmp	r3, r4
 80169c0:	bf04      	itt	eq
 80169c2:	2301      	moveq	r3, #1
 80169c4:	61a3      	streq	r3, [r4, #24]
 80169c6:	4620      	mov	r0, r4
 80169c8:	f000 f820 	bl	8016a0c <__sfp>
 80169cc:	6060      	str	r0, [r4, #4]
 80169ce:	4620      	mov	r0, r4
 80169d0:	f000 f81c 	bl	8016a0c <__sfp>
 80169d4:	60a0      	str	r0, [r4, #8]
 80169d6:	4620      	mov	r0, r4
 80169d8:	f000 f818 	bl	8016a0c <__sfp>
 80169dc:	2200      	movs	r2, #0
 80169de:	60e0      	str	r0, [r4, #12]
 80169e0:	2104      	movs	r1, #4
 80169e2:	6860      	ldr	r0, [r4, #4]
 80169e4:	f7ff ff82 	bl	80168ec <std>
 80169e8:	68a0      	ldr	r0, [r4, #8]
 80169ea:	2201      	movs	r2, #1
 80169ec:	2109      	movs	r1, #9
 80169ee:	f7ff ff7d 	bl	80168ec <std>
 80169f2:	68e0      	ldr	r0, [r4, #12]
 80169f4:	2202      	movs	r2, #2
 80169f6:	2112      	movs	r1, #18
 80169f8:	f7ff ff78 	bl	80168ec <std>
 80169fc:	2301      	movs	r3, #1
 80169fe:	61a3      	str	r3, [r4, #24]
 8016a00:	e7d2      	b.n	80169a8 <__sinit+0xc>
 8016a02:	bf00      	nop
 8016a04:	080170e0 	.word	0x080170e0
 8016a08:	08016935 	.word	0x08016935

08016a0c <__sfp>:
 8016a0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a0e:	4607      	mov	r7, r0
 8016a10:	f7ff ffac 	bl	801696c <__sfp_lock_acquire>
 8016a14:	4b1e      	ldr	r3, [pc, #120]	; (8016a90 <__sfp+0x84>)
 8016a16:	681e      	ldr	r6, [r3, #0]
 8016a18:	69b3      	ldr	r3, [r6, #24]
 8016a1a:	b913      	cbnz	r3, 8016a22 <__sfp+0x16>
 8016a1c:	4630      	mov	r0, r6
 8016a1e:	f7ff ffbd 	bl	801699c <__sinit>
 8016a22:	3648      	adds	r6, #72	; 0x48
 8016a24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016a28:	3b01      	subs	r3, #1
 8016a2a:	d503      	bpl.n	8016a34 <__sfp+0x28>
 8016a2c:	6833      	ldr	r3, [r6, #0]
 8016a2e:	b30b      	cbz	r3, 8016a74 <__sfp+0x68>
 8016a30:	6836      	ldr	r6, [r6, #0]
 8016a32:	e7f7      	b.n	8016a24 <__sfp+0x18>
 8016a34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016a38:	b9d5      	cbnz	r5, 8016a70 <__sfp+0x64>
 8016a3a:	4b16      	ldr	r3, [pc, #88]	; (8016a94 <__sfp+0x88>)
 8016a3c:	60e3      	str	r3, [r4, #12]
 8016a3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016a42:	6665      	str	r5, [r4, #100]	; 0x64
 8016a44:	f000 f847 	bl	8016ad6 <__retarget_lock_init_recursive>
 8016a48:	f7ff ff96 	bl	8016978 <__sfp_lock_release>
 8016a4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016a50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016a54:	6025      	str	r5, [r4, #0]
 8016a56:	61a5      	str	r5, [r4, #24]
 8016a58:	2208      	movs	r2, #8
 8016a5a:	4629      	mov	r1, r5
 8016a5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016a60:	f7ff fc54 	bl	801630c <memset>
 8016a64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016a68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016a6c:	4620      	mov	r0, r4
 8016a6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a70:	3468      	adds	r4, #104	; 0x68
 8016a72:	e7d9      	b.n	8016a28 <__sfp+0x1c>
 8016a74:	2104      	movs	r1, #4
 8016a76:	4638      	mov	r0, r7
 8016a78:	f7ff ff62 	bl	8016940 <__sfmoreglue>
 8016a7c:	4604      	mov	r4, r0
 8016a7e:	6030      	str	r0, [r6, #0]
 8016a80:	2800      	cmp	r0, #0
 8016a82:	d1d5      	bne.n	8016a30 <__sfp+0x24>
 8016a84:	f7ff ff78 	bl	8016978 <__sfp_lock_release>
 8016a88:	230c      	movs	r3, #12
 8016a8a:	603b      	str	r3, [r7, #0]
 8016a8c:	e7ee      	b.n	8016a6c <__sfp+0x60>
 8016a8e:	bf00      	nop
 8016a90:	080170e0 	.word	0x080170e0
 8016a94:	ffff0001 	.word	0xffff0001

08016a98 <_fwalk_reent>:
 8016a98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016a9c:	4606      	mov	r6, r0
 8016a9e:	4688      	mov	r8, r1
 8016aa0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016aa4:	2700      	movs	r7, #0
 8016aa6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016aaa:	f1b9 0901 	subs.w	r9, r9, #1
 8016aae:	d505      	bpl.n	8016abc <_fwalk_reent+0x24>
 8016ab0:	6824      	ldr	r4, [r4, #0]
 8016ab2:	2c00      	cmp	r4, #0
 8016ab4:	d1f7      	bne.n	8016aa6 <_fwalk_reent+0xe>
 8016ab6:	4638      	mov	r0, r7
 8016ab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016abc:	89ab      	ldrh	r3, [r5, #12]
 8016abe:	2b01      	cmp	r3, #1
 8016ac0:	d907      	bls.n	8016ad2 <_fwalk_reent+0x3a>
 8016ac2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016ac6:	3301      	adds	r3, #1
 8016ac8:	d003      	beq.n	8016ad2 <_fwalk_reent+0x3a>
 8016aca:	4629      	mov	r1, r5
 8016acc:	4630      	mov	r0, r6
 8016ace:	47c0      	blx	r8
 8016ad0:	4307      	orrs	r7, r0
 8016ad2:	3568      	adds	r5, #104	; 0x68
 8016ad4:	e7e9      	b.n	8016aaa <_fwalk_reent+0x12>

08016ad6 <__retarget_lock_init_recursive>:
 8016ad6:	4770      	bx	lr

08016ad8 <__retarget_lock_acquire_recursive>:
 8016ad8:	4770      	bx	lr

08016ada <__retarget_lock_release_recursive>:
 8016ada:	4770      	bx	lr

08016adc <__swhatbuf_r>:
 8016adc:	b570      	push	{r4, r5, r6, lr}
 8016ade:	460e      	mov	r6, r1
 8016ae0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ae4:	2900      	cmp	r1, #0
 8016ae6:	b096      	sub	sp, #88	; 0x58
 8016ae8:	4614      	mov	r4, r2
 8016aea:	461d      	mov	r5, r3
 8016aec:	da08      	bge.n	8016b00 <__swhatbuf_r+0x24>
 8016aee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016af2:	2200      	movs	r2, #0
 8016af4:	602a      	str	r2, [r5, #0]
 8016af6:	061a      	lsls	r2, r3, #24
 8016af8:	d410      	bmi.n	8016b1c <__swhatbuf_r+0x40>
 8016afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016afe:	e00e      	b.n	8016b1e <__swhatbuf_r+0x42>
 8016b00:	466a      	mov	r2, sp
 8016b02:	f000 f8c3 	bl	8016c8c <_fstat_r>
 8016b06:	2800      	cmp	r0, #0
 8016b08:	dbf1      	blt.n	8016aee <__swhatbuf_r+0x12>
 8016b0a:	9a01      	ldr	r2, [sp, #4]
 8016b0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016b10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016b14:	425a      	negs	r2, r3
 8016b16:	415a      	adcs	r2, r3
 8016b18:	602a      	str	r2, [r5, #0]
 8016b1a:	e7ee      	b.n	8016afa <__swhatbuf_r+0x1e>
 8016b1c:	2340      	movs	r3, #64	; 0x40
 8016b1e:	2000      	movs	r0, #0
 8016b20:	6023      	str	r3, [r4, #0]
 8016b22:	b016      	add	sp, #88	; 0x58
 8016b24:	bd70      	pop	{r4, r5, r6, pc}
	...

08016b28 <__smakebuf_r>:
 8016b28:	898b      	ldrh	r3, [r1, #12]
 8016b2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016b2c:	079d      	lsls	r5, r3, #30
 8016b2e:	4606      	mov	r6, r0
 8016b30:	460c      	mov	r4, r1
 8016b32:	d507      	bpl.n	8016b44 <__smakebuf_r+0x1c>
 8016b34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016b38:	6023      	str	r3, [r4, #0]
 8016b3a:	6123      	str	r3, [r4, #16]
 8016b3c:	2301      	movs	r3, #1
 8016b3e:	6163      	str	r3, [r4, #20]
 8016b40:	b002      	add	sp, #8
 8016b42:	bd70      	pop	{r4, r5, r6, pc}
 8016b44:	ab01      	add	r3, sp, #4
 8016b46:	466a      	mov	r2, sp
 8016b48:	f7ff ffc8 	bl	8016adc <__swhatbuf_r>
 8016b4c:	9900      	ldr	r1, [sp, #0]
 8016b4e:	4605      	mov	r5, r0
 8016b50:	4630      	mov	r0, r6
 8016b52:	f7ff fc4f 	bl	80163f4 <_malloc_r>
 8016b56:	b948      	cbnz	r0, 8016b6c <__smakebuf_r+0x44>
 8016b58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b5c:	059a      	lsls	r2, r3, #22
 8016b5e:	d4ef      	bmi.n	8016b40 <__smakebuf_r+0x18>
 8016b60:	f023 0303 	bic.w	r3, r3, #3
 8016b64:	f043 0302 	orr.w	r3, r3, #2
 8016b68:	81a3      	strh	r3, [r4, #12]
 8016b6a:	e7e3      	b.n	8016b34 <__smakebuf_r+0xc>
 8016b6c:	4b0d      	ldr	r3, [pc, #52]	; (8016ba4 <__smakebuf_r+0x7c>)
 8016b6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016b70:	89a3      	ldrh	r3, [r4, #12]
 8016b72:	6020      	str	r0, [r4, #0]
 8016b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b78:	81a3      	strh	r3, [r4, #12]
 8016b7a:	9b00      	ldr	r3, [sp, #0]
 8016b7c:	6163      	str	r3, [r4, #20]
 8016b7e:	9b01      	ldr	r3, [sp, #4]
 8016b80:	6120      	str	r0, [r4, #16]
 8016b82:	b15b      	cbz	r3, 8016b9c <__smakebuf_r+0x74>
 8016b84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016b88:	4630      	mov	r0, r6
 8016b8a:	f000 f891 	bl	8016cb0 <_isatty_r>
 8016b8e:	b128      	cbz	r0, 8016b9c <__smakebuf_r+0x74>
 8016b90:	89a3      	ldrh	r3, [r4, #12]
 8016b92:	f023 0303 	bic.w	r3, r3, #3
 8016b96:	f043 0301 	orr.w	r3, r3, #1
 8016b9a:	81a3      	strh	r3, [r4, #12]
 8016b9c:	89a0      	ldrh	r0, [r4, #12]
 8016b9e:	4305      	orrs	r5, r0
 8016ba0:	81a5      	strh	r5, [r4, #12]
 8016ba2:	e7cd      	b.n	8016b40 <__smakebuf_r+0x18>
 8016ba4:	08016935 	.word	0x08016935

08016ba8 <__malloc_lock>:
 8016ba8:	4801      	ldr	r0, [pc, #4]	; (8016bb0 <__malloc_lock+0x8>)
 8016baa:	f7ff bf95 	b.w	8016ad8 <__retarget_lock_acquire_recursive>
 8016bae:	bf00      	nop
 8016bb0:	24005a64 	.word	0x24005a64

08016bb4 <__malloc_unlock>:
 8016bb4:	4801      	ldr	r0, [pc, #4]	; (8016bbc <__malloc_unlock+0x8>)
 8016bb6:	f7ff bf90 	b.w	8016ada <__retarget_lock_release_recursive>
 8016bba:	bf00      	nop
 8016bbc:	24005a64 	.word	0x24005a64

08016bc0 <__sread>:
 8016bc0:	b510      	push	{r4, lr}
 8016bc2:	460c      	mov	r4, r1
 8016bc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bc8:	f000 f894 	bl	8016cf4 <_read_r>
 8016bcc:	2800      	cmp	r0, #0
 8016bce:	bfab      	itete	ge
 8016bd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016bd2:	89a3      	ldrhlt	r3, [r4, #12]
 8016bd4:	181b      	addge	r3, r3, r0
 8016bd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016bda:	bfac      	ite	ge
 8016bdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016bde:	81a3      	strhlt	r3, [r4, #12]
 8016be0:	bd10      	pop	{r4, pc}

08016be2 <__swrite>:
 8016be2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016be6:	461f      	mov	r7, r3
 8016be8:	898b      	ldrh	r3, [r1, #12]
 8016bea:	05db      	lsls	r3, r3, #23
 8016bec:	4605      	mov	r5, r0
 8016bee:	460c      	mov	r4, r1
 8016bf0:	4616      	mov	r6, r2
 8016bf2:	d505      	bpl.n	8016c00 <__swrite+0x1e>
 8016bf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016bf8:	2302      	movs	r3, #2
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	f000 f868 	bl	8016cd0 <_lseek_r>
 8016c00:	89a3      	ldrh	r3, [r4, #12]
 8016c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016c06:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016c0a:	81a3      	strh	r3, [r4, #12]
 8016c0c:	4632      	mov	r2, r6
 8016c0e:	463b      	mov	r3, r7
 8016c10:	4628      	mov	r0, r5
 8016c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016c16:	f000 b817 	b.w	8016c48 <_write_r>

08016c1a <__sseek>:
 8016c1a:	b510      	push	{r4, lr}
 8016c1c:	460c      	mov	r4, r1
 8016c1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c22:	f000 f855 	bl	8016cd0 <_lseek_r>
 8016c26:	1c43      	adds	r3, r0, #1
 8016c28:	89a3      	ldrh	r3, [r4, #12]
 8016c2a:	bf15      	itete	ne
 8016c2c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016c2e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016c32:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016c36:	81a3      	strheq	r3, [r4, #12]
 8016c38:	bf18      	it	ne
 8016c3a:	81a3      	strhne	r3, [r4, #12]
 8016c3c:	bd10      	pop	{r4, pc}

08016c3e <__sclose>:
 8016c3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c42:	f000 b813 	b.w	8016c6c <_close_r>
	...

08016c48 <_write_r>:
 8016c48:	b538      	push	{r3, r4, r5, lr}
 8016c4a:	4d07      	ldr	r5, [pc, #28]	; (8016c68 <_write_r+0x20>)
 8016c4c:	4604      	mov	r4, r0
 8016c4e:	4608      	mov	r0, r1
 8016c50:	4611      	mov	r1, r2
 8016c52:	2200      	movs	r2, #0
 8016c54:	602a      	str	r2, [r5, #0]
 8016c56:	461a      	mov	r2, r3
 8016c58:	f7ec fdf7 	bl	800384a <_write>
 8016c5c:	1c43      	adds	r3, r0, #1
 8016c5e:	d102      	bne.n	8016c66 <_write_r+0x1e>
 8016c60:	682b      	ldr	r3, [r5, #0]
 8016c62:	b103      	cbz	r3, 8016c66 <_write_r+0x1e>
 8016c64:	6023      	str	r3, [r4, #0]
 8016c66:	bd38      	pop	{r3, r4, r5, pc}
 8016c68:	24005a68 	.word	0x24005a68

08016c6c <_close_r>:
 8016c6c:	b538      	push	{r3, r4, r5, lr}
 8016c6e:	4d06      	ldr	r5, [pc, #24]	; (8016c88 <_close_r+0x1c>)
 8016c70:	2300      	movs	r3, #0
 8016c72:	4604      	mov	r4, r0
 8016c74:	4608      	mov	r0, r1
 8016c76:	602b      	str	r3, [r5, #0]
 8016c78:	f7ec fe03 	bl	8003882 <_close>
 8016c7c:	1c43      	adds	r3, r0, #1
 8016c7e:	d102      	bne.n	8016c86 <_close_r+0x1a>
 8016c80:	682b      	ldr	r3, [r5, #0]
 8016c82:	b103      	cbz	r3, 8016c86 <_close_r+0x1a>
 8016c84:	6023      	str	r3, [r4, #0]
 8016c86:	bd38      	pop	{r3, r4, r5, pc}
 8016c88:	24005a68 	.word	0x24005a68

08016c8c <_fstat_r>:
 8016c8c:	b538      	push	{r3, r4, r5, lr}
 8016c8e:	4d07      	ldr	r5, [pc, #28]	; (8016cac <_fstat_r+0x20>)
 8016c90:	2300      	movs	r3, #0
 8016c92:	4604      	mov	r4, r0
 8016c94:	4608      	mov	r0, r1
 8016c96:	4611      	mov	r1, r2
 8016c98:	602b      	str	r3, [r5, #0]
 8016c9a:	f7ec fdfe 	bl	800389a <_fstat>
 8016c9e:	1c43      	adds	r3, r0, #1
 8016ca0:	d102      	bne.n	8016ca8 <_fstat_r+0x1c>
 8016ca2:	682b      	ldr	r3, [r5, #0]
 8016ca4:	b103      	cbz	r3, 8016ca8 <_fstat_r+0x1c>
 8016ca6:	6023      	str	r3, [r4, #0]
 8016ca8:	bd38      	pop	{r3, r4, r5, pc}
 8016caa:	bf00      	nop
 8016cac:	24005a68 	.word	0x24005a68

08016cb0 <_isatty_r>:
 8016cb0:	b538      	push	{r3, r4, r5, lr}
 8016cb2:	4d06      	ldr	r5, [pc, #24]	; (8016ccc <_isatty_r+0x1c>)
 8016cb4:	2300      	movs	r3, #0
 8016cb6:	4604      	mov	r4, r0
 8016cb8:	4608      	mov	r0, r1
 8016cba:	602b      	str	r3, [r5, #0]
 8016cbc:	f7ec fdfd 	bl	80038ba <_isatty>
 8016cc0:	1c43      	adds	r3, r0, #1
 8016cc2:	d102      	bne.n	8016cca <_isatty_r+0x1a>
 8016cc4:	682b      	ldr	r3, [r5, #0]
 8016cc6:	b103      	cbz	r3, 8016cca <_isatty_r+0x1a>
 8016cc8:	6023      	str	r3, [r4, #0]
 8016cca:	bd38      	pop	{r3, r4, r5, pc}
 8016ccc:	24005a68 	.word	0x24005a68

08016cd0 <_lseek_r>:
 8016cd0:	b538      	push	{r3, r4, r5, lr}
 8016cd2:	4d07      	ldr	r5, [pc, #28]	; (8016cf0 <_lseek_r+0x20>)
 8016cd4:	4604      	mov	r4, r0
 8016cd6:	4608      	mov	r0, r1
 8016cd8:	4611      	mov	r1, r2
 8016cda:	2200      	movs	r2, #0
 8016cdc:	602a      	str	r2, [r5, #0]
 8016cde:	461a      	mov	r2, r3
 8016ce0:	f7ec fdf6 	bl	80038d0 <_lseek>
 8016ce4:	1c43      	adds	r3, r0, #1
 8016ce6:	d102      	bne.n	8016cee <_lseek_r+0x1e>
 8016ce8:	682b      	ldr	r3, [r5, #0]
 8016cea:	b103      	cbz	r3, 8016cee <_lseek_r+0x1e>
 8016cec:	6023      	str	r3, [r4, #0]
 8016cee:	bd38      	pop	{r3, r4, r5, pc}
 8016cf0:	24005a68 	.word	0x24005a68

08016cf4 <_read_r>:
 8016cf4:	b538      	push	{r3, r4, r5, lr}
 8016cf6:	4d07      	ldr	r5, [pc, #28]	; (8016d14 <_read_r+0x20>)
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	4608      	mov	r0, r1
 8016cfc:	4611      	mov	r1, r2
 8016cfe:	2200      	movs	r2, #0
 8016d00:	602a      	str	r2, [r5, #0]
 8016d02:	461a      	mov	r2, r3
 8016d04:	f7ec fd84 	bl	8003810 <_read>
 8016d08:	1c43      	adds	r3, r0, #1
 8016d0a:	d102      	bne.n	8016d12 <_read_r+0x1e>
 8016d0c:	682b      	ldr	r3, [r5, #0]
 8016d0e:	b103      	cbz	r3, 8016d12 <_read_r+0x1e>
 8016d10:	6023      	str	r3, [r4, #0]
 8016d12:	bd38      	pop	{r3, r4, r5, pc}
 8016d14:	24005a68 	.word	0x24005a68

08016d18 <_init>:
 8016d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d1a:	bf00      	nop
 8016d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d1e:	bc08      	pop	{r3}
 8016d20:	469e      	mov	lr, r3
 8016d22:	4770      	bx	lr

08016d24 <_fini>:
 8016d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d26:	bf00      	nop
 8016d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016d2a:	bc08      	pop	{r3}
 8016d2c:	469e      	mov	lr, r3
 8016d2e:	4770      	bx	lr
