
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016980  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  08016c20  08016c20  00026c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08017068  08017068  00027068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08017070  08017070  00027070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08017074  08017074  00027074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08017078  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000594c  24000120  08017180  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a6c  08017180  00035a6c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032db1  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000054fd  00000000  00000000  00062ee7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002670  00000000  00000000  000683e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002478  00000000  00000000  0006aa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007aae  00000000  00000000  0006ced0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030b8b  00000000  00000000  0007497e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019480c  00000000  00000000  000a5509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00239d15  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ad14  00000000  00000000  00239d68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016c08 	.word	0x08016c08

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016c08 	.word	0x08016c08

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a19      	ldr	r2, [pc, #100]	; (8000654 <HAL_TIM_OC_DelayElapsedCallback+0x70>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 fa78 	bl	8012af0 <osEventFlagsSet>
	} else if (htim == &htim4) {
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e023      	b.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim2) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a15      	ldr	r2, [pc, #84]	; (800065c <HAL_TIM_OC_DelayElapsedCallback+0x78>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b13      	ldr	r3, [pc, #76]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f012 fa6d 	bl	8012af0 <osEventFlagsSet>
}
 8000616:	e018      	b.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim3) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a11      	ldr	r2, [pc, #68]	; (8000660 <HAL_TIM_OC_DelayElapsedCallback+0x7c>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f012 fa62 	bl	8012af0 <osEventFlagsSet>
}
 800062c:	e00d      	b.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x66>
	} else if (htim == &htim4) {
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a0c      	ldr	r2, [pc, #48]	; (8000664 <HAL_TIM_OC_DelayElapsedCallback+0x80>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>
		osEventFlagsSet(event_flags, VOLTAGE_MONITOR_FLAG_ID);
 8000636:	4b08      	ldr	r3, [pc, #32]	; (8000658 <HAL_TIM_OC_DelayElapsedCallback+0x74>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	2108      	movs	r1, #8
 800063c:	4618      	mov	r0, r3
 800063e:	f012 fa57 	bl	8012af0 <osEventFlagsSet>
}
 8000642:	e002      	b.n	800064a <HAL_TIM_OC_DelayElapsedCallback+0x66>
		printf("Unknown Timer Interrupt\n");
 8000644:	4808      	ldr	r0, [pc, #32]	; (8000668 <HAL_TIM_OC_DelayElapsedCallback+0x84>)
 8000646:	f015 ff2f 	bl	80164a8 <puts>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	24000508 	.word	0x24000508
 8000658:	24000c54 	.word	0x24000c54
 800065c:	24000554 	.word	0x24000554
 8000660:	240005a0 	.word	0x240005a0
 8000664:	240005ec 	.word	0x240005ec
 8000668:	08016c90 	.word	0x08016c90

0800066c <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af02      	add	r7, sp, #8
 8000672:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000674:	2201      	movs	r2, #1
 8000676:	49f2      	ldr	r1, [pc, #968]	; (8000a40 <HAL_UART_RxCpltCallback+0x3d4>)
 8000678:	48f2      	ldr	r0, [pc, #968]	; (8000a44 <HAL_UART_RxCpltCallback+0x3d8>)
 800067a:	f00f fbcd 	bl	800fe18 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 800067e:	4bf0      	ldr	r3, [pc, #960]	; (8000a40 <HAL_UART_RxCpltCallback+0x3d4>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000684:	7bfb      	ldrb	r3, [r7, #15]
 8000686:	2be0      	cmp	r3, #224	; 0xe0
 8000688:	f200 83e8 	bhi.w	8000e5c <HAL_UART_RxCpltCallback+0x7f0>
 800068c:	a201      	add	r2, pc, #4	; (adr r2, 8000694 <HAL_UART_RxCpltCallback+0x28>)
 800068e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000692:	bf00      	nop
 8000694:	08000a2d 	.word	0x08000a2d
 8000698:	08000a69 	.word	0x08000a69
 800069c:	08000aef 	.word	0x08000aef
 80006a0:	08000b19 	.word	0x08000b19
 80006a4:	08000b41 	.word	0x08000b41
 80006a8:	08000b6b 	.word	0x08000b6b
 80006ac:	08000b97 	.word	0x08000b97
 80006b0:	08000bc3 	.word	0x08000bc3
 80006b4:	08000bed 	.word	0x08000bed
 80006b8:	08000c19 	.word	0x08000c19
 80006bc:	08000c45 	.word	0x08000c45
 80006c0:	08000c77 	.word	0x08000c77
 80006c4:	08000ca9 	.word	0x08000ca9
 80006c8:	08000cfb 	.word	0x08000cfb
 80006cc:	08000e01 	.word	0x08000e01
 80006d0:	08000e31 	.word	0x08000e31
 80006d4:	08000a19 	.word	0x08000a19
 80006d8:	08000a55 	.word	0x08000a55
 80006dc:	08000ad9 	.word	0x08000ad9
 80006e0:	08000b05 	.word	0x08000b05
 80006e4:	08000b2d 	.word	0x08000b2d
 80006e8:	08000b55 	.word	0x08000b55
 80006ec:	08000b81 	.word	0x08000b81
 80006f0:	08000bad 	.word	0x08000bad
 80006f4:	08000bd9 	.word	0x08000bd9
 80006f8:	08000c01 	.word	0x08000c01
 80006fc:	08000c29 	.word	0x08000c29
 8000700:	08000c5b 	.word	0x08000c5b
 8000704:	08000c8d 	.word	0x08000c8d
 8000708:	08000cbf 	.word	0x08000cbf
 800070c:	08000dd9 	.word	0x08000dd9
 8000710:	08000e29 	.word	0x08000e29
 8000714:	08000e5d 	.word	0x08000e5d
 8000718:	08000e5d 	.word	0x08000e5d
 800071c:	08000e5d 	.word	0x08000e5d
 8000720:	08000e5d 	.word	0x08000e5d
 8000724:	08000e5d 	.word	0x08000e5d
 8000728:	08000e5d 	.word	0x08000e5d
 800072c:	08000e5d 	.word	0x08000e5d
 8000730:	08000e5d 	.word	0x08000e5d
 8000734:	08000e5d 	.word	0x08000e5d
 8000738:	08000e5d 	.word	0x08000e5d
 800073c:	08000e5d 	.word	0x08000e5d
 8000740:	08000e5d 	.word	0x08000e5d
 8000744:	08000e5d 	.word	0x08000e5d
 8000748:	08000e5d 	.word	0x08000e5d
 800074c:	08000e5d 	.word	0x08000e5d
 8000750:	08000e5d 	.word	0x08000e5d
 8000754:	08000e5d 	.word	0x08000e5d
 8000758:	08000e5d 	.word	0x08000e5d
 800075c:	08000e5d 	.word	0x08000e5d
 8000760:	08000e5d 	.word	0x08000e5d
 8000764:	08000e5d 	.word	0x08000e5d
 8000768:	08000e5d 	.word	0x08000e5d
 800076c:	08000e5d 	.word	0x08000e5d
 8000770:	08000e5d 	.word	0x08000e5d
 8000774:	08000e5d 	.word	0x08000e5d
 8000778:	08000e5d 	.word	0x08000e5d
 800077c:	08000e5d 	.word	0x08000e5d
 8000780:	08000e5d 	.word	0x08000e5d
 8000784:	08000e5d 	.word	0x08000e5d
 8000788:	08000e5d 	.word	0x08000e5d
 800078c:	08000e5d 	.word	0x08000e5d
 8000790:	08000e5d 	.word	0x08000e5d
 8000794:	08000e5d 	.word	0x08000e5d
 8000798:	08000e5d 	.word	0x08000e5d
 800079c:	08000e5d 	.word	0x08000e5d
 80007a0:	08000e5d 	.word	0x08000e5d
 80007a4:	08000e5d 	.word	0x08000e5d
 80007a8:	08000e5d 	.word	0x08000e5d
 80007ac:	08000e5d 	.word	0x08000e5d
 80007b0:	08000e5d 	.word	0x08000e5d
 80007b4:	08000e5d 	.word	0x08000e5d
 80007b8:	08000e5d 	.word	0x08000e5d
 80007bc:	08000e5d 	.word	0x08000e5d
 80007c0:	08000e5d 	.word	0x08000e5d
 80007c4:	08000e5d 	.word	0x08000e5d
 80007c8:	08000e5d 	.word	0x08000e5d
 80007cc:	08000e5d 	.word	0x08000e5d
 80007d0:	08000e5d 	.word	0x08000e5d
 80007d4:	08000e5d 	.word	0x08000e5d
 80007d8:	08000e5d 	.word	0x08000e5d
 80007dc:	08000e5d 	.word	0x08000e5d
 80007e0:	08000e5d 	.word	0x08000e5d
 80007e4:	08000e5d 	.word	0x08000e5d
 80007e8:	08000e5d 	.word	0x08000e5d
 80007ec:	08000e5d 	.word	0x08000e5d
 80007f0:	08000e5d 	.word	0x08000e5d
 80007f4:	08000e5d 	.word	0x08000e5d
 80007f8:	08000e5d 	.word	0x08000e5d
 80007fc:	08000e5d 	.word	0x08000e5d
 8000800:	08000e5d 	.word	0x08000e5d
 8000804:	08000e5d 	.word	0x08000e5d
 8000808:	08000e5d 	.word	0x08000e5d
 800080c:	08000e5d 	.word	0x08000e5d
 8000810:	08000e5d 	.word	0x08000e5d
 8000814:	08000e5d 	.word	0x08000e5d
 8000818:	08000e5d 	.word	0x08000e5d
 800081c:	08000e5d 	.word	0x08000e5d
 8000820:	08000e5d 	.word	0x08000e5d
 8000824:	08000e5d 	.word	0x08000e5d
 8000828:	08000e5d 	.word	0x08000e5d
 800082c:	08000e5d 	.word	0x08000e5d
 8000830:	08000e5d 	.word	0x08000e5d
 8000834:	08000e5d 	.word	0x08000e5d
 8000838:	08000e5d 	.word	0x08000e5d
 800083c:	08000e5d 	.word	0x08000e5d
 8000840:	08000e5d 	.word	0x08000e5d
 8000844:	08000e5d 	.word	0x08000e5d
 8000848:	08000e5d 	.word	0x08000e5d
 800084c:	08000e5d 	.word	0x08000e5d
 8000850:	08000e5d 	.word	0x08000e5d
 8000854:	08000e5d 	.word	0x08000e5d
 8000858:	08000e5d 	.word	0x08000e5d
 800085c:	08000e5d 	.word	0x08000e5d
 8000860:	08000e5d 	.word	0x08000e5d
 8000864:	08000e5d 	.word	0x08000e5d
 8000868:	08000e5d 	.word	0x08000e5d
 800086c:	08000e5d 	.word	0x08000e5d
 8000870:	08000e5d 	.word	0x08000e5d
 8000874:	08000e5d 	.word	0x08000e5d
 8000878:	08000e5d 	.word	0x08000e5d
 800087c:	08000e5d 	.word	0x08000e5d
 8000880:	08000e5d 	.word	0x08000e5d
 8000884:	08000e5d 	.word	0x08000e5d
 8000888:	08000e5d 	.word	0x08000e5d
 800088c:	08000e5d 	.word	0x08000e5d
 8000890:	08000e5d 	.word	0x08000e5d
 8000894:	08000e5d 	.word	0x08000e5d
 8000898:	08000e5d 	.word	0x08000e5d
 800089c:	08000e5d 	.word	0x08000e5d
 80008a0:	08000e5d 	.word	0x08000e5d
 80008a4:	08000e5d 	.word	0x08000e5d
 80008a8:	08000e5d 	.word	0x08000e5d
 80008ac:	08000e5d 	.word	0x08000e5d
 80008b0:	08000e5d 	.word	0x08000e5d
 80008b4:	08000e5d 	.word	0x08000e5d
 80008b8:	08000e5d 	.word	0x08000e5d
 80008bc:	08000e5d 	.word	0x08000e5d
 80008c0:	08000e5d 	.word	0x08000e5d
 80008c4:	08000e5d 	.word	0x08000e5d
 80008c8:	08000e5d 	.word	0x08000e5d
 80008cc:	08000e5d 	.word	0x08000e5d
 80008d0:	08000e5d 	.word	0x08000e5d
 80008d4:	08000e5d 	.word	0x08000e5d
 80008d8:	08000e5d 	.word	0x08000e5d
 80008dc:	08000e5d 	.word	0x08000e5d
 80008e0:	08000e5d 	.word	0x08000e5d
 80008e4:	08000e5d 	.word	0x08000e5d
 80008e8:	08000e5d 	.word	0x08000e5d
 80008ec:	08000e5d 	.word	0x08000e5d
 80008f0:	08000e5d 	.word	0x08000e5d
 80008f4:	08000e5d 	.word	0x08000e5d
 80008f8:	08000e5d 	.word	0x08000e5d
 80008fc:	08000e5d 	.word	0x08000e5d
 8000900:	08000e5d 	.word	0x08000e5d
 8000904:	08000e5d 	.word	0x08000e5d
 8000908:	08000e5d 	.word	0x08000e5d
 800090c:	08000e5d 	.word	0x08000e5d
 8000910:	08000e5d 	.word	0x08000e5d
 8000914:	08000e5d 	.word	0x08000e5d
 8000918:	08000e5d 	.word	0x08000e5d
 800091c:	08000e5d 	.word	0x08000e5d
 8000920:	08000e5d 	.word	0x08000e5d
 8000924:	08000e5d 	.word	0x08000e5d
 8000928:	08000e5d 	.word	0x08000e5d
 800092c:	08000e5d 	.word	0x08000e5d
 8000930:	08000e5d 	.word	0x08000e5d
 8000934:	08000e5d 	.word	0x08000e5d
 8000938:	08000e5d 	.word	0x08000e5d
 800093c:	08000e5d 	.word	0x08000e5d
 8000940:	08000e5d 	.word	0x08000e5d
 8000944:	08000e5d 	.word	0x08000e5d
 8000948:	08000e5d 	.word	0x08000e5d
 800094c:	08000e5d 	.word	0x08000e5d
 8000950:	08000e5d 	.word	0x08000e5d
 8000954:	08000e5d 	.word	0x08000e5d
 8000958:	08000e5d 	.word	0x08000e5d
 800095c:	08000e5d 	.word	0x08000e5d
 8000960:	08000e5d 	.word	0x08000e5d
 8000964:	08000e5d 	.word	0x08000e5d
 8000968:	08000e5d 	.word	0x08000e5d
 800096c:	08000e5d 	.word	0x08000e5d
 8000970:	08000e5d 	.word	0x08000e5d
 8000974:	08000e5d 	.word	0x08000e5d
 8000978:	08000e5d 	.word	0x08000e5d
 800097c:	08000e5d 	.word	0x08000e5d
 8000980:	08000e5d 	.word	0x08000e5d
 8000984:	08000e5d 	.word	0x08000e5d
 8000988:	08000e5d 	.word	0x08000e5d
 800098c:	08000e5d 	.word	0x08000e5d
 8000990:	08000e5d 	.word	0x08000e5d
 8000994:	08000e5d 	.word	0x08000e5d
 8000998:	08000e5d 	.word	0x08000e5d
 800099c:	08000e5d 	.word	0x08000e5d
 80009a0:	08000e5d 	.word	0x08000e5d
 80009a4:	08000e5d 	.word	0x08000e5d
 80009a8:	08000e5d 	.word	0x08000e5d
 80009ac:	08000e5d 	.word	0x08000e5d
 80009b0:	08000e5d 	.word	0x08000e5d
 80009b4:	08000e5d 	.word	0x08000e5d
 80009b8:	08000e5d 	.word	0x08000e5d
 80009bc:	08000e5d 	.word	0x08000e5d
 80009c0:	08000e5d 	.word	0x08000e5d
 80009c4:	08000e5d 	.word	0x08000e5d
 80009c8:	08000e5d 	.word	0x08000e5d
 80009cc:	08000e5d 	.word	0x08000e5d
 80009d0:	08000e5d 	.word	0x08000e5d
 80009d4:	08000e4b 	.word	0x08000e4b
 80009d8:	08000e5d 	.word	0x08000e5d
 80009dc:	08000e5d 	.word	0x08000e5d
 80009e0:	08000e5d 	.word	0x08000e5d
 80009e4:	08000e5d 	.word	0x08000e5d
 80009e8:	08000e5d 	.word	0x08000e5d
 80009ec:	08000e5d 	.word	0x08000e5d
 80009f0:	08000e5d 	.word	0x08000e5d
 80009f4:	08000e5d 	.word	0x08000e5d
 80009f8:	08000e5d 	.word	0x08000e5d
 80009fc:	08000e5d 	.word	0x08000e5d
 8000a00:	08000e5d 	.word	0x08000e5d
 8000a04:	08000e5d 	.word	0x08000e5d
 8000a08:	08000e5d 	.word	0x08000e5d
 8000a0c:	08000e5d 	.word	0x08000e5d
 8000a10:	08000e5d 	.word	0x08000e5d
 8000a14:	08000e39 	.word	0x08000e39
	case 0x10: {
		printf("SDN1 ON\n");
 8000a18:	480b      	ldr	r0, [pc, #44]	; (8000a48 <HAL_UART_RxCpltCallback+0x3dc>)
 8000a1a:	f015 fd45 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a20:	2104      	movs	r1, #4
 8000a22:	2201      	movs	r2, #1
 8000a24:	4618      	mov	r0, r3
 8000a26:	f008 f94f 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000a2a:	e222      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a2c:	4808      	ldr	r0, [pc, #32]	; (8000a50 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a2e:	f015 fd3b 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <HAL_UART_RxCpltCallback+0x3e0>)
 8000a34:	2104      	movs	r1, #4
 8000a36:	2200      	movs	r2, #0
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f008 f945 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000a3e:	e218      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
 8000a40:	24000c58 	.word	0x24000c58
 8000a44:	24000638 	.word	0x24000638
 8000a48:	08016ca8 	.word	0x08016ca8
 8000a4c:	58020400 	.word	0x58020400
 8000a50:	08016cb0 	.word	0x08016cb0
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a54:	48b8      	ldr	r0, [pc, #736]	; (8000d38 <HAL_UART_RxCpltCallback+0x6cc>)
 8000a56:	f015 fd27 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a5a:	4bb8      	ldr	r3, [pc, #736]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a5c:	2120      	movs	r1, #32
 8000a5e:	2201      	movs	r2, #1
 8000a60:	4618      	mov	r0, r3
 8000a62:	f008 f931 	bl	8008cc8 <HAL_GPIO_WritePin>

		break;
 8000a66:	e204      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a68:	48b5      	ldr	r0, [pc, #724]	; (8000d40 <HAL_UART_RxCpltCallback+0x6d4>)
 8000a6a:	f015 fd1d 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a6e:	4bb3      	ldr	r3, [pc, #716]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a70:	2120      	movs	r1, #32
 8000a72:	2200      	movs	r2, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f008 f927 	bl	8008cc8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a7a:	4bb0      	ldr	r3, [pc, #704]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000a7c:	2140      	movs	r1, #64	; 0x40
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f921 	bl	8008cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a86:	4baf      	ldr	r3, [pc, #700]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a88:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f008 f91a 	bl	8008cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a94:	4bab      	ldr	r3, [pc, #684]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a96:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f008 f913 	bl	8008cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000aa2:	4ba8      	ldr	r3, [pc, #672]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f008 f90c 	bl	8008cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000ab0:	4ba4      	ldr	r3, [pc, #656]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ab2:	2140      	movs	r1, #64	; 0x40
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f008 f906 	bl	8008cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000abc:	4ba1      	ldr	r3, [pc, #644]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000abe:	2180      	movs	r1, #128	; 0x80
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f008 f900 	bl	8008cc8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ac8:	4b9e      	ldr	r3, [pc, #632]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ace:	2200      	movs	r2, #0
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f008 f8f9 	bl	8008cc8 <HAL_GPIO_WritePin>

		break;
 8000ad6:	e1cc      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000ad8:	489b      	ldr	r0, [pc, #620]	; (8000d48 <HAL_UART_RxCpltCallback+0x6dc>)
 8000ada:	f015 fce5 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ade:	4b99      	ldr	r3, [pc, #612]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ae0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f008 f8ee 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000aec:	e1c1      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000aee:	4897      	ldr	r0, [pc, #604]	; (8000d4c <HAL_UART_RxCpltCallback+0x6e0>)
 8000af0:	f015 fcda 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000af4:	4b93      	ldr	r3, [pc, #588]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000af6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000afa:	2200      	movs	r2, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f008 f8e3 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000b02:	e1b6      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000b04:	4892      	ldr	r0, [pc, #584]	; (8000d50 <HAL_UART_RxCpltCallback+0x6e4>)
 8000b06:	f015 fccf 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000b0a:	4b8e      	ldr	r3, [pc, #568]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b0c:	2180      	movs	r1, #128	; 0x80
 8000b0e:	2201      	movs	r2, #1
 8000b10:	4618      	mov	r0, r3
 8000b12:	f008 f8d9 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000b16:	e1ac      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000b18:	488e      	ldr	r0, [pc, #568]	; (8000d54 <HAL_UART_RxCpltCallback+0x6e8>)
 8000b1a:	f015 fcc5 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b1e:	4b89      	ldr	r3, [pc, #548]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b20:	2180      	movs	r1, #128	; 0x80
 8000b22:	2200      	movs	r2, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f008 f8cf 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000b2a:	e1a2      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b2c:	488a      	ldr	r0, [pc, #552]	; (8000d58 <HAL_UART_RxCpltCallback+0x6ec>)
 8000b2e:	f015 fcbb 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b32:	4b84      	ldr	r3, [pc, #528]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b34:	2140      	movs	r1, #64	; 0x40
 8000b36:	2201      	movs	r2, #1
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f008 f8c5 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000b3e:	e198      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b40:	4886      	ldr	r0, [pc, #536]	; (8000d5c <HAL_UART_RxCpltCallback+0x6f0>)
 8000b42:	f015 fcb1 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b46:	4b7f      	ldr	r3, [pc, #508]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b48:	2140      	movs	r1, #64	; 0x40
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f008 f8bb 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000b52:	e18e      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b54:	4882      	ldr	r0, [pc, #520]	; (8000d60 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b56:	f015 fca7 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b5a:	4b7a      	ldr	r3, [pc, #488]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b60:	2201      	movs	r2, #1
 8000b62:	4618      	mov	r0, r3
 8000b64:	f008 f8b0 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000b68:	e183      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b6a:	487e      	ldr	r0, [pc, #504]	; (8000d64 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b6c:	f015 fc9c 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b70:	4b74      	ldr	r3, [pc, #464]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b76:	2200      	movs	r2, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f008 f8a5 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000b7e:	e178      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b80:	4879      	ldr	r0, [pc, #484]	; (8000d68 <HAL_UART_RxCpltCallback+0x6fc>)
 8000b82:	f015 fc91 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b86:	4b6f      	ldr	r3, [pc, #444]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f008 f89a 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000b94:	e16d      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b96:	4875      	ldr	r0, [pc, #468]	; (8000d6c <HAL_UART_RxCpltCallback+0x700>)
 8000b98:	f015 fc86 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b9c:	4b69      	ldr	r3, [pc, #420]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 f88f 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000baa:	e162      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000bac:	4870      	ldr	r0, [pc, #448]	; (8000d70 <HAL_UART_RxCpltCallback+0x704>)
 8000bae:	f015 fc7b 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000bb2:	4b64      	ldr	r3, [pc, #400]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bb4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb8:	2201      	movs	r2, #1
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f008 f884 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000bc0:	e157      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000bc2:	486c      	ldr	r0, [pc, #432]	; (8000d74 <HAL_UART_RxCpltCallback+0x708>)
 8000bc4:	f015 fc70 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bc8:	4b5e      	ldr	r3, [pc, #376]	; (8000d44 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bce:	2200      	movs	r2, #0
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f008 f879 	bl	8008cc8 <HAL_GPIO_WritePin>

		break;
 8000bd6:	e14c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bd8:	4867      	ldr	r0, [pc, #412]	; (8000d78 <HAL_UART_RxCpltCallback+0x70c>)
 8000bda:	f015 fc65 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bde:	4b57      	ldr	r3, [pc, #348]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000be0:	2140      	movs	r1, #64	; 0x40
 8000be2:	2201      	movs	r2, #1
 8000be4:	4618      	mov	r0, r3
 8000be6:	f008 f86f 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000bea:	e142      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bec:	4863      	ldr	r0, [pc, #396]	; (8000d7c <HAL_UART_RxCpltCallback+0x710>)
 8000bee:	f015 fc5b 	bl	80164a8 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bf2:	4b52      	ldr	r3, [pc, #328]	; (8000d3c <HAL_UART_RxCpltCallback+0x6d0>)
 8000bf4:	2140      	movs	r1, #64	; 0x40
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f008 f865 	bl	8008cc8 <HAL_GPIO_WritePin>
		break;
 8000bfe:	e138      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000c00:	485f      	ldr	r0, [pc, #380]	; (8000d80 <HAL_UART_RxCpltCallback+0x714>)
 8000c02:	f015 fc51 	bl	80164a8 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000c06:	2300      	movs	r3, #0
 8000c08:	9300      	str	r3, [sp, #0]
 8000c0a:	2320      	movs	r3, #32
 8000c0c:	4a5d      	ldr	r2, [pc, #372]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000c0e:	2100      	movs	r1, #0
 8000c10:	485d      	ldr	r0, [pc, #372]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000c12:	f004 fcc9 	bl	80055a8 <HAL_DAC_Start_DMA>
		break;
 8000c16:	e12c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000c18:	485c      	ldr	r0, [pc, #368]	; (8000d8c <HAL_UART_RxCpltCallback+0x720>)
 8000c1a:	f015 fc45 	bl	80164a8 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c1e:	2100      	movs	r1, #0
 8000c20:	4859      	ldr	r0, [pc, #356]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000c22:	f004 fd81 	bl	8005728 <HAL_DAC_Stop_DMA>
		break;
 8000c26:	e124      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c28:	4859      	ldr	r0, [pc, #356]	; (8000d90 <HAL_UART_RxCpltCallback+0x724>)
 8000c2a:	f015 fc3d 	bl	80164a8 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c2e:	210c      	movs	r1, #12
 8000c30:	4858      	ldr	r0, [pc, #352]	; (8000d94 <HAL_UART_RxCpltCallback+0x728>)
 8000c32:	f00d fc11 	bl	800e458 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c36:	4b58      	ldr	r3, [pc, #352]	; (8000d98 <HAL_UART_RxCpltCallback+0x72c>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c3c:	4b57      	ldr	r3, [pc, #348]	; (8000d9c <HAL_UART_RxCpltCallback+0x730>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	801a      	strh	r2, [r3, #0]
		break;
 8000c42:	e116      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c44:	4856      	ldr	r0, [pc, #344]	; (8000da0 <HAL_UART_RxCpltCallback+0x734>)
 8000c46:	f015 fc2f 	bl	80164a8 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c4a:	210c      	movs	r1, #12
 8000c4c:	4851      	ldr	r0, [pc, #324]	; (8000d94 <HAL_UART_RxCpltCallback+0x728>)
 8000c4e:	f00d fd5d 	bl	800e70c <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c52:	4b51      	ldr	r3, [pc, #324]	; (8000d98 <HAL_UART_RxCpltCallback+0x72c>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	701a      	strb	r2, [r3, #0]
		break;
 8000c58:	e10b      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c5a:	4852      	ldr	r0, [pc, #328]	; (8000da4 <HAL_UART_RxCpltCallback+0x738>)
 8000c5c:	f015 fc24 	bl	80164a8 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	4851      	ldr	r0, [pc, #324]	; (8000da8 <HAL_UART_RxCpltCallback+0x73c>)
 8000c64:	f00d fbf8 	bl	800e458 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c68:	4b50      	ldr	r3, [pc, #320]	; (8000dac <HAL_UART_RxCpltCallback+0x740>)
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c6e:	4b50      	ldr	r3, [pc, #320]	; (8000db0 <HAL_UART_RxCpltCallback+0x744>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	801a      	strh	r2, [r3, #0]
		break;
 8000c74:	e0fd      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c76:	484f      	ldr	r0, [pc, #316]	; (8000db4 <HAL_UART_RxCpltCallback+0x748>)
 8000c78:	f015 fc16 	bl	80164a8 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	484a      	ldr	r0, [pc, #296]	; (8000da8 <HAL_UART_RxCpltCallback+0x73c>)
 8000c80:	f00d fd44 	bl	800e70c <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <HAL_UART_RxCpltCallback+0x740>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	701a      	strb	r2, [r3, #0]
		break;
 8000c8a:	e0f2      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c8c:	484a      	ldr	r0, [pc, #296]	; (8000db8 <HAL_UART_RxCpltCallback+0x74c>)
 8000c8e:	f015 fc0b 	bl	80164a8 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c92:	2100      	movs	r1, #0
 8000c94:	4849      	ldr	r0, [pc, #292]	; (8000dbc <HAL_UART_RxCpltCallback+0x750>)
 8000c96:	f00d fbdf 	bl	800e458 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000c9a:	4b49      	ldr	r3, [pc, #292]	; (8000dc0 <HAL_UART_RxCpltCallback+0x754>)
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000ca0:	4b48      	ldr	r3, [pc, #288]	; (8000dc4 <HAL_UART_RxCpltCallback+0x758>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	801a      	strh	r2, [r3, #0]
		break;
 8000ca6:	e0e4      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000ca8:	4847      	ldr	r0, [pc, #284]	; (8000dc8 <HAL_UART_RxCpltCallback+0x75c>)
 8000caa:	f015 fbfd 	bl	80164a8 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	4842      	ldr	r0, [pc, #264]	; (8000dbc <HAL_UART_RxCpltCallback+0x750>)
 8000cb2:	f00d fd2b 	bl	800e70c <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000cb6:	4b42      	ldr	r3, [pc, #264]	; (8000dc0 <HAL_UART_RxCpltCallback+0x754>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	701a      	strb	r2, [r3, #0]
		break;
 8000cbc:	e0d9      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000cbe:	4843      	ldr	r0, [pc, #268]	; (8000dcc <HAL_UART_RxCpltCallback+0x760>)
 8000cc0:	f015 fbf2 	bl	80164a8 <puts>
		if (step < 17) {
 8000cc4:	4b42      	ldr	r3, [pc, #264]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b10      	cmp	r3, #16
 8000cca:	f200 80cb 	bhi.w	8000e64 <HAL_UART_RxCpltCallback+0x7f8>
			step += 2;
 8000cce:	4b40      	ldr	r3, [pc, #256]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	3302      	adds	r3, #2
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b3e      	ldr	r3, [pc, #248]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cd8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cda:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000ce2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4827      	ldr	r0, [pc, #156]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000cec:	f004 fdbf 	bl	800586e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	4825      	ldr	r0, [pc, #148]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000cf4:	f004 fc00 	bl	80054f8 <HAL_DAC_Start>
		}
		break;
 8000cf8:	e0b4      	b.n	8000e64 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000cfa:	4836      	ldr	r0, [pc, #216]	; (8000dd4 <HAL_UART_RxCpltCallback+0x768>)
 8000cfc:	f015 fbd4 	bl	80164a8 <puts>
		if (step > 3) {
 8000d00:	4b33      	ldr	r3, [pc, #204]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b03      	cmp	r3, #3
 8000d06:	f240 80af 	bls.w	8000e68 <HAL_UART_RxCpltCallback+0x7fc>
			step -= 2;
 8000d0a:	4b31      	ldr	r3, [pc, #196]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	3b02      	subs	r3, #2
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	4b2f      	ldr	r3, [pc, #188]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d14:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000d16:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_UART_RxCpltCallback+0x764>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <HAL_UART_RxCpltCallback+0x718>)
 8000d1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d22:	2200      	movs	r2, #0
 8000d24:	2100      	movs	r1, #0
 8000d26:	4818      	ldr	r0, [pc, #96]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000d28:	f004 fda1 	bl	800586e <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4816      	ldr	r0, [pc, #88]	; (8000d88 <HAL_UART_RxCpltCallback+0x71c>)
 8000d30:	f004 fbe2 	bl	80054f8 <HAL_DAC_Start>
		}
		break;
 8000d34:	e098      	b.n	8000e68 <HAL_UART_RxCpltCallback+0x7fc>
 8000d36:	bf00      	nop
 8000d38:	08016cbc 	.word	0x08016cbc
 8000d3c:	58020400 	.word	0x58020400
 8000d40:	08016cc8 	.word	0x08016cc8
 8000d44:	58020800 	.word	0x58020800
 8000d48:	08016cd4 	.word	0x08016cd4
 8000d4c:	08016ce0 	.word	0x08016ce0
 8000d50:	08016cf0 	.word	0x08016cf0
 8000d54:	08016cfc 	.word	0x08016cfc
 8000d58:	08016d08 	.word	0x08016d08
 8000d5c:	08016d14 	.word	0x08016d14
 8000d60:	08016d24 	.word	0x08016d24
 8000d64:	08016d30 	.word	0x08016d30
 8000d68:	08016d3c 	.word	0x08016d3c
 8000d6c:	08016d48 	.word	0x08016d48
 8000d70:	08016d54 	.word	0x08016d54
 8000d74:	08016d64 	.word	0x08016d64
 8000d78:	08016d74 	.word	0x08016d74
 8000d7c:	08016d80 	.word	0x08016d80
 8000d80:	08016d90 	.word	0x08016d90
 8000d84:	24000010 	.word	0x24000010
 8000d88:	240002f4 	.word	0x240002f4
 8000d8c:	08016da0 	.word	0x08016da0
 8000d90:	08016db0 	.word	0x08016db0
 8000d94:	24000554 	.word	0x24000554
 8000d98:	24000c4f 	.word	0x24000c4f
 8000d9c:	24000c4a 	.word	0x24000c4a
 8000da0:	08016db8 	.word	0x08016db8
 8000da4:	08016dc4 	.word	0x08016dc4
 8000da8:	24000508 	.word	0x24000508
 8000dac:	24000c4e 	.word	0x24000c4e
 8000db0:	24000c48 	.word	0x24000c48
 8000db4:	08016dcc 	.word	0x08016dcc
 8000db8:	08016dd4 	.word	0x08016dd4
 8000dbc:	240005a0 	.word	0x240005a0
 8000dc0:	24000c50 	.word	0x24000c50
 8000dc4:	24000c4c 	.word	0x24000c4c
 8000dc8:	08016ddc 	.word	0x08016ddc
 8000dcc:	08016de4 	.word	0x08016de4
 8000dd0:	2400000c 	.word	0x2400000c
 8000dd4:	08016dec 	.word	0x08016dec
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000dd8:	4828      	ldr	r0, [pc, #160]	; (8000e7c <HAL_UART_RxCpltCallback+0x810>)
 8000dda:	f015 fb65 	bl	80164a8 <puts>
		if (cadence <= 50000) {
 8000dde:	4b28      	ldr	r3, [pc, #160]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d840      	bhi.n	8000e6c <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000dea:	4b25      	ldr	r3, [pc, #148]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	4a23      	ldr	r2, [pc, #140]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000df2:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000df8:	4b21      	ldr	r3, [pc, #132]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000dfe:	e035      	b.n	8000e6c <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000e00:	4820      	ldr	r0, [pc, #128]	; (8000e84 <HAL_UART_RxCpltCallback+0x818>)
 8000e02:	f015 fb51 	bl	80164a8 <puts>
		if (cadence >= 6250) {
 8000e06:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f641 0269 	movw	r2, #6249	; 0x1869
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d92e      	bls.n	8000e70 <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000e12:	4b1b      	ldr	r3, [pc, #108]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	085b      	lsrs	r3, r3, #1
 8000e18:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e1a:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e20:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_UART_RxCpltCallback+0x814>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e26:	e023      	b.n	8000e70 <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e28:	4817      	ldr	r0, [pc, #92]	; (8000e88 <HAL_UART_RxCpltCallback+0x81c>)
 8000e2a:	f015 fb3d 	bl	80164a8 <puts>
		// TODO: Exit stop mode
		break;
 8000e2e:	e020      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e30:	4816      	ldr	r0, [pc, #88]	; (8000e8c <HAL_UART_RxCpltCallback+0x820>)
 8000e32:	f015 fb39 	bl	80164a8 <puts>
		// TODO: Enter stop mode
		break;
 8000e36:	e01c      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e38:	4815      	ldr	r0, [pc, #84]	; (8000e90 <HAL_UART_RxCpltCallback+0x824>)
 8000e3a:	f015 fb35 	bl	80164a8 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e3e:	4b15      	ldr	r3, [pc, #84]	; (8000e94 <HAL_UART_RxCpltCallback+0x828>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4618      	mov	r0, r3
 8000e44:	f013 fb9c 	bl	8014580 <xTaskResumeFromISR>
		break;
 8000e48:	e013      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e4a:	4813      	ldr	r0, [pc, #76]	; (8000e98 <HAL_UART_RxCpltCallback+0x82c>)
 8000e4c:	f015 fb2c 	bl	80164a8 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e50:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_UART_RxCpltCallback+0x830>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f013 fb93 	bl	8014580 <xTaskResumeFromISR>
		break;
 8000e5a:	e00a      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
	}
	default: {
		printf("Unknown Command\n");
 8000e5c:	4810      	ldr	r0, [pc, #64]	; (8000ea0 <HAL_UART_RxCpltCallback+0x834>)
 8000e5e:	f015 fb23 	bl	80164a8 <puts>
		break;
 8000e62:	e006      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e64:	bf00      	nop
 8000e66:	e004      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e68:	bf00      	nop
 8000e6a:	e002      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e6c:	bf00      	nop
 8000e6e:	e000      	b.n	8000e72 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e70:	bf00      	nop
	}
	}
}
 8000e72:	bf00      	nop
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	08016df8 	.word	0x08016df8
 8000e80:	24000008 	.word	0x24000008
 8000e84:	08016e04 	.word	0x08016e04
 8000e88:	08016e10 	.word	0x08016e10
 8000e8c:	08016e20 	.word	0x08016e20
 8000e90:	08016e30 	.word	0x08016e30
 8000e94:	24000754 	.word	0x24000754
 8000e98:	08016e3c 	.word	0x08016e3c
 8000e9c:	240009b4 	.word	0x240009b4
 8000ea0:	08016e48 	.word	0x08016e48

08000ea4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ea8:	f002 fd92 	bl	80039d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000eac:	f000 f8b4 	bl	8001018 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000eb0:	f000 f92e 	bl	8001110 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb4:	f000 fed6 	bl	8001c64 <MX_GPIO_Init>
  MX_DMA_Init();
 8000eb8:	f000 fe9c 	bl	8001bf4 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ebc:	f000 fdb0 	bl	8001a20 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000ec0:	f000 fe4c 	bl	8001b5c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000ec4:	f000 fb3a 	bl	800153c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ec8:	f000 fc30 	bl	800172c <MX_SPI2_Init>
  MX_TIM2_Init();
 8000ecc:	f000 fd32 	bl	8001934 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000ed0:	f000 fc84 	bl	80017dc <MX_TIM1_Init>
  MX_ADC3_Init();
 8000ed4:	f000 fa6e 	bl	80013b4 <MX_ADC3_Init>
  MX_ADC1_Init();
 8000ed8:	f000 f94a 	bl	8001170 <MX_ADC1_Init>
  MX_DAC1_Init();
 8000edc:	f000 fafc 	bl	80014d8 <MX_DAC1_Init>
  MX_SPI1_Init();
 8000ee0:	f000 fbcc 	bl	800167c <MX_SPI1_Init>
  MX_RTC_Init();
 8000ee4:	f000 fb6c 	bl	80015c0 <MX_RTC_Init>
  MX_TIM4_Init();
 8000ee8:	f000 fdea 	bl	8001ac0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
#ifndef DAMY
	if (!handshake()) {
 8000eec:	f001 f83c 	bl	8001f68 <handshake>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d101      	bne.n	8000efa <main+0x56>
		Error_Handler();
 8000ef6:	f001 fe29 	bl	8002b4c <Error_Handler>
	}
#endif
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000efa:	f011 fc7b 	bl	80127f4 <osKernelInitialize>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2108      	movs	r1, #8
 8000f02:	2080      	movs	r0, #128	; 0x80
 8000f04:	f011 fe9e 	bl	8012c44 <osMessageQueueNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a28      	ldr	r2, [pc, #160]	; (8000fac <main+0x108>)
 8000f0c:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of PMT_task */
  PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000f0e:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <main+0x10c>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4828      	ldr	r0, [pc, #160]	; (8000fb4 <main+0x110>)
 8000f14:	f011 fcb8 	bl	8012888 <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a27      	ldr	r2, [pc, #156]	; (8000fb8 <main+0x114>)
 8000f1c:	6013      	str	r3, [r2, #0]

  /* creation of ERPA_task */
  ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000f1e:	4a27      	ldr	r2, [pc, #156]	; (8000fbc <main+0x118>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4827      	ldr	r0, [pc, #156]	; (8000fc0 <main+0x11c>)
 8000f24:	f011 fcb0 	bl	8012888 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a26      	ldr	r2, [pc, #152]	; (8000fc4 <main+0x120>)
 8000f2c:	6013      	str	r3, [r2, #0]

  /* creation of HK_task */
  HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f2e:	4a26      	ldr	r2, [pc, #152]	; (8000fc8 <main+0x124>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4826      	ldr	r0, [pc, #152]	; (8000fcc <main+0x128>)
 8000f34:	f011 fca8 	bl	8012888 <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a25      	ldr	r2, [pc, #148]	; (8000fd0 <main+0x12c>)
 8000f3c:	6013      	str	r3, [r2, #0]

  /* creation of UART_RX_task */
  UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL, &UART_RX_task_attributes);
 8000f3e:	4a25      	ldr	r2, [pc, #148]	; (8000fd4 <main+0x130>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4825      	ldr	r0, [pc, #148]	; (8000fd8 <main+0x134>)
 8000f44:	f011 fca0 	bl	8012888 <osThreadNew>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <main+0x138>)
 8000f4c:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_on_task */
  GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL, &GPIO_on_task_attributes);
 8000f4e:	4a24      	ldr	r2, [pc, #144]	; (8000fe0 <main+0x13c>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <main+0x140>)
 8000f54:	f011 fc98 	bl	8012888 <osThreadNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a23      	ldr	r2, [pc, #140]	; (8000fe8 <main+0x144>)
 8000f5c:	6013      	str	r3, [r2, #0]

  /* creation of GPIO_off_task */
  GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL, &GPIO_off_task_attributes);
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <main+0x148>)
 8000f60:	2100      	movs	r1, #0
 8000f62:	4823      	ldr	r0, [pc, #140]	; (8000ff0 <main+0x14c>)
 8000f64:	f011 fc90 	bl	8012888 <osThreadNew>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4a22      	ldr	r2, [pc, #136]	; (8000ff4 <main+0x150>)
 8000f6c:	6013      	str	r3, [r2, #0]

  /* creation of UART_TX_task */
  UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL, &UART_TX_task_attributes);
 8000f6e:	4a22      	ldr	r2, [pc, #136]	; (8000ff8 <main+0x154>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	4822      	ldr	r0, [pc, #136]	; (8000ffc <main+0x158>)
 8000f74:	f011 fc88 	bl	8012888 <osThreadNew>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	4a21      	ldr	r2, [pc, #132]	; (8001000 <main+0x15c>)
 8000f7c:	6013      	str	r3, [r2, #0]

  /* creation of Voltage_Monitor */
  Voltage_MonitorHandle = osThreadNew(Voltage_Monitor_init, NULL, &Voltage_Monitor_attributes);
 8000f7e:	4a21      	ldr	r2, [pc, #132]	; (8001004 <main+0x160>)
 8000f80:	2100      	movs	r1, #0
 8000f82:	4821      	ldr	r0, [pc, #132]	; (8001008 <main+0x164>)
 8000f84:	f011 fc80 	bl	8012888 <osThreadNew>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	4a20      	ldr	r2, [pc, #128]	; (800100c <main+0x168>)
 8000f8c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f8e:	2000      	movs	r0, #0
 8000f90:	f011 fd6e 	bl	8012a70 <osEventFlagsNew>
 8000f94:	4603      	mov	r3, r0
 8000f96:	4a1e      	ldr	r2, [pc, #120]	; (8001010 <main+0x16c>)
 8000f98:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f9a:	f001 f873 	bl	8002084 <system_setup>
	printf("Starting kernal...\n");
 8000f9e:	481d      	ldr	r0, [pc, #116]	; (8001014 <main+0x170>)
 8000fa0:	f015 fa82 	bl	80164a8 <puts>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000fa4:	f011 fc4a 	bl	801283c <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000fa8:	e7fe      	b.n	8000fa8 <main+0x104>
 8000faa:	bf00      	nop
 8000fac:	24000c38 	.word	0x24000c38
 8000fb0:	08016ea4 	.word	0x08016ea4
 8000fb4:	08002825 	.word	0x08002825
 8000fb8:	24000744 	.word	0x24000744
 8000fbc:	08016ec8 	.word	0x08016ec8
 8000fc0:	08002869 	.word	0x08002869
 8000fc4:	24000748 	.word	0x24000748
 8000fc8:	08016eec 	.word	0x08016eec
 8000fcc:	080028ad 	.word	0x080028ad
 8000fd0:	2400074c 	.word	0x2400074c
 8000fd4:	08016f10 	.word	0x08016f10
 8000fd8:	080028f1 	.word	0x080028f1
 8000fdc:	24000750 	.word	0x24000750
 8000fe0:	08016f34 	.word	0x08016f34
 8000fe4:	08002915 	.word	0x08002915
 8000fe8:	24000754 	.word	0x24000754
 8000fec:	08016f58 	.word	0x08016f58
 8000ff0:	080029bd 	.word	0x080029bd
 8000ff4:	240009b4 	.word	0x240009b4
 8000ff8:	08016f7c 	.word	0x08016f7c
 8000ffc:	08002a65 	.word	0x08002a65
 8001000:	24000c14 	.word	0x24000c14
 8001004:	08016fa0 	.word	0x08016fa0
 8001008:	08002b1d 	.word	0x08002b1d
 800100c:	24000c18 	.word	0x24000c18
 8001010:	24000c54 	.word	0x24000c54
 8001014:	08016e58 	.word	0x08016e58

08001018 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b09c      	sub	sp, #112	; 0x70
 800101c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800101e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001022:	224c      	movs	r2, #76	; 0x4c
 8001024:	2100      	movs	r1, #0
 8001026:	4618      	mov	r0, r3
 8001028:	f015 f8e8 	bl	80161fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800102c:	1d3b      	adds	r3, r7, #4
 800102e:	2220      	movs	r2, #32
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f015 f8e2 	bl	80161fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001038:	2002      	movs	r0, #2
 800103a:	f008 fc6b 	bl	8009914 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800103e:	2300      	movs	r3, #0
 8001040:	603b      	str	r3, [r7, #0]
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <SystemClock_Config+0xf0>)
 8001044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001046:	4a30      	ldr	r2, [pc, #192]	; (8001108 <SystemClock_Config+0xf0>)
 8001048:	f023 0301 	bic.w	r3, r3, #1
 800104c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800104e:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <SystemClock_Config+0xf0>)
 8001050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	603b      	str	r3, [r7, #0]
 8001058:	4b2c      	ldr	r3, [pc, #176]	; (800110c <SystemClock_Config+0xf4>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001060:	4a2a      	ldr	r2, [pc, #168]	; (800110c <SystemClock_Config+0xf4>)
 8001062:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001066:	6193      	str	r3, [r2, #24]
 8001068:	4b28      	ldr	r3, [pc, #160]	; (800110c <SystemClock_Config+0xf4>)
 800106a:	699b      	ldr	r3, [r3, #24]
 800106c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001070:	603b      	str	r3, [r7, #0]
 8001072:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001074:	bf00      	nop
 8001076:	4b25      	ldr	r3, [pc, #148]	; (800110c <SystemClock_Config+0xf4>)
 8001078:	699b      	ldr	r3, [r3, #24]
 800107a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800107e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001082:	d1f8      	bne.n	8001076 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001084:	2301      	movs	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001088:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800108c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800108e:	2302      	movs	r3, #2
 8001090:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001092:	2302      	movs	r3, #2
 8001094:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001096:	2304      	movs	r3, #4
 8001098:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 32;
 800109a:	2320      	movs	r3, #32
 800109c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 4;
 800109e:	2304      	movs	r3, #4
 80010a0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010a2:	2304      	movs	r3, #4
 80010a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010a6:	2302      	movs	r3, #2
 80010a8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80010aa:	2308      	movs	r3, #8
 80010ac:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80010b2:	2300      	movs	r3, #0
 80010b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ba:	4618      	mov	r0, r3
 80010bc:	f008 fc64 	bl	8009988 <HAL_RCC_OscConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80010c6:	f001 fd41 	bl	8002b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010ca:	233f      	movs	r3, #63	; 0x3f
 80010cc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010ce:	2303      	movs	r3, #3
 80010d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010ea:	1d3b      	adds	r3, r7, #4
 80010ec:	2101      	movs	r1, #1
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 f8a4 	bl	800a23c <HAL_RCC_ClockConfig>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80010fa:	f001 fd27 	bl	8002b4c <Error_Handler>
  }
}
 80010fe:	bf00      	nop
 8001100:	3770      	adds	r7, #112	; 0x70
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	58000400 	.word	0x58000400
 800110c:	58024800 	.word	0x58024800

08001110 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b0b0      	sub	sp, #192	; 0xc0
 8001114:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001116:	463b      	mov	r3, r7
 8001118:	22c0      	movs	r2, #192	; 0xc0
 800111a:	2100      	movs	r1, #0
 800111c:	4618      	mov	r0, r3
 800111e:	f015 f86d 	bl	80161fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001122:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 4;
 800112e:	2304      	movs	r3, #4
 8001130:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 32;
 8001132:	2320      	movs	r3, #32
 8001134:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 8;
 8001136:	2308      	movs	r3, #8
 8001138:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800113a:	2304      	movs	r3, #4
 800113c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8001146:	2300      	movs	r3, #0
 8001148:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800114e:	2300      	movs	r3, #0
 8001150:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001154:	463b      	mov	r3, r7
 8001156:	4618      	mov	r0, r3
 8001158:	f009 fc3e 	bl	800a9d8 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8001162:	f001 fcf3 	bl	8002b4c <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	37c0      	adds	r7, #192	; 0xc0
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b08a      	sub	sp, #40	; 0x28
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001176:	f107 031c 	add.w	r3, r7, #28
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001182:	463b      	mov	r3, r7
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]
 8001190:	615a      	str	r2, [r3, #20]
 8001192:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001194:	4b7a      	ldr	r3, [pc, #488]	; (8001380 <MX_ADC1_Init+0x210>)
 8001196:	4a7b      	ldr	r2, [pc, #492]	; (8001384 <MX_ADC1_Init+0x214>)
 8001198:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800119a:	4b79      	ldr	r3, [pc, #484]	; (8001380 <MX_ADC1_Init+0x210>)
 800119c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011a2:	4b77      	ldr	r3, [pc, #476]	; (8001380 <MX_ADC1_Init+0x210>)
 80011a4:	2208      	movs	r2, #8
 80011a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011a8:	4b75      	ldr	r3, [pc, #468]	; (8001380 <MX_ADC1_Init+0x210>)
 80011aa:	2201      	movs	r2, #1
 80011ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011ae:	4b74      	ldr	r3, [pc, #464]	; (8001380 <MX_ADC1_Init+0x210>)
 80011b0:	2204      	movs	r2, #4
 80011b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011b4:	4b72      	ldr	r3, [pc, #456]	; (8001380 <MX_ADC1_Init+0x210>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80011ba:	4b71      	ldr	r3, [pc, #452]	; (8001380 <MX_ADC1_Init+0x210>)
 80011bc:	2201      	movs	r2, #1
 80011be:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 11;
 80011c0:	4b6f      	ldr	r3, [pc, #444]	; (8001380 <MX_ADC1_Init+0x210>)
 80011c2:	220b      	movs	r2, #11
 80011c4:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011c6:	4b6e      	ldr	r3, [pc, #440]	; (8001380 <MX_ADC1_Init+0x210>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011cc:	4b6c      	ldr	r3, [pc, #432]	; (8001380 <MX_ADC1_Init+0x210>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d2:	4b6b      	ldr	r3, [pc, #428]	; (8001380 <MX_ADC1_Init+0x210>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80011d8:	4b69      	ldr	r3, [pc, #420]	; (8001380 <MX_ADC1_Init+0x210>)
 80011da:	2203      	movs	r2, #3
 80011dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011de:	4b68      	ldr	r3, [pc, #416]	; (8001380 <MX_ADC1_Init+0x210>)
 80011e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011e4:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011e6:	4b66      	ldr	r3, [pc, #408]	; (8001380 <MX_ADC1_Init+0x210>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80011ec:	4b64      	ldr	r3, [pc, #400]	; (8001380 <MX_ADC1_Init+0x210>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011f4:	4862      	ldr	r0, [pc, #392]	; (8001380 <MX_ADC1_Init+0x210>)
 80011f6:	f002 fe77 	bl	8003ee8 <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8001200:	f001 fca4 	bl	8002b4c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001204:	2300      	movs	r3, #0
 8001206:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001208:	f107 031c 	add.w	r3, r7, #28
 800120c:	4619      	mov	r1, r3
 800120e:	485c      	ldr	r0, [pc, #368]	; (8001380 <MX_ADC1_Init+0x210>)
 8001210:	f003 ff92 	bl	8005138 <HAL_ADCEx_MultiModeConfigChannel>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 800121a:	f001 fc97 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800121e:	4b5a      	ldr	r3, [pc, #360]	; (8001388 <MX_ADC1_Init+0x218>)
 8001220:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001222:	2306      	movs	r3, #6
 8001224:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001226:	2307      	movs	r3, #7
 8001228:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800122a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800122e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001230:	2304      	movs	r3, #4
 8001232:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001238:	2300      	movs	r3, #0
 800123a:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123c:	463b      	mov	r3, r7
 800123e:	4619      	mov	r1, r3
 8001240:	484f      	ldr	r0, [pc, #316]	; (8001380 <MX_ADC1_Init+0x210>)
 8001242:	f003 f8d5 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 800124c:	f001 fc7e 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001250:	4b4e      	ldr	r3, [pc, #312]	; (800138c <MX_ADC1_Init+0x21c>)
 8001252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001254:	230c      	movs	r3, #12
 8001256:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001258:	463b      	mov	r3, r7
 800125a:	4619      	mov	r1, r3
 800125c:	4848      	ldr	r0, [pc, #288]	; (8001380 <MX_ADC1_Init+0x210>)
 800125e:	f003 f8c7 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001268:	f001 fc70 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800126c:	4b48      	ldr	r3, [pc, #288]	; (8001390 <MX_ADC1_Init+0x220>)
 800126e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001270:	2312      	movs	r3, #18
 8001272:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001274:	463b      	mov	r3, r7
 8001276:	4619      	mov	r1, r3
 8001278:	4841      	ldr	r0, [pc, #260]	; (8001380 <MX_ADC1_Init+0x210>)
 800127a:	f003 f8b9 	bl	80043f0 <HAL_ADC_ConfigChannel>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 8001284:	f001 fc62 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001288:	4b42      	ldr	r3, [pc, #264]	; (8001394 <MX_ADC1_Init+0x224>)
 800128a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800128c:	2318      	movs	r3, #24
 800128e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	483a      	ldr	r0, [pc, #232]	; (8001380 <MX_ADC1_Init+0x210>)
 8001296:	f003 f8ab 	bl	80043f0 <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x134>
  {
    Error_Handler();
 80012a0:	f001 fc54 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80012a4:	4b3c      	ldr	r3, [pc, #240]	; (8001398 <MX_ADC1_Init+0x228>)
 80012a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80012a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80012ac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4833      	ldr	r0, [pc, #204]	; (8001380 <MX_ADC1_Init+0x210>)
 80012b4:	f003 f89c 	bl	80043f0 <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0x152>
  {
    Error_Handler();
 80012be:	f001 fc45 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80012c2:	4b36      	ldr	r3, [pc, #216]	; (800139c <MX_ADC1_Init+0x22c>)
 80012c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80012c6:	f44f 7383 	mov.w	r3, #262	; 0x106
 80012ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	482b      	ldr	r0, [pc, #172]	; (8001380 <MX_ADC1_Init+0x210>)
 80012d2:	f003 f88d 	bl	80043f0 <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x170>
  {
    Error_Handler();
 80012dc:	f001 fc36 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <MX_ADC1_Init+0x230>)
 80012e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80012e4:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012e8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4824      	ldr	r0, [pc, #144]	; (8001380 <MX_ADC1_Init+0x210>)
 80012f0:	f003 f87e 	bl	80043f0 <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x18e>
  {
    Error_Handler();
 80012fa:	f001 fc27 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <MX_ADC1_Init+0x234>)
 8001300:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001302:	f44f 7389 	mov.w	r3, #274	; 0x112
 8001306:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	481c      	ldr	r0, [pc, #112]	; (8001380 <MX_ADC1_Init+0x210>)
 800130e:	f003 f86f 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x1ac>
  {
    Error_Handler();
 8001318:	f001 fc18 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_14;
 800131c:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <MX_ADC1_Init+0x238>)
 800131e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001320:	f44f 738c 	mov.w	r3, #280	; 0x118
 8001324:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4815      	ldr	r0, [pc, #84]	; (8001380 <MX_ADC1_Init+0x210>)
 800132c:	f003 f860 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0x1ca>
  {
    Error_Handler();
 8001336:	f001 fc09 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800133a:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <MX_ADC1_Init+0x23c>)
 800133c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800133e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001342:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	463b      	mov	r3, r7
 8001346:	4619      	mov	r1, r3
 8001348:	480d      	ldr	r0, [pc, #52]	; (8001380 <MX_ADC1_Init+0x210>)
 800134a:	f003 f851 	bl	80043f0 <HAL_ADC_ConfigChannel>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <MX_ADC1_Init+0x1e8>
  {
    Error_Handler();
 8001354:	f001 fbfa 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <MX_ADC1_Init+0x240>)
 800135a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_11;
 800135c:	f240 2306 	movw	r3, #518	; 0x206
 8001360:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001362:	463b      	mov	r3, r7
 8001364:	4619      	mov	r1, r3
 8001366:	4806      	ldr	r0, [pc, #24]	; (8001380 <MX_ADC1_Init+0x210>)
 8001368:	f003 f842 	bl	80043f0 <HAL_ADC_ConfigChannel>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <MX_ADC1_Init+0x206>
  {
    Error_Handler();
 8001372:	f001 fbeb 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001376:	bf00      	nop
 8001378:	3728      	adds	r7, #40	; 0x28
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	2400013c 	.word	0x2400013c
 8001384:	40022000 	.word	0x40022000
 8001388:	0c900008 	.word	0x0c900008
 800138c:	10c00010 	.word	0x10c00010
 8001390:	14f00020 	.word	0x14f00020
 8001394:	1d500080 	.word	0x1d500080
 8001398:	21800100 	.word	0x21800100
 800139c:	25b00200 	.word	0x25b00200
 80013a0:	2a000400 	.word	0x2a000400
 80013a4:	2e300800 	.word	0x2e300800
 80013a8:	3ac04000 	.word	0x3ac04000
 80013ac:	3ef08000 	.word	0x3ef08000
 80013b0:	47520000 	.word	0x47520000

080013b4 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b088      	sub	sp, #32
 80013b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]
 80013ca:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80013cc:	4b3d      	ldr	r3, [pc, #244]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013ce:	4a3e      	ldr	r2, [pc, #248]	; (80014c8 <MX_ADC3_Init+0x114>)
 80013d0:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80013d2:	4b3c      	ldr	r3, [pc, #240]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013d4:	2208      	movs	r2, #8
 80013d6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80013d8:	4b3a      	ldr	r3, [pc, #232]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013da:	2201      	movs	r2, #1
 80013dc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013de:	4b39      	ldr	r3, [pc, #228]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013e0:	2204      	movs	r2, #4
 80013e2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80013e4:	4b37      	ldr	r3, [pc, #220]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 80013ea:	4b36      	ldr	r3, [pc, #216]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 4;
 80013f0:	4b34      	ldr	r3, [pc, #208]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013f2:	2204      	movs	r2, #4
 80013f4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013f6:	4b33      	ldr	r3, [pc, #204]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fc:	4b31      	ldr	r3, [pc, #196]	; (80014c4 <MX_ADC3_Init+0x110>)
 80013fe:	2200      	movs	r2, #0
 8001400:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001402:	4b30      	ldr	r3, [pc, #192]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001404:	2200      	movs	r2, #0
 8001406:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001408:	4b2e      	ldr	r3, [pc, #184]	; (80014c4 <MX_ADC3_Init+0x110>)
 800140a:	2203      	movs	r2, #3
 800140c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800140e:	4b2d      	ldr	r3, [pc, #180]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001410:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001414:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001416:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001418:	2200      	movs	r2, #0
 800141a:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_ADC3_Init+0x110>)
 800141e:	2200      	movs	r2, #0
 8001420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001424:	4827      	ldr	r0, [pc, #156]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001426:	f002 fd5f 	bl	8003ee8 <HAL_ADC_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_ADC3_Init+0x80>
  {
    Error_Handler();
 8001430:	f001 fb8c 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <MX_ADC3_Init+0x118>)
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001438:	2306      	movs	r3, #6
 800143a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 800143c:	2307      	movs	r3, #7
 800143e:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001440:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001444:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001446:	2304      	movs	r3, #4
 8001448:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001452:	1d3b      	adds	r3, r7, #4
 8001454:	4619      	mov	r1, r3
 8001456:	481b      	ldr	r0, [pc, #108]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001458:	f002 ffca 	bl	80043f0 <HAL_ADC_ConfigChannel>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_ADC3_Init+0xb2>
  {
    Error_Handler();
 8001462:	f001 fb73 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001466:	4b1a      	ldr	r3, [pc, #104]	; (80014d0 <MX_ADC3_Init+0x11c>)
 8001468:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800146a:	230c      	movs	r3, #12
 800146c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4814      	ldr	r0, [pc, #80]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001474:	f002 ffbc 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_ADC3_Init+0xce>
  {
    Error_Handler();
 800147e:	f001 fb65 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001482:	2301      	movs	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001486:	2312      	movs	r3, #18
 8001488:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800148a:	1d3b      	adds	r3, r7, #4
 800148c:	4619      	mov	r1, r3
 800148e:	480d      	ldr	r0, [pc, #52]	; (80014c4 <MX_ADC3_Init+0x110>)
 8001490:	f002 ffae 	bl	80043f0 <HAL_ADC_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_ADC3_Init+0xea>
  {
    Error_Handler();
 800149a:	f001 fb57 	bl	8002b4c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800149e:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <MX_ADC3_Init+0x120>)
 80014a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80014a2:	2318      	movs	r3, #24
 80014a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80014a6:	1d3b      	adds	r3, r7, #4
 80014a8:	4619      	mov	r1, r3
 80014aa:	4806      	ldr	r0, [pc, #24]	; (80014c4 <MX_ADC3_Init+0x110>)
 80014ac:	f002 ffa0 	bl	80043f0 <HAL_ADC_ConfigChannel>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_ADC3_Init+0x106>
  {
    Error_Handler();
 80014b6:	f001 fb49 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	3720      	adds	r7, #32
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	240001a0 	.word	0x240001a0
 80014c8:	58026000 	.word	0x58026000
 80014cc:	cb840000 	.word	0xcb840000
 80014d0:	cfb80000 	.word	0xcfb80000
 80014d4:	04300002 	.word	0x04300002

080014d8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	; 0x28
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2224      	movs	r2, #36	; 0x24
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f014 fe89 	bl	80161fc <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80014ea:	4b12      	ldr	r3, [pc, #72]	; (8001534 <MX_DAC1_Init+0x5c>)
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <MX_DAC1_Init+0x60>)
 80014ee:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80014f0:	4810      	ldr	r0, [pc, #64]	; (8001534 <MX_DAC1_Init+0x5c>)
 80014f2:	f003 ffdf 	bl	80054b4 <HAL_DAC_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80014fc:	f001 fb26 	bl	8002b4c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8001504:	230a      	movs	r3, #10
 8001506:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800150c:	2301      	movs	r3, #1
 800150e:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2200      	movs	r2, #0
 8001518:	4619      	mov	r1, r3
 800151a:	4806      	ldr	r0, [pc, #24]	; (8001534 <MX_DAC1_Init+0x5c>)
 800151c:	f004 f9fa 	bl	8005914 <HAL_DAC_ConfigChannel>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8001526:	f001 fb11 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 800152a:	bf00      	nop
 800152c:	3728      	adds	r7, #40	; 0x28
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	240002f4 	.word	0x240002f4
 8001538:	40007400 	.word	0x40007400

0800153c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001540:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001542:	4a1d      	ldr	r2, [pc, #116]	; (80015b8 <MX_I2C1_Init+0x7c>)
 8001544:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020081F;
 8001546:	4b1b      	ldr	r3, [pc, #108]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <MX_I2C1_Init+0x80>)
 800154a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800154c:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <MX_I2C1_Init+0x78>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001552:	4b18      	ldr	r3, [pc, #96]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001554:	2201      	movs	r2, #1
 8001556:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001558:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <MX_I2C1_Init+0x78>)
 800155a:	2200      	movs	r2, #0
 800155c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800155e:	4b15      	ldr	r3, [pc, #84]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001560:	2200      	movs	r2, #0
 8001562:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001564:	4b13      	ldr	r3, [pc, #76]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001566:	2200      	movs	r2, #0
 8001568:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800156a:	4b12      	ldr	r3, [pc, #72]	; (80015b4 <MX_I2C1_Init+0x78>)
 800156c:	2200      	movs	r2, #0
 800156e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001570:	4b10      	ldr	r3, [pc, #64]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001572:	2200      	movs	r2, #0
 8001574:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001576:	480f      	ldr	r0, [pc, #60]	; (80015b4 <MX_I2C1_Init+0x78>)
 8001578:	f007 fbc0 	bl	8008cfc <HAL_I2C_Init>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001582:	f001 fae3 	bl	8002b4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001586:	2100      	movs	r1, #0
 8001588:	480a      	ldr	r0, [pc, #40]	; (80015b4 <MX_I2C1_Init+0x78>)
 800158a:	f008 f907 	bl	800979c <HAL_I2CEx_ConfigAnalogFilter>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001594:	f001 fada 	bl	8002b4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001598:	2100      	movs	r1, #0
 800159a:	4806      	ldr	r0, [pc, #24]	; (80015b4 <MX_I2C1_Init+0x78>)
 800159c:	f008 f949 	bl	8009832 <HAL_I2CEx_ConfigDigitalFilter>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80015a6:	f001 fad1 	bl	8002b4c <Error_Handler>
  }

  /** I2C Enable Fast Mode Plus
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80015aa:	2001      	movs	r0, #1
 80015ac:	f008 f98e 	bl	80098cc <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	24000380 	.word	0x24000380
 80015b8:	40005400 	.word	0x40005400
 80015bc:	0020081f 	.word	0x0020081f

080015c0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80015c6:	1d3b      	adds	r3, r7, #4
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	609a      	str	r2, [r3, #8]
 80015d0:	60da      	str	r2, [r3, #12]
 80015d2:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80015d4:	2300      	movs	r3, #0
 80015d6:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80015d8:	4b26      	ldr	r3, [pc, #152]	; (8001674 <MX_RTC_Init+0xb4>)
 80015da:	4a27      	ldr	r2, [pc, #156]	; (8001678 <MX_RTC_Init+0xb8>)
 80015dc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015de:	4b25      	ldr	r3, [pc, #148]	; (8001674 <MX_RTC_Init+0xb4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 100-1;
 80015e4:	4b23      	ldr	r3, [pc, #140]	; (8001674 <MX_RTC_Init+0xb4>)
 80015e6:	2263      	movs	r2, #99	; 0x63
 80015e8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 10000-1;
 80015ea:	4b22      	ldr	r3, [pc, #136]	; (8001674 <MX_RTC_Init+0xb4>)
 80015ec:	f242 720f 	movw	r2, #9999	; 0x270f
 80015f0:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015f2:	4b20      	ldr	r3, [pc, #128]	; (8001674 <MX_RTC_Init+0xb4>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015f8:	4b1e      	ldr	r3, [pc, #120]	; (8001674 <MX_RTC_Init+0xb4>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015fe:	4b1d      	ldr	r3, [pc, #116]	; (8001674 <MX_RTC_Init+0xb4>)
 8001600:	2200      	movs	r2, #0
 8001602:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001604:	4b1b      	ldr	r3, [pc, #108]	; (8001674 <MX_RTC_Init+0xb4>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800160a:	481a      	ldr	r0, [pc, #104]	; (8001674 <MX_RTC_Init+0xb4>)
 800160c:	f00b fee2 	bl	800d3d4 <HAL_RTC_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8001616:	f001 fa99 	bl	8002b4c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800161a:	2300      	movs	r3, #0
 800161c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800161e:	2300      	movs	r3, #0
 8001620:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001622:	2300      	movs	r3, #0
 8001624:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800162e:	1d3b      	adds	r3, r7, #4
 8001630:	2201      	movs	r2, #1
 8001632:	4619      	mov	r1, r3
 8001634:	480f      	ldr	r0, [pc, #60]	; (8001674 <MX_RTC_Init+0xb4>)
 8001636:	f00b ff4f 	bl	800d4d8 <HAL_RTC_SetTime>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001640:	f001 fa84 	bl	8002b4c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001644:	2301      	movs	r3, #1
 8001646:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001648:	2301      	movs	r3, #1
 800164a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800164c:	2301      	movs	r3, #1
 800164e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001650:	2300      	movs	r3, #0
 8001652:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001654:	463b      	mov	r3, r7
 8001656:	2201      	movs	r2, #1
 8001658:	4619      	mov	r1, r3
 800165a:	4806      	ldr	r0, [pc, #24]	; (8001674 <MX_RTC_Init+0xb4>)
 800165c:	f00c f836 	bl	800d6cc <HAL_RTC_SetDate>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8001666:	f001 fa71 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	3718      	adds	r7, #24
 800166e:	46bd      	mov	sp, r7
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	240003d4 	.word	0x240003d4
 8001678:	58004000 	.word	0x58004000

0800167c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001682:	4a29      	ldr	r2, [pc, #164]	; (8001728 <MX_SPI1_Init+0xac>)
 8001684:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001686:	4b27      	ldr	r3, [pc, #156]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001688:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800168c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800168e:	4b25      	ldr	r3, [pc, #148]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001690:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001694:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001698:	220f      	movs	r2, #15
 800169a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <MX_SPI1_Init+0xa8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016a2:	4b20      	ldr	r3, [pc, #128]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80016ae:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80016b0:	4b1c      	ldr	r3, [pc, #112]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016b2:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 80016b6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016be:	4b19      	ldr	r3, [pc, #100]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016c4:	4b17      	ldr	r3, [pc, #92]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80016ca:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80016d0:	4b14      	ldr	r3, [pc, #80]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016d6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80016d8:	4b12      	ldr	r3, [pc, #72]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016da:	2200      	movs	r2, #0
 80016dc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016e4:	4b0f      	ldr	r3, [pc, #60]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016ec:	2200      	movs	r2, #0
 80016ee:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016f6:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016fc:	4b09      	ldr	r3, [pc, #36]	; (8001724 <MX_SPI1_Init+0xa8>)
 80016fe:	2200      	movs	r2, #0
 8001700:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001704:	2200      	movs	r2, #0
 8001706:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <MX_SPI1_Init+0xa8>)
 800170a:	2200      	movs	r2, #0
 800170c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800170e:	4805      	ldr	r0, [pc, #20]	; (8001724 <MX_SPI1_Init+0xa8>)
 8001710:	f00c f982 	bl	800da18 <HAL_SPI_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 800171a:	f001 fa17 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800171e:	bf00      	nop
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	240003f8 	.word	0x240003f8
 8001728:	40013000 	.word	0x40013000

0800172c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001730:	4b28      	ldr	r3, [pc, #160]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001732:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <MX_SPI2_Init+0xac>)
 8001734:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001736:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001738:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800173c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800173e:	4b25      	ldr	r3, [pc, #148]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001740:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001744:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8001746:	4b23      	ldr	r3, [pc, #140]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001748:	220f      	movs	r2, #15
 800174a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174c:	4b21      	ldr	r3, [pc, #132]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001752:	4b20      	ldr	r3, [pc, #128]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001758:	4b1e      	ldr	r3, [pc, #120]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800175a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800175e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001760:	4b1c      	ldr	r3, [pc, #112]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001762:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8001766:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001768:	4b1a      	ldr	r3, [pc, #104]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800176a:	2200      	movs	r2, #0
 800176c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800176e:	4b19      	ldr	r3, [pc, #100]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001770:	2200      	movs	r2, #0
 8001772:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001774:	4b17      	ldr	r3, [pc, #92]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001776:	2200      	movs	r2, #0
 8001778:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 800177a:	4b16      	ldr	r3, [pc, #88]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800177c:	2200      	movs	r2, #0
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001780:	4b14      	ldr	r3, [pc, #80]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001782:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001786:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001790:	2200      	movs	r2, #0
 8001792:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_SPI2_Init+0xa8>)
 8001796:	2200      	movs	r2, #0
 8001798:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_SPI2_Init+0xa8>)
 800179c:	2200      	movs	r2, #0
 800179e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80017a6:	4b0b      	ldr	r3, [pc, #44]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80017ac:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80017b2:	4b08      	ldr	r3, [pc, #32]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017be:	4805      	ldr	r0, [pc, #20]	; (80017d4 <MX_SPI2_Init+0xa8>)
 80017c0:	f00c f92a 	bl	800da18 <HAL_SPI_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 80017ca:	f001 f9bf 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	24000480 	.word	0x24000480
 80017d8:	40003800 	.word	0x40003800

080017dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b09a      	sub	sp, #104	; 0x68
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]
 8001804:	605a      	str	r2, [r3, #4]
 8001806:	609a      	str	r2, [r3, #8]
 8001808:	60da      	str	r2, [r3, #12]
 800180a:	611a      	str	r2, [r3, #16]
 800180c:	615a      	str	r2, [r3, #20]
 800180e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001810:	1d3b      	adds	r3, r7, #4
 8001812:	222c      	movs	r2, #44	; 0x2c
 8001814:	2100      	movs	r1, #0
 8001816:	4618      	mov	r0, r3
 8001818:	f014 fcf0 	bl	80161fc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800181c:	4b43      	ldr	r3, [pc, #268]	; (800192c <MX_TIM1_Init+0x150>)
 800181e:	4a44      	ldr	r2, [pc, #272]	; (8001930 <MX_TIM1_Init+0x154>)
 8001820:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001822:	4b42      	ldr	r3, [pc, #264]	; (800192c <MX_TIM1_Init+0x150>)
 8001824:	2231      	movs	r2, #49	; 0x31
 8001826:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b40      	ldr	r3, [pc, #256]	; (800192c <MX_TIM1_Init+0x150>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 62500-1;
 800182e:	4b3f      	ldr	r3, [pc, #252]	; (800192c <MX_TIM1_Init+0x150>)
 8001830:	f24f 4223 	movw	r2, #62499	; 0xf423
 8001834:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001836:	4b3d      	ldr	r3, [pc, #244]	; (800192c <MX_TIM1_Init+0x150>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800183c:	4b3b      	ldr	r3, [pc, #236]	; (800192c <MX_TIM1_Init+0x150>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <MX_TIM1_Init+0x150>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001848:	4838      	ldr	r0, [pc, #224]	; (800192c <MX_TIM1_Init+0x150>)
 800184a:	f00c fd36 	bl	800e2ba <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001854:	f001 f97a 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001858:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800185c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800185e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001862:	4619      	mov	r1, r3
 8001864:	4831      	ldr	r0, [pc, #196]	; (800192c <MX_TIM1_Init+0x150>)
 8001866:	f00d fab1 	bl	800edcc <HAL_TIM_ConfigClockSource>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001870:	f001 f96c 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001874:	482d      	ldr	r0, [pc, #180]	; (800192c <MX_TIM1_Init+0x150>)
 8001876:	f00d f82d 	bl	800e8d4 <HAL_TIM_PWM_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001880:	f001 f964 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001888:	2300      	movs	r3, #0
 800188a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001890:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001894:	4619      	mov	r1, r3
 8001896:	4825      	ldr	r0, [pc, #148]	; (800192c <MX_TIM1_Init+0x150>)
 8001898:	f00d ffee 	bl	800f878 <HAL_TIMEx_MasterConfigSynchronization>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80018a2:	f001 f953 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a6:	2360      	movs	r3, #96	; 0x60
 80018a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80018aa:	2300      	movs	r3, #0
 80018ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ae:	2300      	movs	r3, #0
 80018b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80018b2:	2300      	movs	r3, #0
 80018b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80018c6:	2200      	movs	r2, #0
 80018c8:	4619      	mov	r1, r3
 80018ca:	4818      	ldr	r0, [pc, #96]	; (800192c <MX_TIM1_Init+0x150>)
 80018cc:	f00d f96a 	bl	800eba4 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018d6:	f001 f939 	bl	8002b4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018de:	2300      	movs	r3, #0
 80018e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018f8:	2300      	movs	r3, #0
 80018fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001906:	2300      	movs	r3, #0
 8001908:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800190a:	1d3b      	adds	r3, r7, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4807      	ldr	r0, [pc, #28]	; (800192c <MX_TIM1_Init+0x150>)
 8001910:	f00e f840 	bl	800f994 <HAL_TIMEx_ConfigBreakDeadTime>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d001      	beq.n	800191e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800191a:	f001 f917 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800191e:	4803      	ldr	r0, [pc, #12]	; (800192c <MX_TIM1_Init+0x150>)
 8001920:	f001 fcc4 	bl	80032ac <HAL_TIM_MspPostInit>

}
 8001924:	bf00      	nop
 8001926:	3768      	adds	r7, #104	; 0x68
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	24000508 	.word	0x24000508
 8001930:	40010000 	.word	0x40010000

08001934 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b08e      	sub	sp, #56	; 0x38
 8001938:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800193a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800193e:	2200      	movs	r2, #0
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	605a      	str	r2, [r3, #4]
 8001944:	609a      	str	r2, [r3, #8]
 8001946:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001948:	f107 031c 	add.w	r3, r7, #28
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001954:	463b      	mov	r3, r7
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	605a      	str	r2, [r3, #4]
 800195c:	609a      	str	r2, [r3, #8]
 800195e:	60da      	str	r2, [r3, #12]
 8001960:	611a      	str	r2, [r3, #16]
 8001962:	615a      	str	r2, [r3, #20]
 8001964:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001966:	4b2d      	ldr	r3, [pc, #180]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001968:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800196c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 50-1;
 800196e:	4b2b      	ldr	r3, [pc, #172]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001970:	2231      	movs	r2, #49	; 0x31
 8001972:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001974:	4b29      	ldr	r3, [pc, #164]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001976:	2200      	movs	r2, #0
 8001978:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3125-1;
 800197a:	4b28      	ldr	r3, [pc, #160]	; (8001a1c <MX_TIM2_Init+0xe8>)
 800197c:	f640 4234 	movw	r2, #3124	; 0xc34
 8001980:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001982:	4b26      	ldr	r3, [pc, #152]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001988:	4b24      	ldr	r3, [pc, #144]	; (8001a1c <MX_TIM2_Init+0xe8>)
 800198a:	2280      	movs	r2, #128	; 0x80
 800198c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800198e:	4823      	ldr	r0, [pc, #140]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001990:	f00c fc93 	bl	800e2ba <HAL_TIM_Base_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800199a:	f001 f8d7 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800199e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a8:	4619      	mov	r1, r3
 80019aa:	481c      	ldr	r0, [pc, #112]	; (8001a1c <MX_TIM2_Init+0xe8>)
 80019ac:	f00d fa0e 	bl	800edcc <HAL_TIM_ConfigClockSource>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80019b6:	f001 f8c9 	bl	8002b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_TIM2_Init+0xe8>)
 80019bc:	f00c ff8a 	bl	800e8d4 <HAL_TIM_PWM_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80019c6:	f001 f8c1 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80019ca:	2320      	movs	r3, #32
 80019cc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80019d2:	f107 031c 	add.w	r3, r7, #28
 80019d6:	4619      	mov	r1, r3
 80019d8:	4810      	ldr	r0, [pc, #64]	; (8001a1c <MX_TIM2_Init+0xe8>)
 80019da:	f00d ff4d 	bl	800f878 <HAL_TIMEx_MasterConfigSynchronization>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80019e4:	f001 f8b2 	bl	8002b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019e8:	2360      	movs	r3, #96	; 0x60
 80019ea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019f8:	463b      	mov	r3, r7
 80019fa:	220c      	movs	r2, #12
 80019fc:	4619      	mov	r1, r3
 80019fe:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001a00:	f00d f8d0 	bl	800eba4 <HAL_TIM_PWM_ConfigChannel>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d001      	beq.n	8001a0e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001a0a:	f001 f89f 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a0e:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM2_Init+0xe8>)
 8001a10:	f001 fc4c 	bl	80032ac <HAL_TIM_MspPostInit>

}
 8001a14:	bf00      	nop
 8001a16:	3738      	adds	r7, #56	; 0x38
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	24000554 	.word	0x24000554

08001a20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b088      	sub	sp, #32
 8001a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a26:	f107 0310 	add.w	r3, r7, #16
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	605a      	str	r2, [r3, #4]
 8001a30:	609a      	str	r2, [r3, #8]
 8001a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001a40:	4a1e      	ldr	r2, [pc, #120]	; (8001abc <MX_TIM3_Init+0x9c>)
 8001a42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10000-1;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001a46:	f242 720f 	movw	r2, #9999	; 0x270f
 8001a4a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001a54:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a5a:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a60:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a66:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001a68:	f00c fc27 	bl	800e2ba <HAL_TIM_Base_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001a72:	f001 f86b 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	4619      	mov	r1, r3
 8001a82:	480d      	ldr	r0, [pc, #52]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001a84:	f00d f9a2 	bl	800edcc <HAL_TIM_ConfigClockSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001a8e:	f001 f85d 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a92:	2300      	movs	r3, #0
 8001a94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <MX_TIM3_Init+0x98>)
 8001aa0:	f00d feea 	bl	800f878 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001aaa:	f001 f84f 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aae:	bf00      	nop
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	240005a0 	.word	0x240005a0
 8001abc:	40000400 	.word	0x40000400

08001ac0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b088      	sub	sp, #32
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0310 	add.w	r3, r7, #16
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	1d3b      	adds	r3, r7, #4
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	601a      	str	r2, [r3, #0]
 8001ada:	605a      	str	r2, [r3, #4]
 8001adc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001ae0:	4a1d      	ldr	r2, [pc, #116]	; (8001b58 <MX_TIM4_Init+0x98>)
 8001ae2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 100-1;
 8001ae4:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001ae6:	2263      	movs	r2, #99	; 0x63
 8001ae8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aea:	4b1a      	ldr	r3, [pc, #104]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001af0:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001af2:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001af6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001af8:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b04:	4813      	ldr	r0, [pc, #76]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001b06:	f00c fbd8 	bl	800e2ba <HAL_TIM_Base_Init>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b10:	f001 f81c 	bl	8002b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b1a:	f107 0310 	add.w	r3, r7, #16
 8001b1e:	4619      	mov	r1, r3
 8001b20:	480c      	ldr	r0, [pc, #48]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001b22:	f00d f953 	bl	800edcc <HAL_TIM_ConfigClockSource>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b2c:	f001 f80e 	bl	8002b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b34:	2300      	movs	r3, #0
 8001b36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	4805      	ldr	r0, [pc, #20]	; (8001b54 <MX_TIM4_Init+0x94>)
 8001b3e:	f00d fe9b 	bl	800f878 <HAL_TIMEx_MasterConfigSynchronization>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b48:	f001 f800 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b4c:	bf00      	nop
 8001b4e:	3720      	adds	r7, #32
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	240005ec 	.word	0x240005ec
 8001b58:	40000800 	.word	0x40000800

08001b5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b62:	4a23      	ldr	r2, [pc, #140]	; (8001bf0 <MX_USART1_UART_Init+0x94>)
 8001b64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 460800;
 8001b66:	4b21      	ldr	r3, [pc, #132]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b68:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001b6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b6e:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b74:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b80:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b82:	220c      	movs	r2, #12
 8001b84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b86:	4b19      	ldr	r3, [pc, #100]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b8c:	4b17      	ldr	r3, [pc, #92]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b92:	4b16      	ldr	r3, [pc, #88]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b9e:	4b13      	ldr	r3, [pc, #76]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba4:	4811      	ldr	r0, [pc, #68]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001ba6:	f00d ff91 	bl	800facc <HAL_UART_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001bb0:	f000 ffcc 	bl	8002b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	480d      	ldr	r0, [pc, #52]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001bb8:	f010 fd0d 	bl	80125d6 <HAL_UARTEx_SetTxFifoThreshold>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001bc2:	f000 ffc3 	bl	8002b4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	4808      	ldr	r0, [pc, #32]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001bca:	f010 fd42 	bl	8012652 <HAL_UARTEx_SetRxFifoThreshold>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001bd4:	f000 ffba 	bl	8002b4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001bd8:	4804      	ldr	r0, [pc, #16]	; (8001bec <MX_USART1_UART_Init+0x90>)
 8001bda:	f010 fcc3 	bl	8012564 <HAL_UARTEx_DisableFifoMode>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001be4:	f000 ffb2 	bl	8002b4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	24000638 	.word	0x24000638
 8001bf0:	40011000 	.word	0x40011000

08001bf4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bfa:	4b19      	ldr	r3, [pc, #100]	; (8001c60 <MX_DMA_Init+0x6c>)
 8001bfc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <MX_DMA_Init+0x6c>)
 8001c02:	f043 0301 	orr.w	r3, r3, #1
 8001c06:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <MX_DMA_Init+0x6c>)
 8001c0c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	607b      	str	r3, [r7, #4]
 8001c16:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2105      	movs	r1, #5
 8001c1c:	200b      	movs	r0, #11
 8001c1e:	f003 fc21 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c22:	200b      	movs	r0, #11
 8001c24:	f003 fc38 	bl	8005498 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	2105      	movs	r1, #5
 8001c2c:	200c      	movs	r0, #12
 8001c2e:	f003 fc19 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001c32:	200c      	movs	r0, #12
 8001c34:	f003 fc30 	bl	8005498 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	2105      	movs	r1, #5
 8001c3c:	200d      	movs	r0, #13
 8001c3e:	f003 fc11 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c42:	200d      	movs	r0, #13
 8001c44:	f003 fc28 	bl	8005498 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2105      	movs	r1, #5
 8001c4c:	2010      	movs	r0, #16
 8001c4e:	f003 fc09 	bl	8005464 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001c52:	2010      	movs	r0, #16
 8001c54:	f003 fc20 	bl	8005498 <HAL_NVIC_EnableIRQ>

}
 8001c58:	bf00      	nop
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	58024400 	.word	0x58024400

08001c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c6a:	f107 0314 	add.w	r3, r7, #20
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	605a      	str	r2, [r3, #4]
 8001c74:	609a      	str	r2, [r3, #8]
 8001c76:	60da      	str	r2, [r3, #12]
 8001c78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c7a:	4b34      	ldr	r3, [pc, #208]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001c7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c80:	4a32      	ldr	r2, [pc, #200]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001c82:	f043 0304 	orr.w	r3, r3, #4
 8001c86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c8a:	4b30      	ldr	r3, [pc, #192]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001c8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c90:	f003 0304 	and.w	r3, r3, #4
 8001c94:	613b      	str	r3, [r7, #16]
 8001c96:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c98:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001c9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c9e:	4a2b      	ldr	r2, [pc, #172]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ca8:	4b28      	ldr	r3, [pc, #160]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001caa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cb6:	4b25      	ldr	r3, [pc, #148]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cbc:	4a23      	ldr	r2, [pc, #140]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cbe:	f043 0301 	orr.w	r3, r3, #1
 8001cc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cc6:	4b21      	ldr	r3, [pc, #132]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	60bb      	str	r3, [r7, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cd4:	4b1d      	ldr	r3, [pc, #116]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cda:	4a1c      	ldr	r2, [pc, #112]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001cdc:	f043 0302 	orr.w	r3, r3, #2
 8001ce0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <MX_GPIO_Init+0xe8>)
 8001ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cea:	f003 0302 	and.w	r3, r3, #2
 8001cee:	607b      	str	r3, [r7, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001cf8:	4815      	ldr	r0, [pc, #84]	; (8001d50 <MX_GPIO_Init+0xec>)
 8001cfa:	f006 ffe5 	bl	8008cc8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2164      	movs	r1, #100	; 0x64
 8001d02:	4814      	ldr	r0, [pc, #80]	; (8001d54 <MX_GPIO_Init+0xf0>)
 8001d04:	f006 ffe0 	bl	8008cc8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC6 PC7 PC8
                           PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
 8001d08:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001d0c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d1a:	f107 0314 	add.w	r3, r7, #20
 8001d1e:	4619      	mov	r1, r3
 8001d20:	480b      	ldr	r0, [pc, #44]	; (8001d50 <MX_GPIO_Init+0xec>)
 8001d22:	f006 fe09 	bl	8008938 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001d26:	2364      	movs	r3, #100	; 0x64
 8001d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d32:	2300      	movs	r3, #0
 8001d34:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <MX_GPIO_Init+0xf0>)
 8001d3e:	f006 fdfb 	bl	8008938 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	58024400 	.word	0x58024400
 8001d50:	58020800 	.word	0x58020800
 8001d54:	58020400 	.word	0x58020400

08001d58 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	4603      	mov	r3, r0
 8001d60:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001d62:	2300      	movs	r3, #0
 8001d64:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	b299      	uxth	r1, r3
 8001d6a:	f107 0208 	add.w	r2, r7, #8
 8001d6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	2301      	movs	r3, #1
 8001d76:	4817      	ldr	r0, [pc, #92]	; (8001dd4 <poll_i2c_sensor+0x7c>)
 8001d78:	f007 f85c 	bl	8008e34 <HAL_I2C_Master_Transmit>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001d80:	7b7b      	ldrb	r3, [r7, #13]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001d86:	4814      	ldr	r0, [pc, #80]	; (8001dd8 <poll_i2c_sensor+0x80>)
 8001d88:	f014 fb8e 	bl	80164a8 <puts>
 8001d8c:	e01c      	b.n	8001dc8 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001d8e:	79fb      	ldrb	r3, [r7, #7]
 8001d90:	b299      	uxth	r1, r3
 8001d92:	f107 0208 	add.w	r2, r7, #8
 8001d96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d9a:	9300      	str	r3, [sp, #0]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	480d      	ldr	r0, [pc, #52]	; (8001dd4 <poll_i2c_sensor+0x7c>)
 8001da0:	f007 f960 	bl	8009064 <HAL_I2C_Master_Receive>
 8001da4:	4603      	mov	r3, r0
 8001da6:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001da8:	7b7b      	ldrb	r3, [r7, #13]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001dae:	480b      	ldr	r0, [pc, #44]	; (8001ddc <poll_i2c_sensor+0x84>)
 8001db0:	f014 fb7a 	bl	80164a8 <puts>
 8001db4:	e008      	b.n	8001dc8 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001db6:	7a3b      	ldrb	r3, [r7, #8]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001dbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001dc0:	7a7a      	ldrb	r2, [r7, #9]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	10db      	asrs	r3, r3, #3
 8001dc6:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001dc8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	24000380 	.word	0x24000380
 8001dd8:	08016e6c 	.word	0x08016e6c
 8001ddc:	08016e7c 	.word	0x08016e7c

08001de0 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001de8:	f107 010c 	add.w	r1, r7, #12
 8001dec:	2301      	movs	r3, #1
 8001dee:	2201      	movs	r2, #1
 8001df0:	480c      	ldr	r0, [pc, #48]	; (8001e24 <receive_pmt_spi+0x44>)
 8001df2:	f00b ff35 	bl	800dc60 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001df6:	2300      	movs	r3, #0
 8001df8:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001dfa:	7b7b      	ldrb	r3, [r7, #13]
 8001dfc:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <receive_pmt_spi+0x44>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <receive_pmt_spi+0x44>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e0c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	7bba      	ldrb	r2, [r7, #14]
 8001e12:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3301      	adds	r3, #1
 8001e18:	7bfa      	ldrb	r2, [r7, #15]
 8001e1a:	701a      	strb	r2, [r3, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	3710      	adds	r7, #16
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	240003f8 	.word	0x240003f8

08001e28 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001e30:	f107 010c 	add.w	r1, r7, #12
 8001e34:	2364      	movs	r3, #100	; 0x64
 8001e36:	2201      	movs	r2, #1
 8001e38:	480c      	ldr	r0, [pc, #48]	; (8001e6c <receive_erpa_spi+0x44>)
 8001e3a:	f00b ff11 	bl	800dc60 <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001e3e:	2300      	movs	r3, #0
 8001e40:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001e42:	7b7b      	ldrb	r3, [r7, #13]
 8001e44:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <receive_erpa_spi+0x44>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	4b07      	ldr	r3, [pc, #28]	; (8001e6c <receive_erpa_spi+0x44>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001e54:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	7bba      	ldrb	r2, [r7, #14]
 8001e5a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	3301      	adds	r3, #1
 8001e60:	7bfa      	ldrb	r2, [r7, #15]
 8001e62:	701a      	strb	r2, [r3, #0]
}
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	24000480 	.word	0x24000480

08001e70 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001e70:	b480      	push	{r7}
 8001e72:	b085      	sub	sp, #20
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <receive_erpa_adc+0x30>)
 8001e7a:	885b      	ldrh	r3, [r3, #2]
 8001e7c:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001e7e:	4b08      	ldr	r3, [pc, #32]	; (8001ea0 <receive_erpa_adc+0x30>)
 8001e80:	895b      	ldrh	r3, [r3, #10]
 8001e82:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	89fa      	ldrh	r2, [r7, #14]
 8001e88:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	89ba      	ldrh	r2, [r7, #12]
 8001e90:	801a      	strh	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	3714      	adds	r7, #20
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	24000ca0 	.word	0x24000ca0

08001ea4 <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001eac:	2390      	movs	r3, #144	; 0x90
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff52 	bl	8001d58 <poll_i2c_sensor>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001eb8:	2394      	movs	r3, #148	; 0x94
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff ff4c 	bl	8001d58 <poll_i2c_sensor>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001ec4:	2392      	movs	r3, #146	; 0x92
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f7ff ff46 	bl	8001d58 <poll_i2c_sensor>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001ed0:	2396      	movs	r3, #150	; 0x96
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff ff40 	bl	8001d58 <poll_i2c_sensor>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	89fa      	ldrh	r2, [r7, #14]
 8001ee0:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	3302      	adds	r3, #2
 8001ee6:	89ba      	ldrh	r2, [r7, #12]
 8001ee8:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3304      	adds	r3, #4
 8001eee:	897a      	ldrh	r2, [r7, #10]
 8001ef0:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	3306      	adds	r3, #6
 8001ef6:	893a      	ldrh	r2, [r7, #8]
 8001ef8:	801a      	strh	r2, [r3, #0]
}
 8001efa:	bf00      	nop
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}
	...

08001f04 <HAL_UART_TxCpltCallback>:

/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_UART_TxCpltCallback+0x1c>)
 8001f0e:	2201      	movs	r2, #1
 8001f10:	601a      	str	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	24000000 	.word	0x24000000

08001f24 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8001f32:	88fb      	ldrh	r3, [r7, #6]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f014 f943 	bl	80161c0 <malloc>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	88fa      	ldrh	r2, [r7, #6]
 8001f42:	68b9      	ldr	r1, [r7, #8]
 8001f44:	4618      	mov	r0, r3
 8001f46:	f014 f94b 	bl	80161e0 <memcpy>
	packet.size = size;
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	82bb      	strh	r3, [r7, #20]
	return packet;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	461a      	mov	r2, r3
 8001f52:	f107 0310 	add.w	r3, r7, #16
 8001f56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f5a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f5e:	68f8      	ldr	r0, [r7, #12]
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <handshake>:

/**
 * @brief Performs a handshake by receiving and sending data over UART.
 * @return Status of the handshake operation.
 */
int handshake() {
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b090      	sub	sp, #64	; 0x40
 8001f6c:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001f6e:	230a      	movs	r3, #10
 8001f70:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do {
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001f72:	f107 011c 	add.w	r1, r7, #28
 8001f76:	2364      	movs	r3, #100	; 0x64
 8001f78:	2209      	movs	r2, #9
 8001f7a:	4840      	ldr	r0, [pc, #256]	; (800207c <handshake+0x114>)
 8001f7c:	f00d fe84 	bl	800fc88 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001f80:	7f3b      	ldrb	r3, [r7, #28]
 8001f82:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	} while (key != 0xFF);
 8001f86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f8a:	2bff      	cmp	r3, #255	; 0xff
 8001f8c:	d1f1      	bne.n	8001f72 <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001f8e:	7f7b      	ldrb	r3, [r7, #29]
 8001f90:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001f94:	7fbb      	ldrb	r3, [r7, #30]
 8001f96:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001f9a:	7ffb      	ldrb	r3, [r7, #31]
 8001f9c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001fa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fa4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001fa8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001fb0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fb4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8];
 8001fb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fbc:	021b      	lsls	r3, r3, #8
 8001fbe:	b21a      	sxth	r2, r3
 8001fc0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fc4:	b21b      	sxth	r3, r3
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	b21b      	sxth	r3, r3
 8001fca:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001fcc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fd0:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001fd2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fd6:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001fd8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fdc:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001fde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fe2:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001fe4:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001fe8:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001fea:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001fee:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds;
 8001ff0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ff2:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8001ff4:	f107 0318 	add.w	r3, r7, #24
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	4820      	ldr	r0, [pc, #128]	; (8002080 <handshake+0x118>)
 8001ffe:	f00b fb65 	bl	800d6cc <HAL_RTC_SetDate>
 8002002:	4603      	mov	r3, r0
 8002004:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002008:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <handshake+0xac>
		Error_Handler();
 8002010:	f000 fd9c 	bl	8002b4c <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	2200      	movs	r2, #0
 8002018:	4619      	mov	r1, r3
 800201a:	4819      	ldr	r0, [pc, #100]	; (8002080 <handshake+0x118>)
 800201c:	f00b fa5c 	bl	800d4d8 <HAL_RTC_SetTime>
 8002020:	4603      	mov	r3, r0
 8002022:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002026:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <handshake+0xca>
		Error_Handler();
 800202e:	f000 fd8d 	bl	8002b4c <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 8002032:	23fa      	movs	r3, #250	; 0xfa
 8002034:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 2;
 8002038:	2302      	movs	r3, #2
 800203a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 800203e:	2300      	movs	r3, #0
 8002040:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 1;
 800204a:	2301      	movs	r3, #1
 800204c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < allowed_tries; i++) {
 8002050:	2300      	movs	r3, #0
 8002052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002054:	e009      	b.n	800206a <handshake+0x102>
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8002056:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800205a:	2364      	movs	r3, #100	; 0x64
 800205c:	2205      	movs	r2, #5
 800205e:	4807      	ldr	r0, [pc, #28]	; (800207c <handshake+0x114>)
 8002060:	f00d fd84 	bl	800fb6c <HAL_UART_Transmit>
	for (int i = 0; i < allowed_tries; i++) {
 8002064:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002066:	3301      	adds	r3, #1
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800206e:	429a      	cmp	r2, r3
 8002070:	dbf1      	blt.n	8002056 <handshake+0xee>
	}

	return 1;
 8002072:	2301      	movs	r3, #1
}
 8002074:	4618      	mov	r0, r3
 8002076:	3740      	adds	r7, #64	; 0x40
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	24000638 	.word	0x24000638
 8002080:	240003d4 	.word	0x240003d4

08002084 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
	HAL_TIM_OC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002088:	2100      	movs	r1, #0
 800208a:	481b      	ldr	r0, [pc, #108]	; (80020f8 <system_setup+0x74>)
 800208c:	f00c f9e4 	bl	800e458 <HAL_TIM_OC_Start_IT>

	TIM2->CCR4 = 312;
 8002090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002094:	f44f 729c 	mov.w	r2, #312	; 0x138
 8002098:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800209a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800209e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020a2:	4816      	ldr	r0, [pc, #88]	; (80020fc <system_setup+0x78>)
 80020a4:	f002 ffe4 	bl	8005070 <HAL_ADCEx_Calibration_Start>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <system_setup+0x2e>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80020ae:	f000 fd4d 	bl	8002b4c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80020b2:	220b      	movs	r2, #11
 80020b4:	4912      	ldr	r1, [pc, #72]	; (8002100 <system_setup+0x7c>)
 80020b6:	4811      	ldr	r0, [pc, #68]	; (80020fc <system_setup+0x78>)
 80020b8:	f002 f8b8 	bl	800422c <HAL_ADC_Start_DMA>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <system_setup+0x42>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020c2:	f000 fd43 	bl	8002b4c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80020c6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020ce:	480d      	ldr	r0, [pc, #52]	; (8002104 <system_setup+0x80>)
 80020d0:	f002 ffce 	bl	8005070 <HAL_ADCEx_Calibration_Start>
 80020d4:	4603      	mov	r3, r0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d001      	beq.n	80020de <system_setup+0x5a>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80020da:	f000 fd37 	bl	8002b4c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80020de:	2204      	movs	r2, #4
 80020e0:	4909      	ldr	r1, [pc, #36]	; (8002108 <system_setup+0x84>)
 80020e2:	4808      	ldr	r0, [pc, #32]	; (8002104 <system_setup+0x80>)
 80020e4:	f002 f8a2 	bl	800422c <HAL_ADC_Start_DMA>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d001      	beq.n	80020f2 <system_setup+0x6e>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020ee:	f000 fd2d 	bl	8002b4c <Error_Handler>
	}
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	240005ec 	.word	0x240005ec
 80020fc:	2400013c 	.word	0x2400013c
 8002100:	24000ca0 	.word	0x24000ca0
 8002104:	240001a0 	.word	0x240001a0
 8002108:	24000cc0 	.word	0x24000cc0

0800210c <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	2200      	movs	r2, #0
 800211a:	4619      	mov	r1, r3
 800211c:	4821      	ldr	r0, [pc, #132]	; (80021a4 <getTimestamp+0x98>)
 800211e:	f00b fa79 	bl	800d614 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	481e      	ldr	r0, [pc, #120]	; (80021a4 <getTimestamp+0x98>)
 800212c:	f00b fb56 	bl	800d7dc <HAL_RTC_GetDate>

	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2264      	movs	r2, #100	; 0x64
 8002134:	fb03 f202 	mul.w	r2, r3, r2
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <getTimestamp+0x9c>)
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentDate.Year;				// 0-99
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3301      	adds	r3, #1
 8002148:	7b7a      	ldrb	r2, [r7, #13]
 800214a:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3302      	adds	r3, #2
 8002150:	7bba      	ldrb	r2, [r7, #14]
 8002152:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3303      	adds	r3, #3
 8002158:	7c3a      	ldrb	r2, [r7, #16]
 800215a:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	7c7a      	ldrb	r2, [r7, #17]
 8002162:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3305      	adds	r3, #5
 8002168:	7cba      	ldrb	r2, [r7, #18]
 800216a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	0e1a      	lsrs	r2, r3, #24
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3306      	adds	r3, #6
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	0c1a      	lsrs	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3307      	adds	r3, #7
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	0a1a      	lsrs	r2, r3, #8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3308      	adds	r3, #8
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3309      	adds	r3, #9
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	240003d4 	.word	0x240003d4
 80021a8:	000f4240 	.word	0x000f4240

080021ac <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021b2:	bf00      	nop
 80021b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b8:	4845      	ldr	r0, [pc, #276]	; (80022d0 <sample_pmt+0x124>)
 80021ba:	f006 fd6d 	bl	8008c98 <HAL_GPIO_ReadPin>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f7      	bne.n	80021b4 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80021c4:	2010      	movs	r0, #16
 80021c6:	f013 fffb 	bl	80161c0 <malloc>
 80021ca:	4603      	mov	r3, r0
 80021cc:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80021ce:	2002      	movs	r0, #2
 80021d0:	f013 fff6 	bl	80161c0 <malloc>
 80021d4:	4603      	mov	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 80021d8:	200a      	movs	r0, #10
 80021da:	f013 fff1 	bl	80161c0 <malloc>
 80021de:	4603      	mov	r3, r0
 80021e0:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff ff92 	bl	800210c <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80021e8:	6938      	ldr	r0, [r7, #16]
 80021ea:	f7ff fdf9 	bl	8001de0 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	22bb      	movs	r2, #187	; 0xbb
 80021f2:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	22bb      	movs	r2, #187	; 0xbb
 80021fa:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80021fc:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <sample_pmt+0x128>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	b29a      	uxth	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3302      	adds	r3, #2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <sample_pmt+0x128>)
 800220e:	881a      	ldrh	r2, [r3, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3303      	adds	r3, #3
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3304      	adds	r3, #4
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3305      	adds	r3, #5
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	7852      	ldrb	r2, [r2, #1]
 800222a:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3306      	adds	r3, #6
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3307      	adds	r3, #7
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	7852      	ldrb	r2, [r2, #1]
 800223e:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3308      	adds	r3, #8
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	7892      	ldrb	r2, [r2, #2]
 8002248:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3309      	adds	r3, #9
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	78d2      	ldrb	r2, [r2, #3]
 8002252:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	330a      	adds	r3, #10
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	7912      	ldrb	r2, [r2, #4]
 800225c:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	330b      	adds	r3, #11
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	7952      	ldrb	r2, [r2, #5]
 8002266:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	330c      	adds	r3, #12
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	7992      	ldrb	r2, [r2, #6]
 8002270:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	330d      	adds	r3, #13
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	79d2      	ldrb	r2, [r2, #7]
 800227a:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[8];
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	330e      	adds	r3, #14
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	7a12      	ldrb	r2, [r2, #8]
 8002284:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[9];
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	330f      	adds	r3, #15
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	7a52      	ldrb	r2, [r2, #9]
 800228e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	2210      	movs	r2, #16
 8002294:	6979      	ldr	r1, [r7, #20]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fe44 	bl	8001f24 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <sample_pmt+0x12c>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	1d39      	adds	r1, r7, #4
 80022a2:	2300      	movs	r3, #0
 80022a4:	2200      	movs	r2, #0
 80022a6:	f010 fd41 	bl	8012d2c <osMessageQueuePut>
	available_msgs++;
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <sample_pmt+0x130>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <sample_pmt+0x130>)
 80022b2:	6013      	str	r3, [r2, #0]
	free(buffer);
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f013 ff8b 	bl	80161d0 <free>
	free(pmt_spi);
 80022ba:	6938      	ldr	r0, [r7, #16]
 80022bc:	f013 ff88 	bl	80161d0 <free>
	free(timestamp);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f013 ff85 	bl	80161d0 <free>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	58020000 	.word	0x58020000
 80022d4:	24000c48 	.word	0x24000c48
 80022d8:	24000c38 	.word	0x24000c38
 80022dc:	24000c44 	.word	0x24000c44

080022e0 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80022e6:	bf00      	nop
 80022e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ec:	4859      	ldr	r0, [pc, #356]	; (8002454 <sample_erpa+0x174>)
 80022ee:	f006 fcd3 	bl	8008c98 <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f7      	bne.n	80022e8 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80022f8:	2014      	movs	r0, #20
 80022fa:	f013 ff61 	bl	80161c0 <malloc>
 80022fe:	4603      	mov	r3, r0
 8002300:	617b      	str	r3, [r7, #20]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002302:	2002      	movs	r0, #2
 8002304:	f013 ff5c 	bl	80161c0 <malloc>
 8002308:	4603      	mov	r3, r0
 800230a:	613b      	str	r3, [r7, #16]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 800230c:	2004      	movs	r0, #4
 800230e:	f013 ff57 	bl	80161c0 <malloc>
 8002312:	4603      	mov	r3, r0
 8002314:	60fb      	str	r3, [r7, #12]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 8002316:	200a      	movs	r0, #10
 8002318:	f013 ff52 	bl	80161c0 <malloc>
 800231c:	4603      	mov	r3, r0
 800231e:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 8002320:	68b8      	ldr	r0, [r7, #8]
 8002322:	f7ff fef3 	bl	800210c <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 8002326:	6938      	ldr	r0, [r7, #16]
 8002328:	f7ff fd7e 	bl	8001e28 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fd9f 	bl	8001e70 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	22aa      	movs	r2, #170	; 0xaa
 8002336:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	22aa      	movs	r2, #170	; 0xaa
 800233e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002340:	4b45      	ldr	r3, [pc, #276]	; (8002458 <sample_erpa+0x178>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	b29a      	uxth	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3302      	adds	r3, #2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <sample_erpa+0x178>)
 8002352:	881a      	ldrh	r2, [r3, #0]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3303      	adds	r3, #3
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	b29a      	uxth	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3304      	adds	r3, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	881a      	ldrh	r2, [r3, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3305      	adds	r3, #5
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3302      	adds	r3, #2
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29a      	uxth	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3306      	adds	r3, #6
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3302      	adds	r3, #2
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3307      	adds	r3, #7
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3308      	adds	r3, #8
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	7812      	ldrb	r2, [r2, #0]
 80023a0:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3309      	adds	r3, #9
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	7852      	ldrb	r2, [r2, #1]
 80023aa:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	330a      	adds	r3, #10
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	330b      	adds	r3, #11
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	7852      	ldrb	r2, [r2, #1]
 80023be:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	330c      	adds	r3, #12
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	7892      	ldrb	r2, [r2, #2]
 80023c8:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	330d      	adds	r3, #13
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	78d2      	ldrb	r2, [r2, #3]
 80023d2:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	330e      	adds	r3, #14
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	7912      	ldrb	r2, [r2, #4]
 80023dc:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	330f      	adds	r3, #15
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	7952      	ldrb	r2, [r2, #5]
 80023e6:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3310      	adds	r3, #16
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	7992      	ldrb	r2, [r2, #6]
 80023f0:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3311      	adds	r3, #17
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	79d2      	ldrb	r2, [r2, #7]
 80023fa:	701a      	strb	r2, [r3, #0]
	buffer[18] = timestamp[8];
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3312      	adds	r3, #18
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	7a12      	ldrb	r2, [r2, #8]
 8002404:	701a      	strb	r2, [r3, #0]
	buffer[19] = timestamp[9];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3313      	adds	r3, #19
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	7a52      	ldrb	r2, [r2, #9]
 800240e:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002410:	463b      	mov	r3, r7
 8002412:	2214      	movs	r2, #20
 8002414:	6979      	ldr	r1, [r7, #20]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fd84 	bl	8001f24 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <sample_erpa+0x17c>)
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	4639      	mov	r1, r7
 8002422:	2300      	movs	r3, #0
 8002424:	2200      	movs	r2, #0
 8002426:	f010 fc81 	bl	8012d2c <osMessageQueuePut>
	available_msgs++;
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <sample_erpa+0x180>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <sample_erpa+0x180>)
 8002432:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f013 fecb 	bl	80161d0 <free>
	free(erpa_spi);
 800243a:	6938      	ldr	r0, [r7, #16]
 800243c:	f013 fec8 	bl	80161d0 <free>
	free(erpa_adc);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f013 fec5 	bl	80161d0 <free>
	free(timestamp);
 8002446:	68b8      	ldr	r0, [r7, #8]
 8002448:	f013 fec2 	bl	80161d0 <free>
}
 800244c:	bf00      	nop
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	58020400 	.word	0x58020400
 8002458:	24000c4a 	.word	0x24000c4a
 800245c:	24000c38 	.word	0x24000c38
 8002460:	24000c44 	.word	0x24000c44

08002464 <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 8002464:	b580      	push	{r7, lr}
 8002466:	b086      	sub	sp, #24
 8002468:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 800246a:	2030      	movs	r0, #48	; 0x30
 800246c:	f013 fea8 	bl	80161c0 <malloc>
 8002470:	4603      	mov	r3, r0
 8002472:	617b      	str	r3, [r7, #20]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002474:	2008      	movs	r0, #8
 8002476:	f013 fea3 	bl	80161c0 <malloc>
 800247a:	4603      	mov	r3, r0
 800247c:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 800247e:	200a      	movs	r0, #10
 8002480:	f013 fe9e 	bl	80161c0 <malloc>
 8002484:	4603      	mov	r3, r0
 8002486:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f7ff fe3f 	bl	800210c <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 800248e:	4b13      	ldr	r3, [pc, #76]	; (80024dc <sample_hk+0x78>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002496:	db25      	blt.n	80024e4 <sample_hk+0x80>
		receive_hk_i2c(hk_i2c);
 8002498:	6938      	ldr	r0, [r7, #16]
 800249a:	f7ff fd03 	bl	8001ea4 <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <sample_hk+0x7c>)
 80024a8:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	3302      	adds	r3, #2
 80024ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	4b0a      	ldr	r3, [pc, #40]	; (80024e0 <sample_hk+0x7c>)
 80024b6:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	3304      	adds	r3, #4
 80024bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	4b07      	ldr	r3, [pc, #28]	; (80024e0 <sample_hk+0x7c>)
 80024c4:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	3306      	adds	r3, #6
 80024ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <sample_hk+0x7c>)
 80024d2:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80024d4:	4b01      	ldr	r3, [pc, #4]	; (80024dc <sample_hk+0x78>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	601a      	str	r2, [r3, #0]
 80024da:	e01f      	b.n	800251c <sample_hk+0xb8>
 80024dc:	24000004 	.word	0x24000004
 80024e0:	24000cc8 	.word	0x24000cc8
	} else {
		TEMPERATURE_COUNTER++;
 80024e4:	4b9f      	ldr	r3, [pc, #636]	; (8002764 <sample_hk+0x300>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	3301      	adds	r3, #1
 80024ea:	4a9e      	ldr	r2, [pc, #632]	; (8002764 <sample_hk+0x300>)
 80024ec:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 80024ee:	4b9e      	ldr	r3, [pc, #632]	; (8002768 <sample_hk+0x304>)
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b21a      	sxth	r2, r3
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 80024f8:	4b9b      	ldr	r3, [pc, #620]	; (8002768 <sample_hk+0x304>)
 80024fa:	885a      	ldrh	r2, [r3, #2]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	3302      	adds	r3, #2
 8002500:	b212      	sxth	r2, r2
 8002502:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002504:	4b98      	ldr	r3, [pc, #608]	; (8002768 <sample_hk+0x304>)
 8002506:	889a      	ldrh	r2, [r3, #4]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	3304      	adds	r3, #4
 800250c:	b212      	sxth	r2, r2
 800250e:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 8002510:	4b95      	ldr	r3, [pc, #596]	; (8002768 <sample_hk+0x304>)
 8002512:	88da      	ldrh	r2, [r3, #6]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	3306      	adds	r3, #6
 8002518:	b212      	sxth	r2, r2
 800251a:	801a      	strh	r2, [r3, #0]
	}

#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	22cc      	movs	r2, #204	; 0xcc
 8002520:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	3301      	adds	r3, #1
 8002526:	22cc      	movs	r2, #204	; 0xcc
 8002528:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800252a:	4b90      	ldr	r3, [pc, #576]	; (800276c <sample_hk+0x308>)
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	0a1b      	lsrs	r3, r3, #8
 8002530:	b29a      	uxth	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	3302      	adds	r3, #2
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800253a:	4b8c      	ldr	r3, [pc, #560]	; (800276c <sample_hk+0x308>)
 800253c:	881a      	ldrh	r2, [r3, #0]
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3303      	adds	r3, #3
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((_vsense & 0xFF00) >> 8);		// HK vsense MSB
 8002546:	4b8a      	ldr	r3, [pc, #552]	; (8002770 <sample_hk+0x30c>)
 8002548:	881b      	ldrh	r3, [r3, #0]
 800254a:	0a1b      	lsrs	r3, r3, #8
 800254c:	b29a      	uxth	r2, r3
 800254e:	697b      	ldr	r3, [r7, #20]
 8002550:	3304      	adds	r3, #4
 8002552:	b2d2      	uxtb	r2, r2
 8002554:	701a      	strb	r2, [r3, #0]
	buffer[5] = (_vsense & 0xFF);				// HK vsense LSB
 8002556:	4b86      	ldr	r3, [pc, #536]	; (8002770 <sample_hk+0x30c>)
 8002558:	881a      	ldrh	r2, [r3, #0]
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	3305      	adds	r3, #5
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((_vrefint & 0xFF00) >> 8);		// HK vrefint MSB
 8002562:	4b84      	ldr	r3, [pc, #528]	; (8002774 <sample_hk+0x310>)
 8002564:	881b      	ldrh	r3, [r3, #0]
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	b29a      	uxth	r2, r3
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3306      	adds	r3, #6
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]
	buffer[7] = (_vrefint & 0xFF);				// HK vrefint LSB
 8002572:	4b80      	ldr	r3, [pc, #512]	; (8002774 <sample_hk+0x310>)
 8002574:	881a      	ldrh	r2, [r3, #0]
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	3307      	adds	r3, #7
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002584:	121a      	asrs	r2, r3, #8
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	3308      	adds	r3, #8
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	3309      	adds	r3, #9
 8002598:	b2d2      	uxtb	r2, r2
 800259a:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	3302      	adds	r3, #2
 80025a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a4:	121a      	asrs	r2, r3, #8
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	330a      	adds	r3, #10
 80025aa:	b2d2      	uxtb	r2, r2
 80025ac:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	3302      	adds	r3, #2
 80025b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	330b      	adds	r3, #11
 80025ba:	b2d2      	uxtb	r2, r2
 80025bc:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	3304      	adds	r3, #4
 80025c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c6:	121a      	asrs	r2, r3, #8
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	330c      	adds	r3, #12
 80025cc:	b2d2      	uxtb	r2, r2
 80025ce:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	3304      	adds	r3, #4
 80025d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	330d      	adds	r3, #13
 80025dc:	b2d2      	uxtb	r2, r2
 80025de:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	3306      	adds	r3, #6
 80025e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025e8:	121a      	asrs	r2, r3, #8
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	330e      	adds	r3, #14
 80025ee:	b2d2      	uxtb	r2, r2
 80025f0:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	3306      	adds	r3, #6
 80025f6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	330f      	adds	r3, #15
 80025fe:	b2d2      	uxtb	r2, r2
 8002600:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((_busvmon & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002602:	4b5d      	ldr	r3, [pc, #372]	; (8002778 <sample_hk+0x314>)
 8002604:	881b      	ldrh	r3, [r3, #0]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	b29a      	uxth	r2, r3
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	3310      	adds	r3, #16
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]
	buffer[17] = (_busvmon & 0xFF);				// HK BUSvmon LSB
 8002612:	4b59      	ldr	r3, [pc, #356]	; (8002778 <sample_hk+0x314>)
 8002614:	881a      	ldrh	r2, [r3, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	3311      	adds	r3, #17
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((_busimon & 0xFF00) >> 8);	// HK BUSimon MSB
 800261e:	4b57      	ldr	r3, [pc, #348]	; (800277c <sample_hk+0x318>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	b29a      	uxth	r2, r3
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	3312      	adds	r3, #18
 800262a:	b2d2      	uxtb	r2, r2
 800262c:	701a      	strb	r2, [r3, #0]
	buffer[19] = (_busimon & 0xFF);				// HK BUSimon LSB
 800262e:	4b53      	ldr	r3, [pc, #332]	; (800277c <sample_hk+0x318>)
 8002630:	881a      	ldrh	r2, [r3, #0]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	3313      	adds	r3, #19
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((_2v5 & 0xFF00) >> 8);		// HK 2v5mon MSB
 800263a:	4b51      	ldr	r3, [pc, #324]	; (8002780 <sample_hk+0x31c>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	0a1b      	lsrs	r3, r3, #8
 8002640:	b29a      	uxth	r2, r3
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3314      	adds	r3, #20
 8002646:	b2d2      	uxtb	r2, r2
 8002648:	701a      	strb	r2, [r3, #0]
	buffer[21] = (_2v5 & 0xFF);					// HK 2v5mon LSB
 800264a:	4b4d      	ldr	r3, [pc, #308]	; (8002780 <sample_hk+0x31c>)
 800264c:	881a      	ldrh	r2, [r3, #0]
 800264e:	697b      	ldr	r3, [r7, #20]
 8002650:	3315      	adds	r3, #21
 8002652:	b2d2      	uxtb	r2, r2
 8002654:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((_3v3 & 0xFF00) >> 8);		// HK 3v3mon MSB
 8002656:	4b4b      	ldr	r3, [pc, #300]	; (8002784 <sample_hk+0x320>)
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	b29a      	uxth	r2, r3
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	3316      	adds	r3, #22
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]
	buffer[23] = (_3v3 & 0xFF);					// HK 3v3mon LSB
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <sample_hk+0x320>)
 8002668:	881a      	ldrh	r2, [r3, #0]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	3317      	adds	r3, #23
 800266e:	b2d2      	uxtb	r2, r2
 8002670:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((_5v & 0xFF00) >> 8);			// HK 5vmon MSB
 8002672:	4b45      	ldr	r3, [pc, #276]	; (8002788 <sample_hk+0x324>)
 8002674:	881b      	ldrh	r3, [r3, #0]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	b29a      	uxth	r2, r3
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	3318      	adds	r3, #24
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
	buffer[25] = (_5v & 0xFF);					// HK 5vmon LSB
 8002682:	4b41      	ldr	r3, [pc, #260]	; (8002788 <sample_hk+0x324>)
 8002684:	881a      	ldrh	r2, [r3, #0]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	3319      	adds	r3, #25
 800268a:	b2d2      	uxtb	r2, r2
 800268c:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((_n3v3 & 0xFF00) >> 8);		// HK n3v3mon MSB
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <sample_hk+0x328>)
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	0a1b      	lsrs	r3, r3, #8
 8002694:	b29a      	uxth	r2, r3
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	331a      	adds	r3, #26
 800269a:	b2d2      	uxtb	r2, r2
 800269c:	701a      	strb	r2, [r3, #0]
	buffer[27] = (_n3v3 & 0xFF);				// HK n3v3mon LSB
 800269e:	4b3b      	ldr	r3, [pc, #236]	; (800278c <sample_hk+0x328>)
 80026a0:	881a      	ldrh	r2, [r3, #0]
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	331b      	adds	r3, #27
 80026a6:	b2d2      	uxtb	r2, r2
 80026a8:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((_n5v & 0xFF00) >> 8);		// HK n5vmon MSB
 80026aa:	4b39      	ldr	r3, [pc, #228]	; (8002790 <sample_hk+0x32c>)
 80026ac:	881b      	ldrh	r3, [r3, #0]
 80026ae:	0a1b      	lsrs	r3, r3, #8
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	331c      	adds	r3, #28
 80026b6:	b2d2      	uxtb	r2, r2
 80026b8:	701a      	strb	r2, [r3, #0]
	buffer[29] = (_n5v & 0xFF);					// HK n5vmon LSB
 80026ba:	4b35      	ldr	r3, [pc, #212]	; (8002790 <sample_hk+0x32c>)
 80026bc:	881a      	ldrh	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	331d      	adds	r3, #29
 80026c2:	b2d2      	uxtb	r2, r2
 80026c4:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((_15v & 0xFF00) >> 8);		// HK 15vmon MSB
 80026c6:	4b33      	ldr	r3, [pc, #204]	; (8002794 <sample_hk+0x330>)
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	0a1b      	lsrs	r3, r3, #8
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	331e      	adds	r3, #30
 80026d2:	b2d2      	uxtb	r2, r2
 80026d4:	701a      	strb	r2, [r3, #0]
	buffer[31] = (_15v & 0xFF);					// HK 15vmon LSB
 80026d6:	4b2f      	ldr	r3, [pc, #188]	; (8002794 <sample_hk+0x330>)
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	331f      	adds	r3, #31
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((_5vref & 0xFF00) >> 8);		// HK 5vrefmon MSB
 80026e2:	4b2d      	ldr	r3, [pc, #180]	; (8002798 <sample_hk+0x334>)
 80026e4:	881b      	ldrh	r3, [r3, #0]
 80026e6:	0a1b      	lsrs	r3, r3, #8
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3320      	adds	r3, #32
 80026ee:	b2d2      	uxtb	r2, r2
 80026f0:	701a      	strb	r2, [r3, #0]
	buffer[33] = (_5vref & 0xFF);				// HK 5vrefmon LSB
 80026f2:	4b29      	ldr	r3, [pc, #164]	; (8002798 <sample_hk+0x334>)
 80026f4:	881a      	ldrh	r2, [r3, #0]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	3321      	adds	r3, #33	; 0x21
 80026fa:	b2d2      	uxtb	r2, r2
 80026fc:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((_n200v & 0xFF00) >> 8);		// HK n150vmon MSB
 80026fe:	4b27      	ldr	r3, [pc, #156]	; (800279c <sample_hk+0x338>)
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	0a1b      	lsrs	r3, r3, #8
 8002704:	b29a      	uxth	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3322      	adds	r3, #34	; 0x22
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	701a      	strb	r2, [r3, #0]
	buffer[35] = (_n200v & 0xFF);				// HK n150vmon LSB
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <sample_hk+0x338>)
 8002710:	881a      	ldrh	r2, [r3, #0]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	3323      	adds	r3, #35	; 0x23
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((_n800v & 0xFF00) >> 8);		// HK n800vmon MSB
 800271a:	4b21      	ldr	r3, [pc, #132]	; (80027a0 <sample_hk+0x33c>)
 800271c:	881b      	ldrh	r3, [r3, #0]
 800271e:	0a1b      	lsrs	r3, r3, #8
 8002720:	b29a      	uxth	r2, r3
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3324      	adds	r3, #36	; 0x24
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	701a      	strb	r2, [r3, #0]
	buffer[37] = (_n800v & 0xFF);				// HK n800vmon LSB
 800272a:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <sample_hk+0x33c>)
 800272c:	881a      	ldrh	r2, [r3, #0]
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	3325      	adds	r3, #37	; 0x25
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3326      	adds	r3, #38	; 0x26
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	7812      	ldrb	r2, [r2, #0]
 800273e:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3327      	adds	r3, #39	; 0x27
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	7852      	ldrb	r2, [r2, #1]
 8002748:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	3328      	adds	r3, #40	; 0x28
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	7892      	ldrb	r2, [r2, #2]
 8002752:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3329      	adds	r3, #41	; 0x29
 8002758:	68fa      	ldr	r2, [r7, #12]
 800275a:	78d2      	ldrb	r2, [r2, #3]
 800275c:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	332a      	adds	r3, #42	; 0x2a
 8002762:	e01f      	b.n	80027a4 <sample_hk+0x340>
 8002764:	24000004 	.word	0x24000004
 8002768:	24000cc8 	.word	0x24000cc8
 800276c:	24000c4c 	.word	0x24000c4c
 8002770:	24000c1c 	.word	0x24000c1c
 8002774:	24000c1e 	.word	0x24000c1e
 8002778:	24000c20 	.word	0x24000c20
 800277c:	24000c22 	.word	0x24000c22
 8002780:	24000c24 	.word	0x24000c24
 8002784:	24000c26 	.word	0x24000c26
 8002788:	24000c28 	.word	0x24000c28
 800278c:	24000c2a 	.word	0x24000c2a
 8002790:	24000c2c 	.word	0x24000c2c
 8002794:	24000c2e 	.word	0x24000c2e
 8002798:	24000c30 	.word	0x24000c30
 800279c:	24000c32 	.word	0x24000c32
 80027a0:	24000c34 	.word	0x24000c34
 80027a4:	68fa      	ldr	r2, [r7, #12]
 80027a6:	7912      	ldrb	r2, [r2, #4]
 80027a8:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	332b      	adds	r3, #43	; 0x2b
 80027ae:	68fa      	ldr	r2, [r7, #12]
 80027b0:	7952      	ldrb	r2, [r2, #5]
 80027b2:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	332c      	adds	r3, #44	; 0x2c
 80027b8:	68fa      	ldr	r2, [r7, #12]
 80027ba:	7992      	ldrb	r2, [r2, #6]
 80027bc:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	332d      	adds	r3, #45	; 0x2d
 80027c2:	68fa      	ldr	r2, [r7, #12]
 80027c4:	79d2      	ldrb	r2, [r2, #7]
 80027c6:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	332e      	adds	r3, #46	; 0x2e
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	7a12      	ldrb	r2, [r2, #8]
 80027d0:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	332f      	adds	r3, #47	; 0x2f
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	7a52      	ldrb	r2, [r2, #9]
 80027da:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80027dc:	1d3b      	adds	r3, r7, #4
 80027de:	2230      	movs	r2, #48	; 0x30
 80027e0:	6979      	ldr	r1, [r7, #20]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff fb9e 	bl	8001f24 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 80027e8:	4b0c      	ldr	r3, [pc, #48]	; (800281c <sample_hk+0x3b8>)
 80027ea:	6818      	ldr	r0, [r3, #0]
 80027ec:	1d39      	adds	r1, r7, #4
 80027ee:	2300      	movs	r3, #0
 80027f0:	2200      	movs	r2, #0
 80027f2:	f010 fa9b 	bl	8012d2c <osMessageQueuePut>
	available_msgs++;
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <sample_hk+0x3bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	3301      	adds	r3, #1
 80027fc:	4a08      	ldr	r2, [pc, #32]	; (8002820 <sample_hk+0x3bc>)
 80027fe:	6013      	str	r3, [r2, #0]

	free(buffer);
 8002800:	6978      	ldr	r0, [r7, #20]
 8002802:	f013 fce5 	bl	80161d0 <free>
	free(hk_i2c);
 8002806:	6938      	ldr	r0, [r7, #16]
 8002808:	f013 fce2 	bl	80161d0 <free>
	free(timestamp);
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f013 fcdf 	bl	80161d0 <free>
}
 8002812:	bf00      	nop
 8002814:	3718      	adds	r7, #24
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	24000c38 	.word	0x24000c38
 8002820:	24000c44 	.word	0x24000c44

08002824 <PMT_init>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <PMT_init+0x38>)
 800282e:	6818      	ldr	r0, [r3, #0]
 8002830:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002834:	2200      	movs	r2, #0
 8002836:	2101      	movs	r1, #1
 8002838:	f010 f99e 	bl	8012b78 <osEventFlagsWait>
		osWaitForever);
		if (PMT_ON) {
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <PMT_init+0x3c>)
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <PMT_init+0x30>
			sample_pmt();
 8002844:	f7ff fcb2 	bl	80021ac <sample_pmt>
			pmt_seq++;
 8002848:	4b06      	ldr	r3, [pc, #24]	; (8002864 <PMT_init+0x40>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	3301      	adds	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	4b04      	ldr	r3, [pc, #16]	; (8002864 <PMT_init+0x40>)
 8002852:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002854:	f010 f8aa 	bl	80129ac <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002858:	e7e8      	b.n	800282c <PMT_init+0x8>
 800285a:	bf00      	nop
 800285c:	24000c54 	.word	0x24000c54
 8002860:	24000c4e 	.word	0x24000c4e
 8002864:	24000c48 	.word	0x24000c48

08002868 <ERPA_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002870:	4b0b      	ldr	r3, [pc, #44]	; (80028a0 <ERPA_init+0x38>)
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002878:	2200      	movs	r2, #0
 800287a:	2102      	movs	r1, #2
 800287c:	f010 f97c 	bl	8012b78 <osEventFlagsWait>
		osWaitForever);
		if (ERPA_ON) {
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <ERPA_init+0x3c>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d007      	beq.n	8002898 <ERPA_init+0x30>
			sample_erpa();
 8002888:	f7ff fd2a 	bl	80022e0 <sample_erpa>
			erpa_seq++;
 800288c:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <ERPA_init+0x40>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	4b04      	ldr	r3, [pc, #16]	; (80028a8 <ERPA_init+0x40>)
 8002896:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002898:	f010 f888 	bl	80129ac <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 800289c:	e7e8      	b.n	8002870 <ERPA_init+0x8>
 800289e:	bf00      	nop
 80028a0:	24000c54 	.word	0x24000c54
 80028a4:	24000c4f 	.word	0x24000c4f
 80028a8:	24000c4a 	.word	0x24000c4a

080028ac <HK_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b082      	sub	sp, #8
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HK_init+0x38>)
 80028b6:	6818      	ldr	r0, [r3, #0]
 80028b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028bc:	2200      	movs	r2, #0
 80028be:	2104      	movs	r1, #4
 80028c0:	f010 f95a 	bl	8012b78 <osEventFlagsWait>
		osWaitForever);
		if (HK_ON) {
 80028c4:	4b08      	ldr	r3, [pc, #32]	; (80028e8 <HK_init+0x3c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d007      	beq.n	80028dc <HK_init+0x30>
			sample_hk();
 80028cc:	f7ff fdca 	bl	8002464 <sample_hk>
			hk_seq++;
 80028d0:	4b06      	ldr	r3, [pc, #24]	; (80028ec <HK_init+0x40>)
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	3301      	adds	r3, #1
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	4b04      	ldr	r3, [pc, #16]	; (80028ec <HK_init+0x40>)
 80028da:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 80028dc:	f010 f866 	bl	80129ac <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 80028e0:	e7e8      	b.n	80028b4 <HK_init+0x8>
 80028e2:	bf00      	nop
 80028e4:	24000c54 	.word	0x24000c54
 80028e8:	24000c50 	.word	0x24000c50
 80028ec:	24000c4c 	.word	0x24000c4c

080028f0 <UART_RX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 80028f8:	2201      	movs	r2, #1
 80028fa:	4904      	ldr	r1, [pc, #16]	; (800290c <UART_RX_init+0x1c>)
 80028fc:	4804      	ldr	r0, [pc, #16]	; (8002910 <UART_RX_init+0x20>)
 80028fe:	f00d fa8b 	bl	800fe18 <HAL_UART_Receive_IT>
		osDelay(5);
 8002902:	2005      	movs	r0, #5
 8002904:	f010 f899 	bl	8012a3a <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8002908:	e7f6      	b.n	80028f8 <UART_RX_init+0x8>
 800290a:	bf00      	nop
 800290c:	24000c58 	.word	0x24000c58
 8002910:	24000638 	.word	0x24000638

08002914 <GPIO_on_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <GPIO_on_init+0x9c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4618      	mov	r0, r3
 8002922:	f010 f863 	bl	80129ec <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 8002926:	4b23      	ldr	r3, [pc, #140]	; (80029b4 <GPIO_on_init+0xa0>)
 8002928:	2104      	movs	r1, #4
 800292a:	2201      	movs	r2, #1
 800292c:	4618      	mov	r0, r3
 800292e:	f006 f9cb 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002932:	2064      	movs	r0, #100	; 0x64
 8002934:	f010 f881 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 8002938:	4b1e      	ldr	r3, [pc, #120]	; (80029b4 <GPIO_on_init+0xa0>)
 800293a:	2120      	movs	r1, #32
 800293c:	2201      	movs	r2, #1
 800293e:	4618      	mov	r0, r3
 8002940:	f006 f9c2 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002944:	2064      	movs	r0, #100	; 0x64
 8002946:	f010 f878 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 800294a:	4b1b      	ldr	r3, [pc, #108]	; (80029b8 <GPIO_on_init+0xa4>)
 800294c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002950:	2201      	movs	r2, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f006 f9b8 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002958:	2064      	movs	r0, #100	; 0x64
 800295a:	f010 f86e 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 800295e:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <GPIO_on_init+0xa4>)
 8002960:	2180      	movs	r1, #128	; 0x80
 8002962:	2201      	movs	r2, #1
 8002964:	4618      	mov	r0, r3
 8002966:	f006 f9af 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 800296a:	2064      	movs	r0, #100	; 0x64
 800296c:	f010 f865 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002970:	4b11      	ldr	r3, [pc, #68]	; (80029b8 <GPIO_on_init+0xa4>)
 8002972:	2140      	movs	r1, #64	; 0x40
 8002974:	2201      	movs	r2, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f006 f9a6 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 800297c:	2064      	movs	r0, #100	; 0x64
 800297e:	f010 f85c 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 8002982:	4b0d      	ldr	r3, [pc, #52]	; (80029b8 <GPIO_on_init+0xa4>)
 8002984:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002988:	2201      	movs	r2, #1
 800298a:	4618      	mov	r0, r3
 800298c:	f006 f99c 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002990:	2064      	movs	r0, #100	; 0x64
 8002992:	f010 f852 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 8002996:	4b08      	ldr	r3, [pc, #32]	; (80029b8 <GPIO_on_init+0xa4>)
 8002998:	f44f 7100 	mov.w	r1, #512	; 0x200
 800299c:	2201      	movs	r2, #1
 800299e:	4618      	mov	r0, r3
 80029a0:	f006 f992 	bl	8008cc8 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 80029a4:	4b02      	ldr	r3, [pc, #8]	; (80029b0 <GPIO_on_init+0x9c>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f010 f81f 	bl	80129ec <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80029ae:	e7ba      	b.n	8002926 <GPIO_on_init+0x12>
 80029b0:	24000754 	.word	0x24000754
 80029b4:	58020400 	.word	0x58020400
 80029b8:	58020800 	.word	0x58020800

080029bc <GPIO_off_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 80029c4:	4b24      	ldr	r3, [pc, #144]	; (8002a58 <GPIO_off_init+0x9c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f010 f80f 	bl	80129ec <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80029ce:	4b23      	ldr	r3, [pc, #140]	; (8002a5c <GPIO_off_init+0xa0>)
 80029d0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029d4:	2200      	movs	r2, #0
 80029d6:	4618      	mov	r0, r3
 80029d8:	f006 f976 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 80029dc:	2064      	movs	r0, #100	; 0x64
 80029de:	f010 f82c 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <GPIO_off_init+0xa0>)
 80029e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e8:	2200      	movs	r2, #0
 80029ea:	4618      	mov	r0, r3
 80029ec:	f006 f96c 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 80029f0:	2064      	movs	r0, #100	; 0x64
 80029f2:	f010 f822 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 80029f6:	4b19      	ldr	r3, [pc, #100]	; (8002a5c <GPIO_off_init+0xa0>)
 80029f8:	2140      	movs	r1, #64	; 0x40
 80029fa:	2200      	movs	r2, #0
 80029fc:	4618      	mov	r0, r3
 80029fe:	f006 f963 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a02:	2064      	movs	r0, #100	; 0x64
 8002a04:	f010 f819 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002a08:	4b14      	ldr	r3, [pc, #80]	; (8002a5c <GPIO_off_init+0xa0>)
 8002a0a:	2180      	movs	r1, #128	; 0x80
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f006 f95a 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a14:	2064      	movs	r0, #100	; 0x64
 8002a16:	f010 f810 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002a1a:	4b10      	ldr	r3, [pc, #64]	; (8002a5c <GPIO_off_init+0xa0>)
 8002a1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a20:	2200      	movs	r2, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f006 f950 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a28:	2064      	movs	r0, #100	; 0x64
 8002a2a:	f010 f806 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <GPIO_off_init+0xa4>)
 8002a30:	2120      	movs	r1, #32
 8002a32:	2200      	movs	r2, #0
 8002a34:	4618      	mov	r0, r3
 8002a36:	f006 f947 	bl	8008cc8 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a3a:	2064      	movs	r0, #100	; 0x64
 8002a3c:	f00f fffd 	bl	8012a3a <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002a40:	4b07      	ldr	r3, [pc, #28]	; (8002a60 <GPIO_off_init+0xa4>)
 8002a42:	2104      	movs	r1, #4
 8002a44:	2200      	movs	r2, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 f93e 	bl	8008cc8 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002a4c:	4b02      	ldr	r3, [pc, #8]	; (8002a58 <GPIO_off_init+0x9c>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4618      	mov	r0, r3
 8002a52:	f00f ffcb 	bl	80129ec <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002a56:	e7ba      	b.n	80029ce <GPIO_off_init+0x12>
 8002a58:	240009b4 	.word	0x240009b4
 8002a5c:	58020800 	.word	0x58020800
 8002a60:	58020400 	.word	0x58020400

08002a64 <UART_TX_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[UART_TX_BUFFER_SIZE];

	uint32_t total_size = 0;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002a70:	2300      	movs	r3, #0
 8002a72:	60fb      	str	r3, [r7, #12]
		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002a74:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <UART_TX_init+0xa4>)
 8002a76:	6818      	ldr	r0, [r3, #0]
 8002a78:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	4923      	ldr	r1, [pc, #140]	; (8002b0c <UART_TX_init+0xa8>)
 8002a80:	f010 f9b4 	bl	8012dec <osMessageQueueGet>
 8002a84:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d120      	bne.n	8002ace <UART_TX_init+0x6a>
				if ((total_size + msg.size) < UART_TX_BUFFER_SIZE) {
 8002a8c:	4b1f      	ldr	r3, [pc, #124]	; (8002b0c <UART_TX_init+0xa8>)
 8002a8e:	889b      	ldrh	r3, [r3, #4]
 8002a90:	461a      	mov	r2, r3
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	4413      	add	r3, r2
 8002a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a9a:	d218      	bcs.n	8002ace <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	4a1c      	ldr	r2, [pc, #112]	; (8002b10 <UART_TX_init+0xac>)
 8002aa0:	4413      	add	r3, r2
 8002aa2:	4a1a      	ldr	r2, [pc, #104]	; (8002b0c <UART_TX_init+0xa8>)
 8002aa4:	6811      	ldr	r1, [r2, #0]
 8002aa6:	4a19      	ldr	r2, [pc, #100]	; (8002b0c <UART_TX_init+0xa8>)
 8002aa8:	8892      	ldrh	r2, [r2, #4]
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f013 fb98 	bl	80161e0 <memcpy>
					free(msg.array);
 8002ab0:	4b16      	ldr	r3, [pc, #88]	; (8002b0c <UART_TX_init+0xa8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f013 fb8b 	bl	80161d0 <free>
					total_size += msg.size;
 8002aba:	4b14      	ldr	r3, [pc, #80]	; (8002b0c <UART_TX_init+0xa8>)
 8002abc:	889b      	ldrh	r3, [r3, #4]
 8002abe:	461a      	mov	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	60fb      	str	r3, [r7, #12]
					if(total_size >= (UART_TX_BUFFER_SIZE - HK_DATA_SIZE)){
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	f5b3 7f6e 	cmp.w	r3, #952	; 0x3b8
 8002acc:	d203      	bcs.n	8002ad6 <UART_TX_init+0x72>
						break;
					}
				}
			}
		} while (status == osOK);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d0cf      	beq.n	8002a74 <UART_TX_init+0x10>
 8002ad4:	e000      	b.n	8002ad8 <UART_TX_init+0x74>
						break;
 8002ad6:	bf00      	nop

		if (total_size > 0) {
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d010      	beq.n	8002b00 <UART_TX_init+0x9c>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	490a      	ldr	r1, [pc, #40]	; (8002b10 <UART_TX_init+0xac>)
 8002ae6:	480b      	ldr	r0, [pc, #44]	; (8002b14 <UART_TX_init+0xb0>)
 8002ae8:	f00d f9e2 	bl	800feb0 <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002aec:	e001      	b.n	8002af2 <UART_TX_init+0x8e>
				osThreadYield();
 8002aee:	f00f ff5d 	bl	80129ac <osThreadYield>
			while (tx_flag == 0) {
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <UART_TX_init+0xb4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d0f9      	beq.n	8002aee <UART_TX_init+0x8a>
			}

			// Reset the flag
			tx_flag = 0;
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <UART_TX_init+0xb4>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002b00:	f00f ff54 	bl	80129ac <osThreadYield>
		total_size = 0;
 8002b04:	e7b4      	b.n	8002a70 <UART_TX_init+0xc>
 8002b06:	bf00      	nop
 8002b08:	24000c38 	.word	0x24000c38
 8002b0c:	24000c3c 	.word	0x24000c3c
 8002b10:	24000cd0 	.word	0x24000cd0
 8002b14:	24000638 	.word	0x24000638
 8002b18:	24000000 	.word	0x24000000

08002b1c <Voltage_Monitor_init>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Voltage_Monitor_init */
void Voltage_Monitor_init(void *argument)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Voltage_Monitor_init */
	/* Infinite loop */
#ifdef DAMY
		osThreadExit();
#endif
	osThreadExit(); // REMOVE
 8002b24:	f00f ff83 	bl	8012a2e <osThreadExit>

08002b28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a04      	ldr	r2, [pc, #16]	; (8002b48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002b3a:	f000 ff85 	bl	8003a48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	40001000 	.word	0x40001000

08002b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b50:	b672      	cpsid	i
}
 8002b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b54:	e7fe      	b.n	8002b54 <Error_Handler+0x8>
	...

08002b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <HAL_MspInit+0x38>)
 8002b60:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b64:	4a0a      	ldr	r2, [pc, #40]	; (8002b90 <HAL_MspInit+0x38>)
 8002b66:	f043 0302 	orr.w	r3, r3, #2
 8002b6a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b6e:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <HAL_MspInit+0x38>)
 8002b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	607b      	str	r3, [r7, #4]
 8002b7a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	210f      	movs	r1, #15
 8002b80:	f06f 0001 	mvn.w	r0, #1
 8002b84:	f002 fc6e 	bl	8005464 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b88:	bf00      	nop
 8002b8a:	3708      	adds	r7, #8
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bd80      	pop	{r7, pc}
 8002b90:	58024400 	.word	0x58024400

08002b94 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08e      	sub	sp, #56	; 0x38
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	601a      	str	r2, [r3, #0]
 8002ba4:	605a      	str	r2, [r3, #4]
 8002ba6:	609a      	str	r2, [r3, #8]
 8002ba8:	60da      	str	r2, [r3, #12]
 8002baa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a7b      	ldr	r2, [pc, #492]	; (8002da0 <HAL_ADC_MspInit+0x20c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	f040 8091 	bne.w	8002cda <HAL_ADC_MspInit+0x146>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8002bb8:	4b7a      	ldr	r3, [pc, #488]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002bba:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bbe:	4a79      	ldr	r2, [pc, #484]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002bc0:	f043 0320 	orr.w	r3, r3, #32
 8002bc4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bc8:	4b76      	ldr	r3, [pc, #472]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bce:	f003 0320 	and.w	r3, r3, #32
 8002bd2:	623b      	str	r3, [r7, #32]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bd6:	4b73      	ldr	r3, [pc, #460]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002bd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bdc:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002bde:	f043 0304 	orr.w	r3, r3, #4
 8002be2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002be6:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bec:	f003 0304 	and.w	r3, r3, #4
 8002bf0:	61fb      	str	r3, [r7, #28]
 8002bf2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002bf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfa:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002bfc:	f043 0301 	orr.w	r3, r3, #1
 8002c00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c04:	4b67      	ldr	r3, [pc, #412]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	61bb      	str	r3, [r7, #24]
 8002c10:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c12:	4b64      	ldr	r3, [pc, #400]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002c14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c18:	4a62      	ldr	r2, [pc, #392]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002c1a:	f043 0302 	orr.w	r3, r3, #2
 8002c1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c22:	4b60      	ldr	r3, [pc, #384]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	697b      	ldr	r3, [r7, #20]
    PC4     ------> ADC1_INP4
    PC5     ------> ADC1_INP8
    PB0     ------> ADC1_INP9
    PB1     ------> ADC1_INP5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002c30:	2333      	movs	r3, #51	; 0x33
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c34:	2303      	movs	r3, #3
 8002c36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c40:	4619      	mov	r1, r3
 8002c42:	4859      	ldr	r0, [pc, #356]	; (8002da8 <HAL_ADC_MspInit+0x214>)
 8002c44:	f005 fe78 	bl	8008938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
 8002c48:	23ce      	movs	r3, #206	; 0xce
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c50:	2300      	movs	r3, #0
 8002c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c58:	4619      	mov	r1, r3
 8002c5a:	4854      	ldr	r0, [pc, #336]	; (8002dac <HAL_ADC_MspInit+0x218>)
 8002c5c:	f005 fe6c 	bl	8008938 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c60:	2303      	movs	r3, #3
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c64:	2303      	movs	r3, #3
 8002c66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	4619      	mov	r1, r3
 8002c72:	484f      	ldr	r0, [pc, #316]	; (8002db0 <HAL_ADC_MspInit+0x21c>)
 8002c74:	f005 fe60 	bl	8008938 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Stream0;
 8002c78:	4b4e      	ldr	r3, [pc, #312]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002c7a:	4a4f      	ldr	r2, [pc, #316]	; (8002db8 <HAL_ADC_MspInit+0x224>)
 8002c7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c7e:	4b4d      	ldr	r3, [pc, #308]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002c80:	2209      	movs	r2, #9
 8002c82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c84:	4b4b      	ldr	r3, [pc, #300]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c8a:	4b4a      	ldr	r3, [pc, #296]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002c90:	4b48      	ldr	r3, [pc, #288]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c96:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002c98:	4b46      	ldr	r3, [pc, #280]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002c9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002c9e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002ca0:	4b44      	ldr	r3, [pc, #272]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002ca2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ca6:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002ca8:	4b42      	ldr	r3, [pc, #264]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cb0:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cb6:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002cbc:	483d      	ldr	r0, [pc, #244]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002cbe:	f002 ffff 	bl	8005cc0 <HAL_DMA_Init>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d001      	beq.n	8002ccc <HAL_ADC_MspInit+0x138>
    {
      Error_Handler();
 8002cc8:	f7ff ff40 	bl	8002b4c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a39      	ldr	r2, [pc, #228]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002cd0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002cd2:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <HAL_ADC_MspInit+0x220>)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8002cd8:	e05e      	b.n	8002d98 <HAL_ADC_MspInit+0x204>
  else if(hadc->Instance==ADC3)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a37      	ldr	r2, [pc, #220]	; (8002dbc <HAL_ADC_MspInit+0x228>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d159      	bne.n	8002d98 <HAL_ADC_MspInit+0x204>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8002ce4:	4b2f      	ldr	r3, [pc, #188]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002ce6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cea:	4a2e      	ldr	r2, [pc, #184]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002cec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cf0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cf4:	4b2b      	ldr	r3, [pc, #172]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfe:	613b      	str	r3, [r7, #16]
 8002d00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d02:	4b28      	ldr	r3, [pc, #160]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d08:	4a26      	ldr	r2, [pc, #152]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002d0a:	f043 0304 	orr.w	r3, r3, #4
 8002d0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <HAL_ADC_MspInit+0x210>)
 8002d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d18:	f003 0304 	and.w	r3, r3, #4
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8002d20:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002d24:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002d28:	f000 feba 	bl	8003aa0 <HAL_SYSCFG_AnalogSwitchConfig>
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 8002d2c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002d30:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002d34:	f000 feb4 	bl	8003aa0 <HAL_SYSCFG_AnalogSwitchConfig>
    hdma_adc3.Instance = DMA1_Stream1;
 8002d38:	4b21      	ldr	r3, [pc, #132]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d3a:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <HAL_ADC_MspInit+0x230>)
 8002d3c:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002d3e:	4b20      	ldr	r3, [pc, #128]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d40:	2273      	movs	r2, #115	; 0x73
 8002d42:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d44:	4b1e      	ldr	r3, [pc, #120]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d4a:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002d50:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d56:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d58:	4b19      	ldr	r3, [pc, #100]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d5e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d60:	4b17      	ldr	r3, [pc, #92]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d66:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002d68:	4b15      	ldr	r3, [pc, #84]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d6e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002d70:	4b13      	ldr	r3, [pc, #76]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d76:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002d7c:	4810      	ldr	r0, [pc, #64]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d7e:	f002 ff9f 	bl	8005cc0 <HAL_DMA_Init>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_ADC_MspInit+0x1f8>
      Error_Handler();
 8002d88:	f7ff fee0 	bl	8002b4c <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	4a0c      	ldr	r2, [pc, #48]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d90:	64da      	str	r2, [r3, #76]	; 0x4c
 8002d92:	4a0b      	ldr	r2, [pc, #44]	; (8002dc0 <HAL_ADC_MspInit+0x22c>)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002d98:	bf00      	nop
 8002d9a:	3738      	adds	r7, #56	; 0x38
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40022000 	.word	0x40022000
 8002da4:	58024400 	.word	0x58024400
 8002da8:	58020800 	.word	0x58020800
 8002dac:	58020000 	.word	0x58020000
 8002db0:	58020400 	.word	0x58020400
 8002db4:	24000204 	.word	0x24000204
 8002db8:	40020010 	.word	0x40020010
 8002dbc:	58026000 	.word	0x58026000
 8002dc0:	2400027c 	.word	0x2400027c
 8002dc4:	40020028 	.word	0x40020028

08002dc8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dd0:	f107 0314 	add.w	r3, r7, #20
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	601a      	str	r2, [r3, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	609a      	str	r2, [r3, #8]
 8002ddc:	60da      	str	r2, [r3, #12]
 8002dde:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a34      	ldr	r2, [pc, #208]	; (8002eb8 <HAL_DAC_MspInit+0xf0>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d161      	bne.n	8002eae <HAL_DAC_MspInit+0xe6>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002dea:	4b34      	ldr	r3, [pc, #208]	; (8002ebc <HAL_DAC_MspInit+0xf4>)
 8002dec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002df0:	4a32      	ldr	r2, [pc, #200]	; (8002ebc <HAL_DAC_MspInit+0xf4>)
 8002df2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002df6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002dfa:	4b30      	ldr	r3, [pc, #192]	; (8002ebc <HAL_DAC_MspInit+0xf4>)
 8002dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e04:	613b      	str	r3, [r7, #16]
 8002e06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e08:	4b2c      	ldr	r3, [pc, #176]	; (8002ebc <HAL_DAC_MspInit+0xf4>)
 8002e0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e0e:	4a2b      	ldr	r2, [pc, #172]	; (8002ebc <HAL_DAC_MspInit+0xf4>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e18:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_DAC_MspInit+0xf4>)
 8002e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e26:	2310      	movs	r3, #16
 8002e28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e32:	f107 0314 	add.w	r3, r7, #20
 8002e36:	4619      	mov	r1, r3
 8002e38:	4821      	ldr	r0, [pc, #132]	; (8002ec0 <HAL_DAC_MspInit+0xf8>)
 8002e3a:	f005 fd7d 	bl	8008938 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002e3e:	4b21      	ldr	r3, [pc, #132]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e40:	4a21      	ldr	r2, [pc, #132]	; (8002ec8 <HAL_DAC_MspInit+0x100>)
 8002e42:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002e44:	4b1f      	ldr	r3, [pc, #124]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e46:	2243      	movs	r2, #67	; 0x43
 8002e48:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e4a:	4b1e      	ldr	r3, [pc, #120]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e4c:	2240      	movs	r2, #64	; 0x40
 8002e4e:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e50:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e56:	4b1b      	ldr	r3, [pc, #108]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e5c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e5e:	4b19      	ldr	r3, [pc, #100]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e64:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e66:	4b17      	ldr	r3, [pc, #92]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e6c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002e6e:	4b15      	ldr	r3, [pc, #84]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e74:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002e76:	4b13      	ldr	r3, [pc, #76]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	621a      	str	r2, [r3, #32]
    hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e7c:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8002e82:	4810      	ldr	r0, [pc, #64]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e84:	f002 ff1c 	bl	8005cc0 <HAL_DMA_Init>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 8002e8e:	f7ff fe5d 	bl	8002b4c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a0b      	ldr	r2, [pc, #44]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e96:	609a      	str	r2, [r3, #8]
 8002e98:	4a0a      	ldr	r2, [pc, #40]	; (8002ec4 <HAL_DAC_MspInit+0xfc>)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	2105      	movs	r1, #5
 8002ea2:	2036      	movs	r0, #54	; 0x36
 8002ea4:	f002 fade 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002ea8:	2036      	movs	r0, #54	; 0x36
 8002eaa:	f002 faf5 	bl	8005498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002eae:	bf00      	nop
 8002eb0:	3728      	adds	r7, #40	; 0x28
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40007400 	.word	0x40007400
 8002ebc:	58024400 	.word	0x58024400
 8002ec0:	58020000 	.word	0x58020000
 8002ec4:	24000308 	.word	0x24000308
 8002ec8:	40020088 	.word	0x40020088

08002ecc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b0ba      	sub	sp, #232	; 0xe8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ed4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ed8:	2200      	movs	r2, #0
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	609a      	str	r2, [r3, #8]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002ee4:	f107 0310 	add.w	r3, r7, #16
 8002ee8:	22c0      	movs	r2, #192	; 0xc0
 8002eea:	2100      	movs	r1, #0
 8002eec:	4618      	mov	r0, r3
 8002eee:	f013 f985 	bl	80161fc <memset>
  if(hi2c->Instance==I2C1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a27      	ldr	r2, [pc, #156]	; (8002f94 <HAL_I2C_MspInit+0xc8>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d146      	bne.n	8002f8a <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002efc:	f04f 0208 	mov.w	r2, #8
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f0e:	f107 0310 	add.w	r3, r7, #16
 8002f12:	4618      	mov	r0, r3
 8002f14:	f007 fd60 	bl	800a9d8 <HAL_RCCEx_PeriphCLKConfig>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8002f1e:	f7ff fe15 	bl	8002b4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f22:	4b1d      	ldr	r3, [pc, #116]	; (8002f98 <HAL_I2C_MspInit+0xcc>)
 8002f24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f28:	4a1b      	ldr	r2, [pc, #108]	; (8002f98 <HAL_I2C_MspInit+0xcc>)
 8002f2a:	f043 0302 	orr.w	r3, r3, #2
 8002f2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f32:	4b19      	ldr	r3, [pc, #100]	; (8002f98 <HAL_I2C_MspInit+0xcc>)
 8002f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002f40:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f48:	2312      	movs	r3, #18
 8002f4a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f54:	2300      	movs	r3, #0
 8002f56:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f5a:	2304      	movs	r3, #4
 8002f5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f64:	4619      	mov	r1, r3
 8002f66:	480d      	ldr	r0, [pc, #52]	; (8002f9c <HAL_I2C_MspInit+0xd0>)
 8002f68:	f005 fce6 	bl	8008938 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <HAL_I2C_MspInit+0xcc>)
 8002f6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f72:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_I2C_MspInit+0xcc>)
 8002f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f78:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_I2C_MspInit+0xcc>)
 8002f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f86:	60bb      	str	r3, [r7, #8]
 8002f88:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002f8a:	bf00      	nop
 8002f8c:	37e8      	adds	r7, #232	; 0xe8
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40005400 	.word	0x40005400
 8002f98:	58024400 	.word	0x58024400
 8002f9c:	58020400 	.word	0x58020400

08002fa0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b0b2      	sub	sp, #200	; 0xc8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002fa8:	f107 0308 	add.w	r3, r7, #8
 8002fac:	22c0      	movs	r2, #192	; 0xc0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f013 f923 	bl	80161fc <memset>
  if(hrtc->Instance==RTC)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <HAL_RTC_MspInit+0x5c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d118      	bne.n	8002ff2 <HAL_RTC_MspInit+0x52>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fc0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fc4:	f04f 0300 	mov.w	r3, #0
 8002fc8:	e9c7 2302 	strd	r2, r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <HAL_RTC_MspInit+0x60>)
 8002fce:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002fd2:	f107 0308 	add.w	r3, r7, #8
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f007 fcfe 	bl	800a9d8 <HAL_RCCEx_PeriphCLKConfig>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RTC_MspInit+0x46>
    {
      Error_Handler();
 8002fe2:	f7ff fdb3 	bl	8002b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RTC_MspInit+0x64>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a06      	ldr	r2, [pc, #24]	; (8003004 <HAL_RTC_MspInit+0x64>)
 8002fec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002ff2:	bf00      	nop
 8002ff4:	37c8      	adds	r7, #200	; 0xc8
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	58004000 	.word	0x58004000
 8003000:	00019300 	.word	0x00019300
 8003004:	58024400 	.word	0x58024400

08003008 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b0bc      	sub	sp, #240	; 0xf0
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003010:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
 8003018:	605a      	str	r2, [r3, #4]
 800301a:	609a      	str	r2, [r3, #8]
 800301c:	60da      	str	r2, [r3, #12]
 800301e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003020:	f107 0318 	add.w	r3, r7, #24
 8003024:	22c0      	movs	r2, #192	; 0xc0
 8003026:	2100      	movs	r1, #0
 8003028:	4618      	mov	r0, r3
 800302a:	f013 f8e7 	bl	80161fc <memset>
  if(hspi->Instance==SPI1)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a4c      	ldr	r2, [pc, #304]	; (8003164 <HAL_SPI_MspInit+0x15c>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d145      	bne.n	80030c4 <HAL_SPI_MspInit+0xbc>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003038:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003044:	2300      	movs	r3, #0
 8003046:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003048:	f107 0318 	add.w	r3, r7, #24
 800304c:	4618      	mov	r0, r3
 800304e:	f007 fcc3 	bl	800a9d8 <HAL_RCCEx_PeriphCLKConfig>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8003058:	f7ff fd78 	bl	8002b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800305c:	4b42      	ldr	r3, [pc, #264]	; (8003168 <HAL_SPI_MspInit+0x160>)
 800305e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003062:	4a41      	ldr	r2, [pc, #260]	; (8003168 <HAL_SPI_MspInit+0x160>)
 8003064:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003068:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800306c:	4b3e      	ldr	r3, [pc, #248]	; (8003168 <HAL_SPI_MspInit+0x160>)
 800306e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_SPI_MspInit+0x160>)
 800307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003080:	4a39      	ldr	r2, [pc, #228]	; (8003168 <HAL_SPI_MspInit+0x160>)
 8003082:	f043 0302 	orr.w	r3, r3, #2
 8003086:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800308a:	4b37      	ldr	r3, [pc, #220]	; (8003168 <HAL_SPI_MspInit+0x160>)
 800308c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003090:	f003 0302 	and.w	r3, r3, #2
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]
    /**SPI1 GPIO Configuration
    PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
    PB4 (NJTRST)     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8003098:	2318      	movs	r3, #24
 800309a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800309e:	2302      	movs	r3, #2
 80030a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030a4:	2300      	movs	r3, #0
 80030a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030aa:	2300      	movs	r3, #0
 80030ac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030b0:	2305      	movs	r3, #5
 80030b2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030ba:	4619      	mov	r1, r3
 80030bc:	482b      	ldr	r0, [pc, #172]	; (800316c <HAL_SPI_MspInit+0x164>)
 80030be:	f005 fc3b 	bl	8008938 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030c2:	e04a      	b.n	800315a <HAL_SPI_MspInit+0x152>
  else if(hspi->Instance==SPI2)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a29      	ldr	r2, [pc, #164]	; (8003170 <HAL_SPI_MspInit+0x168>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d145      	bne.n	800315a <HAL_SPI_MspInit+0x152>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80030ce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80030da:	2300      	movs	r3, #0
 80030dc:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80030de:	f107 0318 	add.w	r3, r7, #24
 80030e2:	4618      	mov	r0, r3
 80030e4:	f007 fc78 	bl	800a9d8 <HAL_RCCEx_PeriphCLKConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <HAL_SPI_MspInit+0xea>
      Error_Handler();
 80030ee:	f7ff fd2d 	bl	8002b4c <Error_Handler>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80030f2:	4b1d      	ldr	r3, [pc, #116]	; (8003168 <HAL_SPI_MspInit+0x160>)
 80030f4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80030f8:	4a1b      	ldr	r2, [pc, #108]	; (8003168 <HAL_SPI_MspInit+0x160>)
 80030fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030fe:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003102:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_SPI_MspInit+0x160>)
 8003104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310c:	60fb      	str	r3, [r7, #12]
 800310e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003110:	4b15      	ldr	r3, [pc, #84]	; (8003168 <HAL_SPI_MspInit+0x160>)
 8003112:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003116:	4a14      	ldr	r2, [pc, #80]	; (8003168 <HAL_SPI_MspInit+0x160>)
 8003118:	f043 0302 	orr.w	r3, r3, #2
 800311c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <HAL_SPI_MspInit+0x160>)
 8003122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	60bb      	str	r3, [r7, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800312e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003132:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003136:	2302      	movs	r3, #2
 8003138:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800313c:	2300      	movs	r3, #0
 800313e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003148:	2305      	movs	r3, #5
 800314a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800314e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003152:	4619      	mov	r1, r3
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <HAL_SPI_MspInit+0x164>)
 8003156:	f005 fbef 	bl	8008938 <HAL_GPIO_Init>
}
 800315a:	bf00      	nop
 800315c:	37f0      	adds	r7, #240	; 0xf0
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	40013000 	.word	0x40013000
 8003168:	58024400 	.word	0x58024400
 800316c:	58020400 	.word	0x58020400
 8003170:	40003800 	.word	0x40003800

08003174 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b086      	sub	sp, #24
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a46      	ldr	r2, [pc, #280]	; (800329c <HAL_TIM_Base_MspInit+0x128>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d12f      	bne.n	80031e6 <HAL_TIM_Base_MspInit+0x72>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003186:	4b46      	ldr	r3, [pc, #280]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 8003188:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800318c:	4a44      	ldr	r2, [pc, #272]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 800318e:	f043 0301 	orr.w	r3, r3, #1
 8003192:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003196:	4b42      	ldr	r3, [pc, #264]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 8003198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80031a4:	2200      	movs	r2, #0
 80031a6:	2105      	movs	r1, #5
 80031a8:	2018      	movs	r0, #24
 80031aa:	f002 f95b 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80031ae:	2018      	movs	r0, #24
 80031b0:	f002 f972 	bl	8005498 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80031b4:	2200      	movs	r2, #0
 80031b6:	2105      	movs	r1, #5
 80031b8:	2019      	movs	r0, #25
 80031ba:	f002 f953 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031be:	2019      	movs	r0, #25
 80031c0:	f002 f96a 	bl	8005498 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80031c4:	2200      	movs	r2, #0
 80031c6:	2105      	movs	r1, #5
 80031c8:	201a      	movs	r0, #26
 80031ca:	f002 f94b 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80031ce:	201a      	movs	r0, #26
 80031d0:	f002 f962 	bl	8005498 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2105      	movs	r1, #5
 80031d8:	201b      	movs	r0, #27
 80031da:	f002 f943 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031de:	201b      	movs	r0, #27
 80031e0:	f002 f95a 	bl	8005498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80031e4:	e055      	b.n	8003292 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM2)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ee:	d117      	bne.n	8003220 <HAL_TIM_Base_MspInit+0xac>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80031f0:	4b2b      	ldr	r3, [pc, #172]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 80031f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80031f6:	4a2a      	ldr	r2, [pc, #168]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003200:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 8003202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	613b      	str	r3, [r7, #16]
 800320c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800320e:	2200      	movs	r2, #0
 8003210:	2105      	movs	r1, #5
 8003212:	201c      	movs	r0, #28
 8003214:	f002 f926 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003218:	201c      	movs	r0, #28
 800321a:	f002 f93d 	bl	8005498 <HAL_NVIC_EnableIRQ>
}
 800321e:	e038      	b.n	8003292 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <HAL_TIM_Base_MspInit+0x130>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d117      	bne.n	800325a <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800322a:	4b1d      	ldr	r3, [pc, #116]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 800322c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003230:	4a1b      	ldr	r2, [pc, #108]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800323a:	4b19      	ldr	r3, [pc, #100]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 800323c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	60fb      	str	r3, [r7, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003248:	2200      	movs	r2, #0
 800324a:	2105      	movs	r1, #5
 800324c:	201d      	movs	r0, #29
 800324e:	f002 f909 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003252:	201d      	movs	r0, #29
 8003254:	f002 f920 	bl	8005498 <HAL_NVIC_EnableIRQ>
}
 8003258:	e01b      	b.n	8003292 <HAL_TIM_Base_MspInit+0x11e>
  else if(htim_base->Instance==TIM4)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a12      	ldr	r2, [pc, #72]	; (80032a8 <HAL_TIM_Base_MspInit+0x134>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d116      	bne.n	8003292 <HAL_TIM_Base_MspInit+0x11e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003264:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 8003266:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800326a:	4a0d      	ldr	r2, [pc, #52]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 800326c:	f043 0304 	orr.w	r3, r3, #4
 8003270:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003274:	4b0a      	ldr	r3, [pc, #40]	; (80032a0 <HAL_TIM_Base_MspInit+0x12c>)
 8003276:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800327a:	f003 0304 	and.w	r3, r3, #4
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2105      	movs	r1, #5
 8003286:	201e      	movs	r0, #30
 8003288:	f002 f8ec 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800328c:	201e      	movs	r0, #30
 800328e:	f002 f903 	bl	8005498 <HAL_NVIC_EnableIRQ>
}
 8003292:	bf00      	nop
 8003294:	3718      	adds	r7, #24
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40010000 	.word	0x40010000
 80032a0:	58024400 	.word	0x58024400
 80032a4:	40000400 	.word	0x40000400
 80032a8:	40000800 	.word	0x40000800

080032ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b08a      	sub	sp, #40	; 0x28
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b4:	f107 0314 	add.w	r3, r7, #20
 80032b8:	2200      	movs	r2, #0
 80032ba:	601a      	str	r2, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
 80032be:	609a      	str	r2, [r3, #8]
 80032c0:	60da      	str	r2, [r3, #12]
 80032c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a26      	ldr	r2, [pc, #152]	; (8003364 <HAL_TIM_MspPostInit+0xb8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d120      	bne.n	8003310 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <HAL_TIM_MspPostInit+0xbc>)
 80032d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032d4:	4a24      	ldr	r2, [pc, #144]	; (8003368 <HAL_TIM_MspPostInit+0xbc>)
 80032d6:	f043 0301 	orr.w	r3, r3, #1
 80032da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032de:	4b22      	ldr	r3, [pc, #136]	; (8003368 <HAL_TIM_MspPostInit+0xbc>)
 80032e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032f2:	2302      	movs	r3, #2
 80032f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032fa:	2300      	movs	r3, #0
 80032fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032fe:	2301      	movs	r3, #1
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003302:	f107 0314 	add.w	r3, r7, #20
 8003306:	4619      	mov	r1, r3
 8003308:	4818      	ldr	r0, [pc, #96]	; (800336c <HAL_TIM_MspPostInit+0xc0>)
 800330a:	f005 fb15 	bl	8008938 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800330e:	e024      	b.n	800335a <HAL_TIM_MspPostInit+0xae>
  else if(htim->Instance==TIM2)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003318:	d11f      	bne.n	800335a <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800331a:	4b13      	ldr	r3, [pc, #76]	; (8003368 <HAL_TIM_MspPostInit+0xbc>)
 800331c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003320:	4a11      	ldr	r2, [pc, #68]	; (8003368 <HAL_TIM_MspPostInit+0xbc>)
 8003322:	f043 0302 	orr.w	r3, r3, #2
 8003326:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800332a:	4b0f      	ldr	r3, [pc, #60]	; (8003368 <HAL_TIM_MspPostInit+0xbc>)
 800332c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003338:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800333c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800333e:	2302      	movs	r3, #2
 8003340:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003342:	2300      	movs	r3, #0
 8003344:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003346:	2300      	movs	r3, #0
 8003348:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800334a:	2301      	movs	r3, #1
 800334c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800334e:	f107 0314 	add.w	r3, r7, #20
 8003352:	4619      	mov	r1, r3
 8003354:	4806      	ldr	r0, [pc, #24]	; (8003370 <HAL_TIM_MspPostInit+0xc4>)
 8003356:	f005 faef 	bl	8008938 <HAL_GPIO_Init>
}
 800335a:	bf00      	nop
 800335c:	3728      	adds	r7, #40	; 0x28
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	40010000 	.word	0x40010000
 8003368:	58024400 	.word	0x58024400
 800336c:	58020000 	.word	0x58020000
 8003370:	58020400 	.word	0x58020400

08003374 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b0ba      	sub	sp, #232	; 0xe8
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800337c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
 8003384:	605a      	str	r2, [r3, #4]
 8003386:	609a      	str	r2, [r3, #8]
 8003388:	60da      	str	r2, [r3, #12]
 800338a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800338c:	f107 0310 	add.w	r3, r7, #16
 8003390:	22c0      	movs	r2, #192	; 0xc0
 8003392:	2100      	movs	r1, #0
 8003394:	4618      	mov	r0, r3
 8003396:	f012 ff31 	bl	80161fc <memset>
  if(huart->Instance==USART1)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a41      	ldr	r2, [pc, #260]	; (80034a4 <HAL_UART_MspInit+0x130>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d17b      	bne.n	800349c <HAL_UART_MspInit+0x128>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80033a4:	f04f 0201 	mov.w	r2, #1
 80033a8:	f04f 0300 	mov.w	r3, #0
 80033ac:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 80033b0:	2300      	movs	r3, #0
 80033b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80033b6:	f107 0310 	add.w	r3, r7, #16
 80033ba:	4618      	mov	r0, r3
 80033bc:	f007 fb0c 	bl	800a9d8 <HAL_RCCEx_PeriphCLKConfig>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80033c6:	f7ff fbc1 	bl	8002b4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80033ca:	4b37      	ldr	r3, [pc, #220]	; (80034a8 <HAL_UART_MspInit+0x134>)
 80033cc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033d0:	4a35      	ldr	r2, [pc, #212]	; (80034a8 <HAL_UART_MspInit+0x134>)
 80033d2:	f043 0310 	orr.w	r3, r3, #16
 80033d6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033da:	4b33      	ldr	r3, [pc, #204]	; (80034a8 <HAL_UART_MspInit+0x134>)
 80033dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	60fb      	str	r3, [r7, #12]
 80033e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e8:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_UART_MspInit+0x134>)
 80033ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ee:	4a2e      	ldr	r2, [pc, #184]	; (80034a8 <HAL_UART_MspInit+0x134>)
 80033f0:	f043 0301 	orr.w	r3, r3, #1
 80033f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033f8:	4b2b      	ldr	r3, [pc, #172]	; (80034a8 <HAL_UART_MspInit+0x134>)
 80033fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	60bb      	str	r3, [r7, #8]
 8003404:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003406:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800340a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340e:	2302      	movs	r3, #2
 8003410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800341a:	2300      	movs	r3, #0
 800341c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003420:	2307      	movs	r3, #7
 8003422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003426:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800342a:	4619      	mov	r1, r3
 800342c:	481f      	ldr	r0, [pc, #124]	; (80034ac <HAL_UART_MspInit+0x138>)
 800342e:	f005 fa83 	bl	8008938 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Stream2;
 8003432:	4b1f      	ldr	r3, [pc, #124]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 8003434:	4a1f      	ldr	r2, [pc, #124]	; (80034b4 <HAL_UART_MspInit+0x140>)
 8003436:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003438:	4b1d      	ldr	r3, [pc, #116]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 800343a:	222a      	movs	r2, #42	; 0x2a
 800343c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800343e:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 8003440:	2240      	movs	r2, #64	; 0x40
 8003442:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003444:	4b1a      	ldr	r3, [pc, #104]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 8003446:	2200      	movs	r2, #0
 8003448:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800344a:	4b19      	ldr	r3, [pc, #100]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 800344c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003450:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003452:	4b17      	ldr	r3, [pc, #92]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 8003454:	2200      	movs	r2, #0
 8003456:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003458:	4b15      	ldr	r3, [pc, #84]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 800345a:	2200      	movs	r2, #0
 800345c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800345e:	4b14      	ldr	r3, [pc, #80]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 8003460:	2200      	movs	r2, #0
 8003462:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003464:	4b12      	ldr	r3, [pc, #72]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 8003466:	2200      	movs	r2, #0
 8003468:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800346a:	4b11      	ldr	r3, [pc, #68]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 800346c:	2200      	movs	r2, #0
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003470:	480f      	ldr	r0, [pc, #60]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 8003472:	f002 fc25 	bl	8005cc0 <HAL_DMA_Init>
 8003476:	4603      	mov	r3, r0
 8003478:	2b00      	cmp	r3, #0
 800347a:	d001      	beq.n	8003480 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800347c:	f7ff fb66 	bl	8002b4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 8003484:	67da      	str	r2, [r3, #124]	; 0x7c
 8003486:	4a0a      	ldr	r2, [pc, #40]	; (80034b0 <HAL_UART_MspInit+0x13c>)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800348c:	2200      	movs	r2, #0
 800348e:	2105      	movs	r1, #5
 8003490:	2025      	movs	r0, #37	; 0x25
 8003492:	f001 ffe7 	bl	8005464 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003496:	2025      	movs	r0, #37	; 0x25
 8003498:	f001 fffe 	bl	8005498 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800349c:	bf00      	nop
 800349e:	37e8      	adds	r7, #232	; 0xe8
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40011000 	.word	0x40011000
 80034a8:	58024400 	.word	0x58024400
 80034ac:	58020000 	.word	0x58020000
 80034b0:	240006cc 	.word	0x240006cc
 80034b4:	40020040 	.word	0x40020040

080034b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b090      	sub	sp, #64	; 0x40
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
/*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2b0f      	cmp	r3, #15
 80034c4:	d827      	bhi.n	8003516 <HAL_InitTick+0x5e>
  {
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0U);
 80034c6:	2200      	movs	r2, #0
 80034c8:	6879      	ldr	r1, [r7, #4]
 80034ca:	2036      	movs	r0, #54	; 0x36
 80034cc:	f001 ffca 	bl	8005464 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034d0:	2036      	movs	r0, #54	; 0x36
 80034d2:	f001 ffe1 	bl	8005498 <HAL_NVIC_EnableIRQ>
    uwTickPrio = TickPriority;
 80034d6:	4a29      	ldr	r2, [pc, #164]	; (800357c <HAL_InitTick+0xc4>)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80034dc:	4b28      	ldr	r3, [pc, #160]	; (8003580 <HAL_InitTick+0xc8>)
 80034de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034e2:	4a27      	ldr	r2, [pc, #156]	; (8003580 <HAL_InitTick+0xc8>)
 80034e4:	f043 0310 	orr.w	r3, r3, #16
 80034e8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034ec:	4b24      	ldr	r3, [pc, #144]	; (8003580 <HAL_InitTick+0xc8>)
 80034ee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034f2:	f003 0310 	and.w	r3, r3, #16
 80034f6:	60fb      	str	r3, [r7, #12]
 80034f8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034fa:	f107 0210 	add.w	r2, r7, #16
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4611      	mov	r1, r2
 8003504:	4618      	mov	r0, r3
 8003506:	f007 fa25 	bl	800a954 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800350c:	63bb      	str	r3, [r7, #56]	; 0x38
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d106      	bne.n	8003522 <HAL_InitTick+0x6a>
 8003514:	e001      	b.n	800351a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e02b      	b.n	8003572 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800351a:	f007 f9ef 	bl	800a8fc <HAL_RCC_GetPCLK1Freq>
 800351e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003520:	e004      	b.n	800352c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003522:	f007 f9eb 	bl	800a8fc <HAL_RCC_GetPCLK1Freq>
 8003526:	4603      	mov	r3, r0
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800352c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800352e:	4a15      	ldr	r2, [pc, #84]	; (8003584 <HAL_InitTick+0xcc>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	0c9b      	lsrs	r3, r3, #18
 8003536:	3b01      	subs	r3, #1
 8003538:	637b      	str	r3, [r7, #52]	; 0x34

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800353a:	4b13      	ldr	r3, [pc, #76]	; (8003588 <HAL_InitTick+0xd0>)
 800353c:	4a13      	ldr	r2, [pc, #76]	; (800358c <HAL_InitTick+0xd4>)
 800353e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003540:	4b11      	ldr	r3, [pc, #68]	; (8003588 <HAL_InitTick+0xd0>)
 8003542:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003546:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003548:	4a0f      	ldr	r2, [pc, #60]	; (8003588 <HAL_InitTick+0xd0>)
 800354a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800354c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800354e:	4b0e      	ldr	r3, [pc, #56]	; (8003588 <HAL_InitTick+0xd0>)
 8003550:	2200      	movs	r2, #0
 8003552:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <HAL_InitTick+0xd0>)
 8003556:	2200      	movs	r2, #0
 8003558:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800355a:	480b      	ldr	r0, [pc, #44]	; (8003588 <HAL_InitTick+0xd0>)
 800355c:	f00a fead 	bl	800e2ba <HAL_TIM_Base_Init>
 8003560:	4603      	mov	r3, r0
 8003562:	2b00      	cmp	r3, #0
 8003564:	d104      	bne.n	8003570 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8003566:	4808      	ldr	r0, [pc, #32]	; (8003588 <HAL_InitTick+0xd0>)
 8003568:	f00a fefe 	bl	800e368 <HAL_TIM_Base_Start_IT>
 800356c:	4603      	mov	r3, r0
 800356e:	e000      	b.n	8003572 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
}
 8003572:	4618      	mov	r0, r3
 8003574:	3740      	adds	r7, #64	; 0x40
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}
 800357a:	bf00      	nop
 800357c:	24000098 	.word	0x24000098
 8003580:	58024400 	.word	0x58024400
 8003584:	431bde83 	.word	0x431bde83
 8003588:	240010b8 	.word	0x240010b8
 800358c:	40001000 	.word	0x40001000

08003590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003590:	b480      	push	{r7}
 8003592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003594:	e7fe      	b.n	8003594 <NMI_Handler+0x4>

08003596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003596:	b480      	push	{r7}
 8003598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800359a:	e7fe      	b.n	800359a <HardFault_Handler+0x4>

0800359c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80035a0:	e7fe      	b.n	80035a0 <MemManage_Handler+0x4>

080035a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80035a2:	b480      	push	{r7}
 80035a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80035a6:	e7fe      	b.n	80035a6 <BusFault_Handler+0x4>

080035a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80035a8:	b480      	push	{r7}
 80035aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80035ac:	e7fe      	b.n	80035ac <UsageFault_Handler+0x4>

080035ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80035ae:	b480      	push	{r7}
 80035b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035c0:	4802      	ldr	r0, [pc, #8]	; (80035cc <DMA1_Stream0_IRQHandler+0x10>)
 80035c2:	f003 fea7 	bl	8007314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80035c6:	bf00      	nop
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	24000204 	.word	0x24000204

080035d0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 80035d4:	4802      	ldr	r0, [pc, #8]	; (80035e0 <DMA1_Stream1_IRQHandler+0x10>)
 80035d6:	f003 fe9d 	bl	8007314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035da:	bf00      	nop
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	2400027c 	.word	0x2400027c

080035e4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80035e8:	4802      	ldr	r0, [pc, #8]	; (80035f4 <DMA1_Stream2_IRQHandler+0x10>)
 80035ea:	f003 fe93 	bl	8007314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80035ee:	bf00      	nop
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	240006cc 	.word	0x240006cc

080035f8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80035fc:	4802      	ldr	r0, [pc, #8]	; (8003608 <DMA1_Stream5_IRQHandler+0x10>)
 80035fe:	f003 fe89 	bl	8007314 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	24000308 	.word	0x24000308

0800360c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003610:	4802      	ldr	r0, [pc, #8]	; (800361c <TIM1_BRK_IRQHandler+0x10>)
 8003612:	f00b f9c0 	bl	800e996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8003616:	bf00      	nop
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	24000508 	.word	0x24000508

08003620 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003624:	4802      	ldr	r0, [pc, #8]	; (8003630 <TIM1_UP_IRQHandler+0x10>)
 8003626:	f00b f9b6 	bl	800e996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 800362a:	bf00      	nop
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	24000508 	.word	0x24000508

08003634 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003638:	4802      	ldr	r0, [pc, #8]	; (8003644 <TIM1_TRG_COM_IRQHandler+0x10>)
 800363a:	f00b f9ac 	bl	800e996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800363e:	bf00      	nop
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	24000508 	.word	0x24000508

08003648 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800364c:	4802      	ldr	r0, [pc, #8]	; (8003658 <TIM1_CC_IRQHandler+0x10>)
 800364e:	f00b f9a2 	bl	800e996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	24000508 	.word	0x24000508

0800365c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003660:	4802      	ldr	r0, [pc, #8]	; (800366c <TIM2_IRQHandler+0x10>)
 8003662:	f00b f998 	bl	800e996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003666:	bf00      	nop
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	24000554 	.word	0x24000554

08003670 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003674:	4802      	ldr	r0, [pc, #8]	; (8003680 <TIM3_IRQHandler+0x10>)
 8003676:	f00b f98e 	bl	800e996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800367a:	bf00      	nop
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	240005a0 	.word	0x240005a0

08003684 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003688:	4802      	ldr	r0, [pc, #8]	; (8003694 <TIM4_IRQHandler+0x10>)
 800368a:	f00b f984 	bl	800e996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800368e:	bf00      	nop
 8003690:	bd80      	pop	{r7, pc}
 8003692:	bf00      	nop
 8003694:	240005ec 	.word	0x240005ec

08003698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800369c:	4802      	ldr	r0, [pc, #8]	; (80036a8 <USART1_IRQHandler+0x10>)
 800369e:	f00c fc87 	bl	800ffb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80036a2:	bf00      	nop
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	24000638 	.word	0x24000638

080036ac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac1.State != HAL_DAC_STATE_RESET) {
 80036b0:	4b06      	ldr	r3, [pc, #24]	; (80036cc <TIM6_DAC_IRQHandler+0x20>)
 80036b2:	791b      	ldrb	r3, [r3, #4]
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac1);
 80036ba:	4804      	ldr	r0, [pc, #16]	; (80036cc <TIM6_DAC_IRQHandler+0x20>)
 80036bc:	f002 f881 	bl	80057c2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80036c0:	4803      	ldr	r0, [pc, #12]	; (80036d0 <TIM6_DAC_IRQHandler+0x24>)
 80036c2:	f00b f968 	bl	800e996 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80036c6:	bf00      	nop
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	240002f4 	.word	0x240002f4
 80036d0:	240010b8 	.word	0x240010b8

080036d4 <ITM_SendChar>:
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	4603      	mov	r3, r0
 80036dc:	71fb      	strb	r3, [r7, #7]
 80036de:	4b0f      	ldr	r3, [pc, #60]	; (800371c <ITM_SendChar+0x48>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a0e      	ldr	r2, [pc, #56]	; (800371c <ITM_SendChar+0x48>)
 80036e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b0d      	ldr	r3, [pc, #52]	; (8003720 <ITM_SendChar+0x4c>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a0c      	ldr	r2, [pc, #48]	; (8003720 <ITM_SendChar+0x4c>)
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	bf00      	nop
 80036f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0301 	and.w	r3, r3, #1
 8003702:	2b00      	cmp	r3, #0
 8003704:	d0f8      	beq.n	80036f8 <ITM_SendChar+0x24>
 8003706:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
 800371a:	bf00      	nop
 800371c:	e000edfc 	.word	0xe000edfc
 8003720:	e0000e00 	.word	0xe0000e00

08003724 <_read>:
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	e00a      	b.n	800374c <_read+0x28>
 8003736:	f3af 8000 	nop.w
 800373a:	4601      	mov	r1, r0
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	60ba      	str	r2, [r7, #8]
 8003742:	b2ca      	uxtb	r2, r1
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	3301      	adds	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	429a      	cmp	r2, r3
 8003752:	dbf0      	blt.n	8003736 <_read+0x12>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	4618      	mov	r0, r3
 8003758:	3718      	adds	r7, #24
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}

0800375e <_write>:
 800375e:	b580      	push	{r7, lr}
 8003760:	b086      	sub	sp, #24
 8003762:	af00      	add	r7, sp, #0
 8003764:	60f8      	str	r0, [r7, #12]
 8003766:	60b9      	str	r1, [r7, #8]
 8003768:	607a      	str	r2, [r7, #4]
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
 800376e:	e009      	b.n	8003784 <_write+0x26>
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	1c5a      	adds	r2, r3, #1
 8003774:	60ba      	str	r2, [r7, #8]
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	4618      	mov	r0, r3
 800377a:	f7ff ffab 	bl	80036d4 <ITM_SendChar>
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	3301      	adds	r3, #1
 8003782:	617b      	str	r3, [r7, #20]
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	429a      	cmp	r2, r3
 800378a:	dbf1      	blt.n	8003770 <_write+0x12>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	4618      	mov	r0, r3
 8003790:	3718      	adds	r7, #24
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <_close>:
 8003796:	b480      	push	{r7}
 8003798:	b083      	sub	sp, #12
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
 800379e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037a2:	4618      	mov	r0, r3
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <_fstat>:
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	6039      	str	r1, [r7, #0]
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	2300      	movs	r3, #0
 80037c2:	4618      	mov	r0, r3
 80037c4:	370c      	adds	r7, #12
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <_isatty>:
 80037ce:	b480      	push	{r7}
 80037d0:	b083      	sub	sp, #12
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	2301      	movs	r3, #1
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr

080037e4 <_lseek>:
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	2300      	movs	r3, #0
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <_sbrk>:
 8003800:	b580      	push	{r7, lr}
 8003802:	b086      	sub	sp, #24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	4a14      	ldr	r2, [pc, #80]	; (800385c <_sbrk+0x5c>)
 800380a:	4b15      	ldr	r3, [pc, #84]	; (8003860 <_sbrk+0x60>)
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	613b      	str	r3, [r7, #16]
 8003814:	4b13      	ldr	r3, [pc, #76]	; (8003864 <_sbrk+0x64>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d102      	bne.n	8003822 <_sbrk+0x22>
 800381c:	4b11      	ldr	r3, [pc, #68]	; (8003864 <_sbrk+0x64>)
 800381e:	4a12      	ldr	r2, [pc, #72]	; (8003868 <_sbrk+0x68>)
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	4b10      	ldr	r3, [pc, #64]	; (8003864 <_sbrk+0x64>)
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	429a      	cmp	r2, r3
 800382e:	d207      	bcs.n	8003840 <_sbrk+0x40>
 8003830:	f012 fc9c 	bl	801616c <__errno>
 8003834:	4603      	mov	r3, r0
 8003836:	220c      	movs	r2, #12
 8003838:	601a      	str	r2, [r3, #0]
 800383a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800383e:	e009      	b.n	8003854 <_sbrk+0x54>
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <_sbrk+0x64>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <_sbrk+0x64>)
 8003848:	681a      	ldr	r2, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4413      	add	r3, r2
 800384e:	4a05      	ldr	r2, [pc, #20]	; (8003864 <_sbrk+0x64>)
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	24080000 	.word	0x24080000
 8003860:	00000400 	.word	0x00000400
 8003864:	24001104 	.word	0x24001104
 8003868:	24005a70 	.word	0x24005a70

0800386c <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 8003870:	4b37      	ldr	r3, [pc, #220]	; (8003950 <SystemInit+0xe4>)
 8003872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003876:	4a36      	ldr	r2, [pc, #216]	; (8003950 <SystemInit+0xe4>)
 8003878:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800387c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003880:	4b34      	ldr	r3, [pc, #208]	; (8003954 <SystemInit+0xe8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	2b06      	cmp	r3, #6
 800388a:	d807      	bhi.n	800389c <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 800388c:	4b31      	ldr	r3, [pc, #196]	; (8003954 <SystemInit+0xe8>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f023 030f 	bic.w	r3, r3, #15
 8003894:	4a2f      	ldr	r2, [pc, #188]	; (8003954 <SystemInit+0xe8>)
 8003896:	f043 0307 	orr.w	r3, r3, #7
 800389a:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 800389c:	4b2e      	ldr	r3, [pc, #184]	; (8003958 <SystemInit+0xec>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2d      	ldr	r2, [pc, #180]	; (8003958 <SystemInit+0xec>)
 80038a2:	f043 0301 	orr.w	r3, r3, #1
 80038a6:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 80038a8:	4b2b      	ldr	r3, [pc, #172]	; (8003958 <SystemInit+0xec>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <SystemInit+0xec>)
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	4929      	ldr	r1, [pc, #164]	; (8003958 <SystemInit+0xec>)
 80038b4:	4b29      	ldr	r3, [pc, #164]	; (800395c <SystemInit+0xf0>)
 80038b6:	4013      	ands	r3, r2
 80038b8:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 80038ba:	4b26      	ldr	r3, [pc, #152]	; (8003954 <SystemInit+0xe8>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d007      	beq.n	80038d6 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 80038c6:	4b23      	ldr	r3, [pc, #140]	; (8003954 <SystemInit+0xe8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f023 030f 	bic.w	r3, r3, #15
 80038ce:	4a21      	ldr	r2, [pc, #132]	; (8003954 <SystemInit+0xe8>)
 80038d0:	f043 0307 	orr.w	r3, r3, #7
 80038d4:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 80038d6:	4b20      	ldr	r3, [pc, #128]	; (8003958 <SystemInit+0xec>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 80038dc:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <SystemInit+0xec>)
 80038de:	2200      	movs	r2, #0
 80038e0:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 80038e2:	4b1d      	ldr	r3, [pc, #116]	; (8003958 <SystemInit+0xec>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80038e8:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <SystemInit+0xec>)
 80038ea:	4a1d      	ldr	r2, [pc, #116]	; (8003960 <SystemInit+0xf4>)
 80038ec:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80038ee:	4b1a      	ldr	r3, [pc, #104]	; (8003958 <SystemInit+0xec>)
 80038f0:	4a1c      	ldr	r2, [pc, #112]	; (8003964 <SystemInit+0xf8>)
 80038f2:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80038f4:	4b18      	ldr	r3, [pc, #96]	; (8003958 <SystemInit+0xec>)
 80038f6:	4a1c      	ldr	r2, [pc, #112]	; (8003968 <SystemInit+0xfc>)
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80038fa:	4b17      	ldr	r3, [pc, #92]	; (8003958 <SystemInit+0xec>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <SystemInit+0xec>)
 8003902:	4a19      	ldr	r2, [pc, #100]	; (8003968 <SystemInit+0xfc>)
 8003904:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 8003906:	4b14      	ldr	r3, [pc, #80]	; (8003958 <SystemInit+0xec>)
 8003908:	2200      	movs	r2, #0
 800390a:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <SystemInit+0xec>)
 800390e:	4a16      	ldr	r2, [pc, #88]	; (8003968 <SystemInit+0xfc>)
 8003910:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 8003912:	4b11      	ldr	r3, [pc, #68]	; (8003958 <SystemInit+0xec>)
 8003914:	2200      	movs	r2, #0
 8003916:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 8003918:	4b0f      	ldr	r3, [pc, #60]	; (8003958 <SystemInit+0xec>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a0e      	ldr	r2, [pc, #56]	; (8003958 <SystemInit+0xec>)
 800391e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003922:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 8003924:	4b0c      	ldr	r3, [pc, #48]	; (8003958 <SystemInit+0xec>)
 8003926:	2200      	movs	r2, #0
 8003928:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <SystemInit+0x100>)
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	4b10      	ldr	r3, [pc, #64]	; (8003970 <SystemInit+0x104>)
 8003930:	4013      	ands	r3, r2
 8003932:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003936:	d202      	bcs.n	800393e <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 8003938:	4b0e      	ldr	r3, [pc, #56]	; (8003974 <SystemInit+0x108>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800393e:	4b0e      	ldr	r3, [pc, #56]	; (8003978 <SystemInit+0x10c>)
 8003940:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003944:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003946:	bf00      	nop
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	e000ed00 	.word	0xe000ed00
 8003954:	52002000 	.word	0x52002000
 8003958:	58024400 	.word	0x58024400
 800395c:	eaf6ed7f 	.word	0xeaf6ed7f
 8003960:	02020200 	.word	0x02020200
 8003964:	01ff0000 	.word	0x01ff0000
 8003968:	01010280 	.word	0x01010280
 800396c:	5c001000 	.word	0x5c001000
 8003970:	ffff0000 	.word	0xffff0000
 8003974:	51008108 	.word	0x51008108
 8003978:	52004000 	.word	0x52004000

0800397c <Reset_Handler>:
 800397c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039b4 <LoopFillZerobss+0xe>
 8003980:	f7ff ff74 	bl	800386c <SystemInit>
 8003984:	480c      	ldr	r0, [pc, #48]	; (80039b8 <LoopFillZerobss+0x12>)
 8003986:	490d      	ldr	r1, [pc, #52]	; (80039bc <LoopFillZerobss+0x16>)
 8003988:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <LoopFillZerobss+0x1a>)
 800398a:	2300      	movs	r3, #0
 800398c:	e002      	b.n	8003994 <LoopCopyDataInit>

0800398e <CopyDataInit>:
 800398e:	58d4      	ldr	r4, [r2, r3]
 8003990:	50c4      	str	r4, [r0, r3]
 8003992:	3304      	adds	r3, #4

08003994 <LoopCopyDataInit>:
 8003994:	18c4      	adds	r4, r0, r3
 8003996:	428c      	cmp	r4, r1
 8003998:	d3f9      	bcc.n	800398e <CopyDataInit>
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <LoopFillZerobss+0x1e>)
 800399c:	4c0a      	ldr	r4, [pc, #40]	; (80039c8 <LoopFillZerobss+0x22>)
 800399e:	2300      	movs	r3, #0
 80039a0:	e001      	b.n	80039a6 <LoopFillZerobss>

080039a2 <FillZerobss>:
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	3204      	adds	r2, #4

080039a6 <LoopFillZerobss>:
 80039a6:	42a2      	cmp	r2, r4
 80039a8:	d3fb      	bcc.n	80039a2 <FillZerobss>
 80039aa:	f012 fbe5 	bl	8016178 <__libc_init_array>
 80039ae:	f7fd fa79 	bl	8000ea4 <main>
 80039b2:	4770      	bx	lr
 80039b4:	24080000 	.word	0x24080000
 80039b8:	24000000 	.word	0x24000000
 80039bc:	24000108 	.word	0x24000108
 80039c0:	08017078 	.word	0x08017078
 80039c4:	24000120 	.word	0x24000120
 80039c8:	24005a6c 	.word	0x24005a6c

080039cc <ADC3_IRQHandler>:
 80039cc:	e7fe      	b.n	80039cc <ADC3_IRQHandler>
	...

080039d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d6:	2003      	movs	r0, #3
 80039d8:	f001 fd39 	bl	800544e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039dc:	f006 fde4 	bl	800a5a8 <HAL_RCC_GetSysClockFreq>
 80039e0:	4602      	mov	r2, r0
 80039e2:	4b15      	ldr	r3, [pc, #84]	; (8003a38 <HAL_Init+0x68>)
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	0a1b      	lsrs	r3, r3, #8
 80039e8:	f003 030f 	and.w	r3, r3, #15
 80039ec:	4913      	ldr	r1, [pc, #76]	; (8003a3c <HAL_Init+0x6c>)
 80039ee:	5ccb      	ldrb	r3, [r1, r3]
 80039f0:	f003 031f 	and.w	r3, r3, #31
 80039f4:	fa22 f303 	lsr.w	r3, r2, r3
 80039f8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039fa:	4b0f      	ldr	r3, [pc, #60]	; (8003a38 <HAL_Init+0x68>)
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	f003 030f 	and.w	r3, r3, #15
 8003a02:	4a0e      	ldr	r2, [pc, #56]	; (8003a3c <HAL_Init+0x6c>)
 8003a04:	5cd3      	ldrb	r3, [r2, r3]
 8003a06:	f003 031f 	and.w	r3, r3, #31
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a10:	4a0b      	ldr	r2, [pc, #44]	; (8003a40 <HAL_Init+0x70>)
 8003a12:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003a14:	4a0b      	ldr	r2, [pc, #44]	; (8003a44 <HAL_Init+0x74>)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a1a:	2005      	movs	r0, #5
 8003a1c:	f7ff fd4c 	bl	80034b8 <HAL_InitTick>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e002      	b.n	8003a30 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003a2a:	f7ff f895 	bl	8002b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	58024400 	.word	0x58024400
 8003a3c:	08016fc4 	.word	0x08016fc4
 8003a40:	24000094 	.word	0x24000094
 8003a44:	24000090 	.word	0x24000090

08003a48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <HAL_IncTick+0x20>)
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	461a      	mov	r2, r3
 8003a52:	4b06      	ldr	r3, [pc, #24]	; (8003a6c <HAL_IncTick+0x24>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4413      	add	r3, r2
 8003a58:	4a04      	ldr	r2, [pc, #16]	; (8003a6c <HAL_IncTick+0x24>)
 8003a5a:	6013      	str	r3, [r2, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr
 8003a66:	bf00      	nop
 8003a68:	2400009c 	.word	0x2400009c
 8003a6c:	24001108 	.word	0x24001108

08003a70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a70:	b480      	push	{r7}
 8003a72:	af00      	add	r7, sp, #0
  return uwTick;
 8003a74:	4b03      	ldr	r3, [pc, #12]	; (8003a84 <HAL_GetTick+0x14>)
 8003a76:	681b      	ldr	r3, [r3, #0]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	24001108 	.word	0x24001108

08003a88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003a8c:	4b03      	ldr	r3, [pc, #12]	; (8003a9c <HAL_GetREVID+0x14>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	0c1b      	lsrs	r3, r3, #16
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr
 8003a9c:	5c001000 	.word	0x5c001000

08003aa0 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	401a      	ands	r2, r3
 8003ab4:	4904      	ldr	r1, [pc, #16]	; (8003ac8 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	604b      	str	r3, [r1, #4]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	58000400 	.word	0x58000400

08003acc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	431a      	orrs	r2, r3
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	609a      	str	r2, [r3, #8]
}
 8003ae6:	bf00      	nop
 8003ae8:	370c      	adds	r7, #12
 8003aea:	46bd      	mov	sp, r7
 8003aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af0:	4770      	bx	lr

08003af2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b083      	sub	sp, #12
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
 8003afa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	431a      	orrs	r2, r3
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b087      	sub	sp, #28
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]
 8003b40:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	3360      	adds	r3, #96	; 0x60
 8003b46:	461a      	mov	r2, r3
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	431a      	orrs	r2, r3
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003b68:	bf00      	nop
 8003b6a:	371c      	adds	r7, #28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b72:	4770      	bx	lr

08003b74 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	60f8      	str	r0, [r7, #12]
 8003b7c:	60b9      	str	r1, [r7, #8]
 8003b7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	691b      	ldr	r3, [r3, #16]
 8003b84:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	f003 031f 	and.w	r3, r3, #31
 8003b8e:	6879      	ldr	r1, [r7, #4]
 8003b90:	fa01 f303 	lsl.w	r3, r1, r3
 8003b94:	431a      	orrs	r2, r3
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	611a      	str	r2, [r3, #16]
}
 8003b9a:	bf00      	nop
 8003b9c:	3714      	adds	r7, #20
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba4:	4770      	bx	lr

08003ba6 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003ba6:	b480      	push	{r7}
 8003ba8:	b087      	sub	sp, #28
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	60f8      	str	r0, [r7, #12]
 8003bae:	60b9      	str	r1, [r7, #8]
 8003bb0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3360      	adds	r3, #96	; 0x60
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	4413      	add	r3, r2
 8003bbe:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	431a      	orrs	r2, r3
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	601a      	str	r2, [r3, #0]
  }
}
 8003bd0:	bf00      	nop
 8003bd2:	371c      	adds	r7, #28
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d101      	bne.n	8003bf4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr

08003c02 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003c02:	b480      	push	{r7}
 8003c04:	b087      	sub	sp, #28
 8003c06:	af00      	add	r7, sp, #0
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3330      	adds	r3, #48	; 0x30
 8003c12:	461a      	mov	r2, r3
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	0a1b      	lsrs	r3, r3, #8
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	f003 030c 	and.w	r3, r3, #12
 8003c1e:	4413      	add	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f003 031f 	and.w	r3, r3, #31
 8003c2c:	211f      	movs	r1, #31
 8003c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c32:	43db      	mvns	r3, r3
 8003c34:	401a      	ands	r2, r3
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	0e9b      	lsrs	r3, r3, #26
 8003c3a:	f003 011f 	and.w	r1, r3, #31
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	f003 031f 	and.w	r3, r3, #31
 8003c44:	fa01 f303 	lsl.w	r3, r1, r3
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr

08003c5a <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003c5a:	b480      	push	{r7}
 8003c5c:	b083      	sub	sp, #12
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	6078      	str	r0, [r7, #4]
 8003c62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f023 0203 	bic.w	r2, r3, #3
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	431a      	orrs	r2, r3
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60da      	str	r2, [r3, #12]
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b087      	sub	sp, #28
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	60f8      	str	r0, [r7, #12]
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	3314      	adds	r3, #20
 8003c90:	461a      	mov	r2, r3
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	0e5b      	lsrs	r3, r3, #25
 8003c96:	009b      	lsls	r3, r3, #2
 8003c98:	f003 0304 	and.w	r3, r3, #4
 8003c9c:	4413      	add	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	0d1b      	lsrs	r3, r3, #20
 8003ca8:	f003 031f 	and.w	r3, r3, #31
 8003cac:	2107      	movs	r1, #7
 8003cae:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	401a      	ands	r2, r3
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	0d1b      	lsrs	r3, r3, #20
 8003cba:	f003 031f 	and.w	r3, r3, #31
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc4:	431a      	orrs	r2, r3
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003cca:	bf00      	nop
 8003ccc:	371c      	adds	r7, #28
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f003 0318 	and.w	r3, r3, #24
 8003cfa:	4908      	ldr	r1, [pc, #32]	; (8003d1c <LL_ADC_SetChannelSingleDiff+0x44>)
 8003cfc:	40d9      	lsrs	r1, r3
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	400b      	ands	r3, r1
 8003d02:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d06:	431a      	orrs	r2, r3
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003d0e:	bf00      	nop
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	000fffff 	.word	0x000fffff

08003d20 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b083      	sub	sp, #12
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 031f 	and.w	r3, r3, #31
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	4b04      	ldr	r3, [pc, #16]	; (8003d5c <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	6093      	str	r3, [r2, #8]
}
 8003d50:	bf00      	nop
 8003d52:	370c      	adds	r7, #12
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	5fffffc0 	.word	0x5fffffc0

08003d60 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d74:	d101      	bne.n	8003d7a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d76:	2301      	movs	r3, #1
 8003d78:	e000      	b.n	8003d7c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d7a:	2300      	movs	r3, #0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	370c      	adds	r7, #12
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr

08003d88 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b083      	sub	sp, #12
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	4b05      	ldr	r3, [pc, #20]	; (8003dac <LL_ADC_EnableInternalRegulator+0x24>)
 8003d96:	4013      	ands	r3, r2
 8003d98:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr
 8003dac:	6fffffc0 	.word	0x6fffffc0

08003db0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dc4:	d101      	bne.n	8003dca <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e000      	b.n	8003dcc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b083      	sub	sp, #12
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	689a      	ldr	r2, [r3, #8]
 8003de4:	4b05      	ldr	r3, [pc, #20]	; (8003dfc <LL_ADC_Enable+0x24>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	f043 0201 	orr.w	r2, r3, #1
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003df0:	bf00      	nop
 8003df2:	370c      	adds	r7, #12
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	7fffffc0 	.word	0x7fffffc0

08003e00 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689a      	ldr	r2, [r3, #8]
 8003e0c:	4b05      	ldr	r3, [pc, #20]	; (8003e24 <LL_ADC_Disable+0x24>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	f043 0202 	orr.w	r2, r3, #2
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003e18:	bf00      	nop
 8003e1a:	370c      	adds	r7, #12
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	7fffffc0 	.word	0x7fffffc0

08003e28 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b083      	sub	sp, #12
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 0301 	and.w	r3, r3, #1
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d101      	bne.n	8003e40 <LL_ADC_IsEnabled+0x18>
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e000      	b.n	8003e42 <LL_ADC_IsEnabled+0x1a>
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr

08003e4e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b02      	cmp	r3, #2
 8003e60:	d101      	bne.n	8003e66 <LL_ADC_IsDisableOngoing+0x18>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <LL_ADC_IsDisableOngoing+0x1a>
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <LL_ADC_REG_StartConversion+0x24>)
 8003e82:	4013      	ands	r3, r2
 8003e84:	f043 0204 	orr.w	r2, r3, #4
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	7fffffc0 	.word	0x7fffffc0

08003e9c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0304 	and.w	r3, r3, #4
 8003eac:	2b04      	cmp	r3, #4
 8003eae:	d101      	bne.n	8003eb4 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0308 	and.w	r3, r3, #8
 8003ed2:	2b08      	cmp	r3, #8
 8003ed4:	d101      	bne.n	8003eda <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b590      	push	{r4, r7, lr}
 8003eea:	b089      	sub	sp, #36	; 0x24
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	e18f      	b.n	8004222 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d109      	bne.n	8003f24 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f7fe fe3f 	bl	8002b94 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f7ff ff19 	bl	8003d60 <LL_ADC_IsDeepPowerDownEnabled>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff feff 	bl	8003d3c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7ff ff34 	bl	8003db0 <LL_ADC_IsInternalRegulatorEnabled>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d114      	bne.n	8003f78 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4618      	mov	r0, r3
 8003f54:	f7ff ff18 	bl	8003d88 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f58:	4b87      	ldr	r3, [pc, #540]	; (8004178 <HAL_ADC_Init+0x290>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	099b      	lsrs	r3, r3, #6
 8003f5e:	4a87      	ldr	r2, [pc, #540]	; (800417c <HAL_ADC_Init+0x294>)
 8003f60:	fba2 2303 	umull	r2, r3, r2, r3
 8003f64:	099b      	lsrs	r3, r3, #6
 8003f66:	3301      	adds	r3, #1
 8003f68:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f6a:	e002      	b.n	8003f72 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d1f9      	bne.n	8003f6c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f7ff ff17 	bl	8003db0 <LL_ADC_IsInternalRegulatorEnabled>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d10d      	bne.n	8003fa4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f8c:	f043 0210 	orr.w	r2, r3, #16
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	f043 0201 	orr.w	r2, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f7ff ff77 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 8003fae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f040 8129 	bne.w	8004210 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	f040 8125 	bne.w	8004210 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fca:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003fce:	f043 0202 	orr.w	r2, r3, #2
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7ff ff24 	bl	8003e28 <LL_ADC_IsEnabled>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d136      	bne.n	8004054 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a65      	ldr	r2, [pc, #404]	; (8004180 <HAL_ADC_Init+0x298>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_ADC_Init+0x112>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a63      	ldr	r2, [pc, #396]	; (8004184 <HAL_ADC_Init+0x29c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d10e      	bne.n	8004018 <HAL_ADC_Init+0x130>
 8003ffa:	4861      	ldr	r0, [pc, #388]	; (8004180 <HAL_ADC_Init+0x298>)
 8003ffc:	f7ff ff14 	bl	8003e28 <LL_ADC_IsEnabled>
 8004000:	4604      	mov	r4, r0
 8004002:	4860      	ldr	r0, [pc, #384]	; (8004184 <HAL_ADC_Init+0x29c>)
 8004004:	f7ff ff10 	bl	8003e28 <LL_ADC_IsEnabled>
 8004008:	4603      	mov	r3, r0
 800400a:	4323      	orrs	r3, r4
 800400c:	2b00      	cmp	r3, #0
 800400e:	bf0c      	ite	eq
 8004010:	2301      	moveq	r3, #1
 8004012:	2300      	movne	r3, #0
 8004014:	b2db      	uxtb	r3, r3
 8004016:	e008      	b.n	800402a <HAL_ADC_Init+0x142>
 8004018:	485b      	ldr	r0, [pc, #364]	; (8004188 <HAL_ADC_Init+0x2a0>)
 800401a:	f7ff ff05 	bl	8003e28 <LL_ADC_IsEnabled>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	bf0c      	ite	eq
 8004024:	2301      	moveq	r3, #1
 8004026:	2300      	movne	r3, #0
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b00      	cmp	r3, #0
 800402c:	d012      	beq.n	8004054 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a53      	ldr	r2, [pc, #332]	; (8004180 <HAL_ADC_Init+0x298>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d004      	beq.n	8004042 <HAL_ADC_Init+0x15a>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a51      	ldr	r2, [pc, #324]	; (8004184 <HAL_ADC_Init+0x29c>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d101      	bne.n	8004046 <HAL_ADC_Init+0x15e>
 8004042:	4a52      	ldr	r2, [pc, #328]	; (800418c <HAL_ADC_Init+0x2a4>)
 8004044:	e000      	b.n	8004048 <HAL_ADC_Init+0x160>
 8004046:	4a52      	ldr	r2, [pc, #328]	; (8004190 <HAL_ADC_Init+0x2a8>)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	4619      	mov	r1, r3
 800404e:	4610      	mov	r0, r2
 8004050:	f7ff fd3c 	bl	8003acc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004054:	f7ff fd18 	bl	8003a88 <HAL_GetREVID>
 8004058:	4603      	mov	r3, r0
 800405a:	f241 0203 	movw	r2, #4099	; 0x1003
 800405e:	4293      	cmp	r3, r2
 8004060:	d914      	bls.n	800408c <HAL_ADC_Init+0x1a4>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b10      	cmp	r3, #16
 8004068:	d110      	bne.n	800408c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	7d5b      	ldrb	r3, [r3, #21]
 800406e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004074:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800407a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	7f1b      	ldrb	r3, [r3, #28]
 8004080:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004082:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004084:	f043 030c 	orr.w	r3, r3, #12
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e00d      	b.n	80040a8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	7d5b      	ldrb	r3, [r3, #21]
 8004090:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004096:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800409c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	7f1b      	ldrb	r3, [r3, #28]
 80040a2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80040a4:	4313      	orrs	r3, r2
 80040a6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	7f1b      	ldrb	r3, [r3, #28]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d106      	bne.n	80040be <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a1b      	ldr	r3, [r3, #32]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	045b      	lsls	r3, r3, #17
 80040b8:	69ba      	ldr	r2, [r7, #24]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d009      	beq.n	80040da <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ca:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68da      	ldr	r2, [r3, #12]
 80040e0:	4b2c      	ldr	r3, [pc, #176]	; (8004194 <HAL_ADC_Init+0x2ac>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	69b9      	ldr	r1, [r7, #24]
 80040ea:	430b      	orrs	r3, r1
 80040ec:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff fed2 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 80040f8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff fedf 	bl	8003ec2 <LL_ADC_INJ_IsConversionOngoing>
 8004104:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d15f      	bne.n	80041cc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d15c      	bne.n	80041cc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	7d1b      	ldrb	r3, [r3, #20]
 8004116:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 800411c:	4313      	orrs	r3, r2
 800411e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68da      	ldr	r2, [r3, #12]
 8004126:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <HAL_ADC_Init+0x2b0>)
 8004128:	4013      	ands	r3, r2
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6812      	ldr	r2, [r2, #0]
 800412e:	69b9      	ldr	r1, [r7, #24]
 8004130:	430b      	orrs	r3, r1
 8004132:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800413a:	2b01      	cmp	r3, #1
 800413c:	d130      	bne.n	80041a0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004142:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	4b14      	ldr	r3, [pc, #80]	; (800419c <HAL_ADC_Init+0x2b4>)
 800414c:	4013      	ands	r3, r2
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004152:	3a01      	subs	r2, #1
 8004154:	0411      	lsls	r1, r2, #16
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004160:	4311      	orrs	r1, r2
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004166:	430a      	orrs	r2, r1
 8004168:	431a      	orrs	r2, r3
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	611a      	str	r2, [r3, #16]
 8004174:	e01c      	b.n	80041b0 <HAL_ADC_Init+0x2c8>
 8004176:	bf00      	nop
 8004178:	24000090 	.word	0x24000090
 800417c:	053e2d63 	.word	0x053e2d63
 8004180:	40022000 	.word	0x40022000
 8004184:	40022100 	.word	0x40022100
 8004188:	58026000 	.word	0x58026000
 800418c:	40022300 	.word	0x40022300
 8004190:	58026300 	.word	0x58026300
 8004194:	fff0c003 	.word	0xfff0c003
 8004198:	ffffbffc 	.word	0xffffbffc
 800419c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	691a      	ldr	r2, [r3, #16]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f022 0201 	bic.w	r2, r2, #1
 80041ae:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	691b      	ldr	r3, [r3, #16]
 80041b6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 fdec 	bl	8004da4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d10c      	bne.n	80041ee <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041da:	f023 010f 	bic.w	r1, r3, #15
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699b      	ldr	r3, [r3, #24]
 80041e2:	1e5a      	subs	r2, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
 80041ec:	e007      	b.n	80041fe <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 020f 	bic.w	r2, r2, #15
 80041fc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	f043 0201 	orr.w	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	655a      	str	r2, [r3, #84]	; 0x54
 800420e:	e007      	b.n	8004220 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004214:	f043 0210 	orr.w	r2, r3, #16
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004220:	7ffb      	ldrb	r3, [r7, #31]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3724      	adds	r7, #36	; 0x24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd90      	pop	{r4, r7, pc}
 800422a:	bf00      	nop

0800422c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	60f8      	str	r0, [r7, #12]
 8004234:	60b9      	str	r1, [r7, #8]
 8004236:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a55      	ldr	r2, [pc, #340]	; (8004394 <HAL_ADC_Start_DMA+0x168>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_ADC_Start_DMA+0x20>
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a54      	ldr	r2, [pc, #336]	; (8004398 <HAL_ADC_Start_DMA+0x16c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d101      	bne.n	8004250 <HAL_ADC_Start_DMA+0x24>
 800424c:	4b53      	ldr	r3, [pc, #332]	; (800439c <HAL_ADC_Start_DMA+0x170>)
 800424e:	e000      	b.n	8004252 <HAL_ADC_Start_DMA+0x26>
 8004250:	4b53      	ldr	r3, [pc, #332]	; (80043a0 <HAL_ADC_Start_DMA+0x174>)
 8004252:	4618      	mov	r0, r3
 8004254:	f7ff fd64 	bl	8003d20 <LL_ADC_GetMultimode>
 8004258:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7ff fe1c 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 8004264:	4603      	mov	r3, r0
 8004266:	2b00      	cmp	r3, #0
 8004268:	f040 808c 	bne.w	8004384 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004272:	2b01      	cmp	r3, #1
 8004274:	d101      	bne.n	800427a <HAL_ADC_Start_DMA+0x4e>
 8004276:	2302      	movs	r3, #2
 8004278:	e087      	b.n	800438a <HAL_ADC_Start_DMA+0x15e>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d005      	beq.n	8004294 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004288:	693b      	ldr	r3, [r7, #16]
 800428a:	2b05      	cmp	r3, #5
 800428c:	d002      	beq.n	8004294 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	2b09      	cmp	r3, #9
 8004292:	d170      	bne.n	8004376 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004294:	68f8      	ldr	r0, [r7, #12]
 8004296:	f000 fc07 	bl	8004aa8 <ADC_Enable>
 800429a:	4603      	mov	r3, r0
 800429c:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800429e:	7dfb      	ldrb	r3, [r7, #23]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d163      	bne.n	800436c <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80042a8:	4b3e      	ldr	r3, [pc, #248]	; (80043a4 <HAL_ADC_Start_DMA+0x178>)
 80042aa:	4013      	ands	r3, r2
 80042ac:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a37      	ldr	r2, [pc, #220]	; (8004398 <HAL_ADC_Start_DMA+0x16c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d002      	beq.n	80042c4 <HAL_ADC_Start_DMA+0x98>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	e000      	b.n	80042c6 <HAL_ADC_Start_DMA+0x9a>
 80042c4:	4b33      	ldr	r3, [pc, #204]	; (8004394 <HAL_ADC_Start_DMA+0x168>)
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	6812      	ldr	r2, [r2, #0]
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d002      	beq.n	80042d4 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d105      	bne.n	80042e0 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d006      	beq.n	80042fa <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f0:	f023 0206 	bic.w	r2, r3, #6
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	659a      	str	r2, [r3, #88]	; 0x58
 80042f8:	e002      	b.n	8004300 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004304:	4a28      	ldr	r2, [pc, #160]	; (80043a8 <HAL_ADC_Start_DMA+0x17c>)
 8004306:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800430c:	4a27      	ldr	r2, [pc, #156]	; (80043ac <HAL_ADC_Start_DMA+0x180>)
 800430e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004314:	4a26      	ldr	r2, [pc, #152]	; (80043b0 <HAL_ADC_Start_DMA+0x184>)
 8004316:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	221c      	movs	r2, #28
 800431e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	685a      	ldr	r2, [r3, #4]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0210 	orr.w	r2, r2, #16
 8004336:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	4619      	mov	r1, r3
 8004342:	4610      	mov	r0, r2
 8004344:	f7ff fc89 	bl	8003c5a <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	3340      	adds	r3, #64	; 0x40
 8004352:	4619      	mov	r1, r3
 8004354:	68ba      	ldr	r2, [r7, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f002 f80e 	bl	8006378 <HAL_DMA_Start_IT>
 800435c:	4603      	mov	r3, r0
 800435e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4618      	mov	r0, r3
 8004366:	f7ff fd85 	bl	8003e74 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800436a:	e00d      	b.n	8004388 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004374:	e008      	b.n	8004388 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004382:	e001      	b.n	8004388 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004384:	2302      	movs	r3, #2
 8004386:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004388:	7dfb      	ldrb	r3, [r7, #23]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	40022000 	.word	0x40022000
 8004398:	40022100 	.word	0x40022100
 800439c:	40022300 	.word	0x40022300
 80043a0:	58026300 	.word	0x58026300
 80043a4:	fffff0fe 	.word	0xfffff0fe
 80043a8:	08004c7b 	.word	0x08004c7b
 80043ac:	08004d53 	.word	0x08004d53
 80043b0:	08004d6f 	.word	0x08004d6f

080043b4 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80043bc:	bf00      	nop
 80043be:	370c      	adds	r7, #12
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr

080043c8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80043dc:	b480      	push	{r7}
 80043de:	b083      	sub	sp, #12
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043f0:	b590      	push	{r4, r7, lr}
 80043f2:	b0a1      	sub	sp, #132	; 0x84
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8004400:	2300      	movs	r3, #0
 8004402:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	4a65      	ldr	r2, [pc, #404]	; (80045a0 <HAL_ADC_ConfigChannel+0x1b0>)
 800440a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004412:	2b01      	cmp	r3, #1
 8004414:	d101      	bne.n	800441a <HAL_ADC_ConfigChannel+0x2a>
 8004416:	2302      	movs	r3, #2
 8004418:	e32e      	b.n	8004a78 <HAL_ADC_ConfigChannel+0x688>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7ff fd38 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 800442c:	4603      	mov	r3, r0
 800442e:	2b00      	cmp	r3, #0
 8004430:	f040 8313 	bne.w	8004a5a <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	2b00      	cmp	r3, #0
 800443a:	db2c      	blt.n	8004496 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004444:	2b00      	cmp	r3, #0
 8004446:	d108      	bne.n	800445a <HAL_ADC_ConfigChannel+0x6a>
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	0e9b      	lsrs	r3, r3, #26
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	2201      	movs	r2, #1
 8004454:	fa02 f303 	lsl.w	r3, r2, r3
 8004458:	e016      	b.n	8004488 <HAL_ADC_ConfigChannel+0x98>
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004460:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004462:	fa93 f3a3 	rbit	r3, r3
 8004466:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800446a:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800446c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8004472:	2320      	movs	r3, #32
 8004474:	e003      	b.n	800447e <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004476:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004478:	fab3 f383 	clz	r3, r3
 800447c:	b2db      	uxtb	r3, r3
 800447e:	f003 031f 	and.w	r3, r3, #31
 8004482:	2201      	movs	r2, #1
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	6812      	ldr	r2, [r2, #0]
 800448c:	69d1      	ldr	r1, [r2, #28]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6812      	ldr	r2, [r2, #0]
 8004492:	430b      	orrs	r3, r1
 8004494:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6818      	ldr	r0, [r3, #0]
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	6859      	ldr	r1, [r3, #4]
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	461a      	mov	r2, r3
 80044a4:	f7ff fbad 	bl	8003c02 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4618      	mov	r0, r3
 80044ae:	f7ff fcf5 	bl	8003e9c <LL_ADC_REG_IsConversionOngoing>
 80044b2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f7ff fd02 	bl	8003ec2 <LL_ADC_INJ_IsConversionOngoing>
 80044be:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80044c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f040 80b8 	bne.w	8004638 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80044c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 80b4 	bne.w	8004638 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6818      	ldr	r0, [r3, #0]
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6819      	ldr	r1, [r3, #0]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	461a      	mov	r2, r3
 80044de:	f7ff fbcf 	bl	8003c80 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80044e2:	4b30      	ldr	r3, [pc, #192]	; (80045a4 <HAL_ADC_ConfigChannel+0x1b4>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044ee:	d10b      	bne.n	8004508 <HAL_ADC_ConfigChannel+0x118>
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	089b      	lsrs	r3, r3, #2
 80044fc:	f003 0307 	and.w	r3, r3, #7
 8004500:	005b      	lsls	r3, r3, #1
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	e01d      	b.n	8004544 <HAL_ADC_ConfigChannel+0x154>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	f003 0310 	and.w	r3, r3, #16
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10b      	bne.n	800452e <HAL_ADC_ConfigChannel+0x13e>
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	695a      	ldr	r2, [r3, #20]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	68db      	ldr	r3, [r3, #12]
 8004520:	089b      	lsrs	r3, r3, #2
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	005b      	lsls	r3, r3, #1
 8004528:	fa02 f303 	lsl.w	r3, r2, r3
 800452c:	e00a      	b.n	8004544 <HAL_ADC_ConfigChannel+0x154>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	089b      	lsrs	r3, r3, #2
 800453a:	f003 0304 	and.w	r3, r3, #4
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	fa02 f303 	lsl.w	r3, r2, r3
 8004544:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	2b04      	cmp	r3, #4
 800454c:	d02c      	beq.n	80045a8 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	6919      	ldr	r1, [r3, #16]
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800455c:	f7ff faea 	bl	8003b34 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6818      	ldr	r0, [r3, #0]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	6919      	ldr	r1, [r3, #16]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	7e5b      	ldrb	r3, [r3, #25]
 800456c:	2b01      	cmp	r3, #1
 800456e:	d102      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x186>
 8004570:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004574:	e000      	b.n	8004578 <HAL_ADC_ConfigChannel+0x188>
 8004576:	2300      	movs	r3, #0
 8004578:	461a      	mov	r2, r3
 800457a:	f7ff fb14 	bl	8003ba6 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6919      	ldr	r1, [r3, #16]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	7e1b      	ldrb	r3, [r3, #24]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d102      	bne.n	8004594 <HAL_ADC_ConfigChannel+0x1a4>
 800458e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004592:	e000      	b.n	8004596 <HAL_ADC_ConfigChannel+0x1a6>
 8004594:	2300      	movs	r3, #0
 8004596:	461a      	mov	r2, r3
 8004598:	f7ff faec 	bl	8003b74 <LL_ADC_SetDataRightShift>
 800459c:	e04c      	b.n	8004638 <HAL_ADC_ConfigChannel+0x248>
 800459e:	bf00      	nop
 80045a0:	47ff0000 	.word	0x47ff0000
 80045a4:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045ae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	069b      	lsls	r3, r3, #26
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d107      	bne.n	80045cc <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045ca:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	069b      	lsls	r3, r3, #26
 80045dc:	429a      	cmp	r2, r3
 80045de:	d107      	bne.n	80045f0 <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045ee:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	069b      	lsls	r3, r3, #26
 8004600:	429a      	cmp	r2, r3
 8004602:	d107      	bne.n	8004614 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004612:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800461a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	069b      	lsls	r3, r3, #26
 8004624:	429a      	cmp	r2, r3
 8004626:	d107      	bne.n	8004638 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004636:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4618      	mov	r0, r3
 800463e:	f7ff fbf3 	bl	8003e28 <LL_ADC_IsEnabled>
 8004642:	4603      	mov	r3, r0
 8004644:	2b00      	cmp	r3, #0
 8004646:	f040 8211 	bne.w	8004a6c <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6818      	ldr	r0, [r3, #0]
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	6819      	ldr	r1, [r3, #0]
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	461a      	mov	r2, r3
 8004658:	f7ff fb3e 	bl	8003cd8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	4aa1      	ldr	r2, [pc, #644]	; (80048e8 <HAL_ADC_ConfigChannel+0x4f8>)
 8004662:	4293      	cmp	r3, r2
 8004664:	f040 812e 	bne.w	80048c4 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <HAL_ADC_ConfigChannel+0x2a0>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	0e9b      	lsrs	r3, r3, #26
 800467e:	3301      	adds	r3, #1
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	2b09      	cmp	r3, #9
 8004686:	bf94      	ite	ls
 8004688:	2301      	movls	r3, #1
 800468a:	2300      	movhi	r3, #0
 800468c:	b2db      	uxtb	r3, r3
 800468e:	e019      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x2d4>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004698:	fa93 f3a3 	rbit	r3, r3
 800469c:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800469e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046a0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80046a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d101      	bne.n	80046ac <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 80046a8:	2320      	movs	r3, #32
 80046aa:	e003      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 80046ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	3301      	adds	r3, #1
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	2b09      	cmp	r3, #9
 80046bc:	bf94      	ite	ls
 80046be:	2301      	movls	r3, #1
 80046c0:	2300      	movhi	r3, #0
 80046c2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d079      	beq.n	80047bc <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d107      	bne.n	80046e4 <HAL_ADC_ConfigChannel+0x2f4>
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	0e9b      	lsrs	r3, r3, #26
 80046da:	3301      	adds	r3, #1
 80046dc:	069b      	lsls	r3, r3, #26
 80046de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046e2:	e015      	b.n	8004710 <HAL_ADC_ConfigChannel+0x320>
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046ec:	fa93 f3a3 	rbit	r3, r3
 80046f0:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80046f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046f4:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80046f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d101      	bne.n	8004700 <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80046fc:	2320      	movs	r3, #32
 80046fe:	e003      	b.n	8004708 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 8004700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004702:	fab3 f383 	clz	r3, r3
 8004706:	b2db      	uxtb	r3, r3
 8004708:	3301      	adds	r3, #1
 800470a:	069b      	lsls	r3, r3, #26
 800470c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004718:	2b00      	cmp	r3, #0
 800471a:	d109      	bne.n	8004730 <HAL_ADC_ConfigChannel+0x340>
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	0e9b      	lsrs	r3, r3, #26
 8004722:	3301      	adds	r3, #1
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2101      	movs	r1, #1
 800472a:	fa01 f303 	lsl.w	r3, r1, r3
 800472e:	e017      	b.n	8004760 <HAL_ADC_ConfigChannel+0x370>
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004738:	fa93 f3a3 	rbit	r3, r3
 800473c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800473e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004740:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8004742:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004744:	2b00      	cmp	r3, #0
 8004746:	d101      	bne.n	800474c <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004748:	2320      	movs	r3, #32
 800474a:	e003      	b.n	8004754 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 800474c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800474e:	fab3 f383 	clz	r3, r3
 8004752:	b2db      	uxtb	r3, r3
 8004754:	3301      	adds	r3, #1
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	2101      	movs	r1, #1
 800475c:	fa01 f303 	lsl.w	r3, r1, r3
 8004760:	ea42 0103 	orr.w	r1, r2, r3
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10a      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x396>
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	0e9b      	lsrs	r3, r3, #26
 8004776:	3301      	adds	r3, #1
 8004778:	f003 021f 	and.w	r2, r3, #31
 800477c:	4613      	mov	r3, r2
 800477e:	005b      	lsls	r3, r3, #1
 8004780:	4413      	add	r3, r2
 8004782:	051b      	lsls	r3, r3, #20
 8004784:	e018      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x3c8>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800478e:	fa93 f3a3 	rbit	r3, r3
 8004792:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004796:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800479e:	2320      	movs	r3, #32
 80047a0:	e003      	b.n	80047aa <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 80047a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a4:	fab3 f383 	clz	r3, r3
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	3301      	adds	r3, #1
 80047ac:	f003 021f 	and.w	r2, r3, #31
 80047b0:	4613      	mov	r3, r2
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	4413      	add	r3, r2
 80047b6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047b8:	430b      	orrs	r3, r1
 80047ba:	e07e      	b.n	80048ba <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d107      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x3e8>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	0e9b      	lsrs	r3, r3, #26
 80047ce:	3301      	adds	r3, #1
 80047d0:	069b      	lsls	r3, r3, #26
 80047d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047d6:	e015      	b.n	8004804 <HAL_ADC_ConfigChannel+0x414>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e0:	fa93 f3a3 	rbit	r3, r3
 80047e4:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80047e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80047ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d101      	bne.n	80047f4 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80047f0:	2320      	movs	r3, #32
 80047f2:	e003      	b.n	80047fc <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80047f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047f6:	fab3 f383 	clz	r3, r3
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	3301      	adds	r3, #1
 80047fe:	069b      	lsls	r3, r3, #26
 8004800:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800480c:	2b00      	cmp	r3, #0
 800480e:	d109      	bne.n	8004824 <HAL_ADC_ConfigChannel+0x434>
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	0e9b      	lsrs	r3, r3, #26
 8004816:	3301      	adds	r3, #1
 8004818:	f003 031f 	and.w	r3, r3, #31
 800481c:	2101      	movs	r1, #1
 800481e:	fa01 f303 	lsl.w	r3, r1, r3
 8004822:	e017      	b.n	8004854 <HAL_ADC_ConfigChannel+0x464>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	fa93 f3a3 	rbit	r3, r3
 8004830:	61bb      	str	r3, [r7, #24]
  return result;
 8004832:	69bb      	ldr	r3, [r7, #24]
 8004834:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 800483c:	2320      	movs	r3, #32
 800483e:	e003      	b.n	8004848 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 8004840:	6a3b      	ldr	r3, [r7, #32]
 8004842:	fab3 f383 	clz	r3, r3
 8004846:	b2db      	uxtb	r3, r3
 8004848:	3301      	adds	r3, #1
 800484a:	f003 031f 	and.w	r3, r3, #31
 800484e:	2101      	movs	r1, #1
 8004850:	fa01 f303 	lsl.w	r3, r1, r3
 8004854:	ea42 0103 	orr.w	r1, r2, r3
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004860:	2b00      	cmp	r3, #0
 8004862:	d10d      	bne.n	8004880 <HAL_ADC_ConfigChannel+0x490>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0e9b      	lsrs	r3, r3, #26
 800486a:	3301      	adds	r3, #1
 800486c:	f003 021f 	and.w	r2, r3, #31
 8004870:	4613      	mov	r3, r2
 8004872:	005b      	lsls	r3, r3, #1
 8004874:	4413      	add	r3, r2
 8004876:	3b1e      	subs	r3, #30
 8004878:	051b      	lsls	r3, r3, #20
 800487a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800487e:	e01b      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x4c8>
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	fa93 f3a3 	rbit	r3, r3
 800488c:	60fb      	str	r3, [r7, #12]
  return result;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d101      	bne.n	800489c <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004898:	2320      	movs	r3, #32
 800489a:	e003      	b.n	80048a4 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	fab3 f383 	clz	r3, r3
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	3301      	adds	r3, #1
 80048a6:	f003 021f 	and.w	r2, r3, #31
 80048aa:	4613      	mov	r3, r2
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	4413      	add	r3, r2
 80048b0:	3b1e      	subs	r3, #30
 80048b2:	051b      	lsls	r3, r3, #20
 80048b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048b8:	430b      	orrs	r3, r1
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	6892      	ldr	r2, [r2, #8]
 80048be:	4619      	mov	r1, r3
 80048c0:	f7ff f9de 	bl	8003c80 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	f280 80cf 	bge.w	8004a6c <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a06      	ldr	r2, [pc, #24]	; (80048ec <HAL_ADC_ConfigChannel+0x4fc>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_ADC_ConfigChannel+0x4f2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a04      	ldr	r2, [pc, #16]	; (80048f0 <HAL_ADC_ConfigChannel+0x500>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10a      	bne.n	80048f8 <HAL_ADC_ConfigChannel+0x508>
 80048e2:	4b04      	ldr	r3, [pc, #16]	; (80048f4 <HAL_ADC_ConfigChannel+0x504>)
 80048e4:	e009      	b.n	80048fa <HAL_ADC_ConfigChannel+0x50a>
 80048e6:	bf00      	nop
 80048e8:	47ff0000 	.word	0x47ff0000
 80048ec:	40022000 	.word	0x40022000
 80048f0:	40022100 	.word	0x40022100
 80048f4:	40022300 	.word	0x40022300
 80048f8:	4b61      	ldr	r3, [pc, #388]	; (8004a80 <HAL_ADC_ConfigChannel+0x690>)
 80048fa:	4618      	mov	r0, r3
 80048fc:	f7ff f90c 	bl	8003b18 <LL_ADC_GetCommonPathInternalCh>
 8004900:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a5f      	ldr	r2, [pc, #380]	; (8004a84 <HAL_ADC_ConfigChannel+0x694>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_ADC_ConfigChannel+0x526>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a5d      	ldr	r2, [pc, #372]	; (8004a88 <HAL_ADC_ConfigChannel+0x698>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d10e      	bne.n	8004934 <HAL_ADC_ConfigChannel+0x544>
 8004916:	485b      	ldr	r0, [pc, #364]	; (8004a84 <HAL_ADC_ConfigChannel+0x694>)
 8004918:	f7ff fa86 	bl	8003e28 <LL_ADC_IsEnabled>
 800491c:	4604      	mov	r4, r0
 800491e:	485a      	ldr	r0, [pc, #360]	; (8004a88 <HAL_ADC_ConfigChannel+0x698>)
 8004920:	f7ff fa82 	bl	8003e28 <LL_ADC_IsEnabled>
 8004924:	4603      	mov	r3, r0
 8004926:	4323      	orrs	r3, r4
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf0c      	ite	eq
 800492c:	2301      	moveq	r3, #1
 800492e:	2300      	movne	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	e008      	b.n	8004946 <HAL_ADC_ConfigChannel+0x556>
 8004934:	4855      	ldr	r0, [pc, #340]	; (8004a8c <HAL_ADC_ConfigChannel+0x69c>)
 8004936:	f7ff fa77 	bl	8003e28 <LL_ADC_IsEnabled>
 800493a:	4603      	mov	r3, r0
 800493c:	2b00      	cmp	r3, #0
 800493e:	bf0c      	ite	eq
 8004940:	2301      	moveq	r3, #1
 8004942:	2300      	movne	r3, #0
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d07d      	beq.n	8004a46 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a50      	ldr	r2, [pc, #320]	; (8004a90 <HAL_ADC_ConfigChannel+0x6a0>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d130      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x5c6>
 8004954:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004956:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d12b      	bne.n	80049b6 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a4a      	ldr	r2, [pc, #296]	; (8004a8c <HAL_ADC_ConfigChannel+0x69c>)
 8004964:	4293      	cmp	r3, r2
 8004966:	f040 8081 	bne.w	8004a6c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a45      	ldr	r2, [pc, #276]	; (8004a84 <HAL_ADC_ConfigChannel+0x694>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_ADC_ConfigChannel+0x58e>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a43      	ldr	r2, [pc, #268]	; (8004a88 <HAL_ADC_ConfigChannel+0x698>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d101      	bne.n	8004982 <HAL_ADC_ConfigChannel+0x592>
 800497e:	4a45      	ldr	r2, [pc, #276]	; (8004a94 <HAL_ADC_ConfigChannel+0x6a4>)
 8004980:	e000      	b.n	8004984 <HAL_ADC_ConfigChannel+0x594>
 8004982:	4a3f      	ldr	r2, [pc, #252]	; (8004a80 <HAL_ADC_ConfigChannel+0x690>)
 8004984:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004986:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800498a:	4619      	mov	r1, r3
 800498c:	4610      	mov	r0, r2
 800498e:	f7ff f8b0 	bl	8003af2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004992:	4b41      	ldr	r3, [pc, #260]	; (8004a98 <HAL_ADC_ConfigChannel+0x6a8>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	099b      	lsrs	r3, r3, #6
 8004998:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <HAL_ADC_ConfigChannel+0x6ac>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	099b      	lsrs	r3, r3, #6
 80049a0:	3301      	adds	r3, #1
 80049a2:	005b      	lsls	r3, r3, #1
 80049a4:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80049a6:	e002      	b.n	80049ae <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	3b01      	subs	r3, #1
 80049ac:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1f9      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80049b4:	e05a      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a39      	ldr	r2, [pc, #228]	; (8004aa0 <HAL_ADC_ConfigChannel+0x6b0>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d11e      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x60e>
 80049c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d119      	bne.n	80049fe <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a2f      	ldr	r2, [pc, #188]	; (8004a8c <HAL_ADC_ConfigChannel+0x69c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d14b      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a2a      	ldr	r2, [pc, #168]	; (8004a84 <HAL_ADC_ConfigChannel+0x694>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_ADC_ConfigChannel+0x5f8>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a29      	ldr	r2, [pc, #164]	; (8004a88 <HAL_ADC_ConfigChannel+0x698>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d101      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x5fc>
 80049e8:	4a2a      	ldr	r2, [pc, #168]	; (8004a94 <HAL_ADC_ConfigChannel+0x6a4>)
 80049ea:	e000      	b.n	80049ee <HAL_ADC_ConfigChannel+0x5fe>
 80049ec:	4a24      	ldr	r2, [pc, #144]	; (8004a80 <HAL_ADC_ConfigChannel+0x690>)
 80049ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049f4:	4619      	mov	r1, r3
 80049f6:	4610      	mov	r0, r2
 80049f8:	f7ff f87b 	bl	8003af2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049fc:	e036      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4a28      	ldr	r2, [pc, #160]	; (8004aa4 <HAL_ADC_ConfigChannel+0x6b4>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d131      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x67c>
 8004a08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d12c      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1d      	ldr	r2, [pc, #116]	; (8004a8c <HAL_ADC_ConfigChannel+0x69c>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d127      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a18      	ldr	r2, [pc, #96]	; (8004a84 <HAL_ADC_ConfigChannel+0x694>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d004      	beq.n	8004a30 <HAL_ADC_ConfigChannel+0x640>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <HAL_ADC_ConfigChannel+0x698>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d101      	bne.n	8004a34 <HAL_ADC_ConfigChannel+0x644>
 8004a30:	4a18      	ldr	r2, [pc, #96]	; (8004a94 <HAL_ADC_ConfigChannel+0x6a4>)
 8004a32:	e000      	b.n	8004a36 <HAL_ADC_ConfigChannel+0x646>
 8004a34:	4a12      	ldr	r2, [pc, #72]	; (8004a80 <HAL_ADC_ConfigChannel+0x690>)
 8004a36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	4610      	mov	r0, r2
 8004a40:	f7ff f857 	bl	8003af2 <LL_ADC_SetCommonPathInternalCh>
 8004a44:	e012      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	f043 0220 	orr.w	r2, r3, #32
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a58:	e008      	b.n	8004a6c <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a5e:	f043 0220 	orr.w	r2, r3, #32
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a74:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3784      	adds	r7, #132	; 0x84
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd90      	pop	{r4, r7, pc}
 8004a80:	58026300 	.word	0x58026300
 8004a84:	40022000 	.word	0x40022000
 8004a88:	40022100 	.word	0x40022100
 8004a8c:	58026000 	.word	0x58026000
 8004a90:	cb840000 	.word	0xcb840000
 8004a94:	40022300 	.word	0x40022300
 8004a98:	24000090 	.word	0x24000090
 8004a9c:	053e2d63 	.word	0x053e2d63
 8004aa0:	c7520000 	.word	0xc7520000
 8004aa4:	cfb80000 	.word	0xcfb80000

08004aa8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f7ff f9b7 	bl	8003e28 <LL_ADC_IsEnabled>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d16e      	bne.n	8004b9e <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	689a      	ldr	r2, [r3, #8]
 8004ac6:	4b38      	ldr	r3, [pc, #224]	; (8004ba8 <ADC_Enable+0x100>)
 8004ac8:	4013      	ands	r3, r2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00d      	beq.n	8004aea <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	f043 0210 	orr.w	r2, r3, #16
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ade:	f043 0201 	orr.w	r2, r3, #1
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e05a      	b.n	8004ba0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4618      	mov	r0, r3
 8004af0:	f7ff f972 	bl	8003dd8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004af4:	f7fe ffbc 	bl	8003a70 <HAL_GetTick>
 8004af8:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a2b      	ldr	r2, [pc, #172]	; (8004bac <ADC_Enable+0x104>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d004      	beq.n	8004b0e <ADC_Enable+0x66>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a29      	ldr	r2, [pc, #164]	; (8004bb0 <ADC_Enable+0x108>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d101      	bne.n	8004b12 <ADC_Enable+0x6a>
 8004b0e:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <ADC_Enable+0x10c>)
 8004b10:	e000      	b.n	8004b14 <ADC_Enable+0x6c>
 8004b12:	4b29      	ldr	r3, [pc, #164]	; (8004bb8 <ADC_Enable+0x110>)
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff f903 	bl	8003d20 <LL_ADC_GetMultimode>
 8004b1a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a23      	ldr	r2, [pc, #140]	; (8004bb0 <ADC_Enable+0x108>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d002      	beq.n	8004b2c <ADC_Enable+0x84>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	e000      	b.n	8004b2e <ADC_Enable+0x86>
 8004b2c:	4b1f      	ldr	r3, [pc, #124]	; (8004bac <ADC_Enable+0x104>)
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	6812      	ldr	r2, [r2, #0]
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02c      	beq.n	8004b90 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d130      	bne.n	8004b9e <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b3c:	e028      	b.n	8004b90 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7ff f970 	bl	8003e28 <LL_ADC_IsEnabled>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d104      	bne.n	8004b58 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff f940 	bl	8003dd8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b58:	f7fe ff8a 	bl	8003a70 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b02      	cmp	r3, #2
 8004b64:	d914      	bls.n	8004b90 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d00d      	beq.n	8004b90 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b78:	f043 0210 	orr.w	r2, r3, #16
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b84:	f043 0201 	orr.w	r2, r3, #1
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e007      	b.n	8004ba0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0301 	and.w	r3, r3, #1
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d1cf      	bne.n	8004b3e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3710      	adds	r7, #16
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	8000003f 	.word	0x8000003f
 8004bac:	40022000 	.word	0x40022000
 8004bb0:	40022100 	.word	0x40022100
 8004bb4:	40022300 	.word	0x40022300
 8004bb8:	58026300 	.word	0x58026300

08004bbc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7ff f940 	bl	8003e4e <LL_ADC_IsDisableOngoing>
 8004bce:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f7ff f927 	bl	8003e28 <LL_ADC_IsEnabled>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d047      	beq.n	8004c70 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d144      	bne.n	8004c70 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f003 030d 	and.w	r3, r3, #13
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d10c      	bne.n	8004c0e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff f901 	bl	8003e00 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	2203      	movs	r2, #3
 8004c04:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004c06:	f7fe ff33 	bl	8003a70 <HAL_GetTick>
 8004c0a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c0c:	e029      	b.n	8004c62 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	f043 0210 	orr.w	r2, r3, #16
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c1e:	f043 0201 	orr.w	r2, r3, #1
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e023      	b.n	8004c72 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004c2a:	f7fe ff21 	bl	8003a70 <HAL_GetTick>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	68bb      	ldr	r3, [r7, #8]
 8004c32:	1ad3      	subs	r3, r2, r3
 8004c34:	2b02      	cmp	r3, #2
 8004c36:	d914      	bls.n	8004c62 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00d      	beq.n	8004c62 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c4a:	f043 0210 	orr.w	r2, r3, #16
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c56:	f043 0201 	orr.w	r2, r3, #1
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e007      	b.n	8004c72 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f003 0301 	and.w	r3, r3, #1
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1dc      	bne.n	8004c2a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3710      	adds	r7, #16
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b084      	sub	sp, #16
 8004c7e:	af00      	add	r7, sp, #0
 8004c80:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d14b      	bne.n	8004d2c <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c98:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f003 0308 	and.w	r3, r3, #8
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d021      	beq.n	8004cf2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe ff92 	bl	8003bdc <LL_ADC_REG_IsTriggerSourceSWStart>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d032      	beq.n	8004d24 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d12b      	bne.n	8004d24 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d11f      	bne.n	8004d24 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce8:	f043 0201 	orr.w	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	655a      	str	r2, [r3, #84]	; 0x54
 8004cf0:	e018      	b.n	8004d24 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f003 0303 	and.w	r3, r3, #3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d111      	bne.n	8004d24 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d04:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1c:	f043 0201 	orr.w	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff fb45 	bl	80043b4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004d2a:	e00e      	b.n	8004d4a <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d30:	f003 0310 	and.w	r3, r3, #16
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d003      	beq.n	8004d40 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f7ff fb4f 	bl	80043dc <HAL_ADC_ErrorCallback>
}
 8004d3e:	e004      	b.n	8004d4a <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	4798      	blx	r3
}
 8004d4a:	bf00      	nop
 8004d4c:	3710      	adds	r7, #16
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}

08004d52 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d52:	b580      	push	{r7, lr}
 8004d54:	b084      	sub	sp, #16
 8004d56:	af00      	add	r7, sp, #0
 8004d58:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d5e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d60:	68f8      	ldr	r0, [r7, #12]
 8004d62:	f7ff fb31 	bl	80043c8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d66:	bf00      	nop
 8004d68:	3710      	adds	r7, #16
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}

08004d6e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d6e:	b580      	push	{r7, lr}
 8004d70:	b084      	sub	sp, #16
 8004d72:	af00      	add	r7, sp, #0
 8004d74:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d80:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d8c:	f043 0204 	orr.w	r2, r3, #4
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d94:	68f8      	ldr	r0, [r7, #12]
 8004d96:	f7ff fb21 	bl	80043dc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d9a:	bf00      	nop
 8004d9c:	3710      	adds	r7, #16
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	bd80      	pop	{r7, pc}
	...

08004da4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a7a      	ldr	r2, [pc, #488]	; (8004f9c <ADC_ConfigureBoostMode+0x1f8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d004      	beq.n	8004dc0 <ADC_ConfigureBoostMode+0x1c>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a79      	ldr	r2, [pc, #484]	; (8004fa0 <ADC_ConfigureBoostMode+0x1fc>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d109      	bne.n	8004dd4 <ADC_ConfigureBoostMode+0x30>
 8004dc0:	4b78      	ldr	r3, [pc, #480]	; (8004fa4 <ADC_ConfigureBoostMode+0x200>)
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bf14      	ite	ne
 8004dcc:	2301      	movne	r3, #1
 8004dce:	2300      	moveq	r3, #0
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	e008      	b.n	8004de6 <ADC_ConfigureBoostMode+0x42>
 8004dd4:	4b74      	ldr	r3, [pc, #464]	; (8004fa8 <ADC_ConfigureBoostMode+0x204>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	bf14      	ite	ne
 8004de0:	2301      	movne	r3, #1
 8004de2:	2300      	moveq	r3, #0
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d01c      	beq.n	8004e24 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004dea:	f005 fd57 	bl	800a89c <HAL_RCC_GetHCLKFreq>
 8004dee:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	685b      	ldr	r3, [r3, #4]
 8004df4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004df8:	d010      	beq.n	8004e1c <ADC_ConfigureBoostMode+0x78>
 8004dfa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dfe:	d873      	bhi.n	8004ee8 <ADC_ConfigureBoostMode+0x144>
 8004e00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e04:	d002      	beq.n	8004e0c <ADC_ConfigureBoostMode+0x68>
 8004e06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004e0a:	d16d      	bne.n	8004ee8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e18:	60fb      	str	r3, [r7, #12]
        break;
 8004e1a:	e068      	b.n	8004eee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	089b      	lsrs	r3, r3, #2
 8004e20:	60fb      	str	r3, [r7, #12]
        break;
 8004e22:	e064      	b.n	8004eee <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004e24:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004e28:	f04f 0100 	mov.w	r1, #0
 8004e2c:	f006 ffde 	bl	800bdec <HAL_RCCEx_GetPeriphCLKFreq>
 8004e30:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	685b      	ldr	r3, [r3, #4]
 8004e36:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e3a:	d051      	beq.n	8004ee0 <ADC_ConfigureBoostMode+0x13c>
 8004e3c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004e40:	d854      	bhi.n	8004eec <ADC_ConfigureBoostMode+0x148>
 8004e42:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e46:	d047      	beq.n	8004ed8 <ADC_ConfigureBoostMode+0x134>
 8004e48:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e4c:	d84e      	bhi.n	8004eec <ADC_ConfigureBoostMode+0x148>
 8004e4e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e52:	d03d      	beq.n	8004ed0 <ADC_ConfigureBoostMode+0x12c>
 8004e54:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e58:	d848      	bhi.n	8004eec <ADC_ConfigureBoostMode+0x148>
 8004e5a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e5e:	d033      	beq.n	8004ec8 <ADC_ConfigureBoostMode+0x124>
 8004e60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e64:	d842      	bhi.n	8004eec <ADC_ConfigureBoostMode+0x148>
 8004e66:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e6a:	d029      	beq.n	8004ec0 <ADC_ConfigureBoostMode+0x11c>
 8004e6c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e70:	d83c      	bhi.n	8004eec <ADC_ConfigureBoostMode+0x148>
 8004e72:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e76:	d01a      	beq.n	8004eae <ADC_ConfigureBoostMode+0x10a>
 8004e78:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e7c:	d836      	bhi.n	8004eec <ADC_ConfigureBoostMode+0x148>
 8004e7e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e82:	d014      	beq.n	8004eae <ADC_ConfigureBoostMode+0x10a>
 8004e84:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e88:	d830      	bhi.n	8004eec <ADC_ConfigureBoostMode+0x148>
 8004e8a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e8e:	d00e      	beq.n	8004eae <ADC_ConfigureBoostMode+0x10a>
 8004e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e94:	d82a      	bhi.n	8004eec <ADC_ConfigureBoostMode+0x148>
 8004e96:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e9a:	d008      	beq.n	8004eae <ADC_ConfigureBoostMode+0x10a>
 8004e9c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004ea0:	d824      	bhi.n	8004eec <ADC_ConfigureBoostMode+0x148>
 8004ea2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ea6:	d002      	beq.n	8004eae <ADC_ConfigureBoostMode+0x10a>
 8004ea8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004eac:	d11e      	bne.n	8004eec <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	0c9b      	lsrs	r3, r3, #18
 8004eb4:	005b      	lsls	r3, r3, #1
 8004eb6:	68fa      	ldr	r2, [r7, #12]
 8004eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ebc:	60fb      	str	r3, [r7, #12]
        break;
 8004ebe:	e016      	b.n	8004eee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	091b      	lsrs	r3, r3, #4
 8004ec4:	60fb      	str	r3, [r7, #12]
        break;
 8004ec6:	e012      	b.n	8004eee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	60fb      	str	r3, [r7, #12]
        break;
 8004ece:	e00e      	b.n	8004eee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	099b      	lsrs	r3, r3, #6
 8004ed4:	60fb      	str	r3, [r7, #12]
        break;
 8004ed6:	e00a      	b.n	8004eee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	09db      	lsrs	r3, r3, #7
 8004edc:	60fb      	str	r3, [r7, #12]
        break;
 8004ede:	e006      	b.n	8004eee <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	0a1b      	lsrs	r3, r3, #8
 8004ee4:	60fb      	str	r3, [r7, #12]
        break;
 8004ee6:	e002      	b.n	8004eee <ADC_ConfigureBoostMode+0x14a>
        break;
 8004ee8:	bf00      	nop
 8004eea:	e000      	b.n	8004eee <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004eec:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004eee:	f7fe fdcb 	bl	8003a88 <HAL_GetREVID>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	f241 0203 	movw	r2, #4099	; 0x1003
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d815      	bhi.n	8004f28 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4a2b      	ldr	r2, [pc, #172]	; (8004fac <ADC_ConfigureBoostMode+0x208>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d908      	bls.n	8004f16 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	689a      	ldr	r2, [r3, #8]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f12:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004f14:	e03e      	b.n	8004f94 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	689a      	ldr	r2, [r3, #8]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f24:	609a      	str	r2, [r3, #8]
}
 8004f26:	e035      	b.n	8004f94 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	085b      	lsrs	r3, r3, #1
 8004f2c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	4a1f      	ldr	r2, [pc, #124]	; (8004fb0 <ADC_ConfigureBoostMode+0x20c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d808      	bhi.n	8004f48 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	689a      	ldr	r2, [r3, #8]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f44:	609a      	str	r2, [r3, #8]
}
 8004f46:	e025      	b.n	8004f94 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	4a1a      	ldr	r2, [pc, #104]	; (8004fb4 <ADC_ConfigureBoostMode+0x210>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d80a      	bhi.n	8004f66 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	e016      	b.n	8004f94 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4a13      	ldr	r2, [pc, #76]	; (8004fb8 <ADC_ConfigureBoostMode+0x214>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d80a      	bhi.n	8004f84 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f80:	609a      	str	r2, [r3, #8]
}
 8004f82:	e007      	b.n	8004f94 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	689a      	ldr	r2, [r3, #8]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	40022000 	.word	0x40022000
 8004fa0:	40022100 	.word	0x40022100
 8004fa4:	40022300 	.word	0x40022300
 8004fa8:	58026300 	.word	0x58026300
 8004fac:	01312d00 	.word	0x01312d00
 8004fb0:	005f5e10 	.word	0x005f5e10
 8004fb4:	00bebc20 	.word	0x00bebc20
 8004fb8:	017d7840 	.word	0x017d7840

08004fbc <LL_ADC_IsEnabled>:
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	f003 0301 	and.w	r3, r3, #1
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <LL_ADC_IsEnabled+0x18>
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	e000      	b.n	8004fd6 <LL_ADC_IsEnabled+0x1a>
 8004fd4:	2300      	movs	r3, #0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <LL_ADC_StartCalibration>:
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	4b09      	ldr	r3, [pc, #36]	; (800501c <LL_ADC_StartCalibration+0x38>)
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005004:	430a      	orrs	r2, r1
 8005006:	4313      	orrs	r3, r2
 8005008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	609a      	str	r2, [r3, #8]
}
 8005010:	bf00      	nop
 8005012:	3714      	adds	r7, #20
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	3ffeffc0 	.word	0x3ffeffc0

08005020 <LL_ADC_IsCalibrationOnGoing>:
{
 8005020:	b480      	push	{r7}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005030:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005034:	d101      	bne.n	800503a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005036:	2301      	movs	r3, #1
 8005038:	e000      	b.n	800503c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <LL_ADC_REG_IsConversionOngoing>:
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	f003 0304 	and.w	r3, r3, #4
 8005058:	2b04      	cmp	r3, #4
 800505a:	d101      	bne.n	8005060 <LL_ADC_REG_IsConversionOngoing+0x18>
 800505c:	2301      	movs	r3, #1
 800505e:	e000      	b.n	8005062 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005060:	2300      	movs	r3, #0
}
 8005062:	4618      	mov	r0, r3
 8005064:	370c      	adds	r7, #12
 8005066:	46bd      	mov	sp, r7
 8005068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506c:	4770      	bx	lr
	...

08005070 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b086      	sub	sp, #24
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800507c:	2300      	movs	r3, #0
 800507e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005086:	2b01      	cmp	r3, #1
 8005088:	d101      	bne.n	800508e <HAL_ADCEx_Calibration_Start+0x1e>
 800508a:	2302      	movs	r3, #2
 800508c:	e04c      	b.n	8005128 <HAL_ADCEx_Calibration_Start+0xb8>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005096:	68f8      	ldr	r0, [r7, #12]
 8005098:	f7ff fd90 	bl	8004bbc <ADC_Disable>
 800509c:	4603      	mov	r3, r0
 800509e:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80050a0:	7dfb      	ldrb	r3, [r7, #23]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d135      	bne.n	8005112 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80050aa:	4b21      	ldr	r3, [pc, #132]	; (8005130 <HAL_ADCEx_Calibration_Start+0xc0>)
 80050ac:	4013      	ands	r3, r2
 80050ae:	f043 0202 	orr.w	r2, r3, #2
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	687a      	ldr	r2, [r7, #4]
 80050bc:	68b9      	ldr	r1, [r7, #8]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7ff ff90 	bl	8004fe4 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80050c4:	e014      	b.n	80050f0 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	3301      	adds	r3, #1
 80050ca:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80050cc:	693b      	ldr	r3, [r7, #16]
 80050ce:	4a19      	ldr	r2, [pc, #100]	; (8005134 <HAL_ADCEx_Calibration_Start+0xc4>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d30d      	bcc.n	80050f0 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d8:	f023 0312 	bic.w	r3, r3, #18
 80050dc:	f043 0210 	orr.w	r2, r3, #16
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e01b      	b.n	8005128 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4618      	mov	r0, r3
 80050f6:	f7ff ff93 	bl	8005020 <LL_ADC_IsCalibrationOnGoing>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1e2      	bne.n	80050c6 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	f023 0303 	bic.w	r3, r3, #3
 8005108:	f043 0201 	orr.w	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	655a      	str	r2, [r3, #84]	; 0x54
 8005110:	e005      	b.n	800511e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005116:	f043 0210 	orr.w	r2, r3, #16
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005126:	7dfb      	ldrb	r3, [r7, #23]
}
 8005128:	4618      	mov	r0, r3
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	ffffeefd 	.word	0xffffeefd
 8005134:	25c3f800 	.word	0x25c3f800

08005138 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8005138:	b590      	push	{r4, r7, lr}
 800513a:	b09f      	sub	sp, #124	; 0x7c
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800514e:	2b01      	cmp	r3, #1
 8005150:	d101      	bne.n	8005156 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8005152:	2302      	movs	r3, #2
 8005154:	e0be      	b.n	80052d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2201      	movs	r2, #1
 800515a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800515e:	2300      	movs	r3, #0
 8005160:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8005162:	2300      	movs	r3, #0
 8005164:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a5c      	ldr	r2, [pc, #368]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d102      	bne.n	8005176 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8005170:	4b5b      	ldr	r3, [pc, #364]	; (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005172:	60bb      	str	r3, [r7, #8]
 8005174:	e001      	b.n	800517a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005176:	2300      	movs	r3, #0
 8005178:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d10b      	bne.n	8005198 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005184:	f043 0220 	orr.w	r2, r3, #32
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005194:	2301      	movs	r3, #1
 8005196:	e09d      	b.n	80052d4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	4618      	mov	r0, r3
 800519c:	f7ff ff54 	bl	8005048 <LL_ADC_REG_IsConversionOngoing>
 80051a0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff ff4e 	bl	8005048 <LL_ADC_REG_IsConversionOngoing>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d17f      	bne.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80051b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d17c      	bne.n	80052b2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a47      	ldr	r2, [pc, #284]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a46      	ldr	r2, [pc, #280]	; (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d101      	bne.n	80051d0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80051cc:	4b45      	ldr	r3, [pc, #276]	; (80052e4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80051ce:	e000      	b.n	80051d2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80051d0:	4b45      	ldr	r3, [pc, #276]	; (80052e8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80051d2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d039      	beq.n	8005250 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80051dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	431a      	orrs	r2, r3
 80051ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051ec:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	4a3a      	ldr	r2, [pc, #232]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d004      	beq.n	8005202 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a38      	ldr	r2, [pc, #224]	; (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d10e      	bne.n	8005220 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8005202:	4836      	ldr	r0, [pc, #216]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005204:	f7ff feda 	bl	8004fbc <LL_ADC_IsEnabled>
 8005208:	4604      	mov	r4, r0
 800520a:	4835      	ldr	r0, [pc, #212]	; (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800520c:	f7ff fed6 	bl	8004fbc <LL_ADC_IsEnabled>
 8005210:	4603      	mov	r3, r0
 8005212:	4323      	orrs	r3, r4
 8005214:	2b00      	cmp	r3, #0
 8005216:	bf0c      	ite	eq
 8005218:	2301      	moveq	r3, #1
 800521a:	2300      	movne	r3, #0
 800521c:	b2db      	uxtb	r3, r3
 800521e:	e008      	b.n	8005232 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8005220:	4832      	ldr	r0, [pc, #200]	; (80052ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005222:	f7ff fecb 	bl	8004fbc <LL_ADC_IsEnabled>
 8005226:	4603      	mov	r3, r0
 8005228:	2b00      	cmp	r3, #0
 800522a:	bf0c      	ite	eq
 800522c:	2301      	moveq	r3, #1
 800522e:	2300      	movne	r3, #0
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d047      	beq.n	80052c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8005236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005238:	689a      	ldr	r2, [r3, #8]
 800523a:	4b2d      	ldr	r3, [pc, #180]	; (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 800523c:	4013      	ands	r3, r2
 800523e:	683a      	ldr	r2, [r7, #0]
 8005240:	6811      	ldr	r1, [r2, #0]
 8005242:	683a      	ldr	r2, [r7, #0]
 8005244:	6892      	ldr	r2, [r2, #8]
 8005246:	430a      	orrs	r2, r1
 8005248:	431a      	orrs	r2, r3
 800524a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800524e:	e03a      	b.n	80052c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8005250:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d004      	beq.n	8005270 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a1d      	ldr	r2, [pc, #116]	; (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d10e      	bne.n	800528e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8005270:	481a      	ldr	r0, [pc, #104]	; (80052dc <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005272:	f7ff fea3 	bl	8004fbc <LL_ADC_IsEnabled>
 8005276:	4604      	mov	r4, r0
 8005278:	4819      	ldr	r0, [pc, #100]	; (80052e0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800527a:	f7ff fe9f 	bl	8004fbc <LL_ADC_IsEnabled>
 800527e:	4603      	mov	r3, r0
 8005280:	4323      	orrs	r3, r4
 8005282:	2b00      	cmp	r3, #0
 8005284:	bf0c      	ite	eq
 8005286:	2301      	moveq	r3, #1
 8005288:	2300      	movne	r3, #0
 800528a:	b2db      	uxtb	r3, r3
 800528c:	e008      	b.n	80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800528e:	4817      	ldr	r0, [pc, #92]	; (80052ec <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8005290:	f7ff fe94 	bl	8004fbc <LL_ADC_IsEnabled>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d010      	beq.n	80052c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80052a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052a6:	689a      	ldr	r2, [r3, #8]
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80052ae:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052b0:	e009      	b.n	80052c6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052b6:	f043 0220 	orr.w	r2, r3, #32
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80052c4:	e000      	b.n	80052c8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80052c6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2200      	movs	r2, #0
 80052cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80052d0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	377c      	adds	r7, #124	; 0x7c
 80052d8:	46bd      	mov	sp, r7
 80052da:	bd90      	pop	{r4, r7, pc}
 80052dc:	40022000 	.word	0x40022000
 80052e0:	40022100 	.word	0x40022100
 80052e4:	40022300 	.word	0x40022300
 80052e8:	58026300 	.word	0x58026300
 80052ec:	58026000 	.word	0x58026000
 80052f0:	fffff0e0 	.word	0xfffff0e0

080052f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052f4:	b480      	push	{r7}
 80052f6:	b085      	sub	sp, #20
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005304:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <__NVIC_SetPriorityGrouping+0x40>)
 8005306:	68db      	ldr	r3, [r3, #12]
 8005308:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005310:	4013      	ands	r3, r2
 8005312:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800531c:	4b06      	ldr	r3, [pc, #24]	; (8005338 <__NVIC_SetPriorityGrouping+0x44>)
 800531e:	4313      	orrs	r3, r2
 8005320:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005322:	4a04      	ldr	r2, [pc, #16]	; (8005334 <__NVIC_SetPriorityGrouping+0x40>)
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	60d3      	str	r3, [r2, #12]
}
 8005328:	bf00      	nop
 800532a:	3714      	adds	r7, #20
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr
 8005334:	e000ed00 	.word	0xe000ed00
 8005338:	05fa0000 	.word	0x05fa0000

0800533c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <__NVIC_GetPriorityGrouping+0x18>)
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	0a1b      	lsrs	r3, r3, #8
 8005346:	f003 0307 	and.w	r3, r3, #7
}
 800534a:	4618      	mov	r0, r3
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr
 8005354:	e000ed00 	.word	0xe000ed00

08005358 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	4603      	mov	r3, r0
 8005360:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005362:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005366:	2b00      	cmp	r3, #0
 8005368:	db0b      	blt.n	8005382 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800536a:	88fb      	ldrh	r3, [r7, #6]
 800536c:	f003 021f 	and.w	r2, r3, #31
 8005370:	4907      	ldr	r1, [pc, #28]	; (8005390 <__NVIC_EnableIRQ+0x38>)
 8005372:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005376:	095b      	lsrs	r3, r3, #5
 8005378:	2001      	movs	r0, #1
 800537a:	fa00 f202 	lsl.w	r2, r0, r2
 800537e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005382:	bf00      	nop
 8005384:	370c      	adds	r7, #12
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop
 8005390:	e000e100 	.word	0xe000e100

08005394 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	4603      	mov	r3, r0
 800539c:	6039      	str	r1, [r7, #0]
 800539e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80053a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	db0a      	blt.n	80053be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	490c      	ldr	r1, [pc, #48]	; (80053e0 <__NVIC_SetPriority+0x4c>)
 80053ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80053b2:	0112      	lsls	r2, r2, #4
 80053b4:	b2d2      	uxtb	r2, r2
 80053b6:	440b      	add	r3, r1
 80053b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053bc:	e00a      	b.n	80053d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	b2da      	uxtb	r2, r3
 80053c2:	4908      	ldr	r1, [pc, #32]	; (80053e4 <__NVIC_SetPriority+0x50>)
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	f003 030f 	and.w	r3, r3, #15
 80053ca:	3b04      	subs	r3, #4
 80053cc:	0112      	lsls	r2, r2, #4
 80053ce:	b2d2      	uxtb	r2, r2
 80053d0:	440b      	add	r3, r1
 80053d2:	761a      	strb	r2, [r3, #24]
}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	e000e100 	.word	0xe000e100
 80053e4:	e000ed00 	.word	0xe000ed00

080053e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b089      	sub	sp, #36	; 0x24
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	f1c3 0307 	rsb	r3, r3, #7
 8005402:	2b04      	cmp	r3, #4
 8005404:	bf28      	it	cs
 8005406:	2304      	movcs	r3, #4
 8005408:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	3304      	adds	r3, #4
 800540e:	2b06      	cmp	r3, #6
 8005410:	d902      	bls.n	8005418 <NVIC_EncodePriority+0x30>
 8005412:	69fb      	ldr	r3, [r7, #28]
 8005414:	3b03      	subs	r3, #3
 8005416:	e000      	b.n	800541a <NVIC_EncodePriority+0x32>
 8005418:	2300      	movs	r3, #0
 800541a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800541c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	fa02 f303 	lsl.w	r3, r2, r3
 8005426:	43da      	mvns	r2, r3
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	401a      	ands	r2, r3
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	fa01 f303 	lsl.w	r3, r1, r3
 800543a:	43d9      	mvns	r1, r3
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005440:	4313      	orrs	r3, r2
         );
}
 8005442:	4618      	mov	r0, r3
 8005444:	3724      	adds	r7, #36	; 0x24
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b082      	sub	sp, #8
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f7ff ff4c 	bl	80052f4 <__NVIC_SetPriorityGrouping>
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
 800546a:	4603      	mov	r3, r0
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
 8005470:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005472:	f7ff ff63 	bl	800533c <__NVIC_GetPriorityGrouping>
 8005476:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	68b9      	ldr	r1, [r7, #8]
 800547c:	6978      	ldr	r0, [r7, #20]
 800547e:	f7ff ffb3 	bl	80053e8 <NVIC_EncodePriority>
 8005482:	4602      	mov	r2, r0
 8005484:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005488:	4611      	mov	r1, r2
 800548a:	4618      	mov	r0, r3
 800548c:	f7ff ff82 	bl	8005394 <__NVIC_SetPriority>
}
 8005490:	bf00      	nop
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7ff ff56 	bl	8005358 <__NVIC_EnableIRQ>
}
 80054ac:	bf00      	nop
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e014      	b.n	80054f0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	791b      	ldrb	r3, [r3, #4]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d105      	bne.n	80054dc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2200      	movs	r2, #0
 80054d4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fd fc76 	bl	8002dc8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
 8005500:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d101      	bne.n	800550c <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e046      	b.n	800559a <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	795b      	ldrb	r3, [r3, #5]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_DAC_Start+0x20>
 8005514:	2302      	movs	r3, #2
 8005516:	e040      	b.n	800559a <HAL_DAC_Start+0xa2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2202      	movs	r2, #2
 8005522:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6819      	ldr	r1, [r3, #0]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	f003 0310 	and.w	r3, r3, #16
 8005530:	2201      	movs	r2, #1
 8005532:	409a      	lsls	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d10f      	bne.n	8005562 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800554c:	2b02      	cmp	r3, #2
 800554e:	d11d      	bne.n	800558c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	685a      	ldr	r2, [r3, #4]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0201 	orr.w	r2, r2, #1
 800555e:	605a      	str	r2, [r3, #4]
 8005560:	e014      	b.n	800558c <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	f003 0310 	and.w	r3, r3, #16
 8005572:	2102      	movs	r1, #2
 8005574:	fa01 f303 	lsl.w	r3, r1, r3
 8005578:	429a      	cmp	r2, r3
 800557a:	d107      	bne.n	800558c <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f042 0202 	orr.w	r2, r2, #2
 800558a:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2201      	movs	r2, #1
 8005590:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005598:	2300      	movs	r3, #0
}
 800559a:	4618      	mov	r0, r3
 800559c:	370c      	adds	r7, #12
 800559e:	46bd      	mov	sp, r7
 80055a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a4:	4770      	bx	lr
	...

080055a8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b086      	sub	sp, #24
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d101      	bne.n	80055c0 <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0a2      	b.n	8005706 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	795b      	ldrb	r3, [r3, #5]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d101      	bne.n	80055cc <HAL_DAC_Start_DMA+0x24>
 80055c8:	2302      	movs	r3, #2
 80055ca:	e09c      	b.n	8005706 <HAL_DAC_Start_DMA+0x15e>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2201      	movs	r2, #1
 80055d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2202      	movs	r2, #2
 80055d6:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d129      	bne.n	8005632 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	4a4b      	ldr	r2, [pc, #300]	; (8005710 <HAL_DAC_Start_DMA+0x168>)
 80055e4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	4a4a      	ldr	r2, [pc, #296]	; (8005714 <HAL_DAC_Start_DMA+0x16c>)
 80055ec:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	4a49      	ldr	r2, [pc, #292]	; (8005718 <HAL_DAC_Start_DMA+0x170>)
 80055f4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005604:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005606:	6a3b      	ldr	r3, [r7, #32]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d003      	beq.n	8005614 <HAL_DAC_Start_DMA+0x6c>
 800560c:	6a3b      	ldr	r3, [r7, #32]
 800560e:	2b04      	cmp	r3, #4
 8005610:	d005      	beq.n	800561e <HAL_DAC_Start_DMA+0x76>
 8005612:	e009      	b.n	8005628 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	3308      	adds	r3, #8
 800561a:	613b      	str	r3, [r7, #16]
        break;
 800561c:	e033      	b.n	8005686 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	330c      	adds	r3, #12
 8005624:	613b      	str	r3, [r7, #16]
        break;
 8005626:	e02e      	b.n	8005686 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	3310      	adds	r3, #16
 800562e:	613b      	str	r3, [r7, #16]
        break;
 8005630:	e029      	b.n	8005686 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	4a39      	ldr	r2, [pc, #228]	; (800571c <HAL_DAC_Start_DMA+0x174>)
 8005638:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	4a38      	ldr	r2, [pc, #224]	; (8005720 <HAL_DAC_Start_DMA+0x178>)
 8005640:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	4a37      	ldr	r2, [pc, #220]	; (8005724 <HAL_DAC_Start_DMA+0x17c>)
 8005648:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005658:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d003      	beq.n	8005668 <HAL_DAC_Start_DMA+0xc0>
 8005660:	6a3b      	ldr	r3, [r7, #32]
 8005662:	2b04      	cmp	r3, #4
 8005664:	d005      	beq.n	8005672 <HAL_DAC_Start_DMA+0xca>
 8005666:	e009      	b.n	800567c <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	3314      	adds	r3, #20
 800566e:	613b      	str	r3, [r7, #16]
        break;
 8005670:	e009      	b.n	8005686 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3318      	adds	r3, #24
 8005678:	613b      	str	r3, [r7, #16]
        break;
 800567a:	e004      	b.n	8005686 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	331c      	adds	r3, #28
 8005682:	613b      	str	r3, [r7, #16]
        break;
 8005684:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d111      	bne.n	80056b0 <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681a      	ldr	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800569a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	6898      	ldr	r0, [r3, #8]
 80056a0:	6879      	ldr	r1, [r7, #4]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	693a      	ldr	r2, [r7, #16]
 80056a6:	f000 fe67 	bl	8006378 <HAL_DMA_Start_IT>
 80056aa:	4603      	mov	r3, r0
 80056ac:	75fb      	strb	r3, [r7, #23]
 80056ae:	e010      	b.n	80056d2 <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80056be:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68d8      	ldr	r0, [r3, #12]
 80056c4:	6879      	ldr	r1, [r7, #4]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	f000 fe55 	bl	8006378 <HAL_DMA_Start_IT>
 80056ce:	4603      	mov	r3, r0
 80056d0:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2200      	movs	r2, #0
 80056d6:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80056d8:	7dfb      	ldrb	r3, [r7, #23]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10c      	bne.n	80056f8 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6819      	ldr	r1, [r3, #0]
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f003 0310 	and.w	r3, r3, #16
 80056ea:	2201      	movs	r2, #1
 80056ec:	409a      	lsls	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	430a      	orrs	r2, r1
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	e005      	b.n	8005704 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f043 0204 	orr.w	r2, r3, #4
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8005704:	7dfb      	ldrb	r3, [r7, #23]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3718      	adds	r7, #24
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	08005b99 	.word	0x08005b99
 8005714:	08005bbb 	.word	0x08005bbb
 8005718:	08005bd7 	.word	0x08005bd7
 800571c:	08005c55 	.word	0x08005c55
 8005720:	08005c77 	.word	0x08005c77
 8005724:	08005c93 	.word	0x08005c93

08005728 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d101      	bne.n	800573c <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	e03e      	b.n	80057ba <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	6819      	ldr	r1, [r3, #0]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	f003 0310 	and.w	r3, r3, #16
 8005748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800574c:	fa02 f303 	lsl.w	r3, r2, r3
 8005750:	43da      	mvns	r2, r3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	400a      	ands	r2, r1
 8005758:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6819      	ldr	r1, [r3, #0]
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	f003 0310 	and.w	r3, r3, #16
 8005766:	2201      	movs	r2, #1
 8005768:	fa02 f303 	lsl.w	r3, r2, r3
 800576c:	43da      	mvns	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	400a      	ands	r2, r1
 8005774:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d10d      	bne.n	8005798 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	4618      	mov	r0, r3
 8005782:	f001 f863 	bl	800684c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	e00c      	b.n	80057b2 <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	4618      	mov	r0, r3
 800579e:	f001 f855 	bl	800684c <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80057b0:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 80057c2:	b580      	push	{r7, lr}
 80057c4:	b084      	sub	sp, #16
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057d8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d01d      	beq.n	8005820 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d018      	beq.n	8005820 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2204      	movs	r2, #4
 80057f2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	691b      	ldr	r3, [r3, #16]
 80057f8:	f043 0201 	orr.w	r2, r3, #1
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005808:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005818:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 f86f 	bl	80058fe <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01d      	beq.n	8005866 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d018      	beq.n	8005866 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2204      	movs	r2, #4
 8005838:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	691b      	ldr	r3, [r3, #16]
 800583e:	f043 0202 	orr.w	r2, r3, #2
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800584e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800585e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f9ed 	bl	8005c40 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}

0800586e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800586e:	b480      	push	{r7}
 8005870:	b087      	sub	sp, #28
 8005872:	af00      	add	r7, sp, #0
 8005874:	60f8      	str	r0, [r7, #12]
 8005876:	60b9      	str	r1, [r7, #8]
 8005878:	607a      	str	r2, [r7, #4]
 800587a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800587c:	2300      	movs	r3, #0
 800587e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d101      	bne.n	800588a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005886:	2301      	movs	r3, #1
 8005888:	e015      	b.n	80058b6 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d105      	bne.n	80058a2 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4413      	add	r3, r2
 800589c:	3308      	adds	r3, #8
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	e004      	b.n	80058ac <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80058a2:	697a      	ldr	r2, [r7, #20]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4413      	add	r3, r2
 80058a8:	3314      	adds	r3, #20
 80058aa:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	461a      	mov	r2, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80058b4:	2300      	movs	r3, #0
}
 80058b6:	4618      	mov	r0, r3
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80058ca:	bf00      	nop
 80058cc:	370c      	adds	r7, #12
 80058ce:	46bd      	mov	sp, r7
 80058d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d4:	4770      	bx	lr

080058d6 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058d6:	b480      	push	{r7}
 80058d8:	b083      	sub	sp, #12
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80058de:	bf00      	nop
 80058e0:	370c      	adds	r7, #12
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058fe:	b480      	push	{r7}
 8005900:	b083      	sub	sp, #12
 8005902:	af00      	add	r7, sp, #0
 8005904:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005906:	bf00      	nop
 8005908:	370c      	adds	r7, #12
 800590a:	46bd      	mov	sp, r7
 800590c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005910:	4770      	bx	lr
	...

08005914 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b08a      	sub	sp, #40	; 0x28
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005920:	2300      	movs	r3, #0
 8005922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d002      	beq.n	8005932 <HAL_DAC_ConfigChannel+0x1e>
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d101      	bne.n	8005936 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e12a      	b.n	8005b8c <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	795b      	ldrb	r3, [r3, #5]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d101      	bne.n	8005942 <HAL_DAC_ConfigChannel+0x2e>
 800593e:	2302      	movs	r3, #2
 8005940:	e124      	b.n	8005b8c <HAL_DAC_ConfigChannel+0x278>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2201      	movs	r2, #1
 8005946:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2202      	movs	r2, #2
 800594c:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b04      	cmp	r3, #4
 8005954:	d17a      	bne.n	8005a4c <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005956:	f7fe f88b 	bl	8003a70 <HAL_GetTick>
 800595a:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d13d      	bne.n	80059de <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005962:	e018      	b.n	8005996 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005964:	f7fe f884 	bl	8003a70 <HAL_GetTick>
 8005968:	4602      	mov	r2, r0
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	1ad3      	subs	r3, r2, r3
 800596e:	2b01      	cmp	r3, #1
 8005970:	d911      	bls.n	8005996 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005978:	4b86      	ldr	r3, [pc, #536]	; (8005b94 <HAL_DAC_ConfigChannel+0x280>)
 800597a:	4013      	ands	r3, r2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d00a      	beq.n	8005996 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	f043 0208 	orr.w	r2, r3, #8
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2203      	movs	r2, #3
 8005990:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005992:	2303      	movs	r3, #3
 8005994:	e0fa      	b.n	8005b8c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800599c:	4b7d      	ldr	r3, [pc, #500]	; (8005b94 <HAL_DAC_ConfigChannel+0x280>)
 800599e:	4013      	ands	r3, r2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d1df      	bne.n	8005964 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	6992      	ldr	r2, [r2, #24]
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
 80059ae:	e020      	b.n	80059f2 <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059b0:	f7fe f85e 	bl	8003a70 <HAL_GetTick>
 80059b4:	4602      	mov	r2, r0
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d90f      	bls.n	80059de <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	da0a      	bge.n	80059de <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	691b      	ldr	r3, [r3, #16]
 80059cc:	f043 0208 	orr.w	r2, r3, #8
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2203      	movs	r2, #3
 80059d8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80059da:	2303      	movs	r3, #3
 80059dc:	e0d6      	b.n	8005b8c <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	dbe3      	blt.n	80059b0 <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68ba      	ldr	r2, [r7, #8]
 80059ee:	6992      	ldr	r2, [r2, #24]
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a02:	fa01 f303 	lsl.w	r3, r1, r3
 8005a06:	43db      	mvns	r3, r3
 8005a08:	ea02 0103 	and.w	r1, r2, r3
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	69da      	ldr	r2, [r3, #28]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f003 0310 	and.w	r3, r3, #16
 8005a16:	409a      	lsls	r2, r3
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f003 0310 	and.w	r3, r3, #16
 8005a2c:	21ff      	movs	r1, #255	; 0xff
 8005a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a32:	43db      	mvns	r3, r3
 8005a34:	ea02 0103 	and.w	r1, r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6a1a      	ldr	r2, [r3, #32]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f003 0310 	and.w	r3, r3, #16
 8005a42:	409a      	lsls	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	430a      	orrs	r2, r1
 8005a4a:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d11d      	bne.n	8005a90 <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a5a:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	221f      	movs	r2, #31
 8005a64:	fa02 f303 	lsl.w	r3, r2, r3
 8005a68:	43db      	mvns	r3, r3
 8005a6a:	69ba      	ldr	r2, [r7, #24]
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	69ba      	ldr	r2, [r7, #24]
 8005a84:	4313      	orrs	r3, r2
 8005a86:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	2207      	movs	r2, #7
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	43db      	mvns	r3, r3
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	4013      	ands	r3, r2
 8005aaa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d102      	bne.n	8005aba <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab8:	e00f      	b.n	8005ada <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005aba:	68bb      	ldr	r3, [r7, #8]
 8005abc:	68db      	ldr	r3, [r3, #12]
 8005abe:	2b02      	cmp	r3, #2
 8005ac0:	d102      	bne.n	8005ac8 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ac6:	e008      	b.n	8005ada <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d102      	bne.n	8005ad6 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ad4:	e001      	b.n	8005ada <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	689b      	ldr	r3, [r3, #8]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	fa02 f303 	lsl.w	r3, r2, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6819      	ldr	r1, [r3, #0]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f003 0310 	and.w	r3, r3, #16
 8005b10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b14:	fa02 f303 	lsl.w	r3, r2, r3
 8005b18:	43da      	mvns	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	400a      	ands	r2, r1
 8005b20:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005b34:	fa02 f303 	lsl.w	r3, r2, r3
 8005b38:	43db      	mvns	r3, r3
 8005b3a:	69ba      	ldr	r2, [r7, #24]
 8005b3c:	4013      	ands	r3, r2
 8005b3e:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f003 0310 	and.w	r3, r3, #16
 8005b4c:	697a      	ldr	r2, [r7, #20]
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	6819      	ldr	r1, [r3, #0]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f003 0310 	and.w	r3, r3, #16
 8005b6c:	22c0      	movs	r2, #192	; 0xc0
 8005b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b72:	43da      	mvns	r2, r3
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	400a      	ands	r2, r1
 8005b7a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	2200      	movs	r2, #0
 8005b86:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005b88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3728      	adds	r7, #40	; 0x28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	20008000 	.word	0x20008000

08005b98 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005ba6:	68f8      	ldr	r0, [r7, #12]
 8005ba8:	f7ff fe8b 	bl	80058c2 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	711a      	strb	r2, [r3, #4]
}
 8005bb2:	bf00      	nop
 8005bb4:	3710      	adds	r7, #16
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}

08005bba <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005bba:	b580      	push	{r7, lr}
 8005bbc:	b084      	sub	sp, #16
 8005bbe:	af00      	add	r7, sp, #0
 8005bc0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005bc8:	68f8      	ldr	r0, [r7, #12]
 8005bca:	f7ff fe84 	bl	80058d6 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005bce:	bf00      	nop
 8005bd0:	3710      	adds	r7, #16
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b084      	sub	sp, #16
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	691b      	ldr	r3, [r3, #16]
 8005be8:	f043 0204 	orr.w	r2, r3, #4
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f7ff fe7a 	bl	80058ea <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	711a      	strb	r2, [r3, #4]
}
 8005bfc:	bf00      	nop
 8005bfe:	3710      	adds	r7, #16
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005c0c:	bf00      	nop
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f7ff ffce 	bl	8005c04 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	711a      	strb	r2, [r3, #4]
}
 8005c6e:	bf00      	nop
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b084      	sub	sp, #16
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c82:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005c84:	68f8      	ldr	r0, [r7, #12]
 8005c86:	f7ff ffc7 	bl	8005c18 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005c8a:	bf00      	nop
 8005c8c:	3710      	adds	r7, #16
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	bd80      	pop	{r7, pc}

08005c92 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005c92:	b580      	push	{r7, lr}
 8005c94:	b084      	sub	sp, #16
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	f043 0204 	orr.w	r2, r3, #4
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f7ff ffbd 	bl	8005c2c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	711a      	strb	r2, [r3, #4]
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b086      	sub	sp, #24
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005cc8:	f7fd fed2 	bl	8003a70 <HAL_GetTick>
 8005ccc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d101      	bne.n	8005cd8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005cd4:	2301      	movs	r3, #1
 8005cd6:	e316      	b.n	8006306 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	4a66      	ldr	r2, [pc, #408]	; (8005e78 <HAL_DMA_Init+0x1b8>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d04a      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a65      	ldr	r2, [pc, #404]	; (8005e7c <HAL_DMA_Init+0x1bc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d045      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	4a63      	ldr	r2, [pc, #396]	; (8005e80 <HAL_DMA_Init+0x1c0>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d040      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a62      	ldr	r2, [pc, #392]	; (8005e84 <HAL_DMA_Init+0x1c4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d03b      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a60      	ldr	r2, [pc, #384]	; (8005e88 <HAL_DMA_Init+0x1c8>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d036      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a5f      	ldr	r2, [pc, #380]	; (8005e8c <HAL_DMA_Init+0x1cc>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d031      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a5d      	ldr	r2, [pc, #372]	; (8005e90 <HAL_DMA_Init+0x1d0>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d02c      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a5c      	ldr	r2, [pc, #368]	; (8005e94 <HAL_DMA_Init+0x1d4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d027      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a5a      	ldr	r2, [pc, #360]	; (8005e98 <HAL_DMA_Init+0x1d8>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d022      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a59      	ldr	r2, [pc, #356]	; (8005e9c <HAL_DMA_Init+0x1dc>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d01d      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a57      	ldr	r2, [pc, #348]	; (8005ea0 <HAL_DMA_Init+0x1e0>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d018      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a56      	ldr	r2, [pc, #344]	; (8005ea4 <HAL_DMA_Init+0x1e4>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d013      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a54      	ldr	r2, [pc, #336]	; (8005ea8 <HAL_DMA_Init+0x1e8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d00e      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a53      	ldr	r2, [pc, #332]	; (8005eac <HAL_DMA_Init+0x1ec>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d009      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a51      	ldr	r2, [pc, #324]	; (8005eb0 <HAL_DMA_Init+0x1f0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d004      	beq.n	8005d78 <HAL_DMA_Init+0xb8>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a50      	ldr	r2, [pc, #320]	; (8005eb4 <HAL_DMA_Init+0x1f4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d101      	bne.n	8005d7c <HAL_DMA_Init+0xbc>
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e000      	b.n	8005d7e <HAL_DMA_Init+0xbe>
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	f000 813b 	beq.w	8005ffa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a37      	ldr	r2, [pc, #220]	; (8005e78 <HAL_DMA_Init+0x1b8>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d04a      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a36      	ldr	r2, [pc, #216]	; (8005e7c <HAL_DMA_Init+0x1bc>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d045      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a34      	ldr	r2, [pc, #208]	; (8005e80 <HAL_DMA_Init+0x1c0>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d040      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a33      	ldr	r2, [pc, #204]	; (8005e84 <HAL_DMA_Init+0x1c4>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d03b      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a31      	ldr	r2, [pc, #196]	; (8005e88 <HAL_DMA_Init+0x1c8>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d036      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a30      	ldr	r2, [pc, #192]	; (8005e8c <HAL_DMA_Init+0x1cc>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d031      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a2e      	ldr	r2, [pc, #184]	; (8005e90 <HAL_DMA_Init+0x1d0>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d02c      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a2d      	ldr	r2, [pc, #180]	; (8005e94 <HAL_DMA_Init+0x1d4>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d027      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a2b      	ldr	r2, [pc, #172]	; (8005e98 <HAL_DMA_Init+0x1d8>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d022      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <HAL_DMA_Init+0x1dc>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d01d      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a28      	ldr	r2, [pc, #160]	; (8005ea0 <HAL_DMA_Init+0x1e0>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d018      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a27      	ldr	r2, [pc, #156]	; (8005ea4 <HAL_DMA_Init+0x1e4>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d013      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a25      	ldr	r2, [pc, #148]	; (8005ea8 <HAL_DMA_Init+0x1e8>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d00e      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a24      	ldr	r2, [pc, #144]	; (8005eac <HAL_DMA_Init+0x1ec>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d009      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a22      	ldr	r2, [pc, #136]	; (8005eb0 <HAL_DMA_Init+0x1f0>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d004      	beq.n	8005e34 <HAL_DMA_Init+0x174>
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <HAL_DMA_Init+0x1f4>)
 8005e30:	4293      	cmp	r3, r2
 8005e32:	d108      	bne.n	8005e46 <HAL_DMA_Init+0x186>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	681a      	ldr	r2, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	f022 0201 	bic.w	r2, r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
 8005e44:	e007      	b.n	8005e56 <HAL_DMA_Init+0x196>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f022 0201 	bic.w	r2, r2, #1
 8005e54:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e56:	e02f      	b.n	8005eb8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e58:	f7fd fe0a 	bl	8003a70 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b05      	cmp	r3, #5
 8005e64:	d928      	bls.n	8005eb8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2220      	movs	r2, #32
 8005e6a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2203      	movs	r2, #3
 8005e70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005e74:	2301      	movs	r3, #1
 8005e76:	e246      	b.n	8006306 <HAL_DMA_Init+0x646>
 8005e78:	40020010 	.word	0x40020010
 8005e7c:	40020028 	.word	0x40020028
 8005e80:	40020040 	.word	0x40020040
 8005e84:	40020058 	.word	0x40020058
 8005e88:	40020070 	.word	0x40020070
 8005e8c:	40020088 	.word	0x40020088
 8005e90:	400200a0 	.word	0x400200a0
 8005e94:	400200b8 	.word	0x400200b8
 8005e98:	40020410 	.word	0x40020410
 8005e9c:	40020428 	.word	0x40020428
 8005ea0:	40020440 	.word	0x40020440
 8005ea4:	40020458 	.word	0x40020458
 8005ea8:	40020470 	.word	0x40020470
 8005eac:	40020488 	.word	0x40020488
 8005eb0:	400204a0 	.word	0x400204a0
 8005eb4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 0301 	and.w	r3, r3, #1
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1c8      	bne.n	8005e58 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4b83      	ldr	r3, [pc, #524]	; (80060e0 <HAL_DMA_Init+0x420>)
 8005ed2:	4013      	ands	r3, r2
 8005ed4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005ede:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005eea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	699b      	ldr	r3, [r3, #24]
 8005ef0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ef6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6a1b      	ldr	r3, [r3, #32]
 8005efc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4313      	orrs	r3, r2
 8005f02:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f08:	2b04      	cmp	r3, #4
 8005f0a:	d107      	bne.n	8005f1c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f14:	4313      	orrs	r3, r2
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005f1c:	4b71      	ldr	r3, [pc, #452]	; (80060e4 <HAL_DMA_Init+0x424>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	4b71      	ldr	r3, [pc, #452]	; (80060e8 <HAL_DMA_Init+0x428>)
 8005f22:	4013      	ands	r3, r2
 8005f24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f28:	d328      	bcc.n	8005f7c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b28      	cmp	r3, #40	; 0x28
 8005f30:	d903      	bls.n	8005f3a <HAL_DMA_Init+0x27a>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	685b      	ldr	r3, [r3, #4]
 8005f36:	2b2e      	cmp	r3, #46	; 0x2e
 8005f38:	d917      	bls.n	8005f6a <HAL_DMA_Init+0x2aa>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2b3e      	cmp	r3, #62	; 0x3e
 8005f40:	d903      	bls.n	8005f4a <HAL_DMA_Init+0x28a>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b42      	cmp	r3, #66	; 0x42
 8005f48:	d90f      	bls.n	8005f6a <HAL_DMA_Init+0x2aa>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	2b46      	cmp	r3, #70	; 0x46
 8005f50:	d903      	bls.n	8005f5a <HAL_DMA_Init+0x29a>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b48      	cmp	r3, #72	; 0x48
 8005f58:	d907      	bls.n	8005f6a <HAL_DMA_Init+0x2aa>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	2b4e      	cmp	r3, #78	; 0x4e
 8005f60:	d905      	bls.n	8005f6e <HAL_DMA_Init+0x2ae>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	2b52      	cmp	r3, #82	; 0x52
 8005f68:	d801      	bhi.n	8005f6e <HAL_DMA_Init+0x2ae>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e000      	b.n	8005f70 <HAL_DMA_Init+0x2b0>
 8005f6e:	2300      	movs	r3, #0
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d003      	beq.n	8005f7c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f7a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	f023 0307 	bic.w	r3, r3, #7
 8005f92:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	697a      	ldr	r2, [r7, #20]
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa2:	2b04      	cmp	r3, #4
 8005fa4:	d117      	bne.n	8005fd6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005faa:	697a      	ldr	r2, [r7, #20]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00e      	beq.n	8005fd6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f002 fb33 	bl	8008624 <DMA_CheckFifoParam>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d008      	beq.n	8005fd6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2240      	movs	r2, #64	; 0x40
 8005fc8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2201      	movs	r2, #1
 8005fce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e197      	b.n	8006306 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	697a      	ldr	r2, [r7, #20]
 8005fdc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fde:	6878      	ldr	r0, [r7, #4]
 8005fe0:	f002 fa6e 	bl	80084c0 <DMA_CalcBaseAndBitshift>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fec:	f003 031f 	and.w	r3, r3, #31
 8005ff0:	223f      	movs	r2, #63	; 0x3f
 8005ff2:	409a      	lsls	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	609a      	str	r2, [r3, #8]
 8005ff8:	e0cd      	b.n	8006196 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a3b      	ldr	r2, [pc, #236]	; (80060ec <HAL_DMA_Init+0x42c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d022      	beq.n	800604a <HAL_DMA_Init+0x38a>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a39      	ldr	r2, [pc, #228]	; (80060f0 <HAL_DMA_Init+0x430>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01d      	beq.n	800604a <HAL_DMA_Init+0x38a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a38      	ldr	r2, [pc, #224]	; (80060f4 <HAL_DMA_Init+0x434>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d018      	beq.n	800604a <HAL_DMA_Init+0x38a>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a36      	ldr	r2, [pc, #216]	; (80060f8 <HAL_DMA_Init+0x438>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d013      	beq.n	800604a <HAL_DMA_Init+0x38a>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a35      	ldr	r2, [pc, #212]	; (80060fc <HAL_DMA_Init+0x43c>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d00e      	beq.n	800604a <HAL_DMA_Init+0x38a>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a33      	ldr	r2, [pc, #204]	; (8006100 <HAL_DMA_Init+0x440>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d009      	beq.n	800604a <HAL_DMA_Init+0x38a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a32      	ldr	r2, [pc, #200]	; (8006104 <HAL_DMA_Init+0x444>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d004      	beq.n	800604a <HAL_DMA_Init+0x38a>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4a30      	ldr	r2, [pc, #192]	; (8006108 <HAL_DMA_Init+0x448>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d101      	bne.n	800604e <HAL_DMA_Init+0x38e>
 800604a:	2301      	movs	r3, #1
 800604c:	e000      	b.n	8006050 <HAL_DMA_Init+0x390>
 800604e:	2300      	movs	r3, #0
 8006050:	2b00      	cmp	r3, #0
 8006052:	f000 8097 	beq.w	8006184 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a24      	ldr	r2, [pc, #144]	; (80060ec <HAL_DMA_Init+0x42c>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d021      	beq.n	80060a4 <HAL_DMA_Init+0x3e4>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a22      	ldr	r2, [pc, #136]	; (80060f0 <HAL_DMA_Init+0x430>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01c      	beq.n	80060a4 <HAL_DMA_Init+0x3e4>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	4a21      	ldr	r2, [pc, #132]	; (80060f4 <HAL_DMA_Init+0x434>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d017      	beq.n	80060a4 <HAL_DMA_Init+0x3e4>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a1f      	ldr	r2, [pc, #124]	; (80060f8 <HAL_DMA_Init+0x438>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d012      	beq.n	80060a4 <HAL_DMA_Init+0x3e4>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4a1e      	ldr	r2, [pc, #120]	; (80060fc <HAL_DMA_Init+0x43c>)
 8006084:	4293      	cmp	r3, r2
 8006086:	d00d      	beq.n	80060a4 <HAL_DMA_Init+0x3e4>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a1c      	ldr	r2, [pc, #112]	; (8006100 <HAL_DMA_Init+0x440>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d008      	beq.n	80060a4 <HAL_DMA_Init+0x3e4>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a1b      	ldr	r2, [pc, #108]	; (8006104 <HAL_DMA_Init+0x444>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <HAL_DMA_Init+0x3e4>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a19      	ldr	r2, [pc, #100]	; (8006108 <HAL_DMA_Init+0x448>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	2202      	movs	r2, #2
 80060aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4b12      	ldr	r3, [pc, #72]	; (800610c <HAL_DMA_Init+0x44c>)
 80060c2:	4013      	ands	r3, r2
 80060c4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	2b40      	cmp	r3, #64	; 0x40
 80060cc:	d020      	beq.n	8006110 <HAL_DMA_Init+0x450>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	2b80      	cmp	r3, #128	; 0x80
 80060d4:	d102      	bne.n	80060dc <HAL_DMA_Init+0x41c>
 80060d6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80060da:	e01a      	b.n	8006112 <HAL_DMA_Init+0x452>
 80060dc:	2300      	movs	r3, #0
 80060de:	e018      	b.n	8006112 <HAL_DMA_Init+0x452>
 80060e0:	fe10803f 	.word	0xfe10803f
 80060e4:	5c001000 	.word	0x5c001000
 80060e8:	ffff0000 	.word	0xffff0000
 80060ec:	58025408 	.word	0x58025408
 80060f0:	5802541c 	.word	0x5802541c
 80060f4:	58025430 	.word	0x58025430
 80060f8:	58025444 	.word	0x58025444
 80060fc:	58025458 	.word	0x58025458
 8006100:	5802546c 	.word	0x5802546c
 8006104:	58025480 	.word	0x58025480
 8006108:	58025494 	.word	0x58025494
 800610c:	fffe000f 	.word	0xfffe000f
 8006110:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006112:	687a      	ldr	r2, [r7, #4]
 8006114:	68d2      	ldr	r2, [r2, #12]
 8006116:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006118:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	691b      	ldr	r3, [r3, #16]
 800611e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8006120:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	695b      	ldr	r3, [r3, #20]
 8006126:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8006128:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8006130:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	69db      	ldr	r3, [r3, #28]
 8006136:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8006138:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8006140:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	697a      	ldr	r2, [r7, #20]
 800614e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	461a      	mov	r2, r3
 8006156:	4b6e      	ldr	r3, [pc, #440]	; (8006310 <HAL_DMA_Init+0x650>)
 8006158:	4413      	add	r3, r2
 800615a:	4a6e      	ldr	r2, [pc, #440]	; (8006314 <HAL_DMA_Init+0x654>)
 800615c:	fba2 2303 	umull	r2, r3, r2, r3
 8006160:	091b      	lsrs	r3, r3, #4
 8006162:	009a      	lsls	r2, r3, #2
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f002 f9a9 	bl	80084c0 <DMA_CalcBaseAndBitshift>
 800616e:	4603      	mov	r3, r0
 8006170:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006176:	f003 031f 	and.w	r3, r3, #31
 800617a:	2201      	movs	r2, #1
 800617c:	409a      	lsls	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	e008      	b.n	8006196 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2240      	movs	r2, #64	; 0x40
 8006188:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2203      	movs	r2, #3
 800618e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e0b7      	b.n	8006306 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a5f      	ldr	r2, [pc, #380]	; (8006318 <HAL_DMA_Init+0x658>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d072      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a5d      	ldr	r2, [pc, #372]	; (800631c <HAL_DMA_Init+0x65c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d06d      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a5c      	ldr	r2, [pc, #368]	; (8006320 <HAL_DMA_Init+0x660>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d068      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a5a      	ldr	r2, [pc, #360]	; (8006324 <HAL_DMA_Init+0x664>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d063      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a59      	ldr	r2, [pc, #356]	; (8006328 <HAL_DMA_Init+0x668>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d05e      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a57      	ldr	r2, [pc, #348]	; (800632c <HAL_DMA_Init+0x66c>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d059      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a56      	ldr	r2, [pc, #344]	; (8006330 <HAL_DMA_Init+0x670>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d054      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a54      	ldr	r2, [pc, #336]	; (8006334 <HAL_DMA_Init+0x674>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d04f      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a53      	ldr	r2, [pc, #332]	; (8006338 <HAL_DMA_Init+0x678>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d04a      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a51      	ldr	r2, [pc, #324]	; (800633c <HAL_DMA_Init+0x67c>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d045      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a50      	ldr	r2, [pc, #320]	; (8006340 <HAL_DMA_Init+0x680>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d040      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a4e      	ldr	r2, [pc, #312]	; (8006344 <HAL_DMA_Init+0x684>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d03b      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a4d      	ldr	r2, [pc, #308]	; (8006348 <HAL_DMA_Init+0x688>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d036      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a4b      	ldr	r2, [pc, #300]	; (800634c <HAL_DMA_Init+0x68c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d031      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a4a      	ldr	r2, [pc, #296]	; (8006350 <HAL_DMA_Init+0x690>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d02c      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a48      	ldr	r2, [pc, #288]	; (8006354 <HAL_DMA_Init+0x694>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d027      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a47      	ldr	r2, [pc, #284]	; (8006358 <HAL_DMA_Init+0x698>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d022      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a45      	ldr	r2, [pc, #276]	; (800635c <HAL_DMA_Init+0x69c>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01d      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a44      	ldr	r2, [pc, #272]	; (8006360 <HAL_DMA_Init+0x6a0>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d018      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a42      	ldr	r2, [pc, #264]	; (8006364 <HAL_DMA_Init+0x6a4>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a41      	ldr	r2, [pc, #260]	; (8006368 <HAL_DMA_Init+0x6a8>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a3f      	ldr	r2, [pc, #252]	; (800636c <HAL_DMA_Init+0x6ac>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a3e      	ldr	r2, [pc, #248]	; (8006370 <HAL_DMA_Init+0x6b0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_DMA_Init+0x5c6>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a3c      	ldr	r2, [pc, #240]	; (8006374 <HAL_DMA_Init+0x6b4>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d101      	bne.n	800628a <HAL_DMA_Init+0x5ca>
 8006286:	2301      	movs	r3, #1
 8006288:	e000      	b.n	800628c <HAL_DMA_Init+0x5cc>
 800628a:	2300      	movs	r3, #0
 800628c:	2b00      	cmp	r3, #0
 800628e:	d032      	beq.n	80062f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f002 fa43 	bl	800871c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	2b80      	cmp	r3, #128	; 0x80
 800629c:	d102      	bne.n	80062a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	685a      	ldr	r2, [r3, #4]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b4:	687a      	ldr	r2, [r7, #4]
 80062b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d010      	beq.n	80062e4 <HAL_DMA_Init+0x624>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2b08      	cmp	r3, #8
 80062c8:	d80c      	bhi.n	80062e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f002 fac0 	bl	8008850 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062d4:	2200      	movs	r2, #0
 80062d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062e0:	605a      	str	r2, [r3, #4]
 80062e2:	e008      	b.n	80062f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2200      	movs	r2, #0
 80062ee:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2201      	movs	r2, #1
 8006300:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3718      	adds	r7, #24
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop
 8006310:	a7fdabf8 	.word	0xa7fdabf8
 8006314:	cccccccd 	.word	0xcccccccd
 8006318:	40020010 	.word	0x40020010
 800631c:	40020028 	.word	0x40020028
 8006320:	40020040 	.word	0x40020040
 8006324:	40020058 	.word	0x40020058
 8006328:	40020070 	.word	0x40020070
 800632c:	40020088 	.word	0x40020088
 8006330:	400200a0 	.word	0x400200a0
 8006334:	400200b8 	.word	0x400200b8
 8006338:	40020410 	.word	0x40020410
 800633c:	40020428 	.word	0x40020428
 8006340:	40020440 	.word	0x40020440
 8006344:	40020458 	.word	0x40020458
 8006348:	40020470 	.word	0x40020470
 800634c:	40020488 	.word	0x40020488
 8006350:	400204a0 	.word	0x400204a0
 8006354:	400204b8 	.word	0x400204b8
 8006358:	58025408 	.word	0x58025408
 800635c:	5802541c 	.word	0x5802541c
 8006360:	58025430 	.word	0x58025430
 8006364:	58025444 	.word	0x58025444
 8006368:	58025458 	.word	0x58025458
 800636c:	5802546c 	.word	0x5802546c
 8006370:	58025480 	.word	0x58025480
 8006374:	58025494 	.word	0x58025494

08006378 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d101      	bne.n	8006394 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	e226      	b.n	80067e2 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800639a:	2b01      	cmp	r3, #1
 800639c:	d101      	bne.n	80063a2 <HAL_DMA_Start_IT+0x2a>
 800639e:	2302      	movs	r3, #2
 80063a0:	e21f      	b.n	80067e2 <HAL_DMA_Start_IT+0x46a>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b01      	cmp	r3, #1
 80063b4:	f040 820a 	bne.w	80067cc <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2202      	movs	r2, #2
 80063bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	2200      	movs	r2, #0
 80063c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a68      	ldr	r2, [pc, #416]	; (800656c <HAL_DMA_Start_IT+0x1f4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d04a      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a66      	ldr	r2, [pc, #408]	; (8006570 <HAL_DMA_Start_IT+0x1f8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d045      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a65      	ldr	r2, [pc, #404]	; (8006574 <HAL_DMA_Start_IT+0x1fc>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d040      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a63      	ldr	r2, [pc, #396]	; (8006578 <HAL_DMA_Start_IT+0x200>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d03b      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a62      	ldr	r2, [pc, #392]	; (800657c <HAL_DMA_Start_IT+0x204>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d036      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a60      	ldr	r2, [pc, #384]	; (8006580 <HAL_DMA_Start_IT+0x208>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d031      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a5f      	ldr	r2, [pc, #380]	; (8006584 <HAL_DMA_Start_IT+0x20c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d02c      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a5d      	ldr	r2, [pc, #372]	; (8006588 <HAL_DMA_Start_IT+0x210>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d027      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a5c      	ldr	r2, [pc, #368]	; (800658c <HAL_DMA_Start_IT+0x214>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d022      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a5a      	ldr	r2, [pc, #360]	; (8006590 <HAL_DMA_Start_IT+0x218>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d01d      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a59      	ldr	r2, [pc, #356]	; (8006594 <HAL_DMA_Start_IT+0x21c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d018      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a57      	ldr	r2, [pc, #348]	; (8006598 <HAL_DMA_Start_IT+0x220>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a56      	ldr	r2, [pc, #344]	; (800659c <HAL_DMA_Start_IT+0x224>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a54      	ldr	r2, [pc, #336]	; (80065a0 <HAL_DMA_Start_IT+0x228>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d009      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a53      	ldr	r2, [pc, #332]	; (80065a4 <HAL_DMA_Start_IT+0x22c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_DMA_Start_IT+0xee>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a51      	ldr	r2, [pc, #324]	; (80065a8 <HAL_DMA_Start_IT+0x230>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d108      	bne.n	8006478 <HAL_DMA_Start_IT+0x100>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f022 0201 	bic.w	r2, r2, #1
 8006474:	601a      	str	r2, [r3, #0]
 8006476:	e007      	b.n	8006488 <HAL_DMA_Start_IT+0x110>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f022 0201 	bic.w	r2, r2, #1
 8006486:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	68b9      	ldr	r1, [r7, #8]
 800648e:	68f8      	ldr	r0, [r7, #12]
 8006490:	f001 fe6a 	bl	8008168 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a34      	ldr	r2, [pc, #208]	; (800656c <HAL_DMA_Start_IT+0x1f4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d04a      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a33      	ldr	r2, [pc, #204]	; (8006570 <HAL_DMA_Start_IT+0x1f8>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d045      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a31      	ldr	r2, [pc, #196]	; (8006574 <HAL_DMA_Start_IT+0x1fc>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d040      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a30      	ldr	r2, [pc, #192]	; (8006578 <HAL_DMA_Start_IT+0x200>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d03b      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a2e      	ldr	r2, [pc, #184]	; (800657c <HAL_DMA_Start_IT+0x204>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d036      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a2d      	ldr	r2, [pc, #180]	; (8006580 <HAL_DMA_Start_IT+0x208>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d031      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a2b      	ldr	r2, [pc, #172]	; (8006584 <HAL_DMA_Start_IT+0x20c>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d02c      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a2a      	ldr	r2, [pc, #168]	; (8006588 <HAL_DMA_Start_IT+0x210>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d027      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a28      	ldr	r2, [pc, #160]	; (800658c <HAL_DMA_Start_IT+0x214>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d022      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a27      	ldr	r2, [pc, #156]	; (8006590 <HAL_DMA_Start_IT+0x218>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d01d      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a25      	ldr	r2, [pc, #148]	; (8006594 <HAL_DMA_Start_IT+0x21c>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d018      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4a24      	ldr	r2, [pc, #144]	; (8006598 <HAL_DMA_Start_IT+0x220>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d013      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4a22      	ldr	r2, [pc, #136]	; (800659c <HAL_DMA_Start_IT+0x224>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d00e      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a21      	ldr	r2, [pc, #132]	; (80065a0 <HAL_DMA_Start_IT+0x228>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4a1f      	ldr	r2, [pc, #124]	; (80065a4 <HAL_DMA_Start_IT+0x22c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d004      	beq.n	8006534 <HAL_DMA_Start_IT+0x1bc>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a1e      	ldr	r2, [pc, #120]	; (80065a8 <HAL_DMA_Start_IT+0x230>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d101      	bne.n	8006538 <HAL_DMA_Start_IT+0x1c0>
 8006534:	2301      	movs	r3, #1
 8006536:	e000      	b.n	800653a <HAL_DMA_Start_IT+0x1c2>
 8006538:	2300      	movs	r3, #0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d036      	beq.n	80065ac <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f023 021e 	bic.w	r2, r3, #30
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f042 0216 	orr.w	r2, r2, #22
 8006550:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	2b00      	cmp	r3, #0
 8006558:	d03e      	beq.n	80065d8 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	681a      	ldr	r2, [r3, #0]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f042 0208 	orr.w	r2, r2, #8
 8006568:	601a      	str	r2, [r3, #0]
 800656a:	e035      	b.n	80065d8 <HAL_DMA_Start_IT+0x260>
 800656c:	40020010 	.word	0x40020010
 8006570:	40020028 	.word	0x40020028
 8006574:	40020040 	.word	0x40020040
 8006578:	40020058 	.word	0x40020058
 800657c:	40020070 	.word	0x40020070
 8006580:	40020088 	.word	0x40020088
 8006584:	400200a0 	.word	0x400200a0
 8006588:	400200b8 	.word	0x400200b8
 800658c:	40020410 	.word	0x40020410
 8006590:	40020428 	.word	0x40020428
 8006594:	40020440 	.word	0x40020440
 8006598:	40020458 	.word	0x40020458
 800659c:	40020470 	.word	0x40020470
 80065a0:	40020488 	.word	0x40020488
 80065a4:	400204a0 	.word	0x400204a0
 80065a8:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f023 020e 	bic.w	r2, r3, #14
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f042 020a 	orr.w	r2, r2, #10
 80065be:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d007      	beq.n	80065d8 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0204 	orr.w	r2, r2, #4
 80065d6:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a83      	ldr	r2, [pc, #524]	; (80067ec <HAL_DMA_Start_IT+0x474>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d072      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a82      	ldr	r2, [pc, #520]	; (80067f0 <HAL_DMA_Start_IT+0x478>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d06d      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a80      	ldr	r2, [pc, #512]	; (80067f4 <HAL_DMA_Start_IT+0x47c>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d068      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a7f      	ldr	r2, [pc, #508]	; (80067f8 <HAL_DMA_Start_IT+0x480>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d063      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a7d      	ldr	r2, [pc, #500]	; (80067fc <HAL_DMA_Start_IT+0x484>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d05e      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a7c      	ldr	r2, [pc, #496]	; (8006800 <HAL_DMA_Start_IT+0x488>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d059      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a7a      	ldr	r2, [pc, #488]	; (8006804 <HAL_DMA_Start_IT+0x48c>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d054      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a79      	ldr	r2, [pc, #484]	; (8006808 <HAL_DMA_Start_IT+0x490>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d04f      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a77      	ldr	r2, [pc, #476]	; (800680c <HAL_DMA_Start_IT+0x494>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d04a      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a76      	ldr	r2, [pc, #472]	; (8006810 <HAL_DMA_Start_IT+0x498>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d045      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a74      	ldr	r2, [pc, #464]	; (8006814 <HAL_DMA_Start_IT+0x49c>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d040      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a73      	ldr	r2, [pc, #460]	; (8006818 <HAL_DMA_Start_IT+0x4a0>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d03b      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a71      	ldr	r2, [pc, #452]	; (800681c <HAL_DMA_Start_IT+0x4a4>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d036      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a70      	ldr	r2, [pc, #448]	; (8006820 <HAL_DMA_Start_IT+0x4a8>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d031      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a6e      	ldr	r2, [pc, #440]	; (8006824 <HAL_DMA_Start_IT+0x4ac>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d02c      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a6d      	ldr	r2, [pc, #436]	; (8006828 <HAL_DMA_Start_IT+0x4b0>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d027      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a6b      	ldr	r2, [pc, #428]	; (800682c <HAL_DMA_Start_IT+0x4b4>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d022      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	4a6a      	ldr	r2, [pc, #424]	; (8006830 <HAL_DMA_Start_IT+0x4b8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d01d      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a68      	ldr	r2, [pc, #416]	; (8006834 <HAL_DMA_Start_IT+0x4bc>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d018      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a67      	ldr	r2, [pc, #412]	; (8006838 <HAL_DMA_Start_IT+0x4c0>)
 800669c:	4293      	cmp	r3, r2
 800669e:	d013      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	4a65      	ldr	r2, [pc, #404]	; (800683c <HAL_DMA_Start_IT+0x4c4>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d00e      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	4a64      	ldr	r2, [pc, #400]	; (8006840 <HAL_DMA_Start_IT+0x4c8>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d009      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4a62      	ldr	r2, [pc, #392]	; (8006844 <HAL_DMA_Start_IT+0x4cc>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d004      	beq.n	80066c8 <HAL_DMA_Start_IT+0x350>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	4a61      	ldr	r2, [pc, #388]	; (8006848 <HAL_DMA_Start_IT+0x4d0>)
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d101      	bne.n	80066cc <HAL_DMA_Start_IT+0x354>
 80066c8:	2301      	movs	r3, #1
 80066ca:	e000      	b.n	80066ce <HAL_DMA_Start_IT+0x356>
 80066cc:	2300      	movs	r3, #0
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d01a      	beq.n	8006708 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d007      	beq.n	80066f0 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066ee:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d007      	beq.n	8006708 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006702:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006706:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a37      	ldr	r2, [pc, #220]	; (80067ec <HAL_DMA_Start_IT+0x474>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d04a      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a36      	ldr	r2, [pc, #216]	; (80067f0 <HAL_DMA_Start_IT+0x478>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d045      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a34      	ldr	r2, [pc, #208]	; (80067f4 <HAL_DMA_Start_IT+0x47c>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d040      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a33      	ldr	r2, [pc, #204]	; (80067f8 <HAL_DMA_Start_IT+0x480>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d03b      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a31      	ldr	r2, [pc, #196]	; (80067fc <HAL_DMA_Start_IT+0x484>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d036      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a30      	ldr	r2, [pc, #192]	; (8006800 <HAL_DMA_Start_IT+0x488>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d031      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a2e      	ldr	r2, [pc, #184]	; (8006804 <HAL_DMA_Start_IT+0x48c>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d02c      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a2d      	ldr	r2, [pc, #180]	; (8006808 <HAL_DMA_Start_IT+0x490>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d027      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a2b      	ldr	r2, [pc, #172]	; (800680c <HAL_DMA_Start_IT+0x494>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d022      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a2a      	ldr	r2, [pc, #168]	; (8006810 <HAL_DMA_Start_IT+0x498>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d01d      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a28      	ldr	r2, [pc, #160]	; (8006814 <HAL_DMA_Start_IT+0x49c>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d018      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4a27      	ldr	r2, [pc, #156]	; (8006818 <HAL_DMA_Start_IT+0x4a0>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d013      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4a25      	ldr	r2, [pc, #148]	; (800681c <HAL_DMA_Start_IT+0x4a4>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00e      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	4a24      	ldr	r2, [pc, #144]	; (8006820 <HAL_DMA_Start_IT+0x4a8>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d009      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a22      	ldr	r2, [pc, #136]	; (8006824 <HAL_DMA_Start_IT+0x4ac>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d004      	beq.n	80067a8 <HAL_DMA_Start_IT+0x430>
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4a21      	ldr	r2, [pc, #132]	; (8006828 <HAL_DMA_Start_IT+0x4b0>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d108      	bne.n	80067ba <HAL_DMA_Start_IT+0x442>
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	681a      	ldr	r2, [r3, #0]
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f042 0201 	orr.w	r2, r2, #1
 80067b6:	601a      	str	r2, [r3, #0]
 80067b8:	e012      	b.n	80067e0 <HAL_DMA_Start_IT+0x468>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f042 0201 	orr.w	r2, r2, #1
 80067c8:	601a      	str	r2, [r3, #0]
 80067ca:	e009      	b.n	80067e0 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067d2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2200      	movs	r2, #0
 80067d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80067dc:	2301      	movs	r3, #1
 80067de:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80067e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3718      	adds	r7, #24
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	40020010 	.word	0x40020010
 80067f0:	40020028 	.word	0x40020028
 80067f4:	40020040 	.word	0x40020040
 80067f8:	40020058 	.word	0x40020058
 80067fc:	40020070 	.word	0x40020070
 8006800:	40020088 	.word	0x40020088
 8006804:	400200a0 	.word	0x400200a0
 8006808:	400200b8 	.word	0x400200b8
 800680c:	40020410 	.word	0x40020410
 8006810:	40020428 	.word	0x40020428
 8006814:	40020440 	.word	0x40020440
 8006818:	40020458 	.word	0x40020458
 800681c:	40020470 	.word	0x40020470
 8006820:	40020488 	.word	0x40020488
 8006824:	400204a0 	.word	0x400204a0
 8006828:	400204b8 	.word	0x400204b8
 800682c:	58025408 	.word	0x58025408
 8006830:	5802541c 	.word	0x5802541c
 8006834:	58025430 	.word	0x58025430
 8006838:	58025444 	.word	0x58025444
 800683c:	58025458 	.word	0x58025458
 8006840:	5802546c 	.word	0x5802546c
 8006844:	58025480 	.word	0x58025480
 8006848:	58025494 	.word	0x58025494

0800684c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b086      	sub	sp, #24
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006854:	f7fd f90c 	bl	8003a70 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2b00      	cmp	r3, #0
 800685e:	d101      	bne.n	8006864 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e2dc      	b.n	8006e1e <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800686a:	b2db      	uxtb	r3, r3
 800686c:	2b02      	cmp	r3, #2
 800686e:	d008      	beq.n	8006882 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2280      	movs	r2, #128	; 0x80
 8006874:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e2cd      	b.n	8006e1e <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a76      	ldr	r2, [pc, #472]	; (8006a60 <HAL_DMA_Abort+0x214>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d04a      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a74      	ldr	r2, [pc, #464]	; (8006a64 <HAL_DMA_Abort+0x218>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d045      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a73      	ldr	r2, [pc, #460]	; (8006a68 <HAL_DMA_Abort+0x21c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d040      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a71      	ldr	r2, [pc, #452]	; (8006a6c <HAL_DMA_Abort+0x220>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d03b      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a70      	ldr	r2, [pc, #448]	; (8006a70 <HAL_DMA_Abort+0x224>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d036      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a6e      	ldr	r2, [pc, #440]	; (8006a74 <HAL_DMA_Abort+0x228>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d031      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a6d      	ldr	r2, [pc, #436]	; (8006a78 <HAL_DMA_Abort+0x22c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d02c      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a6b      	ldr	r2, [pc, #428]	; (8006a7c <HAL_DMA_Abort+0x230>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d027      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a6a      	ldr	r2, [pc, #424]	; (8006a80 <HAL_DMA_Abort+0x234>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d022      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a68      	ldr	r2, [pc, #416]	; (8006a84 <HAL_DMA_Abort+0x238>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d01d      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a67      	ldr	r2, [pc, #412]	; (8006a88 <HAL_DMA_Abort+0x23c>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d018      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a65      	ldr	r2, [pc, #404]	; (8006a8c <HAL_DMA_Abort+0x240>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d013      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a64      	ldr	r2, [pc, #400]	; (8006a90 <HAL_DMA_Abort+0x244>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d00e      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a62      	ldr	r2, [pc, #392]	; (8006a94 <HAL_DMA_Abort+0x248>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d009      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a61      	ldr	r2, [pc, #388]	; (8006a98 <HAL_DMA_Abort+0x24c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d004      	beq.n	8006922 <HAL_DMA_Abort+0xd6>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a5f      	ldr	r2, [pc, #380]	; (8006a9c <HAL_DMA_Abort+0x250>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d101      	bne.n	8006926 <HAL_DMA_Abort+0xda>
 8006922:	2301      	movs	r3, #1
 8006924:	e000      	b.n	8006928 <HAL_DMA_Abort+0xdc>
 8006926:	2300      	movs	r3, #0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d013      	beq.n	8006954 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f022 021e 	bic.w	r2, r2, #30
 800693a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	695a      	ldr	r2, [r3, #20]
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800694a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	617b      	str	r3, [r7, #20]
 8006952:	e00a      	b.n	800696a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f022 020e 	bic.w	r2, r2, #14
 8006962:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	4a3c      	ldr	r2, [pc, #240]	; (8006a60 <HAL_DMA_Abort+0x214>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d072      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4a3a      	ldr	r2, [pc, #232]	; (8006a64 <HAL_DMA_Abort+0x218>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d06d      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a39      	ldr	r2, [pc, #228]	; (8006a68 <HAL_DMA_Abort+0x21c>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d068      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4a37      	ldr	r2, [pc, #220]	; (8006a6c <HAL_DMA_Abort+0x220>)
 800698e:	4293      	cmp	r3, r2
 8006990:	d063      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a36      	ldr	r2, [pc, #216]	; (8006a70 <HAL_DMA_Abort+0x224>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d05e      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	4a34      	ldr	r2, [pc, #208]	; (8006a74 <HAL_DMA_Abort+0x228>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d059      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4a33      	ldr	r2, [pc, #204]	; (8006a78 <HAL_DMA_Abort+0x22c>)
 80069ac:	4293      	cmp	r3, r2
 80069ae:	d054      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a31      	ldr	r2, [pc, #196]	; (8006a7c <HAL_DMA_Abort+0x230>)
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d04f      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	4a30      	ldr	r2, [pc, #192]	; (8006a80 <HAL_DMA_Abort+0x234>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d04a      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	4a2e      	ldr	r2, [pc, #184]	; (8006a84 <HAL_DMA_Abort+0x238>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d045      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	4a2d      	ldr	r2, [pc, #180]	; (8006a88 <HAL_DMA_Abort+0x23c>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d040      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	4a2b      	ldr	r2, [pc, #172]	; (8006a8c <HAL_DMA_Abort+0x240>)
 80069de:	4293      	cmp	r3, r2
 80069e0:	d03b      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	4a2a      	ldr	r2, [pc, #168]	; (8006a90 <HAL_DMA_Abort+0x244>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d036      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	4a28      	ldr	r2, [pc, #160]	; (8006a94 <HAL_DMA_Abort+0x248>)
 80069f2:	4293      	cmp	r3, r2
 80069f4:	d031      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4a27      	ldr	r2, [pc, #156]	; (8006a98 <HAL_DMA_Abort+0x24c>)
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d02c      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4a25      	ldr	r2, [pc, #148]	; (8006a9c <HAL_DMA_Abort+0x250>)
 8006a06:	4293      	cmp	r3, r2
 8006a08:	d027      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	4a24      	ldr	r2, [pc, #144]	; (8006aa0 <HAL_DMA_Abort+0x254>)
 8006a10:	4293      	cmp	r3, r2
 8006a12:	d022      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a22      	ldr	r2, [pc, #136]	; (8006aa4 <HAL_DMA_Abort+0x258>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d01d      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	4a21      	ldr	r2, [pc, #132]	; (8006aa8 <HAL_DMA_Abort+0x25c>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d018      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1f      	ldr	r2, [pc, #124]	; (8006aac <HAL_DMA_Abort+0x260>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d013      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1e      	ldr	r2, [pc, #120]	; (8006ab0 <HAL_DMA_Abort+0x264>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d00e      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1c      	ldr	r2, [pc, #112]	; (8006ab4 <HAL_DMA_Abort+0x268>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d009      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a1b      	ldr	r2, [pc, #108]	; (8006ab8 <HAL_DMA_Abort+0x26c>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d004      	beq.n	8006a5a <HAL_DMA_Abort+0x20e>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a19      	ldr	r2, [pc, #100]	; (8006abc <HAL_DMA_Abort+0x270>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d132      	bne.n	8006ac0 <HAL_DMA_Abort+0x274>
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e031      	b.n	8006ac2 <HAL_DMA_Abort+0x276>
 8006a5e:	bf00      	nop
 8006a60:	40020010 	.word	0x40020010
 8006a64:	40020028 	.word	0x40020028
 8006a68:	40020040 	.word	0x40020040
 8006a6c:	40020058 	.word	0x40020058
 8006a70:	40020070 	.word	0x40020070
 8006a74:	40020088 	.word	0x40020088
 8006a78:	400200a0 	.word	0x400200a0
 8006a7c:	400200b8 	.word	0x400200b8
 8006a80:	40020410 	.word	0x40020410
 8006a84:	40020428 	.word	0x40020428
 8006a88:	40020440 	.word	0x40020440
 8006a8c:	40020458 	.word	0x40020458
 8006a90:	40020470 	.word	0x40020470
 8006a94:	40020488 	.word	0x40020488
 8006a98:	400204a0 	.word	0x400204a0
 8006a9c:	400204b8 	.word	0x400204b8
 8006aa0:	58025408 	.word	0x58025408
 8006aa4:	5802541c 	.word	0x5802541c
 8006aa8:	58025430 	.word	0x58025430
 8006aac:	58025444 	.word	0x58025444
 8006ab0:	58025458 	.word	0x58025458
 8006ab4:	5802546c 	.word	0x5802546c
 8006ab8:	58025480 	.word	0x58025480
 8006abc:	58025494 	.word	0x58025494
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ad4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a6d      	ldr	r2, [pc, #436]	; (8006c90 <HAL_DMA_Abort+0x444>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d04a      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a6b      	ldr	r2, [pc, #428]	; (8006c94 <HAL_DMA_Abort+0x448>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d045      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a6a      	ldr	r2, [pc, #424]	; (8006c98 <HAL_DMA_Abort+0x44c>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d040      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a68      	ldr	r2, [pc, #416]	; (8006c9c <HAL_DMA_Abort+0x450>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d03b      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a67      	ldr	r2, [pc, #412]	; (8006ca0 <HAL_DMA_Abort+0x454>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d036      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a65      	ldr	r2, [pc, #404]	; (8006ca4 <HAL_DMA_Abort+0x458>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d031      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a64      	ldr	r2, [pc, #400]	; (8006ca8 <HAL_DMA_Abort+0x45c>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d02c      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a62      	ldr	r2, [pc, #392]	; (8006cac <HAL_DMA_Abort+0x460>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d027      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a61      	ldr	r2, [pc, #388]	; (8006cb0 <HAL_DMA_Abort+0x464>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a5f      	ldr	r2, [pc, #380]	; (8006cb4 <HAL_DMA_Abort+0x468>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01d      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a5e      	ldr	r2, [pc, #376]	; (8006cb8 <HAL_DMA_Abort+0x46c>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a5c      	ldr	r2, [pc, #368]	; (8006cbc <HAL_DMA_Abort+0x470>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a5b      	ldr	r2, [pc, #364]	; (8006cc0 <HAL_DMA_Abort+0x474>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a59      	ldr	r2, [pc, #356]	; (8006cc4 <HAL_DMA_Abort+0x478>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a58      	ldr	r2, [pc, #352]	; (8006cc8 <HAL_DMA_Abort+0x47c>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <HAL_DMA_Abort+0x32a>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a56      	ldr	r2, [pc, #344]	; (8006ccc <HAL_DMA_Abort+0x480>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d108      	bne.n	8006b88 <HAL_DMA_Abort+0x33c>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681a      	ldr	r2, [r3, #0]
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	f022 0201 	bic.w	r2, r2, #1
 8006b84:	601a      	str	r2, [r3, #0]
 8006b86:	e007      	b.n	8006b98 <HAL_DMA_Abort+0x34c>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681a      	ldr	r2, [r3, #0]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0201 	bic.w	r2, r2, #1
 8006b96:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b98:	e013      	b.n	8006bc2 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b9a:	f7fc ff69 	bl	8003a70 <HAL_GetTick>
 8006b9e:	4602      	mov	r2, r0
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	1ad3      	subs	r3, r2, r3
 8006ba4:	2b05      	cmp	r3, #5
 8006ba6:	d90c      	bls.n	8006bc2 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2220      	movs	r2, #32
 8006bac:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2203      	movs	r2, #3
 8006bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006bbe:	2301      	movs	r3, #1
 8006bc0:	e12d      	b.n	8006e1e <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d1e5      	bne.n	8006b9a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a2f      	ldr	r2, [pc, #188]	; (8006c90 <HAL_DMA_Abort+0x444>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d04a      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a2d      	ldr	r2, [pc, #180]	; (8006c94 <HAL_DMA_Abort+0x448>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d045      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a2c      	ldr	r2, [pc, #176]	; (8006c98 <HAL_DMA_Abort+0x44c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d040      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a2a      	ldr	r2, [pc, #168]	; (8006c9c <HAL_DMA_Abort+0x450>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d03b      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a29      	ldr	r2, [pc, #164]	; (8006ca0 <HAL_DMA_Abort+0x454>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d036      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a27      	ldr	r2, [pc, #156]	; (8006ca4 <HAL_DMA_Abort+0x458>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d031      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a26      	ldr	r2, [pc, #152]	; (8006ca8 <HAL_DMA_Abort+0x45c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d02c      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a24      	ldr	r2, [pc, #144]	; (8006cac <HAL_DMA_Abort+0x460>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d027      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a23      	ldr	r2, [pc, #140]	; (8006cb0 <HAL_DMA_Abort+0x464>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d022      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a21      	ldr	r2, [pc, #132]	; (8006cb4 <HAL_DMA_Abort+0x468>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d01d      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a20      	ldr	r2, [pc, #128]	; (8006cb8 <HAL_DMA_Abort+0x46c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d018      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a1e      	ldr	r2, [pc, #120]	; (8006cbc <HAL_DMA_Abort+0x470>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d013      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4a1d      	ldr	r2, [pc, #116]	; (8006cc0 <HAL_DMA_Abort+0x474>)
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	d00e      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a1b      	ldr	r2, [pc, #108]	; (8006cc4 <HAL_DMA_Abort+0x478>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d009      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a1a      	ldr	r2, [pc, #104]	; (8006cc8 <HAL_DMA_Abort+0x47c>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d004      	beq.n	8006c6e <HAL_DMA_Abort+0x422>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a18      	ldr	r2, [pc, #96]	; (8006ccc <HAL_DMA_Abort+0x480>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d101      	bne.n	8006c72 <HAL_DMA_Abort+0x426>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <HAL_DMA_Abort+0x428>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d02b      	beq.n	8006cd0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c7c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c82:	f003 031f 	and.w	r3, r3, #31
 8006c86:	223f      	movs	r2, #63	; 0x3f
 8006c88:	409a      	lsls	r2, r3
 8006c8a:	68bb      	ldr	r3, [r7, #8]
 8006c8c:	609a      	str	r2, [r3, #8]
 8006c8e:	e02a      	b.n	8006ce6 <HAL_DMA_Abort+0x49a>
 8006c90:	40020010 	.word	0x40020010
 8006c94:	40020028 	.word	0x40020028
 8006c98:	40020040 	.word	0x40020040
 8006c9c:	40020058 	.word	0x40020058
 8006ca0:	40020070 	.word	0x40020070
 8006ca4:	40020088 	.word	0x40020088
 8006ca8:	400200a0 	.word	0x400200a0
 8006cac:	400200b8 	.word	0x400200b8
 8006cb0:	40020410 	.word	0x40020410
 8006cb4:	40020428 	.word	0x40020428
 8006cb8:	40020440 	.word	0x40020440
 8006cbc:	40020458 	.word	0x40020458
 8006cc0:	40020470 	.word	0x40020470
 8006cc4:	40020488 	.word	0x40020488
 8006cc8:	400204a0 	.word	0x400204a0
 8006ccc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cd4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cda:	f003 031f 	and.w	r3, r3, #31
 8006cde:	2201      	movs	r2, #1
 8006ce0:	409a      	lsls	r2, r3
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a4f      	ldr	r2, [pc, #316]	; (8006e28 <HAL_DMA_Abort+0x5dc>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d072      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a4d      	ldr	r2, [pc, #308]	; (8006e2c <HAL_DMA_Abort+0x5e0>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d06d      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a4c      	ldr	r2, [pc, #304]	; (8006e30 <HAL_DMA_Abort+0x5e4>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d068      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a4a      	ldr	r2, [pc, #296]	; (8006e34 <HAL_DMA_Abort+0x5e8>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d063      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a49      	ldr	r2, [pc, #292]	; (8006e38 <HAL_DMA_Abort+0x5ec>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d05e      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a47      	ldr	r2, [pc, #284]	; (8006e3c <HAL_DMA_Abort+0x5f0>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d059      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a46      	ldr	r2, [pc, #280]	; (8006e40 <HAL_DMA_Abort+0x5f4>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d054      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a44      	ldr	r2, [pc, #272]	; (8006e44 <HAL_DMA_Abort+0x5f8>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d04f      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a43      	ldr	r2, [pc, #268]	; (8006e48 <HAL_DMA_Abort+0x5fc>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d04a      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a41      	ldr	r2, [pc, #260]	; (8006e4c <HAL_DMA_Abort+0x600>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d045      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	4a40      	ldr	r2, [pc, #256]	; (8006e50 <HAL_DMA_Abort+0x604>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d040      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	4a3e      	ldr	r2, [pc, #248]	; (8006e54 <HAL_DMA_Abort+0x608>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d03b      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4a3d      	ldr	r2, [pc, #244]	; (8006e58 <HAL_DMA_Abort+0x60c>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d036      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	4a3b      	ldr	r2, [pc, #236]	; (8006e5c <HAL_DMA_Abort+0x610>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d031      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a3a      	ldr	r2, [pc, #232]	; (8006e60 <HAL_DMA_Abort+0x614>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d02c      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a38      	ldr	r2, [pc, #224]	; (8006e64 <HAL_DMA_Abort+0x618>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d027      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a37      	ldr	r2, [pc, #220]	; (8006e68 <HAL_DMA_Abort+0x61c>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d022      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4a35      	ldr	r2, [pc, #212]	; (8006e6c <HAL_DMA_Abort+0x620>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	d01d      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	4a34      	ldr	r2, [pc, #208]	; (8006e70 <HAL_DMA_Abort+0x624>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d018      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4a32      	ldr	r2, [pc, #200]	; (8006e74 <HAL_DMA_Abort+0x628>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d013      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a31      	ldr	r2, [pc, #196]	; (8006e78 <HAL_DMA_Abort+0x62c>)
 8006db4:	4293      	cmp	r3, r2
 8006db6:	d00e      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a2f      	ldr	r2, [pc, #188]	; (8006e7c <HAL_DMA_Abort+0x630>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d009      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	4a2e      	ldr	r2, [pc, #184]	; (8006e80 <HAL_DMA_Abort+0x634>)
 8006dc8:	4293      	cmp	r3, r2
 8006dca:	d004      	beq.n	8006dd6 <HAL_DMA_Abort+0x58a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a2c      	ldr	r2, [pc, #176]	; (8006e84 <HAL_DMA_Abort+0x638>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d101      	bne.n	8006dda <HAL_DMA_Abort+0x58e>
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e000      	b.n	8006ddc <HAL_DMA_Abort+0x590>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d015      	beq.n	8006e0c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006de8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00c      	beq.n	8006e0c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dfc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e00:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006e0a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop
 8006e28:	40020010 	.word	0x40020010
 8006e2c:	40020028 	.word	0x40020028
 8006e30:	40020040 	.word	0x40020040
 8006e34:	40020058 	.word	0x40020058
 8006e38:	40020070 	.word	0x40020070
 8006e3c:	40020088 	.word	0x40020088
 8006e40:	400200a0 	.word	0x400200a0
 8006e44:	400200b8 	.word	0x400200b8
 8006e48:	40020410 	.word	0x40020410
 8006e4c:	40020428 	.word	0x40020428
 8006e50:	40020440 	.word	0x40020440
 8006e54:	40020458 	.word	0x40020458
 8006e58:	40020470 	.word	0x40020470
 8006e5c:	40020488 	.word	0x40020488
 8006e60:	400204a0 	.word	0x400204a0
 8006e64:	400204b8 	.word	0x400204b8
 8006e68:	58025408 	.word	0x58025408
 8006e6c:	5802541c 	.word	0x5802541c
 8006e70:	58025430 	.word	0x58025430
 8006e74:	58025444 	.word	0x58025444
 8006e78:	58025458 	.word	0x58025458
 8006e7c:	5802546c 	.word	0x5802546c
 8006e80:	58025480 	.word	0x58025480
 8006e84:	58025494 	.word	0x58025494

08006e88 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d101      	bne.n	8006e9a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006e96:	2301      	movs	r3, #1
 8006e98:	e237      	b.n	800730a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d004      	beq.n	8006eb0 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2280      	movs	r2, #128	; 0x80
 8006eaa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	e22c      	b.n	800730a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	4a5c      	ldr	r2, [pc, #368]	; (8007028 <HAL_DMA_Abort_IT+0x1a0>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d04a      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a5b      	ldr	r2, [pc, #364]	; (800702c <HAL_DMA_Abort_IT+0x1a4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d045      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a59      	ldr	r2, [pc, #356]	; (8007030 <HAL_DMA_Abort_IT+0x1a8>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d040      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a58      	ldr	r2, [pc, #352]	; (8007034 <HAL_DMA_Abort_IT+0x1ac>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d03b      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a56      	ldr	r2, [pc, #344]	; (8007038 <HAL_DMA_Abort_IT+0x1b0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d036      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a55      	ldr	r2, [pc, #340]	; (800703c <HAL_DMA_Abort_IT+0x1b4>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d031      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a53      	ldr	r2, [pc, #332]	; (8007040 <HAL_DMA_Abort_IT+0x1b8>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d02c      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a52      	ldr	r2, [pc, #328]	; (8007044 <HAL_DMA_Abort_IT+0x1bc>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d027      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a50      	ldr	r2, [pc, #320]	; (8007048 <HAL_DMA_Abort_IT+0x1c0>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d022      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a4f      	ldr	r2, [pc, #316]	; (800704c <HAL_DMA_Abort_IT+0x1c4>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d01d      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a4d      	ldr	r2, [pc, #308]	; (8007050 <HAL_DMA_Abort_IT+0x1c8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d018      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a4c      	ldr	r2, [pc, #304]	; (8007054 <HAL_DMA_Abort_IT+0x1cc>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d013      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a4a      	ldr	r2, [pc, #296]	; (8007058 <HAL_DMA_Abort_IT+0x1d0>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d00e      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a49      	ldr	r2, [pc, #292]	; (800705c <HAL_DMA_Abort_IT+0x1d4>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d009      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a47      	ldr	r2, [pc, #284]	; (8007060 <HAL_DMA_Abort_IT+0x1d8>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d004      	beq.n	8006f50 <HAL_DMA_Abort_IT+0xc8>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a46      	ldr	r2, [pc, #280]	; (8007064 <HAL_DMA_Abort_IT+0x1dc>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d101      	bne.n	8006f54 <HAL_DMA_Abort_IT+0xcc>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <HAL_DMA_Abort_IT+0xce>
 8006f54:	2300      	movs	r3, #0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f000 8086 	beq.w	8007068 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a2f      	ldr	r2, [pc, #188]	; (8007028 <HAL_DMA_Abort_IT+0x1a0>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d04a      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a2e      	ldr	r2, [pc, #184]	; (800702c <HAL_DMA_Abort_IT+0x1a4>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d045      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a2c      	ldr	r2, [pc, #176]	; (8007030 <HAL_DMA_Abort_IT+0x1a8>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d040      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a2b      	ldr	r2, [pc, #172]	; (8007034 <HAL_DMA_Abort_IT+0x1ac>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d03b      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a29      	ldr	r2, [pc, #164]	; (8007038 <HAL_DMA_Abort_IT+0x1b0>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d036      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a28      	ldr	r2, [pc, #160]	; (800703c <HAL_DMA_Abort_IT+0x1b4>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d031      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a26      	ldr	r2, [pc, #152]	; (8007040 <HAL_DMA_Abort_IT+0x1b8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d02c      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a25      	ldr	r2, [pc, #148]	; (8007044 <HAL_DMA_Abort_IT+0x1bc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d027      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a23      	ldr	r2, [pc, #140]	; (8007048 <HAL_DMA_Abort_IT+0x1c0>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d022      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	4a22      	ldr	r2, [pc, #136]	; (800704c <HAL_DMA_Abort_IT+0x1c4>)
 8006fc4:	4293      	cmp	r3, r2
 8006fc6:	d01d      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a20      	ldr	r2, [pc, #128]	; (8007050 <HAL_DMA_Abort_IT+0x1c8>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d018      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	4a1f      	ldr	r2, [pc, #124]	; (8007054 <HAL_DMA_Abort_IT+0x1cc>)
 8006fd8:	4293      	cmp	r3, r2
 8006fda:	d013      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	4a1d      	ldr	r2, [pc, #116]	; (8007058 <HAL_DMA_Abort_IT+0x1d0>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d00e      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a1c      	ldr	r2, [pc, #112]	; (800705c <HAL_DMA_Abort_IT+0x1d4>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d009      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a1a      	ldr	r2, [pc, #104]	; (8007060 <HAL_DMA_Abort_IT+0x1d8>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d004      	beq.n	8007004 <HAL_DMA_Abort_IT+0x17c>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	4a19      	ldr	r2, [pc, #100]	; (8007064 <HAL_DMA_Abort_IT+0x1dc>)
 8007000:	4293      	cmp	r3, r2
 8007002:	d108      	bne.n	8007016 <HAL_DMA_Abort_IT+0x18e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 0201 	bic.w	r2, r2, #1
 8007012:	601a      	str	r2, [r3, #0]
 8007014:	e178      	b.n	8007308 <HAL_DMA_Abort_IT+0x480>
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0201 	bic.w	r2, r2, #1
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	e16f      	b.n	8007308 <HAL_DMA_Abort_IT+0x480>
 8007028:	40020010 	.word	0x40020010
 800702c:	40020028 	.word	0x40020028
 8007030:	40020040 	.word	0x40020040
 8007034:	40020058 	.word	0x40020058
 8007038:	40020070 	.word	0x40020070
 800703c:	40020088 	.word	0x40020088
 8007040:	400200a0 	.word	0x400200a0
 8007044:	400200b8 	.word	0x400200b8
 8007048:	40020410 	.word	0x40020410
 800704c:	40020428 	.word	0x40020428
 8007050:	40020440 	.word	0x40020440
 8007054:	40020458 	.word	0x40020458
 8007058:	40020470 	.word	0x40020470
 800705c:	40020488 	.word	0x40020488
 8007060:	400204a0 	.word	0x400204a0
 8007064:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	681a      	ldr	r2, [r3, #0]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f022 020e 	bic.w	r2, r2, #14
 8007076:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a6c      	ldr	r2, [pc, #432]	; (8007230 <HAL_DMA_Abort_IT+0x3a8>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d04a      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a6b      	ldr	r2, [pc, #428]	; (8007234 <HAL_DMA_Abort_IT+0x3ac>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d045      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a69      	ldr	r2, [pc, #420]	; (8007238 <HAL_DMA_Abort_IT+0x3b0>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d040      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a68      	ldr	r2, [pc, #416]	; (800723c <HAL_DMA_Abort_IT+0x3b4>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d03b      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a66      	ldr	r2, [pc, #408]	; (8007240 <HAL_DMA_Abort_IT+0x3b8>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d036      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a65      	ldr	r2, [pc, #404]	; (8007244 <HAL_DMA_Abort_IT+0x3bc>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d031      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a63      	ldr	r2, [pc, #396]	; (8007248 <HAL_DMA_Abort_IT+0x3c0>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d02c      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a62      	ldr	r2, [pc, #392]	; (800724c <HAL_DMA_Abort_IT+0x3c4>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d027      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a60      	ldr	r2, [pc, #384]	; (8007250 <HAL_DMA_Abort_IT+0x3c8>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d022      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a5f      	ldr	r2, [pc, #380]	; (8007254 <HAL_DMA_Abort_IT+0x3cc>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d01d      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a5d      	ldr	r2, [pc, #372]	; (8007258 <HAL_DMA_Abort_IT+0x3d0>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d018      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a5c      	ldr	r2, [pc, #368]	; (800725c <HAL_DMA_Abort_IT+0x3d4>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d013      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a5a      	ldr	r2, [pc, #360]	; (8007260 <HAL_DMA_Abort_IT+0x3d8>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d00e      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a59      	ldr	r2, [pc, #356]	; (8007264 <HAL_DMA_Abort_IT+0x3dc>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d009      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a57      	ldr	r2, [pc, #348]	; (8007268 <HAL_DMA_Abort_IT+0x3e0>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d004      	beq.n	8007118 <HAL_DMA_Abort_IT+0x290>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a56      	ldr	r2, [pc, #344]	; (800726c <HAL_DMA_Abort_IT+0x3e4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d108      	bne.n	800712a <HAL_DMA_Abort_IT+0x2a2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	681a      	ldr	r2, [r3, #0]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f022 0201 	bic.w	r2, r2, #1
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	e007      	b.n	800713a <HAL_DMA_Abort_IT+0x2b2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f022 0201 	bic.w	r2, r2, #1
 8007138:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	4a3c      	ldr	r2, [pc, #240]	; (8007230 <HAL_DMA_Abort_IT+0x3a8>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d072      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a3a      	ldr	r2, [pc, #232]	; (8007234 <HAL_DMA_Abort_IT+0x3ac>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d06d      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	4a39      	ldr	r2, [pc, #228]	; (8007238 <HAL_DMA_Abort_IT+0x3b0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d068      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a37      	ldr	r2, [pc, #220]	; (800723c <HAL_DMA_Abort_IT+0x3b4>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d063      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a36      	ldr	r2, [pc, #216]	; (8007240 <HAL_DMA_Abort_IT+0x3b8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d05e      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a34      	ldr	r2, [pc, #208]	; (8007244 <HAL_DMA_Abort_IT+0x3bc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d059      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	4a33      	ldr	r2, [pc, #204]	; (8007248 <HAL_DMA_Abort_IT+0x3c0>)
 800717c:	4293      	cmp	r3, r2
 800717e:	d054      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	4a31      	ldr	r2, [pc, #196]	; (800724c <HAL_DMA_Abort_IT+0x3c4>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d04f      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	4a30      	ldr	r2, [pc, #192]	; (8007250 <HAL_DMA_Abort_IT+0x3c8>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d04a      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	4a2e      	ldr	r2, [pc, #184]	; (8007254 <HAL_DMA_Abort_IT+0x3cc>)
 800719a:	4293      	cmp	r3, r2
 800719c:	d045      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	4a2d      	ldr	r2, [pc, #180]	; (8007258 <HAL_DMA_Abort_IT+0x3d0>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d040      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a2b      	ldr	r2, [pc, #172]	; (800725c <HAL_DMA_Abort_IT+0x3d4>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d03b      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4a2a      	ldr	r2, [pc, #168]	; (8007260 <HAL_DMA_Abort_IT+0x3d8>)
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d036      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a28      	ldr	r2, [pc, #160]	; (8007264 <HAL_DMA_Abort_IT+0x3dc>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d031      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a27      	ldr	r2, [pc, #156]	; (8007268 <HAL_DMA_Abort_IT+0x3e0>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d02c      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a25      	ldr	r2, [pc, #148]	; (800726c <HAL_DMA_Abort_IT+0x3e4>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d027      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a24      	ldr	r2, [pc, #144]	; (8007270 <HAL_DMA_Abort_IT+0x3e8>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d022      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a22      	ldr	r2, [pc, #136]	; (8007274 <HAL_DMA_Abort_IT+0x3ec>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d01d      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a21      	ldr	r2, [pc, #132]	; (8007278 <HAL_DMA_Abort_IT+0x3f0>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d018      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a1f      	ldr	r2, [pc, #124]	; (800727c <HAL_DMA_Abort_IT+0x3f4>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d013      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a1e      	ldr	r2, [pc, #120]	; (8007280 <HAL_DMA_Abort_IT+0x3f8>)
 8007208:	4293      	cmp	r3, r2
 800720a:	d00e      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1c      	ldr	r2, [pc, #112]	; (8007284 <HAL_DMA_Abort_IT+0x3fc>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d009      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1b      	ldr	r2, [pc, #108]	; (8007288 <HAL_DMA_Abort_IT+0x400>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d004      	beq.n	800722a <HAL_DMA_Abort_IT+0x3a2>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a19      	ldr	r2, [pc, #100]	; (800728c <HAL_DMA_Abort_IT+0x404>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d132      	bne.n	8007290 <HAL_DMA_Abort_IT+0x408>
 800722a:	2301      	movs	r3, #1
 800722c:	e031      	b.n	8007292 <HAL_DMA_Abort_IT+0x40a>
 800722e:	bf00      	nop
 8007230:	40020010 	.word	0x40020010
 8007234:	40020028 	.word	0x40020028
 8007238:	40020040 	.word	0x40020040
 800723c:	40020058 	.word	0x40020058
 8007240:	40020070 	.word	0x40020070
 8007244:	40020088 	.word	0x40020088
 8007248:	400200a0 	.word	0x400200a0
 800724c:	400200b8 	.word	0x400200b8
 8007250:	40020410 	.word	0x40020410
 8007254:	40020428 	.word	0x40020428
 8007258:	40020440 	.word	0x40020440
 800725c:	40020458 	.word	0x40020458
 8007260:	40020470 	.word	0x40020470
 8007264:	40020488 	.word	0x40020488
 8007268:	400204a0 	.word	0x400204a0
 800726c:	400204b8 	.word	0x400204b8
 8007270:	58025408 	.word	0x58025408
 8007274:	5802541c 	.word	0x5802541c
 8007278:	58025430 	.word	0x58025430
 800727c:	58025444 	.word	0x58025444
 8007280:	58025458 	.word	0x58025458
 8007284:	5802546c 	.word	0x5802546c
 8007288:	58025480 	.word	0x58025480
 800728c:	58025494 	.word	0x58025494
 8007290:	2300      	movs	r3, #0
 8007292:	2b00      	cmp	r3, #0
 8007294:	d028      	beq.n	80072e8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800729a:	681a      	ldr	r2, [r3, #0]
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80072a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072a4:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072aa:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072b0:	f003 031f 	and.w	r3, r3, #31
 80072b4:	2201      	movs	r2, #1
 80072b6:	409a      	lsls	r2, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072c0:	687a      	ldr	r2, [r7, #4]
 80072c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072c4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d00c      	beq.n	80072e8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80072dc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	687a      	ldr	r2, [r7, #4]
 80072e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072e6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8007308:	2300      	movs	r3, #0
}
 800730a:	4618      	mov	r0, r3
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop

08007314 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b08a      	sub	sp, #40	; 0x28
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007320:	4b67      	ldr	r3, [pc, #412]	; (80074c0 <HAL_DMA_IRQHandler+0x1ac>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a67      	ldr	r2, [pc, #412]	; (80074c4 <HAL_DMA_IRQHandler+0x1b0>)
 8007326:	fba2 2303 	umull	r2, r3, r2, r3
 800732a:	0a9b      	lsrs	r3, r3, #10
 800732c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007332:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007338:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800733a:	6a3b      	ldr	r3, [r7, #32]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a5f      	ldr	r2, [pc, #380]	; (80074c8 <HAL_DMA_IRQHandler+0x1b4>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d04a      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a5d      	ldr	r2, [pc, #372]	; (80074cc <HAL_DMA_IRQHandler+0x1b8>)
 8007356:	4293      	cmp	r3, r2
 8007358:	d045      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a5c      	ldr	r2, [pc, #368]	; (80074d0 <HAL_DMA_IRQHandler+0x1bc>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d040      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4a5a      	ldr	r2, [pc, #360]	; (80074d4 <HAL_DMA_IRQHandler+0x1c0>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d03b      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4a59      	ldr	r2, [pc, #356]	; (80074d8 <HAL_DMA_IRQHandler+0x1c4>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d036      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	4a57      	ldr	r2, [pc, #348]	; (80074dc <HAL_DMA_IRQHandler+0x1c8>)
 800737e:	4293      	cmp	r3, r2
 8007380:	d031      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	4a56      	ldr	r2, [pc, #344]	; (80074e0 <HAL_DMA_IRQHandler+0x1cc>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d02c      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	4a54      	ldr	r2, [pc, #336]	; (80074e4 <HAL_DMA_IRQHandler+0x1d0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d027      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	4a53      	ldr	r2, [pc, #332]	; (80074e8 <HAL_DMA_IRQHandler+0x1d4>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d022      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a51      	ldr	r2, [pc, #324]	; (80074ec <HAL_DMA_IRQHandler+0x1d8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d01d      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a50      	ldr	r2, [pc, #320]	; (80074f0 <HAL_DMA_IRQHandler+0x1dc>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d018      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a4e      	ldr	r2, [pc, #312]	; (80074f4 <HAL_DMA_IRQHandler+0x1e0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d013      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a4d      	ldr	r2, [pc, #308]	; (80074f8 <HAL_DMA_IRQHandler+0x1e4>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d00e      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a4b      	ldr	r2, [pc, #300]	; (80074fc <HAL_DMA_IRQHandler+0x1e8>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d009      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a4a      	ldr	r2, [pc, #296]	; (8007500 <HAL_DMA_IRQHandler+0x1ec>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d004      	beq.n	80073e6 <HAL_DMA_IRQHandler+0xd2>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a48      	ldr	r2, [pc, #288]	; (8007504 <HAL_DMA_IRQHandler+0x1f0>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d101      	bne.n	80073ea <HAL_DMA_IRQHandler+0xd6>
 80073e6:	2301      	movs	r3, #1
 80073e8:	e000      	b.n	80073ec <HAL_DMA_IRQHandler+0xd8>
 80073ea:	2300      	movs	r3, #0
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 842b 	beq.w	8007c48 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073f6:	f003 031f 	and.w	r3, r3, #31
 80073fa:	2208      	movs	r2, #8
 80073fc:	409a      	lsls	r2, r3
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	4013      	ands	r3, r2
 8007402:	2b00      	cmp	r3, #0
 8007404:	f000 80a2 	beq.w	800754c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a2e      	ldr	r2, [pc, #184]	; (80074c8 <HAL_DMA_IRQHandler+0x1b4>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d04a      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a2d      	ldr	r2, [pc, #180]	; (80074cc <HAL_DMA_IRQHandler+0x1b8>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d045      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	4a2b      	ldr	r2, [pc, #172]	; (80074d0 <HAL_DMA_IRQHandler+0x1bc>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d040      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a2a      	ldr	r2, [pc, #168]	; (80074d4 <HAL_DMA_IRQHandler+0x1c0>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d03b      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a28      	ldr	r2, [pc, #160]	; (80074d8 <HAL_DMA_IRQHandler+0x1c4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d036      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a27      	ldr	r2, [pc, #156]	; (80074dc <HAL_DMA_IRQHandler+0x1c8>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d031      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a25      	ldr	r2, [pc, #148]	; (80074e0 <HAL_DMA_IRQHandler+0x1cc>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d02c      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	4a24      	ldr	r2, [pc, #144]	; (80074e4 <HAL_DMA_IRQHandler+0x1d0>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d027      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a22      	ldr	r2, [pc, #136]	; (80074e8 <HAL_DMA_IRQHandler+0x1d4>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d022      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a21      	ldr	r2, [pc, #132]	; (80074ec <HAL_DMA_IRQHandler+0x1d8>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d01d      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1f      	ldr	r2, [pc, #124]	; (80074f0 <HAL_DMA_IRQHandler+0x1dc>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d018      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1e      	ldr	r2, [pc, #120]	; (80074f4 <HAL_DMA_IRQHandler+0x1e0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d013      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1c      	ldr	r2, [pc, #112]	; (80074f8 <HAL_DMA_IRQHandler+0x1e4>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d00e      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1b      	ldr	r2, [pc, #108]	; (80074fc <HAL_DMA_IRQHandler+0x1e8>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d009      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a19      	ldr	r2, [pc, #100]	; (8007500 <HAL_DMA_IRQHandler+0x1ec>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d004      	beq.n	80074a8 <HAL_DMA_IRQHandler+0x194>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <HAL_DMA_IRQHandler+0x1f0>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d12f      	bne.n	8007508 <HAL_DMA_IRQHandler+0x1f4>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f003 0304 	and.w	r3, r3, #4
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	bf14      	ite	ne
 80074b6:	2301      	movne	r3, #1
 80074b8:	2300      	moveq	r3, #0
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	e02e      	b.n	800751c <HAL_DMA_IRQHandler+0x208>
 80074be:	bf00      	nop
 80074c0:	24000090 	.word	0x24000090
 80074c4:	1b4e81b5 	.word	0x1b4e81b5
 80074c8:	40020010 	.word	0x40020010
 80074cc:	40020028 	.word	0x40020028
 80074d0:	40020040 	.word	0x40020040
 80074d4:	40020058 	.word	0x40020058
 80074d8:	40020070 	.word	0x40020070
 80074dc:	40020088 	.word	0x40020088
 80074e0:	400200a0 	.word	0x400200a0
 80074e4:	400200b8 	.word	0x400200b8
 80074e8:	40020410 	.word	0x40020410
 80074ec:	40020428 	.word	0x40020428
 80074f0:	40020440 	.word	0x40020440
 80074f4:	40020458 	.word	0x40020458
 80074f8:	40020470 	.word	0x40020470
 80074fc:	40020488 	.word	0x40020488
 8007500:	400204a0 	.word	0x400204a0
 8007504:	400204b8 	.word	0x400204b8
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 0308 	and.w	r3, r3, #8
 8007512:	2b00      	cmp	r3, #0
 8007514:	bf14      	ite	ne
 8007516:	2301      	movne	r3, #1
 8007518:	2300      	moveq	r3, #0
 800751a:	b2db      	uxtb	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	d015      	beq.n	800754c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 0204 	bic.w	r2, r2, #4
 800752e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007534:	f003 031f 	and.w	r3, r3, #31
 8007538:	2208      	movs	r2, #8
 800753a:	409a      	lsls	r2, r3
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007544:	f043 0201 	orr.w	r2, r3, #1
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007550:	f003 031f 	and.w	r3, r3, #31
 8007554:	69ba      	ldr	r2, [r7, #24]
 8007556:	fa22 f303 	lsr.w	r3, r2, r3
 800755a:	f003 0301 	and.w	r3, r3, #1
 800755e:	2b00      	cmp	r3, #0
 8007560:	d06e      	beq.n	8007640 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	4a69      	ldr	r2, [pc, #420]	; (800770c <HAL_DMA_IRQHandler+0x3f8>)
 8007568:	4293      	cmp	r3, r2
 800756a:	d04a      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a67      	ldr	r2, [pc, #412]	; (8007710 <HAL_DMA_IRQHandler+0x3fc>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d045      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	4a66      	ldr	r2, [pc, #408]	; (8007714 <HAL_DMA_IRQHandler+0x400>)
 800757c:	4293      	cmp	r3, r2
 800757e:	d040      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a64      	ldr	r2, [pc, #400]	; (8007718 <HAL_DMA_IRQHandler+0x404>)
 8007586:	4293      	cmp	r3, r2
 8007588:	d03b      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	4a63      	ldr	r2, [pc, #396]	; (800771c <HAL_DMA_IRQHandler+0x408>)
 8007590:	4293      	cmp	r3, r2
 8007592:	d036      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	4a61      	ldr	r2, [pc, #388]	; (8007720 <HAL_DMA_IRQHandler+0x40c>)
 800759a:	4293      	cmp	r3, r2
 800759c:	d031      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a60      	ldr	r2, [pc, #384]	; (8007724 <HAL_DMA_IRQHandler+0x410>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d02c      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a5e      	ldr	r2, [pc, #376]	; (8007728 <HAL_DMA_IRQHandler+0x414>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d027      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a5d      	ldr	r2, [pc, #372]	; (800772c <HAL_DMA_IRQHandler+0x418>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d022      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	4a5b      	ldr	r2, [pc, #364]	; (8007730 <HAL_DMA_IRQHandler+0x41c>)
 80075c2:	4293      	cmp	r3, r2
 80075c4:	d01d      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a5a      	ldr	r2, [pc, #360]	; (8007734 <HAL_DMA_IRQHandler+0x420>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d018      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	4a58      	ldr	r2, [pc, #352]	; (8007738 <HAL_DMA_IRQHandler+0x424>)
 80075d6:	4293      	cmp	r3, r2
 80075d8:	d013      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	4a57      	ldr	r2, [pc, #348]	; (800773c <HAL_DMA_IRQHandler+0x428>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00e      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	4a55      	ldr	r2, [pc, #340]	; (8007740 <HAL_DMA_IRQHandler+0x42c>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d009      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	4a54      	ldr	r2, [pc, #336]	; (8007744 <HAL_DMA_IRQHandler+0x430>)
 80075f4:	4293      	cmp	r3, r2
 80075f6:	d004      	beq.n	8007602 <HAL_DMA_IRQHandler+0x2ee>
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4a52      	ldr	r2, [pc, #328]	; (8007748 <HAL_DMA_IRQHandler+0x434>)
 80075fe:	4293      	cmp	r3, r2
 8007600:	d10a      	bne.n	8007618 <HAL_DMA_IRQHandler+0x304>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800760c:	2b00      	cmp	r3, #0
 800760e:	bf14      	ite	ne
 8007610:	2301      	movne	r3, #1
 8007612:	2300      	moveq	r3, #0
 8007614:	b2db      	uxtb	r3, r3
 8007616:	e003      	b.n	8007620 <HAL_DMA_IRQHandler+0x30c>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2300      	movs	r3, #0
 8007620:	2b00      	cmp	r3, #0
 8007622:	d00d      	beq.n	8007640 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007628:	f003 031f 	and.w	r3, r3, #31
 800762c:	2201      	movs	r2, #1
 800762e:	409a      	lsls	r2, r3
 8007630:	6a3b      	ldr	r3, [r7, #32]
 8007632:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007638:	f043 0202 	orr.w	r2, r3, #2
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007644:	f003 031f 	and.w	r3, r3, #31
 8007648:	2204      	movs	r2, #4
 800764a:	409a      	lsls	r2, r3
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	4013      	ands	r3, r2
 8007650:	2b00      	cmp	r3, #0
 8007652:	f000 808f 	beq.w	8007774 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a2c      	ldr	r2, [pc, #176]	; (800770c <HAL_DMA_IRQHandler+0x3f8>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d04a      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	4a2a      	ldr	r2, [pc, #168]	; (8007710 <HAL_DMA_IRQHandler+0x3fc>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d045      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4a29      	ldr	r2, [pc, #164]	; (8007714 <HAL_DMA_IRQHandler+0x400>)
 8007670:	4293      	cmp	r3, r2
 8007672:	d040      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	4a27      	ldr	r2, [pc, #156]	; (8007718 <HAL_DMA_IRQHandler+0x404>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d03b      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	4a26      	ldr	r2, [pc, #152]	; (800771c <HAL_DMA_IRQHandler+0x408>)
 8007684:	4293      	cmp	r3, r2
 8007686:	d036      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a24      	ldr	r2, [pc, #144]	; (8007720 <HAL_DMA_IRQHandler+0x40c>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d031      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a23      	ldr	r2, [pc, #140]	; (8007724 <HAL_DMA_IRQHandler+0x410>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d02c      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	4a21      	ldr	r2, [pc, #132]	; (8007728 <HAL_DMA_IRQHandler+0x414>)
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d027      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a20      	ldr	r2, [pc, #128]	; (800772c <HAL_DMA_IRQHandler+0x418>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d022      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1e      	ldr	r2, [pc, #120]	; (8007730 <HAL_DMA_IRQHandler+0x41c>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d01d      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <HAL_DMA_IRQHandler+0x420>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d018      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a1b      	ldr	r2, [pc, #108]	; (8007738 <HAL_DMA_IRQHandler+0x424>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d013      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a1a      	ldr	r2, [pc, #104]	; (800773c <HAL_DMA_IRQHandler+0x428>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d00e      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a18      	ldr	r2, [pc, #96]	; (8007740 <HAL_DMA_IRQHandler+0x42c>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d009      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4a17      	ldr	r2, [pc, #92]	; (8007744 <HAL_DMA_IRQHandler+0x430>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d004      	beq.n	80076f6 <HAL_DMA_IRQHandler+0x3e2>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a15      	ldr	r2, [pc, #84]	; (8007748 <HAL_DMA_IRQHandler+0x434>)
 80076f2:	4293      	cmp	r3, r2
 80076f4:	d12a      	bne.n	800774c <HAL_DMA_IRQHandler+0x438>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0302 	and.w	r3, r3, #2
 8007700:	2b00      	cmp	r3, #0
 8007702:	bf14      	ite	ne
 8007704:	2301      	movne	r3, #1
 8007706:	2300      	moveq	r3, #0
 8007708:	b2db      	uxtb	r3, r3
 800770a:	e023      	b.n	8007754 <HAL_DMA_IRQHandler+0x440>
 800770c:	40020010 	.word	0x40020010
 8007710:	40020028 	.word	0x40020028
 8007714:	40020040 	.word	0x40020040
 8007718:	40020058 	.word	0x40020058
 800771c:	40020070 	.word	0x40020070
 8007720:	40020088 	.word	0x40020088
 8007724:	400200a0 	.word	0x400200a0
 8007728:	400200b8 	.word	0x400200b8
 800772c:	40020410 	.word	0x40020410
 8007730:	40020428 	.word	0x40020428
 8007734:	40020440 	.word	0x40020440
 8007738:	40020458 	.word	0x40020458
 800773c:	40020470 	.word	0x40020470
 8007740:	40020488 	.word	0x40020488
 8007744:	400204a0 	.word	0x400204a0
 8007748:	400204b8 	.word	0x400204b8
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2300      	movs	r3, #0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00d      	beq.n	8007774 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800775c:	f003 031f 	and.w	r3, r3, #31
 8007760:	2204      	movs	r2, #4
 8007762:	409a      	lsls	r2, r3
 8007764:	6a3b      	ldr	r3, [r7, #32]
 8007766:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800776c:	f043 0204 	orr.w	r2, r3, #4
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007778:	f003 031f 	and.w	r3, r3, #31
 800777c:	2210      	movs	r2, #16
 800777e:	409a      	lsls	r2, r3
 8007780:	69bb      	ldr	r3, [r7, #24]
 8007782:	4013      	ands	r3, r2
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80a6 	beq.w	80078d6 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a85      	ldr	r2, [pc, #532]	; (80079a4 <HAL_DMA_IRQHandler+0x690>)
 8007790:	4293      	cmp	r3, r2
 8007792:	d04a      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a83      	ldr	r2, [pc, #524]	; (80079a8 <HAL_DMA_IRQHandler+0x694>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d045      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	4a82      	ldr	r2, [pc, #520]	; (80079ac <HAL_DMA_IRQHandler+0x698>)
 80077a4:	4293      	cmp	r3, r2
 80077a6:	d040      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	4a80      	ldr	r2, [pc, #512]	; (80079b0 <HAL_DMA_IRQHandler+0x69c>)
 80077ae:	4293      	cmp	r3, r2
 80077b0:	d03b      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	4a7f      	ldr	r2, [pc, #508]	; (80079b4 <HAL_DMA_IRQHandler+0x6a0>)
 80077b8:	4293      	cmp	r3, r2
 80077ba:	d036      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	4a7d      	ldr	r2, [pc, #500]	; (80079b8 <HAL_DMA_IRQHandler+0x6a4>)
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d031      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a7c      	ldr	r2, [pc, #496]	; (80079bc <HAL_DMA_IRQHandler+0x6a8>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d02c      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a7a      	ldr	r2, [pc, #488]	; (80079c0 <HAL_DMA_IRQHandler+0x6ac>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d027      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a79      	ldr	r2, [pc, #484]	; (80079c4 <HAL_DMA_IRQHandler+0x6b0>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d022      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	4a77      	ldr	r2, [pc, #476]	; (80079c8 <HAL_DMA_IRQHandler+0x6b4>)
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d01d      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	4a76      	ldr	r2, [pc, #472]	; (80079cc <HAL_DMA_IRQHandler+0x6b8>)
 80077f4:	4293      	cmp	r3, r2
 80077f6:	d018      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	4a74      	ldr	r2, [pc, #464]	; (80079d0 <HAL_DMA_IRQHandler+0x6bc>)
 80077fe:	4293      	cmp	r3, r2
 8007800:	d013      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	4a73      	ldr	r2, [pc, #460]	; (80079d4 <HAL_DMA_IRQHandler+0x6c0>)
 8007808:	4293      	cmp	r3, r2
 800780a:	d00e      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a71      	ldr	r2, [pc, #452]	; (80079d8 <HAL_DMA_IRQHandler+0x6c4>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d009      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	4a70      	ldr	r2, [pc, #448]	; (80079dc <HAL_DMA_IRQHandler+0x6c8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d004      	beq.n	800782a <HAL_DMA_IRQHandler+0x516>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a6e      	ldr	r2, [pc, #440]	; (80079e0 <HAL_DMA_IRQHandler+0x6cc>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d10a      	bne.n	8007840 <HAL_DMA_IRQHandler+0x52c>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f003 0308 	and.w	r3, r3, #8
 8007834:	2b00      	cmp	r3, #0
 8007836:	bf14      	ite	ne
 8007838:	2301      	movne	r3, #1
 800783a:	2300      	moveq	r3, #0
 800783c:	b2db      	uxtb	r3, r3
 800783e:	e009      	b.n	8007854 <HAL_DMA_IRQHandler+0x540>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f003 0304 	and.w	r3, r3, #4
 800784a:	2b00      	cmp	r3, #0
 800784c:	bf14      	ite	ne
 800784e:	2301      	movne	r3, #1
 8007850:	2300      	moveq	r3, #0
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d03e      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800785c:	f003 031f 	and.w	r3, r3, #31
 8007860:	2210      	movs	r2, #16
 8007862:	409a      	lsls	r2, r3
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007872:	2b00      	cmp	r3, #0
 8007874:	d018      	beq.n	80078a8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d108      	bne.n	8007896 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d024      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	4798      	blx	r3
 8007894:	e01f      	b.n	80078d6 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01b      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078a2:	6878      	ldr	r0, [r7, #4]
 80078a4:	4798      	blx	r3
 80078a6:	e016      	b.n	80078d6 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d107      	bne.n	80078c6 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	681a      	ldr	r2, [r3, #0]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f022 0208 	bic.w	r2, r2, #8
 80078c4:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d003      	beq.n	80078d6 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80078da:	f003 031f 	and.w	r3, r3, #31
 80078de:	2220      	movs	r2, #32
 80078e0:	409a      	lsls	r2, r3
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	4013      	ands	r3, r2
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 8110 	beq.w	8007b0c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	4a2c      	ldr	r2, [pc, #176]	; (80079a4 <HAL_DMA_IRQHandler+0x690>)
 80078f2:	4293      	cmp	r3, r2
 80078f4:	d04a      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a2b      	ldr	r2, [pc, #172]	; (80079a8 <HAL_DMA_IRQHandler+0x694>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d045      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a29      	ldr	r2, [pc, #164]	; (80079ac <HAL_DMA_IRQHandler+0x698>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d040      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4a28      	ldr	r2, [pc, #160]	; (80079b0 <HAL_DMA_IRQHandler+0x69c>)
 8007910:	4293      	cmp	r3, r2
 8007912:	d03b      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a26      	ldr	r2, [pc, #152]	; (80079b4 <HAL_DMA_IRQHandler+0x6a0>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d036      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a25      	ldr	r2, [pc, #148]	; (80079b8 <HAL_DMA_IRQHandler+0x6a4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d031      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a23      	ldr	r2, [pc, #140]	; (80079bc <HAL_DMA_IRQHandler+0x6a8>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d02c      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a22      	ldr	r2, [pc, #136]	; (80079c0 <HAL_DMA_IRQHandler+0x6ac>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d027      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a20      	ldr	r2, [pc, #128]	; (80079c4 <HAL_DMA_IRQHandler+0x6b0>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d022      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a1f      	ldr	r2, [pc, #124]	; (80079c8 <HAL_DMA_IRQHandler+0x6b4>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d01d      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	4a1d      	ldr	r2, [pc, #116]	; (80079cc <HAL_DMA_IRQHandler+0x6b8>)
 8007956:	4293      	cmp	r3, r2
 8007958:	d018      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	4a1c      	ldr	r2, [pc, #112]	; (80079d0 <HAL_DMA_IRQHandler+0x6bc>)
 8007960:	4293      	cmp	r3, r2
 8007962:	d013      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a1a      	ldr	r2, [pc, #104]	; (80079d4 <HAL_DMA_IRQHandler+0x6c0>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d00e      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a19      	ldr	r2, [pc, #100]	; (80079d8 <HAL_DMA_IRQHandler+0x6c4>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d009      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a17      	ldr	r2, [pc, #92]	; (80079dc <HAL_DMA_IRQHandler+0x6c8>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d004      	beq.n	800798c <HAL_DMA_IRQHandler+0x678>
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a16      	ldr	r2, [pc, #88]	; (80079e0 <HAL_DMA_IRQHandler+0x6cc>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d12b      	bne.n	80079e4 <HAL_DMA_IRQHandler+0x6d0>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0310 	and.w	r3, r3, #16
 8007996:	2b00      	cmp	r3, #0
 8007998:	bf14      	ite	ne
 800799a:	2301      	movne	r3, #1
 800799c:	2300      	moveq	r3, #0
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	e02a      	b.n	80079f8 <HAL_DMA_IRQHandler+0x6e4>
 80079a2:	bf00      	nop
 80079a4:	40020010 	.word	0x40020010
 80079a8:	40020028 	.word	0x40020028
 80079ac:	40020040 	.word	0x40020040
 80079b0:	40020058 	.word	0x40020058
 80079b4:	40020070 	.word	0x40020070
 80079b8:	40020088 	.word	0x40020088
 80079bc:	400200a0 	.word	0x400200a0
 80079c0:	400200b8 	.word	0x400200b8
 80079c4:	40020410 	.word	0x40020410
 80079c8:	40020428 	.word	0x40020428
 80079cc:	40020440 	.word	0x40020440
 80079d0:	40020458 	.word	0x40020458
 80079d4:	40020470 	.word	0x40020470
 80079d8:	40020488 	.word	0x40020488
 80079dc:	400204a0 	.word	0x400204a0
 80079e0:	400204b8 	.word	0x400204b8
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0302 	and.w	r3, r3, #2
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	bf14      	ite	ne
 80079f2:	2301      	movne	r3, #1
 80079f4:	2300      	moveq	r3, #0
 80079f6:	b2db      	uxtb	r3, r3
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	f000 8087 	beq.w	8007b0c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a02:	f003 031f 	and.w	r3, r3, #31
 8007a06:	2220      	movs	r2, #32
 8007a08:	409a      	lsls	r2, r3
 8007a0a:	6a3b      	ldr	r3, [r7, #32]
 8007a0c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b04      	cmp	r3, #4
 8007a18:	d139      	bne.n	8007a8e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0216 	bic.w	r2, r2, #22
 8007a28:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695a      	ldr	r2, [r3, #20]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007a38:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d103      	bne.n	8007a4a <HAL_DMA_IRQHandler+0x736>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d007      	beq.n	8007a5a <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681a      	ldr	r2, [r3, #0]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0208 	bic.w	r2, r2, #8
 8007a58:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a5e:	f003 031f 	and.w	r3, r3, #31
 8007a62:	223f      	movs	r2, #63	; 0x3f
 8007a64:	409a      	lsls	r2, r3
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2201      	movs	r2, #1
 8007a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 834a 	beq.w	8008118 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	4798      	blx	r3
          }
          return;
 8007a8c:	e344      	b.n	8008118 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d018      	beq.n	8007ace <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d108      	bne.n	8007abc <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d02c      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	4798      	blx	r3
 8007aba:	e027      	b.n	8007b0c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d023      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	4798      	blx	r3
 8007acc:	e01e      	b.n	8007b0c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d10f      	bne.n	8007afc <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681a      	ldr	r2, [r3, #0]
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f022 0210 	bic.w	r2, r2, #16
 8007aea:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2201      	movs	r2, #1
 8007af0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2200      	movs	r2, #0
 8007af8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d003      	beq.n	8007b0c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	f000 8306 	beq.w	8008122 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 8088 	beq.w	8007c34 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2204      	movs	r2, #4
 8007b28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a7a      	ldr	r2, [pc, #488]	; (8007d1c <HAL_DMA_IRQHandler+0xa08>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d04a      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	4a79      	ldr	r2, [pc, #484]	; (8007d20 <HAL_DMA_IRQHandler+0xa0c>)
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d045      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	4a77      	ldr	r2, [pc, #476]	; (8007d24 <HAL_DMA_IRQHandler+0xa10>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d040      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a76      	ldr	r2, [pc, #472]	; (8007d28 <HAL_DMA_IRQHandler+0xa14>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d03b      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	4a74      	ldr	r2, [pc, #464]	; (8007d2c <HAL_DMA_IRQHandler+0xa18>)
 8007b5a:	4293      	cmp	r3, r2
 8007b5c:	d036      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a73      	ldr	r2, [pc, #460]	; (8007d30 <HAL_DMA_IRQHandler+0xa1c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d031      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a71      	ldr	r2, [pc, #452]	; (8007d34 <HAL_DMA_IRQHandler+0xa20>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d02c      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a70      	ldr	r2, [pc, #448]	; (8007d38 <HAL_DMA_IRQHandler+0xa24>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d027      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a6e      	ldr	r2, [pc, #440]	; (8007d3c <HAL_DMA_IRQHandler+0xa28>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d022      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a6d      	ldr	r2, [pc, #436]	; (8007d40 <HAL_DMA_IRQHandler+0xa2c>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d01d      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a6b      	ldr	r2, [pc, #428]	; (8007d44 <HAL_DMA_IRQHandler+0xa30>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d018      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	4a6a      	ldr	r2, [pc, #424]	; (8007d48 <HAL_DMA_IRQHandler+0xa34>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d013      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	4a68      	ldr	r2, [pc, #416]	; (8007d4c <HAL_DMA_IRQHandler+0xa38>)
 8007baa:	4293      	cmp	r3, r2
 8007bac:	d00e      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a67      	ldr	r2, [pc, #412]	; (8007d50 <HAL_DMA_IRQHandler+0xa3c>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d009      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a65      	ldr	r2, [pc, #404]	; (8007d54 <HAL_DMA_IRQHandler+0xa40>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d004      	beq.n	8007bcc <HAL_DMA_IRQHandler+0x8b8>
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	4a64      	ldr	r2, [pc, #400]	; (8007d58 <HAL_DMA_IRQHandler+0xa44>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d108      	bne.n	8007bde <HAL_DMA_IRQHandler+0x8ca>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f022 0201 	bic.w	r2, r2, #1
 8007bda:	601a      	str	r2, [r3, #0]
 8007bdc:	e007      	b.n	8007bee <HAL_DMA_IRQHandler+0x8da>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f022 0201 	bic.w	r2, r2, #1
 8007bec:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	60fb      	str	r3, [r7, #12]
 8007bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d307      	bcc.n	8007c0a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f003 0301 	and.w	r3, r3, #1
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d1f2      	bne.n	8007bee <HAL_DMA_IRQHandler+0x8da>
 8007c08:	e000      	b.n	8007c0c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007c0a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	f003 0301 	and.w	r3, r3, #1
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d004      	beq.n	8007c24 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	2203      	movs	r2, #3
 8007c1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007c22:	e003      	b.n	8007c2c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	2201      	movs	r2, #1
 8007c28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8272 	beq.w	8008122 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	4798      	blx	r3
 8007c46:	e26c      	b.n	8008122 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	4a43      	ldr	r2, [pc, #268]	; (8007d5c <HAL_DMA_IRQHandler+0xa48>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d022      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x984>
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a42      	ldr	r2, [pc, #264]	; (8007d60 <HAL_DMA_IRQHandler+0xa4c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d01d      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x984>
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a40      	ldr	r2, [pc, #256]	; (8007d64 <HAL_DMA_IRQHandler+0xa50>)
 8007c62:	4293      	cmp	r3, r2
 8007c64:	d018      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x984>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	4a3f      	ldr	r2, [pc, #252]	; (8007d68 <HAL_DMA_IRQHandler+0xa54>)
 8007c6c:	4293      	cmp	r3, r2
 8007c6e:	d013      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x984>
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	4a3d      	ldr	r2, [pc, #244]	; (8007d6c <HAL_DMA_IRQHandler+0xa58>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d00e      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x984>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	4a3c      	ldr	r2, [pc, #240]	; (8007d70 <HAL_DMA_IRQHandler+0xa5c>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d009      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x984>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4a3a      	ldr	r2, [pc, #232]	; (8007d74 <HAL_DMA_IRQHandler+0xa60>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <HAL_DMA_IRQHandler+0x984>
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	4a39      	ldr	r2, [pc, #228]	; (8007d78 <HAL_DMA_IRQHandler+0xa64>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d101      	bne.n	8007c9c <HAL_DMA_IRQHandler+0x988>
 8007c98:	2301      	movs	r3, #1
 8007c9a:	e000      	b.n	8007c9e <HAL_DMA_IRQHandler+0x98a>
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	f000 823f 	beq.w	8008122 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cb0:	f003 031f 	and.w	r3, r3, #31
 8007cb4:	2204      	movs	r2, #4
 8007cb6:	409a      	lsls	r2, r3
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	4013      	ands	r3, r2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	f000 80cd 	beq.w	8007e5c <HAL_DMA_IRQHandler+0xb48>
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 80c7 	beq.w	8007e5c <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd2:	f003 031f 	and.w	r3, r3, #31
 8007cd6:	2204      	movs	r2, #4
 8007cd8:	409a      	lsls	r2, r3
 8007cda:	69fb      	ldr	r3, [r7, #28]
 8007cdc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d049      	beq.n	8007d7c <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ce8:	693b      	ldr	r3, [r7, #16]
 8007cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d109      	bne.n	8007d06 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 8210 	beq.w	800811c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d04:	e20a      	b.n	800811c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f000 8206 	beq.w	800811c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007d18:	e200      	b.n	800811c <HAL_DMA_IRQHandler+0xe08>
 8007d1a:	bf00      	nop
 8007d1c:	40020010 	.word	0x40020010
 8007d20:	40020028 	.word	0x40020028
 8007d24:	40020040 	.word	0x40020040
 8007d28:	40020058 	.word	0x40020058
 8007d2c:	40020070 	.word	0x40020070
 8007d30:	40020088 	.word	0x40020088
 8007d34:	400200a0 	.word	0x400200a0
 8007d38:	400200b8 	.word	0x400200b8
 8007d3c:	40020410 	.word	0x40020410
 8007d40:	40020428 	.word	0x40020428
 8007d44:	40020440 	.word	0x40020440
 8007d48:	40020458 	.word	0x40020458
 8007d4c:	40020470 	.word	0x40020470
 8007d50:	40020488 	.word	0x40020488
 8007d54:	400204a0 	.word	0x400204a0
 8007d58:	400204b8 	.word	0x400204b8
 8007d5c:	58025408 	.word	0x58025408
 8007d60:	5802541c 	.word	0x5802541c
 8007d64:	58025430 	.word	0x58025430
 8007d68:	58025444 	.word	0x58025444
 8007d6c:	58025458 	.word	0x58025458
 8007d70:	5802546c 	.word	0x5802546c
 8007d74:	58025480 	.word	0x58025480
 8007d78:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	f003 0320 	and.w	r3, r3, #32
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d160      	bne.n	8007e48 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a7f      	ldr	r2, [pc, #508]	; (8007f88 <HAL_DMA_IRQHandler+0xc74>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d04a      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a7d      	ldr	r2, [pc, #500]	; (8007f8c <HAL_DMA_IRQHandler+0xc78>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d045      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a7c      	ldr	r2, [pc, #496]	; (8007f90 <HAL_DMA_IRQHandler+0xc7c>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d040      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a7a      	ldr	r2, [pc, #488]	; (8007f94 <HAL_DMA_IRQHandler+0xc80>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d03b      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a79      	ldr	r2, [pc, #484]	; (8007f98 <HAL_DMA_IRQHandler+0xc84>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d036      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a77      	ldr	r2, [pc, #476]	; (8007f9c <HAL_DMA_IRQHandler+0xc88>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d031      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a76      	ldr	r2, [pc, #472]	; (8007fa0 <HAL_DMA_IRQHandler+0xc8c>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d02c      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a74      	ldr	r2, [pc, #464]	; (8007fa4 <HAL_DMA_IRQHandler+0xc90>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d027      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a73      	ldr	r2, [pc, #460]	; (8007fa8 <HAL_DMA_IRQHandler+0xc94>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d022      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a71      	ldr	r2, [pc, #452]	; (8007fac <HAL_DMA_IRQHandler+0xc98>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01d      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a70      	ldr	r2, [pc, #448]	; (8007fb0 <HAL_DMA_IRQHandler+0xc9c>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d018      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a6e      	ldr	r2, [pc, #440]	; (8007fb4 <HAL_DMA_IRQHandler+0xca0>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d013      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a6d      	ldr	r2, [pc, #436]	; (8007fb8 <HAL_DMA_IRQHandler+0xca4>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00e      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a6b      	ldr	r2, [pc, #428]	; (8007fbc <HAL_DMA_IRQHandler+0xca8>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d009      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a6a      	ldr	r2, [pc, #424]	; (8007fc0 <HAL_DMA_IRQHandler+0xcac>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d004      	beq.n	8007e26 <HAL_DMA_IRQHandler+0xb12>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a68      	ldr	r2, [pc, #416]	; (8007fc4 <HAL_DMA_IRQHandler+0xcb0>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d108      	bne.n	8007e38 <HAL_DMA_IRQHandler+0xb24>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681a      	ldr	r2, [r3, #0]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f022 0208 	bic.w	r2, r2, #8
 8007e34:	601a      	str	r2, [r3, #0]
 8007e36:	e007      	b.n	8007e48 <HAL_DMA_IRQHandler+0xb34>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	681a      	ldr	r2, [r3, #0]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 0204 	bic.w	r2, r2, #4
 8007e46:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	f000 8165 	beq.w	800811c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e5a:	e15f      	b.n	800811c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e60:	f003 031f 	and.w	r3, r3, #31
 8007e64:	2202      	movs	r2, #2
 8007e66:	409a      	lsls	r2, r3
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 80c5 	beq.w	8007ffc <HAL_DMA_IRQHandler+0xce8>
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	f003 0302 	and.w	r3, r3, #2
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 80bf 	beq.w	8007ffc <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e82:	f003 031f 	and.w	r3, r3, #31
 8007e86:	2202      	movs	r2, #2
 8007e88:	409a      	lsls	r2, r3
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e8e:	693b      	ldr	r3, [r7, #16]
 8007e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d018      	beq.n	8007eca <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e98:	693b      	ldr	r3, [r7, #16]
 8007e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d109      	bne.n	8007eb6 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	f000 813a 	beq.w	8008120 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eb4:	e134      	b.n	8008120 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	f000 8130 	beq.w	8008120 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ec8:	e12a      	b.n	8008120 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f003 0320 	and.w	r3, r3, #32
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	f040 8089 	bne.w	8007fe8 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a2b      	ldr	r2, [pc, #172]	; (8007f88 <HAL_DMA_IRQHandler+0xc74>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d04a      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a29      	ldr	r2, [pc, #164]	; (8007f8c <HAL_DMA_IRQHandler+0xc78>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d045      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	4a28      	ldr	r2, [pc, #160]	; (8007f90 <HAL_DMA_IRQHandler+0xc7c>)
 8007ef0:	4293      	cmp	r3, r2
 8007ef2:	d040      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	4a26      	ldr	r2, [pc, #152]	; (8007f94 <HAL_DMA_IRQHandler+0xc80>)
 8007efa:	4293      	cmp	r3, r2
 8007efc:	d03b      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a25      	ldr	r2, [pc, #148]	; (8007f98 <HAL_DMA_IRQHandler+0xc84>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d036      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a23      	ldr	r2, [pc, #140]	; (8007f9c <HAL_DMA_IRQHandler+0xc88>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d031      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	4a22      	ldr	r2, [pc, #136]	; (8007fa0 <HAL_DMA_IRQHandler+0xc8c>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d02c      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	4a20      	ldr	r2, [pc, #128]	; (8007fa4 <HAL_DMA_IRQHandler+0xc90>)
 8007f22:	4293      	cmp	r3, r2
 8007f24:	d027      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a1f      	ldr	r2, [pc, #124]	; (8007fa8 <HAL_DMA_IRQHandler+0xc94>)
 8007f2c:	4293      	cmp	r3, r2
 8007f2e:	d022      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a1d      	ldr	r2, [pc, #116]	; (8007fac <HAL_DMA_IRQHandler+0xc98>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d01d      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4a1c      	ldr	r2, [pc, #112]	; (8007fb0 <HAL_DMA_IRQHandler+0xc9c>)
 8007f40:	4293      	cmp	r3, r2
 8007f42:	d018      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a1a      	ldr	r2, [pc, #104]	; (8007fb4 <HAL_DMA_IRQHandler+0xca0>)
 8007f4a:	4293      	cmp	r3, r2
 8007f4c:	d013      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a19      	ldr	r2, [pc, #100]	; (8007fb8 <HAL_DMA_IRQHandler+0xca4>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d00e      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	4a17      	ldr	r2, [pc, #92]	; (8007fbc <HAL_DMA_IRQHandler+0xca8>)
 8007f5e:	4293      	cmp	r3, r2
 8007f60:	d009      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4a16      	ldr	r2, [pc, #88]	; (8007fc0 <HAL_DMA_IRQHandler+0xcac>)
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	d004      	beq.n	8007f76 <HAL_DMA_IRQHandler+0xc62>
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a14      	ldr	r2, [pc, #80]	; (8007fc4 <HAL_DMA_IRQHandler+0xcb0>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d128      	bne.n	8007fc8 <HAL_DMA_IRQHandler+0xcb4>
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	681a      	ldr	r2, [r3, #0]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f022 0214 	bic.w	r2, r2, #20
 8007f84:	601a      	str	r2, [r3, #0]
 8007f86:	e027      	b.n	8007fd8 <HAL_DMA_IRQHandler+0xcc4>
 8007f88:	40020010 	.word	0x40020010
 8007f8c:	40020028 	.word	0x40020028
 8007f90:	40020040 	.word	0x40020040
 8007f94:	40020058 	.word	0x40020058
 8007f98:	40020070 	.word	0x40020070
 8007f9c:	40020088 	.word	0x40020088
 8007fa0:	400200a0 	.word	0x400200a0
 8007fa4:	400200b8 	.word	0x400200b8
 8007fa8:	40020410 	.word	0x40020410
 8007fac:	40020428 	.word	0x40020428
 8007fb0:	40020440 	.word	0x40020440
 8007fb4:	40020458 	.word	0x40020458
 8007fb8:	40020470 	.word	0x40020470
 8007fbc:	40020488 	.word	0x40020488
 8007fc0:	400204a0 	.word	0x400204a0
 8007fc4:	400204b8 	.word	0x400204b8
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	f022 020a 	bic.w	r2, r2, #10
 8007fd6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	f000 8097 	beq.w	8008120 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ffa:	e091      	b.n	8008120 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008000:	f003 031f 	and.w	r3, r3, #31
 8008004:	2208      	movs	r2, #8
 8008006:	409a      	lsls	r2, r3
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	f000 8088 	beq.w	8008122 <HAL_DMA_IRQHandler+0xe0e>
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	f003 0308 	and.w	r3, r3, #8
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 8082 	beq.w	8008122 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	4a41      	ldr	r2, [pc, #260]	; (8008128 <HAL_DMA_IRQHandler+0xe14>)
 8008024:	4293      	cmp	r3, r2
 8008026:	d04a      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4a3f      	ldr	r2, [pc, #252]	; (800812c <HAL_DMA_IRQHandler+0xe18>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d045      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a3e      	ldr	r2, [pc, #248]	; (8008130 <HAL_DMA_IRQHandler+0xe1c>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d040      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a3c      	ldr	r2, [pc, #240]	; (8008134 <HAL_DMA_IRQHandler+0xe20>)
 8008042:	4293      	cmp	r3, r2
 8008044:	d03b      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a3b      	ldr	r2, [pc, #236]	; (8008138 <HAL_DMA_IRQHandler+0xe24>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d036      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a39      	ldr	r2, [pc, #228]	; (800813c <HAL_DMA_IRQHandler+0xe28>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d031      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a38      	ldr	r2, [pc, #224]	; (8008140 <HAL_DMA_IRQHandler+0xe2c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d02c      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a36      	ldr	r2, [pc, #216]	; (8008144 <HAL_DMA_IRQHandler+0xe30>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d027      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a35      	ldr	r2, [pc, #212]	; (8008148 <HAL_DMA_IRQHandler+0xe34>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d022      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a33      	ldr	r2, [pc, #204]	; (800814c <HAL_DMA_IRQHandler+0xe38>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d01d      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a32      	ldr	r2, [pc, #200]	; (8008150 <HAL_DMA_IRQHandler+0xe3c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d018      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a30      	ldr	r2, [pc, #192]	; (8008154 <HAL_DMA_IRQHandler+0xe40>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d013      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a2f      	ldr	r2, [pc, #188]	; (8008158 <HAL_DMA_IRQHandler+0xe44>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d00e      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a2d      	ldr	r2, [pc, #180]	; (800815c <HAL_DMA_IRQHandler+0xe48>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d009      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a2c      	ldr	r2, [pc, #176]	; (8008160 <HAL_DMA_IRQHandler+0xe4c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d004      	beq.n	80080be <HAL_DMA_IRQHandler+0xdaa>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a2a      	ldr	r2, [pc, #168]	; (8008164 <HAL_DMA_IRQHandler+0xe50>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d108      	bne.n	80080d0 <HAL_DMA_IRQHandler+0xdbc>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f022 021c 	bic.w	r2, r2, #28
 80080cc:	601a      	str	r2, [r3, #0]
 80080ce:	e007      	b.n	80080e0 <HAL_DMA_IRQHandler+0xdcc>
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f022 020e 	bic.w	r2, r2, #14
 80080de:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080e4:	f003 031f 	and.w	r3, r3, #31
 80080e8:	2201      	movs	r2, #1
 80080ea:	409a      	lsls	r2, r3
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2201      	movs	r2, #1
 80080f4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	2201      	movs	r2, #1
 80080fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2200      	movs	r2, #0
 8008102:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800810a:	2b00      	cmp	r3, #0
 800810c:	d009      	beq.n	8008122 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	4798      	blx	r3
 8008116:	e004      	b.n	8008122 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8008118:	bf00      	nop
 800811a:	e002      	b.n	8008122 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800811c:	bf00      	nop
 800811e:	e000      	b.n	8008122 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008120:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008122:	3728      	adds	r7, #40	; 0x28
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	40020010 	.word	0x40020010
 800812c:	40020028 	.word	0x40020028
 8008130:	40020040 	.word	0x40020040
 8008134:	40020058 	.word	0x40020058
 8008138:	40020070 	.word	0x40020070
 800813c:	40020088 	.word	0x40020088
 8008140:	400200a0 	.word	0x400200a0
 8008144:	400200b8 	.word	0x400200b8
 8008148:	40020410 	.word	0x40020410
 800814c:	40020428 	.word	0x40020428
 8008150:	40020440 	.word	0x40020440
 8008154:	40020458 	.word	0x40020458
 8008158:	40020470 	.word	0x40020470
 800815c:	40020488 	.word	0x40020488
 8008160:	400204a0 	.word	0x400204a0
 8008164:	400204b8 	.word	0x400204b8

08008168 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008168:	b480      	push	{r7}
 800816a:	b087      	sub	sp, #28
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
 8008174:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817a:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008180:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a7f      	ldr	r2, [pc, #508]	; (8008384 <DMA_SetConfig+0x21c>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d072      	beq.n	8008272 <DMA_SetConfig+0x10a>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a7d      	ldr	r2, [pc, #500]	; (8008388 <DMA_SetConfig+0x220>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d06d      	beq.n	8008272 <DMA_SetConfig+0x10a>
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a7c      	ldr	r2, [pc, #496]	; (800838c <DMA_SetConfig+0x224>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d068      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4a7a      	ldr	r2, [pc, #488]	; (8008390 <DMA_SetConfig+0x228>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d063      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a79      	ldr	r2, [pc, #484]	; (8008394 <DMA_SetConfig+0x22c>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	d05e      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	4a77      	ldr	r2, [pc, #476]	; (8008398 <DMA_SetConfig+0x230>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d059      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a76      	ldr	r2, [pc, #472]	; (800839c <DMA_SetConfig+0x234>)
 80081c4:	4293      	cmp	r3, r2
 80081c6:	d054      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a74      	ldr	r2, [pc, #464]	; (80083a0 <DMA_SetConfig+0x238>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d04f      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a73      	ldr	r2, [pc, #460]	; (80083a4 <DMA_SetConfig+0x23c>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d04a      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4a71      	ldr	r2, [pc, #452]	; (80083a8 <DMA_SetConfig+0x240>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d045      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a70      	ldr	r2, [pc, #448]	; (80083ac <DMA_SetConfig+0x244>)
 80081ec:	4293      	cmp	r3, r2
 80081ee:	d040      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	4a6e      	ldr	r2, [pc, #440]	; (80083b0 <DMA_SetConfig+0x248>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d03b      	beq.n	8008272 <DMA_SetConfig+0x10a>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a6d      	ldr	r2, [pc, #436]	; (80083b4 <DMA_SetConfig+0x24c>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d036      	beq.n	8008272 <DMA_SetConfig+0x10a>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	4a6b      	ldr	r2, [pc, #428]	; (80083b8 <DMA_SetConfig+0x250>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d031      	beq.n	8008272 <DMA_SetConfig+0x10a>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a6a      	ldr	r2, [pc, #424]	; (80083bc <DMA_SetConfig+0x254>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d02c      	beq.n	8008272 <DMA_SetConfig+0x10a>
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	4a68      	ldr	r2, [pc, #416]	; (80083c0 <DMA_SetConfig+0x258>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d027      	beq.n	8008272 <DMA_SetConfig+0x10a>
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	4a67      	ldr	r2, [pc, #412]	; (80083c4 <DMA_SetConfig+0x25c>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d022      	beq.n	8008272 <DMA_SetConfig+0x10a>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	4a65      	ldr	r2, [pc, #404]	; (80083c8 <DMA_SetConfig+0x260>)
 8008232:	4293      	cmp	r3, r2
 8008234:	d01d      	beq.n	8008272 <DMA_SetConfig+0x10a>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a64      	ldr	r2, [pc, #400]	; (80083cc <DMA_SetConfig+0x264>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d018      	beq.n	8008272 <DMA_SetConfig+0x10a>
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a62      	ldr	r2, [pc, #392]	; (80083d0 <DMA_SetConfig+0x268>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d013      	beq.n	8008272 <DMA_SetConfig+0x10a>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	4a61      	ldr	r2, [pc, #388]	; (80083d4 <DMA_SetConfig+0x26c>)
 8008250:	4293      	cmp	r3, r2
 8008252:	d00e      	beq.n	8008272 <DMA_SetConfig+0x10a>
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a5f      	ldr	r2, [pc, #380]	; (80083d8 <DMA_SetConfig+0x270>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d009      	beq.n	8008272 <DMA_SetConfig+0x10a>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a5e      	ldr	r2, [pc, #376]	; (80083dc <DMA_SetConfig+0x274>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d004      	beq.n	8008272 <DMA_SetConfig+0x10a>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a5c      	ldr	r2, [pc, #368]	; (80083e0 <DMA_SetConfig+0x278>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d101      	bne.n	8008276 <DMA_SetConfig+0x10e>
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <DMA_SetConfig+0x110>
 8008276:	2300      	movs	r3, #0
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00d      	beq.n	8008298 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008280:	68fa      	ldr	r2, [r7, #12]
 8008282:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008284:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800828a:	2b00      	cmp	r3, #0
 800828c:	d004      	beq.n	8008298 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008296:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a39      	ldr	r2, [pc, #228]	; (8008384 <DMA_SetConfig+0x21c>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d04a      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a38      	ldr	r2, [pc, #224]	; (8008388 <DMA_SetConfig+0x220>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d045      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a36      	ldr	r2, [pc, #216]	; (800838c <DMA_SetConfig+0x224>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d040      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a35      	ldr	r2, [pc, #212]	; (8008390 <DMA_SetConfig+0x228>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d03b      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a33      	ldr	r2, [pc, #204]	; (8008394 <DMA_SetConfig+0x22c>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d036      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a32      	ldr	r2, [pc, #200]	; (8008398 <DMA_SetConfig+0x230>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d031      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a30      	ldr	r2, [pc, #192]	; (800839c <DMA_SetConfig+0x234>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d02c      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a2f      	ldr	r2, [pc, #188]	; (80083a0 <DMA_SetConfig+0x238>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d027      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a2d      	ldr	r2, [pc, #180]	; (80083a4 <DMA_SetConfig+0x23c>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d022      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a2c      	ldr	r2, [pc, #176]	; (80083a8 <DMA_SetConfig+0x240>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d01d      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a2a      	ldr	r2, [pc, #168]	; (80083ac <DMA_SetConfig+0x244>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d018      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a29      	ldr	r2, [pc, #164]	; (80083b0 <DMA_SetConfig+0x248>)
 800830c:	4293      	cmp	r3, r2
 800830e:	d013      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	4a27      	ldr	r2, [pc, #156]	; (80083b4 <DMA_SetConfig+0x24c>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d00e      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a26      	ldr	r2, [pc, #152]	; (80083b8 <DMA_SetConfig+0x250>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d009      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a24      	ldr	r2, [pc, #144]	; (80083bc <DMA_SetConfig+0x254>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d004      	beq.n	8008338 <DMA_SetConfig+0x1d0>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4a23      	ldr	r2, [pc, #140]	; (80083c0 <DMA_SetConfig+0x258>)
 8008334:	4293      	cmp	r3, r2
 8008336:	d101      	bne.n	800833c <DMA_SetConfig+0x1d4>
 8008338:	2301      	movs	r3, #1
 800833a:	e000      	b.n	800833e <DMA_SetConfig+0x1d6>
 800833c:	2300      	movs	r3, #0
 800833e:	2b00      	cmp	r3, #0
 8008340:	d059      	beq.n	80083f6 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008346:	f003 031f 	and.w	r3, r3, #31
 800834a:	223f      	movs	r2, #63	; 0x3f
 800834c:	409a      	lsls	r2, r3
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008360:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	2b40      	cmp	r3, #64	; 0x40
 8008370:	d138      	bne.n	80083e4 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68ba      	ldr	r2, [r7, #8]
 8008380:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8008382:	e086      	b.n	8008492 <DMA_SetConfig+0x32a>
 8008384:	40020010 	.word	0x40020010
 8008388:	40020028 	.word	0x40020028
 800838c:	40020040 	.word	0x40020040
 8008390:	40020058 	.word	0x40020058
 8008394:	40020070 	.word	0x40020070
 8008398:	40020088 	.word	0x40020088
 800839c:	400200a0 	.word	0x400200a0
 80083a0:	400200b8 	.word	0x400200b8
 80083a4:	40020410 	.word	0x40020410
 80083a8:	40020428 	.word	0x40020428
 80083ac:	40020440 	.word	0x40020440
 80083b0:	40020458 	.word	0x40020458
 80083b4:	40020470 	.word	0x40020470
 80083b8:	40020488 	.word	0x40020488
 80083bc:	400204a0 	.word	0x400204a0
 80083c0:	400204b8 	.word	0x400204b8
 80083c4:	58025408 	.word	0x58025408
 80083c8:	5802541c 	.word	0x5802541c
 80083cc:	58025430 	.word	0x58025430
 80083d0:	58025444 	.word	0x58025444
 80083d4:	58025458 	.word	0x58025458
 80083d8:	5802546c 	.word	0x5802546c
 80083dc:	58025480 	.word	0x58025480
 80083e0:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68ba      	ldr	r2, [r7, #8]
 80083ea:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	687a      	ldr	r2, [r7, #4]
 80083f2:	60da      	str	r2, [r3, #12]
}
 80083f4:	e04d      	b.n	8008492 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a29      	ldr	r2, [pc, #164]	; (80084a0 <DMA_SetConfig+0x338>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d022      	beq.n	8008446 <DMA_SetConfig+0x2de>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	4a27      	ldr	r2, [pc, #156]	; (80084a4 <DMA_SetConfig+0x33c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d01d      	beq.n	8008446 <DMA_SetConfig+0x2de>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	4a26      	ldr	r2, [pc, #152]	; (80084a8 <DMA_SetConfig+0x340>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d018      	beq.n	8008446 <DMA_SetConfig+0x2de>
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	4a24      	ldr	r2, [pc, #144]	; (80084ac <DMA_SetConfig+0x344>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d013      	beq.n	8008446 <DMA_SetConfig+0x2de>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	4a23      	ldr	r2, [pc, #140]	; (80084b0 <DMA_SetConfig+0x348>)
 8008424:	4293      	cmp	r3, r2
 8008426:	d00e      	beq.n	8008446 <DMA_SetConfig+0x2de>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4a21      	ldr	r2, [pc, #132]	; (80084b4 <DMA_SetConfig+0x34c>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d009      	beq.n	8008446 <DMA_SetConfig+0x2de>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	4a20      	ldr	r2, [pc, #128]	; (80084b8 <DMA_SetConfig+0x350>)
 8008438:	4293      	cmp	r3, r2
 800843a:	d004      	beq.n	8008446 <DMA_SetConfig+0x2de>
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a1e      	ldr	r2, [pc, #120]	; (80084bc <DMA_SetConfig+0x354>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d101      	bne.n	800844a <DMA_SetConfig+0x2e2>
 8008446:	2301      	movs	r3, #1
 8008448:	e000      	b.n	800844c <DMA_SetConfig+0x2e4>
 800844a:	2300      	movs	r3, #0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d020      	beq.n	8008492 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008454:	f003 031f 	and.w	r3, r3, #31
 8008458:	2201      	movs	r2, #1
 800845a:	409a      	lsls	r2, r3
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	683a      	ldr	r2, [r7, #0]
 8008466:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	689b      	ldr	r3, [r3, #8]
 800846c:	2b40      	cmp	r3, #64	; 0x40
 800846e:	d108      	bne.n	8008482 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	60da      	str	r2, [r3, #12]
}
 8008480:	e007      	b.n	8008492 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	60da      	str	r2, [r3, #12]
}
 8008492:	bf00      	nop
 8008494:	371c      	adds	r7, #28
 8008496:	46bd      	mov	sp, r7
 8008498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	58025408 	.word	0x58025408
 80084a4:	5802541c 	.word	0x5802541c
 80084a8:	58025430 	.word	0x58025430
 80084ac:	58025444 	.word	0x58025444
 80084b0:	58025458 	.word	0x58025458
 80084b4:	5802546c 	.word	0x5802546c
 80084b8:	58025480 	.word	0x58025480
 80084bc:	58025494 	.word	0x58025494

080084c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80084c0:	b480      	push	{r7}
 80084c2:	b085      	sub	sp, #20
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	4a42      	ldr	r2, [pc, #264]	; (80085d8 <DMA_CalcBaseAndBitshift+0x118>)
 80084ce:	4293      	cmp	r3, r2
 80084d0:	d04a      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a41      	ldr	r2, [pc, #260]	; (80085dc <DMA_CalcBaseAndBitshift+0x11c>)
 80084d8:	4293      	cmp	r3, r2
 80084da:	d045      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a3f      	ldr	r2, [pc, #252]	; (80085e0 <DMA_CalcBaseAndBitshift+0x120>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d040      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4a3e      	ldr	r2, [pc, #248]	; (80085e4 <DMA_CalcBaseAndBitshift+0x124>)
 80084ec:	4293      	cmp	r3, r2
 80084ee:	d03b      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a3c      	ldr	r2, [pc, #240]	; (80085e8 <DMA_CalcBaseAndBitshift+0x128>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d036      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a3b      	ldr	r2, [pc, #236]	; (80085ec <DMA_CalcBaseAndBitshift+0x12c>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d031      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	4a39      	ldr	r2, [pc, #228]	; (80085f0 <DMA_CalcBaseAndBitshift+0x130>)
 800850a:	4293      	cmp	r3, r2
 800850c:	d02c      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a38      	ldr	r2, [pc, #224]	; (80085f4 <DMA_CalcBaseAndBitshift+0x134>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d027      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a36      	ldr	r2, [pc, #216]	; (80085f8 <DMA_CalcBaseAndBitshift+0x138>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d022      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	4a35      	ldr	r2, [pc, #212]	; (80085fc <DMA_CalcBaseAndBitshift+0x13c>)
 8008528:	4293      	cmp	r3, r2
 800852a:	d01d      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4a33      	ldr	r2, [pc, #204]	; (8008600 <DMA_CalcBaseAndBitshift+0x140>)
 8008532:	4293      	cmp	r3, r2
 8008534:	d018      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a32      	ldr	r2, [pc, #200]	; (8008604 <DMA_CalcBaseAndBitshift+0x144>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d013      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	4a30      	ldr	r2, [pc, #192]	; (8008608 <DMA_CalcBaseAndBitshift+0x148>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00e      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a2f      	ldr	r2, [pc, #188]	; (800860c <DMA_CalcBaseAndBitshift+0x14c>)
 8008550:	4293      	cmp	r3, r2
 8008552:	d009      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a2d      	ldr	r2, [pc, #180]	; (8008610 <DMA_CalcBaseAndBitshift+0x150>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d004      	beq.n	8008568 <DMA_CalcBaseAndBitshift+0xa8>
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a2c      	ldr	r2, [pc, #176]	; (8008614 <DMA_CalcBaseAndBitshift+0x154>)
 8008564:	4293      	cmp	r3, r2
 8008566:	d101      	bne.n	800856c <DMA_CalcBaseAndBitshift+0xac>
 8008568:	2301      	movs	r3, #1
 800856a:	e000      	b.n	800856e <DMA_CalcBaseAndBitshift+0xae>
 800856c:	2300      	movs	r3, #0
 800856e:	2b00      	cmp	r3, #0
 8008570:	d024      	beq.n	80085bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	b2db      	uxtb	r3, r3
 8008578:	3b10      	subs	r3, #16
 800857a:	4a27      	ldr	r2, [pc, #156]	; (8008618 <DMA_CalcBaseAndBitshift+0x158>)
 800857c:	fba2 2303 	umull	r2, r3, r2, r3
 8008580:	091b      	lsrs	r3, r3, #4
 8008582:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	f003 0307 	and.w	r3, r3, #7
 800858a:	4a24      	ldr	r2, [pc, #144]	; (800861c <DMA_CalcBaseAndBitshift+0x15c>)
 800858c:	5cd3      	ldrb	r3, [r2, r3]
 800858e:	461a      	mov	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	2b03      	cmp	r3, #3
 8008598:	d908      	bls.n	80085ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	461a      	mov	r2, r3
 80085a0:	4b1f      	ldr	r3, [pc, #124]	; (8008620 <DMA_CalcBaseAndBitshift+0x160>)
 80085a2:	4013      	ands	r3, r2
 80085a4:	1d1a      	adds	r2, r3, #4
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	659a      	str	r2, [r3, #88]	; 0x58
 80085aa:	e00d      	b.n	80085c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	461a      	mov	r2, r3
 80085b2:	4b1b      	ldr	r3, [pc, #108]	; (8008620 <DMA_CalcBaseAndBitshift+0x160>)
 80085b4:	4013      	ands	r3, r2
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6593      	str	r3, [r2, #88]	; 0x58
 80085ba:	e005      	b.n	80085c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	40020010 	.word	0x40020010
 80085dc:	40020028 	.word	0x40020028
 80085e0:	40020040 	.word	0x40020040
 80085e4:	40020058 	.word	0x40020058
 80085e8:	40020070 	.word	0x40020070
 80085ec:	40020088 	.word	0x40020088
 80085f0:	400200a0 	.word	0x400200a0
 80085f4:	400200b8 	.word	0x400200b8
 80085f8:	40020410 	.word	0x40020410
 80085fc:	40020428 	.word	0x40020428
 8008600:	40020440 	.word	0x40020440
 8008604:	40020458 	.word	0x40020458
 8008608:	40020470 	.word	0x40020470
 800860c:	40020488 	.word	0x40020488
 8008610:	400204a0 	.word	0x400204a0
 8008614:	400204b8 	.word	0x400204b8
 8008618:	aaaaaaab 	.word	0xaaaaaaab
 800861c:	08016fd4 	.word	0x08016fd4
 8008620:	fffffc00 	.word	0xfffffc00

08008624 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008624:	b480      	push	{r7}
 8008626:	b085      	sub	sp, #20
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800862c:	2300      	movs	r3, #0
 800862e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	699b      	ldr	r3, [r3, #24]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d120      	bne.n	800867a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800863c:	2b03      	cmp	r3, #3
 800863e:	d858      	bhi.n	80086f2 <DMA_CheckFifoParam+0xce>
 8008640:	a201      	add	r2, pc, #4	; (adr r2, 8008648 <DMA_CheckFifoParam+0x24>)
 8008642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008646:	bf00      	nop
 8008648:	08008659 	.word	0x08008659
 800864c:	0800866b 	.word	0x0800866b
 8008650:	08008659 	.word	0x08008659
 8008654:	080086f3 	.word	0x080086f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008660:	2b00      	cmp	r3, #0
 8008662:	d048      	beq.n	80086f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008668:	e045      	b.n	80086f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008672:	d142      	bne.n	80086fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008674:	2301      	movs	r3, #1
 8008676:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008678:	e03f      	b.n	80086fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	699b      	ldr	r3, [r3, #24]
 800867e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008682:	d123      	bne.n	80086cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	2b03      	cmp	r3, #3
 800868a:	d838      	bhi.n	80086fe <DMA_CheckFifoParam+0xda>
 800868c:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <DMA_CheckFifoParam+0x70>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	080086a5 	.word	0x080086a5
 8008698:	080086ab 	.word	0x080086ab
 800869c:	080086a5 	.word	0x080086a5
 80086a0:	080086bd 	.word	0x080086bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80086a4:	2301      	movs	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]
        break;
 80086a8:	e030      	b.n	800870c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d025      	beq.n	8008702 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80086b6:	2301      	movs	r3, #1
 80086b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086ba:	e022      	b.n	8008702 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80086c4:	d11f      	bne.n	8008706 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80086c6:	2301      	movs	r3, #1
 80086c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80086ca:	e01c      	b.n	8008706 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086d0:	2b02      	cmp	r3, #2
 80086d2:	d902      	bls.n	80086da <DMA_CheckFifoParam+0xb6>
 80086d4:	2b03      	cmp	r3, #3
 80086d6:	d003      	beq.n	80086e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80086d8:	e018      	b.n	800870c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80086da:	2301      	movs	r3, #1
 80086dc:	73fb      	strb	r3, [r7, #15]
        break;
 80086de:	e015      	b.n	800870c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d00e      	beq.n	800870a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	73fb      	strb	r3, [r7, #15]
    break;
 80086f0:	e00b      	b.n	800870a <DMA_CheckFifoParam+0xe6>
        break;
 80086f2:	bf00      	nop
 80086f4:	e00a      	b.n	800870c <DMA_CheckFifoParam+0xe8>
        break;
 80086f6:	bf00      	nop
 80086f8:	e008      	b.n	800870c <DMA_CheckFifoParam+0xe8>
        break;
 80086fa:	bf00      	nop
 80086fc:	e006      	b.n	800870c <DMA_CheckFifoParam+0xe8>
        break;
 80086fe:	bf00      	nop
 8008700:	e004      	b.n	800870c <DMA_CheckFifoParam+0xe8>
        break;
 8008702:	bf00      	nop
 8008704:	e002      	b.n	800870c <DMA_CheckFifoParam+0xe8>
        break;
 8008706:	bf00      	nop
 8008708:	e000      	b.n	800870c <DMA_CheckFifoParam+0xe8>
    break;
 800870a:	bf00      	nop
    }
  }

  return status;
 800870c:	7bfb      	ldrb	r3, [r7, #15]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop

0800871c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	4a38      	ldr	r2, [pc, #224]	; (8008810 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8008730:	4293      	cmp	r3, r2
 8008732:	d022      	beq.n	800877a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a36      	ldr	r2, [pc, #216]	; (8008814 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d01d      	beq.n	800877a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a35      	ldr	r2, [pc, #212]	; (8008818 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d018      	beq.n	800877a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a33      	ldr	r2, [pc, #204]	; (800881c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d013      	beq.n	800877a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4a32      	ldr	r2, [pc, #200]	; (8008820 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008758:	4293      	cmp	r3, r2
 800875a:	d00e      	beq.n	800877a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a30      	ldr	r2, [pc, #192]	; (8008824 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d009      	beq.n	800877a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a2f      	ldr	r2, [pc, #188]	; (8008828 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d004      	beq.n	800877a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a2d      	ldr	r2, [pc, #180]	; (800882c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d101      	bne.n	800877e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800877a:	2301      	movs	r3, #1
 800877c:	e000      	b.n	8008780 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800877e:	2300      	movs	r3, #0
 8008780:	2b00      	cmp	r3, #0
 8008782:	d01a      	beq.n	80087ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	b2db      	uxtb	r3, r3
 800878a:	3b08      	subs	r3, #8
 800878c:	4a28      	ldr	r2, [pc, #160]	; (8008830 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800878e:	fba2 2303 	umull	r2, r3, r2, r3
 8008792:	091b      	lsrs	r3, r3, #4
 8008794:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	4b26      	ldr	r3, [pc, #152]	; (8008834 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800879a:	4413      	add	r3, r2
 800879c:	009b      	lsls	r3, r3, #2
 800879e:	461a      	mov	r2, r3
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	4a24      	ldr	r2, [pc, #144]	; (8008838 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80087a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	f003 031f 	and.w	r3, r3, #31
 80087b0:	2201      	movs	r2, #1
 80087b2:	409a      	lsls	r2, r3
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80087b8:	e024      	b.n	8008804 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	b2db      	uxtb	r3, r3
 80087c0:	3b10      	subs	r3, #16
 80087c2:	4a1e      	ldr	r2, [pc, #120]	; (800883c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80087c4:	fba2 2303 	umull	r2, r3, r2, r3
 80087c8:	091b      	lsrs	r3, r3, #4
 80087ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80087cc:	68bb      	ldr	r3, [r7, #8]
 80087ce:	4a1c      	ldr	r2, [pc, #112]	; (8008840 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d806      	bhi.n	80087e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80087d4:	68bb      	ldr	r3, [r7, #8]
 80087d6:	4a1b      	ldr	r2, [pc, #108]	; (8008844 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d902      	bls.n	80087e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	3308      	adds	r3, #8
 80087e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80087e2:	68fa      	ldr	r2, [r7, #12]
 80087e4:	4b18      	ldr	r3, [pc, #96]	; (8008848 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80087e6:	4413      	add	r3, r2
 80087e8:	009b      	lsls	r3, r3, #2
 80087ea:	461a      	mov	r2, r3
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a16      	ldr	r2, [pc, #88]	; (800884c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80087f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	f003 031f 	and.w	r3, r3, #31
 80087fc:	2201      	movs	r2, #1
 80087fe:	409a      	lsls	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008804:	bf00      	nop
 8008806:	3714      	adds	r7, #20
 8008808:	46bd      	mov	sp, r7
 800880a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880e:	4770      	bx	lr
 8008810:	58025408 	.word	0x58025408
 8008814:	5802541c 	.word	0x5802541c
 8008818:	58025430 	.word	0x58025430
 800881c:	58025444 	.word	0x58025444
 8008820:	58025458 	.word	0x58025458
 8008824:	5802546c 	.word	0x5802546c
 8008828:	58025480 	.word	0x58025480
 800882c:	58025494 	.word	0x58025494
 8008830:	cccccccd 	.word	0xcccccccd
 8008834:	16009600 	.word	0x16009600
 8008838:	58025880 	.word	0x58025880
 800883c:	aaaaaaab 	.word	0xaaaaaaab
 8008840:	400204b8 	.word	0x400204b8
 8008844:	4002040f 	.word	0x4002040f
 8008848:	10008200 	.word	0x10008200
 800884c:	40020880 	.word	0x40020880

08008850 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008850:	b480      	push	{r7}
 8008852:	b085      	sub	sp, #20
 8008854:	af00      	add	r7, sp, #0
 8008856:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	b2db      	uxtb	r3, r3
 800885e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d04a      	beq.n	80088fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	2b08      	cmp	r3, #8
 800886a:	d847      	bhi.n	80088fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a25      	ldr	r2, [pc, #148]	; (8008908 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d022      	beq.n	80088bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a24      	ldr	r2, [pc, #144]	; (800890c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d01d      	beq.n	80088bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a22      	ldr	r2, [pc, #136]	; (8008910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d018      	beq.n	80088bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a21      	ldr	r2, [pc, #132]	; (8008914 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d013      	beq.n	80088bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4a1f      	ldr	r2, [pc, #124]	; (8008918 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00e      	beq.n	80088bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	4a1e      	ldr	r2, [pc, #120]	; (800891c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d009      	beq.n	80088bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	4a1c      	ldr	r2, [pc, #112]	; (8008920 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d004      	beq.n	80088bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a1b      	ldr	r2, [pc, #108]	; (8008924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d101      	bne.n	80088c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80088bc:	2301      	movs	r3, #1
 80088be:	e000      	b.n	80088c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80088c0:	2300      	movs	r3, #0
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d00a      	beq.n	80088dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	4b17      	ldr	r3, [pc, #92]	; (8008928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	461a      	mov	r2, r3
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a15      	ldr	r2, [pc, #84]	; (800892c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80088d8:	671a      	str	r2, [r3, #112]	; 0x70
 80088da:	e009      	b.n	80088f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80088dc:	68fa      	ldr	r2, [r7, #12]
 80088de:	4b14      	ldr	r3, [pc, #80]	; (8008930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80088e0:	4413      	add	r3, r2
 80088e2:	009b      	lsls	r3, r3, #2
 80088e4:	461a      	mov	r2, r3
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a11      	ldr	r2, [pc, #68]	; (8008934 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80088ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	3b01      	subs	r3, #1
 80088f4:	2201      	movs	r2, #1
 80088f6:	409a      	lsls	r2, r3
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80088fc:	bf00      	nop
 80088fe:	3714      	adds	r7, #20
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	58025408 	.word	0x58025408
 800890c:	5802541c 	.word	0x5802541c
 8008910:	58025430 	.word	0x58025430
 8008914:	58025444 	.word	0x58025444
 8008918:	58025458 	.word	0x58025458
 800891c:	5802546c 	.word	0x5802546c
 8008920:	58025480 	.word	0x58025480
 8008924:	58025494 	.word	0x58025494
 8008928:	1600963f 	.word	0x1600963f
 800892c:	58025940 	.word	0x58025940
 8008930:	1000823f 	.word	0x1000823f
 8008934:	40020940 	.word	0x40020940

08008938 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008938:	b480      	push	{r7}
 800893a:	b089      	sub	sp, #36	; 0x24
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008942:	2300      	movs	r3, #0
 8008944:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008946:	4b89      	ldr	r3, [pc, #548]	; (8008b6c <HAL_GPIO_Init+0x234>)
 8008948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800894a:	e194      	b.n	8008c76 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	2101      	movs	r1, #1
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	fa01 f303 	lsl.w	r3, r1, r3
 8008958:	4013      	ands	r3, r2
 800895a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	f000 8186 	beq.w	8008c70 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	f003 0303 	and.w	r3, r3, #3
 800896c:	2b01      	cmp	r3, #1
 800896e:	d005      	beq.n	800897c <HAL_GPIO_Init+0x44>
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	f003 0303 	and.w	r3, r3, #3
 8008978:	2b02      	cmp	r3, #2
 800897a:	d130      	bne.n	80089de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	689b      	ldr	r3, [r3, #8]
 8008980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008982:	69fb      	ldr	r3, [r7, #28]
 8008984:	005b      	lsls	r3, r3, #1
 8008986:	2203      	movs	r2, #3
 8008988:	fa02 f303 	lsl.w	r3, r2, r3
 800898c:	43db      	mvns	r3, r3
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	4013      	ands	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	68da      	ldr	r2, [r3, #12]
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	005b      	lsls	r3, r3, #1
 800899c:	fa02 f303 	lsl.w	r3, r2, r3
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	4313      	orrs	r3, r2
 80089a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	69ba      	ldr	r2, [r7, #24]
 80089aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80089b2:	2201      	movs	r2, #1
 80089b4:	69fb      	ldr	r3, [r7, #28]
 80089b6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ba:	43db      	mvns	r3, r3
 80089bc:	69ba      	ldr	r2, [r7, #24]
 80089be:	4013      	ands	r3, r2
 80089c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	091b      	lsrs	r3, r3, #4
 80089c8:	f003 0201 	and.w	r2, r3, #1
 80089cc:	69fb      	ldr	r3, [r7, #28]
 80089ce:	fa02 f303 	lsl.w	r3, r2, r3
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	4313      	orrs	r3, r2
 80089d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	69ba      	ldr	r2, [r7, #24]
 80089dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f003 0303 	and.w	r3, r3, #3
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d017      	beq.n	8008a1a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	68db      	ldr	r3, [r3, #12]
 80089ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	005b      	lsls	r3, r3, #1
 80089f4:	2203      	movs	r2, #3
 80089f6:	fa02 f303 	lsl.w	r3, r2, r3
 80089fa:	43db      	mvns	r3, r3
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	4013      	ands	r3, r2
 8008a00:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	69fb      	ldr	r3, [r7, #28]
 8008a08:	005b      	lsls	r3, r3, #1
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	69ba      	ldr	r2, [r7, #24]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	685b      	ldr	r3, [r3, #4]
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	2b02      	cmp	r3, #2
 8008a24:	d123      	bne.n	8008a6e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	08da      	lsrs	r2, r3, #3
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	3208      	adds	r2, #8
 8008a2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	220f      	movs	r2, #15
 8008a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a42:	43db      	mvns	r3, r3
 8008a44:	69ba      	ldr	r2, [r7, #24]
 8008a46:	4013      	ands	r3, r2
 8008a48:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	691a      	ldr	r2, [r3, #16]
 8008a4e:	69fb      	ldr	r3, [r7, #28]
 8008a50:	f003 0307 	and.w	r3, r3, #7
 8008a54:	009b      	lsls	r3, r3, #2
 8008a56:	fa02 f303 	lsl.w	r3, r2, r3
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	08da      	lsrs	r2, r3, #3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	3208      	adds	r2, #8
 8008a68:	69b9      	ldr	r1, [r7, #24]
 8008a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	005b      	lsls	r3, r3, #1
 8008a78:	2203      	movs	r2, #3
 8008a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a7e:	43db      	mvns	r3, r3
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	4013      	ands	r3, r2
 8008a84:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	f003 0203 	and.w	r2, r3, #3
 8008a8e:	69fb      	ldr	r3, [r7, #28]
 8008a90:	005b      	lsls	r3, r3, #1
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	69ba      	ldr	r2, [r7, #24]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	69ba      	ldr	r2, [r7, #24]
 8008aa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	f000 80e0 	beq.w	8008c70 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008ab0:	4b2f      	ldr	r3, [pc, #188]	; (8008b70 <HAL_GPIO_Init+0x238>)
 8008ab2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ab6:	4a2e      	ldr	r2, [pc, #184]	; (8008b70 <HAL_GPIO_Init+0x238>)
 8008ab8:	f043 0302 	orr.w	r3, r3, #2
 8008abc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008ac0:	4b2b      	ldr	r3, [pc, #172]	; (8008b70 <HAL_GPIO_Init+0x238>)
 8008ac2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008ac6:	f003 0302 	and.w	r3, r3, #2
 8008aca:	60fb      	str	r3, [r7, #12]
 8008acc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008ace:	4a29      	ldr	r2, [pc, #164]	; (8008b74 <HAL_GPIO_Init+0x23c>)
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	089b      	lsrs	r3, r3, #2
 8008ad4:	3302      	adds	r3, #2
 8008ad6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	f003 0303 	and.w	r3, r3, #3
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	220f      	movs	r2, #15
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	43db      	mvns	r3, r3
 8008aec:	69ba      	ldr	r2, [r7, #24]
 8008aee:	4013      	ands	r3, r2
 8008af0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a20      	ldr	r2, [pc, #128]	; (8008b78 <HAL_GPIO_Init+0x240>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d052      	beq.n	8008ba0 <HAL_GPIO_Init+0x268>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a1f      	ldr	r2, [pc, #124]	; (8008b7c <HAL_GPIO_Init+0x244>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d031      	beq.n	8008b66 <HAL_GPIO_Init+0x22e>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a1e      	ldr	r2, [pc, #120]	; (8008b80 <HAL_GPIO_Init+0x248>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d02b      	beq.n	8008b62 <HAL_GPIO_Init+0x22a>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a1d      	ldr	r2, [pc, #116]	; (8008b84 <HAL_GPIO_Init+0x24c>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d025      	beq.n	8008b5e <HAL_GPIO_Init+0x226>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a1c      	ldr	r2, [pc, #112]	; (8008b88 <HAL_GPIO_Init+0x250>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d01f      	beq.n	8008b5a <HAL_GPIO_Init+0x222>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	4a1b      	ldr	r2, [pc, #108]	; (8008b8c <HAL_GPIO_Init+0x254>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d019      	beq.n	8008b56 <HAL_GPIO_Init+0x21e>
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a1a      	ldr	r2, [pc, #104]	; (8008b90 <HAL_GPIO_Init+0x258>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d013      	beq.n	8008b52 <HAL_GPIO_Init+0x21a>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a19      	ldr	r2, [pc, #100]	; (8008b94 <HAL_GPIO_Init+0x25c>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d00d      	beq.n	8008b4e <HAL_GPIO_Init+0x216>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a18      	ldr	r2, [pc, #96]	; (8008b98 <HAL_GPIO_Init+0x260>)
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d007      	beq.n	8008b4a <HAL_GPIO_Init+0x212>
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	4a17      	ldr	r2, [pc, #92]	; (8008b9c <HAL_GPIO_Init+0x264>)
 8008b3e:	4293      	cmp	r3, r2
 8008b40:	d101      	bne.n	8008b46 <HAL_GPIO_Init+0x20e>
 8008b42:	2309      	movs	r3, #9
 8008b44:	e02d      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b46:	230a      	movs	r3, #10
 8008b48:	e02b      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b4a:	2308      	movs	r3, #8
 8008b4c:	e029      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b4e:	2307      	movs	r3, #7
 8008b50:	e027      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b52:	2306      	movs	r3, #6
 8008b54:	e025      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b56:	2305      	movs	r3, #5
 8008b58:	e023      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b5a:	2304      	movs	r3, #4
 8008b5c:	e021      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b5e:	2303      	movs	r3, #3
 8008b60:	e01f      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b62:	2302      	movs	r3, #2
 8008b64:	e01d      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b66:	2301      	movs	r3, #1
 8008b68:	e01b      	b.n	8008ba2 <HAL_GPIO_Init+0x26a>
 8008b6a:	bf00      	nop
 8008b6c:	58000080 	.word	0x58000080
 8008b70:	58024400 	.word	0x58024400
 8008b74:	58000400 	.word	0x58000400
 8008b78:	58020000 	.word	0x58020000
 8008b7c:	58020400 	.word	0x58020400
 8008b80:	58020800 	.word	0x58020800
 8008b84:	58020c00 	.word	0x58020c00
 8008b88:	58021000 	.word	0x58021000
 8008b8c:	58021400 	.word	0x58021400
 8008b90:	58021800 	.word	0x58021800
 8008b94:	58021c00 	.word	0x58021c00
 8008b98:	58022000 	.word	0x58022000
 8008b9c:	58022400 	.word	0x58022400
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	69fa      	ldr	r2, [r7, #28]
 8008ba4:	f002 0203 	and.w	r2, r2, #3
 8008ba8:	0092      	lsls	r2, r2, #2
 8008baa:	4093      	lsls	r3, r2
 8008bac:	69ba      	ldr	r2, [r7, #24]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008bb2:	4938      	ldr	r1, [pc, #224]	; (8008c94 <HAL_GPIO_Init+0x35c>)
 8008bb4:	69fb      	ldr	r3, [r7, #28]
 8008bb6:	089b      	lsrs	r3, r3, #2
 8008bb8:	3302      	adds	r3, #2
 8008bba:	69ba      	ldr	r2, [r7, #24]
 8008bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008bc0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	43db      	mvns	r3, r3
 8008bcc:	69ba      	ldr	r2, [r7, #24]
 8008bce:	4013      	ands	r3, r2
 8008bd0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	685b      	ldr	r3, [r3, #4]
 8008bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d003      	beq.n	8008be6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008bde:	69ba      	ldr	r2, [r7, #24]
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	4313      	orrs	r3, r2
 8008be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bea:	69bb      	ldr	r3, [r7, #24]
 8008bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008bee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	43db      	mvns	r3, r3
 8008bfa:	69ba      	ldr	r2, [r7, #24]
 8008bfc:	4013      	ands	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d003      	beq.n	8008c14 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	4313      	orrs	r3, r2
 8008c12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008c14:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008c18:	69bb      	ldr	r3, [r7, #24]
 8008c1a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c22:	693b      	ldr	r3, [r7, #16]
 8008c24:	43db      	mvns	r3, r3
 8008c26:	69ba      	ldr	r2, [r7, #24]
 8008c28:	4013      	ands	r3, r2
 8008c2a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	685b      	ldr	r3, [r3, #4]
 8008c30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d003      	beq.n	8008c40 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008c38:	69ba      	ldr	r2, [r7, #24]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	4313      	orrs	r3, r2
 8008c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	69ba      	ldr	r2, [r7, #24]
 8008c44:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c46:	697b      	ldr	r3, [r7, #20]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	43db      	mvns	r3, r3
 8008c50:	69ba      	ldr	r2, [r7, #24]
 8008c52:	4013      	ands	r3, r2
 8008c54:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d003      	beq.n	8008c6a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008c62:	69ba      	ldr	r2, [r7, #24]
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	69ba      	ldr	r2, [r7, #24]
 8008c6e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	3301      	adds	r3, #1
 8008c74:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681a      	ldr	r2, [r3, #0]
 8008c7a:	69fb      	ldr	r3, [r7, #28]
 8008c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f47f ae63 	bne.w	800894c <HAL_GPIO_Init+0x14>
  }
}
 8008c86:	bf00      	nop
 8008c88:	bf00      	nop
 8008c8a:	3724      	adds	r7, #36	; 0x24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr
 8008c94:	58000400 	.word	0x58000400

08008c98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b085      	sub	sp, #20
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	887b      	ldrh	r3, [r7, #2]
 8008caa:	4013      	ands	r3, r2
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d002      	beq.n	8008cb6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	73fb      	strb	r3, [r7, #15]
 8008cb4:	e001      	b.n	8008cba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3714      	adds	r7, #20
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr

08008cc8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008cc8:	b480      	push	{r7}
 8008cca:	b083      	sub	sp, #12
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	6078      	str	r0, [r7, #4]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	807b      	strh	r3, [r7, #2]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008cd8:	787b      	ldrb	r3, [r7, #1]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d003      	beq.n	8008ce6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008cde:	887a      	ldrh	r2, [r7, #2]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ce4:	e003      	b.n	8008cee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ce6:	887b      	ldrh	r3, [r7, #2]
 8008ce8:	041a      	lsls	r2, r3, #16
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	619a      	str	r2, [r3, #24]
}
 8008cee:	bf00      	nop
 8008cf0:	370c      	adds	r7, #12
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf8:	4770      	bx	lr
	...

08008cfc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d101      	bne.n	8008d0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	e08b      	b.n	8008e26 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d14:	b2db      	uxtb	r3, r3
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d106      	bne.n	8008d28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f7fa f8d2 	bl	8002ecc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2224      	movs	r2, #36	; 0x24
 8008d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681a      	ldr	r2, [r3, #0]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f022 0201 	bic.w	r2, r2, #1
 8008d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	685a      	ldr	r2, [r3, #4]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	689a      	ldr	r2, [r3, #8]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	68db      	ldr	r3, [r3, #12]
 8008d62:	2b01      	cmp	r3, #1
 8008d64:	d107      	bne.n	8008d76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	689a      	ldr	r2, [r3, #8]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d72:	609a      	str	r2, [r3, #8]
 8008d74:	e006      	b.n	8008d84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	689a      	ldr	r2, [r3, #8]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008d82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	2b02      	cmp	r3, #2
 8008d8a:	d108      	bne.n	8008d9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	685a      	ldr	r2, [r3, #4]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d9a:	605a      	str	r2, [r3, #4]
 8008d9c:	e007      	b.n	8008dae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	685a      	ldr	r2, [r3, #4]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	6859      	ldr	r1, [r3, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681a      	ldr	r2, [r3, #0]
 8008db8:	4b1d      	ldr	r3, [pc, #116]	; (8008e30 <HAL_I2C_Init+0x134>)
 8008dba:	430b      	orrs	r3, r1
 8008dbc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	68da      	ldr	r2, [r3, #12]
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008dcc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691a      	ldr	r2, [r3, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	430a      	orrs	r2, r1
 8008de6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	69d9      	ldr	r1, [r3, #28]
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1a      	ldr	r2, [r3, #32]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	430a      	orrs	r2, r1
 8008df6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f042 0201 	orr.w	r2, r2, #1
 8008e06:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008e24:	2300      	movs	r3, #0
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3708      	adds	r7, #8
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	02008000 	.word	0x02008000

08008e34 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b088      	sub	sp, #32
 8008e38:	af02      	add	r7, sp, #8
 8008e3a:	60f8      	str	r0, [r7, #12]
 8008e3c:	607a      	str	r2, [r7, #4]
 8008e3e:	461a      	mov	r2, r3
 8008e40:	460b      	mov	r3, r1
 8008e42:	817b      	strh	r3, [r7, #10]
 8008e44:	4613      	mov	r3, r2
 8008e46:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	2b20      	cmp	r3, #32
 8008e52:	f040 80fd 	bne.w	8009050 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e5c:	2b01      	cmp	r3, #1
 8008e5e:	d101      	bne.n	8008e64 <HAL_I2C_Master_Transmit+0x30>
 8008e60:	2302      	movs	r3, #2
 8008e62:	e0f6      	b.n	8009052 <HAL_I2C_Master_Transmit+0x21e>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e6c:	f7fa fe00 	bl	8003a70 <HAL_GetTick>
 8008e70:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	9300      	str	r3, [sp, #0]
 8008e76:	2319      	movs	r3, #25
 8008e78:	2201      	movs	r2, #1
 8008e7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e7e:	68f8      	ldr	r0, [r7, #12]
 8008e80:	f000 fa0a 	bl	8009298 <I2C_WaitOnFlagUntilTimeout>
 8008e84:	4603      	mov	r3, r0
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d001      	beq.n	8008e8e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e0e1      	b.n	8009052 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2221      	movs	r2, #33	; 0x21
 8008e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	2210      	movs	r2, #16
 8008e9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	687a      	ldr	r2, [r7, #4]
 8008ea8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	893a      	ldrh	r2, [r7, #8]
 8008eae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	2bff      	cmp	r3, #255	; 0xff
 8008ebe:	d906      	bls.n	8008ece <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	22ff      	movs	r2, #255	; 0xff
 8008ec4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008ec6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eca:	617b      	str	r3, [r7, #20]
 8008ecc:	e007      	b.n	8008ede <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ed2:	b29a      	uxth	r2, r3
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008edc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d024      	beq.n	8008f30 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eea:	781a      	ldrb	r2, [r3, #0]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef6:	1c5a      	adds	r2, r3, #1
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	3b01      	subs	r3, #1
 8008f04:	b29a      	uxth	r2, r3
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f0e:	3b01      	subs	r3, #1
 8008f10:	b29a      	uxth	r2, r3
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	3301      	adds	r3, #1
 8008f1e:	b2da      	uxtb	r2, r3
 8008f20:	8979      	ldrh	r1, [r7, #10]
 8008f22:	4b4e      	ldr	r3, [pc, #312]	; (800905c <HAL_I2C_Master_Transmit+0x228>)
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	68f8      	ldr	r0, [r7, #12]
 8008f2a:	f000 fc05 	bl	8009738 <I2C_TransferConfig>
 8008f2e:	e066      	b.n	8008ffe <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	8979      	ldrh	r1, [r7, #10]
 8008f38:	4b48      	ldr	r3, [pc, #288]	; (800905c <HAL_I2C_Master_Transmit+0x228>)
 8008f3a:	9300      	str	r3, [sp, #0]
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	68f8      	ldr	r0, [r7, #12]
 8008f40:	f000 fbfa 	bl	8009738 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008f44:	e05b      	b.n	8008ffe <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f46:	693a      	ldr	r2, [r7, #16]
 8008f48:	6a39      	ldr	r1, [r7, #32]
 8008f4a:	68f8      	ldr	r0, [r7, #12]
 8008f4c:	f000 f9fd 	bl	800934a <I2C_WaitOnTXISFlagUntilTimeout>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008f56:	2301      	movs	r3, #1
 8008f58:	e07b      	b.n	8009052 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f5e:	781a      	ldrb	r2, [r3, #0]
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f6a:	1c5a      	adds	r2, r3, #1
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f74:	b29b      	uxth	r3, r3
 8008f76:	3b01      	subs	r3, #1
 8008f78:	b29a      	uxth	r2, r3
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f82:	3b01      	subs	r3, #1
 8008f84:	b29a      	uxth	r2, r3
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d034      	beq.n	8008ffe <HAL_I2C_Master_Transmit+0x1ca>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d130      	bne.n	8008ffe <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	9300      	str	r3, [sp, #0]
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	2180      	movs	r1, #128	; 0x80
 8008fa6:	68f8      	ldr	r0, [r7, #12]
 8008fa8:	f000 f976 	bl	8009298 <I2C_WaitOnFlagUntilTimeout>
 8008fac:	4603      	mov	r3, r0
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d001      	beq.n	8008fb6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008fb2:	2301      	movs	r3, #1
 8008fb4:	e04d      	b.n	8009052 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fba:	b29b      	uxth	r3, r3
 8008fbc:	2bff      	cmp	r3, #255	; 0xff
 8008fbe:	d90e      	bls.n	8008fde <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	22ff      	movs	r2, #255	; 0xff
 8008fc4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fca:	b2da      	uxtb	r2, r3
 8008fcc:	8979      	ldrh	r1, [r7, #10]
 8008fce:	2300      	movs	r3, #0
 8008fd0:	9300      	str	r3, [sp, #0]
 8008fd2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f000 fbae 	bl	8009738 <I2C_TransferConfig>
 8008fdc:	e00f      	b.n	8008ffe <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	8979      	ldrh	r1, [r7, #10]
 8008ff0:	2300      	movs	r3, #0
 8008ff2:	9300      	str	r3, [sp, #0]
 8008ff4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008ff8:	68f8      	ldr	r0, [r7, #12]
 8008ffa:	f000 fb9d 	bl	8009738 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009002:	b29b      	uxth	r3, r3
 8009004:	2b00      	cmp	r3, #0
 8009006:	d19e      	bne.n	8008f46 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009008:	693a      	ldr	r2, [r7, #16]
 800900a:	6a39      	ldr	r1, [r7, #32]
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f000 f9e3 	bl	80093d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8009012:	4603      	mov	r3, r0
 8009014:	2b00      	cmp	r3, #0
 8009016:	d001      	beq.n	800901c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8009018:	2301      	movs	r3, #1
 800901a:	e01a      	b.n	8009052 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2220      	movs	r2, #32
 8009022:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	6859      	ldr	r1, [r3, #4]
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681a      	ldr	r2, [r3, #0]
 800902e:	4b0c      	ldr	r3, [pc, #48]	; (8009060 <HAL_I2C_Master_Transmit+0x22c>)
 8009030:	400b      	ands	r3, r1
 8009032:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2220      	movs	r2, #32
 8009038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2200      	movs	r2, #0
 8009040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	2200      	movs	r2, #0
 8009048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800904c:	2300      	movs	r3, #0
 800904e:	e000      	b.n	8009052 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8009050:	2302      	movs	r3, #2
  }
}
 8009052:	4618      	mov	r0, r3
 8009054:	3718      	adds	r7, #24
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	80002000 	.word	0x80002000
 8009060:	fe00e800 	.word	0xfe00e800

08009064 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b088      	sub	sp, #32
 8009068:	af02      	add	r7, sp, #8
 800906a:	60f8      	str	r0, [r7, #12]
 800906c:	607a      	str	r2, [r7, #4]
 800906e:	461a      	mov	r2, r3
 8009070:	460b      	mov	r3, r1
 8009072:	817b      	strh	r3, [r7, #10]
 8009074:	4613      	mov	r3, r2
 8009076:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800907e:	b2db      	uxtb	r3, r3
 8009080:	2b20      	cmp	r3, #32
 8009082:	f040 80db 	bne.w	800923c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800908c:	2b01      	cmp	r3, #1
 800908e:	d101      	bne.n	8009094 <HAL_I2C_Master_Receive+0x30>
 8009090:	2302      	movs	r3, #2
 8009092:	e0d4      	b.n	800923e <HAL_I2C_Master_Receive+0x1da>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2201      	movs	r2, #1
 8009098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800909c:	f7fa fce8 	bl	8003a70 <HAL_GetTick>
 80090a0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	9300      	str	r3, [sp, #0]
 80090a6:	2319      	movs	r3, #25
 80090a8:	2201      	movs	r2, #1
 80090aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80090ae:	68f8      	ldr	r0, [r7, #12]
 80090b0:	f000 f8f2 	bl	8009298 <I2C_WaitOnFlagUntilTimeout>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d001      	beq.n	80090be <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80090ba:	2301      	movs	r3, #1
 80090bc:	e0bf      	b.n	800923e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2222      	movs	r2, #34	; 0x22
 80090c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	2210      	movs	r2, #16
 80090ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	2200      	movs	r2, #0
 80090d2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	893a      	ldrh	r2, [r7, #8]
 80090de:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	2200      	movs	r2, #0
 80090e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ea:	b29b      	uxth	r3, r3
 80090ec:	2bff      	cmp	r3, #255	; 0xff
 80090ee:	d90e      	bls.n	800910e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	22ff      	movs	r2, #255	; 0xff
 80090f4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	8979      	ldrh	r1, [r7, #10]
 80090fe:	4b52      	ldr	r3, [pc, #328]	; (8009248 <HAL_I2C_Master_Receive+0x1e4>)
 8009100:	9300      	str	r3, [sp, #0]
 8009102:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fb16 	bl	8009738 <I2C_TransferConfig>
 800910c:	e06d      	b.n	80091ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009112:	b29a      	uxth	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911c:	b2da      	uxtb	r2, r3
 800911e:	8979      	ldrh	r1, [r7, #10]
 8009120:	4b49      	ldr	r3, [pc, #292]	; (8009248 <HAL_I2C_Master_Receive+0x1e4>)
 8009122:	9300      	str	r3, [sp, #0]
 8009124:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009128:	68f8      	ldr	r0, [r7, #12]
 800912a:	f000 fb05 	bl	8009738 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800912e:	e05c      	b.n	80091ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009130:	697a      	ldr	r2, [r7, #20]
 8009132:	6a39      	ldr	r1, [r7, #32]
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 f993 	bl	8009460 <I2C_WaitOnRXNEFlagUntilTimeout>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d001      	beq.n	8009144 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8009140:	2301      	movs	r3, #1
 8009142:	e07c      	b.n	800923e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914e:	b2d2      	uxtb	r2, r2
 8009150:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009156:	1c5a      	adds	r2, r3, #1
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009160:	3b01      	subs	r3, #1
 8009162:	b29a      	uxth	r2, r3
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800916c:	b29b      	uxth	r3, r3
 800916e:	3b01      	subs	r3, #1
 8009170:	b29a      	uxth	r2, r3
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800917a:	b29b      	uxth	r3, r3
 800917c:	2b00      	cmp	r3, #0
 800917e:	d034      	beq.n	80091ea <HAL_I2C_Master_Receive+0x186>
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	d130      	bne.n	80091ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	6a3b      	ldr	r3, [r7, #32]
 800918e:	2200      	movs	r2, #0
 8009190:	2180      	movs	r1, #128	; 0x80
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f000 f880 	bl	8009298 <I2C_WaitOnFlagUntilTimeout>
 8009198:	4603      	mov	r3, r0
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800919e:	2301      	movs	r3, #1
 80091a0:	e04d      	b.n	800923e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091a6:	b29b      	uxth	r3, r3
 80091a8:	2bff      	cmp	r3, #255	; 0xff
 80091aa:	d90e      	bls.n	80091ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	22ff      	movs	r2, #255	; 0xff
 80091b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	8979      	ldrh	r1, [r7, #10]
 80091ba:	2300      	movs	r3, #0
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 fab8 	bl	8009738 <I2C_TransferConfig>
 80091c8:	e00f      	b.n	80091ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ce:	b29a      	uxth	r2, r3
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80091d8:	b2da      	uxtb	r2, r3
 80091da:	8979      	ldrh	r1, [r7, #10]
 80091dc:	2300      	movs	r3, #0
 80091de:	9300      	str	r3, [sp, #0]
 80091e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091e4:	68f8      	ldr	r0, [r7, #12]
 80091e6:	f000 faa7 	bl	8009738 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ee:	b29b      	uxth	r3, r3
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d19d      	bne.n	8009130 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091f4:	697a      	ldr	r2, [r7, #20]
 80091f6:	6a39      	ldr	r1, [r7, #32]
 80091f8:	68f8      	ldr	r0, [r7, #12]
 80091fa:	f000 f8ed 	bl	80093d8 <I2C_WaitOnSTOPFlagUntilTimeout>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d001      	beq.n	8009208 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8009204:	2301      	movs	r3, #1
 8009206:	e01a      	b.n	800923e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2220      	movs	r2, #32
 800920e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6859      	ldr	r1, [r3, #4]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681a      	ldr	r2, [r3, #0]
 800921a:	4b0c      	ldr	r3, [pc, #48]	; (800924c <HAL_I2C_Master_Receive+0x1e8>)
 800921c:	400b      	ands	r3, r1
 800921e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	2220      	movs	r2, #32
 8009224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2200      	movs	r2, #0
 8009234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	e000      	b.n	800923e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3718      	adds	r7, #24
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop
 8009248:	80002400 	.word	0x80002400
 800924c:	fe00e800 	.word	0xfe00e800

08009250 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009250:	b480      	push	{r7}
 8009252:	b083      	sub	sp, #12
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	699b      	ldr	r3, [r3, #24]
 800925e:	f003 0302 	and.w	r3, r3, #2
 8009262:	2b02      	cmp	r3, #2
 8009264:	d103      	bne.n	800926e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2200      	movs	r2, #0
 800926c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	699b      	ldr	r3, [r3, #24]
 8009274:	f003 0301 	and.w	r3, r3, #1
 8009278:	2b01      	cmp	r3, #1
 800927a:	d007      	beq.n	800928c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0201 	orr.w	r2, r2, #1
 800928a:	619a      	str	r2, [r3, #24]
  }
}
 800928c:	bf00      	nop
 800928e:	370c      	adds	r7, #12
 8009290:	46bd      	mov	sp, r7
 8009292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009296:	4770      	bx	lr

08009298 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009298:	b580      	push	{r7, lr}
 800929a:	b084      	sub	sp, #16
 800929c:	af00      	add	r7, sp, #0
 800929e:	60f8      	str	r0, [r7, #12]
 80092a0:	60b9      	str	r1, [r7, #8]
 80092a2:	603b      	str	r3, [r7, #0]
 80092a4:	4613      	mov	r3, r2
 80092a6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092a8:	e03b      	b.n	8009322 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80092aa:	69ba      	ldr	r2, [r7, #24]
 80092ac:	6839      	ldr	r1, [r7, #0]
 80092ae:	68f8      	ldr	r0, [r7, #12]
 80092b0:	f000 f962 	bl	8009578 <I2C_IsErrorOccurred>
 80092b4:	4603      	mov	r3, r0
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d001      	beq.n	80092be <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80092ba:	2301      	movs	r3, #1
 80092bc:	e041      	b.n	8009342 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80092be:	683b      	ldr	r3, [r7, #0]
 80092c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092c4:	d02d      	beq.n	8009322 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80092c6:	f7fa fbd3 	bl	8003a70 <HAL_GetTick>
 80092ca:	4602      	mov	r2, r0
 80092cc:	69bb      	ldr	r3, [r7, #24]
 80092ce:	1ad3      	subs	r3, r2, r3
 80092d0:	683a      	ldr	r2, [r7, #0]
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d302      	bcc.n	80092dc <I2C_WaitOnFlagUntilTimeout+0x44>
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d122      	bne.n	8009322 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	699a      	ldr	r2, [r3, #24]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	4013      	ands	r3, r2
 80092e6:	68ba      	ldr	r2, [r7, #8]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	bf0c      	ite	eq
 80092ec:	2301      	moveq	r3, #1
 80092ee:	2300      	movne	r3, #0
 80092f0:	b2db      	uxtb	r3, r3
 80092f2:	461a      	mov	r2, r3
 80092f4:	79fb      	ldrb	r3, [r7, #7]
 80092f6:	429a      	cmp	r2, r3
 80092f8:	d113      	bne.n	8009322 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fe:	f043 0220 	orr.w	r2, r3, #32
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2220      	movs	r2, #32
 800930a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	2200      	movs	r2, #0
 8009312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	e00f      	b.n	8009342 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	699a      	ldr	r2, [r3, #24]
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	4013      	ands	r3, r2
 800932c:	68ba      	ldr	r2, [r7, #8]
 800932e:	429a      	cmp	r2, r3
 8009330:	bf0c      	ite	eq
 8009332:	2301      	moveq	r3, #1
 8009334:	2300      	movne	r3, #0
 8009336:	b2db      	uxtb	r3, r3
 8009338:	461a      	mov	r2, r3
 800933a:	79fb      	ldrb	r3, [r7, #7]
 800933c:	429a      	cmp	r2, r3
 800933e:	d0b4      	beq.n	80092aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009340:	2300      	movs	r3, #0
}
 8009342:	4618      	mov	r0, r3
 8009344:	3710      	adds	r7, #16
 8009346:	46bd      	mov	sp, r7
 8009348:	bd80      	pop	{r7, pc}

0800934a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800934a:	b580      	push	{r7, lr}
 800934c:	b084      	sub	sp, #16
 800934e:	af00      	add	r7, sp, #0
 8009350:	60f8      	str	r0, [r7, #12]
 8009352:	60b9      	str	r1, [r7, #8]
 8009354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009356:	e033      	b.n	80093c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009358:	687a      	ldr	r2, [r7, #4]
 800935a:	68b9      	ldr	r1, [r7, #8]
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f90b 	bl	8009578 <I2C_IsErrorOccurred>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d001      	beq.n	800936c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009368:	2301      	movs	r3, #1
 800936a:	e031      	b.n	80093d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009372:	d025      	beq.n	80093c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009374:	f7fa fb7c 	bl	8003a70 <HAL_GetTick>
 8009378:	4602      	mov	r2, r0
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	1ad3      	subs	r3, r2, r3
 800937e:	68ba      	ldr	r2, [r7, #8]
 8009380:	429a      	cmp	r2, r3
 8009382:	d302      	bcc.n	800938a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d11a      	bne.n	80093c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	699b      	ldr	r3, [r3, #24]
 8009390:	f003 0302 	and.w	r3, r3, #2
 8009394:	2b02      	cmp	r3, #2
 8009396:	d013      	beq.n	80093c0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800939c:	f043 0220 	orr.w	r2, r3, #32
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2220      	movs	r2, #32
 80093a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80093bc:	2301      	movs	r3, #1
 80093be:	e007      	b.n	80093d0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699b      	ldr	r3, [r3, #24]
 80093c6:	f003 0302 	and.w	r3, r3, #2
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d1c4      	bne.n	8009358 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80093ce:	2300      	movs	r3, #0
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3710      	adds	r7, #16
 80093d4:	46bd      	mov	sp, r7
 80093d6:	bd80      	pop	{r7, pc}

080093d8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80093d8:	b580      	push	{r7, lr}
 80093da:	b084      	sub	sp, #16
 80093dc:	af00      	add	r7, sp, #0
 80093de:	60f8      	str	r0, [r7, #12]
 80093e0:	60b9      	str	r1, [r7, #8]
 80093e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093e4:	e02f      	b.n	8009446 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093e6:	687a      	ldr	r2, [r7, #4]
 80093e8:	68b9      	ldr	r1, [r7, #8]
 80093ea:	68f8      	ldr	r0, [r7, #12]
 80093ec:	f000 f8c4 	bl	8009578 <I2C_IsErrorOccurred>
 80093f0:	4603      	mov	r3, r0
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d001      	beq.n	80093fa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093f6:	2301      	movs	r3, #1
 80093f8:	e02d      	b.n	8009456 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093fa:	f7fa fb39 	bl	8003a70 <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	68ba      	ldr	r2, [r7, #8]
 8009406:	429a      	cmp	r2, r3
 8009408:	d302      	bcc.n	8009410 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d11a      	bne.n	8009446 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	699b      	ldr	r3, [r3, #24]
 8009416:	f003 0320 	and.w	r3, r3, #32
 800941a:	2b20      	cmp	r3, #32
 800941c:	d013      	beq.n	8009446 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009422:	f043 0220 	orr.w	r2, r3, #32
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2220      	movs	r2, #32
 800942e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	2200      	movs	r2, #0
 8009436:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8009442:	2301      	movs	r3, #1
 8009444:	e007      	b.n	8009456 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	699b      	ldr	r3, [r3, #24]
 800944c:	f003 0320 	and.w	r3, r3, #32
 8009450:	2b20      	cmp	r3, #32
 8009452:	d1c8      	bne.n	80093e6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3710      	adds	r7, #16
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
	...

08009460 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b086      	sub	sp, #24
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009470:	e071      	b.n	8009556 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009472:	687a      	ldr	r2, [r7, #4]
 8009474:	68b9      	ldr	r1, [r7, #8]
 8009476:	68f8      	ldr	r0, [r7, #12]
 8009478:	f000 f87e 	bl	8009578 <I2C_IsErrorOccurred>
 800947c:	4603      	mov	r3, r0
 800947e:	2b00      	cmp	r3, #0
 8009480:	d001      	beq.n	8009486 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8009482:	2301      	movs	r3, #1
 8009484:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	699b      	ldr	r3, [r3, #24]
 800948c:	f003 0320 	and.w	r3, r3, #32
 8009490:	2b20      	cmp	r3, #32
 8009492:	d13b      	bne.n	800950c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009494:	7dfb      	ldrb	r3, [r7, #23]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d138      	bne.n	800950c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	699b      	ldr	r3, [r3, #24]
 80094a0:	f003 0304 	and.w	r3, r3, #4
 80094a4:	2b04      	cmp	r3, #4
 80094a6:	d105      	bne.n	80094b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 80094b0:	2300      	movs	r3, #0
 80094b2:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	699b      	ldr	r3, [r3, #24]
 80094ba:	f003 0310 	and.w	r3, r3, #16
 80094be:	2b10      	cmp	r3, #16
 80094c0:	d121      	bne.n	8009506 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2210      	movs	r2, #16
 80094c8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2204      	movs	r2, #4
 80094ce:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	2220      	movs	r2, #32
 80094d6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	6859      	ldr	r1, [r3, #4]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	4b24      	ldr	r3, [pc, #144]	; (8009574 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80094e4:	400b      	ands	r3, r1
 80094e6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	75fb      	strb	r3, [r7, #23]
 8009504:	e002      	b.n	800950c <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 800950c:	f7fa fab0 	bl	8003a70 <HAL_GetTick>
 8009510:	4602      	mov	r2, r0
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	1ad3      	subs	r3, r2, r3
 8009516:	68ba      	ldr	r2, [r7, #8]
 8009518:	429a      	cmp	r2, r3
 800951a:	d302      	bcc.n	8009522 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 800951c:	68bb      	ldr	r3, [r7, #8]
 800951e:	2b00      	cmp	r3, #0
 8009520:	d119      	bne.n	8009556 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8009522:	7dfb      	ldrb	r3, [r7, #23]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d116      	bne.n	8009556 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	699b      	ldr	r3, [r3, #24]
 800952e:	f003 0304 	and.w	r3, r3, #4
 8009532:	2b04      	cmp	r3, #4
 8009534:	d00f      	beq.n	8009556 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800953a:	f043 0220 	orr.w	r2, r3, #32
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	2220      	movs	r2, #32
 8009546:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2200      	movs	r2, #0
 800954e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 8009552:	2301      	movs	r3, #1
 8009554:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	699b      	ldr	r3, [r3, #24]
 800955c:	f003 0304 	and.w	r3, r3, #4
 8009560:	2b04      	cmp	r3, #4
 8009562:	d002      	beq.n	800956a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009564:	7dfb      	ldrb	r3, [r7, #23]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d083      	beq.n	8009472 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800956a:	7dfb      	ldrb	r3, [r7, #23]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3718      	adds	r7, #24
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}
 8009574:	fe00e800 	.word	0xfe00e800

08009578 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b08a      	sub	sp, #40	; 0x28
 800957c:	af00      	add	r7, sp, #0
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	60b9      	str	r1, [r7, #8]
 8009582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009584:	2300      	movs	r3, #0
 8009586:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699b      	ldr	r3, [r3, #24]
 8009590:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8009592:	2300      	movs	r3, #0
 8009594:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	f003 0310 	and.w	r3, r3, #16
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d068      	beq.n	8009676 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2210      	movs	r2, #16
 80095aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095ac:	e049      	b.n	8009642 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095b4:	d045      	beq.n	8009642 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80095b6:	f7fa fa5b 	bl	8003a70 <HAL_GetTick>
 80095ba:	4602      	mov	r2, r0
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	1ad3      	subs	r3, r2, r3
 80095c0:	68ba      	ldr	r2, [r7, #8]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d302      	bcc.n	80095cc <I2C_IsErrorOccurred+0x54>
 80095c6:	68bb      	ldr	r3, [r7, #8]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d13a      	bne.n	8009642 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80095de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095ee:	d121      	bne.n	8009634 <I2C_IsErrorOccurred+0xbc>
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095f6:	d01d      	beq.n	8009634 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80095f8:	7cfb      	ldrb	r3, [r7, #19]
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d01a      	beq.n	8009634 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	685a      	ldr	r2, [r3, #4]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800960c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800960e:	f7fa fa2f 	bl	8003a70 <HAL_GetTick>
 8009612:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009614:	e00e      	b.n	8009634 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8009616:	f7fa fa2b 	bl	8003a70 <HAL_GetTick>
 800961a:	4602      	mov	r2, r0
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	1ad3      	subs	r3, r2, r3
 8009620:	2b19      	cmp	r3, #25
 8009622:	d907      	bls.n	8009634 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	f043 0320 	orr.w	r3, r3, #32
 800962a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8009632:	e006      	b.n	8009642 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	699b      	ldr	r3, [r3, #24]
 800963a:	f003 0320 	and.w	r3, r3, #32
 800963e:	2b20      	cmp	r3, #32
 8009640:	d1e9      	bne.n	8009616 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	699b      	ldr	r3, [r3, #24]
 8009648:	f003 0320 	and.w	r3, r3, #32
 800964c:	2b20      	cmp	r3, #32
 800964e:	d003      	beq.n	8009658 <I2C_IsErrorOccurred+0xe0>
 8009650:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009654:	2b00      	cmp	r3, #0
 8009656:	d0aa      	beq.n	80095ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800965c:	2b00      	cmp	r3, #0
 800965e:	d103      	bne.n	8009668 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	2220      	movs	r2, #32
 8009666:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	f043 0304 	orr.w	r3, r3, #4
 800966e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	699b      	ldr	r3, [r3, #24]
 800967c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	f043 0301 	orr.w	r3, r3, #1
 800968e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009698:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80096a0:	69bb      	ldr	r3, [r7, #24]
 80096a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d00b      	beq.n	80096c2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80096aa:	6a3b      	ldr	r3, [r7, #32]
 80096ac:	f043 0308 	orr.w	r3, r3, #8
 80096b0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80096ba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096bc:	2301      	movs	r3, #1
 80096be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d00b      	beq.n	80096e4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80096cc:	6a3b      	ldr	r3, [r7, #32]
 80096ce:	f043 0302 	orr.w	r3, r3, #2
 80096d2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096dc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80096e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d01c      	beq.n	8009726 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f7ff fdaf 	bl	8009250 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	6859      	ldr	r1, [r3, #4]
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	681a      	ldr	r2, [r3, #0]
 80096fc:	4b0d      	ldr	r3, [pc, #52]	; (8009734 <I2C_IsErrorOccurred+0x1bc>)
 80096fe:	400b      	ands	r3, r1
 8009700:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009706:	6a3b      	ldr	r3, [r7, #32]
 8009708:	431a      	orrs	r2, r3
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	2220      	movs	r2, #32
 8009712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2200      	movs	r2, #0
 800971a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	2200      	movs	r2, #0
 8009722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009726:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800972a:	4618      	mov	r0, r3
 800972c:	3728      	adds	r7, #40	; 0x28
 800972e:	46bd      	mov	sp, r7
 8009730:	bd80      	pop	{r7, pc}
 8009732:	bf00      	nop
 8009734:	fe00e800 	.word	0xfe00e800

08009738 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009738:	b480      	push	{r7}
 800973a:	b087      	sub	sp, #28
 800973c:	af00      	add	r7, sp, #0
 800973e:	60f8      	str	r0, [r7, #12]
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	460b      	mov	r3, r1
 8009744:	817b      	strh	r3, [r7, #10]
 8009746:	4613      	mov	r3, r2
 8009748:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800974a:	897b      	ldrh	r3, [r7, #10]
 800974c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009750:	7a7b      	ldrb	r3, [r7, #9]
 8009752:	041b      	lsls	r3, r3, #16
 8009754:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009758:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	4313      	orrs	r3, r2
 8009762:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009766:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	685a      	ldr	r2, [r3, #4]
 800976e:	6a3b      	ldr	r3, [r7, #32]
 8009770:	0d5b      	lsrs	r3, r3, #21
 8009772:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009776:	4b08      	ldr	r3, [pc, #32]	; (8009798 <I2C_TransferConfig+0x60>)
 8009778:	430b      	orrs	r3, r1
 800977a:	43db      	mvns	r3, r3
 800977c:	ea02 0103 	and.w	r1, r2, r3
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	697a      	ldr	r2, [r7, #20]
 8009786:	430a      	orrs	r2, r1
 8009788:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800978a:	bf00      	nop
 800978c:	371c      	adds	r7, #28
 800978e:	46bd      	mov	sp, r7
 8009790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009794:	4770      	bx	lr
 8009796:	bf00      	nop
 8009798:	03ff63ff 	.word	0x03ff63ff

0800979c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800979c:	b480      	push	{r7}
 800979e:	b083      	sub	sp, #12
 80097a0:	af00      	add	r7, sp, #0
 80097a2:	6078      	str	r0, [r7, #4]
 80097a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097ac:	b2db      	uxtb	r3, r3
 80097ae:	2b20      	cmp	r3, #32
 80097b0:	d138      	bne.n	8009824 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d101      	bne.n	80097c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80097bc:	2302      	movs	r3, #2
 80097be:	e032      	b.n	8009826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	2201      	movs	r2, #1
 80097c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	2224      	movs	r2, #36	; 0x24
 80097cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681a      	ldr	r2, [r3, #0]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f022 0201 	bic.w	r2, r2, #1
 80097de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	6819      	ldr	r1, [r3, #0]
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	683a      	ldr	r2, [r7, #0]
 80097fc:	430a      	orrs	r2, r1
 80097fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	681a      	ldr	r2, [r3, #0]
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	f042 0201 	orr.w	r2, r2, #1
 800980e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2220      	movs	r2, #32
 8009814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2200      	movs	r2, #0
 800981c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	e000      	b.n	8009826 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009824:	2302      	movs	r3, #2
  }
}
 8009826:	4618      	mov	r0, r3
 8009828:	370c      	adds	r7, #12
 800982a:	46bd      	mov	sp, r7
 800982c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009830:	4770      	bx	lr

08009832 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009832:	b480      	push	{r7}
 8009834:	b085      	sub	sp, #20
 8009836:	af00      	add	r7, sp, #0
 8009838:	6078      	str	r0, [r7, #4]
 800983a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009842:	b2db      	uxtb	r3, r3
 8009844:	2b20      	cmp	r3, #32
 8009846:	d139      	bne.n	80098bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009852:	2302      	movs	r3, #2
 8009854:	e033      	b.n	80098be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2224      	movs	r2, #36	; 0x24
 8009862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	681a      	ldr	r2, [r3, #0]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f022 0201 	bic.w	r2, r2, #1
 8009874:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009884:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	021b      	lsls	r3, r3, #8
 800988a:	68fa      	ldr	r2, [r7, #12]
 800988c:	4313      	orrs	r3, r2
 800988e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	68fa      	ldr	r2, [r7, #12]
 8009896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	681a      	ldr	r2, [r3, #0]
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	f042 0201 	orr.w	r2, r2, #1
 80098a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	2220      	movs	r2, #32
 80098ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80098b8:	2300      	movs	r3, #0
 80098ba:	e000      	b.n	80098be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80098bc:	2302      	movs	r3, #2
  }
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3714      	adds	r7, #20
 80098c2:	46bd      	mov	sp, r7
 80098c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c8:	4770      	bx	lr
	...

080098cc <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80098d4:	4b0d      	ldr	r3, [pc, #52]	; (800990c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80098d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80098da:	4a0c      	ldr	r2, [pc, #48]	; (800990c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80098dc:	f043 0302 	orr.w	r3, r3, #2
 80098e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80098e4:	4b09      	ldr	r3, [pc, #36]	; (800990c <HAL_I2CEx_EnableFastModePlus+0x40>)
 80098e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80098ea:	f003 0302 	and.w	r3, r3, #2
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80098f2:	4b07      	ldr	r3, [pc, #28]	; (8009910 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80098f4:	685a      	ldr	r2, [r3, #4]
 80098f6:	4906      	ldr	r1, [pc, #24]	; (8009910 <HAL_I2CEx_EnableFastModePlus+0x44>)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	604b      	str	r3, [r1, #4]
}
 80098fe:	bf00      	nop
 8009900:	3714      	adds	r7, #20
 8009902:	46bd      	mov	sp, r7
 8009904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	58024400 	.word	0x58024400
 8009910:	58000400 	.word	0x58000400

08009914 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800991c:	4b19      	ldr	r3, [pc, #100]	; (8009984 <HAL_PWREx_ConfigSupply+0x70>)
 800991e:	68db      	ldr	r3, [r3, #12]
 8009920:	f003 0304 	and.w	r3, r3, #4
 8009924:	2b04      	cmp	r3, #4
 8009926:	d00a      	beq.n	800993e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009928:	4b16      	ldr	r3, [pc, #88]	; (8009984 <HAL_PWREx_ConfigSupply+0x70>)
 800992a:	68db      	ldr	r3, [r3, #12]
 800992c:	f003 0307 	and.w	r3, r3, #7
 8009930:	687a      	ldr	r2, [r7, #4]
 8009932:	429a      	cmp	r2, r3
 8009934:	d001      	beq.n	800993a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009936:	2301      	movs	r3, #1
 8009938:	e01f      	b.n	800997a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800993a:	2300      	movs	r3, #0
 800993c:	e01d      	b.n	800997a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800993e:	4b11      	ldr	r3, [pc, #68]	; (8009984 <HAL_PWREx_ConfigSupply+0x70>)
 8009940:	68db      	ldr	r3, [r3, #12]
 8009942:	f023 0207 	bic.w	r2, r3, #7
 8009946:	490f      	ldr	r1, [pc, #60]	; (8009984 <HAL_PWREx_ConfigSupply+0x70>)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4313      	orrs	r3, r2
 800994c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800994e:	f7fa f88f 	bl	8003a70 <HAL_GetTick>
 8009952:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009954:	e009      	b.n	800996a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009956:	f7fa f88b 	bl	8003a70 <HAL_GetTick>
 800995a:	4602      	mov	r2, r0
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	1ad3      	subs	r3, r2, r3
 8009960:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009964:	d901      	bls.n	800996a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
 8009968:	e007      	b.n	800997a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800996a:	4b06      	ldr	r3, [pc, #24]	; (8009984 <HAL_PWREx_ConfigSupply+0x70>)
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009972:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009976:	d1ee      	bne.n	8009956 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009978:	2300      	movs	r3, #0
}
 800997a:	4618      	mov	r0, r3
 800997c:	3710      	adds	r7, #16
 800997e:	46bd      	mov	sp, r7
 8009980:	bd80      	pop	{r7, pc}
 8009982:	bf00      	nop
 8009984:	58024800 	.word	0x58024800

08009988 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b08c      	sub	sp, #48	; 0x30
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	d102      	bne.n	800999c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009996:	2301      	movs	r3, #1
 8009998:	f000 bc48 	b.w	800a22c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0301 	and.w	r3, r3, #1
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 8088 	beq.w	8009aba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80099aa:	4b99      	ldr	r3, [pc, #612]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 80099ac:	691b      	ldr	r3, [r3, #16]
 80099ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099b4:	4b96      	ldr	r3, [pc, #600]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 80099b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	2b10      	cmp	r3, #16
 80099be:	d007      	beq.n	80099d0 <HAL_RCC_OscConfig+0x48>
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c2:	2b18      	cmp	r3, #24
 80099c4:	d111      	bne.n	80099ea <HAL_RCC_OscConfig+0x62>
 80099c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099c8:	f003 0303 	and.w	r3, r3, #3
 80099cc:	2b02      	cmp	r3, #2
 80099ce:	d10c      	bne.n	80099ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80099d0:	4b8f      	ldr	r3, [pc, #572]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d06d      	beq.n	8009ab8 <HAL_RCC_OscConfig+0x130>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	685b      	ldr	r3, [r3, #4]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d169      	bne.n	8009ab8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80099e4:	2301      	movs	r3, #1
 80099e6:	f000 bc21 	b.w	800a22c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099f2:	d106      	bne.n	8009a02 <HAL_RCC_OscConfig+0x7a>
 80099f4:	4b86      	ldr	r3, [pc, #536]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a85      	ldr	r2, [pc, #532]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 80099fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099fe:	6013      	str	r3, [r2, #0]
 8009a00:	e02e      	b.n	8009a60 <HAL_RCC_OscConfig+0xd8>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	685b      	ldr	r3, [r3, #4]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d10c      	bne.n	8009a24 <HAL_RCC_OscConfig+0x9c>
 8009a0a:	4b81      	ldr	r3, [pc, #516]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a80      	ldr	r2, [pc, #512]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a14:	6013      	str	r3, [r2, #0]
 8009a16:	4b7e      	ldr	r3, [pc, #504]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a7d      	ldr	r2, [pc, #500]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a1c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a20:	6013      	str	r3, [r2, #0]
 8009a22:	e01d      	b.n	8009a60 <HAL_RCC_OscConfig+0xd8>
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009a2c:	d10c      	bne.n	8009a48 <HAL_RCC_OscConfig+0xc0>
 8009a2e:	4b78      	ldr	r3, [pc, #480]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	4a77      	ldr	r2, [pc, #476]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009a38:	6013      	str	r3, [r2, #0]
 8009a3a:	4b75      	ldr	r3, [pc, #468]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a74      	ldr	r2, [pc, #464]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a44:	6013      	str	r3, [r2, #0]
 8009a46:	e00b      	b.n	8009a60 <HAL_RCC_OscConfig+0xd8>
 8009a48:	4b71      	ldr	r3, [pc, #452]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a70      	ldr	r2, [pc, #448]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a52:	6013      	str	r3, [r2, #0]
 8009a54:	4b6e      	ldr	r3, [pc, #440]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	4a6d      	ldr	r2, [pc, #436]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d013      	beq.n	8009a90 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a68:	f7fa f802 	bl	8003a70 <HAL_GetTick>
 8009a6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a6e:	e008      	b.n	8009a82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a70:	f7f9 fffe 	bl	8003a70 <HAL_GetTick>
 8009a74:	4602      	mov	r2, r0
 8009a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a78:	1ad3      	subs	r3, r2, r3
 8009a7a:	2b64      	cmp	r3, #100	; 0x64
 8009a7c:	d901      	bls.n	8009a82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a7e:	2303      	movs	r3, #3
 8009a80:	e3d4      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a82:	4b63      	ldr	r3, [pc, #396]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d0f0      	beq.n	8009a70 <HAL_RCC_OscConfig+0xe8>
 8009a8e:	e014      	b.n	8009aba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a90:	f7f9 ffee 	bl	8003a70 <HAL_GetTick>
 8009a94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a96:	e008      	b.n	8009aaa <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a98:	f7f9 ffea 	bl	8003a70 <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	2b64      	cmp	r3, #100	; 0x64
 8009aa4:	d901      	bls.n	8009aaa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009aa6:	2303      	movs	r3, #3
 8009aa8:	e3c0      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009aaa:	4b59      	ldr	r3, [pc, #356]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d1f0      	bne.n	8009a98 <HAL_RCC_OscConfig+0x110>
 8009ab6:	e000      	b.n	8009aba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f003 0302 	and.w	r3, r3, #2
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 80ca 	beq.w	8009c5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ac8:	4b51      	ldr	r3, [pc, #324]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009aca:	691b      	ldr	r3, [r3, #16]
 8009acc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009ad0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009ad2:	4b4f      	ldr	r3, [pc, #316]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ad6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009ad8:	6a3b      	ldr	r3, [r7, #32]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d007      	beq.n	8009aee <HAL_RCC_OscConfig+0x166>
 8009ade:	6a3b      	ldr	r3, [r7, #32]
 8009ae0:	2b18      	cmp	r3, #24
 8009ae2:	d156      	bne.n	8009b92 <HAL_RCC_OscConfig+0x20a>
 8009ae4:	69fb      	ldr	r3, [r7, #28]
 8009ae6:	f003 0303 	and.w	r3, r3, #3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d151      	bne.n	8009b92 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009aee:	4b48      	ldr	r3, [pc, #288]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0304 	and.w	r3, r3, #4
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d005      	beq.n	8009b06 <HAL_RCC_OscConfig+0x17e>
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d101      	bne.n	8009b06 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009b02:	2301      	movs	r3, #1
 8009b04:	e392      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b06:	4b42      	ldr	r3, [pc, #264]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f023 0219 	bic.w	r2, r3, #25
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	68db      	ldr	r3, [r3, #12]
 8009b12:	493f      	ldr	r1, [pc, #252]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b14:	4313      	orrs	r3, r2
 8009b16:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b18:	f7f9 ffaa 	bl	8003a70 <HAL_GetTick>
 8009b1c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b1e:	e008      	b.n	8009b32 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b20:	f7f9 ffa6 	bl	8003a70 <HAL_GetTick>
 8009b24:	4602      	mov	r2, r0
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	1ad3      	subs	r3, r2, r3
 8009b2a:	2b02      	cmp	r3, #2
 8009b2c:	d901      	bls.n	8009b32 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009b2e:	2303      	movs	r3, #3
 8009b30:	e37c      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b32:	4b37      	ldr	r3, [pc, #220]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0304 	and.w	r3, r3, #4
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d0f0      	beq.n	8009b20 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b3e:	f7f9 ffa3 	bl	8003a88 <HAL_GetREVID>
 8009b42:	4603      	mov	r3, r0
 8009b44:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b48:	4293      	cmp	r3, r2
 8009b4a:	d817      	bhi.n	8009b7c <HAL_RCC_OscConfig+0x1f4>
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	691b      	ldr	r3, [r3, #16]
 8009b50:	2b40      	cmp	r3, #64	; 0x40
 8009b52:	d108      	bne.n	8009b66 <HAL_RCC_OscConfig+0x1de>
 8009b54:	4b2e      	ldr	r3, [pc, #184]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b56:	685b      	ldr	r3, [r3, #4]
 8009b58:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009b5c:	4a2c      	ldr	r2, [pc, #176]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b62:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b64:	e07a      	b.n	8009c5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b66:	4b2a      	ldr	r3, [pc, #168]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b68:	685b      	ldr	r3, [r3, #4]
 8009b6a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	691b      	ldr	r3, [r3, #16]
 8009b72:	031b      	lsls	r3, r3, #12
 8009b74:	4926      	ldr	r1, [pc, #152]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b76:	4313      	orrs	r3, r2
 8009b78:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b7a:	e06f      	b.n	8009c5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b7c:	4b24      	ldr	r3, [pc, #144]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	691b      	ldr	r3, [r3, #16]
 8009b88:	061b      	lsls	r3, r3, #24
 8009b8a:	4921      	ldr	r1, [pc, #132]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b90:	e064      	b.n	8009c5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d047      	beq.n	8009c2a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b9a:	4b1d      	ldr	r3, [pc, #116]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f023 0219 	bic.w	r2, r3, #25
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68db      	ldr	r3, [r3, #12]
 8009ba6:	491a      	ldr	r1, [pc, #104]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009ba8:	4313      	orrs	r3, r2
 8009baa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bac:	f7f9 ff60 	bl	8003a70 <HAL_GetTick>
 8009bb0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bb2:	e008      	b.n	8009bc6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bb4:	f7f9 ff5c 	bl	8003a70 <HAL_GetTick>
 8009bb8:	4602      	mov	r2, r0
 8009bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	2b02      	cmp	r3, #2
 8009bc0:	d901      	bls.n	8009bc6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009bc2:	2303      	movs	r3, #3
 8009bc4:	e332      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009bc6:	4b12      	ldr	r3, [pc, #72]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f003 0304 	and.w	r3, r3, #4
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d0f0      	beq.n	8009bb4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009bd2:	f7f9 ff59 	bl	8003a88 <HAL_GetREVID>
 8009bd6:	4603      	mov	r3, r0
 8009bd8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d819      	bhi.n	8009c14 <HAL_RCC_OscConfig+0x28c>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	691b      	ldr	r3, [r3, #16]
 8009be4:	2b40      	cmp	r3, #64	; 0x40
 8009be6:	d108      	bne.n	8009bfa <HAL_RCC_OscConfig+0x272>
 8009be8:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009bf0:	4a07      	ldr	r2, [pc, #28]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bf6:	6053      	str	r3, [r2, #4]
 8009bf8:	e030      	b.n	8009c5c <HAL_RCC_OscConfig+0x2d4>
 8009bfa:	4b05      	ldr	r3, [pc, #20]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009bfc:	685b      	ldr	r3, [r3, #4]
 8009bfe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	691b      	ldr	r3, [r3, #16]
 8009c06:	031b      	lsls	r3, r3, #12
 8009c08:	4901      	ldr	r1, [pc, #4]	; (8009c10 <HAL_RCC_OscConfig+0x288>)
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	604b      	str	r3, [r1, #4]
 8009c0e:	e025      	b.n	8009c5c <HAL_RCC_OscConfig+0x2d4>
 8009c10:	58024400 	.word	0x58024400
 8009c14:	4b9a      	ldr	r3, [pc, #616]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	061b      	lsls	r3, r3, #24
 8009c22:	4997      	ldr	r1, [pc, #604]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009c24:	4313      	orrs	r3, r2
 8009c26:	604b      	str	r3, [r1, #4]
 8009c28:	e018      	b.n	8009c5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009c2a:	4b95      	ldr	r3, [pc, #596]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a94      	ldr	r2, [pc, #592]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009c30:	f023 0301 	bic.w	r3, r3, #1
 8009c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009c36:	f7f9 ff1b 	bl	8003a70 <HAL_GetTick>
 8009c3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c3c:	e008      	b.n	8009c50 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c3e:	f7f9 ff17 	bl	8003a70 <HAL_GetTick>
 8009c42:	4602      	mov	r2, r0
 8009c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c46:	1ad3      	subs	r3, r2, r3
 8009c48:	2b02      	cmp	r3, #2
 8009c4a:	d901      	bls.n	8009c50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009c4c:	2303      	movs	r3, #3
 8009c4e:	e2ed      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c50:	4b8b      	ldr	r3, [pc, #556]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f003 0304 	and.w	r3, r3, #4
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d1f0      	bne.n	8009c3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f003 0310 	and.w	r3, r3, #16
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	f000 80a9 	beq.w	8009dbc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c6a:	4b85      	ldr	r3, [pc, #532]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009c6c:	691b      	ldr	r3, [r3, #16]
 8009c6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c74:	4b82      	ldr	r3, [pc, #520]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c78:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009c7a:	69bb      	ldr	r3, [r7, #24]
 8009c7c:	2b08      	cmp	r3, #8
 8009c7e:	d007      	beq.n	8009c90 <HAL_RCC_OscConfig+0x308>
 8009c80:	69bb      	ldr	r3, [r7, #24]
 8009c82:	2b18      	cmp	r3, #24
 8009c84:	d13a      	bne.n	8009cfc <HAL_RCC_OscConfig+0x374>
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f003 0303 	and.w	r3, r3, #3
 8009c8c:	2b01      	cmp	r3, #1
 8009c8e:	d135      	bne.n	8009cfc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c90:	4b7b      	ldr	r3, [pc, #492]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d005      	beq.n	8009ca8 <HAL_RCC_OscConfig+0x320>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	2b80      	cmp	r3, #128	; 0x80
 8009ca2:	d001      	beq.n	8009ca8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	e2c1      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ca8:	f7f9 feee 	bl	8003a88 <HAL_GetREVID>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f241 0203 	movw	r2, #4099	; 0x1003
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d817      	bhi.n	8009ce6 <HAL_RCC_OscConfig+0x35e>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a1b      	ldr	r3, [r3, #32]
 8009cba:	2b20      	cmp	r3, #32
 8009cbc:	d108      	bne.n	8009cd0 <HAL_RCC_OscConfig+0x348>
 8009cbe:	4b70      	ldr	r3, [pc, #448]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009cc0:	685b      	ldr	r3, [r3, #4]
 8009cc2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009cc6:	4a6e      	ldr	r2, [pc, #440]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009cc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009ccc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009cce:	e075      	b.n	8009dbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009cd0:	4b6b      	ldr	r3, [pc, #428]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009cd2:	685b      	ldr	r3, [r3, #4]
 8009cd4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6a1b      	ldr	r3, [r3, #32]
 8009cdc:	069b      	lsls	r3, r3, #26
 8009cde:	4968      	ldr	r1, [pc, #416]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009ce0:	4313      	orrs	r3, r2
 8009ce2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ce4:	e06a      	b.n	8009dbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ce6:	4b66      	ldr	r3, [pc, #408]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009ce8:	68db      	ldr	r3, [r3, #12]
 8009cea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6a1b      	ldr	r3, [r3, #32]
 8009cf2:	061b      	lsls	r3, r3, #24
 8009cf4:	4962      	ldr	r1, [pc, #392]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009cfa:	e05f      	b.n	8009dbc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	69db      	ldr	r3, [r3, #28]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d042      	beq.n	8009d8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009d04:	4b5e      	ldr	r3, [pc, #376]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	4a5d      	ldr	r2, [pc, #372]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d10:	f7f9 feae 	bl	8003a70 <HAL_GetTick>
 8009d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d16:	e008      	b.n	8009d2a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d18:	f7f9 feaa 	bl	8003a70 <HAL_GetTick>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d20:	1ad3      	subs	r3, r2, r3
 8009d22:	2b02      	cmp	r3, #2
 8009d24:	d901      	bls.n	8009d2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009d26:	2303      	movs	r3, #3
 8009d28:	e280      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009d2a:	4b55      	ldr	r3, [pc, #340]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d0f0      	beq.n	8009d18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009d36:	f7f9 fea7 	bl	8003a88 <HAL_GetREVID>
 8009d3a:	4603      	mov	r3, r0
 8009d3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d817      	bhi.n	8009d74 <HAL_RCC_OscConfig+0x3ec>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	6a1b      	ldr	r3, [r3, #32]
 8009d48:	2b20      	cmp	r3, #32
 8009d4a:	d108      	bne.n	8009d5e <HAL_RCC_OscConfig+0x3d6>
 8009d4c:	4b4c      	ldr	r3, [pc, #304]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009d54:	4a4a      	ldr	r2, [pc, #296]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d5a:	6053      	str	r3, [r2, #4]
 8009d5c:	e02e      	b.n	8009dbc <HAL_RCC_OscConfig+0x434>
 8009d5e:	4b48      	ldr	r3, [pc, #288]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6a1b      	ldr	r3, [r3, #32]
 8009d6a:	069b      	lsls	r3, r3, #26
 8009d6c:	4944      	ldr	r1, [pc, #272]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d6e:	4313      	orrs	r3, r2
 8009d70:	604b      	str	r3, [r1, #4]
 8009d72:	e023      	b.n	8009dbc <HAL_RCC_OscConfig+0x434>
 8009d74:	4b42      	ldr	r3, [pc, #264]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d76:	68db      	ldr	r3, [r3, #12]
 8009d78:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a1b      	ldr	r3, [r3, #32]
 8009d80:	061b      	lsls	r3, r3, #24
 8009d82:	493f      	ldr	r1, [pc, #252]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60cb      	str	r3, [r1, #12]
 8009d88:	e018      	b.n	8009dbc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009d8a:	4b3d      	ldr	r3, [pc, #244]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a3c      	ldr	r2, [pc, #240]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d96:	f7f9 fe6b 	bl	8003a70 <HAL_GetTick>
 8009d9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d9c:	e008      	b.n	8009db0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d9e:	f7f9 fe67 	bl	8003a70 <HAL_GetTick>
 8009da2:	4602      	mov	r2, r0
 8009da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da6:	1ad3      	subs	r3, r2, r3
 8009da8:	2b02      	cmp	r3, #2
 8009daa:	d901      	bls.n	8009db0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009dac:	2303      	movs	r3, #3
 8009dae:	e23d      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009db0:	4b33      	ldr	r3, [pc, #204]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d1f0      	bne.n	8009d9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0308 	and.w	r3, r3, #8
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d036      	beq.n	8009e36 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	695b      	ldr	r3, [r3, #20]
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d019      	beq.n	8009e04 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009dd0:	4b2b      	ldr	r3, [pc, #172]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009dd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dd4:	4a2a      	ldr	r2, [pc, #168]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009dd6:	f043 0301 	orr.w	r3, r3, #1
 8009dda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ddc:	f7f9 fe48 	bl	8003a70 <HAL_GetTick>
 8009de0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009de2:	e008      	b.n	8009df6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009de4:	f7f9 fe44 	bl	8003a70 <HAL_GetTick>
 8009de8:	4602      	mov	r2, r0
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	1ad3      	subs	r3, r2, r3
 8009dee:	2b02      	cmp	r3, #2
 8009df0:	d901      	bls.n	8009df6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009df2:	2303      	movs	r3, #3
 8009df4:	e21a      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009df6:	4b22      	ldr	r3, [pc, #136]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dfa:	f003 0302 	and.w	r3, r3, #2
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d0f0      	beq.n	8009de4 <HAL_RCC_OscConfig+0x45c>
 8009e02:	e018      	b.n	8009e36 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009e04:	4b1e      	ldr	r3, [pc, #120]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e08:	4a1d      	ldr	r2, [pc, #116]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009e0a:	f023 0301 	bic.w	r3, r3, #1
 8009e0e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009e10:	f7f9 fe2e 	bl	8003a70 <HAL_GetTick>
 8009e14:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e16:	e008      	b.n	8009e2a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009e18:	f7f9 fe2a 	bl	8003a70 <HAL_GetTick>
 8009e1c:	4602      	mov	r2, r0
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d901      	bls.n	8009e2a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009e26:	2303      	movs	r3, #3
 8009e28:	e200      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009e2a:	4b15      	ldr	r3, [pc, #84]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e2e:	f003 0302 	and.w	r3, r3, #2
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	d1f0      	bne.n	8009e18 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 0320 	and.w	r3, r3, #32
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d039      	beq.n	8009eb6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	699b      	ldr	r3, [r3, #24]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d01c      	beq.n	8009e84 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e4a:	4b0d      	ldr	r3, [pc, #52]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a0c      	ldr	r2, [pc, #48]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009e50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e54:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e56:	f7f9 fe0b 	bl	8003a70 <HAL_GetTick>
 8009e5a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e5c:	e008      	b.n	8009e70 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e5e:	f7f9 fe07 	bl	8003a70 <HAL_GetTick>
 8009e62:	4602      	mov	r2, r0
 8009e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e66:	1ad3      	subs	r3, r2, r3
 8009e68:	2b02      	cmp	r3, #2
 8009e6a:	d901      	bls.n	8009e70 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	e1dd      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e70:	4b03      	ldr	r3, [pc, #12]	; (8009e80 <HAL_RCC_OscConfig+0x4f8>)
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d0f0      	beq.n	8009e5e <HAL_RCC_OscConfig+0x4d6>
 8009e7c:	e01b      	b.n	8009eb6 <HAL_RCC_OscConfig+0x52e>
 8009e7e:	bf00      	nop
 8009e80:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e84:	4b9b      	ldr	r3, [pc, #620]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	4a9a      	ldr	r2, [pc, #616]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e8e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e90:	f7f9 fdee 	bl	8003a70 <HAL_GetTick>
 8009e94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e96:	e008      	b.n	8009eaa <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e98:	f7f9 fdea 	bl	8003a70 <HAL_GetTick>
 8009e9c:	4602      	mov	r2, r0
 8009e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea0:	1ad3      	subs	r3, r2, r3
 8009ea2:	2b02      	cmp	r3, #2
 8009ea4:	d901      	bls.n	8009eaa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009ea6:	2303      	movs	r3, #3
 8009ea8:	e1c0      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009eaa:	4b92      	ldr	r3, [pc, #584]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1f0      	bne.n	8009e98 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 8081 	beq.w	8009fc6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009ec4:	4b8c      	ldr	r3, [pc, #560]	; (800a0f8 <HAL_RCC_OscConfig+0x770>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a8b      	ldr	r2, [pc, #556]	; (800a0f8 <HAL_RCC_OscConfig+0x770>)
 8009eca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009ece:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009ed0:	f7f9 fdce 	bl	8003a70 <HAL_GetTick>
 8009ed4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ed6:	e008      	b.n	8009eea <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009ed8:	f7f9 fdca 	bl	8003a70 <HAL_GetTick>
 8009edc:	4602      	mov	r2, r0
 8009ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ee0:	1ad3      	subs	r3, r2, r3
 8009ee2:	2b64      	cmp	r3, #100	; 0x64
 8009ee4:	d901      	bls.n	8009eea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009ee6:	2303      	movs	r3, #3
 8009ee8:	e1a0      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009eea:	4b83      	ldr	r3, [pc, #524]	; (800a0f8 <HAL_RCC_OscConfig+0x770>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0f0      	beq.n	8009ed8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	2b01      	cmp	r3, #1
 8009efc:	d106      	bne.n	8009f0c <HAL_RCC_OscConfig+0x584>
 8009efe:	4b7d      	ldr	r3, [pc, #500]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f02:	4a7c      	ldr	r2, [pc, #496]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f04:	f043 0301 	orr.w	r3, r3, #1
 8009f08:	6713      	str	r3, [r2, #112]	; 0x70
 8009f0a:	e02d      	b.n	8009f68 <HAL_RCC_OscConfig+0x5e0>
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10c      	bne.n	8009f2e <HAL_RCC_OscConfig+0x5a6>
 8009f14:	4b77      	ldr	r3, [pc, #476]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f18:	4a76      	ldr	r2, [pc, #472]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f1a:	f023 0301 	bic.w	r3, r3, #1
 8009f1e:	6713      	str	r3, [r2, #112]	; 0x70
 8009f20:	4b74      	ldr	r3, [pc, #464]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f24:	4a73      	ldr	r2, [pc, #460]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f26:	f023 0304 	bic.w	r3, r3, #4
 8009f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8009f2c:	e01c      	b.n	8009f68 <HAL_RCC_OscConfig+0x5e0>
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	689b      	ldr	r3, [r3, #8]
 8009f32:	2b05      	cmp	r3, #5
 8009f34:	d10c      	bne.n	8009f50 <HAL_RCC_OscConfig+0x5c8>
 8009f36:	4b6f      	ldr	r3, [pc, #444]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f3a:	4a6e      	ldr	r2, [pc, #440]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f3c:	f043 0304 	orr.w	r3, r3, #4
 8009f40:	6713      	str	r3, [r2, #112]	; 0x70
 8009f42:	4b6c      	ldr	r3, [pc, #432]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f46:	4a6b      	ldr	r2, [pc, #428]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f48:	f043 0301 	orr.w	r3, r3, #1
 8009f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8009f4e:	e00b      	b.n	8009f68 <HAL_RCC_OscConfig+0x5e0>
 8009f50:	4b68      	ldr	r3, [pc, #416]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f54:	4a67      	ldr	r2, [pc, #412]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f56:	f023 0301 	bic.w	r3, r3, #1
 8009f5a:	6713      	str	r3, [r2, #112]	; 0x70
 8009f5c:	4b65      	ldr	r3, [pc, #404]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f60:	4a64      	ldr	r2, [pc, #400]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f62:	f023 0304 	bic.w	r3, r3, #4
 8009f66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	689b      	ldr	r3, [r3, #8]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d015      	beq.n	8009f9c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f70:	f7f9 fd7e 	bl	8003a70 <HAL_GetTick>
 8009f74:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f76:	e00a      	b.n	8009f8e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f78:	f7f9 fd7a 	bl	8003a70 <HAL_GetTick>
 8009f7c:	4602      	mov	r2, r0
 8009f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d901      	bls.n	8009f8e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009f8a:	2303      	movs	r3, #3
 8009f8c:	e14e      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f8e:	4b59      	ldr	r3, [pc, #356]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009f90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f92:	f003 0302 	and.w	r3, r3, #2
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0ee      	beq.n	8009f78 <HAL_RCC_OscConfig+0x5f0>
 8009f9a:	e014      	b.n	8009fc6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f9c:	f7f9 fd68 	bl	8003a70 <HAL_GetTick>
 8009fa0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009fa2:	e00a      	b.n	8009fba <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009fa4:	f7f9 fd64 	bl	8003a70 <HAL_GetTick>
 8009fa8:	4602      	mov	r2, r0
 8009faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fac:	1ad3      	subs	r3, r2, r3
 8009fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fb2:	4293      	cmp	r3, r2
 8009fb4:	d901      	bls.n	8009fba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009fb6:	2303      	movs	r3, #3
 8009fb8:	e138      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009fba:	4b4e      	ldr	r3, [pc, #312]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009fbe:	f003 0302 	and.w	r3, r3, #2
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d1ee      	bne.n	8009fa4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	f000 812d 	beq.w	800a22a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009fd0:	4b48      	ldr	r3, [pc, #288]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009fd2:	691b      	ldr	r3, [r3, #16]
 8009fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fd8:	2b18      	cmp	r3, #24
 8009fda:	f000 80bd 	beq.w	800a158 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fe2:	2b02      	cmp	r3, #2
 8009fe4:	f040 809e 	bne.w	800a124 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fe8:	4b42      	ldr	r3, [pc, #264]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	4a41      	ldr	r2, [pc, #260]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 8009fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009ff2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ff4:	f7f9 fd3c 	bl	8003a70 <HAL_GetTick>
 8009ff8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ffa:	e008      	b.n	800a00e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ffc:	f7f9 fd38 	bl	8003a70 <HAL_GetTick>
 800a000:	4602      	mov	r2, r0
 800a002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a004:	1ad3      	subs	r3, r2, r3
 800a006:	2b02      	cmp	r3, #2
 800a008:	d901      	bls.n	800a00e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a00a:	2303      	movs	r3, #3
 800a00c:	e10e      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a00e:	4b39      	ldr	r3, [pc, #228]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a016:	2b00      	cmp	r3, #0
 800a018:	d1f0      	bne.n	8009ffc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a01a:	4b36      	ldr	r3, [pc, #216]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a01c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a01e:	4b37      	ldr	r3, [pc, #220]	; (800a0fc <HAL_RCC_OscConfig+0x774>)
 800a020:	4013      	ands	r3, r2
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a026:	687a      	ldr	r2, [r7, #4]
 800a028:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a02a:	0112      	lsls	r2, r2, #4
 800a02c:	430a      	orrs	r2, r1
 800a02e:	4931      	ldr	r1, [pc, #196]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a030:	4313      	orrs	r3, r2
 800a032:	628b      	str	r3, [r1, #40]	; 0x28
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a038:	3b01      	subs	r3, #1
 800a03a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a042:	3b01      	subs	r3, #1
 800a044:	025b      	lsls	r3, r3, #9
 800a046:	b29b      	uxth	r3, r3
 800a048:	431a      	orrs	r2, r3
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a04e:	3b01      	subs	r3, #1
 800a050:	041b      	lsls	r3, r3, #16
 800a052:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a056:	431a      	orrs	r2, r3
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a05c:	3b01      	subs	r3, #1
 800a05e:	061b      	lsls	r3, r3, #24
 800a060:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a064:	4923      	ldr	r1, [pc, #140]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a066:	4313      	orrs	r3, r2
 800a068:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a06a:	4b22      	ldr	r3, [pc, #136]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	4a21      	ldr	r2, [pc, #132]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a070:	f023 0301 	bic.w	r3, r3, #1
 800a074:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a076:	4b1f      	ldr	r3, [pc, #124]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a078:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a07a:	4b21      	ldr	r3, [pc, #132]	; (800a100 <HAL_RCC_OscConfig+0x778>)
 800a07c:	4013      	ands	r3, r2
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a082:	00d2      	lsls	r2, r2, #3
 800a084:	491b      	ldr	r1, [pc, #108]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a086:	4313      	orrs	r3, r2
 800a088:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a08a:	4b1a      	ldr	r3, [pc, #104]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a08c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a08e:	f023 020c 	bic.w	r2, r3, #12
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a096:	4917      	ldr	r1, [pc, #92]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a098:	4313      	orrs	r3, r2
 800a09a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a09c:	4b15      	ldr	r3, [pc, #84]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a09e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0a0:	f023 0202 	bic.w	r2, r3, #2
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a0a8:	4912      	ldr	r1, [pc, #72]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0aa:	4313      	orrs	r3, r2
 800a0ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a0ae:	4b11      	ldr	r3, [pc, #68]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0b2:	4a10      	ldr	r2, [pc, #64]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a0ba:	4b0e      	ldr	r3, [pc, #56]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0be:	4a0d      	ldr	r2, [pc, #52]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a0c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a0c6:	4b0b      	ldr	r3, [pc, #44]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0ca:	4a0a      	ldr	r2, [pc, #40]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a0d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a0d2:	4b08      	ldr	r3, [pc, #32]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d6:	4a07      	ldr	r2, [pc, #28]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0d8:	f043 0301 	orr.w	r3, r3, #1
 800a0dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a0de:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a04      	ldr	r2, [pc, #16]	; (800a0f4 <HAL_RCC_OscConfig+0x76c>)
 800a0e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ea:	f7f9 fcc1 	bl	8003a70 <HAL_GetTick>
 800a0ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0f0:	e011      	b.n	800a116 <HAL_RCC_OscConfig+0x78e>
 800a0f2:	bf00      	nop
 800a0f4:	58024400 	.word	0x58024400
 800a0f8:	58024800 	.word	0x58024800
 800a0fc:	fffffc0c 	.word	0xfffffc0c
 800a100:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a104:	f7f9 fcb4 	bl	8003a70 <HAL_GetTick>
 800a108:	4602      	mov	r2, r0
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	1ad3      	subs	r3, r2, r3
 800a10e:	2b02      	cmp	r3, #2
 800a110:	d901      	bls.n	800a116 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a112:	2303      	movs	r3, #3
 800a114:	e08a      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a116:	4b47      	ldr	r3, [pc, #284]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d0f0      	beq.n	800a104 <HAL_RCC_OscConfig+0x77c>
 800a122:	e082      	b.n	800a22a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a124:	4b43      	ldr	r3, [pc, #268]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a42      	ldr	r2, [pc, #264]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a12a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a12e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a130:	f7f9 fc9e 	bl	8003a70 <HAL_GetTick>
 800a134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a136:	e008      	b.n	800a14a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a138:	f7f9 fc9a 	bl	8003a70 <HAL_GetTick>
 800a13c:	4602      	mov	r2, r0
 800a13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a140:	1ad3      	subs	r3, r2, r3
 800a142:	2b02      	cmp	r3, #2
 800a144:	d901      	bls.n	800a14a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a146:	2303      	movs	r3, #3
 800a148:	e070      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a14a:	4b3a      	ldr	r3, [pc, #232]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a152:	2b00      	cmp	r3, #0
 800a154:	d1f0      	bne.n	800a138 <HAL_RCC_OscConfig+0x7b0>
 800a156:	e068      	b.n	800a22a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a158:	4b36      	ldr	r3, [pc, #216]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a15a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a15c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a15e:	4b35      	ldr	r3, [pc, #212]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a162:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a168:	2b01      	cmp	r3, #1
 800a16a:	d031      	beq.n	800a1d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	f003 0203 	and.w	r2, r3, #3
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a176:	429a      	cmp	r2, r3
 800a178:	d12a      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	091b      	lsrs	r3, r3, #4
 800a17e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a186:	429a      	cmp	r2, r3
 800a188:	d122      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a194:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a196:	429a      	cmp	r2, r3
 800a198:	d11a      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	0a5b      	lsrs	r3, r3, #9
 800a19e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1a6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a1a8:	429a      	cmp	r2, r3
 800a1aa:	d111      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	0c1b      	lsrs	r3, r3, #16
 800a1b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a1ba:	429a      	cmp	r2, r3
 800a1bc:	d108      	bne.n	800a1d0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	0e1b      	lsrs	r3, r3, #24
 800a1c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ca:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d001      	beq.n	800a1d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a1d0:	2301      	movs	r3, #1
 800a1d2:	e02b      	b.n	800a22c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a1d4:	4b17      	ldr	r3, [pc, #92]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a1d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1d8:	08db      	lsrs	r3, r3, #3
 800a1da:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a1de:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1e4:	693a      	ldr	r2, [r7, #16]
 800a1e6:	429a      	cmp	r2, r3
 800a1e8:	d01f      	beq.n	800a22a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a1ea:	4b12      	ldr	r3, [pc, #72]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ee:	4a11      	ldr	r2, [pc, #68]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a1f0:	f023 0301 	bic.w	r3, r3, #1
 800a1f4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a1f6:	f7f9 fc3b 	bl	8003a70 <HAL_GetTick>
 800a1fa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a1fc:	bf00      	nop
 800a1fe:	f7f9 fc37 	bl	8003a70 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	4293      	cmp	r3, r2
 800a208:	d0f9      	beq.n	800a1fe <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a20a:	4b0a      	ldr	r3, [pc, #40]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a20c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a20e:	4b0a      	ldr	r3, [pc, #40]	; (800a238 <HAL_RCC_OscConfig+0x8b0>)
 800a210:	4013      	ands	r3, r2
 800a212:	687a      	ldr	r2, [r7, #4]
 800a214:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a216:	00d2      	lsls	r2, r2, #3
 800a218:	4906      	ldr	r1, [pc, #24]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a21a:	4313      	orrs	r3, r2
 800a21c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a21e:	4b05      	ldr	r3, [pc, #20]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a222:	4a04      	ldr	r2, [pc, #16]	; (800a234 <HAL_RCC_OscConfig+0x8ac>)
 800a224:	f043 0301 	orr.w	r3, r3, #1
 800a228:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	3730      	adds	r7, #48	; 0x30
 800a230:	46bd      	mov	sp, r7
 800a232:	bd80      	pop	{r7, pc}
 800a234:	58024400 	.word	0x58024400
 800a238:	ffff0007 	.word	0xffff0007

0800a23c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b086      	sub	sp, #24
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
 800a244:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d101      	bne.n	800a250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e19c      	b.n	800a58a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a250:	4b8a      	ldr	r3, [pc, #552]	; (800a47c <HAL_RCC_ClockConfig+0x240>)
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f003 030f 	and.w	r3, r3, #15
 800a258:	683a      	ldr	r2, [r7, #0]
 800a25a:	429a      	cmp	r2, r3
 800a25c:	d910      	bls.n	800a280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a25e:	4b87      	ldr	r3, [pc, #540]	; (800a47c <HAL_RCC_ClockConfig+0x240>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f023 020f 	bic.w	r2, r3, #15
 800a266:	4985      	ldr	r1, [pc, #532]	; (800a47c <HAL_RCC_ClockConfig+0x240>)
 800a268:	683b      	ldr	r3, [r7, #0]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a26e:	4b83      	ldr	r3, [pc, #524]	; (800a47c <HAL_RCC_ClockConfig+0x240>)
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f003 030f 	and.w	r3, r3, #15
 800a276:	683a      	ldr	r2, [r7, #0]
 800a278:	429a      	cmp	r2, r3
 800a27a:	d001      	beq.n	800a280 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a27c:	2301      	movs	r3, #1
 800a27e:	e184      	b.n	800a58a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f003 0304 	and.w	r3, r3, #4
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d010      	beq.n	800a2ae <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	691a      	ldr	r2, [r3, #16]
 800a290:	4b7b      	ldr	r3, [pc, #492]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a292:	699b      	ldr	r3, [r3, #24]
 800a294:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a298:	429a      	cmp	r2, r3
 800a29a:	d908      	bls.n	800a2ae <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a29c:	4b78      	ldr	r3, [pc, #480]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a29e:	699b      	ldr	r3, [r3, #24]
 800a2a0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	691b      	ldr	r3, [r3, #16]
 800a2a8:	4975      	ldr	r1, [pc, #468]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	681b      	ldr	r3, [r3, #0]
 800a2b2:	f003 0308 	and.w	r3, r3, #8
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d010      	beq.n	800a2dc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	695a      	ldr	r2, [r3, #20]
 800a2be:	4b70      	ldr	r3, [pc, #448]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a2c0:	69db      	ldr	r3, [r3, #28]
 800a2c2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2c6:	429a      	cmp	r2, r3
 800a2c8:	d908      	bls.n	800a2dc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2ca:	4b6d      	ldr	r3, [pc, #436]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	695b      	ldr	r3, [r3, #20]
 800a2d6:	496a      	ldr	r1, [pc, #424]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a2d8:	4313      	orrs	r3, r2
 800a2da:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f003 0310 	and.w	r3, r3, #16
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d010      	beq.n	800a30a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	699a      	ldr	r2, [r3, #24]
 800a2ec:	4b64      	ldr	r3, [pc, #400]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a2ee:	69db      	ldr	r3, [r3, #28]
 800a2f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2f4:	429a      	cmp	r2, r3
 800a2f6:	d908      	bls.n	800a30a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2f8:	4b61      	ldr	r3, [pc, #388]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a2fa:	69db      	ldr	r3, [r3, #28]
 800a2fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	699b      	ldr	r3, [r3, #24]
 800a304:	495e      	ldr	r1, [pc, #376]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a306:	4313      	orrs	r3, r2
 800a308:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	f003 0320 	and.w	r3, r3, #32
 800a312:	2b00      	cmp	r3, #0
 800a314:	d010      	beq.n	800a338 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	69da      	ldr	r2, [r3, #28]
 800a31a:	4b59      	ldr	r3, [pc, #356]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a322:	429a      	cmp	r2, r3
 800a324:	d908      	bls.n	800a338 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a326:	4b56      	ldr	r3, [pc, #344]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a328:	6a1b      	ldr	r3, [r3, #32]
 800a32a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	69db      	ldr	r3, [r3, #28]
 800a332:	4953      	ldr	r1, [pc, #332]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a334:	4313      	orrs	r3, r2
 800a336:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b00      	cmp	r3, #0
 800a342:	d010      	beq.n	800a366 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	68da      	ldr	r2, [r3, #12]
 800a348:	4b4d      	ldr	r3, [pc, #308]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	f003 030f 	and.w	r3, r3, #15
 800a350:	429a      	cmp	r2, r3
 800a352:	d908      	bls.n	800a366 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a354:	4b4a      	ldr	r3, [pc, #296]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	f023 020f 	bic.w	r2, r3, #15
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	4947      	ldr	r1, [pc, #284]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a362:	4313      	orrs	r3, r2
 800a364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f003 0301 	and.w	r3, r3, #1
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d055      	beq.n	800a41e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a372:	4b43      	ldr	r3, [pc, #268]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a374:	699b      	ldr	r3, [r3, #24]
 800a376:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	689b      	ldr	r3, [r3, #8]
 800a37e:	4940      	ldr	r1, [pc, #256]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a380:	4313      	orrs	r3, r2
 800a382:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	685b      	ldr	r3, [r3, #4]
 800a388:	2b02      	cmp	r3, #2
 800a38a:	d107      	bne.n	800a39c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a38c:	4b3c      	ldr	r3, [pc, #240]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a394:	2b00      	cmp	r3, #0
 800a396:	d121      	bne.n	800a3dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	e0f6      	b.n	800a58a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	2b03      	cmp	r3, #3
 800a3a2:	d107      	bne.n	800a3b4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a3a4:	4b36      	ldr	r3, [pc, #216]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d115      	bne.n	800a3dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	e0ea      	b.n	800a58a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	2b01      	cmp	r3, #1
 800a3ba:	d107      	bne.n	800a3cc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a3bc:	4b30      	ldr	r3, [pc, #192]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d109      	bne.n	800a3dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	e0de      	b.n	800a58a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a3cc:	4b2c      	ldr	r3, [pc, #176]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f003 0304 	and.w	r3, r3, #4
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d101      	bne.n	800a3dc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	e0d6      	b.n	800a58a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a3dc:	4b28      	ldr	r3, [pc, #160]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a3de:	691b      	ldr	r3, [r3, #16]
 800a3e0:	f023 0207 	bic.w	r2, r3, #7
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	685b      	ldr	r3, [r3, #4]
 800a3e8:	4925      	ldr	r1, [pc, #148]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a3ea:	4313      	orrs	r3, r2
 800a3ec:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3ee:	f7f9 fb3f 	bl	8003a70 <HAL_GetTick>
 800a3f2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3f4:	e00a      	b.n	800a40c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3f6:	f7f9 fb3b 	bl	8003a70 <HAL_GetTick>
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	697b      	ldr	r3, [r7, #20]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	f241 3288 	movw	r2, #5000	; 0x1388
 800a404:	4293      	cmp	r3, r2
 800a406:	d901      	bls.n	800a40c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e0be      	b.n	800a58a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a40c:	4b1c      	ldr	r3, [pc, #112]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	685b      	ldr	r3, [r3, #4]
 800a418:	00db      	lsls	r3, r3, #3
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d1eb      	bne.n	800a3f6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0302 	and.w	r3, r3, #2
 800a426:	2b00      	cmp	r3, #0
 800a428:	d010      	beq.n	800a44c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68da      	ldr	r2, [r3, #12]
 800a42e:	4b14      	ldr	r3, [pc, #80]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a430:	699b      	ldr	r3, [r3, #24]
 800a432:	f003 030f 	and.w	r3, r3, #15
 800a436:	429a      	cmp	r2, r3
 800a438:	d208      	bcs.n	800a44c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a43a:	4b11      	ldr	r3, [pc, #68]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a43c:	699b      	ldr	r3, [r3, #24]
 800a43e:	f023 020f 	bic.w	r2, r3, #15
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	68db      	ldr	r3, [r3, #12]
 800a446:	490e      	ldr	r1, [pc, #56]	; (800a480 <HAL_RCC_ClockConfig+0x244>)
 800a448:	4313      	orrs	r3, r2
 800a44a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a44c:	4b0b      	ldr	r3, [pc, #44]	; (800a47c <HAL_RCC_ClockConfig+0x240>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f003 030f 	and.w	r3, r3, #15
 800a454:	683a      	ldr	r2, [r7, #0]
 800a456:	429a      	cmp	r2, r3
 800a458:	d214      	bcs.n	800a484 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a45a:	4b08      	ldr	r3, [pc, #32]	; (800a47c <HAL_RCC_ClockConfig+0x240>)
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	f023 020f 	bic.w	r2, r3, #15
 800a462:	4906      	ldr	r1, [pc, #24]	; (800a47c <HAL_RCC_ClockConfig+0x240>)
 800a464:	683b      	ldr	r3, [r7, #0]
 800a466:	4313      	orrs	r3, r2
 800a468:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a46a:	4b04      	ldr	r3, [pc, #16]	; (800a47c <HAL_RCC_ClockConfig+0x240>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	f003 030f 	and.w	r3, r3, #15
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	429a      	cmp	r2, r3
 800a476:	d005      	beq.n	800a484 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e086      	b.n	800a58a <HAL_RCC_ClockConfig+0x34e>
 800a47c:	52002000 	.word	0x52002000
 800a480:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f003 0304 	and.w	r3, r3, #4
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d010      	beq.n	800a4b2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	691a      	ldr	r2, [r3, #16]
 800a494:	4b3f      	ldr	r3, [pc, #252]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a496:	699b      	ldr	r3, [r3, #24]
 800a498:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d208      	bcs.n	800a4b2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a4a0:	4b3c      	ldr	r3, [pc, #240]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a4a2:	699b      	ldr	r3, [r3, #24]
 800a4a4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	691b      	ldr	r3, [r3, #16]
 800a4ac:	4939      	ldr	r1, [pc, #228]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	f003 0308 	and.w	r3, r3, #8
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d010      	beq.n	800a4e0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	695a      	ldr	r2, [r3, #20]
 800a4c2:	4b34      	ldr	r3, [pc, #208]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a4c4:	69db      	ldr	r3, [r3, #28]
 800a4c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d208      	bcs.n	800a4e0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a4ce:	4b31      	ldr	r3, [pc, #196]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a4d0:	69db      	ldr	r3, [r3, #28]
 800a4d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	695b      	ldr	r3, [r3, #20]
 800a4da:	492e      	ldr	r1, [pc, #184]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a4dc:	4313      	orrs	r3, r2
 800a4de:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	f003 0310 	and.w	r3, r3, #16
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d010      	beq.n	800a50e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	699a      	ldr	r2, [r3, #24]
 800a4f0:	4b28      	ldr	r3, [pc, #160]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a4f2:	69db      	ldr	r3, [r3, #28]
 800a4f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4f8:	429a      	cmp	r2, r3
 800a4fa:	d208      	bcs.n	800a50e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a4fc:	4b25      	ldr	r3, [pc, #148]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a4fe:	69db      	ldr	r3, [r3, #28]
 800a500:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	699b      	ldr	r3, [r3, #24]
 800a508:	4922      	ldr	r1, [pc, #136]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a50a:	4313      	orrs	r3, r2
 800a50c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	f003 0320 	and.w	r3, r3, #32
 800a516:	2b00      	cmp	r3, #0
 800a518:	d010      	beq.n	800a53c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	69da      	ldr	r2, [r3, #28]
 800a51e:	4b1d      	ldr	r3, [pc, #116]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a520:	6a1b      	ldr	r3, [r3, #32]
 800a522:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a526:	429a      	cmp	r2, r3
 800a528:	d208      	bcs.n	800a53c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a52a:	4b1a      	ldr	r3, [pc, #104]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a52c:	6a1b      	ldr	r3, [r3, #32]
 800a52e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	69db      	ldr	r3, [r3, #28]
 800a536:	4917      	ldr	r1, [pc, #92]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a538:	4313      	orrs	r3, r2
 800a53a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a53c:	f000 f834 	bl	800a5a8 <HAL_RCC_GetSysClockFreq>
 800a540:	4602      	mov	r2, r0
 800a542:	4b14      	ldr	r3, [pc, #80]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a544:	699b      	ldr	r3, [r3, #24]
 800a546:	0a1b      	lsrs	r3, r3, #8
 800a548:	f003 030f 	and.w	r3, r3, #15
 800a54c:	4912      	ldr	r1, [pc, #72]	; (800a598 <HAL_RCC_ClockConfig+0x35c>)
 800a54e:	5ccb      	ldrb	r3, [r1, r3]
 800a550:	f003 031f 	and.w	r3, r3, #31
 800a554:	fa22 f303 	lsr.w	r3, r2, r3
 800a558:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a55a:	4b0e      	ldr	r3, [pc, #56]	; (800a594 <HAL_RCC_ClockConfig+0x358>)
 800a55c:	699b      	ldr	r3, [r3, #24]
 800a55e:	f003 030f 	and.w	r3, r3, #15
 800a562:	4a0d      	ldr	r2, [pc, #52]	; (800a598 <HAL_RCC_ClockConfig+0x35c>)
 800a564:	5cd3      	ldrb	r3, [r2, r3]
 800a566:	f003 031f 	and.w	r3, r3, #31
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	fa22 f303 	lsr.w	r3, r2, r3
 800a570:	4a0a      	ldr	r2, [pc, #40]	; (800a59c <HAL_RCC_ClockConfig+0x360>)
 800a572:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a574:	4a0a      	ldr	r2, [pc, #40]	; (800a5a0 <HAL_RCC_ClockConfig+0x364>)
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a57a:	4b0a      	ldr	r3, [pc, #40]	; (800a5a4 <HAL_RCC_ClockConfig+0x368>)
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	4618      	mov	r0, r3
 800a580:	f7f8 ff9a 	bl	80034b8 <HAL_InitTick>
 800a584:	4603      	mov	r3, r0
 800a586:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a588:	7bfb      	ldrb	r3, [r7, #15]
}
 800a58a:	4618      	mov	r0, r3
 800a58c:	3718      	adds	r7, #24
 800a58e:	46bd      	mov	sp, r7
 800a590:	bd80      	pop	{r7, pc}
 800a592:	bf00      	nop
 800a594:	58024400 	.word	0x58024400
 800a598:	08016fc4 	.word	0x08016fc4
 800a59c:	24000094 	.word	0x24000094
 800a5a0:	24000090 	.word	0x24000090
 800a5a4:	24000098 	.word	0x24000098

0800a5a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a5a8:	b480      	push	{r7}
 800a5aa:	b089      	sub	sp, #36	; 0x24
 800a5ac:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a5ae:	4bb3      	ldr	r3, [pc, #716]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5b0:	691b      	ldr	r3, [r3, #16]
 800a5b2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5b6:	2b18      	cmp	r3, #24
 800a5b8:	f200 8155 	bhi.w	800a866 <HAL_RCC_GetSysClockFreq+0x2be>
 800a5bc:	a201      	add	r2, pc, #4	; (adr r2, 800a5c4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c2:	bf00      	nop
 800a5c4:	0800a629 	.word	0x0800a629
 800a5c8:	0800a867 	.word	0x0800a867
 800a5cc:	0800a867 	.word	0x0800a867
 800a5d0:	0800a867 	.word	0x0800a867
 800a5d4:	0800a867 	.word	0x0800a867
 800a5d8:	0800a867 	.word	0x0800a867
 800a5dc:	0800a867 	.word	0x0800a867
 800a5e0:	0800a867 	.word	0x0800a867
 800a5e4:	0800a64f 	.word	0x0800a64f
 800a5e8:	0800a867 	.word	0x0800a867
 800a5ec:	0800a867 	.word	0x0800a867
 800a5f0:	0800a867 	.word	0x0800a867
 800a5f4:	0800a867 	.word	0x0800a867
 800a5f8:	0800a867 	.word	0x0800a867
 800a5fc:	0800a867 	.word	0x0800a867
 800a600:	0800a867 	.word	0x0800a867
 800a604:	0800a655 	.word	0x0800a655
 800a608:	0800a867 	.word	0x0800a867
 800a60c:	0800a867 	.word	0x0800a867
 800a610:	0800a867 	.word	0x0800a867
 800a614:	0800a867 	.word	0x0800a867
 800a618:	0800a867 	.word	0x0800a867
 800a61c:	0800a867 	.word	0x0800a867
 800a620:	0800a867 	.word	0x0800a867
 800a624:	0800a65b 	.word	0x0800a65b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a628:	4b94      	ldr	r3, [pc, #592]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	f003 0320 	and.w	r3, r3, #32
 800a630:	2b00      	cmp	r3, #0
 800a632:	d009      	beq.n	800a648 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a634:	4b91      	ldr	r3, [pc, #580]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	08db      	lsrs	r3, r3, #3
 800a63a:	f003 0303 	and.w	r3, r3, #3
 800a63e:	4a90      	ldr	r2, [pc, #576]	; (800a880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a640:	fa22 f303 	lsr.w	r3, r2, r3
 800a644:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a646:	e111      	b.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a648:	4b8d      	ldr	r3, [pc, #564]	; (800a880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a64a:	61bb      	str	r3, [r7, #24]
      break;
 800a64c:	e10e      	b.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a64e:	4b8d      	ldr	r3, [pc, #564]	; (800a884 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a650:	61bb      	str	r3, [r7, #24]
      break;
 800a652:	e10b      	b.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a654:	4b8c      	ldr	r3, [pc, #560]	; (800a888 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a656:	61bb      	str	r3, [r7, #24]
      break;
 800a658:	e108      	b.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a65a:	4b88      	ldr	r3, [pc, #544]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a65e:	f003 0303 	and.w	r3, r3, #3
 800a662:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a664:	4b85      	ldr	r3, [pc, #532]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a668:	091b      	lsrs	r3, r3, #4
 800a66a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a66e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a670:	4b82      	ldr	r3, [pc, #520]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a674:	f003 0301 	and.w	r3, r3, #1
 800a678:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a67a:	4b80      	ldr	r3, [pc, #512]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a67c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a67e:	08db      	lsrs	r3, r3, #3
 800a680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	fb02 f303 	mul.w	r3, r2, r3
 800a68a:	ee07 3a90 	vmov	s15, r3
 800a68e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a692:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	f000 80e1 	beq.w	800a860 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	2b02      	cmp	r3, #2
 800a6a2:	f000 8083 	beq.w	800a7ac <HAL_RCC_GetSysClockFreq+0x204>
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	2b02      	cmp	r3, #2
 800a6aa:	f200 80a1 	bhi.w	800a7f0 <HAL_RCC_GetSysClockFreq+0x248>
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d003      	beq.n	800a6bc <HAL_RCC_GetSysClockFreq+0x114>
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d056      	beq.n	800a768 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a6ba:	e099      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6bc:	4b6f      	ldr	r3, [pc, #444]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f003 0320 	and.w	r3, r3, #32
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d02d      	beq.n	800a724 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a6c8:	4b6c      	ldr	r3, [pc, #432]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	08db      	lsrs	r3, r3, #3
 800a6ce:	f003 0303 	and.w	r3, r3, #3
 800a6d2:	4a6b      	ldr	r2, [pc, #428]	; (800a880 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a6d4:	fa22 f303 	lsr.w	r3, r2, r3
 800a6d8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	ee07 3a90 	vmov	s15, r3
 800a6e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6e4:	693b      	ldr	r3, [r7, #16]
 800a6e6:	ee07 3a90 	vmov	s15, r3
 800a6ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6f2:	4b62      	ldr	r3, [pc, #392]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fa:	ee07 3a90 	vmov	s15, r3
 800a6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a702:	ed97 6a02 	vldr	s12, [r7, #8]
 800a706:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a722:	e087      	b.n	800a834 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72e:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a890 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a736:	4b51      	ldr	r3, [pc, #324]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a746:	ed97 6a02 	vldr	s12, [r7, #8]
 800a74a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a766:	e065      	b.n	800a834 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a772:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a894 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a77a:	4b40      	ldr	r3, [pc, #256]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a782:	ee07 3a90 	vmov	s15, r3
 800a786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a78a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a78e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7aa:	e043      	b.n	800a834 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b6:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a898 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7be:	4b2f      	ldr	r3, [pc, #188]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7d2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7ee:	e021      	b.n	800a834 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7fa:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a894 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a802:	4b1e      	ldr	r3, [pc, #120]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a806:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a80a:	ee07 3a90 	vmov	s15, r3
 800a80e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a812:	ed97 6a02 	vldr	s12, [r7, #8]
 800a816:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a88c <HAL_RCC_GetSysClockFreq+0x2e4>
 800a81a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a81e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a822:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a826:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a82a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a82e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a832:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a834:	4b11      	ldr	r3, [pc, #68]	; (800a87c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a838:	0a5b      	lsrs	r3, r3, #9
 800a83a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a83e:	3301      	adds	r3, #1
 800a840:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	ee07 3a90 	vmov	s15, r3
 800a848:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a84c:	edd7 6a07 	vldr	s13, [r7, #28]
 800a850:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a858:	ee17 3a90 	vmov	r3, s15
 800a85c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a85e:	e005      	b.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a860:	2300      	movs	r3, #0
 800a862:	61bb      	str	r3, [r7, #24]
      break;
 800a864:	e002      	b.n	800a86c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a866:	4b07      	ldr	r3, [pc, #28]	; (800a884 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a868:	61bb      	str	r3, [r7, #24]
      break;
 800a86a:	bf00      	nop
  }

  return sysclockfreq;
 800a86c:	69bb      	ldr	r3, [r7, #24]
}
 800a86e:	4618      	mov	r0, r3
 800a870:	3724      	adds	r7, #36	; 0x24
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	58024400 	.word	0x58024400
 800a880:	03d09000 	.word	0x03d09000
 800a884:	003d0900 	.word	0x003d0900
 800a888:	017d7840 	.word	0x017d7840
 800a88c:	46000000 	.word	0x46000000
 800a890:	4c742400 	.word	0x4c742400
 800a894:	4a742400 	.word	0x4a742400
 800a898:	4bbebc20 	.word	0x4bbebc20

0800a89c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a8a2:	f7ff fe81 	bl	800a5a8 <HAL_RCC_GetSysClockFreq>
 800a8a6:	4602      	mov	r2, r0
 800a8a8:	4b10      	ldr	r3, [pc, #64]	; (800a8ec <HAL_RCC_GetHCLKFreq+0x50>)
 800a8aa:	699b      	ldr	r3, [r3, #24]
 800a8ac:	0a1b      	lsrs	r3, r3, #8
 800a8ae:	f003 030f 	and.w	r3, r3, #15
 800a8b2:	490f      	ldr	r1, [pc, #60]	; (800a8f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a8b4:	5ccb      	ldrb	r3, [r1, r3]
 800a8b6:	f003 031f 	and.w	r3, r3, #31
 800a8ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a8be:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a8c0:	4b0a      	ldr	r3, [pc, #40]	; (800a8ec <HAL_RCC_GetHCLKFreq+0x50>)
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	f003 030f 	and.w	r3, r3, #15
 800a8c8:	4a09      	ldr	r2, [pc, #36]	; (800a8f0 <HAL_RCC_GetHCLKFreq+0x54>)
 800a8ca:	5cd3      	ldrb	r3, [r2, r3]
 800a8cc:	f003 031f 	and.w	r3, r3, #31
 800a8d0:	687a      	ldr	r2, [r7, #4]
 800a8d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a8d6:	4a07      	ldr	r2, [pc, #28]	; (800a8f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8d8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8da:	4a07      	ldr	r2, [pc, #28]	; (800a8f8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a8e0:	4b04      	ldr	r3, [pc, #16]	; (800a8f4 <HAL_RCC_GetHCLKFreq+0x58>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
}
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	3708      	adds	r7, #8
 800a8e8:	46bd      	mov	sp, r7
 800a8ea:	bd80      	pop	{r7, pc}
 800a8ec:	58024400 	.word	0x58024400
 800a8f0:	08016fc4 	.word	0x08016fc4
 800a8f4:	24000094 	.word	0x24000094
 800a8f8:	24000090 	.word	0x24000090

0800a8fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a900:	f7ff ffcc 	bl	800a89c <HAL_RCC_GetHCLKFreq>
 800a904:	4602      	mov	r2, r0
 800a906:	4b06      	ldr	r3, [pc, #24]	; (800a920 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a908:	69db      	ldr	r3, [r3, #28]
 800a90a:	091b      	lsrs	r3, r3, #4
 800a90c:	f003 0307 	and.w	r3, r3, #7
 800a910:	4904      	ldr	r1, [pc, #16]	; (800a924 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a912:	5ccb      	ldrb	r3, [r1, r3]
 800a914:	f003 031f 	and.w	r3, r3, #31
 800a918:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a91c:	4618      	mov	r0, r3
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	58024400 	.word	0x58024400
 800a924:	08016fc4 	.word	0x08016fc4

0800a928 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a928:	b580      	push	{r7, lr}
 800a92a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a92c:	f7ff ffb6 	bl	800a89c <HAL_RCC_GetHCLKFreq>
 800a930:	4602      	mov	r2, r0
 800a932:	4b06      	ldr	r3, [pc, #24]	; (800a94c <HAL_RCC_GetPCLK2Freq+0x24>)
 800a934:	69db      	ldr	r3, [r3, #28]
 800a936:	0a1b      	lsrs	r3, r3, #8
 800a938:	f003 0307 	and.w	r3, r3, #7
 800a93c:	4904      	ldr	r1, [pc, #16]	; (800a950 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a93e:	5ccb      	ldrb	r3, [r1, r3]
 800a940:	f003 031f 	and.w	r3, r3, #31
 800a944:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a948:	4618      	mov	r0, r3
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	58024400 	.word	0x58024400
 800a950:	08016fc4 	.word	0x08016fc4

0800a954 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
 800a95c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	223f      	movs	r2, #63	; 0x3f
 800a962:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a964:	4b1a      	ldr	r3, [pc, #104]	; (800a9d0 <HAL_RCC_GetClockConfig+0x7c>)
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	f003 0207 	and.w	r2, r3, #7
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a970:	4b17      	ldr	r3, [pc, #92]	; (800a9d0 <HAL_RCC_GetClockConfig+0x7c>)
 800a972:	699b      	ldr	r3, [r3, #24]
 800a974:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a97c:	4b14      	ldr	r3, [pc, #80]	; (800a9d0 <HAL_RCC_GetClockConfig+0x7c>)
 800a97e:	699b      	ldr	r3, [r3, #24]
 800a980:	f003 020f 	and.w	r2, r3, #15
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a988:	4b11      	ldr	r3, [pc, #68]	; (800a9d0 <HAL_RCC_GetClockConfig+0x7c>)
 800a98a:	699b      	ldr	r3, [r3, #24]
 800a98c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a994:	4b0e      	ldr	r3, [pc, #56]	; (800a9d0 <HAL_RCC_GetClockConfig+0x7c>)
 800a996:	69db      	ldr	r3, [r3, #28]
 800a998:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a9a0:	4b0b      	ldr	r3, [pc, #44]	; (800a9d0 <HAL_RCC_GetClockConfig+0x7c>)
 800a9a2:	69db      	ldr	r3, [r3, #28]
 800a9a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a9ac:	4b08      	ldr	r3, [pc, #32]	; (800a9d0 <HAL_RCC_GetClockConfig+0x7c>)
 800a9ae:	6a1b      	ldr	r3, [r3, #32]
 800a9b0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a9b8:	4b06      	ldr	r3, [pc, #24]	; (800a9d4 <HAL_RCC_GetClockConfig+0x80>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 020f 	and.w	r2, r3, #15
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	601a      	str	r2, [r3, #0]
}
 800a9c4:	bf00      	nop
 800a9c6:	370c      	adds	r7, #12
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr
 800a9d0:	58024400 	.word	0x58024400
 800a9d4:	52002000 	.word	0x52002000

0800a9d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a9d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a9dc:	b0ca      	sub	sp, #296	; 0x128
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a9ea:	2300      	movs	r3, #0
 800a9ec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a9f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9f8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a9fc:	2500      	movs	r5, #0
 800a9fe:	ea54 0305 	orrs.w	r3, r4, r5
 800aa02:	d049      	beq.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800aa04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa0a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa0e:	d02f      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800aa10:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800aa14:	d828      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa1a:	d01a      	beq.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800aa1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800aa20:	d822      	bhi.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d003      	beq.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800aa26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa2a:	d007      	beq.n	800aa3c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800aa2c:	e01c      	b.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa2e:	4bb8      	ldr	r3, [pc, #736]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa32:	4ab7      	ldr	r2, [pc, #732]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa38:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa3a:	e01a      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aa3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa40:	3308      	adds	r3, #8
 800aa42:	2102      	movs	r1, #2
 800aa44:	4618      	mov	r0, r3
 800aa46:	f002 fb61 	bl	800d10c <RCCEx_PLL2_Config>
 800aa4a:	4603      	mov	r3, r0
 800aa4c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa50:	e00f      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa56:	3328      	adds	r3, #40	; 0x28
 800aa58:	2102      	movs	r1, #2
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	f002 fc08 	bl	800d270 <RCCEx_PLL3_Config>
 800aa60:	4603      	mov	r3, r0
 800aa62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa66:	e004      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa6e:	e000      	b.n	800aa72 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aa70:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d10a      	bne.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aa7a:	4ba5      	ldr	r3, [pc, #660]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa7e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aa82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa88:	4aa1      	ldr	r2, [pc, #644]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa8a:	430b      	orrs	r3, r1
 800aa8c:	6513      	str	r3, [r2, #80]	; 0x50
 800aa8e:	e003      	b.n	800aa98 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aaa4:	f04f 0900 	mov.w	r9, #0
 800aaa8:	ea58 0309 	orrs.w	r3, r8, r9
 800aaac:	d047      	beq.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aaae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aab4:	2b04      	cmp	r3, #4
 800aab6:	d82a      	bhi.n	800ab0e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aab8:	a201      	add	r2, pc, #4	; (adr r2, 800aac0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aaba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aabe:	bf00      	nop
 800aac0:	0800aad5 	.word	0x0800aad5
 800aac4:	0800aae3 	.word	0x0800aae3
 800aac8:	0800aaf9 	.word	0x0800aaf9
 800aacc:	0800ab17 	.word	0x0800ab17
 800aad0:	0800ab17 	.word	0x0800ab17
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad4:	4b8e      	ldr	r3, [pc, #568]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	4a8d      	ldr	r2, [pc, #564]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aade:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aae0:	e01a      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aae2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae6:	3308      	adds	r3, #8
 800aae8:	2100      	movs	r1, #0
 800aaea:	4618      	mov	r0, r3
 800aaec:	f002 fb0e 	bl	800d10c <RCCEx_PLL2_Config>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aaf6:	e00f      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aaf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aafc:	3328      	adds	r3, #40	; 0x28
 800aafe:	2100      	movs	r1, #0
 800ab00:	4618      	mov	r0, r3
 800ab02:	f002 fbb5 	bl	800d270 <RCCEx_PLL3_Config>
 800ab06:	4603      	mov	r3, r0
 800ab08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ab0c:	e004      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab0e:	2301      	movs	r3, #1
 800ab10:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab14:	e000      	b.n	800ab18 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ab16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d10a      	bne.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ab20:	4b7b      	ldr	r3, [pc, #492]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab24:	f023 0107 	bic.w	r1, r3, #7
 800ab28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab2e:	4a78      	ldr	r2, [pc, #480]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab30:	430b      	orrs	r3, r1
 800ab32:	6513      	str	r3, [r2, #80]	; 0x50
 800ab34:	e003      	b.n	800ab3e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab36:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab3a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ab3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab46:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ab4a:	f04f 0b00 	mov.w	fp, #0
 800ab4e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ab52:	d04c      	beq.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ab54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab5e:	d030      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ab60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab64:	d829      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab66:	2bc0      	cmp	r3, #192	; 0xc0
 800ab68:	d02d      	beq.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ab6a:	2bc0      	cmp	r3, #192	; 0xc0
 800ab6c:	d825      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab6e:	2b80      	cmp	r3, #128	; 0x80
 800ab70:	d018      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ab72:	2b80      	cmp	r3, #128	; 0x80
 800ab74:	d821      	bhi.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d002      	beq.n	800ab80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ab7a:	2b40      	cmp	r3, #64	; 0x40
 800ab7c:	d007      	beq.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ab7e:	e01c      	b.n	800abba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab80:	4b63      	ldr	r3, [pc, #396]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab84:	4a62      	ldr	r2, [pc, #392]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab8c:	e01c      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab92:	3308      	adds	r3, #8
 800ab94:	2100      	movs	r1, #0
 800ab96:	4618      	mov	r0, r3
 800ab98:	f002 fab8 	bl	800d10c <RCCEx_PLL2_Config>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aba2:	e011      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aba8:	3328      	adds	r3, #40	; 0x28
 800abaa:	2100      	movs	r1, #0
 800abac:	4618      	mov	r0, r3
 800abae:	f002 fb5f 	bl	800d270 <RCCEx_PLL3_Config>
 800abb2:	4603      	mov	r3, r0
 800abb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800abb8:	e006      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800abba:	2301      	movs	r3, #1
 800abbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800abc0:	e002      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800abc2:	bf00      	nop
 800abc4:	e000      	b.n	800abc8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800abc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800abc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10a      	bne.n	800abe6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800abd0:	4b4f      	ldr	r3, [pc, #316]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800abd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800abde:	4a4c      	ldr	r2, [pc, #304]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800abe0:	430b      	orrs	r3, r1
 800abe2:	6513      	str	r3, [r2, #80]	; 0x50
 800abe4:	e003      	b.n	800abee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800abee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abf6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800abfa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800abfe:	2300      	movs	r3, #0
 800ac00:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800ac04:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800ac08:	460b      	mov	r3, r1
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	d053      	beq.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ac0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac16:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac1a:	d035      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ac1c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ac20:	d82e      	bhi.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ac22:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac26:	d031      	beq.n	800ac8c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ac28:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800ac2c:	d828      	bhi.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ac2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac32:	d01a      	beq.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ac34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ac38:	d822      	bhi.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d003      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ac3e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ac42:	d007      	beq.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ac44:	e01c      	b.n	800ac80 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac46:	4b32      	ldr	r3, [pc, #200]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac4a:	4a31      	ldr	r2, [pc, #196]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac50:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac52:	e01c      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac58:	3308      	adds	r3, #8
 800ac5a:	2100      	movs	r1, #0
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f002 fa55 	bl	800d10c <RCCEx_PLL2_Config>
 800ac62:	4603      	mov	r3, r0
 800ac64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac68:	e011      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac6e:	3328      	adds	r3, #40	; 0x28
 800ac70:	2100      	movs	r1, #0
 800ac72:	4618      	mov	r0, r3
 800ac74:	f002 fafc 	bl	800d270 <RCCEx_PLL3_Config>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac7e:	e006      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac86:	e002      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ac88:	bf00      	nop
 800ac8a:	e000      	b.n	800ac8e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ac8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac8e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d10b      	bne.n	800acae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ac96:	4b1e      	ldr	r3, [pc, #120]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac9a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ac9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aca2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aca6:	4a1a      	ldr	r2, [pc, #104]	; (800ad10 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aca8:	430b      	orrs	r3, r1
 800acaa:	6593      	str	r3, [r2, #88]	; 0x58
 800acac:	e003      	b.n	800acb6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800acae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800acb2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800acb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acbe:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800acc2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800acc6:	2300      	movs	r3, #0
 800acc8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800accc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800acd0:	460b      	mov	r3, r1
 800acd2:	4313      	orrs	r3, r2
 800acd4:	d056      	beq.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800acd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acda:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800acde:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ace2:	d038      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800ace4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ace8:	d831      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acee:	d034      	beq.n	800ad5a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800acf0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acf4:	d82b      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acf6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acfa:	d01d      	beq.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800acfc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ad00:	d825      	bhi.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d006      	beq.n	800ad14 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800ad06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ad0a:	d00a      	beq.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800ad0c:	e01f      	b.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800ad0e:	bf00      	nop
 800ad10:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad14:	4ba2      	ldr	r3, [pc, #648]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad18:	4aa1      	ldr	r2, [pc, #644]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad1e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad20:	e01c      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad26:	3308      	adds	r3, #8
 800ad28:	2100      	movs	r1, #0
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f002 f9ee 	bl	800d10c <RCCEx_PLL2_Config>
 800ad30:	4603      	mov	r3, r0
 800ad32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ad36:	e011      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad3c:	3328      	adds	r3, #40	; 0x28
 800ad3e:	2100      	movs	r1, #0
 800ad40:	4618      	mov	r0, r3
 800ad42:	f002 fa95 	bl	800d270 <RCCEx_PLL3_Config>
 800ad46:	4603      	mov	r3, r0
 800ad48:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad4c:	e006      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad54:	e002      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ad56:	bf00      	nop
 800ad58:	e000      	b.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ad5a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	d10b      	bne.n	800ad7c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ad64:	4b8e      	ldr	r3, [pc, #568]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad68:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ad6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad70:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad74:	4a8a      	ldr	r2, [pc, #552]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad76:	430b      	orrs	r3, r1
 800ad78:	6593      	str	r3, [r2, #88]	; 0x58
 800ad7a:	e003      	b.n	800ad84 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad80:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ad84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad8c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ad90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ad94:	2300      	movs	r3, #0
 800ad96:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad9a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ad9e:	460b      	mov	r3, r1
 800ada0:	4313      	orrs	r3, r2
 800ada2:	d03a      	beq.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ada4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ada8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adaa:	2b30      	cmp	r3, #48	; 0x30
 800adac:	d01f      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x416>
 800adae:	2b30      	cmp	r3, #48	; 0x30
 800adb0:	d819      	bhi.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800adb2:	2b20      	cmp	r3, #32
 800adb4:	d00c      	beq.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800adb6:	2b20      	cmp	r3, #32
 800adb8:	d815      	bhi.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d019      	beq.n	800adf2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800adbe:	2b10      	cmp	r3, #16
 800adc0:	d111      	bne.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800adc2:	4b77      	ldr	r3, [pc, #476]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adc6:	4a76      	ldr	r2, [pc, #472]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800adcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800adce:	e011      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800add0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800add4:	3308      	adds	r3, #8
 800add6:	2102      	movs	r1, #2
 800add8:	4618      	mov	r0, r3
 800adda:	f002 f997 	bl	800d10c <RCCEx_PLL2_Config>
 800adde:	4603      	mov	r3, r0
 800ade0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ade4:	e006      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ade6:	2301      	movs	r3, #1
 800ade8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800adec:	e002      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800adee:	bf00      	nop
 800adf0:	e000      	b.n	800adf4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800adf2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adf4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10a      	bne.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800adfc:	4b68      	ldr	r3, [pc, #416]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae00:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800ae04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae0a:	4a65      	ldr	r2, [pc, #404]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae0c:	430b      	orrs	r3, r1
 800ae0e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ae10:	e003      	b.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ae1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae22:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ae26:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800ae30:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800ae34:	460b      	mov	r3, r1
 800ae36:	4313      	orrs	r3, r2
 800ae38:	d051      	beq.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800ae3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae44:	d035      	beq.n	800aeb2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ae46:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae4a:	d82e      	bhi.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae4c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae50:	d031      	beq.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ae52:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae56:	d828      	bhi.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae5c:	d01a      	beq.n	800ae94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ae5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae62:	d822      	bhi.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d003      	beq.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ae68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae6c:	d007      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ae6e:	e01c      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae70:	4b4b      	ldr	r3, [pc, #300]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae74:	4a4a      	ldr	r2, [pc, #296]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae7c:	e01c      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae82:	3308      	adds	r3, #8
 800ae84:	2100      	movs	r1, #0
 800ae86:	4618      	mov	r0, r3
 800ae88:	f002 f940 	bl	800d10c <RCCEx_PLL2_Config>
 800ae8c:	4603      	mov	r3, r0
 800ae8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae92:	e011      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae98:	3328      	adds	r3, #40	; 0x28
 800ae9a:	2100      	movs	r1, #0
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f002 f9e7 	bl	800d270 <RCCEx_PLL3_Config>
 800aea2:	4603      	mov	r3, r0
 800aea4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800aea8:	e006      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeaa:	2301      	movs	r3, #1
 800aeac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aeb0:	e002      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800aeb2:	bf00      	nop
 800aeb4:	e000      	b.n	800aeb8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800aeb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aeb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d10a      	bne.n	800aed6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aec0:	4b37      	ldr	r3, [pc, #220]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800aec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aece:	4a34      	ldr	r2, [pc, #208]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800aed0:	430b      	orrs	r3, r1
 800aed2:	6513      	str	r3, [r2, #80]	; 0x50
 800aed4:	e003      	b.n	800aede <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aeda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aede:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aeea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aeee:	2300      	movs	r3, #0
 800aef0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aef4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aef8:	460b      	mov	r3, r1
 800aefa:	4313      	orrs	r3, r2
 800aefc:	d056      	beq.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800aefe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af04:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af08:	d033      	beq.n	800af72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800af0a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af0e:	d82c      	bhi.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af10:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af14:	d02f      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800af16:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800af1a:	d826      	bhi.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af20:	d02b      	beq.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800af22:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800af26:	d820      	bhi.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af28:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af2c:	d012      	beq.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800af2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800af32:	d81a      	bhi.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d022      	beq.n	800af7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800af38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af3c:	d115      	bne.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800af3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af42:	3308      	adds	r3, #8
 800af44:	2101      	movs	r1, #1
 800af46:	4618      	mov	r0, r3
 800af48:	f002 f8e0 	bl	800d10c <RCCEx_PLL2_Config>
 800af4c:	4603      	mov	r3, r0
 800af4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af52:	e015      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af58:	3328      	adds	r3, #40	; 0x28
 800af5a:	2101      	movs	r1, #1
 800af5c:	4618      	mov	r0, r3
 800af5e:	f002 f987 	bl	800d270 <RCCEx_PLL3_Config>
 800af62:	4603      	mov	r3, r0
 800af64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af68:	e00a      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af6a:	2301      	movs	r3, #1
 800af6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af70:	e006      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af72:	bf00      	nop
 800af74:	e004      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af76:	bf00      	nop
 800af78:	e002      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af7a:	bf00      	nop
 800af7c:	e000      	b.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af84:	2b00      	cmp	r3, #0
 800af86:	d10d      	bne.n	800afa4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800af88:	4b05      	ldr	r3, [pc, #20]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af8c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800af90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af96:	4a02      	ldr	r2, [pc, #8]	; (800afa0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af98:	430b      	orrs	r3, r1
 800af9a:	6513      	str	r3, [r2, #80]	; 0x50
 800af9c:	e006      	b.n	800afac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800af9e:	bf00      	nop
 800afa0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afa4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800afac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800afb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800afbc:	2300      	movs	r3, #0
 800afbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800afc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800afc6:	460b      	mov	r3, r1
 800afc8:	4313      	orrs	r3, r2
 800afca:	d055      	beq.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800afcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800afd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afd8:	d033      	beq.n	800b042 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800afda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afde:	d82c      	bhi.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afe4:	d02f      	beq.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800afe6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afea:	d826      	bhi.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aff0:	d02b      	beq.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800aff2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800aff6:	d820      	bhi.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800aff8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800affc:	d012      	beq.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800affe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b002:	d81a      	bhi.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b004:	2b00      	cmp	r3, #0
 800b006:	d022      	beq.n	800b04e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b008:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b00c:	d115      	bne.n	800b03a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b012:	3308      	adds	r3, #8
 800b014:	2101      	movs	r1, #1
 800b016:	4618      	mov	r0, r3
 800b018:	f002 f878 	bl	800d10c <RCCEx_PLL2_Config>
 800b01c:	4603      	mov	r3, r0
 800b01e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b022:	e015      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b028:	3328      	adds	r3, #40	; 0x28
 800b02a:	2101      	movs	r1, #1
 800b02c:	4618      	mov	r0, r3
 800b02e:	f002 f91f 	bl	800d270 <RCCEx_PLL3_Config>
 800b032:	4603      	mov	r3, r0
 800b034:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b038:	e00a      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b03a:	2301      	movs	r3, #1
 800b03c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b040:	e006      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b042:	bf00      	nop
 800b044:	e004      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b046:	bf00      	nop
 800b048:	e002      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b04a:	bf00      	nop
 800b04c:	e000      	b.n	800b050 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b04e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b050:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b054:	2b00      	cmp	r3, #0
 800b056:	d10b      	bne.n	800b070 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b058:	4ba3      	ldr	r3, [pc, #652]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b05a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b05c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b068:	4a9f      	ldr	r2, [pc, #636]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b06a:	430b      	orrs	r3, r1
 800b06c:	6593      	str	r3, [r2, #88]	; 0x58
 800b06e:	e003      	b.n	800b078 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b070:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b074:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b080:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b084:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b088:	2300      	movs	r3, #0
 800b08a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b08e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b092:	460b      	mov	r3, r1
 800b094:	4313      	orrs	r3, r2
 800b096:	d037      	beq.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b09c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b09e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0a2:	d00e      	beq.n	800b0c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b0a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0a8:	d816      	bhi.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d018      	beq.n	800b0e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b0ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0b2:	d111      	bne.n	800b0d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0b4:	4b8c      	ldr	r3, [pc, #560]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b8:	4a8b      	ldr	r2, [pc, #556]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b0c0:	e00f      	b.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b0c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c6:	3308      	adds	r3, #8
 800b0c8:	2101      	movs	r1, #1
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f002 f81e 	bl	800d10c <RCCEx_PLL2_Config>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b0d6:	e004      	b.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0d8:	2301      	movs	r3, #1
 800b0da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0de:	e000      	b.n	800b0e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b0e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d10a      	bne.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b0ea:	4b7f      	ldr	r3, [pc, #508]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b0f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0f8:	4a7b      	ldr	r2, [pc, #492]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0fa:	430b      	orrs	r3, r1
 800b0fc:	6513      	str	r3, [r2, #80]	; 0x50
 800b0fe:	e003      	b.n	800b108 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b100:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b104:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b110:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b114:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b118:	2300      	movs	r3, #0
 800b11a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b11e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b122:	460b      	mov	r3, r1
 800b124:	4313      	orrs	r3, r2
 800b126:	d039      	beq.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b12c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b12e:	2b03      	cmp	r3, #3
 800b130:	d81c      	bhi.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b132:	a201      	add	r2, pc, #4	; (adr r2, 800b138 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b134:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b138:	0800b175 	.word	0x0800b175
 800b13c:	0800b149 	.word	0x0800b149
 800b140:	0800b157 	.word	0x0800b157
 800b144:	0800b175 	.word	0x0800b175
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b148:	4b67      	ldr	r3, [pc, #412]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b14a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b14c:	4a66      	ldr	r2, [pc, #408]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b14e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b152:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b154:	e00f      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b156:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15a:	3308      	adds	r3, #8
 800b15c:	2102      	movs	r1, #2
 800b15e:	4618      	mov	r0, r3
 800b160:	f001 ffd4 	bl	800d10c <RCCEx_PLL2_Config>
 800b164:	4603      	mov	r3, r0
 800b166:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b16a:	e004      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b16c:	2301      	movs	r3, #1
 800b16e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b172:	e000      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b174:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10a      	bne.n	800b194 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b17e:	4b5a      	ldr	r3, [pc, #360]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b182:	f023 0103 	bic.w	r1, r3, #3
 800b186:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b18a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b18c:	4a56      	ldr	r2, [pc, #344]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b18e:	430b      	orrs	r3, r1
 800b190:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b192:	e003      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b194:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b198:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b19c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b1a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b1b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b1b6:	460b      	mov	r3, r1
 800b1b8:	4313      	orrs	r3, r2
 800b1ba:	f000 809f 	beq.w	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b1be:	4b4b      	ldr	r3, [pc, #300]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a4a      	ldr	r2, [pc, #296]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b1c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b1c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b1ca:	f7f8 fc51 	bl	8003a70 <HAL_GetTick>
 800b1ce:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1d2:	e00b      	b.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1d4:	f7f8 fc4c 	bl	8003a70 <HAL_GetTick>
 800b1d8:	4602      	mov	r2, r0
 800b1da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b1de:	1ad3      	subs	r3, r2, r3
 800b1e0:	2b64      	cmp	r3, #100	; 0x64
 800b1e2:	d903      	bls.n	800b1ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b1e4:	2303      	movs	r3, #3
 800b1e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1ea:	e005      	b.n	800b1f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1ec:	4b3f      	ldr	r3, [pc, #252]	; (800b2ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d0ed      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b1f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d179      	bne.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b200:	4b39      	ldr	r3, [pc, #228]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b202:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b204:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b208:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b20c:	4053      	eors	r3, r2
 800b20e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b212:	2b00      	cmp	r3, #0
 800b214:	d015      	beq.n	800b242 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b216:	4b34      	ldr	r3, [pc, #208]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b218:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b21a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b21e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b222:	4b31      	ldr	r3, [pc, #196]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b226:	4a30      	ldr	r2, [pc, #192]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b22c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b22e:	4b2e      	ldr	r3, [pc, #184]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b232:	4a2d      	ldr	r2, [pc, #180]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b238:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b23a:	4a2b      	ldr	r2, [pc, #172]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b23c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b240:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b246:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b24a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b24e:	d118      	bne.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b250:	f7f8 fc0e 	bl	8003a70 <HAL_GetTick>
 800b254:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b258:	e00d      	b.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b25a:	f7f8 fc09 	bl	8003a70 <HAL_GetTick>
 800b25e:	4602      	mov	r2, r0
 800b260:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b264:	1ad2      	subs	r2, r2, r3
 800b266:	f241 3388 	movw	r3, #5000	; 0x1388
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d903      	bls.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b26e:	2303      	movs	r3, #3
 800b270:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b274:	e005      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b276:	4b1c      	ldr	r3, [pc, #112]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b27a:	f003 0302 	and.w	r3, r3, #2
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d0eb      	beq.n	800b25a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b286:	2b00      	cmp	r3, #0
 800b288:	d129      	bne.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b28e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b292:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b296:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b29a:	d10e      	bne.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b29c:	4b12      	ldr	r3, [pc, #72]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b29e:	691b      	ldr	r3, [r3, #16]
 800b2a0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b2a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b2ac:	091a      	lsrs	r2, r3, #4
 800b2ae:	4b10      	ldr	r3, [pc, #64]	; (800b2f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b2b0:	4013      	ands	r3, r2
 800b2b2:	4a0d      	ldr	r2, [pc, #52]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2b4:	430b      	orrs	r3, r1
 800b2b6:	6113      	str	r3, [r2, #16]
 800b2b8:	e005      	b.n	800b2c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b2ba:	4b0b      	ldr	r3, [pc, #44]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2bc:	691b      	ldr	r3, [r3, #16]
 800b2be:	4a0a      	ldr	r2, [pc, #40]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b2c4:	6113      	str	r3, [r2, #16]
 800b2c6:	4b08      	ldr	r3, [pc, #32]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b2d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b2d6:	4a04      	ldr	r2, [pc, #16]	; (800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b2d8:	430b      	orrs	r3, r1
 800b2da:	6713      	str	r3, [r2, #112]	; 0x70
 800b2dc:	e00e      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b2de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b2e6:	e009      	b.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b2e8:	58024400 	.word	0x58024400
 800b2ec:	58024800 	.word	0x58024800
 800b2f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b304:	f002 0301 	and.w	r3, r2, #1
 800b308:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b30c:	2300      	movs	r3, #0
 800b30e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b312:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b316:	460b      	mov	r3, r1
 800b318:	4313      	orrs	r3, r2
 800b31a:	f000 8089 	beq.w	800b430 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b31e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b324:	2b28      	cmp	r3, #40	; 0x28
 800b326:	d86b      	bhi.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b328:	a201      	add	r2, pc, #4	; (adr r2, 800b330 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b32a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b32e:	bf00      	nop
 800b330:	0800b409 	.word	0x0800b409
 800b334:	0800b401 	.word	0x0800b401
 800b338:	0800b401 	.word	0x0800b401
 800b33c:	0800b401 	.word	0x0800b401
 800b340:	0800b401 	.word	0x0800b401
 800b344:	0800b401 	.word	0x0800b401
 800b348:	0800b401 	.word	0x0800b401
 800b34c:	0800b401 	.word	0x0800b401
 800b350:	0800b3d5 	.word	0x0800b3d5
 800b354:	0800b401 	.word	0x0800b401
 800b358:	0800b401 	.word	0x0800b401
 800b35c:	0800b401 	.word	0x0800b401
 800b360:	0800b401 	.word	0x0800b401
 800b364:	0800b401 	.word	0x0800b401
 800b368:	0800b401 	.word	0x0800b401
 800b36c:	0800b401 	.word	0x0800b401
 800b370:	0800b3eb 	.word	0x0800b3eb
 800b374:	0800b401 	.word	0x0800b401
 800b378:	0800b401 	.word	0x0800b401
 800b37c:	0800b401 	.word	0x0800b401
 800b380:	0800b401 	.word	0x0800b401
 800b384:	0800b401 	.word	0x0800b401
 800b388:	0800b401 	.word	0x0800b401
 800b38c:	0800b401 	.word	0x0800b401
 800b390:	0800b409 	.word	0x0800b409
 800b394:	0800b401 	.word	0x0800b401
 800b398:	0800b401 	.word	0x0800b401
 800b39c:	0800b401 	.word	0x0800b401
 800b3a0:	0800b401 	.word	0x0800b401
 800b3a4:	0800b401 	.word	0x0800b401
 800b3a8:	0800b401 	.word	0x0800b401
 800b3ac:	0800b401 	.word	0x0800b401
 800b3b0:	0800b409 	.word	0x0800b409
 800b3b4:	0800b401 	.word	0x0800b401
 800b3b8:	0800b401 	.word	0x0800b401
 800b3bc:	0800b401 	.word	0x0800b401
 800b3c0:	0800b401 	.word	0x0800b401
 800b3c4:	0800b401 	.word	0x0800b401
 800b3c8:	0800b401 	.word	0x0800b401
 800b3cc:	0800b401 	.word	0x0800b401
 800b3d0:	0800b409 	.word	0x0800b409
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3d8:	3308      	adds	r3, #8
 800b3da:	2101      	movs	r1, #1
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f001 fe95 	bl	800d10c <RCCEx_PLL2_Config>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b3e8:	e00f      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ee:	3328      	adds	r3, #40	; 0x28
 800b3f0:	2101      	movs	r1, #1
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	f001 ff3c 	bl	800d270 <RCCEx_PLL3_Config>
 800b3f8:	4603      	mov	r3, r0
 800b3fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b3fe:	e004      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b406:	e000      	b.n	800b40a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b408:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b40a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d10a      	bne.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b412:	4bbf      	ldr	r3, [pc, #764]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b416:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b41a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b41e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b420:	4abb      	ldr	r2, [pc, #748]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b422:	430b      	orrs	r3, r1
 800b424:	6553      	str	r3, [r2, #84]	; 0x54
 800b426:	e003      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b42c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b430:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b434:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b438:	f002 0302 	and.w	r3, r2, #2
 800b43c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b440:	2300      	movs	r3, #0
 800b442:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b446:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b44a:	460b      	mov	r3, r1
 800b44c:	4313      	orrs	r3, r2
 800b44e:	d041      	beq.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b454:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b456:	2b05      	cmp	r3, #5
 800b458:	d824      	bhi.n	800b4a4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b45a:	a201      	add	r2, pc, #4	; (adr r2, 800b460 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b45c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b460:	0800b4ad 	.word	0x0800b4ad
 800b464:	0800b479 	.word	0x0800b479
 800b468:	0800b48f 	.word	0x0800b48f
 800b46c:	0800b4ad 	.word	0x0800b4ad
 800b470:	0800b4ad 	.word	0x0800b4ad
 800b474:	0800b4ad 	.word	0x0800b4ad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b478:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b47c:	3308      	adds	r3, #8
 800b47e:	2101      	movs	r1, #1
 800b480:	4618      	mov	r0, r3
 800b482:	f001 fe43 	bl	800d10c <RCCEx_PLL2_Config>
 800b486:	4603      	mov	r3, r0
 800b488:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b48c:	e00f      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b492:	3328      	adds	r3, #40	; 0x28
 800b494:	2101      	movs	r1, #1
 800b496:	4618      	mov	r0, r3
 800b498:	f001 feea 	bl	800d270 <RCCEx_PLL3_Config>
 800b49c:	4603      	mov	r3, r0
 800b49e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b4a2:	e004      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4aa:	e000      	b.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b4ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d10a      	bne.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b4b6:	4b96      	ldr	r3, [pc, #600]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4ba:	f023 0107 	bic.w	r1, r3, #7
 800b4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4c4:	4a92      	ldr	r2, [pc, #584]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b4c6:	430b      	orrs	r3, r1
 800b4c8:	6553      	str	r3, [r2, #84]	; 0x54
 800b4ca:	e003      	b.n	800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4d0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b4d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f002 0304 	and.w	r3, r2, #4
 800b4e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4ea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4313      	orrs	r3, r2
 800b4f2:	d044      	beq.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b4f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4fc:	2b05      	cmp	r3, #5
 800b4fe:	d825      	bhi.n	800b54c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b500:	a201      	add	r2, pc, #4	; (adr r2, 800b508 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b506:	bf00      	nop
 800b508:	0800b555 	.word	0x0800b555
 800b50c:	0800b521 	.word	0x0800b521
 800b510:	0800b537 	.word	0x0800b537
 800b514:	0800b555 	.word	0x0800b555
 800b518:	0800b555 	.word	0x0800b555
 800b51c:	0800b555 	.word	0x0800b555
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b524:	3308      	adds	r3, #8
 800b526:	2101      	movs	r1, #1
 800b528:	4618      	mov	r0, r3
 800b52a:	f001 fdef 	bl	800d10c <RCCEx_PLL2_Config>
 800b52e:	4603      	mov	r3, r0
 800b530:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b534:	e00f      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b536:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53a:	3328      	adds	r3, #40	; 0x28
 800b53c:	2101      	movs	r1, #1
 800b53e:	4618      	mov	r0, r3
 800b540:	f001 fe96 	bl	800d270 <RCCEx_PLL3_Config>
 800b544:	4603      	mov	r3, r0
 800b546:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b54a:	e004      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b54c:	2301      	movs	r3, #1
 800b54e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b552:	e000      	b.n	800b556 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b554:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10b      	bne.n	800b576 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b55e:	4b6c      	ldr	r3, [pc, #432]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b562:	f023 0107 	bic.w	r1, r3, #7
 800b566:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b56a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b56e:	4a68      	ldr	r2, [pc, #416]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b570:	430b      	orrs	r3, r1
 800b572:	6593      	str	r3, [r2, #88]	; 0x58
 800b574:	e003      	b.n	800b57e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b576:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b57a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b57e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b582:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b586:	f002 0320 	and.w	r3, r2, #32
 800b58a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b58e:	2300      	movs	r3, #0
 800b590:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b598:	460b      	mov	r3, r1
 800b59a:	4313      	orrs	r3, r2
 800b59c:	d055      	beq.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b59e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5aa:	d033      	beq.n	800b614 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b5ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5b0:	d82c      	bhi.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b5b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5b6:	d02f      	beq.n	800b618 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b5b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5bc:	d826      	bhi.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b5be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5c2:	d02b      	beq.n	800b61c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b5c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5c8:	d820      	bhi.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b5ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5ce:	d012      	beq.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b5d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5d4:	d81a      	bhi.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d022      	beq.n	800b620 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b5da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5de:	d115      	bne.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	2100      	movs	r1, #0
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f001 fd8f 	bl	800d10c <RCCEx_PLL2_Config>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b5f4:	e015      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5fa:	3328      	adds	r3, #40	; 0x28
 800b5fc:	2102      	movs	r1, #2
 800b5fe:	4618      	mov	r0, r3
 800b600:	f001 fe36 	bl	800d270 <RCCEx_PLL3_Config>
 800b604:	4603      	mov	r3, r0
 800b606:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b60a:	e00a      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b60c:	2301      	movs	r3, #1
 800b60e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b612:	e006      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b614:	bf00      	nop
 800b616:	e004      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b618:	bf00      	nop
 800b61a:	e002      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b61c:	bf00      	nop
 800b61e:	e000      	b.n	800b622 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b620:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b626:	2b00      	cmp	r3, #0
 800b628:	d10b      	bne.n	800b642 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b62a:	4b39      	ldr	r3, [pc, #228]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b62c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b62e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b63a:	4a35      	ldr	r2, [pc, #212]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b63c:	430b      	orrs	r3, r1
 800b63e:	6553      	str	r3, [r2, #84]	; 0x54
 800b640:	e003      	b.n	800b64a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b642:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b646:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b64a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b656:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b65a:	2300      	movs	r3, #0
 800b65c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b660:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b664:	460b      	mov	r3, r1
 800b666:	4313      	orrs	r3, r2
 800b668:	d058      	beq.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b66a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b672:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b676:	d033      	beq.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b678:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b67c:	d82c      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b67e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b682:	d02f      	beq.n	800b6e4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b684:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b688:	d826      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b68a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b68e:	d02b      	beq.n	800b6e8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b690:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b694:	d820      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b696:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b69a:	d012      	beq.n	800b6c2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b69c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b6a0:	d81a      	bhi.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d022      	beq.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b6a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b6aa:	d115      	bne.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b6ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b0:	3308      	adds	r3, #8
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f001 fd29 	bl	800d10c <RCCEx_PLL2_Config>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b6c0:	e015      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b6c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c6:	3328      	adds	r3, #40	; 0x28
 800b6c8:	2102      	movs	r1, #2
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f001 fdd0 	bl	800d270 <RCCEx_PLL3_Config>
 800b6d0:	4603      	mov	r3, r0
 800b6d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b6d6:	e00a      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b6d8:	2301      	movs	r3, #1
 800b6da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b6de:	e006      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6e0:	bf00      	nop
 800b6e2:	e004      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6e4:	bf00      	nop
 800b6e6:	e002      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6e8:	bf00      	nop
 800b6ea:	e000      	b.n	800b6ee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d10e      	bne.n	800b714 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6f6:	4b06      	ldr	r3, [pc, #24]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6fa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b6fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b702:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b706:	4a02      	ldr	r2, [pc, #8]	; (800b710 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b708:	430b      	orrs	r3, r1
 800b70a:	6593      	str	r3, [r2, #88]	; 0x58
 800b70c:	e006      	b.n	800b71c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b70e:	bf00      	nop
 800b710:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b714:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b718:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b71c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b72c:	2300      	movs	r3, #0
 800b72e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b732:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b736:	460b      	mov	r3, r1
 800b738:	4313      	orrs	r3, r2
 800b73a:	d055      	beq.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b73c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b740:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b744:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b748:	d033      	beq.n	800b7b2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b74a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b74e:	d82c      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b750:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b754:	d02f      	beq.n	800b7b6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b75a:	d826      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b75c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b760:	d02b      	beq.n	800b7ba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b762:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b766:	d820      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b768:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b76c:	d012      	beq.n	800b794 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b76e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b772:	d81a      	bhi.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b774:	2b00      	cmp	r3, #0
 800b776:	d022      	beq.n	800b7be <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b77c:	d115      	bne.n	800b7aa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b77e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b782:	3308      	adds	r3, #8
 800b784:	2100      	movs	r1, #0
 800b786:	4618      	mov	r0, r3
 800b788:	f001 fcc0 	bl	800d10c <RCCEx_PLL2_Config>
 800b78c:	4603      	mov	r3, r0
 800b78e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b792:	e015      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b798:	3328      	adds	r3, #40	; 0x28
 800b79a:	2102      	movs	r1, #2
 800b79c:	4618      	mov	r0, r3
 800b79e:	f001 fd67 	bl	800d270 <RCCEx_PLL3_Config>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b7a8:	e00a      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7aa:	2301      	movs	r3, #1
 800b7ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7b0:	e006      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b7b2:	bf00      	nop
 800b7b4:	e004      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b7b6:	bf00      	nop
 800b7b8:	e002      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b7ba:	bf00      	nop
 800b7bc:	e000      	b.n	800b7c0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b7be:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7c0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d10b      	bne.n	800b7e0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b7c8:	4ba1      	ldr	r3, [pc, #644]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7cc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b7d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b7d8:	4a9d      	ldr	r2, [pc, #628]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7da:	430b      	orrs	r3, r1
 800b7dc:	6593      	str	r3, [r2, #88]	; 0x58
 800b7de:	e003      	b.n	800b7e8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7e0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7e4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b7e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f0:	f002 0308 	and.w	r3, r2, #8
 800b7f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7fe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b802:	460b      	mov	r3, r1
 800b804:	4313      	orrs	r3, r2
 800b806:	d01e      	beq.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b808:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b80c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b814:	d10c      	bne.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b816:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b81a:	3328      	adds	r3, #40	; 0x28
 800b81c:	2102      	movs	r1, #2
 800b81e:	4618      	mov	r0, r3
 800b820:	f001 fd26 	bl	800d270 <RCCEx_PLL3_Config>
 800b824:	4603      	mov	r3, r0
 800b826:	2b00      	cmp	r3, #0
 800b828:	d002      	beq.n	800b830 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b82a:	2301      	movs	r3, #1
 800b82c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b830:	4b87      	ldr	r3, [pc, #540]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b834:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b83c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b840:	4a83      	ldr	r2, [pc, #524]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b842:	430b      	orrs	r3, r1
 800b844:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	f002 0310 	and.w	r3, r2, #16
 800b852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b856:	2300      	movs	r3, #0
 800b858:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b85c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b860:	460b      	mov	r3, r1
 800b862:	4313      	orrs	r3, r2
 800b864:	d01e      	beq.n	800b8a4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b86e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b872:	d10c      	bne.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b878:	3328      	adds	r3, #40	; 0x28
 800b87a:	2102      	movs	r1, #2
 800b87c:	4618      	mov	r0, r3
 800b87e:	f001 fcf7 	bl	800d270 <RCCEx_PLL3_Config>
 800b882:	4603      	mov	r3, r0
 800b884:	2b00      	cmp	r3, #0
 800b886:	d002      	beq.n	800b88e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b888:	2301      	movs	r3, #1
 800b88a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b88e:	4b70      	ldr	r3, [pc, #448]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b892:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b89e:	4a6c      	ldr	r2, [pc, #432]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b8a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b8b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b8ba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b8be:	460b      	mov	r3, r1
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	d03e      	beq.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b8cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8d0:	d022      	beq.n	800b918 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b8d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b8d6:	d81b      	bhi.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d003      	beq.n	800b8e4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b8dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b8e0:	d00b      	beq.n	800b8fa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b8e2:	e015      	b.n	800b910 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8e8:	3308      	adds	r3, #8
 800b8ea:	2100      	movs	r1, #0
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	f001 fc0d 	bl	800d10c <RCCEx_PLL2_Config>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b8f8:	e00f      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8fe:	3328      	adds	r3, #40	; 0x28
 800b900:	2102      	movs	r1, #2
 800b902:	4618      	mov	r0, r3
 800b904:	f001 fcb4 	bl	800d270 <RCCEx_PLL3_Config>
 800b908:	4603      	mov	r3, r0
 800b90a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b90e:	e004      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b910:	2301      	movs	r3, #1
 800b912:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b916:	e000      	b.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b918:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b91a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b91e:	2b00      	cmp	r3, #0
 800b920:	d10b      	bne.n	800b93a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b922:	4b4b      	ldr	r3, [pc, #300]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b926:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b92a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b932:	4a47      	ldr	r2, [pc, #284]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b934:	430b      	orrs	r3, r1
 800b936:	6593      	str	r3, [r2, #88]	; 0x58
 800b938:	e003      	b.n	800b942 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b93a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b93e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b94a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b94e:	67bb      	str	r3, [r7, #120]	; 0x78
 800b950:	2300      	movs	r3, #0
 800b952:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b954:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b958:	460b      	mov	r3, r1
 800b95a:	4313      	orrs	r3, r2
 800b95c:	d03b      	beq.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b95e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b966:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b96a:	d01f      	beq.n	800b9ac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b96c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b970:	d818      	bhi.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b972:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b976:	d003      	beq.n	800b980 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b978:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b97c:	d007      	beq.n	800b98e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b97e:	e011      	b.n	800b9a4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b980:	4b33      	ldr	r3, [pc, #204]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b984:	4a32      	ldr	r2, [pc, #200]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b986:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b98a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b98c:	e00f      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b98e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b992:	3328      	adds	r3, #40	; 0x28
 800b994:	2101      	movs	r1, #1
 800b996:	4618      	mov	r0, r3
 800b998:	f001 fc6a 	bl	800d270 <RCCEx_PLL3_Config>
 800b99c:	4603      	mov	r3, r0
 800b99e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b9a2:	e004      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9a4:	2301      	movs	r3, #1
 800b9a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9aa:	e000      	b.n	800b9ae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b9ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9b2:	2b00      	cmp	r3, #0
 800b9b4:	d10b      	bne.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b9b6:	4b26      	ldr	r3, [pc, #152]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9ba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b9be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b9c6:	4a22      	ldr	r2, [pc, #136]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9c8:	430b      	orrs	r3, r1
 800b9ca:	6553      	str	r3, [r2, #84]	; 0x54
 800b9cc:	e003      	b.n	800b9d6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9de:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b9e2:	673b      	str	r3, [r7, #112]	; 0x70
 800b9e4:	2300      	movs	r3, #0
 800b9e6:	677b      	str	r3, [r7, #116]	; 0x74
 800b9e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b9ec:	460b      	mov	r3, r1
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	d034      	beq.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d003      	beq.n	800ba04 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b9fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba00:	d007      	beq.n	800ba12 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800ba02:	e011      	b.n	800ba28 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba04:	4b12      	ldr	r3, [pc, #72]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba08:	4a11      	ldr	r2, [pc, #68]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba10:	e00e      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ba12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba16:	3308      	adds	r3, #8
 800ba18:	2102      	movs	r1, #2
 800ba1a:	4618      	mov	r0, r3
 800ba1c:	f001 fb76 	bl	800d10c <RCCEx_PLL2_Config>
 800ba20:	4603      	mov	r3, r0
 800ba22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800ba26:	e003      	b.n	800ba30 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800ba28:	2301      	movs	r3, #1
 800ba2a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10d      	bne.n	800ba54 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800ba38:	4b05      	ldr	r3, [pc, #20]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ba3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ba40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba46:	4a02      	ldr	r2, [pc, #8]	; (800ba50 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba48:	430b      	orrs	r3, r1
 800ba4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba4c:	e006      	b.n	800ba5c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ba4e:	bf00      	nop
 800ba50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba54:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba58:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba64:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ba68:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba6e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ba72:	460b      	mov	r3, r1
 800ba74:	4313      	orrs	r3, r2
 800ba76:	d00c      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba7c:	3328      	adds	r3, #40	; 0x28
 800ba7e:	2102      	movs	r1, #2
 800ba80:	4618      	mov	r0, r3
 800ba82:	f001 fbf5 	bl	800d270 <RCCEx_PLL3_Config>
 800ba86:	4603      	mov	r3, r0
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d002      	beq.n	800ba92 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ba8c:	2301      	movs	r3, #1
 800ba8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba9a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ba9e:	663b      	str	r3, [r7, #96]	; 0x60
 800baa0:	2300      	movs	r3, #0
 800baa2:	667b      	str	r3, [r7, #100]	; 0x64
 800baa4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800baa8:	460b      	mov	r3, r1
 800baaa:	4313      	orrs	r3, r2
 800baac:	d038      	beq.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800baae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bab6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800baba:	d018      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800babc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bac0:	d811      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bac2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bac6:	d014      	beq.n	800baf2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bac8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bacc:	d80b      	bhi.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d011      	beq.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800bad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bad6:	d106      	bne.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bad8:	4bc3      	ldr	r3, [pc, #780]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800badc:	4ac2      	ldr	r2, [pc, #776]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800bae4:	e008      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bae6:	2301      	movs	r3, #1
 800bae8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baec:	e004      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800baee:	bf00      	nop
 800baf0:	e002      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800baf2:	bf00      	nop
 800baf4:	e000      	b.n	800baf8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800baf6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d10b      	bne.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bb00:	4bb9      	ldr	r3, [pc, #740]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb04:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bb08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bb10:	4ab5      	ldr	r2, [pc, #724]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb12:	430b      	orrs	r3, r1
 800bb14:	6553      	str	r3, [r2, #84]	; 0x54
 800bb16:	e003      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bb20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb28:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bb2c:	65bb      	str	r3, [r7, #88]	; 0x58
 800bb2e:	2300      	movs	r3, #0
 800bb30:	65fb      	str	r3, [r7, #92]	; 0x5c
 800bb32:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800bb36:	460b      	mov	r3, r1
 800bb38:	4313      	orrs	r3, r2
 800bb3a:	d009      	beq.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bb3c:	4baa      	ldr	r3, [pc, #680]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb4a:	4aa7      	ldr	r2, [pc, #668]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb4c:	430b      	orrs	r3, r1
 800bb4e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bb50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb58:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bb5c:	653b      	str	r3, [r7, #80]	; 0x50
 800bb5e:	2300      	movs	r3, #0
 800bb60:	657b      	str	r3, [r7, #84]	; 0x54
 800bb62:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bb66:	460b      	mov	r3, r1
 800bb68:	4313      	orrs	r3, r2
 800bb6a:	d00a      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bb6c:	4b9e      	ldr	r3, [pc, #632]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bb74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb78:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bb7c:	4a9a      	ldr	r2, [pc, #616]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb7e:	430b      	orrs	r3, r1
 800bb80:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb8a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bb8e:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb90:	2300      	movs	r3, #0
 800bb92:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb94:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bb98:	460b      	mov	r3, r1
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	d009      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb9e:	4b92      	ldr	r3, [pc, #584]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bba2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bba6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbac:	4a8e      	ldr	r2, [pc, #568]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbae:	430b      	orrs	r3, r1
 800bbb0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbba:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bbbe:	643b      	str	r3, [r7, #64]	; 0x40
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	647b      	str	r3, [r7, #68]	; 0x44
 800bbc4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bbc8:	460b      	mov	r3, r1
 800bbca:	4313      	orrs	r3, r2
 800bbcc:	d00e      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bbce:	4b86      	ldr	r3, [pc, #536]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbd0:	691b      	ldr	r3, [r3, #16]
 800bbd2:	4a85      	ldr	r2, [pc, #532]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbd4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bbd8:	6113      	str	r3, [r2, #16]
 800bbda:	4b83      	ldr	r3, [pc, #524]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbdc:	6919      	ldr	r1, [r3, #16]
 800bbde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbe2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bbe6:	4a80      	ldr	r2, [pc, #512]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbe8:	430b      	orrs	r3, r1
 800bbea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bbec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbf4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bbf8:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbfa:	2300      	movs	r3, #0
 800bbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbfe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bc02:	460b      	mov	r3, r1
 800bc04:	4313      	orrs	r3, r2
 800bc06:	d009      	beq.n	800bc1c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bc08:	4b77      	ldr	r3, [pc, #476]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc0c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bc10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc16:	4a74      	ldr	r2, [pc, #464]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc18:	430b      	orrs	r3, r1
 800bc1a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bc1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc24:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bc28:	633b      	str	r3, [r7, #48]	; 0x30
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	637b      	str	r3, [r7, #52]	; 0x34
 800bc2e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bc32:	460b      	mov	r3, r1
 800bc34:	4313      	orrs	r3, r2
 800bc36:	d00a      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bc38:	4b6b      	ldr	r3, [pc, #428]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc3c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bc40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc48:	4a67      	ldr	r2, [pc, #412]	; (800bde8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc4a:	430b      	orrs	r3, r1
 800bc4c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bc4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc56:	2100      	movs	r1, #0
 800bc58:	62b9      	str	r1, [r7, #40]	; 0x28
 800bc5a:	f003 0301 	and.w	r3, r3, #1
 800bc5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc60:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bc64:	460b      	mov	r3, r1
 800bc66:	4313      	orrs	r3, r2
 800bc68:	d011      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6e:	3308      	adds	r3, #8
 800bc70:	2100      	movs	r1, #0
 800bc72:	4618      	mov	r0, r3
 800bc74:	f001 fa4a 	bl	800d10c <RCCEx_PLL2_Config>
 800bc78:	4603      	mov	r3, r0
 800bc7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d003      	beq.n	800bc8e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc96:	2100      	movs	r1, #0
 800bc98:	6239      	str	r1, [r7, #32]
 800bc9a:	f003 0302 	and.w	r3, r3, #2
 800bc9e:	627b      	str	r3, [r7, #36]	; 0x24
 800bca0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bca4:	460b      	mov	r3, r1
 800bca6:	4313      	orrs	r3, r2
 800bca8:	d011      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bcaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcae:	3308      	adds	r3, #8
 800bcb0:	2101      	movs	r1, #1
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f001 fa2a 	bl	800d10c <RCCEx_PLL2_Config>
 800bcb8:	4603      	mov	r3, r0
 800bcba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bcbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d003      	beq.n	800bcce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bcce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd6:	2100      	movs	r1, #0
 800bcd8:	61b9      	str	r1, [r7, #24]
 800bcda:	f003 0304 	and.w	r3, r3, #4
 800bcde:	61fb      	str	r3, [r7, #28]
 800bce0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bce4:	460b      	mov	r3, r1
 800bce6:	4313      	orrs	r3, r2
 800bce8:	d011      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcee:	3308      	adds	r3, #8
 800bcf0:	2102      	movs	r1, #2
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	f001 fa0a 	bl	800d10c <RCCEx_PLL2_Config>
 800bcf8:	4603      	mov	r3, r0
 800bcfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bcfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d003      	beq.n	800bd0e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd06:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd0a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd16:	2100      	movs	r1, #0
 800bd18:	6139      	str	r1, [r7, #16]
 800bd1a:	f003 0308 	and.w	r3, r3, #8
 800bd1e:	617b      	str	r3, [r7, #20]
 800bd20:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bd24:	460b      	mov	r3, r1
 800bd26:	4313      	orrs	r3, r2
 800bd28:	d011      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bd2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd2e:	3328      	adds	r3, #40	; 0x28
 800bd30:	2100      	movs	r1, #0
 800bd32:	4618      	mov	r0, r3
 800bd34:	f001 fa9c 	bl	800d270 <RCCEx_PLL3_Config>
 800bd38:	4603      	mov	r3, r0
 800bd3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bd3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d003      	beq.n	800bd4e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd46:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bd4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd56:	2100      	movs	r1, #0
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	f003 0310 	and.w	r3, r3, #16
 800bd5e:	60fb      	str	r3, [r7, #12]
 800bd60:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bd64:	460b      	mov	r3, r1
 800bd66:	4313      	orrs	r3, r2
 800bd68:	d011      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd6e:	3328      	adds	r3, #40	; 0x28
 800bd70:	2101      	movs	r1, #1
 800bd72:	4618      	mov	r0, r3
 800bd74:	f001 fa7c 	bl	800d270 <RCCEx_PLL3_Config>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd7e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d003      	beq.n	800bd8e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bd8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd96:	2100      	movs	r1, #0
 800bd98:	6039      	str	r1, [r7, #0]
 800bd9a:	f003 0320 	and.w	r3, r3, #32
 800bd9e:	607b      	str	r3, [r7, #4]
 800bda0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bda4:	460b      	mov	r3, r1
 800bda6:	4313      	orrs	r3, r2
 800bda8:	d011      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bdaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdae:	3328      	adds	r3, #40	; 0x28
 800bdb0:	2102      	movs	r1, #2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f001 fa5c 	bl	800d270 <RCCEx_PLL3_Config>
 800bdb8:	4603      	mov	r3, r0
 800bdba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bdbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d003      	beq.n	800bdce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bdc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bdca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bdce:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bdd2:	2b00      	cmp	r3, #0
 800bdd4:	d101      	bne.n	800bdda <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	e000      	b.n	800bddc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bdda:	2301      	movs	r3, #1
}
 800bddc:	4618      	mov	r0, r3
 800bdde:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bde2:	46bd      	mov	sp, r7
 800bde4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bde8:	58024400 	.word	0x58024400

0800bdec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b090      	sub	sp, #64	; 0x40
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bdf6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdfa:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bdfe:	430b      	orrs	r3, r1
 800be00:	f040 8094 	bne.w	800bf2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800be04:	4b9e      	ldr	r3, [pc, #632]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be08:	f003 0307 	and.w	r3, r3, #7
 800be0c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800be0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be10:	2b04      	cmp	r3, #4
 800be12:	f200 8087 	bhi.w	800bf24 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800be16:	a201      	add	r2, pc, #4	; (adr r2, 800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800be18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be1c:	0800be31 	.word	0x0800be31
 800be20:	0800be59 	.word	0x0800be59
 800be24:	0800be81 	.word	0x0800be81
 800be28:	0800bf1d 	.word	0x0800bf1d
 800be2c:	0800bea9 	.word	0x0800bea9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800be30:	4b93      	ldr	r3, [pc, #588]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800be38:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800be3c:	d108      	bne.n	800be50 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be42:	4618      	mov	r0, r3
 800be44:	f001 f810 	bl	800ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be4c:	f000 bd45 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be50:	2300      	movs	r3, #0
 800be52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be54:	f000 bd41 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be58:	4b89      	ldr	r3, [pc, #548]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be60:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be64:	d108      	bne.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be66:	f107 0318 	add.w	r3, r7, #24
 800be6a:	4618      	mov	r0, r3
 800be6c:	f000 fd54 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be70:	69bb      	ldr	r3, [r7, #24]
 800be72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be74:	f000 bd31 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be78:	2300      	movs	r3, #0
 800be7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be7c:	f000 bd2d 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be80:	4b7f      	ldr	r3, [pc, #508]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be8c:	d108      	bne.n	800bea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be8e:	f107 030c 	add.w	r3, r7, #12
 800be92:	4618      	mov	r0, r3
 800be94:	f000 fe94 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be9c:	f000 bd1d 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bea0:	2300      	movs	r3, #0
 800bea2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bea4:	f000 bd19 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bea8:	4b75      	ldr	r3, [pc, #468]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800beb0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800beb2:	4b73      	ldr	r3, [pc, #460]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beb4:	681b      	ldr	r3, [r3, #0]
 800beb6:	f003 0304 	and.w	r3, r3, #4
 800beba:	2b04      	cmp	r3, #4
 800bebc:	d10c      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800bebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d109      	bne.n	800bed8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bec4:	4b6e      	ldr	r3, [pc, #440]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	08db      	lsrs	r3, r3, #3
 800beca:	f003 0303 	and.w	r3, r3, #3
 800bece:	4a6d      	ldr	r2, [pc, #436]	; (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bed0:	fa22 f303 	lsr.w	r3, r2, r3
 800bed4:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bed6:	e01f      	b.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bed8:	4b69      	ldr	r3, [pc, #420]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bee0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bee4:	d106      	bne.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beec:	d102      	bne.n	800bef4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beee:	4b66      	ldr	r3, [pc, #408]	; (800c088 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bef0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bef2:	e011      	b.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800bef4:	4b62      	ldr	r3, [pc, #392]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800befc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bf00:	d106      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bf02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf08:	d102      	bne.n	800bf10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bf0a:	4b60      	ldr	r3, [pc, #384]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf0e:	e003      	b.n	800bf18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800bf10:	2300      	movs	r3, #0
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bf14:	f000 bce1 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bf18:	f000 bcdf 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bf1c:	4b5c      	ldr	r3, [pc, #368]	; (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bf1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf20:	f000 bcdb 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bf24:	2300      	movs	r3, #0
 800bf26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf28:	f000 bcd7 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bf2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bf30:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bf34:	430b      	orrs	r3, r1
 800bf36:	f040 80ad 	bne.w	800c094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bf3a:	4b51      	ldr	r3, [pc, #324]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf3e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bf42:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf4a:	d056      	beq.n	800bffa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bf4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf52:	f200 8090 	bhi.w	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf58:	2bc0      	cmp	r3, #192	; 0xc0
 800bf5a:	f000 8088 	beq.w	800c06e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bf5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf60:	2bc0      	cmp	r3, #192	; 0xc0
 800bf62:	f200 8088 	bhi.w	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf68:	2b80      	cmp	r3, #128	; 0x80
 800bf6a:	d032      	beq.n	800bfd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bf6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf6e:	2b80      	cmp	r3, #128	; 0x80
 800bf70:	f200 8081 	bhi.w	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d003      	beq.n	800bf82 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7c:	2b40      	cmp	r3, #64	; 0x40
 800bf7e:	d014      	beq.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bf80:	e079      	b.n	800c076 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf82:	4b3f      	ldr	r3, [pc, #252]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf8a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf8e:	d108      	bne.n	800bfa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf94:	4618      	mov	r0, r3
 800bf96:	f000 ff67 	bl	800ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf9e:	f000 bc9c 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfa2:	2300      	movs	r3, #0
 800bfa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfa6:	f000 bc98 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bfaa:	4b35      	ldr	r3, [pc, #212]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bfb2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bfb6:	d108      	bne.n	800bfca <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfb8:	f107 0318 	add.w	r3, r7, #24
 800bfbc:	4618      	mov	r0, r3
 800bfbe:	f000 fcab 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfc6:	f000 bc88 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfca:	2300      	movs	r3, #0
 800bfcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfce:	f000 bc84 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bfd2:	4b2b      	ldr	r3, [pc, #172]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bfda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bfde:	d108      	bne.n	800bff2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bfe0:	f107 030c 	add.w	r3, r7, #12
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 fdeb 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfee:	f000 bc74 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bff2:	2300      	movs	r3, #0
 800bff4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bff6:	f000 bc70 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bffa:	4b21      	ldr	r3, [pc, #132]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bffe:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c002:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c004:	4b1e      	ldr	r3, [pc, #120]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f003 0304 	and.w	r3, r3, #4
 800c00c:	2b04      	cmp	r3, #4
 800c00e:	d10c      	bne.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c012:	2b00      	cmp	r3, #0
 800c014:	d109      	bne.n	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c016:	4b1a      	ldr	r3, [pc, #104]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	08db      	lsrs	r3, r3, #3
 800c01c:	f003 0303 	and.w	r3, r3, #3
 800c020:	4a18      	ldr	r2, [pc, #96]	; (800c084 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c022:	fa22 f303 	lsr.w	r3, r2, r3
 800c026:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c028:	e01f      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c02a:	4b15      	ldr	r3, [pc, #84]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c036:	d106      	bne.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c03e:	d102      	bne.n	800c046 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c040:	4b11      	ldr	r3, [pc, #68]	; (800c088 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c042:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c044:	e011      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c046:	4b0e      	ldr	r3, [pc, #56]	; (800c080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c04e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c052:	d106      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c056:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c05a:	d102      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c05c:	4b0b      	ldr	r3, [pc, #44]	; (800c08c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c05e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c060:	e003      	b.n	800c06a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c062:	2300      	movs	r3, #0
 800c064:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c066:	f000 bc38 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c06a:	f000 bc36 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c06e:	4b08      	ldr	r3, [pc, #32]	; (800c090 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c070:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c072:	f000 bc32 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c076:	2300      	movs	r3, #0
 800c078:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c07a:	f000 bc2e 	b.w	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c07e:	bf00      	nop
 800c080:	58024400 	.word	0x58024400
 800c084:	03d09000 	.word	0x03d09000
 800c088:	003d0900 	.word	0x003d0900
 800c08c:	017d7840 	.word	0x017d7840
 800c090:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c094:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c098:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c09c:	430b      	orrs	r3, r1
 800c09e:	f040 809c 	bne.w	800c1da <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c0a2:	4b9e      	ldr	r3, [pc, #632]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0a6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c0aa:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c0ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c0b2:	d054      	beq.n	800c15e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c0b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c0ba:	f200 808b 	bhi.w	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c0be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c0c4:	f000 8083 	beq.w	800c1ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c0c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ca:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c0ce:	f200 8081 	bhi.w	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c0d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0d8:	d02f      	beq.n	800c13a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c0e0:	d878      	bhi.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d004      	beq.n	800c0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0ee:	d012      	beq.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c0f0:	e070      	b.n	800c1d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0f2:	4b8a      	ldr	r3, [pc, #552]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0fe:	d107      	bne.n	800c110 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c100:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c104:	4618      	mov	r0, r3
 800c106:	f000 feaf 	bl	800ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c10a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c10c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c10e:	e3e4      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c110:	2300      	movs	r3, #0
 800c112:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c114:	e3e1      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c116:	4b81      	ldr	r3, [pc, #516]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c11e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c122:	d107      	bne.n	800c134 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c124:	f107 0318 	add.w	r3, r7, #24
 800c128:	4618      	mov	r0, r3
 800c12a:	f000 fbf5 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c12e:	69bb      	ldr	r3, [r7, #24]
 800c130:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c132:	e3d2      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c134:	2300      	movs	r3, #0
 800c136:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c138:	e3cf      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c13a:	4b78      	ldr	r3, [pc, #480]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c146:	d107      	bne.n	800c158 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c148:	f107 030c 	add.w	r3, r7, #12
 800c14c:	4618      	mov	r0, r3
 800c14e:	f000 fd37 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c156:	e3c0      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c158:	2300      	movs	r3, #0
 800c15a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c15c:	e3bd      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c15e:	4b6f      	ldr	r3, [pc, #444]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c162:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c166:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c168:	4b6c      	ldr	r3, [pc, #432]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	f003 0304 	and.w	r3, r3, #4
 800c170:	2b04      	cmp	r3, #4
 800c172:	d10c      	bne.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c176:	2b00      	cmp	r3, #0
 800c178:	d109      	bne.n	800c18e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c17a:	4b68      	ldr	r3, [pc, #416]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	08db      	lsrs	r3, r3, #3
 800c180:	f003 0303 	and.w	r3, r3, #3
 800c184:	4a66      	ldr	r2, [pc, #408]	; (800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c186:	fa22 f303 	lsr.w	r3, r2, r3
 800c18a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c18c:	e01e      	b.n	800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c18e:	4b63      	ldr	r3, [pc, #396]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c19a:	d106      	bne.n	800c1aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c1a2:	d102      	bne.n	800c1aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c1a4:	4b5f      	ldr	r3, [pc, #380]	; (800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c1a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1a8:	e010      	b.n	800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c1aa:	4b5c      	ldr	r3, [pc, #368]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1b2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c1b6:	d106      	bne.n	800c1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c1b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1be:	d102      	bne.n	800c1c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c1c0:	4b59      	ldr	r3, [pc, #356]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c1c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1c4:	e002      	b.n	800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c1c6:	2300      	movs	r3, #0
 800c1c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c1ca:	e386      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c1cc:	e385      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c1ce:	4b57      	ldr	r3, [pc, #348]	; (800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c1d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d2:	e382      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d8:	e37f      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c1da:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c1de:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c1e2:	430b      	orrs	r3, r1
 800c1e4:	f040 80a7 	bne.w	800c336 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c1e8:	4b4c      	ldr	r3, [pc, #304]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1ec:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c1f0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c1f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1f8:	d055      	beq.n	800c2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c1fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c200:	f200 8096 	bhi.w	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c206:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c20a:	f000 8084 	beq.w	800c316 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c210:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c214:	f200 808c 	bhi.w	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c21a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c21e:	d030      	beq.n	800c282 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c222:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c226:	f200 8083 	bhi.w	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c22a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d004      	beq.n	800c23a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c232:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c236:	d012      	beq.n	800c25e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c238:	e07a      	b.n	800c330 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c23a:	4b38      	ldr	r3, [pc, #224]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c23c:	681b      	ldr	r3, [r3, #0]
 800c23e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c242:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c246:	d107      	bne.n	800c258 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c24c:	4618      	mov	r0, r3
 800c24e:	f000 fe0b 	bl	800ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c254:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c256:	e340      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c258:	2300      	movs	r3, #0
 800c25a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c25c:	e33d      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c25e:	4b2f      	ldr	r3, [pc, #188]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c266:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c26a:	d107      	bne.n	800c27c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c26c:	f107 0318 	add.w	r3, r7, #24
 800c270:	4618      	mov	r0, r3
 800c272:	f000 fb51 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c276:	69bb      	ldr	r3, [r7, #24]
 800c278:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c27a:	e32e      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c280:	e32b      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c282:	4b26      	ldr	r3, [pc, #152]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c28a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c28e:	d107      	bne.n	800c2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c290:	f107 030c 	add.w	r3, r7, #12
 800c294:	4618      	mov	r0, r3
 800c296:	f000 fc93 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c29e:	e31c      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2a4:	e319      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c2a6:	4b1d      	ldr	r3, [pc, #116]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c2ae:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c2b0:	4b1a      	ldr	r3, [pc, #104]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f003 0304 	and.w	r3, r3, #4
 800c2b8:	2b04      	cmp	r3, #4
 800c2ba:	d10c      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d109      	bne.n	800c2d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c2c2:	4b16      	ldr	r3, [pc, #88]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	08db      	lsrs	r3, r3, #3
 800c2c8:	f003 0303 	and.w	r3, r3, #3
 800c2cc:	4a14      	ldr	r2, [pc, #80]	; (800c320 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c2ce:	fa22 f303 	lsr.w	r3, r2, r3
 800c2d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2d4:	e01e      	b.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c2d6:	4b11      	ldr	r3, [pc, #68]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c2e2:	d106      	bne.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c2e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2ea:	d102      	bne.n	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2ec:	4b0d      	ldr	r3, [pc, #52]	; (800c324 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2f0:	e010      	b.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2f2:	4b0a      	ldr	r3, [pc, #40]	; (800c31c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2fe:	d106      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c300:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c302:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c306:	d102      	bne.n	800c30e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c308:	4b07      	ldr	r3, [pc, #28]	; (800c328 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c30a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c30c:	e002      	b.n	800c314 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c30e:	2300      	movs	r3, #0
 800c310:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c312:	e2e2      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c314:	e2e1      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c316:	4b05      	ldr	r3, [pc, #20]	; (800c32c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c318:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c31a:	e2de      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c31c:	58024400 	.word	0x58024400
 800c320:	03d09000 	.word	0x03d09000
 800c324:	003d0900 	.word	0x003d0900
 800c328:	017d7840 	.word	0x017d7840
 800c32c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c334:	e2d1      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c336:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c33a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c33e:	430b      	orrs	r3, r1
 800c340:	f040 809c 	bne.w	800c47c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c344:	4b93      	ldr	r3, [pc, #588]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c348:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c34c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c34e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c354:	d054      	beq.n	800c400 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c358:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c35c:	f200 808b 	bhi.w	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c360:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c362:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c366:	f000 8083 	beq.w	800c470 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c36a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c36c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c370:	f200 8081 	bhi.w	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c37a:	d02f      	beq.n	800c3dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c37e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c382:	d878      	bhi.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c386:	2b00      	cmp	r3, #0
 800c388:	d004      	beq.n	800c394 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c390:	d012      	beq.n	800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c392:	e070      	b.n	800c476 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c394:	4b7f      	ldr	r3, [pc, #508]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c39c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3a0:	d107      	bne.n	800c3b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f000 fd5e 	bl	800ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c3ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3b0:	e293      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3b2:	2300      	movs	r3, #0
 800c3b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3b6:	e290      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c3b8:	4b76      	ldr	r3, [pc, #472]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c3c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c3c4:	d107      	bne.n	800c3d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c3c6:	f107 0318 	add.w	r3, r7, #24
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	f000 faa4 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c3d0:	69bb      	ldr	r3, [r7, #24]
 800c3d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3d4:	e281      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3da:	e27e      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c3dc:	4b6d      	ldr	r3, [pc, #436]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3e8:	d107      	bne.n	800c3fa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3ea:	f107 030c 	add.w	r3, r7, #12
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	f000 fbe6 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3f8:	e26f      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3fe:	e26c      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c400:	4b64      	ldr	r3, [pc, #400]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c402:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c404:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c408:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c40a:	4b62      	ldr	r3, [pc, #392]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f003 0304 	and.w	r3, r3, #4
 800c412:	2b04      	cmp	r3, #4
 800c414:	d10c      	bne.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d109      	bne.n	800c430 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c41c:	4b5d      	ldr	r3, [pc, #372]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	08db      	lsrs	r3, r3, #3
 800c422:	f003 0303 	and.w	r3, r3, #3
 800c426:	4a5c      	ldr	r2, [pc, #368]	; (800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c428:	fa22 f303 	lsr.w	r3, r2, r3
 800c42c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c42e:	e01e      	b.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c430:	4b58      	ldr	r3, [pc, #352]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c438:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c43c:	d106      	bne.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c43e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c440:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c444:	d102      	bne.n	800c44c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c446:	4b55      	ldr	r3, [pc, #340]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c448:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c44a:	e010      	b.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c44c:	4b51      	ldr	r3, [pc, #324]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c458:	d106      	bne.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c45a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c45c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c460:	d102      	bne.n	800c468 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c462:	4b4f      	ldr	r3, [pc, #316]	; (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c464:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c466:	e002      	b.n	800c46e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c468:	2300      	movs	r3, #0
 800c46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c46c:	e235      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c46e:	e234      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c470:	4b4c      	ldr	r3, [pc, #304]	; (800c5a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c474:	e231      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c476:	2300      	movs	r3, #0
 800c478:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c47a:	e22e      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c47c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c480:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c484:	430b      	orrs	r3, r1
 800c486:	f040 808f 	bne.w	800c5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c48a:	4b42      	ldr	r3, [pc, #264]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c48c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c48e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c492:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c494:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c496:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c49a:	d06b      	beq.n	800c574 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c49e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c4a2:	d874      	bhi.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c4a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c4aa:	d056      	beq.n	800c55a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c4ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c4b2:	d86c      	bhi.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4b6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c4ba:	d03b      	beq.n	800c534 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c4bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4be:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c4c2:	d864      	bhi.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c4c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4ca:	d021      	beq.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c4cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4d2:	d85c      	bhi.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d004      	beq.n	800c4e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c4da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c4e0:	d004      	beq.n	800c4ec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c4e2:	e054      	b.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c4e4:	f7fe fa0a 	bl	800a8fc <HAL_RCC_GetPCLK1Freq>
 800c4e8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4ea:	e1f6      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4ec:	4b29      	ldr	r3, [pc, #164]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4f8:	d107      	bne.n	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4fa:	f107 0318 	add.w	r3, r7, #24
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 fa0a 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c504:	69fb      	ldr	r3, [r7, #28]
 800c506:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c508:	e1e7      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c50a:	2300      	movs	r3, #0
 800c50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c50e:	e1e4      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c510:	4b20      	ldr	r3, [pc, #128]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c518:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c51c:	d107      	bne.n	800c52e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c51e:	f107 030c 	add.w	r3, r7, #12
 800c522:	4618      	mov	r0, r3
 800c524:	f000 fb4c 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c528:	693b      	ldr	r3, [r7, #16]
 800c52a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c52c:	e1d5      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c52e:	2300      	movs	r3, #0
 800c530:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c532:	e1d2      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c534:	4b17      	ldr	r3, [pc, #92]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f003 0304 	and.w	r3, r3, #4
 800c53c:	2b04      	cmp	r3, #4
 800c53e:	d109      	bne.n	800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c540:	4b14      	ldr	r3, [pc, #80]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	08db      	lsrs	r3, r3, #3
 800c546:	f003 0303 	and.w	r3, r3, #3
 800c54a:	4a13      	ldr	r2, [pc, #76]	; (800c598 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c54c:	fa22 f303 	lsr.w	r3, r2, r3
 800c550:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c552:	e1c2      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c554:	2300      	movs	r3, #0
 800c556:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c558:	e1bf      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c55a:	4b0e      	ldr	r3, [pc, #56]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c562:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c566:	d102      	bne.n	800c56e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c568:	4b0c      	ldr	r3, [pc, #48]	; (800c59c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c56a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c56c:	e1b5      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c572:	e1b2      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c574:	4b07      	ldr	r3, [pc, #28]	; (800c594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c57c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c580:	d102      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c582:	4b07      	ldr	r3, [pc, #28]	; (800c5a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c586:	e1a8      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c58c:	e1a5      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c58e:	2300      	movs	r3, #0
 800c590:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c592:	e1a2      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c594:	58024400 	.word	0x58024400
 800c598:	03d09000 	.word	0x03d09000
 800c59c:	003d0900 	.word	0x003d0900
 800c5a0:	017d7840 	.word	0x017d7840
 800c5a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c5a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c5ac:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c5b0:	430b      	orrs	r3, r1
 800c5b2:	d173      	bne.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c5b4:	4b9c      	ldr	r3, [pc, #624]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c5b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c5bc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c5be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5c4:	d02f      	beq.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c5cc:	d863      	bhi.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d004      	beq.n	800c5de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c5da:	d012      	beq.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c5dc:	e05b      	b.n	800c696 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c5de:	4b92      	ldr	r3, [pc, #584]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5ea:	d107      	bne.n	800c5fc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5ec:	f107 0318 	add.w	r3, r7, #24
 800c5f0:	4618      	mov	r0, r3
 800c5f2:	f000 f991 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5f6:	69bb      	ldr	r3, [r7, #24]
 800c5f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5fa:	e16e      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c600:	e16b      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c602:	4b89      	ldr	r3, [pc, #548]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c60a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c60e:	d107      	bne.n	800c620 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c610:	f107 030c 	add.w	r3, r7, #12
 800c614:	4618      	mov	r0, r3
 800c616:	f000 fad3 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c61e:	e15c      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c620:	2300      	movs	r3, #0
 800c622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c624:	e159      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c626:	4b80      	ldr	r3, [pc, #512]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c628:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c62a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c62e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c630:	4b7d      	ldr	r3, [pc, #500]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	f003 0304 	and.w	r3, r3, #4
 800c638:	2b04      	cmp	r3, #4
 800c63a:	d10c      	bne.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d109      	bne.n	800c656 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c642:	4b79      	ldr	r3, [pc, #484]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	08db      	lsrs	r3, r3, #3
 800c648:	f003 0303 	and.w	r3, r3, #3
 800c64c:	4a77      	ldr	r2, [pc, #476]	; (800c82c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c64e:	fa22 f303 	lsr.w	r3, r2, r3
 800c652:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c654:	e01e      	b.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c656:	4b74      	ldr	r3, [pc, #464]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c65e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c662:	d106      	bne.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c66a:	d102      	bne.n	800c672 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c66c:	4b70      	ldr	r3, [pc, #448]	; (800c830 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c66e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c670:	e010      	b.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c672:	4b6d      	ldr	r3, [pc, #436]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c67a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c67e:	d106      	bne.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c682:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c686:	d102      	bne.n	800c68e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c688:	4b6a      	ldr	r3, [pc, #424]	; (800c834 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c68a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c68c:	e002      	b.n	800c694 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c68e:	2300      	movs	r3, #0
 800c690:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c692:	e122      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c694:	e121      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c696:	2300      	movs	r3, #0
 800c698:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c69a:	e11e      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c69c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6a0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c6a4:	430b      	orrs	r3, r1
 800c6a6:	d133      	bne.n	800c710 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c6a8:	4b5f      	ldr	r3, [pc, #380]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c6ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c6b0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d004      	beq.n	800c6c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c6b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c6be:	d012      	beq.n	800c6e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c6c0:	e023      	b.n	800c70a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6c2:	4b59      	ldr	r3, [pc, #356]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6ce:	d107      	bne.n	800c6e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	f000 fbc7 	bl	800ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6de:	e0fc      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6e0:	2300      	movs	r3, #0
 800c6e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e4:	e0f9      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6e6:	4b50      	ldr	r3, [pc, #320]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6f2:	d107      	bne.n	800c704 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f4:	f107 0318 	add.w	r3, r7, #24
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	f000 f90d 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c6fe:	6a3b      	ldr	r3, [r7, #32]
 800c700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c702:	e0ea      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c704:	2300      	movs	r3, #0
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c708:	e0e7      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c70a:	2300      	movs	r3, #0
 800c70c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70e:	e0e4      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c710:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c714:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c718:	430b      	orrs	r3, r1
 800c71a:	f040 808d 	bne.w	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c71e:	4b42      	ldr	r3, [pc, #264]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c722:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c726:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c72e:	d06b      	beq.n	800c808 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c732:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c736:	d874      	bhi.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c73a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c73e:	d056      	beq.n	800c7ee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c746:	d86c      	bhi.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c74e:	d03b      	beq.n	800c7c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c752:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c756:	d864      	bhi.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c75a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c75e:	d021      	beq.n	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c766:	d85c      	bhi.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d004      	beq.n	800c778 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c76e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c774:	d004      	beq.n	800c780 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c776:	e054      	b.n	800c822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c778:	f000 f8b8 	bl	800c8ec <HAL_RCCEx_GetD3PCLK1Freq>
 800c77c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c77e:	e0ac      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c780:	4b29      	ldr	r3, [pc, #164]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c78c:	d107      	bne.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c78e:	f107 0318 	add.w	r3, r7, #24
 800c792:	4618      	mov	r0, r3
 800c794:	f000 f8c0 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c798:	69fb      	ldr	r3, [r7, #28]
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c79c:	e09d      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c79e:	2300      	movs	r3, #0
 800c7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a2:	e09a      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c7a4:	4b20      	ldr	r3, [pc, #128]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c7ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7b0:	d107      	bne.n	800c7c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c7b2:	f107 030c 	add.w	r3, r7, #12
 800c7b6:	4618      	mov	r0, r3
 800c7b8:	f000 fa02 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c7bc:	693b      	ldr	r3, [r7, #16]
 800c7be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7c0:	e08b      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c6:	e088      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c7c8:	4b17      	ldr	r3, [pc, #92]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	f003 0304 	and.w	r3, r3, #4
 800c7d0:	2b04      	cmp	r3, #4
 800c7d2:	d109      	bne.n	800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c7d4:	4b14      	ldr	r3, [pc, #80]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	08db      	lsrs	r3, r3, #3
 800c7da:	f003 0303 	and.w	r3, r3, #3
 800c7de:	4a13      	ldr	r2, [pc, #76]	; (800c82c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c7e0:	fa22 f303 	lsr.w	r3, r2, r3
 800c7e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7e6:	e078      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7ec:	e075      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c7ee:	4b0e      	ldr	r3, [pc, #56]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7fa:	d102      	bne.n	800c802 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c7fc:	4b0c      	ldr	r3, [pc, #48]	; (800c830 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c800:	e06b      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c806:	e068      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c808:	4b07      	ldr	r3, [pc, #28]	; (800c828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c810:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c814:	d102      	bne.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c816:	4b07      	ldr	r3, [pc, #28]	; (800c834 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c818:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c81a:	e05e      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c81c:	2300      	movs	r3, #0
 800c81e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c820:	e05b      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c822:	2300      	movs	r3, #0
 800c824:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c826:	e058      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c828:	58024400 	.word	0x58024400
 800c82c:	03d09000 	.word	0x03d09000
 800c830:	003d0900 	.word	0x003d0900
 800c834:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c83c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c840:	430b      	orrs	r3, r1
 800c842:	d148      	bne.n	800c8d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c844:	4b27      	ldr	r3, [pc, #156]	; (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c846:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c84c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c84e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c850:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c854:	d02a      	beq.n	800c8ac <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c856:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c858:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c85c:	d838      	bhi.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c85e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c860:	2b00      	cmp	r3, #0
 800c862:	d004      	beq.n	800c86e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c866:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c86a:	d00d      	beq.n	800c888 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c86c:	e030      	b.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c86e:	4b1d      	ldr	r3, [pc, #116]	; (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c876:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c87a:	d102      	bne.n	800c882 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c87c:	4b1a      	ldr	r3, [pc, #104]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c87e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c880:	e02b      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c882:	2300      	movs	r3, #0
 800c884:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c886:	e028      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c888:	4b16      	ldr	r3, [pc, #88]	; (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c890:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c894:	d107      	bne.n	800c8a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c896:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c89a:	4618      	mov	r0, r3
 800c89c:	f000 fae4 	bl	800ce68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8a4:	e019      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8aa:	e016      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c8ac:	4b0d      	ldr	r3, [pc, #52]	; (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c8b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c8b8:	d107      	bne.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c8ba:	f107 0318 	add.w	r3, r7, #24
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f000 f82a 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8c8:	e007      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8ce:	e004      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8d0:	2300      	movs	r3, #0
 800c8d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d4:	e001      	b.n	800c8da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3740      	adds	r7, #64	; 0x40
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}
 800c8e4:	58024400 	.word	0x58024400
 800c8e8:	017d7840 	.word	0x017d7840

0800c8ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c8ec:	b580      	push	{r7, lr}
 800c8ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c8f0:	f7fd ffd4 	bl	800a89c <HAL_RCC_GetHCLKFreq>
 800c8f4:	4602      	mov	r2, r0
 800c8f6:	4b06      	ldr	r3, [pc, #24]	; (800c910 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c8f8:	6a1b      	ldr	r3, [r3, #32]
 800c8fa:	091b      	lsrs	r3, r3, #4
 800c8fc:	f003 0307 	and.w	r3, r3, #7
 800c900:	4904      	ldr	r1, [pc, #16]	; (800c914 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c902:	5ccb      	ldrb	r3, [r1, r3]
 800c904:	f003 031f 	and.w	r3, r3, #31
 800c908:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c90c:	4618      	mov	r0, r3
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	58024400 	.word	0x58024400
 800c914:	08016fc4 	.word	0x08016fc4

0800c918 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c918:	b480      	push	{r7}
 800c91a:	b089      	sub	sp, #36	; 0x24
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c920:	4ba1      	ldr	r3, [pc, #644]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c924:	f003 0303 	and.w	r3, r3, #3
 800c928:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c92a:	4b9f      	ldr	r3, [pc, #636]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c92c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c92e:	0b1b      	lsrs	r3, r3, #12
 800c930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c934:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c936:	4b9c      	ldr	r3, [pc, #624]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c93a:	091b      	lsrs	r3, r3, #4
 800c93c:	f003 0301 	and.w	r3, r3, #1
 800c940:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c942:	4b99      	ldr	r3, [pc, #612]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c946:	08db      	lsrs	r3, r3, #3
 800c948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c94c:	693a      	ldr	r2, [r7, #16]
 800c94e:	fb02 f303 	mul.w	r3, r2, r3
 800c952:	ee07 3a90 	vmov	s15, r3
 800c956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c95a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c95e:	697b      	ldr	r3, [r7, #20]
 800c960:	2b00      	cmp	r3, #0
 800c962:	f000 8111 	beq.w	800cb88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c966:	69bb      	ldr	r3, [r7, #24]
 800c968:	2b02      	cmp	r3, #2
 800c96a:	f000 8083 	beq.w	800ca74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c96e:	69bb      	ldr	r3, [r7, #24]
 800c970:	2b02      	cmp	r3, #2
 800c972:	f200 80a1 	bhi.w	800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c976:	69bb      	ldr	r3, [r7, #24]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d003      	beq.n	800c984 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c97c:	69bb      	ldr	r3, [r7, #24]
 800c97e:	2b01      	cmp	r3, #1
 800c980:	d056      	beq.n	800ca30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c982:	e099      	b.n	800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c984:	4b88      	ldr	r3, [pc, #544]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f003 0320 	and.w	r3, r3, #32
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d02d      	beq.n	800c9ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c990:	4b85      	ldr	r3, [pc, #532]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	08db      	lsrs	r3, r3, #3
 800c996:	f003 0303 	and.w	r3, r3, #3
 800c99a:	4a84      	ldr	r2, [pc, #528]	; (800cbac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c99c:	fa22 f303 	lsr.w	r3, r2, r3
 800c9a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	ee07 3a90 	vmov	s15, r3
 800c9a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	ee07 3a90 	vmov	s15, r3
 800c9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ba:	4b7b      	ldr	r3, [pc, #492]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9ea:	e087      	b.n	800cafc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cbb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9fe:	4b6a      	ldr	r3, [pc, #424]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca06:	ee07 3a90 	vmov	s15, r3
 800ca0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca12:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca2e:	e065      	b.n	800cafc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca42:	4b59      	ldr	r3, [pc, #356]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca56:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca72:	e043      	b.n	800cafc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	ee07 3a90 	vmov	s15, r3
 800ca7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca7e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cbbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ca82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca86:	4b48      	ldr	r3, [pc, #288]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca8e:	ee07 3a90 	vmov	s15, r3
 800ca92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca9a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cab6:	e021      	b.n	800cafc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	ee07 3a90 	vmov	s15, r3
 800cabe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cbb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800caca:	4b37      	ldr	r3, [pc, #220]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cacc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad2:	ee07 3a90 	vmov	s15, r3
 800cad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cada:	ed97 6a03 	vldr	s12, [r7, #12]
 800cade:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cbb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800caf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cafa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cafc:	4b2a      	ldr	r3, [pc, #168]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cafe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb00:	0a5b      	lsrs	r3, r3, #9
 800cb02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb06:	ee07 3a90 	vmov	s15, r3
 800cb0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb12:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb16:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb22:	ee17 2a90 	vmov	r2, s15
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cb2a:	4b1f      	ldr	r3, [pc, #124]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb2e:	0c1b      	lsrs	r3, r3, #16
 800cb30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb34:	ee07 3a90 	vmov	s15, r3
 800cb38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb3c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb40:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb44:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb50:	ee17 2a90 	vmov	r2, s15
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cb58:	4b13      	ldr	r3, [pc, #76]	; (800cba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb5c:	0e1b      	lsrs	r3, r3, #24
 800cb5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb62:	ee07 3a90 	vmov	s15, r3
 800cb66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb6a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb72:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb7e:	ee17 2a90 	vmov	r2, s15
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb86:	e008      	b.n	800cb9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	2200      	movs	r2, #0
 800cb8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	2200      	movs	r2, #0
 800cb92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	609a      	str	r2, [r3, #8]
}
 800cb9a:	bf00      	nop
 800cb9c:	3724      	adds	r7, #36	; 0x24
 800cb9e:	46bd      	mov	sp, r7
 800cba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba4:	4770      	bx	lr
 800cba6:	bf00      	nop
 800cba8:	58024400 	.word	0x58024400
 800cbac:	03d09000 	.word	0x03d09000
 800cbb0:	46000000 	.word	0x46000000
 800cbb4:	4c742400 	.word	0x4c742400
 800cbb8:	4a742400 	.word	0x4a742400
 800cbbc:	4bbebc20 	.word	0x4bbebc20

0800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cbc0:	b480      	push	{r7}
 800cbc2:	b089      	sub	sp, #36	; 0x24
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cbc8:	4ba1      	ldr	r3, [pc, #644]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbcc:	f003 0303 	and.w	r3, r3, #3
 800cbd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cbd2:	4b9f      	ldr	r3, [pc, #636]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd6:	0d1b      	lsrs	r3, r3, #20
 800cbd8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cbdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cbde:	4b9c      	ldr	r3, [pc, #624]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbe2:	0a1b      	lsrs	r3, r3, #8
 800cbe4:	f003 0301 	and.w	r3, r3, #1
 800cbe8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cbea:	4b99      	ldr	r3, [pc, #612]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbee:	08db      	lsrs	r3, r3, #3
 800cbf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbf4:	693a      	ldr	r2, [r7, #16]
 800cbf6:	fb02 f303 	mul.w	r3, r2, r3
 800cbfa:	ee07 3a90 	vmov	s15, r3
 800cbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	f000 8111 	beq.w	800ce30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	2b02      	cmp	r3, #2
 800cc12:	f000 8083 	beq.w	800cd1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cc16:	69bb      	ldr	r3, [r7, #24]
 800cc18:	2b02      	cmp	r3, #2
 800cc1a:	f200 80a1 	bhi.w	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d003      	beq.n	800cc2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cc24:	69bb      	ldr	r3, [r7, #24]
 800cc26:	2b01      	cmp	r3, #1
 800cc28:	d056      	beq.n	800ccd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cc2a:	e099      	b.n	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cc2c:	4b88      	ldr	r3, [pc, #544]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	f003 0320 	and.w	r3, r3, #32
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d02d      	beq.n	800cc94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cc38:	4b85      	ldr	r3, [pc, #532]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	08db      	lsrs	r3, r3, #3
 800cc3e:	f003 0303 	and.w	r3, r3, #3
 800cc42:	4a84      	ldr	r2, [pc, #528]	; (800ce54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc44:	fa22 f303 	lsr.w	r3, r2, r3
 800cc48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc4a:	68bb      	ldr	r3, [r7, #8]
 800cc4c:	ee07 3a90 	vmov	s15, r3
 800cc50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc54:	697b      	ldr	r3, [r7, #20]
 800cc56:	ee07 3a90 	vmov	s15, r3
 800cc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc62:	4b7b      	ldr	r3, [pc, #492]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc6a:	ee07 3a90 	vmov	s15, r3
 800cc6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc76:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc92:	e087      	b.n	800cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	ee07 3a90 	vmov	s15, r3
 800cc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cca6:	4b6a      	ldr	r3, [pc, #424]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccae:	ee07 3a90 	vmov	s15, r3
 800ccb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccba:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccd6:	e065      	b.n	800cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccea:	4b59      	ldr	r3, [pc, #356]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccfe:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd1a:	e043      	b.n	800cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd26:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cd2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd2e:	4b48      	ldr	r3, [pc, #288]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd36:	ee07 3a90 	vmov	s15, r3
 800cd3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd42:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd5e:	e021      	b.n	800cda4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd72:	4b37      	ldr	r3, [pc, #220]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd7a:	ee07 3a90 	vmov	s15, r3
 800cd7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd82:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd86:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cda2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cda4:	4b2a      	ldr	r3, [pc, #168]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cda6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cda8:	0a5b      	lsrs	r3, r3, #9
 800cdaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdae:	ee07 3a90 	vmov	s15, r3
 800cdb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdb6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdbe:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdca:	ee17 2a90 	vmov	r2, s15
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cdd2:	4b1f      	ldr	r3, [pc, #124]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdd6:	0c1b      	lsrs	r3, r3, #16
 800cdd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cddc:	ee07 3a90 	vmov	s15, r3
 800cde0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cde4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cde8:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdec:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdf8:	ee17 2a90 	vmov	r2, s15
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ce00:	4b13      	ldr	r3, [pc, #76]	; (800ce50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ce02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ce04:	0e1b      	lsrs	r3, r3, #24
 800ce06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce0a:	ee07 3a90 	vmov	s15, r3
 800ce0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce16:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce1a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce26:	ee17 2a90 	vmov	r2, s15
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ce2e:	e008      	b.n	800ce42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	2200      	movs	r2, #0
 800ce34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	2200      	movs	r2, #0
 800ce3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	609a      	str	r2, [r3, #8]
}
 800ce42:	bf00      	nop
 800ce44:	3724      	adds	r7, #36	; 0x24
 800ce46:	46bd      	mov	sp, r7
 800ce48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce4c:	4770      	bx	lr
 800ce4e:	bf00      	nop
 800ce50:	58024400 	.word	0x58024400
 800ce54:	03d09000 	.word	0x03d09000
 800ce58:	46000000 	.word	0x46000000
 800ce5c:	4c742400 	.word	0x4c742400
 800ce60:	4a742400 	.word	0x4a742400
 800ce64:	4bbebc20 	.word	0x4bbebc20

0800ce68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b089      	sub	sp, #36	; 0x24
 800ce6c:	af00      	add	r7, sp, #0
 800ce6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce70:	4ba0      	ldr	r3, [pc, #640]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce74:	f003 0303 	and.w	r3, r3, #3
 800ce78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ce7a:	4b9e      	ldr	r3, [pc, #632]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce7e:	091b      	lsrs	r3, r3, #4
 800ce80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ce86:	4b9b      	ldr	r3, [pc, #620]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	f003 0301 	and.w	r3, r3, #1
 800ce8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ce90:	4b98      	ldr	r3, [pc, #608]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce94:	08db      	lsrs	r3, r3, #3
 800ce96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce9a:	693a      	ldr	r2, [r7, #16]
 800ce9c:	fb02 f303 	mul.w	r3, r2, r3
 800cea0:	ee07 3a90 	vmov	s15, r3
 800cea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cea8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ceac:	697b      	ldr	r3, [r7, #20]
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	f000 8111 	beq.w	800d0d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	2b02      	cmp	r3, #2
 800ceb8:	f000 8083 	beq.w	800cfc2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	f200 80a1 	bhi.w	800d006 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800cec4:	69bb      	ldr	r3, [r7, #24]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d003      	beq.n	800ced2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ceca:	69bb      	ldr	r3, [r7, #24]
 800cecc:	2b01      	cmp	r3, #1
 800cece:	d056      	beq.n	800cf7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ced0:	e099      	b.n	800d006 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ced2:	4b88      	ldr	r3, [pc, #544]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	f003 0320 	and.w	r3, r3, #32
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d02d      	beq.n	800cf3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cede:	4b85      	ldr	r3, [pc, #532]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	08db      	lsrs	r3, r3, #3
 800cee4:	f003 0303 	and.w	r3, r3, #3
 800cee8:	4a83      	ldr	r2, [pc, #524]	; (800d0f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ceea:	fa22 f303 	lsr.w	r3, r2, r3
 800ceee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cef0:	68bb      	ldr	r3, [r7, #8]
 800cef2:	ee07 3a90 	vmov	s15, r3
 800cef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cefa:	697b      	ldr	r3, [r7, #20]
 800cefc:	ee07 3a90 	vmov	s15, r3
 800cf00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf08:	4b7a      	ldr	r3, [pc, #488]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf10:	ee07 3a90 	vmov	s15, r3
 800cf14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf18:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf1c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf34:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cf38:	e087      	b.n	800d04a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	ee07 3a90 	vmov	s15, r3
 800cf40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf44:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d100 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf4c:	4b69      	ldr	r3, [pc, #420]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf54:	ee07 3a90 	vmov	s15, r3
 800cf58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf60:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf7c:	e065      	b.n	800d04a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	ee07 3a90 	vmov	s15, r3
 800cf84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf88:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d104 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cf8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf90:	4b58      	ldr	r3, [pc, #352]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf98:	ee07 3a90 	vmov	s15, r3
 800cf9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfc0:	e043      	b.n	800d04a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	ee07 3a90 	vmov	s15, r3
 800cfc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfcc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d108 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cfd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd4:	4b47      	ldr	r3, [pc, #284]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfdc:	ee07 3a90 	vmov	s15, r3
 800cfe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfe8:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d000:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d004:	e021      	b.n	800d04a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	ee07 3a90 	vmov	s15, r3
 800d00c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d010:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d100 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d018:	4b36      	ldr	r3, [pc, #216]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d01a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d01c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d020:	ee07 3a90 	vmov	s15, r3
 800d024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d028:	ed97 6a03 	vldr	s12, [r7, #12]
 800d02c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d0fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d038:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d03c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d040:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d048:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d04a:	4b2a      	ldr	r3, [pc, #168]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d04c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d04e:	0a5b      	lsrs	r3, r3, #9
 800d050:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d054:	ee07 3a90 	vmov	s15, r3
 800d058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d05c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d060:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d064:	edd7 6a07 	vldr	s13, [r7, #28]
 800d068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d06c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d070:	ee17 2a90 	vmov	r2, s15
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d078:	4b1e      	ldr	r3, [pc, #120]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d07a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d07c:	0c1b      	lsrs	r3, r3, #16
 800d07e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d082:	ee07 3a90 	vmov	s15, r3
 800d086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d08a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d08e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d092:	edd7 6a07 	vldr	s13, [r7, #28]
 800d096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d09a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d09e:	ee17 2a90 	vmov	r2, s15
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d0a6:	4b13      	ldr	r3, [pc, #76]	; (800d0f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d0a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0aa:	0e1b      	lsrs	r3, r3, #24
 800d0ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0b0:	ee07 3a90 	vmov	s15, r3
 800d0b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0c0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0cc:	ee17 2a90 	vmov	r2, s15
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d0d4:	e008      	b.n	800d0e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	2200      	movs	r2, #0
 800d0da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	609a      	str	r2, [r3, #8]
}
 800d0e8:	bf00      	nop
 800d0ea:	3724      	adds	r7, #36	; 0x24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f2:	4770      	bx	lr
 800d0f4:	58024400 	.word	0x58024400
 800d0f8:	03d09000 	.word	0x03d09000
 800d0fc:	46000000 	.word	0x46000000
 800d100:	4c742400 	.word	0x4c742400
 800d104:	4a742400 	.word	0x4a742400
 800d108:	4bbebc20 	.word	0x4bbebc20

0800d10c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d10c:	b580      	push	{r7, lr}
 800d10e:	b084      	sub	sp, #16
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
 800d114:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d116:	2300      	movs	r3, #0
 800d118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d11a:	4b53      	ldr	r3, [pc, #332]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d11c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d11e:	f003 0303 	and.w	r3, r3, #3
 800d122:	2b03      	cmp	r3, #3
 800d124:	d101      	bne.n	800d12a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d126:	2301      	movs	r3, #1
 800d128:	e099      	b.n	800d25e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d12a:	4b4f      	ldr	r3, [pc, #316]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	4a4e      	ldr	r2, [pc, #312]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d130:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d136:	f7f6 fc9b 	bl	8003a70 <HAL_GetTick>
 800d13a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d13c:	e008      	b.n	800d150 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d13e:	f7f6 fc97 	bl	8003a70 <HAL_GetTick>
 800d142:	4602      	mov	r2, r0
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	1ad3      	subs	r3, r2, r3
 800d148:	2b02      	cmp	r3, #2
 800d14a:	d901      	bls.n	800d150 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d14c:	2303      	movs	r3, #3
 800d14e:	e086      	b.n	800d25e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d150:	4b45      	ldr	r3, [pc, #276]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d1f0      	bne.n	800d13e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d15c:	4b42      	ldr	r3, [pc, #264]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d15e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d160:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	031b      	lsls	r3, r3, #12
 800d16a:	493f      	ldr	r1, [pc, #252]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d16c:	4313      	orrs	r3, r2
 800d16e:	628b      	str	r3, [r1, #40]	; 0x28
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	3b01      	subs	r3, #1
 800d176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	689b      	ldr	r3, [r3, #8]
 800d17e:	3b01      	subs	r3, #1
 800d180:	025b      	lsls	r3, r3, #9
 800d182:	b29b      	uxth	r3, r3
 800d184:	431a      	orrs	r2, r3
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	3b01      	subs	r3, #1
 800d18c:	041b      	lsls	r3, r3, #16
 800d18e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d192:	431a      	orrs	r2, r3
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	691b      	ldr	r3, [r3, #16]
 800d198:	3b01      	subs	r3, #1
 800d19a:	061b      	lsls	r3, r3, #24
 800d19c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d1a0:	4931      	ldr	r1, [pc, #196]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d1a6:	4b30      	ldr	r3, [pc, #192]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	695b      	ldr	r3, [r3, #20]
 800d1b2:	492d      	ldr	r1, [pc, #180]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d1b8:	4b2b      	ldr	r3, [pc, #172]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1bc:	f023 0220 	bic.w	r2, r3, #32
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	699b      	ldr	r3, [r3, #24]
 800d1c4:	4928      	ldr	r1, [pc, #160]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1c6:	4313      	orrs	r3, r2
 800d1c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d1ca:	4b27      	ldr	r3, [pc, #156]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ce:	4a26      	ldr	r2, [pc, #152]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1d0:	f023 0310 	bic.w	r3, r3, #16
 800d1d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d1d6:	4b24      	ldr	r3, [pc, #144]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d1da:	4b24      	ldr	r3, [pc, #144]	; (800d26c <RCCEx_PLL2_Config+0x160>)
 800d1dc:	4013      	ands	r3, r2
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	69d2      	ldr	r2, [r2, #28]
 800d1e2:	00d2      	lsls	r2, r2, #3
 800d1e4:	4920      	ldr	r1, [pc, #128]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1e6:	4313      	orrs	r3, r2
 800d1e8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d1ea:	4b1f      	ldr	r3, [pc, #124]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ee:	4a1e      	ldr	r2, [pc, #120]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1f0:	f043 0310 	orr.w	r3, r3, #16
 800d1f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d106      	bne.n	800d20a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d1fc:	4b1a      	ldr	r3, [pc, #104]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d200:	4a19      	ldr	r2, [pc, #100]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d206:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d208:	e00f      	b.n	800d22a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b01      	cmp	r3, #1
 800d20e:	d106      	bne.n	800d21e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d210:	4b15      	ldr	r3, [pc, #84]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d214:	4a14      	ldr	r2, [pc, #80]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d216:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d21a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d21c:	e005      	b.n	800d22a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d21e:	4b12      	ldr	r3, [pc, #72]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d222:	4a11      	ldr	r2, [pc, #68]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d224:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d228:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d22a:	4b0f      	ldr	r3, [pc, #60]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d22c:	681b      	ldr	r3, [r3, #0]
 800d22e:	4a0e      	ldr	r2, [pc, #56]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d230:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d236:	f7f6 fc1b 	bl	8003a70 <HAL_GetTick>
 800d23a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d23c:	e008      	b.n	800d250 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d23e:	f7f6 fc17 	bl	8003a70 <HAL_GetTick>
 800d242:	4602      	mov	r2, r0
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	1ad3      	subs	r3, r2, r3
 800d248:	2b02      	cmp	r3, #2
 800d24a:	d901      	bls.n	800d250 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d24c:	2303      	movs	r3, #3
 800d24e:	e006      	b.n	800d25e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d250:	4b05      	ldr	r3, [pc, #20]	; (800d268 <RCCEx_PLL2_Config+0x15c>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d0f0      	beq.n	800d23e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d25c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	58024400 	.word	0x58024400
 800d26c:	ffff0007 	.word	0xffff0007

0800d270 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b084      	sub	sp, #16
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
 800d278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d27a:	2300      	movs	r3, #0
 800d27c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d27e:	4b53      	ldr	r3, [pc, #332]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d282:	f003 0303 	and.w	r3, r3, #3
 800d286:	2b03      	cmp	r3, #3
 800d288:	d101      	bne.n	800d28e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d28a:	2301      	movs	r3, #1
 800d28c:	e099      	b.n	800d3c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d28e:	4b4f      	ldr	r3, [pc, #316]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a4e      	ldr	r2, [pc, #312]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d294:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d29a:	f7f6 fbe9 	bl	8003a70 <HAL_GetTick>
 800d29e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2a0:	e008      	b.n	800d2b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d2a2:	f7f6 fbe5 	bl	8003a70 <HAL_GetTick>
 800d2a6:	4602      	mov	r2, r0
 800d2a8:	68bb      	ldr	r3, [r7, #8]
 800d2aa:	1ad3      	subs	r3, r2, r3
 800d2ac:	2b02      	cmp	r3, #2
 800d2ae:	d901      	bls.n	800d2b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d2b0:	2303      	movs	r3, #3
 800d2b2:	e086      	b.n	800d3c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d2b4:	4b45      	ldr	r3, [pc, #276]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d2b6:	681b      	ldr	r3, [r3, #0]
 800d2b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d1f0      	bne.n	800d2a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d2c0:	4b42      	ldr	r3, [pc, #264]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d2c4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	051b      	lsls	r3, r3, #20
 800d2ce:	493f      	ldr	r1, [pc, #252]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d2d0:	4313      	orrs	r3, r2
 800d2d2:	628b      	str	r3, [r1, #40]	; 0x28
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	685b      	ldr	r3, [r3, #4]
 800d2d8:	3b01      	subs	r3, #1
 800d2da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	689b      	ldr	r3, [r3, #8]
 800d2e2:	3b01      	subs	r3, #1
 800d2e4:	025b      	lsls	r3, r3, #9
 800d2e6:	b29b      	uxth	r3, r3
 800d2e8:	431a      	orrs	r2, r3
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	68db      	ldr	r3, [r3, #12]
 800d2ee:	3b01      	subs	r3, #1
 800d2f0:	041b      	lsls	r3, r3, #16
 800d2f2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d2f6:	431a      	orrs	r2, r3
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	691b      	ldr	r3, [r3, #16]
 800d2fc:	3b01      	subs	r3, #1
 800d2fe:	061b      	lsls	r3, r3, #24
 800d300:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d304:	4931      	ldr	r1, [pc, #196]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d306:	4313      	orrs	r3, r2
 800d308:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d30a:	4b30      	ldr	r3, [pc, #192]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	695b      	ldr	r3, [r3, #20]
 800d316:	492d      	ldr	r1, [pc, #180]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d318:	4313      	orrs	r3, r2
 800d31a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d31c:	4b2b      	ldr	r3, [pc, #172]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d320:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	699b      	ldr	r3, [r3, #24]
 800d328:	4928      	ldr	r1, [pc, #160]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d32a:	4313      	orrs	r3, r2
 800d32c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d32e:	4b27      	ldr	r3, [pc, #156]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d332:	4a26      	ldr	r2, [pc, #152]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d334:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d338:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d33a:	4b24      	ldr	r3, [pc, #144]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d33c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d33e:	4b24      	ldr	r3, [pc, #144]	; (800d3d0 <RCCEx_PLL3_Config+0x160>)
 800d340:	4013      	ands	r3, r2
 800d342:	687a      	ldr	r2, [r7, #4]
 800d344:	69d2      	ldr	r2, [r2, #28]
 800d346:	00d2      	lsls	r2, r2, #3
 800d348:	4920      	ldr	r1, [pc, #128]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d34a:	4313      	orrs	r3, r2
 800d34c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d34e:	4b1f      	ldr	r3, [pc, #124]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d352:	4a1e      	ldr	r2, [pc, #120]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d358:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d106      	bne.n	800d36e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d360:	4b1a      	ldr	r3, [pc, #104]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d364:	4a19      	ldr	r2, [pc, #100]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d366:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d36a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d36c:	e00f      	b.n	800d38e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d36e:	683b      	ldr	r3, [r7, #0]
 800d370:	2b01      	cmp	r3, #1
 800d372:	d106      	bne.n	800d382 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d374:	4b15      	ldr	r3, [pc, #84]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d378:	4a14      	ldr	r2, [pc, #80]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d37a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d37e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d380:	e005      	b.n	800d38e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d382:	4b12      	ldr	r3, [pc, #72]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d386:	4a11      	ldr	r2, [pc, #68]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d388:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d38c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d38e:	4b0f      	ldr	r3, [pc, #60]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	4a0e      	ldr	r2, [pc, #56]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d39a:	f7f6 fb69 	bl	8003a70 <HAL_GetTick>
 800d39e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3a0:	e008      	b.n	800d3b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d3a2:	f7f6 fb65 	bl	8003a70 <HAL_GetTick>
 800d3a6:	4602      	mov	r2, r0
 800d3a8:	68bb      	ldr	r3, [r7, #8]
 800d3aa:	1ad3      	subs	r3, r2, r3
 800d3ac:	2b02      	cmp	r3, #2
 800d3ae:	d901      	bls.n	800d3b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d3b0:	2303      	movs	r3, #3
 800d3b2:	e006      	b.n	800d3c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d3b4:	4b05      	ldr	r3, [pc, #20]	; (800d3cc <RCCEx_PLL3_Config+0x15c>)
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d0f0      	beq.n	800d3a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d3c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	3710      	adds	r7, #16
 800d3c6:	46bd      	mov	sp, r7
 800d3c8:	bd80      	pop	{r7, pc}
 800d3ca:	bf00      	nop
 800d3cc:	58024400 	.word	0x58024400
 800d3d0:	ffff0007 	.word	0xffff0007

0800d3d4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d3d4:	b580      	push	{r7, lr}
 800d3d6:	b084      	sub	sp, #16
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d071      	beq.n	800d4ca <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d3ec:	b2db      	uxtb	r3, r3
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d106      	bne.n	800d400 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d3fa:	6878      	ldr	r0, [r7, #4]
 800d3fc:	f7f5 fdd0 	bl	8002fa0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	2202      	movs	r2, #2
 800d404:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	f003 0310 	and.w	r3, r3, #16
 800d412:	2b10      	cmp	r3, #16
 800d414:	d050      	beq.n	800d4b8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	681b      	ldr	r3, [r3, #0]
 800d41a:	22ca      	movs	r2, #202	; 0xca
 800d41c:	625a      	str	r2, [r3, #36]	; 0x24
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	2253      	movs	r2, #83	; 0x53
 800d424:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d426:	6878      	ldr	r0, [r7, #4]
 800d428:	f000 fa4a 	bl	800d8c0 <RTC_EnterInitMode>
 800d42c:	4603      	mov	r3, r0
 800d42e:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d430:	7bfb      	ldrb	r3, [r7, #15]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d124      	bne.n	800d480 <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	6899      	ldr	r1, [r3, #8]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681a      	ldr	r2, [r3, #0]
 800d440:	4b24      	ldr	r3, [pc, #144]	; (800d4d4 <HAL_RTC_Init+0x100>)
 800d442:	400b      	ands	r3, r1
 800d444:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	6899      	ldr	r1, [r3, #8]
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	685a      	ldr	r2, [r3, #4]
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	691b      	ldr	r3, [r3, #16]
 800d454:	431a      	orrs	r2, r3
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	699b      	ldr	r3, [r3, #24]
 800d45a:	431a      	orrs	r2, r3
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	430a      	orrs	r2, r1
 800d462:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	689b      	ldr	r3, [r3, #8]
 800d468:	0419      	lsls	r1, r3, #16
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	68da      	ldr	r2, [r3, #12]
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	430a      	orrs	r2, r1
 800d474:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 fa56 	bl	800d928 <RTC_ExitInitMode>
 800d47c:	4603      	mov	r3, r0
 800d47e:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d480:	7bfb      	ldrb	r3, [r7, #15]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d113      	bne.n	800d4ae <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	f022 0203 	bic.w	r2, r2, #3
 800d494:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	69da      	ldr	r2, [r3, #28]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	695b      	ldr	r3, [r3, #20]
 800d4a4:	431a      	orrs	r2, r3
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	430a      	orrs	r2, r1
 800d4ac:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	22ff      	movs	r2, #255	; 0xff
 800d4b4:	625a      	str	r2, [r3, #36]	; 0x24
 800d4b6:	e001      	b.n	800d4bc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d103      	bne.n	800d4ca <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d4ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	3710      	adds	r7, #16
 800d4d0:	46bd      	mov	sp, r7
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	ff8fffbf 	.word	0xff8fffbf

0800d4d8 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d4d8:	b590      	push	{r4, r7, lr}
 800d4da:	b087      	sub	sp, #28
 800d4dc:	af00      	add	r7, sp, #0
 800d4de:	60f8      	str	r0, [r7, #12]
 800d4e0:	60b9      	str	r1, [r7, #8]
 800d4e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d101      	bne.n	800d4f2 <HAL_RTC_SetTime+0x1a>
 800d4ee:	2302      	movs	r3, #2
 800d4f0:	e089      	b.n	800d606 <HAL_RTC_SetTime+0x12e>
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	2202      	movs	r2, #2
 800d4fe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	681b      	ldr	r3, [r3, #0]
 800d506:	22ca      	movs	r2, #202	; 0xca
 800d508:	625a      	str	r2, [r3, #36]	; 0x24
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	2253      	movs	r2, #83	; 0x53
 800d510:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f000 f9d4 	bl	800d8c0 <RTC_EnterInitMode>
 800d518:	4603      	mov	r3, r0
 800d51a:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d51c:	7cfb      	ldrb	r3, [r7, #19]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d161      	bne.n	800d5e6 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d126      	bne.n	800d576 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	689b      	ldr	r3, [r3, #8]
 800d52e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d532:	2b00      	cmp	r3, #0
 800d534:	d102      	bne.n	800d53c <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2200      	movs	r2, #0
 800d53a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d53c:	68bb      	ldr	r3, [r7, #8]
 800d53e:	781b      	ldrb	r3, [r3, #0]
 800d540:	4618      	mov	r0, r3
 800d542:	f000 fa2f 	bl	800d9a4 <RTC_ByteToBcd2>
 800d546:	4603      	mov	r3, r0
 800d548:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d54a:	68bb      	ldr	r3, [r7, #8]
 800d54c:	785b      	ldrb	r3, [r3, #1]
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 fa28 	bl	800d9a4 <RTC_ByteToBcd2>
 800d554:	4603      	mov	r3, r0
 800d556:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d558:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	789b      	ldrb	r3, [r3, #2]
 800d55e:	4618      	mov	r0, r3
 800d560:	f000 fa20 	bl	800d9a4 <RTC_ByteToBcd2>
 800d564:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d566:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	78db      	ldrb	r3, [r3, #3]
 800d56e:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d570:	4313      	orrs	r3, r2
 800d572:	617b      	str	r3, [r7, #20]
 800d574:	e018      	b.n	800d5a8 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	689b      	ldr	r3, [r3, #8]
 800d57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d580:	2b00      	cmp	r3, #0
 800d582:	d102      	bne.n	800d58a <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d584:	68bb      	ldr	r3, [r7, #8]
 800d586:	2200      	movs	r2, #0
 800d588:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d590:	68bb      	ldr	r3, [r7, #8]
 800d592:	785b      	ldrb	r3, [r3, #1]
 800d594:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d596:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d598:	68ba      	ldr	r2, [r7, #8]
 800d59a:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d59c:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d59e:	68bb      	ldr	r3, [r7, #8]
 800d5a0:	78db      	ldrb	r3, [r3, #3]
 800d5a2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d5a4:	4313      	orrs	r3, r2
 800d5a6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681a      	ldr	r2, [r3, #0]
 800d5ac:	6979      	ldr	r1, [r7, #20]
 800d5ae:	4b18      	ldr	r3, [pc, #96]	; (800d610 <HAL_RTC_SetTime+0x138>)
 800d5b0:	400b      	ands	r3, r1
 800d5b2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d5b4:	68fb      	ldr	r3, [r7, #12]
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	689a      	ldr	r2, [r3, #8]
 800d5ba:	68fb      	ldr	r3, [r7, #12]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d5c2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d5c4:	68fb      	ldr	r3, [r7, #12]
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	6899      	ldr	r1, [r3, #8]
 800d5ca:	68bb      	ldr	r3, [r7, #8]
 800d5cc:	68da      	ldr	r2, [r3, #12]
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	691b      	ldr	r3, [r3, #16]
 800d5d2:	431a      	orrs	r2, r3
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	430a      	orrs	r2, r1
 800d5da:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f000 f9a3 	bl	800d928 <RTC_ExitInitMode>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	22ff      	movs	r2, #255	; 0xff
 800d5ec:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d5ee:	7cfb      	ldrb	r3, [r7, #19]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d103      	bne.n	800d5fc <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	2200      	movs	r2, #0
 800d600:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d604:	7cfb      	ldrb	r3, [r7, #19]
}
 800d606:	4618      	mov	r0, r3
 800d608:	371c      	adds	r7, #28
 800d60a:	46bd      	mov	sp, r7
 800d60c:	bd90      	pop	{r4, r7, pc}
 800d60e:	bf00      	nop
 800d610:	007f7f7f 	.word	0x007f7f7f

0800d614 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d614:	b580      	push	{r7, lr}
 800d616:	b086      	sub	sp, #24
 800d618:	af00      	add	r7, sp, #0
 800d61a:	60f8      	str	r0, [r7, #12]
 800d61c:	60b9      	str	r1, [r7, #8]
 800d61e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d626:	68bb      	ldr	r3, [r7, #8]
 800d628:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d634:	68bb      	ldr	r3, [r7, #8]
 800d636:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	681a      	ldr	r2, [r3, #0]
 800d63e:	4b22      	ldr	r3, [pc, #136]	; (800d6c8 <HAL_RTC_GetTime+0xb4>)
 800d640:	4013      	ands	r3, r2
 800d642:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d644:	697b      	ldr	r3, [r7, #20]
 800d646:	0c1b      	lsrs	r3, r3, #16
 800d648:	b2db      	uxtb	r3, r3
 800d64a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d64e:	b2da      	uxtb	r2, r3
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d654:	697b      	ldr	r3, [r7, #20]
 800d656:	0a1b      	lsrs	r3, r3, #8
 800d658:	b2db      	uxtb	r3, r3
 800d65a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d65e:	b2da      	uxtb	r2, r3
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d664:	697b      	ldr	r3, [r7, #20]
 800d666:	b2db      	uxtb	r3, r3
 800d668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	0d9b      	lsrs	r3, r3, #22
 800d676:	b2db      	uxtb	r3, r3
 800d678:	f003 0301 	and.w	r3, r3, #1
 800d67c:	b2da      	uxtb	r2, r3
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2b00      	cmp	r3, #0
 800d686:	d11a      	bne.n	800d6be <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d688:	68bb      	ldr	r3, [r7, #8]
 800d68a:	781b      	ldrb	r3, [r3, #0]
 800d68c:	4618      	mov	r0, r3
 800d68e:	f000 f9a9 	bl	800d9e4 <RTC_Bcd2ToByte>
 800d692:	4603      	mov	r3, r0
 800d694:	461a      	mov	r2, r3
 800d696:	68bb      	ldr	r3, [r7, #8]
 800d698:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	785b      	ldrb	r3, [r3, #1]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 f9a0 	bl	800d9e4 <RTC_Bcd2ToByte>
 800d6a4:	4603      	mov	r3, r0
 800d6a6:	461a      	mov	r2, r3
 800d6a8:	68bb      	ldr	r3, [r7, #8]
 800d6aa:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d6ac:	68bb      	ldr	r3, [r7, #8]
 800d6ae:	789b      	ldrb	r3, [r3, #2]
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	f000 f997 	bl	800d9e4 <RTC_Bcd2ToByte>
 800d6b6:	4603      	mov	r3, r0
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	68bb      	ldr	r3, [r7, #8]
 800d6bc:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d6be:	2300      	movs	r3, #0
}
 800d6c0:	4618      	mov	r0, r3
 800d6c2:	3718      	adds	r7, #24
 800d6c4:	46bd      	mov	sp, r7
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	007f7f7f 	.word	0x007f7f7f

0800d6cc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d6cc:	b590      	push	{r4, r7, lr}
 800d6ce:	b087      	sub	sp, #28
 800d6d0:	af00      	add	r7, sp, #0
 800d6d2:	60f8      	str	r0, [r7, #12]
 800d6d4:	60b9      	str	r1, [r7, #8]
 800d6d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d101      	bne.n	800d6e6 <HAL_RTC_SetDate+0x1a>
 800d6e2:	2302      	movs	r3, #2
 800d6e4:	e073      	b.n	800d7ce <HAL_RTC_SetDate+0x102>
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2201      	movs	r2, #1
 800d6ea:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d10e      	bne.n	800d71a <HAL_RTC_SetDate+0x4e>
 800d6fc:	68bb      	ldr	r3, [r7, #8]
 800d6fe:	785b      	ldrb	r3, [r3, #1]
 800d700:	f003 0310 	and.w	r3, r3, #16
 800d704:	2b00      	cmp	r3, #0
 800d706:	d008      	beq.n	800d71a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	785b      	ldrb	r3, [r3, #1]
 800d70c:	f023 0310 	bic.w	r3, r3, #16
 800d710:	b2db      	uxtb	r3, r3
 800d712:	330a      	adds	r3, #10
 800d714:	b2da      	uxtb	r2, r3
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d11c      	bne.n	800d75a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d720:	68bb      	ldr	r3, [r7, #8]
 800d722:	78db      	ldrb	r3, [r3, #3]
 800d724:	4618      	mov	r0, r3
 800d726:	f000 f93d 	bl	800d9a4 <RTC_ByteToBcd2>
 800d72a:	4603      	mov	r3, r0
 800d72c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d72e:	68bb      	ldr	r3, [r7, #8]
 800d730:	785b      	ldrb	r3, [r3, #1]
 800d732:	4618      	mov	r0, r3
 800d734:	f000 f936 	bl	800d9a4 <RTC_ByteToBcd2>
 800d738:	4603      	mov	r3, r0
 800d73a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d73c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	789b      	ldrb	r3, [r3, #2]
 800d742:	4618      	mov	r0, r3
 800d744:	f000 f92e 	bl	800d9a4 <RTC_ByteToBcd2>
 800d748:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d74a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d74e:	68bb      	ldr	r3, [r7, #8]
 800d750:	781b      	ldrb	r3, [r3, #0]
 800d752:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d754:	4313      	orrs	r3, r2
 800d756:	617b      	str	r3, [r7, #20]
 800d758:	e00e      	b.n	800d778 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d75a:	68bb      	ldr	r3, [r7, #8]
 800d75c:	78db      	ldrb	r3, [r3, #3]
 800d75e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d760:	68bb      	ldr	r3, [r7, #8]
 800d762:	785b      	ldrb	r3, [r3, #1]
 800d764:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d766:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d768:	68ba      	ldr	r2, [r7, #8]
 800d76a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d76c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	781b      	ldrb	r3, [r3, #0]
 800d772:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d774:	4313      	orrs	r3, r2
 800d776:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	22ca      	movs	r2, #202	; 0xca
 800d77e:	625a      	str	r2, [r3, #36]	; 0x24
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	681b      	ldr	r3, [r3, #0]
 800d784:	2253      	movs	r2, #83	; 0x53
 800d786:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d788:	68f8      	ldr	r0, [r7, #12]
 800d78a:	f000 f899 	bl	800d8c0 <RTC_EnterInitMode>
 800d78e:	4603      	mov	r3, r0
 800d790:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d792:	7cfb      	ldrb	r3, [r7, #19]
 800d794:	2b00      	cmp	r3, #0
 800d796:	d10a      	bne.n	800d7ae <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d798:	68fb      	ldr	r3, [r7, #12]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	6979      	ldr	r1, [r7, #20]
 800d79e:	4b0e      	ldr	r3, [pc, #56]	; (800d7d8 <HAL_RTC_SetDate+0x10c>)
 800d7a0:	400b      	ands	r3, r1
 800d7a2:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d7a4:	68f8      	ldr	r0, [r7, #12]
 800d7a6:	f000 f8bf 	bl	800d928 <RTC_ExitInitMode>
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	22ff      	movs	r2, #255	; 0xff
 800d7b4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d7b6:	7cfb      	ldrb	r3, [r7, #19]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d103      	bne.n	800d7c4 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d7bc:	68fb      	ldr	r3, [r7, #12]
 800d7be:	2201      	movs	r2, #1
 800d7c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d7cc:	7cfb      	ldrb	r3, [r7, #19]


}
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	371c      	adds	r7, #28
 800d7d2:	46bd      	mov	sp, r7
 800d7d4:	bd90      	pop	{r4, r7, pc}
 800d7d6:	bf00      	nop
 800d7d8:	00ffff3f 	.word	0x00ffff3f

0800d7dc <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d7dc:	b580      	push	{r7, lr}
 800d7de:	b086      	sub	sp, #24
 800d7e0:	af00      	add	r7, sp, #0
 800d7e2:	60f8      	str	r0, [r7, #12]
 800d7e4:	60b9      	str	r1, [r7, #8]
 800d7e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d7e8:	68fb      	ldr	r3, [r7, #12]
 800d7ea:	681b      	ldr	r3, [r3, #0]
 800d7ec:	685a      	ldr	r2, [r3, #4]
 800d7ee:	4b21      	ldr	r3, [pc, #132]	; (800d874 <HAL_RTC_GetDate+0x98>)
 800d7f0:	4013      	ands	r3, r2
 800d7f2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d7f4:	697b      	ldr	r3, [r7, #20]
 800d7f6:	0c1b      	lsrs	r3, r3, #16
 800d7f8:	b2da      	uxtb	r2, r3
 800d7fa:	68bb      	ldr	r3, [r7, #8]
 800d7fc:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	0a1b      	lsrs	r3, r3, #8
 800d802:	b2db      	uxtb	r3, r3
 800d804:	f003 031f 	and.w	r3, r3, #31
 800d808:	b2da      	uxtb	r2, r3
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d80e:	697b      	ldr	r3, [r7, #20]
 800d810:	b2db      	uxtb	r3, r3
 800d812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d816:	b2da      	uxtb	r2, r3
 800d818:	68bb      	ldr	r3, [r7, #8]
 800d81a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d81c:	697b      	ldr	r3, [r7, #20]
 800d81e:	0b5b      	lsrs	r3, r3, #13
 800d820:	b2db      	uxtb	r3, r3
 800d822:	f003 0307 	and.w	r3, r3, #7
 800d826:	b2da      	uxtb	r2, r3
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d11a      	bne.n	800d868 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d832:	68bb      	ldr	r3, [r7, #8]
 800d834:	78db      	ldrb	r3, [r3, #3]
 800d836:	4618      	mov	r0, r3
 800d838:	f000 f8d4 	bl	800d9e4 <RTC_Bcd2ToByte>
 800d83c:	4603      	mov	r3, r0
 800d83e:	461a      	mov	r2, r3
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	785b      	ldrb	r3, [r3, #1]
 800d848:	4618      	mov	r0, r3
 800d84a:	f000 f8cb 	bl	800d9e4 <RTC_Bcd2ToByte>
 800d84e:	4603      	mov	r3, r0
 800d850:	461a      	mov	r2, r3
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d856:	68bb      	ldr	r3, [r7, #8]
 800d858:	789b      	ldrb	r3, [r3, #2]
 800d85a:	4618      	mov	r0, r3
 800d85c:	f000 f8c2 	bl	800d9e4 <RTC_Bcd2ToByte>
 800d860:	4603      	mov	r3, r0
 800d862:	461a      	mov	r2, r3
 800d864:	68bb      	ldr	r3, [r7, #8]
 800d866:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d868:	2300      	movs	r3, #0
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}
 800d872:	bf00      	nop
 800d874:	00ffff3f 	.word	0x00ffff3f

0800d878 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b084      	sub	sp, #16
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	4a0d      	ldr	r2, [pc, #52]	; (800d8bc <HAL_RTC_WaitForSynchro+0x44>)
 800d886:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d888:	f7f6 f8f2 	bl	8003a70 <HAL_GetTick>
 800d88c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d88e:	e009      	b.n	800d8a4 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d890:	f7f6 f8ee 	bl	8003a70 <HAL_GetTick>
 800d894:	4602      	mov	r2, r0
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	1ad3      	subs	r3, r2, r3
 800d89a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d89e:	d901      	bls.n	800d8a4 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d8a0:	2303      	movs	r3, #3
 800d8a2:	e007      	b.n	800d8b4 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	f003 0320 	and.w	r3, r3, #32
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d0ee      	beq.n	800d890 <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d8b2:	2300      	movs	r3, #0
}
 800d8b4:	4618      	mov	r0, r3
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	0003ff5f 	.word	0x0003ff5f

0800d8c0 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d8c0:	b580      	push	{r7, lr}
 800d8c2:	b084      	sub	sp, #16
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8c8:	2300      	movs	r3, #0
 800d8ca:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	68db      	ldr	r3, [r3, #12]
 800d8d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d120      	bne.n	800d91c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d8da:	687b      	ldr	r3, [r7, #4]
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d8e2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d8e4:	f7f6 f8c4 	bl	8003a70 <HAL_GetTick>
 800d8e8:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d8ea:	e00d      	b.n	800d908 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d8ec:	f7f6 f8c0 	bl	8003a70 <HAL_GetTick>
 800d8f0:	4602      	mov	r2, r0
 800d8f2:	68bb      	ldr	r3, [r7, #8]
 800d8f4:	1ad3      	subs	r3, r2, r3
 800d8f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8fa:	d905      	bls.n	800d908 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d8fc:	2303      	movs	r3, #3
 800d8fe:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	2203      	movs	r2, #3
 800d904:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	681b      	ldr	r3, [r3, #0]
 800d90c:	68db      	ldr	r3, [r3, #12]
 800d90e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d912:	2b00      	cmp	r3, #0
 800d914:	d102      	bne.n	800d91c <RTC_EnterInitMode+0x5c>
 800d916:	7bfb      	ldrb	r3, [r7, #15]
 800d918:	2b03      	cmp	r3, #3
 800d91a:	d1e7      	bne.n	800d8ec <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d91c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d91e:	4618      	mov	r0, r3
 800d920:	3710      	adds	r7, #16
 800d922:	46bd      	mov	sp, r7
 800d924:	bd80      	pop	{r7, pc}
	...

0800d928 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d928:	b580      	push	{r7, lr}
 800d92a:	b084      	sub	sp, #16
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d930:	2300      	movs	r3, #0
 800d932:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d934:	4b1a      	ldr	r3, [pc, #104]	; (800d9a0 <RTC_ExitInitMode+0x78>)
 800d936:	68db      	ldr	r3, [r3, #12]
 800d938:	4a19      	ldr	r2, [pc, #100]	; (800d9a0 <RTC_ExitInitMode+0x78>)
 800d93a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d93e:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d940:	4b17      	ldr	r3, [pc, #92]	; (800d9a0 <RTC_ExitInitMode+0x78>)
 800d942:	689b      	ldr	r3, [r3, #8]
 800d944:	f003 0320 	and.w	r3, r3, #32
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d10c      	bne.n	800d966 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f7ff ff93 	bl	800d878 <HAL_RTC_WaitForSynchro>
 800d952:	4603      	mov	r3, r0
 800d954:	2b00      	cmp	r3, #0
 800d956:	d01e      	beq.n	800d996 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2203      	movs	r2, #3
 800d95c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d960:	2303      	movs	r3, #3
 800d962:	73fb      	strb	r3, [r7, #15]
 800d964:	e017      	b.n	800d996 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d966:	4b0e      	ldr	r3, [pc, #56]	; (800d9a0 <RTC_ExitInitMode+0x78>)
 800d968:	689b      	ldr	r3, [r3, #8]
 800d96a:	4a0d      	ldr	r2, [pc, #52]	; (800d9a0 <RTC_ExitInitMode+0x78>)
 800d96c:	f023 0320 	bic.w	r3, r3, #32
 800d970:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d972:	6878      	ldr	r0, [r7, #4]
 800d974:	f7ff ff80 	bl	800d878 <HAL_RTC_WaitForSynchro>
 800d978:	4603      	mov	r3, r0
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d005      	beq.n	800d98a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2203      	movs	r2, #3
 800d982:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d986:	2303      	movs	r3, #3
 800d988:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d98a:	4b05      	ldr	r3, [pc, #20]	; (800d9a0 <RTC_ExitInitMode+0x78>)
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	4a04      	ldr	r2, [pc, #16]	; (800d9a0 <RTC_ExitInitMode+0x78>)
 800d990:	f043 0320 	orr.w	r3, r3, #32
 800d994:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	58004000 	.word	0x58004000

0800d9a4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d9ae:	2300      	movs	r3, #0
 800d9b0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d9b2:	79fb      	ldrb	r3, [r7, #7]
 800d9b4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d9b6:	e005      	b.n	800d9c4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d9be:	7afb      	ldrb	r3, [r7, #11]
 800d9c0:	3b0a      	subs	r3, #10
 800d9c2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d9c4:	7afb      	ldrb	r3, [r7, #11]
 800d9c6:	2b09      	cmp	r3, #9
 800d9c8:	d8f6      	bhi.n	800d9b8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	b2db      	uxtb	r3, r3
 800d9ce:	011b      	lsls	r3, r3, #4
 800d9d0:	b2da      	uxtb	r2, r3
 800d9d2:	7afb      	ldrb	r3, [r7, #11]
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	b2db      	uxtb	r3, r3
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr

0800d9e4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b085      	sub	sp, #20
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	4603      	mov	r3, r0
 800d9ec:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d9ee:	79fb      	ldrb	r3, [r7, #7]
 800d9f0:	091b      	lsrs	r3, r3, #4
 800d9f2:	b2db      	uxtb	r3, r3
 800d9f4:	461a      	mov	r2, r3
 800d9f6:	0092      	lsls	r2, r2, #2
 800d9f8:	4413      	add	r3, r2
 800d9fa:	005b      	lsls	r3, r3, #1
 800d9fc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d9fe:	79fb      	ldrb	r3, [r7, #7]
 800da00:	f003 030f 	and.w	r3, r3, #15
 800da04:	b2da      	uxtb	r2, r3
 800da06:	7bfb      	ldrb	r3, [r7, #15]
 800da08:	4413      	add	r3, r2
 800da0a:	b2db      	uxtb	r3, r3
}
 800da0c:	4618      	mov	r0, r3
 800da0e:	3714      	adds	r7, #20
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b084      	sub	sp, #16
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d101      	bne.n	800da2a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800da26:	2301      	movs	r3, #1
 800da28:	e10f      	b.n	800dc4a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	2200      	movs	r2, #0
 800da2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4a87      	ldr	r2, [pc, #540]	; (800dc54 <HAL_SPI_Init+0x23c>)
 800da36:	4293      	cmp	r3, r2
 800da38:	d00f      	beq.n	800da5a <HAL_SPI_Init+0x42>
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	4a86      	ldr	r2, [pc, #536]	; (800dc58 <HAL_SPI_Init+0x240>)
 800da40:	4293      	cmp	r3, r2
 800da42:	d00a      	beq.n	800da5a <HAL_SPI_Init+0x42>
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a84      	ldr	r2, [pc, #528]	; (800dc5c <HAL_SPI_Init+0x244>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d005      	beq.n	800da5a <HAL_SPI_Init+0x42>
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	68db      	ldr	r3, [r3, #12]
 800da52:	2b0f      	cmp	r3, #15
 800da54:	d901      	bls.n	800da5a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800da56:	2301      	movs	r3, #1
 800da58:	e0f7      	b.n	800dc4a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fc12 	bl	800e284 <SPI_GetPacketSize>
 800da60:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	681b      	ldr	r3, [r3, #0]
 800da66:	4a7b      	ldr	r2, [pc, #492]	; (800dc54 <HAL_SPI_Init+0x23c>)
 800da68:	4293      	cmp	r3, r2
 800da6a:	d00c      	beq.n	800da86 <HAL_SPI_Init+0x6e>
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	4a79      	ldr	r2, [pc, #484]	; (800dc58 <HAL_SPI_Init+0x240>)
 800da72:	4293      	cmp	r3, r2
 800da74:	d007      	beq.n	800da86 <HAL_SPI_Init+0x6e>
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	4a78      	ldr	r2, [pc, #480]	; (800dc5c <HAL_SPI_Init+0x244>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d002      	beq.n	800da86 <HAL_SPI_Init+0x6e>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2b08      	cmp	r3, #8
 800da84:	d811      	bhi.n	800daaa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da8a:	4a72      	ldr	r2, [pc, #456]	; (800dc54 <HAL_SPI_Init+0x23c>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d009      	beq.n	800daa4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	4a70      	ldr	r2, [pc, #448]	; (800dc58 <HAL_SPI_Init+0x240>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d004      	beq.n	800daa4 <HAL_SPI_Init+0x8c>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	4a6f      	ldr	r2, [pc, #444]	; (800dc5c <HAL_SPI_Init+0x244>)
 800daa0:	4293      	cmp	r3, r2
 800daa2:	d104      	bne.n	800daae <HAL_SPI_Init+0x96>
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	2b10      	cmp	r3, #16
 800daa8:	d901      	bls.n	800daae <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800daaa:	2301      	movs	r3, #1
 800daac:	e0cd      	b.n	800dc4a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d106      	bne.n	800dac8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	2200      	movs	r2, #0
 800dabe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	f7f5 faa0 	bl	8003008 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2202      	movs	r2, #2
 800dacc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	681a      	ldr	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f022 0201 	bic.w	r2, r2, #1
 800dade:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	689b      	ldr	r3, [r3, #8]
 800dae6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800daea:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	699b      	ldr	r3, [r3, #24]
 800daf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800daf4:	d119      	bne.n	800db2a <HAL_SPI_Init+0x112>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	685b      	ldr	r3, [r3, #4]
 800dafa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dafe:	d103      	bne.n	800db08 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800db04:	2b00      	cmp	r3, #0
 800db06:	d008      	beq.n	800db1a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800db0c:	2b00      	cmp	r3, #0
 800db0e:	d10c      	bne.n	800db2a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800db14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800db18:	d107      	bne.n	800db2a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800db28:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00f      	beq.n	800db56 <HAL_SPI_Init+0x13e>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	68db      	ldr	r3, [r3, #12]
 800db3a:	2b06      	cmp	r3, #6
 800db3c:	d90b      	bls.n	800db56 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	681b      	ldr	r3, [r3, #0]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	430a      	orrs	r2, r1
 800db52:	601a      	str	r2, [r3, #0]
 800db54:	e007      	b.n	800db66 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	681a      	ldr	r2, [r3, #0]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800db64:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	69da      	ldr	r2, [r3, #28]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db6e:	431a      	orrs	r2, r3
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	431a      	orrs	r2, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db78:	ea42 0103 	orr.w	r1, r2, r3
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	68da      	ldr	r2, [r3, #12]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	681b      	ldr	r3, [r3, #0]
 800db84:	430a      	orrs	r2, r1
 800db86:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db90:	431a      	orrs	r2, r3
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db96:	431a      	orrs	r2, r3
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	699b      	ldr	r3, [r3, #24]
 800db9c:	431a      	orrs	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	691b      	ldr	r3, [r3, #16]
 800dba2:	431a      	orrs	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	695b      	ldr	r3, [r3, #20]
 800dba8:	431a      	orrs	r2, r3
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	6a1b      	ldr	r3, [r3, #32]
 800dbae:	431a      	orrs	r2, r3
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	685b      	ldr	r3, [r3, #4]
 800dbb4:	431a      	orrs	r2, r3
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dbba:	431a      	orrs	r2, r3
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	689b      	ldr	r3, [r3, #8]
 800dbc0:	431a      	orrs	r2, r3
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800dbc6:	ea42 0103 	orr.w	r1, r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	681b      	ldr	r3, [r3, #0]
 800dbd2:	430a      	orrs	r2, r1
 800dbd4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d113      	bne.n	800dc06 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbf0:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	689b      	ldr	r3, [r3, #8]
 800dbf8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	681b      	ldr	r3, [r3, #0]
 800dc00:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dc04:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	f022 0201 	bic.w	r2, r2, #1
 800dc14:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	685b      	ldr	r3, [r3, #4]
 800dc1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d00a      	beq.n	800dc38 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	68db      	ldr	r3, [r3, #12]
 800dc28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dc2c:	687b      	ldr	r3, [r7, #4]
 800dc2e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	681b      	ldr	r3, [r3, #0]
 800dc34:	430a      	orrs	r2, r1
 800dc36:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	2201      	movs	r2, #1
 800dc44:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dc48:	2300      	movs	r3, #0
}
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	3710      	adds	r7, #16
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	bd80      	pop	{r7, pc}
 800dc52:	bf00      	nop
 800dc54:	40013000 	.word	0x40013000
 800dc58:	40003800 	.word	0x40003800
 800dc5c:	40003c00 	.word	0x40003c00

0800dc60 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc60:	b580      	push	{r7, lr}
 800dc62:	b088      	sub	sp, #32
 800dc64:	af00      	add	r7, sp, #0
 800dc66:	60f8      	str	r0, [r7, #12]
 800dc68:	60b9      	str	r1, [r7, #8]
 800dc6a:	603b      	str	r3, [r7, #0]
 800dc6c:	4613      	mov	r3, r2
 800dc6e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc74:	095b      	lsrs	r3, r3, #5
 800dc76:	b29b      	uxth	r3, r3
 800dc78:	3301      	adds	r3, #1
 800dc7a:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	3330      	adds	r3, #48	; 0x30
 800dc82:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc84:	f7f5 fef4 	bl	8003a70 <HAL_GetTick>
 800dc88:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc8a:	68fb      	ldr	r3, [r7, #12]
 800dc8c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dc90:	b2db      	uxtb	r3, r3
 800dc92:	2b01      	cmp	r3, #1
 800dc94:	d001      	beq.n	800dc9a <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800dc96:	2302      	movs	r3, #2
 800dc98:	e250      	b.n	800e13c <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dc9a:	68bb      	ldr	r3, [r7, #8]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d002      	beq.n	800dca6 <HAL_SPI_Receive+0x46>
 800dca0:	88fb      	ldrh	r3, [r7, #6]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d101      	bne.n	800dcaa <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dca6:	2301      	movs	r3, #1
 800dca8:	e248      	b.n	800e13c <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dcaa:	68fb      	ldr	r3, [r7, #12]
 800dcac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcb0:	2b01      	cmp	r3, #1
 800dcb2:	d101      	bne.n	800dcb8 <HAL_SPI_Receive+0x58>
 800dcb4:	2302      	movs	r3, #2
 800dcb6:	e241      	b.n	800e13c <HAL_SPI_Receive+0x4dc>
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2201      	movs	r2, #1
 800dcbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dcc0:	68fb      	ldr	r3, [r7, #12]
 800dcc2:	2204      	movs	r2, #4
 800dcc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	2200      	movs	r2, #0
 800dccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	68ba      	ldr	r2, [r7, #8]
 800dcd4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	88fa      	ldrh	r2, [r7, #6]
 800dcda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	88fa      	ldrh	r2, [r7, #6]
 800dce2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	2200      	movs	r2, #0
 800dcea:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	2200      	movs	r2, #0
 800dd00:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2200      	movs	r2, #0
 800dd06:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	689b      	ldr	r3, [r3, #8]
 800dd0c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dd10:	d108      	bne.n	800dd24 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	681b      	ldr	r3, [r3, #0]
 800dd16:	681a      	ldr	r2, [r3, #0]
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dd20:	601a      	str	r2, [r3, #0]
 800dd22:	e009      	b.n	800dd38 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800dd24:	68fb      	ldr	r3, [r7, #12]
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	68db      	ldr	r3, [r3, #12]
 800dd2a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dd36:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	685a      	ldr	r2, [r3, #4]
 800dd3e:	4b95      	ldr	r3, [pc, #596]	; (800df94 <HAL_SPI_Receive+0x334>)
 800dd40:	4013      	ands	r3, r2
 800dd42:	88f9      	ldrh	r1, [r7, #6]
 800dd44:	68fa      	ldr	r2, [r7, #12]
 800dd46:	6812      	ldr	r2, [r2, #0]
 800dd48:	430b      	orrs	r3, r1
 800dd4a:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dd4c:	68fb      	ldr	r3, [r7, #12]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	681a      	ldr	r2, [r3, #0]
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681b      	ldr	r3, [r3, #0]
 800dd56:	f042 0201 	orr.w	r2, r2, #1
 800dd5a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	685b      	ldr	r3, [r3, #4]
 800dd60:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd64:	d107      	bne.n	800dd76 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681a      	ldr	r2, [r3, #0]
 800dd6c:	68fb      	ldr	r3, [r7, #12]
 800dd6e:	681b      	ldr	r3, [r3, #0]
 800dd70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd74:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	2b0f      	cmp	r3, #15
 800dd7c:	d96c      	bls.n	800de58 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dd7e:	e064      	b.n	800de4a <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dd80:	68fb      	ldr	r3, [r7, #12]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	695b      	ldr	r3, [r3, #20]
 800dd86:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	695b      	ldr	r3, [r3, #20]
 800dd8e:	f003 0301 	and.w	r3, r3, #1
 800dd92:	2b01      	cmp	r3, #1
 800dd94:	d114      	bne.n	800ddc0 <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd9e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dda0:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dda6:	1d1a      	adds	r2, r3, #4
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddb2:	b29b      	uxth	r3, r3
 800ddb4:	3b01      	subs	r3, #1
 800ddb6:	b29a      	uxth	r2, r3
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddbe:	e044      	b.n	800de4a <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800ddc0:	68fb      	ldr	r3, [r7, #12]
 800ddc2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddc6:	b29b      	uxth	r3, r3
 800ddc8:	8bfa      	ldrh	r2, [r7, #30]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d919      	bls.n	800de02 <HAL_SPI_Receive+0x1a2>
 800ddce:	693b      	ldr	r3, [r7, #16]
 800ddd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddd4:	2b00      	cmp	r3, #0
 800ddd6:	d014      	beq.n	800de02 <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	681a      	ldr	r2, [r3, #0]
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dde0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dde2:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dde8:	1d1a      	adds	r2, r3, #4
 800ddea:	68fb      	ldr	r3, [r7, #12]
 800ddec:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	3b01      	subs	r3, #1
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de00:	e023      	b.n	800de4a <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800de02:	f7f5 fe35 	bl	8003a70 <HAL_GetTick>
 800de06:	4602      	mov	r2, r0
 800de08:	697b      	ldr	r3, [r7, #20]
 800de0a:	1ad3      	subs	r3, r2, r3
 800de0c:	683a      	ldr	r2, [r7, #0]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d803      	bhi.n	800de1a <HAL_SPI_Receive+0x1ba>
 800de12:	683b      	ldr	r3, [r7, #0]
 800de14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800de18:	d102      	bne.n	800de20 <HAL_SPI_Receive+0x1c0>
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d114      	bne.n	800de4a <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800de20:	68f8      	ldr	r0, [r7, #12]
 800de22:	f000 f98f 	bl	800e144 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800de26:	68fb      	ldr	r3, [r7, #12]
 800de28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de2c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2201      	movs	r2, #1
 800de3a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800de46:	2303      	movs	r3, #3
 800de48:	e178      	b.n	800e13c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de50:	b29b      	uxth	r3, r3
 800de52:	2b00      	cmp	r3, #0
 800de54:	d194      	bne.n	800dd80 <HAL_SPI_Receive+0x120>
 800de56:	e15e      	b.n	800e116 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	68db      	ldr	r3, [r3, #12]
 800de5c:	2b07      	cmp	r3, #7
 800de5e:	f240 8153 	bls.w	800e108 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800de62:	e08f      	b.n	800df84 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	681b      	ldr	r3, [r3, #0]
 800de68:	695b      	ldr	r3, [r3, #20]
 800de6a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	695b      	ldr	r3, [r3, #20]
 800de72:	f003 0301 	and.w	r3, r3, #1
 800de76:	2b01      	cmp	r3, #1
 800de78:	d114      	bne.n	800dea4 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de7e:	69ba      	ldr	r2, [r7, #24]
 800de80:	8812      	ldrh	r2, [r2, #0]
 800de82:	b292      	uxth	r2, r2
 800de84:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de8a:	1c9a      	adds	r2, r3, #2
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de96:	b29b      	uxth	r3, r3
 800de98:	3b01      	subs	r3, #1
 800de9a:	b29a      	uxth	r2, r3
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dea2:	e06f      	b.n	800df84 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800deaa:	b29b      	uxth	r3, r3
 800deac:	8bfa      	ldrh	r2, [r7, #30]
 800deae:	429a      	cmp	r2, r3
 800deb0:	d924      	bls.n	800defc <HAL_SPI_Receive+0x29c>
 800deb2:	693b      	ldr	r3, [r7, #16]
 800deb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d01f      	beq.n	800defc <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dec0:	69ba      	ldr	r2, [r7, #24]
 800dec2:	8812      	ldrh	r2, [r2, #0]
 800dec4:	b292      	uxth	r2, r2
 800dec6:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800decc:	1c9a      	adds	r2, r3, #2
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded6:	69ba      	ldr	r2, [r7, #24]
 800ded8:	8812      	ldrh	r2, [r2, #0]
 800deda:	b292      	uxth	r2, r2
 800dedc:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dee2:	1c9a      	adds	r2, r3, #2
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800dee8:	68fb      	ldr	r3, [r7, #12]
 800deea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800deee:	b29b      	uxth	r3, r3
 800def0:	3b02      	subs	r3, #2
 800def2:	b29a      	uxth	r2, r3
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800defa:	e043      	b.n	800df84 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df02:	b29b      	uxth	r3, r3
 800df04:	2b01      	cmp	r3, #1
 800df06:	d119      	bne.n	800df3c <HAL_SPI_Receive+0x2dc>
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d014      	beq.n	800df3c <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800df12:	68fb      	ldr	r3, [r7, #12]
 800df14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df16:	69ba      	ldr	r2, [r7, #24]
 800df18:	8812      	ldrh	r2, [r2, #0]
 800df1a:	b292      	uxth	r2, r2
 800df1c:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800df1e:	68fb      	ldr	r3, [r7, #12]
 800df20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df22:	1c9a      	adds	r2, r3, #2
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df2e:	b29b      	uxth	r3, r3
 800df30:	3b01      	subs	r3, #1
 800df32:	b29a      	uxth	r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df3a:	e023      	b.n	800df84 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800df3c:	f7f5 fd98 	bl	8003a70 <HAL_GetTick>
 800df40:	4602      	mov	r2, r0
 800df42:	697b      	ldr	r3, [r7, #20]
 800df44:	1ad3      	subs	r3, r2, r3
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	429a      	cmp	r2, r3
 800df4a:	d803      	bhi.n	800df54 <HAL_SPI_Receive+0x2f4>
 800df4c:	683b      	ldr	r3, [r7, #0]
 800df4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df52:	d102      	bne.n	800df5a <HAL_SPI_Receive+0x2fa>
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	2b00      	cmp	r3, #0
 800df58:	d114      	bne.n	800df84 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df5a:	68f8      	ldr	r0, [r7, #12]
 800df5c:	f000 f8f2 	bl	800e144 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df66:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	2201      	movs	r2, #1
 800df74:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	2200      	movs	r2, #0
 800df7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800df80:	2303      	movs	r3, #3
 800df82:	e0db      	b.n	800e13c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df8a:	b29b      	uxth	r3, r3
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	f47f af69 	bne.w	800de64 <HAL_SPI_Receive+0x204>
 800df92:	e0c0      	b.n	800e116 <HAL_SPI_Receive+0x4b6>
 800df94:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	695b      	ldr	r3, [r3, #20]
 800df9e:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dfa0:	68fb      	ldr	r3, [r7, #12]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	695b      	ldr	r3, [r3, #20]
 800dfa6:	f003 0301 	and.w	r3, r3, #1
 800dfaa:	2b01      	cmp	r3, #1
 800dfac:	d117      	bne.n	800dfde <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfb6:	68fb      	ldr	r3, [r7, #12]
 800dfb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfba:	7812      	ldrb	r2, [r2, #0]
 800dfbc:	b2d2      	uxtb	r2, r2
 800dfbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfc0:	68fb      	ldr	r3, [r7, #12]
 800dfc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfc4:	1c5a      	adds	r2, r3, #1
 800dfc6:	68fb      	ldr	r3, [r7, #12]
 800dfc8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfd0:	b29b      	uxth	r3, r3
 800dfd2:	3b01      	subs	r3, #1
 800dfd4:	b29a      	uxth	r2, r3
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dfdc:	e094      	b.n	800e108 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dfde:	68fb      	ldr	r3, [r7, #12]
 800dfe0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfe4:	b29b      	uxth	r3, r3
 800dfe6:	8bfa      	ldrh	r2, [r7, #30]
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d946      	bls.n	800e07a <HAL_SPI_Receive+0x41a>
 800dfec:	693b      	ldr	r3, [r7, #16]
 800dfee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d041      	beq.n	800e07a <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e002:	7812      	ldrb	r2, [r2, #0]
 800e004:	b2d2      	uxtb	r2, r2
 800e006:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e00c:	1c5a      	adds	r2, r3, #1
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e01a:	68fb      	ldr	r3, [r7, #12]
 800e01c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e01e:	7812      	ldrb	r2, [r2, #0]
 800e020:	b2d2      	uxtb	r2, r2
 800e022:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e028:	1c5a      	adds	r2, r3, #1
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e03a:	7812      	ldrb	r2, [r2, #0]
 800e03c:	b2d2      	uxtb	r2, r2
 800e03e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e044:	1c5a      	adds	r2, r3, #1
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e052:	68fb      	ldr	r3, [r7, #12]
 800e054:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e056:	7812      	ldrb	r2, [r2, #0]
 800e058:	b2d2      	uxtb	r2, r2
 800e05a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e060:	1c5a      	adds	r2, r3, #1
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e066:	68fb      	ldr	r3, [r7, #12]
 800e068:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e06c:	b29b      	uxth	r3, r3
 800e06e:	3b04      	subs	r3, #4
 800e070:	b29a      	uxth	r2, r3
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e078:	e046      	b.n	800e108 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e080:	b29b      	uxth	r3, r3
 800e082:	2b03      	cmp	r3, #3
 800e084:	d81c      	bhi.n	800e0c0 <HAL_SPI_Receive+0x460>
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d017      	beq.n	800e0c0 <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e090:	68fb      	ldr	r3, [r7, #12]
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e09c:	7812      	ldrb	r2, [r2, #0]
 800e09e:	b2d2      	uxtb	r2, r2
 800e0a0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e0a2:	68fb      	ldr	r3, [r7, #12]
 800e0a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e0a6:	1c5a      	adds	r2, r3, #1
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0b2:	b29b      	uxth	r3, r3
 800e0b4:	3b01      	subs	r3, #1
 800e0b6:	b29a      	uxth	r2, r3
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e0be:	e023      	b.n	800e108 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e0c0:	f7f5 fcd6 	bl	8003a70 <HAL_GetTick>
 800e0c4:	4602      	mov	r2, r0
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	1ad3      	subs	r3, r2, r3
 800e0ca:	683a      	ldr	r2, [r7, #0]
 800e0cc:	429a      	cmp	r2, r3
 800e0ce:	d803      	bhi.n	800e0d8 <HAL_SPI_Receive+0x478>
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e0d6:	d102      	bne.n	800e0de <HAL_SPI_Receive+0x47e>
 800e0d8:	683b      	ldr	r3, [r7, #0]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d114      	bne.n	800e108 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f000 f830 	bl	800e144 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	2201      	movs	r2, #1
 800e0f8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	2200      	movs	r2, #0
 800e100:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e104:	2303      	movs	r3, #3
 800e106:	e019      	b.n	800e13c <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e10e:	b29b      	uxth	r3, r3
 800e110:	2b00      	cmp	r3, #0
 800e112:	f47f af41 	bne.w	800df98 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e116:	68f8      	ldr	r0, [r7, #12]
 800e118:	f000 f814 	bl	800e144 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2201      	movs	r2, #1
 800e120:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2200      	movs	r2, #0
 800e128:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e132:	2b00      	cmp	r3, #0
 800e134:	d001      	beq.n	800e13a <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e136:	2301      	movs	r3, #1
 800e138:	e000      	b.n	800e13c <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e13a:	2300      	movs	r3, #0
  }
}
 800e13c:	4618      	mov	r0, r3
 800e13e:	3720      	adds	r7, #32
 800e140:	46bd      	mov	sp, r7
 800e142:	bd80      	pop	{r7, pc}

0800e144 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e144:	b480      	push	{r7}
 800e146:	b085      	sub	sp, #20
 800e148:	af00      	add	r7, sp, #0
 800e14a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	695b      	ldr	r3, [r3, #20]
 800e152:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	699a      	ldr	r2, [r3, #24]
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	f042 0208 	orr.w	r2, r2, #8
 800e162:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	699a      	ldr	r2, [r3, #24]
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	f042 0210 	orr.w	r2, r2, #16
 800e172:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f022 0201 	bic.w	r2, r2, #1
 800e182:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	6919      	ldr	r1, [r3, #16]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	4b3c      	ldr	r3, [pc, #240]	; (800e280 <SPI_CloseTransfer+0x13c>)
 800e190:	400b      	ands	r3, r1
 800e192:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	689a      	ldr	r2, [r3, #8]
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e1a2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e1aa:	b2db      	uxtb	r3, r3
 800e1ac:	2b04      	cmp	r3, #4
 800e1ae:	d014      	beq.n	800e1da <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f003 0320 	and.w	r3, r3, #32
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d00f      	beq.n	800e1da <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	699a      	ldr	r2, [r3, #24]
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f042 0220 	orr.w	r2, r2, #32
 800e1d8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e1e0:	b2db      	uxtb	r3, r3
 800e1e2:	2b03      	cmp	r3, #3
 800e1e4:	d014      	beq.n	800e210 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d00f      	beq.n	800e210 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1f6:	f043 0204 	orr.w	r2, r3, #4
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	699a      	ldr	r2, [r3, #24]
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e20e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e216:	2b00      	cmp	r3, #0
 800e218:	d00f      	beq.n	800e23a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e220:	f043 0201 	orr.w	r2, r3, #1
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	699a      	ldr	r2, [r3, #24]
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e238:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e240:	2b00      	cmp	r3, #0
 800e242:	d00f      	beq.n	800e264 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e24a:	f043 0208 	orr.w	r2, r3, #8
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	699a      	ldr	r2, [r3, #24]
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	681b      	ldr	r3, [r3, #0]
 800e25e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e262:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	2200      	movs	r2, #0
 800e268:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2200      	movs	r2, #0
 800e270:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e274:	bf00      	nop
 800e276:	3714      	adds	r7, #20
 800e278:	46bd      	mov	sp, r7
 800e27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e27e:	4770      	bx	lr
 800e280:	fffffc90 	.word	0xfffffc90

0800e284 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e284:	b480      	push	{r7}
 800e286:	b085      	sub	sp, #20
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e290:	095b      	lsrs	r3, r3, #5
 800e292:	3301      	adds	r3, #1
 800e294:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	68db      	ldr	r3, [r3, #12]
 800e29a:	3301      	adds	r3, #1
 800e29c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	3307      	adds	r3, #7
 800e2a2:	08db      	lsrs	r3, r3, #3
 800e2a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e2a6:	68bb      	ldr	r3, [r7, #8]
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	fb02 f303 	mul.w	r3, r2, r3
}
 800e2ae:	4618      	mov	r0, r3
 800e2b0:	3714      	adds	r7, #20
 800e2b2:	46bd      	mov	sp, r7
 800e2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b8:	4770      	bx	lr

0800e2ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b082      	sub	sp, #8
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	d101      	bne.n	800e2cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e2c8:	2301      	movs	r3, #1
 800e2ca:	e049      	b.n	800e360 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e2d2:	b2db      	uxtb	r3, r3
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d106      	bne.n	800e2e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	2200      	movs	r2, #0
 800e2dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e2e0:	6878      	ldr	r0, [r7, #4]
 800e2e2:	f7f4 ff47 	bl	8003174 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	2202      	movs	r2, #2
 800e2ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	3304      	adds	r3, #4
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	4610      	mov	r0, r2
 800e2fa:	f000 fe7d 	bl	800eff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2201      	movs	r2, #1
 800e302:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	2201      	movs	r2, #1
 800e30a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	2201      	movs	r2, #1
 800e312:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	2201      	movs	r2, #1
 800e31a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	2201      	movs	r2, #1
 800e322:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2201      	movs	r2, #1
 800e32a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	2201      	movs	r2, #1
 800e332:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2201      	movs	r2, #1
 800e33a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2201      	movs	r2, #1
 800e342:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2201      	movs	r2, #1
 800e34a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2201      	movs	r2, #1
 800e352:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	2201      	movs	r2, #1
 800e35a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e35e:	2300      	movs	r3, #0
}
 800e360:	4618      	mov	r0, r3
 800e362:	3708      	adds	r7, #8
 800e364:	46bd      	mov	sp, r7
 800e366:	bd80      	pop	{r7, pc}

0800e368 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e368:	b480      	push	{r7}
 800e36a:	b085      	sub	sp, #20
 800e36c:	af00      	add	r7, sp, #0
 800e36e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e376:	b2db      	uxtb	r3, r3
 800e378:	2b01      	cmp	r3, #1
 800e37a:	d001      	beq.n	800e380 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e37c:	2301      	movs	r3, #1
 800e37e:	e054      	b.n	800e42a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	2202      	movs	r2, #2
 800e384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	68da      	ldr	r2, [r3, #12]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	f042 0201 	orr.w	r2, r2, #1
 800e396:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	4a26      	ldr	r2, [pc, #152]	; (800e438 <HAL_TIM_Base_Start_IT+0xd0>)
 800e39e:	4293      	cmp	r3, r2
 800e3a0:	d022      	beq.n	800e3e8 <HAL_TIM_Base_Start_IT+0x80>
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e3aa:	d01d      	beq.n	800e3e8 <HAL_TIM_Base_Start_IT+0x80>
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	4a22      	ldr	r2, [pc, #136]	; (800e43c <HAL_TIM_Base_Start_IT+0xd4>)
 800e3b2:	4293      	cmp	r3, r2
 800e3b4:	d018      	beq.n	800e3e8 <HAL_TIM_Base_Start_IT+0x80>
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	4a21      	ldr	r2, [pc, #132]	; (800e440 <HAL_TIM_Base_Start_IT+0xd8>)
 800e3bc:	4293      	cmp	r3, r2
 800e3be:	d013      	beq.n	800e3e8 <HAL_TIM_Base_Start_IT+0x80>
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4a1f      	ldr	r2, [pc, #124]	; (800e444 <HAL_TIM_Base_Start_IT+0xdc>)
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d00e      	beq.n	800e3e8 <HAL_TIM_Base_Start_IT+0x80>
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	4a1e      	ldr	r2, [pc, #120]	; (800e448 <HAL_TIM_Base_Start_IT+0xe0>)
 800e3d0:	4293      	cmp	r3, r2
 800e3d2:	d009      	beq.n	800e3e8 <HAL_TIM_Base_Start_IT+0x80>
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	4a1c      	ldr	r2, [pc, #112]	; (800e44c <HAL_TIM_Base_Start_IT+0xe4>)
 800e3da:	4293      	cmp	r3, r2
 800e3dc:	d004      	beq.n	800e3e8 <HAL_TIM_Base_Start_IT+0x80>
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	681b      	ldr	r3, [r3, #0]
 800e3e2:	4a1b      	ldr	r2, [pc, #108]	; (800e450 <HAL_TIM_Base_Start_IT+0xe8>)
 800e3e4:	4293      	cmp	r3, r2
 800e3e6:	d115      	bne.n	800e414 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	689a      	ldr	r2, [r3, #8]
 800e3ee:	4b19      	ldr	r3, [pc, #100]	; (800e454 <HAL_TIM_Base_Start_IT+0xec>)
 800e3f0:	4013      	ands	r3, r2
 800e3f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3f4:	68fb      	ldr	r3, [r7, #12]
 800e3f6:	2b06      	cmp	r3, #6
 800e3f8:	d015      	beq.n	800e426 <HAL_TIM_Base_Start_IT+0xbe>
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e400:	d011      	beq.n	800e426 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	681a      	ldr	r2, [r3, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	f042 0201 	orr.w	r2, r2, #1
 800e410:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e412:	e008      	b.n	800e426 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	681b      	ldr	r3, [r3, #0]
 800e418:	681a      	ldr	r2, [r3, #0]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	681b      	ldr	r3, [r3, #0]
 800e41e:	f042 0201 	orr.w	r2, r2, #1
 800e422:	601a      	str	r2, [r3, #0]
 800e424:	e000      	b.n	800e428 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e426:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e428:	2300      	movs	r3, #0
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3714      	adds	r7, #20
 800e42e:	46bd      	mov	sp, r7
 800e430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e434:	4770      	bx	lr
 800e436:	bf00      	nop
 800e438:	40010000 	.word	0x40010000
 800e43c:	40000400 	.word	0x40000400
 800e440:	40000800 	.word	0x40000800
 800e444:	40000c00 	.word	0x40000c00
 800e448:	40010400 	.word	0x40010400
 800e44c:	40001800 	.word	0x40001800
 800e450:	40014000 	.word	0x40014000
 800e454:	00010007 	.word	0x00010007

0800e458 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e462:	2300      	movs	r3, #0
 800e464:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e466:	683b      	ldr	r3, [r7, #0]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d109      	bne.n	800e480 <HAL_TIM_OC_Start_IT+0x28>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e472:	b2db      	uxtb	r3, r3
 800e474:	2b01      	cmp	r3, #1
 800e476:	bf14      	ite	ne
 800e478:	2301      	movne	r3, #1
 800e47a:	2300      	moveq	r3, #0
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	e03c      	b.n	800e4fa <HAL_TIM_OC_Start_IT+0xa2>
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	2b04      	cmp	r3, #4
 800e484:	d109      	bne.n	800e49a <HAL_TIM_OC_Start_IT+0x42>
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	2b01      	cmp	r3, #1
 800e490:	bf14      	ite	ne
 800e492:	2301      	movne	r3, #1
 800e494:	2300      	moveq	r3, #0
 800e496:	b2db      	uxtb	r3, r3
 800e498:	e02f      	b.n	800e4fa <HAL_TIM_OC_Start_IT+0xa2>
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2b08      	cmp	r3, #8
 800e49e:	d109      	bne.n	800e4b4 <HAL_TIM_OC_Start_IT+0x5c>
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e4a6:	b2db      	uxtb	r3, r3
 800e4a8:	2b01      	cmp	r3, #1
 800e4aa:	bf14      	ite	ne
 800e4ac:	2301      	movne	r3, #1
 800e4ae:	2300      	moveq	r3, #0
 800e4b0:	b2db      	uxtb	r3, r3
 800e4b2:	e022      	b.n	800e4fa <HAL_TIM_OC_Start_IT+0xa2>
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	2b0c      	cmp	r3, #12
 800e4b8:	d109      	bne.n	800e4ce <HAL_TIM_OC_Start_IT+0x76>
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e4c0:	b2db      	uxtb	r3, r3
 800e4c2:	2b01      	cmp	r3, #1
 800e4c4:	bf14      	ite	ne
 800e4c6:	2301      	movne	r3, #1
 800e4c8:	2300      	moveq	r3, #0
 800e4ca:	b2db      	uxtb	r3, r3
 800e4cc:	e015      	b.n	800e4fa <HAL_TIM_OC_Start_IT+0xa2>
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b10      	cmp	r3, #16
 800e4d2:	d109      	bne.n	800e4e8 <HAL_TIM_OC_Start_IT+0x90>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e4da:	b2db      	uxtb	r3, r3
 800e4dc:	2b01      	cmp	r3, #1
 800e4de:	bf14      	ite	ne
 800e4e0:	2301      	movne	r3, #1
 800e4e2:	2300      	moveq	r3, #0
 800e4e4:	b2db      	uxtb	r3, r3
 800e4e6:	e008      	b.n	800e4fa <HAL_TIM_OC_Start_IT+0xa2>
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	bf14      	ite	ne
 800e4f4:	2301      	movne	r3, #1
 800e4f6:	2300      	moveq	r3, #0
 800e4f8:	b2db      	uxtb	r3, r3
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d001      	beq.n	800e502 <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e4fe:	2301      	movs	r3, #1
 800e500:	e0ec      	b.n	800e6dc <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	2b00      	cmp	r3, #0
 800e506:	d104      	bne.n	800e512 <HAL_TIM_OC_Start_IT+0xba>
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	2202      	movs	r2, #2
 800e50c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e510:	e023      	b.n	800e55a <HAL_TIM_OC_Start_IT+0x102>
 800e512:	683b      	ldr	r3, [r7, #0]
 800e514:	2b04      	cmp	r3, #4
 800e516:	d104      	bne.n	800e522 <HAL_TIM_OC_Start_IT+0xca>
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	2202      	movs	r2, #2
 800e51c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e520:	e01b      	b.n	800e55a <HAL_TIM_OC_Start_IT+0x102>
 800e522:	683b      	ldr	r3, [r7, #0]
 800e524:	2b08      	cmp	r3, #8
 800e526:	d104      	bne.n	800e532 <HAL_TIM_OC_Start_IT+0xda>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	2202      	movs	r2, #2
 800e52c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e530:	e013      	b.n	800e55a <HAL_TIM_OC_Start_IT+0x102>
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	2b0c      	cmp	r3, #12
 800e536:	d104      	bne.n	800e542 <HAL_TIM_OC_Start_IT+0xea>
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	2202      	movs	r2, #2
 800e53c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e540:	e00b      	b.n	800e55a <HAL_TIM_OC_Start_IT+0x102>
 800e542:	683b      	ldr	r3, [r7, #0]
 800e544:	2b10      	cmp	r3, #16
 800e546:	d104      	bne.n	800e552 <HAL_TIM_OC_Start_IT+0xfa>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	2202      	movs	r2, #2
 800e54c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e550:	e003      	b.n	800e55a <HAL_TIM_OC_Start_IT+0x102>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	2202      	movs	r2, #2
 800e556:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e55a:	683b      	ldr	r3, [r7, #0]
 800e55c:	2b0c      	cmp	r3, #12
 800e55e:	d841      	bhi.n	800e5e4 <HAL_TIM_OC_Start_IT+0x18c>
 800e560:	a201      	add	r2, pc, #4	; (adr r2, 800e568 <HAL_TIM_OC_Start_IT+0x110>)
 800e562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e566:	bf00      	nop
 800e568:	0800e59d 	.word	0x0800e59d
 800e56c:	0800e5e5 	.word	0x0800e5e5
 800e570:	0800e5e5 	.word	0x0800e5e5
 800e574:	0800e5e5 	.word	0x0800e5e5
 800e578:	0800e5af 	.word	0x0800e5af
 800e57c:	0800e5e5 	.word	0x0800e5e5
 800e580:	0800e5e5 	.word	0x0800e5e5
 800e584:	0800e5e5 	.word	0x0800e5e5
 800e588:	0800e5c1 	.word	0x0800e5c1
 800e58c:	0800e5e5 	.word	0x0800e5e5
 800e590:	0800e5e5 	.word	0x0800e5e5
 800e594:	0800e5e5 	.word	0x0800e5e5
 800e598:	0800e5d3 	.word	0x0800e5d3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	68da      	ldr	r2, [r3, #12]
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f042 0202 	orr.w	r2, r2, #2
 800e5aa:	60da      	str	r2, [r3, #12]
      break;
 800e5ac:	e01d      	b.n	800e5ea <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	68da      	ldr	r2, [r3, #12]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	681b      	ldr	r3, [r3, #0]
 800e5b8:	f042 0204 	orr.w	r2, r2, #4
 800e5bc:	60da      	str	r2, [r3, #12]
      break;
 800e5be:	e014      	b.n	800e5ea <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68da      	ldr	r2, [r3, #12]
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	f042 0208 	orr.w	r2, r2, #8
 800e5ce:	60da      	str	r2, [r3, #12]
      break;
 800e5d0:	e00b      	b.n	800e5ea <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	681b      	ldr	r3, [r3, #0]
 800e5d6:	68da      	ldr	r2, [r3, #12]
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	f042 0210 	orr.w	r2, r2, #16
 800e5e0:	60da      	str	r2, [r3, #12]
      break;
 800e5e2:	e002      	b.n	800e5ea <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	73fb      	strb	r3, [r7, #15]
      break;
 800e5e8:	bf00      	nop
  }

  if (status == HAL_OK)
 800e5ea:	7bfb      	ldrb	r3, [r7, #15]
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d174      	bne.n	800e6da <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	2201      	movs	r2, #1
 800e5f6:	6839      	ldr	r1, [r7, #0]
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f001 f917 	bl	800f82c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	4a38      	ldr	r2, [pc, #224]	; (800e6e4 <HAL_TIM_OC_Start_IT+0x28c>)
 800e604:	4293      	cmp	r3, r2
 800e606:	d013      	beq.n	800e630 <HAL_TIM_OC_Start_IT+0x1d8>
 800e608:	687b      	ldr	r3, [r7, #4]
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	4a36      	ldr	r2, [pc, #216]	; (800e6e8 <HAL_TIM_OC_Start_IT+0x290>)
 800e60e:	4293      	cmp	r3, r2
 800e610:	d00e      	beq.n	800e630 <HAL_TIM_OC_Start_IT+0x1d8>
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681b      	ldr	r3, [r3, #0]
 800e616:	4a35      	ldr	r2, [pc, #212]	; (800e6ec <HAL_TIM_OC_Start_IT+0x294>)
 800e618:	4293      	cmp	r3, r2
 800e61a:	d009      	beq.n	800e630 <HAL_TIM_OC_Start_IT+0x1d8>
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	681b      	ldr	r3, [r3, #0]
 800e620:	4a33      	ldr	r2, [pc, #204]	; (800e6f0 <HAL_TIM_OC_Start_IT+0x298>)
 800e622:	4293      	cmp	r3, r2
 800e624:	d004      	beq.n	800e630 <HAL_TIM_OC_Start_IT+0x1d8>
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	4a32      	ldr	r2, [pc, #200]	; (800e6f4 <HAL_TIM_OC_Start_IT+0x29c>)
 800e62c:	4293      	cmp	r3, r2
 800e62e:	d101      	bne.n	800e634 <HAL_TIM_OC_Start_IT+0x1dc>
 800e630:	2301      	movs	r3, #1
 800e632:	e000      	b.n	800e636 <HAL_TIM_OC_Start_IT+0x1de>
 800e634:	2300      	movs	r3, #0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d007      	beq.n	800e64a <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	681b      	ldr	r3, [r3, #0]
 800e63e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e648:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	4a25      	ldr	r2, [pc, #148]	; (800e6e4 <HAL_TIM_OC_Start_IT+0x28c>)
 800e650:	4293      	cmp	r3, r2
 800e652:	d022      	beq.n	800e69a <HAL_TIM_OC_Start_IT+0x242>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e65c:	d01d      	beq.n	800e69a <HAL_TIM_OC_Start_IT+0x242>
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	4a25      	ldr	r2, [pc, #148]	; (800e6f8 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e664:	4293      	cmp	r3, r2
 800e666:	d018      	beq.n	800e69a <HAL_TIM_OC_Start_IT+0x242>
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4a23      	ldr	r2, [pc, #140]	; (800e6fc <HAL_TIM_OC_Start_IT+0x2a4>)
 800e66e:	4293      	cmp	r3, r2
 800e670:	d013      	beq.n	800e69a <HAL_TIM_OC_Start_IT+0x242>
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	4a22      	ldr	r2, [pc, #136]	; (800e700 <HAL_TIM_OC_Start_IT+0x2a8>)
 800e678:	4293      	cmp	r3, r2
 800e67a:	d00e      	beq.n	800e69a <HAL_TIM_OC_Start_IT+0x242>
 800e67c:	687b      	ldr	r3, [r7, #4]
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	4a19      	ldr	r2, [pc, #100]	; (800e6e8 <HAL_TIM_OC_Start_IT+0x290>)
 800e682:	4293      	cmp	r3, r2
 800e684:	d009      	beq.n	800e69a <HAL_TIM_OC_Start_IT+0x242>
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	681b      	ldr	r3, [r3, #0]
 800e68a:	4a1e      	ldr	r2, [pc, #120]	; (800e704 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e68c:	4293      	cmp	r3, r2
 800e68e:	d004      	beq.n	800e69a <HAL_TIM_OC_Start_IT+0x242>
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	4a15      	ldr	r2, [pc, #84]	; (800e6ec <HAL_TIM_OC_Start_IT+0x294>)
 800e696:	4293      	cmp	r3, r2
 800e698:	d115      	bne.n	800e6c6 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	689a      	ldr	r2, [r3, #8]
 800e6a0:	4b19      	ldr	r3, [pc, #100]	; (800e708 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e6a2:	4013      	ands	r3, r2
 800e6a4:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6a6:	68bb      	ldr	r3, [r7, #8]
 800e6a8:	2b06      	cmp	r3, #6
 800e6aa:	d015      	beq.n	800e6d8 <HAL_TIM_OC_Start_IT+0x280>
 800e6ac:	68bb      	ldr	r3, [r7, #8]
 800e6ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e6b2:	d011      	beq.n	800e6d8 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	681b      	ldr	r3, [r3, #0]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	f042 0201 	orr.w	r2, r2, #1
 800e6c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6c4:	e008      	b.n	800e6d8 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	681a      	ldr	r2, [r3, #0]
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	f042 0201 	orr.w	r2, r2, #1
 800e6d4:	601a      	str	r2, [r3, #0]
 800e6d6:	e000      	b.n	800e6da <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e6d8:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6dc:	4618      	mov	r0, r3
 800e6de:	3710      	adds	r7, #16
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	bd80      	pop	{r7, pc}
 800e6e4:	40010000 	.word	0x40010000
 800e6e8:	40010400 	.word	0x40010400
 800e6ec:	40014000 	.word	0x40014000
 800e6f0:	40014400 	.word	0x40014400
 800e6f4:	40014800 	.word	0x40014800
 800e6f8:	40000400 	.word	0x40000400
 800e6fc:	40000800 	.word	0x40000800
 800e700:	40000c00 	.word	0x40000c00
 800e704:	40001800 	.word	0x40001800
 800e708:	00010007 	.word	0x00010007

0800e70c <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b084      	sub	sp, #16
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e716:	2300      	movs	r3, #0
 800e718:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	2b0c      	cmp	r3, #12
 800e71e:	d841      	bhi.n	800e7a4 <HAL_TIM_OC_Stop_IT+0x98>
 800e720:	a201      	add	r2, pc, #4	; (adr r2, 800e728 <HAL_TIM_OC_Stop_IT+0x1c>)
 800e722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e726:	bf00      	nop
 800e728:	0800e75d 	.word	0x0800e75d
 800e72c:	0800e7a5 	.word	0x0800e7a5
 800e730:	0800e7a5 	.word	0x0800e7a5
 800e734:	0800e7a5 	.word	0x0800e7a5
 800e738:	0800e76f 	.word	0x0800e76f
 800e73c:	0800e7a5 	.word	0x0800e7a5
 800e740:	0800e7a5 	.word	0x0800e7a5
 800e744:	0800e7a5 	.word	0x0800e7a5
 800e748:	0800e781 	.word	0x0800e781
 800e74c:	0800e7a5 	.word	0x0800e7a5
 800e750:	0800e7a5 	.word	0x0800e7a5
 800e754:	0800e7a5 	.word	0x0800e7a5
 800e758:	0800e793 	.word	0x0800e793
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	68da      	ldr	r2, [r3, #12]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	f022 0202 	bic.w	r2, r2, #2
 800e76a:	60da      	str	r2, [r3, #12]
      break;
 800e76c:	e01d      	b.n	800e7aa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	68da      	ldr	r2, [r3, #12]
 800e774:	687b      	ldr	r3, [r7, #4]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f022 0204 	bic.w	r2, r2, #4
 800e77c:	60da      	str	r2, [r3, #12]
      break;
 800e77e:	e014      	b.n	800e7aa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	68da      	ldr	r2, [r3, #12]
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	f022 0208 	bic.w	r2, r2, #8
 800e78e:	60da      	str	r2, [r3, #12]
      break;
 800e790:	e00b      	b.n	800e7aa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	68da      	ldr	r2, [r3, #12]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f022 0210 	bic.w	r2, r2, #16
 800e7a0:	60da      	str	r2, [r3, #12]
      break;
 800e7a2:	e002      	b.n	800e7aa <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e7a4:	2301      	movs	r3, #1
 800e7a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e7a8:	bf00      	nop
  }

  if (status == HAL_OK)
 800e7aa:	7bfb      	ldrb	r3, [r7, #15]
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	f040 8081 	bne.w	800e8b4 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	2200      	movs	r2, #0
 800e7b8:	6839      	ldr	r1, [r7, #0]
 800e7ba:	4618      	mov	r0, r3
 800e7bc:	f001 f836 	bl	800f82c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	681b      	ldr	r3, [r3, #0]
 800e7c4:	4a3e      	ldr	r2, [pc, #248]	; (800e8c0 <HAL_TIM_OC_Stop_IT+0x1b4>)
 800e7c6:	4293      	cmp	r3, r2
 800e7c8:	d013      	beq.n	800e7f2 <HAL_TIM_OC_Stop_IT+0xe6>
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a3d      	ldr	r2, [pc, #244]	; (800e8c4 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	d00e      	beq.n	800e7f2 <HAL_TIM_OC_Stop_IT+0xe6>
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a3b      	ldr	r2, [pc, #236]	; (800e8c8 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d009      	beq.n	800e7f2 <HAL_TIM_OC_Stop_IT+0xe6>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	4a3a      	ldr	r2, [pc, #232]	; (800e8cc <HAL_TIM_OC_Stop_IT+0x1c0>)
 800e7e4:	4293      	cmp	r3, r2
 800e7e6:	d004      	beq.n	800e7f2 <HAL_TIM_OC_Stop_IT+0xe6>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	4a38      	ldr	r2, [pc, #224]	; (800e8d0 <HAL_TIM_OC_Stop_IT+0x1c4>)
 800e7ee:	4293      	cmp	r3, r2
 800e7f0:	d101      	bne.n	800e7f6 <HAL_TIM_OC_Stop_IT+0xea>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e000      	b.n	800e7f8 <HAL_TIM_OC_Stop_IT+0xec>
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d017      	beq.n	800e82c <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	681b      	ldr	r3, [r3, #0]
 800e800:	6a1a      	ldr	r2, [r3, #32]
 800e802:	f241 1311 	movw	r3, #4369	; 0x1111
 800e806:	4013      	ands	r3, r2
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d10f      	bne.n	800e82c <HAL_TIM_OC_Stop_IT+0x120>
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	6a1a      	ldr	r2, [r3, #32]
 800e812:	f240 4344 	movw	r3, #1092	; 0x444
 800e816:	4013      	ands	r3, r2
 800e818:	2b00      	cmp	r3, #0
 800e81a:	d107      	bne.n	800e82c <HAL_TIM_OC_Stop_IT+0x120>
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e822:	687b      	ldr	r3, [r7, #4]
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e82a:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	681b      	ldr	r3, [r3, #0]
 800e830:	6a1a      	ldr	r2, [r3, #32]
 800e832:	f241 1311 	movw	r3, #4369	; 0x1111
 800e836:	4013      	ands	r3, r2
 800e838:	2b00      	cmp	r3, #0
 800e83a:	d10f      	bne.n	800e85c <HAL_TIM_OC_Stop_IT+0x150>
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	6a1a      	ldr	r2, [r3, #32]
 800e842:	f240 4344 	movw	r3, #1092	; 0x444
 800e846:	4013      	ands	r3, r2
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d107      	bne.n	800e85c <HAL_TIM_OC_Stop_IT+0x150>
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	681a      	ldr	r2, [r3, #0]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	f022 0201 	bic.w	r2, r2, #1
 800e85a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d104      	bne.n	800e86c <HAL_TIM_OC_Stop_IT+0x160>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	2201      	movs	r2, #1
 800e866:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e86a:	e023      	b.n	800e8b4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e86c:	683b      	ldr	r3, [r7, #0]
 800e86e:	2b04      	cmp	r3, #4
 800e870:	d104      	bne.n	800e87c <HAL_TIM_OC_Stop_IT+0x170>
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	2201      	movs	r2, #1
 800e876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e87a:	e01b      	b.n	800e8b4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e87c:	683b      	ldr	r3, [r7, #0]
 800e87e:	2b08      	cmp	r3, #8
 800e880:	d104      	bne.n	800e88c <HAL_TIM_OC_Stop_IT+0x180>
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2201      	movs	r2, #1
 800e886:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e88a:	e013      	b.n	800e8b4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	2b0c      	cmp	r3, #12
 800e890:	d104      	bne.n	800e89c <HAL_TIM_OC_Stop_IT+0x190>
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2201      	movs	r2, #1
 800e896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e89a:	e00b      	b.n	800e8b4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e89c:	683b      	ldr	r3, [r7, #0]
 800e89e:	2b10      	cmp	r3, #16
 800e8a0:	d104      	bne.n	800e8ac <HAL_TIM_OC_Stop_IT+0x1a0>
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e8aa:	e003      	b.n	800e8b4 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	2201      	movs	r2, #1
 800e8b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800e8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8b6:	4618      	mov	r0, r3
 800e8b8:	3710      	adds	r7, #16
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bd80      	pop	{r7, pc}
 800e8be:	bf00      	nop
 800e8c0:	40010000 	.word	0x40010000
 800e8c4:	40010400 	.word	0x40010400
 800e8c8:	40014000 	.word	0x40014000
 800e8cc:	40014400 	.word	0x40014400
 800e8d0:	40014800 	.word	0x40014800

0800e8d4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e8d4:	b580      	push	{r7, lr}
 800e8d6:	b082      	sub	sp, #8
 800e8d8:	af00      	add	r7, sp, #0
 800e8da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d101      	bne.n	800e8e6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	e049      	b.n	800e97a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8ec:	b2db      	uxtb	r3, r3
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	d106      	bne.n	800e900 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	2200      	movs	r2, #0
 800e8f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 f841 	bl	800e982 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2202      	movs	r2, #2
 800e904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	681a      	ldr	r2, [r3, #0]
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	3304      	adds	r3, #4
 800e910:	4619      	mov	r1, r3
 800e912:	4610      	mov	r0, r2
 800e914:	f000 fb70 	bl	800eff8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	2201      	movs	r2, #1
 800e91c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2201      	movs	r2, #1
 800e924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2201      	movs	r2, #1
 800e92c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2201      	movs	r2, #1
 800e934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	2201      	movs	r2, #1
 800e93c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	2201      	movs	r2, #1
 800e944:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2201      	movs	r2, #1
 800e94c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2201      	movs	r2, #1
 800e954:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2201      	movs	r2, #1
 800e95c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	2201      	movs	r2, #1
 800e964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2201      	movs	r2, #1
 800e96c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	2201      	movs	r2, #1
 800e974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	3708      	adds	r7, #8
 800e97e:	46bd      	mov	sp, r7
 800e980:	bd80      	pop	{r7, pc}

0800e982 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e982:	b480      	push	{r7}
 800e984:	b083      	sub	sp, #12
 800e986:	af00      	add	r7, sp, #0
 800e988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e98a:	bf00      	nop
 800e98c:	370c      	adds	r7, #12
 800e98e:	46bd      	mov	sp, r7
 800e990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e994:	4770      	bx	lr

0800e996 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e996:	b580      	push	{r7, lr}
 800e998:	b084      	sub	sp, #16
 800e99a:	af00      	add	r7, sp, #0
 800e99c:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	68db      	ldr	r3, [r3, #12]
 800e9a4:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	691b      	ldr	r3, [r3, #16]
 800e9ac:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	f003 0302 	and.w	r3, r3, #2
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d020      	beq.n	800e9fa <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f003 0302 	and.w	r3, r3, #2
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d01b      	beq.n	800e9fa <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	f06f 0202 	mvn.w	r2, #2
 800e9ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2201      	movs	r2, #1
 800e9d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	699b      	ldr	r3, [r3, #24]
 800e9d8:	f003 0303 	and.w	r3, r3, #3
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d003      	beq.n	800e9e8 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e9e0:	6878      	ldr	r0, [r7, #4]
 800e9e2:	f000 faeb 	bl	800efbc <HAL_TIM_IC_CaptureCallback>
 800e9e6:	e005      	b.n	800e9f4 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f7f1 fdfb 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 faee 	bl	800efd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e9fa:	68bb      	ldr	r3, [r7, #8]
 800e9fc:	f003 0304 	and.w	r3, r3, #4
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	d020      	beq.n	800ea46 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	f003 0304 	and.w	r3, r3, #4
 800ea0a:	2b00      	cmp	r3, #0
 800ea0c:	d01b      	beq.n	800ea46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	f06f 0204 	mvn.w	r2, #4
 800ea16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2202      	movs	r2, #2
 800ea1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	699b      	ldr	r3, [r3, #24]
 800ea24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d003      	beq.n	800ea34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	f000 fac5 	bl	800efbc <HAL_TIM_IC_CaptureCallback>
 800ea32:	e005      	b.n	800ea40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f7f1 fdd5 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea3a:	6878      	ldr	r0, [r7, #4]
 800ea3c:	f000 fac8 	bl	800efd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	2200      	movs	r2, #0
 800ea44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ea46:	68bb      	ldr	r3, [r7, #8]
 800ea48:	f003 0308 	and.w	r3, r3, #8
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d020      	beq.n	800ea92 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	f003 0308 	and.w	r3, r3, #8
 800ea56:	2b00      	cmp	r3, #0
 800ea58:	d01b      	beq.n	800ea92 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	681b      	ldr	r3, [r3, #0]
 800ea5e:	f06f 0208 	mvn.w	r2, #8
 800ea62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2204      	movs	r2, #4
 800ea68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	69db      	ldr	r3, [r3, #28]
 800ea70:	f003 0303 	and.w	r3, r3, #3
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d003      	beq.n	800ea80 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea78:	6878      	ldr	r0, [r7, #4]
 800ea7a:	f000 fa9f 	bl	800efbc <HAL_TIM_IC_CaptureCallback>
 800ea7e:	e005      	b.n	800ea8c <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f7f1 fdaf 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea86:	6878      	ldr	r0, [r7, #4]
 800ea88:	f000 faa2 	bl	800efd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	2200      	movs	r2, #0
 800ea90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ea92:	68bb      	ldr	r3, [r7, #8]
 800ea94:	f003 0310 	and.w	r3, r3, #16
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d020      	beq.n	800eade <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	f003 0310 	and.w	r3, r3, #16
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d01b      	beq.n	800eade <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	f06f 0210 	mvn.w	r2, #16
 800eaae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2208      	movs	r2, #8
 800eab4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	69db      	ldr	r3, [r3, #28]
 800eabc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d003      	beq.n	800eacc <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f000 fa79 	bl	800efbc <HAL_TIM_IC_CaptureCallback>
 800eaca:	e005      	b.n	800ead8 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f7f1 fd89 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ead2:	6878      	ldr	r0, [r7, #4]
 800ead4:	f000 fa7c 	bl	800efd0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800eade:	68bb      	ldr	r3, [r7, #8]
 800eae0:	f003 0301 	and.w	r3, r3, #1
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	d00c      	beq.n	800eb02 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800eae8:	68fb      	ldr	r3, [r7, #12]
 800eaea:	f003 0301 	and.w	r3, r3, #1
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d007      	beq.n	800eb02 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f06f 0201 	mvn.w	r2, #1
 800eafa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7f4 f813 	bl	8002b28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eb02:	68bb      	ldr	r3, [r7, #8]
 800eb04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d104      	bne.n	800eb16 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eb0c:	68bb      	ldr	r3, [r7, #8]
 800eb0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d00c      	beq.n	800eb30 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eb16:	68fb      	ldr	r3, [r7, #12]
 800eb18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	d007      	beq.n	800eb30 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800eb28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 ffba 	bl	800faa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eb30:	68bb      	ldr	r3, [r7, #8]
 800eb32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d00c      	beq.n	800eb54 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eb3a:	68fb      	ldr	r3, [r7, #12]
 800eb3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d007      	beq.n	800eb54 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eb4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eb4e:	6878      	ldr	r0, [r7, #4]
 800eb50:	f000 ffb2 	bl	800fab8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d00c      	beq.n	800eb78 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	d007      	beq.n	800eb78 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eb70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb72:	6878      	ldr	r0, [r7, #4]
 800eb74:	f000 fa36 	bl	800efe4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eb78:	68bb      	ldr	r3, [r7, #8]
 800eb7a:	f003 0320 	and.w	r3, r3, #32
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00c      	beq.n	800eb9c <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	f003 0320 	and.w	r3, r3, #32
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	d007      	beq.n	800eb9c <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	f06f 0220 	mvn.w	r2, #32
 800eb94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb96:	6878      	ldr	r0, [r7, #4]
 800eb98:	f000 ff7a 	bl	800fa90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb9c:	bf00      	nop
 800eb9e:	3710      	adds	r7, #16
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}

0800eba4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eba4:	b580      	push	{r7, lr}
 800eba6:	b086      	sub	sp, #24
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	60f8      	str	r0, [r7, #12]
 800ebac:	60b9      	str	r1, [r7, #8]
 800ebae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ebb0:	2300      	movs	r3, #0
 800ebb2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ebba:	2b01      	cmp	r3, #1
 800ebbc:	d101      	bne.n	800ebc2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ebbe:	2302      	movs	r3, #2
 800ebc0:	e0ff      	b.n	800edc2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	2201      	movs	r2, #1
 800ebc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	2b14      	cmp	r3, #20
 800ebce:	f200 80f0 	bhi.w	800edb2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ebd2:	a201      	add	r2, pc, #4	; (adr r2, 800ebd8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ebd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ebd8:	0800ec2d 	.word	0x0800ec2d
 800ebdc:	0800edb3 	.word	0x0800edb3
 800ebe0:	0800edb3 	.word	0x0800edb3
 800ebe4:	0800edb3 	.word	0x0800edb3
 800ebe8:	0800ec6d 	.word	0x0800ec6d
 800ebec:	0800edb3 	.word	0x0800edb3
 800ebf0:	0800edb3 	.word	0x0800edb3
 800ebf4:	0800edb3 	.word	0x0800edb3
 800ebf8:	0800ecaf 	.word	0x0800ecaf
 800ebfc:	0800edb3 	.word	0x0800edb3
 800ec00:	0800edb3 	.word	0x0800edb3
 800ec04:	0800edb3 	.word	0x0800edb3
 800ec08:	0800ecef 	.word	0x0800ecef
 800ec0c:	0800edb3 	.word	0x0800edb3
 800ec10:	0800edb3 	.word	0x0800edb3
 800ec14:	0800edb3 	.word	0x0800edb3
 800ec18:	0800ed31 	.word	0x0800ed31
 800ec1c:	0800edb3 	.word	0x0800edb3
 800ec20:	0800edb3 	.word	0x0800edb3
 800ec24:	0800edb3 	.word	0x0800edb3
 800ec28:	0800ed71 	.word	0x0800ed71
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	68b9      	ldr	r1, [r7, #8]
 800ec32:	4618      	mov	r0, r3
 800ec34:	f000 fa86 	bl	800f144 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	681b      	ldr	r3, [r3, #0]
 800ec3c:	699a      	ldr	r2, [r3, #24]
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f042 0208 	orr.w	r2, r2, #8
 800ec46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	699a      	ldr	r2, [r3, #24]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	f022 0204 	bic.w	r2, r2, #4
 800ec56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	6999      	ldr	r1, [r3, #24]
 800ec5e:	68bb      	ldr	r3, [r7, #8]
 800ec60:	691a      	ldr	r2, [r3, #16]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	430a      	orrs	r2, r1
 800ec68:	619a      	str	r2, [r3, #24]
      break;
 800ec6a:	e0a5      	b.n	800edb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec6c:	68fb      	ldr	r3, [r7, #12]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	68b9      	ldr	r1, [r7, #8]
 800ec72:	4618      	mov	r0, r3
 800ec74:	f000 faf6 	bl	800f264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	699a      	ldr	r2, [r3, #24]
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	699a      	ldr	r2, [r3, #24]
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	6999      	ldr	r1, [r3, #24]
 800ec9e:	68bb      	ldr	r3, [r7, #8]
 800eca0:	691b      	ldr	r3, [r3, #16]
 800eca2:	021a      	lsls	r2, r3, #8
 800eca4:	68fb      	ldr	r3, [r7, #12]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	430a      	orrs	r2, r1
 800ecaa:	619a      	str	r2, [r3, #24]
      break;
 800ecac:	e084      	b.n	800edb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	681b      	ldr	r3, [r3, #0]
 800ecb2:	68b9      	ldr	r1, [r7, #8]
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	f000 fb5f 	bl	800f378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	69da      	ldr	r2, [r3, #28]
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f042 0208 	orr.w	r2, r2, #8
 800ecc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	69da      	ldr	r2, [r3, #28]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	f022 0204 	bic.w	r2, r2, #4
 800ecd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	69d9      	ldr	r1, [r3, #28]
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	691a      	ldr	r2, [r3, #16]
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	681b      	ldr	r3, [r3, #0]
 800ece8:	430a      	orrs	r2, r1
 800ecea:	61da      	str	r2, [r3, #28]
      break;
 800ecec:	e064      	b.n	800edb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	68b9      	ldr	r1, [r7, #8]
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	f000 fbc7 	bl	800f488 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	69da      	ldr	r2, [r3, #28]
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	69da      	ldr	r2, [r3, #28]
 800ed10:	68fb      	ldr	r3, [r7, #12]
 800ed12:	681b      	ldr	r3, [r3, #0]
 800ed14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ed1a:	68fb      	ldr	r3, [r7, #12]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	69d9      	ldr	r1, [r3, #28]
 800ed20:	68bb      	ldr	r3, [r7, #8]
 800ed22:	691b      	ldr	r3, [r3, #16]
 800ed24:	021a      	lsls	r2, r3, #8
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	681b      	ldr	r3, [r3, #0]
 800ed2a:	430a      	orrs	r2, r1
 800ed2c:	61da      	str	r2, [r3, #28]
      break;
 800ed2e:	e043      	b.n	800edb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	68b9      	ldr	r1, [r7, #8]
 800ed36:	4618      	mov	r0, r3
 800ed38:	f000 fc10 	bl	800f55c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	681b      	ldr	r3, [r3, #0]
 800ed40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	f042 0208 	orr.w	r2, r2, #8
 800ed4a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ed4c:	68fb      	ldr	r3, [r7, #12]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed52:	68fb      	ldr	r3, [r7, #12]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	f022 0204 	bic.w	r2, r2, #4
 800ed5a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ed5c:	68fb      	ldr	r3, [r7, #12]
 800ed5e:	681b      	ldr	r3, [r3, #0]
 800ed60:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed62:	68bb      	ldr	r3, [r7, #8]
 800ed64:	691a      	ldr	r2, [r3, #16]
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	681b      	ldr	r3, [r3, #0]
 800ed6a:	430a      	orrs	r2, r1
 800ed6c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed6e:	e023      	b.n	800edb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	68b9      	ldr	r1, [r7, #8]
 800ed76:	4618      	mov	r0, r3
 800ed78:	f000 fc54 	bl	800f624 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed7c:	68fb      	ldr	r3, [r7, #12]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed8a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed8c:	68fb      	ldr	r3, [r7, #12]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	681b      	ldr	r3, [r3, #0]
 800ed96:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed9a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed9c:	68fb      	ldr	r3, [r7, #12]
 800ed9e:	681b      	ldr	r3, [r3, #0]
 800eda0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	691b      	ldr	r3, [r3, #16]
 800eda6:	021a      	lsls	r2, r3, #8
 800eda8:	68fb      	ldr	r3, [r7, #12]
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	430a      	orrs	r2, r1
 800edae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800edb0:	e002      	b.n	800edb8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800edb2:	2301      	movs	r3, #1
 800edb4:	75fb      	strb	r3, [r7, #23]
      break;
 800edb6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	2200      	movs	r2, #0
 800edbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800edc0:	7dfb      	ldrb	r3, [r7, #23]
}
 800edc2:	4618      	mov	r0, r3
 800edc4:	3718      	adds	r7, #24
 800edc6:	46bd      	mov	sp, r7
 800edc8:	bd80      	pop	{r7, pc}
 800edca:	bf00      	nop

0800edcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800edcc:	b580      	push	{r7, lr}
 800edce:	b084      	sub	sp, #16
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800edd6:	2300      	movs	r3, #0
 800edd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ede0:	2b01      	cmp	r3, #1
 800ede2:	d101      	bne.n	800ede8 <HAL_TIM_ConfigClockSource+0x1c>
 800ede4:	2302      	movs	r3, #2
 800ede6:	e0dc      	b.n	800efa2 <HAL_TIM_ConfigClockSource+0x1d6>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2201      	movs	r2, #1
 800edec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	2202      	movs	r2, #2
 800edf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	689b      	ldr	r3, [r3, #8]
 800edfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ee00:	68ba      	ldr	r2, [r7, #8]
 800ee02:	4b6a      	ldr	r3, [pc, #424]	; (800efac <HAL_TIM_ConfigClockSource+0x1e0>)
 800ee04:	4013      	ands	r3, r2
 800ee06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ee0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	68ba      	ldr	r2, [r7, #8]
 800ee16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ee18:	683b      	ldr	r3, [r7, #0]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	4a64      	ldr	r2, [pc, #400]	; (800efb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	f000 80a9 	beq.w	800ef76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee24:	4a62      	ldr	r2, [pc, #392]	; (800efb0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800ee26:	4293      	cmp	r3, r2
 800ee28:	f200 80ae 	bhi.w	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee2c:	4a61      	ldr	r2, [pc, #388]	; (800efb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ee2e:	4293      	cmp	r3, r2
 800ee30:	f000 80a1 	beq.w	800ef76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee34:	4a5f      	ldr	r2, [pc, #380]	; (800efb4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800ee36:	4293      	cmp	r3, r2
 800ee38:	f200 80a6 	bhi.w	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee3c:	4a5e      	ldr	r2, [pc, #376]	; (800efb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ee3e:	4293      	cmp	r3, r2
 800ee40:	f000 8099 	beq.w	800ef76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee44:	4a5c      	ldr	r2, [pc, #368]	; (800efb8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ee46:	4293      	cmp	r3, r2
 800ee48:	f200 809e 	bhi.w	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee4c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ee50:	f000 8091 	beq.w	800ef76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee54:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ee58:	f200 8096 	bhi.w	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee5c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee60:	f000 8089 	beq.w	800ef76 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee68:	f200 808e 	bhi.w	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee70:	d03e      	beq.n	800eef0 <HAL_TIM_ConfigClockSource+0x124>
 800ee72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee76:	f200 8087 	bhi.w	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee7e:	f000 8086 	beq.w	800ef8e <HAL_TIM_ConfigClockSource+0x1c2>
 800ee82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee86:	d87f      	bhi.n	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee88:	2b70      	cmp	r3, #112	; 0x70
 800ee8a:	d01a      	beq.n	800eec2 <HAL_TIM_ConfigClockSource+0xf6>
 800ee8c:	2b70      	cmp	r3, #112	; 0x70
 800ee8e:	d87b      	bhi.n	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee90:	2b60      	cmp	r3, #96	; 0x60
 800ee92:	d050      	beq.n	800ef36 <HAL_TIM_ConfigClockSource+0x16a>
 800ee94:	2b60      	cmp	r3, #96	; 0x60
 800ee96:	d877      	bhi.n	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee98:	2b50      	cmp	r3, #80	; 0x50
 800ee9a:	d03c      	beq.n	800ef16 <HAL_TIM_ConfigClockSource+0x14a>
 800ee9c:	2b50      	cmp	r3, #80	; 0x50
 800ee9e:	d873      	bhi.n	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800eea0:	2b40      	cmp	r3, #64	; 0x40
 800eea2:	d058      	beq.n	800ef56 <HAL_TIM_ConfigClockSource+0x18a>
 800eea4:	2b40      	cmp	r3, #64	; 0x40
 800eea6:	d86f      	bhi.n	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800eea8:	2b30      	cmp	r3, #48	; 0x30
 800eeaa:	d064      	beq.n	800ef76 <HAL_TIM_ConfigClockSource+0x1aa>
 800eeac:	2b30      	cmp	r3, #48	; 0x30
 800eeae:	d86b      	bhi.n	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800eeb0:	2b20      	cmp	r3, #32
 800eeb2:	d060      	beq.n	800ef76 <HAL_TIM_ConfigClockSource+0x1aa>
 800eeb4:	2b20      	cmp	r3, #32
 800eeb6:	d867      	bhi.n	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d05c      	beq.n	800ef76 <HAL_TIM_ConfigClockSource+0x1aa>
 800eebc:	2b10      	cmp	r3, #16
 800eebe:	d05a      	beq.n	800ef76 <HAL_TIM_ConfigClockSource+0x1aa>
 800eec0:	e062      	b.n	800ef88 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6818      	ldr	r0, [r3, #0]
 800eec6:	683b      	ldr	r3, [r7, #0]
 800eec8:	6899      	ldr	r1, [r3, #8]
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	685a      	ldr	r2, [r3, #4]
 800eece:	683b      	ldr	r3, [r7, #0]
 800eed0:	68db      	ldr	r3, [r3, #12]
 800eed2:	f000 fc8b 	bl	800f7ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	689b      	ldr	r3, [r3, #8]
 800eedc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800eede:	68bb      	ldr	r3, [r7, #8]
 800eee0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eee4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	68ba      	ldr	r2, [r7, #8]
 800eeec:	609a      	str	r2, [r3, #8]
      break;
 800eeee:	e04f      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6818      	ldr	r0, [r3, #0]
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	6899      	ldr	r1, [r3, #8]
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	685a      	ldr	r2, [r3, #4]
 800eefc:	683b      	ldr	r3, [r7, #0]
 800eefe:	68db      	ldr	r3, [r3, #12]
 800ef00:	f000 fc74 	bl	800f7ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	689a      	ldr	r2, [r3, #8]
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ef12:	609a      	str	r2, [r3, #8]
      break;
 800ef14:	e03c      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	6818      	ldr	r0, [r3, #0]
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	6859      	ldr	r1, [r3, #4]
 800ef1e:	683b      	ldr	r3, [r7, #0]
 800ef20:	68db      	ldr	r3, [r3, #12]
 800ef22:	461a      	mov	r2, r3
 800ef24:	f000 fbe4 	bl	800f6f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	2150      	movs	r1, #80	; 0x50
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f000 fc3e 	bl	800f7b0 <TIM_ITRx_SetConfig>
      break;
 800ef34:	e02c      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6818      	ldr	r0, [r3, #0]
 800ef3a:	683b      	ldr	r3, [r7, #0]
 800ef3c:	6859      	ldr	r1, [r3, #4]
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	68db      	ldr	r3, [r3, #12]
 800ef42:	461a      	mov	r2, r3
 800ef44:	f000 fc03 	bl	800f74e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	2160      	movs	r1, #96	; 0x60
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f000 fc2e 	bl	800f7b0 <TIM_ITRx_SetConfig>
      break;
 800ef54:	e01c      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	6818      	ldr	r0, [r3, #0]
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	6859      	ldr	r1, [r3, #4]
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	68db      	ldr	r3, [r3, #12]
 800ef62:	461a      	mov	r2, r3
 800ef64:	f000 fbc4 	bl	800f6f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	2140      	movs	r1, #64	; 0x40
 800ef6e:	4618      	mov	r0, r3
 800ef70:	f000 fc1e 	bl	800f7b0 <TIM_ITRx_SetConfig>
      break;
 800ef74:	e00c      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	683b      	ldr	r3, [r7, #0]
 800ef7c:	681b      	ldr	r3, [r3, #0]
 800ef7e:	4619      	mov	r1, r3
 800ef80:	4610      	mov	r0, r2
 800ef82:	f000 fc15 	bl	800f7b0 <TIM_ITRx_SetConfig>
      break;
 800ef86:	e003      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ef88:	2301      	movs	r3, #1
 800ef8a:	73fb      	strb	r3, [r7, #15]
      break;
 800ef8c:	e000      	b.n	800ef90 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ef8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ef90:	687b      	ldr	r3, [r7, #4]
 800ef92:	2201      	movs	r2, #1
 800ef94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800efa0:	7bfb      	ldrb	r3, [r7, #15]
}
 800efa2:	4618      	mov	r0, r3
 800efa4:	3710      	adds	r7, #16
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	ffceff88 	.word	0xffceff88
 800efb0:	00100040 	.word	0x00100040
 800efb4:	00100030 	.word	0x00100030
 800efb8:	00100020 	.word	0x00100020

0800efbc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800efbc:	b480      	push	{r7}
 800efbe:	b083      	sub	sp, #12
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800efc4:	bf00      	nop
 800efc6:	370c      	adds	r7, #12
 800efc8:	46bd      	mov	sp, r7
 800efca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efce:	4770      	bx	lr

0800efd0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800efd0:	b480      	push	{r7}
 800efd2:	b083      	sub	sp, #12
 800efd4:	af00      	add	r7, sp, #0
 800efd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800efd8:	bf00      	nop
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr

0800efe4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efe4:	b480      	push	{r7}
 800efe6:	b083      	sub	sp, #12
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efec:	bf00      	nop
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr

0800eff8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800eff8:	b480      	push	{r7}
 800effa:	b085      	sub	sp, #20
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
 800f000:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	681b      	ldr	r3, [r3, #0]
 800f006:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	4a46      	ldr	r2, [pc, #280]	; (800f124 <TIM_Base_SetConfig+0x12c>)
 800f00c:	4293      	cmp	r3, r2
 800f00e:	d013      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f016:	d00f      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	4a43      	ldr	r2, [pc, #268]	; (800f128 <TIM_Base_SetConfig+0x130>)
 800f01c:	4293      	cmp	r3, r2
 800f01e:	d00b      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	4a42      	ldr	r2, [pc, #264]	; (800f12c <TIM_Base_SetConfig+0x134>)
 800f024:	4293      	cmp	r3, r2
 800f026:	d007      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4a41      	ldr	r2, [pc, #260]	; (800f130 <TIM_Base_SetConfig+0x138>)
 800f02c:	4293      	cmp	r3, r2
 800f02e:	d003      	beq.n	800f038 <TIM_Base_SetConfig+0x40>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	4a40      	ldr	r2, [pc, #256]	; (800f134 <TIM_Base_SetConfig+0x13c>)
 800f034:	4293      	cmp	r3, r2
 800f036:	d108      	bne.n	800f04a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f038:	68fb      	ldr	r3, [r7, #12]
 800f03a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f03e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f040:	683b      	ldr	r3, [r7, #0]
 800f042:	685b      	ldr	r3, [r3, #4]
 800f044:	68fa      	ldr	r2, [r7, #12]
 800f046:	4313      	orrs	r3, r2
 800f048:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4a35      	ldr	r2, [pc, #212]	; (800f124 <TIM_Base_SetConfig+0x12c>)
 800f04e:	4293      	cmp	r3, r2
 800f050:	d01f      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f058:	d01b      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	4a32      	ldr	r2, [pc, #200]	; (800f128 <TIM_Base_SetConfig+0x130>)
 800f05e:	4293      	cmp	r3, r2
 800f060:	d017      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	4a31      	ldr	r2, [pc, #196]	; (800f12c <TIM_Base_SetConfig+0x134>)
 800f066:	4293      	cmp	r3, r2
 800f068:	d013      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	4a30      	ldr	r2, [pc, #192]	; (800f130 <TIM_Base_SetConfig+0x138>)
 800f06e:	4293      	cmp	r3, r2
 800f070:	d00f      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	4a2f      	ldr	r2, [pc, #188]	; (800f134 <TIM_Base_SetConfig+0x13c>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d00b      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	4a2e      	ldr	r2, [pc, #184]	; (800f138 <TIM_Base_SetConfig+0x140>)
 800f07e:	4293      	cmp	r3, r2
 800f080:	d007      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	4a2d      	ldr	r2, [pc, #180]	; (800f13c <TIM_Base_SetConfig+0x144>)
 800f086:	4293      	cmp	r3, r2
 800f088:	d003      	beq.n	800f092 <TIM_Base_SetConfig+0x9a>
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	4a2c      	ldr	r2, [pc, #176]	; (800f140 <TIM_Base_SetConfig+0x148>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d108      	bne.n	800f0a4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f098:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f09a:	683b      	ldr	r3, [r7, #0]
 800f09c:	68db      	ldr	r3, [r3, #12]
 800f09e:	68fa      	ldr	r2, [r7, #12]
 800f0a0:	4313      	orrs	r3, r2
 800f0a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f0aa:	683b      	ldr	r3, [r7, #0]
 800f0ac:	695b      	ldr	r3, [r3, #20]
 800f0ae:	4313      	orrs	r3, r2
 800f0b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	68fa      	ldr	r2, [r7, #12]
 800f0b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f0b8:	683b      	ldr	r3, [r7, #0]
 800f0ba:	689a      	ldr	r2, [r3, #8]
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f0c0:	683b      	ldr	r3, [r7, #0]
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	4a16      	ldr	r2, [pc, #88]	; (800f124 <TIM_Base_SetConfig+0x12c>)
 800f0cc:	4293      	cmp	r3, r2
 800f0ce:	d00f      	beq.n	800f0f0 <TIM_Base_SetConfig+0xf8>
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4a18      	ldr	r2, [pc, #96]	; (800f134 <TIM_Base_SetConfig+0x13c>)
 800f0d4:	4293      	cmp	r3, r2
 800f0d6:	d00b      	beq.n	800f0f0 <TIM_Base_SetConfig+0xf8>
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	4a17      	ldr	r2, [pc, #92]	; (800f138 <TIM_Base_SetConfig+0x140>)
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d007      	beq.n	800f0f0 <TIM_Base_SetConfig+0xf8>
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	4a16      	ldr	r2, [pc, #88]	; (800f13c <TIM_Base_SetConfig+0x144>)
 800f0e4:	4293      	cmp	r3, r2
 800f0e6:	d003      	beq.n	800f0f0 <TIM_Base_SetConfig+0xf8>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	4a15      	ldr	r2, [pc, #84]	; (800f140 <TIM_Base_SetConfig+0x148>)
 800f0ec:	4293      	cmp	r3, r2
 800f0ee:	d103      	bne.n	800f0f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	691a      	ldr	r2, [r3, #16]
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2201      	movs	r2, #1
 800f0fc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	691b      	ldr	r3, [r3, #16]
 800f102:	f003 0301 	and.w	r3, r3, #1
 800f106:	2b01      	cmp	r3, #1
 800f108:	d105      	bne.n	800f116 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	691b      	ldr	r3, [r3, #16]
 800f10e:	f023 0201 	bic.w	r2, r3, #1
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	611a      	str	r2, [r3, #16]
  }
}
 800f116:	bf00      	nop
 800f118:	3714      	adds	r7, #20
 800f11a:	46bd      	mov	sp, r7
 800f11c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f120:	4770      	bx	lr
 800f122:	bf00      	nop
 800f124:	40010000 	.word	0x40010000
 800f128:	40000400 	.word	0x40000400
 800f12c:	40000800 	.word	0x40000800
 800f130:	40000c00 	.word	0x40000c00
 800f134:	40010400 	.word	0x40010400
 800f138:	40014000 	.word	0x40014000
 800f13c:	40014400 	.word	0x40014400
 800f140:	40014800 	.word	0x40014800

0800f144 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f144:	b480      	push	{r7}
 800f146:	b087      	sub	sp, #28
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
 800f14c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	6a1b      	ldr	r3, [r3, #32]
 800f152:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	6a1b      	ldr	r3, [r3, #32]
 800f158:	f023 0201 	bic.w	r2, r3, #1
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	685b      	ldr	r3, [r3, #4]
 800f164:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	699b      	ldr	r3, [r3, #24]
 800f16a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f16c:	68fa      	ldr	r2, [r7, #12]
 800f16e:	4b37      	ldr	r3, [pc, #220]	; (800f24c <TIM_OC1_SetConfig+0x108>)
 800f170:	4013      	ands	r3, r2
 800f172:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f023 0303 	bic.w	r3, r3, #3
 800f17a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f17c:	683b      	ldr	r3, [r7, #0]
 800f17e:	681b      	ldr	r3, [r3, #0]
 800f180:	68fa      	ldr	r2, [r7, #12]
 800f182:	4313      	orrs	r3, r2
 800f184:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	f023 0302 	bic.w	r3, r3, #2
 800f18c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f18e:	683b      	ldr	r3, [r7, #0]
 800f190:	689b      	ldr	r3, [r3, #8]
 800f192:	697a      	ldr	r2, [r7, #20]
 800f194:	4313      	orrs	r3, r2
 800f196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	4a2d      	ldr	r2, [pc, #180]	; (800f250 <TIM_OC1_SetConfig+0x10c>)
 800f19c:	4293      	cmp	r3, r2
 800f19e:	d00f      	beq.n	800f1c0 <TIM_OC1_SetConfig+0x7c>
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4a2c      	ldr	r2, [pc, #176]	; (800f254 <TIM_OC1_SetConfig+0x110>)
 800f1a4:	4293      	cmp	r3, r2
 800f1a6:	d00b      	beq.n	800f1c0 <TIM_OC1_SetConfig+0x7c>
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	4a2b      	ldr	r2, [pc, #172]	; (800f258 <TIM_OC1_SetConfig+0x114>)
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d007      	beq.n	800f1c0 <TIM_OC1_SetConfig+0x7c>
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	4a2a      	ldr	r2, [pc, #168]	; (800f25c <TIM_OC1_SetConfig+0x118>)
 800f1b4:	4293      	cmp	r3, r2
 800f1b6:	d003      	beq.n	800f1c0 <TIM_OC1_SetConfig+0x7c>
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	4a29      	ldr	r2, [pc, #164]	; (800f260 <TIM_OC1_SetConfig+0x11c>)
 800f1bc:	4293      	cmp	r3, r2
 800f1be:	d10c      	bne.n	800f1da <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f1c0:	697b      	ldr	r3, [r7, #20]
 800f1c2:	f023 0308 	bic.w	r3, r3, #8
 800f1c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	68db      	ldr	r3, [r3, #12]
 800f1cc:	697a      	ldr	r2, [r7, #20]
 800f1ce:	4313      	orrs	r3, r2
 800f1d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f1d2:	697b      	ldr	r3, [r7, #20]
 800f1d4:	f023 0304 	bic.w	r3, r3, #4
 800f1d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4a1c      	ldr	r2, [pc, #112]	; (800f250 <TIM_OC1_SetConfig+0x10c>)
 800f1de:	4293      	cmp	r3, r2
 800f1e0:	d00f      	beq.n	800f202 <TIM_OC1_SetConfig+0xbe>
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	4a1b      	ldr	r2, [pc, #108]	; (800f254 <TIM_OC1_SetConfig+0x110>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d00b      	beq.n	800f202 <TIM_OC1_SetConfig+0xbe>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	4a1a      	ldr	r2, [pc, #104]	; (800f258 <TIM_OC1_SetConfig+0x114>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d007      	beq.n	800f202 <TIM_OC1_SetConfig+0xbe>
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	4a19      	ldr	r2, [pc, #100]	; (800f25c <TIM_OC1_SetConfig+0x118>)
 800f1f6:	4293      	cmp	r3, r2
 800f1f8:	d003      	beq.n	800f202 <TIM_OC1_SetConfig+0xbe>
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	4a18      	ldr	r2, [pc, #96]	; (800f260 <TIM_OC1_SetConfig+0x11c>)
 800f1fe:	4293      	cmp	r3, r2
 800f200:	d111      	bne.n	800f226 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f202:	693b      	ldr	r3, [r7, #16]
 800f204:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f208:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f20a:	693b      	ldr	r3, [r7, #16]
 800f20c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f210:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f212:	683b      	ldr	r3, [r7, #0]
 800f214:	695b      	ldr	r3, [r3, #20]
 800f216:	693a      	ldr	r2, [r7, #16]
 800f218:	4313      	orrs	r3, r2
 800f21a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f21c:	683b      	ldr	r3, [r7, #0]
 800f21e:	699b      	ldr	r3, [r3, #24]
 800f220:	693a      	ldr	r2, [r7, #16]
 800f222:	4313      	orrs	r3, r2
 800f224:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	693a      	ldr	r2, [r7, #16]
 800f22a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	68fa      	ldr	r2, [r7, #12]
 800f230:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	685a      	ldr	r2, [r3, #4]
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	697a      	ldr	r2, [r7, #20]
 800f23e:	621a      	str	r2, [r3, #32]
}
 800f240:	bf00      	nop
 800f242:	371c      	adds	r7, #28
 800f244:	46bd      	mov	sp, r7
 800f246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f24a:	4770      	bx	lr
 800f24c:	fffeff8f 	.word	0xfffeff8f
 800f250:	40010000 	.word	0x40010000
 800f254:	40010400 	.word	0x40010400
 800f258:	40014000 	.word	0x40014000
 800f25c:	40014400 	.word	0x40014400
 800f260:	40014800 	.word	0x40014800

0800f264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f264:	b480      	push	{r7}
 800f266:	b087      	sub	sp, #28
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
 800f26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	6a1b      	ldr	r3, [r3, #32]
 800f272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	6a1b      	ldr	r3, [r3, #32]
 800f278:	f023 0210 	bic.w	r2, r3, #16
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	699b      	ldr	r3, [r3, #24]
 800f28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f28c:	68fa      	ldr	r2, [r7, #12]
 800f28e:	4b34      	ldr	r3, [pc, #208]	; (800f360 <TIM_OC2_SetConfig+0xfc>)
 800f290:	4013      	ands	r3, r2
 800f292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f29a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	021b      	lsls	r3, r3, #8
 800f2a2:	68fa      	ldr	r2, [r7, #12]
 800f2a4:	4313      	orrs	r3, r2
 800f2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	f023 0320 	bic.w	r3, r3, #32
 800f2ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f2b0:	683b      	ldr	r3, [r7, #0]
 800f2b2:	689b      	ldr	r3, [r3, #8]
 800f2b4:	011b      	lsls	r3, r3, #4
 800f2b6:	697a      	ldr	r2, [r7, #20]
 800f2b8:	4313      	orrs	r3, r2
 800f2ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4a29      	ldr	r2, [pc, #164]	; (800f364 <TIM_OC2_SetConfig+0x100>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d003      	beq.n	800f2cc <TIM_OC2_SetConfig+0x68>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a28      	ldr	r2, [pc, #160]	; (800f368 <TIM_OC2_SetConfig+0x104>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d10d      	bne.n	800f2e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f2cc:	697b      	ldr	r3, [r7, #20]
 800f2ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f2d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	68db      	ldr	r3, [r3, #12]
 800f2d8:	011b      	lsls	r3, r3, #4
 800f2da:	697a      	ldr	r2, [r7, #20]
 800f2dc:	4313      	orrs	r3, r2
 800f2de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f2e0:	697b      	ldr	r3, [r7, #20]
 800f2e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	4a1e      	ldr	r2, [pc, #120]	; (800f364 <TIM_OC2_SetConfig+0x100>)
 800f2ec:	4293      	cmp	r3, r2
 800f2ee:	d00f      	beq.n	800f310 <TIM_OC2_SetConfig+0xac>
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	4a1d      	ldr	r2, [pc, #116]	; (800f368 <TIM_OC2_SetConfig+0x104>)
 800f2f4:	4293      	cmp	r3, r2
 800f2f6:	d00b      	beq.n	800f310 <TIM_OC2_SetConfig+0xac>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	4a1c      	ldr	r2, [pc, #112]	; (800f36c <TIM_OC2_SetConfig+0x108>)
 800f2fc:	4293      	cmp	r3, r2
 800f2fe:	d007      	beq.n	800f310 <TIM_OC2_SetConfig+0xac>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	4a1b      	ldr	r2, [pc, #108]	; (800f370 <TIM_OC2_SetConfig+0x10c>)
 800f304:	4293      	cmp	r3, r2
 800f306:	d003      	beq.n	800f310 <TIM_OC2_SetConfig+0xac>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	4a1a      	ldr	r2, [pc, #104]	; (800f374 <TIM_OC2_SetConfig+0x110>)
 800f30c:	4293      	cmp	r3, r2
 800f30e:	d113      	bne.n	800f338 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f316:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f318:	693b      	ldr	r3, [r7, #16]
 800f31a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f31e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f320:	683b      	ldr	r3, [r7, #0]
 800f322:	695b      	ldr	r3, [r3, #20]
 800f324:	009b      	lsls	r3, r3, #2
 800f326:	693a      	ldr	r2, [r7, #16]
 800f328:	4313      	orrs	r3, r2
 800f32a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f32c:	683b      	ldr	r3, [r7, #0]
 800f32e:	699b      	ldr	r3, [r3, #24]
 800f330:	009b      	lsls	r3, r3, #2
 800f332:	693a      	ldr	r2, [r7, #16]
 800f334:	4313      	orrs	r3, r2
 800f336:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	693a      	ldr	r2, [r7, #16]
 800f33c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	68fa      	ldr	r2, [r7, #12]
 800f342:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f344:	683b      	ldr	r3, [r7, #0]
 800f346:	685a      	ldr	r2, [r3, #4]
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	697a      	ldr	r2, [r7, #20]
 800f350:	621a      	str	r2, [r3, #32]
}
 800f352:	bf00      	nop
 800f354:	371c      	adds	r7, #28
 800f356:	46bd      	mov	sp, r7
 800f358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f35c:	4770      	bx	lr
 800f35e:	bf00      	nop
 800f360:	feff8fff 	.word	0xfeff8fff
 800f364:	40010000 	.word	0x40010000
 800f368:	40010400 	.word	0x40010400
 800f36c:	40014000 	.word	0x40014000
 800f370:	40014400 	.word	0x40014400
 800f374:	40014800 	.word	0x40014800

0800f378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f378:	b480      	push	{r7}
 800f37a:	b087      	sub	sp, #28
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
 800f380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6a1b      	ldr	r3, [r3, #32]
 800f386:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6a1b      	ldr	r3, [r3, #32]
 800f38c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	685b      	ldr	r3, [r3, #4]
 800f398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	69db      	ldr	r3, [r3, #28]
 800f39e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	4b33      	ldr	r3, [pc, #204]	; (800f470 <TIM_OC3_SetConfig+0xf8>)
 800f3a4:	4013      	ands	r3, r2
 800f3a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	f023 0303 	bic.w	r3, r3, #3
 800f3ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f3b0:	683b      	ldr	r3, [r7, #0]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	4313      	orrs	r3, r2
 800f3b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f3ba:	697b      	ldr	r3, [r7, #20]
 800f3bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f3c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	689b      	ldr	r3, [r3, #8]
 800f3c6:	021b      	lsls	r3, r3, #8
 800f3c8:	697a      	ldr	r2, [r7, #20]
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a28      	ldr	r2, [pc, #160]	; (800f474 <TIM_OC3_SetConfig+0xfc>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d003      	beq.n	800f3de <TIM_OC3_SetConfig+0x66>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a27      	ldr	r2, [pc, #156]	; (800f478 <TIM_OC3_SetConfig+0x100>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d10d      	bne.n	800f3fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f3de:	697b      	ldr	r3, [r7, #20]
 800f3e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	68db      	ldr	r3, [r3, #12]
 800f3ea:	021b      	lsls	r3, r3, #8
 800f3ec:	697a      	ldr	r2, [r7, #20]
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	4a1d      	ldr	r2, [pc, #116]	; (800f474 <TIM_OC3_SetConfig+0xfc>)
 800f3fe:	4293      	cmp	r3, r2
 800f400:	d00f      	beq.n	800f422 <TIM_OC3_SetConfig+0xaa>
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	4a1c      	ldr	r2, [pc, #112]	; (800f478 <TIM_OC3_SetConfig+0x100>)
 800f406:	4293      	cmp	r3, r2
 800f408:	d00b      	beq.n	800f422 <TIM_OC3_SetConfig+0xaa>
 800f40a:	687b      	ldr	r3, [r7, #4]
 800f40c:	4a1b      	ldr	r2, [pc, #108]	; (800f47c <TIM_OC3_SetConfig+0x104>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d007      	beq.n	800f422 <TIM_OC3_SetConfig+0xaa>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	4a1a      	ldr	r2, [pc, #104]	; (800f480 <TIM_OC3_SetConfig+0x108>)
 800f416:	4293      	cmp	r3, r2
 800f418:	d003      	beq.n	800f422 <TIM_OC3_SetConfig+0xaa>
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	4a19      	ldr	r2, [pc, #100]	; (800f484 <TIM_OC3_SetConfig+0x10c>)
 800f41e:	4293      	cmp	r3, r2
 800f420:	d113      	bne.n	800f44a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f422:	693b      	ldr	r3, [r7, #16]
 800f424:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f428:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f42a:	693b      	ldr	r3, [r7, #16]
 800f42c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f430:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f432:	683b      	ldr	r3, [r7, #0]
 800f434:	695b      	ldr	r3, [r3, #20]
 800f436:	011b      	lsls	r3, r3, #4
 800f438:	693a      	ldr	r2, [r7, #16]
 800f43a:	4313      	orrs	r3, r2
 800f43c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f43e:	683b      	ldr	r3, [r7, #0]
 800f440:	699b      	ldr	r3, [r3, #24]
 800f442:	011b      	lsls	r3, r3, #4
 800f444:	693a      	ldr	r2, [r7, #16]
 800f446:	4313      	orrs	r3, r2
 800f448:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	693a      	ldr	r2, [r7, #16]
 800f44e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	68fa      	ldr	r2, [r7, #12]
 800f454:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	685a      	ldr	r2, [r3, #4]
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	697a      	ldr	r2, [r7, #20]
 800f462:	621a      	str	r2, [r3, #32]
}
 800f464:	bf00      	nop
 800f466:	371c      	adds	r7, #28
 800f468:	46bd      	mov	sp, r7
 800f46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f46e:	4770      	bx	lr
 800f470:	fffeff8f 	.word	0xfffeff8f
 800f474:	40010000 	.word	0x40010000
 800f478:	40010400 	.word	0x40010400
 800f47c:	40014000 	.word	0x40014000
 800f480:	40014400 	.word	0x40014400
 800f484:	40014800 	.word	0x40014800

0800f488 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f488:	b480      	push	{r7}
 800f48a:	b087      	sub	sp, #28
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	6a1b      	ldr	r3, [r3, #32]
 800f496:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	6a1b      	ldr	r3, [r3, #32]
 800f49c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f4a0:	687b      	ldr	r3, [r7, #4]
 800f4a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	685b      	ldr	r3, [r3, #4]
 800f4a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	69db      	ldr	r3, [r3, #28]
 800f4ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	4b24      	ldr	r3, [pc, #144]	; (800f544 <TIM_OC4_SetConfig+0xbc>)
 800f4b4:	4013      	ands	r3, r2
 800f4b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f4b8:	68fb      	ldr	r3, [r7, #12]
 800f4ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f4be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f4c0:	683b      	ldr	r3, [r7, #0]
 800f4c2:	681b      	ldr	r3, [r3, #0]
 800f4c4:	021b      	lsls	r3, r3, #8
 800f4c6:	68fa      	ldr	r2, [r7, #12]
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f4d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f4d4:	683b      	ldr	r3, [r7, #0]
 800f4d6:	689b      	ldr	r3, [r3, #8]
 800f4d8:	031b      	lsls	r3, r3, #12
 800f4da:	693a      	ldr	r2, [r7, #16]
 800f4dc:	4313      	orrs	r3, r2
 800f4de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4a19      	ldr	r2, [pc, #100]	; (800f548 <TIM_OC4_SetConfig+0xc0>)
 800f4e4:	4293      	cmp	r3, r2
 800f4e6:	d00f      	beq.n	800f508 <TIM_OC4_SetConfig+0x80>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4a18      	ldr	r2, [pc, #96]	; (800f54c <TIM_OC4_SetConfig+0xc4>)
 800f4ec:	4293      	cmp	r3, r2
 800f4ee:	d00b      	beq.n	800f508 <TIM_OC4_SetConfig+0x80>
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a17      	ldr	r2, [pc, #92]	; (800f550 <TIM_OC4_SetConfig+0xc8>)
 800f4f4:	4293      	cmp	r3, r2
 800f4f6:	d007      	beq.n	800f508 <TIM_OC4_SetConfig+0x80>
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4a16      	ldr	r2, [pc, #88]	; (800f554 <TIM_OC4_SetConfig+0xcc>)
 800f4fc:	4293      	cmp	r3, r2
 800f4fe:	d003      	beq.n	800f508 <TIM_OC4_SetConfig+0x80>
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	4a15      	ldr	r2, [pc, #84]	; (800f558 <TIM_OC4_SetConfig+0xd0>)
 800f504:	4293      	cmp	r3, r2
 800f506:	d109      	bne.n	800f51c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f508:	697b      	ldr	r3, [r7, #20]
 800f50a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f50e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	695b      	ldr	r3, [r3, #20]
 800f514:	019b      	lsls	r3, r3, #6
 800f516:	697a      	ldr	r2, [r7, #20]
 800f518:	4313      	orrs	r3, r2
 800f51a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	697a      	ldr	r2, [r7, #20]
 800f520:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	68fa      	ldr	r2, [r7, #12]
 800f526:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f528:	683b      	ldr	r3, [r7, #0]
 800f52a:	685a      	ldr	r2, [r3, #4]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	693a      	ldr	r2, [r7, #16]
 800f534:	621a      	str	r2, [r3, #32]
}
 800f536:	bf00      	nop
 800f538:	371c      	adds	r7, #28
 800f53a:	46bd      	mov	sp, r7
 800f53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f540:	4770      	bx	lr
 800f542:	bf00      	nop
 800f544:	feff8fff 	.word	0xfeff8fff
 800f548:	40010000 	.word	0x40010000
 800f54c:	40010400 	.word	0x40010400
 800f550:	40014000 	.word	0x40014000
 800f554:	40014400 	.word	0x40014400
 800f558:	40014800 	.word	0x40014800

0800f55c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f55c:	b480      	push	{r7}
 800f55e:	b087      	sub	sp, #28
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
 800f564:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6a1b      	ldr	r3, [r3, #32]
 800f56a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	6a1b      	ldr	r3, [r3, #32]
 800f570:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	685b      	ldr	r3, [r3, #4]
 800f57c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f584:	68fa      	ldr	r2, [r7, #12]
 800f586:	4b21      	ldr	r3, [pc, #132]	; (800f60c <TIM_OC5_SetConfig+0xb0>)
 800f588:	4013      	ands	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f58c:	683b      	ldr	r3, [r7, #0]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	68fa      	ldr	r2, [r7, #12]
 800f592:	4313      	orrs	r3, r2
 800f594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f59c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f59e:	683b      	ldr	r3, [r7, #0]
 800f5a0:	689b      	ldr	r3, [r3, #8]
 800f5a2:	041b      	lsls	r3, r3, #16
 800f5a4:	693a      	ldr	r2, [r7, #16]
 800f5a6:	4313      	orrs	r3, r2
 800f5a8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	4a18      	ldr	r2, [pc, #96]	; (800f610 <TIM_OC5_SetConfig+0xb4>)
 800f5ae:	4293      	cmp	r3, r2
 800f5b0:	d00f      	beq.n	800f5d2 <TIM_OC5_SetConfig+0x76>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4a17      	ldr	r2, [pc, #92]	; (800f614 <TIM_OC5_SetConfig+0xb8>)
 800f5b6:	4293      	cmp	r3, r2
 800f5b8:	d00b      	beq.n	800f5d2 <TIM_OC5_SetConfig+0x76>
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	4a16      	ldr	r2, [pc, #88]	; (800f618 <TIM_OC5_SetConfig+0xbc>)
 800f5be:	4293      	cmp	r3, r2
 800f5c0:	d007      	beq.n	800f5d2 <TIM_OC5_SetConfig+0x76>
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	4a15      	ldr	r2, [pc, #84]	; (800f61c <TIM_OC5_SetConfig+0xc0>)
 800f5c6:	4293      	cmp	r3, r2
 800f5c8:	d003      	beq.n	800f5d2 <TIM_OC5_SetConfig+0x76>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4a14      	ldr	r2, [pc, #80]	; (800f620 <TIM_OC5_SetConfig+0xc4>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	d109      	bne.n	800f5e6 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f5d2:	697b      	ldr	r3, [r7, #20]
 800f5d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f5d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f5da:	683b      	ldr	r3, [r7, #0]
 800f5dc:	695b      	ldr	r3, [r3, #20]
 800f5de:	021b      	lsls	r3, r3, #8
 800f5e0:	697a      	ldr	r2, [r7, #20]
 800f5e2:	4313      	orrs	r3, r2
 800f5e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	697a      	ldr	r2, [r7, #20]
 800f5ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	68fa      	ldr	r2, [r7, #12]
 800f5f0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f5f2:	683b      	ldr	r3, [r7, #0]
 800f5f4:	685a      	ldr	r2, [r3, #4]
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	693a      	ldr	r2, [r7, #16]
 800f5fe:	621a      	str	r2, [r3, #32]
}
 800f600:	bf00      	nop
 800f602:	371c      	adds	r7, #28
 800f604:	46bd      	mov	sp, r7
 800f606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60a:	4770      	bx	lr
 800f60c:	fffeff8f 	.word	0xfffeff8f
 800f610:	40010000 	.word	0x40010000
 800f614:	40010400 	.word	0x40010400
 800f618:	40014000 	.word	0x40014000
 800f61c:	40014400 	.word	0x40014400
 800f620:	40014800 	.word	0x40014800

0800f624 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f624:	b480      	push	{r7}
 800f626:	b087      	sub	sp, #28
 800f628:	af00      	add	r7, sp, #0
 800f62a:	6078      	str	r0, [r7, #4]
 800f62c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	6a1b      	ldr	r3, [r3, #32]
 800f632:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6a1b      	ldr	r3, [r3, #32]
 800f638:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	685b      	ldr	r3, [r3, #4]
 800f644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f64a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f64c:	68fa      	ldr	r2, [r7, #12]
 800f64e:	4b22      	ldr	r3, [pc, #136]	; (800f6d8 <TIM_OC6_SetConfig+0xb4>)
 800f650:	4013      	ands	r3, r2
 800f652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f654:	683b      	ldr	r3, [r7, #0]
 800f656:	681b      	ldr	r3, [r3, #0]
 800f658:	021b      	lsls	r3, r3, #8
 800f65a:	68fa      	ldr	r2, [r7, #12]
 800f65c:	4313      	orrs	r3, r2
 800f65e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	689b      	ldr	r3, [r3, #8]
 800f66c:	051b      	lsls	r3, r3, #20
 800f66e:	693a      	ldr	r2, [r7, #16]
 800f670:	4313      	orrs	r3, r2
 800f672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4a19      	ldr	r2, [pc, #100]	; (800f6dc <TIM_OC6_SetConfig+0xb8>)
 800f678:	4293      	cmp	r3, r2
 800f67a:	d00f      	beq.n	800f69c <TIM_OC6_SetConfig+0x78>
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	4a18      	ldr	r2, [pc, #96]	; (800f6e0 <TIM_OC6_SetConfig+0xbc>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d00b      	beq.n	800f69c <TIM_OC6_SetConfig+0x78>
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	4a17      	ldr	r2, [pc, #92]	; (800f6e4 <TIM_OC6_SetConfig+0xc0>)
 800f688:	4293      	cmp	r3, r2
 800f68a:	d007      	beq.n	800f69c <TIM_OC6_SetConfig+0x78>
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	4a16      	ldr	r2, [pc, #88]	; (800f6e8 <TIM_OC6_SetConfig+0xc4>)
 800f690:	4293      	cmp	r3, r2
 800f692:	d003      	beq.n	800f69c <TIM_OC6_SetConfig+0x78>
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	4a15      	ldr	r2, [pc, #84]	; (800f6ec <TIM_OC6_SetConfig+0xc8>)
 800f698:	4293      	cmp	r3, r2
 800f69a:	d109      	bne.n	800f6b0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f6a2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f6a4:	683b      	ldr	r3, [r7, #0]
 800f6a6:	695b      	ldr	r3, [r3, #20]
 800f6a8:	029b      	lsls	r3, r3, #10
 800f6aa:	697a      	ldr	r2, [r7, #20]
 800f6ac:	4313      	orrs	r3, r2
 800f6ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f6b0:	687b      	ldr	r3, [r7, #4]
 800f6b2:	697a      	ldr	r2, [r7, #20]
 800f6b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	68fa      	ldr	r2, [r7, #12]
 800f6ba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f6bc:	683b      	ldr	r3, [r7, #0]
 800f6be:	685a      	ldr	r2, [r3, #4]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f6c4:	687b      	ldr	r3, [r7, #4]
 800f6c6:	693a      	ldr	r2, [r7, #16]
 800f6c8:	621a      	str	r2, [r3, #32]
}
 800f6ca:	bf00      	nop
 800f6cc:	371c      	adds	r7, #28
 800f6ce:	46bd      	mov	sp, r7
 800f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	feff8fff 	.word	0xfeff8fff
 800f6dc:	40010000 	.word	0x40010000
 800f6e0:	40010400 	.word	0x40010400
 800f6e4:	40014000 	.word	0x40014000
 800f6e8:	40014400 	.word	0x40014400
 800f6ec:	40014800 	.word	0x40014800

0800f6f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b087      	sub	sp, #28
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	60f8      	str	r0, [r7, #12]
 800f6f8:	60b9      	str	r1, [r7, #8]
 800f6fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	6a1b      	ldr	r3, [r3, #32]
 800f700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6a1b      	ldr	r3, [r3, #32]
 800f706:	f023 0201 	bic.w	r2, r3, #1
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	699b      	ldr	r3, [r3, #24]
 800f712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f714:	693b      	ldr	r3, [r7, #16]
 800f716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f71a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	011b      	lsls	r3, r3, #4
 800f720:	693a      	ldr	r2, [r7, #16]
 800f722:	4313      	orrs	r3, r2
 800f724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f726:	697b      	ldr	r3, [r7, #20]
 800f728:	f023 030a 	bic.w	r3, r3, #10
 800f72c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f72e:	697a      	ldr	r2, [r7, #20]
 800f730:	68bb      	ldr	r3, [r7, #8]
 800f732:	4313      	orrs	r3, r2
 800f734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	693a      	ldr	r2, [r7, #16]
 800f73a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	697a      	ldr	r2, [r7, #20]
 800f740:	621a      	str	r2, [r3, #32]
}
 800f742:	bf00      	nop
 800f744:	371c      	adds	r7, #28
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr

0800f74e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f74e:	b480      	push	{r7}
 800f750:	b087      	sub	sp, #28
 800f752:	af00      	add	r7, sp, #0
 800f754:	60f8      	str	r0, [r7, #12]
 800f756:	60b9      	str	r1, [r7, #8]
 800f758:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	6a1b      	ldr	r3, [r3, #32]
 800f75e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	6a1b      	ldr	r3, [r3, #32]
 800f764:	f023 0210 	bic.w	r2, r3, #16
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	699b      	ldr	r3, [r3, #24]
 800f770:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f778:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	031b      	lsls	r3, r3, #12
 800f77e:	693a      	ldr	r2, [r7, #16]
 800f780:	4313      	orrs	r3, r2
 800f782:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f784:	697b      	ldr	r3, [r7, #20]
 800f786:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f78a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f78c:	68bb      	ldr	r3, [r7, #8]
 800f78e:	011b      	lsls	r3, r3, #4
 800f790:	697a      	ldr	r2, [r7, #20]
 800f792:	4313      	orrs	r3, r2
 800f794:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	693a      	ldr	r2, [r7, #16]
 800f79a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	697a      	ldr	r2, [r7, #20]
 800f7a0:	621a      	str	r2, [r3, #32]
}
 800f7a2:	bf00      	nop
 800f7a4:	371c      	adds	r7, #28
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr
	...

0800f7b0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	b085      	sub	sp, #20
 800f7b4:	af00      	add	r7, sp, #0
 800f7b6:	6078      	str	r0, [r7, #4]
 800f7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	689b      	ldr	r3, [r3, #8]
 800f7be:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f7c0:	68fa      	ldr	r2, [r7, #12]
 800f7c2:	4b09      	ldr	r3, [pc, #36]	; (800f7e8 <TIM_ITRx_SetConfig+0x38>)
 800f7c4:	4013      	ands	r3, r2
 800f7c6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f7c8:	683a      	ldr	r2, [r7, #0]
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	4313      	orrs	r3, r2
 800f7ce:	f043 0307 	orr.w	r3, r3, #7
 800f7d2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	68fa      	ldr	r2, [r7, #12]
 800f7d8:	609a      	str	r2, [r3, #8]
}
 800f7da:	bf00      	nop
 800f7dc:	3714      	adds	r7, #20
 800f7de:	46bd      	mov	sp, r7
 800f7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e4:	4770      	bx	lr
 800f7e6:	bf00      	nop
 800f7e8:	ffcfff8f 	.word	0xffcfff8f

0800f7ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b087      	sub	sp, #28
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	60f8      	str	r0, [r7, #12]
 800f7f4:	60b9      	str	r1, [r7, #8]
 800f7f6:	607a      	str	r2, [r7, #4]
 800f7f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	689b      	ldr	r3, [r3, #8]
 800f7fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f800:	697b      	ldr	r3, [r7, #20]
 800f802:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f806:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f808:	683b      	ldr	r3, [r7, #0]
 800f80a:	021a      	lsls	r2, r3, #8
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	431a      	orrs	r2, r3
 800f810:	68bb      	ldr	r3, [r7, #8]
 800f812:	4313      	orrs	r3, r2
 800f814:	697a      	ldr	r2, [r7, #20]
 800f816:	4313      	orrs	r3, r2
 800f818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	697a      	ldr	r2, [r7, #20]
 800f81e:	609a      	str	r2, [r3, #8]
}
 800f820:	bf00      	nop
 800f822:	371c      	adds	r7, #28
 800f824:	46bd      	mov	sp, r7
 800f826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82a:	4770      	bx	lr

0800f82c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f82c:	b480      	push	{r7}
 800f82e:	b087      	sub	sp, #28
 800f830:	af00      	add	r7, sp, #0
 800f832:	60f8      	str	r0, [r7, #12]
 800f834:	60b9      	str	r1, [r7, #8]
 800f836:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f838:	68bb      	ldr	r3, [r7, #8]
 800f83a:	f003 031f 	and.w	r3, r3, #31
 800f83e:	2201      	movs	r2, #1
 800f840:	fa02 f303 	lsl.w	r3, r2, r3
 800f844:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f846:	68fb      	ldr	r3, [r7, #12]
 800f848:	6a1a      	ldr	r2, [r3, #32]
 800f84a:	697b      	ldr	r3, [r7, #20]
 800f84c:	43db      	mvns	r3, r3
 800f84e:	401a      	ands	r2, r3
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6a1a      	ldr	r2, [r3, #32]
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	f003 031f 	and.w	r3, r3, #31
 800f85e:	6879      	ldr	r1, [r7, #4]
 800f860:	fa01 f303 	lsl.w	r3, r1, r3
 800f864:	431a      	orrs	r2, r3
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	621a      	str	r2, [r3, #32]
}
 800f86a:	bf00      	nop
 800f86c:	371c      	adds	r7, #28
 800f86e:	46bd      	mov	sp, r7
 800f870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f874:	4770      	bx	lr
	...

0800f878 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f878:	b480      	push	{r7}
 800f87a:	b085      	sub	sp, #20
 800f87c:	af00      	add	r7, sp, #0
 800f87e:	6078      	str	r0, [r7, #4]
 800f880:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d101      	bne.n	800f890 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f88c:	2302      	movs	r3, #2
 800f88e:	e06d      	b.n	800f96c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2201      	movs	r2, #1
 800f894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	2202      	movs	r2, #2
 800f89c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	685b      	ldr	r3, [r3, #4]
 800f8a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	681b      	ldr	r3, [r3, #0]
 800f8ac:	689b      	ldr	r3, [r3, #8]
 800f8ae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	4a30      	ldr	r2, [pc, #192]	; (800f978 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f8b6:	4293      	cmp	r3, r2
 800f8b8:	d004      	beq.n	800f8c4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	4a2f      	ldr	r2, [pc, #188]	; (800f97c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f8c0:	4293      	cmp	r3, r2
 800f8c2:	d108      	bne.n	800f8d6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f8c4:	68fb      	ldr	r3, [r7, #12]
 800f8c6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f8ca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f8cc:	683b      	ldr	r3, [r7, #0]
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	68fa      	ldr	r2, [r7, #12]
 800f8d2:	4313      	orrs	r3, r2
 800f8d4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f8d6:	68fb      	ldr	r3, [r7, #12]
 800f8d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f8dc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	68fa      	ldr	r2, [r7, #12]
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	68fa      	ldr	r2, [r7, #12]
 800f8ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	4a20      	ldr	r2, [pc, #128]	; (800f978 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f8f6:	4293      	cmp	r3, r2
 800f8f8:	d022      	beq.n	800f940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	681b      	ldr	r3, [r3, #0]
 800f8fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f902:	d01d      	beq.n	800f940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4a1d      	ldr	r2, [pc, #116]	; (800f980 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d018      	beq.n	800f940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	4a1c      	ldr	r2, [pc, #112]	; (800f984 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f914:	4293      	cmp	r3, r2
 800f916:	d013      	beq.n	800f940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	681b      	ldr	r3, [r3, #0]
 800f91c:	4a1a      	ldr	r2, [pc, #104]	; (800f988 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f91e:	4293      	cmp	r3, r2
 800f920:	d00e      	beq.n	800f940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	4a15      	ldr	r2, [pc, #84]	; (800f97c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f928:	4293      	cmp	r3, r2
 800f92a:	d009      	beq.n	800f940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	681b      	ldr	r3, [r3, #0]
 800f930:	4a16      	ldr	r2, [pc, #88]	; (800f98c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f932:	4293      	cmp	r3, r2
 800f934:	d004      	beq.n	800f940 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	681b      	ldr	r3, [r3, #0]
 800f93a:	4a15      	ldr	r2, [pc, #84]	; (800f990 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f93c:	4293      	cmp	r3, r2
 800f93e:	d10c      	bne.n	800f95a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f940:	68bb      	ldr	r3, [r7, #8]
 800f942:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f946:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f948:	683b      	ldr	r3, [r7, #0]
 800f94a:	689b      	ldr	r3, [r3, #8]
 800f94c:	68ba      	ldr	r2, [r7, #8]
 800f94e:	4313      	orrs	r3, r2
 800f950:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	68ba      	ldr	r2, [r7, #8]
 800f958:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2201      	movs	r2, #1
 800f95e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	2200      	movs	r2, #0
 800f966:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f96a:	2300      	movs	r3, #0
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3714      	adds	r7, #20
 800f970:	46bd      	mov	sp, r7
 800f972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f976:	4770      	bx	lr
 800f978:	40010000 	.word	0x40010000
 800f97c:	40010400 	.word	0x40010400
 800f980:	40000400 	.word	0x40000400
 800f984:	40000800 	.word	0x40000800
 800f988:	40000c00 	.word	0x40000c00
 800f98c:	40001800 	.word	0x40001800
 800f990:	40014000 	.word	0x40014000

0800f994 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f994:	b480      	push	{r7}
 800f996:	b085      	sub	sp, #20
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
 800f99c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f99e:	2300      	movs	r3, #0
 800f9a0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9a8:	2b01      	cmp	r3, #1
 800f9aa:	d101      	bne.n	800f9b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f9ac:	2302      	movs	r3, #2
 800f9ae:	e065      	b.n	800fa7c <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	68db      	ldr	r3, [r3, #12]
 800f9c2:	4313      	orrs	r3, r2
 800f9c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f9cc:	683b      	ldr	r3, [r7, #0]
 800f9ce:	689b      	ldr	r3, [r3, #8]
 800f9d0:	4313      	orrs	r3, r2
 800f9d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f9da:	683b      	ldr	r3, [r7, #0]
 800f9dc:	685b      	ldr	r3, [r3, #4]
 800f9de:	4313      	orrs	r3, r2
 800f9e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f9e2:	68fb      	ldr	r3, [r7, #12]
 800f9e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f9e8:	683b      	ldr	r3, [r7, #0]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	4313      	orrs	r3, r2
 800f9ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f9f0:	68fb      	ldr	r3, [r7, #12]
 800f9f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9f6:	683b      	ldr	r3, [r7, #0]
 800f9f8:	691b      	ldr	r3, [r3, #16]
 800f9fa:	4313      	orrs	r3, r2
 800f9fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f9fe:	68fb      	ldr	r3, [r7, #12]
 800fa00:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	695b      	ldr	r3, [r3, #20]
 800fa08:	4313      	orrs	r3, r2
 800fa0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fa0c:	68fb      	ldr	r3, [r7, #12]
 800fa0e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fa12:	683b      	ldr	r3, [r7, #0]
 800fa14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fa16:	4313      	orrs	r3, r2
 800fa18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fa20:	683b      	ldr	r3, [r7, #0]
 800fa22:	699b      	ldr	r3, [r3, #24]
 800fa24:	041b      	lsls	r3, r3, #16
 800fa26:	4313      	orrs	r3, r2
 800fa28:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4a16      	ldr	r2, [pc, #88]	; (800fa88 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800fa30:	4293      	cmp	r3, r2
 800fa32:	d004      	beq.n	800fa3e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800fa34:	687b      	ldr	r3, [r7, #4]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	4a14      	ldr	r2, [pc, #80]	; (800fa8c <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d115      	bne.n	800fa6a <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fa44:	683b      	ldr	r3, [r7, #0]
 800fa46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa48:	051b      	lsls	r3, r3, #20
 800fa4a:	4313      	orrs	r3, r2
 800fa4c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fa54:	683b      	ldr	r3, [r7, #0]
 800fa56:	69db      	ldr	r3, [r3, #28]
 800fa58:	4313      	orrs	r3, r2
 800fa5a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fa62:	683b      	ldr	r3, [r7, #0]
 800fa64:	6a1b      	ldr	r3, [r3, #32]
 800fa66:	4313      	orrs	r3, r2
 800fa68:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	2200      	movs	r2, #0
 800fa76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fa7a:	2300      	movs	r3, #0
}
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	3714      	adds	r7, #20
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr
 800fa88:	40010000 	.word	0x40010000
 800fa8c:	40010400 	.word	0x40010400

0800fa90 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa90:	b480      	push	{r7}
 800fa92:	b083      	sub	sp, #12
 800fa94:	af00      	add	r7, sp, #0
 800fa96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa98:	bf00      	nop
 800fa9a:	370c      	adds	r7, #12
 800fa9c:	46bd      	mov	sp, r7
 800fa9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa2:	4770      	bx	lr

0800faa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800faa4:	b480      	push	{r7}
 800faa6:	b083      	sub	sp, #12
 800faa8:	af00      	add	r7, sp, #0
 800faaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800faac:	bf00      	nop
 800faae:	370c      	adds	r7, #12
 800fab0:	46bd      	mov	sp, r7
 800fab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab6:	4770      	bx	lr

0800fab8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fab8:	b480      	push	{r7}
 800faba:	b083      	sub	sp, #12
 800fabc:	af00      	add	r7, sp, #0
 800fabe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fac0:	bf00      	nop
 800fac2:	370c      	adds	r7, #12
 800fac4:	46bd      	mov	sp, r7
 800fac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faca:	4770      	bx	lr

0800facc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b082      	sub	sp, #8
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d101      	bne.n	800fade <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fada:	2301      	movs	r3, #1
 800fadc:	e042      	b.n	800fb64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	d106      	bne.n	800faf6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	2200      	movs	r2, #0
 800faec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f7f3 fc3f 	bl	8003374 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800faf6:	687b      	ldr	r3, [r7, #4]
 800faf8:	2224      	movs	r2, #36	; 0x24
 800fafa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	681a      	ldr	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	f022 0201 	bic.w	r2, r2, #1
 800fb0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d002      	beq.n	800fb1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fb16:	6878      	ldr	r0, [r7, #4]
 800fb18:	f001 fb8c 	bl	8011234 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 fe21 	bl	8010764 <UART_SetConfig>
 800fb22:	4603      	mov	r3, r0
 800fb24:	2b01      	cmp	r3, #1
 800fb26:	d101      	bne.n	800fb2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fb28:	2301      	movs	r3, #1
 800fb2a:	e01b      	b.n	800fb64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	685a      	ldr	r2, [r3, #4]
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	681b      	ldr	r3, [r3, #0]
 800fb40:	689a      	ldr	r2, [r3, #8]
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	681a      	ldr	r2, [r3, #0]
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	f042 0201 	orr.w	r2, r2, #1
 800fb5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f001 fc0b 	bl	8011378 <UART_CheckIdleState>
 800fb62:	4603      	mov	r3, r0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3708      	adds	r7, #8
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}

0800fb6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb6c:	b580      	push	{r7, lr}
 800fb6e:	b08a      	sub	sp, #40	; 0x28
 800fb70:	af02      	add	r7, sp, #8
 800fb72:	60f8      	str	r0, [r7, #12]
 800fb74:	60b9      	str	r1, [r7, #8]
 800fb76:	603b      	str	r3, [r7, #0]
 800fb78:	4613      	mov	r3, r2
 800fb7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb82:	2b20      	cmp	r3, #32
 800fb84:	d17b      	bne.n	800fc7e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d002      	beq.n	800fb92 <HAL_UART_Transmit+0x26>
 800fb8c:	88fb      	ldrh	r3, [r7, #6]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d101      	bne.n	800fb96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fb92:	2301      	movs	r3, #1
 800fb94:	e074      	b.n	800fc80 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb96:	68fb      	ldr	r3, [r7, #12]
 800fb98:	2200      	movs	r2, #0
 800fb9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	2221      	movs	r2, #33	; 0x21
 800fba2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fba6:	f7f3 ff63 	bl	8003a70 <HAL_GetTick>
 800fbaa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fbac:	68fb      	ldr	r3, [r7, #12]
 800fbae:	88fa      	ldrh	r2, [r7, #6]
 800fbb0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	88fa      	ldrh	r2, [r7, #6]
 800fbb8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fbbc:	68fb      	ldr	r3, [r7, #12]
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fbc4:	d108      	bne.n	800fbd8 <HAL_UART_Transmit+0x6c>
 800fbc6:	68fb      	ldr	r3, [r7, #12]
 800fbc8:	691b      	ldr	r3, [r3, #16]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d104      	bne.n	800fbd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fbd2:	68bb      	ldr	r3, [r7, #8]
 800fbd4:	61bb      	str	r3, [r7, #24]
 800fbd6:	e003      	b.n	800fbe0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fbdc:	2300      	movs	r3, #0
 800fbde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fbe0:	e030      	b.n	800fc44 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fbe2:	683b      	ldr	r3, [r7, #0]
 800fbe4:	9300      	str	r3, [sp, #0]
 800fbe6:	697b      	ldr	r3, [r7, #20]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	2180      	movs	r1, #128	; 0x80
 800fbec:	68f8      	ldr	r0, [r7, #12]
 800fbee:	f001 fc6d 	bl	80114cc <UART_WaitOnFlagUntilTimeout>
 800fbf2:	4603      	mov	r3, r0
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d005      	beq.n	800fc04 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	2220      	movs	r2, #32
 800fbfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fc00:	2303      	movs	r3, #3
 800fc02:	e03d      	b.n	800fc80 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d10b      	bne.n	800fc22 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fc0a:	69bb      	ldr	r3, [r7, #24]
 800fc0c:	881b      	ldrh	r3, [r3, #0]
 800fc0e:	461a      	mov	r2, r3
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fc18:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fc1a:	69bb      	ldr	r3, [r7, #24]
 800fc1c:	3302      	adds	r3, #2
 800fc1e:	61bb      	str	r3, [r7, #24]
 800fc20:	e007      	b.n	800fc32 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fc22:	69fb      	ldr	r3, [r7, #28]
 800fc24:	781a      	ldrb	r2, [r3, #0]
 800fc26:	68fb      	ldr	r3, [r7, #12]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fc2c:	69fb      	ldr	r3, [r7, #28]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fc32:	68fb      	ldr	r3, [r7, #12]
 800fc34:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc38:	b29b      	uxth	r3, r3
 800fc3a:	3b01      	subs	r3, #1
 800fc3c:	b29a      	uxth	r2, r3
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc4a:	b29b      	uxth	r3, r3
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d1c8      	bne.n	800fbe2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	9300      	str	r3, [sp, #0]
 800fc54:	697b      	ldr	r3, [r7, #20]
 800fc56:	2200      	movs	r2, #0
 800fc58:	2140      	movs	r1, #64	; 0x40
 800fc5a:	68f8      	ldr	r0, [r7, #12]
 800fc5c:	f001 fc36 	bl	80114cc <UART_WaitOnFlagUntilTimeout>
 800fc60:	4603      	mov	r3, r0
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d005      	beq.n	800fc72 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fc66:	68fb      	ldr	r3, [r7, #12]
 800fc68:	2220      	movs	r2, #32
 800fc6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fc6e:	2303      	movs	r3, #3
 800fc70:	e006      	b.n	800fc80 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	2220      	movs	r2, #32
 800fc76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fc7a:	2300      	movs	r3, #0
 800fc7c:	e000      	b.n	800fc80 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fc7e:	2302      	movs	r3, #2
  }
}
 800fc80:	4618      	mov	r0, r3
 800fc82:	3720      	adds	r7, #32
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bd80      	pop	{r7, pc}

0800fc88 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b08a      	sub	sp, #40	; 0x28
 800fc8c:	af02      	add	r7, sp, #8
 800fc8e:	60f8      	str	r0, [r7, #12]
 800fc90:	60b9      	str	r1, [r7, #8]
 800fc92:	603b      	str	r3, [r7, #0]
 800fc94:	4613      	mov	r3, r2
 800fc96:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc98:	68fb      	ldr	r3, [r7, #12]
 800fc9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc9e:	2b20      	cmp	r3, #32
 800fca0:	f040 80b5 	bne.w	800fe0e <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d002      	beq.n	800fcb0 <HAL_UART_Receive+0x28>
 800fcaa:	88fb      	ldrh	r3, [r7, #6]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d101      	bne.n	800fcb4 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fcb0:	2301      	movs	r3, #1
 800fcb2:	e0ad      	b.n	800fe10 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	2222      	movs	r2, #34	; 0x22
 800fcc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fcca:	f7f3 fed1 	bl	8003a70 <HAL_GetTick>
 800fcce:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fcd0:	68fb      	ldr	r3, [r7, #12]
 800fcd2:	88fa      	ldrh	r2, [r7, #6]
 800fcd4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	88fa      	ldrh	r2, [r7, #6]
 800fcdc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fce0:	68fb      	ldr	r3, [r7, #12]
 800fce2:	689b      	ldr	r3, [r3, #8]
 800fce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fce8:	d10e      	bne.n	800fd08 <HAL_UART_Receive+0x80>
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	691b      	ldr	r3, [r3, #16]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d105      	bne.n	800fcfe <HAL_UART_Receive+0x76>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fcf8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcfc:	e02d      	b.n	800fd5a <HAL_UART_Receive+0xd2>
 800fcfe:	68fb      	ldr	r3, [r7, #12]
 800fd00:	22ff      	movs	r2, #255	; 0xff
 800fd02:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd06:	e028      	b.n	800fd5a <HAL_UART_Receive+0xd2>
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	689b      	ldr	r3, [r3, #8]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d10d      	bne.n	800fd2c <HAL_UART_Receive+0xa4>
 800fd10:	68fb      	ldr	r3, [r7, #12]
 800fd12:	691b      	ldr	r3, [r3, #16]
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d104      	bne.n	800fd22 <HAL_UART_Receive+0x9a>
 800fd18:	68fb      	ldr	r3, [r7, #12]
 800fd1a:	22ff      	movs	r2, #255	; 0xff
 800fd1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd20:	e01b      	b.n	800fd5a <HAL_UART_Receive+0xd2>
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	227f      	movs	r2, #127	; 0x7f
 800fd26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd2a:	e016      	b.n	800fd5a <HAL_UART_Receive+0xd2>
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	689b      	ldr	r3, [r3, #8]
 800fd30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fd34:	d10d      	bne.n	800fd52 <HAL_UART_Receive+0xca>
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	691b      	ldr	r3, [r3, #16]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d104      	bne.n	800fd48 <HAL_UART_Receive+0xc0>
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	227f      	movs	r2, #127	; 0x7f
 800fd42:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd46:	e008      	b.n	800fd5a <HAL_UART_Receive+0xd2>
 800fd48:	68fb      	ldr	r3, [r7, #12]
 800fd4a:	223f      	movs	r2, #63	; 0x3f
 800fd4c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd50:	e003      	b.n	800fd5a <HAL_UART_Receive+0xd2>
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	2200      	movs	r2, #0
 800fd56:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd60:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd62:	68fb      	ldr	r3, [r7, #12]
 800fd64:	689b      	ldr	r3, [r3, #8]
 800fd66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd6a:	d108      	bne.n	800fd7e <HAL_UART_Receive+0xf6>
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	691b      	ldr	r3, [r3, #16]
 800fd70:	2b00      	cmp	r3, #0
 800fd72:	d104      	bne.n	800fd7e <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fd74:	2300      	movs	r3, #0
 800fd76:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	61bb      	str	r3, [r7, #24]
 800fd7c:	e003      	b.n	800fd86 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fd7e:	68bb      	ldr	r3, [r7, #8]
 800fd80:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fd82:	2300      	movs	r3, #0
 800fd84:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fd86:	e036      	b.n	800fdf6 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fd88:	683b      	ldr	r3, [r7, #0]
 800fd8a:	9300      	str	r3, [sp, #0]
 800fd8c:	697b      	ldr	r3, [r7, #20]
 800fd8e:	2200      	movs	r2, #0
 800fd90:	2120      	movs	r1, #32
 800fd92:	68f8      	ldr	r0, [r7, #12]
 800fd94:	f001 fb9a 	bl	80114cc <UART_WaitOnFlagUntilTimeout>
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d005      	beq.n	800fdaa <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fd9e:	68fb      	ldr	r3, [r7, #12]
 800fda0:	2220      	movs	r2, #32
 800fda2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fda6:	2303      	movs	r3, #3
 800fda8:	e032      	b.n	800fe10 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fdaa:	69fb      	ldr	r3, [r7, #28]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d10c      	bne.n	800fdca <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdb6:	b29a      	uxth	r2, r3
 800fdb8:	8a7b      	ldrh	r3, [r7, #18]
 800fdba:	4013      	ands	r3, r2
 800fdbc:	b29a      	uxth	r2, r3
 800fdbe:	69bb      	ldr	r3, [r7, #24]
 800fdc0:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fdc2:	69bb      	ldr	r3, [r7, #24]
 800fdc4:	3302      	adds	r3, #2
 800fdc6:	61bb      	str	r3, [r7, #24]
 800fdc8:	e00c      	b.n	800fde4 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd0:	b2da      	uxtb	r2, r3
 800fdd2:	8a7b      	ldrh	r3, [r7, #18]
 800fdd4:	b2db      	uxtb	r3, r3
 800fdd6:	4013      	ands	r3, r2
 800fdd8:	b2da      	uxtb	r2, r3
 800fdda:	69fb      	ldr	r3, [r7, #28]
 800fddc:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	3301      	adds	r3, #1
 800fde2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdea:	b29b      	uxth	r3, r3
 800fdec:	3b01      	subs	r3, #1
 800fdee:	b29a      	uxth	r2, r3
 800fdf0:	68fb      	ldr	r3, [r7, #12]
 800fdf2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdfc:	b29b      	uxth	r3, r3
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d1c2      	bne.n	800fd88 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	2220      	movs	r2, #32
 800fe06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	e000      	b.n	800fe10 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fe0e:	2302      	movs	r3, #2
  }
}
 800fe10:	4618      	mov	r0, r3
 800fe12:	3720      	adds	r7, #32
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}

0800fe18 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	b08a      	sub	sp, #40	; 0x28
 800fe1c:	af00      	add	r7, sp, #0
 800fe1e:	60f8      	str	r0, [r7, #12]
 800fe20:	60b9      	str	r1, [r7, #8]
 800fe22:	4613      	mov	r3, r2
 800fe24:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fe26:	68fb      	ldr	r3, [r7, #12]
 800fe28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fe2c:	2b20      	cmp	r3, #32
 800fe2e:	d137      	bne.n	800fea0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe30:	68bb      	ldr	r3, [r7, #8]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d002      	beq.n	800fe3c <HAL_UART_Receive_IT+0x24>
 800fe36:	88fb      	ldrh	r3, [r7, #6]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d101      	bne.n	800fe40 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fe3c:	2301      	movs	r3, #1
 800fe3e:	e030      	b.n	800fea2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	2200      	movs	r2, #0
 800fe44:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	4a18      	ldr	r2, [pc, #96]	; (800feac <HAL_UART_Receive_IT+0x94>)
 800fe4c:	4293      	cmp	r3, r2
 800fe4e:	d01f      	beq.n	800fe90 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	685b      	ldr	r3, [r3, #4]
 800fe56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d018      	beq.n	800fe90 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe5e:	68fb      	ldr	r3, [r7, #12]
 800fe60:	681b      	ldr	r3, [r3, #0]
 800fe62:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe64:	697b      	ldr	r3, [r7, #20]
 800fe66:	e853 3f00 	ldrex	r3, [r3]
 800fe6a:	613b      	str	r3, [r7, #16]
   return(result);
 800fe6c:	693b      	ldr	r3, [r7, #16]
 800fe6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe72:	627b      	str	r3, [r7, #36]	; 0x24
 800fe74:	68fb      	ldr	r3, [r7, #12]
 800fe76:	681b      	ldr	r3, [r3, #0]
 800fe78:	461a      	mov	r2, r3
 800fe7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7c:	623b      	str	r3, [r7, #32]
 800fe7e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe80:	69f9      	ldr	r1, [r7, #28]
 800fe82:	6a3a      	ldr	r2, [r7, #32]
 800fe84:	e841 2300 	strex	r3, r2, [r1]
 800fe88:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe8a:	69bb      	ldr	r3, [r7, #24]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d1e6      	bne.n	800fe5e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fe90:	88fb      	ldrh	r3, [r7, #6]
 800fe92:	461a      	mov	r2, r3
 800fe94:	68b9      	ldr	r1, [r7, #8]
 800fe96:	68f8      	ldr	r0, [r7, #12]
 800fe98:	f001 fb86 	bl	80115a8 <UART_Start_Receive_IT>
 800fe9c:	4603      	mov	r3, r0
 800fe9e:	e000      	b.n	800fea2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fea0:	2302      	movs	r3, #2
  }
}
 800fea2:	4618      	mov	r0, r3
 800fea4:	3728      	adds	r7, #40	; 0x28
 800fea6:	46bd      	mov	sp, r7
 800fea8:	bd80      	pop	{r7, pc}
 800feaa:	bf00      	nop
 800feac:	58000c00 	.word	0x58000c00

0800feb0 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b08a      	sub	sp, #40	; 0x28
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	60f8      	str	r0, [r7, #12]
 800feb8:	60b9      	str	r1, [r7, #8]
 800feba:	4613      	mov	r3, r2
 800febc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fec4:	2b20      	cmp	r3, #32
 800fec6:	d167      	bne.n	800ff98 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fec8:	68bb      	ldr	r3, [r7, #8]
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d002      	beq.n	800fed4 <HAL_UART_Transmit_DMA+0x24>
 800fece:	88fb      	ldrh	r3, [r7, #6]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d101      	bne.n	800fed8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800fed4:	2301      	movs	r3, #1
 800fed6:	e060      	b.n	800ff9a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800fed8:	68fb      	ldr	r3, [r7, #12]
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	88fa      	ldrh	r2, [r7, #6]
 800fee2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	88fa      	ldrh	r2, [r7, #6]
 800feea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800feee:	68fb      	ldr	r3, [r7, #12]
 800fef0:	2200      	movs	r2, #0
 800fef2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fef6:	68fb      	ldr	r3, [r7, #12]
 800fef8:	2221      	movs	r2, #33	; 0x21
 800fefa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800fefe:	68fb      	ldr	r3, [r7, #12]
 800ff00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d028      	beq.n	800ff58 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff0a:	4a26      	ldr	r2, [pc, #152]	; (800ffa4 <HAL_UART_Transmit_DMA+0xf4>)
 800ff0c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ff0e:	68fb      	ldr	r3, [r7, #12]
 800ff10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff12:	4a25      	ldr	r2, [pc, #148]	; (800ffa8 <HAL_UART_Transmit_DMA+0xf8>)
 800ff14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff1a:	4a24      	ldr	r2, [pc, #144]	; (800ffac <HAL_UART_Transmit_DMA+0xfc>)
 800ff1c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ff1e:	68fb      	ldr	r3, [r7, #12]
 800ff20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ff22:	2200      	movs	r2, #0
 800ff24:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff2e:	4619      	mov	r1, r3
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	681b      	ldr	r3, [r3, #0]
 800ff34:	3328      	adds	r3, #40	; 0x28
 800ff36:	461a      	mov	r2, r3
 800ff38:	88fb      	ldrh	r3, [r7, #6]
 800ff3a:	f7f6 fa1d 	bl	8006378 <HAL_DMA_Start_IT>
 800ff3e:	4603      	mov	r3, r0
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	d009      	beq.n	800ff58 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	2210      	movs	r2, #16
 800ff48:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ff4c:	68fb      	ldr	r3, [r7, #12]
 800ff4e:	2220      	movs	r2, #32
 800ff50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ff54:	2301      	movs	r3, #1
 800ff56:	e020      	b.n	800ff9a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ff58:	68fb      	ldr	r3, [r7, #12]
 800ff5a:	681b      	ldr	r3, [r3, #0]
 800ff5c:	2240      	movs	r2, #64	; 0x40
 800ff5e:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	3308      	adds	r3, #8
 800ff66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff68:	697b      	ldr	r3, [r7, #20]
 800ff6a:	e853 3f00 	ldrex	r3, [r3]
 800ff6e:	613b      	str	r3, [r7, #16]
   return(result);
 800ff70:	693b      	ldr	r3, [r7, #16]
 800ff72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff76:	627b      	str	r3, [r7, #36]	; 0x24
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	3308      	adds	r3, #8
 800ff7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff80:	623a      	str	r2, [r7, #32]
 800ff82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff84:	69f9      	ldr	r1, [r7, #28]
 800ff86:	6a3a      	ldr	r2, [r7, #32]
 800ff88:	e841 2300 	strex	r3, r2, [r1]
 800ff8c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff8e:	69bb      	ldr	r3, [r7, #24]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d1e5      	bne.n	800ff60 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ff94:	2300      	movs	r3, #0
 800ff96:	e000      	b.n	800ff9a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ff98:	2302      	movs	r3, #2
  }
}
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	3728      	adds	r7, #40	; 0x28
 800ff9e:	46bd      	mov	sp, r7
 800ffa0:	bd80      	pop	{r7, pc}
 800ffa2:	bf00      	nop
 800ffa4:	0801193d 	.word	0x0801193d
 800ffa8:	080119d3 	.word	0x080119d3
 800ffac:	080119ef 	.word	0x080119ef

0800ffb0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ffb0:	b580      	push	{r7, lr}
 800ffb2:	b0ba      	sub	sp, #232	; 0xe8
 800ffb4:	af00      	add	r7, sp, #0
 800ffb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	69db      	ldr	r3, [r3, #28]
 800ffbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	681b      	ldr	r3, [r3, #0]
 800ffc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	689b      	ldr	r3, [r3, #8]
 800ffd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ffd6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ffda:	f640 030f 	movw	r3, #2063	; 0x80f
 800ffde:	4013      	ands	r3, r2
 800ffe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ffe4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d11b      	bne.n	8010024 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ffec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fff0:	f003 0320 	and.w	r3, r3, #32
 800fff4:	2b00      	cmp	r3, #0
 800fff6:	d015      	beq.n	8010024 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800fff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fffc:	f003 0320 	and.w	r3, r3, #32
 8010000:	2b00      	cmp	r3, #0
 8010002:	d105      	bne.n	8010010 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801000c:	2b00      	cmp	r3, #0
 801000e:	d009      	beq.n	8010024 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010014:	2b00      	cmp	r3, #0
 8010016:	f000 8377 	beq.w	8010708 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	4798      	blx	r3
      }
      return;
 8010022:	e371      	b.n	8010708 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010024:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010028:	2b00      	cmp	r3, #0
 801002a:	f000 8123 	beq.w	8010274 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 801002e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010032:	4b8d      	ldr	r3, [pc, #564]	; (8010268 <HAL_UART_IRQHandler+0x2b8>)
 8010034:	4013      	ands	r3, r2
 8010036:	2b00      	cmp	r3, #0
 8010038:	d106      	bne.n	8010048 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 801003a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801003e:	4b8b      	ldr	r3, [pc, #556]	; (801026c <HAL_UART_IRQHandler+0x2bc>)
 8010040:	4013      	ands	r3, r2
 8010042:	2b00      	cmp	r3, #0
 8010044:	f000 8116 	beq.w	8010274 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801004c:	f003 0301 	and.w	r3, r3, #1
 8010050:	2b00      	cmp	r3, #0
 8010052:	d011      	beq.n	8010078 <HAL_UART_IRQHandler+0xc8>
 8010054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801005c:	2b00      	cmp	r3, #0
 801005e:	d00b      	beq.n	8010078 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	681b      	ldr	r3, [r3, #0]
 8010064:	2201      	movs	r2, #1
 8010066:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801006e:	f043 0201 	orr.w	r2, r3, #1
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010078:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801007c:	f003 0302 	and.w	r3, r3, #2
 8010080:	2b00      	cmp	r3, #0
 8010082:	d011      	beq.n	80100a8 <HAL_UART_IRQHandler+0xf8>
 8010084:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010088:	f003 0301 	and.w	r3, r3, #1
 801008c:	2b00      	cmp	r3, #0
 801008e:	d00b      	beq.n	80100a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	2202      	movs	r2, #2
 8010096:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801009e:	f043 0204 	orr.w	r2, r3, #4
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80100a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100ac:	f003 0304 	and.w	r3, r3, #4
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d011      	beq.n	80100d8 <HAL_UART_IRQHandler+0x128>
 80100b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80100b8:	f003 0301 	and.w	r3, r3, #1
 80100bc:	2b00      	cmp	r3, #0
 80100be:	d00b      	beq.n	80100d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	681b      	ldr	r3, [r3, #0]
 80100c4:	2204      	movs	r2, #4
 80100c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100ce:	f043 0202 	orr.w	r2, r3, #2
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80100d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100dc:	f003 0308 	and.w	r3, r3, #8
 80100e0:	2b00      	cmp	r3, #0
 80100e2:	d017      	beq.n	8010114 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80100e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100e8:	f003 0320 	and.w	r3, r3, #32
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d105      	bne.n	80100fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80100f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80100f4:	4b5c      	ldr	r3, [pc, #368]	; (8010268 <HAL_UART_IRQHandler+0x2b8>)
 80100f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	d00b      	beq.n	8010114 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	2208      	movs	r2, #8
 8010102:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801010a:	f043 0208 	orr.w	r2, r3, #8
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010114:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010118:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801011c:	2b00      	cmp	r3, #0
 801011e:	d012      	beq.n	8010146 <HAL_UART_IRQHandler+0x196>
 8010120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010124:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8010128:	2b00      	cmp	r3, #0
 801012a:	d00c      	beq.n	8010146 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010134:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801013c:	f043 0220 	orr.w	r2, r3, #32
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801014c:	2b00      	cmp	r3, #0
 801014e:	f000 82dd 	beq.w	801070c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8010152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010156:	f003 0320 	and.w	r3, r3, #32
 801015a:	2b00      	cmp	r3, #0
 801015c:	d013      	beq.n	8010186 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801015e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010162:	f003 0320 	and.w	r3, r3, #32
 8010166:	2b00      	cmp	r3, #0
 8010168:	d105      	bne.n	8010176 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801016a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801016e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010172:	2b00      	cmp	r3, #0
 8010174:	d007      	beq.n	8010186 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801017a:	2b00      	cmp	r3, #0
 801017c:	d003      	beq.n	8010186 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010182:	6878      	ldr	r0, [r7, #4]
 8010184:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801018c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	689b      	ldr	r3, [r3, #8]
 8010196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801019a:	2b40      	cmp	r3, #64	; 0x40
 801019c:	d005      	beq.n	80101aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801019e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80101a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d054      	beq.n	8010254 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80101aa:	6878      	ldr	r0, [r7, #4]
 80101ac:	f001 fb60 	bl	8011870 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	681b      	ldr	r3, [r3, #0]
 80101b4:	689b      	ldr	r3, [r3, #8]
 80101b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101ba:	2b40      	cmp	r3, #64	; 0x40
 80101bc:	d146      	bne.n	801024c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	681b      	ldr	r3, [r3, #0]
 80101c2:	3308      	adds	r3, #8
 80101c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80101cc:	e853 3f00 	ldrex	r3, [r3]
 80101d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80101d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80101d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80101dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	3308      	adds	r3, #8
 80101e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80101ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80101ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80101f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80101fa:	e841 2300 	strex	r3, r2, [r1]
 80101fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8010202:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8010206:	2b00      	cmp	r3, #0
 8010208:	d1d9      	bne.n	80101be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010210:	2b00      	cmp	r3, #0
 8010212:	d017      	beq.n	8010244 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801021a:	4a15      	ldr	r2, [pc, #84]	; (8010270 <HAL_UART_IRQHandler+0x2c0>)
 801021c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010224:	4618      	mov	r0, r3
 8010226:	f7f6 fe2f 	bl	8006e88 <HAL_DMA_Abort_IT>
 801022a:	4603      	mov	r3, r0
 801022c:	2b00      	cmp	r3, #0
 801022e:	d019      	beq.n	8010264 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010236:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010238:	687a      	ldr	r2, [r7, #4]
 801023a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 801023e:	4610      	mov	r0, r2
 8010240:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010242:	e00f      	b.n	8010264 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010244:	6878      	ldr	r0, [r7, #4]
 8010246:	f000 fa77 	bl	8010738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801024a:	e00b      	b.n	8010264 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f000 fa73 	bl	8010738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010252:	e007      	b.n	8010264 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f000 fa6f 	bl	8010738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	2200      	movs	r2, #0
 801025e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8010262:	e253      	b.n	801070c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010264:	bf00      	nop
    return;
 8010266:	e251      	b.n	801070c <HAL_UART_IRQHandler+0x75c>
 8010268:	10000001 	.word	0x10000001
 801026c:	04000120 	.word	0x04000120
 8010270:	08011a6f 	.word	0x08011a6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010278:	2b01      	cmp	r3, #1
 801027a:	f040 81e7 	bne.w	801064c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801027e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010282:	f003 0310 	and.w	r3, r3, #16
 8010286:	2b00      	cmp	r3, #0
 8010288:	f000 81e0 	beq.w	801064c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801028c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010290:	f003 0310 	and.w	r3, r3, #16
 8010294:	2b00      	cmp	r3, #0
 8010296:	f000 81d9 	beq.w	801064c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2210      	movs	r2, #16
 80102a0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	689b      	ldr	r3, [r3, #8]
 80102a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80102ac:	2b40      	cmp	r3, #64	; 0x40
 80102ae:	f040 8151 	bne.w	8010554 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102b8:	681b      	ldr	r3, [r3, #0]
 80102ba:	4a96      	ldr	r2, [pc, #600]	; (8010514 <HAL_UART_IRQHandler+0x564>)
 80102bc:	4293      	cmp	r3, r2
 80102be:	d068      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	4a93      	ldr	r2, [pc, #588]	; (8010518 <HAL_UART_IRQHandler+0x568>)
 80102ca:	4293      	cmp	r3, r2
 80102cc:	d061      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	4a91      	ldr	r2, [pc, #580]	; (801051c <HAL_UART_IRQHandler+0x56c>)
 80102d8:	4293      	cmp	r3, r2
 80102da:	d05a      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	4a8e      	ldr	r2, [pc, #568]	; (8010520 <HAL_UART_IRQHandler+0x570>)
 80102e6:	4293      	cmp	r3, r2
 80102e8:	d053      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	4a8c      	ldr	r2, [pc, #560]	; (8010524 <HAL_UART_IRQHandler+0x574>)
 80102f4:	4293      	cmp	r3, r2
 80102f6:	d04c      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	4a89      	ldr	r2, [pc, #548]	; (8010528 <HAL_UART_IRQHandler+0x578>)
 8010302:	4293      	cmp	r3, r2
 8010304:	d045      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801030c:	681b      	ldr	r3, [r3, #0]
 801030e:	4a87      	ldr	r2, [pc, #540]	; (801052c <HAL_UART_IRQHandler+0x57c>)
 8010310:	4293      	cmp	r3, r2
 8010312:	d03e      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	4a84      	ldr	r2, [pc, #528]	; (8010530 <HAL_UART_IRQHandler+0x580>)
 801031e:	4293      	cmp	r3, r2
 8010320:	d037      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	4a82      	ldr	r2, [pc, #520]	; (8010534 <HAL_UART_IRQHandler+0x584>)
 801032c:	4293      	cmp	r3, r2
 801032e:	d030      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	4a7f      	ldr	r2, [pc, #508]	; (8010538 <HAL_UART_IRQHandler+0x588>)
 801033a:	4293      	cmp	r3, r2
 801033c:	d029      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4a7d      	ldr	r2, [pc, #500]	; (801053c <HAL_UART_IRQHandler+0x58c>)
 8010348:	4293      	cmp	r3, r2
 801034a:	d022      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 801034c:	687b      	ldr	r3, [r7, #4]
 801034e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010352:	681b      	ldr	r3, [r3, #0]
 8010354:	4a7a      	ldr	r2, [pc, #488]	; (8010540 <HAL_UART_IRQHandler+0x590>)
 8010356:	4293      	cmp	r3, r2
 8010358:	d01b      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	4a78      	ldr	r2, [pc, #480]	; (8010544 <HAL_UART_IRQHandler+0x594>)
 8010364:	4293      	cmp	r3, r2
 8010366:	d014      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	4a75      	ldr	r2, [pc, #468]	; (8010548 <HAL_UART_IRQHandler+0x598>)
 8010372:	4293      	cmp	r3, r2
 8010374:	d00d      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	4a73      	ldr	r2, [pc, #460]	; (801054c <HAL_UART_IRQHandler+0x59c>)
 8010380:	4293      	cmp	r3, r2
 8010382:	d006      	beq.n	8010392 <HAL_UART_IRQHandler+0x3e2>
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	4a70      	ldr	r2, [pc, #448]	; (8010550 <HAL_UART_IRQHandler+0x5a0>)
 801038e:	4293      	cmp	r3, r2
 8010390:	d106      	bne.n	80103a0 <HAL_UART_IRQHandler+0x3f0>
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	685b      	ldr	r3, [r3, #4]
 801039c:	b29b      	uxth	r3, r3
 801039e:	e005      	b.n	80103ac <HAL_UART_IRQHandler+0x3fc>
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	b29b      	uxth	r3, r3
 80103ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80103b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	f000 81ab 	beq.w	8010710 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80103c0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80103c4:	429a      	cmp	r2, r3
 80103c6:	f080 81a3 	bcs.w	8010710 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80103d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103da:	69db      	ldr	r3, [r3, #28]
 80103dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80103e0:	f000 8087 	beq.w	80104f2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80103f0:	e853 3f00 	ldrex	r3, [r3]
 80103f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80103f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80103fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010400:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	461a      	mov	r2, r3
 801040a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801040e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010412:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010416:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801041a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801041e:	e841 2300 	strex	r3, r2, [r1]
 8010422:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8010426:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801042a:	2b00      	cmp	r3, #0
 801042c:	d1da      	bne.n	80103e4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	681b      	ldr	r3, [r3, #0]
 8010432:	3308      	adds	r3, #8
 8010434:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010438:	e853 3f00 	ldrex	r3, [r3]
 801043c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801043e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010440:	f023 0301 	bic.w	r3, r3, #1
 8010444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	3308      	adds	r3, #8
 801044e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010452:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010456:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010458:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801045a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801045e:	e841 2300 	strex	r3, r2, [r1]
 8010462:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010464:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010466:	2b00      	cmp	r3, #0
 8010468:	d1e1      	bne.n	801042e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	3308      	adds	r3, #8
 8010470:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010472:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010474:	e853 3f00 	ldrex	r3, [r3]
 8010478:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801047a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801047c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010480:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	3308      	adds	r3, #8
 801048a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801048e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8010490:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010492:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010494:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010496:	e841 2300 	strex	r3, r2, [r1]
 801049a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801049c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1e3      	bne.n	801046a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	2220      	movs	r2, #32
 80104a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	2200      	movs	r2, #0
 80104ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80104b8:	e853 3f00 	ldrex	r3, [r3]
 80104bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80104be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104c0:	f023 0310 	bic.w	r3, r3, #16
 80104c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	681b      	ldr	r3, [r3, #0]
 80104cc:	461a      	mov	r2, r3
 80104ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80104d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80104d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80104d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80104da:	e841 2300 	strex	r3, r2, [r1]
 80104de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80104e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	d1e4      	bne.n	80104b0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104ec:	4618      	mov	r0, r3
 80104ee:	f7f6 f9ad 	bl	800684c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2202      	movs	r2, #2
 80104f6:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010504:	b29b      	uxth	r3, r3
 8010506:	1ad3      	subs	r3, r2, r3
 8010508:	b29b      	uxth	r3, r3
 801050a:	4619      	mov	r1, r3
 801050c:	6878      	ldr	r0, [r7, #4]
 801050e:	f000 f91d 	bl	801074c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010512:	e0fd      	b.n	8010710 <HAL_UART_IRQHandler+0x760>
 8010514:	40020010 	.word	0x40020010
 8010518:	40020028 	.word	0x40020028
 801051c:	40020040 	.word	0x40020040
 8010520:	40020058 	.word	0x40020058
 8010524:	40020070 	.word	0x40020070
 8010528:	40020088 	.word	0x40020088
 801052c:	400200a0 	.word	0x400200a0
 8010530:	400200b8 	.word	0x400200b8
 8010534:	40020410 	.word	0x40020410
 8010538:	40020428 	.word	0x40020428
 801053c:	40020440 	.word	0x40020440
 8010540:	40020458 	.word	0x40020458
 8010544:	40020470 	.word	0x40020470
 8010548:	40020488 	.word	0x40020488
 801054c:	400204a0 	.word	0x400204a0
 8010550:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010560:	b29b      	uxth	r3, r3
 8010562:	1ad3      	subs	r3, r2, r3
 8010564:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801056e:	b29b      	uxth	r3, r3
 8010570:	2b00      	cmp	r3, #0
 8010572:	f000 80cf 	beq.w	8010714 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010576:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801057a:	2b00      	cmp	r3, #0
 801057c:	f000 80ca 	beq.w	8010714 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010580:	687b      	ldr	r3, [r7, #4]
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010588:	e853 3f00 	ldrex	r3, [r3]
 801058c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801058e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	461a      	mov	r2, r3
 801059e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80105a2:	647b      	str	r3, [r7, #68]	; 0x44
 80105a4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80105a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80105aa:	e841 2300 	strex	r3, r2, [r1]
 80105ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80105b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d1e4      	bne.n	8010580 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	3308      	adds	r3, #8
 80105bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105c0:	e853 3f00 	ldrex	r3, [r3]
 80105c4:	623b      	str	r3, [r7, #32]
   return(result);
 80105c6:	6a3a      	ldr	r2, [r7, #32]
 80105c8:	4b55      	ldr	r3, [pc, #340]	; (8010720 <HAL_UART_IRQHandler+0x770>)
 80105ca:	4013      	ands	r3, r2
 80105cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	3308      	adds	r3, #8
 80105d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80105da:	633a      	str	r2, [r7, #48]	; 0x30
 80105dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80105e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80105e2:	e841 2300 	strex	r3, r2, [r1]
 80105e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80105e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d1e3      	bne.n	80105b6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	2220      	movs	r2, #32
 80105f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	2200      	movs	r2, #0
 80105fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	2200      	movs	r2, #0
 8010600:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010608:	693b      	ldr	r3, [r7, #16]
 801060a:	e853 3f00 	ldrex	r3, [r3]
 801060e:	60fb      	str	r3, [r7, #12]
   return(result);
 8010610:	68fb      	ldr	r3, [r7, #12]
 8010612:	f023 0310 	bic.w	r3, r3, #16
 8010616:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	461a      	mov	r2, r3
 8010620:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010624:	61fb      	str	r3, [r7, #28]
 8010626:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010628:	69b9      	ldr	r1, [r7, #24]
 801062a:	69fa      	ldr	r2, [r7, #28]
 801062c:	e841 2300 	strex	r3, r2, [r1]
 8010630:	617b      	str	r3, [r7, #20]
   return(result);
 8010632:	697b      	ldr	r3, [r7, #20]
 8010634:	2b00      	cmp	r3, #0
 8010636:	d1e4      	bne.n	8010602 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	2202      	movs	r2, #2
 801063c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 801063e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010642:	4619      	mov	r1, r3
 8010644:	6878      	ldr	r0, [r7, #4]
 8010646:	f000 f881 	bl	801074c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801064a:	e063      	b.n	8010714 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801064c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010650:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010654:	2b00      	cmp	r3, #0
 8010656:	d00e      	beq.n	8010676 <HAL_UART_IRQHandler+0x6c6>
 8010658:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801065c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010660:	2b00      	cmp	r3, #0
 8010662:	d008      	beq.n	8010676 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	681b      	ldr	r3, [r3, #0]
 8010668:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801066c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f001 ff5a 	bl	8012528 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010674:	e051      	b.n	801071a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801067a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801067e:	2b00      	cmp	r3, #0
 8010680:	d014      	beq.n	80106ac <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8010682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010686:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801068a:	2b00      	cmp	r3, #0
 801068c:	d105      	bne.n	801069a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801068e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010692:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010696:	2b00      	cmp	r3, #0
 8010698:	d008      	beq.n	80106ac <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d03a      	beq.n	8010718 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80106a6:	6878      	ldr	r0, [r7, #4]
 80106a8:	4798      	blx	r3
    }
    return;
 80106aa:	e035      	b.n	8010718 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80106ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d009      	beq.n	80106cc <HAL_UART_IRQHandler+0x71c>
 80106b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80106c0:	2b00      	cmp	r3, #0
 80106c2:	d003      	beq.n	80106cc <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 80106c4:	6878      	ldr	r0, [r7, #4]
 80106c6:	f001 f9e8 	bl	8011a9a <UART_EndTransmit_IT>
    return;
 80106ca:	e026      	b.n	801071a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80106cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d009      	beq.n	80106ec <HAL_UART_IRQHandler+0x73c>
 80106d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d003      	beq.n	80106ec <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80106e4:	6878      	ldr	r0, [r7, #4]
 80106e6:	f001 ff33 	bl	8012550 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106ea:	e016      	b.n	801071a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80106ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d010      	beq.n	801071a <HAL_UART_IRQHandler+0x76a>
 80106f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	da0c      	bge.n	801071a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8010700:	6878      	ldr	r0, [r7, #4]
 8010702:	f001 ff1b 	bl	801253c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010706:	e008      	b.n	801071a <HAL_UART_IRQHandler+0x76a>
      return;
 8010708:	bf00      	nop
 801070a:	e006      	b.n	801071a <HAL_UART_IRQHandler+0x76a>
    return;
 801070c:	bf00      	nop
 801070e:	e004      	b.n	801071a <HAL_UART_IRQHandler+0x76a>
      return;
 8010710:	bf00      	nop
 8010712:	e002      	b.n	801071a <HAL_UART_IRQHandler+0x76a>
      return;
 8010714:	bf00      	nop
 8010716:	e000      	b.n	801071a <HAL_UART_IRQHandler+0x76a>
    return;
 8010718:	bf00      	nop
  }
}
 801071a:	37e8      	adds	r7, #232	; 0xe8
 801071c:	46bd      	mov	sp, r7
 801071e:	bd80      	pop	{r7, pc}
 8010720:	effffffe 	.word	0xeffffffe

08010724 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8010724:	b480      	push	{r7}
 8010726:	b083      	sub	sp, #12
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801072c:	bf00      	nop
 801072e:	370c      	adds	r7, #12
 8010730:	46bd      	mov	sp, r7
 8010732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010736:	4770      	bx	lr

08010738 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010738:	b480      	push	{r7}
 801073a:	b083      	sub	sp, #12
 801073c:	af00      	add	r7, sp, #0
 801073e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8010740:	bf00      	nop
 8010742:	370c      	adds	r7, #12
 8010744:	46bd      	mov	sp, r7
 8010746:	f85d 7b04 	ldr.w	r7, [sp], #4
 801074a:	4770      	bx	lr

0801074c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801074c:	b480      	push	{r7}
 801074e:	b083      	sub	sp, #12
 8010750:	af00      	add	r7, sp, #0
 8010752:	6078      	str	r0, [r7, #4]
 8010754:	460b      	mov	r3, r1
 8010756:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010758:	bf00      	nop
 801075a:	370c      	adds	r7, #12
 801075c:	46bd      	mov	sp, r7
 801075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010762:	4770      	bx	lr

08010764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010768:	b092      	sub	sp, #72	; 0x48
 801076a:	af00      	add	r7, sp, #0
 801076c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801076e:	2300      	movs	r3, #0
 8010770:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	689a      	ldr	r2, [r3, #8]
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	691b      	ldr	r3, [r3, #16]
 801077c:	431a      	orrs	r2, r3
 801077e:	697b      	ldr	r3, [r7, #20]
 8010780:	695b      	ldr	r3, [r3, #20]
 8010782:	431a      	orrs	r2, r3
 8010784:	697b      	ldr	r3, [r7, #20]
 8010786:	69db      	ldr	r3, [r3, #28]
 8010788:	4313      	orrs	r3, r2
 801078a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	681a      	ldr	r2, [r3, #0]
 8010792:	4bbe      	ldr	r3, [pc, #760]	; (8010a8c <UART_SetConfig+0x328>)
 8010794:	4013      	ands	r3, r2
 8010796:	697a      	ldr	r2, [r7, #20]
 8010798:	6812      	ldr	r2, [r2, #0]
 801079a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801079c:	430b      	orrs	r3, r1
 801079e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	68da      	ldr	r2, [r3, #12]
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	430a      	orrs	r2, r1
 80107b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	699b      	ldr	r3, [r3, #24]
 80107ba:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80107bc:	697b      	ldr	r3, [r7, #20]
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	4ab3      	ldr	r2, [pc, #716]	; (8010a90 <UART_SetConfig+0x32c>)
 80107c2:	4293      	cmp	r3, r2
 80107c4:	d004      	beq.n	80107d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80107c6:	697b      	ldr	r3, [r7, #20]
 80107c8:	6a1b      	ldr	r3, [r3, #32]
 80107ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80107cc:	4313      	orrs	r3, r2
 80107ce:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80107d0:	697b      	ldr	r3, [r7, #20]
 80107d2:	681b      	ldr	r3, [r3, #0]
 80107d4:	689a      	ldr	r2, [r3, #8]
 80107d6:	4baf      	ldr	r3, [pc, #700]	; (8010a94 <UART_SetConfig+0x330>)
 80107d8:	4013      	ands	r3, r2
 80107da:	697a      	ldr	r2, [r7, #20]
 80107dc:	6812      	ldr	r2, [r2, #0]
 80107de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80107e0:	430b      	orrs	r3, r1
 80107e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107ea:	f023 010f 	bic.w	r1, r3, #15
 80107ee:	697b      	ldr	r3, [r7, #20]
 80107f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107f2:	697b      	ldr	r3, [r7, #20]
 80107f4:	681b      	ldr	r3, [r3, #0]
 80107f6:	430a      	orrs	r2, r1
 80107f8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80107fa:	697b      	ldr	r3, [r7, #20]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	4aa6      	ldr	r2, [pc, #664]	; (8010a98 <UART_SetConfig+0x334>)
 8010800:	4293      	cmp	r3, r2
 8010802:	d177      	bne.n	80108f4 <UART_SetConfig+0x190>
 8010804:	4ba5      	ldr	r3, [pc, #660]	; (8010a9c <UART_SetConfig+0x338>)
 8010806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010808:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801080c:	2b28      	cmp	r3, #40	; 0x28
 801080e:	d86d      	bhi.n	80108ec <UART_SetConfig+0x188>
 8010810:	a201      	add	r2, pc, #4	; (adr r2, 8010818 <UART_SetConfig+0xb4>)
 8010812:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010816:	bf00      	nop
 8010818:	080108bd 	.word	0x080108bd
 801081c:	080108ed 	.word	0x080108ed
 8010820:	080108ed 	.word	0x080108ed
 8010824:	080108ed 	.word	0x080108ed
 8010828:	080108ed 	.word	0x080108ed
 801082c:	080108ed 	.word	0x080108ed
 8010830:	080108ed 	.word	0x080108ed
 8010834:	080108ed 	.word	0x080108ed
 8010838:	080108c5 	.word	0x080108c5
 801083c:	080108ed 	.word	0x080108ed
 8010840:	080108ed 	.word	0x080108ed
 8010844:	080108ed 	.word	0x080108ed
 8010848:	080108ed 	.word	0x080108ed
 801084c:	080108ed 	.word	0x080108ed
 8010850:	080108ed 	.word	0x080108ed
 8010854:	080108ed 	.word	0x080108ed
 8010858:	080108cd 	.word	0x080108cd
 801085c:	080108ed 	.word	0x080108ed
 8010860:	080108ed 	.word	0x080108ed
 8010864:	080108ed 	.word	0x080108ed
 8010868:	080108ed 	.word	0x080108ed
 801086c:	080108ed 	.word	0x080108ed
 8010870:	080108ed 	.word	0x080108ed
 8010874:	080108ed 	.word	0x080108ed
 8010878:	080108d5 	.word	0x080108d5
 801087c:	080108ed 	.word	0x080108ed
 8010880:	080108ed 	.word	0x080108ed
 8010884:	080108ed 	.word	0x080108ed
 8010888:	080108ed 	.word	0x080108ed
 801088c:	080108ed 	.word	0x080108ed
 8010890:	080108ed 	.word	0x080108ed
 8010894:	080108ed 	.word	0x080108ed
 8010898:	080108dd 	.word	0x080108dd
 801089c:	080108ed 	.word	0x080108ed
 80108a0:	080108ed 	.word	0x080108ed
 80108a4:	080108ed 	.word	0x080108ed
 80108a8:	080108ed 	.word	0x080108ed
 80108ac:	080108ed 	.word	0x080108ed
 80108b0:	080108ed 	.word	0x080108ed
 80108b4:	080108ed 	.word	0x080108ed
 80108b8:	080108e5 	.word	0x080108e5
 80108bc:	2301      	movs	r3, #1
 80108be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108c2:	e222      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80108c4:	2304      	movs	r3, #4
 80108c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ca:	e21e      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80108cc:	2308      	movs	r3, #8
 80108ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108d2:	e21a      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80108d4:	2310      	movs	r3, #16
 80108d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108da:	e216      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80108dc:	2320      	movs	r3, #32
 80108de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108e2:	e212      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80108e4:	2340      	movs	r3, #64	; 0x40
 80108e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ea:	e20e      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80108ec:	2380      	movs	r3, #128	; 0x80
 80108ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108f2:	e20a      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	681b      	ldr	r3, [r3, #0]
 80108f8:	4a69      	ldr	r2, [pc, #420]	; (8010aa0 <UART_SetConfig+0x33c>)
 80108fa:	4293      	cmp	r3, r2
 80108fc:	d130      	bne.n	8010960 <UART_SetConfig+0x1fc>
 80108fe:	4b67      	ldr	r3, [pc, #412]	; (8010a9c <UART_SetConfig+0x338>)
 8010900:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010902:	f003 0307 	and.w	r3, r3, #7
 8010906:	2b05      	cmp	r3, #5
 8010908:	d826      	bhi.n	8010958 <UART_SetConfig+0x1f4>
 801090a:	a201      	add	r2, pc, #4	; (adr r2, 8010910 <UART_SetConfig+0x1ac>)
 801090c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010910:	08010929 	.word	0x08010929
 8010914:	08010931 	.word	0x08010931
 8010918:	08010939 	.word	0x08010939
 801091c:	08010941 	.word	0x08010941
 8010920:	08010949 	.word	0x08010949
 8010924:	08010951 	.word	0x08010951
 8010928:	2300      	movs	r3, #0
 801092a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801092e:	e1ec      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010930:	2304      	movs	r3, #4
 8010932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010936:	e1e8      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010938:	2308      	movs	r3, #8
 801093a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801093e:	e1e4      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010940:	2310      	movs	r3, #16
 8010942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010946:	e1e0      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010948:	2320      	movs	r3, #32
 801094a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801094e:	e1dc      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010950:	2340      	movs	r3, #64	; 0x40
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010956:	e1d8      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010958:	2380      	movs	r3, #128	; 0x80
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801095e:	e1d4      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010960:	697b      	ldr	r3, [r7, #20]
 8010962:	681b      	ldr	r3, [r3, #0]
 8010964:	4a4f      	ldr	r2, [pc, #316]	; (8010aa4 <UART_SetConfig+0x340>)
 8010966:	4293      	cmp	r3, r2
 8010968:	d130      	bne.n	80109cc <UART_SetConfig+0x268>
 801096a:	4b4c      	ldr	r3, [pc, #304]	; (8010a9c <UART_SetConfig+0x338>)
 801096c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801096e:	f003 0307 	and.w	r3, r3, #7
 8010972:	2b05      	cmp	r3, #5
 8010974:	d826      	bhi.n	80109c4 <UART_SetConfig+0x260>
 8010976:	a201      	add	r2, pc, #4	; (adr r2, 801097c <UART_SetConfig+0x218>)
 8010978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801097c:	08010995 	.word	0x08010995
 8010980:	0801099d 	.word	0x0801099d
 8010984:	080109a5 	.word	0x080109a5
 8010988:	080109ad 	.word	0x080109ad
 801098c:	080109b5 	.word	0x080109b5
 8010990:	080109bd 	.word	0x080109bd
 8010994:	2300      	movs	r3, #0
 8010996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801099a:	e1b6      	b.n	8010d0a <UART_SetConfig+0x5a6>
 801099c:	2304      	movs	r3, #4
 801099e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109a2:	e1b2      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80109a4:	2308      	movs	r3, #8
 80109a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109aa:	e1ae      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80109ac:	2310      	movs	r3, #16
 80109ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109b2:	e1aa      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80109b4:	2320      	movs	r3, #32
 80109b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ba:	e1a6      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80109bc:	2340      	movs	r3, #64	; 0x40
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c2:	e1a2      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80109c4:	2380      	movs	r3, #128	; 0x80
 80109c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ca:	e19e      	b.n	8010d0a <UART_SetConfig+0x5a6>
 80109cc:	697b      	ldr	r3, [r7, #20]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	4a35      	ldr	r2, [pc, #212]	; (8010aa8 <UART_SetConfig+0x344>)
 80109d2:	4293      	cmp	r3, r2
 80109d4:	d130      	bne.n	8010a38 <UART_SetConfig+0x2d4>
 80109d6:	4b31      	ldr	r3, [pc, #196]	; (8010a9c <UART_SetConfig+0x338>)
 80109d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109da:	f003 0307 	and.w	r3, r3, #7
 80109de:	2b05      	cmp	r3, #5
 80109e0:	d826      	bhi.n	8010a30 <UART_SetConfig+0x2cc>
 80109e2:	a201      	add	r2, pc, #4	; (adr r2, 80109e8 <UART_SetConfig+0x284>)
 80109e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109e8:	08010a01 	.word	0x08010a01
 80109ec:	08010a09 	.word	0x08010a09
 80109f0:	08010a11 	.word	0x08010a11
 80109f4:	08010a19 	.word	0x08010a19
 80109f8:	08010a21 	.word	0x08010a21
 80109fc:	08010a29 	.word	0x08010a29
 8010a00:	2300      	movs	r3, #0
 8010a02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a06:	e180      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a08:	2304      	movs	r3, #4
 8010a0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a0e:	e17c      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a10:	2308      	movs	r3, #8
 8010a12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a16:	e178      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a18:	2310      	movs	r3, #16
 8010a1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a1e:	e174      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a20:	2320      	movs	r3, #32
 8010a22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a26:	e170      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a28:	2340      	movs	r3, #64	; 0x40
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e16c      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a30:	2380      	movs	r3, #128	; 0x80
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a36:	e168      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a38:	697b      	ldr	r3, [r7, #20]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	4a1b      	ldr	r2, [pc, #108]	; (8010aac <UART_SetConfig+0x348>)
 8010a3e:	4293      	cmp	r3, r2
 8010a40:	d142      	bne.n	8010ac8 <UART_SetConfig+0x364>
 8010a42:	4b16      	ldr	r3, [pc, #88]	; (8010a9c <UART_SetConfig+0x338>)
 8010a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a46:	f003 0307 	and.w	r3, r3, #7
 8010a4a:	2b05      	cmp	r3, #5
 8010a4c:	d838      	bhi.n	8010ac0 <UART_SetConfig+0x35c>
 8010a4e:	a201      	add	r2, pc, #4	; (adr r2, 8010a54 <UART_SetConfig+0x2f0>)
 8010a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a54:	08010a6d 	.word	0x08010a6d
 8010a58:	08010a75 	.word	0x08010a75
 8010a5c:	08010a7d 	.word	0x08010a7d
 8010a60:	08010a85 	.word	0x08010a85
 8010a64:	08010ab1 	.word	0x08010ab1
 8010a68:	08010ab9 	.word	0x08010ab9
 8010a6c:	2300      	movs	r3, #0
 8010a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a72:	e14a      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a74:	2304      	movs	r3, #4
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7a:	e146      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a7c:	2308      	movs	r3, #8
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a82:	e142      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a84:	2310      	movs	r3, #16
 8010a86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a8a:	e13e      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010a8c:	cfff69f3 	.word	0xcfff69f3
 8010a90:	58000c00 	.word	0x58000c00
 8010a94:	11fff4ff 	.word	0x11fff4ff
 8010a98:	40011000 	.word	0x40011000
 8010a9c:	58024400 	.word	0x58024400
 8010aa0:	40004400 	.word	0x40004400
 8010aa4:	40004800 	.word	0x40004800
 8010aa8:	40004c00 	.word	0x40004c00
 8010aac:	40005000 	.word	0x40005000
 8010ab0:	2320      	movs	r3, #32
 8010ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ab6:	e128      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010ab8:	2340      	movs	r3, #64	; 0x40
 8010aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010abe:	e124      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010ac0:	2380      	movs	r3, #128	; 0x80
 8010ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ac6:	e120      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010ac8:	697b      	ldr	r3, [r7, #20]
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	4acb      	ldr	r2, [pc, #812]	; (8010dfc <UART_SetConfig+0x698>)
 8010ace:	4293      	cmp	r3, r2
 8010ad0:	d176      	bne.n	8010bc0 <UART_SetConfig+0x45c>
 8010ad2:	4bcb      	ldr	r3, [pc, #812]	; (8010e00 <UART_SetConfig+0x69c>)
 8010ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010ada:	2b28      	cmp	r3, #40	; 0x28
 8010adc:	d86c      	bhi.n	8010bb8 <UART_SetConfig+0x454>
 8010ade:	a201      	add	r2, pc, #4	; (adr r2, 8010ae4 <UART_SetConfig+0x380>)
 8010ae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ae4:	08010b89 	.word	0x08010b89
 8010ae8:	08010bb9 	.word	0x08010bb9
 8010aec:	08010bb9 	.word	0x08010bb9
 8010af0:	08010bb9 	.word	0x08010bb9
 8010af4:	08010bb9 	.word	0x08010bb9
 8010af8:	08010bb9 	.word	0x08010bb9
 8010afc:	08010bb9 	.word	0x08010bb9
 8010b00:	08010bb9 	.word	0x08010bb9
 8010b04:	08010b91 	.word	0x08010b91
 8010b08:	08010bb9 	.word	0x08010bb9
 8010b0c:	08010bb9 	.word	0x08010bb9
 8010b10:	08010bb9 	.word	0x08010bb9
 8010b14:	08010bb9 	.word	0x08010bb9
 8010b18:	08010bb9 	.word	0x08010bb9
 8010b1c:	08010bb9 	.word	0x08010bb9
 8010b20:	08010bb9 	.word	0x08010bb9
 8010b24:	08010b99 	.word	0x08010b99
 8010b28:	08010bb9 	.word	0x08010bb9
 8010b2c:	08010bb9 	.word	0x08010bb9
 8010b30:	08010bb9 	.word	0x08010bb9
 8010b34:	08010bb9 	.word	0x08010bb9
 8010b38:	08010bb9 	.word	0x08010bb9
 8010b3c:	08010bb9 	.word	0x08010bb9
 8010b40:	08010bb9 	.word	0x08010bb9
 8010b44:	08010ba1 	.word	0x08010ba1
 8010b48:	08010bb9 	.word	0x08010bb9
 8010b4c:	08010bb9 	.word	0x08010bb9
 8010b50:	08010bb9 	.word	0x08010bb9
 8010b54:	08010bb9 	.word	0x08010bb9
 8010b58:	08010bb9 	.word	0x08010bb9
 8010b5c:	08010bb9 	.word	0x08010bb9
 8010b60:	08010bb9 	.word	0x08010bb9
 8010b64:	08010ba9 	.word	0x08010ba9
 8010b68:	08010bb9 	.word	0x08010bb9
 8010b6c:	08010bb9 	.word	0x08010bb9
 8010b70:	08010bb9 	.word	0x08010bb9
 8010b74:	08010bb9 	.word	0x08010bb9
 8010b78:	08010bb9 	.word	0x08010bb9
 8010b7c:	08010bb9 	.word	0x08010bb9
 8010b80:	08010bb9 	.word	0x08010bb9
 8010b84:	08010bb1 	.word	0x08010bb1
 8010b88:	2301      	movs	r3, #1
 8010b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b8e:	e0bc      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010b90:	2304      	movs	r3, #4
 8010b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b96:	e0b8      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010b98:	2308      	movs	r3, #8
 8010b9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b9e:	e0b4      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010ba0:	2310      	movs	r3, #16
 8010ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ba6:	e0b0      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010ba8:	2320      	movs	r3, #32
 8010baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bae:	e0ac      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010bb0:	2340      	movs	r3, #64	; 0x40
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb6:	e0a8      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010bb8:	2380      	movs	r3, #128	; 0x80
 8010bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bbe:	e0a4      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010bc0:	697b      	ldr	r3, [r7, #20]
 8010bc2:	681b      	ldr	r3, [r3, #0]
 8010bc4:	4a8f      	ldr	r2, [pc, #572]	; (8010e04 <UART_SetConfig+0x6a0>)
 8010bc6:	4293      	cmp	r3, r2
 8010bc8:	d130      	bne.n	8010c2c <UART_SetConfig+0x4c8>
 8010bca:	4b8d      	ldr	r3, [pc, #564]	; (8010e00 <UART_SetConfig+0x69c>)
 8010bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bce:	f003 0307 	and.w	r3, r3, #7
 8010bd2:	2b05      	cmp	r3, #5
 8010bd4:	d826      	bhi.n	8010c24 <UART_SetConfig+0x4c0>
 8010bd6:	a201      	add	r2, pc, #4	; (adr r2, 8010bdc <UART_SetConfig+0x478>)
 8010bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bdc:	08010bf5 	.word	0x08010bf5
 8010be0:	08010bfd 	.word	0x08010bfd
 8010be4:	08010c05 	.word	0x08010c05
 8010be8:	08010c0d 	.word	0x08010c0d
 8010bec:	08010c15 	.word	0x08010c15
 8010bf0:	08010c1d 	.word	0x08010c1d
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bfa:	e086      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010bfc:	2304      	movs	r3, #4
 8010bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c02:	e082      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c04:	2308      	movs	r3, #8
 8010c06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c0a:	e07e      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c0c:	2310      	movs	r3, #16
 8010c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c12:	e07a      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c14:	2320      	movs	r3, #32
 8010c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c1a:	e076      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c1c:	2340      	movs	r3, #64	; 0x40
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c22:	e072      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c24:	2380      	movs	r3, #128	; 0x80
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2a:	e06e      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c2c:	697b      	ldr	r3, [r7, #20]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4a75      	ldr	r2, [pc, #468]	; (8010e08 <UART_SetConfig+0x6a4>)
 8010c32:	4293      	cmp	r3, r2
 8010c34:	d130      	bne.n	8010c98 <UART_SetConfig+0x534>
 8010c36:	4b72      	ldr	r3, [pc, #456]	; (8010e00 <UART_SetConfig+0x69c>)
 8010c38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010c3a:	f003 0307 	and.w	r3, r3, #7
 8010c3e:	2b05      	cmp	r3, #5
 8010c40:	d826      	bhi.n	8010c90 <UART_SetConfig+0x52c>
 8010c42:	a201      	add	r2, pc, #4	; (adr r2, 8010c48 <UART_SetConfig+0x4e4>)
 8010c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c48:	08010c61 	.word	0x08010c61
 8010c4c:	08010c69 	.word	0x08010c69
 8010c50:	08010c71 	.word	0x08010c71
 8010c54:	08010c79 	.word	0x08010c79
 8010c58:	08010c81 	.word	0x08010c81
 8010c5c:	08010c89 	.word	0x08010c89
 8010c60:	2300      	movs	r3, #0
 8010c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c66:	e050      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c68:	2304      	movs	r3, #4
 8010c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c6e:	e04c      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c70:	2308      	movs	r3, #8
 8010c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c76:	e048      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c78:	2310      	movs	r3, #16
 8010c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c7e:	e044      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c80:	2320      	movs	r3, #32
 8010c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c86:	e040      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c88:	2340      	movs	r3, #64	; 0x40
 8010c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8e:	e03c      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c90:	2380      	movs	r3, #128	; 0x80
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c96:	e038      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010c98:	697b      	ldr	r3, [r7, #20]
 8010c9a:	681b      	ldr	r3, [r3, #0]
 8010c9c:	4a5b      	ldr	r2, [pc, #364]	; (8010e0c <UART_SetConfig+0x6a8>)
 8010c9e:	4293      	cmp	r3, r2
 8010ca0:	d130      	bne.n	8010d04 <UART_SetConfig+0x5a0>
 8010ca2:	4b57      	ldr	r3, [pc, #348]	; (8010e00 <UART_SetConfig+0x69c>)
 8010ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ca6:	f003 0307 	and.w	r3, r3, #7
 8010caa:	2b05      	cmp	r3, #5
 8010cac:	d826      	bhi.n	8010cfc <UART_SetConfig+0x598>
 8010cae:	a201      	add	r2, pc, #4	; (adr r2, 8010cb4 <UART_SetConfig+0x550>)
 8010cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cb4:	08010ccd 	.word	0x08010ccd
 8010cb8:	08010cd5 	.word	0x08010cd5
 8010cbc:	08010cdd 	.word	0x08010cdd
 8010cc0:	08010ce5 	.word	0x08010ce5
 8010cc4:	08010ced 	.word	0x08010ced
 8010cc8:	08010cf5 	.word	0x08010cf5
 8010ccc:	2302      	movs	r3, #2
 8010cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cd2:	e01a      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010cd4:	2304      	movs	r3, #4
 8010cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cda:	e016      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010cdc:	2308      	movs	r3, #8
 8010cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ce2:	e012      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010ce4:	2310      	movs	r3, #16
 8010ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cea:	e00e      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010cec:	2320      	movs	r3, #32
 8010cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cf2:	e00a      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010cf4:	2340      	movs	r3, #64	; 0x40
 8010cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cfa:	e006      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010cfc:	2380      	movs	r3, #128	; 0x80
 8010cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010d02:	e002      	b.n	8010d0a <UART_SetConfig+0x5a6>
 8010d04:	2380      	movs	r3, #128	; 0x80
 8010d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	4a3f      	ldr	r2, [pc, #252]	; (8010e0c <UART_SetConfig+0x6a8>)
 8010d10:	4293      	cmp	r3, r2
 8010d12:	f040 80f8 	bne.w	8010f06 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010d16:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010d1a:	2b20      	cmp	r3, #32
 8010d1c:	dc46      	bgt.n	8010dac <UART_SetConfig+0x648>
 8010d1e:	2b02      	cmp	r3, #2
 8010d20:	f2c0 8082 	blt.w	8010e28 <UART_SetConfig+0x6c4>
 8010d24:	3b02      	subs	r3, #2
 8010d26:	2b1e      	cmp	r3, #30
 8010d28:	d87e      	bhi.n	8010e28 <UART_SetConfig+0x6c4>
 8010d2a:	a201      	add	r2, pc, #4	; (adr r2, 8010d30 <UART_SetConfig+0x5cc>)
 8010d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d30:	08010db3 	.word	0x08010db3
 8010d34:	08010e29 	.word	0x08010e29
 8010d38:	08010dbb 	.word	0x08010dbb
 8010d3c:	08010e29 	.word	0x08010e29
 8010d40:	08010e29 	.word	0x08010e29
 8010d44:	08010e29 	.word	0x08010e29
 8010d48:	08010dcb 	.word	0x08010dcb
 8010d4c:	08010e29 	.word	0x08010e29
 8010d50:	08010e29 	.word	0x08010e29
 8010d54:	08010e29 	.word	0x08010e29
 8010d58:	08010e29 	.word	0x08010e29
 8010d5c:	08010e29 	.word	0x08010e29
 8010d60:	08010e29 	.word	0x08010e29
 8010d64:	08010e29 	.word	0x08010e29
 8010d68:	08010ddb 	.word	0x08010ddb
 8010d6c:	08010e29 	.word	0x08010e29
 8010d70:	08010e29 	.word	0x08010e29
 8010d74:	08010e29 	.word	0x08010e29
 8010d78:	08010e29 	.word	0x08010e29
 8010d7c:	08010e29 	.word	0x08010e29
 8010d80:	08010e29 	.word	0x08010e29
 8010d84:	08010e29 	.word	0x08010e29
 8010d88:	08010e29 	.word	0x08010e29
 8010d8c:	08010e29 	.word	0x08010e29
 8010d90:	08010e29 	.word	0x08010e29
 8010d94:	08010e29 	.word	0x08010e29
 8010d98:	08010e29 	.word	0x08010e29
 8010d9c:	08010e29 	.word	0x08010e29
 8010da0:	08010e29 	.word	0x08010e29
 8010da4:	08010e29 	.word	0x08010e29
 8010da8:	08010e1b 	.word	0x08010e1b
 8010dac:	2b40      	cmp	r3, #64	; 0x40
 8010dae:	d037      	beq.n	8010e20 <UART_SetConfig+0x6bc>
 8010db0:	e03a      	b.n	8010e28 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010db2:	f7fb fd9b 	bl	800c8ec <HAL_RCCEx_GetD3PCLK1Freq>
 8010db6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010db8:	e03c      	b.n	8010e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010dba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	f7fb fdaa 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dc8:	e034      	b.n	8010e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010dca:	f107 0318 	add.w	r3, r7, #24
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fb fef6 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010dd4:	69fb      	ldr	r3, [r7, #28]
 8010dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dd8:	e02c      	b.n	8010e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010dda:	4b09      	ldr	r3, [pc, #36]	; (8010e00 <UART_SetConfig+0x69c>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f003 0320 	and.w	r3, r3, #32
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d016      	beq.n	8010e14 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010de6:	4b06      	ldr	r3, [pc, #24]	; (8010e00 <UART_SetConfig+0x69c>)
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	08db      	lsrs	r3, r3, #3
 8010dec:	f003 0303 	and.w	r3, r3, #3
 8010df0:	4a07      	ldr	r2, [pc, #28]	; (8010e10 <UART_SetConfig+0x6ac>)
 8010df2:	fa22 f303 	lsr.w	r3, r2, r3
 8010df6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010df8:	e01c      	b.n	8010e34 <UART_SetConfig+0x6d0>
 8010dfa:	bf00      	nop
 8010dfc:	40011400 	.word	0x40011400
 8010e00:	58024400 	.word	0x58024400
 8010e04:	40007800 	.word	0x40007800
 8010e08:	40007c00 	.word	0x40007c00
 8010e0c:	58000c00 	.word	0x58000c00
 8010e10:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010e14:	4b9d      	ldr	r3, [pc, #628]	; (801108c <UART_SetConfig+0x928>)
 8010e16:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e18:	e00c      	b.n	8010e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010e1a:	4b9d      	ldr	r3, [pc, #628]	; (8011090 <UART_SetConfig+0x92c>)
 8010e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e1e:	e009      	b.n	8010e34 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010e20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010e26:	e005      	b.n	8010e34 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010e28:	2300      	movs	r3, #0
 8010e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010e2c:	2301      	movs	r3, #1
 8010e2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010e32:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010e34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	f000 81de 	beq.w	80111f8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010e3c:	697b      	ldr	r3, [r7, #20]
 8010e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e40:	4a94      	ldr	r2, [pc, #592]	; (8011094 <UART_SetConfig+0x930>)
 8010e42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e46:	461a      	mov	r2, r3
 8010e48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e4a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e4e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e50:	697b      	ldr	r3, [r7, #20]
 8010e52:	685a      	ldr	r2, [r3, #4]
 8010e54:	4613      	mov	r3, r2
 8010e56:	005b      	lsls	r3, r3, #1
 8010e58:	4413      	add	r3, r2
 8010e5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d305      	bcc.n	8010e6c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010e60:	697b      	ldr	r3, [r7, #20]
 8010e62:	685b      	ldr	r3, [r3, #4]
 8010e64:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e68:	429a      	cmp	r2, r3
 8010e6a:	d903      	bls.n	8010e74 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010e6c:	2301      	movs	r3, #1
 8010e6e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e72:	e1c1      	b.n	80111f8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e76:	2200      	movs	r2, #0
 8010e78:	60bb      	str	r3, [r7, #8]
 8010e7a:	60fa      	str	r2, [r7, #12]
 8010e7c:	697b      	ldr	r3, [r7, #20]
 8010e7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e80:	4a84      	ldr	r2, [pc, #528]	; (8011094 <UART_SetConfig+0x930>)
 8010e82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e86:	b29b      	uxth	r3, r3
 8010e88:	2200      	movs	r2, #0
 8010e8a:	603b      	str	r3, [r7, #0]
 8010e8c:	607a      	str	r2, [r7, #4]
 8010e8e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e92:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010e96:	f7ef fa23 	bl	80002e0 <__aeabi_uldivmod>
 8010e9a:	4602      	mov	r2, r0
 8010e9c:	460b      	mov	r3, r1
 8010e9e:	4610      	mov	r0, r2
 8010ea0:	4619      	mov	r1, r3
 8010ea2:	f04f 0200 	mov.w	r2, #0
 8010ea6:	f04f 0300 	mov.w	r3, #0
 8010eaa:	020b      	lsls	r3, r1, #8
 8010eac:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010eb0:	0202      	lsls	r2, r0, #8
 8010eb2:	6979      	ldr	r1, [r7, #20]
 8010eb4:	6849      	ldr	r1, [r1, #4]
 8010eb6:	0849      	lsrs	r1, r1, #1
 8010eb8:	2000      	movs	r0, #0
 8010eba:	460c      	mov	r4, r1
 8010ebc:	4605      	mov	r5, r0
 8010ebe:	eb12 0804 	adds.w	r8, r2, r4
 8010ec2:	eb43 0905 	adc.w	r9, r3, r5
 8010ec6:	697b      	ldr	r3, [r7, #20]
 8010ec8:	685b      	ldr	r3, [r3, #4]
 8010eca:	2200      	movs	r2, #0
 8010ecc:	469a      	mov	sl, r3
 8010ece:	4693      	mov	fp, r2
 8010ed0:	4652      	mov	r2, sl
 8010ed2:	465b      	mov	r3, fp
 8010ed4:	4640      	mov	r0, r8
 8010ed6:	4649      	mov	r1, r9
 8010ed8:	f7ef fa02 	bl	80002e0 <__aeabi_uldivmod>
 8010edc:	4602      	mov	r2, r0
 8010ede:	460b      	mov	r3, r1
 8010ee0:	4613      	mov	r3, r2
 8010ee2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010eea:	d308      	bcc.n	8010efe <UART_SetConfig+0x79a>
 8010eec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010ef2:	d204      	bcs.n	8010efe <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010ef4:	697b      	ldr	r3, [r7, #20]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010efa:	60da      	str	r2, [r3, #12]
 8010efc:	e17c      	b.n	80111f8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010efe:	2301      	movs	r3, #1
 8010f00:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010f04:	e178      	b.n	80111f8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	69db      	ldr	r3, [r3, #28]
 8010f0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010f0e:	f040 80c5 	bne.w	801109c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010f12:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010f16:	2b20      	cmp	r3, #32
 8010f18:	dc48      	bgt.n	8010fac <UART_SetConfig+0x848>
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	db7b      	blt.n	8011016 <UART_SetConfig+0x8b2>
 8010f1e:	2b20      	cmp	r3, #32
 8010f20:	d879      	bhi.n	8011016 <UART_SetConfig+0x8b2>
 8010f22:	a201      	add	r2, pc, #4	; (adr r2, 8010f28 <UART_SetConfig+0x7c4>)
 8010f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f28:	08010fb3 	.word	0x08010fb3
 8010f2c:	08010fbb 	.word	0x08010fbb
 8010f30:	08011017 	.word	0x08011017
 8010f34:	08011017 	.word	0x08011017
 8010f38:	08010fc3 	.word	0x08010fc3
 8010f3c:	08011017 	.word	0x08011017
 8010f40:	08011017 	.word	0x08011017
 8010f44:	08011017 	.word	0x08011017
 8010f48:	08010fd3 	.word	0x08010fd3
 8010f4c:	08011017 	.word	0x08011017
 8010f50:	08011017 	.word	0x08011017
 8010f54:	08011017 	.word	0x08011017
 8010f58:	08011017 	.word	0x08011017
 8010f5c:	08011017 	.word	0x08011017
 8010f60:	08011017 	.word	0x08011017
 8010f64:	08011017 	.word	0x08011017
 8010f68:	08010fe3 	.word	0x08010fe3
 8010f6c:	08011017 	.word	0x08011017
 8010f70:	08011017 	.word	0x08011017
 8010f74:	08011017 	.word	0x08011017
 8010f78:	08011017 	.word	0x08011017
 8010f7c:	08011017 	.word	0x08011017
 8010f80:	08011017 	.word	0x08011017
 8010f84:	08011017 	.word	0x08011017
 8010f88:	08011017 	.word	0x08011017
 8010f8c:	08011017 	.word	0x08011017
 8010f90:	08011017 	.word	0x08011017
 8010f94:	08011017 	.word	0x08011017
 8010f98:	08011017 	.word	0x08011017
 8010f9c:	08011017 	.word	0x08011017
 8010fa0:	08011017 	.word	0x08011017
 8010fa4:	08011017 	.word	0x08011017
 8010fa8:	08011009 	.word	0x08011009
 8010fac:	2b40      	cmp	r3, #64	; 0x40
 8010fae:	d02e      	beq.n	801100e <UART_SetConfig+0x8aa>
 8010fb0:	e031      	b.n	8011016 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010fb2:	f7f9 fca3 	bl	800a8fc <HAL_RCC_GetPCLK1Freq>
 8010fb6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010fb8:	e033      	b.n	8011022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010fba:	f7f9 fcb5 	bl	800a928 <HAL_RCC_GetPCLK2Freq>
 8010fbe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010fc0:	e02f      	b.n	8011022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010fc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010fc6:	4618      	mov	r0, r3
 8010fc8:	f7fb fca6 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fd0:	e027      	b.n	8011022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010fd2:	f107 0318 	add.w	r3, r7, #24
 8010fd6:	4618      	mov	r0, r3
 8010fd8:	f7fb fdf2 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010fdc:	69fb      	ldr	r3, [r7, #28]
 8010fde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fe0:	e01f      	b.n	8011022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010fe2:	4b2d      	ldr	r3, [pc, #180]	; (8011098 <UART_SetConfig+0x934>)
 8010fe4:	681b      	ldr	r3, [r3, #0]
 8010fe6:	f003 0320 	and.w	r3, r3, #32
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d009      	beq.n	8011002 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010fee:	4b2a      	ldr	r3, [pc, #168]	; (8011098 <UART_SetConfig+0x934>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	08db      	lsrs	r3, r3, #3
 8010ff4:	f003 0303 	and.w	r3, r3, #3
 8010ff8:	4a24      	ldr	r2, [pc, #144]	; (801108c <UART_SetConfig+0x928>)
 8010ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8010ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011000:	e00f      	b.n	8011022 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8011002:	4b22      	ldr	r3, [pc, #136]	; (801108c <UART_SetConfig+0x928>)
 8011004:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011006:	e00c      	b.n	8011022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011008:	4b21      	ldr	r3, [pc, #132]	; (8011090 <UART_SetConfig+0x92c>)
 801100a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801100c:	e009      	b.n	8011022 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801100e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011012:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011014:	e005      	b.n	8011022 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8011016:	2300      	movs	r3, #0
 8011018:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801101a:	2301      	movs	r3, #1
 801101c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011020:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8011022:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011024:	2b00      	cmp	r3, #0
 8011026:	f000 80e7 	beq.w	80111f8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801102a:	697b      	ldr	r3, [r7, #20]
 801102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801102e:	4a19      	ldr	r2, [pc, #100]	; (8011094 <UART_SetConfig+0x930>)
 8011030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011034:	461a      	mov	r2, r3
 8011036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011038:	fbb3 f3f2 	udiv	r3, r3, r2
 801103c:	005a      	lsls	r2, r3, #1
 801103e:	697b      	ldr	r3, [r7, #20]
 8011040:	685b      	ldr	r3, [r3, #4]
 8011042:	085b      	lsrs	r3, r3, #1
 8011044:	441a      	add	r2, r3
 8011046:	697b      	ldr	r3, [r7, #20]
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	fbb2 f3f3 	udiv	r3, r2, r3
 801104e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011050:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011052:	2b0f      	cmp	r3, #15
 8011054:	d916      	bls.n	8011084 <UART_SetConfig+0x920>
 8011056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801105c:	d212      	bcs.n	8011084 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801105e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011060:	b29b      	uxth	r3, r3
 8011062:	f023 030f 	bic.w	r3, r3, #15
 8011066:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801106a:	085b      	lsrs	r3, r3, #1
 801106c:	b29b      	uxth	r3, r3
 801106e:	f003 0307 	and.w	r3, r3, #7
 8011072:	b29a      	uxth	r2, r3
 8011074:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011076:	4313      	orrs	r3, r2
 8011078:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 801107a:	697b      	ldr	r3, [r7, #20]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8011080:	60da      	str	r2, [r3, #12]
 8011082:	e0b9      	b.n	80111f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011084:	2301      	movs	r3, #1
 8011086:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 801108a:	e0b5      	b.n	80111f8 <UART_SetConfig+0xa94>
 801108c:	03d09000 	.word	0x03d09000
 8011090:	003d0900 	.word	0x003d0900
 8011094:	08016fdc 	.word	0x08016fdc
 8011098:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801109c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80110a0:	2b20      	cmp	r3, #32
 80110a2:	dc49      	bgt.n	8011138 <UART_SetConfig+0x9d4>
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	db7c      	blt.n	80111a2 <UART_SetConfig+0xa3e>
 80110a8:	2b20      	cmp	r3, #32
 80110aa:	d87a      	bhi.n	80111a2 <UART_SetConfig+0xa3e>
 80110ac:	a201      	add	r2, pc, #4	; (adr r2, 80110b4 <UART_SetConfig+0x950>)
 80110ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110b2:	bf00      	nop
 80110b4:	0801113f 	.word	0x0801113f
 80110b8:	08011147 	.word	0x08011147
 80110bc:	080111a3 	.word	0x080111a3
 80110c0:	080111a3 	.word	0x080111a3
 80110c4:	0801114f 	.word	0x0801114f
 80110c8:	080111a3 	.word	0x080111a3
 80110cc:	080111a3 	.word	0x080111a3
 80110d0:	080111a3 	.word	0x080111a3
 80110d4:	0801115f 	.word	0x0801115f
 80110d8:	080111a3 	.word	0x080111a3
 80110dc:	080111a3 	.word	0x080111a3
 80110e0:	080111a3 	.word	0x080111a3
 80110e4:	080111a3 	.word	0x080111a3
 80110e8:	080111a3 	.word	0x080111a3
 80110ec:	080111a3 	.word	0x080111a3
 80110f0:	080111a3 	.word	0x080111a3
 80110f4:	0801116f 	.word	0x0801116f
 80110f8:	080111a3 	.word	0x080111a3
 80110fc:	080111a3 	.word	0x080111a3
 8011100:	080111a3 	.word	0x080111a3
 8011104:	080111a3 	.word	0x080111a3
 8011108:	080111a3 	.word	0x080111a3
 801110c:	080111a3 	.word	0x080111a3
 8011110:	080111a3 	.word	0x080111a3
 8011114:	080111a3 	.word	0x080111a3
 8011118:	080111a3 	.word	0x080111a3
 801111c:	080111a3 	.word	0x080111a3
 8011120:	080111a3 	.word	0x080111a3
 8011124:	080111a3 	.word	0x080111a3
 8011128:	080111a3 	.word	0x080111a3
 801112c:	080111a3 	.word	0x080111a3
 8011130:	080111a3 	.word	0x080111a3
 8011134:	08011195 	.word	0x08011195
 8011138:	2b40      	cmp	r3, #64	; 0x40
 801113a:	d02e      	beq.n	801119a <UART_SetConfig+0xa36>
 801113c:	e031      	b.n	80111a2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801113e:	f7f9 fbdd 	bl	800a8fc <HAL_RCC_GetPCLK1Freq>
 8011142:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011144:	e033      	b.n	80111ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011146:	f7f9 fbef 	bl	800a928 <HAL_RCC_GetPCLK2Freq>
 801114a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801114c:	e02f      	b.n	80111ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011152:	4618      	mov	r0, r3
 8011154:	f7fb fbe0 	bl	800c918 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801115a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801115c:	e027      	b.n	80111ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801115e:	f107 0318 	add.w	r3, r7, #24
 8011162:	4618      	mov	r0, r3
 8011164:	f7fb fd2c 	bl	800cbc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011168:	69fb      	ldr	r3, [r7, #28]
 801116a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801116c:	e01f      	b.n	80111ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801116e:	4b2d      	ldr	r3, [pc, #180]	; (8011224 <UART_SetConfig+0xac0>)
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	f003 0320 	and.w	r3, r3, #32
 8011176:	2b00      	cmp	r3, #0
 8011178:	d009      	beq.n	801118e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801117a:	4b2a      	ldr	r3, [pc, #168]	; (8011224 <UART_SetConfig+0xac0>)
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	08db      	lsrs	r3, r3, #3
 8011180:	f003 0303 	and.w	r3, r3, #3
 8011184:	4a28      	ldr	r2, [pc, #160]	; (8011228 <UART_SetConfig+0xac4>)
 8011186:	fa22 f303 	lsr.w	r3, r2, r3
 801118a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801118c:	e00f      	b.n	80111ae <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801118e:	4b26      	ldr	r3, [pc, #152]	; (8011228 <UART_SetConfig+0xac4>)
 8011190:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011192:	e00c      	b.n	80111ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011194:	4b25      	ldr	r3, [pc, #148]	; (801122c <UART_SetConfig+0xac8>)
 8011196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011198:	e009      	b.n	80111ae <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801119a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801119e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80111a0:	e005      	b.n	80111ae <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80111a2:	2300      	movs	r3, #0
 80111a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80111a6:	2301      	movs	r3, #1
 80111a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80111ac:	bf00      	nop
    }

    if (pclk != 0U)
 80111ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d021      	beq.n	80111f8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111b8:	4a1d      	ldr	r2, [pc, #116]	; (8011230 <UART_SetConfig+0xacc>)
 80111ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111be:	461a      	mov	r2, r3
 80111c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80111c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80111c6:	697b      	ldr	r3, [r7, #20]
 80111c8:	685b      	ldr	r3, [r3, #4]
 80111ca:	085b      	lsrs	r3, r3, #1
 80111cc:	441a      	add	r2, r3
 80111ce:	697b      	ldr	r3, [r7, #20]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80111d6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80111d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111da:	2b0f      	cmp	r3, #15
 80111dc:	d909      	bls.n	80111f2 <UART_SetConfig+0xa8e>
 80111de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111e4:	d205      	bcs.n	80111f2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80111e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111e8:	b29a      	uxth	r2, r3
 80111ea:	697b      	ldr	r3, [r7, #20]
 80111ec:	681b      	ldr	r3, [r3, #0]
 80111ee:	60da      	str	r2, [r3, #12]
 80111f0:	e002      	b.n	80111f8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80111f2:	2301      	movs	r3, #1
 80111f4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80111f8:	697b      	ldr	r3, [r7, #20]
 80111fa:	2201      	movs	r2, #1
 80111fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011200:	697b      	ldr	r3, [r7, #20]
 8011202:	2201      	movs	r2, #1
 8011204:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8011208:	697b      	ldr	r3, [r7, #20]
 801120a:	2200      	movs	r2, #0
 801120c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 801120e:	697b      	ldr	r3, [r7, #20]
 8011210:	2200      	movs	r2, #0
 8011212:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8011214:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8011218:	4618      	mov	r0, r3
 801121a:	3748      	adds	r7, #72	; 0x48
 801121c:	46bd      	mov	sp, r7
 801121e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011222:	bf00      	nop
 8011224:	58024400 	.word	0x58024400
 8011228:	03d09000 	.word	0x03d09000
 801122c:	003d0900 	.word	0x003d0900
 8011230:	08016fdc 	.word	0x08016fdc

08011234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011234:	b480      	push	{r7}
 8011236:	b083      	sub	sp, #12
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011240:	f003 0308 	and.w	r3, r3, #8
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00a      	beq.n	801125e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	430a      	orrs	r2, r1
 801125c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011262:	f003 0301 	and.w	r3, r3, #1
 8011266:	2b00      	cmp	r3, #0
 8011268:	d00a      	beq.n	8011280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	430a      	orrs	r2, r1
 801127e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011284:	f003 0302 	and.w	r3, r3, #2
 8011288:	2b00      	cmp	r3, #0
 801128a:	d00a      	beq.n	80112a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	430a      	orrs	r2, r1
 80112a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112a6:	f003 0304 	and.w	r3, r3, #4
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00a      	beq.n	80112c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	685b      	ldr	r3, [r3, #4]
 80112b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	430a      	orrs	r2, r1
 80112c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c8:	f003 0310 	and.w	r3, r3, #16
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d00a      	beq.n	80112e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	689b      	ldr	r3, [r3, #8]
 80112d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	430a      	orrs	r2, r1
 80112e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112ea:	f003 0320 	and.w	r3, r3, #32
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d00a      	beq.n	8011308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	689b      	ldr	r3, [r3, #8]
 80112f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	430a      	orrs	r2, r1
 8011306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801130c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011310:	2b00      	cmp	r3, #0
 8011312:	d01a      	beq.n	801134a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	685b      	ldr	r3, [r3, #4]
 801131a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801131e:	687b      	ldr	r3, [r7, #4]
 8011320:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	430a      	orrs	r2, r1
 8011328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801132e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011332:	d10a      	bne.n	801134a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	685b      	ldr	r3, [r3, #4]
 801133a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	681b      	ldr	r3, [r3, #0]
 8011346:	430a      	orrs	r2, r1
 8011348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011352:	2b00      	cmp	r3, #0
 8011354:	d00a      	beq.n	801136c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	681b      	ldr	r3, [r3, #0]
 801135a:	685b      	ldr	r3, [r3, #4]
 801135c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	681b      	ldr	r3, [r3, #0]
 8011368:	430a      	orrs	r2, r1
 801136a:	605a      	str	r2, [r3, #4]
  }
}
 801136c:	bf00      	nop
 801136e:	370c      	adds	r7, #12
 8011370:	46bd      	mov	sp, r7
 8011372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011376:	4770      	bx	lr

08011378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b098      	sub	sp, #96	; 0x60
 801137c:	af02      	add	r7, sp, #8
 801137e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011380:	687b      	ldr	r3, [r7, #4]
 8011382:	2200      	movs	r2, #0
 8011384:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011388:	f7f2 fb72 	bl	8003a70 <HAL_GetTick>
 801138c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	681b      	ldr	r3, [r3, #0]
 8011392:	681b      	ldr	r3, [r3, #0]
 8011394:	f003 0308 	and.w	r3, r3, #8
 8011398:	2b08      	cmp	r3, #8
 801139a:	d12f      	bne.n	80113fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801139c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80113a0:	9300      	str	r3, [sp, #0]
 80113a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113a4:	2200      	movs	r2, #0
 80113a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f000 f88e 	bl	80114cc <UART_WaitOnFlagUntilTimeout>
 80113b0:	4603      	mov	r3, r0
 80113b2:	2b00      	cmp	r3, #0
 80113b4:	d022      	beq.n	80113fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80113b6:	687b      	ldr	r3, [r7, #4]
 80113b8:	681b      	ldr	r3, [r3, #0]
 80113ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113be:	e853 3f00 	ldrex	r3, [r3]
 80113c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80113c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80113c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113ca:	653b      	str	r3, [r7, #80]	; 0x50
 80113cc:	687b      	ldr	r3, [r7, #4]
 80113ce:	681b      	ldr	r3, [r3, #0]
 80113d0:	461a      	mov	r2, r3
 80113d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80113d4:	647b      	str	r3, [r7, #68]	; 0x44
 80113d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80113d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80113da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80113dc:	e841 2300 	strex	r3, r2, [r1]
 80113e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80113e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113e4:	2b00      	cmp	r3, #0
 80113e6:	d1e6      	bne.n	80113b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80113e8:	687b      	ldr	r3, [r7, #4]
 80113ea:	2220      	movs	r2, #32
 80113ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80113f0:	687b      	ldr	r3, [r7, #4]
 80113f2:	2200      	movs	r2, #0
 80113f4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80113f8:	2303      	movs	r3, #3
 80113fa:	e063      	b.n	80114c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	681b      	ldr	r3, [r3, #0]
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	f003 0304 	and.w	r3, r3, #4
 8011406:	2b04      	cmp	r3, #4
 8011408:	d149      	bne.n	801149e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801140a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801140e:	9300      	str	r3, [sp, #0]
 8011410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011412:	2200      	movs	r2, #0
 8011414:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 f857 	bl	80114cc <UART_WaitOnFlagUntilTimeout>
 801141e:	4603      	mov	r3, r0
 8011420:	2b00      	cmp	r3, #0
 8011422:	d03c      	beq.n	801149e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801142c:	e853 3f00 	ldrex	r3, [r3]
 8011430:	623b      	str	r3, [r7, #32]
   return(result);
 8011432:	6a3b      	ldr	r3, [r7, #32]
 8011434:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011438:	64fb      	str	r3, [r7, #76]	; 0x4c
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	461a      	mov	r2, r3
 8011440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011442:	633b      	str	r3, [r7, #48]	; 0x30
 8011444:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801144a:	e841 2300 	strex	r3, r2, [r1]
 801144e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011452:	2b00      	cmp	r3, #0
 8011454:	d1e6      	bne.n	8011424 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	681b      	ldr	r3, [r3, #0]
 801145a:	3308      	adds	r3, #8
 801145c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801145e:	693b      	ldr	r3, [r7, #16]
 8011460:	e853 3f00 	ldrex	r3, [r3]
 8011464:	60fb      	str	r3, [r7, #12]
   return(result);
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	f023 0301 	bic.w	r3, r3, #1
 801146c:	64bb      	str	r3, [r7, #72]	; 0x48
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	3308      	adds	r3, #8
 8011474:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011476:	61fa      	str	r2, [r7, #28]
 8011478:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801147a:	69b9      	ldr	r1, [r7, #24]
 801147c:	69fa      	ldr	r2, [r7, #28]
 801147e:	e841 2300 	strex	r3, r2, [r1]
 8011482:	617b      	str	r3, [r7, #20]
   return(result);
 8011484:	697b      	ldr	r3, [r7, #20]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d1e5      	bne.n	8011456 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801148a:	687b      	ldr	r3, [r7, #4]
 801148c:	2220      	movs	r2, #32
 801148e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	2200      	movs	r2, #0
 8011496:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801149a:	2303      	movs	r3, #3
 801149c:	e012      	b.n	80114c4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	2220      	movs	r2, #32
 80114a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	2220      	movs	r2, #32
 80114aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80114ae:	687b      	ldr	r3, [r7, #4]
 80114b0:	2200      	movs	r2, #0
 80114b2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80114b4:	687b      	ldr	r3, [r7, #4]
 80114b6:	2200      	movs	r2, #0
 80114b8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	2200      	movs	r2, #0
 80114be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80114c2:	2300      	movs	r3, #0
}
 80114c4:	4618      	mov	r0, r3
 80114c6:	3758      	adds	r7, #88	; 0x58
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}

080114cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80114cc:	b580      	push	{r7, lr}
 80114ce:	b084      	sub	sp, #16
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	60f8      	str	r0, [r7, #12]
 80114d4:	60b9      	str	r1, [r7, #8]
 80114d6:	603b      	str	r3, [r7, #0]
 80114d8:	4613      	mov	r3, r2
 80114da:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80114dc:	e04f      	b.n	801157e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80114de:	69bb      	ldr	r3, [r7, #24]
 80114e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114e4:	d04b      	beq.n	801157e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114e6:	f7f2 fac3 	bl	8003a70 <HAL_GetTick>
 80114ea:	4602      	mov	r2, r0
 80114ec:	683b      	ldr	r3, [r7, #0]
 80114ee:	1ad3      	subs	r3, r2, r3
 80114f0:	69ba      	ldr	r2, [r7, #24]
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d302      	bcc.n	80114fc <UART_WaitOnFlagUntilTimeout+0x30>
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d101      	bne.n	8011500 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80114fc:	2303      	movs	r3, #3
 80114fe:	e04e      	b.n	801159e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	681b      	ldr	r3, [r3, #0]
 8011506:	f003 0304 	and.w	r3, r3, #4
 801150a:	2b00      	cmp	r3, #0
 801150c:	d037      	beq.n	801157e <UART_WaitOnFlagUntilTimeout+0xb2>
 801150e:	68bb      	ldr	r3, [r7, #8]
 8011510:	2b80      	cmp	r3, #128	; 0x80
 8011512:	d034      	beq.n	801157e <UART_WaitOnFlagUntilTimeout+0xb2>
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	2b40      	cmp	r3, #64	; 0x40
 8011518:	d031      	beq.n	801157e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	681b      	ldr	r3, [r3, #0]
 801151e:	69db      	ldr	r3, [r3, #28]
 8011520:	f003 0308 	and.w	r3, r3, #8
 8011524:	2b08      	cmp	r3, #8
 8011526:	d110      	bne.n	801154a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	681b      	ldr	r3, [r3, #0]
 801152c:	2208      	movs	r2, #8
 801152e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011530:	68f8      	ldr	r0, [r7, #12]
 8011532:	f000 f99d 	bl	8011870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	2208      	movs	r2, #8
 801153a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2200      	movs	r2, #0
 8011542:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011546:	2301      	movs	r3, #1
 8011548:	e029      	b.n	801159e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801154a:	68fb      	ldr	r3, [r7, #12]
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	69db      	ldr	r3, [r3, #28]
 8011550:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011554:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011558:	d111      	bne.n	801157e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8011562:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011564:	68f8      	ldr	r0, [r7, #12]
 8011566:	f000 f983 	bl	8011870 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2220      	movs	r2, #32
 801156e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	2200      	movs	r2, #0
 8011576:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 801157a:	2303      	movs	r3, #3
 801157c:	e00f      	b.n	801159e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	681b      	ldr	r3, [r3, #0]
 8011582:	69da      	ldr	r2, [r3, #28]
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	4013      	ands	r3, r2
 8011588:	68ba      	ldr	r2, [r7, #8]
 801158a:	429a      	cmp	r2, r3
 801158c:	bf0c      	ite	eq
 801158e:	2301      	moveq	r3, #1
 8011590:	2300      	movne	r3, #0
 8011592:	b2db      	uxtb	r3, r3
 8011594:	461a      	mov	r2, r3
 8011596:	79fb      	ldrb	r3, [r7, #7]
 8011598:	429a      	cmp	r2, r3
 801159a:	d0a0      	beq.n	80114de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801159c:	2300      	movs	r3, #0
}
 801159e:	4618      	mov	r0, r3
 80115a0:	3710      	adds	r7, #16
 80115a2:	46bd      	mov	sp, r7
 80115a4:	bd80      	pop	{r7, pc}
	...

080115a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80115a8:	b480      	push	{r7}
 80115aa:	b0a3      	sub	sp, #140	; 0x8c
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	60f8      	str	r0, [r7, #12]
 80115b0:	60b9      	str	r1, [r7, #8]
 80115b2:	4613      	mov	r3, r2
 80115b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	68ba      	ldr	r2, [r7, #8]
 80115ba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80115bc:	68fb      	ldr	r3, [r7, #12]
 80115be:	88fa      	ldrh	r2, [r7, #6]
 80115c0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80115c4:	68fb      	ldr	r3, [r7, #12]
 80115c6:	88fa      	ldrh	r2, [r7, #6]
 80115c8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80115cc:	68fb      	ldr	r3, [r7, #12]
 80115ce:	2200      	movs	r2, #0
 80115d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80115d2:	68fb      	ldr	r3, [r7, #12]
 80115d4:	689b      	ldr	r3, [r3, #8]
 80115d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80115da:	d10e      	bne.n	80115fa <UART_Start_Receive_IT+0x52>
 80115dc:	68fb      	ldr	r3, [r7, #12]
 80115de:	691b      	ldr	r3, [r3, #16]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d105      	bne.n	80115f0 <UART_Start_Receive_IT+0x48>
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80115ea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115ee:	e02d      	b.n	801164c <UART_Start_Receive_IT+0xa4>
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	22ff      	movs	r2, #255	; 0xff
 80115f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115f8:	e028      	b.n	801164c <UART_Start_Receive_IT+0xa4>
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	689b      	ldr	r3, [r3, #8]
 80115fe:	2b00      	cmp	r3, #0
 8011600:	d10d      	bne.n	801161e <UART_Start_Receive_IT+0x76>
 8011602:	68fb      	ldr	r3, [r7, #12]
 8011604:	691b      	ldr	r3, [r3, #16]
 8011606:	2b00      	cmp	r3, #0
 8011608:	d104      	bne.n	8011614 <UART_Start_Receive_IT+0x6c>
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	22ff      	movs	r2, #255	; 0xff
 801160e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011612:	e01b      	b.n	801164c <UART_Start_Receive_IT+0xa4>
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	227f      	movs	r2, #127	; 0x7f
 8011618:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 801161c:	e016      	b.n	801164c <UART_Start_Receive_IT+0xa4>
 801161e:	68fb      	ldr	r3, [r7, #12]
 8011620:	689b      	ldr	r3, [r3, #8]
 8011622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8011626:	d10d      	bne.n	8011644 <UART_Start_Receive_IT+0x9c>
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	691b      	ldr	r3, [r3, #16]
 801162c:	2b00      	cmp	r3, #0
 801162e:	d104      	bne.n	801163a <UART_Start_Receive_IT+0x92>
 8011630:	68fb      	ldr	r3, [r7, #12]
 8011632:	227f      	movs	r2, #127	; 0x7f
 8011634:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011638:	e008      	b.n	801164c <UART_Start_Receive_IT+0xa4>
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	223f      	movs	r2, #63	; 0x3f
 801163e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8011642:	e003      	b.n	801164c <UART_Start_Receive_IT+0xa4>
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	2200      	movs	r2, #0
 8011648:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	2200      	movs	r2, #0
 8011650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	2222      	movs	r2, #34	; 0x22
 8011658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801165c:	68fb      	ldr	r3, [r7, #12]
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	3308      	adds	r3, #8
 8011662:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011664:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011666:	e853 3f00 	ldrex	r3, [r3]
 801166a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 801166c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801166e:	f043 0301 	orr.w	r3, r3, #1
 8011672:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	681b      	ldr	r3, [r3, #0]
 801167a:	3308      	adds	r3, #8
 801167c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011680:	673a      	str	r2, [r7, #112]	; 0x70
 8011682:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011684:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011686:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011688:	e841 2300 	strex	r3, r2, [r1]
 801168c:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801168e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011690:	2b00      	cmp	r3, #0
 8011692:	d1e3      	bne.n	801165c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011698:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801169c:	d14f      	bne.n	801173e <UART_Start_Receive_IT+0x196>
 801169e:	68fb      	ldr	r3, [r7, #12]
 80116a0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80116a4:	88fa      	ldrh	r2, [r7, #6]
 80116a6:	429a      	cmp	r2, r3
 80116a8:	d349      	bcc.n	801173e <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116aa:	68fb      	ldr	r3, [r7, #12]
 80116ac:	689b      	ldr	r3, [r3, #8]
 80116ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80116b2:	d107      	bne.n	80116c4 <UART_Start_Receive_IT+0x11c>
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	691b      	ldr	r3, [r3, #16]
 80116b8:	2b00      	cmp	r3, #0
 80116ba:	d103      	bne.n	80116c4 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80116bc:	68fb      	ldr	r3, [r7, #12]
 80116be:	4a47      	ldr	r2, [pc, #284]	; (80117dc <UART_Start_Receive_IT+0x234>)
 80116c0:	675a      	str	r2, [r3, #116]	; 0x74
 80116c2:	e002      	b.n	80116ca <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	4a46      	ldr	r2, [pc, #280]	; (80117e0 <UART_Start_Receive_IT+0x238>)
 80116c8:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	691b      	ldr	r3, [r3, #16]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d01a      	beq.n	8011708 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80116d2:	68fb      	ldr	r3, [r7, #12]
 80116d4:	681b      	ldr	r3, [r3, #0]
 80116d6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80116da:	e853 3f00 	ldrex	r3, [r3]
 80116de:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80116e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80116ea:	68fb      	ldr	r3, [r7, #12]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	461a      	mov	r2, r3
 80116f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80116f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80116f6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116f8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116fa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80116fc:	e841 2300 	strex	r3, r2, [r1]
 8011700:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8011702:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011704:	2b00      	cmp	r3, #0
 8011706:	d1e4      	bne.n	80116d2 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8011708:	68fb      	ldr	r3, [r7, #12]
 801170a:	681b      	ldr	r3, [r3, #0]
 801170c:	3308      	adds	r3, #8
 801170e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011712:	e853 3f00 	ldrex	r3, [r3]
 8011716:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801171a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801171e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	3308      	adds	r3, #8
 8011726:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011728:	64ba      	str	r2, [r7, #72]	; 0x48
 801172a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801172c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801172e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011730:	e841 2300 	strex	r3, r2, [r1]
 8011734:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8011736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011738:	2b00      	cmp	r3, #0
 801173a:	d1e5      	bne.n	8011708 <UART_Start_Receive_IT+0x160>
 801173c:	e046      	b.n	80117cc <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801173e:	68fb      	ldr	r3, [r7, #12]
 8011740:	689b      	ldr	r3, [r3, #8]
 8011742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011746:	d107      	bne.n	8011758 <UART_Start_Receive_IT+0x1b0>
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	691b      	ldr	r3, [r3, #16]
 801174c:	2b00      	cmp	r3, #0
 801174e:	d103      	bne.n	8011758 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8011750:	68fb      	ldr	r3, [r7, #12]
 8011752:	4a24      	ldr	r2, [pc, #144]	; (80117e4 <UART_Start_Receive_IT+0x23c>)
 8011754:	675a      	str	r2, [r3, #116]	; 0x74
 8011756:	e002      	b.n	801175e <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	4a23      	ldr	r2, [pc, #140]	; (80117e8 <UART_Start_Receive_IT+0x240>)
 801175c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	691b      	ldr	r3, [r3, #16]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d019      	beq.n	801179a <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011766:	68fb      	ldr	r3, [r7, #12]
 8011768:	681b      	ldr	r3, [r3, #0]
 801176a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801176c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801176e:	e853 3f00 	ldrex	r3, [r3]
 8011772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011776:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801177a:	677b      	str	r3, [r7, #116]	; 0x74
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	681b      	ldr	r3, [r3, #0]
 8011780:	461a      	mov	r2, r3
 8011782:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011784:	637b      	str	r3, [r7, #52]	; 0x34
 8011786:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801178a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801178c:	e841 2300 	strex	r3, r2, [r1]
 8011790:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8011792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011794:	2b00      	cmp	r3, #0
 8011796:	d1e6      	bne.n	8011766 <UART_Start_Receive_IT+0x1be>
 8011798:	e018      	b.n	80117cc <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801179a:	68fb      	ldr	r3, [r7, #12]
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117a0:	697b      	ldr	r3, [r7, #20]
 80117a2:	e853 3f00 	ldrex	r3, [r3]
 80117a6:	613b      	str	r3, [r7, #16]
   return(result);
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	f043 0320 	orr.w	r3, r3, #32
 80117ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80117b0:	68fb      	ldr	r3, [r7, #12]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	461a      	mov	r2, r3
 80117b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80117b8:	623b      	str	r3, [r7, #32]
 80117ba:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117bc:	69f9      	ldr	r1, [r7, #28]
 80117be:	6a3a      	ldr	r2, [r7, #32]
 80117c0:	e841 2300 	strex	r3, r2, [r1]
 80117c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80117c6:	69bb      	ldr	r3, [r7, #24]
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1e6      	bne.n	801179a <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 80117cc:	2300      	movs	r3, #0
}
 80117ce:	4618      	mov	r0, r3
 80117d0:	378c      	adds	r7, #140	; 0x8c
 80117d2:	46bd      	mov	sp, r7
 80117d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117d8:	4770      	bx	lr
 80117da:	bf00      	nop
 80117dc:	080121c1 	.word	0x080121c1
 80117e0:	08011e61 	.word	0x08011e61
 80117e4:	08011ca9 	.word	0x08011ca9
 80117e8:	08011af1 	.word	0x08011af1

080117ec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80117ec:	b480      	push	{r7}
 80117ee:	b08f      	sub	sp, #60	; 0x3c
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80117f4:	687b      	ldr	r3, [r7, #4]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117fa:	6a3b      	ldr	r3, [r7, #32]
 80117fc:	e853 3f00 	ldrex	r3, [r3]
 8011800:	61fb      	str	r3, [r7, #28]
   return(result);
 8011802:	69fb      	ldr	r3, [r7, #28]
 8011804:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8011808:	637b      	str	r3, [r7, #52]	; 0x34
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	681b      	ldr	r3, [r3, #0]
 801180e:	461a      	mov	r2, r3
 8011810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011812:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011814:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011816:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801181a:	e841 2300 	strex	r3, r2, [r1]
 801181e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011822:	2b00      	cmp	r3, #0
 8011824:	d1e6      	bne.n	80117f4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	3308      	adds	r3, #8
 801182c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	e853 3f00 	ldrex	r3, [r3]
 8011834:	60bb      	str	r3, [r7, #8]
   return(result);
 8011836:	68bb      	ldr	r3, [r7, #8]
 8011838:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801183c:	633b      	str	r3, [r7, #48]	; 0x30
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	681b      	ldr	r3, [r3, #0]
 8011842:	3308      	adds	r3, #8
 8011844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011846:	61ba      	str	r2, [r7, #24]
 8011848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801184a:	6979      	ldr	r1, [r7, #20]
 801184c:	69ba      	ldr	r2, [r7, #24]
 801184e:	e841 2300 	strex	r3, r2, [r1]
 8011852:	613b      	str	r3, [r7, #16]
   return(result);
 8011854:	693b      	ldr	r3, [r7, #16]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d1e5      	bne.n	8011826 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2220      	movs	r2, #32
 801185e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 8011862:	bf00      	nop
 8011864:	373c      	adds	r7, #60	; 0x3c
 8011866:	46bd      	mov	sp, r7
 8011868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801186c:	4770      	bx	lr
	...

08011870 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011870:	b480      	push	{r7}
 8011872:	b095      	sub	sp, #84	; 0x54
 8011874:	af00      	add	r7, sp, #0
 8011876:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	681b      	ldr	r3, [r3, #0]
 801187c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801187e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011880:	e853 3f00 	ldrex	r3, [r3]
 8011884:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011888:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801188c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801188e:	687b      	ldr	r3, [r7, #4]
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	461a      	mov	r2, r3
 8011894:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011896:	643b      	str	r3, [r7, #64]	; 0x40
 8011898:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801189a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801189c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801189e:	e841 2300 	strex	r3, r2, [r1]
 80118a2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80118a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d1e6      	bne.n	8011878 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	3308      	adds	r3, #8
 80118b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118b2:	6a3b      	ldr	r3, [r7, #32]
 80118b4:	e853 3f00 	ldrex	r3, [r3]
 80118b8:	61fb      	str	r3, [r7, #28]
   return(result);
 80118ba:	69fa      	ldr	r2, [r7, #28]
 80118bc:	4b1e      	ldr	r3, [pc, #120]	; (8011938 <UART_EndRxTransfer+0xc8>)
 80118be:	4013      	ands	r3, r2
 80118c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	3308      	adds	r3, #8
 80118c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80118ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80118cc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80118d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80118d2:	e841 2300 	strex	r3, r2, [r1]
 80118d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80118d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1e5      	bne.n	80118aa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118e2:	2b01      	cmp	r3, #1
 80118e4:	d118      	bne.n	8011918 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	681b      	ldr	r3, [r3, #0]
 80118ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	e853 3f00 	ldrex	r3, [r3]
 80118f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80118f4:	68bb      	ldr	r3, [r7, #8]
 80118f6:	f023 0310 	bic.w	r3, r3, #16
 80118fa:	647b      	str	r3, [r7, #68]	; 0x44
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	461a      	mov	r2, r3
 8011902:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011904:	61bb      	str	r3, [r7, #24]
 8011906:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011908:	6979      	ldr	r1, [r7, #20]
 801190a:	69ba      	ldr	r2, [r7, #24]
 801190c:	e841 2300 	strex	r3, r2, [r1]
 8011910:	613b      	str	r3, [r7, #16]
   return(result);
 8011912:	693b      	ldr	r3, [r7, #16]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d1e6      	bne.n	80118e6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2220      	movs	r2, #32
 801191c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2200      	movs	r2, #0
 8011924:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2200      	movs	r2, #0
 801192a:	675a      	str	r2, [r3, #116]	; 0x74
}
 801192c:	bf00      	nop
 801192e:	3754      	adds	r7, #84	; 0x54
 8011930:	46bd      	mov	sp, r7
 8011932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011936:	4770      	bx	lr
 8011938:	effffffe 	.word	0xeffffffe

0801193c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 801193c:	b580      	push	{r7, lr}
 801193e:	b090      	sub	sp, #64	; 0x40
 8011940:	af00      	add	r7, sp, #0
 8011942:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011948:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	69db      	ldr	r3, [r3, #28]
 801194e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011952:	d037      	beq.n	80119c4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011956:	2200      	movs	r2, #0
 8011958:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801195c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	3308      	adds	r3, #8
 8011962:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011966:	e853 3f00 	ldrex	r3, [r3]
 801196a:	623b      	str	r3, [r7, #32]
   return(result);
 801196c:	6a3b      	ldr	r3, [r7, #32]
 801196e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011972:	63bb      	str	r3, [r7, #56]	; 0x38
 8011974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011976:	681b      	ldr	r3, [r3, #0]
 8011978:	3308      	adds	r3, #8
 801197a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801197c:	633a      	str	r2, [r7, #48]	; 0x30
 801197e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011980:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011982:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011984:	e841 2300 	strex	r3, r2, [r1]
 8011988:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801198a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801198c:	2b00      	cmp	r3, #0
 801198e:	d1e5      	bne.n	801195c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011992:	681b      	ldr	r3, [r3, #0]
 8011994:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011996:	693b      	ldr	r3, [r7, #16]
 8011998:	e853 3f00 	ldrex	r3, [r3]
 801199c:	60fb      	str	r3, [r7, #12]
   return(result);
 801199e:	68fb      	ldr	r3, [r7, #12]
 80119a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80119a4:	637b      	str	r3, [r7, #52]	; 0x34
 80119a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	461a      	mov	r2, r3
 80119ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80119ae:	61fb      	str	r3, [r7, #28]
 80119b0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80119b2:	69b9      	ldr	r1, [r7, #24]
 80119b4:	69fa      	ldr	r2, [r7, #28]
 80119b6:	e841 2300 	strex	r3, r2, [r1]
 80119ba:	617b      	str	r3, [r7, #20]
   return(result);
 80119bc:	697b      	ldr	r3, [r7, #20]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d1e6      	bne.n	8011990 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80119c2:	e002      	b.n	80119ca <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 80119c4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80119c6:	f7f0 fa9d 	bl	8001f04 <HAL_UART_TxCpltCallback>
}
 80119ca:	bf00      	nop
 80119cc:	3740      	adds	r7, #64	; 0x40
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}

080119d2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80119d2:	b580      	push	{r7, lr}
 80119d4:	b084      	sub	sp, #16
 80119d6:	af00      	add	r7, sp, #0
 80119d8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119de:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80119e0:	68f8      	ldr	r0, [r7, #12]
 80119e2:	f7fe fe9f 	bl	8010724 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80119e6:	bf00      	nop
 80119e8:	3710      	adds	r7, #16
 80119ea:	46bd      	mov	sp, r7
 80119ec:	bd80      	pop	{r7, pc}

080119ee <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80119ee:	b580      	push	{r7, lr}
 80119f0:	b086      	sub	sp, #24
 80119f2:	af00      	add	r7, sp, #0
 80119f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119fa:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80119fc:	697b      	ldr	r3, [r7, #20]
 80119fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011a02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011a04:	697b      	ldr	r3, [r7, #20]
 8011a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011a0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	689b      	ldr	r3, [r3, #8]
 8011a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011a16:	2b80      	cmp	r3, #128	; 0x80
 8011a18:	d109      	bne.n	8011a2e <UART_DMAError+0x40>
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	2b21      	cmp	r3, #33	; 0x21
 8011a1e:	d106      	bne.n	8011a2e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011a20:	697b      	ldr	r3, [r7, #20]
 8011a22:	2200      	movs	r2, #0
 8011a24:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8011a28:	6978      	ldr	r0, [r7, #20]
 8011a2a:	f7ff fedf 	bl	80117ec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011a2e:	697b      	ldr	r3, [r7, #20]
 8011a30:	681b      	ldr	r3, [r3, #0]
 8011a32:	689b      	ldr	r3, [r3, #8]
 8011a34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011a38:	2b40      	cmp	r3, #64	; 0x40
 8011a3a:	d109      	bne.n	8011a50 <UART_DMAError+0x62>
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	2b22      	cmp	r3, #34	; 0x22
 8011a40:	d106      	bne.n	8011a50 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011a42:	697b      	ldr	r3, [r7, #20]
 8011a44:	2200      	movs	r2, #0
 8011a46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011a4a:	6978      	ldr	r0, [r7, #20]
 8011a4c:	f7ff ff10 	bl	8011870 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a56:	f043 0210 	orr.w	r2, r3, #16
 8011a5a:	697b      	ldr	r3, [r7, #20]
 8011a5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a60:	6978      	ldr	r0, [r7, #20]
 8011a62:	f7fe fe69 	bl	8010738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a66:	bf00      	nop
 8011a68:	3718      	adds	r7, #24
 8011a6a:	46bd      	mov	sp, r7
 8011a6c:	bd80      	pop	{r7, pc}

08011a6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a6e:	b580      	push	{r7, lr}
 8011a70:	b084      	sub	sp, #16
 8011a72:	af00      	add	r7, sp, #0
 8011a74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011a7c:	68fb      	ldr	r3, [r7, #12]
 8011a7e:	2200      	movs	r2, #0
 8011a80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011a84:	68fb      	ldr	r3, [r7, #12]
 8011a86:	2200      	movs	r2, #0
 8011a88:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a8c:	68f8      	ldr	r0, [r7, #12]
 8011a8e:	f7fe fe53 	bl	8010738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a92:	bf00      	nop
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b088      	sub	sp, #32
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	681b      	ldr	r3, [r3, #0]
 8011aa6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	e853 3f00 	ldrex	r3, [r3]
 8011aae:	60bb      	str	r3, [r7, #8]
   return(result);
 8011ab0:	68bb      	ldr	r3, [r7, #8]
 8011ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011ab6:	61fb      	str	r3, [r7, #28]
 8011ab8:	687b      	ldr	r3, [r7, #4]
 8011aba:	681b      	ldr	r3, [r3, #0]
 8011abc:	461a      	mov	r2, r3
 8011abe:	69fb      	ldr	r3, [r7, #28]
 8011ac0:	61bb      	str	r3, [r7, #24]
 8011ac2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011ac4:	6979      	ldr	r1, [r7, #20]
 8011ac6:	69ba      	ldr	r2, [r7, #24]
 8011ac8:	e841 2300 	strex	r3, r2, [r1]
 8011acc:	613b      	str	r3, [r7, #16]
   return(result);
 8011ace:	693b      	ldr	r3, [r7, #16]
 8011ad0:	2b00      	cmp	r3, #0
 8011ad2:	d1e6      	bne.n	8011aa2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2220      	movs	r2, #32
 8011ad8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011adc:	687b      	ldr	r3, [r7, #4]
 8011ade:	2200      	movs	r2, #0
 8011ae0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011ae2:	6878      	ldr	r0, [r7, #4]
 8011ae4:	f7f0 fa0e 	bl	8001f04 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011ae8:	bf00      	nop
 8011aea:	3720      	adds	r7, #32
 8011aec:	46bd      	mov	sp, r7
 8011aee:	bd80      	pop	{r7, pc}

08011af0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011af0:	b580      	push	{r7, lr}
 8011af2:	b09c      	sub	sp, #112	; 0x70
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011af8:	687b      	ldr	r3, [r7, #4]
 8011afa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011afe:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011b08:	2b22      	cmp	r3, #34	; 0x22
 8011b0a:	f040 80be 	bne.w	8011c8a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011b0e:	687b      	ldr	r3, [r7, #4]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b14:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011b18:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011b1c:	b2d9      	uxtb	r1, r3
 8011b1e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011b22:	b2da      	uxtb	r2, r3
 8011b24:	687b      	ldr	r3, [r7, #4]
 8011b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b28:	400a      	ands	r2, r1
 8011b2a:	b2d2      	uxtb	r2, r2
 8011b2c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011b32:	1c5a      	adds	r2, r3, #1
 8011b34:	687b      	ldr	r3, [r7, #4]
 8011b36:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b3e:	b29b      	uxth	r3, r3
 8011b40:	3b01      	subs	r3, #1
 8011b42:	b29a      	uxth	r2, r3
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b50:	b29b      	uxth	r3, r3
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	f040 80a1 	bne.w	8011c9a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	681b      	ldr	r3, [r3, #0]
 8011b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b60:	e853 3f00 	ldrex	r3, [r3]
 8011b64:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011b66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	681b      	ldr	r3, [r3, #0]
 8011b72:	461a      	mov	r2, r3
 8011b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b76:	65bb      	str	r3, [r7, #88]	; 0x58
 8011b78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011b7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b7e:	e841 2300 	strex	r3, r2, [r1]
 8011b82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011b84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b86:	2b00      	cmp	r3, #0
 8011b88:	d1e6      	bne.n	8011b58 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	3308      	adds	r3, #8
 8011b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b94:	e853 3f00 	ldrex	r3, [r3]
 8011b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b9c:	f023 0301 	bic.w	r3, r3, #1
 8011ba0:	667b      	str	r3, [r7, #100]	; 0x64
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	681b      	ldr	r3, [r3, #0]
 8011ba6:	3308      	adds	r3, #8
 8011ba8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011baa:	647a      	str	r2, [r7, #68]	; 0x44
 8011bac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011bb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011bb2:	e841 2300 	strex	r3, r2, [r1]
 8011bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011bb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d1e5      	bne.n	8011b8a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	2220      	movs	r2, #32
 8011bc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	2200      	movs	r2, #0
 8011bca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	2200      	movs	r2, #0
 8011bd0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	681b      	ldr	r3, [r3, #0]
 8011bd6:	4a33      	ldr	r2, [pc, #204]	; (8011ca4 <UART_RxISR_8BIT+0x1b4>)
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	d01f      	beq.n	8011c1c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	681b      	ldr	r3, [r3, #0]
 8011be0:	685b      	ldr	r3, [r3, #4]
 8011be2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d018      	beq.n	8011c1c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	681b      	ldr	r3, [r3, #0]
 8011bee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf2:	e853 3f00 	ldrex	r3, [r3]
 8011bf6:	623b      	str	r3, [r7, #32]
   return(result);
 8011bf8:	6a3b      	ldr	r3, [r7, #32]
 8011bfa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8011c00:	687b      	ldr	r3, [r7, #4]
 8011c02:	681b      	ldr	r3, [r3, #0]
 8011c04:	461a      	mov	r2, r3
 8011c06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011c08:	633b      	str	r3, [r7, #48]	; 0x30
 8011c0a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c10:	e841 2300 	strex	r3, r2, [r1]
 8011c14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d1e6      	bne.n	8011bea <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c20:	2b01      	cmp	r3, #1
 8011c22:	d12e      	bne.n	8011c82 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011c24:	687b      	ldr	r3, [r7, #4]
 8011c26:	2200      	movs	r2, #0
 8011c28:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011c2a:	687b      	ldr	r3, [r7, #4]
 8011c2c:	681b      	ldr	r3, [r3, #0]
 8011c2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011c30:	693b      	ldr	r3, [r7, #16]
 8011c32:	e853 3f00 	ldrex	r3, [r3]
 8011c36:	60fb      	str	r3, [r7, #12]
   return(result);
 8011c38:	68fb      	ldr	r3, [r7, #12]
 8011c3a:	f023 0310 	bic.w	r3, r3, #16
 8011c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	681b      	ldr	r3, [r3, #0]
 8011c44:	461a      	mov	r2, r3
 8011c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c48:	61fb      	str	r3, [r7, #28]
 8011c4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c4c:	69b9      	ldr	r1, [r7, #24]
 8011c4e:	69fa      	ldr	r2, [r7, #28]
 8011c50:	e841 2300 	strex	r3, r2, [r1]
 8011c54:	617b      	str	r3, [r7, #20]
   return(result);
 8011c56:	697b      	ldr	r3, [r7, #20]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d1e6      	bne.n	8011c2a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011c5c:	687b      	ldr	r3, [r7, #4]
 8011c5e:	681b      	ldr	r3, [r3, #0]
 8011c60:	69db      	ldr	r3, [r3, #28]
 8011c62:	f003 0310 	and.w	r3, r3, #16
 8011c66:	2b10      	cmp	r3, #16
 8011c68:	d103      	bne.n	8011c72 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c6a:	687b      	ldr	r3, [r7, #4]
 8011c6c:	681b      	ldr	r3, [r3, #0]
 8011c6e:	2210      	movs	r2, #16
 8011c70:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011c78:	4619      	mov	r1, r3
 8011c7a:	6878      	ldr	r0, [r7, #4]
 8011c7c:	f7fe fd66 	bl	801074c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011c80:	e00b      	b.n	8011c9a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011c82:	6878      	ldr	r0, [r7, #4]
 8011c84:	f7ee fcf2 	bl	800066c <HAL_UART_RxCpltCallback>
}
 8011c88:	e007      	b.n	8011c9a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	699a      	ldr	r2, [r3, #24]
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	f042 0208 	orr.w	r2, r2, #8
 8011c98:	619a      	str	r2, [r3, #24]
}
 8011c9a:	bf00      	nop
 8011c9c:	3770      	adds	r7, #112	; 0x70
 8011c9e:	46bd      	mov	sp, r7
 8011ca0:	bd80      	pop	{r7, pc}
 8011ca2:	bf00      	nop
 8011ca4:	58000c00 	.word	0x58000c00

08011ca8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011ca8:	b580      	push	{r7, lr}
 8011caa:	b09c      	sub	sp, #112	; 0x70
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011cb6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011cc0:	2b22      	cmp	r3, #34	; 0x22
 8011cc2:	f040 80be 	bne.w	8011e42 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	681b      	ldr	r3, [r3, #0]
 8011cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ccc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cd4:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011cd6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011cda:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011cde:	4013      	ands	r3, r2
 8011ce0:	b29a      	uxth	r2, r3
 8011ce2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ce4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011cea:	1c9a      	adds	r2, r3, #2
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011cf6:	b29b      	uxth	r3, r3
 8011cf8:	3b01      	subs	r3, #1
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011d08:	b29b      	uxth	r3, r3
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	f040 80a1 	bne.w	8011e52 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011d10:	687b      	ldr	r3, [r7, #4]
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d18:	e853 3f00 	ldrex	r3, [r3]
 8011d1c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011d24:	667b      	str	r3, [r7, #100]	; 0x64
 8011d26:	687b      	ldr	r3, [r7, #4]
 8011d28:	681b      	ldr	r3, [r3, #0]
 8011d2a:	461a      	mov	r2, r3
 8011d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011d2e:	657b      	str	r3, [r7, #84]	; 0x54
 8011d30:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d32:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011d34:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011d36:	e841 2300 	strex	r3, r2, [r1]
 8011d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011d3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d1e6      	bne.n	8011d10 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	3308      	adds	r3, #8
 8011d48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d4c:	e853 3f00 	ldrex	r3, [r3]
 8011d50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d54:	f023 0301 	bic.w	r3, r3, #1
 8011d58:	663b      	str	r3, [r7, #96]	; 0x60
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	3308      	adds	r3, #8
 8011d60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011d62:	643a      	str	r2, [r7, #64]	; 0x40
 8011d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d6a:	e841 2300 	strex	r3, r2, [r1]
 8011d6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d1e5      	bne.n	8011d42 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2220      	movs	r2, #32
 8011d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	2200      	movs	r2, #0
 8011d82:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d84:	687b      	ldr	r3, [r7, #4]
 8011d86:	2200      	movs	r2, #0
 8011d88:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	681b      	ldr	r3, [r3, #0]
 8011d8e:	4a33      	ldr	r2, [pc, #204]	; (8011e5c <UART_RxISR_16BIT+0x1b4>)
 8011d90:	4293      	cmp	r3, r2
 8011d92:	d01f      	beq.n	8011dd4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	681b      	ldr	r3, [r3, #0]
 8011d98:	685b      	ldr	r3, [r3, #4]
 8011d9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d018      	beq.n	8011dd4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	681b      	ldr	r3, [r3, #0]
 8011da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011da8:	6a3b      	ldr	r3, [r7, #32]
 8011daa:	e853 3f00 	ldrex	r3, [r3]
 8011dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8011db0:	69fb      	ldr	r3, [r7, #28]
 8011db2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011db6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	461a      	mov	r2, r3
 8011dbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dc2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dc4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dc8:	e841 2300 	strex	r3, r2, [r1]
 8011dcc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d1e6      	bne.n	8011da2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d12e      	bne.n	8011e3a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011ddc:	687b      	ldr	r3, [r7, #4]
 8011dde:	2200      	movs	r2, #0
 8011de0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	681b      	ldr	r3, [r3, #0]
 8011de6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011de8:	68fb      	ldr	r3, [r7, #12]
 8011dea:	e853 3f00 	ldrex	r3, [r3]
 8011dee:	60bb      	str	r3, [r7, #8]
   return(result);
 8011df0:	68bb      	ldr	r3, [r7, #8]
 8011df2:	f023 0310 	bic.w	r3, r3, #16
 8011df6:	65bb      	str	r3, [r7, #88]	; 0x58
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	681b      	ldr	r3, [r3, #0]
 8011dfc:	461a      	mov	r2, r3
 8011dfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011e00:	61bb      	str	r3, [r7, #24]
 8011e02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011e04:	6979      	ldr	r1, [r7, #20]
 8011e06:	69ba      	ldr	r2, [r7, #24]
 8011e08:	e841 2300 	strex	r3, r2, [r1]
 8011e0c:	613b      	str	r3, [r7, #16]
   return(result);
 8011e0e:	693b      	ldr	r3, [r7, #16]
 8011e10:	2b00      	cmp	r3, #0
 8011e12:	d1e6      	bne.n	8011de2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	69db      	ldr	r3, [r3, #28]
 8011e1a:	f003 0310 	and.w	r3, r3, #16
 8011e1e:	2b10      	cmp	r3, #16
 8011e20:	d103      	bne.n	8011e2a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	681b      	ldr	r3, [r3, #0]
 8011e26:	2210      	movs	r2, #16
 8011e28:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011e2a:	687b      	ldr	r3, [r7, #4]
 8011e2c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011e30:	4619      	mov	r1, r3
 8011e32:	6878      	ldr	r0, [r7, #4]
 8011e34:	f7fe fc8a 	bl	801074c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011e38:	e00b      	b.n	8011e52 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011e3a:	6878      	ldr	r0, [r7, #4]
 8011e3c:	f7ee fc16 	bl	800066c <HAL_UART_RxCpltCallback>
}
 8011e40:	e007      	b.n	8011e52 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	699a      	ldr	r2, [r3, #24]
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	f042 0208 	orr.w	r2, r2, #8
 8011e50:	619a      	str	r2, [r3, #24]
}
 8011e52:	bf00      	nop
 8011e54:	3770      	adds	r7, #112	; 0x70
 8011e56:	46bd      	mov	sp, r7
 8011e58:	bd80      	pop	{r7, pc}
 8011e5a:	bf00      	nop
 8011e5c:	58000c00 	.word	0x58000c00

08011e60 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b0ac      	sub	sp, #176	; 0xb0
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011e68:	687b      	ldr	r3, [r7, #4]
 8011e6a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e6e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011e72:	687b      	ldr	r3, [r7, #4]
 8011e74:	681b      	ldr	r3, [r3, #0]
 8011e76:	69db      	ldr	r3, [r3, #28]
 8011e78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011e7c:	687b      	ldr	r3, [r7, #4]
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	689b      	ldr	r3, [r3, #8]
 8011e8c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e90:	687b      	ldr	r3, [r7, #4]
 8011e92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e96:	2b22      	cmp	r3, #34	; 0x22
 8011e98:	f040 8180 	bne.w	801219c <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011ea2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011ea6:	e123      	b.n	80120f0 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	681b      	ldr	r3, [r3, #0]
 8011eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011eae:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011eb2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011eb6:	b2d9      	uxtb	r1, r3
 8011eb8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011ebc:	b2da      	uxtb	r2, r3
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ec2:	400a      	ands	r2, r1
 8011ec4:	b2d2      	uxtb	r2, r2
 8011ec6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ecc:	1c5a      	adds	r2, r3, #1
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011ed8:	b29b      	uxth	r3, r3
 8011eda:	3b01      	subs	r3, #1
 8011edc:	b29a      	uxth	r2, r3
 8011ede:	687b      	ldr	r3, [r7, #4]
 8011ee0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011ee4:	687b      	ldr	r3, [r7, #4]
 8011ee6:	681b      	ldr	r3, [r3, #0]
 8011ee8:	69db      	ldr	r3, [r3, #28]
 8011eea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011eee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011ef2:	f003 0307 	and.w	r3, r3, #7
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d053      	beq.n	8011fa2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011efa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011efe:	f003 0301 	and.w	r3, r3, #1
 8011f02:	2b00      	cmp	r3, #0
 8011f04:	d011      	beq.n	8011f2a <UART_RxISR_8BIT_FIFOEN+0xca>
 8011f06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d00b      	beq.n	8011f2a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	2201      	movs	r2, #1
 8011f18:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011f1a:	687b      	ldr	r3, [r7, #4]
 8011f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f20:	f043 0201 	orr.w	r2, r3, #1
 8011f24:	687b      	ldr	r3, [r7, #4]
 8011f26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f2e:	f003 0302 	and.w	r3, r3, #2
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d011      	beq.n	8011f5a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011f36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011f3a:	f003 0301 	and.w	r3, r3, #1
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d00b      	beq.n	8011f5a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	681b      	ldr	r3, [r3, #0]
 8011f46:	2202      	movs	r2, #2
 8011f48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011f4a:	687b      	ldr	r3, [r7, #4]
 8011f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f50:	f043 0204 	orr.w	r2, r3, #4
 8011f54:	687b      	ldr	r3, [r7, #4]
 8011f56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f5e:	f003 0304 	and.w	r3, r3, #4
 8011f62:	2b00      	cmp	r3, #0
 8011f64:	d011      	beq.n	8011f8a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011f66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011f6a:	f003 0301 	and.w	r3, r3, #1
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d00b      	beq.n	8011f8a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011f72:	687b      	ldr	r3, [r7, #4]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	2204      	movs	r2, #4
 8011f78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f80:	f043 0202 	orr.w	r2, r3, #2
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f8a:	687b      	ldr	r3, [r7, #4]
 8011f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d006      	beq.n	8011fa2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011f94:	6878      	ldr	r0, [r7, #4]
 8011f96:	f7fe fbcf 	bl	8010738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	f040 80a0 	bne.w	80120f0 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	681b      	ldr	r3, [r3, #0]
 8011fb4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011fb8:	e853 3f00 	ldrex	r3, [r3]
 8011fbc:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011fc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011fc4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011fc8:	687b      	ldr	r3, [r7, #4]
 8011fca:	681b      	ldr	r3, [r3, #0]
 8011fcc:	461a      	mov	r2, r3
 8011fce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011fd4:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fd6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011fd8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011fda:	e841 2300 	strex	r3, r2, [r1]
 8011fde:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011fe0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d1e4      	bne.n	8011fb0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	681b      	ldr	r3, [r3, #0]
 8011fea:	3308      	adds	r3, #8
 8011fec:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011ff0:	e853 3f00 	ldrex	r3, [r3]
 8011ff4:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011ff6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011ff8:	4b6e      	ldr	r3, [pc, #440]	; (80121b4 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011ffa:	4013      	ands	r3, r2
 8011ffc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	3308      	adds	r3, #8
 8012006:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801200a:	66ba      	str	r2, [r7, #104]	; 0x68
 801200c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801200e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8012010:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012012:	e841 2300 	strex	r3, r2, [r1]
 8012016:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8012018:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801201a:	2b00      	cmp	r3, #0
 801201c:	d1e3      	bne.n	8011fe6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	2220      	movs	r2, #32
 8012022:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	2200      	movs	r2, #0
 801202a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	2200      	movs	r2, #0
 8012030:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012032:	687b      	ldr	r3, [r7, #4]
 8012034:	681b      	ldr	r3, [r3, #0]
 8012036:	4a60      	ldr	r2, [pc, #384]	; (80121b8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8012038:	4293      	cmp	r3, r2
 801203a:	d021      	beq.n	8012080 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	685b      	ldr	r3, [r3, #4]
 8012042:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012046:	2b00      	cmp	r3, #0
 8012048:	d01a      	beq.n	8012080 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012050:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012052:	e853 3f00 	ldrex	r3, [r3]
 8012056:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012058:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801205a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801205e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	461a      	mov	r2, r3
 8012068:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801206c:	657b      	str	r3, [r7, #84]	; 0x54
 801206e:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012070:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012072:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012074:	e841 2300 	strex	r3, r2, [r1]
 8012078:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801207a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801207c:	2b00      	cmp	r3, #0
 801207e:	d1e4      	bne.n	801204a <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012084:	2b01      	cmp	r3, #1
 8012086:	d130      	bne.n	80120ea <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2200      	movs	r2, #0
 801208c:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012096:	e853 3f00 	ldrex	r3, [r3]
 801209a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801209c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209e:	f023 0310 	bic.w	r3, r3, #16
 80120a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80120a6:	687b      	ldr	r3, [r7, #4]
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	461a      	mov	r2, r3
 80120ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80120b0:	643b      	str	r3, [r7, #64]	; 0x40
 80120b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80120b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80120b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80120b8:	e841 2300 	strex	r3, r2, [r1]
 80120bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80120be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80120c0:	2b00      	cmp	r3, #0
 80120c2:	d1e4      	bne.n	801208e <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	681b      	ldr	r3, [r3, #0]
 80120c8:	69db      	ldr	r3, [r3, #28]
 80120ca:	f003 0310 	and.w	r3, r3, #16
 80120ce:	2b10      	cmp	r3, #16
 80120d0:	d103      	bne.n	80120da <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	681b      	ldr	r3, [r3, #0]
 80120d6:	2210      	movs	r2, #16
 80120d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80120e0:	4619      	mov	r1, r3
 80120e2:	6878      	ldr	r0, [r7, #4]
 80120e4:	f7fe fb32 	bl	801074c <HAL_UARTEx_RxEventCallback>
 80120e8:	e002      	b.n	80120f0 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80120ea:	6878      	ldr	r0, [r7, #4]
 80120ec:	f7ee fabe 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80120f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d006      	beq.n	8012106 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80120f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120fc:	f003 0320 	and.w	r3, r3, #32
 8012100:	2b00      	cmp	r3, #0
 8012102:	f47f aed1 	bne.w	8011ea8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8012106:	687b      	ldr	r3, [r7, #4]
 8012108:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801210c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012110:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8012114:	2b00      	cmp	r3, #0
 8012116:	d049      	beq.n	80121ac <UART_RxISR_8BIT_FIFOEN+0x34c>
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801211e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8012122:	429a      	cmp	r2, r3
 8012124:	d242      	bcs.n	80121ac <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	681b      	ldr	r3, [r3, #0]
 801212a:	3308      	adds	r3, #8
 801212c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801212e:	6a3b      	ldr	r3, [r7, #32]
 8012130:	e853 3f00 	ldrex	r3, [r3]
 8012134:	61fb      	str	r3, [r7, #28]
   return(result);
 8012136:	69fb      	ldr	r3, [r7, #28]
 8012138:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801213c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	681b      	ldr	r3, [r3, #0]
 8012144:	3308      	adds	r3, #8
 8012146:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801214a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801214c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801214e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012150:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012152:	e841 2300 	strex	r3, r2, [r1]
 8012156:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801215a:	2b00      	cmp	r3, #0
 801215c:	d1e3      	bne.n	8012126 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	4a16      	ldr	r2, [pc, #88]	; (80121bc <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8012162:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	e853 3f00 	ldrex	r3, [r3]
 8012170:	60bb      	str	r3, [r7, #8]
   return(result);
 8012172:	68bb      	ldr	r3, [r7, #8]
 8012174:	f043 0320 	orr.w	r3, r3, #32
 8012178:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801217c:	687b      	ldr	r3, [r7, #4]
 801217e:	681b      	ldr	r3, [r3, #0]
 8012180:	461a      	mov	r2, r3
 8012182:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012186:	61bb      	str	r3, [r7, #24]
 8012188:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801218a:	6979      	ldr	r1, [r7, #20]
 801218c:	69ba      	ldr	r2, [r7, #24]
 801218e:	e841 2300 	strex	r3, r2, [r1]
 8012192:	613b      	str	r3, [r7, #16]
   return(result);
 8012194:	693b      	ldr	r3, [r7, #16]
 8012196:	2b00      	cmp	r3, #0
 8012198:	d1e4      	bne.n	8012164 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801219a:	e007      	b.n	80121ac <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	699a      	ldr	r2, [r3, #24]
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f042 0208 	orr.w	r2, r2, #8
 80121aa:	619a      	str	r2, [r3, #24]
}
 80121ac:	bf00      	nop
 80121ae:	37b0      	adds	r7, #176	; 0xb0
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}
 80121b4:	effffffe 	.word	0xeffffffe
 80121b8:	58000c00 	.word	0x58000c00
 80121bc:	08011af1 	.word	0x08011af1

080121c0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b0ae      	sub	sp, #184	; 0xb8
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80121ce:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80121d2:	687b      	ldr	r3, [r7, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	69db      	ldr	r3, [r3, #28]
 80121d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80121e6:	687b      	ldr	r3, [r7, #4]
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	689b      	ldr	r3, [r3, #8]
 80121ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121f6:	2b22      	cmp	r3, #34	; 0x22
 80121f8:	f040 8184 	bne.w	8012504 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012202:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012206:	e127      	b.n	8012458 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801220e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012216:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801221a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 801221e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8012222:	4013      	ands	r3, r2
 8012224:	b29a      	uxth	r2, r3
 8012226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801222a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012230:	1c9a      	adds	r2, r3, #2
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801223c:	b29b      	uxth	r3, r3
 801223e:	3b01      	subs	r3, #1
 8012240:	b29a      	uxth	r2, r3
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	681b      	ldr	r3, [r3, #0]
 801224c:	69db      	ldr	r3, [r3, #28]
 801224e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8012252:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012256:	f003 0307 	and.w	r3, r3, #7
 801225a:	2b00      	cmp	r3, #0
 801225c:	d053      	beq.n	8012306 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801225e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012262:	f003 0301 	and.w	r3, r3, #1
 8012266:	2b00      	cmp	r3, #0
 8012268:	d011      	beq.n	801228e <UART_RxISR_16BIT_FIFOEN+0xce>
 801226a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801226e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012272:	2b00      	cmp	r3, #0
 8012274:	d00b      	beq.n	801228e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012276:	687b      	ldr	r3, [r7, #4]
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	2201      	movs	r2, #1
 801227c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012284:	f043 0201 	orr.w	r2, r3, #1
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801228e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012292:	f003 0302 	and.w	r3, r3, #2
 8012296:	2b00      	cmp	r3, #0
 8012298:	d011      	beq.n	80122be <UART_RxISR_16BIT_FIFOEN+0xfe>
 801229a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801229e:	f003 0301 	and.w	r3, r3, #1
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d00b      	beq.n	80122be <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	681b      	ldr	r3, [r3, #0]
 80122aa:	2202      	movs	r2, #2
 80122ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122b4:	f043 0204 	orr.w	r2, r3, #4
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80122be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80122c2:	f003 0304 	and.w	r3, r3, #4
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d011      	beq.n	80122ee <UART_RxISR_16BIT_FIFOEN+0x12e>
 80122ca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80122ce:	f003 0301 	and.w	r3, r3, #1
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d00b      	beq.n	80122ee <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80122d6:	687b      	ldr	r3, [r7, #4]
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	2204      	movs	r2, #4
 80122dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80122de:	687b      	ldr	r3, [r7, #4]
 80122e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122e4:	f043 0202 	orr.w	r2, r3, #2
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80122ee:	687b      	ldr	r3, [r7, #4]
 80122f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d006      	beq.n	8012306 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f7fe fa1d 	bl	8010738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122fe:	687b      	ldr	r3, [r7, #4]
 8012300:	2200      	movs	r2, #0
 8012302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801230c:	b29b      	uxth	r3, r3
 801230e:	2b00      	cmp	r3, #0
 8012310:	f040 80a2 	bne.w	8012458 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801231a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801231c:	e853 3f00 	ldrex	r3, [r3]
 8012320:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8012322:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012324:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012328:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	681b      	ldr	r3, [r3, #0]
 8012330:	461a      	mov	r2, r3
 8012332:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8012336:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801233a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801233c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801233e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8012342:	e841 2300 	strex	r3, r2, [r1]
 8012346:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012348:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801234a:	2b00      	cmp	r3, #0
 801234c:	d1e2      	bne.n	8012314 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	3308      	adds	r3, #8
 8012354:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012356:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012358:	e853 3f00 	ldrex	r3, [r3]
 801235c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801235e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012360:	4b6e      	ldr	r3, [pc, #440]	; (801251c <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8012362:	4013      	ands	r3, r2
 8012364:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012368:	687b      	ldr	r3, [r7, #4]
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	3308      	adds	r3, #8
 801236e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8012372:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012374:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012376:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012378:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801237a:	e841 2300 	strex	r3, r2, [r1]
 801237e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8012380:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8012382:	2b00      	cmp	r3, #0
 8012384:	d1e3      	bne.n	801234e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	2220      	movs	r2, #32
 801238a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801238e:	687b      	ldr	r3, [r7, #4]
 8012390:	2200      	movs	r2, #0
 8012392:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2200      	movs	r2, #0
 8012398:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	4a60      	ldr	r2, [pc, #384]	; (8012520 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80123a0:	4293      	cmp	r3, r2
 80123a2:	d021      	beq.n	80123e8 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	681b      	ldr	r3, [r3, #0]
 80123a8:	685b      	ldr	r3, [r3, #4]
 80123aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d01a      	beq.n	80123e8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80123ba:	e853 3f00 	ldrex	r3, [r3]
 80123be:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80123c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80123c2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80123c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	461a      	mov	r2, r3
 80123d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80123d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80123d6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80123da:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80123dc:	e841 2300 	strex	r3, r2, [r1]
 80123e0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80123e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d1e4      	bne.n	80123b2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123ec:	2b01      	cmp	r3, #1
 80123ee:	d130      	bne.n	8012452 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123f0:	687b      	ldr	r3, [r7, #4]
 80123f2:	2200      	movs	r2, #0
 80123f4:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123fe:	e853 3f00 	ldrex	r3, [r3]
 8012402:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8012404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012406:	f023 0310 	bic.w	r3, r3, #16
 801240a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801240e:	687b      	ldr	r3, [r7, #4]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	461a      	mov	r2, r3
 8012414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012418:	647b      	str	r3, [r7, #68]	; 0x44
 801241a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801241c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801241e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012420:	e841 2300 	strex	r3, r2, [r1]
 8012424:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8012426:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012428:	2b00      	cmp	r3, #0
 801242a:	d1e4      	bne.n	80123f6 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	69db      	ldr	r3, [r3, #28]
 8012432:	f003 0310 	and.w	r3, r3, #16
 8012436:	2b10      	cmp	r3, #16
 8012438:	d103      	bne.n	8012442 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	2210      	movs	r2, #16
 8012440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012448:	4619      	mov	r1, r3
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f7fe f97e 	bl	801074c <HAL_UARTEx_RxEventCallback>
 8012450:	e002      	b.n	8012458 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8012452:	6878      	ldr	r0, [r7, #4]
 8012454:	f7ee f90a 	bl	800066c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012458:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 801245c:	2b00      	cmp	r3, #0
 801245e:	d006      	beq.n	801246e <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8012460:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012464:	f003 0320 	and.w	r3, r3, #32
 8012468:	2b00      	cmp	r3, #0
 801246a:	f47f aecd 	bne.w	8012208 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801246e:	687b      	ldr	r3, [r7, #4]
 8012470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012474:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012478:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 801247c:	2b00      	cmp	r3, #0
 801247e:	d049      	beq.n	8012514 <UART_RxISR_16BIT_FIFOEN+0x354>
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012486:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 801248a:	429a      	cmp	r2, r3
 801248c:	d242      	bcs.n	8012514 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	3308      	adds	r3, #8
 8012494:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012498:	e853 3f00 	ldrex	r3, [r3]
 801249c:	623b      	str	r3, [r7, #32]
   return(result);
 801249e:	6a3b      	ldr	r3, [r7, #32]
 80124a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80124a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	681b      	ldr	r3, [r3, #0]
 80124ac:	3308      	adds	r3, #8
 80124ae:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80124b2:	633a      	str	r2, [r7, #48]	; 0x30
 80124b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80124b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80124ba:	e841 2300 	strex	r3, r2, [r1]
 80124be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80124c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d1e3      	bne.n	801248e <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	4a16      	ldr	r2, [pc, #88]	; (8012524 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80124ca:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80124cc:	687b      	ldr	r3, [r7, #4]
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80124d2:	693b      	ldr	r3, [r7, #16]
 80124d4:	e853 3f00 	ldrex	r3, [r3]
 80124d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	f043 0320 	orr.w	r3, r3, #32
 80124e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	681b      	ldr	r3, [r3, #0]
 80124e8:	461a      	mov	r2, r3
 80124ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80124ee:	61fb      	str	r3, [r7, #28]
 80124f0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124f2:	69b9      	ldr	r1, [r7, #24]
 80124f4:	69fa      	ldr	r2, [r7, #28]
 80124f6:	e841 2300 	strex	r3, r2, [r1]
 80124fa:	617b      	str	r3, [r7, #20]
   return(result);
 80124fc:	697b      	ldr	r3, [r7, #20]
 80124fe:	2b00      	cmp	r3, #0
 8012500:	d1e4      	bne.n	80124cc <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012502:	e007      	b.n	8012514 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	699a      	ldr	r2, [r3, #24]
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	681b      	ldr	r3, [r3, #0]
 801250e:	f042 0208 	orr.w	r2, r2, #8
 8012512:	619a      	str	r2, [r3, #24]
}
 8012514:	bf00      	nop
 8012516:	37b8      	adds	r7, #184	; 0xb8
 8012518:	46bd      	mov	sp, r7
 801251a:	bd80      	pop	{r7, pc}
 801251c:	effffffe 	.word	0xeffffffe
 8012520:	58000c00 	.word	0x58000c00
 8012524:	08011ca9 	.word	0x08011ca9

08012528 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8012528:	b480      	push	{r7}
 801252a:	b083      	sub	sp, #12
 801252c:	af00      	add	r7, sp, #0
 801252e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8012530:	bf00      	nop
 8012532:	370c      	adds	r7, #12
 8012534:	46bd      	mov	sp, r7
 8012536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801253a:	4770      	bx	lr

0801253c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801253c:	b480      	push	{r7}
 801253e:	b083      	sub	sp, #12
 8012540:	af00      	add	r7, sp, #0
 8012542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012544:	bf00      	nop
 8012546:	370c      	adds	r7, #12
 8012548:	46bd      	mov	sp, r7
 801254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801254e:	4770      	bx	lr

08012550 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8012550:	b480      	push	{r7}
 8012552:	b083      	sub	sp, #12
 8012554:	af00      	add	r7, sp, #0
 8012556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012558:	bf00      	nop
 801255a:	370c      	adds	r7, #12
 801255c:	46bd      	mov	sp, r7
 801255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012562:	4770      	bx	lr

08012564 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012564:	b480      	push	{r7}
 8012566:	b085      	sub	sp, #20
 8012568:	af00      	add	r7, sp, #0
 801256a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012572:	2b01      	cmp	r3, #1
 8012574:	d101      	bne.n	801257a <HAL_UARTEx_DisableFifoMode+0x16>
 8012576:	2302      	movs	r3, #2
 8012578:	e027      	b.n	80125ca <HAL_UARTEx_DisableFifoMode+0x66>
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2201      	movs	r2, #1
 801257e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	2224      	movs	r2, #36	; 0x24
 8012586:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012592:	687b      	ldr	r3, [r7, #4]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	681a      	ldr	r2, [r3, #0]
 8012598:	687b      	ldr	r3, [r7, #4]
 801259a:	681b      	ldr	r3, [r3, #0]
 801259c:	f022 0201 	bic.w	r2, r2, #1
 80125a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80125a2:	68fb      	ldr	r3, [r7, #12]
 80125a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80125a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2200      	movs	r2, #0
 80125ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	68fa      	ldr	r2, [r7, #12]
 80125b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80125b8:	687b      	ldr	r3, [r7, #4]
 80125ba:	2220      	movs	r2, #32
 80125bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80125c0:	687b      	ldr	r3, [r7, #4]
 80125c2:	2200      	movs	r2, #0
 80125c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80125c8:	2300      	movs	r3, #0
}
 80125ca:	4618      	mov	r0, r3
 80125cc:	3714      	adds	r7, #20
 80125ce:	46bd      	mov	sp, r7
 80125d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125d4:	4770      	bx	lr

080125d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80125d6:	b580      	push	{r7, lr}
 80125d8:	b084      	sub	sp, #16
 80125da:	af00      	add	r7, sp, #0
 80125dc:	6078      	str	r0, [r7, #4]
 80125de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80125e6:	2b01      	cmp	r3, #1
 80125e8:	d101      	bne.n	80125ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80125ea:	2302      	movs	r3, #2
 80125ec:	e02d      	b.n	801264a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	2201      	movs	r2, #1
 80125f2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	2224      	movs	r2, #36	; 0x24
 80125fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80125fe:	687b      	ldr	r3, [r7, #4]
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	681a      	ldr	r2, [r3, #0]
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	681b      	ldr	r3, [r3, #0]
 8012610:	f022 0201 	bic.w	r2, r2, #1
 8012614:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	689b      	ldr	r3, [r3, #8]
 801261c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	681b      	ldr	r3, [r3, #0]
 8012624:	683a      	ldr	r2, [r7, #0]
 8012626:	430a      	orrs	r2, r1
 8012628:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801262a:	6878      	ldr	r0, [r7, #4]
 801262c:	f000 f850 	bl	80126d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	68fa      	ldr	r2, [r7, #12]
 8012636:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	2220      	movs	r2, #32
 801263c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	2200      	movs	r2, #0
 8012644:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012648:	2300      	movs	r3, #0
}
 801264a:	4618      	mov	r0, r3
 801264c:	3710      	adds	r7, #16
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012652:	b580      	push	{r7, lr}
 8012654:	b084      	sub	sp, #16
 8012656:	af00      	add	r7, sp, #0
 8012658:	6078      	str	r0, [r7, #4]
 801265a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801265c:	687b      	ldr	r3, [r7, #4]
 801265e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8012662:	2b01      	cmp	r3, #1
 8012664:	d101      	bne.n	801266a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012666:	2302      	movs	r3, #2
 8012668:	e02d      	b.n	80126c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	2201      	movs	r2, #1
 801266e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	2224      	movs	r2, #36	; 0x24
 8012676:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801267a:	687b      	ldr	r3, [r7, #4]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	681b      	ldr	r3, [r3, #0]
 8012680:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	681b      	ldr	r3, [r3, #0]
 8012686:	681a      	ldr	r2, [r3, #0]
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	681b      	ldr	r3, [r3, #0]
 801268c:	f022 0201 	bic.w	r2, r2, #1
 8012690:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8012692:	687b      	ldr	r3, [r7, #4]
 8012694:	681b      	ldr	r3, [r3, #0]
 8012696:	689b      	ldr	r3, [r3, #8]
 8012698:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	681b      	ldr	r3, [r3, #0]
 80126a0:	683a      	ldr	r2, [r7, #0]
 80126a2:	430a      	orrs	r2, r1
 80126a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f000 f812 	bl	80126d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	681b      	ldr	r3, [r3, #0]
 80126b0:	68fa      	ldr	r2, [r7, #12]
 80126b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2220      	movs	r2, #32
 80126b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2200      	movs	r2, #0
 80126c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3710      	adds	r7, #16
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}
	...

080126d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80126d0:	b480      	push	{r7}
 80126d2:	b085      	sub	sp, #20
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d108      	bne.n	80126f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	2201      	movs	r2, #1
 80126e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80126e8:	687b      	ldr	r3, [r7, #4]
 80126ea:	2201      	movs	r2, #1
 80126ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80126f0:	e031      	b.n	8012756 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80126f2:	2310      	movs	r3, #16
 80126f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80126f6:	2310      	movs	r3, #16
 80126f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	681b      	ldr	r3, [r3, #0]
 80126fe:	689b      	ldr	r3, [r3, #8]
 8012700:	0e5b      	lsrs	r3, r3, #25
 8012702:	b2db      	uxtb	r3, r3
 8012704:	f003 0307 	and.w	r3, r3, #7
 8012708:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	689b      	ldr	r3, [r3, #8]
 8012710:	0f5b      	lsrs	r3, r3, #29
 8012712:	b2db      	uxtb	r3, r3
 8012714:	f003 0307 	and.w	r3, r3, #7
 8012718:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801271a:	7bbb      	ldrb	r3, [r7, #14]
 801271c:	7b3a      	ldrb	r2, [r7, #12]
 801271e:	4911      	ldr	r1, [pc, #68]	; (8012764 <UARTEx_SetNbDataToProcess+0x94>)
 8012720:	5c8a      	ldrb	r2, [r1, r2]
 8012722:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8012726:	7b3a      	ldrb	r2, [r7, #12]
 8012728:	490f      	ldr	r1, [pc, #60]	; (8012768 <UARTEx_SetNbDataToProcess+0x98>)
 801272a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801272c:	fb93 f3f2 	sdiv	r3, r3, r2
 8012730:	b29a      	uxth	r2, r3
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012738:	7bfb      	ldrb	r3, [r7, #15]
 801273a:	7b7a      	ldrb	r2, [r7, #13]
 801273c:	4909      	ldr	r1, [pc, #36]	; (8012764 <UARTEx_SetNbDataToProcess+0x94>)
 801273e:	5c8a      	ldrb	r2, [r1, r2]
 8012740:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012744:	7b7a      	ldrb	r2, [r7, #13]
 8012746:	4908      	ldr	r1, [pc, #32]	; (8012768 <UARTEx_SetNbDataToProcess+0x98>)
 8012748:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801274a:	fb93 f3f2 	sdiv	r3, r3, r2
 801274e:	b29a      	uxth	r2, r3
 8012750:	687b      	ldr	r3, [r7, #4]
 8012752:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012756:	bf00      	nop
 8012758:	3714      	adds	r7, #20
 801275a:	46bd      	mov	sp, r7
 801275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012760:	4770      	bx	lr
 8012762:	bf00      	nop
 8012764:	08016ff4 	.word	0x08016ff4
 8012768:	08016ffc 	.word	0x08016ffc

0801276c <__NVIC_SetPriority>:
{
 801276c:	b480      	push	{r7}
 801276e:	b083      	sub	sp, #12
 8012770:	af00      	add	r7, sp, #0
 8012772:	4603      	mov	r3, r0
 8012774:	6039      	str	r1, [r7, #0]
 8012776:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801277c:	2b00      	cmp	r3, #0
 801277e:	db0a      	blt.n	8012796 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	b2da      	uxtb	r2, r3
 8012784:	490c      	ldr	r1, [pc, #48]	; (80127b8 <__NVIC_SetPriority+0x4c>)
 8012786:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801278a:	0112      	lsls	r2, r2, #4
 801278c:	b2d2      	uxtb	r2, r2
 801278e:	440b      	add	r3, r1
 8012790:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012794:	e00a      	b.n	80127ac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012796:	683b      	ldr	r3, [r7, #0]
 8012798:	b2da      	uxtb	r2, r3
 801279a:	4908      	ldr	r1, [pc, #32]	; (80127bc <__NVIC_SetPriority+0x50>)
 801279c:	88fb      	ldrh	r3, [r7, #6]
 801279e:	f003 030f 	and.w	r3, r3, #15
 80127a2:	3b04      	subs	r3, #4
 80127a4:	0112      	lsls	r2, r2, #4
 80127a6:	b2d2      	uxtb	r2, r2
 80127a8:	440b      	add	r3, r1
 80127aa:	761a      	strb	r2, [r3, #24]
}
 80127ac:	bf00      	nop
 80127ae:	370c      	adds	r7, #12
 80127b0:	46bd      	mov	sp, r7
 80127b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b6:	4770      	bx	lr
 80127b8:	e000e100 	.word	0xe000e100
 80127bc:	e000ed00 	.word	0xe000ed00

080127c0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80127c0:	b580      	push	{r7, lr}
 80127c2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80127c4:	4b05      	ldr	r3, [pc, #20]	; (80127dc <SysTick_Handler+0x1c>)
 80127c6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80127c8:	f002 fc32 	bl	8015030 <xTaskGetSchedulerState>
 80127cc:	4603      	mov	r3, r0
 80127ce:	2b01      	cmp	r3, #1
 80127d0:	d001      	beq.n	80127d6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80127d2:	f003 fa51 	bl	8015c78 <xPortSysTickHandler>
  }
}
 80127d6:	bf00      	nop
 80127d8:	bd80      	pop	{r7, pc}
 80127da:	bf00      	nop
 80127dc:	e000e010 	.word	0xe000e010

080127e0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80127e0:	b580      	push	{r7, lr}
 80127e2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80127e4:	2100      	movs	r1, #0
 80127e6:	f06f 0004 	mvn.w	r0, #4
 80127ea:	f7ff ffbf 	bl	801276c <__NVIC_SetPriority>
#endif
}
 80127ee:	bf00      	nop
 80127f0:	bd80      	pop	{r7, pc}
	...

080127f4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80127f4:	b480      	push	{r7}
 80127f6:	b083      	sub	sp, #12
 80127f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127fa:	f3ef 8305 	mrs	r3, IPSR
 80127fe:	603b      	str	r3, [r7, #0]
  return(result);
 8012800:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012802:	2b00      	cmp	r3, #0
 8012804:	d003      	beq.n	801280e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8012806:	f06f 0305 	mvn.w	r3, #5
 801280a:	607b      	str	r3, [r7, #4]
 801280c:	e00c      	b.n	8012828 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 801280e:	4b0a      	ldr	r3, [pc, #40]	; (8012838 <osKernelInitialize+0x44>)
 8012810:	681b      	ldr	r3, [r3, #0]
 8012812:	2b00      	cmp	r3, #0
 8012814:	d105      	bne.n	8012822 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8012816:	4b08      	ldr	r3, [pc, #32]	; (8012838 <osKernelInitialize+0x44>)
 8012818:	2201      	movs	r2, #1
 801281a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 801281c:	2300      	movs	r3, #0
 801281e:	607b      	str	r3, [r7, #4]
 8012820:	e002      	b.n	8012828 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8012822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012826:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012828:	687b      	ldr	r3, [r7, #4]
}
 801282a:	4618      	mov	r0, r3
 801282c:	370c      	adds	r7, #12
 801282e:	46bd      	mov	sp, r7
 8012830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012834:	4770      	bx	lr
 8012836:	bf00      	nop
 8012838:	2400110c 	.word	0x2400110c

0801283c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 801283c:	b580      	push	{r7, lr}
 801283e:	b082      	sub	sp, #8
 8012840:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012842:	f3ef 8305 	mrs	r3, IPSR
 8012846:	603b      	str	r3, [r7, #0]
  return(result);
 8012848:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 801284a:	2b00      	cmp	r3, #0
 801284c:	d003      	beq.n	8012856 <osKernelStart+0x1a>
    stat = osErrorISR;
 801284e:	f06f 0305 	mvn.w	r3, #5
 8012852:	607b      	str	r3, [r7, #4]
 8012854:	e010      	b.n	8012878 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012856:	4b0b      	ldr	r3, [pc, #44]	; (8012884 <osKernelStart+0x48>)
 8012858:	681b      	ldr	r3, [r3, #0]
 801285a:	2b01      	cmp	r3, #1
 801285c:	d109      	bne.n	8012872 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801285e:	f7ff ffbf 	bl	80127e0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8012862:	4b08      	ldr	r3, [pc, #32]	; (8012884 <osKernelStart+0x48>)
 8012864:	2202      	movs	r2, #2
 8012866:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012868:	f001 fefc 	bl	8014664 <vTaskStartScheduler>
      stat = osOK;
 801286c:	2300      	movs	r3, #0
 801286e:	607b      	str	r3, [r7, #4]
 8012870:	e002      	b.n	8012878 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8012872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012876:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012878:	687b      	ldr	r3, [r7, #4]
}
 801287a:	4618      	mov	r0, r3
 801287c:	3708      	adds	r7, #8
 801287e:	46bd      	mov	sp, r7
 8012880:	bd80      	pop	{r7, pc}
 8012882:	bf00      	nop
 8012884:	2400110c 	.word	0x2400110c

08012888 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012888:	b580      	push	{r7, lr}
 801288a:	b08e      	sub	sp, #56	; 0x38
 801288c:	af04      	add	r7, sp, #16
 801288e:	60f8      	str	r0, [r7, #12]
 8012890:	60b9      	str	r1, [r7, #8]
 8012892:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012894:	2300      	movs	r3, #0
 8012896:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012898:	f3ef 8305 	mrs	r3, IPSR
 801289c:	617b      	str	r3, [r7, #20]
  return(result);
 801289e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	d17e      	bne.n	80129a2 <osThreadNew+0x11a>
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d07b      	beq.n	80129a2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80128aa:	2380      	movs	r3, #128	; 0x80
 80128ac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80128ae:	2318      	movs	r3, #24
 80128b0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80128b2:	2300      	movs	r3, #0
 80128b4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80128b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80128ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	2b00      	cmp	r3, #0
 80128c0:	d045      	beq.n	801294e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d002      	beq.n	80128d0 <osThreadNew+0x48>
        name = attr->name;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	681b      	ldr	r3, [r3, #0]
 80128ce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	699b      	ldr	r3, [r3, #24]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d002      	beq.n	80128de <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	699b      	ldr	r3, [r3, #24]
 80128dc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80128de:	69fb      	ldr	r3, [r7, #28]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d008      	beq.n	80128f6 <osThreadNew+0x6e>
 80128e4:	69fb      	ldr	r3, [r7, #28]
 80128e6:	2b38      	cmp	r3, #56	; 0x38
 80128e8:	d805      	bhi.n	80128f6 <osThreadNew+0x6e>
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	685b      	ldr	r3, [r3, #4]
 80128ee:	f003 0301 	and.w	r3, r3, #1
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d001      	beq.n	80128fa <osThreadNew+0x72>
        return (NULL);
 80128f6:	2300      	movs	r3, #0
 80128f8:	e054      	b.n	80129a4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	695b      	ldr	r3, [r3, #20]
 80128fe:	2b00      	cmp	r3, #0
 8012900:	d003      	beq.n	801290a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	695b      	ldr	r3, [r3, #20]
 8012906:	089b      	lsrs	r3, r3, #2
 8012908:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	689b      	ldr	r3, [r3, #8]
 801290e:	2b00      	cmp	r3, #0
 8012910:	d00e      	beq.n	8012930 <osThreadNew+0xa8>
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	68db      	ldr	r3, [r3, #12]
 8012916:	2b5b      	cmp	r3, #91	; 0x5b
 8012918:	d90a      	bls.n	8012930 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 801291e:	2b00      	cmp	r3, #0
 8012920:	d006      	beq.n	8012930 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	695b      	ldr	r3, [r3, #20]
 8012926:	2b00      	cmp	r3, #0
 8012928:	d002      	beq.n	8012930 <osThreadNew+0xa8>
        mem = 1;
 801292a:	2301      	movs	r3, #1
 801292c:	61bb      	str	r3, [r7, #24]
 801292e:	e010      	b.n	8012952 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8012930:	687b      	ldr	r3, [r7, #4]
 8012932:	689b      	ldr	r3, [r3, #8]
 8012934:	2b00      	cmp	r3, #0
 8012936:	d10c      	bne.n	8012952 <osThreadNew+0xca>
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	68db      	ldr	r3, [r3, #12]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d108      	bne.n	8012952 <osThreadNew+0xca>
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	691b      	ldr	r3, [r3, #16]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d104      	bne.n	8012952 <osThreadNew+0xca>
          mem = 0;
 8012948:	2300      	movs	r3, #0
 801294a:	61bb      	str	r3, [r7, #24]
 801294c:	e001      	b.n	8012952 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801294e:	2300      	movs	r3, #0
 8012950:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012952:	69bb      	ldr	r3, [r7, #24]
 8012954:	2b01      	cmp	r3, #1
 8012956:	d110      	bne.n	801297a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012958:	687b      	ldr	r3, [r7, #4]
 801295a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012960:	9202      	str	r2, [sp, #8]
 8012962:	9301      	str	r3, [sp, #4]
 8012964:	69fb      	ldr	r3, [r7, #28]
 8012966:	9300      	str	r3, [sp, #0]
 8012968:	68bb      	ldr	r3, [r7, #8]
 801296a:	6a3a      	ldr	r2, [r7, #32]
 801296c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801296e:	68f8      	ldr	r0, [r7, #12]
 8012970:	f001 fb16 	bl	8013fa0 <xTaskCreateStatic>
 8012974:	4603      	mov	r3, r0
 8012976:	613b      	str	r3, [r7, #16]
 8012978:	e013      	b.n	80129a2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	2b00      	cmp	r3, #0
 801297e:	d110      	bne.n	80129a2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8012980:	6a3b      	ldr	r3, [r7, #32]
 8012982:	b29a      	uxth	r2, r3
 8012984:	f107 0310 	add.w	r3, r7, #16
 8012988:	9301      	str	r3, [sp, #4]
 801298a:	69fb      	ldr	r3, [r7, #28]
 801298c:	9300      	str	r3, [sp, #0]
 801298e:	68bb      	ldr	r3, [r7, #8]
 8012990:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012992:	68f8      	ldr	r0, [r7, #12]
 8012994:	f001 fb61 	bl	801405a <xTaskCreate>
 8012998:	4603      	mov	r3, r0
 801299a:	2b01      	cmp	r3, #1
 801299c:	d001      	beq.n	80129a2 <osThreadNew+0x11a>
            hTask = NULL;
 801299e:	2300      	movs	r3, #0
 80129a0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80129a2:	693b      	ldr	r3, [r7, #16]
}
 80129a4:	4618      	mov	r0, r3
 80129a6:	3728      	adds	r7, #40	; 0x28
 80129a8:	46bd      	mov	sp, r7
 80129aa:	bd80      	pop	{r7, pc}

080129ac <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 80129ac:	b480      	push	{r7}
 80129ae:	b083      	sub	sp, #12
 80129b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129b2:	f3ef 8305 	mrs	r3, IPSR
 80129b6:	603b      	str	r3, [r7, #0]
  return(result);
 80129b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d003      	beq.n	80129c6 <osThreadYield+0x1a>
    stat = osErrorISR;
 80129be:	f06f 0305 	mvn.w	r3, #5
 80129c2:	607b      	str	r3, [r7, #4]
 80129c4:	e009      	b.n	80129da <osThreadYield+0x2e>
  } else {
    stat = osOK;
 80129c6:	2300      	movs	r3, #0
 80129c8:	607b      	str	r3, [r7, #4]
    taskYIELD();
 80129ca:	4b07      	ldr	r3, [pc, #28]	; (80129e8 <osThreadYield+0x3c>)
 80129cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129d0:	601a      	str	r2, [r3, #0]
 80129d2:	f3bf 8f4f 	dsb	sy
 80129d6:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 80129da:	687b      	ldr	r3, [r7, #4]
}
 80129dc:	4618      	mov	r0, r3
 80129de:	370c      	adds	r7, #12
 80129e0:	46bd      	mov	sp, r7
 80129e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e6:	4770      	bx	lr
 80129e8:	e000ed04 	.word	0xe000ed04

080129ec <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80129ec:	b580      	push	{r7, lr}
 80129ee:	b086      	sub	sp, #24
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129f8:	f3ef 8305 	mrs	r3, IPSR
 80129fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80129fe:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a00:	2b00      	cmp	r3, #0
 8012a02:	d003      	beq.n	8012a0c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8012a04:	f06f 0305 	mvn.w	r3, #5
 8012a08:	617b      	str	r3, [r7, #20]
 8012a0a:	e00b      	b.n	8012a24 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 8012a0c:	693b      	ldr	r3, [r7, #16]
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d103      	bne.n	8012a1a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8012a12:	f06f 0303 	mvn.w	r3, #3
 8012a16:	617b      	str	r3, [r7, #20]
 8012a18:	e004      	b.n	8012a24 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 8012a1a:	2300      	movs	r3, #0
 8012a1c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 8012a1e:	6938      	ldr	r0, [r7, #16]
 8012a20:	f001 fd06 	bl	8014430 <vTaskSuspend>
  }

  return (stat);
 8012a24:	697b      	ldr	r3, [r7, #20]
}
 8012a26:	4618      	mov	r0, r3
 8012a28:	3718      	adds	r7, #24
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8012a32:	2000      	movs	r0, #0
 8012a34:	f001 fc56 	bl	80142e4 <vTaskDelete>
#endif
  for (;;);
 8012a38:	e7fe      	b.n	8012a38 <osThreadExit+0xa>

08012a3a <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8012a3a:	b580      	push	{r7, lr}
 8012a3c:	b084      	sub	sp, #16
 8012a3e:	af00      	add	r7, sp, #0
 8012a40:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a42:	f3ef 8305 	mrs	r3, IPSR
 8012a46:	60bb      	str	r3, [r7, #8]
  return(result);
 8012a48:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012a4a:	2b00      	cmp	r3, #0
 8012a4c:	d003      	beq.n	8012a56 <osDelay+0x1c>
    stat = osErrorISR;
 8012a4e:	f06f 0305 	mvn.w	r3, #5
 8012a52:	60fb      	str	r3, [r7, #12]
 8012a54:	e007      	b.n	8012a66 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012a56:	2300      	movs	r3, #0
 8012a58:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d002      	beq.n	8012a66 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012a60:	6878      	ldr	r0, [r7, #4]
 8012a62:	f001 fcb1 	bl	80143c8 <vTaskDelay>
    }
  }

  return (stat);
 8012a66:	68fb      	ldr	r3, [r7, #12]
}
 8012a68:	4618      	mov	r0, r3
 8012a6a:	3710      	adds	r7, #16
 8012a6c:	46bd      	mov	sp, r7
 8012a6e:	bd80      	pop	{r7, pc}

08012a70 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012a70:	b580      	push	{r7, lr}
 8012a72:	b086      	sub	sp, #24
 8012a74:	af00      	add	r7, sp, #0
 8012a76:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012a78:	2300      	movs	r3, #0
 8012a7a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a7c:	f3ef 8305 	mrs	r3, IPSR
 8012a80:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a82:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012a84:	2b00      	cmp	r3, #0
 8012a86:	d12d      	bne.n	8012ae4 <osEventFlagsNew+0x74>
    mem = -1;
 8012a88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a8c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012a8e:	687b      	ldr	r3, [r7, #4]
 8012a90:	2b00      	cmp	r3, #0
 8012a92:	d015      	beq.n	8012ac0 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	689b      	ldr	r3, [r3, #8]
 8012a98:	2b00      	cmp	r3, #0
 8012a9a:	d006      	beq.n	8012aaa <osEventFlagsNew+0x3a>
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	68db      	ldr	r3, [r3, #12]
 8012aa0:	2b1f      	cmp	r3, #31
 8012aa2:	d902      	bls.n	8012aaa <osEventFlagsNew+0x3a>
        mem = 1;
 8012aa4:	2301      	movs	r3, #1
 8012aa6:	613b      	str	r3, [r7, #16]
 8012aa8:	e00c      	b.n	8012ac4 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	689b      	ldr	r3, [r3, #8]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d108      	bne.n	8012ac4 <osEventFlagsNew+0x54>
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	68db      	ldr	r3, [r3, #12]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d104      	bne.n	8012ac4 <osEventFlagsNew+0x54>
          mem = 0;
 8012aba:	2300      	movs	r3, #0
 8012abc:	613b      	str	r3, [r7, #16]
 8012abe:	e001      	b.n	8012ac4 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012ac0:	2300      	movs	r3, #0
 8012ac2:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012ac4:	693b      	ldr	r3, [r7, #16]
 8012ac6:	2b01      	cmp	r3, #1
 8012ac8:	d106      	bne.n	8012ad8 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	689b      	ldr	r3, [r3, #8]
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f000 fa1e 	bl	8012f10 <xEventGroupCreateStatic>
 8012ad4:	6178      	str	r0, [r7, #20]
 8012ad6:	e005      	b.n	8012ae4 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012ad8:	693b      	ldr	r3, [r7, #16]
 8012ada:	2b00      	cmp	r3, #0
 8012adc:	d102      	bne.n	8012ae4 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012ade:	f000 fa4e 	bl	8012f7e <xEventGroupCreate>
 8012ae2:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012ae4:	697b      	ldr	r3, [r7, #20]
}
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	3718      	adds	r7, #24
 8012aea:	46bd      	mov	sp, r7
 8012aec:	bd80      	pop	{r7, pc}
	...

08012af0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b086      	sub	sp, #24
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012afe:	693b      	ldr	r3, [r7, #16]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d004      	beq.n	8012b0e <osEventFlagsSet+0x1e>
 8012b04:	683b      	ldr	r3, [r7, #0]
 8012b06:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d003      	beq.n	8012b16 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012b0e:	f06f 0303 	mvn.w	r3, #3
 8012b12:	617b      	str	r3, [r7, #20]
 8012b14:	e028      	b.n	8012b68 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b16:	f3ef 8305 	mrs	r3, IPSR
 8012b1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8012b1c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012b1e:	2b00      	cmp	r3, #0
 8012b20:	d01d      	beq.n	8012b5e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012b22:	2300      	movs	r3, #0
 8012b24:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012b26:	f107 0308 	add.w	r3, r7, #8
 8012b2a:	461a      	mov	r2, r3
 8012b2c:	6839      	ldr	r1, [r7, #0]
 8012b2e:	6938      	ldr	r0, [r7, #16]
 8012b30:	f000 fbc8 	bl	80132c4 <xEventGroupSetBitsFromISR>
 8012b34:	4603      	mov	r3, r0
 8012b36:	2b00      	cmp	r3, #0
 8012b38:	d103      	bne.n	8012b42 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012b3a:	f06f 0302 	mvn.w	r3, #2
 8012b3e:	617b      	str	r3, [r7, #20]
 8012b40:	e012      	b.n	8012b68 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012b46:	68bb      	ldr	r3, [r7, #8]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d00d      	beq.n	8012b68 <osEventFlagsSet+0x78>
 8012b4c:	4b09      	ldr	r3, [pc, #36]	; (8012b74 <osEventFlagsSet+0x84>)
 8012b4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b52:	601a      	str	r2, [r3, #0]
 8012b54:	f3bf 8f4f 	dsb	sy
 8012b58:	f3bf 8f6f 	isb	sy
 8012b5c:	e004      	b.n	8012b68 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012b5e:	6839      	ldr	r1, [r7, #0]
 8012b60:	6938      	ldr	r0, [r7, #16]
 8012b62:	f000 faf5 	bl	8013150 <xEventGroupSetBits>
 8012b66:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012b68:	697b      	ldr	r3, [r7, #20]
}
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	3718      	adds	r7, #24
 8012b6e:	46bd      	mov	sp, r7
 8012b70:	bd80      	pop	{r7, pc}
 8012b72:	bf00      	nop
 8012b74:	e000ed04 	.word	0xe000ed04

08012b78 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b08c      	sub	sp, #48	; 0x30
 8012b7c:	af02      	add	r7, sp, #8
 8012b7e:	60f8      	str	r0, [r7, #12]
 8012b80:	60b9      	str	r1, [r7, #8]
 8012b82:	607a      	str	r2, [r7, #4]
 8012b84:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012b8a:	69bb      	ldr	r3, [r7, #24]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d004      	beq.n	8012b9a <osEventFlagsWait+0x22>
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d003      	beq.n	8012ba2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012b9a:	f06f 0303 	mvn.w	r3, #3
 8012b9e:	61fb      	str	r3, [r7, #28]
 8012ba0:	e04b      	b.n	8012c3a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ba2:	f3ef 8305 	mrs	r3, IPSR
 8012ba6:	617b      	str	r3, [r7, #20]
  return(result);
 8012ba8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d003      	beq.n	8012bb6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012bae:	f06f 0305 	mvn.w	r3, #5
 8012bb2:	61fb      	str	r3, [r7, #28]
 8012bb4:	e041      	b.n	8012c3a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f003 0301 	and.w	r3, r3, #1
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d002      	beq.n	8012bc6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012bc0:	2301      	movs	r3, #1
 8012bc2:	627b      	str	r3, [r7, #36]	; 0x24
 8012bc4:	e001      	b.n	8012bca <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012bc6:	2300      	movs	r3, #0
 8012bc8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012bca:	687b      	ldr	r3, [r7, #4]
 8012bcc:	f003 0302 	and.w	r3, r3, #2
 8012bd0:	2b00      	cmp	r3, #0
 8012bd2:	d002      	beq.n	8012bda <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012bd4:	2300      	movs	r3, #0
 8012bd6:	623b      	str	r3, [r7, #32]
 8012bd8:	e001      	b.n	8012bde <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012bda:	2301      	movs	r3, #1
 8012bdc:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012bde:	683b      	ldr	r3, [r7, #0]
 8012be0:	9300      	str	r3, [sp, #0]
 8012be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be4:	6a3a      	ldr	r2, [r7, #32]
 8012be6:	68b9      	ldr	r1, [r7, #8]
 8012be8:	69b8      	ldr	r0, [r7, #24]
 8012bea:	f000 f9e3 	bl	8012fb4 <xEventGroupWaitBits>
 8012bee:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	f003 0301 	and.w	r3, r3, #1
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d010      	beq.n	8012c1c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012bfa:	68ba      	ldr	r2, [r7, #8]
 8012bfc:	69fb      	ldr	r3, [r7, #28]
 8012bfe:	4013      	ands	r3, r2
 8012c00:	68ba      	ldr	r2, [r7, #8]
 8012c02:	429a      	cmp	r2, r3
 8012c04:	d019      	beq.n	8012c3a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012c06:	683b      	ldr	r3, [r7, #0]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d003      	beq.n	8012c14 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012c0c:	f06f 0301 	mvn.w	r3, #1
 8012c10:	61fb      	str	r3, [r7, #28]
 8012c12:	e012      	b.n	8012c3a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012c14:	f06f 0302 	mvn.w	r3, #2
 8012c18:	61fb      	str	r3, [r7, #28]
 8012c1a:	e00e      	b.n	8012c3a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012c1c:	68ba      	ldr	r2, [r7, #8]
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	4013      	ands	r3, r2
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d109      	bne.n	8012c3a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012c26:	683b      	ldr	r3, [r7, #0]
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d003      	beq.n	8012c34 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012c2c:	f06f 0301 	mvn.w	r3, #1
 8012c30:	61fb      	str	r3, [r7, #28]
 8012c32:	e002      	b.n	8012c3a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012c34:	f06f 0302 	mvn.w	r3, #2
 8012c38:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012c3a:	69fb      	ldr	r3, [r7, #28]
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3728      	adds	r7, #40	; 0x28
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}

08012c44 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b08a      	sub	sp, #40	; 0x28
 8012c48:	af02      	add	r7, sp, #8
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012c50:	2300      	movs	r3, #0
 8012c52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c54:	f3ef 8305 	mrs	r3, IPSR
 8012c58:	613b      	str	r3, [r7, #16]
  return(result);
 8012c5a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d15f      	bne.n	8012d20 <osMessageQueueNew+0xdc>
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d05c      	beq.n	8012d20 <osMessageQueueNew+0xdc>
 8012c66:	68bb      	ldr	r3, [r7, #8]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d059      	beq.n	8012d20 <osMessageQueueNew+0xdc>
    mem = -1;
 8012c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c70:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	d029      	beq.n	8012ccc <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	689b      	ldr	r3, [r3, #8]
 8012c7c:	2b00      	cmp	r3, #0
 8012c7e:	d012      	beq.n	8012ca6 <osMessageQueueNew+0x62>
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	68db      	ldr	r3, [r3, #12]
 8012c84:	2b4f      	cmp	r3, #79	; 0x4f
 8012c86:	d90e      	bls.n	8012ca6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d00a      	beq.n	8012ca6 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	695a      	ldr	r2, [r3, #20]
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	68b9      	ldr	r1, [r7, #8]
 8012c98:	fb01 f303 	mul.w	r3, r1, r3
 8012c9c:	429a      	cmp	r2, r3
 8012c9e:	d302      	bcc.n	8012ca6 <osMessageQueueNew+0x62>
        mem = 1;
 8012ca0:	2301      	movs	r3, #1
 8012ca2:	61bb      	str	r3, [r7, #24]
 8012ca4:	e014      	b.n	8012cd0 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	689b      	ldr	r3, [r3, #8]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d110      	bne.n	8012cd0 <osMessageQueueNew+0x8c>
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d10c      	bne.n	8012cd0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012cba:	2b00      	cmp	r3, #0
 8012cbc:	d108      	bne.n	8012cd0 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	695b      	ldr	r3, [r3, #20]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d104      	bne.n	8012cd0 <osMessageQueueNew+0x8c>
          mem = 0;
 8012cc6:	2300      	movs	r3, #0
 8012cc8:	61bb      	str	r3, [r7, #24]
 8012cca:	e001      	b.n	8012cd0 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012ccc:	2300      	movs	r3, #0
 8012cce:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012cd0:	69bb      	ldr	r3, [r7, #24]
 8012cd2:	2b01      	cmp	r3, #1
 8012cd4:	d10b      	bne.n	8012cee <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	691a      	ldr	r2, [r3, #16]
 8012cda:	687b      	ldr	r3, [r7, #4]
 8012cdc:	689b      	ldr	r3, [r3, #8]
 8012cde:	2100      	movs	r1, #0
 8012ce0:	9100      	str	r1, [sp, #0]
 8012ce2:	68b9      	ldr	r1, [r7, #8]
 8012ce4:	68f8      	ldr	r0, [r7, #12]
 8012ce6:	f000 fc1d 	bl	8013524 <xQueueGenericCreateStatic>
 8012cea:	61f8      	str	r0, [r7, #28]
 8012cec:	e008      	b.n	8012d00 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012cee:	69bb      	ldr	r3, [r7, #24]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d105      	bne.n	8012d00 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	68b9      	ldr	r1, [r7, #8]
 8012cf8:	68f8      	ldr	r0, [r7, #12]
 8012cfa:	f000 fc8b 	bl	8013614 <xQueueGenericCreate>
 8012cfe:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012d00:	69fb      	ldr	r3, [r7, #28]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d00c      	beq.n	8012d20 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012d06:	687b      	ldr	r3, [r7, #4]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d003      	beq.n	8012d14 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012d0c:	687b      	ldr	r3, [r7, #4]
 8012d0e:	681b      	ldr	r3, [r3, #0]
 8012d10:	617b      	str	r3, [r7, #20]
 8012d12:	e001      	b.n	8012d18 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012d14:	2300      	movs	r3, #0
 8012d16:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012d18:	6979      	ldr	r1, [r7, #20]
 8012d1a:	69f8      	ldr	r0, [r7, #28]
 8012d1c:	f001 f8e2 	bl	8013ee4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012d20:	69fb      	ldr	r3, [r7, #28]
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3720      	adds	r7, #32
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
	...

08012d2c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b088      	sub	sp, #32
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	603b      	str	r3, [r7, #0]
 8012d38:	4613      	mov	r3, r2
 8012d3a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012d3c:	68fb      	ldr	r3, [r7, #12]
 8012d3e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012d40:	2300      	movs	r3, #0
 8012d42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012d44:	f3ef 8305 	mrs	r3, IPSR
 8012d48:	617b      	str	r3, [r7, #20]
  return(result);
 8012d4a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012d4c:	2b00      	cmp	r3, #0
 8012d4e:	d028      	beq.n	8012da2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d50:	69bb      	ldr	r3, [r7, #24]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d005      	beq.n	8012d62 <osMessageQueuePut+0x36>
 8012d56:	68bb      	ldr	r3, [r7, #8]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d002      	beq.n	8012d62 <osMessageQueuePut+0x36>
 8012d5c:	683b      	ldr	r3, [r7, #0]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d003      	beq.n	8012d6a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012d62:	f06f 0303 	mvn.w	r3, #3
 8012d66:	61fb      	str	r3, [r7, #28]
 8012d68:	e038      	b.n	8012ddc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012d6a:	2300      	movs	r3, #0
 8012d6c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012d6e:	f107 0210 	add.w	r2, r7, #16
 8012d72:	2300      	movs	r3, #0
 8012d74:	68b9      	ldr	r1, [r7, #8]
 8012d76:	69b8      	ldr	r0, [r7, #24]
 8012d78:	f000 fda8 	bl	80138cc <xQueueGenericSendFromISR>
 8012d7c:	4603      	mov	r3, r0
 8012d7e:	2b01      	cmp	r3, #1
 8012d80:	d003      	beq.n	8012d8a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012d82:	f06f 0302 	mvn.w	r3, #2
 8012d86:	61fb      	str	r3, [r7, #28]
 8012d88:	e028      	b.n	8012ddc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012d8a:	693b      	ldr	r3, [r7, #16]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d025      	beq.n	8012ddc <osMessageQueuePut+0xb0>
 8012d90:	4b15      	ldr	r3, [pc, #84]	; (8012de8 <osMessageQueuePut+0xbc>)
 8012d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d96:	601a      	str	r2, [r3, #0]
 8012d98:	f3bf 8f4f 	dsb	sy
 8012d9c:	f3bf 8f6f 	isb	sy
 8012da0:	e01c      	b.n	8012ddc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012da2:	69bb      	ldr	r3, [r7, #24]
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d002      	beq.n	8012dae <osMessageQueuePut+0x82>
 8012da8:	68bb      	ldr	r3, [r7, #8]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d103      	bne.n	8012db6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012dae:	f06f 0303 	mvn.w	r3, #3
 8012db2:	61fb      	str	r3, [r7, #28]
 8012db4:	e012      	b.n	8012ddc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012db6:	2300      	movs	r3, #0
 8012db8:	683a      	ldr	r2, [r7, #0]
 8012dba:	68b9      	ldr	r1, [r7, #8]
 8012dbc:	69b8      	ldr	r0, [r7, #24]
 8012dbe:	f000 fc87 	bl	80136d0 <xQueueGenericSend>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b01      	cmp	r3, #1
 8012dc6:	d009      	beq.n	8012ddc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012dc8:	683b      	ldr	r3, [r7, #0]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d003      	beq.n	8012dd6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012dce:	f06f 0301 	mvn.w	r3, #1
 8012dd2:	61fb      	str	r3, [r7, #28]
 8012dd4:	e002      	b.n	8012ddc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012dd6:	f06f 0302 	mvn.w	r3, #2
 8012dda:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012ddc:	69fb      	ldr	r3, [r7, #28]
}
 8012dde:	4618      	mov	r0, r3
 8012de0:	3720      	adds	r7, #32
 8012de2:	46bd      	mov	sp, r7
 8012de4:	bd80      	pop	{r7, pc}
 8012de6:	bf00      	nop
 8012de8:	e000ed04 	.word	0xe000ed04

08012dec <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b088      	sub	sp, #32
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	60f8      	str	r0, [r7, #12]
 8012df4:	60b9      	str	r1, [r7, #8]
 8012df6:	607a      	str	r2, [r7, #4]
 8012df8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012dfa:	68fb      	ldr	r3, [r7, #12]
 8012dfc:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012dfe:	2300      	movs	r3, #0
 8012e00:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012e02:	f3ef 8305 	mrs	r3, IPSR
 8012e06:	617b      	str	r3, [r7, #20]
  return(result);
 8012e08:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d028      	beq.n	8012e60 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012e0e:	69bb      	ldr	r3, [r7, #24]
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d005      	beq.n	8012e20 <osMessageQueueGet+0x34>
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d002      	beq.n	8012e20 <osMessageQueueGet+0x34>
 8012e1a:	683b      	ldr	r3, [r7, #0]
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d003      	beq.n	8012e28 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012e20:	f06f 0303 	mvn.w	r3, #3
 8012e24:	61fb      	str	r3, [r7, #28]
 8012e26:	e037      	b.n	8012e98 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012e28:	2300      	movs	r3, #0
 8012e2a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012e2c:	f107 0310 	add.w	r3, r7, #16
 8012e30:	461a      	mov	r2, r3
 8012e32:	68b9      	ldr	r1, [r7, #8]
 8012e34:	69b8      	ldr	r0, [r7, #24]
 8012e36:	f000 fec5 	bl	8013bc4 <xQueueReceiveFromISR>
 8012e3a:	4603      	mov	r3, r0
 8012e3c:	2b01      	cmp	r3, #1
 8012e3e:	d003      	beq.n	8012e48 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012e40:	f06f 0302 	mvn.w	r3, #2
 8012e44:	61fb      	str	r3, [r7, #28]
 8012e46:	e027      	b.n	8012e98 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012e48:	693b      	ldr	r3, [r7, #16]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d024      	beq.n	8012e98 <osMessageQueueGet+0xac>
 8012e4e:	4b15      	ldr	r3, [pc, #84]	; (8012ea4 <osMessageQueueGet+0xb8>)
 8012e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e54:	601a      	str	r2, [r3, #0]
 8012e56:	f3bf 8f4f 	dsb	sy
 8012e5a:	f3bf 8f6f 	isb	sy
 8012e5e:	e01b      	b.n	8012e98 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012e60:	69bb      	ldr	r3, [r7, #24]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d002      	beq.n	8012e6c <osMessageQueueGet+0x80>
 8012e66:	68bb      	ldr	r3, [r7, #8]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d103      	bne.n	8012e74 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012e6c:	f06f 0303 	mvn.w	r3, #3
 8012e70:	61fb      	str	r3, [r7, #28]
 8012e72:	e011      	b.n	8012e98 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e74:	683a      	ldr	r2, [r7, #0]
 8012e76:	68b9      	ldr	r1, [r7, #8]
 8012e78:	69b8      	ldr	r0, [r7, #24]
 8012e7a:	f000 fdc3 	bl	8013a04 <xQueueReceive>
 8012e7e:	4603      	mov	r3, r0
 8012e80:	2b01      	cmp	r3, #1
 8012e82:	d009      	beq.n	8012e98 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012e84:	683b      	ldr	r3, [r7, #0]
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d003      	beq.n	8012e92 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012e8a:	f06f 0301 	mvn.w	r3, #1
 8012e8e:	61fb      	str	r3, [r7, #28]
 8012e90:	e002      	b.n	8012e98 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012e92:	f06f 0302 	mvn.w	r3, #2
 8012e96:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012e98:	69fb      	ldr	r3, [r7, #28]
}
 8012e9a:	4618      	mov	r0, r3
 8012e9c:	3720      	adds	r7, #32
 8012e9e:	46bd      	mov	sp, r7
 8012ea0:	bd80      	pop	{r7, pc}
 8012ea2:	bf00      	nop
 8012ea4:	e000ed04 	.word	0xe000ed04

08012ea8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012ea8:	b480      	push	{r7}
 8012eaa:	b085      	sub	sp, #20
 8012eac:	af00      	add	r7, sp, #0
 8012eae:	60f8      	str	r0, [r7, #12]
 8012eb0:	60b9      	str	r1, [r7, #8]
 8012eb2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	4a07      	ldr	r2, [pc, #28]	; (8012ed4 <vApplicationGetIdleTaskMemory+0x2c>)
 8012eb8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012eba:	68bb      	ldr	r3, [r7, #8]
 8012ebc:	4a06      	ldr	r2, [pc, #24]	; (8012ed8 <vApplicationGetIdleTaskMemory+0x30>)
 8012ebe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	2280      	movs	r2, #128	; 0x80
 8012ec4:	601a      	str	r2, [r3, #0]
}
 8012ec6:	bf00      	nop
 8012ec8:	3714      	adds	r7, #20
 8012eca:	46bd      	mov	sp, r7
 8012ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ed0:	4770      	bx	lr
 8012ed2:	bf00      	nop
 8012ed4:	24001110 	.word	0x24001110
 8012ed8:	2400116c 	.word	0x2400116c

08012edc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012edc:	b480      	push	{r7}
 8012ede:	b085      	sub	sp, #20
 8012ee0:	af00      	add	r7, sp, #0
 8012ee2:	60f8      	str	r0, [r7, #12]
 8012ee4:	60b9      	str	r1, [r7, #8]
 8012ee6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	4a07      	ldr	r2, [pc, #28]	; (8012f08 <vApplicationGetTimerTaskMemory+0x2c>)
 8012eec:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012eee:	68bb      	ldr	r3, [r7, #8]
 8012ef0:	4a06      	ldr	r2, [pc, #24]	; (8012f0c <vApplicationGetTimerTaskMemory+0x30>)
 8012ef2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012efa:	601a      	str	r2, [r3, #0]
}
 8012efc:	bf00      	nop
 8012efe:	3714      	adds	r7, #20
 8012f00:	46bd      	mov	sp, r7
 8012f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f06:	4770      	bx	lr
 8012f08:	2400136c 	.word	0x2400136c
 8012f0c:	240013c8 	.word	0x240013c8

08012f10 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012f10:	b580      	push	{r7, lr}
 8012f12:	b086      	sub	sp, #24
 8012f14:	af00      	add	r7, sp, #0
 8012f16:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d10a      	bne.n	8012f34 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f22:	f383 8811 	msr	BASEPRI, r3
 8012f26:	f3bf 8f6f 	isb	sy
 8012f2a:	f3bf 8f4f 	dsb	sy
 8012f2e:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012f30:	bf00      	nop
 8012f32:	e7fe      	b.n	8012f32 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012f34:	2320      	movs	r3, #32
 8012f36:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012f38:	68bb      	ldr	r3, [r7, #8]
 8012f3a:	2b20      	cmp	r3, #32
 8012f3c:	d00a      	beq.n	8012f54 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8012f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f42:	f383 8811 	msr	BASEPRI, r3
 8012f46:	f3bf 8f6f 	isb	sy
 8012f4a:	f3bf 8f4f 	dsb	sy
 8012f4e:	60fb      	str	r3, [r7, #12]
}
 8012f50:	bf00      	nop
 8012f52:	e7fe      	b.n	8012f52 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d00a      	beq.n	8012f74 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8012f5e:	697b      	ldr	r3, [r7, #20]
 8012f60:	2200      	movs	r2, #0
 8012f62:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	3304      	adds	r3, #4
 8012f68:	4618      	mov	r0, r3
 8012f6a:	f000 f9bf 	bl	80132ec <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	2201      	movs	r2, #1
 8012f72:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8012f74:	697b      	ldr	r3, [r7, #20]
	}
 8012f76:	4618      	mov	r0, r3
 8012f78:	3718      	adds	r7, #24
 8012f7a:	46bd      	mov	sp, r7
 8012f7c:	bd80      	pop	{r7, pc}

08012f7e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012f7e:	b580      	push	{r7, lr}
 8012f80:	b082      	sub	sp, #8
 8012f82:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012f84:	2020      	movs	r0, #32
 8012f86:	f002 ff07 	bl	8015d98 <pvPortMalloc>
 8012f8a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012f8c:	687b      	ldr	r3, [r7, #4]
 8012f8e:	2b00      	cmp	r3, #0
 8012f90:	d00a      	beq.n	8012fa8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	2200      	movs	r2, #0
 8012f96:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	3304      	adds	r3, #4
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	f000 f9a5 	bl	80132ec <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2200      	movs	r2, #0
 8012fa6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012fa8:	687b      	ldr	r3, [r7, #4]
	}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3708      	adds	r7, #8
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}
	...

08012fb4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b090      	sub	sp, #64	; 0x40
 8012fb8:	af00      	add	r7, sp, #0
 8012fba:	60f8      	str	r0, [r7, #12]
 8012fbc:	60b9      	str	r1, [r7, #8]
 8012fbe:	607a      	str	r2, [r7, #4]
 8012fc0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012fc2:	68fb      	ldr	r3, [r7, #12]
 8012fc4:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012fca:	2300      	movs	r3, #0
 8012fcc:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d10a      	bne.n	8012fea <xEventGroupWaitBits+0x36>
	__asm volatile
 8012fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fd8:	f383 8811 	msr	BASEPRI, r3
 8012fdc:	f3bf 8f6f 	isb	sy
 8012fe0:	f3bf 8f4f 	dsb	sy
 8012fe4:	623b      	str	r3, [r7, #32]
}
 8012fe6:	bf00      	nop
 8012fe8:	e7fe      	b.n	8012fe8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012fea:	68bb      	ldr	r3, [r7, #8]
 8012fec:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d00a      	beq.n	801300a <xEventGroupWaitBits+0x56>
	__asm volatile
 8012ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff8:	f383 8811 	msr	BASEPRI, r3
 8012ffc:	f3bf 8f6f 	isb	sy
 8013000:	f3bf 8f4f 	dsb	sy
 8013004:	61fb      	str	r3, [r7, #28]
}
 8013006:	bf00      	nop
 8013008:	e7fe      	b.n	8013008 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 801300a:	68bb      	ldr	r3, [r7, #8]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d10a      	bne.n	8013026 <xEventGroupWaitBits+0x72>
	__asm volatile
 8013010:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013014:	f383 8811 	msr	BASEPRI, r3
 8013018:	f3bf 8f6f 	isb	sy
 801301c:	f3bf 8f4f 	dsb	sy
 8013020:	61bb      	str	r3, [r7, #24]
}
 8013022:	bf00      	nop
 8013024:	e7fe      	b.n	8013024 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013026:	f002 f803 	bl	8015030 <xTaskGetSchedulerState>
 801302a:	4603      	mov	r3, r0
 801302c:	2b00      	cmp	r3, #0
 801302e:	d102      	bne.n	8013036 <xEventGroupWaitBits+0x82>
 8013030:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013032:	2b00      	cmp	r3, #0
 8013034:	d101      	bne.n	801303a <xEventGroupWaitBits+0x86>
 8013036:	2301      	movs	r3, #1
 8013038:	e000      	b.n	801303c <xEventGroupWaitBits+0x88>
 801303a:	2300      	movs	r3, #0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d10a      	bne.n	8013056 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8013040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013044:	f383 8811 	msr	BASEPRI, r3
 8013048:	f3bf 8f6f 	isb	sy
 801304c:	f3bf 8f4f 	dsb	sy
 8013050:	617b      	str	r3, [r7, #20]
}
 8013052:	bf00      	nop
 8013054:	e7fe      	b.n	8013054 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013056:	f001 fb6b 	bl	8014730 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801305a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013060:	683a      	ldr	r2, [r7, #0]
 8013062:	68b9      	ldr	r1, [r7, #8]
 8013064:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013066:	f000 f90b 	bl	8013280 <prvTestWaitCondition>
 801306a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801306e:	2b00      	cmp	r3, #0
 8013070:	d00e      	beq.n	8013090 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013074:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013076:	2300      	movs	r3, #0
 8013078:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801307a:	687b      	ldr	r3, [r7, #4]
 801307c:	2b00      	cmp	r3, #0
 801307e:	d028      	beq.n	80130d2 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013080:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013082:	681a      	ldr	r2, [r3, #0]
 8013084:	68bb      	ldr	r3, [r7, #8]
 8013086:	43db      	mvns	r3, r3
 8013088:	401a      	ands	r2, r3
 801308a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801308c:	601a      	str	r2, [r3, #0]
 801308e:	e020      	b.n	80130d2 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013090:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013092:	2b00      	cmp	r3, #0
 8013094:	d104      	bne.n	80130a0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013096:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013098:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801309a:	2301      	movs	r3, #1
 801309c:	633b      	str	r3, [r7, #48]	; 0x30
 801309e:	e018      	b.n	80130d2 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d003      	beq.n	80130ae <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80130a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80130ac:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80130ae:	683b      	ldr	r3, [r7, #0]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d003      	beq.n	80130bc <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80130b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80130ba:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80130bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130be:	1d18      	adds	r0, r3, #4
 80130c0:	68ba      	ldr	r2, [r7, #8]
 80130c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80130c4:	4313      	orrs	r3, r2
 80130c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80130c8:	4619      	mov	r1, r3
 80130ca:	f001 fd29 	bl	8014b20 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 80130ce:	2300      	movs	r3, #0
 80130d0:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 80130d2:	f001 fb3b 	bl	801474c <xTaskResumeAll>
 80130d6:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80130d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d031      	beq.n	8013142 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80130de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	d107      	bne.n	80130f4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80130e4:	4b19      	ldr	r3, [pc, #100]	; (801314c <xEventGroupWaitBits+0x198>)
 80130e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80130ea:	601a      	str	r2, [r3, #0]
 80130ec:	f3bf 8f4f 	dsb	sy
 80130f0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80130f4:	f002 f828 	bl	8015148 <uxTaskResetEventItemValue>
 80130f8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80130fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013100:	2b00      	cmp	r3, #0
 8013102:	d11a      	bne.n	801313a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8013104:	f002 fd26 	bl	8015b54 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8013108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 801310e:	683a      	ldr	r2, [r7, #0]
 8013110:	68b9      	ldr	r1, [r7, #8]
 8013112:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8013114:	f000 f8b4 	bl	8013280 <prvTestWaitCondition>
 8013118:	4603      	mov	r3, r0
 801311a:	2b00      	cmp	r3, #0
 801311c:	d009      	beq.n	8013132 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d006      	beq.n	8013132 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013124:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013126:	681a      	ldr	r2, [r3, #0]
 8013128:	68bb      	ldr	r3, [r7, #8]
 801312a:	43db      	mvns	r3, r3
 801312c:	401a      	ands	r2, r3
 801312e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013130:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8013132:	2301      	movs	r3, #1
 8013134:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8013136:	f002 fd3d 	bl	8015bb4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 801313a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801313c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013140:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8013142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8013144:	4618      	mov	r0, r3
 8013146:	3740      	adds	r7, #64	; 0x40
 8013148:	46bd      	mov	sp, r7
 801314a:	bd80      	pop	{r7, pc}
 801314c:	e000ed04 	.word	0xe000ed04

08013150 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013150:	b580      	push	{r7, lr}
 8013152:	b08e      	sub	sp, #56	; 0x38
 8013154:	af00      	add	r7, sp, #0
 8013156:	6078      	str	r0, [r7, #4]
 8013158:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801315a:	2300      	movs	r3, #0
 801315c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013162:	2300      	movs	r3, #0
 8013164:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d10a      	bne.n	8013182 <xEventGroupSetBits+0x32>
	__asm volatile
 801316c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013170:	f383 8811 	msr	BASEPRI, r3
 8013174:	f3bf 8f6f 	isb	sy
 8013178:	f3bf 8f4f 	dsb	sy
 801317c:	613b      	str	r3, [r7, #16]
}
 801317e:	bf00      	nop
 8013180:	e7fe      	b.n	8013180 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013182:	683b      	ldr	r3, [r7, #0]
 8013184:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013188:	2b00      	cmp	r3, #0
 801318a:	d00a      	beq.n	80131a2 <xEventGroupSetBits+0x52>
	__asm volatile
 801318c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013190:	f383 8811 	msr	BASEPRI, r3
 8013194:	f3bf 8f6f 	isb	sy
 8013198:	f3bf 8f4f 	dsb	sy
 801319c:	60fb      	str	r3, [r7, #12]
}
 801319e:	bf00      	nop
 80131a0:	e7fe      	b.n	80131a0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80131a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a4:	3304      	adds	r3, #4
 80131a6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80131a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131aa:	3308      	adds	r3, #8
 80131ac:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80131ae:	f001 fabf 	bl	8014730 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80131b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b4:	68db      	ldr	r3, [r3, #12]
 80131b6:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80131b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131ba:	681a      	ldr	r2, [r3, #0]
 80131bc:	683b      	ldr	r3, [r7, #0]
 80131be:	431a      	orrs	r2, r3
 80131c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c2:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80131c4:	e03c      	b.n	8013240 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 80131c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131c8:	685b      	ldr	r3, [r3, #4]
 80131ca:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 80131cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80131ce:	681b      	ldr	r3, [r3, #0]
 80131d0:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 80131d2:	2300      	movs	r3, #0
 80131d4:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80131d6:	69bb      	ldr	r3, [r7, #24]
 80131d8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80131dc:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80131de:	69bb      	ldr	r3, [r7, #24]
 80131e0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80131e4:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80131e6:	697b      	ldr	r3, [r7, #20]
 80131e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d108      	bne.n	8013202 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80131f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131f2:	681a      	ldr	r2, [r3, #0]
 80131f4:	69bb      	ldr	r3, [r7, #24]
 80131f6:	4013      	ands	r3, r2
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d00b      	beq.n	8013214 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80131fc:	2301      	movs	r3, #1
 80131fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013200:	e008      	b.n	8013214 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8013202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013204:	681a      	ldr	r2, [r3, #0]
 8013206:	69bb      	ldr	r3, [r7, #24]
 8013208:	4013      	ands	r3, r2
 801320a:	69ba      	ldr	r2, [r7, #24]
 801320c:	429a      	cmp	r2, r3
 801320e:	d101      	bne.n	8013214 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8013210:	2301      	movs	r3, #1
 8013212:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8013214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013216:	2b00      	cmp	r3, #0
 8013218:	d010      	beq.n	801323c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8013220:	2b00      	cmp	r3, #0
 8013222:	d003      	beq.n	801322c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8013224:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013226:	69bb      	ldr	r3, [r7, #24]
 8013228:	4313      	orrs	r3, r2
 801322a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 801322c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8013234:	4619      	mov	r1, r3
 8013236:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013238:	f001 fd3e 	bl	8014cb8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 801323c:	69fb      	ldr	r3, [r7, #28]
 801323e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8013240:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013242:	6a3b      	ldr	r3, [r7, #32]
 8013244:	429a      	cmp	r2, r3
 8013246:	d1be      	bne.n	80131c6 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8013248:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801324a:	681a      	ldr	r2, [r3, #0]
 801324c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801324e:	43db      	mvns	r3, r3
 8013250:	401a      	ands	r2, r3
 8013252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013254:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013256:	f001 fa79 	bl	801474c <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801325a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801325c:	681b      	ldr	r3, [r3, #0]
}
 801325e:	4618      	mov	r0, r3
 8013260:	3738      	adds	r7, #56	; 0x38
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}

08013266 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013266:	b580      	push	{r7, lr}
 8013268:	b082      	sub	sp, #8
 801326a:	af00      	add	r7, sp, #0
 801326c:	6078      	str	r0, [r7, #4]
 801326e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013270:	6839      	ldr	r1, [r7, #0]
 8013272:	6878      	ldr	r0, [r7, #4]
 8013274:	f7ff ff6c 	bl	8013150 <xEventGroupSetBits>
}
 8013278:	bf00      	nop
 801327a:	3708      	adds	r7, #8
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}

08013280 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013280:	b480      	push	{r7}
 8013282:	b087      	sub	sp, #28
 8013284:	af00      	add	r7, sp, #0
 8013286:	60f8      	str	r0, [r7, #12]
 8013288:	60b9      	str	r1, [r7, #8]
 801328a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801328c:	2300      	movs	r3, #0
 801328e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013290:	687b      	ldr	r3, [r7, #4]
 8013292:	2b00      	cmp	r3, #0
 8013294:	d107      	bne.n	80132a6 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013296:	68fa      	ldr	r2, [r7, #12]
 8013298:	68bb      	ldr	r3, [r7, #8]
 801329a:	4013      	ands	r3, r2
 801329c:	2b00      	cmp	r3, #0
 801329e:	d00a      	beq.n	80132b6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80132a0:	2301      	movs	r3, #1
 80132a2:	617b      	str	r3, [r7, #20]
 80132a4:	e007      	b.n	80132b6 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80132a6:	68fa      	ldr	r2, [r7, #12]
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	4013      	ands	r3, r2
 80132ac:	68ba      	ldr	r2, [r7, #8]
 80132ae:	429a      	cmp	r2, r3
 80132b0:	d101      	bne.n	80132b6 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80132b2:	2301      	movs	r3, #1
 80132b4:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80132b6:	697b      	ldr	r3, [r7, #20]
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	371c      	adds	r7, #28
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	68ba      	ldr	r2, [r7, #8]
 80132d4:	68f9      	ldr	r1, [r7, #12]
 80132d6:	4804      	ldr	r0, [pc, #16]	; (80132e8 <xEventGroupSetBitsFromISR+0x24>)
 80132d8:	f002 faf0 	bl	80158bc <xTimerPendFunctionCallFromISR>
 80132dc:	6178      	str	r0, [r7, #20]

		return xReturn;
 80132de:	697b      	ldr	r3, [r7, #20]
	}
 80132e0:	4618      	mov	r0, r3
 80132e2:	3718      	adds	r7, #24
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	08013267 	.word	0x08013267

080132ec <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80132ec:	b480      	push	{r7}
 80132ee:	b083      	sub	sp, #12
 80132f0:	af00      	add	r7, sp, #0
 80132f2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	f103 0208 	add.w	r2, r3, #8
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013304:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	f103 0208 	add.w	r2, r3, #8
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	f103 0208 	add.w	r2, r3, #8
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	2200      	movs	r2, #0
 801331e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8013320:	bf00      	nop
 8013322:	370c      	adds	r7, #12
 8013324:	46bd      	mov	sp, r7
 8013326:	f85d 7b04 	ldr.w	r7, [sp], #4
 801332a:	4770      	bx	lr

0801332c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801332c:	b480      	push	{r7}
 801332e:	b083      	sub	sp, #12
 8013330:	af00      	add	r7, sp, #0
 8013332:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	2200      	movs	r2, #0
 8013338:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801333a:	bf00      	nop
 801333c:	370c      	adds	r7, #12
 801333e:	46bd      	mov	sp, r7
 8013340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013344:	4770      	bx	lr

08013346 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8013346:	b480      	push	{r7}
 8013348:	b085      	sub	sp, #20
 801334a:	af00      	add	r7, sp, #0
 801334c:	6078      	str	r0, [r7, #4]
 801334e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013350:	687b      	ldr	r3, [r7, #4]
 8013352:	685b      	ldr	r3, [r3, #4]
 8013354:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013356:	683b      	ldr	r3, [r7, #0]
 8013358:	68fa      	ldr	r2, [r7, #12]
 801335a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	689a      	ldr	r2, [r3, #8]
 8013360:	683b      	ldr	r3, [r7, #0]
 8013362:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	689b      	ldr	r3, [r3, #8]
 8013368:	683a      	ldr	r2, [r7, #0]
 801336a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	683a      	ldr	r2, [r7, #0]
 8013370:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013372:	683b      	ldr	r3, [r7, #0]
 8013374:	687a      	ldr	r2, [r7, #4]
 8013376:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	1c5a      	adds	r2, r3, #1
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	601a      	str	r2, [r3, #0]
}
 8013382:	bf00      	nop
 8013384:	3714      	adds	r7, #20
 8013386:	46bd      	mov	sp, r7
 8013388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338c:	4770      	bx	lr

0801338e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801338e:	b480      	push	{r7}
 8013390:	b085      	sub	sp, #20
 8013392:	af00      	add	r7, sp, #0
 8013394:	6078      	str	r0, [r7, #4]
 8013396:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013398:	683b      	ldr	r3, [r7, #0]
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80133a4:	d103      	bne.n	80133ae <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	691b      	ldr	r3, [r3, #16]
 80133aa:	60fb      	str	r3, [r7, #12]
 80133ac:	e00c      	b.n	80133c8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	3308      	adds	r3, #8
 80133b2:	60fb      	str	r3, [r7, #12]
 80133b4:	e002      	b.n	80133bc <vListInsert+0x2e>
 80133b6:	68fb      	ldr	r3, [r7, #12]
 80133b8:	685b      	ldr	r3, [r3, #4]
 80133ba:	60fb      	str	r3, [r7, #12]
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	685b      	ldr	r3, [r3, #4]
 80133c0:	681b      	ldr	r3, [r3, #0]
 80133c2:	68ba      	ldr	r2, [r7, #8]
 80133c4:	429a      	cmp	r2, r3
 80133c6:	d2f6      	bcs.n	80133b6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	685a      	ldr	r2, [r3, #4]
 80133cc:	683b      	ldr	r3, [r7, #0]
 80133ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80133d0:	683b      	ldr	r3, [r7, #0]
 80133d2:	685b      	ldr	r3, [r3, #4]
 80133d4:	683a      	ldr	r2, [r7, #0]
 80133d6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80133d8:	683b      	ldr	r3, [r7, #0]
 80133da:	68fa      	ldr	r2, [r7, #12]
 80133dc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	683a      	ldr	r2, [r7, #0]
 80133e2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80133e4:	683b      	ldr	r3, [r7, #0]
 80133e6:	687a      	ldr	r2, [r7, #4]
 80133e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	1c5a      	adds	r2, r3, #1
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	601a      	str	r2, [r3, #0]
}
 80133f4:	bf00      	nop
 80133f6:	3714      	adds	r7, #20
 80133f8:	46bd      	mov	sp, r7
 80133fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133fe:	4770      	bx	lr

08013400 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8013400:	b480      	push	{r7}
 8013402:	b085      	sub	sp, #20
 8013404:	af00      	add	r7, sp, #0
 8013406:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	691b      	ldr	r3, [r3, #16]
 801340c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	685b      	ldr	r3, [r3, #4]
 8013412:	687a      	ldr	r2, [r7, #4]
 8013414:	6892      	ldr	r2, [r2, #8]
 8013416:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	689b      	ldr	r3, [r3, #8]
 801341c:	687a      	ldr	r2, [r7, #4]
 801341e:	6852      	ldr	r2, [r2, #4]
 8013420:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8013422:	68fb      	ldr	r3, [r7, #12]
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	687a      	ldr	r2, [r7, #4]
 8013428:	429a      	cmp	r2, r3
 801342a:	d103      	bne.n	8013434 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	689a      	ldr	r2, [r3, #8]
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	2200      	movs	r2, #0
 8013438:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801343a:	68fb      	ldr	r3, [r7, #12]
 801343c:	681b      	ldr	r3, [r3, #0]
 801343e:	1e5a      	subs	r2, r3, #1
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	681b      	ldr	r3, [r3, #0]
}
 8013448:	4618      	mov	r0, r3
 801344a:	3714      	adds	r7, #20
 801344c:	46bd      	mov	sp, r7
 801344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013452:	4770      	bx	lr

08013454 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b084      	sub	sp, #16
 8013458:	af00      	add	r7, sp, #0
 801345a:	6078      	str	r0, [r7, #4]
 801345c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	2b00      	cmp	r3, #0
 8013466:	d10a      	bne.n	801347e <xQueueGenericReset+0x2a>
	__asm volatile
 8013468:	f04f 0350 	mov.w	r3, #80	; 0x50
 801346c:	f383 8811 	msr	BASEPRI, r3
 8013470:	f3bf 8f6f 	isb	sy
 8013474:	f3bf 8f4f 	dsb	sy
 8013478:	60bb      	str	r3, [r7, #8]
}
 801347a:	bf00      	nop
 801347c:	e7fe      	b.n	801347c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801347e:	f002 fb69 	bl	8015b54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013482:	68fb      	ldr	r3, [r7, #12]
 8013484:	681a      	ldr	r2, [r3, #0]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801348a:	68f9      	ldr	r1, [r7, #12]
 801348c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801348e:	fb01 f303 	mul.w	r3, r1, r3
 8013492:	441a      	add	r2, r3
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	2200      	movs	r2, #0
 801349c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801349e:	68fb      	ldr	r3, [r7, #12]
 80134a0:	681a      	ldr	r2, [r3, #0]
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	681a      	ldr	r2, [r3, #0]
 80134aa:	68fb      	ldr	r3, [r7, #12]
 80134ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80134ae:	3b01      	subs	r3, #1
 80134b0:	68f9      	ldr	r1, [r7, #12]
 80134b2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80134b4:	fb01 f303 	mul.w	r3, r1, r3
 80134b8:	441a      	add	r2, r3
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80134be:	68fb      	ldr	r3, [r7, #12]
 80134c0:	22ff      	movs	r2, #255	; 0xff
 80134c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80134c6:	68fb      	ldr	r3, [r7, #12]
 80134c8:	22ff      	movs	r2, #255	; 0xff
 80134ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80134ce:	683b      	ldr	r3, [r7, #0]
 80134d0:	2b00      	cmp	r3, #0
 80134d2:	d114      	bne.n	80134fe <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	691b      	ldr	r3, [r3, #16]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d01a      	beq.n	8013512 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	3310      	adds	r3, #16
 80134e0:	4618      	mov	r0, r3
 80134e2:	f001 fb85 	bl	8014bf0 <xTaskRemoveFromEventList>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d012      	beq.n	8013512 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80134ec:	4b0c      	ldr	r3, [pc, #48]	; (8013520 <xQueueGenericReset+0xcc>)
 80134ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134f2:	601a      	str	r2, [r3, #0]
 80134f4:	f3bf 8f4f 	dsb	sy
 80134f8:	f3bf 8f6f 	isb	sy
 80134fc:	e009      	b.n	8013512 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80134fe:	68fb      	ldr	r3, [r7, #12]
 8013500:	3310      	adds	r3, #16
 8013502:	4618      	mov	r0, r3
 8013504:	f7ff fef2 	bl	80132ec <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8013508:	68fb      	ldr	r3, [r7, #12]
 801350a:	3324      	adds	r3, #36	; 0x24
 801350c:	4618      	mov	r0, r3
 801350e:	f7ff feed 	bl	80132ec <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8013512:	f002 fb4f 	bl	8015bb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8013516:	2301      	movs	r3, #1
}
 8013518:	4618      	mov	r0, r3
 801351a:	3710      	adds	r7, #16
 801351c:	46bd      	mov	sp, r7
 801351e:	bd80      	pop	{r7, pc}
 8013520:	e000ed04 	.word	0xe000ed04

08013524 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8013524:	b580      	push	{r7, lr}
 8013526:	b08e      	sub	sp, #56	; 0x38
 8013528:	af02      	add	r7, sp, #8
 801352a:	60f8      	str	r0, [r7, #12]
 801352c:	60b9      	str	r1, [r7, #8]
 801352e:	607a      	str	r2, [r7, #4]
 8013530:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d10a      	bne.n	801354e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8013538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801353c:	f383 8811 	msr	BASEPRI, r3
 8013540:	f3bf 8f6f 	isb	sy
 8013544:	f3bf 8f4f 	dsb	sy
 8013548:	62bb      	str	r3, [r7, #40]	; 0x28
}
 801354a:	bf00      	nop
 801354c:	e7fe      	b.n	801354c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801354e:	683b      	ldr	r3, [r7, #0]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d10a      	bne.n	801356a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013558:	f383 8811 	msr	BASEPRI, r3
 801355c:	f3bf 8f6f 	isb	sy
 8013560:	f3bf 8f4f 	dsb	sy
 8013564:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013566:	bf00      	nop
 8013568:	e7fe      	b.n	8013568 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801356a:	687b      	ldr	r3, [r7, #4]
 801356c:	2b00      	cmp	r3, #0
 801356e:	d002      	beq.n	8013576 <xQueueGenericCreateStatic+0x52>
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	2b00      	cmp	r3, #0
 8013574:	d001      	beq.n	801357a <xQueueGenericCreateStatic+0x56>
 8013576:	2301      	movs	r3, #1
 8013578:	e000      	b.n	801357c <xQueueGenericCreateStatic+0x58>
 801357a:	2300      	movs	r3, #0
 801357c:	2b00      	cmp	r3, #0
 801357e:	d10a      	bne.n	8013596 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013584:	f383 8811 	msr	BASEPRI, r3
 8013588:	f3bf 8f6f 	isb	sy
 801358c:	f3bf 8f4f 	dsb	sy
 8013590:	623b      	str	r3, [r7, #32]
}
 8013592:	bf00      	nop
 8013594:	e7fe      	b.n	8013594 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	2b00      	cmp	r3, #0
 801359a:	d102      	bne.n	80135a2 <xQueueGenericCreateStatic+0x7e>
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d101      	bne.n	80135a6 <xQueueGenericCreateStatic+0x82>
 80135a2:	2301      	movs	r3, #1
 80135a4:	e000      	b.n	80135a8 <xQueueGenericCreateStatic+0x84>
 80135a6:	2300      	movs	r3, #0
 80135a8:	2b00      	cmp	r3, #0
 80135aa:	d10a      	bne.n	80135c2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80135ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135b0:	f383 8811 	msr	BASEPRI, r3
 80135b4:	f3bf 8f6f 	isb	sy
 80135b8:	f3bf 8f4f 	dsb	sy
 80135bc:	61fb      	str	r3, [r7, #28]
}
 80135be:	bf00      	nop
 80135c0:	e7fe      	b.n	80135c0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80135c2:	2350      	movs	r3, #80	; 0x50
 80135c4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80135c6:	697b      	ldr	r3, [r7, #20]
 80135c8:	2b50      	cmp	r3, #80	; 0x50
 80135ca:	d00a      	beq.n	80135e2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80135cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135d0:	f383 8811 	msr	BASEPRI, r3
 80135d4:	f3bf 8f6f 	isb	sy
 80135d8:	f3bf 8f4f 	dsb	sy
 80135dc:	61bb      	str	r3, [r7, #24]
}
 80135de:	bf00      	nop
 80135e0:	e7fe      	b.n	80135e0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80135e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80135e4:	683b      	ldr	r3, [r7, #0]
 80135e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80135e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d00d      	beq.n	801360a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80135ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135f0:	2201      	movs	r2, #1
 80135f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80135f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80135fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fc:	9300      	str	r3, [sp, #0]
 80135fe:	4613      	mov	r3, r2
 8013600:	687a      	ldr	r2, [r7, #4]
 8013602:	68b9      	ldr	r1, [r7, #8]
 8013604:	68f8      	ldr	r0, [r7, #12]
 8013606:	f000 f83f 	bl	8013688 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801360a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 801360c:	4618      	mov	r0, r3
 801360e:	3730      	adds	r7, #48	; 0x30
 8013610:	46bd      	mov	sp, r7
 8013612:	bd80      	pop	{r7, pc}

08013614 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8013614:	b580      	push	{r7, lr}
 8013616:	b08a      	sub	sp, #40	; 0x28
 8013618:	af02      	add	r7, sp, #8
 801361a:	60f8      	str	r0, [r7, #12]
 801361c:	60b9      	str	r1, [r7, #8]
 801361e:	4613      	mov	r3, r2
 8013620:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8013622:	68fb      	ldr	r3, [r7, #12]
 8013624:	2b00      	cmp	r3, #0
 8013626:	d10a      	bne.n	801363e <xQueueGenericCreate+0x2a>
	__asm volatile
 8013628:	f04f 0350 	mov.w	r3, #80	; 0x50
 801362c:	f383 8811 	msr	BASEPRI, r3
 8013630:	f3bf 8f6f 	isb	sy
 8013634:	f3bf 8f4f 	dsb	sy
 8013638:	613b      	str	r3, [r7, #16]
}
 801363a:	bf00      	nop
 801363c:	e7fe      	b.n	801363c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801363e:	68fb      	ldr	r3, [r7, #12]
 8013640:	68ba      	ldr	r2, [r7, #8]
 8013642:	fb02 f303 	mul.w	r3, r2, r3
 8013646:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8013648:	69fb      	ldr	r3, [r7, #28]
 801364a:	3350      	adds	r3, #80	; 0x50
 801364c:	4618      	mov	r0, r3
 801364e:	f002 fba3 	bl	8015d98 <pvPortMalloc>
 8013652:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013654:	69bb      	ldr	r3, [r7, #24]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d011      	beq.n	801367e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801365e:	697b      	ldr	r3, [r7, #20]
 8013660:	3350      	adds	r3, #80	; 0x50
 8013662:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013664:	69bb      	ldr	r3, [r7, #24]
 8013666:	2200      	movs	r2, #0
 8013668:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801366c:	79fa      	ldrb	r2, [r7, #7]
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	9300      	str	r3, [sp, #0]
 8013672:	4613      	mov	r3, r2
 8013674:	697a      	ldr	r2, [r7, #20]
 8013676:	68b9      	ldr	r1, [r7, #8]
 8013678:	68f8      	ldr	r0, [r7, #12]
 801367a:	f000 f805 	bl	8013688 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801367e:	69bb      	ldr	r3, [r7, #24]
	}
 8013680:	4618      	mov	r0, r3
 8013682:	3720      	adds	r7, #32
 8013684:	46bd      	mov	sp, r7
 8013686:	bd80      	pop	{r7, pc}

08013688 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013688:	b580      	push	{r7, lr}
 801368a:	b084      	sub	sp, #16
 801368c:	af00      	add	r7, sp, #0
 801368e:	60f8      	str	r0, [r7, #12]
 8013690:	60b9      	str	r1, [r7, #8]
 8013692:	607a      	str	r2, [r7, #4]
 8013694:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013696:	68bb      	ldr	r3, [r7, #8]
 8013698:	2b00      	cmp	r3, #0
 801369a:	d103      	bne.n	80136a4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801369c:	69bb      	ldr	r3, [r7, #24]
 801369e:	69ba      	ldr	r2, [r7, #24]
 80136a0:	601a      	str	r2, [r3, #0]
 80136a2:	e002      	b.n	80136aa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80136a4:	69bb      	ldr	r3, [r7, #24]
 80136a6:	687a      	ldr	r2, [r7, #4]
 80136a8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80136aa:	69bb      	ldr	r3, [r7, #24]
 80136ac:	68fa      	ldr	r2, [r7, #12]
 80136ae:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80136b0:	69bb      	ldr	r3, [r7, #24]
 80136b2:	68ba      	ldr	r2, [r7, #8]
 80136b4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80136b6:	2101      	movs	r1, #1
 80136b8:	69b8      	ldr	r0, [r7, #24]
 80136ba:	f7ff fecb 	bl	8013454 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80136be:	69bb      	ldr	r3, [r7, #24]
 80136c0:	78fa      	ldrb	r2, [r7, #3]
 80136c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80136c6:	bf00      	nop
 80136c8:	3710      	adds	r7, #16
 80136ca:	46bd      	mov	sp, r7
 80136cc:	bd80      	pop	{r7, pc}
	...

080136d0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b08e      	sub	sp, #56	; 0x38
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	60f8      	str	r0, [r7, #12]
 80136d8:	60b9      	str	r1, [r7, #8]
 80136da:	607a      	str	r2, [r7, #4]
 80136dc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80136de:	2300      	movs	r3, #0
 80136e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80136e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d10a      	bne.n	8013702 <xQueueGenericSend+0x32>
	__asm volatile
 80136ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136f0:	f383 8811 	msr	BASEPRI, r3
 80136f4:	f3bf 8f6f 	isb	sy
 80136f8:	f3bf 8f4f 	dsb	sy
 80136fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80136fe:	bf00      	nop
 8013700:	e7fe      	b.n	8013700 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013702:	68bb      	ldr	r3, [r7, #8]
 8013704:	2b00      	cmp	r3, #0
 8013706:	d103      	bne.n	8013710 <xQueueGenericSend+0x40>
 8013708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801370c:	2b00      	cmp	r3, #0
 801370e:	d101      	bne.n	8013714 <xQueueGenericSend+0x44>
 8013710:	2301      	movs	r3, #1
 8013712:	e000      	b.n	8013716 <xQueueGenericSend+0x46>
 8013714:	2300      	movs	r3, #0
 8013716:	2b00      	cmp	r3, #0
 8013718:	d10a      	bne.n	8013730 <xQueueGenericSend+0x60>
	__asm volatile
 801371a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801371e:	f383 8811 	msr	BASEPRI, r3
 8013722:	f3bf 8f6f 	isb	sy
 8013726:	f3bf 8f4f 	dsb	sy
 801372a:	627b      	str	r3, [r7, #36]	; 0x24
}
 801372c:	bf00      	nop
 801372e:	e7fe      	b.n	801372e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013730:	683b      	ldr	r3, [r7, #0]
 8013732:	2b02      	cmp	r3, #2
 8013734:	d103      	bne.n	801373e <xQueueGenericSend+0x6e>
 8013736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801373a:	2b01      	cmp	r3, #1
 801373c:	d101      	bne.n	8013742 <xQueueGenericSend+0x72>
 801373e:	2301      	movs	r3, #1
 8013740:	e000      	b.n	8013744 <xQueueGenericSend+0x74>
 8013742:	2300      	movs	r3, #0
 8013744:	2b00      	cmp	r3, #0
 8013746:	d10a      	bne.n	801375e <xQueueGenericSend+0x8e>
	__asm volatile
 8013748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801374c:	f383 8811 	msr	BASEPRI, r3
 8013750:	f3bf 8f6f 	isb	sy
 8013754:	f3bf 8f4f 	dsb	sy
 8013758:	623b      	str	r3, [r7, #32]
}
 801375a:	bf00      	nop
 801375c:	e7fe      	b.n	801375c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801375e:	f001 fc67 	bl	8015030 <xTaskGetSchedulerState>
 8013762:	4603      	mov	r3, r0
 8013764:	2b00      	cmp	r3, #0
 8013766:	d102      	bne.n	801376e <xQueueGenericSend+0x9e>
 8013768:	687b      	ldr	r3, [r7, #4]
 801376a:	2b00      	cmp	r3, #0
 801376c:	d101      	bne.n	8013772 <xQueueGenericSend+0xa2>
 801376e:	2301      	movs	r3, #1
 8013770:	e000      	b.n	8013774 <xQueueGenericSend+0xa4>
 8013772:	2300      	movs	r3, #0
 8013774:	2b00      	cmp	r3, #0
 8013776:	d10a      	bne.n	801378e <xQueueGenericSend+0xbe>
	__asm volatile
 8013778:	f04f 0350 	mov.w	r3, #80	; 0x50
 801377c:	f383 8811 	msr	BASEPRI, r3
 8013780:	f3bf 8f6f 	isb	sy
 8013784:	f3bf 8f4f 	dsb	sy
 8013788:	61fb      	str	r3, [r7, #28]
}
 801378a:	bf00      	nop
 801378c:	e7fe      	b.n	801378c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801378e:	f002 f9e1 	bl	8015b54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013794:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801379a:	429a      	cmp	r2, r3
 801379c:	d302      	bcc.n	80137a4 <xQueueGenericSend+0xd4>
 801379e:	683b      	ldr	r3, [r7, #0]
 80137a0:	2b02      	cmp	r3, #2
 80137a2:	d129      	bne.n	80137f8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80137a4:	683a      	ldr	r2, [r7, #0]
 80137a6:	68b9      	ldr	r1, [r7, #8]
 80137a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137aa:	f000 fa8b 	bl	8013cc4 <prvCopyDataToQueue>
 80137ae:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80137b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80137b4:	2b00      	cmp	r3, #0
 80137b6:	d010      	beq.n	80137da <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80137b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ba:	3324      	adds	r3, #36	; 0x24
 80137bc:	4618      	mov	r0, r3
 80137be:	f001 fa17 	bl	8014bf0 <xTaskRemoveFromEventList>
 80137c2:	4603      	mov	r3, r0
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d013      	beq.n	80137f0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80137c8:	4b3f      	ldr	r3, [pc, #252]	; (80138c8 <xQueueGenericSend+0x1f8>)
 80137ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137ce:	601a      	str	r2, [r3, #0]
 80137d0:	f3bf 8f4f 	dsb	sy
 80137d4:	f3bf 8f6f 	isb	sy
 80137d8:	e00a      	b.n	80137f0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80137da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137dc:	2b00      	cmp	r3, #0
 80137de:	d007      	beq.n	80137f0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80137e0:	4b39      	ldr	r3, [pc, #228]	; (80138c8 <xQueueGenericSend+0x1f8>)
 80137e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137e6:	601a      	str	r2, [r3, #0]
 80137e8:	f3bf 8f4f 	dsb	sy
 80137ec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80137f0:	f002 f9e0 	bl	8015bb4 <vPortExitCritical>
				return pdPASS;
 80137f4:	2301      	movs	r3, #1
 80137f6:	e063      	b.n	80138c0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2b00      	cmp	r3, #0
 80137fc:	d103      	bne.n	8013806 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80137fe:	f002 f9d9 	bl	8015bb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8013802:	2300      	movs	r3, #0
 8013804:	e05c      	b.n	80138c0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013808:	2b00      	cmp	r3, #0
 801380a:	d106      	bne.n	801381a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801380c:	f107 0314 	add.w	r3, r7, #20
 8013810:	4618      	mov	r0, r3
 8013812:	f001 fab3 	bl	8014d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013816:	2301      	movs	r3, #1
 8013818:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801381a:	f002 f9cb 	bl	8015bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801381e:	f000 ff87 	bl	8014730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013822:	f002 f997 	bl	8015b54 <vPortEnterCritical>
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801382c:	b25b      	sxtb	r3, r3
 801382e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013832:	d103      	bne.n	801383c <xQueueGenericSend+0x16c>
 8013834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013836:	2200      	movs	r2, #0
 8013838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801383e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013842:	b25b      	sxtb	r3, r3
 8013844:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013848:	d103      	bne.n	8013852 <xQueueGenericSend+0x182>
 801384a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801384c:	2200      	movs	r2, #0
 801384e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013852:	f002 f9af 	bl	8015bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013856:	1d3a      	adds	r2, r7, #4
 8013858:	f107 0314 	add.w	r3, r7, #20
 801385c:	4611      	mov	r1, r2
 801385e:	4618      	mov	r0, r3
 8013860:	f001 faa2 	bl	8014da8 <xTaskCheckForTimeOut>
 8013864:	4603      	mov	r3, r0
 8013866:	2b00      	cmp	r3, #0
 8013868:	d124      	bne.n	80138b4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801386a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801386c:	f000 fb22 	bl	8013eb4 <prvIsQueueFull>
 8013870:	4603      	mov	r3, r0
 8013872:	2b00      	cmp	r3, #0
 8013874:	d018      	beq.n	80138a8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013878:	3310      	adds	r3, #16
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	4611      	mov	r1, r2
 801387e:	4618      	mov	r0, r3
 8013880:	f001 f92a 	bl	8014ad8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013884:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013886:	f000 faad 	bl	8013de4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801388a:	f000 ff5f 	bl	801474c <xTaskResumeAll>
 801388e:	4603      	mov	r3, r0
 8013890:	2b00      	cmp	r3, #0
 8013892:	f47f af7c 	bne.w	801378e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013896:	4b0c      	ldr	r3, [pc, #48]	; (80138c8 <xQueueGenericSend+0x1f8>)
 8013898:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801389c:	601a      	str	r2, [r3, #0]
 801389e:	f3bf 8f4f 	dsb	sy
 80138a2:	f3bf 8f6f 	isb	sy
 80138a6:	e772      	b.n	801378e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80138a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138aa:	f000 fa9b 	bl	8013de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80138ae:	f000 ff4d 	bl	801474c <xTaskResumeAll>
 80138b2:	e76c      	b.n	801378e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80138b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80138b6:	f000 fa95 	bl	8013de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80138ba:	f000 ff47 	bl	801474c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80138be:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80138c0:	4618      	mov	r0, r3
 80138c2:	3738      	adds	r7, #56	; 0x38
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	e000ed04 	.word	0xe000ed04

080138cc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80138cc:	b580      	push	{r7, lr}
 80138ce:	b090      	sub	sp, #64	; 0x40
 80138d0:	af00      	add	r7, sp, #0
 80138d2:	60f8      	str	r0, [r7, #12]
 80138d4:	60b9      	str	r1, [r7, #8]
 80138d6:	607a      	str	r2, [r7, #4]
 80138d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80138da:	68fb      	ldr	r3, [r7, #12]
 80138dc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80138de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e0:	2b00      	cmp	r3, #0
 80138e2:	d10a      	bne.n	80138fa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80138e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e8:	f383 8811 	msr	BASEPRI, r3
 80138ec:	f3bf 8f6f 	isb	sy
 80138f0:	f3bf 8f4f 	dsb	sy
 80138f4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80138f6:	bf00      	nop
 80138f8:	e7fe      	b.n	80138f8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138fa:	68bb      	ldr	r3, [r7, #8]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d103      	bne.n	8013908 <xQueueGenericSendFromISR+0x3c>
 8013900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013904:	2b00      	cmp	r3, #0
 8013906:	d101      	bne.n	801390c <xQueueGenericSendFromISR+0x40>
 8013908:	2301      	movs	r3, #1
 801390a:	e000      	b.n	801390e <xQueueGenericSendFromISR+0x42>
 801390c:	2300      	movs	r3, #0
 801390e:	2b00      	cmp	r3, #0
 8013910:	d10a      	bne.n	8013928 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8013912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013924:	bf00      	nop
 8013926:	e7fe      	b.n	8013926 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8013928:	683b      	ldr	r3, [r7, #0]
 801392a:	2b02      	cmp	r3, #2
 801392c:	d103      	bne.n	8013936 <xQueueGenericSendFromISR+0x6a>
 801392e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013932:	2b01      	cmp	r3, #1
 8013934:	d101      	bne.n	801393a <xQueueGenericSendFromISR+0x6e>
 8013936:	2301      	movs	r3, #1
 8013938:	e000      	b.n	801393c <xQueueGenericSendFromISR+0x70>
 801393a:	2300      	movs	r3, #0
 801393c:	2b00      	cmp	r3, #0
 801393e:	d10a      	bne.n	8013956 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8013940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013944:	f383 8811 	msr	BASEPRI, r3
 8013948:	f3bf 8f6f 	isb	sy
 801394c:	f3bf 8f4f 	dsb	sy
 8013950:	623b      	str	r3, [r7, #32]
}
 8013952:	bf00      	nop
 8013954:	e7fe      	b.n	8013954 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013956:	f002 f9df 	bl	8015d18 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801395a:	f3ef 8211 	mrs	r2, BASEPRI
 801395e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013962:	f383 8811 	msr	BASEPRI, r3
 8013966:	f3bf 8f6f 	isb	sy
 801396a:	f3bf 8f4f 	dsb	sy
 801396e:	61fa      	str	r2, [r7, #28]
 8013970:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013972:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013974:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013978:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801397a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801397c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801397e:	429a      	cmp	r2, r3
 8013980:	d302      	bcc.n	8013988 <xQueueGenericSendFromISR+0xbc>
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	2b02      	cmp	r3, #2
 8013986:	d12f      	bne.n	80139e8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801398e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013996:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013998:	683a      	ldr	r2, [r7, #0]
 801399a:	68b9      	ldr	r1, [r7, #8]
 801399c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801399e:	f000 f991 	bl	8013cc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80139a2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80139a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80139aa:	d112      	bne.n	80139d2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80139ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d016      	beq.n	80139e2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80139b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139b6:	3324      	adds	r3, #36	; 0x24
 80139b8:	4618      	mov	r0, r3
 80139ba:	f001 f919 	bl	8014bf0 <xTaskRemoveFromEventList>
 80139be:	4603      	mov	r3, r0
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d00e      	beq.n	80139e2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d00b      	beq.n	80139e2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2201      	movs	r2, #1
 80139ce:	601a      	str	r2, [r3, #0]
 80139d0:	e007      	b.n	80139e2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80139d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80139d6:	3301      	adds	r3, #1
 80139d8:	b2db      	uxtb	r3, r3
 80139da:	b25a      	sxtb	r2, r3
 80139dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80139de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80139e2:	2301      	movs	r3, #1
 80139e4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80139e6:	e001      	b.n	80139ec <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80139e8:	2300      	movs	r3, #0
 80139ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80139ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ee:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80139f0:	697b      	ldr	r3, [r7, #20]
 80139f2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80139f6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80139fa:	4618      	mov	r0, r3
 80139fc:	3740      	adds	r7, #64	; 0x40
 80139fe:	46bd      	mov	sp, r7
 8013a00:	bd80      	pop	{r7, pc}
	...

08013a04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b08c      	sub	sp, #48	; 0x30
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	60f8      	str	r0, [r7, #12]
 8013a0c:	60b9      	str	r1, [r7, #8]
 8013a0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8013a10:	2300      	movs	r3, #0
 8013a12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8013a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d10a      	bne.n	8013a34 <xQueueReceive+0x30>
	__asm volatile
 8013a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a22:	f383 8811 	msr	BASEPRI, r3
 8013a26:	f3bf 8f6f 	isb	sy
 8013a2a:	f3bf 8f4f 	dsb	sy
 8013a2e:	623b      	str	r3, [r7, #32]
}
 8013a30:	bf00      	nop
 8013a32:	e7fe      	b.n	8013a32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	2b00      	cmp	r3, #0
 8013a38:	d103      	bne.n	8013a42 <xQueueReceive+0x3e>
 8013a3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d101      	bne.n	8013a46 <xQueueReceive+0x42>
 8013a42:	2301      	movs	r3, #1
 8013a44:	e000      	b.n	8013a48 <xQueueReceive+0x44>
 8013a46:	2300      	movs	r3, #0
 8013a48:	2b00      	cmp	r3, #0
 8013a4a:	d10a      	bne.n	8013a62 <xQueueReceive+0x5e>
	__asm volatile
 8013a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a50:	f383 8811 	msr	BASEPRI, r3
 8013a54:	f3bf 8f6f 	isb	sy
 8013a58:	f3bf 8f4f 	dsb	sy
 8013a5c:	61fb      	str	r3, [r7, #28]
}
 8013a5e:	bf00      	nop
 8013a60:	e7fe      	b.n	8013a60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013a62:	f001 fae5 	bl	8015030 <xTaskGetSchedulerState>
 8013a66:	4603      	mov	r3, r0
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	d102      	bne.n	8013a72 <xQueueReceive+0x6e>
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	2b00      	cmp	r3, #0
 8013a70:	d101      	bne.n	8013a76 <xQueueReceive+0x72>
 8013a72:	2301      	movs	r3, #1
 8013a74:	e000      	b.n	8013a78 <xQueueReceive+0x74>
 8013a76:	2300      	movs	r3, #0
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d10a      	bne.n	8013a92 <xQueueReceive+0x8e>
	__asm volatile
 8013a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a80:	f383 8811 	msr	BASEPRI, r3
 8013a84:	f3bf 8f6f 	isb	sy
 8013a88:	f3bf 8f4f 	dsb	sy
 8013a8c:	61bb      	str	r3, [r7, #24]
}
 8013a8e:	bf00      	nop
 8013a90:	e7fe      	b.n	8013a90 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a92:	f002 f85f 	bl	8015b54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d01f      	beq.n	8013ae2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013aa2:	68b9      	ldr	r1, [r7, #8]
 8013aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013aa6:	f000 f977 	bl	8013d98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aac:	1e5a      	subs	r2, r3, #1
 8013aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013ab2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ab4:	691b      	ldr	r3, [r3, #16]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	d00f      	beq.n	8013ada <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abc:	3310      	adds	r3, #16
 8013abe:	4618      	mov	r0, r3
 8013ac0:	f001 f896 	bl	8014bf0 <xTaskRemoveFromEventList>
 8013ac4:	4603      	mov	r3, r0
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	d007      	beq.n	8013ada <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013aca:	4b3d      	ldr	r3, [pc, #244]	; (8013bc0 <xQueueReceive+0x1bc>)
 8013acc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013ad0:	601a      	str	r2, [r3, #0]
 8013ad2:	f3bf 8f4f 	dsb	sy
 8013ad6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013ada:	f002 f86b 	bl	8015bb4 <vPortExitCritical>
				return pdPASS;
 8013ade:	2301      	movs	r3, #1
 8013ae0:	e069      	b.n	8013bb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d103      	bne.n	8013af0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013ae8:	f002 f864 	bl	8015bb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013aec:	2300      	movs	r3, #0
 8013aee:	e062      	b.n	8013bb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013af2:	2b00      	cmp	r3, #0
 8013af4:	d106      	bne.n	8013b04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013af6:	f107 0310 	add.w	r3, r7, #16
 8013afa:	4618      	mov	r0, r3
 8013afc:	f001 f93e 	bl	8014d7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013b00:	2301      	movs	r3, #1
 8013b02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013b04:	f002 f856 	bl	8015bb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013b08:	f000 fe12 	bl	8014730 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013b0c:	f002 f822 	bl	8015b54 <vPortEnterCritical>
 8013b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013b16:	b25b      	sxtb	r3, r3
 8013b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b1c:	d103      	bne.n	8013b26 <xQueueReceive+0x122>
 8013b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b20:	2200      	movs	r2, #0
 8013b22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013b2c:	b25b      	sxtb	r3, r3
 8013b2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b32:	d103      	bne.n	8013b3c <xQueueReceive+0x138>
 8013b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b36:	2200      	movs	r2, #0
 8013b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013b3c:	f002 f83a 	bl	8015bb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013b40:	1d3a      	adds	r2, r7, #4
 8013b42:	f107 0310 	add.w	r3, r7, #16
 8013b46:	4611      	mov	r1, r2
 8013b48:	4618      	mov	r0, r3
 8013b4a:	f001 f92d 	bl	8014da8 <xTaskCheckForTimeOut>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d123      	bne.n	8013b9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b56:	f000 f997 	bl	8013e88 <prvIsQueueEmpty>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	2b00      	cmp	r3, #0
 8013b5e:	d017      	beq.n	8013b90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b62:	3324      	adds	r3, #36	; 0x24
 8013b64:	687a      	ldr	r2, [r7, #4]
 8013b66:	4611      	mov	r1, r2
 8013b68:	4618      	mov	r0, r3
 8013b6a:	f000 ffb5 	bl	8014ad8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b70:	f000 f938 	bl	8013de4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013b74:	f000 fdea 	bl	801474c <xTaskResumeAll>
 8013b78:	4603      	mov	r3, r0
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d189      	bne.n	8013a92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013b7e:	4b10      	ldr	r3, [pc, #64]	; (8013bc0 <xQueueReceive+0x1bc>)
 8013b80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b84:	601a      	str	r2, [r3, #0]
 8013b86:	f3bf 8f4f 	dsb	sy
 8013b8a:	f3bf 8f6f 	isb	sy
 8013b8e:	e780      	b.n	8013a92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013b90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b92:	f000 f927 	bl	8013de4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b96:	f000 fdd9 	bl	801474c <xTaskResumeAll>
 8013b9a:	e77a      	b.n	8013a92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b9e:	f000 f921 	bl	8013de4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013ba2:	f000 fdd3 	bl	801474c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013ba6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013ba8:	f000 f96e 	bl	8013e88 <prvIsQueueEmpty>
 8013bac:	4603      	mov	r3, r0
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	f43f af6f 	beq.w	8013a92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013bb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013bb6:	4618      	mov	r0, r3
 8013bb8:	3730      	adds	r7, #48	; 0x30
 8013bba:	46bd      	mov	sp, r7
 8013bbc:	bd80      	pop	{r7, pc}
 8013bbe:	bf00      	nop
 8013bc0:	e000ed04 	.word	0xe000ed04

08013bc4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013bc4:	b580      	push	{r7, lr}
 8013bc6:	b08e      	sub	sp, #56	; 0x38
 8013bc8:	af00      	add	r7, sp, #0
 8013bca:	60f8      	str	r0, [r7, #12]
 8013bcc:	60b9      	str	r1, [r7, #8]
 8013bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d10a      	bne.n	8013bf0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bde:	f383 8811 	msr	BASEPRI, r3
 8013be2:	f3bf 8f6f 	isb	sy
 8013be6:	f3bf 8f4f 	dsb	sy
 8013bea:	623b      	str	r3, [r7, #32]
}
 8013bec:	bf00      	nop
 8013bee:	e7fe      	b.n	8013bee <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013bf0:	68bb      	ldr	r3, [r7, #8]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d103      	bne.n	8013bfe <xQueueReceiveFromISR+0x3a>
 8013bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d101      	bne.n	8013c02 <xQueueReceiveFromISR+0x3e>
 8013bfe:	2301      	movs	r3, #1
 8013c00:	e000      	b.n	8013c04 <xQueueReceiveFromISR+0x40>
 8013c02:	2300      	movs	r3, #0
 8013c04:	2b00      	cmp	r3, #0
 8013c06:	d10a      	bne.n	8013c1e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c0c:	f383 8811 	msr	BASEPRI, r3
 8013c10:	f3bf 8f6f 	isb	sy
 8013c14:	f3bf 8f4f 	dsb	sy
 8013c18:	61fb      	str	r3, [r7, #28]
}
 8013c1a:	bf00      	nop
 8013c1c:	e7fe      	b.n	8013c1c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013c1e:	f002 f87b 	bl	8015d18 <vPortValidateInterruptPriority>
	__asm volatile
 8013c22:	f3ef 8211 	mrs	r2, BASEPRI
 8013c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013c2a:	f383 8811 	msr	BASEPRI, r3
 8013c2e:	f3bf 8f6f 	isb	sy
 8013c32:	f3bf 8f4f 	dsb	sy
 8013c36:	61ba      	str	r2, [r7, #24]
 8013c38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013c3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	d02f      	beq.n	8013caa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c54:	68b9      	ldr	r1, [r7, #8]
 8013c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c58:	f000 f89e 	bl	8013d98 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c5e:	1e5a      	subs	r2, r3, #1
 8013c60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013c64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c6c:	d112      	bne.n	8013c94 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c70:	691b      	ldr	r3, [r3, #16]
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d016      	beq.n	8013ca4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c78:	3310      	adds	r3, #16
 8013c7a:	4618      	mov	r0, r3
 8013c7c:	f000 ffb8 	bl	8014bf0 <xTaskRemoveFromEventList>
 8013c80:	4603      	mov	r3, r0
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d00e      	beq.n	8013ca4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013c86:	687b      	ldr	r3, [r7, #4]
 8013c88:	2b00      	cmp	r3, #0
 8013c8a:	d00b      	beq.n	8013ca4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	2201      	movs	r2, #1
 8013c90:	601a      	str	r2, [r3, #0]
 8013c92:	e007      	b.n	8013ca4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013c94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c98:	3301      	adds	r3, #1
 8013c9a:	b2db      	uxtb	r3, r3
 8013c9c:	b25a      	sxtb	r2, r3
 8013c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ca0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013ca4:	2301      	movs	r3, #1
 8013ca6:	637b      	str	r3, [r7, #52]	; 0x34
 8013ca8:	e001      	b.n	8013cae <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013caa:	2300      	movs	r3, #0
 8013cac:	637b      	str	r3, [r7, #52]	; 0x34
 8013cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013cb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013cb2:	693b      	ldr	r3, [r7, #16]
 8013cb4:	f383 8811 	msr	BASEPRI, r3
}
 8013cb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	3738      	adds	r7, #56	; 0x38
 8013cc0:	46bd      	mov	sp, r7
 8013cc2:	bd80      	pop	{r7, pc}

08013cc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013cd0:	2300      	movs	r3, #0
 8013cd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013cd4:	68fb      	ldr	r3, [r7, #12]
 8013cd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013cd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d10d      	bne.n	8013cfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d14d      	bne.n	8013d86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	689b      	ldr	r3, [r3, #8]
 8013cee:	4618      	mov	r0, r3
 8013cf0:	f001 f9bc 	bl	801506c <xTaskPriorityDisinherit>
 8013cf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013cf6:	68fb      	ldr	r3, [r7, #12]
 8013cf8:	2200      	movs	r2, #0
 8013cfa:	609a      	str	r2, [r3, #8]
 8013cfc:	e043      	b.n	8013d86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013cfe:	687b      	ldr	r3, [r7, #4]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d119      	bne.n	8013d38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	6858      	ldr	r0, [r3, #4]
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d0c:	461a      	mov	r2, r3
 8013d0e:	68b9      	ldr	r1, [r7, #8]
 8013d10:	f002 fa66 	bl	80161e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	685a      	ldr	r2, [r3, #4]
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d1c:	441a      	add	r2, r3
 8013d1e:	68fb      	ldr	r3, [r7, #12]
 8013d20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	685a      	ldr	r2, [r3, #4]
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	689b      	ldr	r3, [r3, #8]
 8013d2a:	429a      	cmp	r2, r3
 8013d2c:	d32b      	bcc.n	8013d86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013d2e:	68fb      	ldr	r3, [r7, #12]
 8013d30:	681a      	ldr	r2, [r3, #0]
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	605a      	str	r2, [r3, #4]
 8013d36:	e026      	b.n	8013d86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	68d8      	ldr	r0, [r3, #12]
 8013d3c:	68fb      	ldr	r3, [r7, #12]
 8013d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d40:	461a      	mov	r2, r3
 8013d42:	68b9      	ldr	r1, [r7, #8]
 8013d44:	f002 fa4c 	bl	80161e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	68da      	ldr	r2, [r3, #12]
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d50:	425b      	negs	r3, r3
 8013d52:	441a      	add	r2, r3
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	68da      	ldr	r2, [r3, #12]
 8013d5c:	68fb      	ldr	r3, [r7, #12]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	429a      	cmp	r2, r3
 8013d62:	d207      	bcs.n	8013d74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	689a      	ldr	r2, [r3, #8]
 8013d68:	68fb      	ldr	r3, [r7, #12]
 8013d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d6c:	425b      	negs	r3, r3
 8013d6e:	441a      	add	r2, r3
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	2b02      	cmp	r3, #2
 8013d78:	d105      	bne.n	8013d86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d7a:	693b      	ldr	r3, [r7, #16]
 8013d7c:	2b00      	cmp	r3, #0
 8013d7e:	d002      	beq.n	8013d86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013d80:	693b      	ldr	r3, [r7, #16]
 8013d82:	3b01      	subs	r3, #1
 8013d84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013d86:	693b      	ldr	r3, [r7, #16]
 8013d88:	1c5a      	adds	r2, r3, #1
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013d8e:	697b      	ldr	r3, [r7, #20]
}
 8013d90:	4618      	mov	r0, r3
 8013d92:	3718      	adds	r7, #24
 8013d94:	46bd      	mov	sp, r7
 8013d96:	bd80      	pop	{r7, pc}

08013d98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013d98:	b580      	push	{r7, lr}
 8013d9a:	b082      	sub	sp, #8
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013da2:	687b      	ldr	r3, [r7, #4]
 8013da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013da6:	2b00      	cmp	r3, #0
 8013da8:	d018      	beq.n	8013ddc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	68da      	ldr	r2, [r3, #12]
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013db2:	441a      	add	r2, r3
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	68da      	ldr	r2, [r3, #12]
 8013dbc:	687b      	ldr	r3, [r7, #4]
 8013dbe:	689b      	ldr	r3, [r3, #8]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d303      	bcc.n	8013dcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	681a      	ldr	r2, [r3, #0]
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013dcc:	687b      	ldr	r3, [r7, #4]
 8013dce:	68d9      	ldr	r1, [r3, #12]
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013dd4:	461a      	mov	r2, r3
 8013dd6:	6838      	ldr	r0, [r7, #0]
 8013dd8:	f002 fa02 	bl	80161e0 <memcpy>
	}
}
 8013ddc:	bf00      	nop
 8013dde:	3708      	adds	r7, #8
 8013de0:	46bd      	mov	sp, r7
 8013de2:	bd80      	pop	{r7, pc}

08013de4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b084      	sub	sp, #16
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013dec:	f001 feb2 	bl	8015b54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013df0:	687b      	ldr	r3, [r7, #4]
 8013df2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013df6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013df8:	e011      	b.n	8013e1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d012      	beq.n	8013e28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	3324      	adds	r3, #36	; 0x24
 8013e06:	4618      	mov	r0, r3
 8013e08:	f000 fef2 	bl	8014bf0 <xTaskRemoveFromEventList>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d001      	beq.n	8013e16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013e12:	f001 f82b 	bl	8014e6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013e16:	7bfb      	ldrb	r3, [r7, #15]
 8013e18:	3b01      	subs	r3, #1
 8013e1a:	b2db      	uxtb	r3, r3
 8013e1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013e1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	dce9      	bgt.n	8013dfa <prvUnlockQueue+0x16>
 8013e26:	e000      	b.n	8013e2a <prvUnlockQueue+0x46>
					break;
 8013e28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013e2a:	687b      	ldr	r3, [r7, #4]
 8013e2c:	22ff      	movs	r2, #255	; 0xff
 8013e2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013e32:	f001 febf 	bl	8015bb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013e36:	f001 fe8d 	bl	8015b54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013e3a:	687b      	ldr	r3, [r7, #4]
 8013e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013e40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e42:	e011      	b.n	8013e68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	691b      	ldr	r3, [r3, #16]
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d012      	beq.n	8013e72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	3310      	adds	r3, #16
 8013e50:	4618      	mov	r0, r3
 8013e52:	f000 fecd 	bl	8014bf0 <xTaskRemoveFromEventList>
 8013e56:	4603      	mov	r3, r0
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d001      	beq.n	8013e60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013e5c:	f001 f806 	bl	8014e6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013e60:	7bbb      	ldrb	r3, [r7, #14]
 8013e62:	3b01      	subs	r3, #1
 8013e64:	b2db      	uxtb	r3, r3
 8013e66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	dce9      	bgt.n	8013e44 <prvUnlockQueue+0x60>
 8013e70:	e000      	b.n	8013e74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013e72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	22ff      	movs	r2, #255	; 0xff
 8013e78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013e7c:	f001 fe9a 	bl	8015bb4 <vPortExitCritical>
}
 8013e80:	bf00      	nop
 8013e82:	3710      	adds	r7, #16
 8013e84:	46bd      	mov	sp, r7
 8013e86:	bd80      	pop	{r7, pc}

08013e88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013e88:	b580      	push	{r7, lr}
 8013e8a:	b084      	sub	sp, #16
 8013e8c:	af00      	add	r7, sp, #0
 8013e8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e90:	f001 fe60 	bl	8015b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013e94:	687b      	ldr	r3, [r7, #4]
 8013e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d102      	bne.n	8013ea2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013e9c:	2301      	movs	r3, #1
 8013e9e:	60fb      	str	r3, [r7, #12]
 8013ea0:	e001      	b.n	8013ea6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ea6:	f001 fe85 	bl	8015bb4 <vPortExitCritical>

	return xReturn;
 8013eaa:	68fb      	ldr	r3, [r7, #12]
}
 8013eac:	4618      	mov	r0, r3
 8013eae:	3710      	adds	r7, #16
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	bd80      	pop	{r7, pc}

08013eb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013eb4:	b580      	push	{r7, lr}
 8013eb6:	b084      	sub	sp, #16
 8013eb8:	af00      	add	r7, sp, #0
 8013eba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013ebc:	f001 fe4a 	bl	8015b54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013ec0:	687b      	ldr	r3, [r7, #4]
 8013ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013ec4:	687b      	ldr	r3, [r7, #4]
 8013ec6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013ec8:	429a      	cmp	r2, r3
 8013eca:	d102      	bne.n	8013ed2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013ecc:	2301      	movs	r3, #1
 8013ece:	60fb      	str	r3, [r7, #12]
 8013ed0:	e001      	b.n	8013ed6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013ed2:	2300      	movs	r3, #0
 8013ed4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013ed6:	f001 fe6d 	bl	8015bb4 <vPortExitCritical>

	return xReturn;
 8013eda:	68fb      	ldr	r3, [r7, #12]
}
 8013edc:	4618      	mov	r0, r3
 8013ede:	3710      	adds	r7, #16
 8013ee0:	46bd      	mov	sp, r7
 8013ee2:	bd80      	pop	{r7, pc}

08013ee4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013ee4:	b480      	push	{r7}
 8013ee6:	b085      	sub	sp, #20
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
 8013eec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013eee:	2300      	movs	r3, #0
 8013ef0:	60fb      	str	r3, [r7, #12]
 8013ef2:	e014      	b.n	8013f1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013ef4:	4a0f      	ldr	r2, [pc, #60]	; (8013f34 <vQueueAddToRegistry+0x50>)
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013efc:	2b00      	cmp	r3, #0
 8013efe:	d10b      	bne.n	8013f18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013f00:	490c      	ldr	r1, [pc, #48]	; (8013f34 <vQueueAddToRegistry+0x50>)
 8013f02:	68fb      	ldr	r3, [r7, #12]
 8013f04:	683a      	ldr	r2, [r7, #0]
 8013f06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013f0a:	4a0a      	ldr	r2, [pc, #40]	; (8013f34 <vQueueAddToRegistry+0x50>)
 8013f0c:	68fb      	ldr	r3, [r7, #12]
 8013f0e:	00db      	lsls	r3, r3, #3
 8013f10:	4413      	add	r3, r2
 8013f12:	687a      	ldr	r2, [r7, #4]
 8013f14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013f16:	e006      	b.n	8013f26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	3301      	adds	r3, #1
 8013f1c:	60fb      	str	r3, [r7, #12]
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	2b07      	cmp	r3, #7
 8013f22:	d9e7      	bls.n	8013ef4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013f24:	bf00      	nop
 8013f26:	bf00      	nop
 8013f28:	3714      	adds	r7, #20
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	240017c8 	.word	0x240017c8

08013f38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b086      	sub	sp, #24
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	60f8      	str	r0, [r7, #12]
 8013f40:	60b9      	str	r1, [r7, #8]
 8013f42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013f44:	68fb      	ldr	r3, [r7, #12]
 8013f46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013f48:	f001 fe04 	bl	8015b54 <vPortEnterCritical>
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f52:	b25b      	sxtb	r3, r3
 8013f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f58:	d103      	bne.n	8013f62 <vQueueWaitForMessageRestricted+0x2a>
 8013f5a:	697b      	ldr	r3, [r7, #20]
 8013f5c:	2200      	movs	r2, #0
 8013f5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f62:	697b      	ldr	r3, [r7, #20]
 8013f64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f68:	b25b      	sxtb	r3, r3
 8013f6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f6e:	d103      	bne.n	8013f78 <vQueueWaitForMessageRestricted+0x40>
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	2200      	movs	r2, #0
 8013f74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f78:	f001 fe1c 	bl	8015bb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d106      	bne.n	8013f92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	3324      	adds	r3, #36	; 0x24
 8013f88:	687a      	ldr	r2, [r7, #4]
 8013f8a:	68b9      	ldr	r1, [r7, #8]
 8013f8c:	4618      	mov	r0, r3
 8013f8e:	f000 fe03 	bl	8014b98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013f92:	6978      	ldr	r0, [r7, #20]
 8013f94:	f7ff ff26 	bl	8013de4 <prvUnlockQueue>
	}
 8013f98:	bf00      	nop
 8013f9a:	3718      	adds	r7, #24
 8013f9c:	46bd      	mov	sp, r7
 8013f9e:	bd80      	pop	{r7, pc}

08013fa0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013fa0:	b580      	push	{r7, lr}
 8013fa2:	b08e      	sub	sp, #56	; 0x38
 8013fa4:	af04      	add	r7, sp, #16
 8013fa6:	60f8      	str	r0, [r7, #12]
 8013fa8:	60b9      	str	r1, [r7, #8]
 8013faa:	607a      	str	r2, [r7, #4]
 8013fac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013fae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d10a      	bne.n	8013fca <xTaskCreateStatic+0x2a>
	__asm volatile
 8013fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fb8:	f383 8811 	msr	BASEPRI, r3
 8013fbc:	f3bf 8f6f 	isb	sy
 8013fc0:	f3bf 8f4f 	dsb	sy
 8013fc4:	623b      	str	r3, [r7, #32]
}
 8013fc6:	bf00      	nop
 8013fc8:	e7fe      	b.n	8013fc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d10a      	bne.n	8013fe6 <xTaskCreateStatic+0x46>
	__asm volatile
 8013fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fd4:	f383 8811 	msr	BASEPRI, r3
 8013fd8:	f3bf 8f6f 	isb	sy
 8013fdc:	f3bf 8f4f 	dsb	sy
 8013fe0:	61fb      	str	r3, [r7, #28]
}
 8013fe2:	bf00      	nop
 8013fe4:	e7fe      	b.n	8013fe4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013fe6:	235c      	movs	r3, #92	; 0x5c
 8013fe8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013fea:	693b      	ldr	r3, [r7, #16]
 8013fec:	2b5c      	cmp	r3, #92	; 0x5c
 8013fee:	d00a      	beq.n	8014006 <xTaskCreateStatic+0x66>
	__asm volatile
 8013ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ff4:	f383 8811 	msr	BASEPRI, r3
 8013ff8:	f3bf 8f6f 	isb	sy
 8013ffc:	f3bf 8f4f 	dsb	sy
 8014000:	61bb      	str	r3, [r7, #24]
}
 8014002:	bf00      	nop
 8014004:	e7fe      	b.n	8014004 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8014006:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8014008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801400a:	2b00      	cmp	r3, #0
 801400c:	d01e      	beq.n	801404c <xTaskCreateStatic+0xac>
 801400e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014010:	2b00      	cmp	r3, #0
 8014012:	d01b      	beq.n	801404c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8014014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014016:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8014018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801401a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801401c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 801401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014020:	2202      	movs	r2, #2
 8014022:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8014026:	2300      	movs	r3, #0
 8014028:	9303      	str	r3, [sp, #12]
 801402a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801402c:	9302      	str	r3, [sp, #8]
 801402e:	f107 0314 	add.w	r3, r7, #20
 8014032:	9301      	str	r3, [sp, #4]
 8014034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014036:	9300      	str	r3, [sp, #0]
 8014038:	683b      	ldr	r3, [r7, #0]
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	68b9      	ldr	r1, [r7, #8]
 801403e:	68f8      	ldr	r0, [r7, #12]
 8014040:	f000 f850 	bl	80140e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014044:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014046:	f000 f8dd 	bl	8014204 <prvAddNewTaskToReadyList>
 801404a:	e001      	b.n	8014050 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 801404c:	2300      	movs	r3, #0
 801404e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014050:	697b      	ldr	r3, [r7, #20]
	}
 8014052:	4618      	mov	r0, r3
 8014054:	3728      	adds	r7, #40	; 0x28
 8014056:	46bd      	mov	sp, r7
 8014058:	bd80      	pop	{r7, pc}

0801405a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801405a:	b580      	push	{r7, lr}
 801405c:	b08c      	sub	sp, #48	; 0x30
 801405e:	af04      	add	r7, sp, #16
 8014060:	60f8      	str	r0, [r7, #12]
 8014062:	60b9      	str	r1, [r7, #8]
 8014064:	603b      	str	r3, [r7, #0]
 8014066:	4613      	mov	r3, r2
 8014068:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801406a:	88fb      	ldrh	r3, [r7, #6]
 801406c:	009b      	lsls	r3, r3, #2
 801406e:	4618      	mov	r0, r3
 8014070:	f001 fe92 	bl	8015d98 <pvPortMalloc>
 8014074:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	2b00      	cmp	r3, #0
 801407a:	d00e      	beq.n	801409a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801407c:	205c      	movs	r0, #92	; 0x5c
 801407e:	f001 fe8b 	bl	8015d98 <pvPortMalloc>
 8014082:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014084:	69fb      	ldr	r3, [r7, #28]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d003      	beq.n	8014092 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801408a:	69fb      	ldr	r3, [r7, #28]
 801408c:	697a      	ldr	r2, [r7, #20]
 801408e:	631a      	str	r2, [r3, #48]	; 0x30
 8014090:	e005      	b.n	801409e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014092:	6978      	ldr	r0, [r7, #20]
 8014094:	f001 ff4c 	bl	8015f30 <vPortFree>
 8014098:	e001      	b.n	801409e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801409a:	2300      	movs	r3, #0
 801409c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801409e:	69fb      	ldr	r3, [r7, #28]
 80140a0:	2b00      	cmp	r3, #0
 80140a2:	d017      	beq.n	80140d4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80140a4:	69fb      	ldr	r3, [r7, #28]
 80140a6:	2200      	movs	r2, #0
 80140a8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80140ac:	88fa      	ldrh	r2, [r7, #6]
 80140ae:	2300      	movs	r3, #0
 80140b0:	9303      	str	r3, [sp, #12]
 80140b2:	69fb      	ldr	r3, [r7, #28]
 80140b4:	9302      	str	r3, [sp, #8]
 80140b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80140b8:	9301      	str	r3, [sp, #4]
 80140ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80140bc:	9300      	str	r3, [sp, #0]
 80140be:	683b      	ldr	r3, [r7, #0]
 80140c0:	68b9      	ldr	r1, [r7, #8]
 80140c2:	68f8      	ldr	r0, [r7, #12]
 80140c4:	f000 f80e 	bl	80140e4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80140c8:	69f8      	ldr	r0, [r7, #28]
 80140ca:	f000 f89b 	bl	8014204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80140ce:	2301      	movs	r3, #1
 80140d0:	61bb      	str	r3, [r7, #24]
 80140d2:	e002      	b.n	80140da <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80140d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80140d8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80140da:	69bb      	ldr	r3, [r7, #24]
	}
 80140dc:	4618      	mov	r0, r3
 80140de:	3720      	adds	r7, #32
 80140e0:	46bd      	mov	sp, r7
 80140e2:	bd80      	pop	{r7, pc}

080140e4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b088      	sub	sp, #32
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	607a      	str	r2, [r7, #4]
 80140f0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80140f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140f4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80140f6:	687b      	ldr	r3, [r7, #4]
 80140f8:	009b      	lsls	r3, r3, #2
 80140fa:	461a      	mov	r2, r3
 80140fc:	21a5      	movs	r1, #165	; 0xa5
 80140fe:	f002 f87d 	bl	80161fc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8014102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014104:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8014106:	6879      	ldr	r1, [r7, #4]
 8014108:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801410c:	440b      	add	r3, r1
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	4413      	add	r3, r2
 8014112:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	f023 0307 	bic.w	r3, r3, #7
 801411a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801411c:	69bb      	ldr	r3, [r7, #24]
 801411e:	f003 0307 	and.w	r3, r3, #7
 8014122:	2b00      	cmp	r3, #0
 8014124:	d00a      	beq.n	801413c <prvInitialiseNewTask+0x58>
	__asm volatile
 8014126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801412a:	f383 8811 	msr	BASEPRI, r3
 801412e:	f3bf 8f6f 	isb	sy
 8014132:	f3bf 8f4f 	dsb	sy
 8014136:	617b      	str	r3, [r7, #20]
}
 8014138:	bf00      	nop
 801413a:	e7fe      	b.n	801413a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d01f      	beq.n	8014182 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014142:	2300      	movs	r3, #0
 8014144:	61fb      	str	r3, [r7, #28]
 8014146:	e012      	b.n	801416e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8014148:	68ba      	ldr	r2, [r7, #8]
 801414a:	69fb      	ldr	r3, [r7, #28]
 801414c:	4413      	add	r3, r2
 801414e:	7819      	ldrb	r1, [r3, #0]
 8014150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014152:	69fb      	ldr	r3, [r7, #28]
 8014154:	4413      	add	r3, r2
 8014156:	3334      	adds	r3, #52	; 0x34
 8014158:	460a      	mov	r2, r1
 801415a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801415c:	68ba      	ldr	r2, [r7, #8]
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	4413      	add	r3, r2
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	2b00      	cmp	r3, #0
 8014166:	d006      	beq.n	8014176 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014168:	69fb      	ldr	r3, [r7, #28]
 801416a:	3301      	adds	r3, #1
 801416c:	61fb      	str	r3, [r7, #28]
 801416e:	69fb      	ldr	r3, [r7, #28]
 8014170:	2b0f      	cmp	r3, #15
 8014172:	d9e9      	bls.n	8014148 <prvInitialiseNewTask+0x64>
 8014174:	e000      	b.n	8014178 <prvInitialiseNewTask+0x94>
			{
				break;
 8014176:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417a:	2200      	movs	r2, #0
 801417c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014180:	e003      	b.n	801418a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014184:	2200      	movs	r2, #0
 8014186:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801418a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801418c:	2b37      	cmp	r3, #55	; 0x37
 801418e:	d901      	bls.n	8014194 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014190:	2337      	movs	r3, #55	; 0x37
 8014192:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014196:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014198:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801419c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801419e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80141a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a2:	2200      	movs	r2, #0
 80141a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80141a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141a8:	3304      	adds	r3, #4
 80141aa:	4618      	mov	r0, r3
 80141ac:	f7ff f8be 	bl	801332c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80141b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141b2:	3318      	adds	r3, #24
 80141b4:	4618      	mov	r0, r3
 80141b6:	f7ff f8b9 	bl	801332c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80141ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80141c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80141c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80141c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80141ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80141d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d2:	2200      	movs	r2, #0
 80141d4:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80141d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141d8:	2200      	movs	r2, #0
 80141da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80141de:	683a      	ldr	r2, [r7, #0]
 80141e0:	68f9      	ldr	r1, [r7, #12]
 80141e2:	69b8      	ldr	r0, [r7, #24]
 80141e4:	f001 fb8a 	bl	80158fc <pxPortInitialiseStack>
 80141e8:	4602      	mov	r2, r0
 80141ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80141ec:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80141ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	d002      	beq.n	80141fa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80141f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141f8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141fa:	bf00      	nop
 80141fc:	3720      	adds	r7, #32
 80141fe:	46bd      	mov	sp, r7
 8014200:	bd80      	pop	{r7, pc}
	...

08014204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8014204:	b580      	push	{r7, lr}
 8014206:	b082      	sub	sp, #8
 8014208:	af00      	add	r7, sp, #0
 801420a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801420c:	f001 fca2 	bl	8015b54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8014210:	4b2d      	ldr	r3, [pc, #180]	; (80142c8 <prvAddNewTaskToReadyList+0xc4>)
 8014212:	681b      	ldr	r3, [r3, #0]
 8014214:	3301      	adds	r3, #1
 8014216:	4a2c      	ldr	r2, [pc, #176]	; (80142c8 <prvAddNewTaskToReadyList+0xc4>)
 8014218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801421a:	4b2c      	ldr	r3, [pc, #176]	; (80142cc <prvAddNewTaskToReadyList+0xc8>)
 801421c:	681b      	ldr	r3, [r3, #0]
 801421e:	2b00      	cmp	r3, #0
 8014220:	d109      	bne.n	8014236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8014222:	4a2a      	ldr	r2, [pc, #168]	; (80142cc <prvAddNewTaskToReadyList+0xc8>)
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8014228:	4b27      	ldr	r3, [pc, #156]	; (80142c8 <prvAddNewTaskToReadyList+0xc4>)
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	2b01      	cmp	r3, #1
 801422e:	d110      	bne.n	8014252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8014230:	f000 fe40 	bl	8014eb4 <prvInitialiseTaskLists>
 8014234:	e00d      	b.n	8014252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8014236:	4b26      	ldr	r3, [pc, #152]	; (80142d0 <prvAddNewTaskToReadyList+0xcc>)
 8014238:	681b      	ldr	r3, [r3, #0]
 801423a:	2b00      	cmp	r3, #0
 801423c:	d109      	bne.n	8014252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801423e:	4b23      	ldr	r3, [pc, #140]	; (80142cc <prvAddNewTaskToReadyList+0xc8>)
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014248:	429a      	cmp	r2, r3
 801424a:	d802      	bhi.n	8014252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801424c:	4a1f      	ldr	r2, [pc, #124]	; (80142cc <prvAddNewTaskToReadyList+0xc8>)
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014252:	4b20      	ldr	r3, [pc, #128]	; (80142d4 <prvAddNewTaskToReadyList+0xd0>)
 8014254:	681b      	ldr	r3, [r3, #0]
 8014256:	3301      	adds	r3, #1
 8014258:	4a1e      	ldr	r2, [pc, #120]	; (80142d4 <prvAddNewTaskToReadyList+0xd0>)
 801425a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801425c:	4b1d      	ldr	r3, [pc, #116]	; (80142d4 <prvAddNewTaskToReadyList+0xd0>)
 801425e:	681a      	ldr	r2, [r3, #0]
 8014260:	687b      	ldr	r3, [r7, #4]
 8014262:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014264:	687b      	ldr	r3, [r7, #4]
 8014266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014268:	4b1b      	ldr	r3, [pc, #108]	; (80142d8 <prvAddNewTaskToReadyList+0xd4>)
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	429a      	cmp	r2, r3
 801426e:	d903      	bls.n	8014278 <prvAddNewTaskToReadyList+0x74>
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014274:	4a18      	ldr	r2, [pc, #96]	; (80142d8 <prvAddNewTaskToReadyList+0xd4>)
 8014276:	6013      	str	r3, [r2, #0]
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801427c:	4613      	mov	r3, r2
 801427e:	009b      	lsls	r3, r3, #2
 8014280:	4413      	add	r3, r2
 8014282:	009b      	lsls	r3, r3, #2
 8014284:	4a15      	ldr	r2, [pc, #84]	; (80142dc <prvAddNewTaskToReadyList+0xd8>)
 8014286:	441a      	add	r2, r3
 8014288:	687b      	ldr	r3, [r7, #4]
 801428a:	3304      	adds	r3, #4
 801428c:	4619      	mov	r1, r3
 801428e:	4610      	mov	r0, r2
 8014290:	f7ff f859 	bl	8013346 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014294:	f001 fc8e 	bl	8015bb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014298:	4b0d      	ldr	r3, [pc, #52]	; (80142d0 <prvAddNewTaskToReadyList+0xcc>)
 801429a:	681b      	ldr	r3, [r3, #0]
 801429c:	2b00      	cmp	r3, #0
 801429e:	d00e      	beq.n	80142be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80142a0:	4b0a      	ldr	r3, [pc, #40]	; (80142cc <prvAddNewTaskToReadyList+0xc8>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80142aa:	429a      	cmp	r2, r3
 80142ac:	d207      	bcs.n	80142be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80142ae:	4b0c      	ldr	r3, [pc, #48]	; (80142e0 <prvAddNewTaskToReadyList+0xdc>)
 80142b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142b4:	601a      	str	r2, [r3, #0]
 80142b6:	f3bf 8f4f 	dsb	sy
 80142ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80142be:	bf00      	nop
 80142c0:	3708      	adds	r7, #8
 80142c2:	46bd      	mov	sp, r7
 80142c4:	bd80      	pop	{r7, pc}
 80142c6:	bf00      	nop
 80142c8:	24001cdc 	.word	0x24001cdc
 80142cc:	24001808 	.word	0x24001808
 80142d0:	24001ce8 	.word	0x24001ce8
 80142d4:	24001cf8 	.word	0x24001cf8
 80142d8:	24001ce4 	.word	0x24001ce4
 80142dc:	2400180c 	.word	0x2400180c
 80142e0:	e000ed04 	.word	0xe000ed04

080142e4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b084      	sub	sp, #16
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80142ec:	f001 fc32 	bl	8015b54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d102      	bne.n	80142fc <vTaskDelete+0x18>
 80142f6:	4b2c      	ldr	r3, [pc, #176]	; (80143a8 <vTaskDelete+0xc4>)
 80142f8:	681b      	ldr	r3, [r3, #0]
 80142fa:	e000      	b.n	80142fe <vTaskDelete+0x1a>
 80142fc:	687b      	ldr	r3, [r7, #4]
 80142fe:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014300:	68fb      	ldr	r3, [r7, #12]
 8014302:	3304      	adds	r3, #4
 8014304:	4618      	mov	r0, r3
 8014306:	f7ff f87b 	bl	8013400 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801430a:	68fb      	ldr	r3, [r7, #12]
 801430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801430e:	2b00      	cmp	r3, #0
 8014310:	d004      	beq.n	801431c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	3318      	adds	r3, #24
 8014316:	4618      	mov	r0, r3
 8014318:	f7ff f872 	bl	8013400 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 801431c:	4b23      	ldr	r3, [pc, #140]	; (80143ac <vTaskDelete+0xc8>)
 801431e:	681b      	ldr	r3, [r3, #0]
 8014320:	3301      	adds	r3, #1
 8014322:	4a22      	ldr	r2, [pc, #136]	; (80143ac <vTaskDelete+0xc8>)
 8014324:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8014326:	4b20      	ldr	r3, [pc, #128]	; (80143a8 <vTaskDelete+0xc4>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	68fa      	ldr	r2, [r7, #12]
 801432c:	429a      	cmp	r2, r3
 801432e:	d10b      	bne.n	8014348 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8014330:	68fb      	ldr	r3, [r7, #12]
 8014332:	3304      	adds	r3, #4
 8014334:	4619      	mov	r1, r3
 8014336:	481e      	ldr	r0, [pc, #120]	; (80143b0 <vTaskDelete+0xcc>)
 8014338:	f7ff f805 	bl	8013346 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 801433c:	4b1d      	ldr	r3, [pc, #116]	; (80143b4 <vTaskDelete+0xd0>)
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	3301      	adds	r3, #1
 8014342:	4a1c      	ldr	r2, [pc, #112]	; (80143b4 <vTaskDelete+0xd0>)
 8014344:	6013      	str	r3, [r2, #0]
 8014346:	e009      	b.n	801435c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8014348:	4b1b      	ldr	r3, [pc, #108]	; (80143b8 <vTaskDelete+0xd4>)
 801434a:	681b      	ldr	r3, [r3, #0]
 801434c:	3b01      	subs	r3, #1
 801434e:	4a1a      	ldr	r2, [pc, #104]	; (80143b8 <vTaskDelete+0xd4>)
 8014350:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8014352:	68f8      	ldr	r0, [r7, #12]
 8014354:	f000 fe1c 	bl	8014f90 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8014358:	f000 fe4a 	bl	8014ff0 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 801435c:	f001 fc2a 	bl	8015bb4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8014360:	4b16      	ldr	r3, [pc, #88]	; (80143bc <vTaskDelete+0xd8>)
 8014362:	681b      	ldr	r3, [r3, #0]
 8014364:	2b00      	cmp	r3, #0
 8014366:	d01b      	beq.n	80143a0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8014368:	4b0f      	ldr	r3, [pc, #60]	; (80143a8 <vTaskDelete+0xc4>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	68fa      	ldr	r2, [r7, #12]
 801436e:	429a      	cmp	r2, r3
 8014370:	d116      	bne.n	80143a0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8014372:	4b13      	ldr	r3, [pc, #76]	; (80143c0 <vTaskDelete+0xdc>)
 8014374:	681b      	ldr	r3, [r3, #0]
 8014376:	2b00      	cmp	r3, #0
 8014378:	d00a      	beq.n	8014390 <vTaskDelete+0xac>
	__asm volatile
 801437a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801437e:	f383 8811 	msr	BASEPRI, r3
 8014382:	f3bf 8f6f 	isb	sy
 8014386:	f3bf 8f4f 	dsb	sy
 801438a:	60bb      	str	r3, [r7, #8]
}
 801438c:	bf00      	nop
 801438e:	e7fe      	b.n	801438e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8014390:	4b0c      	ldr	r3, [pc, #48]	; (80143c4 <vTaskDelete+0xe0>)
 8014392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014396:	601a      	str	r2, [r3, #0]
 8014398:	f3bf 8f4f 	dsb	sy
 801439c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80143a0:	bf00      	nop
 80143a2:	3710      	adds	r7, #16
 80143a4:	46bd      	mov	sp, r7
 80143a6:	bd80      	pop	{r7, pc}
 80143a8:	24001808 	.word	0x24001808
 80143ac:	24001cf8 	.word	0x24001cf8
 80143b0:	24001cb0 	.word	0x24001cb0
 80143b4:	24001cc4 	.word	0x24001cc4
 80143b8:	24001cdc 	.word	0x24001cdc
 80143bc:	24001ce8 	.word	0x24001ce8
 80143c0:	24001d04 	.word	0x24001d04
 80143c4:	e000ed04 	.word	0xe000ed04

080143c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80143c8:	b580      	push	{r7, lr}
 80143ca:	b084      	sub	sp, #16
 80143cc:	af00      	add	r7, sp, #0
 80143ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80143d0:	2300      	movs	r3, #0
 80143d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80143d4:	687b      	ldr	r3, [r7, #4]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d017      	beq.n	801440a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80143da:	4b13      	ldr	r3, [pc, #76]	; (8014428 <vTaskDelay+0x60>)
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d00a      	beq.n	80143f8 <vTaskDelay+0x30>
	__asm volatile
 80143e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80143e6:	f383 8811 	msr	BASEPRI, r3
 80143ea:	f3bf 8f6f 	isb	sy
 80143ee:	f3bf 8f4f 	dsb	sy
 80143f2:	60bb      	str	r3, [r7, #8]
}
 80143f4:	bf00      	nop
 80143f6:	e7fe      	b.n	80143f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80143f8:	f000 f99a 	bl	8014730 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80143fc:	2100      	movs	r1, #0
 80143fe:	6878      	ldr	r0, [r7, #4]
 8014400:	f000 feba 	bl	8015178 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8014404:	f000 f9a2 	bl	801474c <xTaskResumeAll>
 8014408:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	2b00      	cmp	r3, #0
 801440e:	d107      	bne.n	8014420 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8014410:	4b06      	ldr	r3, [pc, #24]	; (801442c <vTaskDelay+0x64>)
 8014412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014416:	601a      	str	r2, [r3, #0]
 8014418:	f3bf 8f4f 	dsb	sy
 801441c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014420:	bf00      	nop
 8014422:	3710      	adds	r7, #16
 8014424:	46bd      	mov	sp, r7
 8014426:	bd80      	pop	{r7, pc}
 8014428:	24001d04 	.word	0x24001d04
 801442c:	e000ed04 	.word	0xe000ed04

08014430 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8014430:	b580      	push	{r7, lr}
 8014432:	b084      	sub	sp, #16
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014438:	f001 fb8c 	bl	8015b54 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 801443c:	687b      	ldr	r3, [r7, #4]
 801443e:	2b00      	cmp	r3, #0
 8014440:	d102      	bne.n	8014448 <vTaskSuspend+0x18>
 8014442:	4b30      	ldr	r3, [pc, #192]	; (8014504 <vTaskSuspend+0xd4>)
 8014444:	681b      	ldr	r3, [r3, #0]
 8014446:	e000      	b.n	801444a <vTaskSuspend+0x1a>
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801444c:	68fb      	ldr	r3, [r7, #12]
 801444e:	3304      	adds	r3, #4
 8014450:	4618      	mov	r0, r3
 8014452:	f7fe ffd5 	bl	8013400 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014456:	68fb      	ldr	r3, [r7, #12]
 8014458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801445a:	2b00      	cmp	r3, #0
 801445c:	d004      	beq.n	8014468 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801445e:	68fb      	ldr	r3, [r7, #12]
 8014460:	3318      	adds	r3, #24
 8014462:	4618      	mov	r0, r3
 8014464:	f7fe ffcc 	bl	8013400 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014468:	68fb      	ldr	r3, [r7, #12]
 801446a:	3304      	adds	r3, #4
 801446c:	4619      	mov	r1, r3
 801446e:	4826      	ldr	r0, [pc, #152]	; (8014508 <vTaskSuspend+0xd8>)
 8014470:	f7fe ff69 	bl	8013346 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014474:	68fb      	ldr	r3, [r7, #12]
 8014476:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801447a:	b2db      	uxtb	r3, r3
 801447c:	2b01      	cmp	r3, #1
 801447e:	d103      	bne.n	8014488 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	2200      	movs	r2, #0
 8014484:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014488:	f001 fb94 	bl	8015bb4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 801448c:	4b1f      	ldr	r3, [pc, #124]	; (801450c <vTaskSuspend+0xdc>)
 801448e:	681b      	ldr	r3, [r3, #0]
 8014490:	2b00      	cmp	r3, #0
 8014492:	d005      	beq.n	80144a0 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014494:	f001 fb5e 	bl	8015b54 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014498:	f000 fdaa 	bl	8014ff0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 801449c:	f001 fb8a 	bl	8015bb4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 80144a0:	4b18      	ldr	r3, [pc, #96]	; (8014504 <vTaskSuspend+0xd4>)
 80144a2:	681b      	ldr	r3, [r3, #0]
 80144a4:	68fa      	ldr	r2, [r7, #12]
 80144a6:	429a      	cmp	r2, r3
 80144a8:	d127      	bne.n	80144fa <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 80144aa:	4b18      	ldr	r3, [pc, #96]	; (801450c <vTaskSuspend+0xdc>)
 80144ac:	681b      	ldr	r3, [r3, #0]
 80144ae:	2b00      	cmp	r3, #0
 80144b0:	d017      	beq.n	80144e2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 80144b2:	4b17      	ldr	r3, [pc, #92]	; (8014510 <vTaskSuspend+0xe0>)
 80144b4:	681b      	ldr	r3, [r3, #0]
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d00a      	beq.n	80144d0 <vTaskSuspend+0xa0>
	__asm volatile
 80144ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80144be:	f383 8811 	msr	BASEPRI, r3
 80144c2:	f3bf 8f6f 	isb	sy
 80144c6:	f3bf 8f4f 	dsb	sy
 80144ca:	60bb      	str	r3, [r7, #8]
}
 80144cc:	bf00      	nop
 80144ce:	e7fe      	b.n	80144ce <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80144d0:	4b10      	ldr	r3, [pc, #64]	; (8014514 <vTaskSuspend+0xe4>)
 80144d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80144d6:	601a      	str	r2, [r3, #0]
 80144d8:	f3bf 8f4f 	dsb	sy
 80144dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80144e0:	e00b      	b.n	80144fa <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80144e2:	4b09      	ldr	r3, [pc, #36]	; (8014508 <vTaskSuspend+0xd8>)
 80144e4:	681a      	ldr	r2, [r3, #0]
 80144e6:	4b0c      	ldr	r3, [pc, #48]	; (8014518 <vTaskSuspend+0xe8>)
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d103      	bne.n	80144f6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80144ee:	4b05      	ldr	r3, [pc, #20]	; (8014504 <vTaskSuspend+0xd4>)
 80144f0:	2200      	movs	r2, #0
 80144f2:	601a      	str	r2, [r3, #0]
	}
 80144f4:	e001      	b.n	80144fa <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80144f6:	f000 fa91 	bl	8014a1c <vTaskSwitchContext>
	}
 80144fa:	bf00      	nop
 80144fc:	3710      	adds	r7, #16
 80144fe:	46bd      	mov	sp, r7
 8014500:	bd80      	pop	{r7, pc}
 8014502:	bf00      	nop
 8014504:	24001808 	.word	0x24001808
 8014508:	24001cc8 	.word	0x24001cc8
 801450c:	24001ce8 	.word	0x24001ce8
 8014510:	24001d04 	.word	0x24001d04
 8014514:	e000ed04 	.word	0xe000ed04
 8014518:	24001cdc 	.word	0x24001cdc

0801451c <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 801451c:	b480      	push	{r7}
 801451e:	b087      	sub	sp, #28
 8014520:	af00      	add	r7, sp, #0
 8014522:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8014524:	2300      	movs	r3, #0
 8014526:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	2b00      	cmp	r3, #0
 8014530:	d10a      	bne.n	8014548 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8014532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014536:	f383 8811 	msr	BASEPRI, r3
 801453a:	f3bf 8f6f 	isb	sy
 801453e:	f3bf 8f4f 	dsb	sy
 8014542:	60fb      	str	r3, [r7, #12]
}
 8014544:	bf00      	nop
 8014546:	e7fe      	b.n	8014546 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014548:	693b      	ldr	r3, [r7, #16]
 801454a:	695b      	ldr	r3, [r3, #20]
 801454c:	4a0a      	ldr	r2, [pc, #40]	; (8014578 <prvTaskIsTaskSuspended+0x5c>)
 801454e:	4293      	cmp	r3, r2
 8014550:	d10a      	bne.n	8014568 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8014552:	693b      	ldr	r3, [r7, #16]
 8014554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014556:	4a09      	ldr	r2, [pc, #36]	; (801457c <prvTaskIsTaskSuspended+0x60>)
 8014558:	4293      	cmp	r3, r2
 801455a:	d005      	beq.n	8014568 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 801455c:	693b      	ldr	r3, [r7, #16]
 801455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014560:	2b00      	cmp	r3, #0
 8014562:	d101      	bne.n	8014568 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014564:	2301      	movs	r3, #1
 8014566:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014568:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 801456a:	4618      	mov	r0, r3
 801456c:	371c      	adds	r7, #28
 801456e:	46bd      	mov	sp, r7
 8014570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014574:	4770      	bx	lr
 8014576:	bf00      	nop
 8014578:	24001cc8 	.word	0x24001cc8
 801457c:	24001c9c 	.word	0x24001c9c

08014580 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8014580:	b580      	push	{r7, lr}
 8014582:	b08a      	sub	sp, #40	; 0x28
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014588:	2300      	movs	r3, #0
 801458a:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 801458c:	687b      	ldr	r3, [r7, #4]
 801458e:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8014590:	687b      	ldr	r3, [r7, #4]
 8014592:	2b00      	cmp	r3, #0
 8014594:	d10a      	bne.n	80145ac <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014596:	f04f 0350 	mov.w	r3, #80	; 0x50
 801459a:	f383 8811 	msr	BASEPRI, r3
 801459e:	f3bf 8f6f 	isb	sy
 80145a2:	f3bf 8f4f 	dsb	sy
 80145a6:	61bb      	str	r3, [r7, #24]
}
 80145a8:	bf00      	nop
 80145aa:	e7fe      	b.n	80145aa <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80145ac:	f001 fbb4 	bl	8015d18 <vPortValidateInterruptPriority>
	__asm volatile
 80145b0:	f3ef 8211 	mrs	r2, BASEPRI
 80145b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145b8:	f383 8811 	msr	BASEPRI, r3
 80145bc:	f3bf 8f6f 	isb	sy
 80145c0:	f3bf 8f4f 	dsb	sy
 80145c4:	617a      	str	r2, [r7, #20]
 80145c6:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80145c8:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80145ca:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80145cc:	6a38      	ldr	r0, [r7, #32]
 80145ce:	f7ff ffa5 	bl	801451c <prvTaskIsTaskSuspended>
 80145d2:	4603      	mov	r3, r0
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d030      	beq.n	801463a <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80145d8:	4b1d      	ldr	r3, [pc, #116]	; (8014650 <xTaskResumeFromISR+0xd0>)
 80145da:	681b      	ldr	r3, [r3, #0]
 80145dc:	2b00      	cmp	r3, #0
 80145de:	d126      	bne.n	801462e <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80145e0:	6a3b      	ldr	r3, [r7, #32]
 80145e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80145e4:	4b1b      	ldr	r3, [pc, #108]	; (8014654 <xTaskResumeFromISR+0xd4>)
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145ea:	429a      	cmp	r2, r3
 80145ec:	d301      	bcc.n	80145f2 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80145ee:	2301      	movs	r3, #1
 80145f0:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80145f2:	6a3b      	ldr	r3, [r7, #32]
 80145f4:	3304      	adds	r3, #4
 80145f6:	4618      	mov	r0, r3
 80145f8:	f7fe ff02 	bl	8013400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80145fc:	6a3b      	ldr	r3, [r7, #32]
 80145fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014600:	4b15      	ldr	r3, [pc, #84]	; (8014658 <xTaskResumeFromISR+0xd8>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	429a      	cmp	r2, r3
 8014606:	d903      	bls.n	8014610 <xTaskResumeFromISR+0x90>
 8014608:	6a3b      	ldr	r3, [r7, #32]
 801460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801460c:	4a12      	ldr	r2, [pc, #72]	; (8014658 <xTaskResumeFromISR+0xd8>)
 801460e:	6013      	str	r3, [r2, #0]
 8014610:	6a3b      	ldr	r3, [r7, #32]
 8014612:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014614:	4613      	mov	r3, r2
 8014616:	009b      	lsls	r3, r3, #2
 8014618:	4413      	add	r3, r2
 801461a:	009b      	lsls	r3, r3, #2
 801461c:	4a0f      	ldr	r2, [pc, #60]	; (801465c <xTaskResumeFromISR+0xdc>)
 801461e:	441a      	add	r2, r3
 8014620:	6a3b      	ldr	r3, [r7, #32]
 8014622:	3304      	adds	r3, #4
 8014624:	4619      	mov	r1, r3
 8014626:	4610      	mov	r0, r2
 8014628:	f7fe fe8d 	bl	8013346 <vListInsertEnd>
 801462c:	e005      	b.n	801463a <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 801462e:	6a3b      	ldr	r3, [r7, #32]
 8014630:	3318      	adds	r3, #24
 8014632:	4619      	mov	r1, r3
 8014634:	480a      	ldr	r0, [pc, #40]	; (8014660 <xTaskResumeFromISR+0xe0>)
 8014636:	f7fe fe86 	bl	8013346 <vListInsertEnd>
 801463a:	69fb      	ldr	r3, [r7, #28]
 801463c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801463e:	68fb      	ldr	r3, [r7, #12]
 8014640:	f383 8811 	msr	BASEPRI, r3
}
 8014644:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014648:	4618      	mov	r0, r3
 801464a:	3728      	adds	r7, #40	; 0x28
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}
 8014650:	24001d04 	.word	0x24001d04
 8014654:	24001808 	.word	0x24001808
 8014658:	24001ce4 	.word	0x24001ce4
 801465c:	2400180c 	.word	0x2400180c
 8014660:	24001c9c 	.word	0x24001c9c

08014664 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014664:	b580      	push	{r7, lr}
 8014666:	b08a      	sub	sp, #40	; 0x28
 8014668:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 801466a:	2300      	movs	r3, #0
 801466c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801466e:	2300      	movs	r3, #0
 8014670:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8014672:	463a      	mov	r2, r7
 8014674:	1d39      	adds	r1, r7, #4
 8014676:	f107 0308 	add.w	r3, r7, #8
 801467a:	4618      	mov	r0, r3
 801467c:	f7fe fc14 	bl	8012ea8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8014680:	6839      	ldr	r1, [r7, #0]
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	68ba      	ldr	r2, [r7, #8]
 8014686:	9202      	str	r2, [sp, #8]
 8014688:	9301      	str	r3, [sp, #4]
 801468a:	2300      	movs	r3, #0
 801468c:	9300      	str	r3, [sp, #0]
 801468e:	2300      	movs	r3, #0
 8014690:	460a      	mov	r2, r1
 8014692:	4921      	ldr	r1, [pc, #132]	; (8014718 <vTaskStartScheduler+0xb4>)
 8014694:	4821      	ldr	r0, [pc, #132]	; (801471c <vTaskStartScheduler+0xb8>)
 8014696:	f7ff fc83 	bl	8013fa0 <xTaskCreateStatic>
 801469a:	4603      	mov	r3, r0
 801469c:	4a20      	ldr	r2, [pc, #128]	; (8014720 <vTaskStartScheduler+0xbc>)
 801469e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80146a0:	4b1f      	ldr	r3, [pc, #124]	; (8014720 <vTaskStartScheduler+0xbc>)
 80146a2:	681b      	ldr	r3, [r3, #0]
 80146a4:	2b00      	cmp	r3, #0
 80146a6:	d002      	beq.n	80146ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80146a8:	2301      	movs	r3, #1
 80146aa:	617b      	str	r3, [r7, #20]
 80146ac:	e001      	b.n	80146b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80146ae:	2300      	movs	r3, #0
 80146b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80146b2:	697b      	ldr	r3, [r7, #20]
 80146b4:	2b01      	cmp	r3, #1
 80146b6:	d102      	bne.n	80146be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80146b8:	f000 fdb2 	bl	8015220 <xTimerCreateTimerTask>
 80146bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80146be:	697b      	ldr	r3, [r7, #20]
 80146c0:	2b01      	cmp	r3, #1
 80146c2:	d116      	bne.n	80146f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80146c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146c8:	f383 8811 	msr	BASEPRI, r3
 80146cc:	f3bf 8f6f 	isb	sy
 80146d0:	f3bf 8f4f 	dsb	sy
 80146d4:	613b      	str	r3, [r7, #16]
}
 80146d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80146d8:	4b12      	ldr	r3, [pc, #72]	; (8014724 <vTaskStartScheduler+0xc0>)
 80146da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80146de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80146e0:	4b11      	ldr	r3, [pc, #68]	; (8014728 <vTaskStartScheduler+0xc4>)
 80146e2:	2201      	movs	r2, #1
 80146e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80146e6:	4b11      	ldr	r3, [pc, #68]	; (801472c <vTaskStartScheduler+0xc8>)
 80146e8:	2200      	movs	r2, #0
 80146ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80146ec:	f001 f990 	bl	8015a10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80146f0:	e00e      	b.n	8014710 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80146f2:	697b      	ldr	r3, [r7, #20]
 80146f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146f8:	d10a      	bne.n	8014710 <vTaskStartScheduler+0xac>
	__asm volatile
 80146fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80146fe:	f383 8811 	msr	BASEPRI, r3
 8014702:	f3bf 8f6f 	isb	sy
 8014706:	f3bf 8f4f 	dsb	sy
 801470a:	60fb      	str	r3, [r7, #12]
}
 801470c:	bf00      	nop
 801470e:	e7fe      	b.n	801470e <vTaskStartScheduler+0xaa>
}
 8014710:	bf00      	nop
 8014712:	3718      	adds	r7, #24
 8014714:	46bd      	mov	sp, r7
 8014716:	bd80      	pop	{r7, pc}
 8014718:	08016e8c 	.word	0x08016e8c
 801471c:	08014e85 	.word	0x08014e85
 8014720:	24001d00 	.word	0x24001d00
 8014724:	24001cfc 	.word	0x24001cfc
 8014728:	24001ce8 	.word	0x24001ce8
 801472c:	24001ce0 	.word	0x24001ce0

08014730 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8014730:	b480      	push	{r7}
 8014732:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014734:	4b04      	ldr	r3, [pc, #16]	; (8014748 <vTaskSuspendAll+0x18>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	3301      	adds	r3, #1
 801473a:	4a03      	ldr	r2, [pc, #12]	; (8014748 <vTaskSuspendAll+0x18>)
 801473c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801473e:	bf00      	nop
 8014740:	46bd      	mov	sp, r7
 8014742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014746:	4770      	bx	lr
 8014748:	24001d04 	.word	0x24001d04

0801474c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801474c:	b580      	push	{r7, lr}
 801474e:	b084      	sub	sp, #16
 8014750:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8014752:	2300      	movs	r3, #0
 8014754:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014756:	2300      	movs	r3, #0
 8014758:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801475a:	4b42      	ldr	r3, [pc, #264]	; (8014864 <xTaskResumeAll+0x118>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d10a      	bne.n	8014778 <xTaskResumeAll+0x2c>
	__asm volatile
 8014762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014766:	f383 8811 	msr	BASEPRI, r3
 801476a:	f3bf 8f6f 	isb	sy
 801476e:	f3bf 8f4f 	dsb	sy
 8014772:	603b      	str	r3, [r7, #0]
}
 8014774:	bf00      	nop
 8014776:	e7fe      	b.n	8014776 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014778:	f001 f9ec 	bl	8015b54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801477c:	4b39      	ldr	r3, [pc, #228]	; (8014864 <xTaskResumeAll+0x118>)
 801477e:	681b      	ldr	r3, [r3, #0]
 8014780:	3b01      	subs	r3, #1
 8014782:	4a38      	ldr	r2, [pc, #224]	; (8014864 <xTaskResumeAll+0x118>)
 8014784:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014786:	4b37      	ldr	r3, [pc, #220]	; (8014864 <xTaskResumeAll+0x118>)
 8014788:	681b      	ldr	r3, [r3, #0]
 801478a:	2b00      	cmp	r3, #0
 801478c:	d162      	bne.n	8014854 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801478e:	4b36      	ldr	r3, [pc, #216]	; (8014868 <xTaskResumeAll+0x11c>)
 8014790:	681b      	ldr	r3, [r3, #0]
 8014792:	2b00      	cmp	r3, #0
 8014794:	d05e      	beq.n	8014854 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014796:	e02f      	b.n	80147f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014798:	4b34      	ldr	r3, [pc, #208]	; (801486c <xTaskResumeAll+0x120>)
 801479a:	68db      	ldr	r3, [r3, #12]
 801479c:	68db      	ldr	r3, [r3, #12]
 801479e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80147a0:	68fb      	ldr	r3, [r7, #12]
 80147a2:	3318      	adds	r3, #24
 80147a4:	4618      	mov	r0, r3
 80147a6:	f7fe fe2b 	bl	8013400 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	3304      	adds	r3, #4
 80147ae:	4618      	mov	r0, r3
 80147b0:	f7fe fe26 	bl	8013400 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80147b4:	68fb      	ldr	r3, [r7, #12]
 80147b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147b8:	4b2d      	ldr	r3, [pc, #180]	; (8014870 <xTaskResumeAll+0x124>)
 80147ba:	681b      	ldr	r3, [r3, #0]
 80147bc:	429a      	cmp	r2, r3
 80147be:	d903      	bls.n	80147c8 <xTaskResumeAll+0x7c>
 80147c0:	68fb      	ldr	r3, [r7, #12]
 80147c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147c4:	4a2a      	ldr	r2, [pc, #168]	; (8014870 <xTaskResumeAll+0x124>)
 80147c6:	6013      	str	r3, [r2, #0]
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147cc:	4613      	mov	r3, r2
 80147ce:	009b      	lsls	r3, r3, #2
 80147d0:	4413      	add	r3, r2
 80147d2:	009b      	lsls	r3, r3, #2
 80147d4:	4a27      	ldr	r2, [pc, #156]	; (8014874 <xTaskResumeAll+0x128>)
 80147d6:	441a      	add	r2, r3
 80147d8:	68fb      	ldr	r3, [r7, #12]
 80147da:	3304      	adds	r3, #4
 80147dc:	4619      	mov	r1, r3
 80147de:	4610      	mov	r0, r2
 80147e0:	f7fe fdb1 	bl	8013346 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80147e4:	68fb      	ldr	r3, [r7, #12]
 80147e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80147e8:	4b23      	ldr	r3, [pc, #140]	; (8014878 <xTaskResumeAll+0x12c>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147ee:	429a      	cmp	r2, r3
 80147f0:	d302      	bcc.n	80147f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80147f2:	4b22      	ldr	r3, [pc, #136]	; (801487c <xTaskResumeAll+0x130>)
 80147f4:	2201      	movs	r2, #1
 80147f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80147f8:	4b1c      	ldr	r3, [pc, #112]	; (801486c <xTaskResumeAll+0x120>)
 80147fa:	681b      	ldr	r3, [r3, #0]
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d1cb      	bne.n	8014798 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d001      	beq.n	801480a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8014806:	f000 fbf3 	bl	8014ff0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801480a:	4b1d      	ldr	r3, [pc, #116]	; (8014880 <xTaskResumeAll+0x134>)
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	2b00      	cmp	r3, #0
 8014814:	d010      	beq.n	8014838 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8014816:	f000 f847 	bl	80148a8 <xTaskIncrementTick>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d002      	beq.n	8014826 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8014820:	4b16      	ldr	r3, [pc, #88]	; (801487c <xTaskResumeAll+0x130>)
 8014822:	2201      	movs	r2, #1
 8014824:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	3b01      	subs	r3, #1
 801482a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d1f1      	bne.n	8014816 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8014832:	4b13      	ldr	r3, [pc, #76]	; (8014880 <xTaskResumeAll+0x134>)
 8014834:	2200      	movs	r2, #0
 8014836:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014838:	4b10      	ldr	r3, [pc, #64]	; (801487c <xTaskResumeAll+0x130>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	2b00      	cmp	r3, #0
 801483e:	d009      	beq.n	8014854 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8014840:	2301      	movs	r3, #1
 8014842:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014844:	4b0f      	ldr	r3, [pc, #60]	; (8014884 <xTaskResumeAll+0x138>)
 8014846:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801484a:	601a      	str	r2, [r3, #0]
 801484c:	f3bf 8f4f 	dsb	sy
 8014850:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014854:	f001 f9ae 	bl	8015bb4 <vPortExitCritical>

	return xAlreadyYielded;
 8014858:	68bb      	ldr	r3, [r7, #8]
}
 801485a:	4618      	mov	r0, r3
 801485c:	3710      	adds	r7, #16
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}
 8014862:	bf00      	nop
 8014864:	24001d04 	.word	0x24001d04
 8014868:	24001cdc 	.word	0x24001cdc
 801486c:	24001c9c 	.word	0x24001c9c
 8014870:	24001ce4 	.word	0x24001ce4
 8014874:	2400180c 	.word	0x2400180c
 8014878:	24001808 	.word	0x24001808
 801487c:	24001cf0 	.word	0x24001cf0
 8014880:	24001cec 	.word	0x24001cec
 8014884:	e000ed04 	.word	0xe000ed04

08014888 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014888:	b480      	push	{r7}
 801488a:	b083      	sub	sp, #12
 801488c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801488e:	4b05      	ldr	r3, [pc, #20]	; (80148a4 <xTaskGetTickCount+0x1c>)
 8014890:	681b      	ldr	r3, [r3, #0]
 8014892:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014894:	687b      	ldr	r3, [r7, #4]
}
 8014896:	4618      	mov	r0, r3
 8014898:	370c      	adds	r7, #12
 801489a:	46bd      	mov	sp, r7
 801489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148a0:	4770      	bx	lr
 80148a2:	bf00      	nop
 80148a4:	24001ce0 	.word	0x24001ce0

080148a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80148a8:	b580      	push	{r7, lr}
 80148aa:	b086      	sub	sp, #24
 80148ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80148ae:	2300      	movs	r3, #0
 80148b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80148b2:	4b4f      	ldr	r3, [pc, #316]	; (80149f0 <xTaskIncrementTick+0x148>)
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	f040 808f 	bne.w	80149da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80148bc:	4b4d      	ldr	r3, [pc, #308]	; (80149f4 <xTaskIncrementTick+0x14c>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	3301      	adds	r3, #1
 80148c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80148c4:	4a4b      	ldr	r2, [pc, #300]	; (80149f4 <xTaskIncrementTick+0x14c>)
 80148c6:	693b      	ldr	r3, [r7, #16]
 80148c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80148ca:	693b      	ldr	r3, [r7, #16]
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d120      	bne.n	8014912 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80148d0:	4b49      	ldr	r3, [pc, #292]	; (80149f8 <xTaskIncrementTick+0x150>)
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00a      	beq.n	80148f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80148da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80148de:	f383 8811 	msr	BASEPRI, r3
 80148e2:	f3bf 8f6f 	isb	sy
 80148e6:	f3bf 8f4f 	dsb	sy
 80148ea:	603b      	str	r3, [r7, #0]
}
 80148ec:	bf00      	nop
 80148ee:	e7fe      	b.n	80148ee <xTaskIncrementTick+0x46>
 80148f0:	4b41      	ldr	r3, [pc, #260]	; (80149f8 <xTaskIncrementTick+0x150>)
 80148f2:	681b      	ldr	r3, [r3, #0]
 80148f4:	60fb      	str	r3, [r7, #12]
 80148f6:	4b41      	ldr	r3, [pc, #260]	; (80149fc <xTaskIncrementTick+0x154>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	4a3f      	ldr	r2, [pc, #252]	; (80149f8 <xTaskIncrementTick+0x150>)
 80148fc:	6013      	str	r3, [r2, #0]
 80148fe:	4a3f      	ldr	r2, [pc, #252]	; (80149fc <xTaskIncrementTick+0x154>)
 8014900:	68fb      	ldr	r3, [r7, #12]
 8014902:	6013      	str	r3, [r2, #0]
 8014904:	4b3e      	ldr	r3, [pc, #248]	; (8014a00 <xTaskIncrementTick+0x158>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	3301      	adds	r3, #1
 801490a:	4a3d      	ldr	r2, [pc, #244]	; (8014a00 <xTaskIncrementTick+0x158>)
 801490c:	6013      	str	r3, [r2, #0]
 801490e:	f000 fb6f 	bl	8014ff0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8014912:	4b3c      	ldr	r3, [pc, #240]	; (8014a04 <xTaskIncrementTick+0x15c>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	693a      	ldr	r2, [r7, #16]
 8014918:	429a      	cmp	r2, r3
 801491a:	d349      	bcc.n	80149b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801491c:	4b36      	ldr	r3, [pc, #216]	; (80149f8 <xTaskIncrementTick+0x150>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	2b00      	cmp	r3, #0
 8014924:	d104      	bne.n	8014930 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014926:	4b37      	ldr	r3, [pc, #220]	; (8014a04 <xTaskIncrementTick+0x15c>)
 8014928:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801492c:	601a      	str	r2, [r3, #0]
					break;
 801492e:	e03f      	b.n	80149b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014930:	4b31      	ldr	r3, [pc, #196]	; (80149f8 <xTaskIncrementTick+0x150>)
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	68db      	ldr	r3, [r3, #12]
 8014936:	68db      	ldr	r3, [r3, #12]
 8014938:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801493a:	68bb      	ldr	r3, [r7, #8]
 801493c:	685b      	ldr	r3, [r3, #4]
 801493e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8014940:	693a      	ldr	r2, [r7, #16]
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	429a      	cmp	r2, r3
 8014946:	d203      	bcs.n	8014950 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014948:	4a2e      	ldr	r2, [pc, #184]	; (8014a04 <xTaskIncrementTick+0x15c>)
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801494e:	e02f      	b.n	80149b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014950:	68bb      	ldr	r3, [r7, #8]
 8014952:	3304      	adds	r3, #4
 8014954:	4618      	mov	r0, r3
 8014956:	f7fe fd53 	bl	8013400 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801495a:	68bb      	ldr	r3, [r7, #8]
 801495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801495e:	2b00      	cmp	r3, #0
 8014960:	d004      	beq.n	801496c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8014962:	68bb      	ldr	r3, [r7, #8]
 8014964:	3318      	adds	r3, #24
 8014966:	4618      	mov	r0, r3
 8014968:	f7fe fd4a 	bl	8013400 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801496c:	68bb      	ldr	r3, [r7, #8]
 801496e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014970:	4b25      	ldr	r3, [pc, #148]	; (8014a08 <xTaskIncrementTick+0x160>)
 8014972:	681b      	ldr	r3, [r3, #0]
 8014974:	429a      	cmp	r2, r3
 8014976:	d903      	bls.n	8014980 <xTaskIncrementTick+0xd8>
 8014978:	68bb      	ldr	r3, [r7, #8]
 801497a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801497c:	4a22      	ldr	r2, [pc, #136]	; (8014a08 <xTaskIncrementTick+0x160>)
 801497e:	6013      	str	r3, [r2, #0]
 8014980:	68bb      	ldr	r3, [r7, #8]
 8014982:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014984:	4613      	mov	r3, r2
 8014986:	009b      	lsls	r3, r3, #2
 8014988:	4413      	add	r3, r2
 801498a:	009b      	lsls	r3, r3, #2
 801498c:	4a1f      	ldr	r2, [pc, #124]	; (8014a0c <xTaskIncrementTick+0x164>)
 801498e:	441a      	add	r2, r3
 8014990:	68bb      	ldr	r3, [r7, #8]
 8014992:	3304      	adds	r3, #4
 8014994:	4619      	mov	r1, r3
 8014996:	4610      	mov	r0, r2
 8014998:	f7fe fcd5 	bl	8013346 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801499c:	68bb      	ldr	r3, [r7, #8]
 801499e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149a0:	4b1b      	ldr	r3, [pc, #108]	; (8014a10 <xTaskIncrementTick+0x168>)
 80149a2:	681b      	ldr	r3, [r3, #0]
 80149a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80149a6:	429a      	cmp	r2, r3
 80149a8:	d3b8      	bcc.n	801491c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80149aa:	2301      	movs	r3, #1
 80149ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80149ae:	e7b5      	b.n	801491c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80149b0:	4b17      	ldr	r3, [pc, #92]	; (8014a10 <xTaskIncrementTick+0x168>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80149b6:	4915      	ldr	r1, [pc, #84]	; (8014a0c <xTaskIncrementTick+0x164>)
 80149b8:	4613      	mov	r3, r2
 80149ba:	009b      	lsls	r3, r3, #2
 80149bc:	4413      	add	r3, r2
 80149be:	009b      	lsls	r3, r3, #2
 80149c0:	440b      	add	r3, r1
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	2b01      	cmp	r3, #1
 80149c6:	d901      	bls.n	80149cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80149c8:	2301      	movs	r3, #1
 80149ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80149cc:	4b11      	ldr	r3, [pc, #68]	; (8014a14 <xTaskIncrementTick+0x16c>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d007      	beq.n	80149e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80149d4:	2301      	movs	r3, #1
 80149d6:	617b      	str	r3, [r7, #20]
 80149d8:	e004      	b.n	80149e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80149da:	4b0f      	ldr	r3, [pc, #60]	; (8014a18 <xTaskIncrementTick+0x170>)
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	3301      	adds	r3, #1
 80149e0:	4a0d      	ldr	r2, [pc, #52]	; (8014a18 <xTaskIncrementTick+0x170>)
 80149e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80149e4:	697b      	ldr	r3, [r7, #20]
}
 80149e6:	4618      	mov	r0, r3
 80149e8:	3718      	adds	r7, #24
 80149ea:	46bd      	mov	sp, r7
 80149ec:	bd80      	pop	{r7, pc}
 80149ee:	bf00      	nop
 80149f0:	24001d04 	.word	0x24001d04
 80149f4:	24001ce0 	.word	0x24001ce0
 80149f8:	24001c94 	.word	0x24001c94
 80149fc:	24001c98 	.word	0x24001c98
 8014a00:	24001cf4 	.word	0x24001cf4
 8014a04:	24001cfc 	.word	0x24001cfc
 8014a08:	24001ce4 	.word	0x24001ce4
 8014a0c:	2400180c 	.word	0x2400180c
 8014a10:	24001808 	.word	0x24001808
 8014a14:	24001cf0 	.word	0x24001cf0
 8014a18:	24001cec 	.word	0x24001cec

08014a1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8014a1c:	b480      	push	{r7}
 8014a1e:	b085      	sub	sp, #20
 8014a20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8014a22:	4b28      	ldr	r3, [pc, #160]	; (8014ac4 <vTaskSwitchContext+0xa8>)
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d003      	beq.n	8014a32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8014a2a:	4b27      	ldr	r3, [pc, #156]	; (8014ac8 <vTaskSwitchContext+0xac>)
 8014a2c:	2201      	movs	r2, #1
 8014a2e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8014a30:	e041      	b.n	8014ab6 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8014a32:	4b25      	ldr	r3, [pc, #148]	; (8014ac8 <vTaskSwitchContext+0xac>)
 8014a34:	2200      	movs	r2, #0
 8014a36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014a38:	4b24      	ldr	r3, [pc, #144]	; (8014acc <vTaskSwitchContext+0xb0>)
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	60fb      	str	r3, [r7, #12]
 8014a3e:	e010      	b.n	8014a62 <vTaskSwitchContext+0x46>
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	2b00      	cmp	r3, #0
 8014a44:	d10a      	bne.n	8014a5c <vTaskSwitchContext+0x40>
	__asm volatile
 8014a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a4a:	f383 8811 	msr	BASEPRI, r3
 8014a4e:	f3bf 8f6f 	isb	sy
 8014a52:	f3bf 8f4f 	dsb	sy
 8014a56:	607b      	str	r3, [r7, #4]
}
 8014a58:	bf00      	nop
 8014a5a:	e7fe      	b.n	8014a5a <vTaskSwitchContext+0x3e>
 8014a5c:	68fb      	ldr	r3, [r7, #12]
 8014a5e:	3b01      	subs	r3, #1
 8014a60:	60fb      	str	r3, [r7, #12]
 8014a62:	491b      	ldr	r1, [pc, #108]	; (8014ad0 <vTaskSwitchContext+0xb4>)
 8014a64:	68fa      	ldr	r2, [r7, #12]
 8014a66:	4613      	mov	r3, r2
 8014a68:	009b      	lsls	r3, r3, #2
 8014a6a:	4413      	add	r3, r2
 8014a6c:	009b      	lsls	r3, r3, #2
 8014a6e:	440b      	add	r3, r1
 8014a70:	681b      	ldr	r3, [r3, #0]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d0e4      	beq.n	8014a40 <vTaskSwitchContext+0x24>
 8014a76:	68fa      	ldr	r2, [r7, #12]
 8014a78:	4613      	mov	r3, r2
 8014a7a:	009b      	lsls	r3, r3, #2
 8014a7c:	4413      	add	r3, r2
 8014a7e:	009b      	lsls	r3, r3, #2
 8014a80:	4a13      	ldr	r2, [pc, #76]	; (8014ad0 <vTaskSwitchContext+0xb4>)
 8014a82:	4413      	add	r3, r2
 8014a84:	60bb      	str	r3, [r7, #8]
 8014a86:	68bb      	ldr	r3, [r7, #8]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	685a      	ldr	r2, [r3, #4]
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	605a      	str	r2, [r3, #4]
 8014a90:	68bb      	ldr	r3, [r7, #8]
 8014a92:	685a      	ldr	r2, [r3, #4]
 8014a94:	68bb      	ldr	r3, [r7, #8]
 8014a96:	3308      	adds	r3, #8
 8014a98:	429a      	cmp	r2, r3
 8014a9a:	d104      	bne.n	8014aa6 <vTaskSwitchContext+0x8a>
 8014a9c:	68bb      	ldr	r3, [r7, #8]
 8014a9e:	685b      	ldr	r3, [r3, #4]
 8014aa0:	685a      	ldr	r2, [r3, #4]
 8014aa2:	68bb      	ldr	r3, [r7, #8]
 8014aa4:	605a      	str	r2, [r3, #4]
 8014aa6:	68bb      	ldr	r3, [r7, #8]
 8014aa8:	685b      	ldr	r3, [r3, #4]
 8014aaa:	68db      	ldr	r3, [r3, #12]
 8014aac:	4a09      	ldr	r2, [pc, #36]	; (8014ad4 <vTaskSwitchContext+0xb8>)
 8014aae:	6013      	str	r3, [r2, #0]
 8014ab0:	4a06      	ldr	r2, [pc, #24]	; (8014acc <vTaskSwitchContext+0xb0>)
 8014ab2:	68fb      	ldr	r3, [r7, #12]
 8014ab4:	6013      	str	r3, [r2, #0]
}
 8014ab6:	bf00      	nop
 8014ab8:	3714      	adds	r7, #20
 8014aba:	46bd      	mov	sp, r7
 8014abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac0:	4770      	bx	lr
 8014ac2:	bf00      	nop
 8014ac4:	24001d04 	.word	0x24001d04
 8014ac8:	24001cf0 	.word	0x24001cf0
 8014acc:	24001ce4 	.word	0x24001ce4
 8014ad0:	2400180c 	.word	0x2400180c
 8014ad4:	24001808 	.word	0x24001808

08014ad8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8014ad8:	b580      	push	{r7, lr}
 8014ada:	b084      	sub	sp, #16
 8014adc:	af00      	add	r7, sp, #0
 8014ade:	6078      	str	r0, [r7, #4]
 8014ae0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d10a      	bne.n	8014afe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8014ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014aec:	f383 8811 	msr	BASEPRI, r3
 8014af0:	f3bf 8f6f 	isb	sy
 8014af4:	f3bf 8f4f 	dsb	sy
 8014af8:	60fb      	str	r3, [r7, #12]
}
 8014afa:	bf00      	nop
 8014afc:	e7fe      	b.n	8014afc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014afe:	4b07      	ldr	r3, [pc, #28]	; (8014b1c <vTaskPlaceOnEventList+0x44>)
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	3318      	adds	r3, #24
 8014b04:	4619      	mov	r1, r3
 8014b06:	6878      	ldr	r0, [r7, #4]
 8014b08:	f7fe fc41 	bl	801338e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014b0c:	2101      	movs	r1, #1
 8014b0e:	6838      	ldr	r0, [r7, #0]
 8014b10:	f000 fb32 	bl	8015178 <prvAddCurrentTaskToDelayedList>
}
 8014b14:	bf00      	nop
 8014b16:	3710      	adds	r7, #16
 8014b18:	46bd      	mov	sp, r7
 8014b1a:	bd80      	pop	{r7, pc}
 8014b1c:	24001808 	.word	0x24001808

08014b20 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8014b20:	b580      	push	{r7, lr}
 8014b22:	b086      	sub	sp, #24
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	60f8      	str	r0, [r7, #12]
 8014b28:	60b9      	str	r1, [r7, #8]
 8014b2a:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	2b00      	cmp	r3, #0
 8014b30:	d10a      	bne.n	8014b48 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8014b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b36:	f383 8811 	msr	BASEPRI, r3
 8014b3a:	f3bf 8f6f 	isb	sy
 8014b3e:	f3bf 8f4f 	dsb	sy
 8014b42:	617b      	str	r3, [r7, #20]
}
 8014b44:	bf00      	nop
 8014b46:	e7fe      	b.n	8014b46 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014b48:	4b11      	ldr	r3, [pc, #68]	; (8014b90 <vTaskPlaceOnUnorderedEventList+0x70>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	2b00      	cmp	r3, #0
 8014b4e:	d10a      	bne.n	8014b66 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b54:	f383 8811 	msr	BASEPRI, r3
 8014b58:	f3bf 8f6f 	isb	sy
 8014b5c:	f3bf 8f4f 	dsb	sy
 8014b60:	613b      	str	r3, [r7, #16]
}
 8014b62:	bf00      	nop
 8014b64:	e7fe      	b.n	8014b64 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014b66:	4b0b      	ldr	r3, [pc, #44]	; (8014b94 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014b68:	681b      	ldr	r3, [r3, #0]
 8014b6a:	68ba      	ldr	r2, [r7, #8]
 8014b6c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014b70:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014b72:	4b08      	ldr	r3, [pc, #32]	; (8014b94 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014b74:	681b      	ldr	r3, [r3, #0]
 8014b76:	3318      	adds	r3, #24
 8014b78:	4619      	mov	r1, r3
 8014b7a:	68f8      	ldr	r0, [r7, #12]
 8014b7c:	f7fe fbe3 	bl	8013346 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014b80:	2101      	movs	r1, #1
 8014b82:	6878      	ldr	r0, [r7, #4]
 8014b84:	f000 faf8 	bl	8015178 <prvAddCurrentTaskToDelayedList>
}
 8014b88:	bf00      	nop
 8014b8a:	3718      	adds	r7, #24
 8014b8c:	46bd      	mov	sp, r7
 8014b8e:	bd80      	pop	{r7, pc}
 8014b90:	24001d04 	.word	0x24001d04
 8014b94:	24001808 	.word	0x24001808

08014b98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014b98:	b580      	push	{r7, lr}
 8014b9a:	b086      	sub	sp, #24
 8014b9c:	af00      	add	r7, sp, #0
 8014b9e:	60f8      	str	r0, [r7, #12]
 8014ba0:	60b9      	str	r1, [r7, #8]
 8014ba2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014ba4:	68fb      	ldr	r3, [r7, #12]
 8014ba6:	2b00      	cmp	r3, #0
 8014ba8:	d10a      	bne.n	8014bc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bae:	f383 8811 	msr	BASEPRI, r3
 8014bb2:	f3bf 8f6f 	isb	sy
 8014bb6:	f3bf 8f4f 	dsb	sy
 8014bba:	617b      	str	r3, [r7, #20]
}
 8014bbc:	bf00      	nop
 8014bbe:	e7fe      	b.n	8014bbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014bc0:	4b0a      	ldr	r3, [pc, #40]	; (8014bec <vTaskPlaceOnEventListRestricted+0x54>)
 8014bc2:	681b      	ldr	r3, [r3, #0]
 8014bc4:	3318      	adds	r3, #24
 8014bc6:	4619      	mov	r1, r3
 8014bc8:	68f8      	ldr	r0, [r7, #12]
 8014bca:	f7fe fbbc 	bl	8013346 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d002      	beq.n	8014bda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014bd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014bd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014bda:	6879      	ldr	r1, [r7, #4]
 8014bdc:	68b8      	ldr	r0, [r7, #8]
 8014bde:	f000 facb 	bl	8015178 <prvAddCurrentTaskToDelayedList>
	}
 8014be2:	bf00      	nop
 8014be4:	3718      	adds	r7, #24
 8014be6:	46bd      	mov	sp, r7
 8014be8:	bd80      	pop	{r7, pc}
 8014bea:	bf00      	nop
 8014bec:	24001808 	.word	0x24001808

08014bf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014bf0:	b580      	push	{r7, lr}
 8014bf2:	b086      	sub	sp, #24
 8014bf4:	af00      	add	r7, sp, #0
 8014bf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	68db      	ldr	r3, [r3, #12]
 8014bfc:	68db      	ldr	r3, [r3, #12]
 8014bfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014c00:	693b      	ldr	r3, [r7, #16]
 8014c02:	2b00      	cmp	r3, #0
 8014c04:	d10a      	bne.n	8014c1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c0a:	f383 8811 	msr	BASEPRI, r3
 8014c0e:	f3bf 8f6f 	isb	sy
 8014c12:	f3bf 8f4f 	dsb	sy
 8014c16:	60fb      	str	r3, [r7, #12]
}
 8014c18:	bf00      	nop
 8014c1a:	e7fe      	b.n	8014c1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014c1c:	693b      	ldr	r3, [r7, #16]
 8014c1e:	3318      	adds	r3, #24
 8014c20:	4618      	mov	r0, r3
 8014c22:	f7fe fbed 	bl	8013400 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014c26:	4b1e      	ldr	r3, [pc, #120]	; (8014ca0 <xTaskRemoveFromEventList+0xb0>)
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d11d      	bne.n	8014c6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014c2e:	693b      	ldr	r3, [r7, #16]
 8014c30:	3304      	adds	r3, #4
 8014c32:	4618      	mov	r0, r3
 8014c34:	f7fe fbe4 	bl	8013400 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c3c:	4b19      	ldr	r3, [pc, #100]	; (8014ca4 <xTaskRemoveFromEventList+0xb4>)
 8014c3e:	681b      	ldr	r3, [r3, #0]
 8014c40:	429a      	cmp	r2, r3
 8014c42:	d903      	bls.n	8014c4c <xTaskRemoveFromEventList+0x5c>
 8014c44:	693b      	ldr	r3, [r7, #16]
 8014c46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c48:	4a16      	ldr	r2, [pc, #88]	; (8014ca4 <xTaskRemoveFromEventList+0xb4>)
 8014c4a:	6013      	str	r3, [r2, #0]
 8014c4c:	693b      	ldr	r3, [r7, #16]
 8014c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c50:	4613      	mov	r3, r2
 8014c52:	009b      	lsls	r3, r3, #2
 8014c54:	4413      	add	r3, r2
 8014c56:	009b      	lsls	r3, r3, #2
 8014c58:	4a13      	ldr	r2, [pc, #76]	; (8014ca8 <xTaskRemoveFromEventList+0xb8>)
 8014c5a:	441a      	add	r2, r3
 8014c5c:	693b      	ldr	r3, [r7, #16]
 8014c5e:	3304      	adds	r3, #4
 8014c60:	4619      	mov	r1, r3
 8014c62:	4610      	mov	r0, r2
 8014c64:	f7fe fb6f 	bl	8013346 <vListInsertEnd>
 8014c68:	e005      	b.n	8014c76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014c6a:	693b      	ldr	r3, [r7, #16]
 8014c6c:	3318      	adds	r3, #24
 8014c6e:	4619      	mov	r1, r3
 8014c70:	480e      	ldr	r0, [pc, #56]	; (8014cac <xTaskRemoveFromEventList+0xbc>)
 8014c72:	f7fe fb68 	bl	8013346 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c76:	693b      	ldr	r3, [r7, #16]
 8014c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c7a:	4b0d      	ldr	r3, [pc, #52]	; (8014cb0 <xTaskRemoveFromEventList+0xc0>)
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c80:	429a      	cmp	r2, r3
 8014c82:	d905      	bls.n	8014c90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014c84:	2301      	movs	r3, #1
 8014c86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014c88:	4b0a      	ldr	r3, [pc, #40]	; (8014cb4 <xTaskRemoveFromEventList+0xc4>)
 8014c8a:	2201      	movs	r2, #1
 8014c8c:	601a      	str	r2, [r3, #0]
 8014c8e:	e001      	b.n	8014c94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014c90:	2300      	movs	r3, #0
 8014c92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014c94:	697b      	ldr	r3, [r7, #20]
}
 8014c96:	4618      	mov	r0, r3
 8014c98:	3718      	adds	r7, #24
 8014c9a:	46bd      	mov	sp, r7
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	bf00      	nop
 8014ca0:	24001d04 	.word	0x24001d04
 8014ca4:	24001ce4 	.word	0x24001ce4
 8014ca8:	2400180c 	.word	0x2400180c
 8014cac:	24001c9c 	.word	0x24001c9c
 8014cb0:	24001808 	.word	0x24001808
 8014cb4:	24001cf0 	.word	0x24001cf0

08014cb8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b086      	sub	sp, #24
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	6078      	str	r0, [r7, #4]
 8014cc0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014cc2:	4b29      	ldr	r3, [pc, #164]	; (8014d68 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014cc4:	681b      	ldr	r3, [r3, #0]
 8014cc6:	2b00      	cmp	r3, #0
 8014cc8:	d10a      	bne.n	8014ce0 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cce:	f383 8811 	msr	BASEPRI, r3
 8014cd2:	f3bf 8f6f 	isb	sy
 8014cd6:	f3bf 8f4f 	dsb	sy
 8014cda:	613b      	str	r3, [r7, #16]
}
 8014cdc:	bf00      	nop
 8014cde:	e7fe      	b.n	8014cde <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014ce0:	683b      	ldr	r3, [r7, #0]
 8014ce2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	68db      	ldr	r3, [r3, #12]
 8014cee:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014cf0:	697b      	ldr	r3, [r7, #20]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d10a      	bne.n	8014d0c <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014cfa:	f383 8811 	msr	BASEPRI, r3
 8014cfe:	f3bf 8f6f 	isb	sy
 8014d02:	f3bf 8f4f 	dsb	sy
 8014d06:	60fb      	str	r3, [r7, #12]
}
 8014d08:	bf00      	nop
 8014d0a:	e7fe      	b.n	8014d0a <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f7fe fb77 	bl	8013400 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014d12:	697b      	ldr	r3, [r7, #20]
 8014d14:	3304      	adds	r3, #4
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fe fb72 	bl	8013400 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014d1c:	697b      	ldr	r3, [r7, #20]
 8014d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d20:	4b12      	ldr	r3, [pc, #72]	; (8014d6c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	429a      	cmp	r2, r3
 8014d26:	d903      	bls.n	8014d30 <vTaskRemoveFromUnorderedEventList+0x78>
 8014d28:	697b      	ldr	r3, [r7, #20]
 8014d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d2c:	4a0f      	ldr	r2, [pc, #60]	; (8014d6c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014d2e:	6013      	str	r3, [r2, #0]
 8014d30:	697b      	ldr	r3, [r7, #20]
 8014d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d34:	4613      	mov	r3, r2
 8014d36:	009b      	lsls	r3, r3, #2
 8014d38:	4413      	add	r3, r2
 8014d3a:	009b      	lsls	r3, r3, #2
 8014d3c:	4a0c      	ldr	r2, [pc, #48]	; (8014d70 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014d3e:	441a      	add	r2, r3
 8014d40:	697b      	ldr	r3, [r7, #20]
 8014d42:	3304      	adds	r3, #4
 8014d44:	4619      	mov	r1, r3
 8014d46:	4610      	mov	r0, r2
 8014d48:	f7fe fafd 	bl	8013346 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014d50:	4b08      	ldr	r3, [pc, #32]	; (8014d74 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014d56:	429a      	cmp	r2, r3
 8014d58:	d902      	bls.n	8014d60 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014d5a:	4b07      	ldr	r3, [pc, #28]	; (8014d78 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014d5c:	2201      	movs	r2, #1
 8014d5e:	601a      	str	r2, [r3, #0]
	}
}
 8014d60:	bf00      	nop
 8014d62:	3718      	adds	r7, #24
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	24001d04 	.word	0x24001d04
 8014d6c:	24001ce4 	.word	0x24001ce4
 8014d70:	2400180c 	.word	0x2400180c
 8014d74:	24001808 	.word	0x24001808
 8014d78:	24001cf0 	.word	0x24001cf0

08014d7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014d7c:	b480      	push	{r7}
 8014d7e:	b083      	sub	sp, #12
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014d84:	4b06      	ldr	r3, [pc, #24]	; (8014da0 <vTaskInternalSetTimeOutState+0x24>)
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	687b      	ldr	r3, [r7, #4]
 8014d8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014d8c:	4b05      	ldr	r3, [pc, #20]	; (8014da4 <vTaskInternalSetTimeOutState+0x28>)
 8014d8e:	681a      	ldr	r2, [r3, #0]
 8014d90:	687b      	ldr	r3, [r7, #4]
 8014d92:	605a      	str	r2, [r3, #4]
}
 8014d94:	bf00      	nop
 8014d96:	370c      	adds	r7, #12
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d9e:	4770      	bx	lr
 8014da0:	24001cf4 	.word	0x24001cf4
 8014da4:	24001ce0 	.word	0x24001ce0

08014da8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014da8:	b580      	push	{r7, lr}
 8014daa:	b088      	sub	sp, #32
 8014dac:	af00      	add	r7, sp, #0
 8014dae:	6078      	str	r0, [r7, #4]
 8014db0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d10a      	bne.n	8014dce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dbc:	f383 8811 	msr	BASEPRI, r3
 8014dc0:	f3bf 8f6f 	isb	sy
 8014dc4:	f3bf 8f4f 	dsb	sy
 8014dc8:	613b      	str	r3, [r7, #16]
}
 8014dca:	bf00      	nop
 8014dcc:	e7fe      	b.n	8014dcc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014dce:	683b      	ldr	r3, [r7, #0]
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d10a      	bne.n	8014dea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014dd8:	f383 8811 	msr	BASEPRI, r3
 8014ddc:	f3bf 8f6f 	isb	sy
 8014de0:	f3bf 8f4f 	dsb	sy
 8014de4:	60fb      	str	r3, [r7, #12]
}
 8014de6:	bf00      	nop
 8014de8:	e7fe      	b.n	8014de8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014dea:	f000 feb3 	bl	8015b54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014dee:	4b1d      	ldr	r3, [pc, #116]	; (8014e64 <xTaskCheckForTimeOut+0xbc>)
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014df4:	687b      	ldr	r3, [r7, #4]
 8014df6:	685b      	ldr	r3, [r3, #4]
 8014df8:	69ba      	ldr	r2, [r7, #24]
 8014dfa:	1ad3      	subs	r3, r2, r3
 8014dfc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014dfe:	683b      	ldr	r3, [r7, #0]
 8014e00:	681b      	ldr	r3, [r3, #0]
 8014e02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014e06:	d102      	bne.n	8014e0e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014e08:	2300      	movs	r3, #0
 8014e0a:	61fb      	str	r3, [r7, #28]
 8014e0c:	e023      	b.n	8014e56 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	681a      	ldr	r2, [r3, #0]
 8014e12:	4b15      	ldr	r3, [pc, #84]	; (8014e68 <xTaskCheckForTimeOut+0xc0>)
 8014e14:	681b      	ldr	r3, [r3, #0]
 8014e16:	429a      	cmp	r2, r3
 8014e18:	d007      	beq.n	8014e2a <xTaskCheckForTimeOut+0x82>
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	685b      	ldr	r3, [r3, #4]
 8014e1e:	69ba      	ldr	r2, [r7, #24]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	d302      	bcc.n	8014e2a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014e24:	2301      	movs	r3, #1
 8014e26:	61fb      	str	r3, [r7, #28]
 8014e28:	e015      	b.n	8014e56 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014e2a:	683b      	ldr	r3, [r7, #0]
 8014e2c:	681b      	ldr	r3, [r3, #0]
 8014e2e:	697a      	ldr	r2, [r7, #20]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	d20b      	bcs.n	8014e4c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014e34:	683b      	ldr	r3, [r7, #0]
 8014e36:	681a      	ldr	r2, [r3, #0]
 8014e38:	697b      	ldr	r3, [r7, #20]
 8014e3a:	1ad2      	subs	r2, r2, r3
 8014e3c:	683b      	ldr	r3, [r7, #0]
 8014e3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014e40:	6878      	ldr	r0, [r7, #4]
 8014e42:	f7ff ff9b 	bl	8014d7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014e46:	2300      	movs	r3, #0
 8014e48:	61fb      	str	r3, [r7, #28]
 8014e4a:	e004      	b.n	8014e56 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014e4c:	683b      	ldr	r3, [r7, #0]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014e52:	2301      	movs	r3, #1
 8014e54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014e56:	f000 fead 	bl	8015bb4 <vPortExitCritical>

	return xReturn;
 8014e5a:	69fb      	ldr	r3, [r7, #28]
}
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3720      	adds	r7, #32
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	24001ce0 	.word	0x24001ce0
 8014e68:	24001cf4 	.word	0x24001cf4

08014e6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014e6c:	b480      	push	{r7}
 8014e6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014e70:	4b03      	ldr	r3, [pc, #12]	; (8014e80 <vTaskMissedYield+0x14>)
 8014e72:	2201      	movs	r2, #1
 8014e74:	601a      	str	r2, [r3, #0]
}
 8014e76:	bf00      	nop
 8014e78:	46bd      	mov	sp, r7
 8014e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e7e:	4770      	bx	lr
 8014e80:	24001cf0 	.word	0x24001cf0

08014e84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014e8c:	f000 f852 	bl	8014f34 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014e90:	4b06      	ldr	r3, [pc, #24]	; (8014eac <prvIdleTask+0x28>)
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	2b01      	cmp	r3, #1
 8014e96:	d9f9      	bls.n	8014e8c <prvIdleTask+0x8>
			{
				taskYIELD();
 8014e98:	4b05      	ldr	r3, [pc, #20]	; (8014eb0 <prvIdleTask+0x2c>)
 8014e9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014e9e:	601a      	str	r2, [r3, #0]
 8014ea0:	f3bf 8f4f 	dsb	sy
 8014ea4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014ea8:	e7f0      	b.n	8014e8c <prvIdleTask+0x8>
 8014eaa:	bf00      	nop
 8014eac:	2400180c 	.word	0x2400180c
 8014eb0:	e000ed04 	.word	0xe000ed04

08014eb4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014eb4:	b580      	push	{r7, lr}
 8014eb6:	b082      	sub	sp, #8
 8014eb8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014eba:	2300      	movs	r3, #0
 8014ebc:	607b      	str	r3, [r7, #4]
 8014ebe:	e00c      	b.n	8014eda <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014ec0:	687a      	ldr	r2, [r7, #4]
 8014ec2:	4613      	mov	r3, r2
 8014ec4:	009b      	lsls	r3, r3, #2
 8014ec6:	4413      	add	r3, r2
 8014ec8:	009b      	lsls	r3, r3, #2
 8014eca:	4a12      	ldr	r2, [pc, #72]	; (8014f14 <prvInitialiseTaskLists+0x60>)
 8014ecc:	4413      	add	r3, r2
 8014ece:	4618      	mov	r0, r3
 8014ed0:	f7fe fa0c 	bl	80132ec <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	3301      	adds	r3, #1
 8014ed8:	607b      	str	r3, [r7, #4]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	2b37      	cmp	r3, #55	; 0x37
 8014ede:	d9ef      	bls.n	8014ec0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014ee0:	480d      	ldr	r0, [pc, #52]	; (8014f18 <prvInitialiseTaskLists+0x64>)
 8014ee2:	f7fe fa03 	bl	80132ec <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014ee6:	480d      	ldr	r0, [pc, #52]	; (8014f1c <prvInitialiseTaskLists+0x68>)
 8014ee8:	f7fe fa00 	bl	80132ec <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014eec:	480c      	ldr	r0, [pc, #48]	; (8014f20 <prvInitialiseTaskLists+0x6c>)
 8014eee:	f7fe f9fd 	bl	80132ec <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014ef2:	480c      	ldr	r0, [pc, #48]	; (8014f24 <prvInitialiseTaskLists+0x70>)
 8014ef4:	f7fe f9fa 	bl	80132ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014ef8:	480b      	ldr	r0, [pc, #44]	; (8014f28 <prvInitialiseTaskLists+0x74>)
 8014efa:	f7fe f9f7 	bl	80132ec <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014efe:	4b0b      	ldr	r3, [pc, #44]	; (8014f2c <prvInitialiseTaskLists+0x78>)
 8014f00:	4a05      	ldr	r2, [pc, #20]	; (8014f18 <prvInitialiseTaskLists+0x64>)
 8014f02:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014f04:	4b0a      	ldr	r3, [pc, #40]	; (8014f30 <prvInitialiseTaskLists+0x7c>)
 8014f06:	4a05      	ldr	r2, [pc, #20]	; (8014f1c <prvInitialiseTaskLists+0x68>)
 8014f08:	601a      	str	r2, [r3, #0]
}
 8014f0a:	bf00      	nop
 8014f0c:	3708      	adds	r7, #8
 8014f0e:	46bd      	mov	sp, r7
 8014f10:	bd80      	pop	{r7, pc}
 8014f12:	bf00      	nop
 8014f14:	2400180c 	.word	0x2400180c
 8014f18:	24001c6c 	.word	0x24001c6c
 8014f1c:	24001c80 	.word	0x24001c80
 8014f20:	24001c9c 	.word	0x24001c9c
 8014f24:	24001cb0 	.word	0x24001cb0
 8014f28:	24001cc8 	.word	0x24001cc8
 8014f2c:	24001c94 	.word	0x24001c94
 8014f30:	24001c98 	.word	0x24001c98

08014f34 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f3a:	e019      	b.n	8014f70 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014f3c:	f000 fe0a 	bl	8015b54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014f40:	4b10      	ldr	r3, [pc, #64]	; (8014f84 <prvCheckTasksWaitingTermination+0x50>)
 8014f42:	68db      	ldr	r3, [r3, #12]
 8014f44:	68db      	ldr	r3, [r3, #12]
 8014f46:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	3304      	adds	r3, #4
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	f7fe fa57 	bl	8013400 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014f52:	4b0d      	ldr	r3, [pc, #52]	; (8014f88 <prvCheckTasksWaitingTermination+0x54>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	3b01      	subs	r3, #1
 8014f58:	4a0b      	ldr	r2, [pc, #44]	; (8014f88 <prvCheckTasksWaitingTermination+0x54>)
 8014f5a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014f5c:	4b0b      	ldr	r3, [pc, #44]	; (8014f8c <prvCheckTasksWaitingTermination+0x58>)
 8014f5e:	681b      	ldr	r3, [r3, #0]
 8014f60:	3b01      	subs	r3, #1
 8014f62:	4a0a      	ldr	r2, [pc, #40]	; (8014f8c <prvCheckTasksWaitingTermination+0x58>)
 8014f64:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014f66:	f000 fe25 	bl	8015bb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014f6a:	6878      	ldr	r0, [r7, #4]
 8014f6c:	f000 f810 	bl	8014f90 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014f70:	4b06      	ldr	r3, [pc, #24]	; (8014f8c <prvCheckTasksWaitingTermination+0x58>)
 8014f72:	681b      	ldr	r3, [r3, #0]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d1e1      	bne.n	8014f3c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014f78:	bf00      	nop
 8014f7a:	bf00      	nop
 8014f7c:	3708      	adds	r7, #8
 8014f7e:	46bd      	mov	sp, r7
 8014f80:	bd80      	pop	{r7, pc}
 8014f82:	bf00      	nop
 8014f84:	24001cb0 	.word	0x24001cb0
 8014f88:	24001cdc 	.word	0x24001cdc
 8014f8c:	24001cc4 	.word	0x24001cc4

08014f90 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014f90:	b580      	push	{r7, lr}
 8014f92:	b084      	sub	sp, #16
 8014f94:	af00      	add	r7, sp, #0
 8014f96:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d108      	bne.n	8014fb4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014fa6:	4618      	mov	r0, r3
 8014fa8:	f000 ffc2 	bl	8015f30 <vPortFree>
				vPortFree( pxTCB );
 8014fac:	6878      	ldr	r0, [r7, #4]
 8014fae:	f000 ffbf 	bl	8015f30 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014fb2:	e018      	b.n	8014fe6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014fba:	2b01      	cmp	r3, #1
 8014fbc:	d103      	bne.n	8014fc6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014fbe:	6878      	ldr	r0, [r7, #4]
 8014fc0:	f000 ffb6 	bl	8015f30 <vPortFree>
	}
 8014fc4:	e00f      	b.n	8014fe6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014fcc:	2b02      	cmp	r3, #2
 8014fce:	d00a      	beq.n	8014fe6 <prvDeleteTCB+0x56>
	__asm volatile
 8014fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014fd4:	f383 8811 	msr	BASEPRI, r3
 8014fd8:	f3bf 8f6f 	isb	sy
 8014fdc:	f3bf 8f4f 	dsb	sy
 8014fe0:	60fb      	str	r3, [r7, #12]
}
 8014fe2:	bf00      	nop
 8014fe4:	e7fe      	b.n	8014fe4 <prvDeleteTCB+0x54>
	}
 8014fe6:	bf00      	nop
 8014fe8:	3710      	adds	r7, #16
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bd80      	pop	{r7, pc}
	...

08014ff0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014ff0:	b480      	push	{r7}
 8014ff2:	b083      	sub	sp, #12
 8014ff4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014ff6:	4b0c      	ldr	r3, [pc, #48]	; (8015028 <prvResetNextTaskUnblockTime+0x38>)
 8014ff8:	681b      	ldr	r3, [r3, #0]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	2b00      	cmp	r3, #0
 8014ffe:	d104      	bne.n	801500a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8015000:	4b0a      	ldr	r3, [pc, #40]	; (801502c <prvResetNextTaskUnblockTime+0x3c>)
 8015002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8015006:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8015008:	e008      	b.n	801501c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801500a:	4b07      	ldr	r3, [pc, #28]	; (8015028 <prvResetNextTaskUnblockTime+0x38>)
 801500c:	681b      	ldr	r3, [r3, #0]
 801500e:	68db      	ldr	r3, [r3, #12]
 8015010:	68db      	ldr	r3, [r3, #12]
 8015012:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	685b      	ldr	r3, [r3, #4]
 8015018:	4a04      	ldr	r2, [pc, #16]	; (801502c <prvResetNextTaskUnblockTime+0x3c>)
 801501a:	6013      	str	r3, [r2, #0]
}
 801501c:	bf00      	nop
 801501e:	370c      	adds	r7, #12
 8015020:	46bd      	mov	sp, r7
 8015022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015026:	4770      	bx	lr
 8015028:	24001c94 	.word	0x24001c94
 801502c:	24001cfc 	.word	0x24001cfc

08015030 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8015030:	b480      	push	{r7}
 8015032:	b083      	sub	sp, #12
 8015034:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8015036:	4b0b      	ldr	r3, [pc, #44]	; (8015064 <xTaskGetSchedulerState+0x34>)
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d102      	bne.n	8015044 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801503e:	2301      	movs	r3, #1
 8015040:	607b      	str	r3, [r7, #4]
 8015042:	e008      	b.n	8015056 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8015044:	4b08      	ldr	r3, [pc, #32]	; (8015068 <xTaskGetSchedulerState+0x38>)
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d102      	bne.n	8015052 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801504c:	2302      	movs	r3, #2
 801504e:	607b      	str	r3, [r7, #4]
 8015050:	e001      	b.n	8015056 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8015052:	2300      	movs	r3, #0
 8015054:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8015056:	687b      	ldr	r3, [r7, #4]
	}
 8015058:	4618      	mov	r0, r3
 801505a:	370c      	adds	r7, #12
 801505c:	46bd      	mov	sp, r7
 801505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015062:	4770      	bx	lr
 8015064:	24001ce8 	.word	0x24001ce8
 8015068:	24001d04 	.word	0x24001d04

0801506c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801506c:	b580      	push	{r7, lr}
 801506e:	b086      	sub	sp, #24
 8015070:	af00      	add	r7, sp, #0
 8015072:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8015078:	2300      	movs	r3, #0
 801507a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	2b00      	cmp	r3, #0
 8015080:	d056      	beq.n	8015130 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8015082:	4b2e      	ldr	r3, [pc, #184]	; (801513c <xTaskPriorityDisinherit+0xd0>)
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	693a      	ldr	r2, [r7, #16]
 8015088:	429a      	cmp	r2, r3
 801508a:	d00a      	beq.n	80150a2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 801508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015090:	f383 8811 	msr	BASEPRI, r3
 8015094:	f3bf 8f6f 	isb	sy
 8015098:	f3bf 8f4f 	dsb	sy
 801509c:	60fb      	str	r3, [r7, #12]
}
 801509e:	bf00      	nop
 80150a0:	e7fe      	b.n	80150a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80150a2:	693b      	ldr	r3, [r7, #16]
 80150a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d10a      	bne.n	80150c0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80150aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80150ae:	f383 8811 	msr	BASEPRI, r3
 80150b2:	f3bf 8f6f 	isb	sy
 80150b6:	f3bf 8f4f 	dsb	sy
 80150ba:	60bb      	str	r3, [r7, #8]
}
 80150bc:	bf00      	nop
 80150be:	e7fe      	b.n	80150be <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80150c0:	693b      	ldr	r3, [r7, #16]
 80150c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150c4:	1e5a      	subs	r2, r3, #1
 80150c6:	693b      	ldr	r3, [r7, #16]
 80150c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80150ce:	693b      	ldr	r3, [r7, #16]
 80150d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80150d2:	429a      	cmp	r2, r3
 80150d4:	d02c      	beq.n	8015130 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80150d6:	693b      	ldr	r3, [r7, #16]
 80150d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80150da:	2b00      	cmp	r3, #0
 80150dc:	d128      	bne.n	8015130 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80150de:	693b      	ldr	r3, [r7, #16]
 80150e0:	3304      	adds	r3, #4
 80150e2:	4618      	mov	r0, r3
 80150e4:	f7fe f98c 	bl	8013400 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80150ec:	693b      	ldr	r3, [r7, #16]
 80150ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80150f0:	693b      	ldr	r3, [r7, #16]
 80150f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80150f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80150f8:	693b      	ldr	r3, [r7, #16]
 80150fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015100:	4b0f      	ldr	r3, [pc, #60]	; (8015140 <xTaskPriorityDisinherit+0xd4>)
 8015102:	681b      	ldr	r3, [r3, #0]
 8015104:	429a      	cmp	r2, r3
 8015106:	d903      	bls.n	8015110 <xTaskPriorityDisinherit+0xa4>
 8015108:	693b      	ldr	r3, [r7, #16]
 801510a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801510c:	4a0c      	ldr	r2, [pc, #48]	; (8015140 <xTaskPriorityDisinherit+0xd4>)
 801510e:	6013      	str	r3, [r2, #0]
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015114:	4613      	mov	r3, r2
 8015116:	009b      	lsls	r3, r3, #2
 8015118:	4413      	add	r3, r2
 801511a:	009b      	lsls	r3, r3, #2
 801511c:	4a09      	ldr	r2, [pc, #36]	; (8015144 <xTaskPriorityDisinherit+0xd8>)
 801511e:	441a      	add	r2, r3
 8015120:	693b      	ldr	r3, [r7, #16]
 8015122:	3304      	adds	r3, #4
 8015124:	4619      	mov	r1, r3
 8015126:	4610      	mov	r0, r2
 8015128:	f7fe f90d 	bl	8013346 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801512c:	2301      	movs	r3, #1
 801512e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8015130:	697b      	ldr	r3, [r7, #20]
	}
 8015132:	4618      	mov	r0, r3
 8015134:	3718      	adds	r7, #24
 8015136:	46bd      	mov	sp, r7
 8015138:	bd80      	pop	{r7, pc}
 801513a:	bf00      	nop
 801513c:	24001808 	.word	0x24001808
 8015140:	24001ce4 	.word	0x24001ce4
 8015144:	2400180c 	.word	0x2400180c

08015148 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015148:	b480      	push	{r7}
 801514a:	b083      	sub	sp, #12
 801514c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801514e:	4b09      	ldr	r3, [pc, #36]	; (8015174 <uxTaskResetEventItemValue+0x2c>)
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	699b      	ldr	r3, [r3, #24]
 8015154:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015156:	4b07      	ldr	r3, [pc, #28]	; (8015174 <uxTaskResetEventItemValue+0x2c>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801515c:	4b05      	ldr	r3, [pc, #20]	; (8015174 <uxTaskResetEventItemValue+0x2c>)
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015164:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015166:	687b      	ldr	r3, [r7, #4]
}
 8015168:	4618      	mov	r0, r3
 801516a:	370c      	adds	r7, #12
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr
 8015174:	24001808 	.word	0x24001808

08015178 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
 801517e:	6078      	str	r0, [r7, #4]
 8015180:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8015182:	4b21      	ldr	r3, [pc, #132]	; (8015208 <prvAddCurrentTaskToDelayedList+0x90>)
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015188:	4b20      	ldr	r3, [pc, #128]	; (801520c <prvAddCurrentTaskToDelayedList+0x94>)
 801518a:	681b      	ldr	r3, [r3, #0]
 801518c:	3304      	adds	r3, #4
 801518e:	4618      	mov	r0, r3
 8015190:	f7fe f936 	bl	8013400 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801519a:	d10a      	bne.n	80151b2 <prvAddCurrentTaskToDelayedList+0x3a>
 801519c:	683b      	ldr	r3, [r7, #0]
 801519e:	2b00      	cmp	r3, #0
 80151a0:	d007      	beq.n	80151b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151a2:	4b1a      	ldr	r3, [pc, #104]	; (801520c <prvAddCurrentTaskToDelayedList+0x94>)
 80151a4:	681b      	ldr	r3, [r3, #0]
 80151a6:	3304      	adds	r3, #4
 80151a8:	4619      	mov	r1, r3
 80151aa:	4819      	ldr	r0, [pc, #100]	; (8015210 <prvAddCurrentTaskToDelayedList+0x98>)
 80151ac:	f7fe f8cb 	bl	8013346 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80151b0:	e026      	b.n	8015200 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80151b2:	68fa      	ldr	r2, [r7, #12]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	4413      	add	r3, r2
 80151b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80151ba:	4b14      	ldr	r3, [pc, #80]	; (801520c <prvAddCurrentTaskToDelayedList+0x94>)
 80151bc:	681b      	ldr	r3, [r3, #0]
 80151be:	68ba      	ldr	r2, [r7, #8]
 80151c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80151c2:	68ba      	ldr	r2, [r7, #8]
 80151c4:	68fb      	ldr	r3, [r7, #12]
 80151c6:	429a      	cmp	r2, r3
 80151c8:	d209      	bcs.n	80151de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151ca:	4b12      	ldr	r3, [pc, #72]	; (8015214 <prvAddCurrentTaskToDelayedList+0x9c>)
 80151cc:	681a      	ldr	r2, [r3, #0]
 80151ce:	4b0f      	ldr	r3, [pc, #60]	; (801520c <prvAddCurrentTaskToDelayedList+0x94>)
 80151d0:	681b      	ldr	r3, [r3, #0]
 80151d2:	3304      	adds	r3, #4
 80151d4:	4619      	mov	r1, r3
 80151d6:	4610      	mov	r0, r2
 80151d8:	f7fe f8d9 	bl	801338e <vListInsert>
}
 80151dc:	e010      	b.n	8015200 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80151de:	4b0e      	ldr	r3, [pc, #56]	; (8015218 <prvAddCurrentTaskToDelayedList+0xa0>)
 80151e0:	681a      	ldr	r2, [r3, #0]
 80151e2:	4b0a      	ldr	r3, [pc, #40]	; (801520c <prvAddCurrentTaskToDelayedList+0x94>)
 80151e4:	681b      	ldr	r3, [r3, #0]
 80151e6:	3304      	adds	r3, #4
 80151e8:	4619      	mov	r1, r3
 80151ea:	4610      	mov	r0, r2
 80151ec:	f7fe f8cf 	bl	801338e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80151f0:	4b0a      	ldr	r3, [pc, #40]	; (801521c <prvAddCurrentTaskToDelayedList+0xa4>)
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	68ba      	ldr	r2, [r7, #8]
 80151f6:	429a      	cmp	r2, r3
 80151f8:	d202      	bcs.n	8015200 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80151fa:	4a08      	ldr	r2, [pc, #32]	; (801521c <prvAddCurrentTaskToDelayedList+0xa4>)
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	6013      	str	r3, [r2, #0]
}
 8015200:	bf00      	nop
 8015202:	3710      	adds	r7, #16
 8015204:	46bd      	mov	sp, r7
 8015206:	bd80      	pop	{r7, pc}
 8015208:	24001ce0 	.word	0x24001ce0
 801520c:	24001808 	.word	0x24001808
 8015210:	24001cc8 	.word	0x24001cc8
 8015214:	24001c98 	.word	0x24001c98
 8015218:	24001c94 	.word	0x24001c94
 801521c:	24001cfc 	.word	0x24001cfc

08015220 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8015220:	b580      	push	{r7, lr}
 8015222:	b08a      	sub	sp, #40	; 0x28
 8015224:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8015226:	2300      	movs	r3, #0
 8015228:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 801522a:	f000 fb07 	bl	801583c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801522e:	4b1c      	ldr	r3, [pc, #112]	; (80152a0 <xTimerCreateTimerTask+0x80>)
 8015230:	681b      	ldr	r3, [r3, #0]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d021      	beq.n	801527a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015236:	2300      	movs	r3, #0
 8015238:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 801523a:	2300      	movs	r3, #0
 801523c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801523e:	1d3a      	adds	r2, r7, #4
 8015240:	f107 0108 	add.w	r1, r7, #8
 8015244:	f107 030c 	add.w	r3, r7, #12
 8015248:	4618      	mov	r0, r3
 801524a:	f7fd fe47 	bl	8012edc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801524e:	6879      	ldr	r1, [r7, #4]
 8015250:	68bb      	ldr	r3, [r7, #8]
 8015252:	68fa      	ldr	r2, [r7, #12]
 8015254:	9202      	str	r2, [sp, #8]
 8015256:	9301      	str	r3, [sp, #4]
 8015258:	2302      	movs	r3, #2
 801525a:	9300      	str	r3, [sp, #0]
 801525c:	2300      	movs	r3, #0
 801525e:	460a      	mov	r2, r1
 8015260:	4910      	ldr	r1, [pc, #64]	; (80152a4 <xTimerCreateTimerTask+0x84>)
 8015262:	4811      	ldr	r0, [pc, #68]	; (80152a8 <xTimerCreateTimerTask+0x88>)
 8015264:	f7fe fe9c 	bl	8013fa0 <xTaskCreateStatic>
 8015268:	4603      	mov	r3, r0
 801526a:	4a10      	ldr	r2, [pc, #64]	; (80152ac <xTimerCreateTimerTask+0x8c>)
 801526c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801526e:	4b0f      	ldr	r3, [pc, #60]	; (80152ac <xTimerCreateTimerTask+0x8c>)
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d001      	beq.n	801527a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015276:	2301      	movs	r3, #1
 8015278:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 801527a:	697b      	ldr	r3, [r7, #20]
 801527c:	2b00      	cmp	r3, #0
 801527e:	d10a      	bne.n	8015296 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8015280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015284:	f383 8811 	msr	BASEPRI, r3
 8015288:	f3bf 8f6f 	isb	sy
 801528c:	f3bf 8f4f 	dsb	sy
 8015290:	613b      	str	r3, [r7, #16]
}
 8015292:	bf00      	nop
 8015294:	e7fe      	b.n	8015294 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015296:	697b      	ldr	r3, [r7, #20]
}
 8015298:	4618      	mov	r0, r3
 801529a:	3718      	adds	r7, #24
 801529c:	46bd      	mov	sp, r7
 801529e:	bd80      	pop	{r7, pc}
 80152a0:	24001d38 	.word	0x24001d38
 80152a4:	08016e94 	.word	0x08016e94
 80152a8:	080153e5 	.word	0x080153e5
 80152ac:	24001d3c 	.word	0x24001d3c

080152b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b08a      	sub	sp, #40	; 0x28
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	60f8      	str	r0, [r7, #12]
 80152b8:	60b9      	str	r1, [r7, #8]
 80152ba:	607a      	str	r2, [r7, #4]
 80152bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80152be:	2300      	movs	r3, #0
 80152c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	2b00      	cmp	r3, #0
 80152c6:	d10a      	bne.n	80152de <xTimerGenericCommand+0x2e>
	__asm volatile
 80152c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80152cc:	f383 8811 	msr	BASEPRI, r3
 80152d0:	f3bf 8f6f 	isb	sy
 80152d4:	f3bf 8f4f 	dsb	sy
 80152d8:	623b      	str	r3, [r7, #32]
}
 80152da:	bf00      	nop
 80152dc:	e7fe      	b.n	80152dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80152de:	4b1a      	ldr	r3, [pc, #104]	; (8015348 <xTimerGenericCommand+0x98>)
 80152e0:	681b      	ldr	r3, [r3, #0]
 80152e2:	2b00      	cmp	r3, #0
 80152e4:	d02a      	beq.n	801533c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80152e6:	68bb      	ldr	r3, [r7, #8]
 80152e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80152ee:	68fb      	ldr	r3, [r7, #12]
 80152f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80152f2:	68bb      	ldr	r3, [r7, #8]
 80152f4:	2b05      	cmp	r3, #5
 80152f6:	dc18      	bgt.n	801532a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80152f8:	f7ff fe9a 	bl	8015030 <xTaskGetSchedulerState>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b02      	cmp	r3, #2
 8015300:	d109      	bne.n	8015316 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8015302:	4b11      	ldr	r3, [pc, #68]	; (8015348 <xTimerGenericCommand+0x98>)
 8015304:	6818      	ldr	r0, [r3, #0]
 8015306:	f107 0110 	add.w	r1, r7, #16
 801530a:	2300      	movs	r3, #0
 801530c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801530e:	f7fe f9df 	bl	80136d0 <xQueueGenericSend>
 8015312:	6278      	str	r0, [r7, #36]	; 0x24
 8015314:	e012      	b.n	801533c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8015316:	4b0c      	ldr	r3, [pc, #48]	; (8015348 <xTimerGenericCommand+0x98>)
 8015318:	6818      	ldr	r0, [r3, #0]
 801531a:	f107 0110 	add.w	r1, r7, #16
 801531e:	2300      	movs	r3, #0
 8015320:	2200      	movs	r2, #0
 8015322:	f7fe f9d5 	bl	80136d0 <xQueueGenericSend>
 8015326:	6278      	str	r0, [r7, #36]	; 0x24
 8015328:	e008      	b.n	801533c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801532a:	4b07      	ldr	r3, [pc, #28]	; (8015348 <xTimerGenericCommand+0x98>)
 801532c:	6818      	ldr	r0, [r3, #0]
 801532e:	f107 0110 	add.w	r1, r7, #16
 8015332:	2300      	movs	r3, #0
 8015334:	683a      	ldr	r2, [r7, #0]
 8015336:	f7fe fac9 	bl	80138cc <xQueueGenericSendFromISR>
 801533a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 801533c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801533e:	4618      	mov	r0, r3
 8015340:	3728      	adds	r7, #40	; 0x28
 8015342:	46bd      	mov	sp, r7
 8015344:	bd80      	pop	{r7, pc}
 8015346:	bf00      	nop
 8015348:	24001d38 	.word	0x24001d38

0801534c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 801534c:	b580      	push	{r7, lr}
 801534e:	b088      	sub	sp, #32
 8015350:	af02      	add	r7, sp, #8
 8015352:	6078      	str	r0, [r7, #4]
 8015354:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015356:	4b22      	ldr	r3, [pc, #136]	; (80153e0 <prvProcessExpiredTimer+0x94>)
 8015358:	681b      	ldr	r3, [r3, #0]
 801535a:	68db      	ldr	r3, [r3, #12]
 801535c:	68db      	ldr	r3, [r3, #12]
 801535e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015360:	697b      	ldr	r3, [r7, #20]
 8015362:	3304      	adds	r3, #4
 8015364:	4618      	mov	r0, r3
 8015366:	f7fe f84b 	bl	8013400 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801536a:	697b      	ldr	r3, [r7, #20]
 801536c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015370:	f003 0304 	and.w	r3, r3, #4
 8015374:	2b00      	cmp	r3, #0
 8015376:	d022      	beq.n	80153be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015378:	697b      	ldr	r3, [r7, #20]
 801537a:	699a      	ldr	r2, [r3, #24]
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	18d1      	adds	r1, r2, r3
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	683a      	ldr	r2, [r7, #0]
 8015384:	6978      	ldr	r0, [r7, #20]
 8015386:	f000 f8d1 	bl	801552c <prvInsertTimerInActiveList>
 801538a:	4603      	mov	r3, r0
 801538c:	2b00      	cmp	r3, #0
 801538e:	d01f      	beq.n	80153d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8015390:	2300      	movs	r3, #0
 8015392:	9300      	str	r3, [sp, #0]
 8015394:	2300      	movs	r3, #0
 8015396:	687a      	ldr	r2, [r7, #4]
 8015398:	2100      	movs	r1, #0
 801539a:	6978      	ldr	r0, [r7, #20]
 801539c:	f7ff ff88 	bl	80152b0 <xTimerGenericCommand>
 80153a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80153a2:	693b      	ldr	r3, [r7, #16]
 80153a4:	2b00      	cmp	r3, #0
 80153a6:	d113      	bne.n	80153d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80153a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80153ac:	f383 8811 	msr	BASEPRI, r3
 80153b0:	f3bf 8f6f 	isb	sy
 80153b4:	f3bf 8f4f 	dsb	sy
 80153b8:	60fb      	str	r3, [r7, #12]
}
 80153ba:	bf00      	nop
 80153bc:	e7fe      	b.n	80153bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80153be:	697b      	ldr	r3, [r7, #20]
 80153c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80153c4:	f023 0301 	bic.w	r3, r3, #1
 80153c8:	b2da      	uxtb	r2, r3
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80153d0:	697b      	ldr	r3, [r7, #20]
 80153d2:	6a1b      	ldr	r3, [r3, #32]
 80153d4:	6978      	ldr	r0, [r7, #20]
 80153d6:	4798      	blx	r3
}
 80153d8:	bf00      	nop
 80153da:	3718      	adds	r7, #24
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	24001d30 	.word	0x24001d30

080153e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b084      	sub	sp, #16
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80153ec:	f107 0308 	add.w	r3, r7, #8
 80153f0:	4618      	mov	r0, r3
 80153f2:	f000 f857 	bl	80154a4 <prvGetNextExpireTime>
 80153f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80153f8:	68bb      	ldr	r3, [r7, #8]
 80153fa:	4619      	mov	r1, r3
 80153fc:	68f8      	ldr	r0, [r7, #12]
 80153fe:	f000 f803 	bl	8015408 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8015402:	f000 f8d5 	bl	80155b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8015406:	e7f1      	b.n	80153ec <prvTimerTask+0x8>

08015408 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8015408:	b580      	push	{r7, lr}
 801540a:	b084      	sub	sp, #16
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8015412:	f7ff f98d 	bl	8014730 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8015416:	f107 0308 	add.w	r3, r7, #8
 801541a:	4618      	mov	r0, r3
 801541c:	f000 f866 	bl	80154ec <prvSampleTimeNow>
 8015420:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8015422:	68bb      	ldr	r3, [r7, #8]
 8015424:	2b00      	cmp	r3, #0
 8015426:	d130      	bne.n	801548a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8015428:	683b      	ldr	r3, [r7, #0]
 801542a:	2b00      	cmp	r3, #0
 801542c:	d10a      	bne.n	8015444 <prvProcessTimerOrBlockTask+0x3c>
 801542e:	687a      	ldr	r2, [r7, #4]
 8015430:	68fb      	ldr	r3, [r7, #12]
 8015432:	429a      	cmp	r2, r3
 8015434:	d806      	bhi.n	8015444 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015436:	f7ff f989 	bl	801474c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 801543a:	68f9      	ldr	r1, [r7, #12]
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f7ff ff85 	bl	801534c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8015442:	e024      	b.n	801548e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	2b00      	cmp	r3, #0
 8015448:	d008      	beq.n	801545c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 801544a:	4b13      	ldr	r3, [pc, #76]	; (8015498 <prvProcessTimerOrBlockTask+0x90>)
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	681b      	ldr	r3, [r3, #0]
 8015450:	2b00      	cmp	r3, #0
 8015452:	d101      	bne.n	8015458 <prvProcessTimerOrBlockTask+0x50>
 8015454:	2301      	movs	r3, #1
 8015456:	e000      	b.n	801545a <prvProcessTimerOrBlockTask+0x52>
 8015458:	2300      	movs	r3, #0
 801545a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 801545c:	4b0f      	ldr	r3, [pc, #60]	; (801549c <prvProcessTimerOrBlockTask+0x94>)
 801545e:	6818      	ldr	r0, [r3, #0]
 8015460:	687a      	ldr	r2, [r7, #4]
 8015462:	68fb      	ldr	r3, [r7, #12]
 8015464:	1ad3      	subs	r3, r2, r3
 8015466:	683a      	ldr	r2, [r7, #0]
 8015468:	4619      	mov	r1, r3
 801546a:	f7fe fd65 	bl	8013f38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801546e:	f7ff f96d 	bl	801474c <xTaskResumeAll>
 8015472:	4603      	mov	r3, r0
 8015474:	2b00      	cmp	r3, #0
 8015476:	d10a      	bne.n	801548e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015478:	4b09      	ldr	r3, [pc, #36]	; (80154a0 <prvProcessTimerOrBlockTask+0x98>)
 801547a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801547e:	601a      	str	r2, [r3, #0]
 8015480:	f3bf 8f4f 	dsb	sy
 8015484:	f3bf 8f6f 	isb	sy
}
 8015488:	e001      	b.n	801548e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 801548a:	f7ff f95f 	bl	801474c <xTaskResumeAll>
}
 801548e:	bf00      	nop
 8015490:	3710      	adds	r7, #16
 8015492:	46bd      	mov	sp, r7
 8015494:	bd80      	pop	{r7, pc}
 8015496:	bf00      	nop
 8015498:	24001d34 	.word	0x24001d34
 801549c:	24001d38 	.word	0x24001d38
 80154a0:	e000ed04 	.word	0xe000ed04

080154a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80154a4:	b480      	push	{r7}
 80154a6:	b085      	sub	sp, #20
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80154ac:	4b0e      	ldr	r3, [pc, #56]	; (80154e8 <prvGetNextExpireTime+0x44>)
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	2b00      	cmp	r3, #0
 80154b4:	d101      	bne.n	80154ba <prvGetNextExpireTime+0x16>
 80154b6:	2201      	movs	r2, #1
 80154b8:	e000      	b.n	80154bc <prvGetNextExpireTime+0x18>
 80154ba:	2200      	movs	r2, #0
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	2b00      	cmp	r3, #0
 80154c6:	d105      	bne.n	80154d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80154c8:	4b07      	ldr	r3, [pc, #28]	; (80154e8 <prvGetNextExpireTime+0x44>)
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	68db      	ldr	r3, [r3, #12]
 80154ce:	681b      	ldr	r3, [r3, #0]
 80154d0:	60fb      	str	r3, [r7, #12]
 80154d2:	e001      	b.n	80154d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80154d4:	2300      	movs	r3, #0
 80154d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80154d8:	68fb      	ldr	r3, [r7, #12]
}
 80154da:	4618      	mov	r0, r3
 80154dc:	3714      	adds	r7, #20
 80154de:	46bd      	mov	sp, r7
 80154e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154e4:	4770      	bx	lr
 80154e6:	bf00      	nop
 80154e8:	24001d30 	.word	0x24001d30

080154ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80154ec:	b580      	push	{r7, lr}
 80154ee:	b084      	sub	sp, #16
 80154f0:	af00      	add	r7, sp, #0
 80154f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80154f4:	f7ff f9c8 	bl	8014888 <xTaskGetTickCount>
 80154f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80154fa:	4b0b      	ldr	r3, [pc, #44]	; (8015528 <prvSampleTimeNow+0x3c>)
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	68fa      	ldr	r2, [r7, #12]
 8015500:	429a      	cmp	r2, r3
 8015502:	d205      	bcs.n	8015510 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8015504:	f000 f936 	bl	8015774 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8015508:	687b      	ldr	r3, [r7, #4]
 801550a:	2201      	movs	r2, #1
 801550c:	601a      	str	r2, [r3, #0]
 801550e:	e002      	b.n	8015516 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8015510:	687b      	ldr	r3, [r7, #4]
 8015512:	2200      	movs	r2, #0
 8015514:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8015516:	4a04      	ldr	r2, [pc, #16]	; (8015528 <prvSampleTimeNow+0x3c>)
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 801551c:	68fb      	ldr	r3, [r7, #12]
}
 801551e:	4618      	mov	r0, r3
 8015520:	3710      	adds	r7, #16
 8015522:	46bd      	mov	sp, r7
 8015524:	bd80      	pop	{r7, pc}
 8015526:	bf00      	nop
 8015528:	24001d40 	.word	0x24001d40

0801552c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 801552c:	b580      	push	{r7, lr}
 801552e:	b086      	sub	sp, #24
 8015530:	af00      	add	r7, sp, #0
 8015532:	60f8      	str	r0, [r7, #12]
 8015534:	60b9      	str	r1, [r7, #8]
 8015536:	607a      	str	r2, [r7, #4]
 8015538:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 801553a:	2300      	movs	r3, #0
 801553c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	68ba      	ldr	r2, [r7, #8]
 8015542:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	68fa      	ldr	r2, [r7, #12]
 8015548:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 801554a:	68ba      	ldr	r2, [r7, #8]
 801554c:	687b      	ldr	r3, [r7, #4]
 801554e:	429a      	cmp	r2, r3
 8015550:	d812      	bhi.n	8015578 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015552:	687a      	ldr	r2, [r7, #4]
 8015554:	683b      	ldr	r3, [r7, #0]
 8015556:	1ad2      	subs	r2, r2, r3
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	699b      	ldr	r3, [r3, #24]
 801555c:	429a      	cmp	r2, r3
 801555e:	d302      	bcc.n	8015566 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8015560:	2301      	movs	r3, #1
 8015562:	617b      	str	r3, [r7, #20]
 8015564:	e01b      	b.n	801559e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015566:	4b10      	ldr	r3, [pc, #64]	; (80155a8 <prvInsertTimerInActiveList+0x7c>)
 8015568:	681a      	ldr	r2, [r3, #0]
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	3304      	adds	r3, #4
 801556e:	4619      	mov	r1, r3
 8015570:	4610      	mov	r0, r2
 8015572:	f7fd ff0c 	bl	801338e <vListInsert>
 8015576:	e012      	b.n	801559e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015578:	687a      	ldr	r2, [r7, #4]
 801557a:	683b      	ldr	r3, [r7, #0]
 801557c:	429a      	cmp	r2, r3
 801557e:	d206      	bcs.n	801558e <prvInsertTimerInActiveList+0x62>
 8015580:	68ba      	ldr	r2, [r7, #8]
 8015582:	683b      	ldr	r3, [r7, #0]
 8015584:	429a      	cmp	r2, r3
 8015586:	d302      	bcc.n	801558e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015588:	2301      	movs	r3, #1
 801558a:	617b      	str	r3, [r7, #20]
 801558c:	e007      	b.n	801559e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801558e:	4b07      	ldr	r3, [pc, #28]	; (80155ac <prvInsertTimerInActiveList+0x80>)
 8015590:	681a      	ldr	r2, [r3, #0]
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	3304      	adds	r3, #4
 8015596:	4619      	mov	r1, r3
 8015598:	4610      	mov	r0, r2
 801559a:	f7fd fef8 	bl	801338e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801559e:	697b      	ldr	r3, [r7, #20]
}
 80155a0:	4618      	mov	r0, r3
 80155a2:	3718      	adds	r7, #24
 80155a4:	46bd      	mov	sp, r7
 80155a6:	bd80      	pop	{r7, pc}
 80155a8:	24001d34 	.word	0x24001d34
 80155ac:	24001d30 	.word	0x24001d30

080155b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b08e      	sub	sp, #56	; 0x38
 80155b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80155b6:	e0ca      	b.n	801574e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	da18      	bge.n	80155f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80155be:	1d3b      	adds	r3, r7, #4
 80155c0:	3304      	adds	r3, #4
 80155c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80155c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d10a      	bne.n	80155e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80155ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155ce:	f383 8811 	msr	BASEPRI, r3
 80155d2:	f3bf 8f6f 	isb	sy
 80155d6:	f3bf 8f4f 	dsb	sy
 80155da:	61fb      	str	r3, [r7, #28]
}
 80155dc:	bf00      	nop
 80155de:	e7fe      	b.n	80155de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80155e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155e2:	681b      	ldr	r3, [r3, #0]
 80155e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155e6:	6850      	ldr	r0, [r2, #4]
 80155e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80155ea:	6892      	ldr	r2, [r2, #8]
 80155ec:	4611      	mov	r1, r2
 80155ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	f2c0 80aa 	blt.w	801574c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80155fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155fe:	695b      	ldr	r3, [r3, #20]
 8015600:	2b00      	cmp	r3, #0
 8015602:	d004      	beq.n	801560e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015606:	3304      	adds	r3, #4
 8015608:	4618      	mov	r0, r3
 801560a:	f7fd fef9 	bl	8013400 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801560e:	463b      	mov	r3, r7
 8015610:	4618      	mov	r0, r3
 8015612:	f7ff ff6b 	bl	80154ec <prvSampleTimeNow>
 8015616:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2b09      	cmp	r3, #9
 801561c:	f200 8097 	bhi.w	801574e <prvProcessReceivedCommands+0x19e>
 8015620:	a201      	add	r2, pc, #4	; (adr r2, 8015628 <prvProcessReceivedCommands+0x78>)
 8015622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015626:	bf00      	nop
 8015628:	08015651 	.word	0x08015651
 801562c:	08015651 	.word	0x08015651
 8015630:	08015651 	.word	0x08015651
 8015634:	080156c5 	.word	0x080156c5
 8015638:	080156d9 	.word	0x080156d9
 801563c:	08015723 	.word	0x08015723
 8015640:	08015651 	.word	0x08015651
 8015644:	08015651 	.word	0x08015651
 8015648:	080156c5 	.word	0x080156c5
 801564c:	080156d9 	.word	0x080156d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8015650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015652:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015656:	f043 0301 	orr.w	r3, r3, #1
 801565a:	b2da      	uxtb	r2, r3
 801565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801565e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8015662:	68ba      	ldr	r2, [r7, #8]
 8015664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015666:	699b      	ldr	r3, [r3, #24]
 8015668:	18d1      	adds	r1, r2, r3
 801566a:	68bb      	ldr	r3, [r7, #8]
 801566c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801566e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015670:	f7ff ff5c 	bl	801552c <prvInsertTimerInActiveList>
 8015674:	4603      	mov	r3, r0
 8015676:	2b00      	cmp	r3, #0
 8015678:	d069      	beq.n	801574e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801567c:	6a1b      	ldr	r3, [r3, #32]
 801567e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015680:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015688:	f003 0304 	and.w	r3, r3, #4
 801568c:	2b00      	cmp	r3, #0
 801568e:	d05e      	beq.n	801574e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8015690:	68ba      	ldr	r2, [r7, #8]
 8015692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015694:	699b      	ldr	r3, [r3, #24]
 8015696:	441a      	add	r2, r3
 8015698:	2300      	movs	r3, #0
 801569a:	9300      	str	r3, [sp, #0]
 801569c:	2300      	movs	r3, #0
 801569e:	2100      	movs	r1, #0
 80156a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80156a2:	f7ff fe05 	bl	80152b0 <xTimerGenericCommand>
 80156a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80156a8:	6a3b      	ldr	r3, [r7, #32]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d14f      	bne.n	801574e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80156ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156b2:	f383 8811 	msr	BASEPRI, r3
 80156b6:	f3bf 8f6f 	isb	sy
 80156ba:	f3bf 8f4f 	dsb	sy
 80156be:	61bb      	str	r3, [r7, #24]
}
 80156c0:	bf00      	nop
 80156c2:	e7fe      	b.n	80156c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80156c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156ca:	f023 0301 	bic.w	r3, r3, #1
 80156ce:	b2da      	uxtb	r2, r3
 80156d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80156d6:	e03a      	b.n	801574e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80156d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80156de:	f043 0301 	orr.w	r3, r3, #1
 80156e2:	b2da      	uxtb	r2, r3
 80156e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80156ea:	68ba      	ldr	r2, [r7, #8]
 80156ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80156f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156f2:	699b      	ldr	r3, [r3, #24]
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d10a      	bne.n	801570e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80156f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156fc:	f383 8811 	msr	BASEPRI, r3
 8015700:	f3bf 8f6f 	isb	sy
 8015704:	f3bf 8f4f 	dsb	sy
 8015708:	617b      	str	r3, [r7, #20]
}
 801570a:	bf00      	nop
 801570c:	e7fe      	b.n	801570c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 801570e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015710:	699a      	ldr	r2, [r3, #24]
 8015712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015714:	18d1      	adds	r1, r2, r3
 8015716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801571a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801571c:	f7ff ff06 	bl	801552c <prvInsertTimerInActiveList>
					break;
 8015720:	e015      	b.n	801574e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8015722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015728:	f003 0302 	and.w	r3, r3, #2
 801572c:	2b00      	cmp	r3, #0
 801572e:	d103      	bne.n	8015738 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8015730:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015732:	f000 fbfd 	bl	8015f30 <vPortFree>
 8015736:	e00a      	b.n	801574e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801573e:	f023 0301 	bic.w	r3, r3, #1
 8015742:	b2da      	uxtb	r2, r3
 8015744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015746:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801574a:	e000      	b.n	801574e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 801574c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801574e:	4b08      	ldr	r3, [pc, #32]	; (8015770 <prvProcessReceivedCommands+0x1c0>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	1d39      	adds	r1, r7, #4
 8015754:	2200      	movs	r2, #0
 8015756:	4618      	mov	r0, r3
 8015758:	f7fe f954 	bl	8013a04 <xQueueReceive>
 801575c:	4603      	mov	r3, r0
 801575e:	2b00      	cmp	r3, #0
 8015760:	f47f af2a 	bne.w	80155b8 <prvProcessReceivedCommands+0x8>
	}
}
 8015764:	bf00      	nop
 8015766:	bf00      	nop
 8015768:	3730      	adds	r7, #48	; 0x30
 801576a:	46bd      	mov	sp, r7
 801576c:	bd80      	pop	{r7, pc}
 801576e:	bf00      	nop
 8015770:	24001d38 	.word	0x24001d38

08015774 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015774:	b580      	push	{r7, lr}
 8015776:	b088      	sub	sp, #32
 8015778:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801577a:	e048      	b.n	801580e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 801577c:	4b2d      	ldr	r3, [pc, #180]	; (8015834 <prvSwitchTimerLists+0xc0>)
 801577e:	681b      	ldr	r3, [r3, #0]
 8015780:	68db      	ldr	r3, [r3, #12]
 8015782:	681b      	ldr	r3, [r3, #0]
 8015784:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015786:	4b2b      	ldr	r3, [pc, #172]	; (8015834 <prvSwitchTimerLists+0xc0>)
 8015788:	681b      	ldr	r3, [r3, #0]
 801578a:	68db      	ldr	r3, [r3, #12]
 801578c:	68db      	ldr	r3, [r3, #12]
 801578e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	3304      	adds	r3, #4
 8015794:	4618      	mov	r0, r3
 8015796:	f7fd fe33 	bl	8013400 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	6a1b      	ldr	r3, [r3, #32]
 801579e:	68f8      	ldr	r0, [r7, #12]
 80157a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80157a8:	f003 0304 	and.w	r3, r3, #4
 80157ac:	2b00      	cmp	r3, #0
 80157ae:	d02e      	beq.n	801580e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80157b0:	68fb      	ldr	r3, [r7, #12]
 80157b2:	699b      	ldr	r3, [r3, #24]
 80157b4:	693a      	ldr	r2, [r7, #16]
 80157b6:	4413      	add	r3, r2
 80157b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80157ba:	68ba      	ldr	r2, [r7, #8]
 80157bc:	693b      	ldr	r3, [r7, #16]
 80157be:	429a      	cmp	r2, r3
 80157c0:	d90e      	bls.n	80157e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	68ba      	ldr	r2, [r7, #8]
 80157c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80157c8:	68fb      	ldr	r3, [r7, #12]
 80157ca:	68fa      	ldr	r2, [r7, #12]
 80157cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80157ce:	4b19      	ldr	r3, [pc, #100]	; (8015834 <prvSwitchTimerLists+0xc0>)
 80157d0:	681a      	ldr	r2, [r3, #0]
 80157d2:	68fb      	ldr	r3, [r7, #12]
 80157d4:	3304      	adds	r3, #4
 80157d6:	4619      	mov	r1, r3
 80157d8:	4610      	mov	r0, r2
 80157da:	f7fd fdd8 	bl	801338e <vListInsert>
 80157de:	e016      	b.n	801580e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80157e0:	2300      	movs	r3, #0
 80157e2:	9300      	str	r3, [sp, #0]
 80157e4:	2300      	movs	r3, #0
 80157e6:	693a      	ldr	r2, [r7, #16]
 80157e8:	2100      	movs	r1, #0
 80157ea:	68f8      	ldr	r0, [r7, #12]
 80157ec:	f7ff fd60 	bl	80152b0 <xTimerGenericCommand>
 80157f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d10a      	bne.n	801580e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80157f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80157fc:	f383 8811 	msr	BASEPRI, r3
 8015800:	f3bf 8f6f 	isb	sy
 8015804:	f3bf 8f4f 	dsb	sy
 8015808:	603b      	str	r3, [r7, #0]
}
 801580a:	bf00      	nop
 801580c:	e7fe      	b.n	801580c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801580e:	4b09      	ldr	r3, [pc, #36]	; (8015834 <prvSwitchTimerLists+0xc0>)
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	681b      	ldr	r3, [r3, #0]
 8015814:	2b00      	cmp	r3, #0
 8015816:	d1b1      	bne.n	801577c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8015818:	4b06      	ldr	r3, [pc, #24]	; (8015834 <prvSwitchTimerLists+0xc0>)
 801581a:	681b      	ldr	r3, [r3, #0]
 801581c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 801581e:	4b06      	ldr	r3, [pc, #24]	; (8015838 <prvSwitchTimerLists+0xc4>)
 8015820:	681b      	ldr	r3, [r3, #0]
 8015822:	4a04      	ldr	r2, [pc, #16]	; (8015834 <prvSwitchTimerLists+0xc0>)
 8015824:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8015826:	4a04      	ldr	r2, [pc, #16]	; (8015838 <prvSwitchTimerLists+0xc4>)
 8015828:	697b      	ldr	r3, [r7, #20]
 801582a:	6013      	str	r3, [r2, #0]
}
 801582c:	bf00      	nop
 801582e:	3718      	adds	r7, #24
 8015830:	46bd      	mov	sp, r7
 8015832:	bd80      	pop	{r7, pc}
 8015834:	24001d30 	.word	0x24001d30
 8015838:	24001d34 	.word	0x24001d34

0801583c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b082      	sub	sp, #8
 8015840:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8015842:	f000 f987 	bl	8015b54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015846:	4b15      	ldr	r3, [pc, #84]	; (801589c <prvCheckForValidListAndQueue+0x60>)
 8015848:	681b      	ldr	r3, [r3, #0]
 801584a:	2b00      	cmp	r3, #0
 801584c:	d120      	bne.n	8015890 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801584e:	4814      	ldr	r0, [pc, #80]	; (80158a0 <prvCheckForValidListAndQueue+0x64>)
 8015850:	f7fd fd4c 	bl	80132ec <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015854:	4813      	ldr	r0, [pc, #76]	; (80158a4 <prvCheckForValidListAndQueue+0x68>)
 8015856:	f7fd fd49 	bl	80132ec <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 801585a:	4b13      	ldr	r3, [pc, #76]	; (80158a8 <prvCheckForValidListAndQueue+0x6c>)
 801585c:	4a10      	ldr	r2, [pc, #64]	; (80158a0 <prvCheckForValidListAndQueue+0x64>)
 801585e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8015860:	4b12      	ldr	r3, [pc, #72]	; (80158ac <prvCheckForValidListAndQueue+0x70>)
 8015862:	4a10      	ldr	r2, [pc, #64]	; (80158a4 <prvCheckForValidListAndQueue+0x68>)
 8015864:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015866:	2300      	movs	r3, #0
 8015868:	9300      	str	r3, [sp, #0]
 801586a:	4b11      	ldr	r3, [pc, #68]	; (80158b0 <prvCheckForValidListAndQueue+0x74>)
 801586c:	4a11      	ldr	r2, [pc, #68]	; (80158b4 <prvCheckForValidListAndQueue+0x78>)
 801586e:	2110      	movs	r1, #16
 8015870:	200a      	movs	r0, #10
 8015872:	f7fd fe57 	bl	8013524 <xQueueGenericCreateStatic>
 8015876:	4603      	mov	r3, r0
 8015878:	4a08      	ldr	r2, [pc, #32]	; (801589c <prvCheckForValidListAndQueue+0x60>)
 801587a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 801587c:	4b07      	ldr	r3, [pc, #28]	; (801589c <prvCheckForValidListAndQueue+0x60>)
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	2b00      	cmp	r3, #0
 8015882:	d005      	beq.n	8015890 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015884:	4b05      	ldr	r3, [pc, #20]	; (801589c <prvCheckForValidListAndQueue+0x60>)
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	490b      	ldr	r1, [pc, #44]	; (80158b8 <prvCheckForValidListAndQueue+0x7c>)
 801588a:	4618      	mov	r0, r3
 801588c:	f7fe fb2a 	bl	8013ee4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8015890:	f000 f990 	bl	8015bb4 <vPortExitCritical>
}
 8015894:	bf00      	nop
 8015896:	46bd      	mov	sp, r7
 8015898:	bd80      	pop	{r7, pc}
 801589a:	bf00      	nop
 801589c:	24001d38 	.word	0x24001d38
 80158a0:	24001d08 	.word	0x24001d08
 80158a4:	24001d1c 	.word	0x24001d1c
 80158a8:	24001d30 	.word	0x24001d30
 80158ac:	24001d34 	.word	0x24001d34
 80158b0:	24001de4 	.word	0x24001de4
 80158b4:	24001d44 	.word	0x24001d44
 80158b8:	08016e9c 	.word	0x08016e9c

080158bc <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b08a      	sub	sp, #40	; 0x28
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	60f8      	str	r0, [r7, #12]
 80158c4:	60b9      	str	r1, [r7, #8]
 80158c6:	607a      	str	r2, [r7, #4]
 80158c8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80158ca:	f06f 0301 	mvn.w	r3, #1
 80158ce:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80158d4:	68bb      	ldr	r3, [r7, #8]
 80158d6:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80158dc:	4b06      	ldr	r3, [pc, #24]	; (80158f8 <xTimerPendFunctionCallFromISR+0x3c>)
 80158de:	6818      	ldr	r0, [r3, #0]
 80158e0:	f107 0114 	add.w	r1, r7, #20
 80158e4:	2300      	movs	r3, #0
 80158e6:	683a      	ldr	r2, [r7, #0]
 80158e8:	f7fd fff0 	bl	80138cc <xQueueGenericSendFromISR>
 80158ec:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80158ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80158f0:	4618      	mov	r0, r3
 80158f2:	3728      	adds	r7, #40	; 0x28
 80158f4:	46bd      	mov	sp, r7
 80158f6:	bd80      	pop	{r7, pc}
 80158f8:	24001d38 	.word	0x24001d38

080158fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80158fc:	b480      	push	{r7}
 80158fe:	b085      	sub	sp, #20
 8015900:	af00      	add	r7, sp, #0
 8015902:	60f8      	str	r0, [r7, #12]
 8015904:	60b9      	str	r1, [r7, #8]
 8015906:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	3b04      	subs	r3, #4
 801590c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801590e:	68fb      	ldr	r3, [r7, #12]
 8015910:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8015914:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	3b04      	subs	r3, #4
 801591a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801591c:	68bb      	ldr	r3, [r7, #8]
 801591e:	f023 0201 	bic.w	r2, r3, #1
 8015922:	68fb      	ldr	r3, [r7, #12]
 8015924:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8015926:	68fb      	ldr	r3, [r7, #12]
 8015928:	3b04      	subs	r3, #4
 801592a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801592c:	4a0c      	ldr	r2, [pc, #48]	; (8015960 <pxPortInitialiseStack+0x64>)
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8015932:	68fb      	ldr	r3, [r7, #12]
 8015934:	3b14      	subs	r3, #20
 8015936:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015938:	687a      	ldr	r2, [r7, #4]
 801593a:	68fb      	ldr	r3, [r7, #12]
 801593c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801593e:	68fb      	ldr	r3, [r7, #12]
 8015940:	3b04      	subs	r3, #4
 8015942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015944:	68fb      	ldr	r3, [r7, #12]
 8015946:	f06f 0202 	mvn.w	r2, #2
 801594a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801594c:	68fb      	ldr	r3, [r7, #12]
 801594e:	3b20      	subs	r3, #32
 8015950:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8015952:	68fb      	ldr	r3, [r7, #12]
}
 8015954:	4618      	mov	r0, r3
 8015956:	3714      	adds	r7, #20
 8015958:	46bd      	mov	sp, r7
 801595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801595e:	4770      	bx	lr
 8015960:	08015965 	.word	0x08015965

08015964 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015964:	b480      	push	{r7}
 8015966:	b085      	sub	sp, #20
 8015968:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801596a:	2300      	movs	r3, #0
 801596c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801596e:	4b12      	ldr	r3, [pc, #72]	; (80159b8 <prvTaskExitError+0x54>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015976:	d00a      	beq.n	801598e <prvTaskExitError+0x2a>
	__asm volatile
 8015978:	f04f 0350 	mov.w	r3, #80	; 0x50
 801597c:	f383 8811 	msr	BASEPRI, r3
 8015980:	f3bf 8f6f 	isb	sy
 8015984:	f3bf 8f4f 	dsb	sy
 8015988:	60fb      	str	r3, [r7, #12]
}
 801598a:	bf00      	nop
 801598c:	e7fe      	b.n	801598c <prvTaskExitError+0x28>
	__asm volatile
 801598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015992:	f383 8811 	msr	BASEPRI, r3
 8015996:	f3bf 8f6f 	isb	sy
 801599a:	f3bf 8f4f 	dsb	sy
 801599e:	60bb      	str	r3, [r7, #8]
}
 80159a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80159a2:	bf00      	nop
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d0fc      	beq.n	80159a4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80159aa:	bf00      	nop
 80159ac:	bf00      	nop
 80159ae:	3714      	adds	r7, #20
 80159b0:	46bd      	mov	sp, r7
 80159b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b6:	4770      	bx	lr
 80159b8:	240000a0 	.word	0x240000a0
 80159bc:	00000000 	.word	0x00000000

080159c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80159c0:	4b07      	ldr	r3, [pc, #28]	; (80159e0 <pxCurrentTCBConst2>)
 80159c2:	6819      	ldr	r1, [r3, #0]
 80159c4:	6808      	ldr	r0, [r1, #0]
 80159c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159ca:	f380 8809 	msr	PSP, r0
 80159ce:	f3bf 8f6f 	isb	sy
 80159d2:	f04f 0000 	mov.w	r0, #0
 80159d6:	f380 8811 	msr	BASEPRI, r0
 80159da:	4770      	bx	lr
 80159dc:	f3af 8000 	nop.w

080159e0 <pxCurrentTCBConst2>:
 80159e0:	24001808 	.word	0x24001808
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80159e4:	bf00      	nop
 80159e6:	bf00      	nop

080159e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80159e8:	4808      	ldr	r0, [pc, #32]	; (8015a0c <prvPortStartFirstTask+0x24>)
 80159ea:	6800      	ldr	r0, [r0, #0]
 80159ec:	6800      	ldr	r0, [r0, #0]
 80159ee:	f380 8808 	msr	MSP, r0
 80159f2:	f04f 0000 	mov.w	r0, #0
 80159f6:	f380 8814 	msr	CONTROL, r0
 80159fa:	b662      	cpsie	i
 80159fc:	b661      	cpsie	f
 80159fe:	f3bf 8f4f 	dsb	sy
 8015a02:	f3bf 8f6f 	isb	sy
 8015a06:	df00      	svc	0
 8015a08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8015a0a:	bf00      	nop
 8015a0c:	e000ed08 	.word	0xe000ed08

08015a10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8015a10:	b580      	push	{r7, lr}
 8015a12:	b086      	sub	sp, #24
 8015a14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8015a16:	4b46      	ldr	r3, [pc, #280]	; (8015b30 <xPortStartScheduler+0x120>)
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	4a46      	ldr	r2, [pc, #280]	; (8015b34 <xPortStartScheduler+0x124>)
 8015a1c:	4293      	cmp	r3, r2
 8015a1e:	d10a      	bne.n	8015a36 <xPortStartScheduler+0x26>
	__asm volatile
 8015a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a24:	f383 8811 	msr	BASEPRI, r3
 8015a28:	f3bf 8f6f 	isb	sy
 8015a2c:	f3bf 8f4f 	dsb	sy
 8015a30:	613b      	str	r3, [r7, #16]
}
 8015a32:	bf00      	nop
 8015a34:	e7fe      	b.n	8015a34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015a36:	4b3e      	ldr	r3, [pc, #248]	; (8015b30 <xPortStartScheduler+0x120>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	4a3f      	ldr	r2, [pc, #252]	; (8015b38 <xPortStartScheduler+0x128>)
 8015a3c:	4293      	cmp	r3, r2
 8015a3e:	d10a      	bne.n	8015a56 <xPortStartScheduler+0x46>
	__asm volatile
 8015a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a44:	f383 8811 	msr	BASEPRI, r3
 8015a48:	f3bf 8f6f 	isb	sy
 8015a4c:	f3bf 8f4f 	dsb	sy
 8015a50:	60fb      	str	r3, [r7, #12]
}
 8015a52:	bf00      	nop
 8015a54:	e7fe      	b.n	8015a54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015a56:	4b39      	ldr	r3, [pc, #228]	; (8015b3c <xPortStartScheduler+0x12c>)
 8015a58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8015a5a:	697b      	ldr	r3, [r7, #20]
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	b2db      	uxtb	r3, r3
 8015a60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015a62:	697b      	ldr	r3, [r7, #20]
 8015a64:	22ff      	movs	r2, #255	; 0xff
 8015a66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015a68:	697b      	ldr	r3, [r7, #20]
 8015a6a:	781b      	ldrb	r3, [r3, #0]
 8015a6c:	b2db      	uxtb	r3, r3
 8015a6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015a70:	78fb      	ldrb	r3, [r7, #3]
 8015a72:	b2db      	uxtb	r3, r3
 8015a74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015a78:	b2da      	uxtb	r2, r3
 8015a7a:	4b31      	ldr	r3, [pc, #196]	; (8015b40 <xPortStartScheduler+0x130>)
 8015a7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8015a7e:	4b31      	ldr	r3, [pc, #196]	; (8015b44 <xPortStartScheduler+0x134>)
 8015a80:	2207      	movs	r2, #7
 8015a82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a84:	e009      	b.n	8015a9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015a86:	4b2f      	ldr	r3, [pc, #188]	; (8015b44 <xPortStartScheduler+0x134>)
 8015a88:	681b      	ldr	r3, [r3, #0]
 8015a8a:	3b01      	subs	r3, #1
 8015a8c:	4a2d      	ldr	r2, [pc, #180]	; (8015b44 <xPortStartScheduler+0x134>)
 8015a8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015a90:	78fb      	ldrb	r3, [r7, #3]
 8015a92:	b2db      	uxtb	r3, r3
 8015a94:	005b      	lsls	r3, r3, #1
 8015a96:	b2db      	uxtb	r3, r3
 8015a98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015a9a:	78fb      	ldrb	r3, [r7, #3]
 8015a9c:	b2db      	uxtb	r3, r3
 8015a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015aa2:	2b80      	cmp	r3, #128	; 0x80
 8015aa4:	d0ef      	beq.n	8015a86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015aa6:	4b27      	ldr	r3, [pc, #156]	; (8015b44 <xPortStartScheduler+0x134>)
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	f1c3 0307 	rsb	r3, r3, #7
 8015aae:	2b04      	cmp	r3, #4
 8015ab0:	d00a      	beq.n	8015ac8 <xPortStartScheduler+0xb8>
	__asm volatile
 8015ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015ab6:	f383 8811 	msr	BASEPRI, r3
 8015aba:	f3bf 8f6f 	isb	sy
 8015abe:	f3bf 8f4f 	dsb	sy
 8015ac2:	60bb      	str	r3, [r7, #8]
}
 8015ac4:	bf00      	nop
 8015ac6:	e7fe      	b.n	8015ac6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015ac8:	4b1e      	ldr	r3, [pc, #120]	; (8015b44 <xPortStartScheduler+0x134>)
 8015aca:	681b      	ldr	r3, [r3, #0]
 8015acc:	021b      	lsls	r3, r3, #8
 8015ace:	4a1d      	ldr	r2, [pc, #116]	; (8015b44 <xPortStartScheduler+0x134>)
 8015ad0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8015ad2:	4b1c      	ldr	r3, [pc, #112]	; (8015b44 <xPortStartScheduler+0x134>)
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8015ada:	4a1a      	ldr	r2, [pc, #104]	; (8015b44 <xPortStartScheduler+0x134>)
 8015adc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8015ade:	687b      	ldr	r3, [r7, #4]
 8015ae0:	b2da      	uxtb	r2, r3
 8015ae2:	697b      	ldr	r3, [r7, #20]
 8015ae4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8015ae6:	4b18      	ldr	r3, [pc, #96]	; (8015b48 <xPortStartScheduler+0x138>)
 8015ae8:	681b      	ldr	r3, [r3, #0]
 8015aea:	4a17      	ldr	r2, [pc, #92]	; (8015b48 <xPortStartScheduler+0x138>)
 8015aec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015af0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8015af2:	4b15      	ldr	r3, [pc, #84]	; (8015b48 <xPortStartScheduler+0x138>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	4a14      	ldr	r2, [pc, #80]	; (8015b48 <xPortStartScheduler+0x138>)
 8015af8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8015afc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8015afe:	f000 f8dd 	bl	8015cbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8015b02:	4b12      	ldr	r3, [pc, #72]	; (8015b4c <xPortStartScheduler+0x13c>)
 8015b04:	2200      	movs	r2, #0
 8015b06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8015b08:	f000 f8fc 	bl	8015d04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8015b0c:	4b10      	ldr	r3, [pc, #64]	; (8015b50 <xPortStartScheduler+0x140>)
 8015b0e:	681b      	ldr	r3, [r3, #0]
 8015b10:	4a0f      	ldr	r2, [pc, #60]	; (8015b50 <xPortStartScheduler+0x140>)
 8015b12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8015b16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8015b18:	f7ff ff66 	bl	80159e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8015b1c:	f7fe ff7e 	bl	8014a1c <vTaskSwitchContext>
	prvTaskExitError();
 8015b20:	f7ff ff20 	bl	8015964 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8015b24:	2300      	movs	r3, #0
}
 8015b26:	4618      	mov	r0, r3
 8015b28:	3718      	adds	r7, #24
 8015b2a:	46bd      	mov	sp, r7
 8015b2c:	bd80      	pop	{r7, pc}
 8015b2e:	bf00      	nop
 8015b30:	e000ed00 	.word	0xe000ed00
 8015b34:	410fc271 	.word	0x410fc271
 8015b38:	410fc270 	.word	0x410fc270
 8015b3c:	e000e400 	.word	0xe000e400
 8015b40:	24001e34 	.word	0x24001e34
 8015b44:	24001e38 	.word	0x24001e38
 8015b48:	e000ed20 	.word	0xe000ed20
 8015b4c:	240000a0 	.word	0x240000a0
 8015b50:	e000ef34 	.word	0xe000ef34

08015b54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015b54:	b480      	push	{r7}
 8015b56:	b083      	sub	sp, #12
 8015b58:	af00      	add	r7, sp, #0
	__asm volatile
 8015b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b5e:	f383 8811 	msr	BASEPRI, r3
 8015b62:	f3bf 8f6f 	isb	sy
 8015b66:	f3bf 8f4f 	dsb	sy
 8015b6a:	607b      	str	r3, [r7, #4]
}
 8015b6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015b6e:	4b0f      	ldr	r3, [pc, #60]	; (8015bac <vPortEnterCritical+0x58>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	3301      	adds	r3, #1
 8015b74:	4a0d      	ldr	r2, [pc, #52]	; (8015bac <vPortEnterCritical+0x58>)
 8015b76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015b78:	4b0c      	ldr	r3, [pc, #48]	; (8015bac <vPortEnterCritical+0x58>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	2b01      	cmp	r3, #1
 8015b7e:	d10f      	bne.n	8015ba0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015b80:	4b0b      	ldr	r3, [pc, #44]	; (8015bb0 <vPortEnterCritical+0x5c>)
 8015b82:	681b      	ldr	r3, [r3, #0]
 8015b84:	b2db      	uxtb	r3, r3
 8015b86:	2b00      	cmp	r3, #0
 8015b88:	d00a      	beq.n	8015ba0 <vPortEnterCritical+0x4c>
	__asm volatile
 8015b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b8e:	f383 8811 	msr	BASEPRI, r3
 8015b92:	f3bf 8f6f 	isb	sy
 8015b96:	f3bf 8f4f 	dsb	sy
 8015b9a:	603b      	str	r3, [r7, #0]
}
 8015b9c:	bf00      	nop
 8015b9e:	e7fe      	b.n	8015b9e <vPortEnterCritical+0x4a>
	}
}
 8015ba0:	bf00      	nop
 8015ba2:	370c      	adds	r7, #12
 8015ba4:	46bd      	mov	sp, r7
 8015ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015baa:	4770      	bx	lr
 8015bac:	240000a0 	.word	0x240000a0
 8015bb0:	e000ed04 	.word	0xe000ed04

08015bb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015bb4:	b480      	push	{r7}
 8015bb6:	b083      	sub	sp, #12
 8015bb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015bba:	4b12      	ldr	r3, [pc, #72]	; (8015c04 <vPortExitCritical+0x50>)
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d10a      	bne.n	8015bd8 <vPortExitCritical+0x24>
	__asm volatile
 8015bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015bc6:	f383 8811 	msr	BASEPRI, r3
 8015bca:	f3bf 8f6f 	isb	sy
 8015bce:	f3bf 8f4f 	dsb	sy
 8015bd2:	607b      	str	r3, [r7, #4]
}
 8015bd4:	bf00      	nop
 8015bd6:	e7fe      	b.n	8015bd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015bd8:	4b0a      	ldr	r3, [pc, #40]	; (8015c04 <vPortExitCritical+0x50>)
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	3b01      	subs	r3, #1
 8015bde:	4a09      	ldr	r2, [pc, #36]	; (8015c04 <vPortExitCritical+0x50>)
 8015be0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015be2:	4b08      	ldr	r3, [pc, #32]	; (8015c04 <vPortExitCritical+0x50>)
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d105      	bne.n	8015bf6 <vPortExitCritical+0x42>
 8015bea:	2300      	movs	r3, #0
 8015bec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015bee:	683b      	ldr	r3, [r7, #0]
 8015bf0:	f383 8811 	msr	BASEPRI, r3
}
 8015bf4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015bf6:	bf00      	nop
 8015bf8:	370c      	adds	r7, #12
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c00:	4770      	bx	lr
 8015c02:	bf00      	nop
 8015c04:	240000a0 	.word	0x240000a0
	...

08015c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015c10:	f3ef 8009 	mrs	r0, PSP
 8015c14:	f3bf 8f6f 	isb	sy
 8015c18:	4b15      	ldr	r3, [pc, #84]	; (8015c70 <pxCurrentTCBConst>)
 8015c1a:	681a      	ldr	r2, [r3, #0]
 8015c1c:	f01e 0f10 	tst.w	lr, #16
 8015c20:	bf08      	it	eq
 8015c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c2a:	6010      	str	r0, [r2, #0]
 8015c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015c34:	f380 8811 	msr	BASEPRI, r0
 8015c38:	f3bf 8f4f 	dsb	sy
 8015c3c:	f3bf 8f6f 	isb	sy
 8015c40:	f7fe feec 	bl	8014a1c <vTaskSwitchContext>
 8015c44:	f04f 0000 	mov.w	r0, #0
 8015c48:	f380 8811 	msr	BASEPRI, r0
 8015c4c:	bc09      	pop	{r0, r3}
 8015c4e:	6819      	ldr	r1, [r3, #0]
 8015c50:	6808      	ldr	r0, [r1, #0]
 8015c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c56:	f01e 0f10 	tst.w	lr, #16
 8015c5a:	bf08      	it	eq
 8015c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015c60:	f380 8809 	msr	PSP, r0
 8015c64:	f3bf 8f6f 	isb	sy
 8015c68:	4770      	bx	lr
 8015c6a:	bf00      	nop
 8015c6c:	f3af 8000 	nop.w

08015c70 <pxCurrentTCBConst>:
 8015c70:	24001808 	.word	0x24001808
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015c74:	bf00      	nop
 8015c76:	bf00      	nop

08015c78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b082      	sub	sp, #8
 8015c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8015c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c82:	f383 8811 	msr	BASEPRI, r3
 8015c86:	f3bf 8f6f 	isb	sy
 8015c8a:	f3bf 8f4f 	dsb	sy
 8015c8e:	607b      	str	r3, [r7, #4]
}
 8015c90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015c92:	f7fe fe09 	bl	80148a8 <xTaskIncrementTick>
 8015c96:	4603      	mov	r3, r0
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d003      	beq.n	8015ca4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015c9c:	4b06      	ldr	r3, [pc, #24]	; (8015cb8 <xPortSysTickHandler+0x40>)
 8015c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015ca2:	601a      	str	r2, [r3, #0]
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015ca8:	683b      	ldr	r3, [r7, #0]
 8015caa:	f383 8811 	msr	BASEPRI, r3
}
 8015cae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015cb0:	bf00      	nop
 8015cb2:	3708      	adds	r7, #8
 8015cb4:	46bd      	mov	sp, r7
 8015cb6:	bd80      	pop	{r7, pc}
 8015cb8:	e000ed04 	.word	0xe000ed04

08015cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015cbc:	b480      	push	{r7}
 8015cbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015cc0:	4b0b      	ldr	r3, [pc, #44]	; (8015cf0 <vPortSetupTimerInterrupt+0x34>)
 8015cc2:	2200      	movs	r2, #0
 8015cc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015cc6:	4b0b      	ldr	r3, [pc, #44]	; (8015cf4 <vPortSetupTimerInterrupt+0x38>)
 8015cc8:	2200      	movs	r2, #0
 8015cca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015ccc:	4b0a      	ldr	r3, [pc, #40]	; (8015cf8 <vPortSetupTimerInterrupt+0x3c>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	4a0a      	ldr	r2, [pc, #40]	; (8015cfc <vPortSetupTimerInterrupt+0x40>)
 8015cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8015cd6:	099b      	lsrs	r3, r3, #6
 8015cd8:	4a09      	ldr	r2, [pc, #36]	; (8015d00 <vPortSetupTimerInterrupt+0x44>)
 8015cda:	3b01      	subs	r3, #1
 8015cdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015cde:	4b04      	ldr	r3, [pc, #16]	; (8015cf0 <vPortSetupTimerInterrupt+0x34>)
 8015ce0:	2207      	movs	r2, #7
 8015ce2:	601a      	str	r2, [r3, #0]
}
 8015ce4:	bf00      	nop
 8015ce6:	46bd      	mov	sp, r7
 8015ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cec:	4770      	bx	lr
 8015cee:	bf00      	nop
 8015cf0:	e000e010 	.word	0xe000e010
 8015cf4:	e000e018 	.word	0xe000e018
 8015cf8:	24000090 	.word	0x24000090
 8015cfc:	10624dd3 	.word	0x10624dd3
 8015d00:	e000e014 	.word	0xe000e014

08015d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015d04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015d14 <vPortEnableVFP+0x10>
 8015d08:	6801      	ldr	r1, [r0, #0]
 8015d0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015d0e:	6001      	str	r1, [r0, #0]
 8015d10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015d12:	bf00      	nop
 8015d14:	e000ed88 	.word	0xe000ed88

08015d18 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015d18:	b480      	push	{r7}
 8015d1a:	b085      	sub	sp, #20
 8015d1c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015d1e:	f3ef 8305 	mrs	r3, IPSR
 8015d22:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015d24:	68fb      	ldr	r3, [r7, #12]
 8015d26:	2b0f      	cmp	r3, #15
 8015d28:	d914      	bls.n	8015d54 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015d2a:	4a17      	ldr	r2, [pc, #92]	; (8015d88 <vPortValidateInterruptPriority+0x70>)
 8015d2c:	68fb      	ldr	r3, [r7, #12]
 8015d2e:	4413      	add	r3, r2
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015d34:	4b15      	ldr	r3, [pc, #84]	; (8015d8c <vPortValidateInterruptPriority+0x74>)
 8015d36:	781b      	ldrb	r3, [r3, #0]
 8015d38:	7afa      	ldrb	r2, [r7, #11]
 8015d3a:	429a      	cmp	r2, r3
 8015d3c:	d20a      	bcs.n	8015d54 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d42:	f383 8811 	msr	BASEPRI, r3
 8015d46:	f3bf 8f6f 	isb	sy
 8015d4a:	f3bf 8f4f 	dsb	sy
 8015d4e:	607b      	str	r3, [r7, #4]
}
 8015d50:	bf00      	nop
 8015d52:	e7fe      	b.n	8015d52 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015d54:	4b0e      	ldr	r3, [pc, #56]	; (8015d90 <vPortValidateInterruptPriority+0x78>)
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015d5c:	4b0d      	ldr	r3, [pc, #52]	; (8015d94 <vPortValidateInterruptPriority+0x7c>)
 8015d5e:	681b      	ldr	r3, [r3, #0]
 8015d60:	429a      	cmp	r2, r3
 8015d62:	d90a      	bls.n	8015d7a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d68:	f383 8811 	msr	BASEPRI, r3
 8015d6c:	f3bf 8f6f 	isb	sy
 8015d70:	f3bf 8f4f 	dsb	sy
 8015d74:	603b      	str	r3, [r7, #0]
}
 8015d76:	bf00      	nop
 8015d78:	e7fe      	b.n	8015d78 <vPortValidateInterruptPriority+0x60>
	}
 8015d7a:	bf00      	nop
 8015d7c:	3714      	adds	r7, #20
 8015d7e:	46bd      	mov	sp, r7
 8015d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d84:	4770      	bx	lr
 8015d86:	bf00      	nop
 8015d88:	e000e3f0 	.word	0xe000e3f0
 8015d8c:	24001e34 	.word	0x24001e34
 8015d90:	e000ed0c 	.word	0xe000ed0c
 8015d94:	24001e38 	.word	0x24001e38

08015d98 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015d98:	b580      	push	{r7, lr}
 8015d9a:	b08a      	sub	sp, #40	; 0x28
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015da0:	2300      	movs	r3, #0
 8015da2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015da4:	f7fe fcc4 	bl	8014730 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015da8:	4b5b      	ldr	r3, [pc, #364]	; (8015f18 <pvPortMalloc+0x180>)
 8015daa:	681b      	ldr	r3, [r3, #0]
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d101      	bne.n	8015db4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015db0:	f000 f920 	bl	8015ff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015db4:	4b59      	ldr	r3, [pc, #356]	; (8015f1c <pvPortMalloc+0x184>)
 8015db6:	681a      	ldr	r2, [r3, #0]
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	4013      	ands	r3, r2
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	f040 8093 	bne.w	8015ee8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d01d      	beq.n	8015e04 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015dc8:	2208      	movs	r2, #8
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	4413      	add	r3, r2
 8015dce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015dd0:	687b      	ldr	r3, [r7, #4]
 8015dd2:	f003 0307 	and.w	r3, r3, #7
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d014      	beq.n	8015e04 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	f023 0307 	bic.w	r3, r3, #7
 8015de0:	3308      	adds	r3, #8
 8015de2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	f003 0307 	and.w	r3, r3, #7
 8015dea:	2b00      	cmp	r3, #0
 8015dec:	d00a      	beq.n	8015e04 <pvPortMalloc+0x6c>
	__asm volatile
 8015dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015df2:	f383 8811 	msr	BASEPRI, r3
 8015df6:	f3bf 8f6f 	isb	sy
 8015dfa:	f3bf 8f4f 	dsb	sy
 8015dfe:	617b      	str	r3, [r7, #20]
}
 8015e00:	bf00      	nop
 8015e02:	e7fe      	b.n	8015e02 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	2b00      	cmp	r3, #0
 8015e08:	d06e      	beq.n	8015ee8 <pvPortMalloc+0x150>
 8015e0a:	4b45      	ldr	r3, [pc, #276]	; (8015f20 <pvPortMalloc+0x188>)
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	687a      	ldr	r2, [r7, #4]
 8015e10:	429a      	cmp	r2, r3
 8015e12:	d869      	bhi.n	8015ee8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015e14:	4b43      	ldr	r3, [pc, #268]	; (8015f24 <pvPortMalloc+0x18c>)
 8015e16:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015e18:	4b42      	ldr	r3, [pc, #264]	; (8015f24 <pvPortMalloc+0x18c>)
 8015e1a:	681b      	ldr	r3, [r3, #0]
 8015e1c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e1e:	e004      	b.n	8015e2a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e22:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	687a      	ldr	r2, [r7, #4]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d903      	bls.n	8015e3c <pvPortMalloc+0xa4>
 8015e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	d1f1      	bne.n	8015e20 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015e3c:	4b36      	ldr	r3, [pc, #216]	; (8015f18 <pvPortMalloc+0x180>)
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e42:	429a      	cmp	r2, r3
 8015e44:	d050      	beq.n	8015ee8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015e46:	6a3b      	ldr	r3, [r7, #32]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	2208      	movs	r2, #8
 8015e4c:	4413      	add	r3, r2
 8015e4e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e52:	681a      	ldr	r2, [r3, #0]
 8015e54:	6a3b      	ldr	r3, [r7, #32]
 8015e56:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e5a:	685a      	ldr	r2, [r3, #4]
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	1ad2      	subs	r2, r2, r3
 8015e60:	2308      	movs	r3, #8
 8015e62:	005b      	lsls	r3, r3, #1
 8015e64:	429a      	cmp	r2, r3
 8015e66:	d91f      	bls.n	8015ea8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015e68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	4413      	add	r3, r2
 8015e6e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015e70:	69bb      	ldr	r3, [r7, #24]
 8015e72:	f003 0307 	and.w	r3, r3, #7
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d00a      	beq.n	8015e90 <pvPortMalloc+0xf8>
	__asm volatile
 8015e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e7e:	f383 8811 	msr	BASEPRI, r3
 8015e82:	f3bf 8f6f 	isb	sy
 8015e86:	f3bf 8f4f 	dsb	sy
 8015e8a:	613b      	str	r3, [r7, #16]
}
 8015e8c:	bf00      	nop
 8015e8e:	e7fe      	b.n	8015e8e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e92:	685a      	ldr	r2, [r3, #4]
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	1ad2      	subs	r2, r2, r3
 8015e98:	69bb      	ldr	r3, [r7, #24]
 8015e9a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e9e:	687a      	ldr	r2, [r7, #4]
 8015ea0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015ea2:	69b8      	ldr	r0, [r7, #24]
 8015ea4:	f000 f908 	bl	80160b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015ea8:	4b1d      	ldr	r3, [pc, #116]	; (8015f20 <pvPortMalloc+0x188>)
 8015eaa:	681a      	ldr	r2, [r3, #0]
 8015eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eae:	685b      	ldr	r3, [r3, #4]
 8015eb0:	1ad3      	subs	r3, r2, r3
 8015eb2:	4a1b      	ldr	r2, [pc, #108]	; (8015f20 <pvPortMalloc+0x188>)
 8015eb4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015eb6:	4b1a      	ldr	r3, [pc, #104]	; (8015f20 <pvPortMalloc+0x188>)
 8015eb8:	681a      	ldr	r2, [r3, #0]
 8015eba:	4b1b      	ldr	r3, [pc, #108]	; (8015f28 <pvPortMalloc+0x190>)
 8015ebc:	681b      	ldr	r3, [r3, #0]
 8015ebe:	429a      	cmp	r2, r3
 8015ec0:	d203      	bcs.n	8015eca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015ec2:	4b17      	ldr	r3, [pc, #92]	; (8015f20 <pvPortMalloc+0x188>)
 8015ec4:	681b      	ldr	r3, [r3, #0]
 8015ec6:	4a18      	ldr	r2, [pc, #96]	; (8015f28 <pvPortMalloc+0x190>)
 8015ec8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ecc:	685a      	ldr	r2, [r3, #4]
 8015ece:	4b13      	ldr	r3, [pc, #76]	; (8015f1c <pvPortMalloc+0x184>)
 8015ed0:	681b      	ldr	r3, [r3, #0]
 8015ed2:	431a      	orrs	r2, r3
 8015ed4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ed6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eda:	2200      	movs	r2, #0
 8015edc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015ede:	4b13      	ldr	r3, [pc, #76]	; (8015f2c <pvPortMalloc+0x194>)
 8015ee0:	681b      	ldr	r3, [r3, #0]
 8015ee2:	3301      	adds	r3, #1
 8015ee4:	4a11      	ldr	r2, [pc, #68]	; (8015f2c <pvPortMalloc+0x194>)
 8015ee6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015ee8:	f7fe fc30 	bl	801474c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015eec:	69fb      	ldr	r3, [r7, #28]
 8015eee:	f003 0307 	and.w	r3, r3, #7
 8015ef2:	2b00      	cmp	r3, #0
 8015ef4:	d00a      	beq.n	8015f0c <pvPortMalloc+0x174>
	__asm volatile
 8015ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015efa:	f383 8811 	msr	BASEPRI, r3
 8015efe:	f3bf 8f6f 	isb	sy
 8015f02:	f3bf 8f4f 	dsb	sy
 8015f06:	60fb      	str	r3, [r7, #12]
}
 8015f08:	bf00      	nop
 8015f0a:	e7fe      	b.n	8015f0a <pvPortMalloc+0x172>
	return pvReturn;
 8015f0c:	69fb      	ldr	r3, [r7, #28]
}
 8015f0e:	4618      	mov	r0, r3
 8015f10:	3728      	adds	r7, #40	; 0x28
 8015f12:	46bd      	mov	sp, r7
 8015f14:	bd80      	pop	{r7, pc}
 8015f16:	bf00      	nop
 8015f18:	24005a44 	.word	0x24005a44
 8015f1c:	24005a58 	.word	0x24005a58
 8015f20:	24005a48 	.word	0x24005a48
 8015f24:	24005a3c 	.word	0x24005a3c
 8015f28:	24005a4c 	.word	0x24005a4c
 8015f2c:	24005a50 	.word	0x24005a50

08015f30 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b086      	sub	sp, #24
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d04d      	beq.n	8015fde <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015f42:	2308      	movs	r3, #8
 8015f44:	425b      	negs	r3, r3
 8015f46:	697a      	ldr	r2, [r7, #20]
 8015f48:	4413      	add	r3, r2
 8015f4a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015f4c:	697b      	ldr	r3, [r7, #20]
 8015f4e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	685a      	ldr	r2, [r3, #4]
 8015f54:	4b24      	ldr	r3, [pc, #144]	; (8015fe8 <vPortFree+0xb8>)
 8015f56:	681b      	ldr	r3, [r3, #0]
 8015f58:	4013      	ands	r3, r2
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d10a      	bne.n	8015f74 <vPortFree+0x44>
	__asm volatile
 8015f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f62:	f383 8811 	msr	BASEPRI, r3
 8015f66:	f3bf 8f6f 	isb	sy
 8015f6a:	f3bf 8f4f 	dsb	sy
 8015f6e:	60fb      	str	r3, [r7, #12]
}
 8015f70:	bf00      	nop
 8015f72:	e7fe      	b.n	8015f72 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015f74:	693b      	ldr	r3, [r7, #16]
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	2b00      	cmp	r3, #0
 8015f7a:	d00a      	beq.n	8015f92 <vPortFree+0x62>
	__asm volatile
 8015f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015f80:	f383 8811 	msr	BASEPRI, r3
 8015f84:	f3bf 8f6f 	isb	sy
 8015f88:	f3bf 8f4f 	dsb	sy
 8015f8c:	60bb      	str	r3, [r7, #8]
}
 8015f8e:	bf00      	nop
 8015f90:	e7fe      	b.n	8015f90 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015f92:	693b      	ldr	r3, [r7, #16]
 8015f94:	685a      	ldr	r2, [r3, #4]
 8015f96:	4b14      	ldr	r3, [pc, #80]	; (8015fe8 <vPortFree+0xb8>)
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	4013      	ands	r3, r2
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d01e      	beq.n	8015fde <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015fa0:	693b      	ldr	r3, [r7, #16]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d11a      	bne.n	8015fde <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015fa8:	693b      	ldr	r3, [r7, #16]
 8015faa:	685a      	ldr	r2, [r3, #4]
 8015fac:	4b0e      	ldr	r3, [pc, #56]	; (8015fe8 <vPortFree+0xb8>)
 8015fae:	681b      	ldr	r3, [r3, #0]
 8015fb0:	43db      	mvns	r3, r3
 8015fb2:	401a      	ands	r2, r3
 8015fb4:	693b      	ldr	r3, [r7, #16]
 8015fb6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015fb8:	f7fe fbba 	bl	8014730 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015fbc:	693b      	ldr	r3, [r7, #16]
 8015fbe:	685a      	ldr	r2, [r3, #4]
 8015fc0:	4b0a      	ldr	r3, [pc, #40]	; (8015fec <vPortFree+0xbc>)
 8015fc2:	681b      	ldr	r3, [r3, #0]
 8015fc4:	4413      	add	r3, r2
 8015fc6:	4a09      	ldr	r2, [pc, #36]	; (8015fec <vPortFree+0xbc>)
 8015fc8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015fca:	6938      	ldr	r0, [r7, #16]
 8015fcc:	f000 f874 	bl	80160b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015fd0:	4b07      	ldr	r3, [pc, #28]	; (8015ff0 <vPortFree+0xc0>)
 8015fd2:	681b      	ldr	r3, [r3, #0]
 8015fd4:	3301      	adds	r3, #1
 8015fd6:	4a06      	ldr	r2, [pc, #24]	; (8015ff0 <vPortFree+0xc0>)
 8015fd8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015fda:	f7fe fbb7 	bl	801474c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015fde:	bf00      	nop
 8015fe0:	3718      	adds	r7, #24
 8015fe2:	46bd      	mov	sp, r7
 8015fe4:	bd80      	pop	{r7, pc}
 8015fe6:	bf00      	nop
 8015fe8:	24005a58 	.word	0x24005a58
 8015fec:	24005a48 	.word	0x24005a48
 8015ff0:	24005a54 	.word	0x24005a54

08015ff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015ff4:	b480      	push	{r7}
 8015ff6:	b085      	sub	sp, #20
 8015ff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015ffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015ffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8016000:	4b27      	ldr	r3, [pc, #156]	; (80160a0 <prvHeapInit+0xac>)
 8016002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	f003 0307 	and.w	r3, r3, #7
 801600a:	2b00      	cmp	r3, #0
 801600c:	d00c      	beq.n	8016028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	3307      	adds	r3, #7
 8016012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	f023 0307 	bic.w	r3, r3, #7
 801601a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801601c:	68ba      	ldr	r2, [r7, #8]
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	1ad3      	subs	r3, r2, r3
 8016022:	4a1f      	ldr	r2, [pc, #124]	; (80160a0 <prvHeapInit+0xac>)
 8016024:	4413      	add	r3, r2
 8016026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801602c:	4a1d      	ldr	r2, [pc, #116]	; (80160a4 <prvHeapInit+0xb0>)
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8016032:	4b1c      	ldr	r3, [pc, #112]	; (80160a4 <prvHeapInit+0xb0>)
 8016034:	2200      	movs	r2, #0
 8016036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	68ba      	ldr	r2, [r7, #8]
 801603c:	4413      	add	r3, r2
 801603e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8016040:	2208      	movs	r2, #8
 8016042:	68fb      	ldr	r3, [r7, #12]
 8016044:	1a9b      	subs	r3, r3, r2
 8016046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8016048:	68fb      	ldr	r3, [r7, #12]
 801604a:	f023 0307 	bic.w	r3, r3, #7
 801604e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8016050:	68fb      	ldr	r3, [r7, #12]
 8016052:	4a15      	ldr	r2, [pc, #84]	; (80160a8 <prvHeapInit+0xb4>)
 8016054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8016056:	4b14      	ldr	r3, [pc, #80]	; (80160a8 <prvHeapInit+0xb4>)
 8016058:	681b      	ldr	r3, [r3, #0]
 801605a:	2200      	movs	r2, #0
 801605c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801605e:	4b12      	ldr	r3, [pc, #72]	; (80160a8 <prvHeapInit+0xb4>)
 8016060:	681b      	ldr	r3, [r3, #0]
 8016062:	2200      	movs	r2, #0
 8016064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801606a:	683b      	ldr	r3, [r7, #0]
 801606c:	68fa      	ldr	r2, [r7, #12]
 801606e:	1ad2      	subs	r2, r2, r3
 8016070:	683b      	ldr	r3, [r7, #0]
 8016072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8016074:	4b0c      	ldr	r3, [pc, #48]	; (80160a8 <prvHeapInit+0xb4>)
 8016076:	681a      	ldr	r2, [r3, #0]
 8016078:	683b      	ldr	r3, [r7, #0]
 801607a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801607c:	683b      	ldr	r3, [r7, #0]
 801607e:	685b      	ldr	r3, [r3, #4]
 8016080:	4a0a      	ldr	r2, [pc, #40]	; (80160ac <prvHeapInit+0xb8>)
 8016082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8016084:	683b      	ldr	r3, [r7, #0]
 8016086:	685b      	ldr	r3, [r3, #4]
 8016088:	4a09      	ldr	r2, [pc, #36]	; (80160b0 <prvHeapInit+0xbc>)
 801608a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801608c:	4b09      	ldr	r3, [pc, #36]	; (80160b4 <prvHeapInit+0xc0>)
 801608e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8016092:	601a      	str	r2, [r3, #0]
}
 8016094:	bf00      	nop
 8016096:	3714      	adds	r7, #20
 8016098:	46bd      	mov	sp, r7
 801609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801609e:	4770      	bx	lr
 80160a0:	24001e3c 	.word	0x24001e3c
 80160a4:	24005a3c 	.word	0x24005a3c
 80160a8:	24005a44 	.word	0x24005a44
 80160ac:	24005a4c 	.word	0x24005a4c
 80160b0:	24005a48 	.word	0x24005a48
 80160b4:	24005a58 	.word	0x24005a58

080160b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80160b8:	b480      	push	{r7}
 80160ba:	b085      	sub	sp, #20
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80160c0:	4b28      	ldr	r3, [pc, #160]	; (8016164 <prvInsertBlockIntoFreeList+0xac>)
 80160c2:	60fb      	str	r3, [r7, #12]
 80160c4:	e002      	b.n	80160cc <prvInsertBlockIntoFreeList+0x14>
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	60fb      	str	r3, [r7, #12]
 80160cc:	68fb      	ldr	r3, [r7, #12]
 80160ce:	681b      	ldr	r3, [r3, #0]
 80160d0:	687a      	ldr	r2, [r7, #4]
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d8f7      	bhi.n	80160c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80160d6:	68fb      	ldr	r3, [r7, #12]
 80160d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80160da:	68fb      	ldr	r3, [r7, #12]
 80160dc:	685b      	ldr	r3, [r3, #4]
 80160de:	68ba      	ldr	r2, [r7, #8]
 80160e0:	4413      	add	r3, r2
 80160e2:	687a      	ldr	r2, [r7, #4]
 80160e4:	429a      	cmp	r2, r3
 80160e6:	d108      	bne.n	80160fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	685a      	ldr	r2, [r3, #4]
 80160ec:	687b      	ldr	r3, [r7, #4]
 80160ee:	685b      	ldr	r3, [r3, #4]
 80160f0:	441a      	add	r2, r3
 80160f2:	68fb      	ldr	r3, [r7, #12]
 80160f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80160f6:	68fb      	ldr	r3, [r7, #12]
 80160f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80160fa:	687b      	ldr	r3, [r7, #4]
 80160fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	685b      	ldr	r3, [r3, #4]
 8016102:	68ba      	ldr	r2, [r7, #8]
 8016104:	441a      	add	r2, r3
 8016106:	68fb      	ldr	r3, [r7, #12]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	429a      	cmp	r2, r3
 801610c:	d118      	bne.n	8016140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801610e:	68fb      	ldr	r3, [r7, #12]
 8016110:	681a      	ldr	r2, [r3, #0]
 8016112:	4b15      	ldr	r3, [pc, #84]	; (8016168 <prvInsertBlockIntoFreeList+0xb0>)
 8016114:	681b      	ldr	r3, [r3, #0]
 8016116:	429a      	cmp	r2, r3
 8016118:	d00d      	beq.n	8016136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	685a      	ldr	r2, [r3, #4]
 801611e:	68fb      	ldr	r3, [r7, #12]
 8016120:	681b      	ldr	r3, [r3, #0]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	441a      	add	r2, r3
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801612a:	68fb      	ldr	r3, [r7, #12]
 801612c:	681b      	ldr	r3, [r3, #0]
 801612e:	681a      	ldr	r2, [r3, #0]
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	601a      	str	r2, [r3, #0]
 8016134:	e008      	b.n	8016148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016136:	4b0c      	ldr	r3, [pc, #48]	; (8016168 <prvInsertBlockIntoFreeList+0xb0>)
 8016138:	681a      	ldr	r2, [r3, #0]
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	601a      	str	r2, [r3, #0]
 801613e:	e003      	b.n	8016148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	681a      	ldr	r2, [r3, #0]
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016148:	68fa      	ldr	r2, [r7, #12]
 801614a:	687b      	ldr	r3, [r7, #4]
 801614c:	429a      	cmp	r2, r3
 801614e:	d002      	beq.n	8016156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016150:	68fb      	ldr	r3, [r7, #12]
 8016152:	687a      	ldr	r2, [r7, #4]
 8016154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016156:	bf00      	nop
 8016158:	3714      	adds	r7, #20
 801615a:	46bd      	mov	sp, r7
 801615c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016160:	4770      	bx	lr
 8016162:	bf00      	nop
 8016164:	24005a3c 	.word	0x24005a3c
 8016168:	24005a44 	.word	0x24005a44

0801616c <__errno>:
 801616c:	4b01      	ldr	r3, [pc, #4]	; (8016174 <__errno+0x8>)
 801616e:	6818      	ldr	r0, [r3, #0]
 8016170:	4770      	bx	lr
 8016172:	bf00      	nop
 8016174:	240000a4 	.word	0x240000a4

08016178 <__libc_init_array>:
 8016178:	b570      	push	{r4, r5, r6, lr}
 801617a:	4d0d      	ldr	r5, [pc, #52]	; (80161b0 <__libc_init_array+0x38>)
 801617c:	4c0d      	ldr	r4, [pc, #52]	; (80161b4 <__libc_init_array+0x3c>)
 801617e:	1b64      	subs	r4, r4, r5
 8016180:	10a4      	asrs	r4, r4, #2
 8016182:	2600      	movs	r6, #0
 8016184:	42a6      	cmp	r6, r4
 8016186:	d109      	bne.n	801619c <__libc_init_array+0x24>
 8016188:	4d0b      	ldr	r5, [pc, #44]	; (80161b8 <__libc_init_array+0x40>)
 801618a:	4c0c      	ldr	r4, [pc, #48]	; (80161bc <__libc_init_array+0x44>)
 801618c:	f000 fd3c 	bl	8016c08 <_init>
 8016190:	1b64      	subs	r4, r4, r5
 8016192:	10a4      	asrs	r4, r4, #2
 8016194:	2600      	movs	r6, #0
 8016196:	42a6      	cmp	r6, r4
 8016198:	d105      	bne.n	80161a6 <__libc_init_array+0x2e>
 801619a:	bd70      	pop	{r4, r5, r6, pc}
 801619c:	f855 3b04 	ldr.w	r3, [r5], #4
 80161a0:	4798      	blx	r3
 80161a2:	3601      	adds	r6, #1
 80161a4:	e7ee      	b.n	8016184 <__libc_init_array+0xc>
 80161a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80161aa:	4798      	blx	r3
 80161ac:	3601      	adds	r6, #1
 80161ae:	e7f2      	b.n	8016196 <__libc_init_array+0x1e>
 80161b0:	08017070 	.word	0x08017070
 80161b4:	08017070 	.word	0x08017070
 80161b8:	08017070 	.word	0x08017070
 80161bc:	08017074 	.word	0x08017074

080161c0 <malloc>:
 80161c0:	4b02      	ldr	r3, [pc, #8]	; (80161cc <malloc+0xc>)
 80161c2:	4601      	mov	r1, r0
 80161c4:	6818      	ldr	r0, [r3, #0]
 80161c6:	f000 b88d 	b.w	80162e4 <_malloc_r>
 80161ca:	bf00      	nop
 80161cc:	240000a4 	.word	0x240000a4

080161d0 <free>:
 80161d0:	4b02      	ldr	r3, [pc, #8]	; (80161dc <free+0xc>)
 80161d2:	4601      	mov	r1, r0
 80161d4:	6818      	ldr	r0, [r3, #0]
 80161d6:	f000 b819 	b.w	801620c <_free_r>
 80161da:	bf00      	nop
 80161dc:	240000a4 	.word	0x240000a4

080161e0 <memcpy>:
 80161e0:	440a      	add	r2, r1
 80161e2:	4291      	cmp	r1, r2
 80161e4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80161e8:	d100      	bne.n	80161ec <memcpy+0xc>
 80161ea:	4770      	bx	lr
 80161ec:	b510      	push	{r4, lr}
 80161ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80161f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80161f6:	4291      	cmp	r1, r2
 80161f8:	d1f9      	bne.n	80161ee <memcpy+0xe>
 80161fa:	bd10      	pop	{r4, pc}

080161fc <memset>:
 80161fc:	4402      	add	r2, r0
 80161fe:	4603      	mov	r3, r0
 8016200:	4293      	cmp	r3, r2
 8016202:	d100      	bne.n	8016206 <memset+0xa>
 8016204:	4770      	bx	lr
 8016206:	f803 1b01 	strb.w	r1, [r3], #1
 801620a:	e7f9      	b.n	8016200 <memset+0x4>

0801620c <_free_r>:
 801620c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801620e:	2900      	cmp	r1, #0
 8016210:	d044      	beq.n	801629c <_free_r+0x90>
 8016212:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016216:	9001      	str	r0, [sp, #4]
 8016218:	2b00      	cmp	r3, #0
 801621a:	f1a1 0404 	sub.w	r4, r1, #4
 801621e:	bfb8      	it	lt
 8016220:	18e4      	addlt	r4, r4, r3
 8016222:	f000 fc39 	bl	8016a98 <__malloc_lock>
 8016226:	4a1e      	ldr	r2, [pc, #120]	; (80162a0 <_free_r+0x94>)
 8016228:	9801      	ldr	r0, [sp, #4]
 801622a:	6813      	ldr	r3, [r2, #0]
 801622c:	b933      	cbnz	r3, 801623c <_free_r+0x30>
 801622e:	6063      	str	r3, [r4, #4]
 8016230:	6014      	str	r4, [r2, #0]
 8016232:	b003      	add	sp, #12
 8016234:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016238:	f000 bc34 	b.w	8016aa4 <__malloc_unlock>
 801623c:	42a3      	cmp	r3, r4
 801623e:	d908      	bls.n	8016252 <_free_r+0x46>
 8016240:	6825      	ldr	r5, [r4, #0]
 8016242:	1961      	adds	r1, r4, r5
 8016244:	428b      	cmp	r3, r1
 8016246:	bf01      	itttt	eq
 8016248:	6819      	ldreq	r1, [r3, #0]
 801624a:	685b      	ldreq	r3, [r3, #4]
 801624c:	1949      	addeq	r1, r1, r5
 801624e:	6021      	streq	r1, [r4, #0]
 8016250:	e7ed      	b.n	801622e <_free_r+0x22>
 8016252:	461a      	mov	r2, r3
 8016254:	685b      	ldr	r3, [r3, #4]
 8016256:	b10b      	cbz	r3, 801625c <_free_r+0x50>
 8016258:	42a3      	cmp	r3, r4
 801625a:	d9fa      	bls.n	8016252 <_free_r+0x46>
 801625c:	6811      	ldr	r1, [r2, #0]
 801625e:	1855      	adds	r5, r2, r1
 8016260:	42a5      	cmp	r5, r4
 8016262:	d10b      	bne.n	801627c <_free_r+0x70>
 8016264:	6824      	ldr	r4, [r4, #0]
 8016266:	4421      	add	r1, r4
 8016268:	1854      	adds	r4, r2, r1
 801626a:	42a3      	cmp	r3, r4
 801626c:	6011      	str	r1, [r2, #0]
 801626e:	d1e0      	bne.n	8016232 <_free_r+0x26>
 8016270:	681c      	ldr	r4, [r3, #0]
 8016272:	685b      	ldr	r3, [r3, #4]
 8016274:	6053      	str	r3, [r2, #4]
 8016276:	4421      	add	r1, r4
 8016278:	6011      	str	r1, [r2, #0]
 801627a:	e7da      	b.n	8016232 <_free_r+0x26>
 801627c:	d902      	bls.n	8016284 <_free_r+0x78>
 801627e:	230c      	movs	r3, #12
 8016280:	6003      	str	r3, [r0, #0]
 8016282:	e7d6      	b.n	8016232 <_free_r+0x26>
 8016284:	6825      	ldr	r5, [r4, #0]
 8016286:	1961      	adds	r1, r4, r5
 8016288:	428b      	cmp	r3, r1
 801628a:	bf04      	itt	eq
 801628c:	6819      	ldreq	r1, [r3, #0]
 801628e:	685b      	ldreq	r3, [r3, #4]
 8016290:	6063      	str	r3, [r4, #4]
 8016292:	bf04      	itt	eq
 8016294:	1949      	addeq	r1, r1, r5
 8016296:	6021      	streq	r1, [r4, #0]
 8016298:	6054      	str	r4, [r2, #4]
 801629a:	e7ca      	b.n	8016232 <_free_r+0x26>
 801629c:	b003      	add	sp, #12
 801629e:	bd30      	pop	{r4, r5, pc}
 80162a0:	24005a5c 	.word	0x24005a5c

080162a4 <sbrk_aligned>:
 80162a4:	b570      	push	{r4, r5, r6, lr}
 80162a6:	4e0e      	ldr	r6, [pc, #56]	; (80162e0 <sbrk_aligned+0x3c>)
 80162a8:	460c      	mov	r4, r1
 80162aa:	6831      	ldr	r1, [r6, #0]
 80162ac:	4605      	mov	r5, r0
 80162ae:	b911      	cbnz	r1, 80162b6 <sbrk_aligned+0x12>
 80162b0:	f000 f902 	bl	80164b8 <_sbrk_r>
 80162b4:	6030      	str	r0, [r6, #0]
 80162b6:	4621      	mov	r1, r4
 80162b8:	4628      	mov	r0, r5
 80162ba:	f000 f8fd 	bl	80164b8 <_sbrk_r>
 80162be:	1c43      	adds	r3, r0, #1
 80162c0:	d00a      	beq.n	80162d8 <sbrk_aligned+0x34>
 80162c2:	1cc4      	adds	r4, r0, #3
 80162c4:	f024 0403 	bic.w	r4, r4, #3
 80162c8:	42a0      	cmp	r0, r4
 80162ca:	d007      	beq.n	80162dc <sbrk_aligned+0x38>
 80162cc:	1a21      	subs	r1, r4, r0
 80162ce:	4628      	mov	r0, r5
 80162d0:	f000 f8f2 	bl	80164b8 <_sbrk_r>
 80162d4:	3001      	adds	r0, #1
 80162d6:	d101      	bne.n	80162dc <sbrk_aligned+0x38>
 80162d8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80162dc:	4620      	mov	r0, r4
 80162de:	bd70      	pop	{r4, r5, r6, pc}
 80162e0:	24005a60 	.word	0x24005a60

080162e4 <_malloc_r>:
 80162e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80162e8:	1ccd      	adds	r5, r1, #3
 80162ea:	f025 0503 	bic.w	r5, r5, #3
 80162ee:	3508      	adds	r5, #8
 80162f0:	2d0c      	cmp	r5, #12
 80162f2:	bf38      	it	cc
 80162f4:	250c      	movcc	r5, #12
 80162f6:	2d00      	cmp	r5, #0
 80162f8:	4607      	mov	r7, r0
 80162fa:	db01      	blt.n	8016300 <_malloc_r+0x1c>
 80162fc:	42a9      	cmp	r1, r5
 80162fe:	d905      	bls.n	801630c <_malloc_r+0x28>
 8016300:	230c      	movs	r3, #12
 8016302:	603b      	str	r3, [r7, #0]
 8016304:	2600      	movs	r6, #0
 8016306:	4630      	mov	r0, r6
 8016308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801630c:	4e2e      	ldr	r6, [pc, #184]	; (80163c8 <_malloc_r+0xe4>)
 801630e:	f000 fbc3 	bl	8016a98 <__malloc_lock>
 8016312:	6833      	ldr	r3, [r6, #0]
 8016314:	461c      	mov	r4, r3
 8016316:	bb34      	cbnz	r4, 8016366 <_malloc_r+0x82>
 8016318:	4629      	mov	r1, r5
 801631a:	4638      	mov	r0, r7
 801631c:	f7ff ffc2 	bl	80162a4 <sbrk_aligned>
 8016320:	1c43      	adds	r3, r0, #1
 8016322:	4604      	mov	r4, r0
 8016324:	d14d      	bne.n	80163c2 <_malloc_r+0xde>
 8016326:	6834      	ldr	r4, [r6, #0]
 8016328:	4626      	mov	r6, r4
 801632a:	2e00      	cmp	r6, #0
 801632c:	d140      	bne.n	80163b0 <_malloc_r+0xcc>
 801632e:	6823      	ldr	r3, [r4, #0]
 8016330:	4631      	mov	r1, r6
 8016332:	4638      	mov	r0, r7
 8016334:	eb04 0803 	add.w	r8, r4, r3
 8016338:	f000 f8be 	bl	80164b8 <_sbrk_r>
 801633c:	4580      	cmp	r8, r0
 801633e:	d13a      	bne.n	80163b6 <_malloc_r+0xd2>
 8016340:	6821      	ldr	r1, [r4, #0]
 8016342:	3503      	adds	r5, #3
 8016344:	1a6d      	subs	r5, r5, r1
 8016346:	f025 0503 	bic.w	r5, r5, #3
 801634a:	3508      	adds	r5, #8
 801634c:	2d0c      	cmp	r5, #12
 801634e:	bf38      	it	cc
 8016350:	250c      	movcc	r5, #12
 8016352:	4629      	mov	r1, r5
 8016354:	4638      	mov	r0, r7
 8016356:	f7ff ffa5 	bl	80162a4 <sbrk_aligned>
 801635a:	3001      	adds	r0, #1
 801635c:	d02b      	beq.n	80163b6 <_malloc_r+0xd2>
 801635e:	6823      	ldr	r3, [r4, #0]
 8016360:	442b      	add	r3, r5
 8016362:	6023      	str	r3, [r4, #0]
 8016364:	e00e      	b.n	8016384 <_malloc_r+0xa0>
 8016366:	6822      	ldr	r2, [r4, #0]
 8016368:	1b52      	subs	r2, r2, r5
 801636a:	d41e      	bmi.n	80163aa <_malloc_r+0xc6>
 801636c:	2a0b      	cmp	r2, #11
 801636e:	d916      	bls.n	801639e <_malloc_r+0xba>
 8016370:	1961      	adds	r1, r4, r5
 8016372:	42a3      	cmp	r3, r4
 8016374:	6025      	str	r5, [r4, #0]
 8016376:	bf18      	it	ne
 8016378:	6059      	strne	r1, [r3, #4]
 801637a:	6863      	ldr	r3, [r4, #4]
 801637c:	bf08      	it	eq
 801637e:	6031      	streq	r1, [r6, #0]
 8016380:	5162      	str	r2, [r4, r5]
 8016382:	604b      	str	r3, [r1, #4]
 8016384:	4638      	mov	r0, r7
 8016386:	f104 060b 	add.w	r6, r4, #11
 801638a:	f000 fb8b 	bl	8016aa4 <__malloc_unlock>
 801638e:	f026 0607 	bic.w	r6, r6, #7
 8016392:	1d23      	adds	r3, r4, #4
 8016394:	1af2      	subs	r2, r6, r3
 8016396:	d0b6      	beq.n	8016306 <_malloc_r+0x22>
 8016398:	1b9b      	subs	r3, r3, r6
 801639a:	50a3      	str	r3, [r4, r2]
 801639c:	e7b3      	b.n	8016306 <_malloc_r+0x22>
 801639e:	6862      	ldr	r2, [r4, #4]
 80163a0:	42a3      	cmp	r3, r4
 80163a2:	bf0c      	ite	eq
 80163a4:	6032      	streq	r2, [r6, #0]
 80163a6:	605a      	strne	r2, [r3, #4]
 80163a8:	e7ec      	b.n	8016384 <_malloc_r+0xa0>
 80163aa:	4623      	mov	r3, r4
 80163ac:	6864      	ldr	r4, [r4, #4]
 80163ae:	e7b2      	b.n	8016316 <_malloc_r+0x32>
 80163b0:	4634      	mov	r4, r6
 80163b2:	6876      	ldr	r6, [r6, #4]
 80163b4:	e7b9      	b.n	801632a <_malloc_r+0x46>
 80163b6:	230c      	movs	r3, #12
 80163b8:	603b      	str	r3, [r7, #0]
 80163ba:	4638      	mov	r0, r7
 80163bc:	f000 fb72 	bl	8016aa4 <__malloc_unlock>
 80163c0:	e7a1      	b.n	8016306 <_malloc_r+0x22>
 80163c2:	6025      	str	r5, [r4, #0]
 80163c4:	e7de      	b.n	8016384 <_malloc_r+0xa0>
 80163c6:	bf00      	nop
 80163c8:	24005a5c 	.word	0x24005a5c

080163cc <_puts_r>:
 80163cc:	b570      	push	{r4, r5, r6, lr}
 80163ce:	460e      	mov	r6, r1
 80163d0:	4605      	mov	r5, r0
 80163d2:	b118      	cbz	r0, 80163dc <_puts_r+0x10>
 80163d4:	6983      	ldr	r3, [r0, #24]
 80163d6:	b90b      	cbnz	r3, 80163dc <_puts_r+0x10>
 80163d8:	f000 fa58 	bl	801688c <__sinit>
 80163dc:	69ab      	ldr	r3, [r5, #24]
 80163de:	68ac      	ldr	r4, [r5, #8]
 80163e0:	b913      	cbnz	r3, 80163e8 <_puts_r+0x1c>
 80163e2:	4628      	mov	r0, r5
 80163e4:	f000 fa52 	bl	801688c <__sinit>
 80163e8:	4b2c      	ldr	r3, [pc, #176]	; (801649c <_puts_r+0xd0>)
 80163ea:	429c      	cmp	r4, r3
 80163ec:	d120      	bne.n	8016430 <_puts_r+0x64>
 80163ee:	686c      	ldr	r4, [r5, #4]
 80163f0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80163f2:	07db      	lsls	r3, r3, #31
 80163f4:	d405      	bmi.n	8016402 <_puts_r+0x36>
 80163f6:	89a3      	ldrh	r3, [r4, #12]
 80163f8:	0598      	lsls	r0, r3, #22
 80163fa:	d402      	bmi.n	8016402 <_puts_r+0x36>
 80163fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80163fe:	f000 fae3 	bl	80169c8 <__retarget_lock_acquire_recursive>
 8016402:	89a3      	ldrh	r3, [r4, #12]
 8016404:	0719      	lsls	r1, r3, #28
 8016406:	d51d      	bpl.n	8016444 <_puts_r+0x78>
 8016408:	6923      	ldr	r3, [r4, #16]
 801640a:	b1db      	cbz	r3, 8016444 <_puts_r+0x78>
 801640c:	3e01      	subs	r6, #1
 801640e:	68a3      	ldr	r3, [r4, #8]
 8016410:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8016414:	3b01      	subs	r3, #1
 8016416:	60a3      	str	r3, [r4, #8]
 8016418:	bb39      	cbnz	r1, 801646a <_puts_r+0x9e>
 801641a:	2b00      	cmp	r3, #0
 801641c:	da38      	bge.n	8016490 <_puts_r+0xc4>
 801641e:	4622      	mov	r2, r4
 8016420:	210a      	movs	r1, #10
 8016422:	4628      	mov	r0, r5
 8016424:	f000 f858 	bl	80164d8 <__swbuf_r>
 8016428:	3001      	adds	r0, #1
 801642a:	d011      	beq.n	8016450 <_puts_r+0x84>
 801642c:	250a      	movs	r5, #10
 801642e:	e011      	b.n	8016454 <_puts_r+0x88>
 8016430:	4b1b      	ldr	r3, [pc, #108]	; (80164a0 <_puts_r+0xd4>)
 8016432:	429c      	cmp	r4, r3
 8016434:	d101      	bne.n	801643a <_puts_r+0x6e>
 8016436:	68ac      	ldr	r4, [r5, #8]
 8016438:	e7da      	b.n	80163f0 <_puts_r+0x24>
 801643a:	4b1a      	ldr	r3, [pc, #104]	; (80164a4 <_puts_r+0xd8>)
 801643c:	429c      	cmp	r4, r3
 801643e:	bf08      	it	eq
 8016440:	68ec      	ldreq	r4, [r5, #12]
 8016442:	e7d5      	b.n	80163f0 <_puts_r+0x24>
 8016444:	4621      	mov	r1, r4
 8016446:	4628      	mov	r0, r5
 8016448:	f000 f898 	bl	801657c <__swsetup_r>
 801644c:	2800      	cmp	r0, #0
 801644e:	d0dd      	beq.n	801640c <_puts_r+0x40>
 8016450:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016454:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016456:	07da      	lsls	r2, r3, #31
 8016458:	d405      	bmi.n	8016466 <_puts_r+0x9a>
 801645a:	89a3      	ldrh	r3, [r4, #12]
 801645c:	059b      	lsls	r3, r3, #22
 801645e:	d402      	bmi.n	8016466 <_puts_r+0x9a>
 8016460:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016462:	f000 fab2 	bl	80169ca <__retarget_lock_release_recursive>
 8016466:	4628      	mov	r0, r5
 8016468:	bd70      	pop	{r4, r5, r6, pc}
 801646a:	2b00      	cmp	r3, #0
 801646c:	da04      	bge.n	8016478 <_puts_r+0xac>
 801646e:	69a2      	ldr	r2, [r4, #24]
 8016470:	429a      	cmp	r2, r3
 8016472:	dc06      	bgt.n	8016482 <_puts_r+0xb6>
 8016474:	290a      	cmp	r1, #10
 8016476:	d004      	beq.n	8016482 <_puts_r+0xb6>
 8016478:	6823      	ldr	r3, [r4, #0]
 801647a:	1c5a      	adds	r2, r3, #1
 801647c:	6022      	str	r2, [r4, #0]
 801647e:	7019      	strb	r1, [r3, #0]
 8016480:	e7c5      	b.n	801640e <_puts_r+0x42>
 8016482:	4622      	mov	r2, r4
 8016484:	4628      	mov	r0, r5
 8016486:	f000 f827 	bl	80164d8 <__swbuf_r>
 801648a:	3001      	adds	r0, #1
 801648c:	d1bf      	bne.n	801640e <_puts_r+0x42>
 801648e:	e7df      	b.n	8016450 <_puts_r+0x84>
 8016490:	6823      	ldr	r3, [r4, #0]
 8016492:	250a      	movs	r5, #10
 8016494:	1c5a      	adds	r2, r3, #1
 8016496:	6022      	str	r2, [r4, #0]
 8016498:	701d      	strb	r5, [r3, #0]
 801649a:	e7db      	b.n	8016454 <_puts_r+0x88>
 801649c:	08017028 	.word	0x08017028
 80164a0:	08017048 	.word	0x08017048
 80164a4:	08017008 	.word	0x08017008

080164a8 <puts>:
 80164a8:	4b02      	ldr	r3, [pc, #8]	; (80164b4 <puts+0xc>)
 80164aa:	4601      	mov	r1, r0
 80164ac:	6818      	ldr	r0, [r3, #0]
 80164ae:	f7ff bf8d 	b.w	80163cc <_puts_r>
 80164b2:	bf00      	nop
 80164b4:	240000a4 	.word	0x240000a4

080164b8 <_sbrk_r>:
 80164b8:	b538      	push	{r3, r4, r5, lr}
 80164ba:	4d06      	ldr	r5, [pc, #24]	; (80164d4 <_sbrk_r+0x1c>)
 80164bc:	2300      	movs	r3, #0
 80164be:	4604      	mov	r4, r0
 80164c0:	4608      	mov	r0, r1
 80164c2:	602b      	str	r3, [r5, #0]
 80164c4:	f7ed f99c 	bl	8003800 <_sbrk>
 80164c8:	1c43      	adds	r3, r0, #1
 80164ca:	d102      	bne.n	80164d2 <_sbrk_r+0x1a>
 80164cc:	682b      	ldr	r3, [r5, #0]
 80164ce:	b103      	cbz	r3, 80164d2 <_sbrk_r+0x1a>
 80164d0:	6023      	str	r3, [r4, #0]
 80164d2:	bd38      	pop	{r3, r4, r5, pc}
 80164d4:	24005a68 	.word	0x24005a68

080164d8 <__swbuf_r>:
 80164d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80164da:	460e      	mov	r6, r1
 80164dc:	4614      	mov	r4, r2
 80164de:	4605      	mov	r5, r0
 80164e0:	b118      	cbz	r0, 80164ea <__swbuf_r+0x12>
 80164e2:	6983      	ldr	r3, [r0, #24]
 80164e4:	b90b      	cbnz	r3, 80164ea <__swbuf_r+0x12>
 80164e6:	f000 f9d1 	bl	801688c <__sinit>
 80164ea:	4b21      	ldr	r3, [pc, #132]	; (8016570 <__swbuf_r+0x98>)
 80164ec:	429c      	cmp	r4, r3
 80164ee:	d12b      	bne.n	8016548 <__swbuf_r+0x70>
 80164f0:	686c      	ldr	r4, [r5, #4]
 80164f2:	69a3      	ldr	r3, [r4, #24]
 80164f4:	60a3      	str	r3, [r4, #8]
 80164f6:	89a3      	ldrh	r3, [r4, #12]
 80164f8:	071a      	lsls	r2, r3, #28
 80164fa:	d52f      	bpl.n	801655c <__swbuf_r+0x84>
 80164fc:	6923      	ldr	r3, [r4, #16]
 80164fe:	b36b      	cbz	r3, 801655c <__swbuf_r+0x84>
 8016500:	6923      	ldr	r3, [r4, #16]
 8016502:	6820      	ldr	r0, [r4, #0]
 8016504:	1ac0      	subs	r0, r0, r3
 8016506:	6963      	ldr	r3, [r4, #20]
 8016508:	b2f6      	uxtb	r6, r6
 801650a:	4283      	cmp	r3, r0
 801650c:	4637      	mov	r7, r6
 801650e:	dc04      	bgt.n	801651a <__swbuf_r+0x42>
 8016510:	4621      	mov	r1, r4
 8016512:	4628      	mov	r0, r5
 8016514:	f000 f926 	bl	8016764 <_fflush_r>
 8016518:	bb30      	cbnz	r0, 8016568 <__swbuf_r+0x90>
 801651a:	68a3      	ldr	r3, [r4, #8]
 801651c:	3b01      	subs	r3, #1
 801651e:	60a3      	str	r3, [r4, #8]
 8016520:	6823      	ldr	r3, [r4, #0]
 8016522:	1c5a      	adds	r2, r3, #1
 8016524:	6022      	str	r2, [r4, #0]
 8016526:	701e      	strb	r6, [r3, #0]
 8016528:	6963      	ldr	r3, [r4, #20]
 801652a:	3001      	adds	r0, #1
 801652c:	4283      	cmp	r3, r0
 801652e:	d004      	beq.n	801653a <__swbuf_r+0x62>
 8016530:	89a3      	ldrh	r3, [r4, #12]
 8016532:	07db      	lsls	r3, r3, #31
 8016534:	d506      	bpl.n	8016544 <__swbuf_r+0x6c>
 8016536:	2e0a      	cmp	r6, #10
 8016538:	d104      	bne.n	8016544 <__swbuf_r+0x6c>
 801653a:	4621      	mov	r1, r4
 801653c:	4628      	mov	r0, r5
 801653e:	f000 f911 	bl	8016764 <_fflush_r>
 8016542:	b988      	cbnz	r0, 8016568 <__swbuf_r+0x90>
 8016544:	4638      	mov	r0, r7
 8016546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016548:	4b0a      	ldr	r3, [pc, #40]	; (8016574 <__swbuf_r+0x9c>)
 801654a:	429c      	cmp	r4, r3
 801654c:	d101      	bne.n	8016552 <__swbuf_r+0x7a>
 801654e:	68ac      	ldr	r4, [r5, #8]
 8016550:	e7cf      	b.n	80164f2 <__swbuf_r+0x1a>
 8016552:	4b09      	ldr	r3, [pc, #36]	; (8016578 <__swbuf_r+0xa0>)
 8016554:	429c      	cmp	r4, r3
 8016556:	bf08      	it	eq
 8016558:	68ec      	ldreq	r4, [r5, #12]
 801655a:	e7ca      	b.n	80164f2 <__swbuf_r+0x1a>
 801655c:	4621      	mov	r1, r4
 801655e:	4628      	mov	r0, r5
 8016560:	f000 f80c 	bl	801657c <__swsetup_r>
 8016564:	2800      	cmp	r0, #0
 8016566:	d0cb      	beq.n	8016500 <__swbuf_r+0x28>
 8016568:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801656c:	e7ea      	b.n	8016544 <__swbuf_r+0x6c>
 801656e:	bf00      	nop
 8016570:	08017028 	.word	0x08017028
 8016574:	08017048 	.word	0x08017048
 8016578:	08017008 	.word	0x08017008

0801657c <__swsetup_r>:
 801657c:	4b32      	ldr	r3, [pc, #200]	; (8016648 <__swsetup_r+0xcc>)
 801657e:	b570      	push	{r4, r5, r6, lr}
 8016580:	681d      	ldr	r5, [r3, #0]
 8016582:	4606      	mov	r6, r0
 8016584:	460c      	mov	r4, r1
 8016586:	b125      	cbz	r5, 8016592 <__swsetup_r+0x16>
 8016588:	69ab      	ldr	r3, [r5, #24]
 801658a:	b913      	cbnz	r3, 8016592 <__swsetup_r+0x16>
 801658c:	4628      	mov	r0, r5
 801658e:	f000 f97d 	bl	801688c <__sinit>
 8016592:	4b2e      	ldr	r3, [pc, #184]	; (801664c <__swsetup_r+0xd0>)
 8016594:	429c      	cmp	r4, r3
 8016596:	d10f      	bne.n	80165b8 <__swsetup_r+0x3c>
 8016598:	686c      	ldr	r4, [r5, #4]
 801659a:	89a3      	ldrh	r3, [r4, #12]
 801659c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80165a0:	0719      	lsls	r1, r3, #28
 80165a2:	d42c      	bmi.n	80165fe <__swsetup_r+0x82>
 80165a4:	06dd      	lsls	r5, r3, #27
 80165a6:	d411      	bmi.n	80165cc <__swsetup_r+0x50>
 80165a8:	2309      	movs	r3, #9
 80165aa:	6033      	str	r3, [r6, #0]
 80165ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80165b0:	81a3      	strh	r3, [r4, #12]
 80165b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80165b6:	e03e      	b.n	8016636 <__swsetup_r+0xba>
 80165b8:	4b25      	ldr	r3, [pc, #148]	; (8016650 <__swsetup_r+0xd4>)
 80165ba:	429c      	cmp	r4, r3
 80165bc:	d101      	bne.n	80165c2 <__swsetup_r+0x46>
 80165be:	68ac      	ldr	r4, [r5, #8]
 80165c0:	e7eb      	b.n	801659a <__swsetup_r+0x1e>
 80165c2:	4b24      	ldr	r3, [pc, #144]	; (8016654 <__swsetup_r+0xd8>)
 80165c4:	429c      	cmp	r4, r3
 80165c6:	bf08      	it	eq
 80165c8:	68ec      	ldreq	r4, [r5, #12]
 80165ca:	e7e6      	b.n	801659a <__swsetup_r+0x1e>
 80165cc:	0758      	lsls	r0, r3, #29
 80165ce:	d512      	bpl.n	80165f6 <__swsetup_r+0x7a>
 80165d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80165d2:	b141      	cbz	r1, 80165e6 <__swsetup_r+0x6a>
 80165d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165d8:	4299      	cmp	r1, r3
 80165da:	d002      	beq.n	80165e2 <__swsetup_r+0x66>
 80165dc:	4630      	mov	r0, r6
 80165de:	f7ff fe15 	bl	801620c <_free_r>
 80165e2:	2300      	movs	r3, #0
 80165e4:	6363      	str	r3, [r4, #52]	; 0x34
 80165e6:	89a3      	ldrh	r3, [r4, #12]
 80165e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80165ec:	81a3      	strh	r3, [r4, #12]
 80165ee:	2300      	movs	r3, #0
 80165f0:	6063      	str	r3, [r4, #4]
 80165f2:	6923      	ldr	r3, [r4, #16]
 80165f4:	6023      	str	r3, [r4, #0]
 80165f6:	89a3      	ldrh	r3, [r4, #12]
 80165f8:	f043 0308 	orr.w	r3, r3, #8
 80165fc:	81a3      	strh	r3, [r4, #12]
 80165fe:	6923      	ldr	r3, [r4, #16]
 8016600:	b94b      	cbnz	r3, 8016616 <__swsetup_r+0x9a>
 8016602:	89a3      	ldrh	r3, [r4, #12]
 8016604:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8016608:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801660c:	d003      	beq.n	8016616 <__swsetup_r+0x9a>
 801660e:	4621      	mov	r1, r4
 8016610:	4630      	mov	r0, r6
 8016612:	f000 fa01 	bl	8016a18 <__smakebuf_r>
 8016616:	89a0      	ldrh	r0, [r4, #12]
 8016618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801661c:	f010 0301 	ands.w	r3, r0, #1
 8016620:	d00a      	beq.n	8016638 <__swsetup_r+0xbc>
 8016622:	2300      	movs	r3, #0
 8016624:	60a3      	str	r3, [r4, #8]
 8016626:	6963      	ldr	r3, [r4, #20]
 8016628:	425b      	negs	r3, r3
 801662a:	61a3      	str	r3, [r4, #24]
 801662c:	6923      	ldr	r3, [r4, #16]
 801662e:	b943      	cbnz	r3, 8016642 <__swsetup_r+0xc6>
 8016630:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016634:	d1ba      	bne.n	80165ac <__swsetup_r+0x30>
 8016636:	bd70      	pop	{r4, r5, r6, pc}
 8016638:	0781      	lsls	r1, r0, #30
 801663a:	bf58      	it	pl
 801663c:	6963      	ldrpl	r3, [r4, #20]
 801663e:	60a3      	str	r3, [r4, #8]
 8016640:	e7f4      	b.n	801662c <__swsetup_r+0xb0>
 8016642:	2000      	movs	r0, #0
 8016644:	e7f7      	b.n	8016636 <__swsetup_r+0xba>
 8016646:	bf00      	nop
 8016648:	240000a4 	.word	0x240000a4
 801664c:	08017028 	.word	0x08017028
 8016650:	08017048 	.word	0x08017048
 8016654:	08017008 	.word	0x08017008

08016658 <__sflush_r>:
 8016658:	898a      	ldrh	r2, [r1, #12]
 801665a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801665e:	4605      	mov	r5, r0
 8016660:	0710      	lsls	r0, r2, #28
 8016662:	460c      	mov	r4, r1
 8016664:	d458      	bmi.n	8016718 <__sflush_r+0xc0>
 8016666:	684b      	ldr	r3, [r1, #4]
 8016668:	2b00      	cmp	r3, #0
 801666a:	dc05      	bgt.n	8016678 <__sflush_r+0x20>
 801666c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801666e:	2b00      	cmp	r3, #0
 8016670:	dc02      	bgt.n	8016678 <__sflush_r+0x20>
 8016672:	2000      	movs	r0, #0
 8016674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016678:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801667a:	2e00      	cmp	r6, #0
 801667c:	d0f9      	beq.n	8016672 <__sflush_r+0x1a>
 801667e:	2300      	movs	r3, #0
 8016680:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016684:	682f      	ldr	r7, [r5, #0]
 8016686:	602b      	str	r3, [r5, #0]
 8016688:	d032      	beq.n	80166f0 <__sflush_r+0x98>
 801668a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801668c:	89a3      	ldrh	r3, [r4, #12]
 801668e:	075a      	lsls	r2, r3, #29
 8016690:	d505      	bpl.n	801669e <__sflush_r+0x46>
 8016692:	6863      	ldr	r3, [r4, #4]
 8016694:	1ac0      	subs	r0, r0, r3
 8016696:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016698:	b10b      	cbz	r3, 801669e <__sflush_r+0x46>
 801669a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801669c:	1ac0      	subs	r0, r0, r3
 801669e:	2300      	movs	r3, #0
 80166a0:	4602      	mov	r2, r0
 80166a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80166a4:	6a21      	ldr	r1, [r4, #32]
 80166a6:	4628      	mov	r0, r5
 80166a8:	47b0      	blx	r6
 80166aa:	1c43      	adds	r3, r0, #1
 80166ac:	89a3      	ldrh	r3, [r4, #12]
 80166ae:	d106      	bne.n	80166be <__sflush_r+0x66>
 80166b0:	6829      	ldr	r1, [r5, #0]
 80166b2:	291d      	cmp	r1, #29
 80166b4:	d82c      	bhi.n	8016710 <__sflush_r+0xb8>
 80166b6:	4a2a      	ldr	r2, [pc, #168]	; (8016760 <__sflush_r+0x108>)
 80166b8:	40ca      	lsrs	r2, r1
 80166ba:	07d6      	lsls	r6, r2, #31
 80166bc:	d528      	bpl.n	8016710 <__sflush_r+0xb8>
 80166be:	2200      	movs	r2, #0
 80166c0:	6062      	str	r2, [r4, #4]
 80166c2:	04d9      	lsls	r1, r3, #19
 80166c4:	6922      	ldr	r2, [r4, #16]
 80166c6:	6022      	str	r2, [r4, #0]
 80166c8:	d504      	bpl.n	80166d4 <__sflush_r+0x7c>
 80166ca:	1c42      	adds	r2, r0, #1
 80166cc:	d101      	bne.n	80166d2 <__sflush_r+0x7a>
 80166ce:	682b      	ldr	r3, [r5, #0]
 80166d0:	b903      	cbnz	r3, 80166d4 <__sflush_r+0x7c>
 80166d2:	6560      	str	r0, [r4, #84]	; 0x54
 80166d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80166d6:	602f      	str	r7, [r5, #0]
 80166d8:	2900      	cmp	r1, #0
 80166da:	d0ca      	beq.n	8016672 <__sflush_r+0x1a>
 80166dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80166e0:	4299      	cmp	r1, r3
 80166e2:	d002      	beq.n	80166ea <__sflush_r+0x92>
 80166e4:	4628      	mov	r0, r5
 80166e6:	f7ff fd91 	bl	801620c <_free_r>
 80166ea:	2000      	movs	r0, #0
 80166ec:	6360      	str	r0, [r4, #52]	; 0x34
 80166ee:	e7c1      	b.n	8016674 <__sflush_r+0x1c>
 80166f0:	6a21      	ldr	r1, [r4, #32]
 80166f2:	2301      	movs	r3, #1
 80166f4:	4628      	mov	r0, r5
 80166f6:	47b0      	blx	r6
 80166f8:	1c41      	adds	r1, r0, #1
 80166fa:	d1c7      	bne.n	801668c <__sflush_r+0x34>
 80166fc:	682b      	ldr	r3, [r5, #0]
 80166fe:	2b00      	cmp	r3, #0
 8016700:	d0c4      	beq.n	801668c <__sflush_r+0x34>
 8016702:	2b1d      	cmp	r3, #29
 8016704:	d001      	beq.n	801670a <__sflush_r+0xb2>
 8016706:	2b16      	cmp	r3, #22
 8016708:	d101      	bne.n	801670e <__sflush_r+0xb6>
 801670a:	602f      	str	r7, [r5, #0]
 801670c:	e7b1      	b.n	8016672 <__sflush_r+0x1a>
 801670e:	89a3      	ldrh	r3, [r4, #12]
 8016710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016714:	81a3      	strh	r3, [r4, #12]
 8016716:	e7ad      	b.n	8016674 <__sflush_r+0x1c>
 8016718:	690f      	ldr	r7, [r1, #16]
 801671a:	2f00      	cmp	r7, #0
 801671c:	d0a9      	beq.n	8016672 <__sflush_r+0x1a>
 801671e:	0793      	lsls	r3, r2, #30
 8016720:	680e      	ldr	r6, [r1, #0]
 8016722:	bf08      	it	eq
 8016724:	694b      	ldreq	r3, [r1, #20]
 8016726:	600f      	str	r7, [r1, #0]
 8016728:	bf18      	it	ne
 801672a:	2300      	movne	r3, #0
 801672c:	eba6 0807 	sub.w	r8, r6, r7
 8016730:	608b      	str	r3, [r1, #8]
 8016732:	f1b8 0f00 	cmp.w	r8, #0
 8016736:	dd9c      	ble.n	8016672 <__sflush_r+0x1a>
 8016738:	6a21      	ldr	r1, [r4, #32]
 801673a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801673c:	4643      	mov	r3, r8
 801673e:	463a      	mov	r2, r7
 8016740:	4628      	mov	r0, r5
 8016742:	47b0      	blx	r6
 8016744:	2800      	cmp	r0, #0
 8016746:	dc06      	bgt.n	8016756 <__sflush_r+0xfe>
 8016748:	89a3      	ldrh	r3, [r4, #12]
 801674a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801674e:	81a3      	strh	r3, [r4, #12]
 8016750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016754:	e78e      	b.n	8016674 <__sflush_r+0x1c>
 8016756:	4407      	add	r7, r0
 8016758:	eba8 0800 	sub.w	r8, r8, r0
 801675c:	e7e9      	b.n	8016732 <__sflush_r+0xda>
 801675e:	bf00      	nop
 8016760:	20400001 	.word	0x20400001

08016764 <_fflush_r>:
 8016764:	b538      	push	{r3, r4, r5, lr}
 8016766:	690b      	ldr	r3, [r1, #16]
 8016768:	4605      	mov	r5, r0
 801676a:	460c      	mov	r4, r1
 801676c:	b913      	cbnz	r3, 8016774 <_fflush_r+0x10>
 801676e:	2500      	movs	r5, #0
 8016770:	4628      	mov	r0, r5
 8016772:	bd38      	pop	{r3, r4, r5, pc}
 8016774:	b118      	cbz	r0, 801677e <_fflush_r+0x1a>
 8016776:	6983      	ldr	r3, [r0, #24]
 8016778:	b90b      	cbnz	r3, 801677e <_fflush_r+0x1a>
 801677a:	f000 f887 	bl	801688c <__sinit>
 801677e:	4b14      	ldr	r3, [pc, #80]	; (80167d0 <_fflush_r+0x6c>)
 8016780:	429c      	cmp	r4, r3
 8016782:	d11b      	bne.n	80167bc <_fflush_r+0x58>
 8016784:	686c      	ldr	r4, [r5, #4]
 8016786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d0ef      	beq.n	801676e <_fflush_r+0xa>
 801678e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016790:	07d0      	lsls	r0, r2, #31
 8016792:	d404      	bmi.n	801679e <_fflush_r+0x3a>
 8016794:	0599      	lsls	r1, r3, #22
 8016796:	d402      	bmi.n	801679e <_fflush_r+0x3a>
 8016798:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801679a:	f000 f915 	bl	80169c8 <__retarget_lock_acquire_recursive>
 801679e:	4628      	mov	r0, r5
 80167a0:	4621      	mov	r1, r4
 80167a2:	f7ff ff59 	bl	8016658 <__sflush_r>
 80167a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80167a8:	07da      	lsls	r2, r3, #31
 80167aa:	4605      	mov	r5, r0
 80167ac:	d4e0      	bmi.n	8016770 <_fflush_r+0xc>
 80167ae:	89a3      	ldrh	r3, [r4, #12]
 80167b0:	059b      	lsls	r3, r3, #22
 80167b2:	d4dd      	bmi.n	8016770 <_fflush_r+0xc>
 80167b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80167b6:	f000 f908 	bl	80169ca <__retarget_lock_release_recursive>
 80167ba:	e7d9      	b.n	8016770 <_fflush_r+0xc>
 80167bc:	4b05      	ldr	r3, [pc, #20]	; (80167d4 <_fflush_r+0x70>)
 80167be:	429c      	cmp	r4, r3
 80167c0:	d101      	bne.n	80167c6 <_fflush_r+0x62>
 80167c2:	68ac      	ldr	r4, [r5, #8]
 80167c4:	e7df      	b.n	8016786 <_fflush_r+0x22>
 80167c6:	4b04      	ldr	r3, [pc, #16]	; (80167d8 <_fflush_r+0x74>)
 80167c8:	429c      	cmp	r4, r3
 80167ca:	bf08      	it	eq
 80167cc:	68ec      	ldreq	r4, [r5, #12]
 80167ce:	e7da      	b.n	8016786 <_fflush_r+0x22>
 80167d0:	08017028 	.word	0x08017028
 80167d4:	08017048 	.word	0x08017048
 80167d8:	08017008 	.word	0x08017008

080167dc <std>:
 80167dc:	2300      	movs	r3, #0
 80167de:	b510      	push	{r4, lr}
 80167e0:	4604      	mov	r4, r0
 80167e2:	e9c0 3300 	strd	r3, r3, [r0]
 80167e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80167ea:	6083      	str	r3, [r0, #8]
 80167ec:	8181      	strh	r1, [r0, #12]
 80167ee:	6643      	str	r3, [r0, #100]	; 0x64
 80167f0:	81c2      	strh	r2, [r0, #14]
 80167f2:	6183      	str	r3, [r0, #24]
 80167f4:	4619      	mov	r1, r3
 80167f6:	2208      	movs	r2, #8
 80167f8:	305c      	adds	r0, #92	; 0x5c
 80167fa:	f7ff fcff 	bl	80161fc <memset>
 80167fe:	4b05      	ldr	r3, [pc, #20]	; (8016814 <std+0x38>)
 8016800:	6263      	str	r3, [r4, #36]	; 0x24
 8016802:	4b05      	ldr	r3, [pc, #20]	; (8016818 <std+0x3c>)
 8016804:	62a3      	str	r3, [r4, #40]	; 0x28
 8016806:	4b05      	ldr	r3, [pc, #20]	; (801681c <std+0x40>)
 8016808:	62e3      	str	r3, [r4, #44]	; 0x2c
 801680a:	4b05      	ldr	r3, [pc, #20]	; (8016820 <std+0x44>)
 801680c:	6224      	str	r4, [r4, #32]
 801680e:	6323      	str	r3, [r4, #48]	; 0x30
 8016810:	bd10      	pop	{r4, pc}
 8016812:	bf00      	nop
 8016814:	08016ab1 	.word	0x08016ab1
 8016818:	08016ad3 	.word	0x08016ad3
 801681c:	08016b0b 	.word	0x08016b0b
 8016820:	08016b2f 	.word	0x08016b2f

08016824 <_cleanup_r>:
 8016824:	4901      	ldr	r1, [pc, #4]	; (801682c <_cleanup_r+0x8>)
 8016826:	f000 b8af 	b.w	8016988 <_fwalk_reent>
 801682a:	bf00      	nop
 801682c:	08016765 	.word	0x08016765

08016830 <__sfmoreglue>:
 8016830:	b570      	push	{r4, r5, r6, lr}
 8016832:	2268      	movs	r2, #104	; 0x68
 8016834:	1e4d      	subs	r5, r1, #1
 8016836:	4355      	muls	r5, r2
 8016838:	460e      	mov	r6, r1
 801683a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801683e:	f7ff fd51 	bl	80162e4 <_malloc_r>
 8016842:	4604      	mov	r4, r0
 8016844:	b140      	cbz	r0, 8016858 <__sfmoreglue+0x28>
 8016846:	2100      	movs	r1, #0
 8016848:	e9c0 1600 	strd	r1, r6, [r0]
 801684c:	300c      	adds	r0, #12
 801684e:	60a0      	str	r0, [r4, #8]
 8016850:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016854:	f7ff fcd2 	bl	80161fc <memset>
 8016858:	4620      	mov	r0, r4
 801685a:	bd70      	pop	{r4, r5, r6, pc}

0801685c <__sfp_lock_acquire>:
 801685c:	4801      	ldr	r0, [pc, #4]	; (8016864 <__sfp_lock_acquire+0x8>)
 801685e:	f000 b8b3 	b.w	80169c8 <__retarget_lock_acquire_recursive>
 8016862:	bf00      	nop
 8016864:	24005a65 	.word	0x24005a65

08016868 <__sfp_lock_release>:
 8016868:	4801      	ldr	r0, [pc, #4]	; (8016870 <__sfp_lock_release+0x8>)
 801686a:	f000 b8ae 	b.w	80169ca <__retarget_lock_release_recursive>
 801686e:	bf00      	nop
 8016870:	24005a65 	.word	0x24005a65

08016874 <__sinit_lock_acquire>:
 8016874:	4801      	ldr	r0, [pc, #4]	; (801687c <__sinit_lock_acquire+0x8>)
 8016876:	f000 b8a7 	b.w	80169c8 <__retarget_lock_acquire_recursive>
 801687a:	bf00      	nop
 801687c:	24005a66 	.word	0x24005a66

08016880 <__sinit_lock_release>:
 8016880:	4801      	ldr	r0, [pc, #4]	; (8016888 <__sinit_lock_release+0x8>)
 8016882:	f000 b8a2 	b.w	80169ca <__retarget_lock_release_recursive>
 8016886:	bf00      	nop
 8016888:	24005a66 	.word	0x24005a66

0801688c <__sinit>:
 801688c:	b510      	push	{r4, lr}
 801688e:	4604      	mov	r4, r0
 8016890:	f7ff fff0 	bl	8016874 <__sinit_lock_acquire>
 8016894:	69a3      	ldr	r3, [r4, #24]
 8016896:	b11b      	cbz	r3, 80168a0 <__sinit+0x14>
 8016898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801689c:	f7ff bff0 	b.w	8016880 <__sinit_lock_release>
 80168a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80168a4:	6523      	str	r3, [r4, #80]	; 0x50
 80168a6:	4b13      	ldr	r3, [pc, #76]	; (80168f4 <__sinit+0x68>)
 80168a8:	4a13      	ldr	r2, [pc, #76]	; (80168f8 <__sinit+0x6c>)
 80168aa:	681b      	ldr	r3, [r3, #0]
 80168ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80168ae:	42a3      	cmp	r3, r4
 80168b0:	bf04      	itt	eq
 80168b2:	2301      	moveq	r3, #1
 80168b4:	61a3      	streq	r3, [r4, #24]
 80168b6:	4620      	mov	r0, r4
 80168b8:	f000 f820 	bl	80168fc <__sfp>
 80168bc:	6060      	str	r0, [r4, #4]
 80168be:	4620      	mov	r0, r4
 80168c0:	f000 f81c 	bl	80168fc <__sfp>
 80168c4:	60a0      	str	r0, [r4, #8]
 80168c6:	4620      	mov	r0, r4
 80168c8:	f000 f818 	bl	80168fc <__sfp>
 80168cc:	2200      	movs	r2, #0
 80168ce:	60e0      	str	r0, [r4, #12]
 80168d0:	2104      	movs	r1, #4
 80168d2:	6860      	ldr	r0, [r4, #4]
 80168d4:	f7ff ff82 	bl	80167dc <std>
 80168d8:	68a0      	ldr	r0, [r4, #8]
 80168da:	2201      	movs	r2, #1
 80168dc:	2109      	movs	r1, #9
 80168de:	f7ff ff7d 	bl	80167dc <std>
 80168e2:	68e0      	ldr	r0, [r4, #12]
 80168e4:	2202      	movs	r2, #2
 80168e6:	2112      	movs	r1, #18
 80168e8:	f7ff ff78 	bl	80167dc <std>
 80168ec:	2301      	movs	r3, #1
 80168ee:	61a3      	str	r3, [r4, #24]
 80168f0:	e7d2      	b.n	8016898 <__sinit+0xc>
 80168f2:	bf00      	nop
 80168f4:	08017004 	.word	0x08017004
 80168f8:	08016825 	.word	0x08016825

080168fc <__sfp>:
 80168fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80168fe:	4607      	mov	r7, r0
 8016900:	f7ff ffac 	bl	801685c <__sfp_lock_acquire>
 8016904:	4b1e      	ldr	r3, [pc, #120]	; (8016980 <__sfp+0x84>)
 8016906:	681e      	ldr	r6, [r3, #0]
 8016908:	69b3      	ldr	r3, [r6, #24]
 801690a:	b913      	cbnz	r3, 8016912 <__sfp+0x16>
 801690c:	4630      	mov	r0, r6
 801690e:	f7ff ffbd 	bl	801688c <__sinit>
 8016912:	3648      	adds	r6, #72	; 0x48
 8016914:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016918:	3b01      	subs	r3, #1
 801691a:	d503      	bpl.n	8016924 <__sfp+0x28>
 801691c:	6833      	ldr	r3, [r6, #0]
 801691e:	b30b      	cbz	r3, 8016964 <__sfp+0x68>
 8016920:	6836      	ldr	r6, [r6, #0]
 8016922:	e7f7      	b.n	8016914 <__sfp+0x18>
 8016924:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016928:	b9d5      	cbnz	r5, 8016960 <__sfp+0x64>
 801692a:	4b16      	ldr	r3, [pc, #88]	; (8016984 <__sfp+0x88>)
 801692c:	60e3      	str	r3, [r4, #12]
 801692e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016932:	6665      	str	r5, [r4, #100]	; 0x64
 8016934:	f000 f847 	bl	80169c6 <__retarget_lock_init_recursive>
 8016938:	f7ff ff96 	bl	8016868 <__sfp_lock_release>
 801693c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016940:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016944:	6025      	str	r5, [r4, #0]
 8016946:	61a5      	str	r5, [r4, #24]
 8016948:	2208      	movs	r2, #8
 801694a:	4629      	mov	r1, r5
 801694c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016950:	f7ff fc54 	bl	80161fc <memset>
 8016954:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016958:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801695c:	4620      	mov	r0, r4
 801695e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016960:	3468      	adds	r4, #104	; 0x68
 8016962:	e7d9      	b.n	8016918 <__sfp+0x1c>
 8016964:	2104      	movs	r1, #4
 8016966:	4638      	mov	r0, r7
 8016968:	f7ff ff62 	bl	8016830 <__sfmoreglue>
 801696c:	4604      	mov	r4, r0
 801696e:	6030      	str	r0, [r6, #0]
 8016970:	2800      	cmp	r0, #0
 8016972:	d1d5      	bne.n	8016920 <__sfp+0x24>
 8016974:	f7ff ff78 	bl	8016868 <__sfp_lock_release>
 8016978:	230c      	movs	r3, #12
 801697a:	603b      	str	r3, [r7, #0]
 801697c:	e7ee      	b.n	801695c <__sfp+0x60>
 801697e:	bf00      	nop
 8016980:	08017004 	.word	0x08017004
 8016984:	ffff0001 	.word	0xffff0001

08016988 <_fwalk_reent>:
 8016988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801698c:	4606      	mov	r6, r0
 801698e:	4688      	mov	r8, r1
 8016990:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016994:	2700      	movs	r7, #0
 8016996:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801699a:	f1b9 0901 	subs.w	r9, r9, #1
 801699e:	d505      	bpl.n	80169ac <_fwalk_reent+0x24>
 80169a0:	6824      	ldr	r4, [r4, #0]
 80169a2:	2c00      	cmp	r4, #0
 80169a4:	d1f7      	bne.n	8016996 <_fwalk_reent+0xe>
 80169a6:	4638      	mov	r0, r7
 80169a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80169ac:	89ab      	ldrh	r3, [r5, #12]
 80169ae:	2b01      	cmp	r3, #1
 80169b0:	d907      	bls.n	80169c2 <_fwalk_reent+0x3a>
 80169b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80169b6:	3301      	adds	r3, #1
 80169b8:	d003      	beq.n	80169c2 <_fwalk_reent+0x3a>
 80169ba:	4629      	mov	r1, r5
 80169bc:	4630      	mov	r0, r6
 80169be:	47c0      	blx	r8
 80169c0:	4307      	orrs	r7, r0
 80169c2:	3568      	adds	r5, #104	; 0x68
 80169c4:	e7e9      	b.n	801699a <_fwalk_reent+0x12>

080169c6 <__retarget_lock_init_recursive>:
 80169c6:	4770      	bx	lr

080169c8 <__retarget_lock_acquire_recursive>:
 80169c8:	4770      	bx	lr

080169ca <__retarget_lock_release_recursive>:
 80169ca:	4770      	bx	lr

080169cc <__swhatbuf_r>:
 80169cc:	b570      	push	{r4, r5, r6, lr}
 80169ce:	460e      	mov	r6, r1
 80169d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169d4:	2900      	cmp	r1, #0
 80169d6:	b096      	sub	sp, #88	; 0x58
 80169d8:	4614      	mov	r4, r2
 80169da:	461d      	mov	r5, r3
 80169dc:	da08      	bge.n	80169f0 <__swhatbuf_r+0x24>
 80169de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80169e2:	2200      	movs	r2, #0
 80169e4:	602a      	str	r2, [r5, #0]
 80169e6:	061a      	lsls	r2, r3, #24
 80169e8:	d410      	bmi.n	8016a0c <__swhatbuf_r+0x40>
 80169ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80169ee:	e00e      	b.n	8016a0e <__swhatbuf_r+0x42>
 80169f0:	466a      	mov	r2, sp
 80169f2:	f000 f8c3 	bl	8016b7c <_fstat_r>
 80169f6:	2800      	cmp	r0, #0
 80169f8:	dbf1      	blt.n	80169de <__swhatbuf_r+0x12>
 80169fa:	9a01      	ldr	r2, [sp, #4]
 80169fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a00:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a04:	425a      	negs	r2, r3
 8016a06:	415a      	adcs	r2, r3
 8016a08:	602a      	str	r2, [r5, #0]
 8016a0a:	e7ee      	b.n	80169ea <__swhatbuf_r+0x1e>
 8016a0c:	2340      	movs	r3, #64	; 0x40
 8016a0e:	2000      	movs	r0, #0
 8016a10:	6023      	str	r3, [r4, #0]
 8016a12:	b016      	add	sp, #88	; 0x58
 8016a14:	bd70      	pop	{r4, r5, r6, pc}
	...

08016a18 <__smakebuf_r>:
 8016a18:	898b      	ldrh	r3, [r1, #12]
 8016a1a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a1c:	079d      	lsls	r5, r3, #30
 8016a1e:	4606      	mov	r6, r0
 8016a20:	460c      	mov	r4, r1
 8016a22:	d507      	bpl.n	8016a34 <__smakebuf_r+0x1c>
 8016a24:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016a28:	6023      	str	r3, [r4, #0]
 8016a2a:	6123      	str	r3, [r4, #16]
 8016a2c:	2301      	movs	r3, #1
 8016a2e:	6163      	str	r3, [r4, #20]
 8016a30:	b002      	add	sp, #8
 8016a32:	bd70      	pop	{r4, r5, r6, pc}
 8016a34:	ab01      	add	r3, sp, #4
 8016a36:	466a      	mov	r2, sp
 8016a38:	f7ff ffc8 	bl	80169cc <__swhatbuf_r>
 8016a3c:	9900      	ldr	r1, [sp, #0]
 8016a3e:	4605      	mov	r5, r0
 8016a40:	4630      	mov	r0, r6
 8016a42:	f7ff fc4f 	bl	80162e4 <_malloc_r>
 8016a46:	b948      	cbnz	r0, 8016a5c <__smakebuf_r+0x44>
 8016a48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a4c:	059a      	lsls	r2, r3, #22
 8016a4e:	d4ef      	bmi.n	8016a30 <__smakebuf_r+0x18>
 8016a50:	f023 0303 	bic.w	r3, r3, #3
 8016a54:	f043 0302 	orr.w	r3, r3, #2
 8016a58:	81a3      	strh	r3, [r4, #12]
 8016a5a:	e7e3      	b.n	8016a24 <__smakebuf_r+0xc>
 8016a5c:	4b0d      	ldr	r3, [pc, #52]	; (8016a94 <__smakebuf_r+0x7c>)
 8016a5e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016a60:	89a3      	ldrh	r3, [r4, #12]
 8016a62:	6020      	str	r0, [r4, #0]
 8016a64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a68:	81a3      	strh	r3, [r4, #12]
 8016a6a:	9b00      	ldr	r3, [sp, #0]
 8016a6c:	6163      	str	r3, [r4, #20]
 8016a6e:	9b01      	ldr	r3, [sp, #4]
 8016a70:	6120      	str	r0, [r4, #16]
 8016a72:	b15b      	cbz	r3, 8016a8c <__smakebuf_r+0x74>
 8016a74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a78:	4630      	mov	r0, r6
 8016a7a:	f000 f891 	bl	8016ba0 <_isatty_r>
 8016a7e:	b128      	cbz	r0, 8016a8c <__smakebuf_r+0x74>
 8016a80:	89a3      	ldrh	r3, [r4, #12]
 8016a82:	f023 0303 	bic.w	r3, r3, #3
 8016a86:	f043 0301 	orr.w	r3, r3, #1
 8016a8a:	81a3      	strh	r3, [r4, #12]
 8016a8c:	89a0      	ldrh	r0, [r4, #12]
 8016a8e:	4305      	orrs	r5, r0
 8016a90:	81a5      	strh	r5, [r4, #12]
 8016a92:	e7cd      	b.n	8016a30 <__smakebuf_r+0x18>
 8016a94:	08016825 	.word	0x08016825

08016a98 <__malloc_lock>:
 8016a98:	4801      	ldr	r0, [pc, #4]	; (8016aa0 <__malloc_lock+0x8>)
 8016a9a:	f7ff bf95 	b.w	80169c8 <__retarget_lock_acquire_recursive>
 8016a9e:	bf00      	nop
 8016aa0:	24005a64 	.word	0x24005a64

08016aa4 <__malloc_unlock>:
 8016aa4:	4801      	ldr	r0, [pc, #4]	; (8016aac <__malloc_unlock+0x8>)
 8016aa6:	f7ff bf90 	b.w	80169ca <__retarget_lock_release_recursive>
 8016aaa:	bf00      	nop
 8016aac:	24005a64 	.word	0x24005a64

08016ab0 <__sread>:
 8016ab0:	b510      	push	{r4, lr}
 8016ab2:	460c      	mov	r4, r1
 8016ab4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ab8:	f000 f894 	bl	8016be4 <_read_r>
 8016abc:	2800      	cmp	r0, #0
 8016abe:	bfab      	itete	ge
 8016ac0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016ac2:	89a3      	ldrhlt	r3, [r4, #12]
 8016ac4:	181b      	addge	r3, r3, r0
 8016ac6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016aca:	bfac      	ite	ge
 8016acc:	6563      	strge	r3, [r4, #84]	; 0x54
 8016ace:	81a3      	strhlt	r3, [r4, #12]
 8016ad0:	bd10      	pop	{r4, pc}

08016ad2 <__swrite>:
 8016ad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ad6:	461f      	mov	r7, r3
 8016ad8:	898b      	ldrh	r3, [r1, #12]
 8016ada:	05db      	lsls	r3, r3, #23
 8016adc:	4605      	mov	r5, r0
 8016ade:	460c      	mov	r4, r1
 8016ae0:	4616      	mov	r6, r2
 8016ae2:	d505      	bpl.n	8016af0 <__swrite+0x1e>
 8016ae4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ae8:	2302      	movs	r3, #2
 8016aea:	2200      	movs	r2, #0
 8016aec:	f000 f868 	bl	8016bc0 <_lseek_r>
 8016af0:	89a3      	ldrh	r3, [r4, #12]
 8016af2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016af6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016afa:	81a3      	strh	r3, [r4, #12]
 8016afc:	4632      	mov	r2, r6
 8016afe:	463b      	mov	r3, r7
 8016b00:	4628      	mov	r0, r5
 8016b02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016b06:	f000 b817 	b.w	8016b38 <_write_r>

08016b0a <__sseek>:
 8016b0a:	b510      	push	{r4, lr}
 8016b0c:	460c      	mov	r4, r1
 8016b0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b12:	f000 f855 	bl	8016bc0 <_lseek_r>
 8016b16:	1c43      	adds	r3, r0, #1
 8016b18:	89a3      	ldrh	r3, [r4, #12]
 8016b1a:	bf15      	itete	ne
 8016b1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016b1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016b22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016b26:	81a3      	strheq	r3, [r4, #12]
 8016b28:	bf18      	it	ne
 8016b2a:	81a3      	strhne	r3, [r4, #12]
 8016b2c:	bd10      	pop	{r4, pc}

08016b2e <__sclose>:
 8016b2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016b32:	f000 b813 	b.w	8016b5c <_close_r>
	...

08016b38 <_write_r>:
 8016b38:	b538      	push	{r3, r4, r5, lr}
 8016b3a:	4d07      	ldr	r5, [pc, #28]	; (8016b58 <_write_r+0x20>)
 8016b3c:	4604      	mov	r4, r0
 8016b3e:	4608      	mov	r0, r1
 8016b40:	4611      	mov	r1, r2
 8016b42:	2200      	movs	r2, #0
 8016b44:	602a      	str	r2, [r5, #0]
 8016b46:	461a      	mov	r2, r3
 8016b48:	f7ec fe09 	bl	800375e <_write>
 8016b4c:	1c43      	adds	r3, r0, #1
 8016b4e:	d102      	bne.n	8016b56 <_write_r+0x1e>
 8016b50:	682b      	ldr	r3, [r5, #0]
 8016b52:	b103      	cbz	r3, 8016b56 <_write_r+0x1e>
 8016b54:	6023      	str	r3, [r4, #0]
 8016b56:	bd38      	pop	{r3, r4, r5, pc}
 8016b58:	24005a68 	.word	0x24005a68

08016b5c <_close_r>:
 8016b5c:	b538      	push	{r3, r4, r5, lr}
 8016b5e:	4d06      	ldr	r5, [pc, #24]	; (8016b78 <_close_r+0x1c>)
 8016b60:	2300      	movs	r3, #0
 8016b62:	4604      	mov	r4, r0
 8016b64:	4608      	mov	r0, r1
 8016b66:	602b      	str	r3, [r5, #0]
 8016b68:	f7ec fe15 	bl	8003796 <_close>
 8016b6c:	1c43      	adds	r3, r0, #1
 8016b6e:	d102      	bne.n	8016b76 <_close_r+0x1a>
 8016b70:	682b      	ldr	r3, [r5, #0]
 8016b72:	b103      	cbz	r3, 8016b76 <_close_r+0x1a>
 8016b74:	6023      	str	r3, [r4, #0]
 8016b76:	bd38      	pop	{r3, r4, r5, pc}
 8016b78:	24005a68 	.word	0x24005a68

08016b7c <_fstat_r>:
 8016b7c:	b538      	push	{r3, r4, r5, lr}
 8016b7e:	4d07      	ldr	r5, [pc, #28]	; (8016b9c <_fstat_r+0x20>)
 8016b80:	2300      	movs	r3, #0
 8016b82:	4604      	mov	r4, r0
 8016b84:	4608      	mov	r0, r1
 8016b86:	4611      	mov	r1, r2
 8016b88:	602b      	str	r3, [r5, #0]
 8016b8a:	f7ec fe10 	bl	80037ae <_fstat>
 8016b8e:	1c43      	adds	r3, r0, #1
 8016b90:	d102      	bne.n	8016b98 <_fstat_r+0x1c>
 8016b92:	682b      	ldr	r3, [r5, #0]
 8016b94:	b103      	cbz	r3, 8016b98 <_fstat_r+0x1c>
 8016b96:	6023      	str	r3, [r4, #0]
 8016b98:	bd38      	pop	{r3, r4, r5, pc}
 8016b9a:	bf00      	nop
 8016b9c:	24005a68 	.word	0x24005a68

08016ba0 <_isatty_r>:
 8016ba0:	b538      	push	{r3, r4, r5, lr}
 8016ba2:	4d06      	ldr	r5, [pc, #24]	; (8016bbc <_isatty_r+0x1c>)
 8016ba4:	2300      	movs	r3, #0
 8016ba6:	4604      	mov	r4, r0
 8016ba8:	4608      	mov	r0, r1
 8016baa:	602b      	str	r3, [r5, #0]
 8016bac:	f7ec fe0f 	bl	80037ce <_isatty>
 8016bb0:	1c43      	adds	r3, r0, #1
 8016bb2:	d102      	bne.n	8016bba <_isatty_r+0x1a>
 8016bb4:	682b      	ldr	r3, [r5, #0]
 8016bb6:	b103      	cbz	r3, 8016bba <_isatty_r+0x1a>
 8016bb8:	6023      	str	r3, [r4, #0]
 8016bba:	bd38      	pop	{r3, r4, r5, pc}
 8016bbc:	24005a68 	.word	0x24005a68

08016bc0 <_lseek_r>:
 8016bc0:	b538      	push	{r3, r4, r5, lr}
 8016bc2:	4d07      	ldr	r5, [pc, #28]	; (8016be0 <_lseek_r+0x20>)
 8016bc4:	4604      	mov	r4, r0
 8016bc6:	4608      	mov	r0, r1
 8016bc8:	4611      	mov	r1, r2
 8016bca:	2200      	movs	r2, #0
 8016bcc:	602a      	str	r2, [r5, #0]
 8016bce:	461a      	mov	r2, r3
 8016bd0:	f7ec fe08 	bl	80037e4 <_lseek>
 8016bd4:	1c43      	adds	r3, r0, #1
 8016bd6:	d102      	bne.n	8016bde <_lseek_r+0x1e>
 8016bd8:	682b      	ldr	r3, [r5, #0]
 8016bda:	b103      	cbz	r3, 8016bde <_lseek_r+0x1e>
 8016bdc:	6023      	str	r3, [r4, #0]
 8016bde:	bd38      	pop	{r3, r4, r5, pc}
 8016be0:	24005a68 	.word	0x24005a68

08016be4 <_read_r>:
 8016be4:	b538      	push	{r3, r4, r5, lr}
 8016be6:	4d07      	ldr	r5, [pc, #28]	; (8016c04 <_read_r+0x20>)
 8016be8:	4604      	mov	r4, r0
 8016bea:	4608      	mov	r0, r1
 8016bec:	4611      	mov	r1, r2
 8016bee:	2200      	movs	r2, #0
 8016bf0:	602a      	str	r2, [r5, #0]
 8016bf2:	461a      	mov	r2, r3
 8016bf4:	f7ec fd96 	bl	8003724 <_read>
 8016bf8:	1c43      	adds	r3, r0, #1
 8016bfa:	d102      	bne.n	8016c02 <_read_r+0x1e>
 8016bfc:	682b      	ldr	r3, [r5, #0]
 8016bfe:	b103      	cbz	r3, 8016c02 <_read_r+0x1e>
 8016c00:	6023      	str	r3, [r4, #0]
 8016c02:	bd38      	pop	{r3, r4, r5, pc}
 8016c04:	24005a68 	.word	0x24005a68

08016c08 <_init>:
 8016c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c0a:	bf00      	nop
 8016c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c0e:	bc08      	pop	{r3}
 8016c10:	469e      	mov	lr, r3
 8016c12:	4770      	bx	lr

08016c14 <_fini>:
 8016c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016c16:	bf00      	nop
 8016c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016c1a:	bc08      	pop	{r3}
 8016c1c:	469e      	mov	lr, r3
 8016c1e:	4770      	bx	lr
