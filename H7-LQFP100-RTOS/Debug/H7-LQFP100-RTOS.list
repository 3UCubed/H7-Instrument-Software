
H7-LQFP100-RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00016850  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  08016af0  08016af0  00026af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08016f04  08016f04  00026f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08016f0c  08016f0c  00026f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08016f10  08016f10  00026f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000108  24000000  08016f14  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000058ec  24000120  0801701c  00030120  2**5
                  ALLOC
  8 ._user_heap_stack 00000604  24005a0c  0801701c  00035a0c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00030108  2**0
                  CONTENTS, READONLY
 10 .debug_info   00032af7  00000000  00000000  00030136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000054e2  00000000  00000000  00062c2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002648  00000000  00000000  00068110  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00002450  00000000  00000000  0006a758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00007a96  00000000  00000000  0006cba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00030acd  00000000  00000000  0007463e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0019468e  00000000  00000000  000a510b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00239799  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000ac68  00000000  00000000  002397ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000120 	.word	0x24000120
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08016ad8 	.word	0x08016ad8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000124 	.word	0x24000124
 80002dc:	08016ad8 	.word	0x08016ad8

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <HAL_TIM_OC_DelayElapsedCallback>:
 * specific actions based on the timer instance.
 *
 * @param htim Pointer to the timer handle structure.
 *             Supported timer instances are htim1, htim2, and htim3.
 */
void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	if (htim == &htim1) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a13      	ldr	r2, [pc, #76]	; (800063c <HAL_TIM_OC_DelayElapsedCallback+0x58>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <HAL_TIM_OC_DelayElapsedCallback+0x1e>
		osEventFlagsSet(event_flags, PMT_FLAG_ID);
 80005f4:	4b12      	ldr	r3, [pc, #72]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2101      	movs	r1, #1
 80005fa:	4618      	mov	r0, r3
 80005fc:	f012 fa50 	bl	8012aa0 <osEventFlagsSet>
	} else if (htim == &htim3) {
		osEventFlagsSet(event_flags, HK_FLAG_ID);
	} else {
		printf("Unknown Timer Interrupt\n");
	}
}
 8000600:	e018      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	} else if (htim == &htim2) {
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a0f      	ldr	r2, [pc, #60]	; (8000644 <HAL_TIM_OC_DelayElapsedCallback+0x60>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d106      	bne.n	8000618 <HAL_TIM_OC_DelayElapsedCallback+0x34>
		osEventFlagsSet(event_flags, ERPA_FLAG_ID);
 800060a:	4b0d      	ldr	r3, [pc, #52]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	2102      	movs	r1, #2
 8000610:	4618      	mov	r0, r3
 8000612:	f012 fa45 	bl	8012aa0 <osEventFlagsSet>
}
 8000616:	e00d      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
	} else if (htim == &htim3) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a0b      	ldr	r2, [pc, #44]	; (8000648 <HAL_TIM_OC_DelayElapsedCallback+0x64>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <HAL_TIM_OC_DelayElapsedCallback+0x4a>
		osEventFlagsSet(event_flags, HK_FLAG_ID);
 8000620:	4b07      	ldr	r3, [pc, #28]	; (8000640 <HAL_TIM_OC_DelayElapsedCallback+0x5c>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2104      	movs	r1, #4
 8000626:	4618      	mov	r0, r3
 8000628:	f012 fa3a 	bl	8012aa0 <osEventFlagsSet>
}
 800062c:	e002      	b.n	8000634 <HAL_TIM_OC_DelayElapsedCallback+0x50>
		printf("Unknown Timer Interrupt\n");
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <HAL_TIM_OC_DelayElapsedCallback+0x68>)
 8000630:	f015 fea2 	bl	8016378 <puts>
}
 8000634:	bf00      	nop
 8000636:	3708      	adds	r7, #8
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}
 800063c:	24000508 	.word	0x24000508
 8000640:	24000be8 	.word	0x24000be8
 8000644:	24000554 	.word	0x24000554
 8000648:	240005a0 	.word	0x240005a0
 800064c:	08016b50 	.word	0x08016b50

08000650 <HAL_UART_RxCpltCallback>:
 * toggling GPIO pins, starting or stopping timers, and other operations.
 *
 * @param huart Pointer to a UART_HandleTypeDef structure that contains
 *              the configuration information for the specified UART module.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000650:	b580      	push	{r7, lr}
 8000652:	b086      	sub	sp, #24
 8000654:	af02      	add	r7, sp, #8
 8000656:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 8000658:	2201      	movs	r2, #1
 800065a:	49f2      	ldr	r1, [pc, #968]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 800065c:	48f2      	ldr	r0, [pc, #968]	; (8000a28 <HAL_UART_RxCpltCallback+0x3d8>)
 800065e:	f00f fbb9 	bl	800fdd4 <HAL_UART_Receive_IT>
	unsigned char key = UART_RX_BUFFER[0];
 8000662:	4bf0      	ldr	r3, [pc, #960]	; (8000a24 <HAL_UART_RxCpltCallback+0x3d4>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	73fb      	strb	r3, [r7, #15]

	switch (key) {
 8000668:	7bfb      	ldrb	r3, [r7, #15]
 800066a:	2be0      	cmp	r3, #224	; 0xe0
 800066c:	f200 83e8 	bhi.w	8000e40 <HAL_UART_RxCpltCallback+0x7f0>
 8000670:	a201      	add	r2, pc, #4	; (adr r2, 8000678 <HAL_UART_RxCpltCallback+0x28>)
 8000672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000676:	bf00      	nop
 8000678:	08000a11 	.word	0x08000a11
 800067c:	08000a4d 	.word	0x08000a4d
 8000680:	08000ad3 	.word	0x08000ad3
 8000684:	08000afd 	.word	0x08000afd
 8000688:	08000b25 	.word	0x08000b25
 800068c:	08000b4f 	.word	0x08000b4f
 8000690:	08000b7b 	.word	0x08000b7b
 8000694:	08000ba7 	.word	0x08000ba7
 8000698:	08000bd1 	.word	0x08000bd1
 800069c:	08000bfd 	.word	0x08000bfd
 80006a0:	08000c29 	.word	0x08000c29
 80006a4:	08000c5b 	.word	0x08000c5b
 80006a8:	08000c8d 	.word	0x08000c8d
 80006ac:	08000cdf 	.word	0x08000cdf
 80006b0:	08000de5 	.word	0x08000de5
 80006b4:	08000e15 	.word	0x08000e15
 80006b8:	080009fd 	.word	0x080009fd
 80006bc:	08000a39 	.word	0x08000a39
 80006c0:	08000abd 	.word	0x08000abd
 80006c4:	08000ae9 	.word	0x08000ae9
 80006c8:	08000b11 	.word	0x08000b11
 80006cc:	08000b39 	.word	0x08000b39
 80006d0:	08000b65 	.word	0x08000b65
 80006d4:	08000b91 	.word	0x08000b91
 80006d8:	08000bbd 	.word	0x08000bbd
 80006dc:	08000be5 	.word	0x08000be5
 80006e0:	08000c0d 	.word	0x08000c0d
 80006e4:	08000c3f 	.word	0x08000c3f
 80006e8:	08000c71 	.word	0x08000c71
 80006ec:	08000ca3 	.word	0x08000ca3
 80006f0:	08000dbd 	.word	0x08000dbd
 80006f4:	08000e0d 	.word	0x08000e0d
 80006f8:	08000e41 	.word	0x08000e41
 80006fc:	08000e41 	.word	0x08000e41
 8000700:	08000e41 	.word	0x08000e41
 8000704:	08000e41 	.word	0x08000e41
 8000708:	08000e41 	.word	0x08000e41
 800070c:	08000e41 	.word	0x08000e41
 8000710:	08000e41 	.word	0x08000e41
 8000714:	08000e41 	.word	0x08000e41
 8000718:	08000e41 	.word	0x08000e41
 800071c:	08000e41 	.word	0x08000e41
 8000720:	08000e41 	.word	0x08000e41
 8000724:	08000e41 	.word	0x08000e41
 8000728:	08000e41 	.word	0x08000e41
 800072c:	08000e41 	.word	0x08000e41
 8000730:	08000e41 	.word	0x08000e41
 8000734:	08000e41 	.word	0x08000e41
 8000738:	08000e41 	.word	0x08000e41
 800073c:	08000e41 	.word	0x08000e41
 8000740:	08000e41 	.word	0x08000e41
 8000744:	08000e41 	.word	0x08000e41
 8000748:	08000e41 	.word	0x08000e41
 800074c:	08000e41 	.word	0x08000e41
 8000750:	08000e41 	.word	0x08000e41
 8000754:	08000e41 	.word	0x08000e41
 8000758:	08000e41 	.word	0x08000e41
 800075c:	08000e41 	.word	0x08000e41
 8000760:	08000e41 	.word	0x08000e41
 8000764:	08000e41 	.word	0x08000e41
 8000768:	08000e41 	.word	0x08000e41
 800076c:	08000e41 	.word	0x08000e41
 8000770:	08000e41 	.word	0x08000e41
 8000774:	08000e41 	.word	0x08000e41
 8000778:	08000e41 	.word	0x08000e41
 800077c:	08000e41 	.word	0x08000e41
 8000780:	08000e41 	.word	0x08000e41
 8000784:	08000e41 	.word	0x08000e41
 8000788:	08000e41 	.word	0x08000e41
 800078c:	08000e41 	.word	0x08000e41
 8000790:	08000e41 	.word	0x08000e41
 8000794:	08000e41 	.word	0x08000e41
 8000798:	08000e41 	.word	0x08000e41
 800079c:	08000e41 	.word	0x08000e41
 80007a0:	08000e41 	.word	0x08000e41
 80007a4:	08000e41 	.word	0x08000e41
 80007a8:	08000e41 	.word	0x08000e41
 80007ac:	08000e41 	.word	0x08000e41
 80007b0:	08000e41 	.word	0x08000e41
 80007b4:	08000e41 	.word	0x08000e41
 80007b8:	08000e41 	.word	0x08000e41
 80007bc:	08000e41 	.word	0x08000e41
 80007c0:	08000e41 	.word	0x08000e41
 80007c4:	08000e41 	.word	0x08000e41
 80007c8:	08000e41 	.word	0x08000e41
 80007cc:	08000e41 	.word	0x08000e41
 80007d0:	08000e41 	.word	0x08000e41
 80007d4:	08000e41 	.word	0x08000e41
 80007d8:	08000e41 	.word	0x08000e41
 80007dc:	08000e41 	.word	0x08000e41
 80007e0:	08000e41 	.word	0x08000e41
 80007e4:	08000e41 	.word	0x08000e41
 80007e8:	08000e41 	.word	0x08000e41
 80007ec:	08000e41 	.word	0x08000e41
 80007f0:	08000e41 	.word	0x08000e41
 80007f4:	08000e41 	.word	0x08000e41
 80007f8:	08000e41 	.word	0x08000e41
 80007fc:	08000e41 	.word	0x08000e41
 8000800:	08000e41 	.word	0x08000e41
 8000804:	08000e41 	.word	0x08000e41
 8000808:	08000e41 	.word	0x08000e41
 800080c:	08000e41 	.word	0x08000e41
 8000810:	08000e41 	.word	0x08000e41
 8000814:	08000e41 	.word	0x08000e41
 8000818:	08000e41 	.word	0x08000e41
 800081c:	08000e41 	.word	0x08000e41
 8000820:	08000e41 	.word	0x08000e41
 8000824:	08000e41 	.word	0x08000e41
 8000828:	08000e41 	.word	0x08000e41
 800082c:	08000e41 	.word	0x08000e41
 8000830:	08000e41 	.word	0x08000e41
 8000834:	08000e41 	.word	0x08000e41
 8000838:	08000e41 	.word	0x08000e41
 800083c:	08000e41 	.word	0x08000e41
 8000840:	08000e41 	.word	0x08000e41
 8000844:	08000e41 	.word	0x08000e41
 8000848:	08000e41 	.word	0x08000e41
 800084c:	08000e41 	.word	0x08000e41
 8000850:	08000e41 	.word	0x08000e41
 8000854:	08000e41 	.word	0x08000e41
 8000858:	08000e41 	.word	0x08000e41
 800085c:	08000e41 	.word	0x08000e41
 8000860:	08000e41 	.word	0x08000e41
 8000864:	08000e41 	.word	0x08000e41
 8000868:	08000e41 	.word	0x08000e41
 800086c:	08000e41 	.word	0x08000e41
 8000870:	08000e41 	.word	0x08000e41
 8000874:	08000e41 	.word	0x08000e41
 8000878:	08000e41 	.word	0x08000e41
 800087c:	08000e41 	.word	0x08000e41
 8000880:	08000e41 	.word	0x08000e41
 8000884:	08000e41 	.word	0x08000e41
 8000888:	08000e41 	.word	0x08000e41
 800088c:	08000e41 	.word	0x08000e41
 8000890:	08000e41 	.word	0x08000e41
 8000894:	08000e41 	.word	0x08000e41
 8000898:	08000e41 	.word	0x08000e41
 800089c:	08000e41 	.word	0x08000e41
 80008a0:	08000e41 	.word	0x08000e41
 80008a4:	08000e41 	.word	0x08000e41
 80008a8:	08000e41 	.word	0x08000e41
 80008ac:	08000e41 	.word	0x08000e41
 80008b0:	08000e41 	.word	0x08000e41
 80008b4:	08000e41 	.word	0x08000e41
 80008b8:	08000e41 	.word	0x08000e41
 80008bc:	08000e41 	.word	0x08000e41
 80008c0:	08000e41 	.word	0x08000e41
 80008c4:	08000e41 	.word	0x08000e41
 80008c8:	08000e41 	.word	0x08000e41
 80008cc:	08000e41 	.word	0x08000e41
 80008d0:	08000e41 	.word	0x08000e41
 80008d4:	08000e41 	.word	0x08000e41
 80008d8:	08000e41 	.word	0x08000e41
 80008dc:	08000e41 	.word	0x08000e41
 80008e0:	08000e41 	.word	0x08000e41
 80008e4:	08000e41 	.word	0x08000e41
 80008e8:	08000e41 	.word	0x08000e41
 80008ec:	08000e41 	.word	0x08000e41
 80008f0:	08000e41 	.word	0x08000e41
 80008f4:	08000e41 	.word	0x08000e41
 80008f8:	08000e41 	.word	0x08000e41
 80008fc:	08000e41 	.word	0x08000e41
 8000900:	08000e41 	.word	0x08000e41
 8000904:	08000e41 	.word	0x08000e41
 8000908:	08000e41 	.word	0x08000e41
 800090c:	08000e41 	.word	0x08000e41
 8000910:	08000e41 	.word	0x08000e41
 8000914:	08000e41 	.word	0x08000e41
 8000918:	08000e41 	.word	0x08000e41
 800091c:	08000e41 	.word	0x08000e41
 8000920:	08000e41 	.word	0x08000e41
 8000924:	08000e41 	.word	0x08000e41
 8000928:	08000e41 	.word	0x08000e41
 800092c:	08000e41 	.word	0x08000e41
 8000930:	08000e41 	.word	0x08000e41
 8000934:	08000e41 	.word	0x08000e41
 8000938:	08000e41 	.word	0x08000e41
 800093c:	08000e41 	.word	0x08000e41
 8000940:	08000e41 	.word	0x08000e41
 8000944:	08000e41 	.word	0x08000e41
 8000948:	08000e41 	.word	0x08000e41
 800094c:	08000e41 	.word	0x08000e41
 8000950:	08000e41 	.word	0x08000e41
 8000954:	08000e41 	.word	0x08000e41
 8000958:	08000e41 	.word	0x08000e41
 800095c:	08000e41 	.word	0x08000e41
 8000960:	08000e41 	.word	0x08000e41
 8000964:	08000e41 	.word	0x08000e41
 8000968:	08000e41 	.word	0x08000e41
 800096c:	08000e41 	.word	0x08000e41
 8000970:	08000e41 	.word	0x08000e41
 8000974:	08000e41 	.word	0x08000e41
 8000978:	08000e41 	.word	0x08000e41
 800097c:	08000e41 	.word	0x08000e41
 8000980:	08000e41 	.word	0x08000e41
 8000984:	08000e41 	.word	0x08000e41
 8000988:	08000e41 	.word	0x08000e41
 800098c:	08000e41 	.word	0x08000e41
 8000990:	08000e41 	.word	0x08000e41
 8000994:	08000e41 	.word	0x08000e41
 8000998:	08000e41 	.word	0x08000e41
 800099c:	08000e41 	.word	0x08000e41
 80009a0:	08000e41 	.word	0x08000e41
 80009a4:	08000e41 	.word	0x08000e41
 80009a8:	08000e41 	.word	0x08000e41
 80009ac:	08000e41 	.word	0x08000e41
 80009b0:	08000e41 	.word	0x08000e41
 80009b4:	08000e41 	.word	0x08000e41
 80009b8:	08000e2f 	.word	0x08000e2f
 80009bc:	08000e41 	.word	0x08000e41
 80009c0:	08000e41 	.word	0x08000e41
 80009c4:	08000e41 	.word	0x08000e41
 80009c8:	08000e41 	.word	0x08000e41
 80009cc:	08000e41 	.word	0x08000e41
 80009d0:	08000e41 	.word	0x08000e41
 80009d4:	08000e41 	.word	0x08000e41
 80009d8:	08000e41 	.word	0x08000e41
 80009dc:	08000e41 	.word	0x08000e41
 80009e0:	08000e41 	.word	0x08000e41
 80009e4:	08000e41 	.word	0x08000e41
 80009e8:	08000e41 	.word	0x08000e41
 80009ec:	08000e41 	.word	0x08000e41
 80009f0:	08000e41 	.word	0x08000e41
 80009f4:	08000e41 	.word	0x08000e41
 80009f8:	08000e1d 	.word	0x08000e1d
	case 0x10: {
		printf("SDN1 ON\n");
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <HAL_UART_RxCpltCallback+0x3dc>)
 80009fe:	f015 fcbb 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET);
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a04:	2104      	movs	r1, #4
 8000a06:	2201      	movs	r2, #1
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f008 f93b 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000a0e:	e222      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x00: {
		printf("SDN1 OFF\n");
 8000a10:	4808      	ldr	r0, [pc, #32]	; (8000a34 <HAL_UART_RxCpltCallback+0x3e4>)
 8000a12:	f015 fcb1 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET);
 8000a16:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_UART_RxCpltCallback+0x3e0>)
 8000a18:	2104      	movs	r1, #4
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f008 f931 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000a22:	e218      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
 8000a24:	24000bec 	.word	0x24000bec
 8000a28:	240005ec 	.word	0x240005ec
 8000a2c:	08016b68 	.word	0x08016b68
 8000a30:	58020400 	.word	0x58020400
 8000a34:	08016b70 	.word	0x08016b70
	}
	case 0x11: {
		printf("SYS ON PB5\n");
 8000a38:	48b8      	ldr	r0, [pc, #736]	; (8000d1c <HAL_UART_RxCpltCallback+0x6cc>)
 8000a3a:	f015 fc9d 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET);
 8000a3e:	4bb8      	ldr	r3, [pc, #736]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	2201      	movs	r2, #1
 8000a44:	4618      	mov	r0, r3
 8000a46:	f008 f91d 	bl	8008c84 <HAL_GPIO_WritePin>

		break;
 8000a4a:	e204      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x01: {
		printf("SYS OFF PB5\n");
 8000a4c:	48b5      	ldr	r0, [pc, #724]	; (8000d24 <HAL_UART_RxCpltCallback+0x6d4>)
 8000a4e:	f015 fc93 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // turning off PB5 & ensuring all other enables are off
 8000a52:	4bb3      	ldr	r3, [pc, #716]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a54:	2120      	movs	r1, #32
 8000a56:	2200      	movs	r2, #0
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f008 f913 	bl	8008c84 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000a5e:	4bb0      	ldr	r3, [pc, #704]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000a60:	2140      	movs	r1, #64	; 0x40
 8000a62:	2200      	movs	r2, #0
 8000a64:	4618      	mov	r0, r3
 8000a66:	f008 f90d 	bl	8008c84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000a6a:	4baf      	ldr	r3, [pc, #700]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	2200      	movs	r2, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f008 f906 	bl	8008c84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000a78:	4bab      	ldr	r3, [pc, #684]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a7e:	2200      	movs	r2, #0
 8000a80:	4618      	mov	r0, r3
 8000a82:	f008 f8ff 	bl	8008c84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000a86:	4ba8      	ldr	r3, [pc, #672]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a88:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f008 f8f8 	bl	8008c84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000a94:	4ba4      	ldr	r3, [pc, #656]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000a96:	2140      	movs	r1, #64	; 0x40
 8000a98:	2200      	movs	r2, #0
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f008 f8f2 	bl	8008c84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000aa0:	4ba1      	ldr	r3, [pc, #644]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aa2:	2180      	movs	r1, #128	; 0x80
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f008 f8ec 	bl	8008c84 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000aac:	4b9e      	ldr	r3, [pc, #632]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f008 f8e5 	bl	8008c84 <HAL_GPIO_WritePin>

		break;
 8000aba:	e1cc      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x12: {
		printf("3v3 ON PC10\n");
 8000abc:	489b      	ldr	r0, [pc, #620]	; (8000d2c <HAL_UART_RxCpltCallback+0x6dc>)
 8000abe:	f015 fc5b 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET);
 8000ac2:	4b99      	ldr	r3, [pc, #612]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	2201      	movs	r2, #1
 8000aca:	4618      	mov	r0, r3
 8000acc:	f008 f8da 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000ad0:	e1c1      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x02: {
		printf("3v3 OFF PC10\n");
 8000ad2:	4897      	ldr	r0, [pc, #604]	; (8000d30 <HAL_UART_RxCpltCallback+0x6e0>)
 8000ad4:	f015 fc50 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET);
 8000ad8:	4b93      	ldr	r3, [pc, #588]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000ada:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f008 f8cf 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000ae6:	e1b6      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x13: {
		printf("5v ON PC7\n");
 8000ae8:	4892      	ldr	r0, [pc, #584]	; (8000d34 <HAL_UART_RxCpltCallback+0x6e4>)
 8000aea:	f015 fc45 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET);
 8000aee:	4b8e      	ldr	r3, [pc, #568]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000af0:	2180      	movs	r1, #128	; 0x80
 8000af2:	2201      	movs	r2, #1
 8000af4:	4618      	mov	r0, r3
 8000af6:	f008 f8c5 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000afa:	e1ac      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x03: {
		printf("5v OFF PC7\n");
 8000afc:	488e      	ldr	r0, [pc, #568]	; (8000d38 <HAL_UART_RxCpltCallback+0x6e8>)
 8000afe:	f015 fc3b 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET);
 8000b02:	4b89      	ldr	r3, [pc, #548]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	2200      	movs	r2, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f008 f8bb 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000b0e:	e1a2      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x14: {
		printf("n3v3 ON PC6\n");
 8000b10:	488a      	ldr	r0, [pc, #552]	; (8000d3c <HAL_UART_RxCpltCallback+0x6ec>)
 8000b12:	f015 fc31 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET);
 8000b16:	4b84      	ldr	r3, [pc, #528]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b18:	2140      	movs	r1, #64	; 0x40
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f008 f8b1 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000b22:	e198      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x04: {
		printf("n3v3 OFF PC6\n");
 8000b24:	4886      	ldr	r0, [pc, #536]	; (8000d40 <HAL_UART_RxCpltCallback+0x6f0>)
 8000b26:	f015 fc27 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET);
 8000b2a:	4b7f      	ldr	r3, [pc, #508]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f008 f8a7 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000b36:	e18e      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x15: {
		printf("n5v ON PC8\n");
 8000b38:	4882      	ldr	r0, [pc, #520]	; (8000d44 <HAL_UART_RxCpltCallback+0x6f4>)
 8000b3a:	f015 fc1d 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET);
 8000b3e:	4b7a      	ldr	r3, [pc, #488]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b40:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b44:	2201      	movs	r2, #1
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 f89c 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000b4c:	e183      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x05: {
		printf("n5v OFF PC8\n");
 8000b4e:	487e      	ldr	r0, [pc, #504]	; (8000d48 <HAL_UART_RxCpltCallback+0x6f8>)
 8000b50:	f015 fc12 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET);
 8000b54:	4b74      	ldr	r3, [pc, #464]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f008 f891 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000b62:	e178      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x16: {
		printf("15v ON PC9\n");
 8000b64:	4879      	ldr	r0, [pc, #484]	; (8000d4c <HAL_UART_RxCpltCallback+0x6fc>)
 8000b66:	f015 fc07 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET);
 8000b6a:	4b6f      	ldr	r3, [pc, #444]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b6c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b70:	2201      	movs	r2, #1
 8000b72:	4618      	mov	r0, r3
 8000b74:	f008 f886 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000b78:	e16d      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x06: {
		printf("15v OFF PC9\n");
 8000b7a:	4875      	ldr	r0, [pc, #468]	; (8000d50 <HAL_UART_RxCpltCallback+0x700>)
 8000b7c:	f015 fbfc 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET);
 8000b80:	4b69      	ldr	r3, [pc, #420]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b82:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b86:	2200      	movs	r2, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f008 f87b 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000b8e:	e162      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x17: {
		printf("n200v ON PC13\n");
 8000b90:	4870      	ldr	r0, [pc, #448]	; (8000d54 <HAL_UART_RxCpltCallback+0x704>)
 8000b92:	f015 fbf1 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_SET);
 8000b96:	4b64      	ldr	r3, [pc, #400]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000b98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f008 f870 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000ba4:	e157      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x07: {
		printf("n200v OFF PC13\n");
 8000ba6:	486c      	ldr	r0, [pc, #432]	; (8000d58 <HAL_UART_RxCpltCallback+0x708>)
 8000ba8:	f015 fbe6 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[3].gpio, gpios[3].pin, GPIO_PIN_RESET);
 8000bac:	4b5e      	ldr	r3, [pc, #376]	; (8000d28 <HAL_UART_RxCpltCallback+0x6d8>)
 8000bae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 f865 	bl	8008c84 <HAL_GPIO_WritePin>

		break;
 8000bba:	e14c      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x18: {
		printf("800v ON PB6\n");
 8000bbc:	4867      	ldr	r0, [pc, #412]	; (8000d5c <HAL_UART_RxCpltCallback+0x70c>)
 8000bbe:	f015 fbdb 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_SET);
 8000bc2:	4b57      	ldr	r3, [pc, #348]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f008 f85b 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000bce:	e142      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x08: {
		printf("800v OFF PB6\n");
 8000bd0:	4863      	ldr	r0, [pc, #396]	; (8000d60 <HAL_UART_RxCpltCallback+0x710>)
 8000bd2:	f015 fbd1 	bl	8016378 <puts>
		HAL_GPIO_WritePin(gpios[1].gpio, gpios[1].pin, GPIO_PIN_RESET);
 8000bd6:	4b52      	ldr	r3, [pc, #328]	; (8000d20 <HAL_UART_RxCpltCallback+0x6d0>)
 8000bd8:	2140      	movs	r1, #64	; 0x40
 8000bda:	2200      	movs	r2, #0
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f008 f851 	bl	8008c84 <HAL_GPIO_WritePin>
		break;
 8000be2:	e138      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x19: {
		printf("AUTOSWEEP ON\n");
 8000be4:	485f      	ldr	r0, [pc, #380]	; (8000d64 <HAL_UART_RxCpltCallback+0x714>)
 8000be6:	f015 fbc7 	bl	8016378 <puts>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, DAC_OUT, 32, DAC_ALIGN_12B_R);
 8000bea:	2300      	movs	r3, #0
 8000bec:	9300      	str	r3, [sp, #0]
 8000bee:	2320      	movs	r3, #32
 8000bf0:	4a5d      	ldr	r2, [pc, #372]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000bf2:	2100      	movs	r1, #0
 8000bf4:	485d      	ldr	r0, [pc, #372]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000bf6:	f004 fcb5 	bl	8005564 <HAL_DAC_Start_DMA>
		break;
 8000bfa:	e12c      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x09: {
		printf("AUTOSWEEP OFF\n");
 8000bfc:	485c      	ldr	r0, [pc, #368]	; (8000d70 <HAL_UART_RxCpltCallback+0x720>)
 8000bfe:	f015 fbbb 	bl	8016378 <puts>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000c02:	2100      	movs	r1, #0
 8000c04:	4859      	ldr	r0, [pc, #356]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000c06:	f004 fd6d 	bl	80056e4 <HAL_DAC_Stop_DMA>
		break;
 8000c0a:	e124      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1A: {
		printf("ERPA ON\n");
 8000c0c:	4859      	ldr	r0, [pc, #356]	; (8000d74 <HAL_UART_RxCpltCallback+0x724>)
 8000c0e:	f015 fbb3 	bl	8016378 <puts>
		HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_4);
 8000c12:	210c      	movs	r1, #12
 8000c14:	4858      	ldr	r0, [pc, #352]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c16:	f00d fbfd 	bl	800e414 <HAL_TIM_OC_Start_IT>
		ERPA_ON = 1;
 8000c1a:	4b58      	ldr	r3, [pc, #352]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
		erpa_seq = 0;
 8000c20:	4b57      	ldr	r3, [pc, #348]	; (8000d80 <HAL_UART_RxCpltCallback+0x730>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	801a      	strh	r2, [r3, #0]
		break;
 8000c26:	e116      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0A: {
		printf("ERPA OFF\n");
 8000c28:	4856      	ldr	r0, [pc, #344]	; (8000d84 <HAL_UART_RxCpltCallback+0x734>)
 8000c2a:	f015 fba5 	bl	8016378 <puts>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_4);
 8000c2e:	210c      	movs	r1, #12
 8000c30:	4851      	ldr	r0, [pc, #324]	; (8000d78 <HAL_UART_RxCpltCallback+0x728>)
 8000c32:	f00d fd49 	bl	800e6c8 <HAL_TIM_OC_Stop_IT>
		ERPA_ON = 0;
 8000c36:	4b51      	ldr	r3, [pc, #324]	; (8000d7c <HAL_UART_RxCpltCallback+0x72c>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]
		break;
 8000c3c:	e10b      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1B: {
		printf("PMT ON\n");
 8000c3e:	4852      	ldr	r0, [pc, #328]	; (8000d88 <HAL_UART_RxCpltCallback+0x738>)
 8000c40:	f015 fb9a 	bl	8016378 <puts>
		HAL_TIM_OC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000c44:	2100      	movs	r1, #0
 8000c46:	4851      	ldr	r0, [pc, #324]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c48:	f00d fbe4 	bl	800e414 <HAL_TIM_OC_Start_IT>
		PMT_ON = 1;
 8000c4c:	4b50      	ldr	r3, [pc, #320]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	701a      	strb	r2, [r3, #0]
		pmt_seq = 0;
 8000c52:	4b50      	ldr	r3, [pc, #320]	; (8000d94 <HAL_UART_RxCpltCallback+0x744>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	801a      	strh	r2, [r3, #0]
		break;
 8000c58:	e0fd      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0B: {
		printf("PMT OFF\n");
 8000c5a:	484f      	ldr	r0, [pc, #316]	; (8000d98 <HAL_UART_RxCpltCallback+0x748>)
 8000c5c:	f015 fb8c 	bl	8016378 <puts>
		HAL_TIM_OC_Stop_IT(&htim1, TIM_CHANNEL_1);
 8000c60:	2100      	movs	r1, #0
 8000c62:	484a      	ldr	r0, [pc, #296]	; (8000d8c <HAL_UART_RxCpltCallback+0x73c>)
 8000c64:	f00d fd30 	bl	800e6c8 <HAL_TIM_OC_Stop_IT>
		PMT_ON = 0;
 8000c68:	4b49      	ldr	r3, [pc, #292]	; (8000d90 <HAL_UART_RxCpltCallback+0x740>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	701a      	strb	r2, [r3, #0]
		break;
 8000c6e:	e0f2      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1C: {
		printf("HK ON \n");
 8000c70:	484a      	ldr	r0, [pc, #296]	; (8000d9c <HAL_UART_RxCpltCallback+0x74c>)
 8000c72:	f015 fb81 	bl	8016378 <puts>
		HAL_TIM_OC_Start_IT(&htim3, TIM_CHANNEL_1);
 8000c76:	2100      	movs	r1, #0
 8000c78:	4849      	ldr	r0, [pc, #292]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000c7a:	f00d fbcb 	bl	800e414 <HAL_TIM_OC_Start_IT>
		HK_ON = 1;
 8000c7e:	4b49      	ldr	r3, [pc, #292]	; (8000da4 <HAL_UART_RxCpltCallback+0x754>)
 8000c80:	2201      	movs	r2, #1
 8000c82:	701a      	strb	r2, [r3, #0]
		hk_seq = 0;
 8000c84:	4b48      	ldr	r3, [pc, #288]	; (8000da8 <HAL_UART_RxCpltCallback+0x758>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	801a      	strh	r2, [r3, #0]
		break;
 8000c8a:	e0e4      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0C: {
		printf("HK OFF\n");
 8000c8c:	4847      	ldr	r0, [pc, #284]	; (8000dac <HAL_UART_RxCpltCallback+0x75c>)
 8000c8e:	f015 fb73 	bl	8016378 <puts>
		HAL_TIM_OC_Stop_IT(&htim3, TIM_CHANNEL_1);
 8000c92:	2100      	movs	r1, #0
 8000c94:	4842      	ldr	r0, [pc, #264]	; (8000da0 <HAL_UART_RxCpltCallback+0x750>)
 8000c96:	f00d fd17 	bl	800e6c8 <HAL_TIM_OC_Stop_IT>
		HK_ON = 0;
 8000c9a:	4b42      	ldr	r3, [pc, #264]	; (8000da4 <HAL_UART_RxCpltCallback+0x754>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	701a      	strb	r2, [r3, #0]
		break;
 8000ca0:	e0d9      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x1D: {
		printf("Step Up\n");
 8000ca2:	4843      	ldr	r0, [pc, #268]	; (8000db0 <HAL_UART_RxCpltCallback+0x760>)
 8000ca4:	f015 fb68 	bl	8016378 <puts>
		if (step < 17) {
 8000ca8:	4b42      	ldr	r3, [pc, #264]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b10      	cmp	r3, #16
 8000cae:	f200 80cb 	bhi.w	8000e48 <HAL_UART_RxCpltCallback+0x7f8>
			step += 2;
 8000cb2:	4b40      	ldr	r3, [pc, #256]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	b2da      	uxtb	r2, r3
 8000cba:	4b3e      	ldr	r3, [pc, #248]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cbc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cbe:	4b3d      	ldr	r3, [pc, #244]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	4b28      	ldr	r3, [pc, #160]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4827      	ldr	r0, [pc, #156]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000cd0:	f004 fdab 	bl	800582a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4825      	ldr	r0, [pc, #148]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000cd8:	f004 fbec 	bl	80054b4 <HAL_DAC_Start>
		}
		break;
 8000cdc:	e0b4      	b.n	8000e48 <HAL_UART_RxCpltCallback+0x7f8>
	}
	case 0x0D: {
		printf("Step Down\n");
 8000cde:	4836      	ldr	r0, [pc, #216]	; (8000db8 <HAL_UART_RxCpltCallback+0x768>)
 8000ce0:	f015 fb4a 	bl	8016378 <puts>
		if (step > 3) {
 8000ce4:	4b33      	ldr	r3, [pc, #204]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b03      	cmp	r3, #3
 8000cea:	f240 80af 	bls.w	8000e4c <HAL_UART_RxCpltCallback+0x7fc>
			step -= 2;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	3b02      	subs	r3, #2
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cf8:	701a      	strb	r2, [r3, #0]
			HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R,
 8000cfa:	4b2e      	ldr	r3, [pc, #184]	; (8000db4 <HAL_UART_RxCpltCallback+0x764>)
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_UART_RxCpltCallback+0x718>)
 8000d02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	4818      	ldr	r0, [pc, #96]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000d0c:	f004 fd8d 	bl	800582a <HAL_DAC_SetValue>
					DAC_OUT[step]);
			HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8000d10:	2100      	movs	r1, #0
 8000d12:	4816      	ldr	r0, [pc, #88]	; (8000d6c <HAL_UART_RxCpltCallback+0x71c>)
 8000d14:	f004 fbce 	bl	80054b4 <HAL_DAC_Start>
		}
		break;
 8000d18:	e098      	b.n	8000e4c <HAL_UART_RxCpltCallback+0x7fc>
 8000d1a:	bf00      	nop
 8000d1c:	08016b7c 	.word	0x08016b7c
 8000d20:	58020400 	.word	0x58020400
 8000d24:	08016b88 	.word	0x08016b88
 8000d28:	58020800 	.word	0x58020800
 8000d2c:	08016b94 	.word	0x08016b94
 8000d30:	08016ba0 	.word	0x08016ba0
 8000d34:	08016bb0 	.word	0x08016bb0
 8000d38:	08016bbc 	.word	0x08016bbc
 8000d3c:	08016bc8 	.word	0x08016bc8
 8000d40:	08016bd4 	.word	0x08016bd4
 8000d44:	08016be4 	.word	0x08016be4
 8000d48:	08016bf0 	.word	0x08016bf0
 8000d4c:	08016bfc 	.word	0x08016bfc
 8000d50:	08016c08 	.word	0x08016c08
 8000d54:	08016c14 	.word	0x08016c14
 8000d58:	08016c24 	.word	0x08016c24
 8000d5c:	08016c34 	.word	0x08016c34
 8000d60:	08016c40 	.word	0x08016c40
 8000d64:	08016c50 	.word	0x08016c50
 8000d68:	24000010 	.word	0x24000010
 8000d6c:	240002f4 	.word	0x240002f4
 8000d70:	08016c60 	.word	0x08016c60
 8000d74:	08016c70 	.word	0x08016c70
 8000d78:	24000554 	.word	0x24000554
 8000d7c:	24000be3 	.word	0x24000be3
 8000d80:	24000bde 	.word	0x24000bde
 8000d84:	08016c78 	.word	0x08016c78
 8000d88:	08016c84 	.word	0x08016c84
 8000d8c:	24000508 	.word	0x24000508
 8000d90:	24000be2 	.word	0x24000be2
 8000d94:	24000bdc 	.word	0x24000bdc
 8000d98:	08016c8c 	.word	0x08016c8c
 8000d9c:	08016c94 	.word	0x08016c94
 8000da0:	240005a0 	.word	0x240005a0
 8000da4:	24000be4 	.word	0x24000be4
 8000da8:	24000be0 	.word	0x24000be0
 8000dac:	08016c9c 	.word	0x08016c9c
 8000db0:	08016ca4 	.word	0x08016ca4
 8000db4:	2400000c 	.word	0x2400000c
 8000db8:	08016cac 	.word	0x08016cac
	}
	case 0x1E: {
		printf("Factor Up\n");
 8000dbc:	4828      	ldr	r0, [pc, #160]	; (8000e60 <HAL_UART_RxCpltCallback+0x810>)
 8000dbe:	f015 fadb 	bl	8016378 <puts>
		if (cadence <= 50000) {
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	f24c 3250 	movw	r2, #50000	; 0xc350
 8000dca:	4293      	cmp	r3, r2
 8000dcc:	d840      	bhi.n	8000e50 <HAL_UART_RxCpltCallback+0x800>
			cadence *= 2;
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	4a23      	ldr	r2, [pc, #140]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dd6:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000dd8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ddc:	4b21      	ldr	r3, [pc, #132]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000de2:	e035      	b.n	8000e50 <HAL_UART_RxCpltCallback+0x800>
	}
	case 0x0E: {
		printf("Factor Down\n");
 8000de4:	4820      	ldr	r0, [pc, #128]	; (8000e68 <HAL_UART_RxCpltCallback+0x818>)
 8000de6:	f015 fac7 	bl	8016378 <puts>
		if (cadence >= 6250) {
 8000dea:	4b1e      	ldr	r3, [pc, #120]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f641 0269 	movw	r2, #6249	; 0x1869
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d92e      	bls.n	8000e54 <HAL_UART_RxCpltCallback+0x804>
			cadence /= 2;
 8000df6:	4b1b      	ldr	r3, [pc, #108]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	085b      	lsrs	r3, r3, #1
 8000dfc:	4a19      	ldr	r2, [pc, #100]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000dfe:	6013      	str	r3, [r2, #0]
			TIM2->ARR = cadence;
 8000e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e04:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_UART_RxCpltCallback+0x814>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	62d3      	str	r3, [r2, #44]	; 0x2c
		}
		break;
 8000e0a:	e023      	b.n	8000e54 <HAL_UART_RxCpltCallback+0x804>
	}
	case 0x1F: {
		printf("Exit STOP mode\n");
 8000e0c:	4817      	ldr	r0, [pc, #92]	; (8000e6c <HAL_UART_RxCpltCallback+0x81c>)
 8000e0e:	f015 fab3 	bl	8016378 <puts>
		// TODO: Exit stop mode
		break;
 8000e12:	e020      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0x0F: {
		printf("Enter STOP mode\n");
 8000e14:	4816      	ldr	r0, [pc, #88]	; (8000e70 <HAL_UART_RxCpltCallback+0x820>)
 8000e16:	f015 faaf 	bl	8016378 <puts>
		// TODO: Enter stop mode
		break;
 8000e1a:	e01c      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xE0: {
		printf("Auto Init\n");
 8000e1c:	4815      	ldr	r0, [pc, #84]	; (8000e74 <HAL_UART_RxCpltCallback+0x824>)
 8000e1e:	f015 faab 	bl	8016378 <puts>
		xTaskResumeFromISR(GPIO_on_taskHandle);
 8000e22:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_UART_RxCpltCallback+0x828>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f013 fb10 	bl	801444c <xTaskResumeFromISR>
		break;
 8000e2c:	e013      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	case 0xD0: {
		printf("Auto Deinit\n");
 8000e2e:	4813      	ldr	r0, [pc, #76]	; (8000e7c <HAL_UART_RxCpltCallback+0x82c>)
 8000e30:	f015 faa2 	bl	8016378 <puts>
		xTaskResumeFromISR(GPIO_off_taskHandle);
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_UART_RxCpltCallback+0x830>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f013 fb07 	bl	801444c <xTaskResumeFromISR>
		break;
 8000e3e:	e00a      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
	}
	default: {
		printf("Unknown Command\n");
 8000e40:	4810      	ldr	r0, [pc, #64]	; (8000e84 <HAL_UART_RxCpltCallback+0x834>)
 8000e42:	f015 fa99 	bl	8016378 <puts>
		break;
 8000e46:	e006      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e48:	bf00      	nop
 8000e4a:	e004      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e4c:	bf00      	nop
 8000e4e:	e002      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e50:	bf00      	nop
 8000e52:	e000      	b.n	8000e56 <HAL_UART_RxCpltCallback+0x806>
		break;
 8000e54:	bf00      	nop
	}
	}
}
 8000e56:	bf00      	nop
 8000e58:	3710      	adds	r7, #16
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	08016cb8 	.word	0x08016cb8
 8000e64:	24000008 	.word	0x24000008
 8000e68:	08016cc4 	.word	0x08016cc4
 8000e6c:	08016cd0 	.word	0x08016cd0
 8000e70:	08016ce0 	.word	0x08016ce0
 8000e74:	08016cf0 	.word	0x08016cf0
 8000e78:	24000708 	.word	0x24000708
 8000e7c:	08016cfc 	.word	0x08016cfc
 8000e80:	24000968 	.word	0x24000968
 8000e84:	08016d08 	.word	0x08016d08

08000e88 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e8c:	f002 fd7e 	bl	800398c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e90:	f000 f8a4 	bl	8000fdc <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000e94:	f000 f91e 	bl	80010d4 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e98:	f000 fe78 	bl	8001b8c <MX_GPIO_Init>
	MX_DMA_Init();
 8000e9c:	f000 fe3e 	bl	8001b1c <MX_DMA_Init>
	MX_TIM3_Init();
 8000ea0:	f000 fda2 	bl	80019e8 <MX_TIM3_Init>
	MX_USART1_UART_Init();
 8000ea4:	f000 fdee 	bl	8001a84 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8000ea8:	f000 fb2a 	bl	8001500 <MX_I2C1_Init>
	MX_SPI2_Init();
 8000eac:	f000 fc20 	bl	80016f0 <MX_SPI2_Init>
	MX_TIM2_Init();
 8000eb0:	f000 fd24 	bl	80018fc <MX_TIM2_Init>
	MX_TIM1_Init();
 8000eb4:	f000 fc74 	bl	80017a0 <MX_TIM1_Init>
	MX_ADC3_Init();
 8000eb8:	f000 fa5e 	bl	8001378 <MX_ADC3_Init>
	MX_ADC1_Init();
 8000ebc:	f000 f93a 	bl	8001134 <MX_ADC1_Init>
	MX_DAC1_Init();
 8000ec0:	f000 faec 	bl	800149c <MX_DAC1_Init>
	MX_SPI1_Init();
 8000ec4:	f000 fbbc 	bl	8001640 <MX_SPI1_Init>
	MX_RTC_Init();
 8000ec8:	f000 fb5c 	bl	8001584 <MX_RTC_Init>
	/* USER CODE BEGIN 2 */
	if (!handshake()) {
 8000ecc:	f001 f852 	bl	8001f74 <handshake>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d101      	bne.n	8000eda <main+0x52>
		Error_Handler();
 8000ed6:	f001 fe41 	bl	8002b5c <Error_Handler>
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000eda:	f011 fc69 	bl	80127b0 <osKernelInitialize>
	/* start timers, add new ones, ... */
	/* USER CODE END RTOS_TIMERS */

	/* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
	mid_MsgQueue = osMessageQueueNew(MSGQUEUE_OBJECTS, sizeof(packet_t), NULL);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2108      	movs	r1, #8
 8000ee2:	2080      	movs	r0, #128	; 0x80
 8000ee4:	f011 fe86 	bl	8012bf4 <osMessageQueueNew>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	4a24      	ldr	r2, [pc, #144]	; (8000f7c <main+0xf4>)
 8000eec:	6013      	str	r3, [r2, #0]

	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of PMT_task */
	PMT_taskHandle = osThreadNew(PMT_init, NULL, &PMT_task_attributes);
 8000eee:	4a24      	ldr	r2, [pc, #144]	; (8000f80 <main+0xf8>)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4824      	ldr	r0, [pc, #144]	; (8000f84 <main+0xfc>)
 8000ef4:	f011 fca6 	bl	8012844 <osThreadNew>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	4a23      	ldr	r2, [pc, #140]	; (8000f88 <main+0x100>)
 8000efc:	6013      	str	r3, [r2, #0]

	/* creation of ERPA_task */
	ERPA_taskHandle = osThreadNew(ERPA_init, NULL, &ERPA_task_attributes);
 8000efe:	4a23      	ldr	r2, [pc, #140]	; (8000f8c <main+0x104>)
 8000f00:	2100      	movs	r1, #0
 8000f02:	4823      	ldr	r0, [pc, #140]	; (8000f90 <main+0x108>)
 8000f04:	f011 fc9e 	bl	8012844 <osThreadNew>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	4a22      	ldr	r2, [pc, #136]	; (8000f94 <main+0x10c>)
 8000f0c:	6013      	str	r3, [r2, #0]

	/* creation of HK_task */
	HK_taskHandle = osThreadNew(HK_init, NULL, &HK_task_attributes);
 8000f0e:	4a22      	ldr	r2, [pc, #136]	; (8000f98 <main+0x110>)
 8000f10:	2100      	movs	r1, #0
 8000f12:	4822      	ldr	r0, [pc, #136]	; (8000f9c <main+0x114>)
 8000f14:	f011 fc96 	bl	8012844 <osThreadNew>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	4a21      	ldr	r2, [pc, #132]	; (8000fa0 <main+0x118>)
 8000f1c:	6013      	str	r3, [r2, #0]

	/* creation of UART_RX_task */
	UART_RX_taskHandle = osThreadNew(UART_RX_init, NULL,
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <main+0x11c>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	4821      	ldr	r0, [pc, #132]	; (8000fa8 <main+0x120>)
 8000f24:	f011 fc8e 	bl	8012844 <osThreadNew>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	4a20      	ldr	r2, [pc, #128]	; (8000fac <main+0x124>)
 8000f2c:	6013      	str	r3, [r2, #0]
			&UART_RX_task_attributes);

	/* creation of GPIO_on_task */
	GPIO_on_taskHandle = osThreadNew(GPIO_on_init, NULL,
 8000f2e:	4a20      	ldr	r2, [pc, #128]	; (8000fb0 <main+0x128>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <main+0x12c>)
 8000f34:	f011 fc86 	bl	8012844 <osThreadNew>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	4a1f      	ldr	r2, [pc, #124]	; (8000fb8 <main+0x130>)
 8000f3c:	6013      	str	r3, [r2, #0]
			&GPIO_on_task_attributes);

	/* creation of GPIO_off_task */
	GPIO_off_taskHandle = osThreadNew(GPIO_off_init, NULL,
 8000f3e:	4a1f      	ldr	r2, [pc, #124]	; (8000fbc <main+0x134>)
 8000f40:	2100      	movs	r1, #0
 8000f42:	481f      	ldr	r0, [pc, #124]	; (8000fc0 <main+0x138>)
 8000f44:	f011 fc7e 	bl	8012844 <osThreadNew>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a1e      	ldr	r2, [pc, #120]	; (8000fc4 <main+0x13c>)
 8000f4c:	6013      	str	r3, [r2, #0]
			&GPIO_off_task_attributes);

	/* creation of UART_TX_task */
	UART_TX_taskHandle = osThreadNew(UART_TX_init, NULL,
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <main+0x140>)
 8000f50:	2100      	movs	r1, #0
 8000f52:	481e      	ldr	r0, [pc, #120]	; (8000fcc <main+0x144>)
 8000f54:	f011 fc76 	bl	8012844 <osThreadNew>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4a1d      	ldr	r2, [pc, #116]	; (8000fd0 <main+0x148>)
 8000f5c:	6013      	str	r3, [r2, #0]
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	event_flags = osEventFlagsNew(NULL);
 8000f5e:	2000      	movs	r0, #0
 8000f60:	f011 fd5e 	bl	8012a20 <osEventFlagsNew>
 8000f64:	4603      	mov	r3, r0
 8000f66:	4a1b      	ldr	r2, [pc, #108]	; (8000fd4 <main+0x14c>)
 8000f68:	6013      	str	r3, [r2, #0]
	system_setup();
 8000f6a:	f001 f891 	bl	8002090 <system_setup>
	printf("Starting kernal...\n");
 8000f6e:	481a      	ldr	r0, [pc, #104]	; (8000fd8 <main+0x150>)
 8000f70:	f015 fa02 	bl	8016378 <puts>

	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000f74:	f011 fc40 	bl	80127f8 <osKernelStart>
	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000f78:	e7fe      	b.n	8000f78 <main+0xf0>
 8000f7a:	bf00      	nop
 8000f7c:	24000bcc 	.word	0x24000bcc
 8000f80:	08016d64 	.word	0x08016d64
 8000f84:	08002849 	.word	0x08002849
 8000f88:	240006f8 	.word	0x240006f8
 8000f8c:	08016d88 	.word	0x08016d88
 8000f90:	0800288d 	.word	0x0800288d
 8000f94:	240006fc 	.word	0x240006fc
 8000f98:	08016dac 	.word	0x08016dac
 8000f9c:	080028d1 	.word	0x080028d1
 8000fa0:	24000700 	.word	0x24000700
 8000fa4:	08016dd0 	.word	0x08016dd0
 8000fa8:	08002915 	.word	0x08002915
 8000fac:	24000704 	.word	0x24000704
 8000fb0:	08016df4 	.word	0x08016df4
 8000fb4:	08002939 	.word	0x08002939
 8000fb8:	24000708 	.word	0x24000708
 8000fbc:	08016e18 	.word	0x08016e18
 8000fc0:	080029e1 	.word	0x080029e1
 8000fc4:	24000968 	.word	0x24000968
 8000fc8:	08016e3c 	.word	0x08016e3c
 8000fcc:	08002a89 	.word	0x08002a89
 8000fd0:	24000bc8 	.word	0x24000bc8
 8000fd4:	24000be8 	.word	0x24000be8
 8000fd8:	08016d18 	.word	0x08016d18

08000fdc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b09c      	sub	sp, #112	; 0x70
 8000fe0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fe6:	224c      	movs	r2, #76	; 0x4c
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f015 f86e 	bl	80160cc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ff0:	1d3b      	adds	r3, r7, #4
 8000ff2:	2220      	movs	r2, #32
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f015 f868 	bl	80160cc <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ffc:	2002      	movs	r0, #2
 8000ffe:	f008 fc67 	bl	80098d0 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001002:	2300      	movs	r3, #0
 8001004:	603b      	str	r3, [r7, #0]
 8001006:	4b31      	ldr	r3, [pc, #196]	; (80010cc <SystemClock_Config+0xf0>)
 8001008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800100a:	4a30      	ldr	r2, [pc, #192]	; (80010cc <SystemClock_Config+0xf0>)
 800100c:	f023 0301 	bic.w	r3, r3, #1
 8001010:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001012:	4b2e      	ldr	r3, [pc, #184]	; (80010cc <SystemClock_Config+0xf0>)
 8001014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	603b      	str	r3, [r7, #0]
 800101c:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <SystemClock_Config+0xf4>)
 800101e:	699b      	ldr	r3, [r3, #24]
 8001020:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001024:	4a2a      	ldr	r2, [pc, #168]	; (80010d0 <SystemClock_Config+0xf4>)
 8001026:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800102a:	6193      	str	r3, [r2, #24]
 800102c:	4b28      	ldr	r3, [pc, #160]	; (80010d0 <SystemClock_Config+0xf4>)
 800102e:	699b      	ldr	r3, [r3, #24]
 8001030:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]

	while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {
 8001038:	bf00      	nop
 800103a:	4b25      	ldr	r3, [pc, #148]	; (80010d0 <SystemClock_Config+0xf4>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001042:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001046:	d1f8      	bne.n	800103a <SystemClock_Config+0x5e>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001048:	2301      	movs	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800104c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001050:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001056:	2302      	movs	r3, #2
 8001058:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 4;
 800105a:	2304      	movs	r3, #4
 800105c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 32;
 800105e:	2320      	movs	r3, #32
 8001060:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 4;
 8001062:	2304      	movs	r3, #4
 8001064:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001066:	2304      	movs	r3, #4
 8001068:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 800106a:	2302      	movs	r3, #2
 800106c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 800106e:	2308      	movs	r3, #8
 8001070:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001072:	2300      	movs	r3, #0
 8001074:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800107a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800107e:	4618      	mov	r0, r3
 8001080:	f008 fc60 	bl	8009944 <HAL_RCC_OscConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xb2>
		Error_Handler();
 800108a:	f001 fd67 	bl	8002b5c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800108e:	233f      	movs	r3, #63	; 0x3f
 8001090:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1
			| RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001092:	2303      	movs	r3, #3
 8001094:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001096:	2300      	movs	r3, #0
 8001098:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800109a:	2300      	movs	r3, #0
 800109c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	2101      	movs	r1, #1
 80010b2:	4618      	mov	r0, r3
 80010b4:	f009 f8a0 	bl	800a1f8 <HAL_RCC_ClockConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <SystemClock_Config+0xe6>
		Error_Handler();
 80010be:	f001 fd4d 	bl	8002b5c <Error_Handler>
	}
}
 80010c2:	bf00      	nop
 80010c4:	3770      	adds	r7, #112	; 0x70
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	58000400 	.word	0x58000400
 80010d0:	58024800 	.word	0x58024800

080010d4 <PeriphCommonClock_Config>:

/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b0b0      	sub	sp, #192	; 0xc0
 80010d8:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80010da:	463b      	mov	r3, r7
 80010dc:	22c0      	movs	r2, #192	; 0xc0
 80010de:	2100      	movs	r1, #0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f014 fff3 	bl	80160cc <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80010e6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80010ea:	f04f 0300 	mov.w	r3, #0
 80010ee:	e9c7 2300 	strd	r2, r3, [r7]
	PeriphClkInitStruct.PLL2.PLL2M = 4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	60bb      	str	r3, [r7, #8]
	PeriphClkInitStruct.PLL2.PLL2N = 32;
 80010f6:	2320      	movs	r3, #32
 80010f8:	60fb      	str	r3, [r7, #12]
	PeriphClkInitStruct.PLL2.PLL2P = 8;
 80010fa:	2308      	movs	r3, #8
 80010fc:	613b      	str	r3, [r7, #16]
	PeriphClkInitStruct.PLL2.PLL2Q = 4;
 80010fe:	2304      	movs	r3, #4
 8001100:	617b      	str	r3, [r7, #20]
	PeriphClkInitStruct.PLL2.PLL2R = 2;
 8001102:	2302      	movs	r3, #2
 8001104:	61bb      	str	r3, [r7, #24]
	PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_2;
 8001106:	2380      	movs	r3, #128	; 0x80
 8001108:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 800110a:	2300      	movs	r3, #0
 800110c:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001118:	463b      	mov	r3, r7
 800111a:	4618      	mov	r0, r3
 800111c:	f009 fc3a 	bl	800a994 <HAL_RCCEx_PeriphCLKConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <PeriphCommonClock_Config+0x56>
		Error_Handler();
 8001126:	f001 fd19 	bl	8002b5c <Error_Handler>
	}
}
 800112a:	bf00      	nop
 800112c:	37c0      	adds	r7, #192	; 0xc0
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
	...

08001134 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	; 0x28
 8001138:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_MultiModeTypeDef multimode = { 0 };
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
 8001142:	605a      	str	r2, [r3, #4]
 8001144:	609a      	str	r2, [r3, #8]
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001146:	463b      	mov	r3, r7
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]
 8001156:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8001158:	4b7a      	ldr	r3, [pc, #488]	; (8001344 <MX_ADC1_Init+0x210>)
 800115a:	4a7b      	ldr	r2, [pc, #492]	; (8001348 <MX_ADC1_Init+0x214>)
 800115c:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 800115e:	4b79      	ldr	r3, [pc, #484]	; (8001344 <MX_ADC1_Init+0x210>)
 8001160:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001164:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001166:	4b77      	ldr	r3, [pc, #476]	; (8001344 <MX_ADC1_Init+0x210>)
 8001168:	2208      	movs	r2, #8
 800116a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800116c:	4b75      	ldr	r3, [pc, #468]	; (8001344 <MX_ADC1_Init+0x210>)
 800116e:	2201      	movs	r2, #1
 8001170:	60da      	str	r2, [r3, #12]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001172:	4b74      	ldr	r3, [pc, #464]	; (8001344 <MX_ADC1_Init+0x210>)
 8001174:	2204      	movs	r2, #4
 8001176:	611a      	str	r2, [r3, #16]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8001178:	4b72      	ldr	r3, [pc, #456]	; (8001344 <MX_ADC1_Init+0x210>)
 800117a:	2200      	movs	r2, #0
 800117c:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800117e:	4b71      	ldr	r3, [pc, #452]	; (8001344 <MX_ADC1_Init+0x210>)
 8001180:	2201      	movs	r2, #1
 8001182:	755a      	strb	r2, [r3, #21]
	hadc1.Init.NbrOfConversion = 11;
 8001184:	4b6f      	ldr	r3, [pc, #444]	; (8001344 <MX_ADC1_Init+0x210>)
 8001186:	220b      	movs	r2, #11
 8001188:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118a:	4b6e      	ldr	r3, [pc, #440]	; (8001344 <MX_ADC1_Init+0x210>)
 800118c:	2200      	movs	r2, #0
 800118e:	771a      	strb	r2, [r3, #28]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001190:	4b6c      	ldr	r3, [pc, #432]	; (8001344 <MX_ADC1_Init+0x210>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	; 0x24
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001196:	4b6b      	ldr	r3, [pc, #428]	; (8001344 <MX_ADC1_Init+0x210>)
 8001198:	2200      	movs	r2, #0
 800119a:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 800119c:	4b69      	ldr	r3, [pc, #420]	; (8001344 <MX_ADC1_Init+0x210>)
 800119e:	2203      	movs	r2, #3
 80011a0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011a2:	4b68      	ldr	r3, [pc, #416]	; (8001344 <MX_ADC1_Init+0x210>)
 80011a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011a8:	631a      	str	r2, [r3, #48]	; 0x30
	hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80011aa:	4b66      	ldr	r3, [pc, #408]	; (8001344 <MX_ADC1_Init+0x210>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80011b0:	4b64      	ldr	r3, [pc, #400]	; (8001344 <MX_ADC1_Init+0x210>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80011b8:	4862      	ldr	r0, [pc, #392]	; (8001344 <MX_ADC1_Init+0x210>)
 80011ba:	f002 fe73 	bl	8003ea4 <HAL_ADC_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_ADC1_Init+0x94>
		Error_Handler();
 80011c4:	f001 fcca 	bl	8002b5c <Error_Handler>
	}

	/** Configure the ADC multi-mode
	 */
	multimode.Mode = ADC_MODE_INDEPENDENT;
 80011c8:	2300      	movs	r3, #0
 80011ca:	61fb      	str	r3, [r7, #28]
	if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK) {
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	485c      	ldr	r0, [pc, #368]	; (8001344 <MX_ADC1_Init+0x210>)
 80011d4:	f003 ff8e 	bl	80050f4 <HAL_ADCEx_MultiModeConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0xae>
		Error_Handler();
 80011de:	f001 fcbd 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 80011e2:	4b5a      	ldr	r3, [pc, #360]	; (800134c <MX_ADC1_Init+0x218>)
 80011e4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e6:	2306      	movs	r3, #6
 80011e8:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 80011ea:	2307      	movs	r3, #7
 80011ec:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ee:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80011f2:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f4:	2304      	movs	r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
	sConfig.OffsetSignedSaturation = DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	767b      	strb	r3, [r7, #25]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001200:	463b      	mov	r3, r7
 8001202:	4619      	mov	r1, r3
 8001204:	484f      	ldr	r0, [pc, #316]	; (8001344 <MX_ADC1_Init+0x210>)
 8001206:	f003 f8d1 	bl	80043ac <HAL_ADC_ConfigChannel>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_ADC1_Init+0xe0>
		Error_Handler();
 8001210:	f001 fca4 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8001214:	4b4e      	ldr	r3, [pc, #312]	; (8001350 <MX_ADC1_Init+0x21c>)
 8001216:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8001218:	230c      	movs	r3, #12
 800121a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	4848      	ldr	r0, [pc, #288]	; (8001344 <MX_ADC1_Init+0x210>)
 8001222:	f003 f8c3 	bl	80043ac <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC1_Init+0xfc>
		Error_Handler();
 800122c:	f001 fc96 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8001230:	4b48      	ldr	r3, [pc, #288]	; (8001354 <MX_ADC1_Init+0x220>)
 8001232:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8001234:	2312      	movs	r3, #18
 8001236:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4841      	ldr	r0, [pc, #260]	; (8001344 <MX_ADC1_Init+0x210>)
 800123e:	f003 f8b5 	bl	80043ac <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC1_Init+0x118>
		Error_Handler();
 8001248:	f001 fc88 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 800124c:	4b42      	ldr	r3, [pc, #264]	; (8001358 <MX_ADC1_Init+0x224>)
 800124e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001250:	2318      	movs	r3, #24
 8001252:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001254:	463b      	mov	r3, r7
 8001256:	4619      	mov	r1, r3
 8001258:	483a      	ldr	r0, [pc, #232]	; (8001344 <MX_ADC1_Init+0x210>)
 800125a:	f003 f8a7 	bl	80043ac <HAL_ADC_ConfigChannel>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0x134>
		Error_Handler();
 8001264:	f001 fc7a 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8001268:	4b3c      	ldr	r3, [pc, #240]	; (800135c <MX_ADC1_Init+0x228>)
 800126a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_5;
 800126c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001270:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001272:	463b      	mov	r3, r7
 8001274:	4619      	mov	r1, r3
 8001276:	4833      	ldr	r0, [pc, #204]	; (8001344 <MX_ADC1_Init+0x210>)
 8001278:	f003 f898 	bl	80043ac <HAL_ADC_ConfigChannel>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_ADC1_Init+0x152>
		Error_Handler();
 8001282:	f001 fc6b 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_9;
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <MX_ADC1_Init+0x22c>)
 8001288:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_6;
 800128a:	f44f 7383 	mov.w	r3, #262	; 0x106
 800128e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001290:	463b      	mov	r3, r7
 8001292:	4619      	mov	r1, r3
 8001294:	482b      	ldr	r0, [pc, #172]	; (8001344 <MX_ADC1_Init+0x210>)
 8001296:	f003 f889 	bl	80043ac <HAL_ADC_ConfigChannel>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_ADC1_Init+0x170>
		Error_Handler();
 80012a0:	f001 fc5c 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_10;
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <MX_ADC1_Init+0x230>)
 80012a6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_7;
 80012a8:	f44f 7386 	mov.w	r3, #268	; 0x10c
 80012ac:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012ae:	463b      	mov	r3, r7
 80012b0:	4619      	mov	r1, r3
 80012b2:	4824      	ldr	r0, [pc, #144]	; (8001344 <MX_ADC1_Init+0x210>)
 80012b4:	f003 f87a 	bl	80043ac <HAL_ADC_ConfigChannel>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_ADC1_Init+0x18e>
		Error_Handler();
 80012be:	f001 fc4d 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 80012c2:	4b29      	ldr	r3, [pc, #164]	; (8001368 <MX_ADC1_Init+0x234>)
 80012c4:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_8;
 80012c6:	f44f 7389 	mov.w	r3, #274	; 0x112
 80012ca:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012cc:	463b      	mov	r3, r7
 80012ce:	4619      	mov	r1, r3
 80012d0:	481c      	ldr	r0, [pc, #112]	; (8001344 <MX_ADC1_Init+0x210>)
 80012d2:	f003 f86b 	bl	80043ac <HAL_ADC_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_ADC1_Init+0x1ac>
		Error_Handler();
 80012dc:	f001 fc3e 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_14;
 80012e0:	4b22      	ldr	r3, [pc, #136]	; (800136c <MX_ADC1_Init+0x238>)
 80012e2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_9;
 80012e4:	f44f 738c 	mov.w	r3, #280	; 0x118
 80012e8:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 80012ea:	463b      	mov	r3, r7
 80012ec:	4619      	mov	r1, r3
 80012ee:	4815      	ldr	r0, [pc, #84]	; (8001344 <MX_ADC1_Init+0x210>)
 80012f0:	f003 f85c 	bl	80043ac <HAL_ADC_ConfigChannel>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_ADC1_Init+0x1ca>
		Error_Handler();
 80012fa:	f001 fc2f 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_15;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_ADC1_Init+0x23c>)
 8001300:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_10;
 8001302:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001306:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001308:	463b      	mov	r3, r7
 800130a:	4619      	mov	r1, r3
 800130c:	480d      	ldr	r0, [pc, #52]	; (8001344 <MX_ADC1_Init+0x210>)
 800130e:	f003 f84d 	bl	80043ac <HAL_ADC_ConfigChannel>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <MX_ADC1_Init+0x1e8>
		Error_Handler();
 8001318:	f001 fc20 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_17;
 800131c:	4b15      	ldr	r3, [pc, #84]	; (8001374 <MX_ADC1_Init+0x240>)
 800131e:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_11;
 8001320:	f240 2306 	movw	r3, #518	; 0x206
 8001324:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8001326:	463b      	mov	r3, r7
 8001328:	4619      	mov	r1, r3
 800132a:	4806      	ldr	r0, [pc, #24]	; (8001344 <MX_ADC1_Init+0x210>)
 800132c:	f003 f83e 	bl	80043ac <HAL_ADC_ConfigChannel>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_ADC1_Init+0x206>
		Error_Handler();
 8001336:	f001 fc11 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	3728      	adds	r7, #40	; 0x28
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	2400013c 	.word	0x2400013c
 8001348:	40022000 	.word	0x40022000
 800134c:	0c900008 	.word	0x0c900008
 8001350:	10c00010 	.word	0x10c00010
 8001354:	14f00020 	.word	0x14f00020
 8001358:	1d500080 	.word	0x1d500080
 800135c:	21800100 	.word	0x21800100
 8001360:	25b00200 	.word	0x25b00200
 8001364:	2a000400 	.word	0x2a000400
 8001368:	2e300800 	.word	0x2e300800
 800136c:	3ac04000 	.word	0x3ac04000
 8001370:	3ef08000 	.word	0x3ef08000
 8001374:	47520000 	.word	0x47520000

08001378 <MX_ADC3_Init>:
/**
 * @brief ADC3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC3_Init(void) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b088      	sub	sp, #32
 800137c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC3_Init 0 */

	/* USER CODE END ADC3_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	605a      	str	r2, [r3, #4]
 8001386:	609a      	str	r2, [r3, #8]
 8001388:	60da      	str	r2, [r3, #12]
 800138a:	611a      	str	r2, [r3, #16]
 800138c:	615a      	str	r2, [r3, #20]
 800138e:	619a      	str	r2, [r3, #24]

	/* USER CODE END ADC3_Init 1 */

	/** Common config
	 */
	hadc3.Instance = ADC3;
 8001390:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <MX_ADC3_Init+0x110>)
 8001392:	4a3e      	ldr	r2, [pc, #248]	; (800148c <MX_ADC3_Init+0x114>)
 8001394:	601a      	str	r2, [r3, #0]
	hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001396:	4b3c      	ldr	r3, [pc, #240]	; (8001488 <MX_ADC3_Init+0x110>)
 8001398:	2208      	movs	r2, #8
 800139a:	609a      	str	r2, [r3, #8]
	hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800139c:	4b3a      	ldr	r3, [pc, #232]	; (8001488 <MX_ADC3_Init+0x110>)
 800139e:	2201      	movs	r2, #1
 80013a0:	60da      	str	r2, [r3, #12]
	hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013a2:	4b39      	ldr	r3, [pc, #228]	; (8001488 <MX_ADC3_Init+0x110>)
 80013a4:	2204      	movs	r2, #4
 80013a6:	611a      	str	r2, [r3, #16]
	hadc3.Init.LowPowerAutoWait = DISABLE;
 80013a8:	4b37      	ldr	r3, [pc, #220]	; (8001488 <MX_ADC3_Init+0x110>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	751a      	strb	r2, [r3, #20]
	hadc3.Init.ContinuousConvMode = ENABLE;
 80013ae:	4b36      	ldr	r3, [pc, #216]	; (8001488 <MX_ADC3_Init+0x110>)
 80013b0:	2201      	movs	r2, #1
 80013b2:	755a      	strb	r2, [r3, #21]
	hadc3.Init.NbrOfConversion = 4;
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <MX_ADC3_Init+0x110>)
 80013b6:	2204      	movs	r2, #4
 80013b8:	619a      	str	r2, [r3, #24]
	hadc3.Init.DiscontinuousConvMode = DISABLE;
 80013ba:	4b33      	ldr	r3, [pc, #204]	; (8001488 <MX_ADC3_Init+0x110>)
 80013bc:	2200      	movs	r2, #0
 80013be:	771a      	strb	r2, [r3, #28]
	hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013c0:	4b31      	ldr	r3, [pc, #196]	; (8001488 <MX_ADC3_Init+0x110>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24
	hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <MX_ADC3_Init+0x110>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
	hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 80013cc:	4b2e      	ldr	r3, [pc, #184]	; (8001488 <MX_ADC3_Init+0x110>)
 80013ce:	2203      	movs	r2, #3
 80013d0:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc3.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80013d2:	4b2d      	ldr	r3, [pc, #180]	; (8001488 <MX_ADC3_Init+0x110>)
 80013d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013d8:	631a      	str	r2, [r3, #48]	; 0x30
	hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80013da:	4b2b      	ldr	r3, [pc, #172]	; (8001488 <MX_ADC3_Init+0x110>)
 80013dc:	2200      	movs	r2, #0
 80013de:	635a      	str	r2, [r3, #52]	; 0x34
	hadc3.Init.OversamplingMode = DISABLE;
 80013e0:	4b29      	ldr	r3, [pc, #164]	; (8001488 <MX_ADC3_Init+0x110>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc3) != HAL_OK) {
 80013e8:	4827      	ldr	r0, [pc, #156]	; (8001488 <MX_ADC3_Init+0x110>)
 80013ea:	f002 fd5b 	bl	8003ea4 <HAL_ADC_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_ADC3_Init+0x80>
		Error_Handler();
 80013f4:	f001 fbb2 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80013f8:	4b25      	ldr	r3, [pc, #148]	; (8001490 <MX_ADC3_Init+0x118>)
 80013fa:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80013fc:	2306      	movs	r3, #6
 80013fe:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001400:	2307      	movs	r3, #7
 8001402:	60fb      	str	r3, [r7, #12]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001404:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001408:	613b      	str	r3, [r7, #16]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800140a:	2304      	movs	r3, #4
 800140c:	617b      	str	r3, [r7, #20]
	sConfig.Offset = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	61bb      	str	r3, [r7, #24]
	sConfig.OffsetSignedSaturation = DISABLE;
 8001412:	2300      	movs	r3, #0
 8001414:	777b      	strb	r3, [r7, #29]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	4619      	mov	r1, r3
 800141a:	481b      	ldr	r0, [pc, #108]	; (8001488 <MX_ADC3_Init+0x110>)
 800141c:	f002 ffc6 	bl	80043ac <HAL_ADC_ConfigChannel>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_ADC3_Init+0xb2>
		Error_Handler();
 8001426:	f001 fb99 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_VREFINT;
 800142a:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <MX_ADC3_Init+0x11c>)
 800142c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800142e:	230c      	movs	r3, #12
 8001430:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	4619      	mov	r1, r3
 8001436:	4814      	ldr	r0, [pc, #80]	; (8001488 <MX_ADC3_Init+0x110>)
 8001438:	f002 ffb8 	bl	80043ac <HAL_ADC_ConfigChannel>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_ADC3_Init+0xce>
		Error_Handler();
 8001442:	f001 fb8b 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001446:	2301      	movs	r3, #1
 8001448:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 800144a:	2312      	movs	r3, #18
 800144c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800144e:	1d3b      	adds	r3, r7, #4
 8001450:	4619      	mov	r1, r3
 8001452:	480d      	ldr	r0, [pc, #52]	; (8001488 <MX_ADC3_Init+0x110>)
 8001454:	f002 ffaa 	bl	80043ac <HAL_ADC_ConfigChannel>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_ADC3_Init+0xea>
		Error_Handler();
 800145e:	f001 fb7d 	bl	8002b5c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8001462:	4b0d      	ldr	r3, [pc, #52]	; (8001498 <MX_ADC3_Init+0x120>)
 8001464:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 8001466:	2318      	movs	r3, #24
 8001468:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK) {
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4806      	ldr	r0, [pc, #24]	; (8001488 <MX_ADC3_Init+0x110>)
 8001470:	f002 ff9c 	bl	80043ac <HAL_ADC_ConfigChannel>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_ADC3_Init+0x106>
		Error_Handler();
 800147a:	f001 fb6f 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN ADC3_Init 2 */

	/* USER CODE END ADC3_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	3720      	adds	r7, #32
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	240001a0 	.word	0x240001a0
 800148c:	58026000 	.word	0x58026000
 8001490:	cb840000 	.word	0xcb840000
 8001494:	cfb80000 	.word	0xcfb80000
 8001498:	04300002 	.word	0x04300002

0800149c <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 800149c:	b580      	push	{r7, lr}
 800149e:	b08a      	sub	sp, #40	; 0x28
 80014a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2224      	movs	r2, #36	; 0x24
 80014a6:	2100      	movs	r1, #0
 80014a8:	4618      	mov	r0, r3
 80014aa:	f014 fe0f 	bl	80160cc <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80014ae:	4b12      	ldr	r3, [pc, #72]	; (80014f8 <MX_DAC1_Init+0x5c>)
 80014b0:	4a12      	ldr	r2, [pc, #72]	; (80014fc <MX_DAC1_Init+0x60>)
 80014b2:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80014b4:	4810      	ldr	r0, [pc, #64]	; (80014f8 <MX_DAC1_Init+0x5c>)
 80014b6:	f003 ffdb 	bl	8005470 <HAL_DAC_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_DAC1_Init+0x28>
		Error_Handler();
 80014c0:	f001 fb4c 	bl	8002b5c <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80014c8:	230a      	movs	r3, #10
 80014ca:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80014d0:	2301      	movs	r3, #1
 80014d2:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	4619      	mov	r1, r3
 80014de:	4806      	ldr	r0, [pc, #24]	; (80014f8 <MX_DAC1_Init+0x5c>)
 80014e0:	f004 f9f6 	bl	80058d0 <HAL_DAC_ConfigChannel>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_DAC1_Init+0x52>
		Error_Handler();
 80014ea:	f001 fb37 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	3728      	adds	r7, #40	; 0x28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	240002f4 	.word	0x240002f4
 80014fc:	40007400 	.word	0x40007400

08001500 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001504:	4b1c      	ldr	r3, [pc, #112]	; (8001578 <MX_I2C1_Init+0x78>)
 8001506:	4a1d      	ldr	r2, [pc, #116]	; (800157c <MX_I2C1_Init+0x7c>)
 8001508:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x0020081F;
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <MX_I2C1_Init+0x78>)
 800150c:	4a1c      	ldr	r2, [pc, #112]	; (8001580 <MX_I2C1_Init+0x80>)
 800150e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8001510:	4b19      	ldr	r3, [pc, #100]	; (8001578 <MX_I2C1_Init+0x78>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <MX_I2C1_Init+0x78>)
 8001518:	2201      	movs	r2, #1
 800151a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800151c:	4b16      	ldr	r3, [pc, #88]	; (8001578 <MX_I2C1_Init+0x78>)
 800151e:	2200      	movs	r2, #0
 8001520:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8001522:	4b15      	ldr	r3, [pc, #84]	; (8001578 <MX_I2C1_Init+0x78>)
 8001524:	2200      	movs	r2, #0
 8001526:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001528:	4b13      	ldr	r3, [pc, #76]	; (8001578 <MX_I2C1_Init+0x78>)
 800152a:	2200      	movs	r2, #0
 800152c:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800152e:	4b12      	ldr	r3, [pc, #72]	; (8001578 <MX_I2C1_Init+0x78>)
 8001530:	2200      	movs	r2, #0
 8001532:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001534:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_I2C1_Init+0x78>)
 8001536:	2200      	movs	r2, #0
 8001538:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 800153a:	480f      	ldr	r0, [pc, #60]	; (8001578 <MX_I2C1_Init+0x78>)
 800153c:	f007 fbbc 	bl	8008cb8 <HAL_I2C_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_I2C1_Init+0x4a>
		Error_Handler();
 8001546:	f001 fb09 	bl	8002b5c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 800154a:	2100      	movs	r1, #0
 800154c:	480a      	ldr	r0, [pc, #40]	; (8001578 <MX_I2C1_Init+0x78>)
 800154e:	f008 f903 	bl	8009758 <HAL_I2CEx_ConfigAnalogFilter>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8001558:	f001 fb00 	bl	8002b5c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 800155c:	2100      	movs	r1, #0
 800155e:	4806      	ldr	r0, [pc, #24]	; (8001578 <MX_I2C1_Init+0x78>)
 8001560:	f008 f945 	bl	80097ee <HAL_I2CEx_ConfigDigitalFilter>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_I2C1_Init+0x6e>
		Error_Handler();
 800156a:	f001 faf7 	bl	8002b5c <Error_Handler>
	}

	/** I2C Enable Fast Mode Plus
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 800156e:	2001      	movs	r0, #1
 8001570:	f008 f98a 	bl	8009888 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	bd80      	pop	{r7, pc}
 8001578:	24000380 	.word	0x24000380
 800157c:	40005400 	.word	0x40005400
 8001580:	0020081f 	.word	0x0020081f

08001584 <MX_RTC_Init>:
/**
 * @brief RTC Initialization Function
 * @param None
 * @retval None
 */
static void MX_RTC_Init(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN RTC_Init 0 */

	/* USER CODE END RTC_Init 0 */

	RTC_TimeTypeDef sTime = { 0 };
 800158a:	1d3b      	adds	r3, r7, #4
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
	RTC_DateTypeDef sDate = { 0 };
 8001598:	2300      	movs	r3, #0
 800159a:	603b      	str	r3, [r7, #0]

	/* USER CODE END RTC_Init 1 */

	/** Initialize RTC Only
	 */
	hrtc.Instance = RTC;
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <MX_RTC_Init+0xb4>)
 800159e:	4a27      	ldr	r2, [pc, #156]	; (800163c <MX_RTC_Init+0xb8>)
 80015a0:	601a      	str	r2, [r3, #0]
	hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80015a2:	4b25      	ldr	r3, [pc, #148]	; (8001638 <MX_RTC_Init+0xb4>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	605a      	str	r2, [r3, #4]
	hrtc.Init.AsynchPrediv = 100;
 80015a8:	4b23      	ldr	r3, [pc, #140]	; (8001638 <MX_RTC_Init+0xb4>)
 80015aa:	2264      	movs	r2, #100	; 0x64
 80015ac:	609a      	str	r2, [r3, #8]
	hrtc.Init.SynchPrediv = 10000;
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <MX_RTC_Init+0xb4>)
 80015b0:	f242 7210 	movw	r2, #10000	; 0x2710
 80015b4:	60da      	str	r2, [r3, #12]
	hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <MX_RTC_Init+0xb4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	611a      	str	r2, [r3, #16]
	hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80015bc:	4b1e      	ldr	r3, [pc, #120]	; (8001638 <MX_RTC_Init+0xb4>)
 80015be:	2200      	movs	r2, #0
 80015c0:	619a      	str	r2, [r3, #24]
	hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	; (8001638 <MX_RTC_Init+0xb4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	61da      	str	r2, [r3, #28]
	hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80015c8:	4b1b      	ldr	r3, [pc, #108]	; (8001638 <MX_RTC_Init+0xb4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	615a      	str	r2, [r3, #20]
	if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 80015ce:	481a      	ldr	r0, [pc, #104]	; (8001638 <MX_RTC_Init+0xb4>)
 80015d0:	f00b fede 	bl	800d390 <HAL_RTC_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_RTC_Init+0x5a>
		Error_Handler();
 80015da:	f001 fabf 	bl	8002b5c <Error_Handler>

	/* USER CODE END Check_RTC_BKUP */

	/** Initialize RTC and set the Time and Date
	 */
	sTime.Hours = 0x0;
 80015de:	2300      	movs	r3, #0
 80015e0:	713b      	strb	r3, [r7, #4]
	sTime.Minutes = 0x0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	717b      	strb	r3, [r7, #5]
	sTime.Seconds = 0x0;
 80015e6:	2300      	movs	r3, #0
 80015e8:	71bb      	strb	r3, [r7, #6]
	sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
	sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
	if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK) {
 80015f2:	1d3b      	adds	r3, r7, #4
 80015f4:	2201      	movs	r2, #1
 80015f6:	4619      	mov	r1, r3
 80015f8:	480f      	ldr	r0, [pc, #60]	; (8001638 <MX_RTC_Init+0xb4>)
 80015fa:	f00b ff4b 	bl	800d494 <HAL_RTC_SetTime>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_RTC_Init+0x84>
		Error_Handler();
 8001604:	f001 faaa 	bl	8002b5c <Error_Handler>
	}
	sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001608:	2301      	movs	r3, #1
 800160a:	703b      	strb	r3, [r7, #0]
	sDate.Month = RTC_MONTH_JANUARY;
 800160c:	2301      	movs	r3, #1
 800160e:	707b      	strb	r3, [r7, #1]
	sDate.Date = 0x1;
 8001610:	2301      	movs	r3, #1
 8001612:	70bb      	strb	r3, [r7, #2]
	sDate.Year = 0x0;
 8001614:	2300      	movs	r3, #0
 8001616:	70fb      	strb	r3, [r7, #3]

	if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK) {
 8001618:	463b      	mov	r3, r7
 800161a:	2201      	movs	r2, #1
 800161c:	4619      	mov	r1, r3
 800161e:	4806      	ldr	r0, [pc, #24]	; (8001638 <MX_RTC_Init+0xb4>)
 8001620:	f00c f832 	bl	800d688 <HAL_RTC_SetDate>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d001      	beq.n	800162e <MX_RTC_Init+0xaa>
		Error_Handler();
 800162a:	f001 fa97 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN RTC_Init 2 */

	/* USER CODE END RTC_Init 2 */

}
 800162e:	bf00      	nop
 8001630:	3718      	adds	r7, #24
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	240003d4 	.word	0x240003d4
 800163c:	58004000 	.word	0x58004000

08001640 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001644:	4b28      	ldr	r3, [pc, #160]	; (80016e8 <MX_SPI1_Init+0xa8>)
 8001646:	4a29      	ldr	r2, [pc, #164]	; (80016ec <MX_SPI1_Init+0xac>)
 8001648:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 800164a:	4b27      	ldr	r3, [pc, #156]	; (80016e8 <MX_SPI1_Init+0xa8>)
 800164c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001650:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001652:	4b25      	ldr	r3, [pc, #148]	; (80016e8 <MX_SPI1_Init+0xa8>)
 8001654:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001658:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 800165a:	4b23      	ldr	r3, [pc, #140]	; (80016e8 <MX_SPI1_Init+0xa8>)
 800165c:	220f      	movs	r2, #15
 800165e:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001660:	4b21      	ldr	r3, [pc, #132]	; (80016e8 <MX_SPI1_Init+0xa8>)
 8001662:	2200      	movs	r2, #0
 8001664:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001666:	4b20      	ldr	r3, [pc, #128]	; (80016e8 <MX_SPI1_Init+0xa8>)
 8001668:	2200      	movs	r2, #0
 800166a:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 800166c:	4b1e      	ldr	r3, [pc, #120]	; (80016e8 <MX_SPI1_Init+0xa8>)
 800166e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001672:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001674:	4b1c      	ldr	r3, [pc, #112]	; (80016e8 <MX_SPI1_Init+0xa8>)
 8001676:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800167a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800167c:	4b1a      	ldr	r3, [pc, #104]	; (80016e8 <MX_SPI1_Init+0xa8>)
 800167e:	2200      	movs	r2, #0
 8001680:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001682:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <MX_SPI1_Init+0xa8>)
 8001684:	2200      	movs	r2, #0
 8001686:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001688:	4b17      	ldr	r3, [pc, #92]	; (80016e8 <MX_SPI1_Init+0xa8>)
 800168a:	2200      	movs	r2, #0
 800168c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 0x0;
 800168e:	4b16      	ldr	r3, [pc, #88]	; (80016e8 <MX_SPI1_Init+0xa8>)
 8001690:	2200      	movs	r2, #0
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_SPI1_Init+0xa8>)
 8001696:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800169a:	635a      	str	r2, [r3, #52]	; 0x34
	hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800169c:	4b12      	ldr	r3, [pc, #72]	; (80016e8 <MX_SPI1_Init+0xa8>)
 800169e:	2200      	movs	r2, #0
 80016a0:	639a      	str	r2, [r3, #56]	; 0x38
	hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_SPI1_Init+0xa8>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi1.Init.TxCRCInitializationPattern =
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_SPI1_Init+0xa8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.RxCRCInitializationPattern =
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_SPI1_Init+0xa8>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_SPI1_Init+0xa8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	649a      	str	r2, [r3, #72]	; 0x48
	hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_SPI1_Init+0xa8>)
 80016bc:	2200      	movs	r2, #0
 80016be:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_SPI1_Init+0xa8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	651a      	str	r2, [r3, #80]	; 0x50
	hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_SPI1_Init+0xa8>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	655a      	str	r2, [r3, #84]	; 0x54
	hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_SPI1_Init+0xa8>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_SPI1_Init+0xa8>)
 80016d4:	f00c f97e 	bl	800d9d4 <HAL_SPI_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_SPI1_Init+0xa2>
		Error_Handler();
 80016de:	f001 fa3d 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	240003f8 	.word	0x240003f8
 80016ec:	40013000 	.word	0x40013000

080016f0 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <MX_SPI2_Init+0xa8>)
 80016f6:	4a29      	ldr	r2, [pc, #164]	; (800179c <MX_SPI2_Init+0xac>)
 80016f8:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80016fa:	4b27      	ldr	r3, [pc, #156]	; (8001798 <MX_SPI2_Init+0xa8>)
 80016fc:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001700:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8001702:	4b25      	ldr	r3, [pc, #148]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001704:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001708:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 800170a:	4b23      	ldr	r3, [pc, #140]	; (8001798 <MX_SPI2_Init+0xa8>)
 800170c:	220f      	movs	r2, #15
 800170e:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001710:	4b21      	ldr	r3, [pc, #132]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001712:	2200      	movs	r2, #0
 8001714:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001716:	4b20      	ldr	r3, [pc, #128]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001718:	2200      	movs	r2, #0
 800171a:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800171c:	4b1e      	ldr	r3, [pc, #120]	; (8001798 <MX_SPI2_Init+0xa8>)
 800171e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001722:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001724:	4b1c      	ldr	r3, [pc, #112]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001726:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 800172a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172c:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_SPI2_Init+0xa8>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
	hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001732:	4b19      	ldr	r3, [pc, #100]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	; 0x24
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001738:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_SPI2_Init+0xa8>)
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 0x0;
 800173e:	4b16      	ldr	r3, [pc, #88]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001740:	2200      	movs	r2, #0
 8001742:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001744:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001746:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800174a:	635a      	str	r2, [r3, #52]	; 0x34
	hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_SPI2_Init+0xa8>)
 800174e:	2200      	movs	r2, #0
 8001750:	639a      	str	r2, [r3, #56]	; 0x38
	hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001754:	2200      	movs	r2, #0
 8001756:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi2.Init.TxCRCInitializationPattern =
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_SPI2_Init+0xa8>)
 800175a:	2200      	movs	r2, #0
 800175c:	641a      	str	r2, [r3, #64]	; 0x40
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.RxCRCInitializationPattern =
 800175e:	4b0e      	ldr	r3, [pc, #56]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001760:	2200      	movs	r2, #0
 8001762:	645a      	str	r2, [r3, #68]	; 0x44
			SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
	hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001764:	4b0c      	ldr	r3, [pc, #48]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001766:	2200      	movs	r2, #0
 8001768:	649a      	str	r2, [r3, #72]	; 0x48
	hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <MX_SPI2_Init+0xa8>)
 800176c:	2200      	movs	r2, #0
 800176e:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001770:	4b09      	ldr	r3, [pc, #36]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	651a      	str	r2, [r3, #80]	; 0x50
	hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001776:	4b08      	ldr	r3, [pc, #32]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	655a      	str	r2, [r3, #84]	; 0x54
	hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <MX_SPI2_Init+0xa8>)
 800177e:	2200      	movs	r2, #0
 8001780:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_SPI2_Init+0xa8>)
 8001784:	f00c f926 	bl	800d9d4 <HAL_SPI_Init>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_SPI2_Init+0xa2>
		Error_Handler();
 800178e:	f001 f9e5 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	24000480 	.word	0x24000480
 800179c:	40003800 	.word	0x40003800

080017a0 <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b09a      	sub	sp, #104	; 0x68
 80017a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80017a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80017b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80017c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	605a      	str	r2, [r3, #4]
 80017ca:	609a      	str	r2, [r3, #8]
 80017cc:	60da      	str	r2, [r3, #12]
 80017ce:	611a      	str	r2, [r3, #16]
 80017d0:	615a      	str	r2, [r3, #20]
 80017d2:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	222c      	movs	r2, #44	; 0x2c
 80017d8:	2100      	movs	r1, #0
 80017da:	4618      	mov	r0, r3
 80017dc:	f014 fc76 	bl	80160cc <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80017e0:	4b44      	ldr	r3, [pc, #272]	; (80018f4 <MX_TIM1_Init+0x154>)
 80017e2:	4a45      	ldr	r2, [pc, #276]	; (80018f8 <MX_TIM1_Init+0x158>)
 80017e4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 50 - 1;
 80017e6:	4b43      	ldr	r3, [pc, #268]	; (80018f4 <MX_TIM1_Init+0x154>)
 80017e8:	2231      	movs	r2, #49	; 0x31
 80017ea:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <MX_TIM1_Init+0x154>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 62500 - 1;
 80017f2:	4b40      	ldr	r3, [pc, #256]	; (80018f4 <MX_TIM1_Init+0x154>)
 80017f4:	f24f 4223 	movw	r2, #62499	; 0xf423
 80017f8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b3e      	ldr	r3, [pc, #248]	; (80018f4 <MX_TIM1_Init+0x154>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001800:	4b3c      	ldr	r3, [pc, #240]	; (80018f4 <MX_TIM1_Init+0x154>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b3b      	ldr	r3, [pc, #236]	; (80018f4 <MX_TIM1_Init+0x154>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK) {
 800180c:	4839      	ldr	r0, [pc, #228]	; (80018f4 <MX_TIM1_Init+0x154>)
 800180e:	f00c fd32 	bl	800e276 <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x7c>
		Error_Handler();
 8001818:	f001 f9a0 	bl	8002b5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001820:	65bb      	str	r3, [r7, #88]	; 0x58
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK) {
 8001822:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001826:	4619      	mov	r1, r3
 8001828:	4832      	ldr	r0, [pc, #200]	; (80018f4 <MX_TIM1_Init+0x154>)
 800182a:	f00d faad 	bl	800ed88 <HAL_TIM_ConfigClockSource>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x98>
		Error_Handler();
 8001834:	f001 f992 	bl	8002b5c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 8001838:	482e      	ldr	r0, [pc, #184]	; (80018f4 <MX_TIM1_Init+0x154>)
 800183a:	f00d f829 	bl	800e890 <HAL_TIM_PWM_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0xa8>
		Error_Handler();
 8001844:	f001 f98a 	bl	8002b5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001848:	2300      	movs	r3, #0
 800184a:	64fb      	str	r3, [r7, #76]	; 0x4c
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	653b      	str	r3, [r7, #80]	; 0x50
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 8001854:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001858:	4619      	mov	r1, r3
 800185a:	4826      	ldr	r0, [pc, #152]	; (80018f4 <MX_TIM1_Init+0x154>)
 800185c:	f00d ffea 	bl	800f834 <HAL_TIMEx_MasterConfigSynchronization>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM1_Init+0xca>
			!= HAL_OK) {
		Error_Handler();
 8001866:	f001 f979 	bl	8002b5c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186a:	2360      	movs	r3, #96	; 0x60
 800186c:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.Pulse = 480 - 1;
 800186e:	f240 13df 	movw	r3, #479	; 0x1df
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001874:	2300      	movs	r3, #0
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001878:	2300      	movs	r3, #0
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	643b      	str	r3, [r7, #64]	; 0x40
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8001888:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800188c:	2200      	movs	r2, #0
 800188e:	4619      	mov	r1, r3
 8001890:	4818      	ldr	r0, [pc, #96]	; (80018f4 <MX_TIM1_Init+0x154>)
 8001892:	f00d f965 	bl	800eb60 <HAL_TIM_PWM_ConfigChannel>
 8001896:	4603      	mov	r3, r0
 8001898:	2b00      	cmp	r3, #0
 800189a:	d001      	beq.n	80018a0 <MX_TIM1_Init+0x100>
			!= HAL_OK) {
		Error_Handler();
 800189c:	f001 f95e 	bl	8002b5c <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80018a4:	2300      	movs	r3, #0
 80018a6:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018a8:	2300      	movs	r3, #0
 80018aa:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018b8:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.BreakFilter = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	61fb      	str	r3, [r7, #28]
	sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80018be:	2300      	movs	r3, #0
 80018c0:	623b      	str	r3, [r7, #32]
	sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80018c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
	sBreakDeadTimeConfig.Break2Filter = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	62bb      	str	r3, [r7, #40]	; 0x28
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 80018d0:	1d3b      	adds	r3, r7, #4
 80018d2:	4619      	mov	r1, r3
 80018d4:	4807      	ldr	r0, [pc, #28]	; (80018f4 <MX_TIM1_Init+0x154>)
 80018d6:	f00e f83b 	bl	800f950 <HAL_TIMEx_ConfigBreakDeadTime>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM1_Init+0x144>
			!= HAL_OK) {
		Error_Handler();
 80018e0:	f001 f93c 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 80018e4:	4803      	ldr	r0, [pc, #12]	; (80018f4 <MX_TIM1_Init+0x154>)
 80018e6:	f001 fcc9 	bl	800327c <HAL_TIM_MspPostInit>

}
 80018ea:	bf00      	nop
 80018ec:	3768      	adds	r7, #104	; 0x68
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	24000508 	.word	0x24000508
 80018f8:	40010000 	.word	0x40010000

080018fc <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08e      	sub	sp, #56	; 0x38
 8001900:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8001902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800191c:	463b      	mov	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	605a      	str	r2, [r3, #4]
 8001924:	609a      	str	r2, [r3, #8]
 8001926:	60da      	str	r2, [r3, #12]
 8001928:	611a      	str	r2, [r3, #16]
 800192a:	615a      	str	r2, [r3, #20]
 800192c:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800192e:	4b2d      	ldr	r3, [pc, #180]	; (80019e4 <MX_TIM2_Init+0xe8>)
 8001930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001934:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 50 - 1;
 8001936:	4b2b      	ldr	r3, [pc, #172]	; (80019e4 <MX_TIM2_Init+0xe8>)
 8001938:	2231      	movs	r2, #49	; 0x31
 800193a:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193c:	4b29      	ldr	r3, [pc, #164]	; (80019e4 <MX_TIM2_Init+0xe8>)
 800193e:	2200      	movs	r2, #0
 8001940:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 3125 - 1;
 8001942:	4b28      	ldr	r3, [pc, #160]	; (80019e4 <MX_TIM2_Init+0xe8>)
 8001944:	f640 4234 	movw	r2, #3124	; 0xc34
 8001948:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <MX_TIM2_Init+0xe8>)
 800194c:	2200      	movs	r2, #0
 800194e:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001950:	4b24      	ldr	r3, [pc, #144]	; (80019e4 <MX_TIM2_Init+0xe8>)
 8001952:	2280      	movs	r2, #128	; 0x80
 8001954:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8001956:	4823      	ldr	r0, [pc, #140]	; (80019e4 <MX_TIM2_Init+0xe8>)
 8001958:	f00c fc8d 	bl	800e276 <HAL_TIM_Base_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <MX_TIM2_Init+0x6a>
		Error_Handler();
 8001962:	f001 f8fb 	bl	8002b5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001966:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 800196c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001970:	4619      	mov	r1, r3
 8001972:	481c      	ldr	r0, [pc, #112]	; (80019e4 <MX_TIM2_Init+0xe8>)
 8001974:	f00d fa08 	bl	800ed88 <HAL_TIM_ConfigClockSource>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM2_Init+0x86>
		Error_Handler();
 800197e:	f001 f8ed 	bl	8002b5c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8001982:	4818      	ldr	r0, [pc, #96]	; (80019e4 <MX_TIM2_Init+0xe8>)
 8001984:	f00c ff84 	bl	800e890 <HAL_TIM_PWM_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM2_Init+0x96>
		Error_Handler();
 800198e:	f001 f8e5 	bl	8002b5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001992:	2320      	movs	r3, #32
 8001994:	61fb      	str	r3, [r7, #28]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001996:	2300      	movs	r3, #0
 8001998:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	4619      	mov	r1, r3
 80019a0:	4810      	ldr	r0, [pc, #64]	; (80019e4 <MX_TIM2_Init+0xe8>)
 80019a2:	f00d ff47 	bl	800f834 <HAL_TIMEx_MasterConfigSynchronization>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM2_Init+0xb4>
			!= HAL_OK) {
		Error_Handler();
 80019ac:	f001 f8d6 	bl	8002b5c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019b0:	2360      	movs	r3, #96	; 0x60
 80019b2:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b8:	2300      	movs	r3, #0
 80019ba:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4)
 80019c0:	463b      	mov	r3, r7
 80019c2:	220c      	movs	r2, #12
 80019c4:	4619      	mov	r1, r3
 80019c6:	4807      	ldr	r0, [pc, #28]	; (80019e4 <MX_TIM2_Init+0xe8>)
 80019c8:	f00d f8ca 	bl	800eb60 <HAL_TIM_PWM_ConfigChannel>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_TIM2_Init+0xda>
			!= HAL_OK) {
		Error_Handler();
 80019d2:	f001 f8c3 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 80019d6:	4803      	ldr	r0, [pc, #12]	; (80019e4 <MX_TIM2_Init+0xe8>)
 80019d8:	f001 fc50 	bl	800327c <HAL_TIM_MspPostInit>

}
 80019dc:	bf00      	nop
 80019de:	3738      	adds	r7, #56	; 0x38
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	24000554 	.word	0x24000554

080019e8 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b088      	sub	sp, #32
 80019ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80019ee:	f107 0310 	add.w	r3, r7, #16
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	605a      	str	r2, [r3, #4]
 80019f8:	609a      	str	r2, [r3, #8]
 80019fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001a06:	4b1d      	ldr	r3, [pc, #116]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a08:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <MX_TIM3_Init+0x98>)
 8001a0a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 100 - 1;
 8001a0c:	4b1b      	ldr	r3, [pc, #108]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a0e:	2263      	movs	r2, #99	; 0x63
 8001a10:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a12:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 50000 - 1;
 8001a18:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a1a:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001a1e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a20:	4b16      	ldr	r3, [pc, #88]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a26:	4b15      	ldr	r3, [pc, #84]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8001a2c:	4813      	ldr	r0, [pc, #76]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a2e:	f00c fc22 	bl	800e276 <HAL_TIM_Base_Init>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM3_Init+0x54>
		Error_Handler();
 8001a38:	f001 f890 	bl	8002b5c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a40:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8001a42:	f107 0310 	add.w	r3, r7, #16
 8001a46:	4619      	mov	r1, r3
 8001a48:	480c      	ldr	r0, [pc, #48]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a4a:	f00d f99d 	bl	800ed88 <HAL_TIM_ConfigClockSource>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM3_Init+0x70>
		Error_Handler();
 8001a54:	f001 f882 	bl	8002b5c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	4619      	mov	r1, r3
 8001a64:	4805      	ldr	r0, [pc, #20]	; (8001a7c <MX_TIM3_Init+0x94>)
 8001a66:	f00d fee5 	bl	800f834 <HAL_TIMEx_MasterConfigSynchronization>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM3_Init+0x8c>
			!= HAL_OK) {
		Error_Handler();
 8001a70:	f001 f874 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001a74:	bf00      	nop
 8001a76:	3720      	adds	r7, #32
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	240005a0 	.word	0x240005a0
 8001a80:	40000400 	.word	0x40000400

08001a84 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001a8a:	4a23      	ldr	r2, [pc, #140]	; (8001b18 <MX_USART1_UART_Init+0x94>)
 8001a8c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 460800;
 8001a8e:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001a90:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8001a94:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001a9c:	4b1d      	ldr	r3, [pc, #116]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001aa2:	4b1c      	ldr	r3, [pc, #112]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001aa8:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001aaa:	220c      	movs	r2, #12
 8001aac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aae:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aba:	4b16      	ldr	r3, [pc, #88]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
	huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ac0:	4b14      	ldr	r3, [pc, #80]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ac6:	4b13      	ldr	r3, [pc, #76]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001acc:	4811      	ldr	r0, [pc, #68]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001ace:	f00d ffdb 	bl	800fa88 <HAL_UART_Init>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_USART1_UART_Init+0x58>
		Error_Handler();
 8001ad8:	f001 f840 	bl	8002b5c <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8)
 8001adc:	2100      	movs	r1, #0
 8001ade:	480d      	ldr	r0, [pc, #52]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001ae0:	f010 fd57 	bl	8012592 <HAL_UARTEx_SetTxFifoThreshold>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_USART1_UART_Init+0x6a>
			!= HAL_OK) {
		Error_Handler();
 8001aea:	f001 f837 	bl	8002b5c <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8)
 8001aee:	2100      	movs	r1, #0
 8001af0:	4808      	ldr	r0, [pc, #32]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001af2:	f010 fd8c 	bl	801260e <HAL_UARTEx_SetRxFifoThreshold>
 8001af6:	4603      	mov	r3, r0
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d001      	beq.n	8001b00 <MX_USART1_UART_Init+0x7c>
			!= HAL_OK) {
		Error_Handler();
 8001afc:	f001 f82e 	bl	8002b5c <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK) {
 8001b00:	4804      	ldr	r0, [pc, #16]	; (8001b14 <MX_USART1_UART_Init+0x90>)
 8001b02:	f010 fd0d 	bl	8012520 <HAL_UARTEx_DisableFifoMode>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_USART1_UART_Init+0x8c>
		Error_Handler();
 8001b0c:	f001 f826 	bl	8002b5c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	240005ec 	.word	0x240005ec
 8001b18:	40011000 	.word	0x40011000

08001b1c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b082      	sub	sp, #8
 8001b20:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001b22:	4b19      	ldr	r3, [pc, #100]	; (8001b88 <MX_DMA_Init+0x6c>)
 8001b24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b28:	4a17      	ldr	r2, [pc, #92]	; (8001b88 <MX_DMA_Init+0x6c>)
 8001b2a:	f043 0301 	orr.w	r3, r3, #1
 8001b2e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001b32:	4b15      	ldr	r3, [pc, #84]	; (8001b88 <MX_DMA_Init+0x6c>)
 8001b34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001b38:	f003 0301 	and.w	r3, r3, #1
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2105      	movs	r1, #5
 8001b44:	200b      	movs	r0, #11
 8001b46:	f003 fc6b 	bl	8005420 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001b4a:	200b      	movs	r0, #11
 8001b4c:	f003 fc82 	bl	8005454 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2105      	movs	r1, #5
 8001b54:	200c      	movs	r0, #12
 8001b56:	f003 fc63 	bl	8005420 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001b5a:	200c      	movs	r0, #12
 8001b5c:	f003 fc7a 	bl	8005454 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2105      	movs	r1, #5
 8001b64:	200d      	movs	r0, #13
 8001b66:	f003 fc5b 	bl	8005420 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001b6a:	200d      	movs	r0, #13
 8001b6c:	f003 fc72 	bl	8005454 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2105      	movs	r1, #5
 8001b74:	2010      	movs	r0, #16
 8001b76:	f003 fc53 	bl	8005420 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b7a:	2010      	movs	r0, #16
 8001b7c:	f003 fc6a 	bl	8005454 <HAL_NVIC_EnableIRQ>

}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	58024400 	.word	0x58024400

08001b8c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08a      	sub	sp, #40	; 0x28
 8001b90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001b92:	f107 0314 	add.w	r3, r7, #20
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
 8001ba0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001ba4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ba8:	4a32      	ldr	r2, [pc, #200]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001baa:	f043 0304 	orr.w	r3, r3, #4
 8001bae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb2:	4b30      	ldr	r3, [pc, #192]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	613b      	str	r3, [r7, #16]
 8001bbe:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001bc0:	4b2c      	ldr	r3, [pc, #176]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001bc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bc6:	4a2b      	ldr	r2, [pc, #172]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bcc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bd0:	4b28      	ldr	r3, [pc, #160]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001bd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001be0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001be4:	4a23      	ldr	r2, [pc, #140]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bee:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001bf0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bf4:	f003 0301 	and.w	r3, r3, #1
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfc:	4b1d      	ldr	r3, [pc, #116]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001bfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c02:	4a1c      	ldr	r2, [pc, #112]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001c04:	f043 0302 	orr.w	r3, r3, #2
 8001c08:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_GPIO_Init+0xe8>)
 8001c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC,
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f44f 511f 	mov.w	r1, #10176	; 0x27c0
 8001c20:	4815      	ldr	r0, [pc, #84]	; (8001c78 <MX_GPIO_Init+0xec>)
 8001c22:	f007 f82f 	bl	8008c84 <HAL_GPIO_WritePin>
			GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9
					| GPIO_PIN_10, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6,
 8001c26:	2200      	movs	r2, #0
 8001c28:	2164      	movs	r1, #100	; 0x64
 8001c2a:	4814      	ldr	r0, [pc, #80]	; (8001c7c <MX_GPIO_Init+0xf0>)
 8001c2c:	f007 f82a 	bl	8008c84 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pins : PC13 PC6 PC7 PC8
	 PC9 PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8
 8001c30:	f44f 531f 	mov.w	r3, #10176	; 0x27c0
 8001c34:	617b      	str	r3, [r7, #20]
			| GPIO_PIN_9 | GPIO_PIN_10;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c36:	2301      	movs	r3, #1
 8001c38:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c42:	f107 0314 	add.w	r3, r7, #20
 8001c46:	4619      	mov	r1, r3
 8001c48:	480b      	ldr	r0, [pc, #44]	; (8001c78 <MX_GPIO_Init+0xec>)
 8001c4a:	f006 fe53 	bl	80088f4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB5 PB6 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_5 | GPIO_PIN_6;
 8001c4e:	2364      	movs	r3, #100	; 0x64
 8001c50:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c52:	2301      	movs	r3, #1
 8001c54:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c56:	2302      	movs	r3, #2
 8001c58:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4619      	mov	r1, r3
 8001c64:	4805      	ldr	r0, [pc, #20]	; (8001c7c <MX_GPIO_Init+0xf0>)
 8001c66:	f006 fe45 	bl	80088f4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001c6a:	bf00      	nop
 8001c6c:	3728      	adds	r7, #40	; 0x28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	58024400 	.word	0x58024400
 8001c78:	58020800 	.word	0x58020800
 8001c7c:	58020400 	.word	0x58020400

08001c80 <poll_i2c_sensor>:
 * and reads the temperature value.
 *
 * @param TEMP_ADDR The I2C address of the temperature sensor.
 * @return The temperature reading from the sensor, or an error code.
 */
int16_t poll_i2c_sensor(const uint8_t TEMP_ADDR) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
	int16_t output;
	uint8_t buf[2];
	HAL_StatusTypeDef ret;
	buf[0] = REG_TEMP;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	723b      	strb	r3, [r7, #8]
	ret = HAL_I2C_Master_Transmit(&hi2c1, TEMP_ADDR, buf, 1, 1000);
 8001c8e:	79fb      	ldrb	r3, [r7, #7]
 8001c90:	b299      	uxth	r1, r3
 8001c92:	f107 0208 	add.w	r2, r7, #8
 8001c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9a:	9300      	str	r3, [sp, #0]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	4817      	ldr	r0, [pc, #92]	; (8001cfc <poll_i2c_sensor+0x7c>)
 8001ca0:	f007 f8a6 	bl	8008df0 <HAL_I2C_Master_Transmit>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	737b      	strb	r3, [r7, #13]
	if (ret != HAL_OK) {
 8001ca8:	7b7b      	ldrb	r3, [r7, #13]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <poll_i2c_sensor+0x36>
		printf("I2C TX Error\n");
 8001cae:	4814      	ldr	r0, [pc, #80]	; (8001d00 <poll_i2c_sensor+0x80>)
 8001cb0:	f014 fb62 	bl	8016378 <puts>
 8001cb4:	e01c      	b.n	8001cf0 <poll_i2c_sensor+0x70>
	} else {
		/* Read 2 bytes from the temperature register */
		ret = HAL_I2C_Master_Receive(&hi2c1, TEMP_ADDR, buf, 2, 1000);
 8001cb6:	79fb      	ldrb	r3, [r7, #7]
 8001cb8:	b299      	uxth	r1, r3
 8001cba:	f107 0208 	add.w	r2, r7, #8
 8001cbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	480d      	ldr	r0, [pc, #52]	; (8001cfc <poll_i2c_sensor+0x7c>)
 8001cc8:	f007 f9aa 	bl	8009020 <HAL_I2C_Master_Receive>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	737b      	strb	r3, [r7, #13]
		if (ret != HAL_OK) {
 8001cd0:	7b7b      	ldrb	r3, [r7, #13]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <poll_i2c_sensor+0x5e>
			printf("I2C RX Error\n");
 8001cd6:	480b      	ldr	r0, [pc, #44]	; (8001d04 <poll_i2c_sensor+0x84>)
 8001cd8:	f014 fb4e 	bl	8016378 <puts>
 8001cdc:	e008      	b.n	8001cf0 <poll_i2c_sensor+0x70>
		} else {
			output = (int16_t) (buf[0] << 8);
 8001cde:	7a3b      	ldrb	r3, [r7, #8]
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	81fb      	strh	r3, [r7, #14]
			output = (output | buf[1]) >> 3;
 8001ce4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ce8:	7a7a      	ldrb	r2, [r7, #9]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	10db      	asrs	r3, r3, #3
 8001cee:	81fb      	strh	r3, [r7, #14]
		}
	}
	return output;
 8001cf0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3710      	adds	r7, #16
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	24000380 	.word	0x24000380
 8001d00:	08016d2c 	.word	0x08016d2c
 8001d04:	08016d3c 	.word	0x08016d3c

08001d08 <receive_pmt_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_pmt_spi(uint8_t *buffer) {
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi1, (uint8_t*) spi_raw_data, 1, 1);
 8001d10:	f107 010c 	add.w	r1, r7, #12
 8001d14:	2301      	movs	r3, #1
 8001d16:	2201      	movs	r2, #1
 8001d18:	480c      	ldr	r0, [pc, #48]	; (8001d4c <receive_pmt_spi+0x44>)
 8001d1a:	f00b ff7f 	bl	800dc1c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d1e:	2300      	movs	r3, #0
 8001d20:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d22:	7b7b      	ldrb	r3, [r7, #13]
 8001d24:	73bb      	strb	r3, [r7, #14]

	hspi1.Instance->CR1 |= 1 << 10;
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <receive_pmt_spi+0x44>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	4b07      	ldr	r3, [pc, #28]	; (8001d4c <receive_pmt_spi+0x44>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d34:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	7bba      	ldrb	r2, [r7, #14]
 8001d3a:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	7bfa      	ldrb	r2, [r7, #15]
 8001d42:	701a      	strb	r2, [r3, #0]
}
 8001d44:	bf00      	nop
 8001d46:	3710      	adds	r7, #16
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	240003f8 	.word	0x240003f8

08001d50 <receive_erpa_spi>:
 * in the provided buffer.
 *
 * @param spi_handle The handle to the SPI device.
 * @param buffer The buffer to store the received data.
 */
void receive_erpa_spi(uint8_t *buffer) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	uint8_t spi_raw_data[2];
	uint8_t spi_MSB;
	uint8_t spi_LSB;

	HAL_SPI_Receive(&hspi2, (uint8_t*) spi_raw_data, 1, 100);
 8001d58:	f107 010c 	add.w	r1, r7, #12
 8001d5c:	2364      	movs	r3, #100	; 0x64
 8001d5e:	2201      	movs	r2, #1
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <receive_erpa_spi+0x44>)
 8001d62:	f00b ff5b 	bl	800dc1c <HAL_SPI_Receive>

	spi_LSB = ((spi_raw_data[0] & 0xFF00) >> 8);
 8001d66:	2300      	movs	r3, #0
 8001d68:	73fb      	strb	r3, [r7, #15]
	spi_MSB = (spi_raw_data[1] & 0xFF);
 8001d6a:	7b7b      	ldrb	r3, [r7, #13]
 8001d6c:	73bb      	strb	r3, [r7, #14]

	hspi2.Instance->CR1 |= 1 << 10;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	; (8001d94 <receive_erpa_spi+0x44>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	4b07      	ldr	r3, [pc, #28]	; (8001d94 <receive_erpa_spi+0x44>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d7c:	601a      	str	r2, [r3, #0]

	buffer[0] = spi_MSB;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	7bba      	ldrb	r2, [r7, #14]
 8001d82:	701a      	strb	r2, [r3, #0]
	buffer[1] = spi_LSB;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	3301      	adds	r3, #1
 8001d88:	7bfa      	ldrb	r2, [r7, #15]
 8001d8a:	701a      	strb	r2, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	24000480 	.word	0x24000480

08001d98 <receive_erpa_adc>:
 * This function retrieves data from specific ADC channels and stores the values
 * in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC data.
 */
void receive_erpa_adc(uint16_t *buffer) {
 8001d98:	b480      	push	{r7}
 8001d9a:	b085      	sub	sp, #20
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
	uint16_t PC4 = ADC1_raw_data[1];
 8001da0:	4b09      	ldr	r3, [pc, #36]	; (8001dc8 <receive_erpa_adc+0x30>)
 8001da2:	885b      	ldrh	r3, [r3, #2]
 8001da4:	81fb      	strh	r3, [r7, #14]
	uint16_t PB0 = ADC1_raw_data[5];
 8001da6:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <receive_erpa_adc+0x30>)
 8001da8:	895b      	ldrh	r3, [r3, #10]
 8001daa:	81bb      	strh	r3, [r7, #12]

	buffer[0] = PC4;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	89fa      	ldrh	r2, [r7, #14]
 8001db0:	801a      	strh	r2, [r3, #0]
	buffer[1] = PB0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3302      	adds	r3, #2
 8001db6:	89ba      	ldrh	r2, [r7, #12]
 8001db8:	801a      	strh	r2, [r3, #0]
}
 8001dba:	bf00      	nop
 8001dbc:	3714      	adds	r7, #20
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	24000c40 	.word	0x24000c40

08001dcc <receive_hk_i2c>:
 *
 * This function polls multiple I2C sensors and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received I2C sensor data.
 */
void receive_hk_i2c(int16_t *buffer) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	int16_t output1 = poll_i2c_sensor(ADT7410_1);
 8001dd4:	2390      	movs	r3, #144	; 0x90
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff ff52 	bl	8001c80 <poll_i2c_sensor>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	81fb      	strh	r3, [r7, #14]
	int16_t output2 = poll_i2c_sensor(ADT7410_2);
 8001de0:	2394      	movs	r3, #148	; 0x94
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff4c 	bl	8001c80 <poll_i2c_sensor>
 8001de8:	4603      	mov	r3, r0
 8001dea:	81bb      	strh	r3, [r7, #12]
	int16_t output3 = poll_i2c_sensor(ADT7410_3);
 8001dec:	2392      	movs	r3, #146	; 0x92
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff ff46 	bl	8001c80 <poll_i2c_sensor>
 8001df4:	4603      	mov	r3, r0
 8001df6:	817b      	strh	r3, [r7, #10]
	int16_t output4 = poll_i2c_sensor(ADT7410_4);
 8001df8:	2396      	movs	r3, #150	; 0x96
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff ff40 	bl	8001c80 <poll_i2c_sensor>
 8001e00:	4603      	mov	r3, r0
 8001e02:	813b      	strh	r3, [r7, #8]

	buffer[0] = output1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	89fa      	ldrh	r2, [r7, #14]
 8001e08:	801a      	strh	r2, [r3, #0]
	buffer[1] = output2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	89ba      	ldrh	r2, [r7, #12]
 8001e10:	801a      	strh	r2, [r3, #0]
	buffer[2] = output3;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	897a      	ldrh	r2, [r7, #10]
 8001e18:	801a      	strh	r2, [r3, #0]
	buffer[3] = output4;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	3306      	adds	r3, #6
 8001e1e:	893a      	ldrh	r2, [r7, #8]
 8001e20:	801a      	strh	r2, [r3, #0]
}
 8001e22:	bf00      	nop
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
	...

08001e2c <receive_hk_adc1>:
 *
 * This function retrieves multiple ADC1 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC1 sensor data.
 */
void receive_hk_adc1(uint16_t *buffer) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b089      	sub	sp, #36	; 0x24
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
	uint16_t PA1 = ADC1_raw_data[10];
 8001e34:	4b21      	ldr	r3, [pc, #132]	; (8001ebc <receive_hk_adc1+0x90>)
 8001e36:	8a9b      	ldrh	r3, [r3, #20]
 8001e38:	83fb      	strh	r3, [r7, #30]
	uint16_t PA2 = ADC1_raw_data[8];
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <receive_hk_adc1+0x90>)
 8001e3c:	8a1b      	ldrh	r3, [r3, #16]
 8001e3e:	83bb      	strh	r3, [r7, #28]
	uint16_t PC0 = ADC1_raw_data[6];
 8001e40:	4b1e      	ldr	r3, [pc, #120]	; (8001ebc <receive_hk_adc1+0x90>)
 8001e42:	899b      	ldrh	r3, [r3, #12]
 8001e44:	837b      	strh	r3, [r7, #26]
	uint16_t PA3 = ADC1_raw_data[9];
 8001e46:	4b1d      	ldr	r3, [pc, #116]	; (8001ebc <receive_hk_adc1+0x90>)
 8001e48:	8a5b      	ldrh	r3, [r3, #18]
 8001e4a:	833b      	strh	r3, [r7, #24]
	uint16_t PB1 = ADC1_raw_data[2];
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <receive_hk_adc1+0x90>)
 8001e4e:	889b      	ldrh	r3, [r3, #4]
 8001e50:	82fb      	strh	r3, [r7, #22]
	uint16_t PA7 = ADC1_raw_data[3];
 8001e52:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <receive_hk_adc1+0x90>)
 8001e54:	88db      	ldrh	r3, [r3, #6]
 8001e56:	82bb      	strh	r3, [r7, #20]
	uint16_t PC1 = ADC1_raw_data[7];
 8001e58:	4b18      	ldr	r3, [pc, #96]	; (8001ebc <receive_hk_adc1+0x90>)
 8001e5a:	89db      	ldrh	r3, [r3, #14]
 8001e5c:	827b      	strh	r3, [r7, #18]
	uint16_t PC5 = ADC1_raw_data[4];
 8001e5e:	4b17      	ldr	r3, [pc, #92]	; (8001ebc <receive_hk_adc1+0x90>)
 8001e60:	891b      	ldrh	r3, [r3, #8]
 8001e62:	823b      	strh	r3, [r7, #16]
	uint16_t PA6 = ADC1_raw_data[0];
 8001e64:	4b15      	ldr	r3, [pc, #84]	; (8001ebc <receive_hk_adc1+0x90>)
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	81fb      	strh	r3, [r7, #14]

	buffer[0] = PA1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	8bfa      	ldrh	r2, [r7, #30]
 8001e6e:	801a      	strh	r2, [r3, #0]
	buffer[1] = PA2;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3302      	adds	r3, #2
 8001e74:	8bba      	ldrh	r2, [r7, #28]
 8001e76:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC0;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3304      	adds	r3, #4
 8001e7c:	8b7a      	ldrh	r2, [r7, #26]
 8001e7e:	801a      	strh	r2, [r3, #0]
	buffer[3] = PA3;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	3306      	adds	r3, #6
 8001e84:	8b3a      	ldrh	r2, [r7, #24]
 8001e86:	801a      	strh	r2, [r3, #0]
	buffer[4] = PB1;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3308      	adds	r3, #8
 8001e8c:	8afa      	ldrh	r2, [r7, #22]
 8001e8e:	801a      	strh	r2, [r3, #0]
	buffer[5] = PA7;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	330a      	adds	r3, #10
 8001e94:	8aba      	ldrh	r2, [r7, #20]
 8001e96:	801a      	strh	r2, [r3, #0]
	buffer[6] = PC1;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	330c      	adds	r3, #12
 8001e9c:	8a7a      	ldrh	r2, [r7, #18]
 8001e9e:	801a      	strh	r2, [r3, #0]
	buffer[7] = PC5;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	330e      	adds	r3, #14
 8001ea4:	8a3a      	ldrh	r2, [r7, #16]
 8001ea6:	801a      	strh	r2, [r3, #0]
	buffer[8] = PA6;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3310      	adds	r3, #16
 8001eac:	89fa      	ldrh	r2, [r7, #14]
 8001eae:	801a      	strh	r2, [r3, #0]
}
 8001eb0:	bf00      	nop
 8001eb2:	3724      	adds	r7, #36	; 0x24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	24000c40 	.word	0x24000c40

08001ec0 <receive_hk_adc3>:
 *
 * This function retrieves specific ADC3 sensor data and stores the results in the provided buffer.
 *
 * @param buffer The buffer to store the received ADC3 sensor data.
 */
void receive_hk_adc3(uint16_t *buffer) {
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
	uint16_t vrefint = ADC3_raw_data[0];
 8001ec8:	4b10      	ldr	r3, [pc, #64]	; (8001f0c <receive_hk_adc3+0x4c>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	81fb      	strh	r3, [r7, #14]
	uint16_t vsense = ADC3_raw_data[1];
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <receive_hk_adc3+0x4c>)
 8001ed0:	885b      	ldrh	r3, [r3, #2]
 8001ed2:	81bb      	strh	r3, [r7, #12]
	uint16_t PC2 = ADC3_raw_data[2];
 8001ed4:	4b0d      	ldr	r3, [pc, #52]	; (8001f0c <receive_hk_adc3+0x4c>)
 8001ed6:	889b      	ldrh	r3, [r3, #4]
 8001ed8:	817b      	strh	r3, [r7, #10]
	uint16_t PC3 = ADC3_raw_data[3];
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <receive_hk_adc3+0x4c>)
 8001edc:	88db      	ldrh	r3, [r3, #6]
 8001ede:	813b      	strh	r3, [r7, #8]

	buffer[0] = vrefint;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	89fa      	ldrh	r2, [r7, #14]
 8001ee4:	801a      	strh	r2, [r3, #0]
	buffer[1] = vsense;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3302      	adds	r3, #2
 8001eea:	89ba      	ldrh	r2, [r7, #12]
 8001eec:	801a      	strh	r2, [r3, #0]
	buffer[2] = PC2;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3304      	adds	r3, #4
 8001ef2:	897a      	ldrh	r2, [r7, #10]
 8001ef4:	801a      	strh	r2, [r3, #0]
	buffer[3] = PC3;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	3306      	adds	r3, #6
 8001efa:	893a      	ldrh	r2, [r7, #8]
 8001efc:	801a      	strh	r2, [r3, #0]
}
 8001efe:	bf00      	nop
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	24000c60 	.word	0x24000c60

08001f10 <HAL_UART_TxCpltCallback>:
// *********************************************************************************************************** HELPER FUNCTIONS
/**
 * @brief UART transmit complete callback.
 * @param huart: UART handle.
 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
	tx_flag = 1;
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <HAL_UART_TxCpltCallback+0x1c>)
 8001f1a:	2201      	movs	r2, #1
 8001f1c:	601a      	str	r2, [r3, #0]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	24000000 	.word	0x24000000

08001f30 <create_packet>:
 * @brief Creates a packet with given data and size.
 * @param data: Pointer to data to be copied into the packet.
 * @param size: Size of the data.
 * @return Created packet.
 */
packet_t create_packet(const uint8_t *data, uint16_t size) {
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b086      	sub	sp, #24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	60b9      	str	r1, [r7, #8]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	80fb      	strh	r3, [r7, #6]
	packet_t packet;
	packet.array = (uint8_t*) malloc(size * sizeof(uint8_t));
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f014 f8a5 	bl	8016090 <malloc>
 8001f46:	4603      	mov	r3, r0
 8001f48:	613b      	str	r3, [r7, #16]
	if (packet.array == NULL) {
		// Packet array is null somehow, should probably do something about this edge case
	}
	memcpy(packet.array, data, size);
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	88fa      	ldrh	r2, [r7, #6]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f014 f8ad 	bl	80160b0 <memcpy>
	packet.size = size;
 8001f56:	88fb      	ldrh	r3, [r7, #6]
 8001f58:	82bb      	strh	r3, [r7, #20]
	return packet;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	f107 0310 	add.w	r3, r7, #16
 8001f62:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f66:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	3718      	adds	r7, #24
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
	...

08001f74 <handshake>:

/**
 * @brief Performs a handshake by receiving and sending data over UART.
 * @return Status of the handshake operation.
 */
int handshake() {
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b090      	sub	sp, #64	; 0x40
 8001f78:	af00      	add	r7, sp, #0
	uint8_t tx_buffer[5];
	uint8_t rx_buffer[9];
	uint8_t key;
	int allowed_tries = 10;
 8001f7a:	230a      	movs	r3, #10
 8001f7c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Wait for 0xFF to be received
	do {
		HAL_UART_Receive(&huart1, rx_buffer, 9, 100);
 8001f7e:	f107 011c 	add.w	r1, r7, #28
 8001f82:	2364      	movs	r3, #100	; 0x64
 8001f84:	2209      	movs	r2, #9
 8001f86:	4840      	ldr	r0, [pc, #256]	; (8002088 <handshake+0x114>)
 8001f88:	f00d fe5c 	bl	800fc44 <HAL_UART_Receive>
		key = rx_buffer[0];
 8001f8c:	7f3b      	ldrb	r3, [r7, #28]
 8001f8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	} while (key != 0xFF);
 8001f92:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001f96:	2bff      	cmp	r3, #255	; 0xff
 8001f98:	d1f1      	bne.n	8001f7e <handshake+0xa>
	//    [0]     [1]     [2]     [3]     [4]     [5]     [6]     [7]     [8]
	//    0xFF    Year   Month    Day     Hour   Minute  Second  ms MSB  ms LSB

	RTC_DateTypeDef dateStruct;
	RTC_TimeTypeDef timeStruct;
	uint8_t year = rx_buffer[1];
 8001f9a:	7f7b      	ldrb	r3, [r7, #29]
 8001f9c:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	uint8_t month = rx_buffer[2];
 8001fa0:	7fbb      	ldrb	r3, [r7, #30]
 8001fa2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	uint8_t day = rx_buffer[3];
 8001fa6:	7ffb      	ldrb	r3, [r7, #31]
 8001fa8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t hour = rx_buffer[4];
 8001fac:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fb0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t minute = rx_buffer[5];
 8001fb4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8001fb8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
	uint8_t second = rx_buffer[6];
 8001fbc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001fc0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint16_t milliseconds = (rx_buffer[7] << 8) | rx_buffer[8];
 8001fc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001fc8:	021b      	lsls	r3, r3, #8
 8001fca:	b21a      	sxth	r2, r3
 8001fcc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fd0:	b21b      	sxth	r3, r3
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	b21b      	sxth	r3, r3
 8001fd6:	85fb      	strh	r3, [r7, #46]	; 0x2e

	dateStruct.Year = year;
 8001fd8:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001fdc:	76fb      	strb	r3, [r7, #27]
	dateStruct.Month = month;
 8001fde:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001fe2:	767b      	strb	r3, [r7, #25]
	dateStruct.Date = day;
 8001fe4:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001fe8:	76bb      	strb	r3, [r7, #26]

	timeStruct.Hours = hour;
 8001fea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001fee:	713b      	strb	r3, [r7, #4]
	timeStruct.Minutes = minute;
 8001ff0:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001ff4:	717b      	strb	r3, [r7, #5]
	timeStruct.Seconds = second;
 8001ff6:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001ffa:	71bb      	strb	r3, [r7, #6]
	timeStruct.SubSeconds = milliseconds;
 8001ffc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ffe:	60bb      	str	r3, [r7, #8]

	HAL_StatusTypeDef status;

	status = HAL_RTC_SetDate(&hrtc, &dateStruct, RTC_FORMAT_BIN);
 8002000:	f107 0318 	add.w	r3, r7, #24
 8002004:	2200      	movs	r2, #0
 8002006:	4619      	mov	r1, r3
 8002008:	4820      	ldr	r0, [pc, #128]	; (800208c <handshake+0x118>)
 800200a:	f00b fb3d 	bl	800d688 <HAL_RTC_SetDate>
 800200e:	4603      	mov	r3, r0
 8002010:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002014:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <handshake+0xac>
		Error_Handler();
 800201c:	f000 fd9e 	bl	8002b5c <Error_Handler>
	}

	status = HAL_RTC_SetTime(&hrtc, &timeStruct, RTC_FORMAT_BIN);
 8002020:	1d3b      	adds	r3, r7, #4
 8002022:	2200      	movs	r2, #0
 8002024:	4619      	mov	r1, r3
 8002026:	4819      	ldr	r0, [pc, #100]	; (800208c <handshake+0x118>)
 8002028:	f00b fa34 	bl	800d494 <HAL_RTC_SetTime>
 800202c:	4603      	mov	r3, r0
 800202e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	if (status != HAL_OK) {
 8002032:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002036:	2b00      	cmp	r3, #0
 8002038:	d001      	beq.n	800203e <handshake+0xca>
		Error_Handler();
 800203a:	f000 fd8f 	bl	8002b5c <Error_Handler>
	}

	tx_buffer[0] = 0xFA;
 800203e:	23fa      	movs	r3, #250	; 0xfa
 8002040:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
	tx_buffer[1] = 2;
 8002044:	2302      	movs	r3, #2
 8002046:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	tx_buffer[2] = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	tx_buffer[3] = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	tx_buffer[4] = 1;
 8002056:	2301      	movs	r3, #1
 8002058:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c

	for (int i = 0; i < allowed_tries; i++) {
 800205c:	2300      	movs	r3, #0
 800205e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002060:	e009      	b.n	8002076 <handshake+0x102>
		HAL_UART_Transmit(&huart1, tx_buffer, 5 * sizeof(uint8_t), 100);
 8002062:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8002066:	2364      	movs	r3, #100	; 0x64
 8002068:	2205      	movs	r2, #5
 800206a:	4807      	ldr	r0, [pc, #28]	; (8002088 <handshake+0x114>)
 800206c:	f00d fd5c 	bl	800fb28 <HAL_UART_Transmit>
	for (int i = 0; i < allowed_tries; i++) {
 8002070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002072:	3301      	adds	r3, #1
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002076:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800207a:	429a      	cmp	r2, r3
 800207c:	dbf1      	blt.n	8002062 <handshake+0xee>
	}

	return 1;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3740      	adds	r7, #64	; 0x40
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	240005ec 	.word	0x240005ec
 800208c:	240003d4 	.word	0x240003d4

08002090 <system_setup>:
 *
 * This function initializes various system components including timers, ADC calibration, and DMA for ADC data acquisition.
 * It starts PWM for TIM2, performs ADC calibration for ADC1 and ADC3, and starts DMA for ADC data acquisition.
 * Any errors encountered during these initialization steps are handled by the Error_Handler function.
 */
void system_setup() {
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
	TIM2->CCR4 = 312;
 8002094:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002098:	f44f 729c 	mov.w	r2, #312	; 0x138
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
	if (HAL_ADCEx_Calibration_Start(&hadc1, ADC_CALIB_OFFSET_LINEARITY,
 800209e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020a2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020a6:	4815      	ldr	r0, [pc, #84]	; (80020fc <system_setup+0x6c>)
 80020a8:	f002 ffc0 	bl	800502c <HAL_ADCEx_Calibration_Start>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <system_setup+0x26>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80020b2:	f000 fd53 	bl	8002b5c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc1, (uint32_t*) ADC1_raw_data,
 80020b6:	220b      	movs	r2, #11
 80020b8:	4911      	ldr	r1, [pc, #68]	; (8002100 <system_setup+0x70>)
 80020ba:	4810      	ldr	r0, [pc, #64]	; (80020fc <system_setup+0x6c>)
 80020bc:	f002 f894 	bl	80041e8 <HAL_ADC_Start_DMA>
 80020c0:	4603      	mov	r3, r0
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d001      	beq.n	80020ca <system_setup+0x3a>
	ADC1_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020c6:	f000 fd49 	bl	8002b5c <Error_Handler>
	}

	if (HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET_LINEARITY,
 80020ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80020ce:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80020d2:	480c      	ldr	r0, [pc, #48]	; (8002104 <system_setup+0x74>)
 80020d4:	f002 ffaa 	bl	800502c <HAL_ADCEx_Calibration_Start>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <system_setup+0x52>
	ADC_SINGLE_ENDED) != HAL_OK) {
		Error_Handler();
 80020de:	f000 fd3d 	bl	8002b5c <Error_Handler>
	}

	if (HAL_ADC_Start_DMA(&hadc3, (uint32_t*) ADC3_raw_data,
 80020e2:	2204      	movs	r2, #4
 80020e4:	4908      	ldr	r1, [pc, #32]	; (8002108 <system_setup+0x78>)
 80020e6:	4807      	ldr	r0, [pc, #28]	; (8002104 <system_setup+0x74>)
 80020e8:	f002 f87e 	bl	80041e8 <HAL_ADC_Start_DMA>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <system_setup+0x66>
	ADC3_NUM_CHANNELS) != HAL_OK) {
		Error_Handler();
 80020f2:	f000 fd33 	bl	8002b5c <Error_Handler>
	}
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	2400013c 	.word	0x2400013c
 8002100:	24000c40 	.word	0x24000c40
 8002104:	240001a0 	.word	0x240001a0
 8002108:	24000c60 	.word	0x24000c60

0800210c <getTimestamp>:

/**
 * @brief Gets the current timestamp and stores it in the provided buffer.
 * @param buffer: Pointer to the buffer where the timestamp will be stored.
 */
void getTimestamp(uint8_t *buffer) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b08a      	sub	sp, #40	; 0x28
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
	RTC_TimeTypeDef currentTime;
	RTC_DateTypeDef currentDate;

	HAL_RTC_GetTime(&hrtc, &currentTime, RTC_FORMAT_BIN);
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	2200      	movs	r2, #0
 800211a:	4619      	mov	r1, r3
 800211c:	4821      	ldr	r0, [pc, #132]	; (80021a4 <getTimestamp+0x98>)
 800211e:	f00b fa57 	bl	800d5d0 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &currentDate, RTC_FORMAT_BIN);
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2200      	movs	r2, #0
 8002128:	4619      	mov	r1, r3
 800212a:	481e      	ldr	r0, [pc, #120]	; (80021a4 <getTimestamp+0x98>)
 800212c:	f00b fb34 	bl	800d798 <HAL_RTC_GetDate>

	uint32_t milliseconds = 1000000 - (currentTime.SubSeconds * 100);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2264      	movs	r2, #100	; 0x64
 8002134:	fb03 f202 	mul.w	r2, r3, r2
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <getTimestamp+0x9c>)
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	627b      	str	r3, [r7, #36]	; 0x24

	buffer[0] = currentDate.Year;				// 0-99
 800213e:	7bfa      	ldrb	r2, [r7, #15]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	701a      	strb	r2, [r3, #0]
	buffer[1] = currentDate.Month;				// 1-12
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	3301      	adds	r3, #1
 8002148:	7b7a      	ldrb	r2, [r7, #13]
 800214a:	701a      	strb	r2, [r3, #0]
	buffer[2] = currentDate.Date;				// 1-31
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3302      	adds	r3, #2
 8002150:	7bba      	ldrb	r2, [r7, #14]
 8002152:	701a      	strb	r2, [r3, #0]
	buffer[3] = currentTime.Hours;				// 0-23
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3303      	adds	r3, #3
 8002158:	7c3a      	ldrb	r2, [r7, #16]
 800215a:	701a      	strb	r2, [r3, #0]
	buffer[4] = currentTime.Minutes;			// 0-59
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3304      	adds	r3, #4
 8002160:	7c7a      	ldrb	r2, [r7, #17]
 8002162:	701a      	strb	r2, [r3, #0]
	buffer[5] = currentTime.Seconds;			// 0-59
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3305      	adds	r3, #5
 8002168:	7cba      	ldrb	r2, [r7, #18]
 800216a:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((milliseconds >> 24) & 0xFF);
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	0e1a      	lsrs	r2, r3, #24
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	3306      	adds	r3, #6
 8002174:	b2d2      	uxtb	r2, r2
 8002176:	701a      	strb	r2, [r3, #0]
	buffer[7] = ((milliseconds >> 16) & 0xFF);
 8002178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217a:	0c1a      	lsrs	r2, r3, #16
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	3307      	adds	r3, #7
 8002180:	b2d2      	uxtb	r2, r2
 8002182:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((milliseconds >> 8) & 0xFF);
 8002184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002186:	0a1a      	lsrs	r2, r3, #8
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3308      	adds	r3, #8
 800218c:	b2d2      	uxtb	r2, r2
 800218e:	701a      	strb	r2, [r3, #0]
	buffer[9] = milliseconds & 0xFF;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3309      	adds	r3, #9
 8002194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	701a      	strb	r2, [r3, #0]
}
 800219a:	bf00      	nop
 800219c:	3728      	adds	r7, #40	; 0x28
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	240003d4 	.word	0x240003d4
 80021a8:	000f4240 	.word	0x000f4240

080021ac <sample_pmt>:
 * simulated data is used. Otherwise, SPI communication is used to receive actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_pmt() {
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8)) {
 80021b2:	bf00      	nop
 80021b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021b8:	4845      	ldr	r0, [pc, #276]	; (80022d0 <sample_pmt+0x124>)
 80021ba:	f006 fd4b 	bl	8008c54 <HAL_GPIO_ReadPin>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d1f7      	bne.n	80021b4 <sample_pmt+0x8>
	}
	uint8_t *buffer = (uint8_t*) malloc(PMT_DATA_SIZE * sizeof(uint8_t));
 80021c4:	2010      	movs	r0, #16
 80021c6:	f013 ff63 	bl	8016090 <malloc>
 80021ca:	4603      	mov	r3, r0
 80021cc:	617b      	str	r3, [r7, #20]
	uint8_t *pmt_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 80021ce:	2002      	movs	r0, #2
 80021d0:	f013 ff5e 	bl	8016090 <malloc>
 80021d4:	4603      	mov	r3, r0
 80021d6:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 80021d8:	200a      	movs	r0, #10
 80021da:	f013 ff59 	bl	8016090 <malloc>
 80021de:	4603      	mov	r3, r0
 80021e0:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f7ff ff92 	bl	800210c <getTimestamp>

#ifdef SIMULATE
	pmt_spi[0] = 0xE;
	pmt_spi[1] = 0xD;
#else
	receive_pmt_spi(pmt_spi);
 80021e8:	6938      	ldr	r0, [r7, #16]
 80021ea:	f7ff fd8d 	bl	8001d08 <receive_pmt_spi>
#endif

	buffer[0] = PMT_SYNC;
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	22bb      	movs	r2, #187	; 0xbb
 80021f2:	701a      	strb	r2, [r3, #0]
	buffer[1] = PMT_SYNC;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	3301      	adds	r3, #1
 80021f8:	22bb      	movs	r2, #187	; 0xbb
 80021fa:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((pmt_seq & 0xFF00) >> 8);
 80021fc:	4b35      	ldr	r3, [pc, #212]	; (80022d4 <sample_pmt+0x128>)
 80021fe:	881b      	ldrh	r3, [r3, #0]
 8002200:	0a1b      	lsrs	r3, r3, #8
 8002202:	b29a      	uxth	r2, r3
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	3302      	adds	r3, #2
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	701a      	strb	r2, [r3, #0]
	buffer[3] = (pmt_seq & 0xFF);
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <sample_pmt+0x128>)
 800220e:	881a      	ldrh	r2, [r3, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	3303      	adds	r3, #3
 8002214:	b2d2      	uxtb	r2, r2
 8002216:	701a      	strb	r2, [r3, #0]
	buffer[4] = pmt_spi[0];
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3304      	adds	r3, #4
 800221c:	693a      	ldr	r2, [r7, #16]
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	701a      	strb	r2, [r3, #0]
	buffer[5] = pmt_spi[1];
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3305      	adds	r3, #5
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	7852      	ldrb	r2, [r2, #1]
 800222a:	701a      	strb	r2, [r3, #0]
	buffer[6] = timestamp[0];
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	3306      	adds	r3, #6
 8002230:	68fa      	ldr	r2, [r7, #12]
 8002232:	7812      	ldrb	r2, [r2, #0]
 8002234:	701a      	strb	r2, [r3, #0]
	buffer[7] = timestamp[1];
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3307      	adds	r3, #7
 800223a:	68fa      	ldr	r2, [r7, #12]
 800223c:	7852      	ldrb	r2, [r2, #1]
 800223e:	701a      	strb	r2, [r3, #0]
	buffer[8] = timestamp[2];
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	3308      	adds	r3, #8
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	7892      	ldrb	r2, [r2, #2]
 8002248:	701a      	strb	r2, [r3, #0]
	buffer[9] = timestamp[3];
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	3309      	adds	r3, #9
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	78d2      	ldrb	r2, [r2, #3]
 8002252:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[4];
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	330a      	adds	r3, #10
 8002258:	68fa      	ldr	r2, [r7, #12]
 800225a:	7912      	ldrb	r2, [r2, #4]
 800225c:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[5];
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	330b      	adds	r3, #11
 8002262:	68fa      	ldr	r2, [r7, #12]
 8002264:	7952      	ldrb	r2, [r2, #5]
 8002266:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[6];
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	330c      	adds	r3, #12
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	7992      	ldrb	r2, [r2, #6]
 8002270:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[7];
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	330d      	adds	r3, #13
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	79d2      	ldrb	r2, [r2, #7]
 800227a:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[8];
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	330e      	adds	r3, #14
 8002280:	68fa      	ldr	r2, [r7, #12]
 8002282:	7a12      	ldrb	r2, [r2, #8]
 8002284:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[9];
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	330f      	adds	r3, #15
 800228a:	68fa      	ldr	r2, [r7, #12]
 800228c:	7a52      	ldrb	r2, [r2, #9]
 800228e:	701a      	strb	r2, [r3, #0]

	packet_t pmt_packet = create_packet(buffer, PMT_DATA_SIZE);
 8002290:	1d3b      	adds	r3, r7, #4
 8002292:	2210      	movs	r2, #16
 8002294:	6979      	ldr	r1, [r7, #20]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff fe4a 	bl	8001f30 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &pmt_packet, 0U, 0U);
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <sample_pmt+0x12c>)
 800229e:	6818      	ldr	r0, [r3, #0]
 80022a0:	1d39      	adds	r1, r7, #4
 80022a2:	2300      	movs	r3, #0
 80022a4:	2200      	movs	r2, #0
 80022a6:	f010 fd19 	bl	8012cdc <osMessageQueuePut>
	available_msgs++;
 80022aa:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <sample_pmt+0x130>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	3301      	adds	r3, #1
 80022b0:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <sample_pmt+0x130>)
 80022b2:	6013      	str	r3, [r2, #0]
	free(buffer);
 80022b4:	6978      	ldr	r0, [r7, #20]
 80022b6:	f013 fef3 	bl	80160a0 <free>
	free(pmt_spi);
 80022ba:	6938      	ldr	r0, [r7, #16]
 80022bc:	f013 fef0 	bl	80160a0 <free>
	free(timestamp);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f013 feed 	bl	80160a0 <free>
}
 80022c6:	bf00      	nop
 80022c8:	3718      	adds	r7, #24
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	58020000 	.word	0x58020000
 80022d4:	24000bdc 	.word	0x24000bdc
 80022d8:	24000bcc 	.word	0x24000bcc
 80022dc:	24000bd8 	.word	0x24000bd8

080022e0 <sample_erpa>:
 * simulated data is used. Otherwise, SPI communication and ADC readings are used to obtain actual data.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_erpa() {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
	while (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_11)) {
 80022e6:	bf00      	nop
 80022e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022ec:	4859      	ldr	r0, [pc, #356]	; (8002454 <sample_erpa+0x174>)
 80022ee:	f006 fcb1 	bl	8008c54 <HAL_GPIO_ReadPin>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f7      	bne.n	80022e8 <sample_erpa+0x8>
	}

	uint8_t *buffer = (uint8_t*) malloc(ERPA_DATA_SIZE * sizeof(uint8_t)); // Allocate memory for the buffer
 80022f8:	2014      	movs	r0, #20
 80022fa:	f013 fec9 	bl	8016090 <malloc>
 80022fe:	4603      	mov	r3, r0
 8002300:	617b      	str	r3, [r7, #20]

	uint8_t *erpa_spi = (uint8_t*) malloc(2 * sizeof(uint8_t));
 8002302:	2002      	movs	r0, #2
 8002304:	f013 fec4 	bl	8016090 <malloc>
 8002308:	4603      	mov	r3, r0
 800230a:	613b      	str	r3, [r7, #16]
	uint16_t *erpa_adc = (uint16_t*) malloc(2 * sizeof(uint16_t));
 800230c:	2004      	movs	r0, #4
 800230e:	f013 febf 	bl	8016090 <malloc>
 8002312:	4603      	mov	r3, r0
 8002314:	60fb      	str	r3, [r7, #12]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 8002316:	200a      	movs	r0, #10
 8002318:	f013 feba 	bl	8016090 <malloc>
 800231c:	4603      	mov	r3, r0
 800231e:	60bb      	str	r3, [r7, #8]
	getTimestamp(timestamp);
 8002320:	68b8      	ldr	r0, [r7, #8]
 8002322:	f7ff fef3 	bl	800210c <getTimestamp>
	erpa_spi[1] = 0xD;

	erpa_adc[0] = 0xEE;
	erpa_adc[1] = 0xDD;
#else
	receive_erpa_spi(erpa_spi);
 8002326:	6938      	ldr	r0, [r7, #16]
 8002328:	f7ff fd12 	bl	8001d50 <receive_erpa_spi>
	receive_erpa_adc(erpa_adc);
 800232c:	68f8      	ldr	r0, [r7, #12]
 800232e:	f7ff fd33 	bl	8001d98 <receive_erpa_adc>
#endif

	buffer[0] = ERPA_SYNC;
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	22aa      	movs	r2, #170	; 0xaa
 8002336:	701a      	strb	r2, [r3, #0]
	buffer[1] = ERPA_SYNC;
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	3301      	adds	r3, #1
 800233c:	22aa      	movs	r2, #170	; 0xaa
 800233e:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((erpa_seq & 0xFF00) >> 8);
 8002340:	4b45      	ldr	r3, [pc, #276]	; (8002458 <sample_erpa+0x178>)
 8002342:	881b      	ldrh	r3, [r3, #0]
 8002344:	0a1b      	lsrs	r3, r3, #8
 8002346:	b29a      	uxth	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	3302      	adds	r3, #2
 800234c:	b2d2      	uxtb	r2, r2
 800234e:	701a      	strb	r2, [r3, #0]
	buffer[3] = (erpa_seq & 0xFF);
 8002350:	4b41      	ldr	r3, [pc, #260]	; (8002458 <sample_erpa+0x178>)
 8002352:	881a      	ldrh	r2, [r3, #0]
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	3303      	adds	r3, #3
 8002358:	b2d2      	uxtb	r2, r2
 800235a:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((erpa_adc[0] & 0xFF00) >> 8);	// SWP Monitored MSB
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	0a1b      	lsrs	r3, r3, #8
 8002362:	b29a      	uxth	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	3304      	adds	r3, #4
 8002368:	b2d2      	uxtb	r2, r2
 800236a:	701a      	strb	r2, [r3, #0]
	buffer[5] = (erpa_adc[0] & 0xFF);           // SWP Monitored LSB
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	881a      	ldrh	r2, [r3, #0]
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	3305      	adds	r3, #5
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((erpa_adc[1] & 0xFF00) >> 8);  // TEMPURATURE 1 MSB
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	3302      	adds	r3, #2
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	0a1b      	lsrs	r3, r3, #8
 8002380:	b29a      	uxth	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	3306      	adds	r3, #6
 8002386:	b2d2      	uxtb	r2, r2
 8002388:	701a      	strb	r2, [r3, #0]
	buffer[7] = (erpa_adc[1] & 0xFF);           // TEMPURATURE 1 LSB
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	3302      	adds	r3, #2
 800238e:	881a      	ldrh	r2, [r3, #0]
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	3307      	adds	r3, #7
 8002394:	b2d2      	uxtb	r2, r2
 8002396:	701a      	strb	r2, [r3, #0]
	buffer[8] = erpa_spi[0];					// ERPA eADC MSB
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	3308      	adds	r3, #8
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	7812      	ldrb	r2, [r2, #0]
 80023a0:	701a      	strb	r2, [r3, #0]
	buffer[9] = erpa_spi[1];					// ERPA eADC LSB
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	3309      	adds	r3, #9
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	7852      	ldrb	r2, [r2, #1]
 80023aa:	701a      	strb	r2, [r3, #0]
	buffer[10] = timestamp[0];
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	330a      	adds	r3, #10
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	7812      	ldrb	r2, [r2, #0]
 80023b4:	701a      	strb	r2, [r3, #0]
	buffer[11] = timestamp[1];
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	330b      	adds	r3, #11
 80023ba:	68ba      	ldr	r2, [r7, #8]
 80023bc:	7852      	ldrb	r2, [r2, #1]
 80023be:	701a      	strb	r2, [r3, #0]
	buffer[12] = timestamp[2];
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	330c      	adds	r3, #12
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	7892      	ldrb	r2, [r2, #2]
 80023c8:	701a      	strb	r2, [r3, #0]
	buffer[13] = timestamp[3];
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	330d      	adds	r3, #13
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	78d2      	ldrb	r2, [r2, #3]
 80023d2:	701a      	strb	r2, [r3, #0]
	buffer[14] = timestamp[4];
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	330e      	adds	r3, #14
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	7912      	ldrb	r2, [r2, #4]
 80023dc:	701a      	strb	r2, [r3, #0]
	buffer[15] = timestamp[5];
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	330f      	adds	r3, #15
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	7952      	ldrb	r2, [r2, #5]
 80023e6:	701a      	strb	r2, [r3, #0]
	buffer[16] = timestamp[6];
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	3310      	adds	r3, #16
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	7992      	ldrb	r2, [r2, #6]
 80023f0:	701a      	strb	r2, [r3, #0]
	buffer[17] = timestamp[7];
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	3311      	adds	r3, #17
 80023f6:	68ba      	ldr	r2, [r7, #8]
 80023f8:	79d2      	ldrb	r2, [r2, #7]
 80023fa:	701a      	strb	r2, [r3, #0]
	buffer[18] = timestamp[8];
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3312      	adds	r3, #18
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	7a12      	ldrb	r2, [r2, #8]
 8002404:	701a      	strb	r2, [r3, #0]
	buffer[19] = timestamp[9];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3313      	adds	r3, #19
 800240a:	68ba      	ldr	r2, [r7, #8]
 800240c:	7a52      	ldrb	r2, [r2, #9]
 800240e:	701a      	strb	r2, [r3, #0]

	packet_t erpa_packet = create_packet(buffer, ERPA_DATA_SIZE);
 8002410:	463b      	mov	r3, r7
 8002412:	2214      	movs	r2, #20
 8002414:	6979      	ldr	r1, [r7, #20]
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fd8a 	bl	8001f30 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &erpa_packet, 0U, 0U);
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <sample_erpa+0x17c>)
 800241e:	6818      	ldr	r0, [r3, #0]
 8002420:	4639      	mov	r1, r7
 8002422:	2300      	movs	r3, #0
 8002424:	2200      	movs	r2, #0
 8002426:	f010 fc59 	bl	8012cdc <osMessageQueuePut>
	available_msgs++;
 800242a:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <sample_erpa+0x180>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	3301      	adds	r3, #1
 8002430:	4a0b      	ldr	r2, [pc, #44]	; (8002460 <sample_erpa+0x180>)
 8002432:	6013      	str	r3, [r2, #0]
	free(buffer);
 8002434:	6978      	ldr	r0, [r7, #20]
 8002436:	f013 fe33 	bl	80160a0 <free>
	free(erpa_spi);
 800243a:	6938      	ldr	r0, [r7, #16]
 800243c:	f013 fe30 	bl	80160a0 <free>
	free(erpa_adc);
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f013 fe2d 	bl	80160a0 <free>
	free(timestamp);
 8002446:	68b8      	ldr	r0, [r7, #8]
 8002448:	f013 fe2a 	bl	80160a0 <free>
}
 800244c:	bf00      	nop
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	58020400 	.word	0x58020400
 8002458:	24000bde 	.word	0x24000bde
 800245c:	24000bcc 	.word	0x24000bcc
 8002460:	24000bd8 	.word	0x24000bd8

08002464 <sample_hk>:
 * simulated data is used. Otherwise, actual data is obtained through I2C communication and ADC readings.
 * The sampled data is stored in the provided buffer.
 *
 * @param buffer Pointer to the buffer where sampled data will be stored.
 */
void sample_hk() {
 8002464:	b580      	push	{r7, lr}
 8002466:	b088      	sub	sp, #32
 8002468:	af00      	add	r7, sp, #0
	uint8_t *buffer = (uint8_t*) malloc(HK_DATA_SIZE * sizeof(uint8_t));
 800246a:	2030      	movs	r0, #48	; 0x30
 800246c:	f013 fe10 	bl	8016090 <malloc>
 8002470:	4603      	mov	r3, r0
 8002472:	61fb      	str	r3, [r7, #28]

	static uint16_t last_i2c_reading[4];
	int16_t *hk_i2c = (int16_t*) malloc(4 * sizeof(int16_t));
 8002474:	2008      	movs	r0, #8
 8002476:	f013 fe0b 	bl	8016090 <malloc>
 800247a:	4603      	mov	r3, r0
 800247c:	61bb      	str	r3, [r7, #24]
	uint16_t *hk_adc1 = (uint16_t*) malloc(9 * sizeof(uint16_t));
 800247e:	2012      	movs	r0, #18
 8002480:	f013 fe06 	bl	8016090 <malloc>
 8002484:	4603      	mov	r3, r0
 8002486:	617b      	str	r3, [r7, #20]
	uint16_t *hk_adc3 = (uint16_t*) malloc(4 * sizeof(uint16_t));
 8002488:	2008      	movs	r0, #8
 800248a:	f013 fe01 	bl	8016090 <malloc>
 800248e:	4603      	mov	r3, r0
 8002490:	613b      	str	r3, [r7, #16]
	uint8_t *timestamp = (uint8_t*) malloc(10 * sizeof(uint8_t));
 8002492:	200a      	movs	r0, #10
 8002494:	f013 fdfc 	bl	8016090 <malloc>
 8002498:	4603      	mov	r3, r0
 800249a:	60fb      	str	r3, [r7, #12]
	getTimestamp(timestamp);
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff fe35 	bl	800210c <getTimestamp>
	hk_adc3[0] = 0xB0;
	hk_adc3[1] = 0xB1;
	hk_adc3[2] = 0xB2;
	hk_adc3[3] = 0xB3;
#else
	if (TEMPERATURE_COUNTER > 999) {
 80024a2:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <sample_hk+0x8c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80024aa:	db25      	blt.n	80024f8 <sample_hk+0x94>
		receive_hk_i2c(hk_i2c);
 80024ac:	69b8      	ldr	r0, [r7, #24]
 80024ae:	f7ff fc8d 	bl	8001dcc <receive_hk_i2c>
		last_i2c_reading[0] = hk_i2c[0];
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <sample_hk+0x90>)
 80024bc:	801a      	strh	r2, [r3, #0]
		last_i2c_reading[1] = hk_i2c[1];
 80024be:	69bb      	ldr	r3, [r7, #24]
 80024c0:	3302      	adds	r3, #2
 80024c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <sample_hk+0x90>)
 80024ca:	805a      	strh	r2, [r3, #2]
		last_i2c_reading[2] = hk_i2c[2];
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	3304      	adds	r3, #4
 80024d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024d4:	b29a      	uxth	r2, r3
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <sample_hk+0x90>)
 80024d8:	809a      	strh	r2, [r3, #4]
		last_i2c_reading[3] = hk_i2c[3];
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	3306      	adds	r3, #6
 80024de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	4b03      	ldr	r3, [pc, #12]	; (80024f4 <sample_hk+0x90>)
 80024e6:	80da      	strh	r2, [r3, #6]
		TEMPERATURE_COUNTER = 0;
 80024e8:	4b01      	ldr	r3, [pc, #4]	; (80024f0 <sample_hk+0x8c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
 80024ee:	e01f      	b.n	8002530 <sample_hk+0xcc>
 80024f0:	24000004 	.word	0x24000004
 80024f4:	24000c68 	.word	0x24000c68
	} else {
		TEMPERATURE_COUNTER++;
 80024f8:	4ba4      	ldr	r3, [pc, #656]	; (800278c <sample_hk+0x328>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	3301      	adds	r3, #1
 80024fe:	4aa3      	ldr	r2, [pc, #652]	; (800278c <sample_hk+0x328>)
 8002500:	6013      	str	r3, [r2, #0]
		hk_i2c[0] = last_i2c_reading[0];
 8002502:	4ba3      	ldr	r3, [pc, #652]	; (8002790 <sample_hk+0x32c>)
 8002504:	881b      	ldrh	r3, [r3, #0]
 8002506:	b21a      	sxth	r2, r3
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	801a      	strh	r2, [r3, #0]
		hk_i2c[1] = last_i2c_reading[1];
 800250c:	4ba0      	ldr	r3, [pc, #640]	; (8002790 <sample_hk+0x32c>)
 800250e:	885a      	ldrh	r2, [r3, #2]
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	3302      	adds	r3, #2
 8002514:	b212      	sxth	r2, r2
 8002516:	801a      	strh	r2, [r3, #0]
		hk_i2c[2] = last_i2c_reading[2];
 8002518:	4b9d      	ldr	r3, [pc, #628]	; (8002790 <sample_hk+0x32c>)
 800251a:	889a      	ldrh	r2, [r3, #4]
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	3304      	adds	r3, #4
 8002520:	b212      	sxth	r2, r2
 8002522:	801a      	strh	r2, [r3, #0]
		hk_i2c[3] = last_i2c_reading[3];
 8002524:	4b9a      	ldr	r3, [pc, #616]	; (8002790 <sample_hk+0x32c>)
 8002526:	88da      	ldrh	r2, [r3, #6]
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	3306      	adds	r3, #6
 800252c:	b212      	sxth	r2, r2
 800252e:	801a      	strh	r2, [r3, #0]
	}
	receive_hk_adc1(hk_adc1);
 8002530:	6978      	ldr	r0, [r7, #20]
 8002532:	f7ff fc7b 	bl	8001e2c <receive_hk_adc1>
	receive_hk_adc3(hk_adc3);
 8002536:	6938      	ldr	r0, [r7, #16]
 8002538:	f7ff fcc2 	bl	8001ec0 <receive_hk_adc3>
#endif

	buffer[0] = HK_SYNC;                     	// HK SYNC 0xCC MSB
 800253c:	69fb      	ldr	r3, [r7, #28]
 800253e:	22cc      	movs	r2, #204	; 0xcc
 8002540:	701a      	strb	r2, [r3, #0]
	buffer[1] = HK_SYNC;                     	// HK SYNC 0xCC LSB
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	3301      	adds	r3, #1
 8002546:	22cc      	movs	r2, #204	; 0xcc
 8002548:	701a      	strb	r2, [r3, #0]
	buffer[2] = ((hk_seq & 0xFF00) >> 8);    	// HK SEQ # MSB
 800254a:	4b92      	ldr	r3, [pc, #584]	; (8002794 <sample_hk+0x330>)
 800254c:	881b      	ldrh	r3, [r3, #0]
 800254e:	0a1b      	lsrs	r3, r3, #8
 8002550:	b29a      	uxth	r2, r3
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3302      	adds	r3, #2
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]
	buffer[3] = (hk_seq & 0xFF);             	// HK SEQ # LSB
 800255a:	4b8e      	ldr	r3, [pc, #568]	; (8002794 <sample_hk+0x330>)
 800255c:	881a      	ldrh	r2, [r3, #0]
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	3303      	adds	r3, #3
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
	buffer[4] = ((hk_adc3[1] & 0xFF00) >> 8);	// HK vsense MSB
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	3302      	adds	r3, #2
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	b29a      	uxth	r2, r3
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	3304      	adds	r3, #4
 8002574:	b2d2      	uxtb	r2, r2
 8002576:	701a      	strb	r2, [r3, #0]
	buffer[5] = (hk_adc3[1] & 0xFF);			// HK vsense LSB
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	3302      	adds	r3, #2
 800257c:	881a      	ldrh	r2, [r3, #0]
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	3305      	adds	r3, #5
 8002582:	b2d2      	uxtb	r2, r2
 8002584:	701a      	strb	r2, [r3, #0]
	buffer[6] = ((hk_adc3[0] & 0xFF00) >> 8);	// HK vrefint MSB
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	881b      	ldrh	r3, [r3, #0]
 800258a:	0a1b      	lsrs	r3, r3, #8
 800258c:	b29a      	uxth	r2, r3
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3306      	adds	r3, #6
 8002592:	b2d2      	uxtb	r2, r2
 8002594:	701a      	strb	r2, [r3, #0]
	buffer[7] = (hk_adc3[0] & 0xFF);			// HK vrefint LSB
 8002596:	693b      	ldr	r3, [r7, #16]
 8002598:	881a      	ldrh	r2, [r3, #0]
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3307      	adds	r3, #7
 800259e:	b2d2      	uxtb	r2, r2
 80025a0:	701a      	strb	r2, [r3, #0]
	buffer[8] = ((hk_i2c[0] & 0xFF00) >> 8);	// HK TEMP1 MSB
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025a8:	121a      	asrs	r2, r3, #8
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	3308      	adds	r3, #8
 80025ae:	b2d2      	uxtb	r2, r2
 80025b0:	701a      	strb	r2, [r3, #0]
	buffer[9] = (hk_i2c[0] & 0xFF);				// HK TEMP1 LSB
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	3309      	adds	r3, #9
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	701a      	strb	r2, [r3, #0]
	buffer[10] = ((hk_i2c[1] & 0xFF00) >> 8);	// HK TEMP2 MSB
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	3302      	adds	r3, #2
 80025c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025c8:	121a      	asrs	r2, r3, #8
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	330a      	adds	r3, #10
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	701a      	strb	r2, [r3, #0]
	buffer[11] = (hk_i2c[1] & 0xFF);			// HK TEMP2 LSB
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	3302      	adds	r3, #2
 80025d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	330b      	adds	r3, #11
 80025de:	b2d2      	uxtb	r2, r2
 80025e0:	701a      	strb	r2, [r3, #0]
	buffer[12] = ((hk_i2c[2] & 0xFF00) >> 8);	// HK TEMP3 MSB
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	3304      	adds	r3, #4
 80025e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025ea:	121a      	asrs	r2, r3, #8
 80025ec:	69fb      	ldr	r3, [r7, #28]
 80025ee:	330c      	adds	r3, #12
 80025f0:	b2d2      	uxtb	r2, r2
 80025f2:	701a      	strb	r2, [r3, #0]
	buffer[13] = (hk_i2c[2] & 0xFF);			// HK TEMP3 LSB
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	3304      	adds	r3, #4
 80025f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	330d      	adds	r3, #13
 8002600:	b2d2      	uxtb	r2, r2
 8002602:	701a      	strb	r2, [r3, #0]
	buffer[14] = ((hk_i2c[3] & 0xFF00) >> 8);	// HK TEMP4 MSB
 8002604:	69bb      	ldr	r3, [r7, #24]
 8002606:	3306      	adds	r3, #6
 8002608:	f9b3 3000 	ldrsh.w	r3, [r3]
 800260c:	121a      	asrs	r2, r3, #8
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	330e      	adds	r3, #14
 8002612:	b2d2      	uxtb	r2, r2
 8002614:	701a      	strb	r2, [r3, #0]
	buffer[15] = (hk_i2c[3] & 0xFF);			// HK TEMP4 LSB
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	3306      	adds	r3, #6
 800261a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	330f      	adds	r3, #15
 8002622:	b2d2      	uxtb	r2, r2
 8002624:	701a      	strb	r2, [r3, #0]
	buffer[16] = ((hk_adc1[0] & 0xFF00) >> 8);	// HK BUSvmon MSB
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	881b      	ldrh	r3, [r3, #0]
 800262a:	0a1b      	lsrs	r3, r3, #8
 800262c:	b29a      	uxth	r2, r3
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3310      	adds	r3, #16
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	701a      	strb	r2, [r3, #0]
	buffer[17] = (hk_adc1[0] & 0xFF);			// HK BUSvmon LSB
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	881a      	ldrh	r2, [r3, #0]
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	3311      	adds	r3, #17
 800263e:	b2d2      	uxtb	r2, r2
 8002640:	701a      	strb	r2, [r3, #0]
	buffer[18] = ((hk_adc1[1] & 0xFF00) >> 8);	// HK BUSimon MSB
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	3302      	adds	r3, #2
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	0a1b      	lsrs	r3, r3, #8
 800264a:	b29a      	uxth	r2, r3
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	3312      	adds	r3, #18
 8002650:	b2d2      	uxtb	r2, r2
 8002652:	701a      	strb	r2, [r3, #0]
	buffer[19] = (hk_adc1[1] & 0xFF);			// HK BUSimon LSB
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	3302      	adds	r3, #2
 8002658:	881a      	ldrh	r2, [r3, #0]
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3313      	adds	r3, #19
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	701a      	strb	r2, [r3, #0]
	buffer[20] = ((hk_adc1[2] & 0xFF00) >> 8);	// HK 2v5mon MSB
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	3304      	adds	r3, #4
 8002666:	881b      	ldrh	r3, [r3, #0]
 8002668:	0a1b      	lsrs	r3, r3, #8
 800266a:	b29a      	uxth	r2, r3
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	3314      	adds	r3, #20
 8002670:	b2d2      	uxtb	r2, r2
 8002672:	701a      	strb	r2, [r3, #0]
	buffer[21] = (hk_adc1[2] & 0xFF);			// HK 2v5mon LSB
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	3304      	adds	r3, #4
 8002678:	881a      	ldrh	r2, [r3, #0]
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	3315      	adds	r3, #21
 800267e:	b2d2      	uxtb	r2, r2
 8002680:	701a      	strb	r2, [r3, #0]
	buffer[22] = ((hk_adc3[3] & 0xFF00) >> 8);	// HK 3v3mon MSB
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	3306      	adds	r3, #6
 8002686:	881b      	ldrh	r3, [r3, #0]
 8002688:	0a1b      	lsrs	r3, r3, #8
 800268a:	b29a      	uxth	r2, r3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	3316      	adds	r3, #22
 8002690:	b2d2      	uxtb	r2, r2
 8002692:	701a      	strb	r2, [r3, #0]
	buffer[23] = (hk_adc3[3] & 0xFF);			// HK 3v3mon LSB
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	3306      	adds	r3, #6
 8002698:	881a      	ldrh	r2, [r3, #0]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	3317      	adds	r3, #23
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	701a      	strb	r2, [r3, #0]
	buffer[24] = ((hk_adc1[6] & 0xFF00) >> 8);	// HK 5vmon MSB
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	330c      	adds	r3, #12
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	0a1b      	lsrs	r3, r3, #8
 80026aa:	b29a      	uxth	r2, r3
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	3318      	adds	r3, #24
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]
	buffer[25] = (hk_adc1[6] & 0xFF);			// HK 5vmon LSB
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	330c      	adds	r3, #12
 80026b8:	881a      	ldrh	r2, [r3, #0]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	3319      	adds	r3, #25
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	701a      	strb	r2, [r3, #0]
	buffer[26] = ((hk_adc1[3] & 0xFF00) >> 8);	// HK n3v3mon MSB
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3306      	adds	r3, #6
 80026c6:	881b      	ldrh	r3, [r3, #0]
 80026c8:	0a1b      	lsrs	r3, r3, #8
 80026ca:	b29a      	uxth	r2, r3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	331a      	adds	r3, #26
 80026d0:	b2d2      	uxtb	r2, r2
 80026d2:	701a      	strb	r2, [r3, #0]
	buffer[27] = (hk_adc1[3] & 0xFF);			// HK n3v3mon LSB
 80026d4:	697b      	ldr	r3, [r7, #20]
 80026d6:	3306      	adds	r3, #6
 80026d8:	881a      	ldrh	r2, [r3, #0]
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	331b      	adds	r3, #27
 80026de:	b2d2      	uxtb	r2, r2
 80026e0:	701a      	strb	r2, [r3, #0]
	buffer[28] = ((hk_adc3[2] & 0xFF00) >> 8);	// HK n5vmon MSB
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	3304      	adds	r3, #4
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	0a1b      	lsrs	r3, r3, #8
 80026ea:	b29a      	uxth	r2, r3
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	331c      	adds	r3, #28
 80026f0:	b2d2      	uxtb	r2, r2
 80026f2:	701a      	strb	r2, [r3, #0]
	buffer[29] = (hk_adc3[2] & 0xFF);			// HK n5vmon LSB
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	3304      	adds	r3, #4
 80026f8:	881a      	ldrh	r2, [r3, #0]
 80026fa:	69fb      	ldr	r3, [r7, #28]
 80026fc:	331d      	adds	r3, #29
 80026fe:	b2d2      	uxtb	r2, r2
 8002700:	701a      	strb	r2, [r3, #0]
	buffer[30] = ((hk_adc1[7] & 0xFF00) >> 8);	// HK 15vmon MSB
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	330e      	adds	r3, #14
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	0a1b      	lsrs	r3, r3, #8
 800270a:	b29a      	uxth	r2, r3
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	331e      	adds	r3, #30
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	701a      	strb	r2, [r3, #0]
	buffer[31] = (hk_adc1[7] & 0xFF);			// HK 15vmon LSB
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	330e      	adds	r3, #14
 8002718:	881a      	ldrh	r2, [r3, #0]
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	331f      	adds	r3, #31
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	701a      	strb	r2, [r3, #0]
	buffer[32] = ((hk_adc1[8] & 0xFF00) >> 8);	// HK 5vrefmon MSB
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3310      	adds	r3, #16
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	0a1b      	lsrs	r3, r3, #8
 800272a:	b29a      	uxth	r2, r3
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	3320      	adds	r3, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	701a      	strb	r2, [r3, #0]
	buffer[33] = (hk_adc1[8] & 0xFF);			// HK 5vrefmon LSB
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	3310      	adds	r3, #16
 8002738:	881a      	ldrh	r2, [r3, #0]
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3321      	adds	r3, #33	; 0x21
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	701a      	strb	r2, [r3, #0]
	buffer[34] = ((hk_adc1[4] & 0xFF00) >> 8);	// HK n150vmon MSB
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	3308      	adds	r3, #8
 8002746:	881b      	ldrh	r3, [r3, #0]
 8002748:	0a1b      	lsrs	r3, r3, #8
 800274a:	b29a      	uxth	r2, r3
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	3322      	adds	r3, #34	; 0x22
 8002750:	b2d2      	uxtb	r2, r2
 8002752:	701a      	strb	r2, [r3, #0]
	buffer[35] = (hk_adc1[4] & 0xFF);			// HK n150vmon LSB
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	3308      	adds	r3, #8
 8002758:	881a      	ldrh	r2, [r3, #0]
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3323      	adds	r3, #35	; 0x23
 800275e:	b2d2      	uxtb	r2, r2
 8002760:	701a      	strb	r2, [r3, #0]
	buffer[36] = ((hk_adc1[5] & 0xFF00) >> 8);	// HK n800vmon MSB
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	330a      	adds	r3, #10
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	0a1b      	lsrs	r3, r3, #8
 800276a:	b29a      	uxth	r2, r3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	3324      	adds	r3, #36	; 0x24
 8002770:	b2d2      	uxtb	r2, r2
 8002772:	701a      	strb	r2, [r3, #0]
	buffer[37] = (hk_adc1[5] & 0xFF);			// HK n800vmon LSB
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	330a      	adds	r3, #10
 8002778:	881a      	ldrh	r2, [r3, #0]
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	3325      	adds	r3, #37	; 0x25
 800277e:	b2d2      	uxtb	r2, r2
 8002780:	701a      	strb	r2, [r3, #0]
	buffer[38] = timestamp[0];
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	3326      	adds	r3, #38	; 0x26
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	e006      	b.n	8002798 <sample_hk+0x334>
 800278a:	bf00      	nop
 800278c:	24000004 	.word	0x24000004
 8002790:	24000c68 	.word	0x24000c68
 8002794:	24000be0 	.word	0x24000be0
 8002798:	7812      	ldrb	r2, [r2, #0]
 800279a:	701a      	strb	r2, [r3, #0]
	buffer[39] = timestamp[1];
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	3327      	adds	r3, #39	; 0x27
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	7852      	ldrb	r2, [r2, #1]
 80027a4:	701a      	strb	r2, [r3, #0]
	buffer[40] = timestamp[2];
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	3328      	adds	r3, #40	; 0x28
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	7892      	ldrb	r2, [r2, #2]
 80027ae:	701a      	strb	r2, [r3, #0]
	buffer[41] = timestamp[3];
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	3329      	adds	r3, #41	; 0x29
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	78d2      	ldrb	r2, [r2, #3]
 80027b8:	701a      	strb	r2, [r3, #0]
	buffer[42] = timestamp[4];
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	332a      	adds	r3, #42	; 0x2a
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	7912      	ldrb	r2, [r2, #4]
 80027c2:	701a      	strb	r2, [r3, #0]
	buffer[43] = timestamp[5];
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	332b      	adds	r3, #43	; 0x2b
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	7952      	ldrb	r2, [r2, #5]
 80027cc:	701a      	strb	r2, [r3, #0]
	buffer[44] = timestamp[6];
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	332c      	adds	r3, #44	; 0x2c
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	7992      	ldrb	r2, [r2, #6]
 80027d6:	701a      	strb	r2, [r3, #0]
	buffer[45] = timestamp[7];
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	332d      	adds	r3, #45	; 0x2d
 80027dc:	68fa      	ldr	r2, [r7, #12]
 80027de:	79d2      	ldrb	r2, [r2, #7]
 80027e0:	701a      	strb	r2, [r3, #0]
	buffer[46] = timestamp[8];
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	332e      	adds	r3, #46	; 0x2e
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	7a12      	ldrb	r2, [r2, #8]
 80027ea:	701a      	strb	r2, [r3, #0]
	buffer[47] = timestamp[9];
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	332f      	adds	r3, #47	; 0x2f
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	7a52      	ldrb	r2, [r2, #9]
 80027f4:	701a      	strb	r2, [r3, #0]

	packet_t hk_packet = create_packet(buffer, HK_DATA_SIZE);
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	2230      	movs	r2, #48	; 0x30
 80027fa:	69f9      	ldr	r1, [r7, #28]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7ff fb97 	bl	8001f30 <create_packet>
	osMessageQueuePut(mid_MsgQueue, &hk_packet, 0U, 0U);
 8002802:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <sample_hk+0x3dc>)
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	1d39      	adds	r1, r7, #4
 8002808:	2300      	movs	r3, #0
 800280a:	2200      	movs	r2, #0
 800280c:	f010 fa66 	bl	8012cdc <osMessageQueuePut>
	available_msgs++;
 8002810:	4b0c      	ldr	r3, [pc, #48]	; (8002844 <sample_hk+0x3e0>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	3301      	adds	r3, #1
 8002816:	4a0b      	ldr	r2, [pc, #44]	; (8002844 <sample_hk+0x3e0>)
 8002818:	6013      	str	r3, [r2, #0]

	free(buffer);
 800281a:	69f8      	ldr	r0, [r7, #28]
 800281c:	f013 fc40 	bl	80160a0 <free>
	free(hk_i2c);
 8002820:	69b8      	ldr	r0, [r7, #24]
 8002822:	f013 fc3d 	bl	80160a0 <free>
	free(hk_adc1);
 8002826:	6978      	ldr	r0, [r7, #20]
 8002828:	f013 fc3a 	bl	80160a0 <free>
	free(hk_adc3);
 800282c:	6938      	ldr	r0, [r7, #16]
 800282e:	f013 fc37 	bl	80160a0 <free>
	free(timestamp);
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f013 fc34 	bl	80160a0 <free>
}
 8002838:	bf00      	nop
 800283a:	3720      	adds	r7, #32
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}
 8002840:	24000bcc 	.word	0x24000bcc
 8002844:	24000bd8 	.word	0x24000bd8

08002848 <PMT_init>:
 * @brief  Function implementing the PMT_task thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_PMT_init */
void PMT_init(void *argument) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {

		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 8002850:	4b0b      	ldr	r3, [pc, #44]	; (8002880 <PMT_init+0x38>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002858:	2200      	movs	r2, #0
 800285a:	2101      	movs	r1, #1
 800285c:	f010 f964 	bl	8012b28 <osEventFlagsWait>
				osWaitForever);
		if (PMT_ON) {
 8002860:	4b08      	ldr	r3, [pc, #32]	; (8002884 <PMT_init+0x3c>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d007      	beq.n	8002878 <PMT_init+0x30>
			sample_pmt();
 8002868:	f7ff fca0 	bl	80021ac <sample_pmt>
			pmt_seq++;
 800286c:	4b06      	ldr	r3, [pc, #24]	; (8002888 <PMT_init+0x40>)
 800286e:	881b      	ldrh	r3, [r3, #0]
 8002870:	3301      	adds	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	4b04      	ldr	r3, [pc, #16]	; (8002888 <PMT_init+0x40>)
 8002876:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(PMT_taskHandle);
	}
#endif

		}
		osThreadYield();
 8002878:	f010 f876 	bl	8012968 <osThreadYield>
		osEventFlagsWait(event_flags, PMT_FLAG_ID, osFlagsWaitAny,
 800287c:	e7e8      	b.n	8002850 <PMT_init+0x8>
 800287e:	bf00      	nop
 8002880:	24000be8 	.word	0x24000be8
 8002884:	24000be2 	.word	0x24000be2
 8002888:	24000bdc 	.word	0x24000bdc

0800288c <ERPA_init>:
 * @brief Function implementing the ERPA_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_ERPA_init */
void ERPA_init(void *argument) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN ERPA_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <ERPA_init+0x38>)
 8002896:	6818      	ldr	r0, [r3, #0]
 8002898:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800289c:	2200      	movs	r2, #0
 800289e:	2102      	movs	r1, #2
 80028a0:	f010 f942 	bl	8012b28 <osEventFlagsWait>
				osWaitForever);
		if (ERPA_ON) {
 80028a4:	4b08      	ldr	r3, [pc, #32]	; (80028c8 <ERPA_init+0x3c>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d007      	beq.n	80028bc <ERPA_init+0x30>
			sample_erpa();
 80028ac:	f7ff fd18 	bl	80022e0 <sample_erpa>
			erpa_seq++;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <ERPA_init+0x40>)
 80028b2:	881b      	ldrh	r3, [r3, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	4b04      	ldr	r3, [pc, #16]	; (80028cc <ERPA_init+0x40>)
 80028ba:	801a      	strh	r2, [r3, #0]
		osThreadSuspend(ERPA_taskHandle);
	}
#endif

		}
		osThreadYield();
 80028bc:	f010 f854 	bl	8012968 <osThreadYield>
		osEventFlagsWait(event_flags, ERPA_FLAG_ID, osFlagsWaitAny,
 80028c0:	e7e8      	b.n	8002894 <ERPA_init+0x8>
 80028c2:	bf00      	nop
 80028c4:	24000be8 	.word	0x24000be8
 80028c8:	24000be3 	.word	0x24000be3
 80028cc:	24000bde 	.word	0x24000bde

080028d0 <HK_init>:
 * @brief Function implementing the HK_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_HK_init */
void HK_init(void *argument) {
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b082      	sub	sp, #8
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN HK_init */

	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 80028d8:	4b0b      	ldr	r3, [pc, #44]	; (8002908 <HK_init+0x38>)
 80028da:	6818      	ldr	r0, [r3, #0]
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028e0:	2200      	movs	r2, #0
 80028e2:	2104      	movs	r1, #4
 80028e4:	f010 f920 	bl	8012b28 <osEventFlagsWait>
				osWaitForever);
		if (HK_ON) {
 80028e8:	4b08      	ldr	r3, [pc, #32]	; (800290c <HK_init+0x3c>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d007      	beq.n	8002900 <HK_init+0x30>
			sample_hk();
 80028f0:	f7ff fdb8 	bl	8002464 <sample_hk>
			hk_seq++;
 80028f4:	4b06      	ldr	r3, [pc, #24]	; (8002910 <HK_init+0x40>)
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	3301      	adds	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	4b04      	ldr	r3, [pc, #16]	; (8002910 <HK_init+0x40>)
 80028fe:	801a      	strh	r2, [r3, #0]
	if (hk_seq >= HK_CAP){
		osThreadSuspend(HK_taskHandle);
	}
#endif
		}
		osThreadYield();
 8002900:	f010 f832 	bl	8012968 <osThreadYield>
		osEventFlagsWait(event_flags, HK_FLAG_ID, osFlagsWaitAny,
 8002904:	e7e8      	b.n	80028d8 <HK_init+0x8>
 8002906:	bf00      	nop
 8002908:	24000be8 	.word	0x24000be8
 800290c:	24000be4 	.word	0x24000be4
 8002910:	24000be0 	.word	0x24000be0

08002914 <UART_RX_init>:
 * @brief Function implementing the UART_RX_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_RX_init */
void UART_RX_init(void *argument) {
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UART_RX_init */
	/* Infinite loop */
	for (;;) {
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800291c:	2201      	movs	r2, #1
 800291e:	4904      	ldr	r1, [pc, #16]	; (8002930 <UART_RX_init+0x1c>)
 8002920:	4804      	ldr	r0, [pc, #16]	; (8002934 <UART_RX_init+0x20>)
 8002922:	f00d fa57 	bl	800fdd4 <HAL_UART_Receive_IT>
		osDelay(5);
 8002926:	2005      	movs	r0, #5
 8002928:	f010 f85f 	bl	80129ea <osDelay>
		HAL_UART_Receive_IT(&huart1, UART_RX_BUFFER, 1);
 800292c:	e7f6      	b.n	800291c <UART_RX_init+0x8>
 800292e:	bf00      	nop
 8002930:	24000bec 	.word	0x24000bec
 8002934:	240005ec 	.word	0x240005ec

08002938 <GPIO_on_init>:
 * @brief Function implementing the GPIO_on_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_on_init */
void GPIO_on_init(void *argument) {
 8002938:	b580      	push	{r7, lr}
 800293a:	b082      	sub	sp, #8
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_on_init */
	osThreadSuspend(GPIO_on_taskHandle);
 8002940:	4b24      	ldr	r3, [pc, #144]	; (80029d4 <GPIO_on_init+0x9c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4618      	mov	r0, r3
 8002946:	f010 f82f 	bl	80129a8 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 800294a:	4b23      	ldr	r3, [pc, #140]	; (80029d8 <GPIO_on_init+0xa0>)
 800294c:	2104      	movs	r1, #4
 800294e:	2201      	movs	r2, #1
 8002950:	4618      	mov	r0, r3
 8002952:	f006 f997 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 8002956:	2064      	movs	r0, #100	; 0x64
 8002958:	f010 f847 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_SET); // sys on pb5
 800295c:	4b1e      	ldr	r3, [pc, #120]	; (80029d8 <GPIO_on_init+0xa0>)
 800295e:	2120      	movs	r1, #32
 8002960:	2201      	movs	r2, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f006 f98e 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 8002968:	2064      	movs	r0, #100	; 0x64
 800296a:	f010 f83e 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_SET); // 3v3 on pc1
 800296e:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <GPIO_on_init+0xa4>)
 8002970:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002974:	2201      	movs	r2, #1
 8002976:	4618      	mov	r0, r3
 8002978:	f006 f984 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 800297c:	2064      	movs	r0, #100	; 0x64
 800297e:	f010 f834 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_SET); // 5v on pc7
 8002982:	4b16      	ldr	r3, [pc, #88]	; (80029dc <GPIO_on_init+0xa4>)
 8002984:	2180      	movs	r1, #128	; 0x80
 8002986:	2201      	movs	r2, #1
 8002988:	4618      	mov	r0, r3
 800298a:	f006 f97b 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 800298e:	2064      	movs	r0, #100	; 0x64
 8002990:	f010 f82b 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_SET); // n3v3 on pc6
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <GPIO_on_init+0xa4>)
 8002996:	2140      	movs	r1, #64	; 0x40
 8002998:	2201      	movs	r2, #1
 800299a:	4618      	mov	r0, r3
 800299c:	f006 f972 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 80029a0:	2064      	movs	r0, #100	; 0x64
 80029a2:	f010 f822 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_SET); // n5v on pc8
 80029a6:	4b0d      	ldr	r3, [pc, #52]	; (80029dc <GPIO_on_init+0xa4>)
 80029a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ac:	2201      	movs	r2, #1
 80029ae:	4618      	mov	r0, r3
 80029b0:	f006 f968 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 80029b4:	2064      	movs	r0, #100	; 0x64
 80029b6:	f010 f818 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_SET); // 15v on pc9
 80029ba:	4b08      	ldr	r3, [pc, #32]	; (80029dc <GPIO_on_init+0xa4>)
 80029bc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029c0:	2201      	movs	r2, #1
 80029c2:	4618      	mov	r0, r3
 80029c4:	f006 f95e 	bl	8008c84 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_on_taskHandle);
 80029c8:	4b02      	ldr	r3, [pc, #8]	; (80029d4 <GPIO_on_init+0x9c>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f00f ffeb 	bl	80129a8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_SET); // sdn1
 80029d2:	e7ba      	b.n	800294a <GPIO_on_init+0x12>
 80029d4:	24000708 	.word	0x24000708
 80029d8:	58020400 	.word	0x58020400
 80029dc:	58020800 	.word	0x58020800

080029e0 <GPIO_off_init>:
 * @brief Function implementing the GPIO_off_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_GPIO_off_init */
void GPIO_off_init(void *argument) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b082      	sub	sp, #8
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN GPIO_off_init */
	osThreadSuspend(GPIO_off_taskHandle);
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <GPIO_off_init+0x9c>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f00f ffdb 	bl	80129a8 <osThreadSuspend>
	/* Infinite loop */
	for (;;) {
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 80029f2:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <GPIO_off_init+0xa0>)
 80029f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029f8:	2200      	movs	r2, #0
 80029fa:	4618      	mov	r0, r3
 80029fc:	f006 f942 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a00:	2064      	movs	r0, #100	; 0x64
 8002a02:	f00f fff2 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[5].gpio, gpios[5].pin, GPIO_PIN_RESET); // n5v on pc8
 8002a06:	4b1e      	ldr	r3, [pc, #120]	; (8002a80 <GPIO_off_init+0xa0>)
 8002a08:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f006 f938 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a14:	2064      	movs	r0, #100	; 0x64
 8002a16:	f00f ffe8 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[7].gpio, gpios[7].pin, GPIO_PIN_RESET); // n3v3 on pc6
 8002a1a:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <GPIO_off_init+0xa0>)
 8002a1c:	2140      	movs	r1, #64	; 0x40
 8002a1e:	2200      	movs	r2, #0
 8002a20:	4618      	mov	r0, r3
 8002a22:	f006 f92f 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a26:	2064      	movs	r0, #100	; 0x64
 8002a28:	f00f ffdf 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[2].gpio, gpios[2].pin, GPIO_PIN_RESET); // 5v on pc7
 8002a2c:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <GPIO_off_init+0xa0>)
 8002a2e:	2180      	movs	r1, #128	; 0x80
 8002a30:	2200      	movs	r2, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	f006 f926 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a38:	2064      	movs	r0, #100	; 0x64
 8002a3a:	f00f ffd6 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[4].gpio, gpios[4].pin, GPIO_PIN_RESET); // 3v3 on pc1
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <GPIO_off_init+0xa0>)
 8002a40:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a44:	2200      	movs	r2, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f006 f91c 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a4c:	2064      	movs	r0, #100	; 0x64
 8002a4e:	f00f ffcc 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[0].gpio, gpios[0].pin, GPIO_PIN_RESET); // sys on pb5
 8002a52:	4b0c      	ldr	r3, [pc, #48]	; (8002a84 <GPIO_off_init+0xa4>)
 8002a54:	2120      	movs	r1, #32
 8002a56:	2200      	movs	r2, #0
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f006 f913 	bl	8008c84 <HAL_GPIO_WritePin>
		osDelay(100);
 8002a5e:	2064      	movs	r0, #100	; 0x64
 8002a60:	f00f ffc3 	bl	80129ea <osDelay>
		HAL_GPIO_WritePin(gpios[8].gpio, gpios[8].pin, GPIO_PIN_RESET); // sdn1
 8002a64:	4b07      	ldr	r3, [pc, #28]	; (8002a84 <GPIO_off_init+0xa4>)
 8002a66:	2104      	movs	r1, #4
 8002a68:	2200      	movs	r2, #0
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f006 f90a 	bl	8008c84 <HAL_GPIO_WritePin>
		osThreadSuspend(GPIO_off_taskHandle);
 8002a70:	4b02      	ldr	r3, [pc, #8]	; (8002a7c <GPIO_off_init+0x9c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f00f ff97 	bl	80129a8 <osThreadSuspend>
		HAL_GPIO_WritePin(gpios[6].gpio, gpios[6].pin, GPIO_PIN_RESET); // 15v on pc9
 8002a7a:	e7ba      	b.n	80029f2 <GPIO_off_init+0x12>
 8002a7c:	24000968 	.word	0x24000968
 8002a80:	58020800 	.word	0x58020800
 8002a84:	58020400 	.word	0x58020400

08002a88 <UART_TX_init>:
 * @brief Function implementing the UART_TX_task thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_UART_TX_init */
void UART_TX_init(void *argument) {
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN UART_TX_init */
	static uint8_t tx_buffer[1000];
	uint32_t total_size = 0;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
	osStatus_t status;

	while (1) {
		total_size = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]

		// Retrieve all messages from the queue and store them in tx_buffer
		do {
			status = osMessageQueueGet(mid_MsgQueue, &msg, NULL, osWaitForever);
 8002a98:	4b22      	ldr	r3, [pc, #136]	; (8002b24 <UART_TX_init+0x9c>)
 8002a9a:	6818      	ldr	r0, [r3, #0]
 8002a9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	4921      	ldr	r1, [pc, #132]	; (8002b28 <UART_TX_init+0xa0>)
 8002aa4:	f010 f97a 	bl	8012d9c <osMessageQueueGet>
 8002aa8:	60b8      	str	r0, [r7, #8]
			if (status == osOK) {
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d11c      	bne.n	8002aea <UART_TX_init+0x62>
				if (total_size + msg.size <= 1000) {
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <UART_TX_init+0xa0>)
 8002ab2:	889b      	ldrh	r3, [r3, #4]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4413      	add	r3, r2
 8002aba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002abe:	d818      	bhi.n	8002af2 <UART_TX_init+0x6a>
					memcpy(&tx_buffer[total_size], msg.array, msg.size);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4a1a      	ldr	r2, [pc, #104]	; (8002b2c <UART_TX_init+0xa4>)
 8002ac4:	4413      	add	r3, r2
 8002ac6:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <UART_TX_init+0xa0>)
 8002ac8:	6811      	ldr	r1, [r2, #0]
 8002aca:	4a17      	ldr	r2, [pc, #92]	; (8002b28 <UART_TX_init+0xa0>)
 8002acc:	8892      	ldrh	r2, [r2, #4]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f013 faee 	bl	80160b0 <memcpy>
					free(msg.array);
 8002ad4:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <UART_TX_init+0xa0>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f013 fae1 	bl	80160a0 <free>
					total_size += msg.size;
 8002ade:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <UART_TX_init+0xa0>)
 8002ae0:	889b      	ldrh	r3, [r3, #4]
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	60fb      	str	r3, [r7, #12]
				} else {

					break;
				}
			}
		} while (status == osOK);
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0d3      	beq.n	8002a98 <UART_TX_init+0x10>
 8002af0:	e000      	b.n	8002af4 <UART_TX_init+0x6c>
					break;
 8002af2:	bf00      	nop

		if (total_size > 0) {
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d010      	beq.n	8002b1c <UART_TX_init+0x94>
			HAL_UART_Transmit_DMA(&huart1, tx_buffer, total_size);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	b29b      	uxth	r3, r3
 8002afe:	461a      	mov	r2, r3
 8002b00:	490a      	ldr	r1, [pc, #40]	; (8002b2c <UART_TX_init+0xa4>)
 8002b02:	480b      	ldr	r0, [pc, #44]	; (8002b30 <UART_TX_init+0xa8>)
 8002b04:	f00d f9b2 	bl	800fe6c <HAL_UART_Transmit_DMA>

			// Wait for transmission to complete
			while (tx_flag == 0) {
 8002b08:	e001      	b.n	8002b0e <UART_TX_init+0x86>
				osThreadYield();
 8002b0a:	f00f ff2d 	bl	8012968 <osThreadYield>
			while (tx_flag == 0) {
 8002b0e:	4b09      	ldr	r3, [pc, #36]	; (8002b34 <UART_TX_init+0xac>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f9      	beq.n	8002b0a <UART_TX_init+0x82>
			}

			// Reset the flag
			tx_flag = 0;
 8002b16:	4b07      	ldr	r3, [pc, #28]	; (8002b34 <UART_TX_init+0xac>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
		}

		// Yield thread control
		osThreadYield();
 8002b1c:	f00f ff24 	bl	8012968 <osThreadYield>
		total_size = 0;
 8002b20:	e7b8      	b.n	8002a94 <UART_TX_init+0xc>
 8002b22:	bf00      	nop
 8002b24:	24000bcc 	.word	0x24000bcc
 8002b28:	24000bd0 	.word	0x24000bd0
 8002b2c:	24000c70 	.word	0x24000c70
 8002b30:	240005ec 	.word	0x240005ec
 8002b34:	24000000 	.word	0x24000000

08002b38 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a04      	ldr	r2, [pc, #16]	; (8002b58 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d101      	bne.n	8002b4e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8002b4a:	f000 ff5b 	bl	8003a04 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40001000 	.word	0x40001000

08002b5c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b60:	b672      	cpsid	i
}
 8002b62:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002b64:	e7fe      	b.n	8002b64 <Error_Handler+0x8>
	...

08002b68 <HAL_MspInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <HAL_MspInit+0x38>)
 8002b70:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b74:	4a0a      	ldr	r2, [pc, #40]	; (8002ba0 <HAL_MspInit+0x38>)
 8002b76:	f043 0302 	orr.w	r3, r3, #2
 8002b7a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b7e:	4b08      	ldr	r3, [pc, #32]	; (8002ba0 <HAL_MspInit+0x38>)
 8002b80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	607b      	str	r3, [r7, #4]
 8002b8a:	687b      	ldr	r3, [r7, #4]

	/* System interrupt init*/
	/* PendSV_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f06f 0001 	mvn.w	r0, #1
 8002b94:	f002 fc44 	bl	8005420 <HAL_NVIC_SetPriority>

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8002b98:	bf00      	nop
 8002b9a:	3708      	adds	r7, #8
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	58024400 	.word	0x58024400

08002ba4 <HAL_ADC_MspInit>:
 * @brief ADC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hadc: ADC handle pointer
 * @retval None
 */
void HAL_ADC_MspInit(ADC_HandleTypeDef *hadc) {
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b08e      	sub	sp, #56	; 0x38
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002bac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	601a      	str	r2, [r3, #0]
 8002bb4:	605a      	str	r2, [r3, #4]
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	60da      	str	r2, [r3, #12]
 8002bba:	611a      	str	r2, [r3, #16]
	if (hadc->Instance == ADC1) {
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a7b      	ldr	r2, [pc, #492]	; (8002db0 <HAL_ADC_MspInit+0x20c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	f040 8091 	bne.w	8002cea <HAL_ADC_MspInit+0x146>
		/* USER CODE BEGIN ADC1_MspInit 0 */

		/* USER CODE END ADC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_ADC12_CLK_ENABLE();
 8002bc8:	4b7a      	ldr	r3, [pc, #488]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002bca:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bce:	4a79      	ldr	r2, [pc, #484]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002bd0:	f043 0320 	orr.w	r3, r3, #32
 8002bd4:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002bd8:	4b76      	ldr	r3, [pc, #472]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002bda:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002bde:	f003 0320 	and.w	r3, r3, #32
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	6a3b      	ldr	r3, [r7, #32]

		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002be6:	4b73      	ldr	r3, [pc, #460]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002be8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bec:	4a71      	ldr	r2, [pc, #452]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002bee:	f043 0304 	orr.w	r3, r3, #4
 8002bf2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002bf6:	4b6f      	ldr	r3, [pc, #444]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002bfc:	f003 0304 	and.w	r3, r3, #4
 8002c00:	61fb      	str	r3, [r7, #28]
 8002c02:	69fb      	ldr	r3, [r7, #28]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002c04:	4b6b      	ldr	r3, [pc, #428]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c0a:	4a6a      	ldr	r2, [pc, #424]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002c0c:	f043 0301 	orr.w	r3, r3, #1
 8002c10:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c14:	4b67      	ldr	r3, [pc, #412]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	61bb      	str	r3, [r7, #24]
 8002c20:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002c22:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002c24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c28:	4a62      	ldr	r2, [pc, #392]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c32:	4b60      	ldr	r3, [pc, #384]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	617b      	str	r3, [r7, #20]
 8002c3e:	697b      	ldr	r3, [r7, #20]
		 PC4     ------> ADC1_INP4
		 PC5     ------> ADC1_INP8
		 PB0     ------> ADC1_INP9
		 PB1     ------> ADC1_INP5
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 | GPIO_PIN_5;
 8002c40:	2333      	movs	r3, #51	; 0x33
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c44:	2303      	movs	r3, #3
 8002c46:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c50:	4619      	mov	r1, r3
 8002c52:	4859      	ldr	r0, [pc, #356]	; (8002db8 <HAL_ADC_MspInit+0x214>)
 8002c54:	f005 fe4e 	bl	80088f4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6
 8002c58:	23ce      	movs	r3, #206	; 0xce
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
				| GPIO_PIN_7;
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c64:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4854      	ldr	r0, [pc, #336]	; (8002dbc <HAL_ADC_MspInit+0x218>)
 8002c6c:	f005 fe42 	bl	80088f4 <HAL_GPIO_Init>

		GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8002c70:	2303      	movs	r3, #3
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002c74:	2303      	movs	r3, #3
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c80:	4619      	mov	r1, r3
 8002c82:	484f      	ldr	r0, [pc, #316]	; (8002dc0 <HAL_ADC_MspInit+0x21c>)
 8002c84:	f005 fe36 	bl	80088f4 <HAL_GPIO_Init>

		/* ADC1 DMA Init */
		/* ADC1 Init */
		hdma_adc1.Instance = DMA1_Stream0;
 8002c88:	4b4e      	ldr	r3, [pc, #312]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002c8a:	4a4f      	ldr	r2, [pc, #316]	; (8002dc8 <HAL_ADC_MspInit+0x224>)
 8002c8c:	601a      	str	r2, [r3, #0]
		hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002c8e:	4b4d      	ldr	r3, [pc, #308]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002c90:	2209      	movs	r2, #9
 8002c92:	605a      	str	r2, [r3, #4]
		hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002c94:	4b4b      	ldr	r3, [pc, #300]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	609a      	str	r2, [r3, #8]
		hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c9a:	4b4a      	ldr	r3, [pc, #296]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	60da      	str	r2, [r3, #12]
		hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002ca0:	4b48      	ldr	r3, [pc, #288]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002ca2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ca6:	611a      	str	r2, [r3, #16]
		hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002ca8:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002caa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cae:	615a      	str	r2, [r3, #20]
		hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002cb0:	4b44      	ldr	r3, [pc, #272]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cb6:	619a      	str	r2, [r3, #24]
		hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002cb8:	4b42      	ldr	r3, [pc, #264]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002cbe:	61da      	str	r2, [r3, #28]
		hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002cc0:	4b40      	ldr	r3, [pc, #256]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	621a      	str	r2, [r3, #32]
		hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cc6:	4b3f      	ldr	r3, [pc, #252]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 8002ccc:	483d      	ldr	r0, [pc, #244]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002cce:	f002 ffd5 	bl	8005c7c <HAL_DMA_Init>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d001      	beq.n	8002cdc <HAL_ADC_MspInit+0x138>
			Error_Handler();
 8002cd8:	f7ff ff40 	bl	8002b5c <Error_Handler>
		}

		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc1);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002ce0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002ce2:	4a38      	ldr	r2, [pc, #224]	; (8002dc4 <HAL_ADC_MspInit+0x220>)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6393      	str	r3, [r2, #56]	; 0x38
		/* USER CODE BEGIN ADC3_MspInit 1 */

		/* USER CODE END ADC3_MspInit 1 */
	}

}
 8002ce8:	e05e      	b.n	8002da8 <HAL_ADC_MspInit+0x204>
	} else if (hadc->Instance == ADC3) {
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a37      	ldr	r2, [pc, #220]	; (8002dcc <HAL_ADC_MspInit+0x228>)
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	d159      	bne.n	8002da8 <HAL_ADC_MspInit+0x204>
		__HAL_RCC_ADC3_CLK_ENABLE();
 8002cf4:	4b2f      	ldr	r3, [pc, #188]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002cf6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cfa:	4a2e      	ldr	r2, [pc, #184]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002cfc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d04:	4b2b      	ldr	r3, [pc, #172]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002d06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	613b      	str	r3, [r7, #16]
 8002d10:	693b      	ldr	r3, [r7, #16]
		__HAL_RCC_GPIOC_CLK_ENABLE();
 8002d12:	4b28      	ldr	r3, [pc, #160]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002d14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d18:	4a26      	ldr	r2, [pc, #152]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d22:	4b24      	ldr	r3, [pc, #144]	; (8002db4 <HAL_ADC_MspInit+0x210>)
 8002d24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d28:	f003 0304 	and.w	r3, r3, #4
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
		HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2,
 8002d30:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8002d34:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8002d38:	f000 fe90 	bl	8003a5c <HAL_SYSCFG_AnalogSwitchConfig>
		HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3,
 8002d3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8002d40:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8002d44:	f000 fe8a 	bl	8003a5c <HAL_SYSCFG_AnalogSwitchConfig>
		hdma_adc3.Instance = DMA1_Stream1;
 8002d48:	4b21      	ldr	r3, [pc, #132]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d4a:	4a22      	ldr	r2, [pc, #136]	; (8002dd4 <HAL_ADC_MspInit+0x230>)
 8002d4c:	601a      	str	r2, [r3, #0]
		hdma_adc3.Init.Request = DMA_REQUEST_ADC3;
 8002d4e:	4b20      	ldr	r3, [pc, #128]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d50:	2273      	movs	r2, #115	; 0x73
 8002d52:	605a      	str	r2, [r3, #4]
		hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d54:	4b1e      	ldr	r3, [pc, #120]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d56:	2200      	movs	r2, #0
 8002d58:	609a      	str	r2, [r3, #8]
		hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d5a:	4b1d      	ldr	r3, [pc, #116]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	60da      	str	r2, [r3, #12]
		hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002d60:	4b1b      	ldr	r3, [pc, #108]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d66:	611a      	str	r2, [r3, #16]
		hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d68:	4b19      	ldr	r3, [pc, #100]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d6e:	615a      	str	r2, [r3, #20]
		hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d70:	4b17      	ldr	r3, [pc, #92]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d76:	619a      	str	r2, [r3, #24]
		hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002d78:	4b15      	ldr	r3, [pc, #84]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d7a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d7e:	61da      	str	r2, [r3, #28]
		hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002d80:	4b13      	ldr	r3, [pc, #76]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	621a      	str	r2, [r3, #32]
		hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d86:	4b12      	ldr	r3, [pc, #72]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_adc3) != HAL_OK) {
 8002d8c:	4810      	ldr	r0, [pc, #64]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002d8e:	f002 ff75 	bl	8005c7c <HAL_DMA_Init>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d001      	beq.n	8002d9c <HAL_ADC_MspInit+0x1f8>
			Error_Handler();
 8002d98:	f7ff fee0 	bl	8002b5c <Error_Handler>
		__HAL_LINKDMA(hadc, DMA_Handle, hdma_adc3);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	4a0c      	ldr	r2, [pc, #48]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002da0:	64da      	str	r2, [r3, #76]	; 0x4c
 8002da2:	4a0b      	ldr	r2, [pc, #44]	; (8002dd0 <HAL_ADC_MspInit+0x22c>)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6393      	str	r3, [r2, #56]	; 0x38
}
 8002da8:	bf00      	nop
 8002daa:	3738      	adds	r7, #56	; 0x38
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40022000 	.word	0x40022000
 8002db4:	58024400 	.word	0x58024400
 8002db8:	58020800 	.word	0x58020800
 8002dbc:	58020000 	.word	0x58020000
 8002dc0:	58020400 	.word	0x58020400
 8002dc4:	24000204 	.word	0x24000204
 8002dc8:	40020010 	.word	0x40020010
 8002dcc:	58026000 	.word	0x58026000
 8002dd0:	2400027c 	.word	0x2400027c
 8002dd4:	40020028 	.word	0x40020028

08002dd8 <HAL_DAC_MspInit>:
 * @brief DAC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hdac: DAC handle pointer
 * @retval None
 */
void HAL_DAC_MspInit(DAC_HandleTypeDef *hdac) {
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b08a      	sub	sp, #40	; 0x28
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	2200      	movs	r2, #0
 8002de6:	601a      	str	r2, [r3, #0]
 8002de8:	605a      	str	r2, [r3, #4]
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	60da      	str	r2, [r3, #12]
 8002dee:	611a      	str	r2, [r3, #16]
	if (hdac->Instance == DAC1) {
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a34      	ldr	r2, [pc, #208]	; (8002ec8 <HAL_DAC_MspInit+0xf0>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d161      	bne.n	8002ebe <HAL_DAC_MspInit+0xe6>
		/* USER CODE BEGIN DAC1_MspInit 0 */

		/* USER CODE END DAC1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_DAC12_CLK_ENABLE();
 8002dfa:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_DAC_MspInit+0xf4>)
 8002dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e00:	4a32      	ldr	r2, [pc, #200]	; (8002ecc <HAL_DAC_MspInit+0xf4>)
 8002e02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e0a:	4b30      	ldr	r3, [pc, #192]	; (8002ecc <HAL_DAC_MspInit+0xf4>)
 8002e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 8002e18:	4b2c      	ldr	r3, [pc, #176]	; (8002ecc <HAL_DAC_MspInit+0xf4>)
 8002e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1e:	4a2b      	ldr	r2, [pc, #172]	; (8002ecc <HAL_DAC_MspInit+0xf4>)
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e28:	4b28      	ldr	r3, [pc, #160]	; (8002ecc <HAL_DAC_MspInit+0xf4>)
 8002e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
		/**DAC1 GPIO Configuration
		 PA4     ------> DAC1_OUT1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e36:	2310      	movs	r3, #16
 8002e38:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	61fb      	str	r3, [r7, #28]
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e42:	f107 0314 	add.w	r3, r7, #20
 8002e46:	4619      	mov	r1, r3
 8002e48:	4821      	ldr	r0, [pc, #132]	; (8002ed0 <HAL_DAC_MspInit+0xf8>)
 8002e4a:	f005 fd53 	bl	80088f4 <HAL_GPIO_Init>

		/* DAC1 DMA Init */
		/* DAC1_CH1 Init */
		hdma_dac1_ch1.Instance = DMA1_Stream5;
 8002e4e:	4b21      	ldr	r3, [pc, #132]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e50:	4a21      	ldr	r2, [pc, #132]	; (8002ed8 <HAL_DAC_MspInit+0x100>)
 8002e52:	601a      	str	r2, [r3, #0]
		hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1;
 8002e54:	4b1f      	ldr	r3, [pc, #124]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e56:	2243      	movs	r2, #67	; 0x43
 8002e58:	605a      	str	r2, [r3, #4]
		hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e5c:	2240      	movs	r2, #64	; 0x40
 8002e5e:	609a      	str	r2, [r3, #8]
		hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
		hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002e66:	4b1b      	ldr	r3, [pc, #108]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e6c:	611a      	str	r2, [r3, #16]
		hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e6e:	4b19      	ldr	r3, [pc, #100]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e70:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e74:	615a      	str	r2, [r3, #20]
		hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e76:	4b17      	ldr	r3, [pc, #92]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e78:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e7c:	619a      	str	r2, [r3, #24]
		hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8002e7e:	4b15      	ldr	r3, [pc, #84]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e80:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002e84:	61da      	str	r2, [r3, #28]
		hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002e86:	4b13      	ldr	r3, [pc, #76]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	621a      	str	r2, [r3, #32]
		hdma_dac1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e8c:	4b11      	ldr	r3, [pc, #68]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e8e:	2200      	movs	r2, #0
 8002e90:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK) {
 8002e92:	4810      	ldr	r0, [pc, #64]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002e94:	f002 fef2 	bl	8005c7c <HAL_DMA_Init>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d001      	beq.n	8002ea2 <HAL_DAC_MspInit+0xca>
			Error_Handler();
 8002e9e:	f7ff fe5d 	bl	8002b5c <Error_Handler>
		}

		__HAL_LINKDMA(hdac, DMA_Handle1, hdma_dac1_ch1);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a0b      	ldr	r2, [pc, #44]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002ea6:	609a      	str	r2, [r3, #8]
 8002ea8:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <HAL_DAC_MspInit+0xfc>)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6393      	str	r3, [r2, #56]	; 0x38

		/* DAC1 interrupt Init */
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8002eae:	2200      	movs	r2, #0
 8002eb0:	2105      	movs	r1, #5
 8002eb2:	2036      	movs	r0, #54	; 0x36
 8002eb4:	f002 fab4 	bl	8005420 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002eb8:	2036      	movs	r0, #54	; 0x36
 8002eba:	f002 facb 	bl	8005454 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN DAC1_MspInit 1 */

		/* USER CODE END DAC1_MspInit 1 */
	}

}
 8002ebe:	bf00      	nop
 8002ec0:	3728      	adds	r7, #40	; 0x28
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	40007400 	.word	0x40007400
 8002ecc:	58024400 	.word	0x58024400
 8002ed0:	58020000 	.word	0x58020000
 8002ed4:	24000308 	.word	0x24000308
 8002ed8:	40020088 	.word	0x40020088

08002edc <HAL_I2C_MspInit>:
 * @brief I2C MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hi2c: I2C handle pointer
 * @retval None
 */
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b0ba      	sub	sp, #232	; 0xe8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002ee4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002ee8:	2200      	movs	r2, #0
 8002eea:	601a      	str	r2, [r3, #0]
 8002eec:	605a      	str	r2, [r3, #4]
 8002eee:	609a      	str	r2, [r3, #8]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002ef4:	f107 0310 	add.w	r3, r7, #16
 8002ef8:	22c0      	movs	r2, #192	; 0xc0
 8002efa:	2100      	movs	r1, #0
 8002efc:	4618      	mov	r0, r3
 8002efe:	f013 f8e5 	bl	80160cc <memset>
	if (hi2c->Instance == I2C1) {
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a27      	ldr	r2, [pc, #156]	; (8002fa4 <HAL_I2C_MspInit+0xc8>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d146      	bne.n	8002f9a <HAL_I2C_MspInit+0xbe>

		/* USER CODE END I2C1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002f0c:	f04f 0208 	mov.w	r2, #8
 8002f10:	f04f 0300 	mov.w	r3, #0
 8002f14:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002f1e:	f107 0310 	add.w	r3, r7, #16
 8002f22:	4618      	mov	r0, r3
 8002f24:	f007 fd36 	bl	800a994 <HAL_RCCEx_PeriphCLKConfig>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_MspInit+0x56>
			Error_Handler();
 8002f2e:	f7ff fe15 	bl	8002b5c <Error_Handler>
		}

		__HAL_RCC_GPIOB_CLK_ENABLE();
 8002f32:	4b1d      	ldr	r3, [pc, #116]	; (8002fa8 <HAL_I2C_MspInit+0xcc>)
 8002f34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f38:	4a1b      	ldr	r2, [pc, #108]	; (8002fa8 <HAL_I2C_MspInit+0xcc>)
 8002f3a:	f043 0302 	orr.w	r3, r3, #2
 8002f3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f42:	4b19      	ldr	r3, [pc, #100]	; (8002fa8 <HAL_I2C_MspInit+0xcc>)
 8002f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	60fb      	str	r3, [r7, #12]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
		/**I2C1 GPIO Configuration
		 PB8     ------> I2C1_SCL
		 PB9     ------> I2C1_SDA
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8002f50:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002f54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f58:	2312      	movs	r3, #18
 8002f5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f64:	2300      	movs	r3, #0
 8002f66:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002f6a:	2304      	movs	r3, #4
 8002f6c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f70:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002f74:	4619      	mov	r1, r3
 8002f76:	480d      	ldr	r0, [pc, #52]	; (8002fac <HAL_I2C_MspInit+0xd0>)
 8002f78:	f005 fcbc 	bl	80088f4 <HAL_GPIO_Init>

		/* Peripheral clock enable */
		__HAL_RCC_I2C1_CLK_ENABLE();
 8002f7c:	4b0a      	ldr	r3, [pc, #40]	; (8002fa8 <HAL_I2C_MspInit+0xcc>)
 8002f7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f82:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_I2C_MspInit+0xcc>)
 8002f84:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f88:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002f8c:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_I2C_MspInit+0xcc>)
 8002f8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002f92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f96:	60bb      	str	r3, [r7, #8]
 8002f98:	68bb      	ldr	r3, [r7, #8]
		/* USER CODE BEGIN I2C1_MspInit 1 */

		/* USER CODE END I2C1_MspInit 1 */
	}

}
 8002f9a:	bf00      	nop
 8002f9c:	37e8      	adds	r7, #232	; 0xe8
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40005400 	.word	0x40005400
 8002fa8:	58024400 	.word	0x58024400
 8002fac:	58020400 	.word	0x58020400

08002fb0 <HAL_RTC_MspInit>:
 * @brief RTC MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hrtc: RTC handle pointer
 * @retval None
 */
void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc) {
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b0b2      	sub	sp, #200	; 0xc8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8002fb8:	f107 0308 	add.w	r3, r7, #8
 8002fbc:	22c0      	movs	r2, #192	; 0xc0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f013 f883 	bl	80160cc <memset>
	if (hrtc->Instance == RTC) {
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a10      	ldr	r2, [pc, #64]	; (800300c <HAL_RTC_MspInit+0x5c>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d118      	bne.n	8003002 <HAL_RTC_MspInit+0x52>

		/* USER CODE END RTC_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002fd0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002fd4:	f04f 0300 	mov.w	r3, #0
 8002fd8:	e9c7 2302 	strd	r2, r3, [r7, #8]
		PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_HSE_DIV25;
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <HAL_RTC_MspInit+0x60>)
 8002fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8002fe2:	f107 0308 	add.w	r3, r7, #8
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f007 fcd4 	bl	800a994 <HAL_RCCEx_PeriphCLKConfig>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_RTC_MspInit+0x46>
			Error_Handler();
 8002ff2:	f7ff fdb3 	bl	8002b5c <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_RTC_ENABLE();
 8002ff6:	4b07      	ldr	r3, [pc, #28]	; (8003014 <HAL_RTC_MspInit+0x64>)
 8002ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffa:	4a06      	ldr	r2, [pc, #24]	; (8003014 <HAL_RTC_MspInit+0x64>)
 8002ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003000:	6713      	str	r3, [r2, #112]	; 0x70
		/* USER CODE BEGIN RTC_MspInit 1 */

		/* USER CODE END RTC_MspInit 1 */
	}

}
 8003002:	bf00      	nop
 8003004:	37c8      	adds	r7, #200	; 0xc8
 8003006:	46bd      	mov	sp, r7
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	58004000 	.word	0x58004000
 8003010:	00019300 	.word	0x00019300
 8003014:	58024400 	.word	0x58024400

08003018 <HAL_SPI_MspInit>:
 * @brief SPI MSP Initialization
 * This function configures the hardware resources used in this example
 * @param hspi: SPI handle pointer
 * @retval None
 */
void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8003018:	b580      	push	{r7, lr}
 800301a:	b0bc      	sub	sp, #240	; 0xf0
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003020:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003024:	2200      	movs	r2, #0
 8003026:	601a      	str	r2, [r3, #0]
 8003028:	605a      	str	r2, [r3, #4]
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	60da      	str	r2, [r3, #12]
 800302e:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8003030:	f107 0318 	add.w	r3, r7, #24
 8003034:	22c0      	movs	r2, #192	; 0xc0
 8003036:	2100      	movs	r1, #0
 8003038:	4618      	mov	r0, r3
 800303a:	f013 f847 	bl	80160cc <memset>
	if (hspi->Instance == SPI1) {
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a4c      	ldr	r2, [pc, #304]	; (8003174 <HAL_SPI_MspInit+0x15c>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d145      	bne.n	80030d4 <HAL_SPI_MspInit+0xbc>

		/* USER CODE END SPI1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8003048:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800304c:	f04f 0300 	mov.w	r3, #0
 8003050:	e9c7 2306 	strd	r2, r3, [r7, #24]
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8003054:	2300      	movs	r3, #0
 8003056:	67bb      	str	r3, [r7, #120]	; 0x78
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003058:	f107 0318 	add.w	r3, r7, #24
 800305c:	4618      	mov	r0, r3
 800305e:	f007 fc99 	bl	800a994 <HAL_RCCEx_PeriphCLKConfig>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <HAL_SPI_MspInit+0x54>
			Error_Handler();
 8003068:	f7ff fd78 	bl	8002b5c <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_SPI1_CLK_ENABLE();
 800306c:	4b42      	ldr	r3, [pc, #264]	; (8003178 <HAL_SPI_MspInit+0x160>)
 800306e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003072:	4a41      	ldr	r2, [pc, #260]	; (8003178 <HAL_SPI_MspInit+0x160>)
 8003074:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003078:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800307c:	4b3e      	ldr	r3, [pc, #248]	; (8003178 <HAL_SPI_MspInit+0x160>)
 800307e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003082:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003086:	617b      	str	r3, [r7, #20]
 8003088:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800308a:	4b3b      	ldr	r3, [pc, #236]	; (8003178 <HAL_SPI_MspInit+0x160>)
 800308c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003090:	4a39      	ldr	r2, [pc, #228]	; (8003178 <HAL_SPI_MspInit+0x160>)
 8003092:	f043 0302 	orr.w	r3, r3, #2
 8003096:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800309a:	4b37      	ldr	r3, [pc, #220]	; (8003178 <HAL_SPI_MspInit+0x160>)
 800309c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	693b      	ldr	r3, [r7, #16]
		/**SPI1 GPIO Configuration
		 PB3 (JTDO/TRACESWO)     ------> SPI1_SCK
		 PB4 (NJTRST)     ------> SPI1_MISO
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4;
 80030a8:	2318      	movs	r3, #24
 80030aa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ae:	2302      	movs	r3, #2
 80030b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80030c0:	2305      	movs	r3, #5
 80030c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030c6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80030ca:	4619      	mov	r1, r3
 80030cc:	482b      	ldr	r0, [pc, #172]	; (800317c <HAL_SPI_MspInit+0x164>)
 80030ce:	f005 fc11 	bl	80088f4 <HAL_GPIO_Init>
		/* USER CODE BEGIN SPI2_MspInit 1 */

		/* USER CODE END SPI2_MspInit 1 */
	}

}
 80030d2:	e04a      	b.n	800316a <HAL_SPI_MspInit+0x152>
	} else if (hspi->Instance == SPI2) {
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a29      	ldr	r2, [pc, #164]	; (8003180 <HAL_SPI_MspInit+0x168>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d145      	bne.n	800316a <HAL_SPI_MspInit+0x152>
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80030de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	e9c7 2306 	strd	r2, r3, [r7, #24]
		PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 80030ea:	2300      	movs	r3, #0
 80030ec:	67bb      	str	r3, [r7, #120]	; 0x78
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80030ee:	f107 0318 	add.w	r3, r7, #24
 80030f2:	4618      	mov	r0, r3
 80030f4:	f007 fc4e 	bl	800a994 <HAL_RCCEx_PeriphCLKConfig>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <HAL_SPI_MspInit+0xea>
			Error_Handler();
 80030fe:	f7ff fd2d 	bl	8002b5c <Error_Handler>
		__HAL_RCC_SPI2_CLK_ENABLE();
 8003102:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <HAL_SPI_MspInit+0x160>)
 8003104:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003108:	4a1b      	ldr	r2, [pc, #108]	; (8003178 <HAL_SPI_MspInit+0x160>)
 800310a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800310e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_SPI_MspInit+0x160>)
 8003114:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003118:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800311c:	60fb      	str	r3, [r7, #12]
 800311e:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOB_CLK_ENABLE();
 8003120:	4b15      	ldr	r3, [pc, #84]	; (8003178 <HAL_SPI_MspInit+0x160>)
 8003122:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003126:	4a14      	ldr	r2, [pc, #80]	; (8003178 <HAL_SPI_MspInit+0x160>)
 8003128:	f043 0302 	orr.w	r3, r3, #2
 800312c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <HAL_SPI_MspInit+0x160>)
 8003132:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	60bb      	str	r3, [r7, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14;
 800313e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8003142:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003146:	2302      	movs	r3, #2
 8003148:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800314c:	2300      	movs	r3, #0
 800314e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003152:	2300      	movs	r3, #0
 8003154:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003158:	2305      	movs	r3, #5
 800315a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800315e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003162:	4619      	mov	r1, r3
 8003164:	4805      	ldr	r0, [pc, #20]	; (800317c <HAL_SPI_MspInit+0x164>)
 8003166:	f005 fbc5 	bl	80088f4 <HAL_GPIO_Init>
}
 800316a:	bf00      	nop
 800316c:	37f0      	adds	r7, #240	; 0xf0
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40013000 	.word	0x40013000
 8003178:	58024400 	.word	0x58024400
 800317c:	58020400 	.word	0x58020400
 8003180:	40003800 	.word	0x40003800

08003184 <HAL_TIM_Base_MspInit>:
 * @brief TIM_Base MSP Initialization
 * This function configures the hardware resources used in this example
 * @param htim_base: TIM_Base handle pointer
 * @retval None
 */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base) {
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
	if (htim_base->Instance == TIM1) {
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a37      	ldr	r2, [pc, #220]	; (8003270 <HAL_TIM_Base_MspInit+0xec>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d12f      	bne.n	80031f6 <HAL_TIM_Base_MspInit+0x72>
		/* USER CODE BEGIN TIM1_MspInit 0 */

		/* USER CODE END TIM1_MspInit 0 */
		/* Peripheral clock enable */
		__HAL_RCC_TIM1_CLK_ENABLE();
 8003196:	4b37      	ldr	r3, [pc, #220]	; (8003274 <HAL_TIM_Base_MspInit+0xf0>)
 8003198:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800319c:	4a35      	ldr	r2, [pc, #212]	; (8003274 <HAL_TIM_Base_MspInit+0xf0>)
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80031a6:	4b33      	ldr	r3, [pc, #204]	; (8003274 <HAL_TIM_Base_MspInit+0xf0>)
 80031a8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	697b      	ldr	r3, [r7, #20]
		/* TIM1 interrupt Init */
		HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 5, 0);
 80031b4:	2200      	movs	r2, #0
 80031b6:	2105      	movs	r1, #5
 80031b8:	2018      	movs	r0, #24
 80031ba:	f002 f931 	bl	8005420 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 80031be:	2018      	movs	r0, #24
 80031c0:	f002 f948 	bl	8005454 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_UP_IRQn, 5, 0);
 80031c4:	2200      	movs	r2, #0
 80031c6:	2105      	movs	r1, #5
 80031c8:	2019      	movs	r0, #25
 80031ca:	f002 f929 	bl	8005420 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80031ce:	2019      	movs	r0, #25
 80031d0:	f002 f940 	bl	8005454 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 5, 0);
 80031d4:	2200      	movs	r2, #0
 80031d6:	2105      	movs	r1, #5
 80031d8:	201a      	movs	r0, #26
 80031da:	f002 f921 	bl	8005420 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 80031de:	201a      	movs	r0, #26
 80031e0:	f002 f938 	bl	8005454 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80031e4:	2200      	movs	r2, #0
 80031e6:	2105      	movs	r1, #5
 80031e8:	201b      	movs	r0, #27
 80031ea:	f002 f919 	bl	8005420 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80031ee:	201b      	movs	r0, #27
 80031f0:	f002 f930 	bl	8005454 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN TIM3_MspInit 1 */

		/* USER CODE END TIM3_MspInit 1 */
	}

}
 80031f4:	e038      	b.n	8003268 <HAL_TIM_Base_MspInit+0xe4>
	} else if (htim_base->Instance == TIM2) {
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031fe:	d117      	bne.n	8003230 <HAL_TIM_Base_MspInit+0xac>
		__HAL_RCC_TIM2_CLK_ENABLE();
 8003200:	4b1c      	ldr	r3, [pc, #112]	; (8003274 <HAL_TIM_Base_MspInit+0xf0>)
 8003202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003206:	4a1b      	ldr	r2, [pc, #108]	; (8003274 <HAL_TIM_Base_MspInit+0xf0>)
 8003208:	f043 0301 	orr.w	r3, r3, #1
 800320c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003210:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_TIM_Base_MspInit+0xf0>)
 8003212:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	693b      	ldr	r3, [r7, #16]
		HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800321e:	2200      	movs	r2, #0
 8003220:	2105      	movs	r1, #5
 8003222:	201c      	movs	r0, #28
 8003224:	f002 f8fc 	bl	8005420 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003228:	201c      	movs	r0, #28
 800322a:	f002 f913 	bl	8005454 <HAL_NVIC_EnableIRQ>
}
 800322e:	e01b      	b.n	8003268 <HAL_TIM_Base_MspInit+0xe4>
	} else if (htim_base->Instance == TIM3) {
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a10      	ldr	r2, [pc, #64]	; (8003278 <HAL_TIM_Base_MspInit+0xf4>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d116      	bne.n	8003268 <HAL_TIM_Base_MspInit+0xe4>
		__HAL_RCC_TIM3_CLK_ENABLE();
 800323a:	4b0e      	ldr	r3, [pc, #56]	; (8003274 <HAL_TIM_Base_MspInit+0xf0>)
 800323c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003240:	4a0c      	ldr	r2, [pc, #48]	; (8003274 <HAL_TIM_Base_MspInit+0xf0>)
 8003242:	f043 0302 	orr.w	r3, r3, #2
 8003246:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800324a:	4b0a      	ldr	r3, [pc, #40]	; (8003274 <HAL_TIM_Base_MspInit+0xf0>)
 800324c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	60fb      	str	r3, [r7, #12]
 8003256:	68fb      	ldr	r3, [r7, #12]
		HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	2105      	movs	r1, #5
 800325c:	201d      	movs	r0, #29
 800325e:	f002 f8df 	bl	8005420 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003262:	201d      	movs	r0, #29
 8003264:	f002 f8f6 	bl	8005454 <HAL_NVIC_EnableIRQ>
}
 8003268:	bf00      	nop
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	40010000 	.word	0x40010000
 8003274:	58024400 	.word	0x58024400
 8003278:	40000400 	.word	0x40000400

0800327c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003284:	f107 0314 	add.w	r3, r7, #20
 8003288:	2200      	movs	r2, #0
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	605a      	str	r2, [r3, #4]
 800328e:	609a      	str	r2, [r3, #8]
 8003290:	60da      	str	r2, [r3, #12]
 8003292:	611a      	str	r2, [r3, #16]
	if (htim->Instance == TIM1) {
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a26      	ldr	r2, [pc, #152]	; (8003334 <HAL_TIM_MspPostInit+0xb8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d120      	bne.n	80032e0 <HAL_TIM_MspPostInit+0x64>
		/* USER CODE BEGIN TIM1_MspPostInit 0 */

		/* USER CODE END TIM1_MspPostInit 0 */
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800329e:	4b26      	ldr	r3, [pc, #152]	; (8003338 <HAL_TIM_MspPostInit+0xbc>)
 80032a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032a4:	4a24      	ldr	r2, [pc, #144]	; (8003338 <HAL_TIM_MspPostInit+0xbc>)
 80032a6:	f043 0301 	orr.w	r3, r3, #1
 80032aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032ae:	4b22      	ldr	r3, [pc, #136]	; (8003338 <HAL_TIM_MspPostInit+0xbc>)
 80032b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032b4:	f003 0301 	and.w	r3, r3, #1
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	693b      	ldr	r3, [r7, #16]
		/**TIM1 GPIO Configuration
		 PA8     ------> TIM1_CH1
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8;
 80032bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032c0:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032c2:	2302      	movs	r3, #2
 80032c4:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ca:	2300      	movs	r3, #0
 80032cc:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80032ce:	2301      	movs	r3, #1
 80032d0:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032d2:	f107 0314 	add.w	r3, r7, #20
 80032d6:	4619      	mov	r1, r3
 80032d8:	4818      	ldr	r0, [pc, #96]	; (800333c <HAL_TIM_MspPostInit+0xc0>)
 80032da:	f005 fb0b 	bl	80088f4 <HAL_GPIO_Init>
		/* USER CODE BEGIN TIM2_MspPostInit 1 */

		/* USER CODE END TIM2_MspPostInit 1 */
	}

}
 80032de:	e024      	b.n	800332a <HAL_TIM_MspPostInit+0xae>
	} else if (htim->Instance == TIM2) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032e8:	d11f      	bne.n	800332a <HAL_TIM_MspPostInit+0xae>
		__HAL_RCC_GPIOB_CLK_ENABLE();
 80032ea:	4b13      	ldr	r3, [pc, #76]	; (8003338 <HAL_TIM_MspPostInit+0xbc>)
 80032ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80032f0:	4a11      	ldr	r2, [pc, #68]	; (8003338 <HAL_TIM_MspPostInit+0xbc>)
 80032f2:	f043 0302 	orr.w	r3, r3, #2
 80032f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80032fa:	4b0f      	ldr	r3, [pc, #60]	; (8003338 <HAL_TIM_MspPostInit+0xbc>)
 80032fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	60fb      	str	r3, [r7, #12]
 8003306:	68fb      	ldr	r3, [r7, #12]
		GPIO_InitStruct.Pin = GPIO_PIN_11;
 8003308:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800330c:	617b      	str	r3, [r7, #20]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330e:	2302      	movs	r3, #2
 8003310:	61bb      	str	r3, [r7, #24]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003316:	2300      	movs	r3, #0
 8003318:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800331a:	2301      	movs	r3, #1
 800331c:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800331e:	f107 0314 	add.w	r3, r7, #20
 8003322:	4619      	mov	r1, r3
 8003324:	4806      	ldr	r0, [pc, #24]	; (8003340 <HAL_TIM_MspPostInit+0xc4>)
 8003326:	f005 fae5 	bl	80088f4 <HAL_GPIO_Init>
}
 800332a:	bf00      	nop
 800332c:	3728      	adds	r7, #40	; 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40010000 	.word	0x40010000
 8003338:	58024400 	.word	0x58024400
 800333c:	58020000 	.word	0x58020000
 8003340:	58020400 	.word	0x58020400

08003344 <HAL_UART_MspInit>:
 * @brief UART MSP Initialization
 * This function configures the hardware resources used in this example
 * @param huart: UART handle pointer
 * @retval None
 */
void HAL_UART_MspInit(UART_HandleTypeDef *huart) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b0ba      	sub	sp, #232	; 0xe8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800334c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]
 8003354:	605a      	str	r2, [r3, #4]
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	60da      	str	r2, [r3, #12]
 800335a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 800335c:	f107 0310 	add.w	r3, r7, #16
 8003360:	22c0      	movs	r2, #192	; 0xc0
 8003362:	2100      	movs	r1, #0
 8003364:	4618      	mov	r0, r3
 8003366:	f012 feb1 	bl	80160cc <memset>
	if (huart->Instance == USART1) {
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a41      	ldr	r2, [pc, #260]	; (8003474 <HAL_UART_MspInit+0x130>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d17b      	bne.n	800346c <HAL_UART_MspInit+0x128>

		/* USER CODE END USART1_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003374:	f04f 0201 	mov.w	r2, #1
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	e9c7 2304 	strd	r2, r3, [r7, #16]
		PeriphClkInitStruct.Usart16ClockSelection =
 8003380:	2300      	movs	r3, #0
 8003382:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
				RCC_USART16CLKSOURCE_D2PCLK2;
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8003386:	f107 0310 	add.w	r3, r7, #16
 800338a:	4618      	mov	r0, r3
 800338c:	f007 fb02 	bl	800a994 <HAL_RCCEx_PeriphCLKConfig>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <HAL_UART_MspInit+0x56>
			Error_Handler();
 8003396:	f7ff fbe1 	bl	8002b5c <Error_Handler>
		}

		/* Peripheral clock enable */
		__HAL_RCC_USART1_CLK_ENABLE();
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_UART_MspInit+0x134>)
 800339c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033a0:	4a35      	ldr	r2, [pc, #212]	; (8003478 <HAL_UART_MspInit+0x134>)
 80033a2:	f043 0310 	orr.w	r3, r3, #16
 80033a6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80033aa:	4b33      	ldr	r3, [pc, #204]	; (8003478 <HAL_UART_MspInit+0x134>)
 80033ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80033b0:	f003 0310 	and.w	r3, r3, #16
 80033b4:	60fb      	str	r3, [r7, #12]
 80033b6:	68fb      	ldr	r3, [r7, #12]

		__HAL_RCC_GPIOA_CLK_ENABLE();
 80033b8:	4b2f      	ldr	r3, [pc, #188]	; (8003478 <HAL_UART_MspInit+0x134>)
 80033ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033be:	4a2e      	ldr	r2, [pc, #184]	; (8003478 <HAL_UART_MspInit+0x134>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_UART_MspInit+0x134>)
 80033ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80033ce:	f003 0301 	and.w	r3, r3, #1
 80033d2:	60bb      	str	r3, [r7, #8]
 80033d4:	68bb      	ldr	r3, [r7, #8]
		/**USART1 GPIO Configuration
		 PA9     ------> USART1_TX
		 PA10     ------> USART1_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_9 | GPIO_PIN_10;
 80033d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80033da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033de:	2302      	movs	r3, #2
 80033e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033e4:	2300      	movs	r3, #0
 80033e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033ea:	2300      	movs	r3, #0
 80033ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033f0:	2307      	movs	r3, #7
 80033f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033f6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80033fa:	4619      	mov	r1, r3
 80033fc:	481f      	ldr	r0, [pc, #124]	; (800347c <HAL_UART_MspInit+0x138>)
 80033fe:	f005 fa79 	bl	80088f4 <HAL_GPIO_Init>

		/* USART1 DMA Init */
		/* USART1_TX Init */
		hdma_usart1_tx.Instance = DMA1_Stream2;
 8003402:	4b1f      	ldr	r3, [pc, #124]	; (8003480 <HAL_UART_MspInit+0x13c>)
 8003404:	4a1f      	ldr	r2, [pc, #124]	; (8003484 <HAL_UART_MspInit+0x140>)
 8003406:	601a      	str	r2, [r3, #0]
		hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8003408:	4b1d      	ldr	r3, [pc, #116]	; (8003480 <HAL_UART_MspInit+0x13c>)
 800340a:	222a      	movs	r2, #42	; 0x2a
 800340c:	605a      	str	r2, [r3, #4]
		hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800340e:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_UART_MspInit+0x13c>)
 8003410:	2240      	movs	r2, #64	; 0x40
 8003412:	609a      	str	r2, [r3, #8]
		hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003414:	4b1a      	ldr	r3, [pc, #104]	; (8003480 <HAL_UART_MspInit+0x13c>)
 8003416:	2200      	movs	r2, #0
 8003418:	60da      	str	r2, [r3, #12]
		hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800341a:	4b19      	ldr	r3, [pc, #100]	; (8003480 <HAL_UART_MspInit+0x13c>)
 800341c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003420:	611a      	str	r2, [r3, #16]
		hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003422:	4b17      	ldr	r3, [pc, #92]	; (8003480 <HAL_UART_MspInit+0x13c>)
 8003424:	2200      	movs	r2, #0
 8003426:	615a      	str	r2, [r3, #20]
		hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003428:	4b15      	ldr	r3, [pc, #84]	; (8003480 <HAL_UART_MspInit+0x13c>)
 800342a:	2200      	movs	r2, #0
 800342c:	619a      	str	r2, [r3, #24]
		hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800342e:	4b14      	ldr	r3, [pc, #80]	; (8003480 <HAL_UART_MspInit+0x13c>)
 8003430:	2200      	movs	r2, #0
 8003432:	61da      	str	r2, [r3, #28]
		hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003434:	4b12      	ldr	r3, [pc, #72]	; (8003480 <HAL_UART_MspInit+0x13c>)
 8003436:	2200      	movs	r2, #0
 8003438:	621a      	str	r2, [r3, #32]
		hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800343a:	4b11      	ldr	r3, [pc, #68]	; (8003480 <HAL_UART_MspInit+0x13c>)
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
		if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK) {
 8003440:	480f      	ldr	r0, [pc, #60]	; (8003480 <HAL_UART_MspInit+0x13c>)
 8003442:	f002 fc1b 	bl	8005c7c <HAL_DMA_Init>
 8003446:	4603      	mov	r3, r0
 8003448:	2b00      	cmp	r3, #0
 800344a:	d001      	beq.n	8003450 <HAL_UART_MspInit+0x10c>
			Error_Handler();
 800344c:	f7ff fb86 	bl	8002b5c <Error_Handler>
		}

		__HAL_LINKDMA(huart, hdmatx, hdma_usart1_tx);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a0b      	ldr	r2, [pc, #44]	; (8003480 <HAL_UART_MspInit+0x13c>)
 8003454:	67da      	str	r2, [r3, #124]	; 0x7c
 8003456:	4a0a      	ldr	r2, [pc, #40]	; (8003480 <HAL_UART_MspInit+0x13c>)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6393      	str	r3, [r2, #56]	; 0x38

		/* USART1 interrupt Init */
		HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800345c:	2200      	movs	r2, #0
 800345e:	2105      	movs	r1, #5
 8003460:	2025      	movs	r0, #37	; 0x25
 8003462:	f001 ffdd 	bl	8005420 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003466:	2025      	movs	r0, #37	; 0x25
 8003468:	f001 fff4 	bl	8005454 <HAL_NVIC_EnableIRQ>
		/* USER CODE BEGIN USART1_MspInit 1 */

		/* USER CODE END USART1_MspInit 1 */
	}

}
 800346c:	bf00      	nop
 800346e:	37e8      	adds	r7, #232	; 0xe8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40011000 	.word	0x40011000
 8003478:	58024400 	.word	0x58024400
 800347c:	58020000 	.word	0x58020000
 8003480:	24000680 	.word	0x24000680
 8003484:	40020040 	.word	0x40020040

08003488 <HAL_InitTick>:
 * @note   This function is called  automatically at the beginning of program after
 *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
 * @param  TickPriority: Tick interrupt priority.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b090      	sub	sp, #64	; 0x40
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	uint32_t uwTimclock, uwAPB1Prescaler;

	uint32_t uwPrescalerValue;
	uint32_t pFLatency;
	/*Configure the TIM6 IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b0f      	cmp	r3, #15
 8003494:	d827      	bhi.n	80034e6 <HAL_InitTick+0x5e>
		HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003496:	2200      	movs	r2, #0
 8003498:	6879      	ldr	r1, [r7, #4]
 800349a:	2036      	movs	r0, #54	; 0x36
 800349c:	f001 ffc0 	bl	8005420 <HAL_NVIC_SetPriority>

		/* Enable the TIM6 global Interrupt */
		HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80034a0:	2036      	movs	r0, #54	; 0x36
 80034a2:	f001 ffd7 	bl	8005454 <HAL_NVIC_EnableIRQ>
		uwTickPrio = TickPriority;
 80034a6:	4a29      	ldr	r2, [pc, #164]	; (800354c <HAL_InitTick+0xc4>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Enable TIM6 clock */
	__HAL_RCC_TIM6_CLK_ENABLE();
 80034ac:	4b28      	ldr	r3, [pc, #160]	; (8003550 <HAL_InitTick+0xc8>)
 80034ae:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034b2:	4a27      	ldr	r2, [pc, #156]	; (8003550 <HAL_InitTick+0xc8>)
 80034b4:	f043 0310 	orr.w	r3, r3, #16
 80034b8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034bc:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_InitTick+0xc8>)
 80034be:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034c2:	f003 0310 	and.w	r3, r3, #16
 80034c6:	60fb      	str	r3, [r7, #12]
 80034c8:	68fb      	ldr	r3, [r7, #12]

	/* Get clock configuration */
	HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80034ca:	f107 0210 	add.w	r2, r7, #16
 80034ce:	f107 0314 	add.w	r3, r7, #20
 80034d2:	4611      	mov	r1, r2
 80034d4:	4618      	mov	r0, r3
 80034d6:	f007 fa1b 	bl	800a910 <HAL_RCC_GetClockConfig>

	/* Get APB1 prescaler */
	uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80034da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034dc:	63bb      	str	r3, [r7, #56]	; 0x38
	/* Compute TIM6 clock */
	if (uwAPB1Prescaler == RCC_HCLK_DIV1) {
 80034de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d106      	bne.n	80034f2 <HAL_InitTick+0x6a>
 80034e4:	e001      	b.n	80034ea <HAL_InitTick+0x62>
		return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e02b      	b.n	8003542 <HAL_InitTick+0xba>
		uwTimclock = HAL_RCC_GetPCLK1Freq();
 80034ea:	f007 f9e5 	bl	800a8b8 <HAL_RCC_GetPCLK1Freq>
 80034ee:	63f8      	str	r0, [r7, #60]	; 0x3c
 80034f0:	e004      	b.n	80034fc <HAL_InitTick+0x74>
	} else {
		uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80034f2:	f007 f9e1 	bl	800a8b8 <HAL_RCC_GetPCLK1Freq>
 80034f6:	4603      	mov	r3, r0
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
	}

	/* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
	uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80034fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80034fe:	4a15      	ldr	r2, [pc, #84]	; (8003554 <HAL_InitTick+0xcc>)
 8003500:	fba2 2303 	umull	r2, r3, r2, r3
 8003504:	0c9b      	lsrs	r3, r3, #18
 8003506:	3b01      	subs	r3, #1
 8003508:	637b      	str	r3, [r7, #52]	; 0x34

	/* Initialize TIM6 */
	htim6.Instance = TIM6;
 800350a:	4b13      	ldr	r3, [pc, #76]	; (8003558 <HAL_InitTick+0xd0>)
 800350c:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_InitTick+0xd4>)
 800350e:	601a      	str	r2, [r3, #0]
	 + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
	 + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
	 + ClockDivision = 0
	 + Counter direction = Up
	 */
	htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003510:	4b11      	ldr	r3, [pc, #68]	; (8003558 <HAL_InitTick+0xd0>)
 8003512:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003516:	60da      	str	r2, [r3, #12]
	htim6.Init.Prescaler = uwPrescalerValue;
 8003518:	4a0f      	ldr	r2, [pc, #60]	; (8003558 <HAL_InitTick+0xd0>)
 800351a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800351c:	6053      	str	r3, [r2, #4]
	htim6.Init.ClockDivision = 0;
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_InitTick+0xd0>)
 8003520:	2200      	movs	r2, #0
 8003522:	611a      	str	r2, [r3, #16]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003524:	4b0c      	ldr	r3, [pc, #48]	; (8003558 <HAL_InitTick+0xd0>)
 8003526:	2200      	movs	r2, #0
 8003528:	609a      	str	r2, [r3, #8]

	if (HAL_TIM_Base_Init(&htim6) == HAL_OK) {
 800352a:	480b      	ldr	r0, [pc, #44]	; (8003558 <HAL_InitTick+0xd0>)
 800352c:	f00a fea3 	bl	800e276 <HAL_TIM_Base_Init>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d104      	bne.n	8003540 <HAL_InitTick+0xb8>
		/* Start the TIM time Base generation in interrupt mode */
		return HAL_TIM_Base_Start_IT(&htim6);
 8003536:	4808      	ldr	r0, [pc, #32]	; (8003558 <HAL_InitTick+0xd0>)
 8003538:	f00a fef4 	bl	800e324 <HAL_TIM_Base_Start_IT>
 800353c:	4603      	mov	r3, r0
 800353e:	e000      	b.n	8003542 <HAL_InitTick+0xba>
	}

	/* Return function status */
	return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
}
 8003542:	4618      	mov	r0, r3
 8003544:	3740      	adds	r7, #64	; 0x40
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	24000098 	.word	0x24000098
 8003550:	58024400 	.word	0x58024400
 8003554:	431bde83 	.word	0x431bde83
 8003558:	24001058 	.word	0x24001058
 800355c:	40001000 	.word	0x40001000

08003560 <NMI_Handler>:
/*           Cortex Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8003564:	e7fe      	b.n	8003564 <NMI_Handler+0x4>

08003566 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8003566:	b480      	push	{r7}
 8003568:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 800356a:	e7fe      	b.n	800356a <HardFault_Handler+0x4>

0800356c <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 800356c:	b480      	push	{r7}
 800356e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8003570:	e7fe      	b.n	8003570 <MemManage_Handler+0x4>

08003572 <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8003572:	b480      	push	{r7}
 8003574:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8003576:	e7fe      	b.n	8003576 <BusFault_Handler+0x4>

08003578 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8003578:	b480      	push	{r7}
 800357a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 800357c:	e7fe      	b.n	800357c <UsageFault_Handler+0x4>

0800357e <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 800357e:	b480      	push	{r7}
 8003580:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <DMA1_Stream0_IRQHandler>:
/******************************************************************************/

/**
 * @brief This function handles DMA1 stream0 global interrupt.
 */
void DMA1_Stream0_IRQHandler(void) {
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

	/* USER CODE END DMA1_Stream0_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc1);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <DMA1_Stream0_IRQHandler+0x10>)
 8003592:	f003 fe9d 	bl	80072d0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

	/* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	24000204 	.word	0x24000204

080035a0 <DMA1_Stream1_IRQHandler>:

/**
 * @brief This function handles DMA1 stream1 global interrupt.
 */
void DMA1_Stream1_IRQHandler(void) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

	/* USER CODE END DMA1_Stream1_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_adc3);
 80035a4:	4802      	ldr	r0, [pc, #8]	; (80035b0 <DMA1_Stream1_IRQHandler+0x10>)
 80035a6:	f003 fe93 	bl	80072d0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

	/* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80035aa:	bf00      	nop
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	2400027c 	.word	0x2400027c

080035b4 <DMA1_Stream2_IRQHandler>:

/**
 * @brief This function handles DMA1 stream2 global interrupt.
 */
void DMA1_Stream2_IRQHandler(void) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

	/* USER CODE END DMA1_Stream2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80035b8:	4802      	ldr	r0, [pc, #8]	; (80035c4 <DMA1_Stream2_IRQHandler+0x10>)
 80035ba:	f003 fe89 	bl	80072d0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

	/* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80035be:	bf00      	nop
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	24000680 	.word	0x24000680

080035c8 <DMA1_Stream5_IRQHandler>:

/**
 * @brief This function handles DMA1 stream5 global interrupt.
 */
void DMA1_Stream5_IRQHandler(void) {
 80035c8:	b580      	push	{r7, lr}
 80035ca:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

	/* USER CODE END DMA1_Stream5_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80035cc:	4802      	ldr	r0, [pc, #8]	; (80035d8 <DMA1_Stream5_IRQHandler+0x10>)
 80035ce:	f003 fe7f 	bl	80072d0 <HAL_DMA_IRQHandler>
	/* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

	/* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80035d2:	bf00      	nop
 80035d4:	bd80      	pop	{r7, pc}
 80035d6:	bf00      	nop
 80035d8:	24000308 	.word	0x24000308

080035dc <TIM1_BRK_IRQHandler>:

/**
 * @brief This function handles TIM1 break interrupt.
 */
void TIM1_BRK_IRQHandler(void) {
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_BRK_IRQn 0 */

	/* USER CODE END TIM1_BRK_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80035e0:	4802      	ldr	r0, [pc, #8]	; (80035ec <TIM1_BRK_IRQHandler+0x10>)
 80035e2:	f00b f9b6 	bl	800e952 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_BRK_IRQn 1 */

	/* USER CODE END TIM1_BRK_IRQn 1 */
}
 80035e6:	bf00      	nop
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	24000508 	.word	0x24000508

080035f0 <TIM1_UP_IRQHandler>:

/**
 * @brief This function handles TIM1 update interrupt.
 */
void TIM1_UP_IRQHandler(void) {
 80035f0:	b580      	push	{r7, lr}
 80035f2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_UP_IRQn 0 */

	/* USER CODE END TIM1_UP_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 80035f4:	4802      	ldr	r0, [pc, #8]	; (8003600 <TIM1_UP_IRQHandler+0x10>)
 80035f6:	f00b f9ac 	bl	800e952 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_UP_IRQn 1 */

	/* USER CODE END TIM1_UP_IRQn 1 */
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
 80035fe:	bf00      	nop
 8003600:	24000508 	.word	0x24000508

08003604 <TIM1_TRG_COM_IRQHandler>:

/**
 * @brief This function handles TIM1 trigger and commutation interrupts.
 */
void TIM1_TRG_COM_IRQHandler(void) {
 8003604:	b580      	push	{r7, lr}
 8003606:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

	/* USER CODE END TIM1_TRG_COM_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 8003608:	4802      	ldr	r0, [pc, #8]	; (8003614 <TIM1_TRG_COM_IRQHandler+0x10>)
 800360a:	f00b f9a2 	bl	800e952 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

	/* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 800360e:	bf00      	nop
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	24000508 	.word	0x24000508

08003618 <TIM1_CC_IRQHandler>:

/**
 * @brief This function handles TIM1 capture compare interrupt.
 */
void TIM1_CC_IRQHandler(void) {
 8003618:	b580      	push	{r7, lr}
 800361a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM1_CC_IRQn 0 */

	/* USER CODE END TIM1_CC_IRQn 0 */
	HAL_TIM_IRQHandler(&htim1);
 800361c:	4802      	ldr	r0, [pc, #8]	; (8003628 <TIM1_CC_IRQHandler+0x10>)
 800361e:	f00b f998 	bl	800e952 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM1_CC_IRQn 1 */

	/* USER CODE END TIM1_CC_IRQn 1 */
}
 8003622:	bf00      	nop
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	24000508 	.word	0x24000508

0800362c <TIM2_IRQHandler>:

/**
 * @brief This function handles TIM2 global interrupt.
 */
void TIM2_IRQHandler(void) {
 800362c:	b580      	push	{r7, lr}
 800362e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM2_IRQn 0 */

	/* USER CODE END TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8003630:	4802      	ldr	r0, [pc, #8]	; (800363c <TIM2_IRQHandler+0x10>)
 8003632:	f00b f98e 	bl	800e952 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM2_IRQn 1 */

	/* USER CODE END TIM2_IRQn 1 */
}
 8003636:	bf00      	nop
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	24000554 	.word	0x24000554

08003640 <TIM3_IRQHandler>:

/**
 * @brief This function handles TIM3 global interrupt.
 */
void TIM3_IRQHandler(void) {
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM3_IRQn 0 */

	/* USER CODE END TIM3_IRQn 0 */
	HAL_TIM_IRQHandler(&htim3);
 8003644:	4802      	ldr	r0, [pc, #8]	; (8003650 <TIM3_IRQHandler+0x10>)
 8003646:	f00b f984 	bl	800e952 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM3_IRQn 1 */

	/* USER CODE END TIM3_IRQn 1 */
}
 800364a:	bf00      	nop
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	240005a0 	.word	0x240005a0

08003654 <USART1_IRQHandler>:

/**
 * @brief This function handles USART1 global interrupt.
 */
void USART1_IRQHandler(void) {
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN USART1_IRQn 0 */

	/* USER CODE END USART1_IRQn 0 */
	HAL_UART_IRQHandler(&huart1);
 8003658:	4802      	ldr	r0, [pc, #8]	; (8003664 <USART1_IRQHandler+0x10>)
 800365a:	f00c fc87 	bl	800ff6c <HAL_UART_IRQHandler>
	/* USER CODE BEGIN USART1_IRQn 1 */

	/* USER CODE END USART1_IRQn 1 */
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	240005ec 	.word	0x240005ec

08003668 <TIM6_DAC_IRQHandler>:

/**
 * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
 */
void TIM6_DAC_IRQHandler(void) {
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN TIM6_DAC_IRQn 0 */

	/* USER CODE END TIM6_DAC_IRQn 0 */
	if (hdac1.State != HAL_DAC_STATE_RESET) {
 800366c:	4b06      	ldr	r3, [pc, #24]	; (8003688 <TIM6_DAC_IRQHandler+0x20>)
 800366e:	791b      	ldrb	r3, [r3, #4]
 8003670:	b2db      	uxtb	r3, r3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <TIM6_DAC_IRQHandler+0x14>
		HAL_DAC_IRQHandler(&hdac1);
 8003676:	4804      	ldr	r0, [pc, #16]	; (8003688 <TIM6_DAC_IRQHandler+0x20>)
 8003678:	f002 f881 	bl	800577e <HAL_DAC_IRQHandler>
	}
	HAL_TIM_IRQHandler(&htim6);
 800367c:	4803      	ldr	r0, [pc, #12]	; (800368c <TIM6_DAC_IRQHandler+0x24>)
 800367e:	f00b f968 	bl	800e952 <HAL_TIM_IRQHandler>
	/* USER CODE BEGIN TIM6_DAC_IRQn 1 */

	/* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003682:	bf00      	nop
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	240002f4 	.word	0x240002f4
 800368c:	24001058 	.word	0x24001058

08003690 <ITM_SendChar>:
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	71fb      	strb	r3, [r7, #7]
 800369a:	4b0f      	ldr	r3, [pc, #60]	; (80036d8 <ITM_SendChar+0x48>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a0e      	ldr	r2, [pc, #56]	; (80036d8 <ITM_SendChar+0x48>)
 80036a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	4b0d      	ldr	r3, [pc, #52]	; (80036dc <ITM_SendChar+0x4c>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a0c      	ldr	r2, [pc, #48]	; (80036dc <ITM_SendChar+0x4c>)
 80036ac:	f043 0301 	orr.w	r3, r3, #1
 80036b0:	6013      	str	r3, [r2, #0]
 80036b2:	bf00      	nop
 80036b4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f8      	beq.n	80036b4 <ITM_SendChar+0x24>
 80036c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80036c6:	79fb      	ldrb	r3, [r7, #7]
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	bf00      	nop
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	e000edfc 	.word	0xe000edfc
 80036dc:	e0000e00 	.word	0xe0000e00

080036e0 <_read>:
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
 80036f0:	e00a      	b.n	8003708 <_read+0x28>
 80036f2:	f3af 8000 	nop.w
 80036f6:	4601      	mov	r1, r0
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	60ba      	str	r2, [r7, #8]
 80036fe:	b2ca      	uxtb	r2, r1
 8003700:	701a      	strb	r2, [r3, #0]
 8003702:	697b      	ldr	r3, [r7, #20]
 8003704:	3301      	adds	r3, #1
 8003706:	617b      	str	r3, [r7, #20]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	429a      	cmp	r2, r3
 800370e:	dbf0      	blt.n	80036f2 <_read+0x12>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <_write>:
 800371a:	b580      	push	{r7, lr}
 800371c:	b086      	sub	sp, #24
 800371e:	af00      	add	r7, sp, #0
 8003720:	60f8      	str	r0, [r7, #12]
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	607a      	str	r2, [r7, #4]
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	e009      	b.n	8003740 <_write+0x26>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	1c5a      	adds	r2, r3, #1
 8003730:	60ba      	str	r2, [r7, #8]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff ffab 	bl	8003690 <ITM_SendChar>
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	3301      	adds	r3, #1
 800373e:	617b      	str	r3, [r7, #20]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	429a      	cmp	r2, r3
 8003746:	dbf1      	blt.n	800372c <_write+0x12>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4618      	mov	r0, r3
 800374c:	3718      	adds	r7, #24
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_close>:
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <_fstat>:
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800377a:	605a      	str	r2, [r3, #4]
 800377c:	2300      	movs	r3, #0
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <_isatty>:
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	2301      	movs	r3, #1
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_lseek>:
 80037a0:	b480      	push	{r7}
 80037a2:	b085      	sub	sp, #20
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	60f8      	str	r0, [r7, #12]
 80037a8:	60b9      	str	r1, [r7, #8]
 80037aa:	607a      	str	r2, [r7, #4]
 80037ac:	2300      	movs	r3, #0
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr
	...

080037bc <_sbrk>:
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	4a14      	ldr	r2, [pc, #80]	; (8003818 <_sbrk+0x5c>)
 80037c6:	4b15      	ldr	r3, [pc, #84]	; (800381c <_sbrk+0x60>)
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	613b      	str	r3, [r7, #16]
 80037d0:	4b13      	ldr	r3, [pc, #76]	; (8003820 <_sbrk+0x64>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d102      	bne.n	80037de <_sbrk+0x22>
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <_sbrk+0x64>)
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <_sbrk+0x68>)
 80037dc:	601a      	str	r2, [r3, #0]
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <_sbrk+0x64>)
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	4413      	add	r3, r2
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	429a      	cmp	r2, r3
 80037ea:	d207      	bcs.n	80037fc <_sbrk+0x40>
 80037ec:	f012 fc26 	bl	801603c <__errno>
 80037f0:	4603      	mov	r3, r0
 80037f2:	220c      	movs	r2, #12
 80037f4:	601a      	str	r2, [r3, #0]
 80037f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037fa:	e009      	b.n	8003810 <_sbrk+0x54>
 80037fc:	4b08      	ldr	r3, [pc, #32]	; (8003820 <_sbrk+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]
 8003802:	4b07      	ldr	r3, [pc, #28]	; (8003820 <_sbrk+0x64>)
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4413      	add	r3, r2
 800380a:	4a05      	ldr	r2, [pc, #20]	; (8003820 <_sbrk+0x64>)
 800380c:	6013      	str	r3, [r2, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	24080000 	.word	0x24080000
 800381c:	00000400 	.word	0x00000400
 8003820:	240010a4 	.word	0x240010a4
 8003824:	24005a10 	.word	0x24005a10

08003828 <SystemInit>:
 *         Initialize the FPU setting and  vector table location
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << (10 * 2)) | (3UL << (11 * 2))); /* set CP10 and CP11 Full Access */
 800382c:	4b37      	ldr	r3, [pc, #220]	; (800390c <SystemInit+0xe4>)
 800382e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003832:	4a36      	ldr	r2, [pc, #216]	; (800390c <SystemInit+0xe4>)
 8003834:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
	/* Reset the RCC clock configuration to the default reset state ------------*/

	/* Increasing the CPU frequency */
	if (FLASH_LATENCY_DEFAULT > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 800383c:	4b34      	ldr	r3, [pc, #208]	; (8003910 <SystemInit+0xe8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 030f 	and.w	r3, r3, #15
 8003844:	2b06      	cmp	r3, #6
 8003846:	d807      	bhi.n	8003858 <SystemInit+0x30>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003848:	4b31      	ldr	r3, [pc, #196]	; (8003910 <SystemInit+0xe8>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f023 030f 	bic.w	r3, r3, #15
 8003850:	4a2f      	ldr	r2, [pc, #188]	; (8003910 <SystemInit+0xe8>)
 8003852:	f043 0307 	orr.w	r3, r3, #7
 8003856:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

	/* Set HSION bit */
	RCC->CR |= RCC_CR_HSION;
 8003858:	4b2e      	ldr	r3, [pc, #184]	; (8003914 <SystemInit+0xec>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2d      	ldr	r2, [pc, #180]	; (8003914 <SystemInit+0xec>)
 800385e:	f043 0301 	orr.w	r3, r3, #1
 8003862:	6013      	str	r3, [r2, #0]

	/* Reset CFGR register */
	RCC->CFGR = 0x00000000;
 8003864:	4b2b      	ldr	r3, [pc, #172]	; (8003914 <SystemInit+0xec>)
 8003866:	2200      	movs	r2, #0
 8003868:	611a      	str	r2, [r3, #16]

	/* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
	RCC->CR &= 0xEAF6ED7FU;
 800386a:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <SystemInit+0xec>)
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	4929      	ldr	r1, [pc, #164]	; (8003914 <SystemInit+0xec>)
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <SystemInit+0xf0>)
 8003872:	4013      	ands	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLASH_LATENCY_DEFAULT < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))) {
 8003876:	4b26      	ldr	r3, [pc, #152]	; (8003910 <SystemInit+0xe8>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0308 	and.w	r3, r3, #8
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <SystemInit+0x6a>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY,
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <SystemInit+0xe8>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f023 030f 	bic.w	r3, r3, #15
 800388a:	4a21      	ldr	r2, [pc, #132]	; (8003910 <SystemInit+0xe8>)
 800388c:	f043 0307 	orr.w	r3, r3, #7
 8003890:	6013      	str	r3, [r2, #0]
				(uint32_t)(FLASH_LATENCY_DEFAULT));
	}

#if defined(D3_SRAM_BASE)
	/* Reset D1CFGR register */
	RCC->D1CFGR = 0x00000000;
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <SystemInit+0xec>)
 8003894:	2200      	movs	r2, #0
 8003896:	619a      	str	r2, [r3, #24]

	/* Reset D2CFGR register */
	RCC->D2CFGR = 0x00000000;
 8003898:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <SystemInit+0xec>)
 800389a:	2200      	movs	r2, #0
 800389c:	61da      	str	r2, [r3, #28]

	/* Reset D3CFGR register */
	RCC->D3CFGR = 0x00000000;
 800389e:	4b1d      	ldr	r3, [pc, #116]	; (8003914 <SystemInit+0xec>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	621a      	str	r2, [r3, #32]

	/* Reset SRDCFGR register */
	RCC->SRDCFGR = 0x00000000;
#endif
	/* Reset PLLCKSELR register */
	RCC->PLLCKSELR = 0x02020200;
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <SystemInit+0xec>)
 80038a6:	4a1d      	ldr	r2, [pc, #116]	; (800391c <SystemInit+0xf4>)
 80038a8:	629a      	str	r2, [r3, #40]	; 0x28

	/* Reset PLLCFGR register */
	RCC->PLLCFGR = 0x01FF0000;
 80038aa:	4b1a      	ldr	r3, [pc, #104]	; (8003914 <SystemInit+0xec>)
 80038ac:	4a1c      	ldr	r2, [pc, #112]	; (8003920 <SystemInit+0xf8>)
 80038ae:	62da      	str	r2, [r3, #44]	; 0x2c
	/* Reset PLL1DIVR register */
	RCC->PLL1DIVR = 0x01010280;
 80038b0:	4b18      	ldr	r3, [pc, #96]	; (8003914 <SystemInit+0xec>)
 80038b2:	4a1c      	ldr	r2, [pc, #112]	; (8003924 <SystemInit+0xfc>)
 80038b4:	631a      	str	r2, [r3, #48]	; 0x30
	/* Reset PLL1FRACR register */
	RCC->PLL1FRACR = 0x00000000;
 80038b6:	4b17      	ldr	r3, [pc, #92]	; (8003914 <SystemInit+0xec>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	635a      	str	r2, [r3, #52]	; 0x34

	/* Reset PLL2DIVR register */
	RCC->PLL2DIVR = 0x01010280;
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <SystemInit+0xec>)
 80038be:	4a19      	ldr	r2, [pc, #100]	; (8003924 <SystemInit+0xfc>)
 80038c0:	639a      	str	r2, [r3, #56]	; 0x38

	/* Reset PLL2FRACR register */

	RCC->PLL2FRACR = 0x00000000;
 80038c2:	4b14      	ldr	r3, [pc, #80]	; (8003914 <SystemInit+0xec>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	63da      	str	r2, [r3, #60]	; 0x3c
	/* Reset PLL3DIVR register */
	RCC->PLL3DIVR = 0x01010280;
 80038c8:	4b12      	ldr	r3, [pc, #72]	; (8003914 <SystemInit+0xec>)
 80038ca:	4a16      	ldr	r2, [pc, #88]	; (8003924 <SystemInit+0xfc>)
 80038cc:	641a      	str	r2, [r3, #64]	; 0x40

	/* Reset PLL3FRACR register */
	RCC->PLL3FRACR = 0x00000000;
 80038ce:	4b11      	ldr	r3, [pc, #68]	; (8003914 <SystemInit+0xec>)
 80038d0:	2200      	movs	r2, #0
 80038d2:	645a      	str	r2, [r3, #68]	; 0x44

	/* Reset HSEBYP bit */
	RCC->CR &= 0xFFFBFFFFU;
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <SystemInit+0xec>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <SystemInit+0xec>)
 80038da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038de:	6013      	str	r3, [r2, #0]

	/* Disable all interrupts */
	RCC->CIER = 0x00000000;
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <SystemInit+0xec>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
	/* dual core CM7 or single core line */
	if ((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U) {
 80038e6:	4b10      	ldr	r3, [pc, #64]	; (8003928 <SystemInit+0x100>)
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	4b10      	ldr	r3, [pc, #64]	; (800392c <SystemInit+0x104>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038f2:	d202      	bcs.n	80038fa <SystemInit+0xd2>
		/* if stm32h7 revY*/
		/* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
		*((__IO uint32_t*) 0x51008108) = 0x000000001U;
 80038f4:	4b0e      	ldr	r3, [pc, #56]	; (8003930 <SystemInit+0x108>)
 80038f6:	2201      	movs	r2, #1
 80038f8:	601a      	str	r2, [r3, #0]
	/*
	 * Disable the FMC bank1 (enabled after reset).
	 * This, prevents CPU speculation access on this bank which blocks the use of FMC during
	 * 24us. During this time the others FMC master (such as LTDC) cannot use it!
	 */
	FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80038fa:	4b0e      	ldr	r3, [pc, #56]	; (8003934 <SystemInit+0x10c>)
 80038fc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003900:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003902:	bf00      	nop
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	e000ed00 	.word	0xe000ed00
 8003910:	52002000 	.word	0x52002000
 8003914:	58024400 	.word	0x58024400
 8003918:	eaf6ed7f 	.word	0xeaf6ed7f
 800391c:	02020200 	.word	0x02020200
 8003920:	01ff0000 	.word	0x01ff0000
 8003924:	01010280 	.word	0x01010280
 8003928:	5c001000 	.word	0x5c001000
 800392c:	ffff0000 	.word	0xffff0000
 8003930:	51008108 	.word	0x51008108
 8003934:	52004000 	.word	0x52004000

08003938 <Reset_Handler>:
 8003938:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003970 <LoopFillZerobss+0xe>
 800393c:	f7ff ff74 	bl	8003828 <SystemInit>
 8003940:	480c      	ldr	r0, [pc, #48]	; (8003974 <LoopFillZerobss+0x12>)
 8003942:	490d      	ldr	r1, [pc, #52]	; (8003978 <LoopFillZerobss+0x16>)
 8003944:	4a0d      	ldr	r2, [pc, #52]	; (800397c <LoopFillZerobss+0x1a>)
 8003946:	2300      	movs	r3, #0
 8003948:	e002      	b.n	8003950 <LoopCopyDataInit>

0800394a <CopyDataInit>:
 800394a:	58d4      	ldr	r4, [r2, r3]
 800394c:	50c4      	str	r4, [r0, r3]
 800394e:	3304      	adds	r3, #4

08003950 <LoopCopyDataInit>:
 8003950:	18c4      	adds	r4, r0, r3
 8003952:	428c      	cmp	r4, r1
 8003954:	d3f9      	bcc.n	800394a <CopyDataInit>
 8003956:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <LoopFillZerobss+0x1e>)
 8003958:	4c0a      	ldr	r4, [pc, #40]	; (8003984 <LoopFillZerobss+0x22>)
 800395a:	2300      	movs	r3, #0
 800395c:	e001      	b.n	8003962 <LoopFillZerobss>

0800395e <FillZerobss>:
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	3204      	adds	r2, #4

08003962 <LoopFillZerobss>:
 8003962:	42a2      	cmp	r2, r4
 8003964:	d3fb      	bcc.n	800395e <FillZerobss>
 8003966:	f012 fb6f 	bl	8016048 <__libc_init_array>
 800396a:	f7fd fa8d 	bl	8000e88 <main>
 800396e:	4770      	bx	lr
 8003970:	24080000 	.word	0x24080000
 8003974:	24000000 	.word	0x24000000
 8003978:	24000108 	.word	0x24000108
 800397c:	08016f14 	.word	0x08016f14
 8003980:	24000120 	.word	0x24000120
 8003984:	24005a0c 	.word	0x24005a0c

08003988 <ADC3_IRQHandler>:
 8003988:	e7fe      	b.n	8003988 <ADC3_IRQHandler>
	...

0800398c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003992:	2003      	movs	r0, #3
 8003994:	f001 fd39 	bl	800540a <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003998:	f006 fde4 	bl	800a564 <HAL_RCC_GetSysClockFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b15      	ldr	r3, [pc, #84]	; (80039f4 <HAL_Init+0x68>)
 80039a0:	699b      	ldr	r3, [r3, #24]
 80039a2:	0a1b      	lsrs	r3, r3, #8
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	4913      	ldr	r1, [pc, #76]	; (80039f8 <HAL_Init+0x6c>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	f003 031f 	and.w	r3, r3, #31
 80039b0:	fa22 f303 	lsr.w	r3, r2, r3
 80039b4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039b6:	4b0f      	ldr	r3, [pc, #60]	; (80039f4 <HAL_Init+0x68>)
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	4a0e      	ldr	r2, [pc, #56]	; (80039f8 <HAL_Init+0x6c>)
 80039c0:	5cd3      	ldrb	r3, [r2, r3]
 80039c2:	f003 031f 	and.w	r3, r3, #31
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	4a0b      	ldr	r2, [pc, #44]	; (80039fc <HAL_Init+0x70>)
 80039ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039d0:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <HAL_Init+0x74>)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80039d6:	2005      	movs	r0, #5
 80039d8:	f7ff fd56 	bl	8003488 <HAL_InitTick>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e002      	b.n	80039ec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80039e6:	f7ff f8bf 	bl	8002b68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039ea:	2300      	movs	r3, #0
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3708      	adds	r7, #8
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	58024400 	.word	0x58024400
 80039f8:	08016e60 	.word	0x08016e60
 80039fc:	24000094 	.word	0x24000094
 8003a00:	24000090 	.word	0x24000090

08003a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003a08:	4b06      	ldr	r3, [pc, #24]	; (8003a24 <HAL_IncTick+0x20>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	461a      	mov	r2, r3
 8003a0e:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_IncTick+0x24>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4413      	add	r3, r2
 8003a14:	4a04      	ldr	r2, [pc, #16]	; (8003a28 <HAL_IncTick+0x24>)
 8003a16:	6013      	str	r3, [r2, #0]
}
 8003a18:	bf00      	nop
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	2400009c 	.word	0x2400009c
 8003a28:	240010a8 	.word	0x240010a8

08003a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a30:	4b03      	ldr	r3, [pc, #12]	; (8003a40 <HAL_GetTick+0x14>)
 8003a32:	681b      	ldr	r3, [r3, #0]
}
 8003a34:	4618      	mov	r0, r3
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	240010a8 	.word	0x240010a8

08003a44 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003a44:	b480      	push	{r7}
 8003a46:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003a48:	4b03      	ldr	r3, [pc, #12]	; (8003a58 <HAL_GetREVID+0x14>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	0c1b      	lsrs	r3, r3, #16
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	5c001000 	.word	0x5c001000

08003a5c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	43db      	mvns	r3, r3
 8003a6e:	401a      	ands	r2, r3
 8003a70:	4904      	ldr	r1, [pc, #16]	; (8003a84 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	604b      	str	r3, [r1, #4]
}
 8003a78:	bf00      	nop
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	58000400 	.word	0x58000400

08003a88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b083      	sub	sp, #12
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	609a      	str	r2, [r3, #8]
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr

08003aae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003aae:	b480      	push	{r7}
 8003ab0:	b083      	sub	sp, #12
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	431a      	orrs	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	609a      	str	r2, [r3, #8]
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689b      	ldr	r3, [r3, #8]
 8003ae0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr

08003af0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b087      	sub	sp, #28
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	3360      	adds	r3, #96	; 0x60
 8003b02:	461a      	mov	r2, r3
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	4413      	add	r3, r2
 8003b0a:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	430b      	orrs	r3, r1
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	60f8      	str	r0, [r7, #12]
 8003b38:	60b9      	str	r1, [r7, #8]
 8003b3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	f003 031f 	and.w	r3, r3, #31
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	431a      	orrs	r2, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	611a      	str	r2, [r3, #16]
}
 8003b56:	bf00      	nop
 8003b58:	3714      	adds	r7, #20
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr

08003b62 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8003b62:	b480      	push	{r7}
 8003b64:	b087      	sub	sp, #28
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	3360      	adds	r3, #96	; 0x60
 8003b72:	461a      	mov	r2, r3
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	431a      	orrs	r2, r3
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	601a      	str	r2, [r3, #0]
  }
}
 8003b8c:	bf00      	nop
 8003b8e:	371c      	adds	r7, #28
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d101      	bne.n	8003bb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003bac:	2301      	movs	r3, #1
 8003bae:	e000      	b.n	8003bb2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8003bb0:	2300      	movs	r3, #0
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b087      	sub	sp, #28
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	60f8      	str	r0, [r7, #12]
 8003bc6:	60b9      	str	r1, [r7, #8]
 8003bc8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3330      	adds	r3, #48	; 0x30
 8003bce:	461a      	mov	r2, r3
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	0a1b      	lsrs	r3, r3, #8
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	4413      	add	r3, r2
 8003bdc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f003 031f 	and.w	r3, r3, #31
 8003be8:	211f      	movs	r1, #31
 8003bea:	fa01 f303 	lsl.w	r3, r1, r3
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0e9b      	lsrs	r3, r3, #26
 8003bf6:	f003 011f 	and.w	r1, r3, #31
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	f003 031f 	and.w	r3, r3, #31
 8003c00:	fa01 f303 	lsl.w	r3, r1, r3
 8003c04:	431a      	orrs	r2, r3
 8003c06:	697b      	ldr	r3, [r7, #20]
 8003c08:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f023 0203 	bic.w	r2, r3, #3
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	60da      	str	r2, [r3, #12]
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b087      	sub	sp, #28
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	3314      	adds	r3, #20
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	0e5b      	lsrs	r3, r3, #25
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	f003 0304 	and.w	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	0d1b      	lsrs	r3, r3, #20
 8003c64:	f003 031f 	and.w	r3, r3, #31
 8003c68:	2107      	movs	r1, #7
 8003c6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	401a      	ands	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	0d1b      	lsrs	r3, r3, #20
 8003c76:	f003 031f 	and.w	r3, r3, #31
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	431a      	orrs	r2, r3
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003c86:	bf00      	nop
 8003c88:	371c      	adds	r7, #28
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
	...

08003c94 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003ca6:	68bb      	ldr	r3, [r7, #8]
 8003ca8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cac:	43db      	mvns	r3, r3
 8003cae:	401a      	ands	r2, r3
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f003 0318 	and.w	r3, r3, #24
 8003cb6:	4908      	ldr	r1, [pc, #32]	; (8003cd8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003cb8:	40d9      	lsrs	r1, r3
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	400b      	ands	r3, r1
 8003cbe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003cc2:	431a      	orrs	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	000fffff 	.word	0x000fffff

08003cdc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 031f 	and.w	r3, r3, #31
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	4b04      	ldr	r3, [pc, #16]	; (8003d18 <LL_ADC_DisableDeepPowerDown+0x20>)
 8003d06:	4013      	ands	r3, r2
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6093      	str	r3, [r2, #8]
}
 8003d0c:	bf00      	nop
 8003d0e:	370c      	adds	r7, #12
 8003d10:	46bd      	mov	sp, r7
 8003d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d16:	4770      	bx	lr
 8003d18:	5fffffc0 	.word	0x5fffffc0

08003d1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d30:	d101      	bne.n	8003d36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b083      	sub	sp, #12
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <LL_ADC_EnableInternalRegulator+0x24>)
 8003d52:	4013      	ands	r3, r2
 8003d54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003d5c:	bf00      	nop
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	6fffffc0 	.word	0x6fffffc0

08003d6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b083      	sub	sp, #12
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	689b      	ldr	r3, [r3, #8]
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d80:	d101      	bne.n	8003d86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003d82:	2301      	movs	r3, #1
 8003d84:	e000      	b.n	8003d88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	370c      	adds	r7, #12
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d92:	4770      	bx	lr

08003d94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	4b05      	ldr	r3, [pc, #20]	; (8003db8 <LL_ADC_Enable+0x24>)
 8003da2:	4013      	ands	r3, r2
 8003da4:	f043 0201 	orr.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003dac:	bf00      	nop
 8003dae:	370c      	adds	r7, #12
 8003db0:	46bd      	mov	sp, r7
 8003db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db6:	4770      	bx	lr
 8003db8:	7fffffc0 	.word	0x7fffffc0

08003dbc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	689a      	ldr	r2, [r3, #8]
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <LL_ADC_Disable+0x24>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	f043 0202 	orr.w	r2, r3, #2
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	7fffffc0 	.word	0x7fffffc0

08003de4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	f003 0301 	and.w	r3, r3, #1
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d101      	bne.n	8003dfc <LL_ADC_IsEnabled+0x18>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <LL_ADC_IsEnabled+0x1a>
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0302 	and.w	r3, r3, #2
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d101      	bne.n	8003e22 <LL_ADC_IsDisableOngoing+0x18>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <LL_ADC_IsDisableOngoing+0x1a>
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	370c      	adds	r7, #12
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2e:	4770      	bx	lr

08003e30 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	4b05      	ldr	r3, [pc, #20]	; (8003e54 <LL_ADC_REG_StartConversion+0x24>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	f043 0204 	orr.w	r2, r3, #4
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003e48:	bf00      	nop
 8003e4a:	370c      	adds	r7, #12
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr
 8003e54:	7fffffc0 	.word	0x7fffffc0

08003e58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f003 0304 	and.w	r3, r3, #4
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d101      	bne.n	8003e70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e000      	b.n	8003e72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b08      	cmp	r3, #8
 8003e90:	d101      	bne.n	8003e96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003e92:	2301      	movs	r3, #1
 8003e94:	e000      	b.n	8003e98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003e96:	2300      	movs	r3, #0
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	370c      	adds	r7, #12
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ea4:	b590      	push	{r4, r7, lr}
 8003ea6:	b089      	sub	sp, #36	; 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d101      	bne.n	8003ebe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e18f      	b.n	80041de <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f7fe fe69 	bl	8002ba4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7ff ff19 	bl	8003d1c <LL_ADC_IsDeepPowerDownEnabled>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f7ff feff 	bl	8003cf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7ff ff34 	bl	8003d6c <LL_ADC_IsInternalRegulatorEnabled>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d114      	bne.n	8003f34 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4618      	mov	r0, r3
 8003f10:	f7ff ff18 	bl	8003d44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003f14:	4b87      	ldr	r3, [pc, #540]	; (8004134 <HAL_ADC_Init+0x290>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	099b      	lsrs	r3, r3, #6
 8003f1a:	4a87      	ldr	r2, [pc, #540]	; (8004138 <HAL_ADC_Init+0x294>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	099b      	lsrs	r3, r3, #6
 8003f22:	3301      	adds	r3, #1
 8003f24:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f26:	e002      	b.n	8003f2e <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d1f9      	bne.n	8003f28 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff ff17 	bl	8003d6c <LL_ADC_IsInternalRegulatorEnabled>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d10d      	bne.n	8003f60 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f48:	f043 0210 	orr.w	r2, r3, #16
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f043 0201 	orr.w	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7ff ff77 	bl	8003e58 <LL_ADC_REG_IsConversionOngoing>
 8003f6a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f040 8129 	bne.w	80041cc <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f040 8125 	bne.w	80041cc <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f86:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003f8a:	f043 0202 	orr.w	r2, r3, #2
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ff24 	bl	8003de4 <LL_ADC_IsEnabled>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d136      	bne.n	8004010 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a65      	ldr	r2, [pc, #404]	; (800413c <HAL_ADC_Init+0x298>)
 8003fa8:	4293      	cmp	r3, r2
 8003faa:	d004      	beq.n	8003fb6 <HAL_ADC_Init+0x112>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a63      	ldr	r2, [pc, #396]	; (8004140 <HAL_ADC_Init+0x29c>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d10e      	bne.n	8003fd4 <HAL_ADC_Init+0x130>
 8003fb6:	4861      	ldr	r0, [pc, #388]	; (800413c <HAL_ADC_Init+0x298>)
 8003fb8:	f7ff ff14 	bl	8003de4 <LL_ADC_IsEnabled>
 8003fbc:	4604      	mov	r4, r0
 8003fbe:	4860      	ldr	r0, [pc, #384]	; (8004140 <HAL_ADC_Init+0x29c>)
 8003fc0:	f7ff ff10 	bl	8003de4 <LL_ADC_IsEnabled>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	4323      	orrs	r3, r4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	bf0c      	ite	eq
 8003fcc:	2301      	moveq	r3, #1
 8003fce:	2300      	movne	r3, #0
 8003fd0:	b2db      	uxtb	r3, r3
 8003fd2:	e008      	b.n	8003fe6 <HAL_ADC_Init+0x142>
 8003fd4:	485b      	ldr	r0, [pc, #364]	; (8004144 <HAL_ADC_Init+0x2a0>)
 8003fd6:	f7ff ff05 	bl	8003de4 <LL_ADC_IsEnabled>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	bf0c      	ite	eq
 8003fe0:	2301      	moveq	r3, #1
 8003fe2:	2300      	movne	r3, #0
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d012      	beq.n	8004010 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a53      	ldr	r2, [pc, #332]	; (800413c <HAL_ADC_Init+0x298>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d004      	beq.n	8003ffe <HAL_ADC_Init+0x15a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a51      	ldr	r2, [pc, #324]	; (8004140 <HAL_ADC_Init+0x29c>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d101      	bne.n	8004002 <HAL_ADC_Init+0x15e>
 8003ffe:	4a52      	ldr	r2, [pc, #328]	; (8004148 <HAL_ADC_Init+0x2a4>)
 8004000:	e000      	b.n	8004004 <HAL_ADC_Init+0x160>
 8004002:	4a52      	ldr	r2, [pc, #328]	; (800414c <HAL_ADC_Init+0x2a8>)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7ff fd3c 	bl	8003a88 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004010:	f7ff fd18 	bl	8003a44 <HAL_GetREVID>
 8004014:	4603      	mov	r3, r0
 8004016:	f241 0203 	movw	r2, #4099	; 0x1003
 800401a:	4293      	cmp	r3, r2
 800401c:	d914      	bls.n	8004048 <HAL_ADC_Init+0x1a4>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b10      	cmp	r3, #16
 8004024:	d110      	bne.n	8004048 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	7d5b      	ldrb	r3, [r3, #21]
 800402a:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004030:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004036:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	7f1b      	ldrb	r3, [r3, #28]
 800403c:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800403e:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004040:	f043 030c 	orr.w	r3, r3, #12
 8004044:	61bb      	str	r3, [r7, #24]
 8004046:	e00d      	b.n	8004064 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	7d5b      	ldrb	r3, [r3, #21]
 800404c:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004052:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004058:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	7f1b      	ldrb	r3, [r3, #28]
 800405e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004060:	4313      	orrs	r3, r2
 8004062:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	7f1b      	ldrb	r3, [r3, #28]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d106      	bne.n	800407a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	3b01      	subs	r3, #1
 8004072:	045b      	lsls	r3, r3, #17
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4313      	orrs	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	2b00      	cmp	r3, #0
 8004080:	d009      	beq.n	8004096 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004086:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	4313      	orrs	r3, r2
 8004094:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	4b2c      	ldr	r3, [pc, #176]	; (8004150 <HAL_ADC_Init+0x2ac>)
 800409e:	4013      	ands	r3, r2
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	6812      	ldr	r2, [r2, #0]
 80040a4:	69b9      	ldr	r1, [r7, #24]
 80040a6:	430b      	orrs	r3, r1
 80040a8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff fed2 	bl	8003e58 <LL_ADC_REG_IsConversionOngoing>
 80040b4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f7ff fedf 	bl	8003e7e <LL_ADC_INJ_IsConversionOngoing>
 80040c0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d15f      	bne.n	8004188 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d15c      	bne.n	8004188 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	7d1b      	ldrb	r3, [r3, #20]
 80040d2:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80040d8:	4313      	orrs	r3, r2
 80040da:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68da      	ldr	r2, [r3, #12]
 80040e2:	4b1c      	ldr	r3, [pc, #112]	; (8004154 <HAL_ADC_Init+0x2b0>)
 80040e4:	4013      	ands	r3, r2
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6812      	ldr	r2, [r2, #0]
 80040ea:	69b9      	ldr	r1, [r7, #24]
 80040ec:	430b      	orrs	r3, r1
 80040ee:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d130      	bne.n	800415c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691a      	ldr	r2, [r3, #16]
 8004106:	4b14      	ldr	r3, [pc, #80]	; (8004158 <HAL_ADC_Init+0x2b4>)
 8004108:	4013      	ands	r3, r2
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800410e:	3a01      	subs	r2, #1
 8004110:	0411      	lsls	r1, r2, #16
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004116:	4311      	orrs	r1, r2
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800411c:	4311      	orrs	r1, r2
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004122:	430a      	orrs	r2, r1
 8004124:	431a      	orrs	r2, r3
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	611a      	str	r2, [r3, #16]
 8004130:	e01c      	b.n	800416c <HAL_ADC_Init+0x2c8>
 8004132:	bf00      	nop
 8004134:	24000090 	.word	0x24000090
 8004138:	053e2d63 	.word	0x053e2d63
 800413c:	40022000 	.word	0x40022000
 8004140:	40022100 	.word	0x40022100
 8004144:	58026000 	.word	0x58026000
 8004148:	40022300 	.word	0x40022300
 800414c:	58026300 	.word	0x58026300
 8004150:	fff0c003 	.word	0xfff0c003
 8004154:	ffffbffc 	.word	0xffffbffc
 8004158:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 fdec 	bl	8004d60 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b01      	cmp	r3, #1
 800418e:	d10c      	bne.n	80041aa <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	f023 010f 	bic.w	r1, r3, #15
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	699b      	ldr	r3, [r3, #24]
 800419e:	1e5a      	subs	r2, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	631a      	str	r2, [r3, #48]	; 0x30
 80041a8:	e007      	b.n	80041ba <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 020f 	bic.w	r2, r2, #15
 80041b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041be:	f023 0303 	bic.w	r3, r3, #3
 80041c2:	f043 0201 	orr.w	r2, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	655a      	str	r2, [r3, #84]	; 0x54
 80041ca:	e007      	b.n	80041dc <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041d0:	f043 0210 	orr.w	r2, r3, #16
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80041dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3724      	adds	r7, #36	; 0x24
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd90      	pop	{r4, r7, pc}
 80041e6:	bf00      	nop

080041e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	60f8      	str	r0, [r7, #12]
 80041f0:	60b9      	str	r1, [r7, #8]
 80041f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a55      	ldr	r2, [pc, #340]	; (8004350 <HAL_ADC_Start_DMA+0x168>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d004      	beq.n	8004208 <HAL_ADC_Start_DMA+0x20>
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a54      	ldr	r2, [pc, #336]	; (8004354 <HAL_ADC_Start_DMA+0x16c>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d101      	bne.n	800420c <HAL_ADC_Start_DMA+0x24>
 8004208:	4b53      	ldr	r3, [pc, #332]	; (8004358 <HAL_ADC_Start_DMA+0x170>)
 800420a:	e000      	b.n	800420e <HAL_ADC_Start_DMA+0x26>
 800420c:	4b53      	ldr	r3, [pc, #332]	; (800435c <HAL_ADC_Start_DMA+0x174>)
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fd64 	bl	8003cdc <LL_ADC_GetMultimode>
 8004214:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7ff fe1c 	bl	8003e58 <LL_ADC_REG_IsConversionOngoing>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	f040 808c 	bne.w	8004340 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800422e:	2b01      	cmp	r3, #1
 8004230:	d101      	bne.n	8004236 <HAL_ADC_Start_DMA+0x4e>
 8004232:	2302      	movs	r3, #2
 8004234:	e087      	b.n	8004346 <HAL_ADC_Start_DMA+0x15e>
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2201      	movs	r2, #1
 800423a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d005      	beq.n	8004250 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b05      	cmp	r3, #5
 8004248:	d002      	beq.n	8004250 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800424a:	693b      	ldr	r3, [r7, #16]
 800424c:	2b09      	cmp	r3, #9
 800424e:	d170      	bne.n	8004332 <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8004250:	68f8      	ldr	r0, [r7, #12]
 8004252:	f000 fc07 	bl	8004a64 <ADC_Enable>
 8004256:	4603      	mov	r3, r0
 8004258:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 800425a:	7dfb      	ldrb	r3, [r7, #23]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d163      	bne.n	8004328 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004264:	4b3e      	ldr	r3, [pc, #248]	; (8004360 <HAL_ADC_Start_DMA+0x178>)
 8004266:	4013      	ands	r3, r2
 8004268:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a37      	ldr	r2, [pc, #220]	; (8004354 <HAL_ADC_Start_DMA+0x16c>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d002      	beq.n	8004280 <HAL_ADC_Start_DMA+0x98>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	e000      	b.n	8004282 <HAL_ADC_Start_DMA+0x9a>
 8004280:	4b33      	ldr	r3, [pc, #204]	; (8004350 <HAL_ADC_Start_DMA+0x168>)
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	6812      	ldr	r2, [r2, #0]
 8004286:	4293      	cmp	r3, r2
 8004288:	d002      	beq.n	8004290 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d105      	bne.n	800429c <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004294:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d006      	beq.n	80042b6 <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ac:	f023 0206 	bic.w	r2, r3, #6
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	659a      	str	r2, [r3, #88]	; 0x58
 80042b4:	e002      	b.n	80042bc <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c0:	4a28      	ldr	r2, [pc, #160]	; (8004364 <HAL_ADC_Start_DMA+0x17c>)
 80042c2:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c8:	4a27      	ldr	r2, [pc, #156]	; (8004368 <HAL_ADC_Start_DMA+0x180>)
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d0:	4a26      	ldr	r2, [pc, #152]	; (800436c <HAL_ADC_Start_DMA+0x184>)
 80042d2:	64da      	str	r2, [r3, #76]	; 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	221c      	movs	r2, #28
 80042da:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2200      	movs	r2, #0
 80042e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f042 0210 	orr.w	r2, r2, #16
 80042f2:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fc:	4619      	mov	r1, r3
 80042fe:	4610      	mov	r0, r2
 8004300:	f7ff fc89 	bl	8003c16 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3340      	adds	r3, #64	; 0x40
 800430e:	4619      	mov	r1, r3
 8004310:	68ba      	ldr	r2, [r7, #8]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f002 f80e 	bl	8006334 <HAL_DMA_Start_IT>
 8004318:	4603      	mov	r3, r0
 800431a:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff fd85 	bl	8003e30 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8004326:	e00d      	b.n	8004344 <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      if (tmp_hal_status == HAL_OK)
 8004330:	e008      	b.n	8004344 <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800433e:	e001      	b.n	8004344 <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004340:	2302      	movs	r3, #2
 8004342:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004344:	7dfb      	ldrb	r3, [r7, #23]
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	40022000 	.word	0x40022000
 8004354:	40022100 	.word	0x40022100
 8004358:	40022300 	.word	0x40022300
 800435c:	58026300 	.word	0x58026300
 8004360:	fffff0fe 	.word	0xfffff0fe
 8004364:	08004c37 	.word	0x08004c37
 8004368:	08004d0f 	.word	0x08004d0f
 800436c:	08004d2b 	.word	0x08004d2b

08004370 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80043a0:	bf00      	nop
 80043a2:	370c      	adds	r7, #12
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr

080043ac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80043ac:	b590      	push	{r4, r7, lr}
 80043ae:	b0a1      	sub	sp, #132	; 0x84
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80043bc:	2300      	movs	r3, #0
 80043be:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a65      	ldr	r2, [pc, #404]	; (800455c <HAL_ADC_ConfigChannel+0x1b0>)
 80043c6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d101      	bne.n	80043d6 <HAL_ADC_ConfigChannel+0x2a>
 80043d2:	2302      	movs	r3, #2
 80043d4:	e32e      	b.n	8004a34 <HAL_ADC_ConfigChannel+0x688>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4618      	mov	r0, r3
 80043e4:	f7ff fd38 	bl	8003e58 <LL_ADC_REG_IsConversionOngoing>
 80043e8:	4603      	mov	r3, r0
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	f040 8313 	bne.w	8004a16 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	db2c      	blt.n	8004452 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004400:	2b00      	cmp	r3, #0
 8004402:	d108      	bne.n	8004416 <HAL_ADC_ConfigChannel+0x6a>
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	0e9b      	lsrs	r3, r3, #26
 800440a:	f003 031f 	and.w	r3, r3, #31
 800440e:	2201      	movs	r2, #1
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	e016      	b.n	8004444 <HAL_ADC_ConfigChannel+0x98>
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800441c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800441e:	fa93 f3a3 	rbit	r3, r3
 8004422:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004424:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004426:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004428:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800442a:	2b00      	cmp	r3, #0
 800442c:	d101      	bne.n	8004432 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 800442e:	2320      	movs	r3, #32
 8004430:	e003      	b.n	800443a <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8004432:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004434:	fab3 f383 	clz	r3, r3
 8004438:	b2db      	uxtb	r3, r3
 800443a:	f003 031f 	and.w	r3, r3, #31
 800443e:	2201      	movs	r2, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	69d1      	ldr	r1, [r2, #28]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	430b      	orrs	r3, r1
 8004450:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6818      	ldr	r0, [r3, #0]
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	6859      	ldr	r1, [r3, #4]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	461a      	mov	r2, r3
 8004460:	f7ff fbad 	bl	8003bbe <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4618      	mov	r0, r3
 800446a:	f7ff fcf5 	bl	8003e58 <LL_ADC_REG_IsConversionOngoing>
 800446e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f7ff fd02 	bl	8003e7e <LL_ADC_INJ_IsConversionOngoing>
 800447a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800447c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800447e:	2b00      	cmp	r3, #0
 8004480:	f040 80b8 	bne.w	80045f4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004484:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004486:	2b00      	cmp	r3, #0
 8004488:	f040 80b4 	bne.w	80045f4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6818      	ldr	r0, [r3, #0]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	6819      	ldr	r1, [r3, #0]
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	461a      	mov	r2, r3
 800449a:	f7ff fbcf 	bl	8003c3c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800449e:	4b30      	ldr	r3, [pc, #192]	; (8004560 <HAL_ADC_ConfigChannel+0x1b4>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044aa:	d10b      	bne.n	80044c4 <HAL_ADC_ConfigChannel+0x118>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695a      	ldr	r2, [r3, #20]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	089b      	lsrs	r3, r3, #2
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	e01d      	b.n	8004500 <HAL_ADC_ConfigChannel+0x154>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f003 0310 	and.w	r3, r3, #16
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d10b      	bne.n	80044ea <HAL_ADC_ConfigChannel+0x13e>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	695a      	ldr	r2, [r3, #20]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	089b      	lsrs	r3, r3, #2
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	005b      	lsls	r3, r3, #1
 80044e4:	fa02 f303 	lsl.w	r3, r2, r3
 80044e8:	e00a      	b.n	8004500 <HAL_ADC_ConfigChannel+0x154>
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695a      	ldr	r2, [r3, #20]
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	005b      	lsls	r3, r3, #1
 80044fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004500:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	2b04      	cmp	r3, #4
 8004508:	d02c      	beq.n	8004564 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6818      	ldr	r0, [r3, #0]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	6919      	ldr	r1, [r3, #16]
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004518:	f7ff faea 	bl	8003af0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	6919      	ldr	r1, [r3, #16]
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	7e5b      	ldrb	r3, [r3, #25]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d102      	bne.n	8004532 <HAL_ADC_ConfigChannel+0x186>
 800452c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004530:	e000      	b.n	8004534 <HAL_ADC_ConfigChannel+0x188>
 8004532:	2300      	movs	r3, #0
 8004534:	461a      	mov	r2, r3
 8004536:	f7ff fb14 	bl	8003b62 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6919      	ldr	r1, [r3, #16]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	7e1b      	ldrb	r3, [r3, #24]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d102      	bne.n	8004550 <HAL_ADC_ConfigChannel+0x1a4>
 800454a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800454e:	e000      	b.n	8004552 <HAL_ADC_ConfigChannel+0x1a6>
 8004550:	2300      	movs	r3, #0
 8004552:	461a      	mov	r2, r3
 8004554:	f7ff faec 	bl	8003b30 <LL_ADC_SetDataRightShift>
 8004558:	e04c      	b.n	80045f4 <HAL_ADC_ConfigChannel+0x248>
 800455a:	bf00      	nop
 800455c:	47ff0000 	.word	0x47ff0000
 8004560:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800456a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	069b      	lsls	r3, r3, #26
 8004574:	429a      	cmp	r2, r3
 8004576:	d107      	bne.n	8004588 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8004586:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800458e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	069b      	lsls	r3, r3, #26
 8004598:	429a      	cmp	r2, r3
 800459a:	d107      	bne.n	80045ac <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045aa:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	069b      	lsls	r3, r3, #26
 80045bc:	429a      	cmp	r2, r3
 80045be:	d107      	bne.n	80045d0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045ce:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	069b      	lsls	r3, r3, #26
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d107      	bne.n	80045f4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80045f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff fbf3 	bl	8003de4 <LL_ADC_IsEnabled>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	f040 8211 	bne.w	8004a28 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6818      	ldr	r0, [r3, #0]
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	6819      	ldr	r1, [r3, #0]
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	461a      	mov	r2, r3
 8004614:	f7ff fb3e 	bl	8003c94 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	4aa1      	ldr	r2, [pc, #644]	; (80048a4 <HAL_ADC_ConfigChannel+0x4f8>)
 800461e:	4293      	cmp	r3, r2
 8004620:	f040 812e 	bne.w	8004880 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <HAL_ADC_ConfigChannel+0x2a0>
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	0e9b      	lsrs	r3, r3, #26
 800463a:	3301      	adds	r3, #1
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	2b09      	cmp	r3, #9
 8004642:	bf94      	ite	ls
 8004644:	2301      	movls	r3, #1
 8004646:	2300      	movhi	r3, #0
 8004648:	b2db      	uxtb	r3, r3
 800464a:	e019      	b.n	8004680 <HAL_ADC_ConfigChannel+0x2d4>
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004652:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004654:	fa93 f3a3 	rbit	r3, r3
 8004658:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800465a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800465c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800465e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004660:	2b00      	cmp	r3, #0
 8004662:	d101      	bne.n	8004668 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8004664:	2320      	movs	r3, #32
 8004666:	e003      	b.n	8004670 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8004668:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800466a:	fab3 f383 	clz	r3, r3
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3301      	adds	r3, #1
 8004672:	f003 031f 	and.w	r3, r3, #31
 8004676:	2b09      	cmp	r3, #9
 8004678:	bf94      	ite	ls
 800467a:	2301      	movls	r3, #1
 800467c:	2300      	movhi	r3, #0
 800467e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004680:	2b00      	cmp	r3, #0
 8004682:	d079      	beq.n	8004778 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800468c:	2b00      	cmp	r3, #0
 800468e:	d107      	bne.n	80046a0 <HAL_ADC_ConfigChannel+0x2f4>
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	0e9b      	lsrs	r3, r3, #26
 8004696:	3301      	adds	r3, #1
 8004698:	069b      	lsls	r3, r3, #26
 800469a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800469e:	e015      	b.n	80046cc <HAL_ADC_ConfigChannel+0x320>
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046a8:	fa93 f3a3 	rbit	r3, r3
 80046ac:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80046ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80046b0:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80046b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 80046b8:	2320      	movs	r3, #32
 80046ba:	e003      	b.n	80046c4 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 80046bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046be:	fab3 f383 	clz	r3, r3
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	069b      	lsls	r3, r3, #26
 80046c8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <HAL_ADC_ConfigChannel+0x340>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	0e9b      	lsrs	r3, r3, #26
 80046de:	3301      	adds	r3, #1
 80046e0:	f003 031f 	and.w	r3, r3, #31
 80046e4:	2101      	movs	r1, #1
 80046e6:	fa01 f303 	lsl.w	r3, r1, r3
 80046ea:	e017      	b.n	800471c <HAL_ADC_ConfigChannel+0x370>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f4:	fa93 f3a3 	rbit	r3, r3
 80046f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80046fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 8004704:	2320      	movs	r3, #32
 8004706:	e003      	b.n	8004710 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 8004708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470a:	fab3 f383 	clz	r3, r3
 800470e:	b2db      	uxtb	r3, r3
 8004710:	3301      	adds	r3, #1
 8004712:	f003 031f 	and.w	r3, r3, #31
 8004716:	2101      	movs	r1, #1
 8004718:	fa01 f303 	lsl.w	r3, r1, r3
 800471c:	ea42 0103 	orr.w	r1, r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004728:	2b00      	cmp	r3, #0
 800472a:	d10a      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x396>
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	0e9b      	lsrs	r3, r3, #26
 8004732:	3301      	adds	r3, #1
 8004734:	f003 021f 	and.w	r2, r3, #31
 8004738:	4613      	mov	r3, r2
 800473a:	005b      	lsls	r3, r3, #1
 800473c:	4413      	add	r3, r2
 800473e:	051b      	lsls	r3, r3, #20
 8004740:	e018      	b.n	8004774 <HAL_ADC_ConfigChannel+0x3c8>
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	fa93 f3a3 	rbit	r3, r3
 800474e:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	2b00      	cmp	r3, #0
 8004758:	d101      	bne.n	800475e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800475a:	2320      	movs	r3, #32
 800475c:	e003      	b.n	8004766 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	fab3 f383 	clz	r3, r3
 8004764:	b2db      	uxtb	r3, r3
 8004766:	3301      	adds	r3, #1
 8004768:	f003 021f 	and.w	r2, r3, #31
 800476c:	4613      	mov	r3, r2
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	4413      	add	r3, r2
 8004772:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004774:	430b      	orrs	r3, r1
 8004776:	e07e      	b.n	8004876 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004780:	2b00      	cmp	r3, #0
 8004782:	d107      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x3e8>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	0e9b      	lsrs	r3, r3, #26
 800478a:	3301      	adds	r3, #1
 800478c:	069b      	lsls	r3, r3, #26
 800478e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004792:	e015      	b.n	80047c0 <HAL_ADC_ConfigChannel+0x414>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800479a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800479c:	fa93 f3a3 	rbit	r3, r3
 80047a0:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80047a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 80047ac:	2320      	movs	r3, #32
 80047ae:	e003      	b.n	80047b8 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 80047b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b2:	fab3 f383 	clz	r3, r3
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	3301      	adds	r3, #1
 80047ba:	069b      	lsls	r3, r3, #26
 80047bc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d109      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x434>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	0e9b      	lsrs	r3, r3, #26
 80047d2:	3301      	adds	r3, #1
 80047d4:	f003 031f 	and.w	r3, r3, #31
 80047d8:	2101      	movs	r1, #1
 80047da:	fa01 f303 	lsl.w	r3, r1, r3
 80047de:	e017      	b.n	8004810 <HAL_ADC_ConfigChannel+0x464>
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	61bb      	str	r3, [r7, #24]
  return result;
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80047f2:	6a3b      	ldr	r3, [r7, #32]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d101      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80047f8:	2320      	movs	r3, #32
 80047fa:	e003      	b.n	8004804 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80047fc:	6a3b      	ldr	r3, [r7, #32]
 80047fe:	fab3 f383 	clz	r3, r3
 8004802:	b2db      	uxtb	r3, r3
 8004804:	3301      	adds	r3, #1
 8004806:	f003 031f 	and.w	r3, r3, #31
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f303 	lsl.w	r3, r1, r3
 8004810:	ea42 0103 	orr.w	r1, r2, r3
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800481c:	2b00      	cmp	r3, #0
 800481e:	d10d      	bne.n	800483c <HAL_ADC_ConfigChannel+0x490>
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	0e9b      	lsrs	r3, r3, #26
 8004826:	3301      	adds	r3, #1
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	4613      	mov	r3, r2
 800482e:	005b      	lsls	r3, r3, #1
 8004830:	4413      	add	r3, r2
 8004832:	3b1e      	subs	r3, #30
 8004834:	051b      	lsls	r3, r3, #20
 8004836:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800483a:	e01b      	b.n	8004874 <HAL_ADC_ConfigChannel+0x4c8>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	fa93 f3a3 	rbit	r3, r3
 8004848:	60fb      	str	r3, [r7, #12]
  return result;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d101      	bne.n	8004858 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8004854:	2320      	movs	r3, #32
 8004856:	e003      	b.n	8004860 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8004858:	697b      	ldr	r3, [r7, #20]
 800485a:	fab3 f383 	clz	r3, r3
 800485e:	b2db      	uxtb	r3, r3
 8004860:	3301      	adds	r3, #1
 8004862:	f003 021f 	and.w	r2, r3, #31
 8004866:	4613      	mov	r3, r2
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	4413      	add	r3, r2
 800486c:	3b1e      	subs	r3, #30
 800486e:	051b      	lsls	r3, r3, #20
 8004870:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004874:	430b      	orrs	r3, r1
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	6892      	ldr	r2, [r2, #8]
 800487a:	4619      	mov	r1, r3
 800487c:	f7ff f9de 	bl	8003c3c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	f280 80cf 	bge.w	8004a28 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a06      	ldr	r2, [pc, #24]	; (80048a8 <HAL_ADC_ConfigChannel+0x4fc>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_ADC_ConfigChannel+0x4f2>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a04      	ldr	r2, [pc, #16]	; (80048ac <HAL_ADC_ConfigChannel+0x500>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d10a      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x508>
 800489e:	4b04      	ldr	r3, [pc, #16]	; (80048b0 <HAL_ADC_ConfigChannel+0x504>)
 80048a0:	e009      	b.n	80048b6 <HAL_ADC_ConfigChannel+0x50a>
 80048a2:	bf00      	nop
 80048a4:	47ff0000 	.word	0x47ff0000
 80048a8:	40022000 	.word	0x40022000
 80048ac:	40022100 	.word	0x40022100
 80048b0:	40022300 	.word	0x40022300
 80048b4:	4b61      	ldr	r3, [pc, #388]	; (8004a3c <HAL_ADC_ConfigChannel+0x690>)
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7ff f90c 	bl	8003ad4 <LL_ADC_GetCommonPathInternalCh>
 80048bc:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a5f      	ldr	r2, [pc, #380]	; (8004a40 <HAL_ADC_ConfigChannel+0x694>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d004      	beq.n	80048d2 <HAL_ADC_ConfigChannel+0x526>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a5d      	ldr	r2, [pc, #372]	; (8004a44 <HAL_ADC_ConfigChannel+0x698>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d10e      	bne.n	80048f0 <HAL_ADC_ConfigChannel+0x544>
 80048d2:	485b      	ldr	r0, [pc, #364]	; (8004a40 <HAL_ADC_ConfigChannel+0x694>)
 80048d4:	f7ff fa86 	bl	8003de4 <LL_ADC_IsEnabled>
 80048d8:	4604      	mov	r4, r0
 80048da:	485a      	ldr	r0, [pc, #360]	; (8004a44 <HAL_ADC_ConfigChannel+0x698>)
 80048dc:	f7ff fa82 	bl	8003de4 <LL_ADC_IsEnabled>
 80048e0:	4603      	mov	r3, r0
 80048e2:	4323      	orrs	r3, r4
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	bf0c      	ite	eq
 80048e8:	2301      	moveq	r3, #1
 80048ea:	2300      	movne	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	e008      	b.n	8004902 <HAL_ADC_ConfigChannel+0x556>
 80048f0:	4855      	ldr	r0, [pc, #340]	; (8004a48 <HAL_ADC_ConfigChannel+0x69c>)
 80048f2:	f7ff fa77 	bl	8003de4 <LL_ADC_IsEnabled>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf0c      	ite	eq
 80048fc:	2301      	moveq	r3, #1
 80048fe:	2300      	movne	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d07d      	beq.n	8004a02 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a50      	ldr	r2, [pc, #320]	; (8004a4c <HAL_ADC_ConfigChannel+0x6a0>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d130      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x5c6>
 8004910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004912:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d12b      	bne.n	8004972 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a4a      	ldr	r2, [pc, #296]	; (8004a48 <HAL_ADC_ConfigChannel+0x69c>)
 8004920:	4293      	cmp	r3, r2
 8004922:	f040 8081 	bne.w	8004a28 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a45      	ldr	r2, [pc, #276]	; (8004a40 <HAL_ADC_ConfigChannel+0x694>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d004      	beq.n	800493a <HAL_ADC_ConfigChannel+0x58e>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a43      	ldr	r2, [pc, #268]	; (8004a44 <HAL_ADC_ConfigChannel+0x698>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d101      	bne.n	800493e <HAL_ADC_ConfigChannel+0x592>
 800493a:	4a45      	ldr	r2, [pc, #276]	; (8004a50 <HAL_ADC_ConfigChannel+0x6a4>)
 800493c:	e000      	b.n	8004940 <HAL_ADC_ConfigChannel+0x594>
 800493e:	4a3f      	ldr	r2, [pc, #252]	; (8004a3c <HAL_ADC_ConfigChannel+0x690>)
 8004940:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004942:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004946:	4619      	mov	r1, r3
 8004948:	4610      	mov	r0, r2
 800494a:	f7ff f8b0 	bl	8003aae <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800494e:	4b41      	ldr	r3, [pc, #260]	; (8004a54 <HAL_ADC_ConfigChannel+0x6a8>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	099b      	lsrs	r3, r3, #6
 8004954:	4a40      	ldr	r2, [pc, #256]	; (8004a58 <HAL_ADC_ConfigChannel+0x6ac>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	099b      	lsrs	r3, r3, #6
 800495c:	3301      	adds	r3, #1
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8004962:	e002      	b.n	800496a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	3b01      	subs	r3, #1
 8004968:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1f9      	bne.n	8004964 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004970:	e05a      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a39      	ldr	r2, [pc, #228]	; (8004a5c <HAL_ADC_ConfigChannel+0x6b0>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d11e      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x60e>
 800497c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800497e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d119      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a2f      	ldr	r2, [pc, #188]	; (8004a48 <HAL_ADC_ConfigChannel+0x69c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d14b      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a2a      	ldr	r2, [pc, #168]	; (8004a40 <HAL_ADC_ConfigChannel+0x694>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d004      	beq.n	80049a4 <HAL_ADC_ConfigChannel+0x5f8>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	4a29      	ldr	r2, [pc, #164]	; (8004a44 <HAL_ADC_ConfigChannel+0x698>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d101      	bne.n	80049a8 <HAL_ADC_ConfigChannel+0x5fc>
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <HAL_ADC_ConfigChannel+0x6a4>)
 80049a6:	e000      	b.n	80049aa <HAL_ADC_ConfigChannel+0x5fe>
 80049a8:	4a24      	ldr	r2, [pc, #144]	; (8004a3c <HAL_ADC_ConfigChannel+0x690>)
 80049aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b0:	4619      	mov	r1, r3
 80049b2:	4610      	mov	r0, r2
 80049b4:	f7ff f87b 	bl	8003aae <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80049b8:	e036      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a28      	ldr	r2, [pc, #160]	; (8004a60 <HAL_ADC_ConfigChannel+0x6b4>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d131      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x67c>
 80049c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d12c      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a1d      	ldr	r2, [pc, #116]	; (8004a48 <HAL_ADC_ConfigChannel+0x69c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d127      	bne.n	8004a28 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <HAL_ADC_ConfigChannel+0x694>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d004      	beq.n	80049ec <HAL_ADC_ConfigChannel+0x640>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a17      	ldr	r2, [pc, #92]	; (8004a44 <HAL_ADC_ConfigChannel+0x698>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d101      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x644>
 80049ec:	4a18      	ldr	r2, [pc, #96]	; (8004a50 <HAL_ADC_ConfigChannel+0x6a4>)
 80049ee:	e000      	b.n	80049f2 <HAL_ADC_ConfigChannel+0x646>
 80049f0:	4a12      	ldr	r2, [pc, #72]	; (8004a3c <HAL_ADC_ConfigChannel+0x690>)
 80049f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049f8:	4619      	mov	r1, r3
 80049fa:	4610      	mov	r0, r2
 80049fc:	f7ff f857 	bl	8003aae <LL_ADC_SetCommonPathInternalCh>
 8004a00:	e012      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a06:	f043 0220 	orr.w	r2, r3, #32
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8004a14:	e008      	b.n	8004a28 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1a:	f043 0220 	orr.w	r2, r3, #32
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004a30:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3784      	adds	r7, #132	; 0x84
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd90      	pop	{r4, r7, pc}
 8004a3c:	58026300 	.word	0x58026300
 8004a40:	40022000 	.word	0x40022000
 8004a44:	40022100 	.word	0x40022100
 8004a48:	58026000 	.word	0x58026000
 8004a4c:	cb840000 	.word	0xcb840000
 8004a50:	40022300 	.word	0x40022300
 8004a54:	24000090 	.word	0x24000090
 8004a58:	053e2d63 	.word	0x053e2d63
 8004a5c:	c7520000 	.word	0xc7520000
 8004a60:	cfb80000 	.word	0xcfb80000

08004a64 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f7ff f9b7 	bl	8003de4 <LL_ADC_IsEnabled>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d16e      	bne.n	8004b5a <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689a      	ldr	r2, [r3, #8]
 8004a82:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <ADC_Enable+0x100>)
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00d      	beq.n	8004aa6 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8e:	f043 0210 	orr.w	r2, r3, #16
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9a:	f043 0201 	orr.w	r2, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e05a      	b.n	8004b5c <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7ff f972 	bl	8003d94 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8004ab0:	f7fe ffbc 	bl	8003a2c <HAL_GetTick>
 8004ab4:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a2b      	ldr	r2, [pc, #172]	; (8004b68 <ADC_Enable+0x104>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d004      	beq.n	8004aca <ADC_Enable+0x66>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a29      	ldr	r2, [pc, #164]	; (8004b6c <ADC_Enable+0x108>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d101      	bne.n	8004ace <ADC_Enable+0x6a>
 8004aca:	4b29      	ldr	r3, [pc, #164]	; (8004b70 <ADC_Enable+0x10c>)
 8004acc:	e000      	b.n	8004ad0 <ADC_Enable+0x6c>
 8004ace:	4b29      	ldr	r3, [pc, #164]	; (8004b74 <ADC_Enable+0x110>)
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff f903 	bl	8003cdc <LL_ADC_GetMultimode>
 8004ad6:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a23      	ldr	r2, [pc, #140]	; (8004b6c <ADC_Enable+0x108>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d002      	beq.n	8004ae8 <ADC_Enable+0x84>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	e000      	b.n	8004aea <ADC_Enable+0x86>
 8004ae8:	4b1f      	ldr	r3, [pc, #124]	; (8004b68 <ADC_Enable+0x104>)
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d02c      	beq.n	8004b4c <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d130      	bne.n	8004b5a <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004af8:	e028      	b.n	8004b4c <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f7ff f970 	bl	8003de4 <LL_ADC_IsEnabled>
 8004b04:	4603      	mov	r3, r0
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d104      	bne.n	8004b14 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7ff f940 	bl	8003d94 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004b14:	f7fe ff8a 	bl	8003a2c <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b02      	cmp	r3, #2
 8004b20:	d914      	bls.n	8004b4c <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0301 	and.w	r3, r3, #1
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d00d      	beq.n	8004b4c <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b34:	f043 0210 	orr.w	r2, r3, #16
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b40:	f043 0201 	orr.w	r2, r3, #1
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e007      	b.n	8004b5c <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0301 	and.w	r3, r3, #1
 8004b56:	2b01      	cmp	r3, #1
 8004b58:	d1cf      	bne.n	8004afa <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	8000003f 	.word	0x8000003f
 8004b68:	40022000 	.word	0x40022000
 8004b6c:	40022100 	.word	0x40022100
 8004b70:	40022300 	.word	0x40022300
 8004b74:	58026300 	.word	0x58026300

08004b78 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4618      	mov	r0, r3
 8004b86:	f7ff f940 	bl	8003e0a <LL_ADC_IsDisableOngoing>
 8004b8a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4618      	mov	r0, r3
 8004b92:	f7ff f927 	bl	8003de4 <LL_ADC_IsEnabled>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d047      	beq.n	8004c2c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d144      	bne.n	8004c2c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	f003 030d 	and.w	r3, r3, #13
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d10c      	bne.n	8004bca <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f7ff f901 	bl	8003dbc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2203      	movs	r2, #3
 8004bc0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004bc2:	f7fe ff33 	bl	8003a2c <HAL_GetTick>
 8004bc6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bc8:	e029      	b.n	8004c1e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	f043 0210 	orr.w	r2, r3, #16
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	f043 0201 	orr.w	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e023      	b.n	8004c2e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004be6:	f7fe ff21 	bl	8003a2c <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	2b02      	cmp	r3, #2
 8004bf2:	d914      	bls.n	8004c1e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00d      	beq.n	8004c1e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c06:	f043 0210 	orr.w	r2, r3, #16
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c12:	f043 0201 	orr.w	r2, r3, #1
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e007      	b.n	8004c2e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d1dc      	bne.n	8004be6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b084      	sub	sp, #16
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d14b      	bne.n	8004ce8 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0308 	and.w	r3, r3, #8
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d021      	beq.n	8004cae <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4618      	mov	r0, r3
 8004c70:	f7fe ff92 	bl	8003b98 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d032      	beq.n	8004ce0 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d12b      	bne.n	8004ce0 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d11f      	bne.n	8004ce0 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca4:	f043 0201 	orr.w	r2, r3, #1
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
 8004cac:	e018      	b.n	8004ce0 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f003 0303 	and.w	r3, r3, #3
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d111      	bne.n	8004ce0 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ccc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d105      	bne.n	8004ce0 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd8:	f043 0201 	orr.w	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff fb45 	bl	8004370 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004ce6:	e00e      	b.n	8004d06 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cec:	f003 0310 	and.w	r3, r3, #16
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f7ff fb4f 	bl	8004398 <HAL_ADC_ErrorCallback>
}
 8004cfa:	e004      	b.n	8004d06 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	4798      	blx	r3
}
 8004d06:	bf00      	nop
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}

08004d0e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004d0e:	b580      	push	{r7, lr}
 8004d10:	b084      	sub	sp, #16
 8004d12:	af00      	add	r7, sp, #0
 8004d14:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d1a:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004d1c:	68f8      	ldr	r0, [r7, #12]
 8004d1e:	f7ff fb31 	bl	8004384 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d22:	bf00      	nop
 8004d24:	3710      	adds	r7, #16
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b084      	sub	sp, #16
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d48:	f043 0204 	orr.w	r2, r3, #4
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004d50:	68f8      	ldr	r0, [r7, #12]
 8004d52:	f7ff fb21 	bl	8004398 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004d56:	bf00      	nop
 8004d58:	3710      	adds	r7, #16
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}
	...

08004d60 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a7a      	ldr	r2, [pc, #488]	; (8004f58 <ADC_ConfigureBoostMode+0x1f8>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <ADC_ConfigureBoostMode+0x1c>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a79      	ldr	r2, [pc, #484]	; (8004f5c <ADC_ConfigureBoostMode+0x1fc>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d109      	bne.n	8004d90 <ADC_ConfigureBoostMode+0x30>
 8004d7c:	4b78      	ldr	r3, [pc, #480]	; (8004f60 <ADC_ConfigureBoostMode+0x200>)
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e008      	b.n	8004da2 <ADC_ConfigureBoostMode+0x42>
 8004d90:	4b74      	ldr	r3, [pc, #464]	; (8004f64 <ADC_ConfigureBoostMode+0x204>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	bf14      	ite	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	2300      	moveq	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d01c      	beq.n	8004de0 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004da6:	f005 fd57 	bl	800a858 <HAL_RCC_GetHCLKFreq>
 8004daa:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004db4:	d010      	beq.n	8004dd8 <ADC_ConfigureBoostMode+0x78>
 8004db6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004dba:	d873      	bhi.n	8004ea4 <ADC_ConfigureBoostMode+0x144>
 8004dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004dc0:	d002      	beq.n	8004dc8 <ADC_ConfigureBoostMode+0x68>
 8004dc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004dc6:	d16d      	bne.n	8004ea4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	0c1b      	lsrs	r3, r3, #16
 8004dce:	68fa      	ldr	r2, [r7, #12]
 8004dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dd4:	60fb      	str	r3, [r7, #12]
        break;
 8004dd6:	e068      	b.n	8004eaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	089b      	lsrs	r3, r3, #2
 8004ddc:	60fb      	str	r3, [r7, #12]
        break;
 8004dde:	e064      	b.n	8004eaa <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004de0:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004de4:	f04f 0100 	mov.w	r1, #0
 8004de8:	f006 ffde 	bl	800bda8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004dec:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004df6:	d051      	beq.n	8004e9c <ADC_ConfigureBoostMode+0x13c>
 8004df8:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004dfc:	d854      	bhi.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
 8004dfe:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e02:	d047      	beq.n	8004e94 <ADC_ConfigureBoostMode+0x134>
 8004e04:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004e08:	d84e      	bhi.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
 8004e0a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e0e:	d03d      	beq.n	8004e8c <ADC_ConfigureBoostMode+0x12c>
 8004e10:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004e14:	d848      	bhi.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
 8004e16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e1a:	d033      	beq.n	8004e84 <ADC_ConfigureBoostMode+0x124>
 8004e1c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e20:	d842      	bhi.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
 8004e22:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e26:	d029      	beq.n	8004e7c <ADC_ConfigureBoostMode+0x11c>
 8004e28:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004e2c:	d83c      	bhi.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
 8004e2e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e32:	d01a      	beq.n	8004e6a <ADC_ConfigureBoostMode+0x10a>
 8004e34:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004e38:	d836      	bhi.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
 8004e3a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e3e:	d014      	beq.n	8004e6a <ADC_ConfigureBoostMode+0x10a>
 8004e40:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004e44:	d830      	bhi.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
 8004e46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e4a:	d00e      	beq.n	8004e6a <ADC_ConfigureBoostMode+0x10a>
 8004e4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e50:	d82a      	bhi.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
 8004e52:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e56:	d008      	beq.n	8004e6a <ADC_ConfigureBoostMode+0x10a>
 8004e58:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8004e5c:	d824      	bhi.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
 8004e5e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004e62:	d002      	beq.n	8004e6a <ADC_ConfigureBoostMode+0x10a>
 8004e64:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004e68:	d11e      	bne.n	8004ea8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	0c9b      	lsrs	r3, r3, #18
 8004e70:	005b      	lsls	r3, r3, #1
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e78:	60fb      	str	r3, [r7, #12]
        break;
 8004e7a:	e016      	b.n	8004eaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	091b      	lsrs	r3, r3, #4
 8004e80:	60fb      	str	r3, [r7, #12]
        break;
 8004e82:	e012      	b.n	8004eaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	095b      	lsrs	r3, r3, #5
 8004e88:	60fb      	str	r3, [r7, #12]
        break;
 8004e8a:	e00e      	b.n	8004eaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	60fb      	str	r3, [r7, #12]
        break;
 8004e92:	e00a      	b.n	8004eaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	09db      	lsrs	r3, r3, #7
 8004e98:	60fb      	str	r3, [r7, #12]
        break;
 8004e9a:	e006      	b.n	8004eaa <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	0a1b      	lsrs	r3, r3, #8
 8004ea0:	60fb      	str	r3, [r7, #12]
        break;
 8004ea2:	e002      	b.n	8004eaa <ADC_ConfigureBoostMode+0x14a>
        break;
 8004ea4:	bf00      	nop
 8004ea6:	e000      	b.n	8004eaa <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004ea8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8004eaa:	f7fe fdcb 	bl	8003a44 <HAL_GetREVID>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	f241 0203 	movw	r2, #4099	; 0x1003
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d815      	bhi.n	8004ee4 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	4a2b      	ldr	r2, [pc, #172]	; (8004f68 <ADC_ConfigureBoostMode+0x208>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d908      	bls.n	8004ed2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	689a      	ldr	r2, [r3, #8]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ece:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004ed0:	e03e      	b.n	8004f50 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689a      	ldr	r2, [r3, #8]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004ee0:	609a      	str	r2, [r3, #8]
}
 8004ee2:	e035      	b.n	8004f50 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4a1f      	ldr	r2, [pc, #124]	; (8004f6c <ADC_ConfigureBoostMode+0x20c>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d808      	bhi.n	8004f04 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	689a      	ldr	r2, [r3, #8]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004f00:	609a      	str	r2, [r3, #8]
}
 8004f02:	e025      	b.n	8004f50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	4a1a      	ldr	r2, [pc, #104]	; (8004f70 <ADC_ConfigureBoostMode+0x210>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d80a      	bhi.n	8004f22 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f1e:	609a      	str	r2, [r3, #8]
}
 8004f20:	e016      	b.n	8004f50 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a13      	ldr	r2, [pc, #76]	; (8004f74 <ADC_ConfigureBoostMode+0x214>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d80a      	bhi.n	8004f40 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f3c:	609a      	str	r2, [r3, #8]
}
 8004f3e:	e007      	b.n	8004f50 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689a      	ldr	r2, [r3, #8]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004f4e:	609a      	str	r2, [r3, #8]
}
 8004f50:	bf00      	nop
 8004f52:	3710      	adds	r7, #16
 8004f54:	46bd      	mov	sp, r7
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	40022000 	.word	0x40022000
 8004f5c:	40022100 	.word	0x40022100
 8004f60:	40022300 	.word	0x40022300
 8004f64:	58026300 	.word	0x58026300
 8004f68:	01312d00 	.word	0x01312d00
 8004f6c:	005f5e10 	.word	0x005f5e10
 8004f70:	00bebc20 	.word	0x00bebc20
 8004f74:	017d7840 	.word	0x017d7840

08004f78 <LL_ADC_IsEnabled>:
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b01      	cmp	r3, #1
 8004f8a:	d101      	bne.n	8004f90 <LL_ADC_IsEnabled+0x18>
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	e000      	b.n	8004f92 <LL_ADC_IsEnabled+0x1a>
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr
	...

08004fa0 <LL_ADC_StartCalibration>:
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	4b09      	ldr	r3, [pc, #36]	; (8004fd8 <LL_ADC_StartCalibration+0x38>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	68ba      	ldr	r2, [r7, #8]
 8004fb6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8004fba:	687a      	ldr	r2, [r7, #4]
 8004fbc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	609a      	str	r2, [r3, #8]
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	3ffeffc0 	.word	0x3ffeffc0

08004fdc <LL_ADC_IsCalibrationOnGoing>:
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ff0:	d101      	bne.n	8004ff6 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e000      	b.n	8004ff8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <LL_ADC_REG_IsConversionOngoing>:
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	f003 0304 	and.w	r3, r3, #4
 8005014:	2b04      	cmp	r3, #4
 8005016:	d101      	bne.n	800501c <LL_ADC_REG_IsConversionOngoing+0x18>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	370c      	adds	r7, #12
 8005022:	46bd      	mov	sp, r7
 8005024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005028:	4770      	bx	lr
	...

0800502c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005038:	2300      	movs	r3, #0
 800503a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005042:	2b01      	cmp	r3, #1
 8005044:	d101      	bne.n	800504a <HAL_ADCEx_Calibration_Start+0x1e>
 8005046:	2302      	movs	r3, #2
 8005048:	e04c      	b.n	80050e4 <HAL_ADCEx_Calibration_Start+0xb8>
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2201      	movs	r2, #1
 800504e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f7ff fd90 	bl	8004b78 <ADC_Disable>
 8005058:	4603      	mov	r3, r0
 800505a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800505c:	7dfb      	ldrb	r3, [r7, #23]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d135      	bne.n	80050ce <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005066:	4b21      	ldr	r3, [pc, #132]	; (80050ec <HAL_ADCEx_Calibration_Start+0xc0>)
 8005068:	4013      	ands	r3, r2
 800506a:	f043 0202 	orr.w	r2, r3, #2
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	68b9      	ldr	r1, [r7, #8]
 800507a:	4618      	mov	r0, r3
 800507c:	f7ff ff90 	bl	8004fa0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005080:	e014      	b.n	80050ac <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	3301      	adds	r3, #1
 8005086:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	4a19      	ldr	r2, [pc, #100]	; (80050f0 <HAL_ADCEx_Calibration_Start+0xc4>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d30d      	bcc.n	80050ac <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005094:	f023 0312 	bic.w	r3, r3, #18
 8005098:	f043 0210 	orr.w	r2, r3, #16
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e01b      	b.n	80050e4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7ff ff93 	bl	8004fdc <LL_ADC_IsCalibrationOnGoing>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e2      	bne.n	8005082 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c0:	f023 0303 	bic.w	r3, r3, #3
 80050c4:	f043 0201 	orr.w	r2, r3, #1
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	655a      	str	r2, [r3, #84]	; 0x54
 80050cc:	e005      	b.n	80050da <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050d2:	f043 0210 	orr.w	r2, r3, #16
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	2200      	movs	r2, #0
 80050de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80050e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3718      	adds	r7, #24
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	ffffeefd 	.word	0xffffeefd
 80050f0:	25c3f800 	.word	0x25c3f800

080050f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80050f4:	b590      	push	{r4, r7, lr}
 80050f6:	b09f      	sub	sp, #124	; 0x7c
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800510a:	2b01      	cmp	r3, #1
 800510c:	d101      	bne.n	8005112 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800510e:	2302      	movs	r3, #2
 8005110:	e0be      	b.n	8005290 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2201      	movs	r2, #1
 8005116:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800511a:	2300      	movs	r3, #0
 800511c:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 800511e:	2300      	movs	r3, #0
 8005120:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a5c      	ldr	r2, [pc, #368]	; (8005298 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d102      	bne.n	8005132 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800512c:	4b5b      	ldr	r3, [pc, #364]	; (800529c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	e001      	b.n	8005136 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8005132:	2300      	movs	r3, #0
 8005134:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	2b00      	cmp	r3, #0
 800513a:	d10b      	bne.n	8005154 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005140:	f043 0220 	orr.w	r2, r3, #32
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2200      	movs	r2, #0
 800514c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	e09d      	b.n	8005290 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff ff54 	bl	8005004 <LL_ADC_REG_IsConversionOngoing>
 800515c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4618      	mov	r0, r3
 8005164:	f7ff ff4e 	bl	8005004 <LL_ADC_REG_IsConversionOngoing>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d17f      	bne.n	800526e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800516e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005170:	2b00      	cmp	r3, #0
 8005172:	d17c      	bne.n	800526e <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a47      	ldr	r2, [pc, #284]	; (8005298 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d004      	beq.n	8005188 <HAL_ADCEx_MultiModeConfigChannel+0x94>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a46      	ldr	r2, [pc, #280]	; (800529c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d101      	bne.n	800518c <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8005188:	4b45      	ldr	r3, [pc, #276]	; (80052a0 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 800518a:	e000      	b.n	800518e <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 800518c:	4b45      	ldr	r3, [pc, #276]	; (80052a4 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 800518e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d039      	beq.n	800520c <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8005198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	431a      	orrs	r2, r3
 80051a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051a8:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a3a      	ldr	r2, [pc, #232]	; (8005298 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d004      	beq.n	80051be <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a38      	ldr	r2, [pc, #224]	; (800529c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d10e      	bne.n	80051dc <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 80051be:	4836      	ldr	r0, [pc, #216]	; (8005298 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80051c0:	f7ff feda 	bl	8004f78 <LL_ADC_IsEnabled>
 80051c4:	4604      	mov	r4, r0
 80051c6:	4835      	ldr	r0, [pc, #212]	; (800529c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80051c8:	f7ff fed6 	bl	8004f78 <LL_ADC_IsEnabled>
 80051cc:	4603      	mov	r3, r0
 80051ce:	4323      	orrs	r3, r4
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	bf0c      	ite	eq
 80051d4:	2301      	moveq	r3, #1
 80051d6:	2300      	movne	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	e008      	b.n	80051ee <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 80051dc:	4832      	ldr	r0, [pc, #200]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 80051de:	f7ff fecb 	bl	8004f78 <LL_ADC_IsEnabled>
 80051e2:	4603      	mov	r3, r0
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	bf0c      	ite	eq
 80051e8:	2301      	moveq	r3, #1
 80051ea:	2300      	movne	r3, #0
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d047      	beq.n	8005282 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80051f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	4b2d      	ldr	r3, [pc, #180]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 80051f8:	4013      	ands	r3, r2
 80051fa:	683a      	ldr	r2, [r7, #0]
 80051fc:	6811      	ldr	r1, [r2, #0]
 80051fe:	683a      	ldr	r2, [r7, #0]
 8005200:	6892      	ldr	r2, [r2, #8]
 8005202:	430a      	orrs	r2, r1
 8005204:	431a      	orrs	r2, r3
 8005206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005208:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800520a:	e03a      	b.n	8005282 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 800520c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005216:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a1e      	ldr	r2, [pc, #120]	; (8005298 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d004      	beq.n	800522c <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4a1d      	ldr	r2, [pc, #116]	; (800529c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10e      	bne.n	800524a <HAL_ADCEx_MultiModeConfigChannel+0x156>
 800522c:	481a      	ldr	r0, [pc, #104]	; (8005298 <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800522e:	f7ff fea3 	bl	8004f78 <LL_ADC_IsEnabled>
 8005232:	4604      	mov	r4, r0
 8005234:	4819      	ldr	r0, [pc, #100]	; (800529c <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8005236:	f7ff fe9f 	bl	8004f78 <LL_ADC_IsEnabled>
 800523a:	4603      	mov	r3, r0
 800523c:	4323      	orrs	r3, r4
 800523e:	2b00      	cmp	r3, #0
 8005240:	bf0c      	ite	eq
 8005242:	2301      	moveq	r3, #1
 8005244:	2300      	movne	r3, #0
 8005246:	b2db      	uxtb	r3, r3
 8005248:	e008      	b.n	800525c <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800524a:	4817      	ldr	r0, [pc, #92]	; (80052a8 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 800524c:	f7ff fe94 	bl	8004f78 <LL_ADC_IsEnabled>
 8005250:	4603      	mov	r3, r0
 8005252:	2b00      	cmp	r3, #0
 8005254:	bf0c      	ite	eq
 8005256:	2301      	moveq	r3, #1
 8005258:	2300      	movne	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b00      	cmp	r3, #0
 800525e:	d010      	beq.n	8005282 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8005260:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005262:	689a      	ldr	r2, [r3, #8]
 8005264:	4b11      	ldr	r3, [pc, #68]	; (80052ac <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8005266:	4013      	ands	r3, r2
 8005268:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800526a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800526c:	e009      	b.n	8005282 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005272:	f043 0220 	orr.w	r2, r3, #32
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8005280:	e000      	b.n	8005284 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8005282:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800528c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8005290:	4618      	mov	r0, r3
 8005292:	377c      	adds	r7, #124	; 0x7c
 8005294:	46bd      	mov	sp, r7
 8005296:	bd90      	pop	{r4, r7, pc}
 8005298:	40022000 	.word	0x40022000
 800529c:	40022100 	.word	0x40022100
 80052a0:	40022300 	.word	0x40022300
 80052a4:	58026300 	.word	0x58026300
 80052a8:	58026000 	.word	0x58026000
 80052ac:	fffff0e0 	.word	0xfffff0e0

080052b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80052c0:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <__NVIC_SetPriorityGrouping+0x40>)
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80052cc:	4013      	ands	r3, r2
 80052ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80052d8:	4b06      	ldr	r3, [pc, #24]	; (80052f4 <__NVIC_SetPriorityGrouping+0x44>)
 80052da:	4313      	orrs	r3, r2
 80052dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80052de:	4a04      	ldr	r2, [pc, #16]	; (80052f0 <__NVIC_SetPriorityGrouping+0x40>)
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	60d3      	str	r3, [r2, #12]
}
 80052e4:	bf00      	nop
 80052e6:	3714      	adds	r7, #20
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr
 80052f0:	e000ed00 	.word	0xe000ed00
 80052f4:	05fa0000 	.word	0x05fa0000

080052f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <__NVIC_GetPriorityGrouping+0x18>)
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	0a1b      	lsrs	r3, r3, #8
 8005302:	f003 0307 	and.w	r3, r3, #7
}
 8005306:	4618      	mov	r0, r3
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	e000ed00 	.word	0xe000ed00

08005314 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800531e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005322:	2b00      	cmp	r3, #0
 8005324:	db0b      	blt.n	800533e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	f003 021f 	and.w	r2, r3, #31
 800532c:	4907      	ldr	r1, [pc, #28]	; (800534c <__NVIC_EnableIRQ+0x38>)
 800532e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005332:	095b      	lsrs	r3, r3, #5
 8005334:	2001      	movs	r0, #1
 8005336:	fa00 f202 	lsl.w	r2, r0, r2
 800533a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800533e:	bf00      	nop
 8005340:	370c      	adds	r7, #12
 8005342:	46bd      	mov	sp, r7
 8005344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005348:	4770      	bx	lr
 800534a:	bf00      	nop
 800534c:	e000e100 	.word	0xe000e100

08005350 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005350:	b480      	push	{r7}
 8005352:	b083      	sub	sp, #12
 8005354:	af00      	add	r7, sp, #0
 8005356:	4603      	mov	r3, r0
 8005358:	6039      	str	r1, [r7, #0]
 800535a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800535c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005360:	2b00      	cmp	r3, #0
 8005362:	db0a      	blt.n	800537a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	490c      	ldr	r1, [pc, #48]	; (800539c <__NVIC_SetPriority+0x4c>)
 800536a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800536e:	0112      	lsls	r2, r2, #4
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	440b      	add	r3, r1
 8005374:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005378:	e00a      	b.n	8005390 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	b2da      	uxtb	r2, r3
 800537e:	4908      	ldr	r1, [pc, #32]	; (80053a0 <__NVIC_SetPriority+0x50>)
 8005380:	88fb      	ldrh	r3, [r7, #6]
 8005382:	f003 030f 	and.w	r3, r3, #15
 8005386:	3b04      	subs	r3, #4
 8005388:	0112      	lsls	r2, r2, #4
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	440b      	add	r3, r1
 800538e:	761a      	strb	r2, [r3, #24]
}
 8005390:	bf00      	nop
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	e000e100 	.word	0xe000e100
 80053a0:	e000ed00 	.word	0xe000ed00

080053a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b089      	sub	sp, #36	; 0x24
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	60f8      	str	r0, [r7, #12]
 80053ac:	60b9      	str	r1, [r7, #8]
 80053ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f1c3 0307 	rsb	r3, r3, #7
 80053be:	2b04      	cmp	r3, #4
 80053c0:	bf28      	it	cs
 80053c2:	2304      	movcs	r3, #4
 80053c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80053c6:	69fb      	ldr	r3, [r7, #28]
 80053c8:	3304      	adds	r3, #4
 80053ca:	2b06      	cmp	r3, #6
 80053cc:	d902      	bls.n	80053d4 <NVIC_EncodePriority+0x30>
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	3b03      	subs	r3, #3
 80053d2:	e000      	b.n	80053d6 <NVIC_EncodePriority+0x32>
 80053d4:	2300      	movs	r3, #0
 80053d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80053dc:	69bb      	ldr	r3, [r7, #24]
 80053de:	fa02 f303 	lsl.w	r3, r2, r3
 80053e2:	43da      	mvns	r2, r3
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	401a      	ands	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80053ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	fa01 f303 	lsl.w	r3, r1, r3
 80053f6:	43d9      	mvns	r1, r3
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80053fc:	4313      	orrs	r3, r2
         );
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3724      	adds	r7, #36	; 0x24
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b082      	sub	sp, #8
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f7ff ff4c 	bl	80052b0 <__NVIC_SetPriorityGrouping>
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b086      	sub	sp, #24
 8005424:	af00      	add	r7, sp, #0
 8005426:	4603      	mov	r3, r0
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800542e:	f7ff ff63 	bl	80052f8 <__NVIC_GetPriorityGrouping>
 8005432:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	68b9      	ldr	r1, [r7, #8]
 8005438:	6978      	ldr	r0, [r7, #20]
 800543a:	f7ff ffb3 	bl	80053a4 <NVIC_EncodePriority>
 800543e:	4602      	mov	r2, r0
 8005440:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005444:	4611      	mov	r1, r2
 8005446:	4618      	mov	r0, r3
 8005448:	f7ff ff82 	bl	8005350 <__NVIC_SetPriority>
}
 800544c:	bf00      	nop
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	4603      	mov	r3, r0
 800545c:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800545e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005462:	4618      	mov	r0, r3
 8005464:	f7ff ff56 	bl	8005314 <__NVIC_EnableIRQ>
}
 8005468:	bf00      	nop
 800546a:	3708      	adds	r7, #8
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}

08005470 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e014      	b.n	80054ac <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	791b      	ldrb	r3, [r3, #4]
 8005486:	b2db      	uxtb	r3, r3
 8005488:	2b00      	cmp	r3, #0
 800548a:	d105      	bne.n	8005498 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f7fd fca0 	bl	8002dd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b083      	sub	sp, #12
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d101      	bne.n	80054c8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	e046      	b.n	8005556 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	795b      	ldrb	r3, [r3, #5]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d101      	bne.n	80054d4 <HAL_DAC_Start+0x20>
 80054d0:	2302      	movs	r3, #2
 80054d2:	e040      	b.n	8005556 <HAL_DAC_Start+0xa2>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2201      	movs	r2, #1
 80054d8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2202      	movs	r2, #2
 80054de:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6819      	ldr	r1, [r3, #0]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	f003 0310 	and.w	r3, r3, #16
 80054ec:	2201      	movs	r2, #1
 80054ee:	409a      	lsls	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10f      	bne.n	800551e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8005508:	2b02      	cmp	r3, #2
 800550a:	d11d      	bne.n	8005548 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f042 0201 	orr.w	r2, r2, #1
 800551a:	605a      	str	r2, [r3, #4]
 800551c:	e014      	b.n	8005548 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	f003 0310 	and.w	r3, r3, #16
 800552e:	2102      	movs	r1, #2
 8005530:	fa01 f303 	lsl.w	r3, r1, r3
 8005534:	429a      	cmp	r2, r3
 8005536:	d107      	bne.n	8005548 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0202 	orr.w	r2, r2, #2
 8005546:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005560:	4770      	bx	lr
	...

08005564 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
 8005570:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_DAC_Start_DMA+0x18>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0a2      	b.n	80056c2 <HAL_DAC_Start_DMA+0x15e>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	795b      	ldrb	r3, [r3, #5]
 8005580:	2b01      	cmp	r3, #1
 8005582:	d101      	bne.n	8005588 <HAL_DAC_Start_DMA+0x24>
 8005584:	2302      	movs	r3, #2
 8005586:	e09c      	b.n	80056c2 <HAL_DAC_Start_DMA+0x15e>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2201      	movs	r2, #1
 800558c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2202      	movs	r2, #2
 8005592:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d129      	bne.n	80055ee <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	4a4b      	ldr	r2, [pc, #300]	; (80056cc <HAL_DAC_Start_DMA+0x168>)
 80055a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	4a4a      	ldr	r2, [pc, #296]	; (80056d0 <HAL_DAC_Start_DMA+0x16c>)
 80055a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	689b      	ldr	r3, [r3, #8]
 80055ae:	4a49      	ldr	r2, [pc, #292]	; (80056d4 <HAL_DAC_Start_DMA+0x170>)
 80055b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055c0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d003      	beq.n	80055d0 <HAL_DAC_Start_DMA+0x6c>
 80055c8:	6a3b      	ldr	r3, [r7, #32]
 80055ca:	2b04      	cmp	r3, #4
 80055cc:	d005      	beq.n	80055da <HAL_DAC_Start_DMA+0x76>
 80055ce:	e009      	b.n	80055e4 <HAL_DAC_Start_DMA+0x80>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	613b      	str	r3, [r7, #16]
        break;
 80055d8:	e033      	b.n	8005642 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	330c      	adds	r3, #12
 80055e0:	613b      	str	r3, [r7, #16]
        break;
 80055e2:	e02e      	b.n	8005642 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	3310      	adds	r3, #16
 80055ea:	613b      	str	r3, [r7, #16]
        break;
 80055ec:	e029      	b.n	8005642 <HAL_DAC_Start_DMA+0xde>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	68db      	ldr	r3, [r3, #12]
 80055f2:	4a39      	ldr	r2, [pc, #228]	; (80056d8 <HAL_DAC_Start_DMA+0x174>)
 80055f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	4a38      	ldr	r2, [pc, #224]	; (80056dc <HAL_DAC_Start_DMA+0x178>)
 80055fc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68db      	ldr	r3, [r3, #12]
 8005602:	4a37      	ldr	r2, [pc, #220]	; (80056e0 <HAL_DAC_Start_DMA+0x17c>)
 8005604:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005614:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d003      	beq.n	8005624 <HAL_DAC_Start_DMA+0xc0>
 800561c:	6a3b      	ldr	r3, [r7, #32]
 800561e:	2b04      	cmp	r3, #4
 8005620:	d005      	beq.n	800562e <HAL_DAC_Start_DMA+0xca>
 8005622:	e009      	b.n	8005638 <HAL_DAC_Start_DMA+0xd4>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3314      	adds	r3, #20
 800562a:	613b      	str	r3, [r7, #16]
        break;
 800562c:	e009      	b.n	8005642 <HAL_DAC_Start_DMA+0xde>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	3318      	adds	r3, #24
 8005634:	613b      	str	r3, [r7, #16]
        break;
 8005636:	e004      	b.n	8005642 <HAL_DAC_Start_DMA+0xde>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	331c      	adds	r3, #28
 800563e:	613b      	str	r3, [r7, #16]
        break;
 8005640:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d111      	bne.n	800566c <HAL_DAC_Start_DMA+0x108>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	681a      	ldr	r2, [r3, #0]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005656:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6898      	ldr	r0, [r3, #8]
 800565c:	6879      	ldr	r1, [r7, #4]
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	f000 fe67 	bl	8006334 <HAL_DMA_Start_IT>
 8005666:	4603      	mov	r3, r0
 8005668:	75fb      	strb	r3, [r7, #23]
 800566a:	e010      	b.n	800568e <HAL_DAC_Start_DMA+0x12a>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800567a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	68d8      	ldr	r0, [r3, #12]
 8005680:	6879      	ldr	r1, [r7, #4]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	f000 fe55 	bl	8006334 <HAL_DMA_Start_IT>
 800568a:	4603      	mov	r3, r0
 800568c:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005694:	7dfb      	ldrb	r3, [r7, #23]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10c      	bne.n	80056b4 <HAL_DAC_Start_DMA+0x150>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	6819      	ldr	r1, [r3, #0]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	2201      	movs	r2, #1
 80056a8:	409a      	lsls	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e005      	b.n	80056c0 <HAL_DAC_Start_DMA+0x15c>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	f043 0204 	orr.w	r2, r3, #4
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80056c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3718      	adds	r7, #24
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	08005b55 	.word	0x08005b55
 80056d0:	08005b77 	.word	0x08005b77
 80056d4:	08005b93 	.word	0x08005b93
 80056d8:	08005c11 	.word	0x08005c11
 80056dc:	08005c33 	.word	0x08005c33
 80056e0:	08005c4f 	.word	0x08005c4f

080056e4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
 80056ec:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d101      	bne.n	80056f8 <HAL_DAC_Stop_DMA+0x14>
  {
    return HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	e03e      	b.n	8005776 <HAL_DAC_Stop_DMA+0x92>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	6819      	ldr	r1, [r3, #0]
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	f003 0310 	and.w	r3, r3, #16
 8005704:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	43da      	mvns	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	400a      	ands	r2, r1
 8005714:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	6819      	ldr	r1, [r3, #0]
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	f003 0310 	and.w	r3, r3, #16
 8005722:	2201      	movs	r2, #1
 8005724:	fa02 f303 	lsl.w	r3, r2, r3
 8005728:	43da      	mvns	r2, r3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	400a      	ands	r2, r1
 8005730:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8005732:	683b      	ldr	r3, [r7, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10d      	bne.n	8005754 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	4618      	mov	r0, r3
 800573e:	f001 f863 	bl	8006808 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	e00c      	b.n	800576e <HAL_DAC_Stop_DMA+0x8a>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	4618      	mov	r0, r3
 800575a:	f001 f855 	bl	8006808 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800576c:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3708      	adds	r7, #8
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}

0800577e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800577e:	b580      	push	{r7, lr}
 8005780:	b084      	sub	sp, #16
 8005782:	af00      	add	r7, sp, #0
 8005784:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005794:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800579c:	2b00      	cmp	r3, #0
 800579e:	d01d      	beq.n	80057dc <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d018      	beq.n	80057dc <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2204      	movs	r2, #4
 80057ae:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	f043 0201 	orr.w	r2, r3, #1
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80057c4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	681a      	ldr	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80057d4:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f86f 	bl	80058ba <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01d      	beq.n	8005822 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d018      	beq.n	8005822 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2204      	movs	r2, #4
 80057f4:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	f043 0202 	orr.w	r2, r3, #2
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800580a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800581a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f9ed 	bl	8005bfc <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800582a:	b480      	push	{r7}
 800582c:	b087      	sub	sp, #28
 800582e:	af00      	add	r7, sp, #0
 8005830:	60f8      	str	r0, [r7, #12]
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
 8005836:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8005838:	2300      	movs	r3, #0
 800583a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e015      	b.n	8005872 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d105      	bne.n	800585e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4413      	add	r3, r2
 8005858:	3308      	adds	r3, #8
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	e004      	b.n	8005868 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800585e:	697a      	ldr	r2, [r7, #20]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	4413      	add	r3, r2
 8005864:	3314      	adds	r3, #20
 8005866:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	461a      	mov	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005870:	2300      	movs	r3, #0
}
 8005872:	4618      	mov	r0, r3
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800589a:	bf00      	nop
 800589c:	370c      	adds	r7, #12
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr

080058a6 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058a6:	b480      	push	{r7}
 80058a8:	b083      	sub	sp, #12
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80058ae:	bf00      	nop
 80058b0:	370c      	adds	r7, #12
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr

080058ba <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80058ba:	b480      	push	{r7}
 80058bc:	b083      	sub	sp, #12
 80058be:	af00      	add	r7, sp, #0
 80058c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80058c2:	bf00      	nop
 80058c4:	370c      	adds	r7, #12
 80058c6:	46bd      	mov	sp, r7
 80058c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058cc:	4770      	bx	lr
	...

080058d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	; 0x28
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058dc:	2300      	movs	r3, #0
 80058de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint32_t tmpreg2;
  uint32_t tickstart;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <HAL_DAC_ConfigChannel+0x1e>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d101      	bne.n	80058f2 <HAL_DAC_ConfigChannel+0x22>
  {
    return HAL_ERROR;
 80058ee:	2301      	movs	r3, #1
 80058f0:	e12a      	b.n	8005b48 <HAL_DAC_ConfigChannel+0x278>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	795b      	ldrb	r3, [r3, #5]
 80058f6:	2b01      	cmp	r3, #1
 80058f8:	d101      	bne.n	80058fe <HAL_DAC_ConfigChannel+0x2e>
 80058fa:	2302      	movs	r3, #2
 80058fc:	e124      	b.n	8005b48 <HAL_DAC_ConfigChannel+0x278>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2201      	movs	r2, #1
 8005902:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2202      	movs	r2, #2
 8005908:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2b04      	cmp	r3, #4
 8005910:	d17a      	bne.n	8005a08 <HAL_DAC_ConfigChannel+0x138>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005912:	f7fe f88b 	bl	8003a2c <HAL_GetTick>
 8005916:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d13d      	bne.n	800599a <HAL_DAC_ConfigChannel+0xca>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800591e:	e018      	b.n	8005952 <HAL_DAC_ConfigChannel+0x82>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005920:	f7fe f884 	bl	8003a2c <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b01      	cmp	r3, #1
 800592c:	d911      	bls.n	8005952 <HAL_DAC_ConfigChannel+0x82>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005934:	4b86      	ldr	r3, [pc, #536]	; (8005b50 <HAL_DAC_ConfigChannel+0x280>)
 8005936:	4013      	ands	r3, r2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d00a      	beq.n	8005952 <HAL_DAC_ConfigChannel+0x82>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	691b      	ldr	r3, [r3, #16]
 8005940:	f043 0208 	orr.w	r2, r3, #8
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2203      	movs	r2, #3
 800594c:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800594e:	2303      	movs	r3, #3
 8005950:	e0fa      	b.n	8005b48 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005958:	4b7d      	ldr	r3, [pc, #500]	; (8005b50 <HAL_DAC_ConfigChannel+0x280>)
 800595a:	4013      	ands	r3, r2
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1df      	bne.n	8005920 <HAL_DAC_ConfigChannel+0x50>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68ba      	ldr	r2, [r7, #8]
 8005966:	6992      	ldr	r2, [r2, #24]
 8005968:	641a      	str	r2, [r3, #64]	; 0x40
 800596a:	e020      	b.n	80059ae <HAL_DAC_ConfigChannel+0xde>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800596c:	f7fe f85e 	bl	8003a2c <HAL_GetTick>
 8005970:	4602      	mov	r2, r0
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	1ad3      	subs	r3, r2, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	d90f      	bls.n	800599a <HAL_DAC_ConfigChannel+0xca>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005980:	2b00      	cmp	r3, #0
 8005982:	da0a      	bge.n	800599a <HAL_DAC_ConfigChannel+0xca>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f043 0208 	orr.w	r2, r3, #8
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	2203      	movs	r2, #3
 8005994:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8005996:	2303      	movs	r3, #3
 8005998:	e0d6      	b.n	8005b48 <HAL_DAC_ConfigChannel+0x278>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	dbe3      	blt.n	800596c <HAL_DAC_ConfigChannel+0x9c>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	68ba      	ldr	r2, [r7, #8]
 80059aa:	6992      	ldr	r2, [r2, #24]
 80059ac:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0310 	and.w	r3, r3, #16
 80059ba:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80059be:	fa01 f303 	lsl.w	r3, r1, r3
 80059c2:	43db      	mvns	r3, r3
 80059c4:	ea02 0103 	and.w	r1, r2, r3
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	f003 0310 	and.w	r3, r3, #16
 80059d2:	409a      	lsls	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f003 0310 	and.w	r3, r3, #16
 80059e8:	21ff      	movs	r1, #255	; 0xff
 80059ea:	fa01 f303 	lsl.w	r3, r1, r3
 80059ee:	43db      	mvns	r3, r3
 80059f0:	ea02 0103 	and.w	r1, r2, r3
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	6a1a      	ldr	r2, [r3, #32]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f003 0310 	and.w	r3, r3, #16
 80059fe:	409a      	lsls	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	430a      	orrs	r2, r1
 8005a06:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	691b      	ldr	r3, [r3, #16]
 8005a0c:	2b01      	cmp	r3, #1
 8005a0e:	d11d      	bne.n	8005a4c <HAL_DAC_ConfigChannel+0x17c>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a16:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f003 0310 	and.w	r3, r3, #16
 8005a1e:	221f      	movs	r2, #31
 8005a20:	fa02 f303 	lsl.w	r3, r2, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	69ba      	ldr	r2, [r7, #24]
 8005a28:	4013      	ands	r3, r2
 8005a2a:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	695b      	ldr	r3, [r3, #20]
 8005a30:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	697a      	ldr	r2, [r7, #20]
 8005a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	69ba      	ldr	r2, [r7, #24]
 8005a4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a52:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f003 0310 	and.w	r3, r3, #16
 8005a5a:	2207      	movs	r2, #7
 8005a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005a60:	43db      	mvns	r3, r3
 8005a62:	69ba      	ldr	r2, [r7, #24]
 8005a64:	4013      	ands	r3, r2
 8005a66:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d102      	bne.n	8005a76 <HAL_DAC_ConfigChannel+0x1a6>
  {
    connectOnChip = 0x00000000UL;
 8005a70:	2300      	movs	r3, #0
 8005a72:	627b      	str	r3, [r7, #36]	; 0x24
 8005a74:	e00f      	b.n	8005a96 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	2b02      	cmp	r3, #2
 8005a7c:	d102      	bne.n	8005a84 <HAL_DAC_ConfigChannel+0x1b4>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	627b      	str	r3, [r7, #36]	; 0x24
 8005a82:	e008      	b.n	8005a96 <HAL_DAC_ConfigChannel+0x1c6>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d102      	bne.n	8005a92 <HAL_DAC_ConfigChannel+0x1c2>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a90:	e001      	b.n	8005a96 <HAL_DAC_ConfigChannel+0x1c6>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8005a92:	2300      	movs	r3, #0
 8005a94:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f003 0310 	and.w	r3, r3, #16
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	69ba      	ldr	r2, [r7, #24]
 8005abe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	6819      	ldr	r1, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f003 0310 	and.w	r3, r3, #16
 8005acc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ad4:	43da      	mvns	r2, r3
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	400a      	ands	r2, r1
 8005adc:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f003 0310 	and.w	r3, r3, #16
 8005aec:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005af0:	fa02 f303 	lsl.w	r3, r2, r3
 8005af4:	43db      	mvns	r3, r3
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	4013      	ands	r3, r2
 8005afa:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	f003 0310 	and.w	r3, r3, #16
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	6819      	ldr	r1, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	22c0      	movs	r2, #192	; 0xc0
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43da      	mvns	r2, r3
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	400a      	ands	r2, r1
 8005b36:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8005b44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3728      	adds	r7, #40	; 0x28
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}
 8005b50:	20008000 	.word	0x20008000

08005b54 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b084      	sub	sp, #16
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005b62:	68f8      	ldr	r0, [r7, #12]
 8005b64:	f7ff fe8b 	bl	800587e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	711a      	strb	r2, [r3, #4]
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b82:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005b84:	68f8      	ldr	r0, [r7, #12]
 8005b86:	f7ff fe84 	bl	8005892 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}

08005b92 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b084      	sub	sp, #16
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	f043 0204 	orr.w	r2, r3, #4
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fe7a 	bl	80058a6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	2201      	movs	r2, #1
 8005bb6:	711a      	strb	r2, [r3, #4]
}
 8005bb8:	bf00      	nop
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005c04:	bf00      	nop
 8005c06:	370c      	adds	r7, #12
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0e:	4770      	bx	lr

08005c10 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005c1e:	68f8      	ldr	r0, [r7, #12]
 8005c20:	f7ff ffce 	bl	8005bc0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2201      	movs	r2, #1
 8005c28:	711a      	strb	r2, [r3, #4]
}
 8005c2a:	bf00      	nop
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b084      	sub	sp, #16
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7ff ffc7 	bl	8005bd4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005c46:	bf00      	nop
 8005c48:	3710      	adds	r7, #16
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}

08005c4e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005c4e:	b580      	push	{r7, lr}
 8005c50:	b084      	sub	sp, #16
 8005c52:	af00      	add	r7, sp, #0
 8005c54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	691b      	ldr	r3, [r3, #16]
 8005c60:	f043 0204 	orr.w	r2, r3, #4
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005c68:	68f8      	ldr	r0, [r7, #12]
 8005c6a:	f7ff ffbd 	bl	8005be8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2201      	movs	r2, #1
 8005c72:	711a      	strb	r2, [r3, #4]
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005c84:	f7fd fed2 	bl	8003a2c <HAL_GetTick>
 8005c88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d101      	bne.n	8005c94 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e316      	b.n	80062c2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a66      	ldr	r2, [pc, #408]	; (8005e34 <HAL_DMA_Init+0x1b8>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d04a      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a65      	ldr	r2, [pc, #404]	; (8005e38 <HAL_DMA_Init+0x1bc>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d045      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a63      	ldr	r2, [pc, #396]	; (8005e3c <HAL_DMA_Init+0x1c0>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d040      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	4a62      	ldr	r2, [pc, #392]	; (8005e40 <HAL_DMA_Init+0x1c4>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d03b      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a60      	ldr	r2, [pc, #384]	; (8005e44 <HAL_DMA_Init+0x1c8>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d036      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a5f      	ldr	r2, [pc, #380]	; (8005e48 <HAL_DMA_Init+0x1cc>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d031      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a5d      	ldr	r2, [pc, #372]	; (8005e4c <HAL_DMA_Init+0x1d0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d02c      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a5c      	ldr	r2, [pc, #368]	; (8005e50 <HAL_DMA_Init+0x1d4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d027      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a5a      	ldr	r2, [pc, #360]	; (8005e54 <HAL_DMA_Init+0x1d8>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d022      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4a59      	ldr	r2, [pc, #356]	; (8005e58 <HAL_DMA_Init+0x1dc>)
 8005cf4:	4293      	cmp	r3, r2
 8005cf6:	d01d      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	4a57      	ldr	r2, [pc, #348]	; (8005e5c <HAL_DMA_Init+0x1e0>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d018      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	4a56      	ldr	r2, [pc, #344]	; (8005e60 <HAL_DMA_Init+0x1e4>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d013      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a54      	ldr	r2, [pc, #336]	; (8005e64 <HAL_DMA_Init+0x1e8>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d00e      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a53      	ldr	r2, [pc, #332]	; (8005e68 <HAL_DMA_Init+0x1ec>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d009      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a51      	ldr	r2, [pc, #324]	; (8005e6c <HAL_DMA_Init+0x1f0>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d004      	beq.n	8005d34 <HAL_DMA_Init+0xb8>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a50      	ldr	r2, [pc, #320]	; (8005e70 <HAL_DMA_Init+0x1f4>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d101      	bne.n	8005d38 <HAL_DMA_Init+0xbc>
 8005d34:	2301      	movs	r3, #1
 8005d36:	e000      	b.n	8005d3a <HAL_DMA_Init+0xbe>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f000 813b 	beq.w	8005fb6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2202      	movs	r2, #2
 8005d44:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a37      	ldr	r2, [pc, #220]	; (8005e34 <HAL_DMA_Init+0x1b8>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d04a      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a36      	ldr	r2, [pc, #216]	; (8005e38 <HAL_DMA_Init+0x1bc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d045      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a34      	ldr	r2, [pc, #208]	; (8005e3c <HAL_DMA_Init+0x1c0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d040      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a33      	ldr	r2, [pc, #204]	; (8005e40 <HAL_DMA_Init+0x1c4>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d03b      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a31      	ldr	r2, [pc, #196]	; (8005e44 <HAL_DMA_Init+0x1c8>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d036      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a30      	ldr	r2, [pc, #192]	; (8005e48 <HAL_DMA_Init+0x1cc>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d031      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a2e      	ldr	r2, [pc, #184]	; (8005e4c <HAL_DMA_Init+0x1d0>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d02c      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a2d      	ldr	r2, [pc, #180]	; (8005e50 <HAL_DMA_Init+0x1d4>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d027      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a2b      	ldr	r2, [pc, #172]	; (8005e54 <HAL_DMA_Init+0x1d8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d022      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	4a2a      	ldr	r2, [pc, #168]	; (8005e58 <HAL_DMA_Init+0x1dc>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d01d      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	4a28      	ldr	r2, [pc, #160]	; (8005e5c <HAL_DMA_Init+0x1e0>)
 8005dba:	4293      	cmp	r3, r2
 8005dbc:	d018      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4a27      	ldr	r2, [pc, #156]	; (8005e60 <HAL_DMA_Init+0x1e4>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d013      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	4a25      	ldr	r2, [pc, #148]	; (8005e64 <HAL_DMA_Init+0x1e8>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d00e      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	4a24      	ldr	r2, [pc, #144]	; (8005e68 <HAL_DMA_Init+0x1ec>)
 8005dd8:	4293      	cmp	r3, r2
 8005dda:	d009      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a22      	ldr	r2, [pc, #136]	; (8005e6c <HAL_DMA_Init+0x1f0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d004      	beq.n	8005df0 <HAL_DMA_Init+0x174>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a21      	ldr	r2, [pc, #132]	; (8005e70 <HAL_DMA_Init+0x1f4>)
 8005dec:	4293      	cmp	r3, r2
 8005dee:	d108      	bne.n	8005e02 <HAL_DMA_Init+0x186>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f022 0201 	bic.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	e007      	b.n	8005e12 <HAL_DMA_Init+0x196>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f022 0201 	bic.w	r2, r2, #1
 8005e10:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e12:	e02f      	b.n	8005e74 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e14:	f7fd fe0a 	bl	8003a2c <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	2b05      	cmp	r3, #5
 8005e20:	d928      	bls.n	8005e74 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2220      	movs	r2, #32
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e246      	b.n	80062c2 <HAL_DMA_Init+0x646>
 8005e34:	40020010 	.word	0x40020010
 8005e38:	40020028 	.word	0x40020028
 8005e3c:	40020040 	.word	0x40020040
 8005e40:	40020058 	.word	0x40020058
 8005e44:	40020070 	.word	0x40020070
 8005e48:	40020088 	.word	0x40020088
 8005e4c:	400200a0 	.word	0x400200a0
 8005e50:	400200b8 	.word	0x400200b8
 8005e54:	40020410 	.word	0x40020410
 8005e58:	40020428 	.word	0x40020428
 8005e5c:	40020440 	.word	0x40020440
 8005e60:	40020458 	.word	0x40020458
 8005e64:	40020470 	.word	0x40020470
 8005e68:	40020488 	.word	0x40020488
 8005e6c:	400204a0 	.word	0x400204a0
 8005e70:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0301 	and.w	r3, r3, #1
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1c8      	bne.n	8005e14 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e8a:	697a      	ldr	r2, [r7, #20]
 8005e8c:	4b83      	ldr	r3, [pc, #524]	; (800609c <HAL_DMA_Init+0x420>)
 8005e8e:	4013      	ands	r3, r2
 8005e90:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8005e9a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ea6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699b      	ldr	r3, [r3, #24]
 8005eac:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005eb2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8005eba:	697a      	ldr	r2, [r7, #20]
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	d107      	bne.n	8005ed8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	697a      	ldr	r2, [r7, #20]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8005ed8:	4b71      	ldr	r3, [pc, #452]	; (80060a0 <HAL_DMA_Init+0x424>)
 8005eda:	681a      	ldr	r2, [r3, #0]
 8005edc:	4b71      	ldr	r3, [pc, #452]	; (80060a4 <HAL_DMA_Init+0x428>)
 8005ede:	4013      	ands	r3, r2
 8005ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee4:	d328      	bcc.n	8005f38 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b28      	cmp	r3, #40	; 0x28
 8005eec:	d903      	bls.n	8005ef6 <HAL_DMA_Init+0x27a>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b2e      	cmp	r3, #46	; 0x2e
 8005ef4:	d917      	bls.n	8005f26 <HAL_DMA_Init+0x2aa>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	685b      	ldr	r3, [r3, #4]
 8005efa:	2b3e      	cmp	r3, #62	; 0x3e
 8005efc:	d903      	bls.n	8005f06 <HAL_DMA_Init+0x28a>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	685b      	ldr	r3, [r3, #4]
 8005f02:	2b42      	cmp	r3, #66	; 0x42
 8005f04:	d90f      	bls.n	8005f26 <HAL_DMA_Init+0x2aa>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2b46      	cmp	r3, #70	; 0x46
 8005f0c:	d903      	bls.n	8005f16 <HAL_DMA_Init+0x29a>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	2b48      	cmp	r3, #72	; 0x48
 8005f14:	d907      	bls.n	8005f26 <HAL_DMA_Init+0x2aa>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	685b      	ldr	r3, [r3, #4]
 8005f1a:	2b4e      	cmp	r3, #78	; 0x4e
 8005f1c:	d905      	bls.n	8005f2a <HAL_DMA_Init+0x2ae>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	2b52      	cmp	r3, #82	; 0x52
 8005f24:	d801      	bhi.n	8005f2a <HAL_DMA_Init+0x2ae>
 8005f26:	2301      	movs	r3, #1
 8005f28:	e000      	b.n	8005f2c <HAL_DMA_Init+0x2b0>
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d003      	beq.n	8005f38 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f36:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695b      	ldr	r3, [r3, #20]
 8005f46:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	f023 0307 	bic.w	r3, r3, #7
 8005f4e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d117      	bne.n	8005f92 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	4313      	orrs	r3, r2
 8005f6a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00e      	beq.n	8005f92 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f002 fb33 	bl	80085e0 <DMA_CheckFifoParam>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d008      	beq.n	8005f92 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2240      	movs	r2, #64	; 0x40
 8005f84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e197      	b.n	80062c2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	697a      	ldr	r2, [r7, #20]
 8005f98:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f002 fa6e 	bl	800847c <DMA_CalcBaseAndBitshift>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fa8:	f003 031f 	and.w	r3, r3, #31
 8005fac:	223f      	movs	r2, #63	; 0x3f
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	609a      	str	r2, [r3, #8]
 8005fb4:	e0cd      	b.n	8006152 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a3b      	ldr	r2, [pc, #236]	; (80060a8 <HAL_DMA_Init+0x42c>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d022      	beq.n	8006006 <HAL_DMA_Init+0x38a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a39      	ldr	r2, [pc, #228]	; (80060ac <HAL_DMA_Init+0x430>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d01d      	beq.n	8006006 <HAL_DMA_Init+0x38a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a38      	ldr	r2, [pc, #224]	; (80060b0 <HAL_DMA_Init+0x434>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d018      	beq.n	8006006 <HAL_DMA_Init+0x38a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a36      	ldr	r2, [pc, #216]	; (80060b4 <HAL_DMA_Init+0x438>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d013      	beq.n	8006006 <HAL_DMA_Init+0x38a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a35      	ldr	r2, [pc, #212]	; (80060b8 <HAL_DMA_Init+0x43c>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d00e      	beq.n	8006006 <HAL_DMA_Init+0x38a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a33      	ldr	r2, [pc, #204]	; (80060bc <HAL_DMA_Init+0x440>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d009      	beq.n	8006006 <HAL_DMA_Init+0x38a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a32      	ldr	r2, [pc, #200]	; (80060c0 <HAL_DMA_Init+0x444>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d004      	beq.n	8006006 <HAL_DMA_Init+0x38a>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a30      	ldr	r2, [pc, #192]	; (80060c4 <HAL_DMA_Init+0x448>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d101      	bne.n	800600a <HAL_DMA_Init+0x38e>
 8006006:	2301      	movs	r3, #1
 8006008:	e000      	b.n	800600c <HAL_DMA_Init+0x390>
 800600a:	2300      	movs	r3, #0
 800600c:	2b00      	cmp	r3, #0
 800600e:	f000 8097 	beq.w	8006140 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a24      	ldr	r2, [pc, #144]	; (80060a8 <HAL_DMA_Init+0x42c>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d021      	beq.n	8006060 <HAL_DMA_Init+0x3e4>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a22      	ldr	r2, [pc, #136]	; (80060ac <HAL_DMA_Init+0x430>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d01c      	beq.n	8006060 <HAL_DMA_Init+0x3e4>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a21      	ldr	r2, [pc, #132]	; (80060b0 <HAL_DMA_Init+0x434>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d017      	beq.n	8006060 <HAL_DMA_Init+0x3e4>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	4a1f      	ldr	r2, [pc, #124]	; (80060b4 <HAL_DMA_Init+0x438>)
 8006036:	4293      	cmp	r3, r2
 8006038:	d012      	beq.n	8006060 <HAL_DMA_Init+0x3e4>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a1e      	ldr	r2, [pc, #120]	; (80060b8 <HAL_DMA_Init+0x43c>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00d      	beq.n	8006060 <HAL_DMA_Init+0x3e4>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a1c      	ldr	r2, [pc, #112]	; (80060bc <HAL_DMA_Init+0x440>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d008      	beq.n	8006060 <HAL_DMA_Init+0x3e4>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a1b      	ldr	r2, [pc, #108]	; (80060c0 <HAL_DMA_Init+0x444>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d003      	beq.n	8006060 <HAL_DMA_Init+0x3e4>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a19      	ldr	r2, [pc, #100]	; (80060c4 <HAL_DMA_Init+0x448>)
 800605e:	4293      	cmp	r3, r2
 8006060:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2202      	movs	r2, #2
 8006066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800607a:	697a      	ldr	r2, [r7, #20]
 800607c:	4b12      	ldr	r3, [pc, #72]	; (80060c8 <HAL_DMA_Init+0x44c>)
 800607e:	4013      	ands	r3, r2
 8006080:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	2b40      	cmp	r3, #64	; 0x40
 8006088:	d020      	beq.n	80060cc <HAL_DMA_Init+0x450>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	2b80      	cmp	r3, #128	; 0x80
 8006090:	d102      	bne.n	8006098 <HAL_DMA_Init+0x41c>
 8006092:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006096:	e01a      	b.n	80060ce <HAL_DMA_Init+0x452>
 8006098:	2300      	movs	r3, #0
 800609a:	e018      	b.n	80060ce <HAL_DMA_Init+0x452>
 800609c:	fe10803f 	.word	0xfe10803f
 80060a0:	5c001000 	.word	0x5c001000
 80060a4:	ffff0000 	.word	0xffff0000
 80060a8:	58025408 	.word	0x58025408
 80060ac:	5802541c 	.word	0x5802541c
 80060b0:	58025430 	.word	0x58025430
 80060b4:	58025444 	.word	0x58025444
 80060b8:	58025458 	.word	0x58025458
 80060bc:	5802546c 	.word	0x5802546c
 80060c0:	58025480 	.word	0x58025480
 80060c4:	58025494 	.word	0x58025494
 80060c8:	fffe000f 	.word	0xfffe000f
 80060cc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	68d2      	ldr	r2, [r2, #12]
 80060d2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	691b      	ldr	r3, [r3, #16]
 80060da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80060dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
 80060e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80060e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	699b      	ldr	r3, [r3, #24]
 80060ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80060ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80060f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80060fc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	461a      	mov	r2, r3
 8006112:	4b6e      	ldr	r3, [pc, #440]	; (80062cc <HAL_DMA_Init+0x650>)
 8006114:	4413      	add	r3, r2
 8006116:	4a6e      	ldr	r2, [pc, #440]	; (80062d0 <HAL_DMA_Init+0x654>)
 8006118:	fba2 2303 	umull	r2, r3, r2, r3
 800611c:	091b      	lsrs	r3, r3, #4
 800611e:	009a      	lsls	r2, r3, #2
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f002 f9a9 	bl	800847c <DMA_CalcBaseAndBitshift>
 800612a:	4603      	mov	r3, r0
 800612c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006132:	f003 031f 	and.w	r3, r3, #31
 8006136:	2201      	movs	r2, #1
 8006138:	409a      	lsls	r2, r3
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	605a      	str	r2, [r3, #4]
 800613e:	e008      	b.n	8006152 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2240      	movs	r2, #64	; 0x40
 8006144:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2203      	movs	r2, #3
 800614a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800614e:	2301      	movs	r3, #1
 8006150:	e0b7      	b.n	80062c2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a5f      	ldr	r2, [pc, #380]	; (80062d4 <HAL_DMA_Init+0x658>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d072      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a5d      	ldr	r2, [pc, #372]	; (80062d8 <HAL_DMA_Init+0x65c>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d06d      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a5c      	ldr	r2, [pc, #368]	; (80062dc <HAL_DMA_Init+0x660>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d068      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a5a      	ldr	r2, [pc, #360]	; (80062e0 <HAL_DMA_Init+0x664>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d063      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a59      	ldr	r2, [pc, #356]	; (80062e4 <HAL_DMA_Init+0x668>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d05e      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a57      	ldr	r2, [pc, #348]	; (80062e8 <HAL_DMA_Init+0x66c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d059      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a56      	ldr	r2, [pc, #344]	; (80062ec <HAL_DMA_Init+0x670>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d054      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a54      	ldr	r2, [pc, #336]	; (80062f0 <HAL_DMA_Init+0x674>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d04f      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a53      	ldr	r2, [pc, #332]	; (80062f4 <HAL_DMA_Init+0x678>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d04a      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a51      	ldr	r2, [pc, #324]	; (80062f8 <HAL_DMA_Init+0x67c>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d045      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	4a50      	ldr	r2, [pc, #320]	; (80062fc <HAL_DMA_Init+0x680>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d040      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	4a4e      	ldr	r2, [pc, #312]	; (8006300 <HAL_DMA_Init+0x684>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d03b      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	4a4d      	ldr	r2, [pc, #308]	; (8006304 <HAL_DMA_Init+0x688>)
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d036      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	4a4b      	ldr	r2, [pc, #300]	; (8006308 <HAL_DMA_Init+0x68c>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d031      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	4a4a      	ldr	r2, [pc, #296]	; (800630c <HAL_DMA_Init+0x690>)
 80061e4:	4293      	cmp	r3, r2
 80061e6:	d02c      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a48      	ldr	r2, [pc, #288]	; (8006310 <HAL_DMA_Init+0x694>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d027      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a47      	ldr	r2, [pc, #284]	; (8006314 <HAL_DMA_Init+0x698>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d022      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a45      	ldr	r2, [pc, #276]	; (8006318 <HAL_DMA_Init+0x69c>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d01d      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a44      	ldr	r2, [pc, #272]	; (800631c <HAL_DMA_Init+0x6a0>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d018      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a42      	ldr	r2, [pc, #264]	; (8006320 <HAL_DMA_Init+0x6a4>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d013      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a41      	ldr	r2, [pc, #260]	; (8006324 <HAL_DMA_Init+0x6a8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d00e      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a3f      	ldr	r2, [pc, #252]	; (8006328 <HAL_DMA_Init+0x6ac>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d009      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a3e      	ldr	r2, [pc, #248]	; (800632c <HAL_DMA_Init+0x6b0>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d004      	beq.n	8006242 <HAL_DMA_Init+0x5c6>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a3c      	ldr	r2, [pc, #240]	; (8006330 <HAL_DMA_Init+0x6b4>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d101      	bne.n	8006246 <HAL_DMA_Init+0x5ca>
 8006242:	2301      	movs	r3, #1
 8006244:	e000      	b.n	8006248 <HAL_DMA_Init+0x5cc>
 8006246:	2300      	movs	r3, #0
 8006248:	2b00      	cmp	r3, #0
 800624a:	d032      	beq.n	80062b2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f002 fa43 	bl	80086d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	2b80      	cmp	r3, #128	; 0x80
 8006258:	d102      	bne.n	8006260 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	685a      	ldr	r2, [r3, #4]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006268:	b2d2      	uxtb	r2, r2
 800626a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006274:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d010      	beq.n	80062a0 <HAL_DMA_Init+0x624>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	2b08      	cmp	r3, #8
 8006284:	d80c      	bhi.n	80062a0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f002 fac0 	bl	800880c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006290:	2200      	movs	r2, #0
 8006292:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006298:	687a      	ldr	r2, [r7, #4]
 800629a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800629c:	605a      	str	r2, [r3, #4]
 800629e:	e008      	b.n	80062b2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3718      	adds	r7, #24
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	bf00      	nop
 80062cc:	a7fdabf8 	.word	0xa7fdabf8
 80062d0:	cccccccd 	.word	0xcccccccd
 80062d4:	40020010 	.word	0x40020010
 80062d8:	40020028 	.word	0x40020028
 80062dc:	40020040 	.word	0x40020040
 80062e0:	40020058 	.word	0x40020058
 80062e4:	40020070 	.word	0x40020070
 80062e8:	40020088 	.word	0x40020088
 80062ec:	400200a0 	.word	0x400200a0
 80062f0:	400200b8 	.word	0x400200b8
 80062f4:	40020410 	.word	0x40020410
 80062f8:	40020428 	.word	0x40020428
 80062fc:	40020440 	.word	0x40020440
 8006300:	40020458 	.word	0x40020458
 8006304:	40020470 	.word	0x40020470
 8006308:	40020488 	.word	0x40020488
 800630c:	400204a0 	.word	0x400204a0
 8006310:	400204b8 	.word	0x400204b8
 8006314:	58025408 	.word	0x58025408
 8006318:	5802541c 	.word	0x5802541c
 800631c:	58025430 	.word	0x58025430
 8006320:	58025444 	.word	0x58025444
 8006324:	58025458 	.word	0x58025458
 8006328:	5802546c 	.word	0x5802546c
 800632c:	58025480 	.word	0x58025480
 8006330:	58025494 	.word	0x58025494

08006334 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	60f8      	str	r0, [r7, #12]
 800633c:	60b9      	str	r1, [r7, #8]
 800633e:	607a      	str	r2, [r7, #4]
 8006340:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006342:	2300      	movs	r3, #0
 8006344:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e226      	b.n	800679e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_DMA_Start_IT+0x2a>
 800635a:	2302      	movs	r3, #2
 800635c:	e21f      	b.n	800679e <HAL_DMA_Start_IT+0x46a>
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b01      	cmp	r3, #1
 8006370:	f040 820a 	bne.w	8006788 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2200      	movs	r2, #0
 8006380:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a68      	ldr	r2, [pc, #416]	; (8006528 <HAL_DMA_Start_IT+0x1f4>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d04a      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a66      	ldr	r2, [pc, #408]	; (800652c <HAL_DMA_Start_IT+0x1f8>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d045      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a65      	ldr	r2, [pc, #404]	; (8006530 <HAL_DMA_Start_IT+0x1fc>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d040      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a63      	ldr	r2, [pc, #396]	; (8006534 <HAL_DMA_Start_IT+0x200>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d03b      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a62      	ldr	r2, [pc, #392]	; (8006538 <HAL_DMA_Start_IT+0x204>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d036      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a60      	ldr	r2, [pc, #384]	; (800653c <HAL_DMA_Start_IT+0x208>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d031      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a5f      	ldr	r2, [pc, #380]	; (8006540 <HAL_DMA_Start_IT+0x20c>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d02c      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a5d      	ldr	r2, [pc, #372]	; (8006544 <HAL_DMA_Start_IT+0x210>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d027      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a5c      	ldr	r2, [pc, #368]	; (8006548 <HAL_DMA_Start_IT+0x214>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d022      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a5a      	ldr	r2, [pc, #360]	; (800654c <HAL_DMA_Start_IT+0x218>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01d      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a59      	ldr	r2, [pc, #356]	; (8006550 <HAL_DMA_Start_IT+0x21c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d018      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a57      	ldr	r2, [pc, #348]	; (8006554 <HAL_DMA_Start_IT+0x220>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d013      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a56      	ldr	r2, [pc, #344]	; (8006558 <HAL_DMA_Start_IT+0x224>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d00e      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a54      	ldr	r2, [pc, #336]	; (800655c <HAL_DMA_Start_IT+0x228>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d009      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a53      	ldr	r2, [pc, #332]	; (8006560 <HAL_DMA_Start_IT+0x22c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d004      	beq.n	8006422 <HAL_DMA_Start_IT+0xee>
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a51      	ldr	r2, [pc, #324]	; (8006564 <HAL_DMA_Start_IT+0x230>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d108      	bne.n	8006434 <HAL_DMA_Start_IT+0x100>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0201 	bic.w	r2, r2, #1
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	e007      	b.n	8006444 <HAL_DMA_Start_IT+0x110>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f022 0201 	bic.w	r2, r2, #1
 8006442:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	687a      	ldr	r2, [r7, #4]
 8006448:	68b9      	ldr	r1, [r7, #8]
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f001 fe6a 	bl	8008124 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a34      	ldr	r2, [pc, #208]	; (8006528 <HAL_DMA_Start_IT+0x1f4>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d04a      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a33      	ldr	r2, [pc, #204]	; (800652c <HAL_DMA_Start_IT+0x1f8>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d045      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a31      	ldr	r2, [pc, #196]	; (8006530 <HAL_DMA_Start_IT+0x1fc>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d040      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a30      	ldr	r2, [pc, #192]	; (8006534 <HAL_DMA_Start_IT+0x200>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d03b      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2e      	ldr	r2, [pc, #184]	; (8006538 <HAL_DMA_Start_IT+0x204>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d036      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2d      	ldr	r2, [pc, #180]	; (800653c <HAL_DMA_Start_IT+0x208>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d031      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2b      	ldr	r2, [pc, #172]	; (8006540 <HAL_DMA_Start_IT+0x20c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d02c      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2a      	ldr	r2, [pc, #168]	; (8006544 <HAL_DMA_Start_IT+0x210>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d027      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a28      	ldr	r2, [pc, #160]	; (8006548 <HAL_DMA_Start_IT+0x214>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d022      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a27      	ldr	r2, [pc, #156]	; (800654c <HAL_DMA_Start_IT+0x218>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d01d      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a25      	ldr	r2, [pc, #148]	; (8006550 <HAL_DMA_Start_IT+0x21c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d018      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a24      	ldr	r2, [pc, #144]	; (8006554 <HAL_DMA_Start_IT+0x220>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d013      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a22      	ldr	r2, [pc, #136]	; (8006558 <HAL_DMA_Start_IT+0x224>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d00e      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a21      	ldr	r2, [pc, #132]	; (800655c <HAL_DMA_Start_IT+0x228>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d009      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	4a1f      	ldr	r2, [pc, #124]	; (8006560 <HAL_DMA_Start_IT+0x22c>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d004      	beq.n	80064f0 <HAL_DMA_Start_IT+0x1bc>
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a1e      	ldr	r2, [pc, #120]	; (8006564 <HAL_DMA_Start_IT+0x230>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d101      	bne.n	80064f4 <HAL_DMA_Start_IT+0x1c0>
 80064f0:	2301      	movs	r3, #1
 80064f2:	e000      	b.n	80064f6 <HAL_DMA_Start_IT+0x1c2>
 80064f4:	2300      	movs	r3, #0
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d036      	beq.n	8006568 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f023 021e 	bic.w	r2, r3, #30
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f042 0216 	orr.w	r2, r2, #22
 800650c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006512:	2b00      	cmp	r3, #0
 8006514:	d03e      	beq.n	8006594 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	681a      	ldr	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f042 0208 	orr.w	r2, r2, #8
 8006524:	601a      	str	r2, [r3, #0]
 8006526:	e035      	b.n	8006594 <HAL_DMA_Start_IT+0x260>
 8006528:	40020010 	.word	0x40020010
 800652c:	40020028 	.word	0x40020028
 8006530:	40020040 	.word	0x40020040
 8006534:	40020058 	.word	0x40020058
 8006538:	40020070 	.word	0x40020070
 800653c:	40020088 	.word	0x40020088
 8006540:	400200a0 	.word	0x400200a0
 8006544:	400200b8 	.word	0x400200b8
 8006548:	40020410 	.word	0x40020410
 800654c:	40020428 	.word	0x40020428
 8006550:	40020440 	.word	0x40020440
 8006554:	40020458 	.word	0x40020458
 8006558:	40020470 	.word	0x40020470
 800655c:	40020488 	.word	0x40020488
 8006560:	400204a0 	.word	0x400204a0
 8006564:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f023 020e 	bic.w	r2, r3, #14
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f042 020a 	orr.w	r2, r2, #10
 800657a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d007      	beq.n	8006594 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0204 	orr.w	r2, r2, #4
 8006592:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	4a83      	ldr	r2, [pc, #524]	; (80067a8 <HAL_DMA_Start_IT+0x474>)
 800659a:	4293      	cmp	r3, r2
 800659c:	d072      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4a82      	ldr	r2, [pc, #520]	; (80067ac <HAL_DMA_Start_IT+0x478>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d06d      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a80      	ldr	r2, [pc, #512]	; (80067b0 <HAL_DMA_Start_IT+0x47c>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d068      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a7f      	ldr	r2, [pc, #508]	; (80067b4 <HAL_DMA_Start_IT+0x480>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d063      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a7d      	ldr	r2, [pc, #500]	; (80067b8 <HAL_DMA_Start_IT+0x484>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d05e      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a7c      	ldr	r2, [pc, #496]	; (80067bc <HAL_DMA_Start_IT+0x488>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d059      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a7a      	ldr	r2, [pc, #488]	; (80067c0 <HAL_DMA_Start_IT+0x48c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d054      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a79      	ldr	r2, [pc, #484]	; (80067c4 <HAL_DMA_Start_IT+0x490>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d04f      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a77      	ldr	r2, [pc, #476]	; (80067c8 <HAL_DMA_Start_IT+0x494>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d04a      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a76      	ldr	r2, [pc, #472]	; (80067cc <HAL_DMA_Start_IT+0x498>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d045      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a74      	ldr	r2, [pc, #464]	; (80067d0 <HAL_DMA_Start_IT+0x49c>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d040      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a73      	ldr	r2, [pc, #460]	; (80067d4 <HAL_DMA_Start_IT+0x4a0>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d03b      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a71      	ldr	r2, [pc, #452]	; (80067d8 <HAL_DMA_Start_IT+0x4a4>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d036      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a70      	ldr	r2, [pc, #448]	; (80067dc <HAL_DMA_Start_IT+0x4a8>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d031      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a6e      	ldr	r2, [pc, #440]	; (80067e0 <HAL_DMA_Start_IT+0x4ac>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d02c      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a6d      	ldr	r2, [pc, #436]	; (80067e4 <HAL_DMA_Start_IT+0x4b0>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d027      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a6b      	ldr	r2, [pc, #428]	; (80067e8 <HAL_DMA_Start_IT+0x4b4>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d022      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a6a      	ldr	r2, [pc, #424]	; (80067ec <HAL_DMA_Start_IT+0x4b8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d01d      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a68      	ldr	r2, [pc, #416]	; (80067f0 <HAL_DMA_Start_IT+0x4bc>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d018      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	4a67      	ldr	r2, [pc, #412]	; (80067f4 <HAL_DMA_Start_IT+0x4c0>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d013      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a65      	ldr	r2, [pc, #404]	; (80067f8 <HAL_DMA_Start_IT+0x4c4>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d00e      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	4a64      	ldr	r2, [pc, #400]	; (80067fc <HAL_DMA_Start_IT+0x4c8>)
 800666c:	4293      	cmp	r3, r2
 800666e:	d009      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	4a62      	ldr	r2, [pc, #392]	; (8006800 <HAL_DMA_Start_IT+0x4cc>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <HAL_DMA_Start_IT+0x350>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	4a61      	ldr	r2, [pc, #388]	; (8006804 <HAL_DMA_Start_IT+0x4d0>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d101      	bne.n	8006688 <HAL_DMA_Start_IT+0x354>
 8006684:	2301      	movs	r3, #1
 8006686:	e000      	b.n	800668a <HAL_DMA_Start_IT+0x356>
 8006688:	2300      	movs	r3, #0
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01a      	beq.n	80066c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006698:	2b00      	cmp	r3, #0
 800669a:	d007      	beq.n	80066ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d007      	beq.n	80066c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80066be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80066c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a37      	ldr	r2, [pc, #220]	; (80067a8 <HAL_DMA_Start_IT+0x474>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d04a      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a36      	ldr	r2, [pc, #216]	; (80067ac <HAL_DMA_Start_IT+0x478>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d045      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a34      	ldr	r2, [pc, #208]	; (80067b0 <HAL_DMA_Start_IT+0x47c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d040      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a33      	ldr	r2, [pc, #204]	; (80067b4 <HAL_DMA_Start_IT+0x480>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d03b      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a31      	ldr	r2, [pc, #196]	; (80067b8 <HAL_DMA_Start_IT+0x484>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d036      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a30      	ldr	r2, [pc, #192]	; (80067bc <HAL_DMA_Start_IT+0x488>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d031      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a2e      	ldr	r2, [pc, #184]	; (80067c0 <HAL_DMA_Start_IT+0x48c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d02c      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a2d      	ldr	r2, [pc, #180]	; (80067c4 <HAL_DMA_Start_IT+0x490>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d027      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a2b      	ldr	r2, [pc, #172]	; (80067c8 <HAL_DMA_Start_IT+0x494>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d022      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a2a      	ldr	r2, [pc, #168]	; (80067cc <HAL_DMA_Start_IT+0x498>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d01d      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a28      	ldr	r2, [pc, #160]	; (80067d0 <HAL_DMA_Start_IT+0x49c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d018      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a27      	ldr	r2, [pc, #156]	; (80067d4 <HAL_DMA_Start_IT+0x4a0>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d013      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a25      	ldr	r2, [pc, #148]	; (80067d8 <HAL_DMA_Start_IT+0x4a4>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d00e      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a24      	ldr	r2, [pc, #144]	; (80067dc <HAL_DMA_Start_IT+0x4a8>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d009      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a22      	ldr	r2, [pc, #136]	; (80067e0 <HAL_DMA_Start_IT+0x4ac>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_DMA_Start_IT+0x430>
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a21      	ldr	r2, [pc, #132]	; (80067e4 <HAL_DMA_Start_IT+0x4b0>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d108      	bne.n	8006776 <HAL_DMA_Start_IT+0x442>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	681a      	ldr	r2, [r3, #0]
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f042 0201 	orr.w	r2, r2, #1
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	e012      	b.n	800679c <HAL_DMA_Start_IT+0x468>
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	681a      	ldr	r2, [r3, #0]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f042 0201 	orr.w	r2, r2, #1
 8006784:	601a      	str	r2, [r3, #0]
 8006786:	e009      	b.n	800679c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800678e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800679c:	7dfb      	ldrb	r3, [r7, #23]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	40020010 	.word	0x40020010
 80067ac:	40020028 	.word	0x40020028
 80067b0:	40020040 	.word	0x40020040
 80067b4:	40020058 	.word	0x40020058
 80067b8:	40020070 	.word	0x40020070
 80067bc:	40020088 	.word	0x40020088
 80067c0:	400200a0 	.word	0x400200a0
 80067c4:	400200b8 	.word	0x400200b8
 80067c8:	40020410 	.word	0x40020410
 80067cc:	40020428 	.word	0x40020428
 80067d0:	40020440 	.word	0x40020440
 80067d4:	40020458 	.word	0x40020458
 80067d8:	40020470 	.word	0x40020470
 80067dc:	40020488 	.word	0x40020488
 80067e0:	400204a0 	.word	0x400204a0
 80067e4:	400204b8 	.word	0x400204b8
 80067e8:	58025408 	.word	0x58025408
 80067ec:	5802541c 	.word	0x5802541c
 80067f0:	58025430 	.word	0x58025430
 80067f4:	58025444 	.word	0x58025444
 80067f8:	58025458 	.word	0x58025458
 80067fc:	5802546c 	.word	0x5802546c
 8006800:	58025480 	.word	0x58025480
 8006804:	58025494 	.word	0x58025494

08006808 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b086      	sub	sp, #24
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006810:	f7fd f90c 	bl	8003a2c <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e2dc      	b.n	8006dda <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006826:	b2db      	uxtb	r3, r3
 8006828:	2b02      	cmp	r3, #2
 800682a:	d008      	beq.n	800683e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2280      	movs	r2, #128	; 0x80
 8006830:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e2cd      	b.n	8006dda <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a76      	ldr	r2, [pc, #472]	; (8006a1c <HAL_DMA_Abort+0x214>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d04a      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a74      	ldr	r2, [pc, #464]	; (8006a20 <HAL_DMA_Abort+0x218>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d045      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a73      	ldr	r2, [pc, #460]	; (8006a24 <HAL_DMA_Abort+0x21c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d040      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a71      	ldr	r2, [pc, #452]	; (8006a28 <HAL_DMA_Abort+0x220>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d03b      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a70      	ldr	r2, [pc, #448]	; (8006a2c <HAL_DMA_Abort+0x224>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d036      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a6e      	ldr	r2, [pc, #440]	; (8006a30 <HAL_DMA_Abort+0x228>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d031      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a6d      	ldr	r2, [pc, #436]	; (8006a34 <HAL_DMA_Abort+0x22c>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d02c      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a6b      	ldr	r2, [pc, #428]	; (8006a38 <HAL_DMA_Abort+0x230>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d027      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a6a      	ldr	r2, [pc, #424]	; (8006a3c <HAL_DMA_Abort+0x234>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d022      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a68      	ldr	r2, [pc, #416]	; (8006a40 <HAL_DMA_Abort+0x238>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d01d      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a67      	ldr	r2, [pc, #412]	; (8006a44 <HAL_DMA_Abort+0x23c>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d018      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a65      	ldr	r2, [pc, #404]	; (8006a48 <HAL_DMA_Abort+0x240>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d013      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a64      	ldr	r2, [pc, #400]	; (8006a4c <HAL_DMA_Abort+0x244>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00e      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a62      	ldr	r2, [pc, #392]	; (8006a50 <HAL_DMA_Abort+0x248>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d009      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a61      	ldr	r2, [pc, #388]	; (8006a54 <HAL_DMA_Abort+0x24c>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d004      	beq.n	80068de <HAL_DMA_Abort+0xd6>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a5f      	ldr	r2, [pc, #380]	; (8006a58 <HAL_DMA_Abort+0x250>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d101      	bne.n	80068e2 <HAL_DMA_Abort+0xda>
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <HAL_DMA_Abort+0xdc>
 80068e2:	2300      	movs	r3, #0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d013      	beq.n	8006910 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	681a      	ldr	r2, [r3, #0]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f022 021e 	bic.w	r2, r2, #30
 80068f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	695a      	ldr	r2, [r3, #20]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006906:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	617b      	str	r3, [r7, #20]
 800690e:	e00a      	b.n	8006926 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	f022 020e 	bic.w	r2, r2, #14
 800691e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a3c      	ldr	r2, [pc, #240]	; (8006a1c <HAL_DMA_Abort+0x214>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d072      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	4a3a      	ldr	r2, [pc, #232]	; (8006a20 <HAL_DMA_Abort+0x218>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d06d      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a39      	ldr	r2, [pc, #228]	; (8006a24 <HAL_DMA_Abort+0x21c>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d068      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	4a37      	ldr	r2, [pc, #220]	; (8006a28 <HAL_DMA_Abort+0x220>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d063      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	4a36      	ldr	r2, [pc, #216]	; (8006a2c <HAL_DMA_Abort+0x224>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d05e      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a34      	ldr	r2, [pc, #208]	; (8006a30 <HAL_DMA_Abort+0x228>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d059      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4a33      	ldr	r2, [pc, #204]	; (8006a34 <HAL_DMA_Abort+0x22c>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d054      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a31      	ldr	r2, [pc, #196]	; (8006a38 <HAL_DMA_Abort+0x230>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d04f      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	4a30      	ldr	r2, [pc, #192]	; (8006a3c <HAL_DMA_Abort+0x234>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d04a      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a2e      	ldr	r2, [pc, #184]	; (8006a40 <HAL_DMA_Abort+0x238>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d045      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a2d      	ldr	r2, [pc, #180]	; (8006a44 <HAL_DMA_Abort+0x23c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d040      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a2b      	ldr	r2, [pc, #172]	; (8006a48 <HAL_DMA_Abort+0x240>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d03b      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	4a2a      	ldr	r2, [pc, #168]	; (8006a4c <HAL_DMA_Abort+0x244>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d036      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	4a28      	ldr	r2, [pc, #160]	; (8006a50 <HAL_DMA_Abort+0x248>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d031      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a27      	ldr	r2, [pc, #156]	; (8006a54 <HAL_DMA_Abort+0x24c>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d02c      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a25      	ldr	r2, [pc, #148]	; (8006a58 <HAL_DMA_Abort+0x250>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d027      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4a24      	ldr	r2, [pc, #144]	; (8006a5c <HAL_DMA_Abort+0x254>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d022      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	4a22      	ldr	r2, [pc, #136]	; (8006a60 <HAL_DMA_Abort+0x258>)
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d01d      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	4a21      	ldr	r2, [pc, #132]	; (8006a64 <HAL_DMA_Abort+0x25c>)
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d018      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	4a1f      	ldr	r2, [pc, #124]	; (8006a68 <HAL_DMA_Abort+0x260>)
 80069ea:	4293      	cmp	r3, r2
 80069ec:	d013      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a1e      	ldr	r2, [pc, #120]	; (8006a6c <HAL_DMA_Abort+0x264>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d00e      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	4a1c      	ldr	r2, [pc, #112]	; (8006a70 <HAL_DMA_Abort+0x268>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d009      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	4a1b      	ldr	r2, [pc, #108]	; (8006a74 <HAL_DMA_Abort+0x26c>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d004      	beq.n	8006a16 <HAL_DMA_Abort+0x20e>
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a19      	ldr	r2, [pc, #100]	; (8006a78 <HAL_DMA_Abort+0x270>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d132      	bne.n	8006a7c <HAL_DMA_Abort+0x274>
 8006a16:	2301      	movs	r3, #1
 8006a18:	e031      	b.n	8006a7e <HAL_DMA_Abort+0x276>
 8006a1a:	bf00      	nop
 8006a1c:	40020010 	.word	0x40020010
 8006a20:	40020028 	.word	0x40020028
 8006a24:	40020040 	.word	0x40020040
 8006a28:	40020058 	.word	0x40020058
 8006a2c:	40020070 	.word	0x40020070
 8006a30:	40020088 	.word	0x40020088
 8006a34:	400200a0 	.word	0x400200a0
 8006a38:	400200b8 	.word	0x400200b8
 8006a3c:	40020410 	.word	0x40020410
 8006a40:	40020428 	.word	0x40020428
 8006a44:	40020440 	.word	0x40020440
 8006a48:	40020458 	.word	0x40020458
 8006a4c:	40020470 	.word	0x40020470
 8006a50:	40020488 	.word	0x40020488
 8006a54:	400204a0 	.word	0x400204a0
 8006a58:	400204b8 	.word	0x400204b8
 8006a5c:	58025408 	.word	0x58025408
 8006a60:	5802541c 	.word	0x5802541c
 8006a64:	58025430 	.word	0x58025430
 8006a68:	58025444 	.word	0x58025444
 8006a6c:	58025458 	.word	0x58025458
 8006a70:	5802546c 	.word	0x5802546c
 8006a74:	58025480 	.word	0x58025480
 8006a78:	58025494 	.word	0x58025494
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d007      	beq.n	8006a92 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a86:	681a      	ldr	r2, [r3, #0]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006a90:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6d      	ldr	r2, [pc, #436]	; (8006c4c <HAL_DMA_Abort+0x444>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d04a      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a6b      	ldr	r2, [pc, #428]	; (8006c50 <HAL_DMA_Abort+0x448>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d045      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a6a      	ldr	r2, [pc, #424]	; (8006c54 <HAL_DMA_Abort+0x44c>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d040      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a68      	ldr	r2, [pc, #416]	; (8006c58 <HAL_DMA_Abort+0x450>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d03b      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a67      	ldr	r2, [pc, #412]	; (8006c5c <HAL_DMA_Abort+0x454>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d036      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a65      	ldr	r2, [pc, #404]	; (8006c60 <HAL_DMA_Abort+0x458>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d031      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a64      	ldr	r2, [pc, #400]	; (8006c64 <HAL_DMA_Abort+0x45c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d02c      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a62      	ldr	r2, [pc, #392]	; (8006c68 <HAL_DMA_Abort+0x460>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d027      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a61      	ldr	r2, [pc, #388]	; (8006c6c <HAL_DMA_Abort+0x464>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d022      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a5f      	ldr	r2, [pc, #380]	; (8006c70 <HAL_DMA_Abort+0x468>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d01d      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	4a5e      	ldr	r2, [pc, #376]	; (8006c74 <HAL_DMA_Abort+0x46c>)
 8006afc:	4293      	cmp	r3, r2
 8006afe:	d018      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a5c      	ldr	r2, [pc, #368]	; (8006c78 <HAL_DMA_Abort+0x470>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d013      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a5b      	ldr	r2, [pc, #364]	; (8006c7c <HAL_DMA_Abort+0x474>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d00e      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a59      	ldr	r2, [pc, #356]	; (8006c80 <HAL_DMA_Abort+0x478>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d009      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a58      	ldr	r2, [pc, #352]	; (8006c84 <HAL_DMA_Abort+0x47c>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d004      	beq.n	8006b32 <HAL_DMA_Abort+0x32a>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	4a56      	ldr	r2, [pc, #344]	; (8006c88 <HAL_DMA_Abort+0x480>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d108      	bne.n	8006b44 <HAL_DMA_Abort+0x33c>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	681a      	ldr	r2, [r3, #0]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f022 0201 	bic.w	r2, r2, #1
 8006b40:	601a      	str	r2, [r3, #0]
 8006b42:	e007      	b.n	8006b54 <HAL_DMA_Abort+0x34c>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f022 0201 	bic.w	r2, r2, #1
 8006b52:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b54:	e013      	b.n	8006b7e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b56:	f7fc ff69 	bl	8003a2c <HAL_GetTick>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	1ad3      	subs	r3, r2, r3
 8006b60:	2b05      	cmp	r3, #5
 8006b62:	d90c      	bls.n	8006b7e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2220      	movs	r2, #32
 8006b68:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2203      	movs	r2, #3
 8006b6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e12d      	b.n	8006dda <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e5      	bne.n	8006b56 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a2f      	ldr	r2, [pc, #188]	; (8006c4c <HAL_DMA_Abort+0x444>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d04a      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a2d      	ldr	r2, [pc, #180]	; (8006c50 <HAL_DMA_Abort+0x448>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d045      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a2c      	ldr	r2, [pc, #176]	; (8006c54 <HAL_DMA_Abort+0x44c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d040      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a2a      	ldr	r2, [pc, #168]	; (8006c58 <HAL_DMA_Abort+0x450>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d03b      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a29      	ldr	r2, [pc, #164]	; (8006c5c <HAL_DMA_Abort+0x454>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d036      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a27      	ldr	r2, [pc, #156]	; (8006c60 <HAL_DMA_Abort+0x458>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d031      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a26      	ldr	r2, [pc, #152]	; (8006c64 <HAL_DMA_Abort+0x45c>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d02c      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a24      	ldr	r2, [pc, #144]	; (8006c68 <HAL_DMA_Abort+0x460>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d027      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a23      	ldr	r2, [pc, #140]	; (8006c6c <HAL_DMA_Abort+0x464>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d022      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a21      	ldr	r2, [pc, #132]	; (8006c70 <HAL_DMA_Abort+0x468>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d01d      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a20      	ldr	r2, [pc, #128]	; (8006c74 <HAL_DMA_Abort+0x46c>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d018      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a1e      	ldr	r2, [pc, #120]	; (8006c78 <HAL_DMA_Abort+0x470>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d013      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a1d      	ldr	r2, [pc, #116]	; (8006c7c <HAL_DMA_Abort+0x474>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00e      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a1b      	ldr	r2, [pc, #108]	; (8006c80 <HAL_DMA_Abort+0x478>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d009      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4a1a      	ldr	r2, [pc, #104]	; (8006c84 <HAL_DMA_Abort+0x47c>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	d004      	beq.n	8006c2a <HAL_DMA_Abort+0x422>
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	4a18      	ldr	r2, [pc, #96]	; (8006c88 <HAL_DMA_Abort+0x480>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d101      	bne.n	8006c2e <HAL_DMA_Abort+0x426>
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e000      	b.n	8006c30 <HAL_DMA_Abort+0x428>
 8006c2e:	2300      	movs	r3, #0
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d02b      	beq.n	8006c8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c3e:	f003 031f 	and.w	r3, r3, #31
 8006c42:	223f      	movs	r2, #63	; 0x3f
 8006c44:	409a      	lsls	r2, r3
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	609a      	str	r2, [r3, #8]
 8006c4a:	e02a      	b.n	8006ca2 <HAL_DMA_Abort+0x49a>
 8006c4c:	40020010 	.word	0x40020010
 8006c50:	40020028 	.word	0x40020028
 8006c54:	40020040 	.word	0x40020040
 8006c58:	40020058 	.word	0x40020058
 8006c5c:	40020070 	.word	0x40020070
 8006c60:	40020088 	.word	0x40020088
 8006c64:	400200a0 	.word	0x400200a0
 8006c68:	400200b8 	.word	0x400200b8
 8006c6c:	40020410 	.word	0x40020410
 8006c70:	40020428 	.word	0x40020428
 8006c74:	40020440 	.word	0x40020440
 8006c78:	40020458 	.word	0x40020458
 8006c7c:	40020470 	.word	0x40020470
 8006c80:	40020488 	.word	0x40020488
 8006c84:	400204a0 	.word	0x400204a0
 8006c88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c96:	f003 031f 	and.w	r3, r3, #31
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	409a      	lsls	r2, r3
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a4f      	ldr	r2, [pc, #316]	; (8006de4 <HAL_DMA_Abort+0x5dc>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d072      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a4d      	ldr	r2, [pc, #308]	; (8006de8 <HAL_DMA_Abort+0x5e0>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d06d      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a4c      	ldr	r2, [pc, #304]	; (8006dec <HAL_DMA_Abort+0x5e4>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d068      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a4a      	ldr	r2, [pc, #296]	; (8006df0 <HAL_DMA_Abort+0x5e8>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d063      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a49      	ldr	r2, [pc, #292]	; (8006df4 <HAL_DMA_Abort+0x5ec>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d05e      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a47      	ldr	r2, [pc, #284]	; (8006df8 <HAL_DMA_Abort+0x5f0>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d059      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a46      	ldr	r2, [pc, #280]	; (8006dfc <HAL_DMA_Abort+0x5f4>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d054      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a44      	ldr	r2, [pc, #272]	; (8006e00 <HAL_DMA_Abort+0x5f8>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d04f      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a43      	ldr	r2, [pc, #268]	; (8006e04 <HAL_DMA_Abort+0x5fc>)
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	d04a      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a41      	ldr	r2, [pc, #260]	; (8006e08 <HAL_DMA_Abort+0x600>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d045      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a40      	ldr	r2, [pc, #256]	; (8006e0c <HAL_DMA_Abort+0x604>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d040      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a3e      	ldr	r2, [pc, #248]	; (8006e10 <HAL_DMA_Abort+0x608>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d03b      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a3d      	ldr	r2, [pc, #244]	; (8006e14 <HAL_DMA_Abort+0x60c>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d036      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a3b      	ldr	r2, [pc, #236]	; (8006e18 <HAL_DMA_Abort+0x610>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d031      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a3a      	ldr	r2, [pc, #232]	; (8006e1c <HAL_DMA_Abort+0x614>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d02c      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a38      	ldr	r2, [pc, #224]	; (8006e20 <HAL_DMA_Abort+0x618>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d027      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a37      	ldr	r2, [pc, #220]	; (8006e24 <HAL_DMA_Abort+0x61c>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d022      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	4a35      	ldr	r2, [pc, #212]	; (8006e28 <HAL_DMA_Abort+0x620>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d01d      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a34      	ldr	r2, [pc, #208]	; (8006e2c <HAL_DMA_Abort+0x624>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d018      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a32      	ldr	r2, [pc, #200]	; (8006e30 <HAL_DMA_Abort+0x628>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	d013      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	4a31      	ldr	r2, [pc, #196]	; (8006e34 <HAL_DMA_Abort+0x62c>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d00e      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	4a2f      	ldr	r2, [pc, #188]	; (8006e38 <HAL_DMA_Abort+0x630>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d009      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a2e      	ldr	r2, [pc, #184]	; (8006e3c <HAL_DMA_Abort+0x634>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d004      	beq.n	8006d92 <HAL_DMA_Abort+0x58a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a2c      	ldr	r2, [pc, #176]	; (8006e40 <HAL_DMA_Abort+0x638>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d101      	bne.n	8006d96 <HAL_DMA_Abort+0x58e>
 8006d92:	2301      	movs	r3, #1
 8006d94:	e000      	b.n	8006d98 <HAL_DMA_Abort+0x590>
 8006d96:	2300      	movs	r3, #0
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d015      	beq.n	8006dc8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006da4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00c      	beq.n	8006dc8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006db8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006dbc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc2:	687a      	ldr	r2, [r7, #4]
 8006dc4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006dc6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3718      	adds	r7, #24
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	40020010 	.word	0x40020010
 8006de8:	40020028 	.word	0x40020028
 8006dec:	40020040 	.word	0x40020040
 8006df0:	40020058 	.word	0x40020058
 8006df4:	40020070 	.word	0x40020070
 8006df8:	40020088 	.word	0x40020088
 8006dfc:	400200a0 	.word	0x400200a0
 8006e00:	400200b8 	.word	0x400200b8
 8006e04:	40020410 	.word	0x40020410
 8006e08:	40020428 	.word	0x40020428
 8006e0c:	40020440 	.word	0x40020440
 8006e10:	40020458 	.word	0x40020458
 8006e14:	40020470 	.word	0x40020470
 8006e18:	40020488 	.word	0x40020488
 8006e1c:	400204a0 	.word	0x400204a0
 8006e20:	400204b8 	.word	0x400204b8
 8006e24:	58025408 	.word	0x58025408
 8006e28:	5802541c 	.word	0x5802541c
 8006e2c:	58025430 	.word	0x58025430
 8006e30:	58025444 	.word	0x58025444
 8006e34:	58025458 	.word	0x58025458
 8006e38:	5802546c 	.word	0x5802546c
 8006e3c:	58025480 	.word	0x58025480
 8006e40:	58025494 	.word	0x58025494

08006e44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d101      	bne.n	8006e56 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8006e52:	2301      	movs	r3, #1
 8006e54:	e237      	b.n	80072c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e5c:	b2db      	uxtb	r3, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d004      	beq.n	8006e6c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2280      	movs	r2, #128	; 0x80
 8006e66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e22c      	b.n	80072c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a5c      	ldr	r2, [pc, #368]	; (8006fe4 <HAL_DMA_Abort_IT+0x1a0>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d04a      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a5b      	ldr	r2, [pc, #364]	; (8006fe8 <HAL_DMA_Abort_IT+0x1a4>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d045      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a59      	ldr	r2, [pc, #356]	; (8006fec <HAL_DMA_Abort_IT+0x1a8>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d040      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	4a58      	ldr	r2, [pc, #352]	; (8006ff0 <HAL_DMA_Abort_IT+0x1ac>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d03b      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	4a56      	ldr	r2, [pc, #344]	; (8006ff4 <HAL_DMA_Abort_IT+0x1b0>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d036      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	4a55      	ldr	r2, [pc, #340]	; (8006ff8 <HAL_DMA_Abort_IT+0x1b4>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d031      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	4a53      	ldr	r2, [pc, #332]	; (8006ffc <HAL_DMA_Abort_IT+0x1b8>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d02c      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	4a52      	ldr	r2, [pc, #328]	; (8007000 <HAL_DMA_Abort_IT+0x1bc>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d027      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	4a50      	ldr	r2, [pc, #320]	; (8007004 <HAL_DMA_Abort_IT+0x1c0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d022      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a4f      	ldr	r2, [pc, #316]	; (8007008 <HAL_DMA_Abort_IT+0x1c4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d01d      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	4a4d      	ldr	r2, [pc, #308]	; (800700c <HAL_DMA_Abort_IT+0x1c8>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d018      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4a4c      	ldr	r2, [pc, #304]	; (8007010 <HAL_DMA_Abort_IT+0x1cc>)
 8006ee0:	4293      	cmp	r3, r2
 8006ee2:	d013      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4a4a      	ldr	r2, [pc, #296]	; (8007014 <HAL_DMA_Abort_IT+0x1d0>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	d00e      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	4a49      	ldr	r2, [pc, #292]	; (8007018 <HAL_DMA_Abort_IT+0x1d4>)
 8006ef4:	4293      	cmp	r3, r2
 8006ef6:	d009      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	4a47      	ldr	r2, [pc, #284]	; (800701c <HAL_DMA_Abort_IT+0x1d8>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d004      	beq.n	8006f0c <HAL_DMA_Abort_IT+0xc8>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a46      	ldr	r2, [pc, #280]	; (8007020 <HAL_DMA_Abort_IT+0x1dc>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d101      	bne.n	8006f10 <HAL_DMA_Abort_IT+0xcc>
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	e000      	b.n	8006f12 <HAL_DMA_Abort_IT+0xce>
 8006f10:	2300      	movs	r3, #0
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 8086 	beq.w	8007024 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2204      	movs	r2, #4
 8006f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4a2f      	ldr	r2, [pc, #188]	; (8006fe4 <HAL_DMA_Abort_IT+0x1a0>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d04a      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a2e      	ldr	r2, [pc, #184]	; (8006fe8 <HAL_DMA_Abort_IT+0x1a4>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d045      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	4a2c      	ldr	r2, [pc, #176]	; (8006fec <HAL_DMA_Abort_IT+0x1a8>)
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	d040      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a2b      	ldr	r2, [pc, #172]	; (8006ff0 <HAL_DMA_Abort_IT+0x1ac>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d03b      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a29      	ldr	r2, [pc, #164]	; (8006ff4 <HAL_DMA_Abort_IT+0x1b0>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d036      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a28      	ldr	r2, [pc, #160]	; (8006ff8 <HAL_DMA_Abort_IT+0x1b4>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d031      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a26      	ldr	r2, [pc, #152]	; (8006ffc <HAL_DMA_Abort_IT+0x1b8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d02c      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a25      	ldr	r2, [pc, #148]	; (8007000 <HAL_DMA_Abort_IT+0x1bc>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d027      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a23      	ldr	r2, [pc, #140]	; (8007004 <HAL_DMA_Abort_IT+0x1c0>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d022      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a22      	ldr	r2, [pc, #136]	; (8007008 <HAL_DMA_Abort_IT+0x1c4>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d01d      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a20      	ldr	r2, [pc, #128]	; (800700c <HAL_DMA_Abort_IT+0x1c8>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d018      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	4a1f      	ldr	r2, [pc, #124]	; (8007010 <HAL_DMA_Abort_IT+0x1cc>)
 8006f94:	4293      	cmp	r3, r2
 8006f96:	d013      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	4a1d      	ldr	r2, [pc, #116]	; (8007014 <HAL_DMA_Abort_IT+0x1d0>)
 8006f9e:	4293      	cmp	r3, r2
 8006fa0:	d00e      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a1c      	ldr	r2, [pc, #112]	; (8007018 <HAL_DMA_Abort_IT+0x1d4>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d009      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a1a      	ldr	r2, [pc, #104]	; (800701c <HAL_DMA_Abort_IT+0x1d8>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d004      	beq.n	8006fc0 <HAL_DMA_Abort_IT+0x17c>
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	4a19      	ldr	r2, [pc, #100]	; (8007020 <HAL_DMA_Abort_IT+0x1dc>)
 8006fbc:	4293      	cmp	r3, r2
 8006fbe:	d108      	bne.n	8006fd2 <HAL_DMA_Abort_IT+0x18e>
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f022 0201 	bic.w	r2, r2, #1
 8006fce:	601a      	str	r2, [r3, #0]
 8006fd0:	e178      	b.n	80072c4 <HAL_DMA_Abort_IT+0x480>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	681a      	ldr	r2, [r3, #0]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f022 0201 	bic.w	r2, r2, #1
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e16f      	b.n	80072c4 <HAL_DMA_Abort_IT+0x480>
 8006fe4:	40020010 	.word	0x40020010
 8006fe8:	40020028 	.word	0x40020028
 8006fec:	40020040 	.word	0x40020040
 8006ff0:	40020058 	.word	0x40020058
 8006ff4:	40020070 	.word	0x40020070
 8006ff8:	40020088 	.word	0x40020088
 8006ffc:	400200a0 	.word	0x400200a0
 8007000:	400200b8 	.word	0x400200b8
 8007004:	40020410 	.word	0x40020410
 8007008:	40020428 	.word	0x40020428
 800700c:	40020440 	.word	0x40020440
 8007010:	40020458 	.word	0x40020458
 8007014:	40020470 	.word	0x40020470
 8007018:	40020488 	.word	0x40020488
 800701c:	400204a0 	.word	0x400204a0
 8007020:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f022 020e 	bic.w	r2, r2, #14
 8007032:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4a6c      	ldr	r2, [pc, #432]	; (80071ec <HAL_DMA_Abort_IT+0x3a8>)
 800703a:	4293      	cmp	r3, r2
 800703c:	d04a      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4a6b      	ldr	r2, [pc, #428]	; (80071f0 <HAL_DMA_Abort_IT+0x3ac>)
 8007044:	4293      	cmp	r3, r2
 8007046:	d045      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	4a69      	ldr	r2, [pc, #420]	; (80071f4 <HAL_DMA_Abort_IT+0x3b0>)
 800704e:	4293      	cmp	r3, r2
 8007050:	d040      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a68      	ldr	r2, [pc, #416]	; (80071f8 <HAL_DMA_Abort_IT+0x3b4>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d03b      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a66      	ldr	r2, [pc, #408]	; (80071fc <HAL_DMA_Abort_IT+0x3b8>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d036      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a65      	ldr	r2, [pc, #404]	; (8007200 <HAL_DMA_Abort_IT+0x3bc>)
 800706c:	4293      	cmp	r3, r2
 800706e:	d031      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a63      	ldr	r2, [pc, #396]	; (8007204 <HAL_DMA_Abort_IT+0x3c0>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d02c      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	4a62      	ldr	r2, [pc, #392]	; (8007208 <HAL_DMA_Abort_IT+0x3c4>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d027      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a60      	ldr	r2, [pc, #384]	; (800720c <HAL_DMA_Abort_IT+0x3c8>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d022      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a5f      	ldr	r2, [pc, #380]	; (8007210 <HAL_DMA_Abort_IT+0x3cc>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d01d      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a5d      	ldr	r2, [pc, #372]	; (8007214 <HAL_DMA_Abort_IT+0x3d0>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d018      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a5c      	ldr	r2, [pc, #368]	; (8007218 <HAL_DMA_Abort_IT+0x3d4>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d013      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a5a      	ldr	r2, [pc, #360]	; (800721c <HAL_DMA_Abort_IT+0x3d8>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d00e      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a59      	ldr	r2, [pc, #356]	; (8007220 <HAL_DMA_Abort_IT+0x3dc>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d009      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a57      	ldr	r2, [pc, #348]	; (8007224 <HAL_DMA_Abort_IT+0x3e0>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d004      	beq.n	80070d4 <HAL_DMA_Abort_IT+0x290>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a56      	ldr	r2, [pc, #344]	; (8007228 <HAL_DMA_Abort_IT+0x3e4>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d108      	bne.n	80070e6 <HAL_DMA_Abort_IT+0x2a2>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f022 0201 	bic.w	r2, r2, #1
 80070e2:	601a      	str	r2, [r3, #0]
 80070e4:	e007      	b.n	80070f6 <HAL_DMA_Abort_IT+0x2b2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	681a      	ldr	r2, [r3, #0]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f022 0201 	bic.w	r2, r2, #1
 80070f4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a3c      	ldr	r2, [pc, #240]	; (80071ec <HAL_DMA_Abort_IT+0x3a8>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d072      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a3a      	ldr	r2, [pc, #232]	; (80071f0 <HAL_DMA_Abort_IT+0x3ac>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d06d      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a39      	ldr	r2, [pc, #228]	; (80071f4 <HAL_DMA_Abort_IT+0x3b0>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d068      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a37      	ldr	r2, [pc, #220]	; (80071f8 <HAL_DMA_Abort_IT+0x3b4>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d063      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a36      	ldr	r2, [pc, #216]	; (80071fc <HAL_DMA_Abort_IT+0x3b8>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d05e      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a34      	ldr	r2, [pc, #208]	; (8007200 <HAL_DMA_Abort_IT+0x3bc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d059      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a33      	ldr	r2, [pc, #204]	; (8007204 <HAL_DMA_Abort_IT+0x3c0>)
 8007138:	4293      	cmp	r3, r2
 800713a:	d054      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a31      	ldr	r2, [pc, #196]	; (8007208 <HAL_DMA_Abort_IT+0x3c4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d04f      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a30      	ldr	r2, [pc, #192]	; (800720c <HAL_DMA_Abort_IT+0x3c8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d04a      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a2e      	ldr	r2, [pc, #184]	; (8007210 <HAL_DMA_Abort_IT+0x3cc>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d045      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a2d      	ldr	r2, [pc, #180]	; (8007214 <HAL_DMA_Abort_IT+0x3d0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d040      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	4a2b      	ldr	r2, [pc, #172]	; (8007218 <HAL_DMA_Abort_IT+0x3d4>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d03b      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	4a2a      	ldr	r2, [pc, #168]	; (800721c <HAL_DMA_Abort_IT+0x3d8>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d036      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	4a28      	ldr	r2, [pc, #160]	; (8007220 <HAL_DMA_Abort_IT+0x3dc>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d031      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a27      	ldr	r2, [pc, #156]	; (8007224 <HAL_DMA_Abort_IT+0x3e0>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d02c      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a25      	ldr	r2, [pc, #148]	; (8007228 <HAL_DMA_Abort_IT+0x3e4>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d027      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a24      	ldr	r2, [pc, #144]	; (800722c <HAL_DMA_Abort_IT+0x3e8>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d022      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4a22      	ldr	r2, [pc, #136]	; (8007230 <HAL_DMA_Abort_IT+0x3ec>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d01d      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	4a21      	ldr	r2, [pc, #132]	; (8007234 <HAL_DMA_Abort_IT+0x3f0>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d018      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a1f      	ldr	r2, [pc, #124]	; (8007238 <HAL_DMA_Abort_IT+0x3f4>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d013      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a1e      	ldr	r2, [pc, #120]	; (800723c <HAL_DMA_Abort_IT+0x3f8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00e      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a1c      	ldr	r2, [pc, #112]	; (8007240 <HAL_DMA_Abort_IT+0x3fc>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d009      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <HAL_DMA_Abort_IT+0x400>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d004      	beq.n	80071e6 <HAL_DMA_Abort_IT+0x3a2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a19      	ldr	r2, [pc, #100]	; (8007248 <HAL_DMA_Abort_IT+0x404>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d132      	bne.n	800724c <HAL_DMA_Abort_IT+0x408>
 80071e6:	2301      	movs	r3, #1
 80071e8:	e031      	b.n	800724e <HAL_DMA_Abort_IT+0x40a>
 80071ea:	bf00      	nop
 80071ec:	40020010 	.word	0x40020010
 80071f0:	40020028 	.word	0x40020028
 80071f4:	40020040 	.word	0x40020040
 80071f8:	40020058 	.word	0x40020058
 80071fc:	40020070 	.word	0x40020070
 8007200:	40020088 	.word	0x40020088
 8007204:	400200a0 	.word	0x400200a0
 8007208:	400200b8 	.word	0x400200b8
 800720c:	40020410 	.word	0x40020410
 8007210:	40020428 	.word	0x40020428
 8007214:	40020440 	.word	0x40020440
 8007218:	40020458 	.word	0x40020458
 800721c:	40020470 	.word	0x40020470
 8007220:	40020488 	.word	0x40020488
 8007224:	400204a0 	.word	0x400204a0
 8007228:	400204b8 	.word	0x400204b8
 800722c:	58025408 	.word	0x58025408
 8007230:	5802541c 	.word	0x5802541c
 8007234:	58025430 	.word	0x58025430
 8007238:	58025444 	.word	0x58025444
 800723c:	58025458 	.word	0x58025458
 8007240:	5802546c 	.word	0x5802546c
 8007244:	58025480 	.word	0x58025480
 8007248:	58025494 	.word	0x58025494
 800724c:	2300      	movs	r3, #0
 800724e:	2b00      	cmp	r3, #0
 8007250:	d028      	beq.n	80072a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800725c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007260:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007266:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800726c:	f003 031f 	and.w	r3, r3, #31
 8007270:	2201      	movs	r2, #1
 8007272:	409a      	lsls	r2, r3
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800727c:	687a      	ldr	r2, [r7, #4]
 800727e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007280:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00c      	beq.n	80072a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007298:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800729e:	687a      	ldr	r2, [r7, #4]
 80072a0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2201      	movs	r2, #1
 80072a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop

080072d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b08a      	sub	sp, #40	; 0x28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80072dc:	4b67      	ldr	r3, [pc, #412]	; (800747c <HAL_DMA_IRQHandler+0x1ac>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	4a67      	ldr	r2, [pc, #412]	; (8007480 <HAL_DMA_IRQHandler+0x1b0>)
 80072e2:	fba2 2303 	umull	r2, r3, r2, r3
 80072e6:	0a9b      	lsrs	r3, r3, #10
 80072e8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a5f      	ldr	r2, [pc, #380]	; (8007484 <HAL_DMA_IRQHandler+0x1b4>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d04a      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a5d      	ldr	r2, [pc, #372]	; (8007488 <HAL_DMA_IRQHandler+0x1b8>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d045      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a5c      	ldr	r2, [pc, #368]	; (800748c <HAL_DMA_IRQHandler+0x1bc>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d040      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a5a      	ldr	r2, [pc, #360]	; (8007490 <HAL_DMA_IRQHandler+0x1c0>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d03b      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	4a59      	ldr	r2, [pc, #356]	; (8007494 <HAL_DMA_IRQHandler+0x1c4>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d036      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	4a57      	ldr	r2, [pc, #348]	; (8007498 <HAL_DMA_IRQHandler+0x1c8>)
 800733a:	4293      	cmp	r3, r2
 800733c:	d031      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a56      	ldr	r2, [pc, #344]	; (800749c <HAL_DMA_IRQHandler+0x1cc>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d02c      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a54      	ldr	r2, [pc, #336]	; (80074a0 <HAL_DMA_IRQHandler+0x1d0>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d027      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	4a53      	ldr	r2, [pc, #332]	; (80074a4 <HAL_DMA_IRQHandler+0x1d4>)
 8007358:	4293      	cmp	r3, r2
 800735a:	d022      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a51      	ldr	r2, [pc, #324]	; (80074a8 <HAL_DMA_IRQHandler+0x1d8>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d01d      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a50      	ldr	r2, [pc, #320]	; (80074ac <HAL_DMA_IRQHandler+0x1dc>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d018      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a4e      	ldr	r2, [pc, #312]	; (80074b0 <HAL_DMA_IRQHandler+0x1e0>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d013      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a4d      	ldr	r2, [pc, #308]	; (80074b4 <HAL_DMA_IRQHandler+0x1e4>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d00e      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a4b      	ldr	r2, [pc, #300]	; (80074b8 <HAL_DMA_IRQHandler+0x1e8>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d009      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a4a      	ldr	r2, [pc, #296]	; (80074bc <HAL_DMA_IRQHandler+0x1ec>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d004      	beq.n	80073a2 <HAL_DMA_IRQHandler+0xd2>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a48      	ldr	r2, [pc, #288]	; (80074c0 <HAL_DMA_IRQHandler+0x1f0>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d101      	bne.n	80073a6 <HAL_DMA_IRQHandler+0xd6>
 80073a2:	2301      	movs	r3, #1
 80073a4:	e000      	b.n	80073a8 <HAL_DMA_IRQHandler+0xd8>
 80073a6:	2300      	movs	r3, #0
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	f000 842b 	beq.w	8007c04 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073b2:	f003 031f 	and.w	r3, r3, #31
 80073b6:	2208      	movs	r2, #8
 80073b8:	409a      	lsls	r2, r3
 80073ba:	69bb      	ldr	r3, [r7, #24]
 80073bc:	4013      	ands	r3, r2
 80073be:	2b00      	cmp	r3, #0
 80073c0:	f000 80a2 	beq.w	8007508 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a2e      	ldr	r2, [pc, #184]	; (8007484 <HAL_DMA_IRQHandler+0x1b4>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d04a      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a2d      	ldr	r2, [pc, #180]	; (8007488 <HAL_DMA_IRQHandler+0x1b8>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d045      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a2b      	ldr	r2, [pc, #172]	; (800748c <HAL_DMA_IRQHandler+0x1bc>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d040      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a2a      	ldr	r2, [pc, #168]	; (8007490 <HAL_DMA_IRQHandler+0x1c0>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d03b      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a28      	ldr	r2, [pc, #160]	; (8007494 <HAL_DMA_IRQHandler+0x1c4>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d036      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a27      	ldr	r2, [pc, #156]	; (8007498 <HAL_DMA_IRQHandler+0x1c8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d031      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a25      	ldr	r2, [pc, #148]	; (800749c <HAL_DMA_IRQHandler+0x1cc>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d02c      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a24      	ldr	r2, [pc, #144]	; (80074a0 <HAL_DMA_IRQHandler+0x1d0>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d027      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a22      	ldr	r2, [pc, #136]	; (80074a4 <HAL_DMA_IRQHandler+0x1d4>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d022      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a21      	ldr	r2, [pc, #132]	; (80074a8 <HAL_DMA_IRQHandler+0x1d8>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d01d      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a1f      	ldr	r2, [pc, #124]	; (80074ac <HAL_DMA_IRQHandler+0x1dc>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d018      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a1e      	ldr	r2, [pc, #120]	; (80074b0 <HAL_DMA_IRQHandler+0x1e0>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d013      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	4a1c      	ldr	r2, [pc, #112]	; (80074b4 <HAL_DMA_IRQHandler+0x1e4>)
 8007442:	4293      	cmp	r3, r2
 8007444:	d00e      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a1b      	ldr	r2, [pc, #108]	; (80074b8 <HAL_DMA_IRQHandler+0x1e8>)
 800744c:	4293      	cmp	r3, r2
 800744e:	d009      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	4a19      	ldr	r2, [pc, #100]	; (80074bc <HAL_DMA_IRQHandler+0x1ec>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d004      	beq.n	8007464 <HAL_DMA_IRQHandler+0x194>
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a18      	ldr	r2, [pc, #96]	; (80074c0 <HAL_DMA_IRQHandler+0x1f0>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d12f      	bne.n	80074c4 <HAL_DMA_IRQHandler+0x1f4>
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f003 0304 	and.w	r3, r3, #4
 800746e:	2b00      	cmp	r3, #0
 8007470:	bf14      	ite	ne
 8007472:	2301      	movne	r3, #1
 8007474:	2300      	moveq	r3, #0
 8007476:	b2db      	uxtb	r3, r3
 8007478:	e02e      	b.n	80074d8 <HAL_DMA_IRQHandler+0x208>
 800747a:	bf00      	nop
 800747c:	24000090 	.word	0x24000090
 8007480:	1b4e81b5 	.word	0x1b4e81b5
 8007484:	40020010 	.word	0x40020010
 8007488:	40020028 	.word	0x40020028
 800748c:	40020040 	.word	0x40020040
 8007490:	40020058 	.word	0x40020058
 8007494:	40020070 	.word	0x40020070
 8007498:	40020088 	.word	0x40020088
 800749c:	400200a0 	.word	0x400200a0
 80074a0:	400200b8 	.word	0x400200b8
 80074a4:	40020410 	.word	0x40020410
 80074a8:	40020428 	.word	0x40020428
 80074ac:	40020440 	.word	0x40020440
 80074b0:	40020458 	.word	0x40020458
 80074b4:	40020470 	.word	0x40020470
 80074b8:	40020488 	.word	0x40020488
 80074bc:	400204a0 	.word	0x400204a0
 80074c0:	400204b8 	.word	0x400204b8
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0308 	and.w	r3, r3, #8
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	bf14      	ite	ne
 80074d2:	2301      	movne	r3, #1
 80074d4:	2300      	moveq	r3, #0
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d015      	beq.n	8007508 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	681a      	ldr	r2, [r3, #0]
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	f022 0204 	bic.w	r2, r2, #4
 80074ea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074f0:	f003 031f 	and.w	r3, r3, #31
 80074f4:	2208      	movs	r2, #8
 80074f6:	409a      	lsls	r2, r3
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007500:	f043 0201 	orr.w	r2, r3, #1
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800750c:	f003 031f 	and.w	r3, r3, #31
 8007510:	69ba      	ldr	r2, [r7, #24]
 8007512:	fa22 f303 	lsr.w	r3, r2, r3
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d06e      	beq.n	80075fc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a69      	ldr	r2, [pc, #420]	; (80076c8 <HAL_DMA_IRQHandler+0x3f8>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d04a      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a67      	ldr	r2, [pc, #412]	; (80076cc <HAL_DMA_IRQHandler+0x3fc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d045      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a66      	ldr	r2, [pc, #408]	; (80076d0 <HAL_DMA_IRQHandler+0x400>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d040      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a64      	ldr	r2, [pc, #400]	; (80076d4 <HAL_DMA_IRQHandler+0x404>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d03b      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a63      	ldr	r2, [pc, #396]	; (80076d8 <HAL_DMA_IRQHandler+0x408>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d036      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a61      	ldr	r2, [pc, #388]	; (80076dc <HAL_DMA_IRQHandler+0x40c>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d031      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a60      	ldr	r2, [pc, #384]	; (80076e0 <HAL_DMA_IRQHandler+0x410>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d02c      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a5e      	ldr	r2, [pc, #376]	; (80076e4 <HAL_DMA_IRQHandler+0x414>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d027      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a5d      	ldr	r2, [pc, #372]	; (80076e8 <HAL_DMA_IRQHandler+0x418>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d022      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a5b      	ldr	r2, [pc, #364]	; (80076ec <HAL_DMA_IRQHandler+0x41c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d01d      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a5a      	ldr	r2, [pc, #360]	; (80076f0 <HAL_DMA_IRQHandler+0x420>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d018      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a58      	ldr	r2, [pc, #352]	; (80076f4 <HAL_DMA_IRQHandler+0x424>)
 8007592:	4293      	cmp	r3, r2
 8007594:	d013      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	4a57      	ldr	r2, [pc, #348]	; (80076f8 <HAL_DMA_IRQHandler+0x428>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d00e      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	4a55      	ldr	r2, [pc, #340]	; (80076fc <HAL_DMA_IRQHandler+0x42c>)
 80075a6:	4293      	cmp	r3, r2
 80075a8:	d009      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	4a54      	ldr	r2, [pc, #336]	; (8007700 <HAL_DMA_IRQHandler+0x430>)
 80075b0:	4293      	cmp	r3, r2
 80075b2:	d004      	beq.n	80075be <HAL_DMA_IRQHandler+0x2ee>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4a52      	ldr	r2, [pc, #328]	; (8007704 <HAL_DMA_IRQHandler+0x434>)
 80075ba:	4293      	cmp	r3, r2
 80075bc:	d10a      	bne.n	80075d4 <HAL_DMA_IRQHandler+0x304>
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	bf14      	ite	ne
 80075cc:	2301      	movne	r3, #1
 80075ce:	2300      	moveq	r3, #0
 80075d0:	b2db      	uxtb	r3, r3
 80075d2:	e003      	b.n	80075dc <HAL_DMA_IRQHandler+0x30c>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	2300      	movs	r3, #0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d00d      	beq.n	80075fc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075e4:	f003 031f 	and.w	r3, r3, #31
 80075e8:	2201      	movs	r2, #1
 80075ea:	409a      	lsls	r2, r3
 80075ec:	6a3b      	ldr	r3, [r7, #32]
 80075ee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075f4:	f043 0202 	orr.w	r2, r3, #2
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007600:	f003 031f 	and.w	r3, r3, #31
 8007604:	2204      	movs	r2, #4
 8007606:	409a      	lsls	r2, r3
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	4013      	ands	r3, r2
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 808f 	beq.w	8007730 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4a2c      	ldr	r2, [pc, #176]	; (80076c8 <HAL_DMA_IRQHandler+0x3f8>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d04a      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a2a      	ldr	r2, [pc, #168]	; (80076cc <HAL_DMA_IRQHandler+0x3fc>)
 8007622:	4293      	cmp	r3, r2
 8007624:	d045      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	4a29      	ldr	r2, [pc, #164]	; (80076d0 <HAL_DMA_IRQHandler+0x400>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d040      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4a27      	ldr	r2, [pc, #156]	; (80076d4 <HAL_DMA_IRQHandler+0x404>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d03b      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	4a26      	ldr	r2, [pc, #152]	; (80076d8 <HAL_DMA_IRQHandler+0x408>)
 8007640:	4293      	cmp	r3, r2
 8007642:	d036      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	4a24      	ldr	r2, [pc, #144]	; (80076dc <HAL_DMA_IRQHandler+0x40c>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d031      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	4a23      	ldr	r2, [pc, #140]	; (80076e0 <HAL_DMA_IRQHandler+0x410>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d02c      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a21      	ldr	r2, [pc, #132]	; (80076e4 <HAL_DMA_IRQHandler+0x414>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d027      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a20      	ldr	r2, [pc, #128]	; (80076e8 <HAL_DMA_IRQHandler+0x418>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d022      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	4a1e      	ldr	r2, [pc, #120]	; (80076ec <HAL_DMA_IRQHandler+0x41c>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d01d      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a1d      	ldr	r2, [pc, #116]	; (80076f0 <HAL_DMA_IRQHandler+0x420>)
 800767c:	4293      	cmp	r3, r2
 800767e:	d018      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4a1b      	ldr	r2, [pc, #108]	; (80076f4 <HAL_DMA_IRQHandler+0x424>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d013      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	4a1a      	ldr	r2, [pc, #104]	; (80076f8 <HAL_DMA_IRQHandler+0x428>)
 8007690:	4293      	cmp	r3, r2
 8007692:	d00e      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	4a18      	ldr	r2, [pc, #96]	; (80076fc <HAL_DMA_IRQHandler+0x42c>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d009      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	4a17      	ldr	r2, [pc, #92]	; (8007700 <HAL_DMA_IRQHandler+0x430>)
 80076a4:	4293      	cmp	r3, r2
 80076a6:	d004      	beq.n	80076b2 <HAL_DMA_IRQHandler+0x3e2>
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4a15      	ldr	r2, [pc, #84]	; (8007704 <HAL_DMA_IRQHandler+0x434>)
 80076ae:	4293      	cmp	r3, r2
 80076b0:	d12a      	bne.n	8007708 <HAL_DMA_IRQHandler+0x438>
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f003 0302 	and.w	r3, r3, #2
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bf14      	ite	ne
 80076c0:	2301      	movne	r3, #1
 80076c2:	2300      	moveq	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	e023      	b.n	8007710 <HAL_DMA_IRQHandler+0x440>
 80076c8:	40020010 	.word	0x40020010
 80076cc:	40020028 	.word	0x40020028
 80076d0:	40020040 	.word	0x40020040
 80076d4:	40020058 	.word	0x40020058
 80076d8:	40020070 	.word	0x40020070
 80076dc:	40020088 	.word	0x40020088
 80076e0:	400200a0 	.word	0x400200a0
 80076e4:	400200b8 	.word	0x400200b8
 80076e8:	40020410 	.word	0x40020410
 80076ec:	40020428 	.word	0x40020428
 80076f0:	40020440 	.word	0x40020440
 80076f4:	40020458 	.word	0x40020458
 80076f8:	40020470 	.word	0x40020470
 80076fc:	40020488 	.word	0x40020488
 8007700:	400204a0 	.word	0x400204a0
 8007704:	400204b8 	.word	0x400204b8
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2300      	movs	r3, #0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d00d      	beq.n	8007730 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007718:	f003 031f 	and.w	r3, r3, #31
 800771c:	2204      	movs	r2, #4
 800771e:	409a      	lsls	r2, r3
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007728:	f043 0204 	orr.w	r2, r3, #4
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007734:	f003 031f 	and.w	r3, r3, #31
 8007738:	2210      	movs	r2, #16
 800773a:	409a      	lsls	r2, r3
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	4013      	ands	r3, r2
 8007740:	2b00      	cmp	r3, #0
 8007742:	f000 80a6 	beq.w	8007892 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a85      	ldr	r2, [pc, #532]	; (8007960 <HAL_DMA_IRQHandler+0x690>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d04a      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a83      	ldr	r2, [pc, #524]	; (8007964 <HAL_DMA_IRQHandler+0x694>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d045      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a82      	ldr	r2, [pc, #520]	; (8007968 <HAL_DMA_IRQHandler+0x698>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d040      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a80      	ldr	r2, [pc, #512]	; (800796c <HAL_DMA_IRQHandler+0x69c>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d03b      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a7f      	ldr	r2, [pc, #508]	; (8007970 <HAL_DMA_IRQHandler+0x6a0>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d036      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a7d      	ldr	r2, [pc, #500]	; (8007974 <HAL_DMA_IRQHandler+0x6a4>)
 800777e:	4293      	cmp	r3, r2
 8007780:	d031      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a7c      	ldr	r2, [pc, #496]	; (8007978 <HAL_DMA_IRQHandler+0x6a8>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d02c      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a7a      	ldr	r2, [pc, #488]	; (800797c <HAL_DMA_IRQHandler+0x6ac>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d027      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a79      	ldr	r2, [pc, #484]	; (8007980 <HAL_DMA_IRQHandler+0x6b0>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d022      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a77      	ldr	r2, [pc, #476]	; (8007984 <HAL_DMA_IRQHandler+0x6b4>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d01d      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a76      	ldr	r2, [pc, #472]	; (8007988 <HAL_DMA_IRQHandler+0x6b8>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d018      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a74      	ldr	r2, [pc, #464]	; (800798c <HAL_DMA_IRQHandler+0x6bc>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d013      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	4a73      	ldr	r2, [pc, #460]	; (8007990 <HAL_DMA_IRQHandler+0x6c0>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00e      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a71      	ldr	r2, [pc, #452]	; (8007994 <HAL_DMA_IRQHandler+0x6c4>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d009      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a70      	ldr	r2, [pc, #448]	; (8007998 <HAL_DMA_IRQHandler+0x6c8>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d004      	beq.n	80077e6 <HAL_DMA_IRQHandler+0x516>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a6e      	ldr	r2, [pc, #440]	; (800799c <HAL_DMA_IRQHandler+0x6cc>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d10a      	bne.n	80077fc <HAL_DMA_IRQHandler+0x52c>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f003 0308 	and.w	r3, r3, #8
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	bf14      	ite	ne
 80077f4:	2301      	movne	r3, #1
 80077f6:	2300      	moveq	r3, #0
 80077f8:	b2db      	uxtb	r3, r3
 80077fa:	e009      	b.n	8007810 <HAL_DMA_IRQHandler+0x540>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f003 0304 	and.w	r3, r3, #4
 8007806:	2b00      	cmp	r3, #0
 8007808:	bf14      	ite	ne
 800780a:	2301      	movne	r3, #1
 800780c:	2300      	moveq	r3, #0
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b00      	cmp	r3, #0
 8007812:	d03e      	beq.n	8007892 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007818:	f003 031f 	and.w	r3, r3, #31
 800781c:	2210      	movs	r2, #16
 800781e:	409a      	lsls	r2, r3
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800782e:	2b00      	cmp	r3, #0
 8007830:	d018      	beq.n	8007864 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d108      	bne.n	8007852 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007844:	2b00      	cmp	r3, #0
 8007846:	d024      	beq.n	8007892 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	4798      	blx	r3
 8007850:	e01f      	b.n	8007892 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007856:	2b00      	cmp	r3, #0
 8007858:	d01b      	beq.n	8007892 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
 8007862:	e016      	b.n	8007892 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800786e:	2b00      	cmp	r3, #0
 8007870:	d107      	bne.n	8007882 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f022 0208 	bic.w	r2, r2, #8
 8007880:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	2b00      	cmp	r3, #0
 8007888:	d003      	beq.n	8007892 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007896:	f003 031f 	and.w	r3, r3, #31
 800789a:	2220      	movs	r2, #32
 800789c:	409a      	lsls	r2, r3
 800789e:	69bb      	ldr	r3, [r7, #24]
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	f000 8110 	beq.w	8007ac8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a2c      	ldr	r2, [pc, #176]	; (8007960 <HAL_DMA_IRQHandler+0x690>)
 80078ae:	4293      	cmp	r3, r2
 80078b0:	d04a      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a2b      	ldr	r2, [pc, #172]	; (8007964 <HAL_DMA_IRQHandler+0x694>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d045      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a29      	ldr	r2, [pc, #164]	; (8007968 <HAL_DMA_IRQHandler+0x698>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d040      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a28      	ldr	r2, [pc, #160]	; (800796c <HAL_DMA_IRQHandler+0x69c>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d03b      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a26      	ldr	r2, [pc, #152]	; (8007970 <HAL_DMA_IRQHandler+0x6a0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d036      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a25      	ldr	r2, [pc, #148]	; (8007974 <HAL_DMA_IRQHandler+0x6a4>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d031      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a23      	ldr	r2, [pc, #140]	; (8007978 <HAL_DMA_IRQHandler+0x6a8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d02c      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a22      	ldr	r2, [pc, #136]	; (800797c <HAL_DMA_IRQHandler+0x6ac>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d027      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a20      	ldr	r2, [pc, #128]	; (8007980 <HAL_DMA_IRQHandler+0x6b0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d022      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a1f      	ldr	r2, [pc, #124]	; (8007984 <HAL_DMA_IRQHandler+0x6b4>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d01d      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	4a1d      	ldr	r2, [pc, #116]	; (8007988 <HAL_DMA_IRQHandler+0x6b8>)
 8007912:	4293      	cmp	r3, r2
 8007914:	d018      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a1c      	ldr	r2, [pc, #112]	; (800798c <HAL_DMA_IRQHandler+0x6bc>)
 800791c:	4293      	cmp	r3, r2
 800791e:	d013      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a1a      	ldr	r2, [pc, #104]	; (8007990 <HAL_DMA_IRQHandler+0x6c0>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d00e      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a19      	ldr	r2, [pc, #100]	; (8007994 <HAL_DMA_IRQHandler+0x6c4>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d009      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a17      	ldr	r2, [pc, #92]	; (8007998 <HAL_DMA_IRQHandler+0x6c8>)
 800793a:	4293      	cmp	r3, r2
 800793c:	d004      	beq.n	8007948 <HAL_DMA_IRQHandler+0x678>
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4a16      	ldr	r2, [pc, #88]	; (800799c <HAL_DMA_IRQHandler+0x6cc>)
 8007944:	4293      	cmp	r3, r2
 8007946:	d12b      	bne.n	80079a0 <HAL_DMA_IRQHandler+0x6d0>
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f003 0310 	and.w	r3, r3, #16
 8007952:	2b00      	cmp	r3, #0
 8007954:	bf14      	ite	ne
 8007956:	2301      	movne	r3, #1
 8007958:	2300      	moveq	r3, #0
 800795a:	b2db      	uxtb	r3, r3
 800795c:	e02a      	b.n	80079b4 <HAL_DMA_IRQHandler+0x6e4>
 800795e:	bf00      	nop
 8007960:	40020010 	.word	0x40020010
 8007964:	40020028 	.word	0x40020028
 8007968:	40020040 	.word	0x40020040
 800796c:	40020058 	.word	0x40020058
 8007970:	40020070 	.word	0x40020070
 8007974:	40020088 	.word	0x40020088
 8007978:	400200a0 	.word	0x400200a0
 800797c:	400200b8 	.word	0x400200b8
 8007980:	40020410 	.word	0x40020410
 8007984:	40020428 	.word	0x40020428
 8007988:	40020440 	.word	0x40020440
 800798c:	40020458 	.word	0x40020458
 8007990:	40020470 	.word	0x40020470
 8007994:	40020488 	.word	0x40020488
 8007998:	400204a0 	.word	0x400204a0
 800799c:	400204b8 	.word	0x400204b8
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bf14      	ite	ne
 80079ae:	2301      	movne	r3, #1
 80079b0:	2300      	moveq	r3, #0
 80079b2:	b2db      	uxtb	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	f000 8087 	beq.w	8007ac8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80079be:	f003 031f 	and.w	r3, r3, #31
 80079c2:	2220      	movs	r2, #32
 80079c4:	409a      	lsls	r2, r3
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	2b04      	cmp	r3, #4
 80079d4:	d139      	bne.n	8007a4a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681a      	ldr	r2, [r3, #0]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f022 0216 	bic.w	r2, r2, #22
 80079e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	695a      	ldr	r2, [r3, #20]
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80079f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d103      	bne.n	8007a06 <HAL_DMA_IRQHandler+0x736>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d007      	beq.n	8007a16 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f022 0208 	bic.w	r2, r2, #8
 8007a14:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a1a:	f003 031f 	and.w	r3, r3, #31
 8007a1e:	223f      	movs	r2, #63	; 0x3f
 8007a20:	409a      	lsls	r2, r3
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2201      	movs	r2, #1
 8007a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2200      	movs	r2, #0
 8007a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	f000 834a 	beq.w	80080d4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a44:	6878      	ldr	r0, [r7, #4]
 8007a46:	4798      	blx	r3
          }
          return;
 8007a48:	e344      	b.n	80080d4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d018      	beq.n	8007a8a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d108      	bne.n	8007a78 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d02c      	beq.n	8007ac8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	4798      	blx	r3
 8007a76:	e027      	b.n	8007ac8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d023      	beq.n	8007ac8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	4798      	blx	r3
 8007a88:	e01e      	b.n	8007ac8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d10f      	bne.n	8007ab8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	681a      	ldr	r2, [r3, #0]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f022 0210 	bic.w	r2, r2, #16
 8007aa6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2201      	movs	r2, #1
 8007aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d003      	beq.n	8007ac8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ac4:	6878      	ldr	r0, [r7, #4]
 8007ac6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 8306 	beq.w	80080de <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ad6:	f003 0301 	and.w	r3, r3, #1
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 8088 	beq.w	8007bf0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	2204      	movs	r2, #4
 8007ae4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a7a      	ldr	r2, [pc, #488]	; (8007cd8 <HAL_DMA_IRQHandler+0xa08>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d04a      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a79      	ldr	r2, [pc, #484]	; (8007cdc <HAL_DMA_IRQHandler+0xa0c>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d045      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a77      	ldr	r2, [pc, #476]	; (8007ce0 <HAL_DMA_IRQHandler+0xa10>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d040      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a76      	ldr	r2, [pc, #472]	; (8007ce4 <HAL_DMA_IRQHandler+0xa14>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d03b      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a74      	ldr	r2, [pc, #464]	; (8007ce8 <HAL_DMA_IRQHandler+0xa18>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d036      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a73      	ldr	r2, [pc, #460]	; (8007cec <HAL_DMA_IRQHandler+0xa1c>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d031      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a71      	ldr	r2, [pc, #452]	; (8007cf0 <HAL_DMA_IRQHandler+0xa20>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d02c      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a70      	ldr	r2, [pc, #448]	; (8007cf4 <HAL_DMA_IRQHandler+0xa24>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d027      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a6e      	ldr	r2, [pc, #440]	; (8007cf8 <HAL_DMA_IRQHandler+0xa28>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d022      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a6d      	ldr	r2, [pc, #436]	; (8007cfc <HAL_DMA_IRQHandler+0xa2c>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d01d      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a6b      	ldr	r2, [pc, #428]	; (8007d00 <HAL_DMA_IRQHandler+0xa30>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d018      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a6a      	ldr	r2, [pc, #424]	; (8007d04 <HAL_DMA_IRQHandler+0xa34>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d013      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a68      	ldr	r2, [pc, #416]	; (8007d08 <HAL_DMA_IRQHandler+0xa38>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d00e      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	4a67      	ldr	r2, [pc, #412]	; (8007d0c <HAL_DMA_IRQHandler+0xa3c>)
 8007b70:	4293      	cmp	r3, r2
 8007b72:	d009      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a65      	ldr	r2, [pc, #404]	; (8007d10 <HAL_DMA_IRQHandler+0xa40>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d004      	beq.n	8007b88 <HAL_DMA_IRQHandler+0x8b8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a64      	ldr	r2, [pc, #400]	; (8007d14 <HAL_DMA_IRQHandler+0xa44>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d108      	bne.n	8007b9a <HAL_DMA_IRQHandler+0x8ca>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0201 	bic.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	e007      	b.n	8007baa <HAL_DMA_IRQHandler+0x8da>
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	681a      	ldr	r2, [r3, #0]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f022 0201 	bic.w	r2, r2, #1
 8007ba8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	3301      	adds	r3, #1
 8007bae:	60fb      	str	r3, [r7, #12]
 8007bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	d307      	bcc.n	8007bc6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0301 	and.w	r3, r3, #1
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d1f2      	bne.n	8007baa <HAL_DMA_IRQHandler+0x8da>
 8007bc4:	e000      	b.n	8007bc8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007bc6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d004      	beq.n	8007be0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2203      	movs	r2, #3
 8007bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007bde:	e003      	b.n	8007be8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2200      	movs	r2, #0
 8007bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	f000 8272 	beq.w	80080de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	4798      	blx	r3
 8007c02:	e26c      	b.n	80080de <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	4a43      	ldr	r2, [pc, #268]	; (8007d18 <HAL_DMA_IRQHandler+0xa48>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d022      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x984>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	4a42      	ldr	r2, [pc, #264]	; (8007d1c <HAL_DMA_IRQHandler+0xa4c>)
 8007c14:	4293      	cmp	r3, r2
 8007c16:	d01d      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x984>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	4a40      	ldr	r2, [pc, #256]	; (8007d20 <HAL_DMA_IRQHandler+0xa50>)
 8007c1e:	4293      	cmp	r3, r2
 8007c20:	d018      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x984>
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a3f      	ldr	r2, [pc, #252]	; (8007d24 <HAL_DMA_IRQHandler+0xa54>)
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d013      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x984>
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a3d      	ldr	r2, [pc, #244]	; (8007d28 <HAL_DMA_IRQHandler+0xa58>)
 8007c32:	4293      	cmp	r3, r2
 8007c34:	d00e      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x984>
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a3c      	ldr	r2, [pc, #240]	; (8007d2c <HAL_DMA_IRQHandler+0xa5c>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d009      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x984>
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4a3a      	ldr	r2, [pc, #232]	; (8007d30 <HAL_DMA_IRQHandler+0xa60>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	d004      	beq.n	8007c54 <HAL_DMA_IRQHandler+0x984>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	4a39      	ldr	r2, [pc, #228]	; (8007d34 <HAL_DMA_IRQHandler+0xa64>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d101      	bne.n	8007c58 <HAL_DMA_IRQHandler+0x988>
 8007c54:	2301      	movs	r3, #1
 8007c56:	e000      	b.n	8007c5a <HAL_DMA_IRQHandler+0x98a>
 8007c58:	2300      	movs	r3, #0
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	f000 823f 	beq.w	80080de <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c6c:	f003 031f 	and.w	r3, r3, #31
 8007c70:	2204      	movs	r2, #4
 8007c72:	409a      	lsls	r2, r3
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	4013      	ands	r3, r2
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 80cd 	beq.w	8007e18 <HAL_DMA_IRQHandler+0xb48>
 8007c7e:	693b      	ldr	r3, [r7, #16]
 8007c80:	f003 0304 	and.w	r3, r3, #4
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	f000 80c7 	beq.w	8007e18 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c8e:	f003 031f 	and.w	r3, r3, #31
 8007c92:	2204      	movs	r2, #4
 8007c94:	409a      	lsls	r2, r3
 8007c96:	69fb      	ldr	r3, [r7, #28]
 8007c98:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d049      	beq.n	8007d38 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d109      	bne.n	8007cc2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	f000 8210 	beq.w	80080d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007cbc:	6878      	ldr	r0, [r7, #4]
 8007cbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cc0:	e20a      	b.n	80080d8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8206 	beq.w	80080d8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd0:	6878      	ldr	r0, [r7, #4]
 8007cd2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007cd4:	e200      	b.n	80080d8 <HAL_DMA_IRQHandler+0xe08>
 8007cd6:	bf00      	nop
 8007cd8:	40020010 	.word	0x40020010
 8007cdc:	40020028 	.word	0x40020028
 8007ce0:	40020040 	.word	0x40020040
 8007ce4:	40020058 	.word	0x40020058
 8007ce8:	40020070 	.word	0x40020070
 8007cec:	40020088 	.word	0x40020088
 8007cf0:	400200a0 	.word	0x400200a0
 8007cf4:	400200b8 	.word	0x400200b8
 8007cf8:	40020410 	.word	0x40020410
 8007cfc:	40020428 	.word	0x40020428
 8007d00:	40020440 	.word	0x40020440
 8007d04:	40020458 	.word	0x40020458
 8007d08:	40020470 	.word	0x40020470
 8007d0c:	40020488 	.word	0x40020488
 8007d10:	400204a0 	.word	0x400204a0
 8007d14:	400204b8 	.word	0x400204b8
 8007d18:	58025408 	.word	0x58025408
 8007d1c:	5802541c 	.word	0x5802541c
 8007d20:	58025430 	.word	0x58025430
 8007d24:	58025444 	.word	0x58025444
 8007d28:	58025458 	.word	0x58025458
 8007d2c:	5802546c 	.word	0x5802546c
 8007d30:	58025480 	.word	0x58025480
 8007d34:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	f003 0320 	and.w	r3, r3, #32
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d160      	bne.n	8007e04 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4a7f      	ldr	r2, [pc, #508]	; (8007f44 <HAL_DMA_IRQHandler+0xc74>)
 8007d48:	4293      	cmp	r3, r2
 8007d4a:	d04a      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a7d      	ldr	r2, [pc, #500]	; (8007f48 <HAL_DMA_IRQHandler+0xc78>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d045      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4a7c      	ldr	r2, [pc, #496]	; (8007f4c <HAL_DMA_IRQHandler+0xc7c>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d040      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4a7a      	ldr	r2, [pc, #488]	; (8007f50 <HAL_DMA_IRQHandler+0xc80>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d03b      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a79      	ldr	r2, [pc, #484]	; (8007f54 <HAL_DMA_IRQHandler+0xc84>)
 8007d70:	4293      	cmp	r3, r2
 8007d72:	d036      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a77      	ldr	r2, [pc, #476]	; (8007f58 <HAL_DMA_IRQHandler+0xc88>)
 8007d7a:	4293      	cmp	r3, r2
 8007d7c:	d031      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4a76      	ldr	r2, [pc, #472]	; (8007f5c <HAL_DMA_IRQHandler+0xc8c>)
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d02c      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a74      	ldr	r2, [pc, #464]	; (8007f60 <HAL_DMA_IRQHandler+0xc90>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	d027      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4a73      	ldr	r2, [pc, #460]	; (8007f64 <HAL_DMA_IRQHandler+0xc94>)
 8007d98:	4293      	cmp	r3, r2
 8007d9a:	d022      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4a71      	ldr	r2, [pc, #452]	; (8007f68 <HAL_DMA_IRQHandler+0xc98>)
 8007da2:	4293      	cmp	r3, r2
 8007da4:	d01d      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	4a70      	ldr	r2, [pc, #448]	; (8007f6c <HAL_DMA_IRQHandler+0xc9c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d018      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4a6e      	ldr	r2, [pc, #440]	; (8007f70 <HAL_DMA_IRQHandler+0xca0>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d013      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	4a6d      	ldr	r2, [pc, #436]	; (8007f74 <HAL_DMA_IRQHandler+0xca4>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d00e      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a6b      	ldr	r2, [pc, #428]	; (8007f78 <HAL_DMA_IRQHandler+0xca8>)
 8007dca:	4293      	cmp	r3, r2
 8007dcc:	d009      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a6a      	ldr	r2, [pc, #424]	; (8007f7c <HAL_DMA_IRQHandler+0xcac>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d004      	beq.n	8007de2 <HAL_DMA_IRQHandler+0xb12>
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4a68      	ldr	r2, [pc, #416]	; (8007f80 <HAL_DMA_IRQHandler+0xcb0>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d108      	bne.n	8007df4 <HAL_DMA_IRQHandler+0xb24>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681a      	ldr	r2, [r3, #0]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f022 0208 	bic.w	r2, r2, #8
 8007df0:	601a      	str	r2, [r3, #0]
 8007df2:	e007      	b.n	8007e04 <HAL_DMA_IRQHandler+0xb34>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0204 	bic.w	r2, r2, #4
 8007e02:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	f000 8165 	beq.w	80080d8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e16:	e15f      	b.n	80080d8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e1c:	f003 031f 	and.w	r3, r3, #31
 8007e20:	2202      	movs	r2, #2
 8007e22:	409a      	lsls	r2, r3
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	4013      	ands	r3, r2
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f000 80c5 	beq.w	8007fb8 <HAL_DMA_IRQHandler+0xce8>
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	f003 0302 	and.w	r3, r3, #2
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 80bf 	beq.w	8007fb8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3e:	f003 031f 	and.w	r3, r3, #31
 8007e42:	2202      	movs	r2, #2
 8007e44:	409a      	lsls	r2, r3
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d018      	beq.n	8007e86 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d109      	bne.n	8007e72 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 813a 	beq.w	80080dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e70:	e134      	b.n	80080dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 8130 	beq.w	80080dc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007e84:	e12a      	b.n	80080dc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	f003 0320 	and.w	r3, r3, #32
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	f040 8089 	bne.w	8007fa4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a2b      	ldr	r2, [pc, #172]	; (8007f44 <HAL_DMA_IRQHandler+0xc74>)
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d04a      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a29      	ldr	r2, [pc, #164]	; (8007f48 <HAL_DMA_IRQHandler+0xc78>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d045      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	4a28      	ldr	r2, [pc, #160]	; (8007f4c <HAL_DMA_IRQHandler+0xc7c>)
 8007eac:	4293      	cmp	r3, r2
 8007eae:	d040      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	4a26      	ldr	r2, [pc, #152]	; (8007f50 <HAL_DMA_IRQHandler+0xc80>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d03b      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4a25      	ldr	r2, [pc, #148]	; (8007f54 <HAL_DMA_IRQHandler+0xc84>)
 8007ec0:	4293      	cmp	r3, r2
 8007ec2:	d036      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4a23      	ldr	r2, [pc, #140]	; (8007f58 <HAL_DMA_IRQHandler+0xc88>)
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d031      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a22      	ldr	r2, [pc, #136]	; (8007f5c <HAL_DMA_IRQHandler+0xc8c>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d02c      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a20      	ldr	r2, [pc, #128]	; (8007f60 <HAL_DMA_IRQHandler+0xc90>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d027      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a1f      	ldr	r2, [pc, #124]	; (8007f64 <HAL_DMA_IRQHandler+0xc94>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d022      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	4a1d      	ldr	r2, [pc, #116]	; (8007f68 <HAL_DMA_IRQHandler+0xc98>)
 8007ef2:	4293      	cmp	r3, r2
 8007ef4:	d01d      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	4a1c      	ldr	r2, [pc, #112]	; (8007f6c <HAL_DMA_IRQHandler+0xc9c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d018      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1a      	ldr	r2, [pc, #104]	; (8007f70 <HAL_DMA_IRQHandler+0xca0>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d013      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a19      	ldr	r2, [pc, #100]	; (8007f74 <HAL_DMA_IRQHandler+0xca4>)
 8007f10:	4293      	cmp	r3, r2
 8007f12:	d00e      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a17      	ldr	r2, [pc, #92]	; (8007f78 <HAL_DMA_IRQHandler+0xca8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d009      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	4a16      	ldr	r2, [pc, #88]	; (8007f7c <HAL_DMA_IRQHandler+0xcac>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d004      	beq.n	8007f32 <HAL_DMA_IRQHandler+0xc62>
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	4a14      	ldr	r2, [pc, #80]	; (8007f80 <HAL_DMA_IRQHandler+0xcb0>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d128      	bne.n	8007f84 <HAL_DMA_IRQHandler+0xcb4>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	681a      	ldr	r2, [r3, #0]
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f022 0214 	bic.w	r2, r2, #20
 8007f40:	601a      	str	r2, [r3, #0]
 8007f42:	e027      	b.n	8007f94 <HAL_DMA_IRQHandler+0xcc4>
 8007f44:	40020010 	.word	0x40020010
 8007f48:	40020028 	.word	0x40020028
 8007f4c:	40020040 	.word	0x40020040
 8007f50:	40020058 	.word	0x40020058
 8007f54:	40020070 	.word	0x40020070
 8007f58:	40020088 	.word	0x40020088
 8007f5c:	400200a0 	.word	0x400200a0
 8007f60:	400200b8 	.word	0x400200b8
 8007f64:	40020410 	.word	0x40020410
 8007f68:	40020428 	.word	0x40020428
 8007f6c:	40020440 	.word	0x40020440
 8007f70:	40020458 	.word	0x40020458
 8007f74:	40020470 	.word	0x40020470
 8007f78:	40020488 	.word	0x40020488
 8007f7c:	400204a0 	.word	0x400204a0
 8007f80:	400204b8 	.word	0x400204b8
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 020a 	bic.w	r2, r2, #10
 8007f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	f000 8097 	beq.w	80080dc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007fb6:	e091      	b.n	80080dc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fbc:	f003 031f 	and.w	r3, r3, #31
 8007fc0:	2208      	movs	r2, #8
 8007fc2:	409a      	lsls	r2, r3
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	4013      	ands	r3, r2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f000 8088 	beq.w	80080de <HAL_DMA_IRQHandler+0xe0e>
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	f003 0308 	and.w	r3, r3, #8
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	f000 8082 	beq.w	80080de <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a41      	ldr	r2, [pc, #260]	; (80080e4 <HAL_DMA_IRQHandler+0xe14>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d04a      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a3f      	ldr	r2, [pc, #252]	; (80080e8 <HAL_DMA_IRQHandler+0xe18>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d045      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	4a3e      	ldr	r2, [pc, #248]	; (80080ec <HAL_DMA_IRQHandler+0xe1c>)
 8007ff4:	4293      	cmp	r3, r2
 8007ff6:	d040      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	4a3c      	ldr	r2, [pc, #240]	; (80080f0 <HAL_DMA_IRQHandler+0xe20>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d03b      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a3b      	ldr	r2, [pc, #236]	; (80080f4 <HAL_DMA_IRQHandler+0xe24>)
 8008008:	4293      	cmp	r3, r2
 800800a:	d036      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a39      	ldr	r2, [pc, #228]	; (80080f8 <HAL_DMA_IRQHandler+0xe28>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d031      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a38      	ldr	r2, [pc, #224]	; (80080fc <HAL_DMA_IRQHandler+0xe2c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d02c      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4a36      	ldr	r2, [pc, #216]	; (8008100 <HAL_DMA_IRQHandler+0xe30>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d027      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4a35      	ldr	r2, [pc, #212]	; (8008104 <HAL_DMA_IRQHandler+0xe34>)
 8008030:	4293      	cmp	r3, r2
 8008032:	d022      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a33      	ldr	r2, [pc, #204]	; (8008108 <HAL_DMA_IRQHandler+0xe38>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d01d      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a32      	ldr	r2, [pc, #200]	; (800810c <HAL_DMA_IRQHandler+0xe3c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d018      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a30      	ldr	r2, [pc, #192]	; (8008110 <HAL_DMA_IRQHandler+0xe40>)
 800804e:	4293      	cmp	r3, r2
 8008050:	d013      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	4a2f      	ldr	r2, [pc, #188]	; (8008114 <HAL_DMA_IRQHandler+0xe44>)
 8008058:	4293      	cmp	r3, r2
 800805a:	d00e      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a2d      	ldr	r2, [pc, #180]	; (8008118 <HAL_DMA_IRQHandler+0xe48>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d009      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a2c      	ldr	r2, [pc, #176]	; (800811c <HAL_DMA_IRQHandler+0xe4c>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <HAL_DMA_IRQHandler+0xdaa>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a2a      	ldr	r2, [pc, #168]	; (8008120 <HAL_DMA_IRQHandler+0xe50>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d108      	bne.n	800808c <HAL_DMA_IRQHandler+0xdbc>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	f022 021c 	bic.w	r2, r2, #28
 8008088:	601a      	str	r2, [r3, #0]
 800808a:	e007      	b.n	800809c <HAL_DMA_IRQHandler+0xdcc>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	f022 020e 	bic.w	r2, r2, #14
 800809a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080a0:	f003 031f 	and.w	r3, r3, #31
 80080a4:	2201      	movs	r2, #1
 80080a6:	409a      	lsls	r2, r3
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2201      	movs	r2, #1
 80080b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2200      	movs	r2, #0
 80080be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d009      	beq.n	80080de <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	4798      	blx	r3
 80080d2:	e004      	b.n	80080de <HAL_DMA_IRQHandler+0xe0e>
          return;
 80080d4:	bf00      	nop
 80080d6:	e002      	b.n	80080de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080d8:	bf00      	nop
 80080da:	e000      	b.n	80080de <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80080dc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80080de:	3728      	adds	r7, #40	; 0x28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}
 80080e4:	40020010 	.word	0x40020010
 80080e8:	40020028 	.word	0x40020028
 80080ec:	40020040 	.word	0x40020040
 80080f0:	40020058 	.word	0x40020058
 80080f4:	40020070 	.word	0x40020070
 80080f8:	40020088 	.word	0x40020088
 80080fc:	400200a0 	.word	0x400200a0
 8008100:	400200b8 	.word	0x400200b8
 8008104:	40020410 	.word	0x40020410
 8008108:	40020428 	.word	0x40020428
 800810c:	40020440 	.word	0x40020440
 8008110:	40020458 	.word	0x40020458
 8008114:	40020470 	.word	0x40020470
 8008118:	40020488 	.word	0x40020488
 800811c:	400204a0 	.word	0x400204a0
 8008120:	400204b8 	.word	0x400204b8

08008124 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008136:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800813c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a7f      	ldr	r2, [pc, #508]	; (8008340 <DMA_SetConfig+0x21c>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d072      	beq.n	800822e <DMA_SetConfig+0x10a>
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a7d      	ldr	r2, [pc, #500]	; (8008344 <DMA_SetConfig+0x220>)
 800814e:	4293      	cmp	r3, r2
 8008150:	d06d      	beq.n	800822e <DMA_SetConfig+0x10a>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a7c      	ldr	r2, [pc, #496]	; (8008348 <DMA_SetConfig+0x224>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d068      	beq.n	800822e <DMA_SetConfig+0x10a>
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	4a7a      	ldr	r2, [pc, #488]	; (800834c <DMA_SetConfig+0x228>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d063      	beq.n	800822e <DMA_SetConfig+0x10a>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	4a79      	ldr	r2, [pc, #484]	; (8008350 <DMA_SetConfig+0x22c>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d05e      	beq.n	800822e <DMA_SetConfig+0x10a>
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	4a77      	ldr	r2, [pc, #476]	; (8008354 <DMA_SetConfig+0x230>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d059      	beq.n	800822e <DMA_SetConfig+0x10a>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	4a76      	ldr	r2, [pc, #472]	; (8008358 <DMA_SetConfig+0x234>)
 8008180:	4293      	cmp	r3, r2
 8008182:	d054      	beq.n	800822e <DMA_SetConfig+0x10a>
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4a74      	ldr	r2, [pc, #464]	; (800835c <DMA_SetConfig+0x238>)
 800818a:	4293      	cmp	r3, r2
 800818c:	d04f      	beq.n	800822e <DMA_SetConfig+0x10a>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	4a73      	ldr	r2, [pc, #460]	; (8008360 <DMA_SetConfig+0x23c>)
 8008194:	4293      	cmp	r3, r2
 8008196:	d04a      	beq.n	800822e <DMA_SetConfig+0x10a>
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a71      	ldr	r2, [pc, #452]	; (8008364 <DMA_SetConfig+0x240>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d045      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	4a70      	ldr	r2, [pc, #448]	; (8008368 <DMA_SetConfig+0x244>)
 80081a8:	4293      	cmp	r3, r2
 80081aa:	d040      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	4a6e      	ldr	r2, [pc, #440]	; (800836c <DMA_SetConfig+0x248>)
 80081b2:	4293      	cmp	r3, r2
 80081b4:	d03b      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	4a6d      	ldr	r2, [pc, #436]	; (8008370 <DMA_SetConfig+0x24c>)
 80081bc:	4293      	cmp	r3, r2
 80081be:	d036      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	4a6b      	ldr	r2, [pc, #428]	; (8008374 <DMA_SetConfig+0x250>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d031      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	4a6a      	ldr	r2, [pc, #424]	; (8008378 <DMA_SetConfig+0x254>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d02c      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	4a68      	ldr	r2, [pc, #416]	; (800837c <DMA_SetConfig+0x258>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d027      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	4a67      	ldr	r2, [pc, #412]	; (8008380 <DMA_SetConfig+0x25c>)
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d022      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a65      	ldr	r2, [pc, #404]	; (8008384 <DMA_SetConfig+0x260>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d01d      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a64      	ldr	r2, [pc, #400]	; (8008388 <DMA_SetConfig+0x264>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d018      	beq.n	800822e <DMA_SetConfig+0x10a>
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a62      	ldr	r2, [pc, #392]	; (800838c <DMA_SetConfig+0x268>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d013      	beq.n	800822e <DMA_SetConfig+0x10a>
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a61      	ldr	r2, [pc, #388]	; (8008390 <DMA_SetConfig+0x26c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00e      	beq.n	800822e <DMA_SetConfig+0x10a>
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a5f      	ldr	r2, [pc, #380]	; (8008394 <DMA_SetConfig+0x270>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d009      	beq.n	800822e <DMA_SetConfig+0x10a>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a5e      	ldr	r2, [pc, #376]	; (8008398 <DMA_SetConfig+0x274>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d004      	beq.n	800822e <DMA_SetConfig+0x10a>
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a5c      	ldr	r2, [pc, #368]	; (800839c <DMA_SetConfig+0x278>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d101      	bne.n	8008232 <DMA_SetConfig+0x10e>
 800822e:	2301      	movs	r3, #1
 8008230:	e000      	b.n	8008234 <DMA_SetConfig+0x110>
 8008232:	2300      	movs	r3, #0
 8008234:	2b00      	cmp	r3, #0
 8008236:	d00d      	beq.n	8008254 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008240:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008246:	2b00      	cmp	r3, #0
 8008248:	d004      	beq.n	8008254 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800824e:	68fa      	ldr	r2, [r7, #12]
 8008250:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008252:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a39      	ldr	r2, [pc, #228]	; (8008340 <DMA_SetConfig+0x21c>)
 800825a:	4293      	cmp	r3, r2
 800825c:	d04a      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	4a38      	ldr	r2, [pc, #224]	; (8008344 <DMA_SetConfig+0x220>)
 8008264:	4293      	cmp	r3, r2
 8008266:	d045      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 8008268:	68fb      	ldr	r3, [r7, #12]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	4a36      	ldr	r2, [pc, #216]	; (8008348 <DMA_SetConfig+0x224>)
 800826e:	4293      	cmp	r3, r2
 8008270:	d040      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	4a35      	ldr	r2, [pc, #212]	; (800834c <DMA_SetConfig+0x228>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d03b      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a33      	ldr	r2, [pc, #204]	; (8008350 <DMA_SetConfig+0x22c>)
 8008282:	4293      	cmp	r3, r2
 8008284:	d036      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	4a32      	ldr	r2, [pc, #200]	; (8008354 <DMA_SetConfig+0x230>)
 800828c:	4293      	cmp	r3, r2
 800828e:	d031      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	4a30      	ldr	r2, [pc, #192]	; (8008358 <DMA_SetConfig+0x234>)
 8008296:	4293      	cmp	r3, r2
 8008298:	d02c      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a2f      	ldr	r2, [pc, #188]	; (800835c <DMA_SetConfig+0x238>)
 80082a0:	4293      	cmp	r3, r2
 80082a2:	d027      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a2d      	ldr	r2, [pc, #180]	; (8008360 <DMA_SetConfig+0x23c>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d022      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4a2c      	ldr	r2, [pc, #176]	; (8008364 <DMA_SetConfig+0x240>)
 80082b4:	4293      	cmp	r3, r2
 80082b6:	d01d      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a2a      	ldr	r2, [pc, #168]	; (8008368 <DMA_SetConfig+0x244>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d018      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	4a29      	ldr	r2, [pc, #164]	; (800836c <DMA_SetConfig+0x248>)
 80082c8:	4293      	cmp	r3, r2
 80082ca:	d013      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4a27      	ldr	r2, [pc, #156]	; (8008370 <DMA_SetConfig+0x24c>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d00e      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	4a26      	ldr	r2, [pc, #152]	; (8008374 <DMA_SetConfig+0x250>)
 80082dc:	4293      	cmp	r3, r2
 80082de:	d009      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	4a24      	ldr	r2, [pc, #144]	; (8008378 <DMA_SetConfig+0x254>)
 80082e6:	4293      	cmp	r3, r2
 80082e8:	d004      	beq.n	80082f4 <DMA_SetConfig+0x1d0>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	4a23      	ldr	r2, [pc, #140]	; (800837c <DMA_SetConfig+0x258>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d101      	bne.n	80082f8 <DMA_SetConfig+0x1d4>
 80082f4:	2301      	movs	r3, #1
 80082f6:	e000      	b.n	80082fa <DMA_SetConfig+0x1d6>
 80082f8:	2300      	movs	r3, #0
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d059      	beq.n	80083b2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008302:	f003 031f 	and.w	r3, r3, #31
 8008306:	223f      	movs	r2, #63	; 0x3f
 8008308:	409a      	lsls	r2, r3
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	681a      	ldr	r2, [r3, #0]
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800831c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	683a      	ldr	r2, [r7, #0]
 8008324:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	689b      	ldr	r3, [r3, #8]
 800832a:	2b40      	cmp	r3, #64	; 0x40
 800832c:	d138      	bne.n	80083a0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	687a      	ldr	r2, [r7, #4]
 8008334:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800833e:	e086      	b.n	800844e <DMA_SetConfig+0x32a>
 8008340:	40020010 	.word	0x40020010
 8008344:	40020028 	.word	0x40020028
 8008348:	40020040 	.word	0x40020040
 800834c:	40020058 	.word	0x40020058
 8008350:	40020070 	.word	0x40020070
 8008354:	40020088 	.word	0x40020088
 8008358:	400200a0 	.word	0x400200a0
 800835c:	400200b8 	.word	0x400200b8
 8008360:	40020410 	.word	0x40020410
 8008364:	40020428 	.word	0x40020428
 8008368:	40020440 	.word	0x40020440
 800836c:	40020458 	.word	0x40020458
 8008370:	40020470 	.word	0x40020470
 8008374:	40020488 	.word	0x40020488
 8008378:	400204a0 	.word	0x400204a0
 800837c:	400204b8 	.word	0x400204b8
 8008380:	58025408 	.word	0x58025408
 8008384:	5802541c 	.word	0x5802541c
 8008388:	58025430 	.word	0x58025430
 800838c:	58025444 	.word	0x58025444
 8008390:	58025458 	.word	0x58025458
 8008394:	5802546c 	.word	0x5802546c
 8008398:	58025480 	.word	0x58025480
 800839c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	687a      	ldr	r2, [r7, #4]
 80083ae:	60da      	str	r2, [r3, #12]
}
 80083b0:	e04d      	b.n	800844e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a29      	ldr	r2, [pc, #164]	; (800845c <DMA_SetConfig+0x338>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d022      	beq.n	8008402 <DMA_SetConfig+0x2de>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a27      	ldr	r2, [pc, #156]	; (8008460 <DMA_SetConfig+0x33c>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d01d      	beq.n	8008402 <DMA_SetConfig+0x2de>
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a26      	ldr	r2, [pc, #152]	; (8008464 <DMA_SetConfig+0x340>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d018      	beq.n	8008402 <DMA_SetConfig+0x2de>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a24      	ldr	r2, [pc, #144]	; (8008468 <DMA_SetConfig+0x344>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d013      	beq.n	8008402 <DMA_SetConfig+0x2de>
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a23      	ldr	r2, [pc, #140]	; (800846c <DMA_SetConfig+0x348>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d00e      	beq.n	8008402 <DMA_SetConfig+0x2de>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a21      	ldr	r2, [pc, #132]	; (8008470 <DMA_SetConfig+0x34c>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d009      	beq.n	8008402 <DMA_SetConfig+0x2de>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a20      	ldr	r2, [pc, #128]	; (8008474 <DMA_SetConfig+0x350>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d004      	beq.n	8008402 <DMA_SetConfig+0x2de>
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a1e      	ldr	r2, [pc, #120]	; (8008478 <DMA_SetConfig+0x354>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d101      	bne.n	8008406 <DMA_SetConfig+0x2e2>
 8008402:	2301      	movs	r3, #1
 8008404:	e000      	b.n	8008408 <DMA_SetConfig+0x2e4>
 8008406:	2300      	movs	r3, #0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d020      	beq.n	800844e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008410:	f003 031f 	and.w	r3, r3, #31
 8008414:	2201      	movs	r2, #1
 8008416:	409a      	lsls	r2, r3
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	689b      	ldr	r3, [r3, #8]
 8008428:	2b40      	cmp	r3, #64	; 0x40
 800842a:	d108      	bne.n	800843e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	687a      	ldr	r2, [r7, #4]
 8008432:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68ba      	ldr	r2, [r7, #8]
 800843a:	60da      	str	r2, [r3, #12]
}
 800843c:	e007      	b.n	800844e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	687a      	ldr	r2, [r7, #4]
 800844c:	60da      	str	r2, [r3, #12]
}
 800844e:	bf00      	nop
 8008450:	371c      	adds	r7, #28
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	58025408 	.word	0x58025408
 8008460:	5802541c 	.word	0x5802541c
 8008464:	58025430 	.word	0x58025430
 8008468:	58025444 	.word	0x58025444
 800846c:	58025458 	.word	0x58025458
 8008470:	5802546c 	.word	0x5802546c
 8008474:	58025480 	.word	0x58025480
 8008478:	58025494 	.word	0x58025494

0800847c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800847c:	b480      	push	{r7}
 800847e:	b085      	sub	sp, #20
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a42      	ldr	r2, [pc, #264]	; (8008594 <DMA_CalcBaseAndBitshift+0x118>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d04a      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a41      	ldr	r2, [pc, #260]	; (8008598 <DMA_CalcBaseAndBitshift+0x11c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d045      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a3f      	ldr	r2, [pc, #252]	; (800859c <DMA_CalcBaseAndBitshift+0x120>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d040      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a3e      	ldr	r2, [pc, #248]	; (80085a0 <DMA_CalcBaseAndBitshift+0x124>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d03b      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a3c      	ldr	r2, [pc, #240]	; (80085a4 <DMA_CalcBaseAndBitshift+0x128>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d036      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a3b      	ldr	r2, [pc, #236]	; (80085a8 <DMA_CalcBaseAndBitshift+0x12c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d031      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a39      	ldr	r2, [pc, #228]	; (80085ac <DMA_CalcBaseAndBitshift+0x130>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d02c      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a38      	ldr	r2, [pc, #224]	; (80085b0 <DMA_CalcBaseAndBitshift+0x134>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d027      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a36      	ldr	r2, [pc, #216]	; (80085b4 <DMA_CalcBaseAndBitshift+0x138>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d022      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a35      	ldr	r2, [pc, #212]	; (80085b8 <DMA_CalcBaseAndBitshift+0x13c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d01d      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a33      	ldr	r2, [pc, #204]	; (80085bc <DMA_CalcBaseAndBitshift+0x140>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d018      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a32      	ldr	r2, [pc, #200]	; (80085c0 <DMA_CalcBaseAndBitshift+0x144>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d013      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a30      	ldr	r2, [pc, #192]	; (80085c4 <DMA_CalcBaseAndBitshift+0x148>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d00e      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a2f      	ldr	r2, [pc, #188]	; (80085c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d009      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a2d      	ldr	r2, [pc, #180]	; (80085cc <DMA_CalcBaseAndBitshift+0x150>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d004      	beq.n	8008524 <DMA_CalcBaseAndBitshift+0xa8>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a2c      	ldr	r2, [pc, #176]	; (80085d0 <DMA_CalcBaseAndBitshift+0x154>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d101      	bne.n	8008528 <DMA_CalcBaseAndBitshift+0xac>
 8008524:	2301      	movs	r3, #1
 8008526:	e000      	b.n	800852a <DMA_CalcBaseAndBitshift+0xae>
 8008528:	2300      	movs	r3, #0
 800852a:	2b00      	cmp	r3, #0
 800852c:	d024      	beq.n	8008578 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	b2db      	uxtb	r3, r3
 8008534:	3b10      	subs	r3, #16
 8008536:	4a27      	ldr	r2, [pc, #156]	; (80085d4 <DMA_CalcBaseAndBitshift+0x158>)
 8008538:	fba2 2303 	umull	r2, r3, r2, r3
 800853c:	091b      	lsrs	r3, r3, #4
 800853e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	f003 0307 	and.w	r3, r3, #7
 8008546:	4a24      	ldr	r2, [pc, #144]	; (80085d8 <DMA_CalcBaseAndBitshift+0x15c>)
 8008548:	5cd3      	ldrb	r3, [r2, r3]
 800854a:	461a      	mov	r2, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b03      	cmp	r3, #3
 8008554:	d908      	bls.n	8008568 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	461a      	mov	r2, r3
 800855c:	4b1f      	ldr	r3, [pc, #124]	; (80085dc <DMA_CalcBaseAndBitshift+0x160>)
 800855e:	4013      	ands	r3, r2
 8008560:	1d1a      	adds	r2, r3, #4
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	659a      	str	r2, [r3, #88]	; 0x58
 8008566:	e00d      	b.n	8008584 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	461a      	mov	r2, r3
 800856e:	4b1b      	ldr	r3, [pc, #108]	; (80085dc <DMA_CalcBaseAndBitshift+0x160>)
 8008570:	4013      	ands	r3, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	6593      	str	r3, [r2, #88]	; 0x58
 8008576:	e005      	b.n	8008584 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008588:	4618      	mov	r0, r3
 800858a:	3714      	adds	r7, #20
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr
 8008594:	40020010 	.word	0x40020010
 8008598:	40020028 	.word	0x40020028
 800859c:	40020040 	.word	0x40020040
 80085a0:	40020058 	.word	0x40020058
 80085a4:	40020070 	.word	0x40020070
 80085a8:	40020088 	.word	0x40020088
 80085ac:	400200a0 	.word	0x400200a0
 80085b0:	400200b8 	.word	0x400200b8
 80085b4:	40020410 	.word	0x40020410
 80085b8:	40020428 	.word	0x40020428
 80085bc:	40020440 	.word	0x40020440
 80085c0:	40020458 	.word	0x40020458
 80085c4:	40020470 	.word	0x40020470
 80085c8:	40020488 	.word	0x40020488
 80085cc:	400204a0 	.word	0x400204a0
 80085d0:	400204b8 	.word	0x400204b8
 80085d4:	aaaaaaab 	.word	0xaaaaaaab
 80085d8:	08016e70 	.word	0x08016e70
 80085dc:	fffffc00 	.word	0xfffffc00

080085e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80085e0:	b480      	push	{r7}
 80085e2:	b085      	sub	sp, #20
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	699b      	ldr	r3, [r3, #24]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d120      	bne.n	8008636 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085f8:	2b03      	cmp	r3, #3
 80085fa:	d858      	bhi.n	80086ae <DMA_CheckFifoParam+0xce>
 80085fc:	a201      	add	r2, pc, #4	; (adr r2, 8008604 <DMA_CheckFifoParam+0x24>)
 80085fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008602:	bf00      	nop
 8008604:	08008615 	.word	0x08008615
 8008608:	08008627 	.word	0x08008627
 800860c:	08008615 	.word	0x08008615
 8008610:	080086af 	.word	0x080086af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008618:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800861c:	2b00      	cmp	r3, #0
 800861e:	d048      	beq.n	80086b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8008620:	2301      	movs	r3, #1
 8008622:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008624:	e045      	b.n	80086b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800862a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800862e:	d142      	bne.n	80086b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008634:	e03f      	b.n	80086b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800863e:	d123      	bne.n	8008688 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008644:	2b03      	cmp	r3, #3
 8008646:	d838      	bhi.n	80086ba <DMA_CheckFifoParam+0xda>
 8008648:	a201      	add	r2, pc, #4	; (adr r2, 8008650 <DMA_CheckFifoParam+0x70>)
 800864a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800864e:	bf00      	nop
 8008650:	08008661 	.word	0x08008661
 8008654:	08008667 	.word	0x08008667
 8008658:	08008661 	.word	0x08008661
 800865c:	08008679 	.word	0x08008679
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008660:	2301      	movs	r3, #1
 8008662:	73fb      	strb	r3, [r7, #15]
        break;
 8008664:	e030      	b.n	80086c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800866a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800866e:	2b00      	cmp	r3, #0
 8008670:	d025      	beq.n	80086be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008672:	2301      	movs	r3, #1
 8008674:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008676:	e022      	b.n	80086be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800867c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008680:	d11f      	bne.n	80086c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008686:	e01c      	b.n	80086c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868c:	2b02      	cmp	r3, #2
 800868e:	d902      	bls.n	8008696 <DMA_CheckFifoParam+0xb6>
 8008690:	2b03      	cmp	r3, #3
 8008692:	d003      	beq.n	800869c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008694:	e018      	b.n	80086c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	73fb      	strb	r3, [r7, #15]
        break;
 800869a:	e015      	b.n	80086c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00e      	beq.n	80086c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80086a8:	2301      	movs	r3, #1
 80086aa:	73fb      	strb	r3, [r7, #15]
    break;
 80086ac:	e00b      	b.n	80086c6 <DMA_CheckFifoParam+0xe6>
        break;
 80086ae:	bf00      	nop
 80086b0:	e00a      	b.n	80086c8 <DMA_CheckFifoParam+0xe8>
        break;
 80086b2:	bf00      	nop
 80086b4:	e008      	b.n	80086c8 <DMA_CheckFifoParam+0xe8>
        break;
 80086b6:	bf00      	nop
 80086b8:	e006      	b.n	80086c8 <DMA_CheckFifoParam+0xe8>
        break;
 80086ba:	bf00      	nop
 80086bc:	e004      	b.n	80086c8 <DMA_CheckFifoParam+0xe8>
        break;
 80086be:	bf00      	nop
 80086c0:	e002      	b.n	80086c8 <DMA_CheckFifoParam+0xe8>
        break;
 80086c2:	bf00      	nop
 80086c4:	e000      	b.n	80086c8 <DMA_CheckFifoParam+0xe8>
    break;
 80086c6:	bf00      	nop
    }
  }

  return status;
 80086c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3714      	adds	r7, #20
 80086ce:	46bd      	mov	sp, r7
 80086d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d4:	4770      	bx	lr
 80086d6:	bf00      	nop

080086d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086d8:	b480      	push	{r7}
 80086da:	b085      	sub	sp, #20
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a38      	ldr	r2, [pc, #224]	; (80087cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d022      	beq.n	8008736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a36      	ldr	r2, [pc, #216]	; (80087d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d01d      	beq.n	8008736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	4a35      	ldr	r2, [pc, #212]	; (80087d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8008700:	4293      	cmp	r3, r2
 8008702:	d018      	beq.n	8008736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	4a33      	ldr	r2, [pc, #204]	; (80087d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d013      	beq.n	8008736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	4a32      	ldr	r2, [pc, #200]	; (80087dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8008714:	4293      	cmp	r3, r2
 8008716:	d00e      	beq.n	8008736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a30      	ldr	r2, [pc, #192]	; (80087e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d009      	beq.n	8008736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a2f      	ldr	r2, [pc, #188]	; (80087e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d004      	beq.n	8008736 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	4a2d      	ldr	r2, [pc, #180]	; (80087e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d101      	bne.n	800873a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8008736:	2301      	movs	r3, #1
 8008738:	e000      	b.n	800873c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800873a:	2300      	movs	r3, #0
 800873c:	2b00      	cmp	r3, #0
 800873e:	d01a      	beq.n	8008776 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	b2db      	uxtb	r3, r3
 8008746:	3b08      	subs	r3, #8
 8008748:	4a28      	ldr	r2, [pc, #160]	; (80087ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800874a:	fba2 2303 	umull	r2, r3, r2, r3
 800874e:	091b      	lsrs	r3, r3, #4
 8008750:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008752:	68fa      	ldr	r2, [r7, #12]
 8008754:	4b26      	ldr	r3, [pc, #152]	; (80087f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008756:	4413      	add	r3, r2
 8008758:	009b      	lsls	r3, r3, #2
 800875a:	461a      	mov	r2, r3
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a24      	ldr	r2, [pc, #144]	; (80087f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008764:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	f003 031f 	and.w	r3, r3, #31
 800876c:	2201      	movs	r2, #1
 800876e:	409a      	lsls	r2, r3
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008774:	e024      	b.n	80087c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	b2db      	uxtb	r3, r3
 800877c:	3b10      	subs	r3, #16
 800877e:	4a1e      	ldr	r2, [pc, #120]	; (80087f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008780:	fba2 2303 	umull	r2, r3, r2, r3
 8008784:	091b      	lsrs	r3, r3, #4
 8008786:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	4a1c      	ldr	r2, [pc, #112]	; (80087fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d806      	bhi.n	800879e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	4a1b      	ldr	r2, [pc, #108]	; (8008800 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d902      	bls.n	800879e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3308      	adds	r3, #8
 800879c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800879e:	68fa      	ldr	r2, [r7, #12]
 80087a0:	4b18      	ldr	r3, [pc, #96]	; (8008804 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	461a      	mov	r2, r3
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	4a16      	ldr	r2, [pc, #88]	; (8008808 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80087b0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	f003 031f 	and.w	r3, r3, #31
 80087b8:	2201      	movs	r2, #1
 80087ba:	409a      	lsls	r2, r3
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	669a      	str	r2, [r3, #104]	; 0x68
}
 80087c0:	bf00      	nop
 80087c2:	3714      	adds	r7, #20
 80087c4:	46bd      	mov	sp, r7
 80087c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ca:	4770      	bx	lr
 80087cc:	58025408 	.word	0x58025408
 80087d0:	5802541c 	.word	0x5802541c
 80087d4:	58025430 	.word	0x58025430
 80087d8:	58025444 	.word	0x58025444
 80087dc:	58025458 	.word	0x58025458
 80087e0:	5802546c 	.word	0x5802546c
 80087e4:	58025480 	.word	0x58025480
 80087e8:	58025494 	.word	0x58025494
 80087ec:	cccccccd 	.word	0xcccccccd
 80087f0:	16009600 	.word	0x16009600
 80087f4:	58025880 	.word	0x58025880
 80087f8:	aaaaaaab 	.word	0xaaaaaaab
 80087fc:	400204b8 	.word	0x400204b8
 8008800:	4002040f 	.word	0x4002040f
 8008804:	10008200 	.word	0x10008200
 8008808:	40020880 	.word	0x40020880

0800880c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	b2db      	uxtb	r3, r3
 800881a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d04a      	beq.n	80088b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b08      	cmp	r3, #8
 8008826:	d847      	bhi.n	80088b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a25      	ldr	r2, [pc, #148]	; (80088c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d022      	beq.n	8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a24      	ldr	r2, [pc, #144]	; (80088c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d01d      	beq.n	8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a22      	ldr	r2, [pc, #136]	; (80088cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d018      	beq.n	8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a21      	ldr	r2, [pc, #132]	; (80088d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d013      	beq.n	8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a1f      	ldr	r2, [pc, #124]	; (80088d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d00e      	beq.n	8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1e      	ldr	r2, [pc, #120]	; (80088d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d009      	beq.n	8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1c      	ldr	r2, [pc, #112]	; (80088dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d004      	beq.n	8008878 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a1b      	ldr	r2, [pc, #108]	; (80088e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d101      	bne.n	800887c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008878:	2301      	movs	r3, #1
 800887a:	e000      	b.n	800887e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800887c:	2300      	movs	r3, #0
 800887e:	2b00      	cmp	r3, #0
 8008880:	d00a      	beq.n	8008898 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4b17      	ldr	r3, [pc, #92]	; (80088e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	461a      	mov	r2, r3
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a15      	ldr	r2, [pc, #84]	; (80088e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008894:	671a      	str	r2, [r3, #112]	; 0x70
 8008896:	e009      	b.n	80088ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	4b14      	ldr	r3, [pc, #80]	; (80088ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800889c:	4413      	add	r3, r2
 800889e:	009b      	lsls	r3, r3, #2
 80088a0:	461a      	mov	r2, r3
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a11      	ldr	r2, [pc, #68]	; (80088f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80088aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	3b01      	subs	r3, #1
 80088b0:	2201      	movs	r2, #1
 80088b2:	409a      	lsls	r2, r3
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80088b8:	bf00      	nop
 80088ba:	3714      	adds	r7, #20
 80088bc:	46bd      	mov	sp, r7
 80088be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c2:	4770      	bx	lr
 80088c4:	58025408 	.word	0x58025408
 80088c8:	5802541c 	.word	0x5802541c
 80088cc:	58025430 	.word	0x58025430
 80088d0:	58025444 	.word	0x58025444
 80088d4:	58025458 	.word	0x58025458
 80088d8:	5802546c 	.word	0x5802546c
 80088dc:	58025480 	.word	0x58025480
 80088e0:	58025494 	.word	0x58025494
 80088e4:	1600963f 	.word	0x1600963f
 80088e8:	58025940 	.word	0x58025940
 80088ec:	1000823f 	.word	0x1000823f
 80088f0:	40020940 	.word	0x40020940

080088f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80088f4:	b480      	push	{r7}
 80088f6:	b089      	sub	sp, #36	; 0x24
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
 80088fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80088fe:	2300      	movs	r3, #0
 8008900:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8008902:	4b89      	ldr	r3, [pc, #548]	; (8008b28 <HAL_GPIO_Init+0x234>)
 8008904:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008906:	e194      	b.n	8008c32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681a      	ldr	r2, [r3, #0]
 800890c:	2101      	movs	r1, #1
 800890e:	69fb      	ldr	r3, [r7, #28]
 8008910:	fa01 f303 	lsl.w	r3, r1, r3
 8008914:	4013      	ands	r3, r2
 8008916:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	f000 8186 	beq.w	8008c2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	f003 0303 	and.w	r3, r3, #3
 8008928:	2b01      	cmp	r3, #1
 800892a:	d005      	beq.n	8008938 <HAL_GPIO_Init+0x44>
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	f003 0303 	and.w	r3, r3, #3
 8008934:	2b02      	cmp	r3, #2
 8008936:	d130      	bne.n	800899a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800893e:	69fb      	ldr	r3, [r7, #28]
 8008940:	005b      	lsls	r3, r3, #1
 8008942:	2203      	movs	r2, #3
 8008944:	fa02 f303 	lsl.w	r3, r2, r3
 8008948:	43db      	mvns	r3, r3
 800894a:	69ba      	ldr	r2, [r7, #24]
 800894c:	4013      	ands	r3, r2
 800894e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	68da      	ldr	r2, [r3, #12]
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	fa02 f303 	lsl.w	r3, r2, r3
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	4313      	orrs	r3, r2
 8008960:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800896e:	2201      	movs	r2, #1
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	fa02 f303 	lsl.w	r3, r2, r3
 8008976:	43db      	mvns	r3, r3
 8008978:	69ba      	ldr	r2, [r7, #24]
 800897a:	4013      	ands	r3, r2
 800897c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	091b      	lsrs	r3, r3, #4
 8008984:	f003 0201 	and.w	r2, r3, #1
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	fa02 f303 	lsl.w	r3, r2, r3
 800898e:	69ba      	ldr	r2, [r7, #24]
 8008990:	4313      	orrs	r3, r2
 8008992:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	69ba      	ldr	r2, [r7, #24]
 8008998:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800899a:	683b      	ldr	r3, [r7, #0]
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b03      	cmp	r3, #3
 80089a4:	d017      	beq.n	80089d6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	005b      	lsls	r3, r3, #1
 80089b0:	2203      	movs	r2, #3
 80089b2:	fa02 f303 	lsl.w	r3, r2, r3
 80089b6:	43db      	mvns	r3, r3
 80089b8:	69ba      	ldr	r2, [r7, #24]
 80089ba:	4013      	ands	r3, r2
 80089bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	005b      	lsls	r3, r3, #1
 80089c6:	fa02 f303 	lsl.w	r3, r2, r3
 80089ca:	69ba      	ldr	r2, [r7, #24]
 80089cc:	4313      	orrs	r3, r2
 80089ce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	69ba      	ldr	r2, [r7, #24]
 80089d4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f003 0303 	and.w	r3, r3, #3
 80089de:	2b02      	cmp	r3, #2
 80089e0:	d123      	bne.n	8008a2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	08da      	lsrs	r2, r3, #3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	3208      	adds	r2, #8
 80089ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80089f0:	69fb      	ldr	r3, [r7, #28]
 80089f2:	f003 0307 	and.w	r3, r3, #7
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	220f      	movs	r2, #15
 80089fa:	fa02 f303 	lsl.w	r3, r2, r3
 80089fe:	43db      	mvns	r3, r3
 8008a00:	69ba      	ldr	r2, [r7, #24]
 8008a02:	4013      	ands	r3, r2
 8008a04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008a06:	683b      	ldr	r3, [r7, #0]
 8008a08:	691a      	ldr	r2, [r3, #16]
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	f003 0307 	and.w	r3, r3, #7
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	fa02 f303 	lsl.w	r3, r2, r3
 8008a16:	69ba      	ldr	r2, [r7, #24]
 8008a18:	4313      	orrs	r3, r2
 8008a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	08da      	lsrs	r2, r3, #3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	3208      	adds	r2, #8
 8008a24:	69b9      	ldr	r1, [r7, #24]
 8008a26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008a30:	69fb      	ldr	r3, [r7, #28]
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	2203      	movs	r2, #3
 8008a36:	fa02 f303 	lsl.w	r3, r2, r3
 8008a3a:	43db      	mvns	r3, r3
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	4013      	ands	r3, r2
 8008a40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008a42:	683b      	ldr	r3, [r7, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f003 0203 	and.w	r2, r3, #3
 8008a4a:	69fb      	ldr	r3, [r7, #28]
 8008a4c:	005b      	lsls	r3, r3, #1
 8008a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a52:	69ba      	ldr	r2, [r7, #24]
 8008a54:	4313      	orrs	r3, r2
 8008a56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	69ba      	ldr	r2, [r7, #24]
 8008a5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	f000 80e0 	beq.w	8008c2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008a6c:	4b2f      	ldr	r3, [pc, #188]	; (8008b2c <HAL_GPIO_Init+0x238>)
 8008a6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a72:	4a2e      	ldr	r2, [pc, #184]	; (8008b2c <HAL_GPIO_Init+0x238>)
 8008a74:	f043 0302 	orr.w	r3, r3, #2
 8008a78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008a7c:	4b2b      	ldr	r3, [pc, #172]	; (8008b2c <HAL_GPIO_Init+0x238>)
 8008a7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	60fb      	str	r3, [r7, #12]
 8008a88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008a8a:	4a29      	ldr	r2, [pc, #164]	; (8008b30 <HAL_GPIO_Init+0x23c>)
 8008a8c:	69fb      	ldr	r3, [r7, #28]
 8008a8e:	089b      	lsrs	r3, r3, #2
 8008a90:	3302      	adds	r3, #2
 8008a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	f003 0303 	and.w	r3, r3, #3
 8008a9e:	009b      	lsls	r3, r3, #2
 8008aa0:	220f      	movs	r2, #15
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	43db      	mvns	r3, r3
 8008aa8:	69ba      	ldr	r2, [r7, #24]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	4a20      	ldr	r2, [pc, #128]	; (8008b34 <HAL_GPIO_Init+0x240>)
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d052      	beq.n	8008b5c <HAL_GPIO_Init+0x268>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	4a1f      	ldr	r2, [pc, #124]	; (8008b38 <HAL_GPIO_Init+0x244>)
 8008aba:	4293      	cmp	r3, r2
 8008abc:	d031      	beq.n	8008b22 <HAL_GPIO_Init+0x22e>
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a1e      	ldr	r2, [pc, #120]	; (8008b3c <HAL_GPIO_Init+0x248>)
 8008ac2:	4293      	cmp	r3, r2
 8008ac4:	d02b      	beq.n	8008b1e <HAL_GPIO_Init+0x22a>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	4a1d      	ldr	r2, [pc, #116]	; (8008b40 <HAL_GPIO_Init+0x24c>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d025      	beq.n	8008b1a <HAL_GPIO_Init+0x226>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4a1c      	ldr	r2, [pc, #112]	; (8008b44 <HAL_GPIO_Init+0x250>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d01f      	beq.n	8008b16 <HAL_GPIO_Init+0x222>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	4a1b      	ldr	r2, [pc, #108]	; (8008b48 <HAL_GPIO_Init+0x254>)
 8008ada:	4293      	cmp	r3, r2
 8008adc:	d019      	beq.n	8008b12 <HAL_GPIO_Init+0x21e>
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a1a      	ldr	r2, [pc, #104]	; (8008b4c <HAL_GPIO_Init+0x258>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d013      	beq.n	8008b0e <HAL_GPIO_Init+0x21a>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a19      	ldr	r2, [pc, #100]	; (8008b50 <HAL_GPIO_Init+0x25c>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d00d      	beq.n	8008b0a <HAL_GPIO_Init+0x216>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a18      	ldr	r2, [pc, #96]	; (8008b54 <HAL_GPIO_Init+0x260>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d007      	beq.n	8008b06 <HAL_GPIO_Init+0x212>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a17      	ldr	r2, [pc, #92]	; (8008b58 <HAL_GPIO_Init+0x264>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d101      	bne.n	8008b02 <HAL_GPIO_Init+0x20e>
 8008afe:	2309      	movs	r3, #9
 8008b00:	e02d      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b02:	230a      	movs	r3, #10
 8008b04:	e02b      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b06:	2308      	movs	r3, #8
 8008b08:	e029      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b0a:	2307      	movs	r3, #7
 8008b0c:	e027      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b0e:	2306      	movs	r3, #6
 8008b10:	e025      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b12:	2305      	movs	r3, #5
 8008b14:	e023      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b16:	2304      	movs	r3, #4
 8008b18:	e021      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b1a:	2303      	movs	r3, #3
 8008b1c:	e01f      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b1e:	2302      	movs	r3, #2
 8008b20:	e01d      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e01b      	b.n	8008b5e <HAL_GPIO_Init+0x26a>
 8008b26:	bf00      	nop
 8008b28:	58000080 	.word	0x58000080
 8008b2c:	58024400 	.word	0x58024400
 8008b30:	58000400 	.word	0x58000400
 8008b34:	58020000 	.word	0x58020000
 8008b38:	58020400 	.word	0x58020400
 8008b3c:	58020800 	.word	0x58020800
 8008b40:	58020c00 	.word	0x58020c00
 8008b44:	58021000 	.word	0x58021000
 8008b48:	58021400 	.word	0x58021400
 8008b4c:	58021800 	.word	0x58021800
 8008b50:	58021c00 	.word	0x58021c00
 8008b54:	58022000 	.word	0x58022000
 8008b58:	58022400 	.word	0x58022400
 8008b5c:	2300      	movs	r3, #0
 8008b5e:	69fa      	ldr	r2, [r7, #28]
 8008b60:	f002 0203 	and.w	r2, r2, #3
 8008b64:	0092      	lsls	r2, r2, #2
 8008b66:	4093      	lsls	r3, r2
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008b6e:	4938      	ldr	r1, [pc, #224]	; (8008c50 <HAL_GPIO_Init+0x35c>)
 8008b70:	69fb      	ldr	r3, [r7, #28]
 8008b72:	089b      	lsrs	r3, r3, #2
 8008b74:	3302      	adds	r3, #2
 8008b76:	69ba      	ldr	r2, [r7, #24]
 8008b78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	43db      	mvns	r3, r3
 8008b88:	69ba      	ldr	r2, [r7, #24]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	4313      	orrs	r3, r2
 8008ba0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8008ba2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8008baa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	43db      	mvns	r3, r3
 8008bb6:	69ba      	ldr	r2, [r7, #24]
 8008bb8:	4013      	ands	r3, r2
 8008bba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008bbc:	683b      	ldr	r3, [r7, #0]
 8008bbe:	685b      	ldr	r3, [r3, #4]
 8008bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d003      	beq.n	8008bd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	693b      	ldr	r3, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8008bd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008bd4:	69bb      	ldr	r3, [r7, #24]
 8008bd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008bde:	693b      	ldr	r3, [r7, #16]
 8008be0:	43db      	mvns	r3, r3
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	4013      	ands	r3, r2
 8008be6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8008bf4:	69ba      	ldr	r2, [r7, #24]
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	43db      	mvns	r3, r3
 8008c0c:	69ba      	ldr	r2, [r7, #24]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8008c1e:	69ba      	ldr	r2, [r7, #24]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	69ba      	ldr	r2, [r7, #24]
 8008c2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8008c2c:	69fb      	ldr	r3, [r7, #28]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f47f ae63 	bne.w	8008908 <HAL_GPIO_Init+0x14>
  }
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	3724      	adds	r7, #36	; 0x24
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	58000400 	.word	0x58000400

08008c54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	460b      	mov	r3, r1
 8008c5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	691a      	ldr	r2, [r3, #16]
 8008c64:	887b      	ldrh	r3, [r7, #2]
 8008c66:	4013      	ands	r3, r2
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d002      	beq.n	8008c72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	73fb      	strb	r3, [r7, #15]
 8008c70:	e001      	b.n	8008c76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c72:	2300      	movs	r3, #0
 8008c74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c78:	4618      	mov	r0, r3
 8008c7a:	3714      	adds	r7, #20
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c82:	4770      	bx	lr

08008c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
 8008c8c:	460b      	mov	r3, r1
 8008c8e:	807b      	strh	r3, [r7, #2]
 8008c90:	4613      	mov	r3, r2
 8008c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008c94:	787b      	ldrb	r3, [r7, #1]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008c9a:	887a      	ldrh	r2, [r7, #2]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008ca0:	e003      	b.n	8008caa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008ca2:	887b      	ldrh	r3, [r7, #2]
 8008ca4:	041a      	lsls	r2, r3, #16
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	619a      	str	r2, [r3, #24]
}
 8008caa:	bf00      	nop
 8008cac:	370c      	adds	r7, #12
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr
	...

08008cb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b082      	sub	sp, #8
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d101      	bne.n	8008cca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	e08b      	b.n	8008de2 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008cd0:	b2db      	uxtb	r3, r3
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d106      	bne.n	8008ce4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008cde:	6878      	ldr	r0, [r7, #4]
 8008ce0:	f7fa f8fc 	bl	8002edc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2224      	movs	r2, #36	; 0x24
 8008ce8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f022 0201 	bic.w	r2, r2, #1
 8008cfa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	685a      	ldr	r2, [r3, #4]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d08:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	689a      	ldr	r2, [r3, #8]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d18:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68db      	ldr	r3, [r3, #12]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d107      	bne.n	8008d32 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	689a      	ldr	r2, [r3, #8]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d2e:	609a      	str	r2, [r3, #8]
 8008d30:	e006      	b.n	8008d40 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	689a      	ldr	r2, [r3, #8]
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008d3e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	2b02      	cmp	r3, #2
 8008d46:	d108      	bne.n	8008d5a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685a      	ldr	r2, [r3, #4]
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008d56:	605a      	str	r2, [r3, #4]
 8008d58:	e007      	b.n	8008d6a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008d68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	6859      	ldr	r1, [r3, #4]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681a      	ldr	r2, [r3, #0]
 8008d74:	4b1d      	ldr	r3, [pc, #116]	; (8008dec <HAL_I2C_Init+0x134>)
 8008d76:	430b      	orrs	r3, r1
 8008d78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	68da      	ldr	r2, [r3, #12]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	691a      	ldr	r2, [r3, #16]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	430a      	orrs	r2, r1
 8008da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	69d9      	ldr	r1, [r3, #28]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	6a1a      	ldr	r2, [r3, #32]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	430a      	orrs	r2, r1
 8008db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681a      	ldr	r2, [r3, #0]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f042 0201 	orr.w	r2, r2, #1
 8008dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2220      	movs	r2, #32
 8008dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	3708      	adds	r7, #8
 8008de6:	46bd      	mov	sp, r7
 8008de8:	bd80      	pop	{r7, pc}
 8008dea:	bf00      	nop
 8008dec:	02008000 	.word	0x02008000

08008df0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b088      	sub	sp, #32
 8008df4:	af02      	add	r7, sp, #8
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	607a      	str	r2, [r7, #4]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	460b      	mov	r3, r1
 8008dfe:	817b      	strh	r3, [r7, #10]
 8008e00:	4613      	mov	r3, r2
 8008e02:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b20      	cmp	r3, #32
 8008e0e:	f040 80fd 	bne.w	800900c <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e18:	2b01      	cmp	r3, #1
 8008e1a:	d101      	bne.n	8008e20 <HAL_I2C_Master_Transmit+0x30>
 8008e1c:	2302      	movs	r3, #2
 8008e1e:	e0f6      	b.n	800900e <HAL_I2C_Master_Transmit+0x21e>
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	2201      	movs	r2, #1
 8008e24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e28:	f7fa fe00 	bl	8003a2c <HAL_GetTick>
 8008e2c:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	9300      	str	r3, [sp, #0]
 8008e32:	2319      	movs	r3, #25
 8008e34:	2201      	movs	r2, #1
 8008e36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f000 fa0a 	bl	8009254 <I2C_WaitOnFlagUntilTimeout>
 8008e40:	4603      	mov	r3, r0
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d001      	beq.n	8008e4a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008e46:	2301      	movs	r3, #1
 8008e48:	e0e1      	b.n	800900e <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2221      	movs	r2, #33	; 0x21
 8008e4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	2210      	movs	r2, #16
 8008e56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	687a      	ldr	r2, [r7, #4]
 8008e64:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	893a      	ldrh	r2, [r7, #8]
 8008e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e76:	b29b      	uxth	r3, r3
 8008e78:	2bff      	cmp	r3, #255	; 0xff
 8008e7a:	d906      	bls.n	8008e8a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	22ff      	movs	r2, #255	; 0xff
 8008e80:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8008e82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008e86:	617b      	str	r3, [r7, #20]
 8008e88:	e007      	b.n	8008e9a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e8e:	b29a      	uxth	r2, r3
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8008e94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008e98:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d024      	beq.n	8008eec <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea6:	781a      	ldrb	r2, [r3, #0]
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb2:	1c5a      	adds	r2, r3, #1
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eca:	3b01      	subs	r3, #1
 8008ecc:	b29a      	uxth	r2, r3
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed6:	b2db      	uxtb	r3, r3
 8008ed8:	3301      	adds	r3, #1
 8008eda:	b2da      	uxtb	r2, r3
 8008edc:	8979      	ldrh	r1, [r7, #10]
 8008ede:	4b4e      	ldr	r3, [pc, #312]	; (8009018 <HAL_I2C_Master_Transmit+0x228>)
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	68f8      	ldr	r0, [r7, #12]
 8008ee6:	f000 fc05 	bl	80096f4 <I2C_TransferConfig>
 8008eea:	e066      	b.n	8008fba <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ef0:	b2da      	uxtb	r2, r3
 8008ef2:	8979      	ldrh	r1, [r7, #10]
 8008ef4:	4b48      	ldr	r3, [pc, #288]	; (8009018 <HAL_I2C_Master_Transmit+0x228>)
 8008ef6:	9300      	str	r3, [sp, #0]
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	68f8      	ldr	r0, [r7, #12]
 8008efc:	f000 fbfa 	bl	80096f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008f00:	e05b      	b.n	8008fba <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	6a39      	ldr	r1, [r7, #32]
 8008f06:	68f8      	ldr	r0, [r7, #12]
 8008f08:	f000 f9fd 	bl	8009306 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d001      	beq.n	8008f16 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8008f12:	2301      	movs	r3, #1
 8008f14:	e07b      	b.n	800900e <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f1a:	781a      	ldrb	r2, [r3, #0]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f26:	1c5a      	adds	r2, r3, #1
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f30:	b29b      	uxth	r3, r3
 8008f32:	3b01      	subs	r3, #1
 8008f34:	b29a      	uxth	r2, r3
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f3e:	3b01      	subs	r3, #1
 8008f40:	b29a      	uxth	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f4a:	b29b      	uxth	r3, r3
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d034      	beq.n	8008fba <HAL_I2C_Master_Transmit+0x1ca>
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d130      	bne.n	8008fba <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f58:	693b      	ldr	r3, [r7, #16]
 8008f5a:	9300      	str	r3, [sp, #0]
 8008f5c:	6a3b      	ldr	r3, [r7, #32]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	2180      	movs	r1, #128	; 0x80
 8008f62:	68f8      	ldr	r0, [r7, #12]
 8008f64:	f000 f976 	bl	8009254 <I2C_WaitOnFlagUntilTimeout>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d001      	beq.n	8008f72 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e04d      	b.n	800900e <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f76:	b29b      	uxth	r3, r3
 8008f78:	2bff      	cmp	r3, #255	; 0xff
 8008f7a:	d90e      	bls.n	8008f9a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	22ff      	movs	r2, #255	; 0xff
 8008f80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f86:	b2da      	uxtb	r2, r3
 8008f88:	8979      	ldrh	r1, [r7, #10]
 8008f8a:	2300      	movs	r3, #0
 8008f8c:	9300      	str	r3, [sp, #0]
 8008f8e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f92:	68f8      	ldr	r0, [r7, #12]
 8008f94:	f000 fbae 	bl	80096f4 <I2C_TransferConfig>
 8008f98:	e00f      	b.n	8008fba <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008fa8:	b2da      	uxtb	r2, r3
 8008faa:	8979      	ldrh	r1, [r7, #10]
 8008fac:	2300      	movs	r3, #0
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008fb4:	68f8      	ldr	r0, [r7, #12]
 8008fb6:	f000 fb9d 	bl	80096f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fbe:	b29b      	uxth	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d19e      	bne.n	8008f02 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fc4:	693a      	ldr	r2, [r7, #16]
 8008fc6:	6a39      	ldr	r1, [r7, #32]
 8008fc8:	68f8      	ldr	r0, [r7, #12]
 8008fca:	f000 f9e3 	bl	8009394 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e01a      	b.n	800900e <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	2220      	movs	r2, #32
 8008fde:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	6859      	ldr	r1, [r3, #4]
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681a      	ldr	r2, [r3, #0]
 8008fea:	4b0c      	ldr	r3, [pc, #48]	; (800901c <HAL_I2C_Master_Transmit+0x22c>)
 8008fec:	400b      	ands	r3, r1
 8008fee:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	2220      	movs	r2, #32
 8008ff4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009008:	2300      	movs	r3, #0
 800900a:	e000      	b.n	800900e <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 800900c:	2302      	movs	r3, #2
  }
}
 800900e:	4618      	mov	r0, r3
 8009010:	3718      	adds	r7, #24
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	bf00      	nop
 8009018:	80002000 	.word	0x80002000
 800901c:	fe00e800 	.word	0xfe00e800

08009020 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8009020:	b580      	push	{r7, lr}
 8009022:	b088      	sub	sp, #32
 8009024:	af02      	add	r7, sp, #8
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	607a      	str	r2, [r7, #4]
 800902a:	461a      	mov	r2, r3
 800902c:	460b      	mov	r3, r1
 800902e:	817b      	strh	r3, [r7, #10]
 8009030:	4613      	mov	r3, r2
 8009032:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800903a:	b2db      	uxtb	r3, r3
 800903c:	2b20      	cmp	r3, #32
 800903e:	f040 80db 	bne.w	80091f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009048:	2b01      	cmp	r3, #1
 800904a:	d101      	bne.n	8009050 <HAL_I2C_Master_Receive+0x30>
 800904c:	2302      	movs	r3, #2
 800904e:	e0d4      	b.n	80091fa <HAL_I2C_Master_Receive+0x1da>
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	2201      	movs	r2, #1
 8009054:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8009058:	f7fa fce8 	bl	8003a2c <HAL_GetTick>
 800905c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800905e:	697b      	ldr	r3, [r7, #20]
 8009060:	9300      	str	r3, [sp, #0]
 8009062:	2319      	movs	r3, #25
 8009064:	2201      	movs	r2, #1
 8009066:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800906a:	68f8      	ldr	r0, [r7, #12]
 800906c:	f000 f8f2 	bl	8009254 <I2C_WaitOnFlagUntilTimeout>
 8009070:	4603      	mov	r3, r0
 8009072:	2b00      	cmp	r3, #0
 8009074:	d001      	beq.n	800907a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8009076:	2301      	movs	r3, #1
 8009078:	e0bf      	b.n	80091fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	2222      	movs	r2, #34	; 0x22
 800907e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2210      	movs	r2, #16
 8009086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2200      	movs	r2, #0
 800908e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	687a      	ldr	r2, [r7, #4]
 8009094:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	893a      	ldrh	r2, [r7, #8]
 800909a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	2200      	movs	r2, #0
 80090a0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090a6:	b29b      	uxth	r3, r3
 80090a8:	2bff      	cmp	r3, #255	; 0xff
 80090aa:	d90e      	bls.n	80090ca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	22ff      	movs	r2, #255	; 0xff
 80090b0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090b6:	b2da      	uxtb	r2, r3
 80090b8:	8979      	ldrh	r1, [r7, #10]
 80090ba:	4b52      	ldr	r3, [pc, #328]	; (8009204 <HAL_I2C_Master_Receive+0x1e4>)
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80090c2:	68f8      	ldr	r0, [r7, #12]
 80090c4:	f000 fb16 	bl	80096f4 <I2C_TransferConfig>
 80090c8:	e06d      	b.n	80091a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ce:	b29a      	uxth	r2, r3
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090d8:	b2da      	uxtb	r2, r3
 80090da:	8979      	ldrh	r1, [r7, #10]
 80090dc:	4b49      	ldr	r3, [pc, #292]	; (8009204 <HAL_I2C_Master_Receive+0x1e4>)
 80090de:	9300      	str	r3, [sp, #0]
 80090e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80090e4:	68f8      	ldr	r0, [r7, #12]
 80090e6:	f000 fb05 	bl	80096f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80090ea:	e05c      	b.n	80091a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090ec:	697a      	ldr	r2, [r7, #20]
 80090ee:	6a39      	ldr	r1, [r7, #32]
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f000 f993 	bl	800941c <I2C_WaitOnRXNEFlagUntilTimeout>
 80090f6:	4603      	mov	r3, r0
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d001      	beq.n	8009100 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e07c      	b.n	80091fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800910a:	b2d2      	uxtb	r2, r2
 800910c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800910e:	68fb      	ldr	r3, [r7, #12]
 8009110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009112:	1c5a      	adds	r2, r3, #1
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800911c:	3b01      	subs	r3, #1
 800911e:	b29a      	uxth	r2, r3
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009128:	b29b      	uxth	r3, r3
 800912a:	3b01      	subs	r3, #1
 800912c:	b29a      	uxth	r2, r3
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009136:	b29b      	uxth	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d034      	beq.n	80091a6 <HAL_I2C_Master_Receive+0x186>
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009140:	2b00      	cmp	r3, #0
 8009142:	d130      	bne.n	80091a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8009144:	697b      	ldr	r3, [r7, #20]
 8009146:	9300      	str	r3, [sp, #0]
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	2200      	movs	r2, #0
 800914c:	2180      	movs	r1, #128	; 0x80
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 f880 	bl	8009254 <I2C_WaitOnFlagUntilTimeout>
 8009154:	4603      	mov	r3, r0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d001      	beq.n	800915e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e04d      	b.n	80091fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009162:	b29b      	uxth	r3, r3
 8009164:	2bff      	cmp	r3, #255	; 0xff
 8009166:	d90e      	bls.n	8009186 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	22ff      	movs	r2, #255	; 0xff
 800916c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009172:	b2da      	uxtb	r2, r3
 8009174:	8979      	ldrh	r1, [r7, #10]
 8009176:	2300      	movs	r3, #0
 8009178:	9300      	str	r3, [sp, #0]
 800917a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	f000 fab8 	bl	80096f4 <I2C_TransferConfig>
 8009184:	e00f      	b.n	80091a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800918a:	b29a      	uxth	r2, r3
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009194:	b2da      	uxtb	r2, r3
 8009196:	8979      	ldrh	r1, [r7, #10]
 8009198:	2300      	movs	r3, #0
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f000 faa7 	bl	80096f4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091aa:	b29b      	uxth	r3, r3
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d19d      	bne.n	80090ec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80091b0:	697a      	ldr	r2, [r7, #20]
 80091b2:	6a39      	ldr	r1, [r7, #32]
 80091b4:	68f8      	ldr	r0, [r7, #12]
 80091b6:	f000 f8ed 	bl	8009394 <I2C_WaitOnSTOPFlagUntilTimeout>
 80091ba:	4603      	mov	r3, r0
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d001      	beq.n	80091c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80091c0:	2301      	movs	r3, #1
 80091c2:	e01a      	b.n	80091fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	2220      	movs	r2, #32
 80091ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	6859      	ldr	r1, [r3, #4]
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681a      	ldr	r2, [r3, #0]
 80091d6:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <HAL_I2C_Master_Receive+0x1e8>)
 80091d8:	400b      	ands	r3, r1
 80091da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2220      	movs	r2, #32
 80091e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2200      	movs	r2, #0
 80091e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80091f4:	2300      	movs	r3, #0
 80091f6:	e000      	b.n	80091fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80091f8:	2302      	movs	r3, #2
  }
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	80002400 	.word	0x80002400
 8009208:	fe00e800 	.word	0xfe00e800

0800920c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800920c:	b480      	push	{r7}
 800920e:	b083      	sub	sp, #12
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	f003 0302 	and.w	r3, r3, #2
 800921e:	2b02      	cmp	r3, #2
 8009220:	d103      	bne.n	800922a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	2200      	movs	r2, #0
 8009228:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	699b      	ldr	r3, [r3, #24]
 8009230:	f003 0301 	and.w	r3, r3, #1
 8009234:	2b01      	cmp	r3, #1
 8009236:	d007      	beq.n	8009248 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	699a      	ldr	r2, [r3, #24]
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f042 0201 	orr.w	r2, r2, #1
 8009246:	619a      	str	r2, [r3, #24]
  }
}
 8009248:	bf00      	nop
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr

08009254 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	60f8      	str	r0, [r7, #12]
 800925c:	60b9      	str	r1, [r7, #8]
 800925e:	603b      	str	r3, [r7, #0]
 8009260:	4613      	mov	r3, r2
 8009262:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009264:	e03b      	b.n	80092de <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009266:	69ba      	ldr	r2, [r7, #24]
 8009268:	6839      	ldr	r1, [r7, #0]
 800926a:	68f8      	ldr	r0, [r7, #12]
 800926c:	f000 f962 	bl	8009534 <I2C_IsErrorOccurred>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	e041      	b.n	80092fe <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009280:	d02d      	beq.n	80092de <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009282:	f7fa fbd3 	bl	8003a2c <HAL_GetTick>
 8009286:	4602      	mov	r2, r0
 8009288:	69bb      	ldr	r3, [r7, #24]
 800928a:	1ad3      	subs	r3, r2, r3
 800928c:	683a      	ldr	r2, [r7, #0]
 800928e:	429a      	cmp	r2, r3
 8009290:	d302      	bcc.n	8009298 <I2C_WaitOnFlagUntilTimeout+0x44>
 8009292:	683b      	ldr	r3, [r7, #0]
 8009294:	2b00      	cmp	r3, #0
 8009296:	d122      	bne.n	80092de <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	699a      	ldr	r2, [r3, #24]
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	4013      	ands	r3, r2
 80092a2:	68ba      	ldr	r2, [r7, #8]
 80092a4:	429a      	cmp	r2, r3
 80092a6:	bf0c      	ite	eq
 80092a8:	2301      	moveq	r3, #1
 80092aa:	2300      	movne	r3, #0
 80092ac:	b2db      	uxtb	r3, r3
 80092ae:	461a      	mov	r2, r3
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	429a      	cmp	r2, r3
 80092b4:	d113      	bne.n	80092de <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092ba:	f043 0220 	orr.w	r2, r3, #32
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	2220      	movs	r2, #32
 80092c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	2200      	movs	r2, #0
 80092ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	2200      	movs	r2, #0
 80092d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80092da:	2301      	movs	r3, #1
 80092dc:	e00f      	b.n	80092fe <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	699a      	ldr	r2, [r3, #24]
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	4013      	ands	r3, r2
 80092e8:	68ba      	ldr	r2, [r7, #8]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	bf0c      	ite	eq
 80092ee:	2301      	moveq	r3, #1
 80092f0:	2300      	movne	r3, #0
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	461a      	mov	r2, r3
 80092f6:	79fb      	ldrb	r3, [r7, #7]
 80092f8:	429a      	cmp	r2, r3
 80092fa:	d0b4      	beq.n	8009266 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b084      	sub	sp, #16
 800930a:	af00      	add	r7, sp, #0
 800930c:	60f8      	str	r0, [r7, #12]
 800930e:	60b9      	str	r1, [r7, #8]
 8009310:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009312:	e033      	b.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009314:	687a      	ldr	r2, [r7, #4]
 8009316:	68b9      	ldr	r1, [r7, #8]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f000 f90b 	bl	8009534 <I2C_IsErrorOccurred>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d001      	beq.n	8009328 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009324:	2301      	movs	r3, #1
 8009326:	e031      	b.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009328:	68bb      	ldr	r3, [r7, #8]
 800932a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800932e:	d025      	beq.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009330:	f7fa fb7c 	bl	8003a2c <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	68ba      	ldr	r2, [r7, #8]
 800933c:	429a      	cmp	r2, r3
 800933e:	d302      	bcc.n	8009346 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d11a      	bne.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	699b      	ldr	r3, [r3, #24]
 800934c:	f003 0302 	and.w	r3, r3, #2
 8009350:	2b02      	cmp	r3, #2
 8009352:	d013      	beq.n	800937c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009358:	f043 0220 	orr.w	r2, r3, #32
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2220      	movs	r2, #32
 8009364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2200      	movs	r2, #0
 8009374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009378:	2301      	movs	r3, #1
 800937a:	e007      	b.n	800938c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	699b      	ldr	r3, [r3, #24]
 8009382:	f003 0302 	and.w	r3, r3, #2
 8009386:	2b02      	cmp	r3, #2
 8009388:	d1c4      	bne.n	8009314 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3710      	adds	r7, #16
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80093a0:	e02f      	b.n	8009402 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80093a2:	687a      	ldr	r2, [r7, #4]
 80093a4:	68b9      	ldr	r1, [r7, #8]
 80093a6:	68f8      	ldr	r0, [r7, #12]
 80093a8:	f000 f8c4 	bl	8009534 <I2C_IsErrorOccurred>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d001      	beq.n	80093b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	e02d      	b.n	8009412 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093b6:	f7fa fb39 	bl	8003a2c <HAL_GetTick>
 80093ba:	4602      	mov	r2, r0
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	1ad3      	subs	r3, r2, r3
 80093c0:	68ba      	ldr	r2, [r7, #8]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d302      	bcc.n	80093cc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d11a      	bne.n	8009402 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	f003 0320 	and.w	r3, r3, #32
 80093d6:	2b20      	cmp	r3, #32
 80093d8:	d013      	beq.n	8009402 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093de:	f043 0220 	orr.w	r2, r3, #32
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2220      	movs	r2, #32
 80093ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	e007      	b.n	8009412 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	699b      	ldr	r3, [r3, #24]
 8009408:	f003 0320 	and.w	r3, r3, #32
 800940c:	2b20      	cmp	r3, #32
 800940e:	d1c8      	bne.n	80093a2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3710      	adds	r7, #16
 8009416:	46bd      	mov	sp, r7
 8009418:	bd80      	pop	{r7, pc}
	...

0800941c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b086      	sub	sp, #24
 8009420:	af00      	add	r7, sp, #0
 8009422:	60f8      	str	r0, [r7, #12]
 8009424:	60b9      	str	r1, [r7, #8]
 8009426:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009428:	2300      	movs	r3, #0
 800942a:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800942c:	e071      	b.n	8009512 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	68b9      	ldr	r1, [r7, #8]
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f000 f87e 	bl	8009534 <I2C_IsErrorOccurred>
 8009438:	4603      	mov	r3, r0
 800943a:	2b00      	cmp	r3, #0
 800943c:	d001      	beq.n	8009442 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 800943e:	2301      	movs	r3, #1
 8009440:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	699b      	ldr	r3, [r3, #24]
 8009448:	f003 0320 	and.w	r3, r3, #32
 800944c:	2b20      	cmp	r3, #32
 800944e:	d13b      	bne.n	80094c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8009450:	7dfb      	ldrb	r3, [r7, #23]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d138      	bne.n	80094c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	699b      	ldr	r3, [r3, #24]
 800945c:	f003 0304 	and.w	r3, r3, #4
 8009460:	2b04      	cmp	r3, #4
 8009462:	d105      	bne.n	8009470 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009468:	2b00      	cmp	r3, #0
 800946a:	d001      	beq.n	8009470 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 800946c:	2300      	movs	r3, #0
 800946e:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	699b      	ldr	r3, [r3, #24]
 8009476:	f003 0310 	and.w	r3, r3, #16
 800947a:	2b10      	cmp	r3, #16
 800947c:	d121      	bne.n	80094c2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	2210      	movs	r2, #16
 8009484:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	2204      	movs	r2, #4
 800948a:	645a      	str	r2, [r3, #68]	; 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	2220      	movs	r2, #32
 8009492:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6859      	ldr	r1, [r3, #4]
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681a      	ldr	r2, [r3, #0]
 800949e:	4b24      	ldr	r3, [pc, #144]	; (8009530 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80094a0:	400b      	ands	r3, r1
 80094a2:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2220      	movs	r2, #32
 80094a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	2200      	movs	r2, #0
 80094b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 80094bc:	2301      	movs	r3, #1
 80094be:	75fb      	strb	r3, [r7, #23]
 80094c0:	e002      	b.n	80094c8 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80094c8:	f7fa fab0 	bl	8003a2c <HAL_GetTick>
 80094cc:	4602      	mov	r2, r0
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	1ad3      	subs	r3, r2, r3
 80094d2:	68ba      	ldr	r2, [r7, #8]
 80094d4:	429a      	cmp	r2, r3
 80094d6:	d302      	bcc.n	80094de <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d119      	bne.n	8009512 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80094de:	7dfb      	ldrb	r3, [r7, #23]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d116      	bne.n	8009512 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	699b      	ldr	r3, [r3, #24]
 80094ea:	f003 0304 	and.w	r3, r3, #4
 80094ee:	2b04      	cmp	r3, #4
 80094f0:	d00f      	beq.n	8009512 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094f6:	f043 0220 	orr.w	r2, r3, #32
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2220      	movs	r2, #32
 8009502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	2200      	movs	r2, #0
 800950a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        status = HAL_ERROR;
 800950e:	2301      	movs	r3, #1
 8009510:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	699b      	ldr	r3, [r3, #24]
 8009518:	f003 0304 	and.w	r3, r3, #4
 800951c:	2b04      	cmp	r3, #4
 800951e:	d002      	beq.n	8009526 <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8009520:	7dfb      	ldrb	r3, [r7, #23]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d083      	beq.n	800942e <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 8009526:	7dfb      	ldrb	r3, [r7, #23]
}
 8009528:	4618      	mov	r0, r3
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	fe00e800 	.word	0xfe00e800

08009534 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009534:	b580      	push	{r7, lr}
 8009536:	b08a      	sub	sp, #40	; 0x28
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009540:	2300      	movs	r3, #0
 8009542:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	699b      	ldr	r3, [r3, #24]
 800954c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800954e:	2300      	movs	r3, #0
 8009550:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8009556:	69bb      	ldr	r3, [r7, #24]
 8009558:	f003 0310 	and.w	r3, r3, #16
 800955c:	2b00      	cmp	r3, #0
 800955e:	d068      	beq.n	8009632 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	2210      	movs	r2, #16
 8009566:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8009568:	e049      	b.n	80095fe <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009570:	d045      	beq.n	80095fe <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009572:	f7fa fa5b 	bl	8003a2c <HAL_GetTick>
 8009576:	4602      	mov	r2, r0
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	1ad3      	subs	r3, r2, r3
 800957c:	68ba      	ldr	r2, [r7, #8]
 800957e:	429a      	cmp	r2, r3
 8009580:	d302      	bcc.n	8009588 <I2C_IsErrorOccurred+0x54>
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	2b00      	cmp	r3, #0
 8009586:	d13a      	bne.n	80095fe <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009592:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800959a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	699b      	ldr	r3, [r3, #24]
 80095a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80095a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80095aa:	d121      	bne.n	80095f0 <I2C_IsErrorOccurred+0xbc>
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80095b2:	d01d      	beq.n	80095f0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80095b4:	7cfb      	ldrb	r3, [r7, #19]
 80095b6:	2b20      	cmp	r3, #32
 80095b8:	d01a      	beq.n	80095f0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	685a      	ldr	r2, [r3, #4]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80095c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80095ca:	f7fa fa2f 	bl	8003a2c <HAL_GetTick>
 80095ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095d0:	e00e      	b.n	80095f0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80095d2:	f7fa fa2b 	bl	8003a2c <HAL_GetTick>
 80095d6:	4602      	mov	r2, r0
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	1ad3      	subs	r3, r2, r3
 80095dc:	2b19      	cmp	r3, #25
 80095de:	d907      	bls.n	80095f0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	f043 0320 	orr.w	r3, r3, #32
 80095e6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80095e8:	2301      	movs	r3, #1
 80095ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80095ee:	e006      	b.n	80095fe <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	699b      	ldr	r3, [r3, #24]
 80095f6:	f003 0320 	and.w	r3, r3, #32
 80095fa:	2b20      	cmp	r3, #32
 80095fc:	d1e9      	bne.n	80095d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	699b      	ldr	r3, [r3, #24]
 8009604:	f003 0320 	and.w	r3, r3, #32
 8009608:	2b20      	cmp	r3, #32
 800960a:	d003      	beq.n	8009614 <I2C_IsErrorOccurred+0xe0>
 800960c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009610:	2b00      	cmp	r3, #0
 8009612:	d0aa      	beq.n	800956a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8009614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009618:	2b00      	cmp	r3, #0
 800961a:	d103      	bne.n	8009624 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	2220      	movs	r2, #32
 8009622:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	f043 0304 	orr.w	r3, r3, #4
 800962a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800962c:	2301      	movs	r3, #1
 800962e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	699b      	ldr	r3, [r3, #24]
 8009638:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800963a:	69bb      	ldr	r3, [r7, #24]
 800963c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009640:	2b00      	cmp	r3, #0
 8009642:	d00b      	beq.n	800965c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8009644:	6a3b      	ldr	r3, [r7, #32]
 8009646:	f043 0301 	orr.w	r3, r3, #1
 800964a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009654:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800965c:	69bb      	ldr	r3, [r7, #24]
 800965e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00b      	beq.n	800967e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	f043 0308 	orr.w	r3, r3, #8
 800966c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009676:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009678:	2301      	movs	r3, #1
 800967a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800967e:	69bb      	ldr	r3, [r7, #24]
 8009680:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009684:	2b00      	cmp	r3, #0
 8009686:	d00b      	beq.n	80096a0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8009688:	6a3b      	ldr	r3, [r7, #32]
 800968a:	f043 0302 	orr.w	r3, r3, #2
 800968e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009698:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800969a:	2301      	movs	r3, #1
 800969c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80096a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d01c      	beq.n	80096e2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096a8:	68f8      	ldr	r0, [r7, #12]
 80096aa:	f7ff fdaf 	bl	800920c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	6859      	ldr	r1, [r3, #4]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681a      	ldr	r2, [r3, #0]
 80096b8:	4b0d      	ldr	r3, [pc, #52]	; (80096f0 <I2C_IsErrorOccurred+0x1bc>)
 80096ba:	400b      	ands	r3, r1
 80096bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096c2:	6a3b      	ldr	r3, [r7, #32]
 80096c4:	431a      	orrs	r2, r3
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2220      	movs	r2, #32
 80096ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2200      	movs	r2, #0
 80096d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2200      	movs	r2, #0
 80096de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80096e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3728      	adds	r7, #40	; 0x28
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	fe00e800 	.word	0xfe00e800

080096f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	607b      	str	r3, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	817b      	strh	r3, [r7, #10]
 8009702:	4613      	mov	r3, r2
 8009704:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009706:	897b      	ldrh	r3, [r7, #10]
 8009708:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800970c:	7a7b      	ldrb	r3, [r7, #9]
 800970e:	041b      	lsls	r3, r3, #16
 8009710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8009714:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	4313      	orrs	r3, r2
 800971e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009722:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	685a      	ldr	r2, [r3, #4]
 800972a:	6a3b      	ldr	r3, [r7, #32]
 800972c:	0d5b      	lsrs	r3, r3, #21
 800972e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009732:	4b08      	ldr	r3, [pc, #32]	; (8009754 <I2C_TransferConfig+0x60>)
 8009734:	430b      	orrs	r3, r1
 8009736:	43db      	mvns	r3, r3
 8009738:	ea02 0103 	and.w	r1, r2, r3
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	697a      	ldr	r2, [r7, #20]
 8009742:	430a      	orrs	r2, r1
 8009744:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8009746:	bf00      	nop
 8009748:	371c      	adds	r7, #28
 800974a:	46bd      	mov	sp, r7
 800974c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009750:	4770      	bx	lr
 8009752:	bf00      	nop
 8009754:	03ff63ff 	.word	0x03ff63ff

08009758 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009758:	b480      	push	{r7}
 800975a:	b083      	sub	sp, #12
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009768:	b2db      	uxtb	r3, r3
 800976a:	2b20      	cmp	r3, #32
 800976c:	d138      	bne.n	80097e0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009774:	2b01      	cmp	r3, #1
 8009776:	d101      	bne.n	800977c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009778:	2302      	movs	r3, #2
 800977a:	e032      	b.n	80097e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2201      	movs	r2, #1
 8009780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2224      	movs	r2, #36	; 0x24
 8009788:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	681a      	ldr	r2, [r3, #0]
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f022 0201 	bic.w	r2, r2, #1
 800979a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80097aa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	6819      	ldr	r1, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	430a      	orrs	r2, r1
 80097ba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	681a      	ldr	r2, [r3, #0]
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	f042 0201 	orr.w	r2, r2, #1
 80097ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2220      	movs	r2, #32
 80097d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	e000      	b.n	80097e2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80097e0:	2302      	movs	r3, #2
  }
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	370c      	adds	r7, #12
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr

080097ee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80097ee:	b480      	push	{r7}
 80097f0:	b085      	sub	sp, #20
 80097f2:	af00      	add	r7, sp, #0
 80097f4:	6078      	str	r0, [r7, #4]
 80097f6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b20      	cmp	r3, #32
 8009802:	d139      	bne.n	8009878 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800980a:	2b01      	cmp	r3, #1
 800980c:	d101      	bne.n	8009812 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800980e:	2302      	movs	r3, #2
 8009810:	e033      	b.n	800987a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2224      	movs	r2, #36	; 0x24
 800981e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0201 	bic.w	r2, r2, #1
 8009830:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009840:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	021b      	lsls	r3, r3, #8
 8009846:	68fa      	ldr	r2, [r7, #12]
 8009848:	4313      	orrs	r3, r2
 800984a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68fa      	ldr	r2, [r7, #12]
 8009852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f042 0201 	orr.w	r2, r2, #1
 8009862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2220      	movs	r2, #32
 8009868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2200      	movs	r2, #0
 8009870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009874:	2300      	movs	r3, #0
 8009876:	e000      	b.n	800987a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009878:	2302      	movs	r3, #2
  }
}
 800987a:	4618      	mov	r0, r3
 800987c:	3714      	adds	r7, #20
 800987e:	46bd      	mov	sp, r7
 8009880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009884:	4770      	bx	lr
	...

08009888 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009890:	4b0d      	ldr	r3, [pc, #52]	; (80098c8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009892:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009896:	4a0c      	ldr	r2, [pc, #48]	; (80098c8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 8009898:	f043 0302 	orr.w	r3, r3, #2
 800989c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80098a0:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80098a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80098a6:	f003 0302 	and.w	r3, r3, #2
 80098aa:	60fb      	str	r3, [r7, #12]
 80098ac:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 80098ae:	4b07      	ldr	r3, [pc, #28]	; (80098cc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80098b0:	685a      	ldr	r2, [r3, #4]
 80098b2:	4906      	ldr	r1, [pc, #24]	; (80098cc <HAL_I2CEx_EnableFastModePlus+0x44>)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	4313      	orrs	r3, r2
 80098b8:	604b      	str	r3, [r1, #4]
}
 80098ba:	bf00      	nop
 80098bc:	3714      	adds	r7, #20
 80098be:	46bd      	mov	sp, r7
 80098c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c4:	4770      	bx	lr
 80098c6:	bf00      	nop
 80098c8:	58024400 	.word	0x58024400
 80098cc:	58000400 	.word	0x58000400

080098d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b084      	sub	sp, #16
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80098d8:	4b19      	ldr	r3, [pc, #100]	; (8009940 <HAL_PWREx_ConfigSupply+0x70>)
 80098da:	68db      	ldr	r3, [r3, #12]
 80098dc:	f003 0304 	and.w	r3, r3, #4
 80098e0:	2b04      	cmp	r3, #4
 80098e2:	d00a      	beq.n	80098fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80098e4:	4b16      	ldr	r3, [pc, #88]	; (8009940 <HAL_PWREx_ConfigSupply+0x70>)
 80098e6:	68db      	ldr	r3, [r3, #12]
 80098e8:	f003 0307 	and.w	r3, r3, #7
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	429a      	cmp	r2, r3
 80098f0:	d001      	beq.n	80098f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80098f2:	2301      	movs	r3, #1
 80098f4:	e01f      	b.n	8009936 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	e01d      	b.n	8009936 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80098fa:	4b11      	ldr	r3, [pc, #68]	; (8009940 <HAL_PWREx_ConfigSupply+0x70>)
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	f023 0207 	bic.w	r2, r3, #7
 8009902:	490f      	ldr	r1, [pc, #60]	; (8009940 <HAL_PWREx_ConfigSupply+0x70>)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	4313      	orrs	r3, r2
 8009908:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800990a:	f7fa f88f 	bl	8003a2c <HAL_GetTick>
 800990e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009910:	e009      	b.n	8009926 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009912:	f7fa f88b 	bl	8003a2c <HAL_GetTick>
 8009916:	4602      	mov	r2, r0
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	1ad3      	subs	r3, r2, r3
 800991c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009920:	d901      	bls.n	8009926 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009922:	2301      	movs	r3, #1
 8009924:	e007      	b.n	8009936 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009926:	4b06      	ldr	r3, [pc, #24]	; (8009940 <HAL_PWREx_ConfigSupply+0x70>)
 8009928:	685b      	ldr	r3, [r3, #4]
 800992a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800992e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009932:	d1ee      	bne.n	8009912 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}
 800993e:	bf00      	nop
 8009940:	58024800 	.word	0x58024800

08009944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	b08c      	sub	sp, #48	; 0x30
 8009948:	af00      	add	r7, sp, #0
 800994a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d102      	bne.n	8009958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009952:	2301      	movs	r3, #1
 8009954:	f000 bc48 	b.w	800a1e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f003 0301 	and.w	r3, r3, #1
 8009960:	2b00      	cmp	r3, #0
 8009962:	f000 8088 	beq.w	8009a76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009966:	4b99      	ldr	r3, [pc, #612]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009968:	691b      	ldr	r3, [r3, #16]
 800996a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800996e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009970:	4b96      	ldr	r3, [pc, #600]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009974:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009978:	2b10      	cmp	r3, #16
 800997a:	d007      	beq.n	800998c <HAL_RCC_OscConfig+0x48>
 800997c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997e:	2b18      	cmp	r3, #24
 8009980:	d111      	bne.n	80099a6 <HAL_RCC_OscConfig+0x62>
 8009982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009984:	f003 0303 	and.w	r3, r3, #3
 8009988:	2b02      	cmp	r3, #2
 800998a:	d10c      	bne.n	80099a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800998c:	4b8f      	ldr	r3, [pc, #572]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d06d      	beq.n	8009a74 <HAL_RCC_OscConfig+0x130>
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	685b      	ldr	r3, [r3, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d169      	bne.n	8009a74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80099a0:	2301      	movs	r3, #1
 80099a2:	f000 bc21 	b.w	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099ae:	d106      	bne.n	80099be <HAL_RCC_OscConfig+0x7a>
 80099b0:	4b86      	ldr	r3, [pc, #536]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a85      	ldr	r2, [pc, #532]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	e02e      	b.n	8009a1c <HAL_RCC_OscConfig+0xd8>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d10c      	bne.n	80099e0 <HAL_RCC_OscConfig+0x9c>
 80099c6:	4b81      	ldr	r3, [pc, #516]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a80      	ldr	r2, [pc, #512]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80099d0:	6013      	str	r3, [r2, #0]
 80099d2:	4b7e      	ldr	r3, [pc, #504]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a7d      	ldr	r2, [pc, #500]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80099dc:	6013      	str	r3, [r2, #0]
 80099de:	e01d      	b.n	8009a1c <HAL_RCC_OscConfig+0xd8>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	685b      	ldr	r3, [r3, #4]
 80099e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80099e8:	d10c      	bne.n	8009a04 <HAL_RCC_OscConfig+0xc0>
 80099ea:	4b78      	ldr	r3, [pc, #480]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a77      	ldr	r2, [pc, #476]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80099f4:	6013      	str	r3, [r2, #0]
 80099f6:	4b75      	ldr	r3, [pc, #468]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a74      	ldr	r2, [pc, #464]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 80099fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a00:	6013      	str	r3, [r2, #0]
 8009a02:	e00b      	b.n	8009a1c <HAL_RCC_OscConfig+0xd8>
 8009a04:	4b71      	ldr	r3, [pc, #452]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a70      	ldr	r2, [pc, #448]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009a0e:	6013      	str	r3, [r2, #0]
 8009a10:	4b6e      	ldr	r3, [pc, #440]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	4a6d      	ldr	r2, [pc, #436]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d013      	beq.n	8009a4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a24:	f7fa f802 	bl	8003a2c <HAL_GetTick>
 8009a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a2a:	e008      	b.n	8009a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a2c:	f7f9 fffe 	bl	8003a2c <HAL_GetTick>
 8009a30:	4602      	mov	r2, r0
 8009a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a34:	1ad3      	subs	r3, r2, r3
 8009a36:	2b64      	cmp	r3, #100	; 0x64
 8009a38:	d901      	bls.n	8009a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009a3a:	2303      	movs	r3, #3
 8009a3c:	e3d4      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009a3e:	4b63      	ldr	r3, [pc, #396]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d0f0      	beq.n	8009a2c <HAL_RCC_OscConfig+0xe8>
 8009a4a:	e014      	b.n	8009a76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a4c:	f7f9 ffee 	bl	8003a2c <HAL_GetTick>
 8009a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a52:	e008      	b.n	8009a66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009a54:	f7f9 ffea 	bl	8003a2c <HAL_GetTick>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5c:	1ad3      	subs	r3, r2, r3
 8009a5e:	2b64      	cmp	r3, #100	; 0x64
 8009a60:	d901      	bls.n	8009a66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009a62:	2303      	movs	r3, #3
 8009a64:	e3c0      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009a66:	4b59      	ldr	r3, [pc, #356]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d1f0      	bne.n	8009a54 <HAL_RCC_OscConfig+0x110>
 8009a72:	e000      	b.n	8009a76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f003 0302 	and.w	r3, r3, #2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f000 80ca 	beq.w	8009c18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a84:	4b51      	ldr	r3, [pc, #324]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009a86:	691b      	ldr	r3, [r3, #16]
 8009a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a8e:	4b4f      	ldr	r3, [pc, #316]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009a94:	6a3b      	ldr	r3, [r7, #32]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d007      	beq.n	8009aaa <HAL_RCC_OscConfig+0x166>
 8009a9a:	6a3b      	ldr	r3, [r7, #32]
 8009a9c:	2b18      	cmp	r3, #24
 8009a9e:	d156      	bne.n	8009b4e <HAL_RCC_OscConfig+0x20a>
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	f003 0303 	and.w	r3, r3, #3
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d151      	bne.n	8009b4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009aaa:	4b48      	ldr	r3, [pc, #288]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f003 0304 	and.w	r3, r3, #4
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d005      	beq.n	8009ac2 <HAL_RCC_OscConfig+0x17e>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d101      	bne.n	8009ac2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009abe:	2301      	movs	r3, #1
 8009ac0:	e392      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ac2:	4b42      	ldr	r3, [pc, #264]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	f023 0219 	bic.w	r2, r3, #25
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	68db      	ldr	r3, [r3, #12]
 8009ace:	493f      	ldr	r1, [pc, #252]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009ad0:	4313      	orrs	r3, r2
 8009ad2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ad4:	f7f9 ffaa 	bl	8003a2c <HAL_GetTick>
 8009ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ada:	e008      	b.n	8009aee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009adc:	f7f9 ffa6 	bl	8003a2c <HAL_GetTick>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ae4:	1ad3      	subs	r3, r2, r3
 8009ae6:	2b02      	cmp	r3, #2
 8009ae8:	d901      	bls.n	8009aee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009aea:	2303      	movs	r3, #3
 8009aec:	e37c      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009aee:	4b37      	ldr	r3, [pc, #220]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	f003 0304 	and.w	r3, r3, #4
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d0f0      	beq.n	8009adc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009afa:	f7f9 ffa3 	bl	8003a44 <HAL_GetREVID>
 8009afe:	4603      	mov	r3, r0
 8009b00:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d817      	bhi.n	8009b38 <HAL_RCC_OscConfig+0x1f4>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	2b40      	cmp	r3, #64	; 0x40
 8009b0e:	d108      	bne.n	8009b22 <HAL_RCC_OscConfig+0x1de>
 8009b10:	4b2e      	ldr	r3, [pc, #184]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009b12:	685b      	ldr	r3, [r3, #4]
 8009b14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009b18:	4a2c      	ldr	r2, [pc, #176]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b20:	e07a      	b.n	8009c18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b22:	4b2a      	ldr	r3, [pc, #168]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009b24:	685b      	ldr	r3, [r3, #4]
 8009b26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	691b      	ldr	r3, [r3, #16]
 8009b2e:	031b      	lsls	r3, r3, #12
 8009b30:	4926      	ldr	r1, [pc, #152]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009b32:	4313      	orrs	r3, r2
 8009b34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b36:	e06f      	b.n	8009c18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b38:	4b24      	ldr	r3, [pc, #144]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009b3a:	685b      	ldr	r3, [r3, #4]
 8009b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	691b      	ldr	r3, [r3, #16]
 8009b44:	061b      	lsls	r3, r3, #24
 8009b46:	4921      	ldr	r1, [pc, #132]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009b4c:	e064      	b.n	8009c18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d047      	beq.n	8009be6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009b56:	4b1d      	ldr	r3, [pc, #116]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f023 0219 	bic.w	r2, r3, #25
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	68db      	ldr	r3, [r3, #12]
 8009b62:	491a      	ldr	r1, [pc, #104]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009b64:	4313      	orrs	r3, r2
 8009b66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b68:	f7f9 ff60 	bl	8003a2c <HAL_GetTick>
 8009b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b6e:	e008      	b.n	8009b82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009b70:	f7f9 ff5c 	bl	8003a2c <HAL_GetTick>
 8009b74:	4602      	mov	r2, r0
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	1ad3      	subs	r3, r2, r3
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d901      	bls.n	8009b82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009b7e:	2303      	movs	r3, #3
 8009b80:	e332      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009b82:	4b12      	ldr	r3, [pc, #72]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d0f0      	beq.n	8009b70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009b8e:	f7f9 ff59 	bl	8003a44 <HAL_GetREVID>
 8009b92:	4603      	mov	r3, r0
 8009b94:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d819      	bhi.n	8009bd0 <HAL_RCC_OscConfig+0x28c>
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	691b      	ldr	r3, [r3, #16]
 8009ba0:	2b40      	cmp	r3, #64	; 0x40
 8009ba2:	d108      	bne.n	8009bb6 <HAL_RCC_OscConfig+0x272>
 8009ba4:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009bac:	4a07      	ldr	r2, [pc, #28]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009bb2:	6053      	str	r3, [r2, #4]
 8009bb4:	e030      	b.n	8009c18 <HAL_RCC_OscConfig+0x2d4>
 8009bb6:	4b05      	ldr	r3, [pc, #20]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	031b      	lsls	r3, r3, #12
 8009bc4:	4901      	ldr	r1, [pc, #4]	; (8009bcc <HAL_RCC_OscConfig+0x288>)
 8009bc6:	4313      	orrs	r3, r2
 8009bc8:	604b      	str	r3, [r1, #4]
 8009bca:	e025      	b.n	8009c18 <HAL_RCC_OscConfig+0x2d4>
 8009bcc:	58024400 	.word	0x58024400
 8009bd0:	4b9a      	ldr	r3, [pc, #616]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009bd2:	685b      	ldr	r3, [r3, #4]
 8009bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	691b      	ldr	r3, [r3, #16]
 8009bdc:	061b      	lsls	r3, r3, #24
 8009bde:	4997      	ldr	r1, [pc, #604]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009be0:	4313      	orrs	r3, r2
 8009be2:	604b      	str	r3, [r1, #4]
 8009be4:	e018      	b.n	8009c18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009be6:	4b95      	ldr	r3, [pc, #596]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a94      	ldr	r2, [pc, #592]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009bec:	f023 0301 	bic.w	r3, r3, #1
 8009bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bf2:	f7f9 ff1b 	bl	8003a2c <HAL_GetTick>
 8009bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009bf8:	e008      	b.n	8009c0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009bfa:	f7f9 ff17 	bl	8003a2c <HAL_GetTick>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c02:	1ad3      	subs	r3, r2, r3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d901      	bls.n	8009c0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009c08:	2303      	movs	r3, #3
 8009c0a:	e2ed      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c0c:	4b8b      	ldr	r3, [pc, #556]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	f003 0304 	and.w	r3, r3, #4
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d1f0      	bne.n	8009bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f003 0310 	and.w	r3, r3, #16
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	f000 80a9 	beq.w	8009d78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009c26:	4b85      	ldr	r3, [pc, #532]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009c2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009c30:	4b82      	ldr	r3, [pc, #520]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b08      	cmp	r3, #8
 8009c3a:	d007      	beq.n	8009c4c <HAL_RCC_OscConfig+0x308>
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	2b18      	cmp	r3, #24
 8009c40:	d13a      	bne.n	8009cb8 <HAL_RCC_OscConfig+0x374>
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	f003 0303 	and.w	r3, r3, #3
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d135      	bne.n	8009cb8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c4c:	4b7b      	ldr	r3, [pc, #492]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d005      	beq.n	8009c64 <HAL_RCC_OscConfig+0x320>
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	69db      	ldr	r3, [r3, #28]
 8009c5c:	2b80      	cmp	r3, #128	; 0x80
 8009c5e:	d001      	beq.n	8009c64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009c60:	2301      	movs	r3, #1
 8009c62:	e2c1      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c64:	f7f9 feee 	bl	8003a44 <HAL_GetREVID>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d817      	bhi.n	8009ca2 <HAL_RCC_OscConfig+0x35e>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6a1b      	ldr	r3, [r3, #32]
 8009c76:	2b20      	cmp	r3, #32
 8009c78:	d108      	bne.n	8009c8c <HAL_RCC_OscConfig+0x348>
 8009c7a:	4b70      	ldr	r3, [pc, #448]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009c7c:	685b      	ldr	r3, [r3, #4]
 8009c7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009c82:	4a6e      	ldr	r2, [pc, #440]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009c8a:	e075      	b.n	8009d78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c8c:	4b6b      	ldr	r3, [pc, #428]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6a1b      	ldr	r3, [r3, #32]
 8009c98:	069b      	lsls	r3, r3, #26
 8009c9a:	4968      	ldr	r1, [pc, #416]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009c9c:	4313      	orrs	r3, r2
 8009c9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009ca0:	e06a      	b.n	8009d78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ca2:	4b66      	ldr	r3, [pc, #408]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009ca4:	68db      	ldr	r3, [r3, #12]
 8009ca6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	6a1b      	ldr	r3, [r3, #32]
 8009cae:	061b      	lsls	r3, r3, #24
 8009cb0:	4962      	ldr	r1, [pc, #392]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009cb6:	e05f      	b.n	8009d78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	69db      	ldr	r3, [r3, #28]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d042      	beq.n	8009d46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009cc0:	4b5e      	ldr	r3, [pc, #376]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a5d      	ldr	r2, [pc, #372]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ccc:	f7f9 feae 	bl	8003a2c <HAL_GetTick>
 8009cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009cd2:	e008      	b.n	8009ce6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cd4:	f7f9 feaa 	bl	8003a2c <HAL_GetTick>
 8009cd8:	4602      	mov	r2, r0
 8009cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cdc:	1ad3      	subs	r3, r2, r3
 8009cde:	2b02      	cmp	r3, #2
 8009ce0:	d901      	bls.n	8009ce6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	e280      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009ce6:	4b55      	ldr	r3, [pc, #340]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d0f0      	beq.n	8009cd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009cf2:	f7f9 fea7 	bl	8003a44 <HAL_GetREVID>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	f241 0203 	movw	r2, #4099	; 0x1003
 8009cfc:	4293      	cmp	r3, r2
 8009cfe:	d817      	bhi.n	8009d30 <HAL_RCC_OscConfig+0x3ec>
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6a1b      	ldr	r3, [r3, #32]
 8009d04:	2b20      	cmp	r3, #32
 8009d06:	d108      	bne.n	8009d1a <HAL_RCC_OscConfig+0x3d6>
 8009d08:	4b4c      	ldr	r3, [pc, #304]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d0a:	685b      	ldr	r3, [r3, #4]
 8009d0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009d10:	4a4a      	ldr	r2, [pc, #296]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009d16:	6053      	str	r3, [r2, #4]
 8009d18:	e02e      	b.n	8009d78 <HAL_RCC_OscConfig+0x434>
 8009d1a:	4b48      	ldr	r3, [pc, #288]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a1b      	ldr	r3, [r3, #32]
 8009d26:	069b      	lsls	r3, r3, #26
 8009d28:	4944      	ldr	r1, [pc, #272]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d2a:	4313      	orrs	r3, r2
 8009d2c:	604b      	str	r3, [r1, #4]
 8009d2e:	e023      	b.n	8009d78 <HAL_RCC_OscConfig+0x434>
 8009d30:	4b42      	ldr	r3, [pc, #264]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d32:	68db      	ldr	r3, [r3, #12]
 8009d34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	6a1b      	ldr	r3, [r3, #32]
 8009d3c:	061b      	lsls	r3, r3, #24
 8009d3e:	493f      	ldr	r1, [pc, #252]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d40:	4313      	orrs	r3, r2
 8009d42:	60cb      	str	r3, [r1, #12]
 8009d44:	e018      	b.n	8009d78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009d46:	4b3d      	ldr	r3, [pc, #244]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a3c      	ldr	r2, [pc, #240]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d52:	f7f9 fe6b 	bl	8003a2c <HAL_GetTick>
 8009d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d58:	e008      	b.n	8009d6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009d5a:	f7f9 fe67 	bl	8003a2c <HAL_GetTick>
 8009d5e:	4602      	mov	r2, r0
 8009d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d62:	1ad3      	subs	r3, r2, r3
 8009d64:	2b02      	cmp	r3, #2
 8009d66:	d901      	bls.n	8009d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009d68:	2303      	movs	r3, #3
 8009d6a:	e23d      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009d6c:	4b33      	ldr	r3, [pc, #204]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d1f0      	bne.n	8009d5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f003 0308 	and.w	r3, r3, #8
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d036      	beq.n	8009df2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d019      	beq.n	8009dc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009d8c:	4b2b      	ldr	r3, [pc, #172]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d90:	4a2a      	ldr	r2, [pc, #168]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009d92:	f043 0301 	orr.w	r3, r3, #1
 8009d96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d98:	f7f9 fe48 	bl	8003a2c <HAL_GetTick>
 8009d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d9e:	e008      	b.n	8009db2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009da0:	f7f9 fe44 	bl	8003a2c <HAL_GetTick>
 8009da4:	4602      	mov	r2, r0
 8009da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009da8:	1ad3      	subs	r3, r2, r3
 8009daa:	2b02      	cmp	r3, #2
 8009dac:	d901      	bls.n	8009db2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009dae:	2303      	movs	r3, #3
 8009db0:	e21a      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009db2:	4b22      	ldr	r3, [pc, #136]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009db6:	f003 0302 	and.w	r3, r3, #2
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0f0      	beq.n	8009da0 <HAL_RCC_OscConfig+0x45c>
 8009dbe:	e018      	b.n	8009df2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009dc0:	4b1e      	ldr	r3, [pc, #120]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dc4:	4a1d      	ldr	r2, [pc, #116]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009dc6:	f023 0301 	bic.w	r3, r3, #1
 8009dca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dcc:	f7f9 fe2e 	bl	8003a2c <HAL_GetTick>
 8009dd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009dd2:	e008      	b.n	8009de6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009dd4:	f7f9 fe2a 	bl	8003a2c <HAL_GetTick>
 8009dd8:	4602      	mov	r2, r0
 8009dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ddc:	1ad3      	subs	r3, r2, r3
 8009dde:	2b02      	cmp	r3, #2
 8009de0:	d901      	bls.n	8009de6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e200      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009de6:	4b15      	ldr	r3, [pc, #84]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1f0      	bne.n	8009dd4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	f003 0320 	and.w	r3, r3, #32
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d039      	beq.n	8009e72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01c      	beq.n	8009e40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009e06:	4b0d      	ldr	r3, [pc, #52]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a0c      	ldr	r2, [pc, #48]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009e0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009e10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e12:	f7f9 fe0b 	bl	8003a2c <HAL_GetTick>
 8009e16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e18:	e008      	b.n	8009e2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e1a:	f7f9 fe07 	bl	8003a2c <HAL_GetTick>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e22:	1ad3      	subs	r3, r2, r3
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d901      	bls.n	8009e2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009e28:	2303      	movs	r3, #3
 8009e2a:	e1dd      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009e2c:	4b03      	ldr	r3, [pc, #12]	; (8009e3c <HAL_RCC_OscConfig+0x4f8>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d0f0      	beq.n	8009e1a <HAL_RCC_OscConfig+0x4d6>
 8009e38:	e01b      	b.n	8009e72 <HAL_RCC_OscConfig+0x52e>
 8009e3a:	bf00      	nop
 8009e3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009e40:	4b9b      	ldr	r3, [pc, #620]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a9a      	ldr	r2, [pc, #616]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009e4c:	f7f9 fdee 	bl	8003a2c <HAL_GetTick>
 8009e50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e52:	e008      	b.n	8009e66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009e54:	f7f9 fdea 	bl	8003a2c <HAL_GetTick>
 8009e58:	4602      	mov	r2, r0
 8009e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e5c:	1ad3      	subs	r3, r2, r3
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d901      	bls.n	8009e66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e1c0      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009e66:	4b92      	ldr	r3, [pc, #584]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d1f0      	bne.n	8009e54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f003 0304 	and.w	r3, r3, #4
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	f000 8081 	beq.w	8009f82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e80:	4b8c      	ldr	r3, [pc, #560]	; (800a0b4 <HAL_RCC_OscConfig+0x770>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	4a8b      	ldr	r2, [pc, #556]	; (800a0b4 <HAL_RCC_OscConfig+0x770>)
 8009e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e8c:	f7f9 fdce 	bl	8003a2c <HAL_GetTick>
 8009e90:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e92:	e008      	b.n	8009ea6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009e94:	f7f9 fdca 	bl	8003a2c <HAL_GetTick>
 8009e98:	4602      	mov	r2, r0
 8009e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	2b64      	cmp	r3, #100	; 0x64
 8009ea0:	d901      	bls.n	8009ea6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009ea2:	2303      	movs	r3, #3
 8009ea4:	e1a0      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ea6:	4b83      	ldr	r3, [pc, #524]	; (800a0b4 <HAL_RCC_OscConfig+0x770>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d0f0      	beq.n	8009e94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	689b      	ldr	r3, [r3, #8]
 8009eb6:	2b01      	cmp	r3, #1
 8009eb8:	d106      	bne.n	8009ec8 <HAL_RCC_OscConfig+0x584>
 8009eba:	4b7d      	ldr	r3, [pc, #500]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ebe:	4a7c      	ldr	r2, [pc, #496]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009ec0:	f043 0301 	orr.w	r3, r3, #1
 8009ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8009ec6:	e02d      	b.n	8009f24 <HAL_RCC_OscConfig+0x5e0>
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d10c      	bne.n	8009eea <HAL_RCC_OscConfig+0x5a6>
 8009ed0:	4b77      	ldr	r3, [pc, #476]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ed4:	4a76      	ldr	r2, [pc, #472]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009ed6:	f023 0301 	bic.w	r3, r3, #1
 8009eda:	6713      	str	r3, [r2, #112]	; 0x70
 8009edc:	4b74      	ldr	r3, [pc, #464]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ee0:	4a73      	ldr	r2, [pc, #460]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009ee2:	f023 0304 	bic.w	r3, r3, #4
 8009ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8009ee8:	e01c      	b.n	8009f24 <HAL_RCC_OscConfig+0x5e0>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	689b      	ldr	r3, [r3, #8]
 8009eee:	2b05      	cmp	r3, #5
 8009ef0:	d10c      	bne.n	8009f0c <HAL_RCC_OscConfig+0x5c8>
 8009ef2:	4b6f      	ldr	r3, [pc, #444]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009ef6:	4a6e      	ldr	r2, [pc, #440]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009ef8:	f043 0304 	orr.w	r3, r3, #4
 8009efc:	6713      	str	r3, [r2, #112]	; 0x70
 8009efe:	4b6c      	ldr	r3, [pc, #432]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f02:	4a6b      	ldr	r2, [pc, #428]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009f04:	f043 0301 	orr.w	r3, r3, #1
 8009f08:	6713      	str	r3, [r2, #112]	; 0x70
 8009f0a:	e00b      	b.n	8009f24 <HAL_RCC_OscConfig+0x5e0>
 8009f0c:	4b68      	ldr	r3, [pc, #416]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f10:	4a67      	ldr	r2, [pc, #412]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009f12:	f023 0301 	bic.w	r3, r3, #1
 8009f16:	6713      	str	r3, [r2, #112]	; 0x70
 8009f18:	4b65      	ldr	r3, [pc, #404]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f1c:	4a64      	ldr	r2, [pc, #400]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009f1e:	f023 0304 	bic.w	r3, r3, #4
 8009f22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	689b      	ldr	r3, [r3, #8]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d015      	beq.n	8009f58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f2c:	f7f9 fd7e 	bl	8003a2c <HAL_GetTick>
 8009f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f32:	e00a      	b.n	8009f4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f34:	f7f9 fd7a 	bl	8003a2c <HAL_GetTick>
 8009f38:	4602      	mov	r2, r0
 8009f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f3c:	1ad3      	subs	r3, r2, r3
 8009f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f42:	4293      	cmp	r3, r2
 8009f44:	d901      	bls.n	8009f4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009f46:	2303      	movs	r3, #3
 8009f48:	e14e      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009f4a:	4b59      	ldr	r3, [pc, #356]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f4e:	f003 0302 	and.w	r3, r3, #2
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d0ee      	beq.n	8009f34 <HAL_RCC_OscConfig+0x5f0>
 8009f56:	e014      	b.n	8009f82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009f58:	f7f9 fd68 	bl	8003a2c <HAL_GetTick>
 8009f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f5e:	e00a      	b.n	8009f76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009f60:	f7f9 fd64 	bl	8003a2c <HAL_GetTick>
 8009f64:	4602      	mov	r2, r0
 8009f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f68:	1ad3      	subs	r3, r2, r3
 8009f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d901      	bls.n	8009f76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e138      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009f76:	4b4e      	ldr	r3, [pc, #312]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f7a:	f003 0302 	and.w	r3, r3, #2
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1ee      	bne.n	8009f60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	f000 812d 	beq.w	800a1e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009f8c:	4b48      	ldr	r3, [pc, #288]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f94:	2b18      	cmp	r3, #24
 8009f96:	f000 80bd 	beq.w	800a114 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f9e:	2b02      	cmp	r3, #2
 8009fa0:	f040 809e 	bne.w	800a0e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009fa4:	4b42      	ldr	r3, [pc, #264]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a41      	ldr	r2, [pc, #260]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009fb0:	f7f9 fd3c 	bl	8003a2c <HAL_GetTick>
 8009fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fb6:	e008      	b.n	8009fca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009fb8:	f7f9 fd38 	bl	8003a2c <HAL_GetTick>
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fc0:	1ad3      	subs	r3, r2, r3
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d901      	bls.n	8009fca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e10e      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009fca:	4b39      	ldr	r3, [pc, #228]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1f0      	bne.n	8009fb8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009fd6:	4b36      	ldr	r3, [pc, #216]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009fda:	4b37      	ldr	r3, [pc, #220]	; (800a0b8 <HAL_RCC_OscConfig+0x774>)
 8009fdc:	4013      	ands	r3, r2
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009fe6:	0112      	lsls	r2, r2, #4
 8009fe8:	430a      	orrs	r2, r1
 8009fea:	4931      	ldr	r1, [pc, #196]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 8009fec:	4313      	orrs	r3, r2
 8009fee:	628b      	str	r3, [r1, #40]	; 0x28
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ff4:	3b01      	subs	r3, #1
 8009ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ffe:	3b01      	subs	r3, #1
 800a000:	025b      	lsls	r3, r3, #9
 800a002:	b29b      	uxth	r3, r3
 800a004:	431a      	orrs	r2, r3
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00a:	3b01      	subs	r3, #1
 800a00c:	041b      	lsls	r3, r3, #16
 800a00e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a012:	431a      	orrs	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a018:	3b01      	subs	r3, #1
 800a01a:	061b      	lsls	r3, r3, #24
 800a01c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a020:	4923      	ldr	r1, [pc, #140]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a022:	4313      	orrs	r3, r2
 800a024:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a026:	4b22      	ldr	r3, [pc, #136]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a02a:	4a21      	ldr	r2, [pc, #132]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a02c:	f023 0301 	bic.w	r3, r3, #1
 800a030:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a032:	4b1f      	ldr	r3, [pc, #124]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a036:	4b21      	ldr	r3, [pc, #132]	; (800a0bc <HAL_RCC_OscConfig+0x778>)
 800a038:	4013      	ands	r3, r2
 800a03a:	687a      	ldr	r2, [r7, #4]
 800a03c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a03e:	00d2      	lsls	r2, r2, #3
 800a040:	491b      	ldr	r1, [pc, #108]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a042:	4313      	orrs	r3, r2
 800a044:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a046:	4b1a      	ldr	r3, [pc, #104]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a04a:	f023 020c 	bic.w	r2, r3, #12
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	4917      	ldr	r1, [pc, #92]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a054:	4313      	orrs	r3, r2
 800a056:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a058:	4b15      	ldr	r3, [pc, #84]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a05a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a05c:	f023 0202 	bic.w	r2, r3, #2
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a064:	4912      	ldr	r1, [pc, #72]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a066:	4313      	orrs	r3, r2
 800a068:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a06a:	4b11      	ldr	r3, [pc, #68]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a06c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a06e:	4a10      	ldr	r2, [pc, #64]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a074:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a076:	4b0e      	ldr	r3, [pc, #56]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a07a:	4a0d      	ldr	r2, [pc, #52]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a07c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a080:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a082:	4b0b      	ldr	r3, [pc, #44]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a086:	4a0a      	ldr	r2, [pc, #40]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a08c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a08e:	4b08      	ldr	r3, [pc, #32]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a092:	4a07      	ldr	r2, [pc, #28]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a094:	f043 0301 	orr.w	r3, r3, #1
 800a098:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a09a:	4b05      	ldr	r3, [pc, #20]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	4a04      	ldr	r2, [pc, #16]	; (800a0b0 <HAL_RCC_OscConfig+0x76c>)
 800a0a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a0a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0a6:	f7f9 fcc1 	bl	8003a2c <HAL_GetTick>
 800a0aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0ac:	e011      	b.n	800a0d2 <HAL_RCC_OscConfig+0x78e>
 800a0ae:	bf00      	nop
 800a0b0:	58024400 	.word	0x58024400
 800a0b4:	58024800 	.word	0x58024800
 800a0b8:	fffffc0c 	.word	0xfffffc0c
 800a0bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0c0:	f7f9 fcb4 	bl	8003a2c <HAL_GetTick>
 800a0c4:	4602      	mov	r2, r0
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	1ad3      	subs	r3, r2, r3
 800a0ca:	2b02      	cmp	r3, #2
 800a0cc:	d901      	bls.n	800a0d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a0ce:	2303      	movs	r3, #3
 800a0d0:	e08a      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a0d2:	4b47      	ldr	r3, [pc, #284]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a0d4:	681b      	ldr	r3, [r3, #0]
 800a0d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0f0      	beq.n	800a0c0 <HAL_RCC_OscConfig+0x77c>
 800a0de:	e082      	b.n	800a1e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a0e0:	4b43      	ldr	r3, [pc, #268]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a42      	ldr	r2, [pc, #264]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a0e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a0ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0ec:	f7f9 fc9e 	bl	8003a2c <HAL_GetTick>
 800a0f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a0f2:	e008      	b.n	800a106 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a0f4:	f7f9 fc9a 	bl	8003a2c <HAL_GetTick>
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	1ad3      	subs	r3, r2, r3
 800a0fe:	2b02      	cmp	r3, #2
 800a100:	d901      	bls.n	800a106 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a102:	2303      	movs	r3, #3
 800a104:	e070      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a106:	4b3a      	ldr	r3, [pc, #232]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d1f0      	bne.n	800a0f4 <HAL_RCC_OscConfig+0x7b0>
 800a112:	e068      	b.n	800a1e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a114:	4b36      	ldr	r3, [pc, #216]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a118:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a11a:	4b35      	ldr	r3, [pc, #212]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a11c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a11e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a124:	2b01      	cmp	r3, #1
 800a126:	d031      	beq.n	800a18c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	f003 0203 	and.w	r2, r3, #3
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a132:	429a      	cmp	r2, r3
 800a134:	d12a      	bne.n	800a18c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a136:	693b      	ldr	r3, [r7, #16]
 800a138:	091b      	lsrs	r3, r3, #4
 800a13a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a142:	429a      	cmp	r2, r3
 800a144:	d122      	bne.n	800a18c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a150:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a152:	429a      	cmp	r2, r3
 800a154:	d11a      	bne.n	800a18c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	0a5b      	lsrs	r3, r3, #9
 800a15a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a162:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a164:	429a      	cmp	r2, r3
 800a166:	d111      	bne.n	800a18c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	0c1b      	lsrs	r3, r3, #16
 800a16c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a174:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a176:	429a      	cmp	r2, r3
 800a178:	d108      	bne.n	800a18c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	0e1b      	lsrs	r3, r3, #24
 800a17e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a186:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a188:	429a      	cmp	r2, r3
 800a18a:	d001      	beq.n	800a190 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a18c:	2301      	movs	r3, #1
 800a18e:	e02b      	b.n	800a1e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a190:	4b17      	ldr	r3, [pc, #92]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a194:	08db      	lsrs	r3, r3, #3
 800a196:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a19a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1a0:	693a      	ldr	r2, [r7, #16]
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d01f      	beq.n	800a1e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a1a6:	4b12      	ldr	r3, [pc, #72]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1aa:	4a11      	ldr	r2, [pc, #68]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a1ac:	f023 0301 	bic.w	r3, r3, #1
 800a1b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a1b2:	f7f9 fc3b 	bl	8003a2c <HAL_GetTick>
 800a1b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a1b8:	bf00      	nop
 800a1ba:	f7f9 fc37 	bl	8003a2c <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d0f9      	beq.n	800a1ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a1c6:	4b0a      	ldr	r3, [pc, #40]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a1c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1ca:	4b0a      	ldr	r3, [pc, #40]	; (800a1f4 <HAL_RCC_OscConfig+0x8b0>)
 800a1cc:	4013      	ands	r3, r2
 800a1ce:	687a      	ldr	r2, [r7, #4]
 800a1d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a1d2:	00d2      	lsls	r2, r2, #3
 800a1d4:	4906      	ldr	r1, [pc, #24]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a1d6:	4313      	orrs	r3, r2
 800a1d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a1da:	4b05      	ldr	r3, [pc, #20]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1de:	4a04      	ldr	r2, [pc, #16]	; (800a1f0 <HAL_RCC_OscConfig+0x8ac>)
 800a1e0:	f043 0301 	orr.w	r3, r3, #1
 800a1e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a1e6:	2300      	movs	r3, #0
}
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	3730      	adds	r7, #48	; 0x30
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	bd80      	pop	{r7, pc}
 800a1f0:	58024400 	.word	0x58024400
 800a1f4:	ffff0007 	.word	0xffff0007

0800a1f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d101      	bne.n	800a20c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a208:	2301      	movs	r3, #1
 800a20a:	e19c      	b.n	800a546 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a20c:	4b8a      	ldr	r3, [pc, #552]	; (800a438 <HAL_RCC_ClockConfig+0x240>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 030f 	and.w	r3, r3, #15
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	429a      	cmp	r2, r3
 800a218:	d910      	bls.n	800a23c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a21a:	4b87      	ldr	r3, [pc, #540]	; (800a438 <HAL_RCC_ClockConfig+0x240>)
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	f023 020f 	bic.w	r2, r3, #15
 800a222:	4985      	ldr	r1, [pc, #532]	; (800a438 <HAL_RCC_ClockConfig+0x240>)
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	4313      	orrs	r3, r2
 800a228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a22a:	4b83      	ldr	r3, [pc, #524]	; (800a438 <HAL_RCC_ClockConfig+0x240>)
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	f003 030f 	and.w	r3, r3, #15
 800a232:	683a      	ldr	r2, [r7, #0]
 800a234:	429a      	cmp	r2, r3
 800a236:	d001      	beq.n	800a23c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a238:	2301      	movs	r3, #1
 800a23a:	e184      	b.n	800a546 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0304 	and.w	r3, r3, #4
 800a244:	2b00      	cmp	r3, #0
 800a246:	d010      	beq.n	800a26a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	691a      	ldr	r2, [r3, #16]
 800a24c:	4b7b      	ldr	r3, [pc, #492]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a24e:	699b      	ldr	r3, [r3, #24]
 800a250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a254:	429a      	cmp	r2, r3
 800a256:	d908      	bls.n	800a26a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a258:	4b78      	ldr	r3, [pc, #480]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a25a:	699b      	ldr	r3, [r3, #24]
 800a25c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	691b      	ldr	r3, [r3, #16]
 800a264:	4975      	ldr	r1, [pc, #468]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a266:	4313      	orrs	r3, r2
 800a268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f003 0308 	and.w	r3, r3, #8
 800a272:	2b00      	cmp	r3, #0
 800a274:	d010      	beq.n	800a298 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	695a      	ldr	r2, [r3, #20]
 800a27a:	4b70      	ldr	r3, [pc, #448]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a282:	429a      	cmp	r2, r3
 800a284:	d908      	bls.n	800a298 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a286:	4b6d      	ldr	r3, [pc, #436]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	695b      	ldr	r3, [r3, #20]
 800a292:	496a      	ldr	r1, [pc, #424]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a294:	4313      	orrs	r3, r2
 800a296:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f003 0310 	and.w	r3, r3, #16
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d010      	beq.n	800a2c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	699a      	ldr	r2, [r3, #24]
 800a2a8:	4b64      	ldr	r3, [pc, #400]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a2aa:	69db      	ldr	r3, [r3, #28]
 800a2ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2b0:	429a      	cmp	r2, r3
 800a2b2:	d908      	bls.n	800a2c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2b4:	4b61      	ldr	r3, [pc, #388]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a2b6:	69db      	ldr	r3, [r3, #28]
 800a2b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	699b      	ldr	r3, [r3, #24]
 800a2c0:	495e      	ldr	r1, [pc, #376]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0320 	and.w	r3, r3, #32
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d010      	beq.n	800a2f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	69da      	ldr	r2, [r3, #28]
 800a2d6:	4b59      	ldr	r3, [pc, #356]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d908      	bls.n	800a2f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a2e2:	4b56      	ldr	r3, [pc, #344]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a2e4:	6a1b      	ldr	r3, [r3, #32]
 800a2e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	69db      	ldr	r3, [r3, #28]
 800a2ee:	4953      	ldr	r1, [pc, #332]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a2f0:	4313      	orrs	r3, r2
 800a2f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f003 0302 	and.w	r3, r3, #2
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d010      	beq.n	800a322 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	68da      	ldr	r2, [r3, #12]
 800a304:	4b4d      	ldr	r3, [pc, #308]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a306:	699b      	ldr	r3, [r3, #24]
 800a308:	f003 030f 	and.w	r3, r3, #15
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d908      	bls.n	800a322 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a310:	4b4a      	ldr	r3, [pc, #296]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	f023 020f 	bic.w	r2, r3, #15
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	4947      	ldr	r1, [pc, #284]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a31e:	4313      	orrs	r3, r2
 800a320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f003 0301 	and.w	r3, r3, #1
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d055      	beq.n	800a3da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a32e:	4b43      	ldr	r3, [pc, #268]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	689b      	ldr	r3, [r3, #8]
 800a33a:	4940      	ldr	r1, [pc, #256]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	685b      	ldr	r3, [r3, #4]
 800a344:	2b02      	cmp	r3, #2
 800a346:	d107      	bne.n	800a358 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a348:	4b3c      	ldr	r3, [pc, #240]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a350:	2b00      	cmp	r3, #0
 800a352:	d121      	bne.n	800a398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e0f6      	b.n	800a546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d107      	bne.n	800a370 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a360:	4b36      	ldr	r3, [pc, #216]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d115      	bne.n	800a398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a36c:	2301      	movs	r3, #1
 800a36e:	e0ea      	b.n	800a546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	685b      	ldr	r3, [r3, #4]
 800a374:	2b01      	cmp	r3, #1
 800a376:	d107      	bne.n	800a388 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a378:	4b30      	ldr	r3, [pc, #192]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a380:	2b00      	cmp	r3, #0
 800a382:	d109      	bne.n	800a398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a384:	2301      	movs	r3, #1
 800a386:	e0de      	b.n	800a546 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a388:	4b2c      	ldr	r3, [pc, #176]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 0304 	and.w	r3, r3, #4
 800a390:	2b00      	cmp	r3, #0
 800a392:	d101      	bne.n	800a398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a394:	2301      	movs	r3, #1
 800a396:	e0d6      	b.n	800a546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a398:	4b28      	ldr	r3, [pc, #160]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a39a:	691b      	ldr	r3, [r3, #16]
 800a39c:	f023 0207 	bic.w	r2, r3, #7
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	4925      	ldr	r1, [pc, #148]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a3a6:	4313      	orrs	r3, r2
 800a3a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3aa:	f7f9 fb3f 	bl	8003a2c <HAL_GetTick>
 800a3ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3b0:	e00a      	b.n	800a3c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a3b2:	f7f9 fb3b 	bl	8003a2c <HAL_GetTick>
 800a3b6:	4602      	mov	r2, r0
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	1ad3      	subs	r3, r2, r3
 800a3bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3c0:	4293      	cmp	r3, r2
 800a3c2:	d901      	bls.n	800a3c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a3c4:	2303      	movs	r3, #3
 800a3c6:	e0be      	b.n	800a546 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a3c8:	4b1c      	ldr	r3, [pc, #112]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a3ca:	691b      	ldr	r3, [r3, #16]
 800a3cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	685b      	ldr	r3, [r3, #4]
 800a3d4:	00db      	lsls	r3, r3, #3
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d1eb      	bne.n	800a3b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 0302 	and.w	r3, r3, #2
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d010      	beq.n	800a408 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	68da      	ldr	r2, [r3, #12]
 800a3ea:	4b14      	ldr	r3, [pc, #80]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a3ec:	699b      	ldr	r3, [r3, #24]
 800a3ee:	f003 030f 	and.w	r3, r3, #15
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d208      	bcs.n	800a408 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a3f6:	4b11      	ldr	r3, [pc, #68]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a3f8:	699b      	ldr	r3, [r3, #24]
 800a3fa:	f023 020f 	bic.w	r2, r3, #15
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	490e      	ldr	r1, [pc, #56]	; (800a43c <HAL_RCC_ClockConfig+0x244>)
 800a404:	4313      	orrs	r3, r2
 800a406:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a408:	4b0b      	ldr	r3, [pc, #44]	; (800a438 <HAL_RCC_ClockConfig+0x240>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	f003 030f 	and.w	r3, r3, #15
 800a410:	683a      	ldr	r2, [r7, #0]
 800a412:	429a      	cmp	r2, r3
 800a414:	d214      	bcs.n	800a440 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a416:	4b08      	ldr	r3, [pc, #32]	; (800a438 <HAL_RCC_ClockConfig+0x240>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f023 020f 	bic.w	r2, r3, #15
 800a41e:	4906      	ldr	r1, [pc, #24]	; (800a438 <HAL_RCC_ClockConfig+0x240>)
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	4313      	orrs	r3, r2
 800a424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a426:	4b04      	ldr	r3, [pc, #16]	; (800a438 <HAL_RCC_ClockConfig+0x240>)
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f003 030f 	and.w	r3, r3, #15
 800a42e:	683a      	ldr	r2, [r7, #0]
 800a430:	429a      	cmp	r2, r3
 800a432:	d005      	beq.n	800a440 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a434:	2301      	movs	r3, #1
 800a436:	e086      	b.n	800a546 <HAL_RCC_ClockConfig+0x34e>
 800a438:	52002000 	.word	0x52002000
 800a43c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f003 0304 	and.w	r3, r3, #4
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d010      	beq.n	800a46e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	691a      	ldr	r2, [r3, #16]
 800a450:	4b3f      	ldr	r3, [pc, #252]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a452:	699b      	ldr	r3, [r3, #24]
 800a454:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a458:	429a      	cmp	r2, r3
 800a45a:	d208      	bcs.n	800a46e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a45c:	4b3c      	ldr	r3, [pc, #240]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a45e:	699b      	ldr	r3, [r3, #24]
 800a460:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	691b      	ldr	r3, [r3, #16]
 800a468:	4939      	ldr	r1, [pc, #228]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a46a:	4313      	orrs	r3, r2
 800a46c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	f003 0308 	and.w	r3, r3, #8
 800a476:	2b00      	cmp	r3, #0
 800a478:	d010      	beq.n	800a49c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	695a      	ldr	r2, [r3, #20]
 800a47e:	4b34      	ldr	r3, [pc, #208]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a480:	69db      	ldr	r3, [r3, #28]
 800a482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a486:	429a      	cmp	r2, r3
 800a488:	d208      	bcs.n	800a49c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a48a:	4b31      	ldr	r3, [pc, #196]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a48c:	69db      	ldr	r3, [r3, #28]
 800a48e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	695b      	ldr	r3, [r3, #20]
 800a496:	492e      	ldr	r1, [pc, #184]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a498:	4313      	orrs	r3, r2
 800a49a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f003 0310 	and.w	r3, r3, #16
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d010      	beq.n	800a4ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	699a      	ldr	r2, [r3, #24]
 800a4ac:	4b28      	ldr	r3, [pc, #160]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a4ae:	69db      	ldr	r3, [r3, #28]
 800a4b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a4b4:	429a      	cmp	r2, r3
 800a4b6:	d208      	bcs.n	800a4ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a4b8:	4b25      	ldr	r3, [pc, #148]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a4ba:	69db      	ldr	r3, [r3, #28]
 800a4bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	699b      	ldr	r3, [r3, #24]
 800a4c4:	4922      	ldr	r1, [pc, #136]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	f003 0320 	and.w	r3, r3, #32
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d010      	beq.n	800a4f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	69da      	ldr	r2, [r3, #28]
 800a4da:	4b1d      	ldr	r3, [pc, #116]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d208      	bcs.n	800a4f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a4e6:	4b1a      	ldr	r3, [pc, #104]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a4e8:	6a1b      	ldr	r3, [r3, #32]
 800a4ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	69db      	ldr	r3, [r3, #28]
 800a4f2:	4917      	ldr	r1, [pc, #92]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a4f8:	f000 f834 	bl	800a564 <HAL_RCC_GetSysClockFreq>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	4b14      	ldr	r3, [pc, #80]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a500:	699b      	ldr	r3, [r3, #24]
 800a502:	0a1b      	lsrs	r3, r3, #8
 800a504:	f003 030f 	and.w	r3, r3, #15
 800a508:	4912      	ldr	r1, [pc, #72]	; (800a554 <HAL_RCC_ClockConfig+0x35c>)
 800a50a:	5ccb      	ldrb	r3, [r1, r3]
 800a50c:	f003 031f 	and.w	r3, r3, #31
 800a510:	fa22 f303 	lsr.w	r3, r2, r3
 800a514:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a516:	4b0e      	ldr	r3, [pc, #56]	; (800a550 <HAL_RCC_ClockConfig+0x358>)
 800a518:	699b      	ldr	r3, [r3, #24]
 800a51a:	f003 030f 	and.w	r3, r3, #15
 800a51e:	4a0d      	ldr	r2, [pc, #52]	; (800a554 <HAL_RCC_ClockConfig+0x35c>)
 800a520:	5cd3      	ldrb	r3, [r2, r3]
 800a522:	f003 031f 	and.w	r3, r3, #31
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	fa22 f303 	lsr.w	r3, r2, r3
 800a52c:	4a0a      	ldr	r2, [pc, #40]	; (800a558 <HAL_RCC_ClockConfig+0x360>)
 800a52e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a530:	4a0a      	ldr	r2, [pc, #40]	; (800a55c <HAL_RCC_ClockConfig+0x364>)
 800a532:	693b      	ldr	r3, [r7, #16]
 800a534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a536:	4b0a      	ldr	r3, [pc, #40]	; (800a560 <HAL_RCC_ClockConfig+0x368>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7f8 ffa4 	bl	8003488 <HAL_InitTick>
 800a540:	4603      	mov	r3, r0
 800a542:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a544:	7bfb      	ldrb	r3, [r7, #15]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3718      	adds	r7, #24
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	58024400 	.word	0x58024400
 800a554:	08016e60 	.word	0x08016e60
 800a558:	24000094 	.word	0x24000094
 800a55c:	24000090 	.word	0x24000090
 800a560:	24000098 	.word	0x24000098

0800a564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a564:	b480      	push	{r7}
 800a566:	b089      	sub	sp, #36	; 0x24
 800a568:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a56a:	4bb3      	ldr	r3, [pc, #716]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a56c:	691b      	ldr	r3, [r3, #16]
 800a56e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a572:	2b18      	cmp	r3, #24
 800a574:	f200 8155 	bhi.w	800a822 <HAL_RCC_GetSysClockFreq+0x2be>
 800a578:	a201      	add	r2, pc, #4	; (adr r2, 800a580 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a57a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a57e:	bf00      	nop
 800a580:	0800a5e5 	.word	0x0800a5e5
 800a584:	0800a823 	.word	0x0800a823
 800a588:	0800a823 	.word	0x0800a823
 800a58c:	0800a823 	.word	0x0800a823
 800a590:	0800a823 	.word	0x0800a823
 800a594:	0800a823 	.word	0x0800a823
 800a598:	0800a823 	.word	0x0800a823
 800a59c:	0800a823 	.word	0x0800a823
 800a5a0:	0800a60b 	.word	0x0800a60b
 800a5a4:	0800a823 	.word	0x0800a823
 800a5a8:	0800a823 	.word	0x0800a823
 800a5ac:	0800a823 	.word	0x0800a823
 800a5b0:	0800a823 	.word	0x0800a823
 800a5b4:	0800a823 	.word	0x0800a823
 800a5b8:	0800a823 	.word	0x0800a823
 800a5bc:	0800a823 	.word	0x0800a823
 800a5c0:	0800a611 	.word	0x0800a611
 800a5c4:	0800a823 	.word	0x0800a823
 800a5c8:	0800a823 	.word	0x0800a823
 800a5cc:	0800a823 	.word	0x0800a823
 800a5d0:	0800a823 	.word	0x0800a823
 800a5d4:	0800a823 	.word	0x0800a823
 800a5d8:	0800a823 	.word	0x0800a823
 800a5dc:	0800a823 	.word	0x0800a823
 800a5e0:	0800a617 	.word	0x0800a617
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a5e4:	4b94      	ldr	r3, [pc, #592]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	f003 0320 	and.w	r3, r3, #32
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d009      	beq.n	800a604 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a5f0:	4b91      	ldr	r3, [pc, #580]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	08db      	lsrs	r3, r3, #3
 800a5f6:	f003 0303 	and.w	r3, r3, #3
 800a5fa:	4a90      	ldr	r2, [pc, #576]	; (800a83c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a5fc:	fa22 f303 	lsr.w	r3, r2, r3
 800a600:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a602:	e111      	b.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a604:	4b8d      	ldr	r3, [pc, #564]	; (800a83c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a606:	61bb      	str	r3, [r7, #24]
      break;
 800a608:	e10e      	b.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a60a:	4b8d      	ldr	r3, [pc, #564]	; (800a840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a60c:	61bb      	str	r3, [r7, #24]
      break;
 800a60e:	e10b      	b.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a610:	4b8c      	ldr	r3, [pc, #560]	; (800a844 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a612:	61bb      	str	r3, [r7, #24]
      break;
 800a614:	e108      	b.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a616:	4b88      	ldr	r3, [pc, #544]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a61a:	f003 0303 	and.w	r3, r3, #3
 800a61e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a620:	4b85      	ldr	r3, [pc, #532]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a624:	091b      	lsrs	r3, r3, #4
 800a626:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a62a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a62c:	4b82      	ldr	r3, [pc, #520]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a62e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a636:	4b80      	ldr	r3, [pc, #512]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a63a:	08db      	lsrs	r3, r3, #3
 800a63c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a640:	68fa      	ldr	r2, [r7, #12]
 800a642:	fb02 f303 	mul.w	r3, r2, r3
 800a646:	ee07 3a90 	vmov	s15, r3
 800a64a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a64e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 80e1 	beq.w	800a81c <HAL_RCC_GetSysClockFreq+0x2b8>
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	f000 8083 	beq.w	800a768 <HAL_RCC_GetSysClockFreq+0x204>
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	2b02      	cmp	r3, #2
 800a666:	f200 80a1 	bhi.w	800a7ac <HAL_RCC_GetSysClockFreq+0x248>
 800a66a:	697b      	ldr	r3, [r7, #20]
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d003      	beq.n	800a678 <HAL_RCC_GetSysClockFreq+0x114>
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	2b01      	cmp	r3, #1
 800a674:	d056      	beq.n	800a724 <HAL_RCC_GetSysClockFreq+0x1c0>
 800a676:	e099      	b.n	800a7ac <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a678:	4b6f      	ldr	r3, [pc, #444]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b00      	cmp	r3, #0
 800a682:	d02d      	beq.n	800a6e0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a684:	4b6c      	ldr	r3, [pc, #432]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	08db      	lsrs	r3, r3, #3
 800a68a:	f003 0303 	and.w	r3, r3, #3
 800a68e:	4a6b      	ldr	r2, [pc, #428]	; (800a83c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a690:	fa22 f303 	lsr.w	r3, r2, r3
 800a694:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	ee07 3a90 	vmov	s15, r3
 800a69c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	ee07 3a90 	vmov	s15, r3
 800a6a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6ae:	4b62      	ldr	r3, [pc, #392]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6b6:	ee07 3a90 	vmov	s15, r3
 800a6ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a6be:	ed97 6a02 	vldr	s12, [r7, #8]
 800a6c2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a6c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a6ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a6ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a6d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a6da:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800a6de:	e087      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	ee07 3a90 	vmov	s15, r3
 800a6e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a6ea:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a84c <HAL_RCC_GetSysClockFreq+0x2e8>
 800a6ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a6f2:	4b51      	ldr	r3, [pc, #324]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a6f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a6fa:	ee07 3a90 	vmov	s15, r3
 800a6fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a702:	ed97 6a02 	vldr	s12, [r7, #8]
 800a706:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a70a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a70e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a712:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a716:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a71a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a71e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a722:	e065      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	ee07 3a90 	vmov	s15, r3
 800a72a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a72e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a850 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a732:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a736:	4b40      	ldr	r3, [pc, #256]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a73a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a73e:	ee07 3a90 	vmov	s15, r3
 800a742:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a746:	ed97 6a02 	vldr	s12, [r7, #8]
 800a74a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a74e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a752:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a756:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a75a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a75e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a762:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a766:	e043      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	ee07 3a90 	vmov	s15, r3
 800a76e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a772:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a854 <HAL_RCC_GetSysClockFreq+0x2f0>
 800a776:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a77a:	4b2f      	ldr	r3, [pc, #188]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a782:	ee07 3a90 	vmov	s15, r3
 800a786:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a78a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a78e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a792:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a796:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a79a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a79e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7a6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7aa:	e021      	b.n	800a7f0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a7ac:	693b      	ldr	r3, [r7, #16]
 800a7ae:	ee07 3a90 	vmov	s15, r3
 800a7b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a850 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a7ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7be:	4b1e      	ldr	r3, [pc, #120]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7c6:	ee07 3a90 	vmov	s15, r3
 800a7ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800a7d2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a848 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a7d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a7da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a7de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a7e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a7e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a7ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800a7ee:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a7f0:	4b11      	ldr	r3, [pc, #68]	; (800a838 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a7f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7f4:	0a5b      	lsrs	r3, r3, #9
 800a7f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a7fa:	3301      	adds	r3, #1
 800a7fc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a7fe:	683b      	ldr	r3, [r7, #0]
 800a800:	ee07 3a90 	vmov	s15, r3
 800a804:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a808:	edd7 6a07 	vldr	s13, [r7, #28]
 800a80c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a814:	ee17 3a90 	vmov	r3, s15
 800a818:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800a81a:	e005      	b.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	61bb      	str	r3, [r7, #24]
      break;
 800a820:	e002      	b.n	800a828 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800a822:	4b07      	ldr	r3, [pc, #28]	; (800a840 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a824:	61bb      	str	r3, [r7, #24]
      break;
 800a826:	bf00      	nop
  }

  return sysclockfreq;
 800a828:	69bb      	ldr	r3, [r7, #24]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3724      	adds	r7, #36	; 0x24
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr
 800a836:	bf00      	nop
 800a838:	58024400 	.word	0x58024400
 800a83c:	03d09000 	.word	0x03d09000
 800a840:	003d0900 	.word	0x003d0900
 800a844:	017d7840 	.word	0x017d7840
 800a848:	46000000 	.word	0x46000000
 800a84c:	4c742400 	.word	0x4c742400
 800a850:	4a742400 	.word	0x4a742400
 800a854:	4bbebc20 	.word	0x4bbebc20

0800a858 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a858:	b580      	push	{r7, lr}
 800a85a:	b082      	sub	sp, #8
 800a85c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a85e:	f7ff fe81 	bl	800a564 <HAL_RCC_GetSysClockFreq>
 800a862:	4602      	mov	r2, r0
 800a864:	4b10      	ldr	r3, [pc, #64]	; (800a8a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a866:	699b      	ldr	r3, [r3, #24]
 800a868:	0a1b      	lsrs	r3, r3, #8
 800a86a:	f003 030f 	and.w	r3, r3, #15
 800a86e:	490f      	ldr	r1, [pc, #60]	; (800a8ac <HAL_RCC_GetHCLKFreq+0x54>)
 800a870:	5ccb      	ldrb	r3, [r1, r3]
 800a872:	f003 031f 	and.w	r3, r3, #31
 800a876:	fa22 f303 	lsr.w	r3, r2, r3
 800a87a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a87c:	4b0a      	ldr	r3, [pc, #40]	; (800a8a8 <HAL_RCC_GetHCLKFreq+0x50>)
 800a87e:	699b      	ldr	r3, [r3, #24]
 800a880:	f003 030f 	and.w	r3, r3, #15
 800a884:	4a09      	ldr	r2, [pc, #36]	; (800a8ac <HAL_RCC_GetHCLKFreq+0x54>)
 800a886:	5cd3      	ldrb	r3, [r2, r3]
 800a888:	f003 031f 	and.w	r3, r3, #31
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	fa22 f303 	lsr.w	r3, r2, r3
 800a892:	4a07      	ldr	r2, [pc, #28]	; (800a8b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a894:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a896:	4a07      	ldr	r2, [pc, #28]	; (800a8b4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a89c:	4b04      	ldr	r3, [pc, #16]	; (800a8b0 <HAL_RCC_GetHCLKFreq+0x58>)
 800a89e:	681b      	ldr	r3, [r3, #0]
}
 800a8a0:	4618      	mov	r0, r3
 800a8a2:	3708      	adds	r7, #8
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	bd80      	pop	{r7, pc}
 800a8a8:	58024400 	.word	0x58024400
 800a8ac:	08016e60 	.word	0x08016e60
 800a8b0:	24000094 	.word	0x24000094
 800a8b4:	24000090 	.word	0x24000090

0800a8b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a8b8:	b580      	push	{r7, lr}
 800a8ba:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a8bc:	f7ff ffcc 	bl	800a858 <HAL_RCC_GetHCLKFreq>
 800a8c0:	4602      	mov	r2, r0
 800a8c2:	4b06      	ldr	r3, [pc, #24]	; (800a8dc <HAL_RCC_GetPCLK1Freq+0x24>)
 800a8c4:	69db      	ldr	r3, [r3, #28]
 800a8c6:	091b      	lsrs	r3, r3, #4
 800a8c8:	f003 0307 	and.w	r3, r3, #7
 800a8cc:	4904      	ldr	r1, [pc, #16]	; (800a8e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a8ce:	5ccb      	ldrb	r3, [r1, r3]
 800a8d0:	f003 031f 	and.w	r3, r3, #31
 800a8d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	bd80      	pop	{r7, pc}
 800a8dc:	58024400 	.word	0x58024400
 800a8e0:	08016e60 	.word	0x08016e60

0800a8e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a8e8:	f7ff ffb6 	bl	800a858 <HAL_RCC_GetHCLKFreq>
 800a8ec:	4602      	mov	r2, r0
 800a8ee:	4b06      	ldr	r3, [pc, #24]	; (800a908 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a8f0:	69db      	ldr	r3, [r3, #28]
 800a8f2:	0a1b      	lsrs	r3, r3, #8
 800a8f4:	f003 0307 	and.w	r3, r3, #7
 800a8f8:	4904      	ldr	r1, [pc, #16]	; (800a90c <HAL_RCC_GetPCLK2Freq+0x28>)
 800a8fa:	5ccb      	ldrb	r3, [r1, r3]
 800a8fc:	f003 031f 	and.w	r3, r3, #31
 800a900:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a904:	4618      	mov	r0, r3
 800a906:	bd80      	pop	{r7, pc}
 800a908:	58024400 	.word	0x58024400
 800a90c:	08016e60 	.word	0x08016e60

0800a910 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a910:	b480      	push	{r7}
 800a912:	b083      	sub	sp, #12
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	223f      	movs	r2, #63	; 0x3f
 800a91e:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a920:	4b1a      	ldr	r3, [pc, #104]	; (800a98c <HAL_RCC_GetClockConfig+0x7c>)
 800a922:	691b      	ldr	r3, [r3, #16]
 800a924:	f003 0207 	and.w	r2, r3, #7
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a92c:	4b17      	ldr	r3, [pc, #92]	; (800a98c <HAL_RCC_GetClockConfig+0x7c>)
 800a92e:	699b      	ldr	r3, [r3, #24]
 800a930:	f403 6270 	and.w	r2, r3, #3840	; 0xf00
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a938:	4b14      	ldr	r3, [pc, #80]	; (800a98c <HAL_RCC_GetClockConfig+0x7c>)
 800a93a:	699b      	ldr	r3, [r3, #24]
 800a93c:	f003 020f 	and.w	r2, r3, #15
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a944:	4b11      	ldr	r3, [pc, #68]	; (800a98c <HAL_RCC_GetClockConfig+0x7c>)
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a950:	4b0e      	ldr	r3, [pc, #56]	; (800a98c <HAL_RCC_GetClockConfig+0x7c>)
 800a952:	69db      	ldr	r3, [r3, #28]
 800a954:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a95c:	4b0b      	ldr	r3, [pc, #44]	; (800a98c <HAL_RCC_GetClockConfig+0x7c>)
 800a95e:	69db      	ldr	r3, [r3, #28]
 800a960:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a968:	4b08      	ldr	r3, [pc, #32]	; (800a98c <HAL_RCC_GetClockConfig+0x7c>)
 800a96a:	6a1b      	ldr	r3, [r3, #32]
 800a96c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a974:	4b06      	ldr	r3, [pc, #24]	; (800a990 <HAL_RCC_GetClockConfig+0x80>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f003 020f 	and.w	r2, r3, #15
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	601a      	str	r2, [r3, #0]
}
 800a980:	bf00      	nop
 800a982:	370c      	adds	r7, #12
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr
 800a98c:	58024400 	.word	0x58024400
 800a990:	52002000 	.word	0x52002000

0800a994 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a994:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a998:	b0ca      	sub	sp, #296	; 0x128
 800a99a:	af00      	add	r7, sp, #0
 800a99c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9b4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800a9b8:	2500      	movs	r5, #0
 800a9ba:	ea54 0305 	orrs.w	r3, r4, r5
 800a9be:	d049      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800a9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9c6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9ca:	d02f      	beq.n	800aa2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800a9cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a9d0:	d828      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a9d2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9d6:	d01a      	beq.n	800aa0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800a9d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a9dc:	d822      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d003      	beq.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a9e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a9e6:	d007      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a9e8:	e01c      	b.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ea:	4bb8      	ldr	r3, [pc, #736]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9ee:	4ab7      	ldr	r2, [pc, #732]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800a9f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800a9f6:	e01a      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9fc:	3308      	adds	r3, #8
 800a9fe:	2102      	movs	r1, #2
 800aa00:	4618      	mov	r0, r3
 800aa02:	f002 fb61 	bl	800d0c8 <RCCEx_PLL2_Config>
 800aa06:	4603      	mov	r3, r0
 800aa08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa0c:	e00f      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aa0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa12:	3328      	adds	r3, #40	; 0x28
 800aa14:	2102      	movs	r1, #2
 800aa16:	4618      	mov	r0, r3
 800aa18:	f002 fc08 	bl	800d22c <RCCEx_PLL3_Config>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aa22:	e004      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aa24:	2301      	movs	r3, #1
 800aa26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aa2a:	e000      	b.n	800aa2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800aa2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aa2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d10a      	bne.n	800aa4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aa36:	4ba5      	ldr	r3, [pc, #660]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800aa3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa44:	4aa1      	ldr	r2, [pc, #644]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa46:	430b      	orrs	r3, r1
 800aa48:	6513      	str	r3, [r2, #80]	; 0x50
 800aa4a:	e003      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aa50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa5c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800aa60:	f04f 0900 	mov.w	r9, #0
 800aa64:	ea58 0309 	orrs.w	r3, r8, r9
 800aa68:	d047      	beq.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800aa6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa70:	2b04      	cmp	r3, #4
 800aa72:	d82a      	bhi.n	800aaca <HAL_RCCEx_PeriphCLKConfig+0x136>
 800aa74:	a201      	add	r2, pc, #4	; (adr r2, 800aa7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800aa76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa7a:	bf00      	nop
 800aa7c:	0800aa91 	.word	0x0800aa91
 800aa80:	0800aa9f 	.word	0x0800aa9f
 800aa84:	0800aab5 	.word	0x0800aab5
 800aa88:	0800aad3 	.word	0x0800aad3
 800aa8c:	0800aad3 	.word	0x0800aad3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa90:	4b8e      	ldr	r3, [pc, #568]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa94:	4a8d      	ldr	r2, [pc, #564]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aa96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aa9c:	e01a      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aa9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaa2:	3308      	adds	r3, #8
 800aaa4:	2100      	movs	r1, #0
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f002 fb0e 	bl	800d0c8 <RCCEx_PLL2_Config>
 800aaac:	4603      	mov	r3, r0
 800aaae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aab2:	e00f      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aab8:	3328      	adds	r3, #40	; 0x28
 800aaba:	2100      	movs	r1, #0
 800aabc:	4618      	mov	r0, r3
 800aabe:	f002 fbb5 	bl	800d22c <RCCEx_PLL3_Config>
 800aac2:	4603      	mov	r3, r0
 800aac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800aac8:	e004      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aaca:	2301      	movs	r3, #1
 800aacc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aad0:	e000      	b.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800aad2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d10a      	bne.n	800aaf2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aadc:	4b7b      	ldr	r3, [pc, #492]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aae0:	f023 0107 	bic.w	r1, r3, #7
 800aae4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aaea:	4a78      	ldr	r2, [pc, #480]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aaec:	430b      	orrs	r3, r1
 800aaee:	6513      	str	r3, [r2, #80]	; 0x50
 800aaf0:	e003      	b.n	800aafa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aaf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aaf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aafa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aafe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab02:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ab06:	f04f 0b00 	mov.w	fp, #0
 800ab0a:	ea5a 030b 	orrs.w	r3, sl, fp
 800ab0e:	d04c      	beq.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ab10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab1a:	d030      	beq.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ab1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab20:	d829      	bhi.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab22:	2bc0      	cmp	r3, #192	; 0xc0
 800ab24:	d02d      	beq.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ab26:	2bc0      	cmp	r3, #192	; 0xc0
 800ab28:	d825      	bhi.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab2a:	2b80      	cmp	r3, #128	; 0x80
 800ab2c:	d018      	beq.n	800ab60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800ab2e:	2b80      	cmp	r3, #128	; 0x80
 800ab30:	d821      	bhi.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d002      	beq.n	800ab3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800ab36:	2b40      	cmp	r3, #64	; 0x40
 800ab38:	d007      	beq.n	800ab4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800ab3a:	e01c      	b.n	800ab76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab3c:	4b63      	ldr	r3, [pc, #396]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab40:	4a62      	ldr	r2, [pc, #392]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ab46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab48:	e01c      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab4e:	3308      	adds	r3, #8
 800ab50:	2100      	movs	r1, #0
 800ab52:	4618      	mov	r0, r3
 800ab54:	f002 fab8 	bl	800d0c8 <RCCEx_PLL2_Config>
 800ab58:	4603      	mov	r3, r0
 800ab5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab5e:	e011      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab64:	3328      	adds	r3, #40	; 0x28
 800ab66:	2100      	movs	r1, #0
 800ab68:	4618      	mov	r0, r3
 800ab6a:	f002 fb5f 	bl	800d22c <RCCEx_PLL3_Config>
 800ab6e:	4603      	mov	r3, r0
 800ab70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ab74:	e006      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ab76:	2301      	movs	r3, #1
 800ab78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ab7c:	e002      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ab7e:	bf00      	nop
 800ab80:	e000      	b.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ab82:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ab84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d10a      	bne.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ab8c:	4b4f      	ldr	r3, [pc, #316]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab90:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800ab94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab9a:	4a4c      	ldr	r2, [pc, #304]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	6513      	str	r3, [r2, #80]	; 0x50
 800aba0:	e003      	b.n	800abaa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aba2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aba6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800abaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abb2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800abb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800abba:	2300      	movs	r3, #0
 800abbc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800abc0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800abc4:	460b      	mov	r3, r1
 800abc6:	4313      	orrs	r3, r2
 800abc8:	d053      	beq.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800abca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800abd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abd6:	d035      	beq.n	800ac44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800abd8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800abdc:	d82e      	bhi.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800abde:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abe2:	d031      	beq.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800abe4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800abe8:	d828      	bhi.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800abea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abee:	d01a      	beq.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800abf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800abf4:	d822      	bhi.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d003      	beq.n	800ac02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800abfa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800abfe:	d007      	beq.n	800ac10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ac00:	e01c      	b.n	800ac3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac02:	4b32      	ldr	r3, [pc, #200]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac06:	4a31      	ldr	r2, [pc, #196]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac0e:	e01c      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac14:	3308      	adds	r3, #8
 800ac16:	2100      	movs	r1, #0
 800ac18:	4618      	mov	r0, r3
 800ac1a:	f002 fa55 	bl	800d0c8 <RCCEx_PLL2_Config>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ac24:	e011      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac2a:	3328      	adds	r3, #40	; 0x28
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	4618      	mov	r0, r3
 800ac30:	f002 fafc 	bl	800d22c <RCCEx_PLL3_Config>
 800ac34:	4603      	mov	r3, r0
 800ac36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ac3a:	e006      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ac42:	e002      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ac44:	bf00      	nop
 800ac46:	e000      	b.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ac48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ac4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10b      	bne.n	800ac6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ac52:	4b1e      	ldr	r3, [pc, #120]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac56:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800ac5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800ac62:	4a1a      	ldr	r2, [pc, #104]	; (800accc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ac64:	430b      	orrs	r3, r1
 800ac66:	6593      	str	r3, [r2, #88]	; 0x58
 800ac68:	e003      	b.n	800ac72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800ac72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800ac7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800ac82:	2300      	movs	r3, #0
 800ac84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800ac88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	4313      	orrs	r3, r2
 800ac90:	d056      	beq.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800ac92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ac96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ac9e:	d038      	beq.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800aca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800aca4:	d831      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800aca6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acaa:	d034      	beq.n	800ad16 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800acac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800acb0:	d82b      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acb6:	d01d      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800acb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800acbc:	d825      	bhi.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d006      	beq.n	800acd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800acc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800acc6:	d00a      	beq.n	800acde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800acc8:	e01f      	b.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800acca:	bf00      	nop
 800accc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800acd0:	4ba2      	ldr	r3, [pc, #648]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acd4:	4aa1      	ldr	r2, [pc, #644]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800acd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800acda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800acdc:	e01c      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800acde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ace2:	3308      	adds	r3, #8
 800ace4:	2100      	movs	r1, #0
 800ace6:	4618      	mov	r0, r3
 800ace8:	f002 f9ee 	bl	800d0c8 <RCCEx_PLL2_Config>
 800acec:	4603      	mov	r3, r0
 800acee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800acf2:	e011      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800acf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf8:	3328      	adds	r3, #40	; 0x28
 800acfa:	2100      	movs	r1, #0
 800acfc:	4618      	mov	r0, r3
 800acfe:	f002 fa95 	bl	800d22c <RCCEx_PLL3_Config>
 800ad02:	4603      	mov	r3, r0
 800ad04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ad08:	e006      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad10:	e002      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ad12:	bf00      	nop
 800ad14:	e000      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800ad16:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ad18:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d10b      	bne.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800ad20:	4b8e      	ldr	r3, [pc, #568]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad24:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800ad28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad2c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ad30:	4a8a      	ldr	r2, [pc, #552]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad32:	430b      	orrs	r3, r1
 800ad34:	6593      	str	r3, [r2, #88]	; 0x58
 800ad36:	e003      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ad3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ad40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad48:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800ad4c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ad50:	2300      	movs	r3, #0
 800ad52:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800ad56:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4313      	orrs	r3, r2
 800ad5e:	d03a      	beq.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800ad60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad66:	2b30      	cmp	r3, #48	; 0x30
 800ad68:	d01f      	beq.n	800adaa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800ad6a:	2b30      	cmp	r3, #48	; 0x30
 800ad6c:	d819      	bhi.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ad6e:	2b20      	cmp	r3, #32
 800ad70:	d00c      	beq.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	d815      	bhi.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d019      	beq.n	800adae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ad7a:	2b10      	cmp	r3, #16
 800ad7c:	d111      	bne.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad7e:	4b77      	ldr	r3, [pc, #476]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad82:	4a76      	ldr	r2, [pc, #472]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ad84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ad8a:	e011      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad90:	3308      	adds	r3, #8
 800ad92:	2102      	movs	r1, #2
 800ad94:	4618      	mov	r0, r3
 800ad96:	f002 f997 	bl	800d0c8 <RCCEx_PLL2_Config>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800ada0:	e006      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800ada2:	2301      	movs	r3, #1
 800ada4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ada8:	e002      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800adaa:	bf00      	nop
 800adac:	e000      	b.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800adae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800adb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10a      	bne.n	800adce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800adb8:	4b68      	ldr	r3, [pc, #416]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adbc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800adc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adc6:	4a65      	ldr	r2, [pc, #404]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800adc8:	430b      	orrs	r3, r1
 800adca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800adcc:	e003      	b.n	800add6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800add2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800add6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adde:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800ade2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800ade6:	2300      	movs	r3, #0
 800ade8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800adec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800adf0:	460b      	mov	r3, r1
 800adf2:	4313      	orrs	r3, r2
 800adf4:	d051      	beq.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800adf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800adfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae00:	d035      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ae02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae06:	d82e      	bhi.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae0c:	d031      	beq.n	800ae72 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ae0e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae12:	d828      	bhi.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae18:	d01a      	beq.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800ae1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae1e:	d822      	bhi.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d003      	beq.n	800ae2c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800ae24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae28:	d007      	beq.n	800ae3a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800ae2a:	e01c      	b.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae2c:	4b4b      	ldr	r3, [pc, #300]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae30:	4a4a      	ldr	r2, [pc, #296]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae36:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae38:	e01c      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae3e:	3308      	adds	r3, #8
 800ae40:	2100      	movs	r1, #0
 800ae42:	4618      	mov	r0, r3
 800ae44:	f002 f940 	bl	800d0c8 <RCCEx_PLL2_Config>
 800ae48:	4603      	mov	r3, r0
 800ae4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae4e:	e011      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae54:	3328      	adds	r3, #40	; 0x28
 800ae56:	2100      	movs	r1, #0
 800ae58:	4618      	mov	r0, r3
 800ae5a:	f002 f9e7 	bl	800d22c <RCCEx_PLL3_Config>
 800ae5e:	4603      	mov	r3, r0
 800ae60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800ae64:	e006      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae66:	2301      	movs	r3, #1
 800ae68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae6c:	e002      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ae6e:	bf00      	nop
 800ae70:	e000      	b.n	800ae74 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800ae72:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae74:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d10a      	bne.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ae7c:	4b37      	ldr	r3, [pc, #220]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae80:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800ae84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae8a:	4a34      	ldr	r2, [pc, #208]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800ae8c:	430b      	orrs	r3, r1
 800ae8e:	6513      	str	r3, [r2, #80]	; 0x50
 800ae90:	e003      	b.n	800ae9a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ae9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aea2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800aea6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800aeaa:	2300      	movs	r3, #0
 800aeac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800aeb0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800aeb4:	460b      	mov	r3, r1
 800aeb6:	4313      	orrs	r3, r2
 800aeb8:	d056      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800aeba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aebe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aec4:	d033      	beq.n	800af2e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800aec6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aeca:	d82c      	bhi.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aecc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aed0:	d02f      	beq.n	800af32 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800aed2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aed6:	d826      	bhi.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aed8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aedc:	d02b      	beq.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800aede:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aee2:	d820      	bhi.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aee8:	d012      	beq.n	800af10 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800aeea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aeee:	d81a      	bhi.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d022      	beq.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800aef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef8:	d115      	bne.n	800af26 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aefa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aefe:	3308      	adds	r3, #8
 800af00:	2101      	movs	r1, #1
 800af02:	4618      	mov	r0, r3
 800af04:	f002 f8e0 	bl	800d0c8 <RCCEx_PLL2_Config>
 800af08:	4603      	mov	r3, r0
 800af0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af0e:	e015      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800af10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af14:	3328      	adds	r3, #40	; 0x28
 800af16:	2101      	movs	r1, #1
 800af18:	4618      	mov	r0, r3
 800af1a:	f002 f987 	bl	800d22c <RCCEx_PLL3_Config>
 800af1e:	4603      	mov	r3, r0
 800af20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800af24:	e00a      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800af26:	2301      	movs	r3, #1
 800af28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800af2c:	e006      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af2e:	bf00      	nop
 800af30:	e004      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af32:	bf00      	nop
 800af34:	e002      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af36:	bf00      	nop
 800af38:	e000      	b.n	800af3c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800af3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800af3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10d      	bne.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800af44:	4b05      	ldr	r3, [pc, #20]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af48:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800af4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af52:	4a02      	ldr	r2, [pc, #8]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800af54:	430b      	orrs	r3, r1
 800af56:	6513      	str	r3, [r2, #80]	; 0x50
 800af58:	e006      	b.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800af5a:	bf00      	nop
 800af5c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af64:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800af68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af70:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800af74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800af78:	2300      	movs	r3, #0
 800af7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800af7e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800af82:	460b      	mov	r3, r1
 800af84:	4313      	orrs	r3, r2
 800af86:	d055      	beq.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800af88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800af90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af94:	d033      	beq.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800af96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800af9a:	d82c      	bhi.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800af9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afa0:	d02f      	beq.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800afa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afa6:	d826      	bhi.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afac:	d02b      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800afae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afb2:	d820      	bhi.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afb8:	d012      	beq.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800afba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afbe:	d81a      	bhi.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d022      	beq.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800afc4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afc8:	d115      	bne.n	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afce:	3308      	adds	r3, #8
 800afd0:	2101      	movs	r1, #1
 800afd2:	4618      	mov	r0, r3
 800afd4:	f002 f878 	bl	800d0c8 <RCCEx_PLL2_Config>
 800afd8:	4603      	mov	r3, r0
 800afda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800afde:	e015      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afe4:	3328      	adds	r3, #40	; 0x28
 800afe6:	2101      	movs	r1, #1
 800afe8:	4618      	mov	r0, r3
 800afea:	f002 f91f 	bl	800d22c <RCCEx_PLL3_Config>
 800afee:	4603      	mov	r3, r0
 800aff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800aff4:	e00a      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800aff6:	2301      	movs	r3, #1
 800aff8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800affc:	e006      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800affe:	bf00      	nop
 800b000:	e004      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b002:	bf00      	nop
 800b004:	e002      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b006:	bf00      	nop
 800b008:	e000      	b.n	800b00c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b00a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b00c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b010:	2b00      	cmp	r3, #0
 800b012:	d10b      	bne.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b014:	4ba3      	ldr	r3, [pc, #652]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b016:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b018:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b01c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b020:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b024:	4a9f      	ldr	r2, [pc, #636]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b026:	430b      	orrs	r3, r1
 800b028:	6593      	str	r3, [r2, #88]	; 0x58
 800b02a:	e003      	b.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b02c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b030:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b040:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b044:	2300      	movs	r3, #0
 800b046:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b04a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b04e:	460b      	mov	r3, r1
 800b050:	4313      	orrs	r3, r2
 800b052:	d037      	beq.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b05a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b05e:	d00e      	beq.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b064:	d816      	bhi.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b066:	2b00      	cmp	r3, #0
 800b068:	d018      	beq.n	800b09c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b06a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b06e:	d111      	bne.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b070:	4b8c      	ldr	r3, [pc, #560]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b074:	4a8b      	ldr	r2, [pc, #556]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b07a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b07c:	e00f      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b082:	3308      	adds	r3, #8
 800b084:	2101      	movs	r1, #1
 800b086:	4618      	mov	r0, r3
 800b088:	f002 f81e 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b08c:	4603      	mov	r3, r0
 800b08e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b092:	e004      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b094:	2301      	movs	r3, #1
 800b096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b09a:	e000      	b.n	800b09e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b09c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b09e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d10a      	bne.n	800b0bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b0a6:	4b7f      	ldr	r3, [pc, #508]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b0ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b0b4:	4a7b      	ldr	r2, [pc, #492]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b0b6:	430b      	orrs	r3, r1
 800b0b8:	6513      	str	r3, [r2, #80]	; 0x50
 800b0ba:	e003      	b.n	800b0c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b0d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b0da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b0de:	460b      	mov	r3, r1
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	d039      	beq.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b0ea:	2b03      	cmp	r3, #3
 800b0ec:	d81c      	bhi.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b0ee:	a201      	add	r2, pc, #4	; (adr r2, 800b0f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f4:	0800b131 	.word	0x0800b131
 800b0f8:	0800b105 	.word	0x0800b105
 800b0fc:	0800b113 	.word	0x0800b113
 800b100:	0800b131 	.word	0x0800b131
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b104:	4b67      	ldr	r3, [pc, #412]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b108:	4a66      	ldr	r2, [pc, #408]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b10a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b10e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b110:	e00f      	b.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b116:	3308      	adds	r3, #8
 800b118:	2102      	movs	r1, #2
 800b11a:	4618      	mov	r0, r3
 800b11c:	f001 ffd4 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b120:	4603      	mov	r3, r0
 800b122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b126:	e004      	b.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b12e:	e000      	b.n	800b132 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b130:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b132:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b136:	2b00      	cmp	r3, #0
 800b138:	d10a      	bne.n	800b150 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b13a:	4b5a      	ldr	r3, [pc, #360]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b13c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b13e:	f023 0103 	bic.w	r1, r3, #3
 800b142:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b146:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b148:	4a56      	ldr	r2, [pc, #344]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b14a:	430b      	orrs	r3, r1
 800b14c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b14e:	e003      	b.n	800b158 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b150:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b154:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b158:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b160:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b164:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b168:	2300      	movs	r3, #0
 800b16a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b16e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b172:	460b      	mov	r3, r1
 800b174:	4313      	orrs	r3, r2
 800b176:	f000 809f 	beq.w	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b17a:	4b4b      	ldr	r3, [pc, #300]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4a4a      	ldr	r2, [pc, #296]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b184:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b186:	f7f8 fc51 	bl	8003a2c <HAL_GetTick>
 800b18a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b18e:	e00b      	b.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b190:	f7f8 fc4c 	bl	8003a2c <HAL_GetTick>
 800b194:	4602      	mov	r2, r0
 800b196:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b19a:	1ad3      	subs	r3, r2, r3
 800b19c:	2b64      	cmp	r3, #100	; 0x64
 800b19e:	d903      	bls.n	800b1a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b1a0:	2303      	movs	r3, #3
 800b1a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1a6:	e005      	b.n	800b1b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b1a8:	4b3f      	ldr	r3, [pc, #252]	; (800b2a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d0ed      	beq.n	800b190 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b1b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d179      	bne.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b1bc:	4b39      	ldr	r3, [pc, #228]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b1c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b1c8:	4053      	eors	r3, r2
 800b1ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d015      	beq.n	800b1fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b1d2:	4b34      	ldr	r3, [pc, #208]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b1da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b1de:	4b31      	ldr	r3, [pc, #196]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1e2:	4a30      	ldr	r2, [pc, #192]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b1ea:	4b2e      	ldr	r3, [pc, #184]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b1ee:	4a2d      	ldr	r2, [pc, #180]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b1f6:	4a2b      	ldr	r2, [pc, #172]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b1f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b1fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b1fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b202:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b20a:	d118      	bne.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b20c:	f7f8 fc0e 	bl	8003a2c <HAL_GetTick>
 800b210:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b214:	e00d      	b.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b216:	f7f8 fc09 	bl	8003a2c <HAL_GetTick>
 800b21a:	4602      	mov	r2, r0
 800b21c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b220:	1ad2      	subs	r2, r2, r3
 800b222:	f241 3388 	movw	r3, #5000	; 0x1388
 800b226:	429a      	cmp	r2, r3
 800b228:	d903      	bls.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b230:	e005      	b.n	800b23e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b232:	4b1c      	ldr	r3, [pc, #112]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b236:	f003 0302 	and.w	r3, r3, #2
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0eb      	beq.n	800b216 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b23e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b242:	2b00      	cmp	r3, #0
 800b244:	d129      	bne.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b246:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b24a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b24e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b252:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b256:	d10e      	bne.n	800b276 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b258:	4b12      	ldr	r3, [pc, #72]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b25a:	691b      	ldr	r3, [r3, #16]
 800b25c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b260:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b264:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b268:	091a      	lsrs	r2, r3, #4
 800b26a:	4b10      	ldr	r3, [pc, #64]	; (800b2ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b26c:	4013      	ands	r3, r2
 800b26e:	4a0d      	ldr	r2, [pc, #52]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b270:	430b      	orrs	r3, r1
 800b272:	6113      	str	r3, [r2, #16]
 800b274:	e005      	b.n	800b282 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b276:	4b0b      	ldr	r3, [pc, #44]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b278:	691b      	ldr	r3, [r3, #16]
 800b27a:	4a0a      	ldr	r2, [pc, #40]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b27c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b280:	6113      	str	r3, [r2, #16]
 800b282:	4b08      	ldr	r3, [pc, #32]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b284:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b286:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b28a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b28e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b292:	4a04      	ldr	r2, [pc, #16]	; (800b2a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b294:	430b      	orrs	r3, r1
 800b296:	6713      	str	r3, [r2, #112]	; 0x70
 800b298:	e00e      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b29a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b29e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b2a2:	e009      	b.n	800b2b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b2a4:	58024400 	.word	0x58024400
 800b2a8:	58024800 	.word	0x58024800
 800b2ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b2b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	f002 0301 	and.w	r3, r2, #1
 800b2c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b2ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b2d2:	460b      	mov	r3, r1
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	f000 8089 	beq.w	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b2e0:	2b28      	cmp	r3, #40	; 0x28
 800b2e2:	d86b      	bhi.n	800b3bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b2e4:	a201      	add	r2, pc, #4	; (adr r2, 800b2ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b2e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2ea:	bf00      	nop
 800b2ec:	0800b3c5 	.word	0x0800b3c5
 800b2f0:	0800b3bd 	.word	0x0800b3bd
 800b2f4:	0800b3bd 	.word	0x0800b3bd
 800b2f8:	0800b3bd 	.word	0x0800b3bd
 800b2fc:	0800b3bd 	.word	0x0800b3bd
 800b300:	0800b3bd 	.word	0x0800b3bd
 800b304:	0800b3bd 	.word	0x0800b3bd
 800b308:	0800b3bd 	.word	0x0800b3bd
 800b30c:	0800b391 	.word	0x0800b391
 800b310:	0800b3bd 	.word	0x0800b3bd
 800b314:	0800b3bd 	.word	0x0800b3bd
 800b318:	0800b3bd 	.word	0x0800b3bd
 800b31c:	0800b3bd 	.word	0x0800b3bd
 800b320:	0800b3bd 	.word	0x0800b3bd
 800b324:	0800b3bd 	.word	0x0800b3bd
 800b328:	0800b3bd 	.word	0x0800b3bd
 800b32c:	0800b3a7 	.word	0x0800b3a7
 800b330:	0800b3bd 	.word	0x0800b3bd
 800b334:	0800b3bd 	.word	0x0800b3bd
 800b338:	0800b3bd 	.word	0x0800b3bd
 800b33c:	0800b3bd 	.word	0x0800b3bd
 800b340:	0800b3bd 	.word	0x0800b3bd
 800b344:	0800b3bd 	.word	0x0800b3bd
 800b348:	0800b3bd 	.word	0x0800b3bd
 800b34c:	0800b3c5 	.word	0x0800b3c5
 800b350:	0800b3bd 	.word	0x0800b3bd
 800b354:	0800b3bd 	.word	0x0800b3bd
 800b358:	0800b3bd 	.word	0x0800b3bd
 800b35c:	0800b3bd 	.word	0x0800b3bd
 800b360:	0800b3bd 	.word	0x0800b3bd
 800b364:	0800b3bd 	.word	0x0800b3bd
 800b368:	0800b3bd 	.word	0x0800b3bd
 800b36c:	0800b3c5 	.word	0x0800b3c5
 800b370:	0800b3bd 	.word	0x0800b3bd
 800b374:	0800b3bd 	.word	0x0800b3bd
 800b378:	0800b3bd 	.word	0x0800b3bd
 800b37c:	0800b3bd 	.word	0x0800b3bd
 800b380:	0800b3bd 	.word	0x0800b3bd
 800b384:	0800b3bd 	.word	0x0800b3bd
 800b388:	0800b3bd 	.word	0x0800b3bd
 800b38c:	0800b3c5 	.word	0x0800b3c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b394:	3308      	adds	r3, #8
 800b396:	2101      	movs	r1, #1
 800b398:	4618      	mov	r0, r3
 800b39a:	f001 fe95 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b39e:	4603      	mov	r3, r0
 800b3a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b3a4:	e00f      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3aa:	3328      	adds	r3, #40	; 0x28
 800b3ac:	2101      	movs	r1, #1
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f001 ff3c 	bl	800d22c <RCCEx_PLL3_Config>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b3ba:	e004      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3c2:	e000      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b3c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10a      	bne.n	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b3ce:	4bbf      	ldr	r3, [pc, #764]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b3dc:	4abb      	ldr	r2, [pc, #748]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b3de:	430b      	orrs	r3, r1
 800b3e0:	6553      	str	r3, [r2, #84]	; 0x54
 800b3e2:	e003      	b.n	800b3ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b3ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f4:	f002 0302 	and.w	r3, r2, #2
 800b3f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b402:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b406:	460b      	mov	r3, r1
 800b408:	4313      	orrs	r3, r2
 800b40a:	d041      	beq.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b40c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b410:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b412:	2b05      	cmp	r3, #5
 800b414:	d824      	bhi.n	800b460 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b416:	a201      	add	r2, pc, #4	; (adr r2, 800b41c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b41c:	0800b469 	.word	0x0800b469
 800b420:	0800b435 	.word	0x0800b435
 800b424:	0800b44b 	.word	0x0800b44b
 800b428:	0800b469 	.word	0x0800b469
 800b42c:	0800b469 	.word	0x0800b469
 800b430:	0800b469 	.word	0x0800b469
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b434:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b438:	3308      	adds	r3, #8
 800b43a:	2101      	movs	r1, #1
 800b43c:	4618      	mov	r0, r3
 800b43e:	f001 fe43 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b442:	4603      	mov	r3, r0
 800b444:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b448:	e00f      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b44a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b44e:	3328      	adds	r3, #40	; 0x28
 800b450:	2101      	movs	r1, #1
 800b452:	4618      	mov	r0, r3
 800b454:	f001 feea 	bl	800d22c <RCCEx_PLL3_Config>
 800b458:	4603      	mov	r3, r0
 800b45a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b45e:	e004      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b460:	2301      	movs	r3, #1
 800b462:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b466:	e000      	b.n	800b46a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b468:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b46a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10a      	bne.n	800b488 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b472:	4b96      	ldr	r3, [pc, #600]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b476:	f023 0107 	bic.w	r1, r3, #7
 800b47a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b47e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b480:	4a92      	ldr	r2, [pc, #584]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b482:	430b      	orrs	r3, r1
 800b484:	6553      	str	r3, [r2, #84]	; 0x54
 800b486:	e003      	b.n	800b490 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b488:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b48c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b490:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b494:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b498:	f002 0304 	and.w	r3, r2, #4
 800b49c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b4a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b4aa:	460b      	mov	r3, r1
 800b4ac:	4313      	orrs	r3, r2
 800b4ae:	d044      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b4b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b4b8:	2b05      	cmp	r3, #5
 800b4ba:	d825      	bhi.n	800b508 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b4bc:	a201      	add	r2, pc, #4	; (adr r2, 800b4c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b4be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4c2:	bf00      	nop
 800b4c4:	0800b511 	.word	0x0800b511
 800b4c8:	0800b4dd 	.word	0x0800b4dd
 800b4cc:	0800b4f3 	.word	0x0800b4f3
 800b4d0:	0800b511 	.word	0x0800b511
 800b4d4:	0800b511 	.word	0x0800b511
 800b4d8:	0800b511 	.word	0x0800b511
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	2101      	movs	r1, #1
 800b4e4:	4618      	mov	r0, r3
 800b4e6:	f001 fdef 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b4f0:	e00f      	b.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b4f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4f6:	3328      	adds	r3, #40	; 0x28
 800b4f8:	2101      	movs	r1, #1
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f001 fe96 	bl	800d22c <RCCEx_PLL3_Config>
 800b500:	4603      	mov	r3, r0
 800b502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b506:	e004      	b.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b508:	2301      	movs	r3, #1
 800b50a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b50e:	e000      	b.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b510:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b512:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b516:	2b00      	cmp	r3, #0
 800b518:	d10b      	bne.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b51a:	4b6c      	ldr	r3, [pc, #432]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b51c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b51e:	f023 0107 	bic.w	r1, r3, #7
 800b522:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b52a:	4a68      	ldr	r2, [pc, #416]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b52c:	430b      	orrs	r3, r1
 800b52e:	6593      	str	r3, [r2, #88]	; 0x58
 800b530:	e003      	b.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b532:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b536:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b53a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	f002 0320 	and.w	r3, r2, #32
 800b546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b54a:	2300      	movs	r3, #0
 800b54c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b554:	460b      	mov	r3, r1
 800b556:	4313      	orrs	r3, r2
 800b558:	d055      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b55a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b55e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b562:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b566:	d033      	beq.n	800b5d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b568:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b56c:	d82c      	bhi.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b56e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b572:	d02f      	beq.n	800b5d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b574:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b578:	d826      	bhi.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b57a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b57e:	d02b      	beq.n	800b5d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b580:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b584:	d820      	bhi.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b586:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b58a:	d012      	beq.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b58c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b590:	d81a      	bhi.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b592:	2b00      	cmp	r3, #0
 800b594:	d022      	beq.n	800b5dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b596:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b59a:	d115      	bne.n	800b5c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b59c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5a0:	3308      	adds	r3, #8
 800b5a2:	2100      	movs	r1, #0
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f001 fd8f 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b5b0:	e015      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b5b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5b6:	3328      	adds	r3, #40	; 0x28
 800b5b8:	2102      	movs	r1, #2
 800b5ba:	4618      	mov	r0, r3
 800b5bc:	f001 fe36 	bl	800d22c <RCCEx_PLL3_Config>
 800b5c0:	4603      	mov	r3, r0
 800b5c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b5c6:	e00a      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5ce:	e006      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5d0:	bf00      	nop
 800b5d2:	e004      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5d4:	bf00      	nop
 800b5d6:	e002      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5d8:	bf00      	nop
 800b5da:	e000      	b.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b5dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b5de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d10b      	bne.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b5e6:	4b39      	ldr	r3, [pc, #228]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b5ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b5ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b5f6:	4a35      	ldr	r2, [pc, #212]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b5f8:	430b      	orrs	r3, r1
 800b5fa:	6553      	str	r3, [r2, #84]	; 0x54
 800b5fc:	e003      	b.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b5fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b602:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b606:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b60e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b612:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b616:	2300      	movs	r3, #0
 800b618:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b61c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b620:	460b      	mov	r3, r1
 800b622:	4313      	orrs	r3, r2
 800b624:	d058      	beq.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b626:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b62a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b62e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b632:	d033      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b634:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b638:	d82c      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b63a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b63e:	d02f      	beq.n	800b6a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b644:	d826      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b646:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b64a:	d02b      	beq.n	800b6a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b64c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b650:	d820      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b656:	d012      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b65c:	d81a      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d022      	beq.n	800b6a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b666:	d115      	bne.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b668:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b66c:	3308      	adds	r3, #8
 800b66e:	2100      	movs	r1, #0
 800b670:	4618      	mov	r0, r3
 800b672:	f001 fd29 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b676:	4603      	mov	r3, r0
 800b678:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b67c:	e015      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b682:	3328      	adds	r3, #40	; 0x28
 800b684:	2102      	movs	r1, #2
 800b686:	4618      	mov	r0, r3
 800b688:	f001 fdd0 	bl	800d22c <RCCEx_PLL3_Config>
 800b68c:	4603      	mov	r3, r0
 800b68e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b692:	e00a      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b69a:	e006      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b69c:	bf00      	nop
 800b69e:	e004      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6a0:	bf00      	nop
 800b6a2:	e002      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6a4:	bf00      	nop
 800b6a6:	e000      	b.n	800b6aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800b6a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b6aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d10e      	bne.n	800b6d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b6b2:	4b06      	ldr	r3, [pc, #24]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b6b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800b6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b6c2:	4a02      	ldr	r2, [pc, #8]	; (800b6cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b6c4:	430b      	orrs	r3, r1
 800b6c6:	6593      	str	r3, [r2, #88]	; 0x58
 800b6c8:	e006      	b.n	800b6d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800b6ca:	bf00      	nop
 800b6cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b6d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800b6e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b6ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800b6f2:	460b      	mov	r3, r1
 800b6f4:	4313      	orrs	r3, r2
 800b6f6:	d055      	beq.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b6f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b700:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b704:	d033      	beq.n	800b76e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800b706:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b70a:	d82c      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b70c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b710:	d02f      	beq.n	800b772 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800b712:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b716:	d826      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b718:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b71c:	d02b      	beq.n	800b776 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800b71e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b722:	d820      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b724:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b728:	d012      	beq.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800b72a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b72e:	d81a      	bhi.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800b730:	2b00      	cmp	r3, #0
 800b732:	d022      	beq.n	800b77a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800b734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b738:	d115      	bne.n	800b766 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b73a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b73e:	3308      	adds	r3, #8
 800b740:	2100      	movs	r1, #0
 800b742:	4618      	mov	r0, r3
 800b744:	f001 fcc0 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b748:	4603      	mov	r3, r0
 800b74a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b74e:	e015      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b754:	3328      	adds	r3, #40	; 0x28
 800b756:	2102      	movs	r1, #2
 800b758:	4618      	mov	r0, r3
 800b75a:	f001 fd67 	bl	800d22c <RCCEx_PLL3_Config>
 800b75e:	4603      	mov	r3, r0
 800b760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800b764:	e00a      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b76c:	e006      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b76e:	bf00      	nop
 800b770:	e004      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b772:	bf00      	nop
 800b774:	e002      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b776:	bf00      	nop
 800b778:	e000      	b.n	800b77c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800b77a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b77c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b780:	2b00      	cmp	r3, #0
 800b782:	d10b      	bne.n	800b79c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b784:	4ba1      	ldr	r3, [pc, #644]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b788:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800b78c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b790:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b794:	4a9d      	ldr	r2, [pc, #628]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b796:	430b      	orrs	r3, r1
 800b798:	6593      	str	r3, [r2, #88]	; 0x58
 800b79a:	e003      	b.n	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b79c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b7a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	f002 0308 	and.w	r3, r2, #8
 800b7b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b7ba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800b7be:	460b      	mov	r3, r1
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	d01e      	beq.n	800b802 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b7c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b7d0:	d10c      	bne.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b7d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7d6:	3328      	adds	r3, #40	; 0x28
 800b7d8:	2102      	movs	r1, #2
 800b7da:	4618      	mov	r0, r3
 800b7dc:	f001 fd26 	bl	800d22c <RCCEx_PLL3_Config>
 800b7e0:	4603      	mov	r3, r0
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d002      	beq.n	800b7ec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b7ec:	4b87      	ldr	r3, [pc, #540]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7f0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b7f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b7fc:	4a83      	ldr	r2, [pc, #524]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b7fe:	430b      	orrs	r3, r1
 800b800:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b802:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80a:	f002 0310 	and.w	r3, r2, #16
 800b80e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b812:	2300      	movs	r3, #0
 800b814:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b818:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800b81c:	460b      	mov	r3, r1
 800b81e:	4313      	orrs	r3, r2
 800b820:	d01e      	beq.n	800b860 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b82a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b82e:	d10c      	bne.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b830:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b834:	3328      	adds	r3, #40	; 0x28
 800b836:	2102      	movs	r1, #2
 800b838:	4618      	mov	r0, r3
 800b83a:	f001 fcf7 	bl	800d22c <RCCEx_PLL3_Config>
 800b83e:	4603      	mov	r3, r0
 800b840:	2b00      	cmp	r3, #0
 800b842:	d002      	beq.n	800b84a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b84a:	4b70      	ldr	r3, [pc, #448]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b84c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b84e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b852:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b85a:	4a6c      	ldr	r2, [pc, #432]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b85c:	430b      	orrs	r3, r1
 800b85e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b868:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800b86c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800b870:	2300      	movs	r3, #0
 800b872:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b876:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800b87a:	460b      	mov	r3, r1
 800b87c:	4313      	orrs	r3, r2
 800b87e:	d03e      	beq.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800b880:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b884:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b888:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b88c:	d022      	beq.n	800b8d4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800b88e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b892:	d81b      	bhi.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800b894:	2b00      	cmp	r3, #0
 800b896:	d003      	beq.n	800b8a0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800b898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b89c:	d00b      	beq.n	800b8b6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800b89e:	e015      	b.n	800b8cc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b8a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8a4:	3308      	adds	r3, #8
 800b8a6:	2100      	movs	r1, #0
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	f001 fc0d 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b8ae:	4603      	mov	r3, r0
 800b8b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b8b4:	e00f      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ba:	3328      	adds	r3, #40	; 0x28
 800b8bc:	2102      	movs	r1, #2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f001 fcb4 	bl	800d22c <RCCEx_PLL3_Config>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800b8ca:	e004      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b8d2:	e000      	b.n	800b8d6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800b8d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b8d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d10b      	bne.n	800b8f6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b8de:	4b4b      	ldr	r3, [pc, #300]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8e2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800b8e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b8ee:	4a47      	ldr	r2, [pc, #284]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b8f0:	430b      	orrs	r3, r1
 800b8f2:	6593      	str	r3, [r2, #88]	; 0x58
 800b8f4:	e003      	b.n	800b8fe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b906:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800b90a:	67bb      	str	r3, [r7, #120]	; 0x78
 800b90c:	2300      	movs	r3, #0
 800b90e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800b910:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800b914:	460b      	mov	r3, r1
 800b916:	4313      	orrs	r3, r2
 800b918:	d03b      	beq.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800b91a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b91e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b926:	d01f      	beq.n	800b968 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800b928:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b92c:	d818      	bhi.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800b92e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b932:	d003      	beq.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800b934:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b938:	d007      	beq.n	800b94a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800b93a:	e011      	b.n	800b960 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b93c:	4b33      	ldr	r3, [pc, #204]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b93e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b940:	4a32      	ldr	r2, [pc, #200]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b942:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b946:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800b948:	e00f      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b94e:	3328      	adds	r3, #40	; 0x28
 800b950:	2101      	movs	r1, #1
 800b952:	4618      	mov	r0, r3
 800b954:	f001 fc6a 	bl	800d22c <RCCEx_PLL3_Config>
 800b958:	4603      	mov	r3, r0
 800b95a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800b95e:	e004      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b960:	2301      	movs	r3, #1
 800b962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b966:	e000      	b.n	800b96a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800b968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b96a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d10b      	bne.n	800b98a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b972:	4b26      	ldr	r3, [pc, #152]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b976:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b982:	4a22      	ldr	r2, [pc, #136]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b984:	430b      	orrs	r3, r1
 800b986:	6553      	str	r3, [r2, #84]	; 0x54
 800b988:	e003      	b.n	800b992 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b98a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b98e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b992:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b996:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b99a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800b99e:	673b      	str	r3, [r7, #112]	; 0x70
 800b9a0:	2300      	movs	r3, #0
 800b9a2:	677b      	str	r3, [r7, #116]	; 0x74
 800b9a4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800b9a8:	460b      	mov	r3, r1
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	d034      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800b9ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d003      	beq.n	800b9c0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800b9b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9bc:	d007      	beq.n	800b9ce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800b9be:	e011      	b.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b9c0:	4b12      	ldr	r3, [pc, #72]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c4:	4a11      	ldr	r2, [pc, #68]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b9ca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b9cc:	e00e      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9d2:	3308      	adds	r3, #8
 800b9d4:	2102      	movs	r1, #2
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f001 fb76 	bl	800d0c8 <RCCEx_PLL2_Config>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800b9e2:	e003      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800b9e4:	2301      	movs	r3, #1
 800b9e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d10d      	bne.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b9f4:	4b05      	ldr	r3, [pc, #20]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800b9f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b9fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba02:	4a02      	ldr	r2, [pc, #8]	; (800ba0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800ba04:	430b      	orrs	r3, r1
 800ba06:	64d3      	str	r3, [r2, #76]	; 0x4c
 800ba08:	e006      	b.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800ba0a:	bf00      	nop
 800ba0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800ba18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba20:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800ba24:	66bb      	str	r3, [r7, #104]	; 0x68
 800ba26:	2300      	movs	r3, #0
 800ba28:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ba2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800ba2e:	460b      	mov	r3, r1
 800ba30:	4313      	orrs	r3, r2
 800ba32:	d00c      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ba34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba38:	3328      	adds	r3, #40	; 0x28
 800ba3a:	2102      	movs	r1, #2
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 fbf5 	bl	800d22c <RCCEx_PLL3_Config>
 800ba42:	4603      	mov	r3, r0
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d002      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800ba48:	2301      	movs	r3, #1
 800ba4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ba4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba56:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800ba5a:	663b      	str	r3, [r7, #96]	; 0x60
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	667b      	str	r3, [r7, #100]	; 0x64
 800ba60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800ba64:	460b      	mov	r3, r1
 800ba66:	4313      	orrs	r3, r2
 800ba68:	d038      	beq.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800ba6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba76:	d018      	beq.n	800baaa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800ba78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ba7c:	d811      	bhi.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ba7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba82:	d014      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800ba84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ba88:	d80b      	bhi.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d011      	beq.n	800bab2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800ba8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba92:	d106      	bne.n	800baa2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ba94:	4bc3      	ldr	r3, [pc, #780]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba98:	4ac2      	ldr	r2, [pc, #776]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800ba9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ba9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800baa0:	e008      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800baa2:	2301      	movs	r3, #1
 800baa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800baa8:	e004      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800baaa:	bf00      	nop
 800baac:	e002      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800baae:	bf00      	nop
 800bab0:	e000      	b.n	800bab4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800bab2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bab4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d10b      	bne.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800babc:	4bb9      	ldr	r3, [pc, #740]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800babe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bac0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bacc:	4ab5      	ldr	r2, [pc, #724]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bace:	430b      	orrs	r3, r1
 800bad0:	6553      	str	r3, [r2, #84]	; 0x54
 800bad2:	e003      	b.n	800badc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bad8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800badc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bae4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800bae8:	65bb      	str	r3, [r7, #88]	; 0x58
 800baea:	2300      	movs	r3, #0
 800baec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800baee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800baf2:	460b      	mov	r3, r1
 800baf4:	4313      	orrs	r3, r2
 800baf6:	d009      	beq.n	800bb0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800baf8:	4baa      	ldr	r3, [pc, #680]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bafa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bafc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb06:	4aa7      	ldr	r2, [pc, #668]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb08:	430b      	orrs	r3, r1
 800bb0a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bb0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800bb18:	653b      	str	r3, [r7, #80]	; 0x50
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	657b      	str	r3, [r7, #84]	; 0x54
 800bb1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800bb22:	460b      	mov	r3, r1
 800bb24:	4313      	orrs	r3, r2
 800bb26:	d00a      	beq.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bb28:	4b9e      	ldr	r3, [pc, #632]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb2a:	691b      	ldr	r3, [r3, #16]
 800bb2c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bb30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bb38:	4a9a      	ldr	r2, [pc, #616]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb3a:	430b      	orrs	r3, r1
 800bb3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bb3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb46:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bb4a:	64bb      	str	r3, [r7, #72]	; 0x48
 800bb4c:	2300      	movs	r3, #0
 800bb4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bb50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bb54:	460b      	mov	r3, r1
 800bb56:	4313      	orrs	r3, r2
 800bb58:	d009      	beq.n	800bb6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bb5a:	4b92      	ldr	r3, [pc, #584]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb5e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bb62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bb68:	4a8e      	ldr	r2, [pc, #568]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb6a:	430b      	orrs	r3, r1
 800bb6c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bb6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb76:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800bb7a:	643b      	str	r3, [r7, #64]	; 0x40
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	647b      	str	r3, [r7, #68]	; 0x44
 800bb80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bb84:	460b      	mov	r3, r1
 800bb86:	4313      	orrs	r3, r2
 800bb88:	d00e      	beq.n	800bba8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bb8a:	4b86      	ldr	r3, [pc, #536]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	4a85      	ldr	r2, [pc, #532]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bb94:	6113      	str	r3, [r2, #16]
 800bb96:	4b83      	ldr	r3, [pc, #524]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bb98:	6919      	ldr	r1, [r3, #16]
 800bb9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bba2:	4a80      	ldr	r2, [pc, #512]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bba4:	430b      	orrs	r3, r1
 800bba6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbb0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bbb4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bbb6:	2300      	movs	r3, #0
 800bbb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bbba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bbbe:	460b      	mov	r3, r1
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	d009      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bbc4:	4b77      	ldr	r3, [pc, #476]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbc8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bbcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd2:	4a74      	ldr	r2, [pc, #464]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbd4:	430b      	orrs	r3, r1
 800bbd6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bbd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbe0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bbe4:	633b      	str	r3, [r7, #48]	; 0x30
 800bbe6:	2300      	movs	r3, #0
 800bbe8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	d00a      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bbf4:	4b6b      	ldr	r3, [pc, #428]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bbf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbf8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bbfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bc04:	4a67      	ldr	r2, [pc, #412]	; (800bda4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bc06:	430b      	orrs	r3, r1
 800bc08:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bc0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc12:	2100      	movs	r1, #0
 800bc14:	62b9      	str	r1, [r7, #40]	; 0x28
 800bc16:	f003 0301 	and.w	r3, r3, #1
 800bc1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bc1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bc20:	460b      	mov	r3, r1
 800bc22:	4313      	orrs	r3, r2
 800bc24:	d011      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2a:	3308      	adds	r3, #8
 800bc2c:	2100      	movs	r1, #0
 800bc2e:	4618      	mov	r0, r3
 800bc30:	f001 fa4a 	bl	800d0c8 <RCCEx_PLL2_Config>
 800bc34:	4603      	mov	r3, r0
 800bc36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bc4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc52:	2100      	movs	r1, #0
 800bc54:	6239      	str	r1, [r7, #32]
 800bc56:	f003 0302 	and.w	r3, r3, #2
 800bc5a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bc60:	460b      	mov	r3, r1
 800bc62:	4313      	orrs	r3, r2
 800bc64:	d011      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bc66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6a:	3308      	adds	r3, #8
 800bc6c:	2101      	movs	r1, #1
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f001 fa2a 	bl	800d0c8 <RCCEx_PLL2_Config>
 800bc74:	4603      	mov	r3, r0
 800bc76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bc7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d003      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bc8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc92:	2100      	movs	r1, #0
 800bc94:	61b9      	str	r1, [r7, #24]
 800bc96:	f003 0304 	and.w	r3, r3, #4
 800bc9a:	61fb      	str	r3, [r7, #28]
 800bc9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800bca0:	460b      	mov	r3, r1
 800bca2:	4313      	orrs	r3, r2
 800bca4:	d011      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcaa:	3308      	adds	r3, #8
 800bcac:	2102      	movs	r1, #2
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f001 fa0a 	bl	800d0c8 <RCCEx_PLL2_Config>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bcba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800bcca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd2:	2100      	movs	r1, #0
 800bcd4:	6139      	str	r1, [r7, #16]
 800bcd6:	f003 0308 	and.w	r3, r3, #8
 800bcda:	617b      	str	r3, [r7, #20]
 800bcdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800bce0:	460b      	mov	r3, r1
 800bce2:	4313      	orrs	r3, r2
 800bce4:	d011      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bce6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcea:	3328      	adds	r3, #40	; 0x28
 800bcec:	2100      	movs	r1, #0
 800bcee:	4618      	mov	r0, r3
 800bcf0:	f001 fa9c 	bl	800d22c <RCCEx_PLL3_Config>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800bcfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcfe:	2b00      	cmp	r3, #0
 800bd00:	d003      	beq.n	800bd0a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd02:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd06:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800bd0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd12:	2100      	movs	r1, #0
 800bd14:	60b9      	str	r1, [r7, #8]
 800bd16:	f003 0310 	and.w	r3, r3, #16
 800bd1a:	60fb      	str	r3, [r7, #12]
 800bd1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800bd20:	460b      	mov	r3, r1
 800bd22:	4313      	orrs	r3, r2
 800bd24:	d011      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bd26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd2a:	3328      	adds	r3, #40	; 0x28
 800bd2c:	2101      	movs	r1, #1
 800bd2e:	4618      	mov	r0, r3
 800bd30:	f001 fa7c 	bl	800d22c <RCCEx_PLL3_Config>
 800bd34:	4603      	mov	r3, r0
 800bd36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d003      	beq.n	800bd4a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800bd4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd52:	2100      	movs	r1, #0
 800bd54:	6039      	str	r1, [r7, #0]
 800bd56:	f003 0320 	and.w	r3, r3, #32
 800bd5a:	607b      	str	r3, [r7, #4]
 800bd5c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bd60:	460b      	mov	r3, r1
 800bd62:	4313      	orrs	r3, r2
 800bd64:	d011      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd6a:	3328      	adds	r3, #40	; 0x28
 800bd6c:	2102      	movs	r1, #2
 800bd6e:	4618      	mov	r0, r3
 800bd70:	f001 fa5c 	bl	800d22c <RCCEx_PLL3_Config>
 800bd74:	4603      	mov	r3, r0
 800bd76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bd7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d003      	beq.n	800bd8a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800bd8a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d101      	bne.n	800bd96 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800bd92:	2300      	movs	r3, #0
 800bd94:	e000      	b.n	800bd98 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bda4:	58024400 	.word	0x58024400

0800bda8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b090      	sub	sp, #64	; 0x40
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bdb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdb6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800bdba:	430b      	orrs	r3, r1
 800bdbc:	f040 8094 	bne.w	800bee8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800bdc0:	4b9e      	ldr	r3, [pc, #632]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bdc4:	f003 0307 	and.w	r3, r3, #7
 800bdc8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bdca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdcc:	2b04      	cmp	r3, #4
 800bdce:	f200 8087 	bhi.w	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800bdd2:	a201      	add	r2, pc, #4	; (adr r2, 800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800bdd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd8:	0800bded 	.word	0x0800bded
 800bddc:	0800be15 	.word	0x0800be15
 800bde0:	0800be3d 	.word	0x0800be3d
 800bde4:	0800bed9 	.word	0x0800bed9
 800bde8:	0800be65 	.word	0x0800be65
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bdec:	4b93      	ldr	r3, [pc, #588]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bdf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bdf8:	d108      	bne.n	800be0c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bdfa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdfe:	4618      	mov	r0, r3
 800be00:	f001 f810 	bl	800ce24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be08:	f000 bd45 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be0c:	2300      	movs	r3, #0
 800be0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be10:	f000 bd41 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800be14:	4b89      	ldr	r3, [pc, #548]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800be20:	d108      	bne.n	800be34 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be22:	f107 0318 	add.w	r3, r7, #24
 800be26:	4618      	mov	r0, r3
 800be28:	f000 fd54 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be2c:	69bb      	ldr	r3, [r7, #24]
 800be2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be30:	f000 bd31 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be34:	2300      	movs	r3, #0
 800be36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be38:	f000 bd2d 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800be3c:	4b7f      	ldr	r3, [pc, #508]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800be44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be48:	d108      	bne.n	800be5c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be4a:	f107 030c 	add.w	r3, r7, #12
 800be4e:	4618      	mov	r0, r3
 800be50:	f000 fe94 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800be58:	f000 bd1d 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800be5c:	2300      	movs	r3, #0
 800be5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800be60:	f000 bd19 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800be64:	4b75      	ldr	r3, [pc, #468]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be6c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800be6e:	4b73      	ldr	r3, [pc, #460]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	f003 0304 	and.w	r3, r3, #4
 800be76:	2b04      	cmp	r3, #4
 800be78:	d10c      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800be7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d109      	bne.n	800be94 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800be80:	4b6e      	ldr	r3, [pc, #440]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	08db      	lsrs	r3, r3, #3
 800be86:	f003 0303 	and.w	r3, r3, #3
 800be8a:	4a6d      	ldr	r2, [pc, #436]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be8c:	fa22 f303 	lsr.w	r3, r2, r3
 800be90:	63fb      	str	r3, [r7, #60]	; 0x3c
 800be92:	e01f      	b.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800be94:	4b69      	ldr	r3, [pc, #420]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bea0:	d106      	bne.n	800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800bea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bea4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bea8:	d102      	bne.n	800beb0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800beaa:	4b66      	ldr	r3, [pc, #408]	; (800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800beac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beae:	e011      	b.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800beb0:	4b62      	ldr	r3, [pc, #392]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800beb8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bebc:	d106      	bne.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800bebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bec4:	d102      	bne.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800bec6:	4b60      	ldr	r3, [pc, #384]	; (800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bec8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800beca:	e003      	b.n	800bed4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800becc:	2300      	movs	r3, #0
 800bece:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800bed0:	f000 bce1 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800bed4:	f000 bcdf 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800bed8:	4b5c      	ldr	r3, [pc, #368]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800beda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bedc:	f000 bcdb 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee4:	f000 bcd7 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800beec:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800bef0:	430b      	orrs	r3, r1
 800bef2:	f040 80ad 	bne.w	800c050 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800bef6:	4b51      	ldr	r3, [pc, #324]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bef8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800befa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800befe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf06:	d056      	beq.n	800bfb6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800bf08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf0e:	f200 8090 	bhi.w	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf14:	2bc0      	cmp	r3, #192	; 0xc0
 800bf16:	f000 8088 	beq.w	800c02a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	2bc0      	cmp	r3, #192	; 0xc0
 800bf1e:	f200 8088 	bhi.w	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	2b80      	cmp	r3, #128	; 0x80
 800bf26:	d032      	beq.n	800bf8e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800bf28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf2a:	2b80      	cmp	r3, #128	; 0x80
 800bf2c:	f200 8081 	bhi.w	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800bf30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d003      	beq.n	800bf3e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800bf36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf38:	2b40      	cmp	r3, #64	; 0x40
 800bf3a:	d014      	beq.n	800bf66 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800bf3c:	e079      	b.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800bf3e:	4b3f      	ldr	r3, [pc, #252]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800bf46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf4a:	d108      	bne.n	800bf5e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf50:	4618      	mov	r0, r3
 800bf52:	f000 ff67 	bl	800ce24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf5a:	f000 bc9c 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf62:	f000 bc98 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800bf66:	4b35      	ldr	r3, [pc, #212]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bf6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bf72:	d108      	bne.n	800bf86 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf74:	f107 0318 	add.w	r3, r7, #24
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fcab 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf7e:	69bb      	ldr	r3, [r7, #24]
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bf82:	f000 bc88 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bf86:	2300      	movs	r3, #0
 800bf88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf8a:	f000 bc84 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800bf8e:	4b2b      	ldr	r3, [pc, #172]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bf96:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf9a:	d108      	bne.n	800bfae <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf9c:	f107 030c 	add.w	r3, r7, #12
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	f000 fdeb 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800bfaa:	f000 bc74 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bfb2:	f000 bc70 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800bfb6:	4b21      	ldr	r3, [pc, #132]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bfbe:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800bfc0:	4b1e      	ldr	r3, [pc, #120]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	f003 0304 	and.w	r3, r3, #4
 800bfc8:	2b04      	cmp	r3, #4
 800bfca:	d10c      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800bfcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d109      	bne.n	800bfe6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bfd2:	4b1a      	ldr	r3, [pc, #104]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	08db      	lsrs	r3, r3, #3
 800bfd8:	f003 0303 	and.w	r3, r3, #3
 800bfdc:	4a18      	ldr	r2, [pc, #96]	; (800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bfde:	fa22 f303 	lsr.w	r3, r2, r3
 800bfe2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bfe4:	e01f      	b.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800bfe6:	4b15      	ldr	r3, [pc, #84]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bfee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bff2:	d106      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800bff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bffa:	d102      	bne.n	800c002 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800bffc:	4b11      	ldr	r3, [pc, #68]	; (800c044 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c000:	e011      	b.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c002:	4b0e      	ldr	r3, [pc, #56]	; (800c03c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c00a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c00e:	d106      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c012:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c016:	d102      	bne.n	800c01e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c018:	4b0b      	ldr	r3, [pc, #44]	; (800c048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c01a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c01c:	e003      	b.n	800c026 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c01e:	2300      	movs	r3, #0
 800c020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c022:	f000 bc38 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c026:	f000 bc36 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c02a:	4b08      	ldr	r3, [pc, #32]	; (800c04c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c02e:	f000 bc32 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c032:	2300      	movs	r3, #0
 800c034:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c036:	f000 bc2e 	b.w	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c03a:	bf00      	nop
 800c03c:	58024400 	.word	0x58024400
 800c040:	03d09000 	.word	0x03d09000
 800c044:	003d0900 	.word	0x003d0900
 800c048:	017d7840 	.word	0x017d7840
 800c04c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c050:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c054:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c058:	430b      	orrs	r3, r1
 800c05a:	f040 809c 	bne.w	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c05e:	4b9e      	ldr	r3, [pc, #632]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c062:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c066:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c06a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c06e:	d054      	beq.n	800c11a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c072:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c076:	f200 808b 	bhi.w	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c07a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c080:	f000 8083 	beq.w	800c18a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c086:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c08a:	f200 8081 	bhi.w	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c08e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c094:	d02f      	beq.n	800c0f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c098:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c09c:	d878      	bhi.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d004      	beq.n	800c0ae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c0a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c0aa:	d012      	beq.n	800c0d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c0ac:	e070      	b.n	800c190 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c0ae:	4b8a      	ldr	r3, [pc, #552]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c0ba:	d107      	bne.n	800c0cc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c0bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c0c0:	4618      	mov	r0, r3
 800c0c2:	f000 feaf 	bl	800ce24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c0c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0ca:	e3e4      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0cc:	2300      	movs	r3, #0
 800c0ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0d0:	e3e1      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c0d2:	4b81      	ldr	r3, [pc, #516]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c0da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c0de:	d107      	bne.n	800c0f0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0e0:	f107 0318 	add.w	r3, r7, #24
 800c0e4:	4618      	mov	r0, r3
 800c0e6:	f000 fbf5 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c0ee:	e3d2      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c0f4:	e3cf      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c0f6:	4b78      	ldr	r3, [pc, #480]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c0fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c102:	d107      	bne.n	800c114 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c104:	f107 030c 	add.w	r3, r7, #12
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 fd37 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c112:	e3c0      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c114:	2300      	movs	r3, #0
 800c116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c118:	e3bd      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c11a:	4b6f      	ldr	r3, [pc, #444]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c11c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c11e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c122:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c124:	4b6c      	ldr	r3, [pc, #432]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	f003 0304 	and.w	r3, r3, #4
 800c12c:	2b04      	cmp	r3, #4
 800c12e:	d10c      	bne.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c132:	2b00      	cmp	r3, #0
 800c134:	d109      	bne.n	800c14a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c136:	4b68      	ldr	r3, [pc, #416]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	08db      	lsrs	r3, r3, #3
 800c13c:	f003 0303 	and.w	r3, r3, #3
 800c140:	4a66      	ldr	r2, [pc, #408]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c142:	fa22 f303 	lsr.w	r3, r2, r3
 800c146:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c148:	e01e      	b.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c14a:	4b63      	ldr	r3, [pc, #396]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c152:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c156:	d106      	bne.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c158:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c15a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c15e:	d102      	bne.n	800c166 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c160:	4b5f      	ldr	r3, [pc, #380]	; (800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c162:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c164:	e010      	b.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c166:	4b5c      	ldr	r3, [pc, #368]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c16e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c172:	d106      	bne.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c17a:	d102      	bne.n	800c182 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c17c:	4b59      	ldr	r3, [pc, #356]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c17e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c180:	e002      	b.n	800c188 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c182:	2300      	movs	r3, #0
 800c184:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c186:	e386      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c188:	e385      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c18a:	4b57      	ldr	r3, [pc, #348]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c18c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c18e:	e382      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c190:	2300      	movs	r3, #0
 800c192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c194:	e37f      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c196:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c19a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c19e:	430b      	orrs	r3, r1
 800c1a0:	f040 80a7 	bne.w	800c2f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c1a4:	4b4c      	ldr	r3, [pc, #304]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c1ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c1ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1b4:	d055      	beq.n	800c262 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c1bc:	f200 8096 	bhi.w	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c1c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1c6:	f000 8084 	beq.w	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c1d0:	f200 808c 	bhi.w	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c1d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1da:	d030      	beq.n	800c23e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c1dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c1e2:	f200 8083 	bhi.w	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d004      	beq.n	800c1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c1f2:	d012      	beq.n	800c21a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c1f4:	e07a      	b.n	800c2ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c1f6:	4b38      	ldr	r3, [pc, #224]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c1fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c202:	d107      	bne.n	800c214 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c204:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c208:	4618      	mov	r0, r3
 800c20a:	f000 fe0b 	bl	800ce24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c210:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c212:	e340      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c214:	2300      	movs	r3, #0
 800c216:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c218:	e33d      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c21a:	4b2f      	ldr	r3, [pc, #188]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c222:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c226:	d107      	bne.n	800c238 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c228:	f107 0318 	add.w	r3, r7, #24
 800c22c:	4618      	mov	r0, r3
 800c22e:	f000 fb51 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c232:	69bb      	ldr	r3, [r7, #24]
 800c234:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c236:	e32e      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c238:	2300      	movs	r3, #0
 800c23a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c23c:	e32b      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c23e:	4b26      	ldr	r3, [pc, #152]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c246:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c24a:	d107      	bne.n	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c24c:	f107 030c 	add.w	r3, r7, #12
 800c250:	4618      	mov	r0, r3
 800c252:	f000 fc93 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c25a:	e31c      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c25c:	2300      	movs	r3, #0
 800c25e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c260:	e319      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c262:	4b1d      	ldr	r3, [pc, #116]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c266:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c26a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c26c:	4b1a      	ldr	r3, [pc, #104]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c26e:	681b      	ldr	r3, [r3, #0]
 800c270:	f003 0304 	and.w	r3, r3, #4
 800c274:	2b04      	cmp	r3, #4
 800c276:	d10c      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c278:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d109      	bne.n	800c292 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c27e:	4b16      	ldr	r3, [pc, #88]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	08db      	lsrs	r3, r3, #3
 800c284:	f003 0303 	and.w	r3, r3, #3
 800c288:	4a14      	ldr	r2, [pc, #80]	; (800c2dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c28a:	fa22 f303 	lsr.w	r3, r2, r3
 800c28e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c290:	e01e      	b.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c292:	4b11      	ldr	r3, [pc, #68]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c29a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c29e:	d106      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2a6:	d102      	bne.n	800c2ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c2a8:	4b0d      	ldr	r3, [pc, #52]	; (800c2e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c2aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ac:	e010      	b.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c2ae:	4b0a      	ldr	r3, [pc, #40]	; (800c2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c2b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c2ba:	d106      	bne.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c2bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2c2:	d102      	bne.n	800c2ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c2c4:	4b07      	ldr	r3, [pc, #28]	; (800c2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c2c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2c8:	e002      	b.n	800c2d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c2ca:	2300      	movs	r3, #0
 800c2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c2ce:	e2e2      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2d0:	e2e1      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c2d2:	4b05      	ldr	r3, [pc, #20]	; (800c2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d6:	e2de      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c2d8:	58024400 	.word	0x58024400
 800c2dc:	03d09000 	.word	0x03d09000
 800c2e0:	003d0900 	.word	0x003d0900
 800c2e4:	017d7840 	.word	0x017d7840
 800c2e8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2f0:	e2d1      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c2f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2f6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c2fa:	430b      	orrs	r3, r1
 800c2fc:	f040 809c 	bne.w	800c438 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c300:	4b93      	ldr	r3, [pc, #588]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c302:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c304:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c308:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c30c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c310:	d054      	beq.n	800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c314:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c318:	f200 808b 	bhi.w	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c31e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c322:	f000 8083 	beq.w	800c42c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c328:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c32c:	f200 8081 	bhi.w	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c336:	d02f      	beq.n	800c398 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c33a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c33e:	d878      	bhi.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c342:	2b00      	cmp	r3, #0
 800c344:	d004      	beq.n	800c350 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c34c:	d012      	beq.n	800c374 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c34e:	e070      	b.n	800c432 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c350:	4b7f      	ldr	r3, [pc, #508]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c358:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c35c:	d107      	bne.n	800c36e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c35e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c362:	4618      	mov	r0, r3
 800c364:	f000 fd5e 	bl	800ce24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c36a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c36c:	e293      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c36e:	2300      	movs	r3, #0
 800c370:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c372:	e290      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c374:	4b76      	ldr	r3, [pc, #472]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c376:	681b      	ldr	r3, [r3, #0]
 800c378:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c37c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c380:	d107      	bne.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c382:	f107 0318 	add.w	r3, r7, #24
 800c386:	4618      	mov	r0, r3
 800c388:	f000 faa4 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c38c:	69bb      	ldr	r3, [r7, #24]
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c390:	e281      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c396:	e27e      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c398:	4b6d      	ldr	r3, [pc, #436]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3a4:	d107      	bne.n	800c3b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c3a6:	f107 030c 	add.w	r3, r7, #12
 800c3aa:	4618      	mov	r0, r3
 800c3ac:	f000 fbe6 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c3b4:	e26f      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3ba:	e26c      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c3bc:	4b64      	ldr	r3, [pc, #400]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c3c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c3c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c3c6:	4b62      	ldr	r3, [pc, #392]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f003 0304 	and.w	r3, r3, #4
 800c3ce:	2b04      	cmp	r3, #4
 800c3d0:	d10c      	bne.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c3d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d109      	bne.n	800c3ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c3d8:	4b5d      	ldr	r3, [pc, #372]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	08db      	lsrs	r3, r3, #3
 800c3de:	f003 0303 	and.w	r3, r3, #3
 800c3e2:	4a5c      	ldr	r2, [pc, #368]	; (800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c3e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3ea:	e01e      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c3ec:	4b58      	ldr	r3, [pc, #352]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c3f8:	d106      	bne.n	800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c3fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c400:	d102      	bne.n	800c408 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c402:	4b55      	ldr	r3, [pc, #340]	; (800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c404:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c406:	e010      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c408:	4b51      	ldr	r3, [pc, #324]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c410:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c414:	d106      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c418:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c41c:	d102      	bne.n	800c424 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c41e:	4b4f      	ldr	r3, [pc, #316]	; (800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c420:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c422:	e002      	b.n	800c42a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c428:	e235      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c42a:	e234      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c42c:	4b4c      	ldr	r3, [pc, #304]	; (800c560 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c430:	e231      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c432:	2300      	movs	r3, #0
 800c434:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c436:	e22e      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c438:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c43c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c440:	430b      	orrs	r3, r1
 800c442:	f040 808f 	bne.w	800c564 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c446:	4b42      	ldr	r3, [pc, #264]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c44a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c44e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c452:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c456:	d06b      	beq.n	800c530 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c45e:	d874      	bhi.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c462:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c466:	d056      	beq.n	800c516 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c46e:	d86c      	bhi.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c470:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c472:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c476:	d03b      	beq.n	800c4f0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c47a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c47e:	d864      	bhi.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c482:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c486:	d021      	beq.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c48a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c48e:	d85c      	bhi.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c492:	2b00      	cmp	r3, #0
 800c494:	d004      	beq.n	800c4a0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c498:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c49c:	d004      	beq.n	800c4a8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c49e:	e054      	b.n	800c54a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c4a0:	f7fe fa0a 	bl	800a8b8 <HAL_RCC_GetPCLK1Freq>
 800c4a4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c4a6:	e1f6      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c4a8:	4b29      	ldr	r3, [pc, #164]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c4b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c4b4:	d107      	bne.n	800c4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c4b6:	f107 0318 	add.w	r3, r7, #24
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f000 fa0a 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c4c0:	69fb      	ldr	r3, [r7, #28]
 800c4c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4c4:	e1e7      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ca:	e1e4      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c4cc:	4b20      	ldr	r3, [pc, #128]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c4d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4d8:	d107      	bne.n	800c4ea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c4da:	f107 030c 	add.w	r3, r7, #12
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 fb4c 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c4e8:	e1d5      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4ee:	e1d2      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c4f0:	4b17      	ldr	r3, [pc, #92]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	f003 0304 	and.w	r3, r3, #4
 800c4f8:	2b04      	cmp	r3, #4
 800c4fa:	d109      	bne.n	800c510 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4fc:	4b14      	ldr	r3, [pc, #80]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	08db      	lsrs	r3, r3, #3
 800c502:	f003 0303 	and.w	r3, r3, #3
 800c506:	4a13      	ldr	r2, [pc, #76]	; (800c554 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c508:	fa22 f303 	lsr.w	r3, r2, r3
 800c50c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c50e:	e1c2      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c514:	e1bf      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c516:	4b0e      	ldr	r3, [pc, #56]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c51e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c522:	d102      	bne.n	800c52a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c524:	4b0c      	ldr	r3, [pc, #48]	; (800c558 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c526:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c528:	e1b5      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c52a:	2300      	movs	r3, #0
 800c52c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c52e:	e1b2      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c530:	4b07      	ldr	r3, [pc, #28]	; (800c550 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c538:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c53c:	d102      	bne.n	800c544 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c53e:	4b07      	ldr	r3, [pc, #28]	; (800c55c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c540:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c542:	e1a8      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c544:	2300      	movs	r3, #0
 800c546:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c548:	e1a5      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c54e:	e1a2      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c550:	58024400 	.word	0x58024400
 800c554:	03d09000 	.word	0x03d09000
 800c558:	003d0900 	.word	0x003d0900
 800c55c:	017d7840 	.word	0x017d7840
 800c560:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c564:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c568:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c56c:	430b      	orrs	r3, r1
 800c56e:	d173      	bne.n	800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c570:	4b9c      	ldr	r3, [pc, #624]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c574:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c578:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c580:	d02f      	beq.n	800c5e2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c588:	d863      	bhi.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c58a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d004      	beq.n	800c59a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c596:	d012      	beq.n	800c5be <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c598:	e05b      	b.n	800c652 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c59a:	4b92      	ldr	r3, [pc, #584]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c5a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c5a6:	d107      	bne.n	800c5b8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5a8:	f107 0318 	add.w	r3, r7, #24
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	f000 f991 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5b2:	69bb      	ldr	r3, [r7, #24]
 800c5b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5b6:	e16e      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5bc:	e16b      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5be:	4b89      	ldr	r3, [pc, #548]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5ca:	d107      	bne.n	800c5dc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5cc:	f107 030c 	add.w	r3, r7, #12
 800c5d0:	4618      	mov	r0, r3
 800c5d2:	f000 fad3 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c5d6:	697b      	ldr	r3, [r7, #20]
 800c5d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5da:	e15c      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5e0:	e159      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5e2:	4b80      	ldr	r3, [pc, #512]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5ea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5ec:	4b7d      	ldr	r3, [pc, #500]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	f003 0304 	and.w	r3, r3, #4
 800c5f4:	2b04      	cmp	r3, #4
 800c5f6:	d10c      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c5f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d109      	bne.n	800c612 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5fe:	4b79      	ldr	r3, [pc, #484]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c600:	681b      	ldr	r3, [r3, #0]
 800c602:	08db      	lsrs	r3, r3, #3
 800c604:	f003 0303 	and.w	r3, r3, #3
 800c608:	4a77      	ldr	r2, [pc, #476]	; (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c60a:	fa22 f303 	lsr.w	r3, r2, r3
 800c60e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c610:	e01e      	b.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c612:	4b74      	ldr	r3, [pc, #464]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c61a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c61e:	d106      	bne.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c620:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c622:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c626:	d102      	bne.n	800c62e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c628:	4b70      	ldr	r3, [pc, #448]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c62a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c62c:	e010      	b.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c62e:	4b6d      	ldr	r3, [pc, #436]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c636:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c63a:	d106      	bne.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c63c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c63e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c642:	d102      	bne.n	800c64a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c644:	4b6a      	ldr	r3, [pc, #424]	; (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c646:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c648:	e002      	b.n	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c64a:	2300      	movs	r3, #0
 800c64c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c64e:	e122      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c650:	e121      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c652:	2300      	movs	r3, #0
 800c654:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c656:	e11e      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c658:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c65c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c660:	430b      	orrs	r3, r1
 800c662:	d133      	bne.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c664:	4b5f      	ldr	r3, [pc, #380]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c666:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c66c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c670:	2b00      	cmp	r3, #0
 800c672:	d004      	beq.n	800c67e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c676:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c67a:	d012      	beq.n	800c6a2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c67c:	e023      	b.n	800c6c6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c67e:	4b59      	ldr	r3, [pc, #356]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c686:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c68a:	d107      	bne.n	800c69c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c68c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c690:	4618      	mov	r0, r3
 800c692:	f000 fbc7 	bl	800ce24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c698:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c69a:	e0fc      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c69c:	2300      	movs	r3, #0
 800c69e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6a0:	e0f9      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6a2:	4b50      	ldr	r3, [pc, #320]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6ae:	d107      	bne.n	800c6c0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6b0:	f107 0318 	add.w	r3, r7, #24
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f000 f90d 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c6ba:	6a3b      	ldr	r3, [r7, #32]
 800c6bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6be:	e0ea      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6c4:	e0e7      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6ca:	e0e4      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c6cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c6d0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800c6d4:	430b      	orrs	r3, r1
 800c6d6:	f040 808d 	bne.w	800c7f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800c6da:	4b42      	ldr	r3, [pc, #264]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c6dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c6de:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c6e2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c6e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6ea:	d06b      	beq.n	800c7c4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800c6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c6f2:	d874      	bhi.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c6f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6fa:	d056      	beq.n	800c7aa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800c6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c702:	d86c      	bhi.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c706:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c70a:	d03b      	beq.n	800c784 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800c70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c70e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c712:	d864      	bhi.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c716:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c71a:	d021      	beq.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800c71c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c71e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c722:	d85c      	bhi.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800c724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c726:	2b00      	cmp	r3, #0
 800c728:	d004      	beq.n	800c734 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c730:	d004      	beq.n	800c73c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800c732:	e054      	b.n	800c7de <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c734:	f000 f8b8 	bl	800c8a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800c738:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c73a:	e0ac      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c73c:	4b29      	ldr	r3, [pc, #164]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c73e:	681b      	ldr	r3, [r3, #0]
 800c740:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c744:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c748:	d107      	bne.n	800c75a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c74a:	f107 0318 	add.w	r3, r7, #24
 800c74e:	4618      	mov	r0, r3
 800c750:	f000 f8c0 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c754:	69fb      	ldr	r3, [r7, #28]
 800c756:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c758:	e09d      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c75a:	2300      	movs	r3, #0
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c75e:	e09a      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c760:	4b20      	ldr	r3, [pc, #128]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c76c:	d107      	bne.n	800c77e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c76e:	f107 030c 	add.w	r3, r7, #12
 800c772:	4618      	mov	r0, r3
 800c774:	f000 fa02 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c77c:	e08b      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c77e:	2300      	movs	r3, #0
 800c780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c782:	e088      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c784:	4b17      	ldr	r3, [pc, #92]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c786:	681b      	ldr	r3, [r3, #0]
 800c788:	f003 0304 	and.w	r3, r3, #4
 800c78c:	2b04      	cmp	r3, #4
 800c78e:	d109      	bne.n	800c7a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c790:	4b14      	ldr	r3, [pc, #80]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	08db      	lsrs	r3, r3, #3
 800c796:	f003 0303 	and.w	r3, r3, #3
 800c79a:	4a13      	ldr	r2, [pc, #76]	; (800c7e8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c79c:	fa22 f303 	lsr.w	r3, r2, r3
 800c7a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7a2:	e078      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7a4:	2300      	movs	r3, #0
 800c7a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a8:	e075      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c7aa:	4b0e      	ldr	r3, [pc, #56]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c7b6:	d102      	bne.n	800c7be <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800c7b8:	4b0c      	ldr	r3, [pc, #48]	; (800c7ec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c7ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7bc:	e06b      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7be:	2300      	movs	r3, #0
 800c7c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7c2:	e068      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c7c4:	4b07      	ldr	r3, [pc, #28]	; (800c7e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7d0:	d102      	bne.n	800c7d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800c7d2:	4b07      	ldr	r3, [pc, #28]	; (800c7f0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c7d6:	e05e      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7dc:	e05b      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800c7de:	2300      	movs	r3, #0
 800c7e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7e2:	e058      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c7e4:	58024400 	.word	0x58024400
 800c7e8:	03d09000 	.word	0x03d09000
 800c7ec:	003d0900 	.word	0x003d0900
 800c7f0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800c7f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7f8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800c7fc:	430b      	orrs	r3, r1
 800c7fe:	d148      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800c800:	4b27      	ldr	r3, [pc, #156]	; (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c804:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c808:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c810:	d02a      	beq.n	800c868 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800c812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c818:	d838      	bhi.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d004      	beq.n	800c82a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800c820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c822:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c826:	d00d      	beq.n	800c844 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800c828:	e030      	b.n	800c88c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c82a:	4b1d      	ldr	r3, [pc, #116]	; (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c832:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c836:	d102      	bne.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800c838:	4b1a      	ldr	r3, [pc, #104]	; (800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c83c:	e02b      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c83e:	2300      	movs	r3, #0
 800c840:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c842:	e028      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c844:	4b16      	ldr	r3, [pc, #88]	; (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c84c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c850:	d107      	bne.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c856:	4618      	mov	r0, r3
 800c858:	f000 fae4 	bl	800ce24 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c85c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c860:	e019      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c862:	2300      	movs	r3, #0
 800c864:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c866:	e016      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c868:	4b0d      	ldr	r3, [pc, #52]	; (800c8a0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c870:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c874:	d107      	bne.n	800c886 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c876:	f107 0318 	add.w	r3, r7, #24
 800c87a:	4618      	mov	r0, r3
 800c87c:	f000 f82a 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c884:	e007      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c88a:	e004      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c88c:	2300      	movs	r3, #0
 800c88e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c890:	e001      	b.n	800c896 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800c892:	2300      	movs	r3, #0
 800c894:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800c896:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3740      	adds	r7, #64	; 0x40
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	58024400 	.word	0x58024400
 800c8a4:	017d7840 	.word	0x017d7840

0800c8a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c8a8:	b580      	push	{r7, lr}
 800c8aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c8ac:	f7fd ffd4 	bl	800a858 <HAL_RCC_GetHCLKFreq>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	4b06      	ldr	r3, [pc, #24]	; (800c8cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c8b4:	6a1b      	ldr	r3, [r3, #32]
 800c8b6:	091b      	lsrs	r3, r3, #4
 800c8b8:	f003 0307 	and.w	r3, r3, #7
 800c8bc:	4904      	ldr	r1, [pc, #16]	; (800c8d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c8be:	5ccb      	ldrb	r3, [r1, r3]
 800c8c0:	f003 031f 	and.w	r3, r3, #31
 800c8c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	bd80      	pop	{r7, pc}
 800c8cc:	58024400 	.word	0x58024400
 800c8d0:	08016e60 	.word	0x08016e60

0800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800c8d4:	b480      	push	{r7}
 800c8d6:	b089      	sub	sp, #36	; 0x24
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c8dc:	4ba1      	ldr	r3, [pc, #644]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e0:	f003 0303 	and.w	r3, r3, #3
 800c8e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c8e6:	4b9f      	ldr	r3, [pc, #636]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8ea:	0b1b      	lsrs	r3, r3, #12
 800c8ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c8f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c8f2:	4b9c      	ldr	r3, [pc, #624]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c8f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f6:	091b      	lsrs	r3, r3, #4
 800c8f8:	f003 0301 	and.w	r3, r3, #1
 800c8fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c8fe:	4b99      	ldr	r3, [pc, #612]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c902:	08db      	lsrs	r3, r3, #3
 800c904:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c908:	693a      	ldr	r2, [r7, #16]
 800c90a:	fb02 f303 	mul.w	r3, r2, r3
 800c90e:	ee07 3a90 	vmov	s15, r3
 800c912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c916:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	f000 8111 	beq.w	800cb44 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800c922:	69bb      	ldr	r3, [r7, #24]
 800c924:	2b02      	cmp	r3, #2
 800c926:	f000 8083 	beq.w	800ca30 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800c92a:	69bb      	ldr	r3, [r7, #24]
 800c92c:	2b02      	cmp	r3, #2
 800c92e:	f200 80a1 	bhi.w	800ca74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800c932:	69bb      	ldr	r3, [r7, #24]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d003      	beq.n	800c940 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800c938:	69bb      	ldr	r3, [r7, #24]
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	d056      	beq.n	800c9ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800c93e:	e099      	b.n	800ca74 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c940:	4b88      	ldr	r3, [pc, #544]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	f003 0320 	and.w	r3, r3, #32
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d02d      	beq.n	800c9a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c94c:	4b85      	ldr	r3, [pc, #532]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c94e:	681b      	ldr	r3, [r3, #0]
 800c950:	08db      	lsrs	r3, r3, #3
 800c952:	f003 0303 	and.w	r3, r3, #3
 800c956:	4a84      	ldr	r2, [pc, #528]	; (800cb68 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800c958:	fa22 f303 	lsr.w	r3, r2, r3
 800c95c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	ee07 3a90 	vmov	s15, r3
 800c964:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c968:	697b      	ldr	r3, [r7, #20]
 800c96a:	ee07 3a90 	vmov	s15, r3
 800c96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c976:	4b7b      	ldr	r3, [pc, #492]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c97a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c97e:	ee07 3a90 	vmov	s15, r3
 800c982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c986:	ed97 6a03 	vldr	s12, [r7, #12]
 800c98a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cb6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c98e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c99a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c99e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800c9a6:	e087      	b.n	800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9a8:	697b      	ldr	r3, [r7, #20]
 800c9aa:	ee07 3a90 	vmov	s15, r3
 800c9ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cb70 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800c9b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9ba:	4b6a      	ldr	r3, [pc, #424]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800c9bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c2:	ee07 3a90 	vmov	s15, r3
 800c9c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800c9ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cb6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800c9d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c9de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c9ea:	e065      	b.n	800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c9ec:	697b      	ldr	r3, [r7, #20]
 800c9ee:	ee07 3a90 	vmov	s15, r3
 800c9f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800c9fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9fe:	4b59      	ldr	r3, [pc, #356]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca06:	ee07 3a90 	vmov	s15, r3
 800ca0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca0e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca12:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cb6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca26:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca2e:	e043      	b.n	800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	ee07 3a90 	vmov	s15, r3
 800ca36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cb78 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ca3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca42:	4b48      	ldr	r3, [pc, #288]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4a:	ee07 3a90 	vmov	s15, r3
 800ca4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca52:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca56:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cb6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ca66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ca72:	e021      	b.n	800cab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ca74:	697b      	ldr	r3, [r7, #20]
 800ca76:	ee07 3a90 	vmov	s15, r3
 800ca7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca7e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cb74 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ca82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca86:	4b37      	ldr	r3, [pc, #220]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ca88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ca8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca8e:	ee07 3a90 	vmov	s15, r3
 800ca92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca96:	ed97 6a03 	vldr	s12, [r7, #12]
 800ca9a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cb6c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ca9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800caaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cab6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800cab8:	4b2a      	ldr	r3, [pc, #168]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800caba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cabc:	0a5b      	lsrs	r3, r3, #9
 800cabe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cac2:	ee07 3a90 	vmov	s15, r3
 800cac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cace:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cad2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cad6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cada:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cade:	ee17 2a90 	vmov	r2, s15
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800cae6:	4b1f      	ldr	r3, [pc, #124]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800caea:	0c1b      	lsrs	r3, r3, #16
 800caec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800caf0:	ee07 3a90 	vmov	s15, r3
 800caf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800caf8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cafc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb00:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb0c:	ee17 2a90 	vmov	r2, s15
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800cb14:	4b13      	ldr	r3, [pc, #76]	; (800cb64 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb18:	0e1b      	lsrs	r3, r3, #24
 800cb1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cb1e:	ee07 3a90 	vmov	s15, r3
 800cb22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cb26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cb2a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cb2e:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb3a:	ee17 2a90 	vmov	r2, s15
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cb42:	e008      	b.n	800cb56 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2200      	movs	r2, #0
 800cb48:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	2200      	movs	r2, #0
 800cb4e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	609a      	str	r2, [r3, #8]
}
 800cb56:	bf00      	nop
 800cb58:	3724      	adds	r7, #36	; 0x24
 800cb5a:	46bd      	mov	sp, r7
 800cb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb60:	4770      	bx	lr
 800cb62:	bf00      	nop
 800cb64:	58024400 	.word	0x58024400
 800cb68:	03d09000 	.word	0x03d09000
 800cb6c:	46000000 	.word	0x46000000
 800cb70:	4c742400 	.word	0x4c742400
 800cb74:	4a742400 	.word	0x4a742400
 800cb78:	4bbebc20 	.word	0x4bbebc20

0800cb7c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cb7c:	b480      	push	{r7}
 800cb7e:	b089      	sub	sp, #36	; 0x24
 800cb80:	af00      	add	r7, sp, #0
 800cb82:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cb84:	4ba1      	ldr	r3, [pc, #644]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb88:	f003 0303 	and.w	r3, r3, #3
 800cb8c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cb8e:	4b9f      	ldr	r3, [pc, #636]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb92:	0d1b      	lsrs	r3, r3, #20
 800cb94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cb98:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cb9a:	4b9c      	ldr	r3, [pc, #624]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cb9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb9e:	0a1b      	lsrs	r3, r3, #8
 800cba0:	f003 0301 	and.w	r3, r3, #1
 800cba4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cba6:	4b99      	ldr	r3, [pc, #612]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cbaa:	08db      	lsrs	r3, r3, #3
 800cbac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cbb0:	693a      	ldr	r2, [r7, #16]
 800cbb2:	fb02 f303 	mul.w	r3, r2, r3
 800cbb6:	ee07 3a90 	vmov	s15, r3
 800cbba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cbbe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	f000 8111 	beq.w	800cdec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	2b02      	cmp	r3, #2
 800cbce:	f000 8083 	beq.w	800ccd8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	2b02      	cmp	r3, #2
 800cbd6:	f200 80a1 	bhi.w	800cd1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cbda:	69bb      	ldr	r3, [r7, #24]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d003      	beq.n	800cbe8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cbe0:	69bb      	ldr	r3, [r7, #24]
 800cbe2:	2b01      	cmp	r3, #1
 800cbe4:	d056      	beq.n	800cc94 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cbe6:	e099      	b.n	800cd1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cbe8:	4b88      	ldr	r3, [pc, #544]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	f003 0320 	and.w	r3, r3, #32
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d02d      	beq.n	800cc50 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbf4:	4b85      	ldr	r3, [pc, #532]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	08db      	lsrs	r3, r3, #3
 800cbfa:	f003 0303 	and.w	r3, r3, #3
 800cbfe:	4a84      	ldr	r2, [pc, #528]	; (800ce10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cc00:	fa22 f303 	lsr.w	r3, r2, r3
 800cc04:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc06:	68bb      	ldr	r3, [r7, #8]
 800cc08:	ee07 3a90 	vmov	s15, r3
 800cc0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	ee07 3a90 	vmov	s15, r3
 800cc16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc1e:	4b7b      	ldr	r3, [pc, #492]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc26:	ee07 3a90 	vmov	s15, r3
 800cc2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc2e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc32:	eddf 5a78 	vldr	s11, [pc, #480]	; 800ce14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc46:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc4a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cc4e:	e087      	b.n	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc50:	697b      	ldr	r3, [r7, #20]
 800cc52:	ee07 3a90 	vmov	s15, r3
 800cc56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc5a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ce18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cc5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cc62:	4b6a      	ldr	r3, [pc, #424]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cc64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cc66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cc6a:	ee07 3a90 	vmov	s15, r3
 800cc6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cc72:	ed97 6a03 	vldr	s12, [r7, #12]
 800cc76:	eddf 5a67 	vldr	s11, [pc, #412]	; 800ce14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cc7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cc7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cc82:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cc86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cc8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cc92:	e065      	b.n	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cc94:	697b      	ldr	r3, [r7, #20]
 800cc96:	ee07 3a90 	vmov	s15, r3
 800cc9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc9e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cca6:	4b59      	ldr	r3, [pc, #356]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccae:	ee07 3a90 	vmov	s15, r3
 800ccb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccb6:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800ce14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ccbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ccc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ccc6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ccca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ccce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ccd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ccd6:	e043      	b.n	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	ee07 3a90 	vmov	s15, r3
 800ccde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ce20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800cce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccea:	4b48      	ldr	r3, [pc, #288]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ccec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ccee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccfe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800ce14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd1a:	e021      	b.n	800cd60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ce1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800cd2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd2e:	4b37      	ldr	r3, [pc, #220]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd36:	ee07 3a90 	vmov	s15, r3
 800cd3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd42:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cd46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800cd60:	4b2a      	ldr	r3, [pc, #168]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd64:	0a5b      	lsrs	r3, r3, #9
 800cd66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd6a:	ee07 3a90 	vmov	s15, r3
 800cd6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cd76:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cd7a:	edd7 6a07 	vldr	s13, [r7, #28]
 800cd7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cd82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cd86:	ee17 2a90 	vmov	r2, s15
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800cd8e:	4b1f      	ldr	r3, [pc, #124]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cd90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd92:	0c1b      	lsrs	r3, r3, #16
 800cd94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cd98:	ee07 3a90 	vmov	s15, r3
 800cd9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cda0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cda4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cda8:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cdb4:	ee17 2a90 	vmov	r2, s15
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800cdbc:	4b13      	ldr	r3, [pc, #76]	; (800ce0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdc0:	0e1b      	lsrs	r3, r3, #24
 800cdc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdc6:	ee07 3a90 	vmov	s15, r3
 800cdca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cdd2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cdd6:	edd7 6a07 	vldr	s13, [r7, #28]
 800cdda:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cdde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cde2:	ee17 2a90 	vmov	r2, s15
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800cdea:	e008      	b.n	800cdfe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	609a      	str	r2, [r3, #8]
}
 800cdfe:	bf00      	nop
 800ce00:	3724      	adds	r7, #36	; 0x24
 800ce02:	46bd      	mov	sp, r7
 800ce04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce08:	4770      	bx	lr
 800ce0a:	bf00      	nop
 800ce0c:	58024400 	.word	0x58024400
 800ce10:	03d09000 	.word	0x03d09000
 800ce14:	46000000 	.word	0x46000000
 800ce18:	4c742400 	.word	0x4c742400
 800ce1c:	4a742400 	.word	0x4a742400
 800ce20:	4bbebc20 	.word	0x4bbebc20

0800ce24 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b089      	sub	sp, #36	; 0x24
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce2c:	4ba0      	ldr	r3, [pc, #640]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce30:	f003 0303 	and.w	r3, r3, #3
 800ce34:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800ce36:	4b9e      	ldr	r3, [pc, #632]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce3a:	091b      	lsrs	r3, r3, #4
 800ce3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce40:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800ce42:	4b9b      	ldr	r3, [pc, #620]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce46:	f003 0301 	and.w	r3, r3, #1
 800ce4a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ce4c:	4b98      	ldr	r3, [pc, #608]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce50:	08db      	lsrs	r3, r3, #3
 800ce52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce56:	693a      	ldr	r2, [r7, #16]
 800ce58:	fb02 f303 	mul.w	r3, r2, r3
 800ce5c:	ee07 3a90 	vmov	s15, r3
 800ce60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce64:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	f000 8111 	beq.w	800d092 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ce70:	69bb      	ldr	r3, [r7, #24]
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	f000 8083 	beq.w	800cf7e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800ce78:	69bb      	ldr	r3, [r7, #24]
 800ce7a:	2b02      	cmp	r3, #2
 800ce7c:	f200 80a1 	bhi.w	800cfc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800ce80:	69bb      	ldr	r3, [r7, #24]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800ce86:	69bb      	ldr	r3, [r7, #24]
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d056      	beq.n	800cf3a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ce8c:	e099      	b.n	800cfc2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce8e:	4b88      	ldr	r3, [pc, #544]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	f003 0320 	and.w	r3, r3, #32
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d02d      	beq.n	800cef6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce9a:	4b85      	ldr	r3, [pc, #532]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	08db      	lsrs	r3, r3, #3
 800cea0:	f003 0303 	and.w	r3, r3, #3
 800cea4:	4a83      	ldr	r2, [pc, #524]	; (800d0b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800cea6:	fa22 f303 	lsr.w	r3, r2, r3
 800ceaa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ceac:	68bb      	ldr	r3, [r7, #8]
 800ceae:	ee07 3a90 	vmov	s15, r3
 800ceb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceb6:	697b      	ldr	r3, [r7, #20]
 800ceb8:	ee07 3a90 	vmov	s15, r3
 800cebc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cec0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cec4:	4b7a      	ldr	r3, [pc, #488]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cecc:	ee07 3a90 	vmov	s15, r3
 800ced0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ced4:	ed97 6a03 	vldr	s12, [r7, #12]
 800ced8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cedc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cee0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cee4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cee8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cef0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cef4:	e087      	b.n	800d006 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cef6:	697b      	ldr	r3, [r7, #20]
 800cef8:	ee07 3a90 	vmov	s15, r3
 800cefc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf00:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d0bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cf04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf08:	4b69      	ldr	r3, [pc, #420]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf10:	ee07 3a90 	vmov	s15, r3
 800cf14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf18:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf1c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf28:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf30:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf34:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf38:	e065      	b.n	800d006 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	ee07 3a90 	vmov	s15, r3
 800cf40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf44:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d0c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800cf48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf4c:	4b58      	ldr	r3, [pc, #352]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf54:	ee07 3a90 	vmov	s15, r3
 800cf58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf5c:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf60:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cf64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cf7c:	e043      	b.n	800d006 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	ee07 3a90 	vmov	s15, r3
 800cf84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf88:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d0c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800cf8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf90:	4b47      	ldr	r3, [pc, #284]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cf92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf98:	ee07 3a90 	vmov	s15, r3
 800cf9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa0:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfc0:	e021      	b.n	800d006 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	ee07 3a90 	vmov	s15, r3
 800cfc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfcc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d0bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800cfd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd4:	4b36      	ldr	r3, [pc, #216]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800cfd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfdc:	ee07 3a90 	vmov	s15, r3
 800cfe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe4:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfe8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d0b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800cfec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d000:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d004:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d006:	4b2a      	ldr	r3, [pc, #168]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d00a:	0a5b      	lsrs	r3, r3, #9
 800d00c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d010:	ee07 3a90 	vmov	s15, r3
 800d014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d018:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d01c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d020:	edd7 6a07 	vldr	s13, [r7, #28]
 800d024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d02c:	ee17 2a90 	vmov	r2, s15
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d034:	4b1e      	ldr	r3, [pc, #120]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d038:	0c1b      	lsrs	r3, r3, #16
 800d03a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d03e:	ee07 3a90 	vmov	s15, r3
 800d042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d046:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d04a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d04e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d05a:	ee17 2a90 	vmov	r2, s15
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d062:	4b13      	ldr	r3, [pc, #76]	; (800d0b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d066:	0e1b      	lsrs	r3, r3, #24
 800d068:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d06c:	ee07 3a90 	vmov	s15, r3
 800d070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d074:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d078:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d07c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d088:	ee17 2a90 	vmov	r2, s15
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d090:	e008      	b.n	800d0a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	2200      	movs	r2, #0
 800d096:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	2200      	movs	r2, #0
 800d09c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	609a      	str	r2, [r3, #8]
}
 800d0a4:	bf00      	nop
 800d0a6:	3724      	adds	r7, #36	; 0x24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ae:	4770      	bx	lr
 800d0b0:	58024400 	.word	0x58024400
 800d0b4:	03d09000 	.word	0x03d09000
 800d0b8:	46000000 	.word	0x46000000
 800d0bc:	4c742400 	.word	0x4c742400
 800d0c0:	4a742400 	.word	0x4a742400
 800d0c4:	4bbebc20 	.word	0x4bbebc20

0800d0c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b084      	sub	sp, #16
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]
 800d0d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d0d6:	4b53      	ldr	r3, [pc, #332]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d0d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0da:	f003 0303 	and.w	r3, r3, #3
 800d0de:	2b03      	cmp	r3, #3
 800d0e0:	d101      	bne.n	800d0e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	e099      	b.n	800d21a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d0e6:	4b4f      	ldr	r3, [pc, #316]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	4a4e      	ldr	r2, [pc, #312]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d0ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d0f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d0f2:	f7f6 fc9b 	bl	8003a2c <HAL_GetTick>
 800d0f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d0f8:	e008      	b.n	800d10c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d0fa:	f7f6 fc97 	bl	8003a2c <HAL_GetTick>
 800d0fe:	4602      	mov	r2, r0
 800d100:	68bb      	ldr	r3, [r7, #8]
 800d102:	1ad3      	subs	r3, r2, r3
 800d104:	2b02      	cmp	r3, #2
 800d106:	d901      	bls.n	800d10c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d108:	2303      	movs	r3, #3
 800d10a:	e086      	b.n	800d21a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d10c:	4b45      	ldr	r3, [pc, #276]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1f0      	bne.n	800d0fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d118:	4b42      	ldr	r3, [pc, #264]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d11a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d11c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	031b      	lsls	r3, r3, #12
 800d126:	493f      	ldr	r1, [pc, #252]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d128:	4313      	orrs	r3, r2
 800d12a:	628b      	str	r3, [r1, #40]	; 0x28
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	685b      	ldr	r3, [r3, #4]
 800d130:	3b01      	subs	r3, #1
 800d132:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	689b      	ldr	r3, [r3, #8]
 800d13a:	3b01      	subs	r3, #1
 800d13c:	025b      	lsls	r3, r3, #9
 800d13e:	b29b      	uxth	r3, r3
 800d140:	431a      	orrs	r2, r3
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	68db      	ldr	r3, [r3, #12]
 800d146:	3b01      	subs	r3, #1
 800d148:	041b      	lsls	r3, r3, #16
 800d14a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d14e:	431a      	orrs	r2, r3
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	3b01      	subs	r3, #1
 800d156:	061b      	lsls	r3, r3, #24
 800d158:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d15c:	4931      	ldr	r1, [pc, #196]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d15e:	4313      	orrs	r3, r2
 800d160:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d162:	4b30      	ldr	r3, [pc, #192]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d166:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d16a:	687b      	ldr	r3, [r7, #4]
 800d16c:	695b      	ldr	r3, [r3, #20]
 800d16e:	492d      	ldr	r1, [pc, #180]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d170:	4313      	orrs	r3, r2
 800d172:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d174:	4b2b      	ldr	r3, [pc, #172]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d178:	f023 0220 	bic.w	r2, r3, #32
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	4928      	ldr	r1, [pc, #160]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d182:	4313      	orrs	r3, r2
 800d184:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d186:	4b27      	ldr	r3, [pc, #156]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d188:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d18a:	4a26      	ldr	r2, [pc, #152]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d18c:	f023 0310 	bic.w	r3, r3, #16
 800d190:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d192:	4b24      	ldr	r3, [pc, #144]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d194:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d196:	4b24      	ldr	r3, [pc, #144]	; (800d228 <RCCEx_PLL2_Config+0x160>)
 800d198:	4013      	ands	r3, r2
 800d19a:	687a      	ldr	r2, [r7, #4]
 800d19c:	69d2      	ldr	r2, [r2, #28]
 800d19e:	00d2      	lsls	r2, r2, #3
 800d1a0:	4920      	ldr	r1, [pc, #128]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1a2:	4313      	orrs	r3, r2
 800d1a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d1a6:	4b1f      	ldr	r3, [pc, #124]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1aa:	4a1e      	ldr	r2, [pc, #120]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1ac:	f043 0310 	orr.w	r3, r3, #16
 800d1b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d106      	bne.n	800d1c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d1b8:	4b1a      	ldr	r3, [pc, #104]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1bc:	4a19      	ldr	r2, [pc, #100]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d1c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1c4:	e00f      	b.n	800d1e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	2b01      	cmp	r3, #1
 800d1ca:	d106      	bne.n	800d1da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d1cc:	4b15      	ldr	r3, [pc, #84]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d0:	4a14      	ldr	r2, [pc, #80]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d1d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d1d8:	e005      	b.n	800d1e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d1da:	4b12      	ldr	r3, [pc, #72]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1de:	4a11      	ldr	r2, [pc, #68]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d1e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d1e6:	4b0f      	ldr	r3, [pc, #60]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	4a0e      	ldr	r2, [pc, #56]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d1ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d1f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d1f2:	f7f6 fc1b 	bl	8003a2c <HAL_GetTick>
 800d1f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d1f8:	e008      	b.n	800d20c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d1fa:	f7f6 fc17 	bl	8003a2c <HAL_GetTick>
 800d1fe:	4602      	mov	r2, r0
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	1ad3      	subs	r3, r2, r3
 800d204:	2b02      	cmp	r3, #2
 800d206:	d901      	bls.n	800d20c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d208:	2303      	movs	r3, #3
 800d20a:	e006      	b.n	800d21a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d20c:	4b05      	ldr	r3, [pc, #20]	; (800d224 <RCCEx_PLL2_Config+0x15c>)
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d0f0      	beq.n	800d1fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d218:	7bfb      	ldrb	r3, [r7, #15]
}
 800d21a:	4618      	mov	r0, r3
 800d21c:	3710      	adds	r7, #16
 800d21e:	46bd      	mov	sp, r7
 800d220:	bd80      	pop	{r7, pc}
 800d222:	bf00      	nop
 800d224:	58024400 	.word	0x58024400
 800d228:	ffff0007 	.word	0xffff0007

0800d22c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d22c:	b580      	push	{r7, lr}
 800d22e:	b084      	sub	sp, #16
 800d230:	af00      	add	r7, sp, #0
 800d232:	6078      	str	r0, [r7, #4]
 800d234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d236:	2300      	movs	r3, #0
 800d238:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d23a:	4b53      	ldr	r3, [pc, #332]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d23e:	f003 0303 	and.w	r3, r3, #3
 800d242:	2b03      	cmp	r3, #3
 800d244:	d101      	bne.n	800d24a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d246:	2301      	movs	r3, #1
 800d248:	e099      	b.n	800d37e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d24a:	4b4f      	ldr	r3, [pc, #316]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a4e      	ldr	r2, [pc, #312]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d256:	f7f6 fbe9 	bl	8003a2c <HAL_GetTick>
 800d25a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d25c:	e008      	b.n	800d270 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d25e:	f7f6 fbe5 	bl	8003a2c <HAL_GetTick>
 800d262:	4602      	mov	r2, r0
 800d264:	68bb      	ldr	r3, [r7, #8]
 800d266:	1ad3      	subs	r3, r2, r3
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d901      	bls.n	800d270 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d26c:	2303      	movs	r3, #3
 800d26e:	e086      	b.n	800d37e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d270:	4b45      	ldr	r3, [pc, #276]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d1f0      	bne.n	800d25e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d27c:	4b42      	ldr	r3, [pc, #264]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d27e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d280:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	681b      	ldr	r3, [r3, #0]
 800d288:	051b      	lsls	r3, r3, #20
 800d28a:	493f      	ldr	r1, [pc, #252]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d28c:	4313      	orrs	r3, r2
 800d28e:	628b      	str	r3, [r1, #40]	; 0x28
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	3b01      	subs	r3, #1
 800d296:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	689b      	ldr	r3, [r3, #8]
 800d29e:	3b01      	subs	r3, #1
 800d2a0:	025b      	lsls	r3, r3, #9
 800d2a2:	b29b      	uxth	r3, r3
 800d2a4:	431a      	orrs	r2, r3
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	3b01      	subs	r3, #1
 800d2ac:	041b      	lsls	r3, r3, #16
 800d2ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d2b2:	431a      	orrs	r2, r3
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	691b      	ldr	r3, [r3, #16]
 800d2b8:	3b01      	subs	r3, #1
 800d2ba:	061b      	lsls	r3, r3, #24
 800d2bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d2c0:	4931      	ldr	r1, [pc, #196]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d2c6:	4b30      	ldr	r3, [pc, #192]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	695b      	ldr	r3, [r3, #20]
 800d2d2:	492d      	ldr	r1, [pc, #180]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d2d4:	4313      	orrs	r3, r2
 800d2d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d2d8:	4b2b      	ldr	r3, [pc, #172]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	4928      	ldr	r1, [pc, #160]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d2e6:	4313      	orrs	r3, r2
 800d2e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d2ea:	4b27      	ldr	r3, [pc, #156]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d2ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ee:	4a26      	ldr	r2, [pc, #152]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d2f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d2f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d2f6:	4b24      	ldr	r3, [pc, #144]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d2f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d2fa:	4b24      	ldr	r3, [pc, #144]	; (800d38c <RCCEx_PLL3_Config+0x160>)
 800d2fc:	4013      	ands	r3, r2
 800d2fe:	687a      	ldr	r2, [r7, #4]
 800d300:	69d2      	ldr	r2, [r2, #28]
 800d302:	00d2      	lsls	r2, r2, #3
 800d304:	4920      	ldr	r1, [pc, #128]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d306:	4313      	orrs	r3, r2
 800d308:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d30a:	4b1f      	ldr	r3, [pc, #124]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d30c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d30e:	4a1e      	ldr	r2, [pc, #120]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d314:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d316:	683b      	ldr	r3, [r7, #0]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d106      	bne.n	800d32a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d31c:	4b1a      	ldr	r3, [pc, #104]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d31e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d320:	4a19      	ldr	r2, [pc, #100]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d322:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d326:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d328:	e00f      	b.n	800d34a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d32a:	683b      	ldr	r3, [r7, #0]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	d106      	bne.n	800d33e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d330:	4b15      	ldr	r3, [pc, #84]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d334:	4a14      	ldr	r2, [pc, #80]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d336:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d33a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d33c:	e005      	b.n	800d34a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d33e:	4b12      	ldr	r3, [pc, #72]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d342:	4a11      	ldr	r2, [pc, #68]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d344:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d348:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d34a:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	4a0e      	ldr	r2, [pc, #56]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d354:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d356:	f7f6 fb69 	bl	8003a2c <HAL_GetTick>
 800d35a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d35c:	e008      	b.n	800d370 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d35e:	f7f6 fb65 	bl	8003a2c <HAL_GetTick>
 800d362:	4602      	mov	r2, r0
 800d364:	68bb      	ldr	r3, [r7, #8]
 800d366:	1ad3      	subs	r3, r2, r3
 800d368:	2b02      	cmp	r3, #2
 800d36a:	d901      	bls.n	800d370 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d36c:	2303      	movs	r3, #3
 800d36e:	e006      	b.n	800d37e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d370:	4b05      	ldr	r3, [pc, #20]	; (800d388 <RCCEx_PLL3_Config+0x15c>)
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d378:	2b00      	cmp	r3, #0
 800d37a:	d0f0      	beq.n	800d35e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d37c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3710      	adds	r7, #16
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	58024400 	.word	0x58024400
 800d38c:	ffff0007 	.word	0xffff0007

0800d390 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800d398:	2301      	movs	r3, #1
 800d39a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d071      	beq.n	800d486 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800d3a8:	b2db      	uxtb	r3, r3
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d106      	bne.n	800d3bc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800d3ae:	687b      	ldr	r3, [r7, #4]
 800d3b0:	2200      	movs	r2, #0
 800d3b2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f7f5 fdfa 	bl	8002fb0 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	2202      	movs	r2, #2
 800d3c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	68db      	ldr	r3, [r3, #12]
 800d3ca:	f003 0310 	and.w	r3, r3, #16
 800d3ce:	2b10      	cmp	r3, #16
 800d3d0:	d050      	beq.n	800d474 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	22ca      	movs	r2, #202	; 0xca
 800d3d8:	625a      	str	r2, [r3, #36]	; 0x24
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	681b      	ldr	r3, [r3, #0]
 800d3de:	2253      	movs	r2, #83	; 0x53
 800d3e0:	625a      	str	r2, [r3, #36]	; 0x24

     /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	f000 fa4a 	bl	800d87c <RTC_EnterInitMode>
 800d3e8:	4603      	mov	r3, r0
 800d3ea:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800d3ec:	7bfb      	ldrb	r3, [r7, #15]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d124      	bne.n	800d43c <HAL_RTC_Init+0xac>
#if defined(TAMP)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	6899      	ldr	r1, [r3, #8]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681a      	ldr	r2, [r3, #0]
 800d3fc:	4b24      	ldr	r3, [pc, #144]	; (800d490 <HAL_RTC_Init+0x100>)
 800d3fe:	400b      	ands	r3, r1
 800d400:	6093      	str	r3, [r2, #8]
#endif /* TAMP */

        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	6899      	ldr	r1, [r3, #8]
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	685a      	ldr	r2, [r3, #4]
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	691b      	ldr	r3, [r3, #16]
 800d410:	431a      	orrs	r2, r3
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	699b      	ldr	r3, [r3, #24]
 800d416:	431a      	orrs	r2, r3
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	430a      	orrs	r2, r1
 800d41e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	0419      	lsls	r1, r3, #16
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	68da      	ldr	r2, [r3, #12]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	430a      	orrs	r2, r1
 800d430:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800d432:	6878      	ldr	r0, [r7, #4]
 800d434:	f000 fa56 	bl	800d8e4 <RTC_ExitInitMode>
 800d438:	4603      	mov	r3, r0
 800d43a:	73fb      	strb	r3, [r7, #15]
      }
      if(status == HAL_OK)
 800d43c:	7bfb      	ldrb	r3, [r7, #15]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d113      	bne.n	800d46a <HAL_RTC_Init+0xda>
      {
#if defined(TAMP)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	681b      	ldr	r3, [r3, #0]
 800d446:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	f022 0203 	bic.w	r2, r2, #3
 800d450:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	69da      	ldr	r2, [r3, #28]
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	695b      	ldr	r3, [r3, #20]
 800d460:	431a      	orrs	r2, r3
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	430a      	orrs	r2, r1
 800d468:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* TAMP */
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	22ff      	movs	r2, #255	; 0xff
 800d470:	625a      	str	r2, [r3, #36]	; 0x24
 800d472:	e001      	b.n	800d478 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 800d474:	2300      	movs	r3, #0
 800d476:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800d478:	7bfb      	ldrb	r3, [r7, #15]
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d103      	bne.n	800d486 <HAL_RTC_Init+0xf6>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2201      	movs	r2, #1
 800d482:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800d486:	7bfb      	ldrb	r3, [r7, #15]
}
 800d488:	4618      	mov	r0, r3
 800d48a:	3710      	adds	r7, #16
 800d48c:	46bd      	mov	sp, r7
 800d48e:	bd80      	pop	{r7, pc}
 800d490:	ff8fffbf 	.word	0xff8fffbf

0800d494 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d494:	b590      	push	{r4, r7, lr}
 800d496:	b087      	sub	sp, #28
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d4a6:	2b01      	cmp	r3, #1
 800d4a8:	d101      	bne.n	800d4ae <HAL_RTC_SetTime+0x1a>
 800d4aa:	2302      	movs	r3, #2
 800d4ac:	e089      	b.n	800d5c2 <HAL_RTC_SetTime+0x12e>
 800d4ae:	68fb      	ldr	r3, [r7, #12]
 800d4b0:	2201      	movs	r2, #1
 800d4b2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	22ca      	movs	r2, #202	; 0xca
 800d4c4:	625a      	str	r2, [r3, #36]	; 0x24
 800d4c6:	68fb      	ldr	r3, [r7, #12]
 800d4c8:	681b      	ldr	r3, [r3, #0]
 800d4ca:	2253      	movs	r2, #83	; 0x53
 800d4cc:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d4ce:	68f8      	ldr	r0, [r7, #12]
 800d4d0:	f000 f9d4 	bl	800d87c <RTC_EnterInitMode>
 800d4d4:	4603      	mov	r3, r0
 800d4d6:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d4d8:	7cfb      	ldrb	r3, [r7, #19]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d161      	bne.n	800d5a2 <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d126      	bne.n	800d532 <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	689b      	ldr	r3, [r3, #8]
 800d4ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d102      	bne.n	800d4f8 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d4f2:	68bb      	ldr	r3, [r7, #8]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d4f8:	68bb      	ldr	r3, [r7, #8]
 800d4fa:	781b      	ldrb	r3, [r3, #0]
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f000 fa2f 	bl	800d960 <RTC_ByteToBcd2>
 800d502:	4603      	mov	r3, r0
 800d504:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d506:	68bb      	ldr	r3, [r7, #8]
 800d508:	785b      	ldrb	r3, [r3, #1]
 800d50a:	4618      	mov	r0, r3
 800d50c:	f000 fa28 	bl	800d960 <RTC_ByteToBcd2>
 800d510:	4603      	mov	r3, r0
 800d512:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d514:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d516:	68bb      	ldr	r3, [r7, #8]
 800d518:	789b      	ldrb	r3, [r3, #2]
 800d51a:	4618      	mov	r0, r3
 800d51c:	f000 fa20 	bl	800d960 <RTC_ByteToBcd2>
 800d520:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d522:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d526:	68bb      	ldr	r3, [r7, #8]
 800d528:	78db      	ldrb	r3, [r3, #3]
 800d52a:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d52c:	4313      	orrs	r3, r2
 800d52e:	617b      	str	r3, [r7, #20]
 800d530:	e018      	b.n	800d564 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	681b      	ldr	r3, [r3, #0]
 800d536:	689b      	ldr	r3, [r3, #8]
 800d538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d102      	bne.n	800d546 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	2200      	movs	r2, #0
 800d544:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d546:	68bb      	ldr	r3, [r7, #8]
 800d548:	781b      	ldrb	r3, [r3, #0]
 800d54a:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d54c:	68bb      	ldr	r3, [r7, #8]
 800d54e:	785b      	ldrb	r3, [r3, #1]
 800d550:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d552:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800d554:	68ba      	ldr	r2, [r7, #8]
 800d556:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800d558:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	78db      	ldrb	r3, [r3, #3]
 800d55e:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800d560:	4313      	orrs	r3, r2
 800d562:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681a      	ldr	r2, [r3, #0]
 800d568:	6979      	ldr	r1, [r7, #20]
 800d56a:	4b18      	ldr	r3, [pc, #96]	; (800d5cc <HAL_RTC_SetTime+0x138>)
 800d56c:	400b      	ands	r3, r1
 800d56e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	689a      	ldr	r2, [r3, #8]
 800d576:	68fb      	ldr	r3, [r7, #12]
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800d57e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	6899      	ldr	r1, [r3, #8]
 800d586:	68bb      	ldr	r3, [r7, #8]
 800d588:	68da      	ldr	r2, [r3, #12]
 800d58a:	68bb      	ldr	r3, [r7, #8]
 800d58c:	691b      	ldr	r3, [r3, #16]
 800d58e:	431a      	orrs	r2, r3
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	430a      	orrs	r2, r1
 800d596:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d598:	68f8      	ldr	r0, [r7, #12]
 800d59a:	f000 f9a3 	bl	800d8e4 <RTC_ExitInitMode>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	22ff      	movs	r2, #255	; 0xff
 800d5a8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d5aa:	7cfb      	ldrb	r3, [r7, #19]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d103      	bne.n	800d5b8 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d5c0:	7cfb      	ldrb	r3, [r7, #19]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	371c      	adds	r7, #28
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd90      	pop	{r4, r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	007f7f7f 	.word	0x007f7f7f

0800d5d0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b086      	sub	sp, #24
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	691b      	ldr	r3, [r3, #16]
 800d5ec:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800d5f0:	68bb      	ldr	r3, [r7, #8]
 800d5f2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800d5f4:	68fb      	ldr	r3, [r7, #12]
 800d5f6:	681b      	ldr	r3, [r3, #0]
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	4b22      	ldr	r3, [pc, #136]	; (800d684 <HAL_RTC_GetTime+0xb4>)
 800d5fc:	4013      	ands	r3, r2
 800d5fe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800d600:	697b      	ldr	r3, [r7, #20]
 800d602:	0c1b      	lsrs	r3, r3, #16
 800d604:	b2db      	uxtb	r3, r3
 800d606:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d60a:	b2da      	uxtb	r2, r3
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800d610:	697b      	ldr	r3, [r7, #20]
 800d612:	0a1b      	lsrs	r3, r3, #8
 800d614:	b2db      	uxtb	r3, r3
 800d616:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d61a:	b2da      	uxtb	r2, r3
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	b2db      	uxtb	r3, r3
 800d624:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d628:	b2da      	uxtb	r2, r3
 800d62a:	68bb      	ldr	r3, [r7, #8]
 800d62c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800d62e:	697b      	ldr	r3, [r7, #20]
 800d630:	0d9b      	lsrs	r3, r3, #22
 800d632:	b2db      	uxtb	r3, r3
 800d634:	f003 0301 	and.w	r3, r3, #1
 800d638:	b2da      	uxtb	r2, r3
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d11a      	bne.n	800d67a <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800d644:	68bb      	ldr	r3, [r7, #8]
 800d646:	781b      	ldrb	r3, [r3, #0]
 800d648:	4618      	mov	r0, r3
 800d64a:	f000 f9a9 	bl	800d9a0 <RTC_Bcd2ToByte>
 800d64e:	4603      	mov	r3, r0
 800d650:	461a      	mov	r2, r3
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	785b      	ldrb	r3, [r3, #1]
 800d65a:	4618      	mov	r0, r3
 800d65c:	f000 f9a0 	bl	800d9a0 <RTC_Bcd2ToByte>
 800d660:	4603      	mov	r3, r0
 800d662:	461a      	mov	r2, r3
 800d664:	68bb      	ldr	r3, [r7, #8]
 800d666:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800d668:	68bb      	ldr	r3, [r7, #8]
 800d66a:	789b      	ldrb	r3, [r3, #2]
 800d66c:	4618      	mov	r0, r3
 800d66e:	f000 f997 	bl	800d9a0 <RTC_Bcd2ToByte>
 800d672:	4603      	mov	r3, r0
 800d674:	461a      	mov	r2, r3
 800d676:	68bb      	ldr	r3, [r7, #8]
 800d678:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3718      	adds	r7, #24
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	007f7f7f 	.word	0x007f7f7f

0800d688 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d688:	b590      	push	{r4, r7, lr}
 800d68a:	b087      	sub	sp, #28
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	60f8      	str	r0, [r7, #12]
 800d690:	60b9      	str	r1, [r7, #8]
 800d692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d101      	bne.n	800d6a2 <HAL_RTC_SetDate+0x1a>
 800d69e:	2302      	movs	r3, #2
 800d6a0:	e073      	b.n	800d78a <HAL_RTC_SetDate+0x102>
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2201      	movs	r2, #1
 800d6a6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	2202      	movs	r2, #2
 800d6ae:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d10e      	bne.n	800d6d6 <HAL_RTC_SetDate+0x4e>
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	785b      	ldrb	r3, [r3, #1]
 800d6bc:	f003 0310 	and.w	r3, r3, #16
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d008      	beq.n	800d6d6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	785b      	ldrb	r3, [r3, #1]
 800d6c8:	f023 0310 	bic.w	r3, r3, #16
 800d6cc:	b2db      	uxtb	r3, r3
 800d6ce:	330a      	adds	r3, #10
 800d6d0:	b2da      	uxtb	r2, r3
 800d6d2:	68bb      	ldr	r3, [r7, #8]
 800d6d4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d11c      	bne.n	800d716 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d6dc:	68bb      	ldr	r3, [r7, #8]
 800d6de:	78db      	ldrb	r3, [r3, #3]
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f000 f93d 	bl	800d960 <RTC_ByteToBcd2>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d6ea:	68bb      	ldr	r3, [r7, #8]
 800d6ec:	785b      	ldrb	r3, [r3, #1]
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	f000 f936 	bl	800d960 <RTC_ByteToBcd2>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d6f8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800d6fa:	68bb      	ldr	r3, [r7, #8]
 800d6fc:	789b      	ldrb	r3, [r3, #2]
 800d6fe:	4618      	mov	r0, r3
 800d700:	f000 f92e 	bl	800d960 <RTC_ByteToBcd2>
 800d704:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800d706:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800d70a:	68bb      	ldr	r3, [r7, #8]
 800d70c:	781b      	ldrb	r3, [r3, #0]
 800d70e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800d710:	4313      	orrs	r3, r2
 800d712:	617b      	str	r3, [r7, #20]
 800d714:	e00e      	b.n	800d734 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	78db      	ldrb	r3, [r3, #3]
 800d71a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d71c:	68bb      	ldr	r3, [r7, #8]
 800d71e:	785b      	ldrb	r3, [r3, #1]
 800d720:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d722:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d724:	68ba      	ldr	r2, [r7, #8]
 800d726:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d728:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d72a:	68bb      	ldr	r3, [r7, #8]
 800d72c:	781b      	ldrb	r3, [r3, #0]
 800d72e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d730:	4313      	orrs	r3, r2
 800d732:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d734:	68fb      	ldr	r3, [r7, #12]
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	22ca      	movs	r2, #202	; 0xca
 800d73a:	625a      	str	r2, [r3, #36]	; 0x24
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2253      	movs	r2, #83	; 0x53
 800d742:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d744:	68f8      	ldr	r0, [r7, #12]
 800d746:	f000 f899 	bl	800d87c <RTC_EnterInitMode>
 800d74a:	4603      	mov	r3, r0
 800d74c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d74e:	7cfb      	ldrb	r3, [r7, #19]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d10a      	bne.n	800d76a <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681a      	ldr	r2, [r3, #0]
 800d758:	6979      	ldr	r1, [r7, #20]
 800d75a:	4b0e      	ldr	r3, [pc, #56]	; (800d794 <HAL_RTC_SetDate+0x10c>)
 800d75c:	400b      	ands	r3, r1
 800d75e:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d760:	68f8      	ldr	r0, [r7, #12]
 800d762:	f000 f8bf 	bl	800d8e4 <RTC_ExitInitMode>
 800d766:	4603      	mov	r3, r0
 800d768:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	22ff      	movs	r2, #255	; 0xff
 800d770:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d772:	7cfb      	ldrb	r3, [r7, #19]
 800d774:	2b00      	cmp	r3, #0
 800d776:	d103      	bne.n	800d780 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2201      	movs	r2, #1
 800d77c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d788:	7cfb      	ldrb	r3, [r7, #19]


}
 800d78a:	4618      	mov	r0, r3
 800d78c:	371c      	adds	r7, #28
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd90      	pop	{r4, r7, pc}
 800d792:	bf00      	nop
 800d794:	00ffff3f 	.word	0x00ffff3f

0800d798 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60f8      	str	r0, [r7, #12]
 800d7a0:	60b9      	str	r1, [r7, #8]
 800d7a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	685a      	ldr	r2, [r3, #4]
 800d7aa:	4b21      	ldr	r3, [pc, #132]	; (800d830 <HAL_RTC_GetDate+0x98>)
 800d7ac:	4013      	ands	r3, r2
 800d7ae:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	0c1b      	lsrs	r3, r3, #16
 800d7b4:	b2da      	uxtb	r2, r3
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d7ba:	697b      	ldr	r3, [r7, #20]
 800d7bc:	0a1b      	lsrs	r3, r3, #8
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	f003 031f 	and.w	r3, r3, #31
 800d7c4:	b2da      	uxtb	r2, r3
 800d7c6:	68bb      	ldr	r3, [r7, #8]
 800d7c8:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d7ca:	697b      	ldr	r3, [r7, #20]
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d7d2:	b2da      	uxtb	r2, r3
 800d7d4:	68bb      	ldr	r3, [r7, #8]
 800d7d6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	0b5b      	lsrs	r3, r3, #13
 800d7dc:	b2db      	uxtb	r3, r3
 800d7de:	f003 0307 	and.w	r3, r3, #7
 800d7e2:	b2da      	uxtb	r2, r3
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d11a      	bne.n	800d824 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d7ee:	68bb      	ldr	r3, [r7, #8]
 800d7f0:	78db      	ldrb	r3, [r3, #3]
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	f000 f8d4 	bl	800d9a0 <RTC_Bcd2ToByte>
 800d7f8:	4603      	mov	r3, r0
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d800:	68bb      	ldr	r3, [r7, #8]
 800d802:	785b      	ldrb	r3, [r3, #1]
 800d804:	4618      	mov	r0, r3
 800d806:	f000 f8cb 	bl	800d9a0 <RTC_Bcd2ToByte>
 800d80a:	4603      	mov	r3, r0
 800d80c:	461a      	mov	r2, r3
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	789b      	ldrb	r3, [r3, #2]
 800d816:	4618      	mov	r0, r3
 800d818:	f000 f8c2 	bl	800d9a0 <RTC_Bcd2ToByte>
 800d81c:	4603      	mov	r3, r0
 800d81e:	461a      	mov	r2, r3
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d824:	2300      	movs	r3, #0
}
 800d826:	4618      	mov	r0, r3
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	00ffff3f 	.word	0x00ffff3f

0800d834 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b084      	sub	sp, #16
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
#if defined(TAMP)
  hrtc->Instance->ICSR = ((uint32_t)(RTC_RSF_MASK & RTC_ICSR_RESERVED_MASK));
#else
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	681b      	ldr	r3, [r3, #0]
 800d840:	4a0d      	ldr	r2, [pc, #52]	; (800d878 <HAL_RTC_WaitForSynchro+0x44>)
 800d842:	60da      	str	r2, [r3, #12]
#endif /* TAMP */

  tickstart = HAL_GetTick();
 800d844:	f7f6 f8f2 	bl	8003a2c <HAL_GetTick>
 800d848:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(TAMP)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d84a:	e009      	b.n	800d860 <HAL_RTC_WaitForSynchro+0x2c>
#endif /* TAMP */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d84c:	f7f6 f8ee 	bl	8003a2c <HAL_GetTick>
 800d850:	4602      	mov	r2, r0
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	1ad3      	subs	r3, r2, r3
 800d856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d85a:	d901      	bls.n	800d860 <HAL_RTC_WaitForSynchro+0x2c>
      {
        return HAL_TIMEOUT;
 800d85c:	2303      	movs	r3, #3
 800d85e:	e007      	b.n	800d870 <HAL_RTC_WaitForSynchro+0x3c>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	68db      	ldr	r3, [r3, #12]
 800d866:	f003 0320 	and.w	r3, r3, #32
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d0ee      	beq.n	800d84c <HAL_RTC_WaitForSynchro+0x18>
      }
    }

  return HAL_OK;
 800d86e:	2300      	movs	r3, #0
}
 800d870:	4618      	mov	r0, r3
 800d872:	3710      	adds	r7, #16
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}
 800d878:	0003ff5f 	.word	0x0003ff5f

0800d87c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b084      	sub	sp, #16
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d884:	2300      	movs	r3, #0
 800d886:	73fb      	strb	r3, [r7, #15]
    tickstart = HAL_GetTick();

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
#else
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	681b      	ldr	r3, [r3, #0]
 800d88c:	68db      	ldr	r3, [r3, #12]
 800d88e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d892:	2b00      	cmp	r3, #0
 800d894:	d120      	bne.n	800d8d8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	681b      	ldr	r3, [r3, #0]
 800d89a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d89e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d8a0:	f7f6 f8c4 	bl	8003a2c <HAL_GetTick>
 800d8a4:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d8a6:	e00d      	b.n	800d8c4 <RTC_EnterInitMode+0x48>
#endif /* TAMP */
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d8a8:	f7f6 f8c0 	bl	8003a2c <HAL_GetTick>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	68bb      	ldr	r3, [r7, #8]
 800d8b0:	1ad3      	subs	r3, r2, r3
 800d8b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d8b6:	d905      	bls.n	800d8c4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d8b8:	2303      	movs	r3, #3
 800d8ba:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	2203      	movs	r2, #3
 800d8c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while (((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	68db      	ldr	r3, [r3, #12]
 800d8ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d102      	bne.n	800d8d8 <RTC_EnterInitMode+0x5c>
 800d8d2:	7bfb      	ldrb	r3, [r7, #15]
 800d8d4:	2b03      	cmp	r3, #3
 800d8d6:	d1e7      	bne.n	800d8a8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 800d8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
	...

0800d8e4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d8ec:	2300      	movs	r3, #0
 800d8ee:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
#if defined(TAMP)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800d8f0:	4b1a      	ldr	r3, [pc, #104]	; (800d95c <RTC_ExitInitMode+0x78>)
 800d8f2:	68db      	ldr	r3, [r3, #12]
 800d8f4:	4a19      	ldr	r2, [pc, #100]	; (800d95c <RTC_ExitInitMode+0x78>)
 800d8f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8fa:	60d3      	str	r3, [r2, #12]
#endif /* TAMP */

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d8fc:	4b17      	ldr	r3, [pc, #92]	; (800d95c <RTC_ExitInitMode+0x78>)
 800d8fe:	689b      	ldr	r3, [r3, #8]
 800d900:	f003 0320 	and.w	r3, r3, #32
 800d904:	2b00      	cmp	r3, #0
 800d906:	d10c      	bne.n	800d922 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d908:	6878      	ldr	r0, [r7, #4]
 800d90a:	f7ff ff93 	bl	800d834 <HAL_RTC_WaitForSynchro>
 800d90e:	4603      	mov	r3, r0
 800d910:	2b00      	cmp	r3, #0
 800d912:	d01e      	beq.n	800d952 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	2203      	movs	r2, #3
 800d918:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d91c:	2303      	movs	r3, #3
 800d91e:	73fb      	strb	r3, [r7, #15]
 800d920:	e017      	b.n	800d952 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d922:	4b0e      	ldr	r3, [pc, #56]	; (800d95c <RTC_ExitInitMode+0x78>)
 800d924:	689b      	ldr	r3, [r3, #8]
 800d926:	4a0d      	ldr	r2, [pc, #52]	; (800d95c <RTC_ExitInitMode+0x78>)
 800d928:	f023 0320 	bic.w	r3, r3, #32
 800d92c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	f7ff ff80 	bl	800d834 <HAL_RTC_WaitForSynchro>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d005      	beq.n	800d946 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	2203      	movs	r2, #3
 800d93e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d942:	2303      	movs	r3, #3
 800d944:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d946:	4b05      	ldr	r3, [pc, #20]	; (800d95c <RTC_ExitInitMode+0x78>)
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	4a04      	ldr	r2, [pc, #16]	; (800d95c <RTC_ExitInitMode+0x78>)
 800d94c:	f043 0320 	orr.w	r3, r3, #32
 800d950:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d952:	7bfb      	ldrb	r3, [r7, #15]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	58004000 	.word	0x58004000

0800d960 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d960:	b480      	push	{r7}
 800d962:	b085      	sub	sp, #20
 800d964:	af00      	add	r7, sp, #0
 800d966:	4603      	mov	r3, r0
 800d968:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d96a:	2300      	movs	r3, #0
 800d96c:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d96e:	79fb      	ldrb	r3, [r7, #7]
 800d970:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d972:	e005      	b.n	800d980 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	3301      	adds	r3, #1
 800d978:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d97a:	7afb      	ldrb	r3, [r7, #11]
 800d97c:	3b0a      	subs	r3, #10
 800d97e:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d980:	7afb      	ldrb	r3, [r7, #11]
 800d982:	2b09      	cmp	r3, #9
 800d984:	d8f6      	bhi.n	800d974 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	011b      	lsls	r3, r3, #4
 800d98c:	b2da      	uxtb	r2, r3
 800d98e:	7afb      	ldrb	r3, [r7, #11]
 800d990:	4313      	orrs	r3, r2
 800d992:	b2db      	uxtb	r3, r3
}
 800d994:	4618      	mov	r0, r3
 800d996:	3714      	adds	r7, #20
 800d998:	46bd      	mov	sp, r7
 800d99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d99e:	4770      	bx	lr

0800d9a0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d9a0:	b480      	push	{r7}
 800d9a2:	b085      	sub	sp, #20
 800d9a4:	af00      	add	r7, sp, #0
 800d9a6:	4603      	mov	r3, r0
 800d9a8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d9aa:	79fb      	ldrb	r3, [r7, #7]
 800d9ac:	091b      	lsrs	r3, r3, #4
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	0092      	lsls	r2, r2, #2
 800d9b4:	4413      	add	r3, r2
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d9ba:	79fb      	ldrb	r3, [r7, #7]
 800d9bc:	f003 030f 	and.w	r3, r3, #15
 800d9c0:	b2da      	uxtb	r2, r3
 800d9c2:	7bfb      	ldrb	r3, [r7, #15]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	b2db      	uxtb	r3, r3
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3714      	adds	r7, #20
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b084      	sub	sp, #16
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d101      	bne.n	800d9e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d9e2:	2301      	movs	r3, #1
 800d9e4:	e10f      	b.n	800dc06 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4a87      	ldr	r2, [pc, #540]	; (800dc10 <HAL_SPI_Init+0x23c>)
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	d00f      	beq.n	800da16 <HAL_SPI_Init+0x42>
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a86      	ldr	r2, [pc, #536]	; (800dc14 <HAL_SPI_Init+0x240>)
 800d9fc:	4293      	cmp	r3, r2
 800d9fe:	d00a      	beq.n	800da16 <HAL_SPI_Init+0x42>
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	4a84      	ldr	r2, [pc, #528]	; (800dc18 <HAL_SPI_Init+0x244>)
 800da06:	4293      	cmp	r3, r2
 800da08:	d005      	beq.n	800da16 <HAL_SPI_Init+0x42>
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	2b0f      	cmp	r3, #15
 800da10:	d901      	bls.n	800da16 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800da12:	2301      	movs	r3, #1
 800da14:	e0f7      	b.n	800dc06 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f000 fc12 	bl	800e240 <SPI_GetPacketSize>
 800da1c:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	4a7b      	ldr	r2, [pc, #492]	; (800dc10 <HAL_SPI_Init+0x23c>)
 800da24:	4293      	cmp	r3, r2
 800da26:	d00c      	beq.n	800da42 <HAL_SPI_Init+0x6e>
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	4a79      	ldr	r2, [pc, #484]	; (800dc14 <HAL_SPI_Init+0x240>)
 800da2e:	4293      	cmp	r3, r2
 800da30:	d007      	beq.n	800da42 <HAL_SPI_Init+0x6e>
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	4a78      	ldr	r2, [pc, #480]	; (800dc18 <HAL_SPI_Init+0x244>)
 800da38:	4293      	cmp	r3, r2
 800da3a:	d002      	beq.n	800da42 <HAL_SPI_Init+0x6e>
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	2b08      	cmp	r3, #8
 800da40:	d811      	bhi.n	800da66 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800da46:	4a72      	ldr	r2, [pc, #456]	; (800dc10 <HAL_SPI_Init+0x23c>)
 800da48:	4293      	cmp	r3, r2
 800da4a:	d009      	beq.n	800da60 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	4a70      	ldr	r2, [pc, #448]	; (800dc14 <HAL_SPI_Init+0x240>)
 800da52:	4293      	cmp	r3, r2
 800da54:	d004      	beq.n	800da60 <HAL_SPI_Init+0x8c>
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	4a6f      	ldr	r2, [pc, #444]	; (800dc18 <HAL_SPI_Init+0x244>)
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d104      	bne.n	800da6a <HAL_SPI_Init+0x96>
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2b10      	cmp	r3, #16
 800da64:	d901      	bls.n	800da6a <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800da66:	2301      	movs	r3, #1
 800da68:	e0cd      	b.n	800dc06 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800da70:	b2db      	uxtb	r3, r3
 800da72:	2b00      	cmp	r3, #0
 800da74:	d106      	bne.n	800da84 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2200      	movs	r2, #0
 800da7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f7f5 faca 	bl	8003018 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2202      	movs	r2, #2
 800da88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	681a      	ldr	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	f022 0201 	bic.w	r2, r2, #1
 800da9a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	689b      	ldr	r3, [r3, #8]
 800daa2:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800daa6:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	699b      	ldr	r3, [r3, #24]
 800daac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800dab0:	d119      	bne.n	800dae6 <HAL_SPI_Init+0x112>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	685b      	ldr	r3, [r3, #4]
 800dab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800daba:	d103      	bne.n	800dac4 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d008      	beq.n	800dad6 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10c      	bne.n	800dae6 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800dad0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dad4:	d107      	bne.n	800dae6 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dae4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	685b      	ldr	r3, [r3, #4]
 800daea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d00f      	beq.n	800db12 <HAL_SPI_Init+0x13e>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	2b06      	cmp	r3, #6
 800daf8:	d90b      	bls.n	800db12 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	681b      	ldr	r3, [r3, #0]
 800db00:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	430a      	orrs	r2, r1
 800db0e:	601a      	str	r2, [r3, #0]
 800db10:	e007      	b.n	800db22 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	681a      	ldr	r2, [r3, #0]
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800db20:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	69da      	ldr	r2, [r3, #28]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db2a:	431a      	orrs	r2, r3
 800db2c:	68bb      	ldr	r3, [r7, #8]
 800db2e:	431a      	orrs	r2, r3
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db34:	ea42 0103 	orr.w	r1, r2, r3
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	68da      	ldr	r2, [r3, #12]
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	430a      	orrs	r2, r1
 800db42:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db4c:	431a      	orrs	r2, r3
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db52:	431a      	orrs	r2, r3
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	699b      	ldr	r3, [r3, #24]
 800db58:	431a      	orrs	r2, r3
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	691b      	ldr	r3, [r3, #16]
 800db5e:	431a      	orrs	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	695b      	ldr	r3, [r3, #20]
 800db64:	431a      	orrs	r2, r3
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a1b      	ldr	r3, [r3, #32]
 800db6a:	431a      	orrs	r2, r3
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	685b      	ldr	r3, [r3, #4]
 800db70:	431a      	orrs	r2, r3
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800db76:	431a      	orrs	r2, r3
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	689b      	ldr	r3, [r3, #8]
 800db7c:	431a      	orrs	r2, r3
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800db82:	ea42 0103 	orr.w	r1, r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800db8a:	687b      	ldr	r3, [r7, #4]
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	430a      	orrs	r2, r1
 800db90:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	685b      	ldr	r3, [r3, #4]
 800db96:	2b00      	cmp	r3, #0
 800db98:	d113      	bne.n	800dbc2 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	681b      	ldr	r3, [r3, #0]
 800dba8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dbac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	689b      	ldr	r3, [r3, #8]
 800dbb4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800dbc0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	f022 0201 	bic.w	r2, r2, #1
 800dbd0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	685b      	ldr	r3, [r3, #4]
 800dbd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00a      	beq.n	800dbf4 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	430a      	orrs	r2, r1
 800dbf2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2200      	movs	r2, #0
 800dbf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3710      	adds	r7, #16
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	40013000 	.word	0x40013000
 800dc14:	40003800 	.word	0x40003800
 800dc18:	40003c00 	.word	0x40003c00

0800dc1c <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b088      	sub	sp, #32
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  uint32_t temp_sr_reg;
  uint16_t init_max_data_in_fifo;
  init_max_data_in_fifo = (((uint16_t)(hspi->Init.FifoThreshold >> 5U) + 1U));
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc30:	095b      	lsrs	r3, r3, #5
 800dc32:	b29b      	uxth	r3, r3
 800dc34:	3301      	adds	r3, #1
 800dc36:	83fb      	strh	r3, [r7, #30]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	681b      	ldr	r3, [r3, #0]
 800dc3c:	3330      	adds	r3, #48	; 0x30
 800dc3e:	61bb      	str	r3, [r7, #24]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800dc40:	f7f5 fef4 	bl	8003a2c <HAL_GetTick>
 800dc44:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800dc4c:	b2db      	uxtb	r3, r3
 800dc4e:	2b01      	cmp	r3, #1
 800dc50:	d001      	beq.n	800dc56 <HAL_SPI_Receive+0x3a>
  {
    return HAL_BUSY;
 800dc52:	2302      	movs	r3, #2
 800dc54:	e250      	b.n	800e0f8 <HAL_SPI_Receive+0x4dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800dc56:	68bb      	ldr	r3, [r7, #8]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <HAL_SPI_Receive+0x46>
 800dc5c:	88fb      	ldrh	r3, [r7, #6]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d101      	bne.n	800dc66 <HAL_SPI_Receive+0x4a>
  {
    return HAL_ERROR;
 800dc62:	2301      	movs	r3, #1
 800dc64:	e248      	b.n	800e0f8 <HAL_SPI_Receive+0x4dc>
  }

  /* Lock the process */
  __HAL_LOCK(hspi);
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc6c:	2b01      	cmp	r3, #1
 800dc6e:	d101      	bne.n	800dc74 <HAL_SPI_Receive+0x58>
 800dc70:	2302      	movs	r3, #2
 800dc72:	e241      	b.n	800e0f8 <HAL_SPI_Receive+0x4dc>
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2201      	movs	r2, #1
 800dc78:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	2204      	movs	r2, #4
 800dc80:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800dc84:	68fb      	ldr	r3, [r7, #12]
 800dc86:	2200      	movs	r2, #0
 800dc88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	68ba      	ldr	r2, [r7, #8]
 800dc90:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	88fa      	ldrh	r2, [r7, #6]
 800dc96:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	88fa      	ldrh	r2, [r7, #6]
 800dc9e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	2200      	movs	r2, #0
 800dca6:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	2200      	movs	r2, #0
 800dcac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800dcbe:	68fb      	ldr	r3, [r7, #12]
 800dcc0:	2200      	movs	r2, #0
 800dcc2:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	689b      	ldr	r3, [r3, #8]
 800dcc8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800dccc:	d108      	bne.n	800dce0 <HAL_SPI_Receive+0xc4>
  {
    SPI_1LINE_RX(hspi);
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	681a      	ldr	r2, [r3, #0]
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dcdc:	601a      	str	r2, [r3, #0]
 800dcde:	e009      	b.n	800dcf4 <HAL_SPI_Receive+0xd8>
  }
  else
  {
    SPI_2LINES_RX(hspi);
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	681b      	ldr	r3, [r3, #0]
 800dce4:	68db      	ldr	r3, [r3, #12]
 800dce6:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800dcf2:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	685a      	ldr	r2, [r3, #4]
 800dcfa:	4b95      	ldr	r3, [pc, #596]	; (800df50 <HAL_SPI_Receive+0x334>)
 800dcfc:	4013      	ands	r3, r2
 800dcfe:	88f9      	ldrh	r1, [r7, #6]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	6812      	ldr	r2, [r2, #0]
 800dd04:	430b      	orrs	r3, r1
 800dd06:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	f042 0201 	orr.w	r2, r2, #1
 800dd16:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	685b      	ldr	r3, [r3, #4]
 800dd1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dd20:	d107      	bne.n	800dd32 <HAL_SPI_Receive+0x116>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800dd22:	68fb      	ldr	r3, [r7, #12]
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	681a      	ldr	r2, [r3, #0]
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	681b      	ldr	r3, [r3, #0]
 800dd2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dd30:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800dd32:	68fb      	ldr	r3, [r7, #12]
 800dd34:	68db      	ldr	r3, [r3, #12]
 800dd36:	2b0f      	cmp	r3, #15
 800dd38:	d96c      	bls.n	800de14 <HAL_SPI_Receive+0x1f8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800dd3a:	e064      	b.n	800de06 <HAL_SPI_Receive+0x1ea>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	695b      	ldr	r3, [r3, #20]
 800dd42:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	681b      	ldr	r3, [r3, #0]
 800dd48:	695b      	ldr	r3, [r3, #20]
 800dd4a:	f003 0301 	and.w	r3, r3, #1
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d114      	bne.n	800dd7c <HAL_SPI_Receive+0x160>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	681a      	ldr	r2, [r3, #0]
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd5a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd5c:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd62:	1d1a      	adds	r2, r3, #4
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd6e:	b29b      	uxth	r3, r3
 800dd70:	3b01      	subs	r3, #1
 800dd72:	b29a      	uxth	r2, r3
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800dd7a:	e044      	b.n	800de06 <HAL_SPI_Receive+0x1ea>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dd82:	b29b      	uxth	r3, r3
 800dd84:	8bfa      	ldrh	r2, [r7, #30]
 800dd86:	429a      	cmp	r2, r3
 800dd88:	d919      	bls.n	800ddbe <HAL_SPI_Receive+0x1a2>
 800dd8a:	693b      	ldr	r3, [r7, #16]
 800dd8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d014      	beq.n	800ddbe <HAL_SPI_Receive+0x1a2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	681a      	ldr	r2, [r3, #0]
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dd9c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800dd9e:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dda4:	1d1a      	adds	r2, r3, #4
 800dda6:	68fb      	ldr	r3, [r7, #12]
 800dda8:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ddb0:	b29b      	uxth	r3, r3
 800ddb2:	3b01      	subs	r3, #1
 800ddb4:	b29a      	uxth	r2, r3
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ddbc:	e023      	b.n	800de06 <HAL_SPI_Receive+0x1ea>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ddbe:	f7f5 fe35 	bl	8003a2c <HAL_GetTick>
 800ddc2:	4602      	mov	r2, r0
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	1ad3      	subs	r3, r2, r3
 800ddc8:	683a      	ldr	r2, [r7, #0]
 800ddca:	429a      	cmp	r2, r3
 800ddcc:	d803      	bhi.n	800ddd6 <HAL_SPI_Receive+0x1ba>
 800ddce:	683b      	ldr	r3, [r7, #0]
 800ddd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddd4:	d102      	bne.n	800dddc <HAL_SPI_Receive+0x1c0>
 800ddd6:	683b      	ldr	r3, [r7, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d114      	bne.n	800de06 <HAL_SPI_Receive+0x1ea>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800dddc:	68f8      	ldr	r0, [r7, #12]
 800ddde:	f000 f98f 	bl	800e100 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dde8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ddf2:	68fb      	ldr	r3, [r7, #12]
 800ddf4:	2201      	movs	r2, #1
 800ddf6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	2200      	movs	r2, #0
 800ddfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800de02:	2303      	movs	r3, #3
 800de04:	e178      	b.n	800e0f8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d194      	bne.n	800dd3c <HAL_SPI_Receive+0x120>
 800de12:	e15e      	b.n	800e0d2 <HAL_SPI_Receive+0x4b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	68db      	ldr	r3, [r3, #12]
 800de18:	2b07      	cmp	r3, #7
 800de1a:	f240 8153 	bls.w	800e0c4 <HAL_SPI_Receive+0x4a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800de1e:	e08f      	b.n	800df40 <HAL_SPI_Receive+0x324>
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	681b      	ldr	r3, [r3, #0]
 800de24:	695b      	ldr	r3, [r3, #20]
 800de26:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	695b      	ldr	r3, [r3, #20]
 800de2e:	f003 0301 	and.w	r3, r3, #1
 800de32:	2b01      	cmp	r3, #1
 800de34:	d114      	bne.n	800de60 <HAL_SPI_Receive+0x244>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de3a:	69ba      	ldr	r2, [r7, #24]
 800de3c:	8812      	ldrh	r2, [r2, #0]
 800de3e:	b292      	uxth	r2, r2
 800de40:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de42:	68fb      	ldr	r3, [r7, #12]
 800de44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de46:	1c9a      	adds	r2, r3, #2
 800de48:	68fb      	ldr	r3, [r7, #12]
 800de4a:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de52:	b29b      	uxth	r3, r3
 800de54:	3b01      	subs	r3, #1
 800de56:	b29a      	uxth	r2, r3
 800de58:	68fb      	ldr	r3, [r7, #12]
 800de5a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800de5e:	e06f      	b.n	800df40 <HAL_SPI_Receive+0x324>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800de66:	b29b      	uxth	r3, r3
 800de68:	8bfa      	ldrh	r2, [r7, #30]
 800de6a:	429a      	cmp	r2, r3
 800de6c:	d924      	bls.n	800deb8 <HAL_SPI_Receive+0x29c>
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800de74:	2b00      	cmp	r3, #0
 800de76:	d01f      	beq.n	800deb8 <HAL_SPI_Receive+0x29c>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de7c:	69ba      	ldr	r2, [r7, #24]
 800de7e:	8812      	ldrh	r2, [r2, #0]
 800de80:	b292      	uxth	r2, r2
 800de82:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de88:	1c9a      	adds	r2, r3, #2
 800de8a:	68fb      	ldr	r3, [r7, #12]
 800de8c:	665a      	str	r2, [r3, #100]	; 0x64
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de92:	69ba      	ldr	r2, [r7, #24]
 800de94:	8812      	ldrh	r2, [r2, #0]
 800de96:	b292      	uxth	r2, r2
 800de98:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800de9e:	1c9a      	adds	r2, r3, #2
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)2UL;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800deaa:	b29b      	uxth	r3, r3
 800deac:	3b02      	subs	r3, #2
 800deae:	b29a      	uxth	r2, r3
 800deb0:	68fb      	ldr	r3, [r7, #12]
 800deb2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800deb6:	e043      	b.n	800df40 <HAL_SPI_Receive+0x324>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount == 1UL) && ((temp_sr_reg & SPI_SR_RXPLVL_0) != 0UL))
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800debe:	b29b      	uxth	r3, r3
 800dec0:	2b01      	cmp	r3, #1
 800dec2:	d119      	bne.n	800def8 <HAL_SPI_Receive+0x2dc>
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800deca:	2b00      	cmp	r3, #0
 800decc:	d014      	beq.n	800def8 <HAL_SPI_Receive+0x2dc>
      {
#if defined (__GNUC__)
        *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ded2:	69ba      	ldr	r2, [r7, #24]
 800ded4:	8812      	ldrh	r2, [r2, #0]
 800ded6:	b292      	uxth	r2, r2
 800ded8:	801a      	strh	r2, [r3, #0]
#else
        *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dede:	1c9a      	adds	r2, r3, #2
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800deea:	b29b      	uxth	r3, r3
 800deec:	3b01      	subs	r3, #1
 800deee:	b29a      	uxth	r2, r3
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800def6:	e023      	b.n	800df40 <HAL_SPI_Receive+0x324>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800def8:	f7f5 fd98 	bl	8003a2c <HAL_GetTick>
 800defc:	4602      	mov	r2, r0
 800defe:	697b      	ldr	r3, [r7, #20]
 800df00:	1ad3      	subs	r3, r2, r3
 800df02:	683a      	ldr	r2, [r7, #0]
 800df04:	429a      	cmp	r2, r3
 800df06:	d803      	bhi.n	800df10 <HAL_SPI_Receive+0x2f4>
 800df08:	683b      	ldr	r3, [r7, #0]
 800df0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df0e:	d102      	bne.n	800df16 <HAL_SPI_Receive+0x2fa>
 800df10:	683b      	ldr	r3, [r7, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d114      	bne.n	800df40 <HAL_SPI_Receive+0x324>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800df16:	68f8      	ldr	r0, [r7, #12]
 800df18:	f000 f8f2 	bl	800e100 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	2201      	movs	r2, #1
 800df30:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800df3c:	2303      	movs	r3, #3
 800df3e:	e0db      	b.n	800e0f8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df46:	b29b      	uxth	r3, r3
 800df48:	2b00      	cmp	r3, #0
 800df4a:	f47f af69 	bne.w	800de20 <HAL_SPI_Receive+0x204>
 800df4e:	e0c0      	b.n	800e0d2 <HAL_SPI_Receive+0x4b6>
 800df50:	ffff0000 	.word	0xffff0000
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Evaluate state of SR register */
      temp_sr_reg = hspi->Instance->SR;
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	695b      	ldr	r3, [r3, #20]
 800df5a:	613b      	str	r3, [r7, #16]

      /* Check the RXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXP))
 800df5c:	68fb      	ldr	r3, [r7, #12]
 800df5e:	681b      	ldr	r3, [r3, #0]
 800df60:	695b      	ldr	r3, [r3, #20]
 800df62:	f003 0301 	and.w	r3, r3, #1
 800df66:	2b01      	cmp	r3, #1
 800df68:	d117      	bne.n	800df9a <HAL_SPI_Receive+0x37e>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df76:	7812      	ldrb	r2, [r2, #0]
 800df78:	b2d2      	uxtb	r2, r2
 800df7a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800df80:	1c5a      	adds	r2, r3, #1
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800df8c:	b29b      	uxth	r3, r3
 800df8e:	3b01      	subs	r3, #1
 800df90:	b29a      	uxth	r2, r3
 800df92:	68fb      	ldr	r3, [r7, #12]
 800df94:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800df98:	e094      	b.n	800e0c4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXWNE flag if RXP cannot be reached */
      else if ((hspi->RxXferCount < init_max_data_in_fifo) && ((temp_sr_reg & SPI_SR_RXWNE_Msk) != 0UL))
 800df9a:	68fb      	ldr	r3, [r7, #12]
 800df9c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800dfa0:	b29b      	uxth	r3, r3
 800dfa2:	8bfa      	ldrh	r2, [r7, #30]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	d946      	bls.n	800e036 <HAL_SPI_Receive+0x41a>
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d041      	beq.n	800e036 <HAL_SPI_Receive+0x41a>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfb2:	68fb      	ldr	r3, [r7, #12]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfba:	68fb      	ldr	r3, [r7, #12]
 800dfbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfbe:	7812      	ldrb	r2, [r2, #0]
 800dfc0:	b2d2      	uxtb	r2, r2
 800dfc2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfc8:	1c5a      	adds	r2, r3, #1
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dfd6:	68fb      	ldr	r3, [r7, #12]
 800dfd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfda:	7812      	ldrb	r2, [r2, #0]
 800dfdc:	b2d2      	uxtb	r2, r2
 800dfde:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dfe0:	68fb      	ldr	r3, [r7, #12]
 800dfe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dfe4:	1c5a      	adds	r2, r3, #1
 800dfe6:	68fb      	ldr	r3, [r7, #12]
 800dfe8:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800dff6:	7812      	ldrb	r2, [r2, #0]
 800dff8:	b2d2      	uxtb	r2, r2
 800dffa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e000:	1c5a      	adds	r2, r3, #1
 800e002:	68fb      	ldr	r3, [r7, #12]
 800e004:	665a      	str	r2, [r3, #100]	; 0x64
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e012:	7812      	ldrb	r2, [r2, #0]
 800e014:	b2d2      	uxtb	r2, r2
 800e016:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e01c:	1c5a      	adds	r2, r3, #1
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount -= (uint16_t)4UL;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e028:	b29b      	uxth	r3, r3
 800e02a:	3b04      	subs	r3, #4
 800e02c:	b29a      	uxth	r2, r3
 800e02e:	68fb      	ldr	r3, [r7, #12]
 800e030:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e034:	e046      	b.n	800e0c4 <HAL_SPI_Receive+0x4a8>
      }
      /* Check RXPLVL flags when RXWNE cannot be reached */
      else if ((hspi->RxXferCount < 4UL) && ((temp_sr_reg & SPI_SR_RXPLVL_Msk) != 0UL))
 800e036:	68fb      	ldr	r3, [r7, #12]
 800e038:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	2b03      	cmp	r3, #3
 800e040:	d81c      	bhi.n	800e07c <HAL_SPI_Receive+0x460>
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d017      	beq.n	800e07c <HAL_SPI_Receive+0x460>
      {
        *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800e04c:	68fb      	ldr	r3, [r7, #12]
 800e04e:	681b      	ldr	r3, [r3, #0]
 800e050:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800e054:	68fb      	ldr	r3, [r7, #12]
 800e056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e058:	7812      	ldrb	r2, [r2, #0]
 800e05a:	b2d2      	uxtb	r2, r2
 800e05c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800e05e:	68fb      	ldr	r3, [r7, #12]
 800e060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e062:	1c5a      	adds	r2, r3, #1
 800e064:	68fb      	ldr	r3, [r7, #12]
 800e066:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e06e:	b29b      	uxth	r3, r3
 800e070:	3b01      	subs	r3, #1
 800e072:	b29a      	uxth	r2, r3
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e07a:	e023      	b.n	800e0c4 <HAL_SPI_Receive+0x4a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800e07c:	f7f5 fcd6 	bl	8003a2c <HAL_GetTick>
 800e080:	4602      	mov	r2, r0
 800e082:	697b      	ldr	r3, [r7, #20]
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	429a      	cmp	r2, r3
 800e08a:	d803      	bhi.n	800e094 <HAL_SPI_Receive+0x478>
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e092:	d102      	bne.n	800e09a <HAL_SPI_Receive+0x47e>
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d114      	bne.n	800e0c4 <HAL_SPI_Receive+0x4a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800e09a:	68f8      	ldr	r0, [r7, #12]
 800e09c:	f000 f830 	bl	800e100 <SPI_CloseTransfer>

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	2201      	movs	r2, #1
 800e0b4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	2200      	movs	r2, #0
 800e0bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e0c0:	2303      	movs	r3, #3
 800e0c2:	e019      	b.n	800e0f8 <HAL_SPI_Receive+0x4dc>
    while (hspi->RxXferCount > 0UL)
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e0ca:	b29b      	uxth	r3, r3
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	f47f af41 	bne.w	800df54 <HAL_SPI_Receive+0x338>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	f000 f814 	bl	800e100 <SPI_CloseTransfer>

  hspi->State = HAL_SPI_STATE_READY;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2201      	movs	r2, #1
 800e0dc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800e0e0:	68fb      	ldr	r3, [r7, #12]
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80


  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d001      	beq.n	800e0f6 <HAL_SPI_Receive+0x4da>
  {
    return HAL_ERROR;
 800e0f2:	2301      	movs	r3, #1
 800e0f4:	e000      	b.n	800e0f8 <HAL_SPI_Receive+0x4dc>
  }
  else
  {
    return HAL_OK;
 800e0f6:	2300      	movs	r3, #0
  }
}
 800e0f8:	4618      	mov	r0, r3
 800e0fa:	3720      	adds	r7, #32
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	bd80      	pop	{r7, pc}

0800e100 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800e100:	b480      	push	{r7}
 800e102:	b085      	sub	sp, #20
 800e104:	af00      	add	r7, sp, #0
 800e106:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	695b      	ldr	r3, [r3, #20]
 800e10e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	699a      	ldr	r2, [r3, #24]
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	f042 0208 	orr.w	r2, r2, #8
 800e11e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	699a      	ldr	r2, [r3, #24]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f042 0210 	orr.w	r2, r2, #16
 800e12e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	681a      	ldr	r2, [r3, #0]
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	f022 0201 	bic.w	r2, r2, #1
 800e13e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	681b      	ldr	r3, [r3, #0]
 800e144:	6919      	ldr	r1, [r3, #16]
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681a      	ldr	r2, [r3, #0]
 800e14a:	4b3c      	ldr	r3, [pc, #240]	; (800e23c <SPI_CloseTransfer+0x13c>)
 800e14c:	400b      	ands	r3, r1
 800e14e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	689a      	ldr	r2, [r3, #8]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	681b      	ldr	r3, [r3, #0]
 800e15a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800e15e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e166:	b2db      	uxtb	r3, r3
 800e168:	2b04      	cmp	r3, #4
 800e16a:	d014      	beq.n	800e196 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	f003 0320 	and.w	r3, r3, #32
 800e172:	2b00      	cmp	r3, #0
 800e174:	d00f      	beq.n	800e196 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e17c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	699a      	ldr	r2, [r3, #24]
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	f042 0220 	orr.w	r2, r2, #32
 800e194:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e19c:	b2db      	uxtb	r3, r3
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d014      	beq.n	800e1cc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d00f      	beq.n	800e1cc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1b2:	f043 0204 	orr.w	r2, r3, #4
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	699a      	ldr	r2, [r3, #24]
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e1ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	d00f      	beq.n	800e1f6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e1dc:	f043 0201 	orr.w	r2, r3, #1
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	681b      	ldr	r3, [r3, #0]
 800e1ea:	699a      	ldr	r2, [r3, #24]
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800e1f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00f      	beq.n	800e220 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e206:	f043 0208 	orr.w	r2, r3, #8
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	699a      	ldr	r2, [r3, #24]
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800e21e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2200      	movs	r2, #0
 800e224:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	2200      	movs	r2, #0
 800e22c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800e230:	bf00      	nop
 800e232:	3714      	adds	r7, #20
 800e234:	46bd      	mov	sp, r7
 800e236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23a:	4770      	bx	lr
 800e23c:	fffffc90 	.word	0xfffffc90

0800e240 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 800e240:	b480      	push	{r7}
 800e242:	b085      	sub	sp, #20
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e24c:	095b      	lsrs	r3, r3, #5
 800e24e:	3301      	adds	r3, #1
 800e250:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	68db      	ldr	r3, [r3, #12]
 800e256:	3301      	adds	r3, #1
 800e258:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800e25a:	68bb      	ldr	r3, [r7, #8]
 800e25c:	3307      	adds	r3, #7
 800e25e:	08db      	lsrs	r3, r3, #3
 800e260:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	68fa      	ldr	r2, [r7, #12]
 800e266:	fb02 f303 	mul.w	r3, r2, r3
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3714      	adds	r7, #20
 800e26e:	46bd      	mov	sp, r7
 800e270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e274:	4770      	bx	lr

0800e276 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b082      	sub	sp, #8
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2b00      	cmp	r3, #0
 800e282:	d101      	bne.n	800e288 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e284:	2301      	movs	r3, #1
 800e286:	e049      	b.n	800e31c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e28e:	b2db      	uxtb	r3, r3
 800e290:	2b00      	cmp	r3, #0
 800e292:	d106      	bne.n	800e2a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	2200      	movs	r2, #0
 800e298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e29c:	6878      	ldr	r0, [r7, #4]
 800e29e:	f7f4 ff71 	bl	8003184 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	2202      	movs	r2, #2
 800e2a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681a      	ldr	r2, [r3, #0]
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	3304      	adds	r3, #4
 800e2b2:	4619      	mov	r1, r3
 800e2b4:	4610      	mov	r0, r2
 800e2b6:	f000 fe7d 	bl	800efb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	2201      	movs	r2, #1
 800e2ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	2201      	movs	r2, #1
 800e2d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	2201      	movs	r2, #1
 800e2f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	2201      	movs	r2, #1
 800e306:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2201      	movs	r2, #1
 800e30e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	2201      	movs	r2, #1
 800e316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e31a:	2300      	movs	r3, #0
}
 800e31c:	4618      	mov	r0, r3
 800e31e:	3708      	adds	r7, #8
 800e320:	46bd      	mov	sp, r7
 800e322:	bd80      	pop	{r7, pc}

0800e324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e324:	b480      	push	{r7}
 800e326:	b085      	sub	sp, #20
 800e328:	af00      	add	r7, sp, #0
 800e32a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e332:	b2db      	uxtb	r3, r3
 800e334:	2b01      	cmp	r3, #1
 800e336:	d001      	beq.n	800e33c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e338:	2301      	movs	r3, #1
 800e33a:	e054      	b.n	800e3e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	2202      	movs	r2, #2
 800e340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	68da      	ldr	r2, [r3, #12]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	f042 0201 	orr.w	r2, r2, #1
 800e352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	4a26      	ldr	r2, [pc, #152]	; (800e3f4 <HAL_TIM_Base_Start_IT+0xd0>)
 800e35a:	4293      	cmp	r3, r2
 800e35c:	d022      	beq.n	800e3a4 <HAL_TIM_Base_Start_IT+0x80>
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	681b      	ldr	r3, [r3, #0]
 800e362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e366:	d01d      	beq.n	800e3a4 <HAL_TIM_Base_Start_IT+0x80>
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	4a22      	ldr	r2, [pc, #136]	; (800e3f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800e36e:	4293      	cmp	r3, r2
 800e370:	d018      	beq.n	800e3a4 <HAL_TIM_Base_Start_IT+0x80>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	4a21      	ldr	r2, [pc, #132]	; (800e3fc <HAL_TIM_Base_Start_IT+0xd8>)
 800e378:	4293      	cmp	r3, r2
 800e37a:	d013      	beq.n	800e3a4 <HAL_TIM_Base_Start_IT+0x80>
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	4a1f      	ldr	r2, [pc, #124]	; (800e400 <HAL_TIM_Base_Start_IT+0xdc>)
 800e382:	4293      	cmp	r3, r2
 800e384:	d00e      	beq.n	800e3a4 <HAL_TIM_Base_Start_IT+0x80>
 800e386:	687b      	ldr	r3, [r7, #4]
 800e388:	681b      	ldr	r3, [r3, #0]
 800e38a:	4a1e      	ldr	r2, [pc, #120]	; (800e404 <HAL_TIM_Base_Start_IT+0xe0>)
 800e38c:	4293      	cmp	r3, r2
 800e38e:	d009      	beq.n	800e3a4 <HAL_TIM_Base_Start_IT+0x80>
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	4a1c      	ldr	r2, [pc, #112]	; (800e408 <HAL_TIM_Base_Start_IT+0xe4>)
 800e396:	4293      	cmp	r3, r2
 800e398:	d004      	beq.n	800e3a4 <HAL_TIM_Base_Start_IT+0x80>
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	4a1b      	ldr	r2, [pc, #108]	; (800e40c <HAL_TIM_Base_Start_IT+0xe8>)
 800e3a0:	4293      	cmp	r3, r2
 800e3a2:	d115      	bne.n	800e3d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	689a      	ldr	r2, [r3, #8]
 800e3aa:	4b19      	ldr	r3, [pc, #100]	; (800e410 <HAL_TIM_Base_Start_IT+0xec>)
 800e3ac:	4013      	ands	r3, r2
 800e3ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2b06      	cmp	r3, #6
 800e3b4:	d015      	beq.n	800e3e2 <HAL_TIM_Base_Start_IT+0xbe>
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e3bc:	d011      	beq.n	800e3e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	681b      	ldr	r3, [r3, #0]
 800e3c2:	681a      	ldr	r2, [r3, #0]
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f042 0201 	orr.w	r2, r2, #1
 800e3cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3ce:	e008      	b.n	800e3e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	681a      	ldr	r2, [r3, #0]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	f042 0201 	orr.w	r2, r2, #1
 800e3de:	601a      	str	r2, [r3, #0]
 800e3e0:	e000      	b.n	800e3e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e3e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e3e4:	2300      	movs	r3, #0
}
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	3714      	adds	r7, #20
 800e3ea:	46bd      	mov	sp, r7
 800e3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f0:	4770      	bx	lr
 800e3f2:	bf00      	nop
 800e3f4:	40010000 	.word	0x40010000
 800e3f8:	40000400 	.word	0x40000400
 800e3fc:	40000800 	.word	0x40000800
 800e400:	40000c00 	.word	0x40000c00
 800e404:	40010400 	.word	0x40010400
 800e408:	40001800 	.word	0x40001800
 800e40c:	40014000 	.word	0x40014000
 800e410:	00010007 	.word	0x00010007

0800e414 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b084      	sub	sp, #16
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e41e:	2300      	movs	r3, #0
 800e420:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800e422:	683b      	ldr	r3, [r7, #0]
 800e424:	2b00      	cmp	r3, #0
 800e426:	d109      	bne.n	800e43c <HAL_TIM_OC_Start_IT+0x28>
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800e42e:	b2db      	uxtb	r3, r3
 800e430:	2b01      	cmp	r3, #1
 800e432:	bf14      	ite	ne
 800e434:	2301      	movne	r3, #1
 800e436:	2300      	moveq	r3, #0
 800e438:	b2db      	uxtb	r3, r3
 800e43a:	e03c      	b.n	800e4b6 <HAL_TIM_OC_Start_IT+0xa2>
 800e43c:	683b      	ldr	r3, [r7, #0]
 800e43e:	2b04      	cmp	r3, #4
 800e440:	d109      	bne.n	800e456 <HAL_TIM_OC_Start_IT+0x42>
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800e448:	b2db      	uxtb	r3, r3
 800e44a:	2b01      	cmp	r3, #1
 800e44c:	bf14      	ite	ne
 800e44e:	2301      	movne	r3, #1
 800e450:	2300      	moveq	r3, #0
 800e452:	b2db      	uxtb	r3, r3
 800e454:	e02f      	b.n	800e4b6 <HAL_TIM_OC_Start_IT+0xa2>
 800e456:	683b      	ldr	r3, [r7, #0]
 800e458:	2b08      	cmp	r3, #8
 800e45a:	d109      	bne.n	800e470 <HAL_TIM_OC_Start_IT+0x5c>
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800e462:	b2db      	uxtb	r3, r3
 800e464:	2b01      	cmp	r3, #1
 800e466:	bf14      	ite	ne
 800e468:	2301      	movne	r3, #1
 800e46a:	2300      	moveq	r3, #0
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	e022      	b.n	800e4b6 <HAL_TIM_OC_Start_IT+0xa2>
 800e470:	683b      	ldr	r3, [r7, #0]
 800e472:	2b0c      	cmp	r3, #12
 800e474:	d109      	bne.n	800e48a <HAL_TIM_OC_Start_IT+0x76>
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800e47c:	b2db      	uxtb	r3, r3
 800e47e:	2b01      	cmp	r3, #1
 800e480:	bf14      	ite	ne
 800e482:	2301      	movne	r3, #1
 800e484:	2300      	moveq	r3, #0
 800e486:	b2db      	uxtb	r3, r3
 800e488:	e015      	b.n	800e4b6 <HAL_TIM_OC_Start_IT+0xa2>
 800e48a:	683b      	ldr	r3, [r7, #0]
 800e48c:	2b10      	cmp	r3, #16
 800e48e:	d109      	bne.n	800e4a4 <HAL_TIM_OC_Start_IT+0x90>
 800e490:	687b      	ldr	r3, [r7, #4]
 800e492:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e496:	b2db      	uxtb	r3, r3
 800e498:	2b01      	cmp	r3, #1
 800e49a:	bf14      	ite	ne
 800e49c:	2301      	movne	r3, #1
 800e49e:	2300      	moveq	r3, #0
 800e4a0:	b2db      	uxtb	r3, r3
 800e4a2:	e008      	b.n	800e4b6 <HAL_TIM_OC_Start_IT+0xa2>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e4aa:	b2db      	uxtb	r3, r3
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	bf14      	ite	ne
 800e4b0:	2301      	movne	r3, #1
 800e4b2:	2300      	moveq	r3, #0
 800e4b4:	b2db      	uxtb	r3, r3
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d001      	beq.n	800e4be <HAL_TIM_OC_Start_IT+0xaa>
  {
    return HAL_ERROR;
 800e4ba:	2301      	movs	r3, #1
 800e4bc:	e0ec      	b.n	800e698 <HAL_TIM_OC_Start_IT+0x284>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d104      	bne.n	800e4ce <HAL_TIM_OC_Start_IT+0xba>
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	2202      	movs	r2, #2
 800e4c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e4cc:	e023      	b.n	800e516 <HAL_TIM_OC_Start_IT+0x102>
 800e4ce:	683b      	ldr	r3, [r7, #0]
 800e4d0:	2b04      	cmp	r3, #4
 800e4d2:	d104      	bne.n	800e4de <HAL_TIM_OC_Start_IT+0xca>
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	2202      	movs	r2, #2
 800e4d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e4dc:	e01b      	b.n	800e516 <HAL_TIM_OC_Start_IT+0x102>
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	2b08      	cmp	r3, #8
 800e4e2:	d104      	bne.n	800e4ee <HAL_TIM_OC_Start_IT+0xda>
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	2202      	movs	r2, #2
 800e4e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e4ec:	e013      	b.n	800e516 <HAL_TIM_OC_Start_IT+0x102>
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	2b0c      	cmp	r3, #12
 800e4f2:	d104      	bne.n	800e4fe <HAL_TIM_OC_Start_IT+0xea>
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	2202      	movs	r2, #2
 800e4f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e4fc:	e00b      	b.n	800e516 <HAL_TIM_OC_Start_IT+0x102>
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	2b10      	cmp	r3, #16
 800e502:	d104      	bne.n	800e50e <HAL_TIM_OC_Start_IT+0xfa>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2202      	movs	r2, #2
 800e508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e50c:	e003      	b.n	800e516 <HAL_TIM_OC_Start_IT+0x102>
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2202      	movs	r2, #2
 800e512:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  switch (Channel)
 800e516:	683b      	ldr	r3, [r7, #0]
 800e518:	2b0c      	cmp	r3, #12
 800e51a:	d841      	bhi.n	800e5a0 <HAL_TIM_OC_Start_IT+0x18c>
 800e51c:	a201      	add	r2, pc, #4	; (adr r2, 800e524 <HAL_TIM_OC_Start_IT+0x110>)
 800e51e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e522:	bf00      	nop
 800e524:	0800e559 	.word	0x0800e559
 800e528:	0800e5a1 	.word	0x0800e5a1
 800e52c:	0800e5a1 	.word	0x0800e5a1
 800e530:	0800e5a1 	.word	0x0800e5a1
 800e534:	0800e56b 	.word	0x0800e56b
 800e538:	0800e5a1 	.word	0x0800e5a1
 800e53c:	0800e5a1 	.word	0x0800e5a1
 800e540:	0800e5a1 	.word	0x0800e5a1
 800e544:	0800e57d 	.word	0x0800e57d
 800e548:	0800e5a1 	.word	0x0800e5a1
 800e54c:	0800e5a1 	.word	0x0800e5a1
 800e550:	0800e5a1 	.word	0x0800e5a1
 800e554:	0800e58f 	.word	0x0800e58f
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	68da      	ldr	r2, [r3, #12]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	f042 0202 	orr.w	r2, r2, #2
 800e566:	60da      	str	r2, [r3, #12]
      break;
 800e568:	e01d      	b.n	800e5a6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	68da      	ldr	r2, [r3, #12]
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	681b      	ldr	r3, [r3, #0]
 800e574:	f042 0204 	orr.w	r2, r2, #4
 800e578:	60da      	str	r2, [r3, #12]
      break;
 800e57a:	e014      	b.n	800e5a6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	681b      	ldr	r3, [r3, #0]
 800e580:	68da      	ldr	r2, [r3, #12]
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	681b      	ldr	r3, [r3, #0]
 800e586:	f042 0208 	orr.w	r2, r2, #8
 800e58a:	60da      	str	r2, [r3, #12]
      break;
 800e58c:	e00b      	b.n	800e5a6 <HAL_TIM_OC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	68da      	ldr	r2, [r3, #12]
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	f042 0210 	orr.w	r2, r2, #16
 800e59c:	60da      	str	r2, [r3, #12]
      break;
 800e59e:	e002      	b.n	800e5a6 <HAL_TIM_OC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	73fb      	strb	r3, [r7, #15]
      break;
 800e5a4:	bf00      	nop
  }

  if (status == HAL_OK)
 800e5a6:	7bfb      	ldrb	r3, [r7, #15]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d174      	bne.n	800e696 <HAL_TIM_OC_Start_IT+0x282>
  {
    /* Enable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800e5ac:	687b      	ldr	r3, [r7, #4]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	6839      	ldr	r1, [r7, #0]
 800e5b4:	4618      	mov	r0, r3
 800e5b6:	f001 f917 	bl	800f7e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	4a38      	ldr	r2, [pc, #224]	; (800e6a0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e5c0:	4293      	cmp	r3, r2
 800e5c2:	d013      	beq.n	800e5ec <HAL_TIM_OC_Start_IT+0x1d8>
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	4a36      	ldr	r2, [pc, #216]	; (800e6a4 <HAL_TIM_OC_Start_IT+0x290>)
 800e5ca:	4293      	cmp	r3, r2
 800e5cc:	d00e      	beq.n	800e5ec <HAL_TIM_OC_Start_IT+0x1d8>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	681b      	ldr	r3, [r3, #0]
 800e5d2:	4a35      	ldr	r2, [pc, #212]	; (800e6a8 <HAL_TIM_OC_Start_IT+0x294>)
 800e5d4:	4293      	cmp	r3, r2
 800e5d6:	d009      	beq.n	800e5ec <HAL_TIM_OC_Start_IT+0x1d8>
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	4a33      	ldr	r2, [pc, #204]	; (800e6ac <HAL_TIM_OC_Start_IT+0x298>)
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d004      	beq.n	800e5ec <HAL_TIM_OC_Start_IT+0x1d8>
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	4a32      	ldr	r2, [pc, #200]	; (800e6b0 <HAL_TIM_OC_Start_IT+0x29c>)
 800e5e8:	4293      	cmp	r3, r2
 800e5ea:	d101      	bne.n	800e5f0 <HAL_TIM_OC_Start_IT+0x1dc>
 800e5ec:	2301      	movs	r3, #1
 800e5ee:	e000      	b.n	800e5f2 <HAL_TIM_OC_Start_IT+0x1de>
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d007      	beq.n	800e606 <HAL_TIM_OC_Start_IT+0x1f2>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	681b      	ldr	r3, [r3, #0]
 800e600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800e604:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	4a25      	ldr	r2, [pc, #148]	; (800e6a0 <HAL_TIM_OC_Start_IT+0x28c>)
 800e60c:	4293      	cmp	r3, r2
 800e60e:	d022      	beq.n	800e656 <HAL_TIM_OC_Start_IT+0x242>
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e618:	d01d      	beq.n	800e656 <HAL_TIM_OC_Start_IT+0x242>
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	4a25      	ldr	r2, [pc, #148]	; (800e6b4 <HAL_TIM_OC_Start_IT+0x2a0>)
 800e620:	4293      	cmp	r3, r2
 800e622:	d018      	beq.n	800e656 <HAL_TIM_OC_Start_IT+0x242>
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	4a23      	ldr	r2, [pc, #140]	; (800e6b8 <HAL_TIM_OC_Start_IT+0x2a4>)
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d013      	beq.n	800e656 <HAL_TIM_OC_Start_IT+0x242>
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	4a22      	ldr	r2, [pc, #136]	; (800e6bc <HAL_TIM_OC_Start_IT+0x2a8>)
 800e634:	4293      	cmp	r3, r2
 800e636:	d00e      	beq.n	800e656 <HAL_TIM_OC_Start_IT+0x242>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	4a19      	ldr	r2, [pc, #100]	; (800e6a4 <HAL_TIM_OC_Start_IT+0x290>)
 800e63e:	4293      	cmp	r3, r2
 800e640:	d009      	beq.n	800e656 <HAL_TIM_OC_Start_IT+0x242>
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4a1e      	ldr	r2, [pc, #120]	; (800e6c0 <HAL_TIM_OC_Start_IT+0x2ac>)
 800e648:	4293      	cmp	r3, r2
 800e64a:	d004      	beq.n	800e656 <HAL_TIM_OC_Start_IT+0x242>
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	4a15      	ldr	r2, [pc, #84]	; (800e6a8 <HAL_TIM_OC_Start_IT+0x294>)
 800e652:	4293      	cmp	r3, r2
 800e654:	d115      	bne.n	800e682 <HAL_TIM_OC_Start_IT+0x26e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	689a      	ldr	r2, [r3, #8]
 800e65c:	4b19      	ldr	r3, [pc, #100]	; (800e6c4 <HAL_TIM_OC_Start_IT+0x2b0>)
 800e65e:	4013      	ands	r3, r2
 800e660:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	2b06      	cmp	r3, #6
 800e666:	d015      	beq.n	800e694 <HAL_TIM_OC_Start_IT+0x280>
 800e668:	68bb      	ldr	r3, [r7, #8]
 800e66a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e66e:	d011      	beq.n	800e694 <HAL_TIM_OC_Start_IT+0x280>
      {
        __HAL_TIM_ENABLE(htim);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	681a      	ldr	r2, [r3, #0]
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	f042 0201 	orr.w	r2, r2, #1
 800e67e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e680:	e008      	b.n	800e694 <HAL_TIM_OC_Start_IT+0x280>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	f042 0201 	orr.w	r2, r2, #1
 800e690:	601a      	str	r2, [r3, #0]
 800e692:	e000      	b.n	800e696 <HAL_TIM_OC_Start_IT+0x282>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e694:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800e696:	7bfb      	ldrb	r3, [r7, #15]
}
 800e698:	4618      	mov	r0, r3
 800e69a:	3710      	adds	r7, #16
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}
 800e6a0:	40010000 	.word	0x40010000
 800e6a4:	40010400 	.word	0x40010400
 800e6a8:	40014000 	.word	0x40014000
 800e6ac:	40014400 	.word	0x40014400
 800e6b0:	40014800 	.word	0x40014800
 800e6b4:	40000400 	.word	0x40000400
 800e6b8:	40000800 	.word	0x40000800
 800e6bc:	40000c00 	.word	0x40000c00
 800e6c0:	40001800 	.word	0x40001800
 800e6c4:	00010007 	.word	0x00010007

0800e6c8 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b084      	sub	sp, #16
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	6078      	str	r0, [r7, #4]
 800e6d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e6d2:	2300      	movs	r3, #0
 800e6d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 800e6d6:	683b      	ldr	r3, [r7, #0]
 800e6d8:	2b0c      	cmp	r3, #12
 800e6da:	d841      	bhi.n	800e760 <HAL_TIM_OC_Stop_IT+0x98>
 800e6dc:	a201      	add	r2, pc, #4	; (adr r2, 800e6e4 <HAL_TIM_OC_Stop_IT+0x1c>)
 800e6de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e6e2:	bf00      	nop
 800e6e4:	0800e719 	.word	0x0800e719
 800e6e8:	0800e761 	.word	0x0800e761
 800e6ec:	0800e761 	.word	0x0800e761
 800e6f0:	0800e761 	.word	0x0800e761
 800e6f4:	0800e72b 	.word	0x0800e72b
 800e6f8:	0800e761 	.word	0x0800e761
 800e6fc:	0800e761 	.word	0x0800e761
 800e700:	0800e761 	.word	0x0800e761
 800e704:	0800e73d 	.word	0x0800e73d
 800e708:	0800e761 	.word	0x0800e761
 800e70c:	0800e761 	.word	0x0800e761
 800e710:	0800e761 	.word	0x0800e761
 800e714:	0800e74f 	.word	0x0800e74f
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	68da      	ldr	r2, [r3, #12]
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	f022 0202 	bic.w	r2, r2, #2
 800e726:	60da      	str	r2, [r3, #12]
      break;
 800e728:	e01d      	b.n	800e766 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	68da      	ldr	r2, [r3, #12]
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	681b      	ldr	r3, [r3, #0]
 800e734:	f022 0204 	bic.w	r2, r2, #4
 800e738:	60da      	str	r2, [r3, #12]
      break;
 800e73a:	e014      	b.n	800e766 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	68da      	ldr	r2, [r3, #12]
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	681b      	ldr	r3, [r3, #0]
 800e746:	f022 0208 	bic.w	r2, r2, #8
 800e74a:	60da      	str	r2, [r3, #12]
      break;
 800e74c:	e00b      	b.n	800e766 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	68da      	ldr	r2, [r3, #12]
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	f022 0210 	bic.w	r2, r2, #16
 800e75c:	60da      	str	r2, [r3, #12]
      break;
 800e75e:	e002      	b.n	800e766 <HAL_TIM_OC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800e760:	2301      	movs	r3, #1
 800e762:	73fb      	strb	r3, [r7, #15]
      break;
 800e764:	bf00      	nop
  }

  if (status == HAL_OK)
 800e766:	7bfb      	ldrb	r3, [r7, #15]
 800e768:	2b00      	cmp	r3, #0
 800e76a:	f040 8081 	bne.w	800e870 <HAL_TIM_OC_Stop_IT+0x1a8>
  {
    /* Disable the Output compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2200      	movs	r2, #0
 800e774:	6839      	ldr	r1, [r7, #0]
 800e776:	4618      	mov	r0, r3
 800e778:	f001 f836 	bl	800f7e8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	4a3e      	ldr	r2, [pc, #248]	; (800e87c <HAL_TIM_OC_Stop_IT+0x1b4>)
 800e782:	4293      	cmp	r3, r2
 800e784:	d013      	beq.n	800e7ae <HAL_TIM_OC_Stop_IT+0xe6>
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	4a3d      	ldr	r2, [pc, #244]	; (800e880 <HAL_TIM_OC_Stop_IT+0x1b8>)
 800e78c:	4293      	cmp	r3, r2
 800e78e:	d00e      	beq.n	800e7ae <HAL_TIM_OC_Stop_IT+0xe6>
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	4a3b      	ldr	r2, [pc, #236]	; (800e884 <HAL_TIM_OC_Stop_IT+0x1bc>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d009      	beq.n	800e7ae <HAL_TIM_OC_Stop_IT+0xe6>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a3a      	ldr	r2, [pc, #232]	; (800e888 <HAL_TIM_OC_Stop_IT+0x1c0>)
 800e7a0:	4293      	cmp	r3, r2
 800e7a2:	d004      	beq.n	800e7ae <HAL_TIM_OC_Stop_IT+0xe6>
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a38      	ldr	r2, [pc, #224]	; (800e88c <HAL_TIM_OC_Stop_IT+0x1c4>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d101      	bne.n	800e7b2 <HAL_TIM_OC_Stop_IT+0xea>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	e000      	b.n	800e7b4 <HAL_TIM_OC_Stop_IT+0xec>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d017      	beq.n	800e7e8 <HAL_TIM_OC_Stop_IT+0x120>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	681b      	ldr	r3, [r3, #0]
 800e7bc:	6a1a      	ldr	r2, [r3, #32]
 800e7be:	f241 1311 	movw	r3, #4369	; 0x1111
 800e7c2:	4013      	ands	r3, r2
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d10f      	bne.n	800e7e8 <HAL_TIM_OC_Stop_IT+0x120>
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	6a1a      	ldr	r2, [r3, #32]
 800e7ce:	f240 4344 	movw	r3, #1092	; 0x444
 800e7d2:	4013      	ands	r3, r2
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d107      	bne.n	800e7e8 <HAL_TIM_OC_Stop_IT+0x120>
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800e7e6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	6a1a      	ldr	r2, [r3, #32]
 800e7ee:	f241 1311 	movw	r3, #4369	; 0x1111
 800e7f2:	4013      	ands	r3, r2
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d10f      	bne.n	800e818 <HAL_TIM_OC_Stop_IT+0x150>
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	6a1a      	ldr	r2, [r3, #32]
 800e7fe:	f240 4344 	movw	r3, #1092	; 0x444
 800e802:	4013      	ands	r3, r2
 800e804:	2b00      	cmp	r3, #0
 800e806:	d107      	bne.n	800e818 <HAL_TIM_OC_Stop_IT+0x150>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	681a      	ldr	r2, [r3, #0]
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f022 0201 	bic.w	r2, r2, #1
 800e816:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d104      	bne.n	800e828 <HAL_TIM_OC_Stop_IT+0x160>
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2201      	movs	r2, #1
 800e822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e826:	e023      	b.n	800e870 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e828:	683b      	ldr	r3, [r7, #0]
 800e82a:	2b04      	cmp	r3, #4
 800e82c:	d104      	bne.n	800e838 <HAL_TIM_OC_Stop_IT+0x170>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2201      	movs	r2, #1
 800e832:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e836:	e01b      	b.n	800e870 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e838:	683b      	ldr	r3, [r7, #0]
 800e83a:	2b08      	cmp	r3, #8
 800e83c:	d104      	bne.n	800e848 <HAL_TIM_OC_Stop_IT+0x180>
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e846:	e013      	b.n	800e870 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e848:	683b      	ldr	r3, [r7, #0]
 800e84a:	2b0c      	cmp	r3, #12
 800e84c:	d104      	bne.n	800e858 <HAL_TIM_OC_Stop_IT+0x190>
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2201      	movs	r2, #1
 800e852:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e856:	e00b      	b.n	800e870 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e858:	683b      	ldr	r3, [r7, #0]
 800e85a:	2b10      	cmp	r3, #16
 800e85c:	d104      	bne.n	800e868 <HAL_TIM_OC_Stop_IT+0x1a0>
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2201      	movs	r2, #1
 800e862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e866:	e003      	b.n	800e870 <HAL_TIM_OC_Stop_IT+0x1a8>
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2201      	movs	r2, #1
 800e86c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  }

  /* Return function status */
  return status;
 800e870:	7bfb      	ldrb	r3, [r7, #15]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
 800e87a:	bf00      	nop
 800e87c:	40010000 	.word	0x40010000
 800e880:	40010400 	.word	0x40010400
 800e884:	40014000 	.word	0x40014000
 800e888:	40014400 	.word	0x40014400
 800e88c:	40014800 	.word	0x40014800

0800e890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800e890:	b580      	push	{r7, lr}
 800e892:	b082      	sub	sp, #8
 800e894:	af00      	add	r7, sp, #0
 800e896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d101      	bne.n	800e8a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800e89e:	2301      	movs	r3, #1
 800e8a0:	e049      	b.n	800e936 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d106      	bne.n	800e8bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	2200      	movs	r2, #0
 800e8b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f000 f841 	bl	800e93e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	2202      	movs	r2, #2
 800e8c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	3304      	adds	r3, #4
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	4610      	mov	r0, r2
 800e8d0:	f000 fb70 	bl	800efb4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	2201      	movs	r2, #1
 800e8d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	2201      	movs	r2, #1
 800e8e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	2201      	movs	r2, #1
 800e8e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	2201      	movs	r2, #1
 800e8f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2201      	movs	r2, #1
 800e8f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2201      	movs	r2, #1
 800e900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	2201      	movs	r2, #1
 800e908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2201      	movs	r2, #1
 800e910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2201      	movs	r2, #1
 800e918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2201      	movs	r2, #1
 800e920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	2201      	movs	r2, #1
 800e928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	2201      	movs	r2, #1
 800e930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e934:	2300      	movs	r3, #0
}
 800e936:	4618      	mov	r0, r3
 800e938:	3708      	adds	r7, #8
 800e93a:	46bd      	mov	sp, r7
 800e93c:	bd80      	pop	{r7, pc}

0800e93e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800e93e:	b480      	push	{r7}
 800e940:	b083      	sub	sp, #12
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800e946:	bf00      	nop
 800e948:	370c      	adds	r7, #12
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr

0800e952 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e952:	b580      	push	{r7, lr}
 800e954:	b084      	sub	sp, #16
 800e956:	af00      	add	r7, sp, #0
 800e958:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	691b      	ldr	r3, [r3, #16]
 800e968:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800e96a:	68bb      	ldr	r3, [r7, #8]
 800e96c:	f003 0302 	and.w	r3, r3, #2
 800e970:	2b00      	cmp	r3, #0
 800e972:	d020      	beq.n	800e9b6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800e974:	68fb      	ldr	r3, [r7, #12]
 800e976:	f003 0302 	and.w	r3, r3, #2
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d01b      	beq.n	800e9b6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f06f 0202 	mvn.w	r2, #2
 800e986:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	2201      	movs	r2, #1
 800e98c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	681b      	ldr	r3, [r3, #0]
 800e992:	699b      	ldr	r3, [r3, #24]
 800e994:	f003 0303 	and.w	r3, r3, #3
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d003      	beq.n	800e9a4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e99c:	6878      	ldr	r0, [r7, #4]
 800e99e:	f000 faeb 	bl	800ef78 <HAL_TIM_IC_CaptureCallback>
 800e9a2:	e005      	b.n	800e9b0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f7f1 fe1d 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9aa:	6878      	ldr	r0, [r7, #4]
 800e9ac:	f000 faee 	bl	800ef8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2200      	movs	r2, #0
 800e9b4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800e9b6:	68bb      	ldr	r3, [r7, #8]
 800e9b8:	f003 0304 	and.w	r3, r3, #4
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	d020      	beq.n	800ea02 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800e9c0:	68fb      	ldr	r3, [r7, #12]
 800e9c2:	f003 0304 	and.w	r3, r3, #4
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d01b      	beq.n	800ea02 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	f06f 0204 	mvn.w	r2, #4
 800e9d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2202      	movs	r2, #2
 800e9d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	699b      	ldr	r3, [r3, #24]
 800e9e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d003      	beq.n	800e9f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f000 fac5 	bl	800ef78 <HAL_TIM_IC_CaptureCallback>
 800e9ee:	e005      	b.n	800e9fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e9f0:	6878      	ldr	r0, [r7, #4]
 800e9f2:	f7f1 fdf7 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 fac8 	bl	800ef8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	2200      	movs	r2, #0
 800ea00:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800ea02:	68bb      	ldr	r3, [r7, #8]
 800ea04:	f003 0308 	and.w	r3, r3, #8
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d020      	beq.n	800ea4e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	f003 0308 	and.w	r3, r3, #8
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d01b      	beq.n	800ea4e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	681b      	ldr	r3, [r3, #0]
 800ea1a:	f06f 0208 	mvn.w	r2, #8
 800ea1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2204      	movs	r2, #4
 800ea24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	69db      	ldr	r3, [r3, #28]
 800ea2c:	f003 0303 	and.w	r3, r3, #3
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d003      	beq.n	800ea3c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea34:	6878      	ldr	r0, [r7, #4]
 800ea36:	f000 fa9f 	bl	800ef78 <HAL_TIM_IC_CaptureCallback>
 800ea3a:	e005      	b.n	800ea48 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea3c:	6878      	ldr	r0, [r7, #4]
 800ea3e:	f7f1 fdd1 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 faa2 	bl	800ef8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	f003 0310 	and.w	r3, r3, #16
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d020      	beq.n	800ea9a <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	f003 0310 	and.w	r3, r3, #16
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d01b      	beq.n	800ea9a <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	f06f 0210 	mvn.w	r2, #16
 800ea6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2208      	movs	r2, #8
 800ea70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	69db      	ldr	r3, [r3, #28]
 800ea78:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d003      	beq.n	800ea88 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ea80:	6878      	ldr	r0, [r7, #4]
 800ea82:	f000 fa79 	bl	800ef78 <HAL_TIM_IC_CaptureCallback>
 800ea86:	e005      	b.n	800ea94 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea88:	6878      	ldr	r0, [r7, #4]
 800ea8a:	f7f1 fdab 	bl	80005e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea8e:	6878      	ldr	r0, [r7, #4]
 800ea90:	f000 fa7c 	bl	800ef8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	2200      	movs	r2, #0
 800ea98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ea9a:	68bb      	ldr	r3, [r7, #8]
 800ea9c:	f003 0301 	and.w	r3, r3, #1
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d00c      	beq.n	800eabe <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800eaa4:	68fb      	ldr	r3, [r7, #12]
 800eaa6:	f003 0301 	and.w	r3, r3, #1
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d007      	beq.n	800eabe <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	f06f 0201 	mvn.w	r2, #1
 800eab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f7f4 f83d 	bl	8002b38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eabe:	68bb      	ldr	r3, [r7, #8]
 800eac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d104      	bne.n	800ead2 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800eac8:	68bb      	ldr	r3, [r7, #8]
 800eaca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800eace:	2b00      	cmp	r3, #0
 800ead0:	d00c      	beq.n	800eaec <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d007      	beq.n	800eaec <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	681b      	ldr	r3, [r3, #0]
 800eae0:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800eae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800eae6:	6878      	ldr	r0, [r7, #4]
 800eae8:	f000 ffba 	bl	800fa60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800eaec:	68bb      	ldr	r3, [r7, #8]
 800eaee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d00c      	beq.n	800eb10 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d007      	beq.n	800eb10 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800eb08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800eb0a:	6878      	ldr	r0, [r7, #4]
 800eb0c:	f000 ffb2 	bl	800fa74 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800eb10:	68bb      	ldr	r3, [r7, #8]
 800eb12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d00c      	beq.n	800eb34 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d007      	beq.n	800eb34 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800eb2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800eb2e:	6878      	ldr	r0, [r7, #4]
 800eb30:	f000 fa36 	bl	800efa0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800eb34:	68bb      	ldr	r3, [r7, #8]
 800eb36:	f003 0320 	and.w	r3, r3, #32
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d00c      	beq.n	800eb58 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	f003 0320 	and.w	r3, r3, #32
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d007      	beq.n	800eb58 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f06f 0220 	mvn.w	r2, #32
 800eb50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800eb52:	6878      	ldr	r0, [r7, #4]
 800eb54:	f000 ff7a 	bl	800fa4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800eb58:	bf00      	nop
 800eb5a:	3710      	adds	r7, #16
 800eb5c:	46bd      	mov	sp, r7
 800eb5e:	bd80      	pop	{r7, pc}

0800eb60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b086      	sub	sp, #24
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	60f8      	str	r0, [r7, #12]
 800eb68:	60b9      	str	r1, [r7, #8]
 800eb6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800eb76:	2b01      	cmp	r3, #1
 800eb78:	d101      	bne.n	800eb7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800eb7a:	2302      	movs	r3, #2
 800eb7c:	e0ff      	b.n	800ed7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	2201      	movs	r2, #1
 800eb82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	2b14      	cmp	r3, #20
 800eb8a:	f200 80f0 	bhi.w	800ed6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800eb8e:	a201      	add	r2, pc, #4	; (adr r2, 800eb94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800eb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb94:	0800ebe9 	.word	0x0800ebe9
 800eb98:	0800ed6f 	.word	0x0800ed6f
 800eb9c:	0800ed6f 	.word	0x0800ed6f
 800eba0:	0800ed6f 	.word	0x0800ed6f
 800eba4:	0800ec29 	.word	0x0800ec29
 800eba8:	0800ed6f 	.word	0x0800ed6f
 800ebac:	0800ed6f 	.word	0x0800ed6f
 800ebb0:	0800ed6f 	.word	0x0800ed6f
 800ebb4:	0800ec6b 	.word	0x0800ec6b
 800ebb8:	0800ed6f 	.word	0x0800ed6f
 800ebbc:	0800ed6f 	.word	0x0800ed6f
 800ebc0:	0800ed6f 	.word	0x0800ed6f
 800ebc4:	0800ecab 	.word	0x0800ecab
 800ebc8:	0800ed6f 	.word	0x0800ed6f
 800ebcc:	0800ed6f 	.word	0x0800ed6f
 800ebd0:	0800ed6f 	.word	0x0800ed6f
 800ebd4:	0800eced 	.word	0x0800eced
 800ebd8:	0800ed6f 	.word	0x0800ed6f
 800ebdc:	0800ed6f 	.word	0x0800ed6f
 800ebe0:	0800ed6f 	.word	0x0800ed6f
 800ebe4:	0800ed2d 	.word	0x0800ed2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	68b9      	ldr	r1, [r7, #8]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f000 fa86 	bl	800f100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	699a      	ldr	r2, [r3, #24]
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	f042 0208 	orr.w	r2, r2, #8
 800ec02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	699a      	ldr	r2, [r3, #24]
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f022 0204 	bic.w	r2, r2, #4
 800ec12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800ec14:	68fb      	ldr	r3, [r7, #12]
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	6999      	ldr	r1, [r3, #24]
 800ec1a:	68bb      	ldr	r3, [r7, #8]
 800ec1c:	691a      	ldr	r2, [r3, #16]
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	430a      	orrs	r2, r1
 800ec24:	619a      	str	r2, [r3, #24]
      break;
 800ec26:	e0a5      	b.n	800ed74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	68b9      	ldr	r1, [r7, #8]
 800ec2e:	4618      	mov	r0, r3
 800ec30:	f000 faf6 	bl	800f220 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	681b      	ldr	r3, [r3, #0]
 800ec38:	699a      	ldr	r2, [r3, #24]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ec42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	699a      	ldr	r2, [r3, #24]
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ec52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6999      	ldr	r1, [r3, #24]
 800ec5a:	68bb      	ldr	r3, [r7, #8]
 800ec5c:	691b      	ldr	r3, [r3, #16]
 800ec5e:	021a      	lsls	r2, r3, #8
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	430a      	orrs	r2, r1
 800ec66:	619a      	str	r2, [r3, #24]
      break;
 800ec68:	e084      	b.n	800ed74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	68b9      	ldr	r1, [r7, #8]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f000 fb5f 	bl	800f334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	69da      	ldr	r2, [r3, #28]
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	f042 0208 	orr.w	r2, r2, #8
 800ec84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	69da      	ldr	r2, [r3, #28]
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	f022 0204 	bic.w	r2, r2, #4
 800ec94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	681b      	ldr	r3, [r3, #0]
 800ec9a:	69d9      	ldr	r1, [r3, #28]
 800ec9c:	68bb      	ldr	r3, [r7, #8]
 800ec9e:	691a      	ldr	r2, [r3, #16]
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	430a      	orrs	r2, r1
 800eca6:	61da      	str	r2, [r3, #28]
      break;
 800eca8:	e064      	b.n	800ed74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ecaa:	68fb      	ldr	r3, [r7, #12]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	68b9      	ldr	r1, [r7, #8]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f000 fbc7 	bl	800f444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	681b      	ldr	r3, [r3, #0]
 800ecba:	69da      	ldr	r2, [r3, #28]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	681b      	ldr	r3, [r3, #0]
 800ecc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ecc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	69da      	ldr	r2, [r3, #28]
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	681b      	ldr	r3, [r3, #0]
 800ecd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ecd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ecd6:	68fb      	ldr	r3, [r7, #12]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	69d9      	ldr	r1, [r3, #28]
 800ecdc:	68bb      	ldr	r3, [r7, #8]
 800ecde:	691b      	ldr	r3, [r3, #16]
 800ece0:	021a      	lsls	r2, r3, #8
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	430a      	orrs	r2, r1
 800ece8:	61da      	str	r2, [r3, #28]
      break;
 800ecea:	e043      	b.n	800ed74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ecec:	68fb      	ldr	r3, [r7, #12]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	68b9      	ldr	r1, [r7, #8]
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	f000 fc10 	bl	800f518 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	681b      	ldr	r3, [r3, #0]
 800ecfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	f042 0208 	orr.w	r2, r2, #8
 800ed06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed0e:	68fb      	ldr	r3, [r7, #12]
 800ed10:	681b      	ldr	r3, [r3, #0]
 800ed12:	f022 0204 	bic.w	r2, r2, #4
 800ed16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	691a      	ldr	r2, [r3, #16]
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	430a      	orrs	r2, r1
 800ed28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed2a:	e023      	b.n	800ed74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ed2c:	68fb      	ldr	r3, [r7, #12]
 800ed2e:	681b      	ldr	r3, [r3, #0]
 800ed30:	68b9      	ldr	r1, [r7, #8]
 800ed32:	4618      	mov	r0, r3
 800ed34:	f000 fc54 	bl	800f5e0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ed38:	68fb      	ldr	r3, [r7, #12]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681b      	ldr	r3, [r3, #0]
 800ed42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ed46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ed48:	68fb      	ldr	r3, [r7, #12]
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ed56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	681b      	ldr	r3, [r3, #0]
 800ed5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800ed5e:	68bb      	ldr	r3, [r7, #8]
 800ed60:	691b      	ldr	r3, [r3, #16]
 800ed62:	021a      	lsls	r2, r3, #8
 800ed64:	68fb      	ldr	r3, [r7, #12]
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	430a      	orrs	r2, r1
 800ed6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800ed6c:	e002      	b.n	800ed74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	75fb      	strb	r3, [r7, #23]
      break;
 800ed72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	2200      	movs	r2, #0
 800ed78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ed7c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed7e:	4618      	mov	r0, r3
 800ed80:	3718      	adds	r7, #24
 800ed82:	46bd      	mov	sp, r7
 800ed84:	bd80      	pop	{r7, pc}
 800ed86:	bf00      	nop

0800ed88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b084      	sub	sp, #16
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
 800ed90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ed92:	2300      	movs	r3, #0
 800ed94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ed9c:	2b01      	cmp	r3, #1
 800ed9e:	d101      	bne.n	800eda4 <HAL_TIM_ConfigClockSource+0x1c>
 800eda0:	2302      	movs	r3, #2
 800eda2:	e0dc      	b.n	800ef5e <HAL_TIM_ConfigClockSource+0x1d6>
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2201      	movs	r2, #1
 800eda8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800edac:	687b      	ldr	r3, [r7, #4]
 800edae:	2202      	movs	r2, #2
 800edb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800edb4:	687b      	ldr	r3, [r7, #4]
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	689b      	ldr	r3, [r3, #8]
 800edba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800edbc:	68ba      	ldr	r2, [r7, #8]
 800edbe:	4b6a      	ldr	r3, [pc, #424]	; (800ef68 <HAL_TIM_ConfigClockSource+0x1e0>)
 800edc0:	4013      	ands	r3, r2
 800edc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800edc4:	68bb      	ldr	r3, [r7, #8]
 800edc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800edca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	681b      	ldr	r3, [r3, #0]
 800edd0:	68ba      	ldr	r2, [r7, #8]
 800edd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	4a64      	ldr	r2, [pc, #400]	; (800ef6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800edda:	4293      	cmp	r3, r2
 800eddc:	f000 80a9 	beq.w	800ef32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ede0:	4a62      	ldr	r2, [pc, #392]	; (800ef6c <HAL_TIM_ConfigClockSource+0x1e4>)
 800ede2:	4293      	cmp	r3, r2
 800ede4:	f200 80ae 	bhi.w	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ede8:	4a61      	ldr	r2, [pc, #388]	; (800ef70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800edea:	4293      	cmp	r3, r2
 800edec:	f000 80a1 	beq.w	800ef32 <HAL_TIM_ConfigClockSource+0x1aa>
 800edf0:	4a5f      	ldr	r2, [pc, #380]	; (800ef70 <HAL_TIM_ConfigClockSource+0x1e8>)
 800edf2:	4293      	cmp	r3, r2
 800edf4:	f200 80a6 	bhi.w	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800edf8:	4a5e      	ldr	r2, [pc, #376]	; (800ef74 <HAL_TIM_ConfigClockSource+0x1ec>)
 800edfa:	4293      	cmp	r3, r2
 800edfc:	f000 8099 	beq.w	800ef32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee00:	4a5c      	ldr	r2, [pc, #368]	; (800ef74 <HAL_TIM_ConfigClockSource+0x1ec>)
 800ee02:	4293      	cmp	r3, r2
 800ee04:	f200 809e 	bhi.w	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee08:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ee0c:	f000 8091 	beq.w	800ef32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee10:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ee14:	f200 8096 	bhi.w	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee1c:	f000 8089 	beq.w	800ef32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ee24:	f200 808e 	bhi.w	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee28:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee2c:	d03e      	beq.n	800eeac <HAL_TIM_ConfigClockSource+0x124>
 800ee2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ee32:	f200 8087 	bhi.w	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee3a:	f000 8086 	beq.w	800ef4a <HAL_TIM_ConfigClockSource+0x1c2>
 800ee3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ee42:	d87f      	bhi.n	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee44:	2b70      	cmp	r3, #112	; 0x70
 800ee46:	d01a      	beq.n	800ee7e <HAL_TIM_ConfigClockSource+0xf6>
 800ee48:	2b70      	cmp	r3, #112	; 0x70
 800ee4a:	d87b      	bhi.n	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee4c:	2b60      	cmp	r3, #96	; 0x60
 800ee4e:	d050      	beq.n	800eef2 <HAL_TIM_ConfigClockSource+0x16a>
 800ee50:	2b60      	cmp	r3, #96	; 0x60
 800ee52:	d877      	bhi.n	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee54:	2b50      	cmp	r3, #80	; 0x50
 800ee56:	d03c      	beq.n	800eed2 <HAL_TIM_ConfigClockSource+0x14a>
 800ee58:	2b50      	cmp	r3, #80	; 0x50
 800ee5a:	d873      	bhi.n	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee5c:	2b40      	cmp	r3, #64	; 0x40
 800ee5e:	d058      	beq.n	800ef12 <HAL_TIM_ConfigClockSource+0x18a>
 800ee60:	2b40      	cmp	r3, #64	; 0x40
 800ee62:	d86f      	bhi.n	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee64:	2b30      	cmp	r3, #48	; 0x30
 800ee66:	d064      	beq.n	800ef32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee68:	2b30      	cmp	r3, #48	; 0x30
 800ee6a:	d86b      	bhi.n	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee6c:	2b20      	cmp	r3, #32
 800ee6e:	d060      	beq.n	800ef32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee70:	2b20      	cmp	r3, #32
 800ee72:	d867      	bhi.n	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d05c      	beq.n	800ef32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee78:	2b10      	cmp	r3, #16
 800ee7a:	d05a      	beq.n	800ef32 <HAL_TIM_ConfigClockSource+0x1aa>
 800ee7c:	e062      	b.n	800ef44 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	6818      	ldr	r0, [r3, #0]
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	6899      	ldr	r1, [r3, #8]
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	685a      	ldr	r2, [r3, #4]
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	f000 fc8b 	bl	800f7a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	681b      	ldr	r3, [r3, #0]
 800ee96:	689b      	ldr	r3, [r3, #8]
 800ee98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ee9a:	68bb      	ldr	r3, [r7, #8]
 800ee9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800eea0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	68ba      	ldr	r2, [r7, #8]
 800eea8:	609a      	str	r2, [r3, #8]
      break;
 800eeaa:	e04f      	b.n	800ef4c <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	6818      	ldr	r0, [r3, #0]
 800eeb0:	683b      	ldr	r3, [r7, #0]
 800eeb2:	6899      	ldr	r1, [r3, #8]
 800eeb4:	683b      	ldr	r3, [r7, #0]
 800eeb6:	685a      	ldr	r2, [r3, #4]
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	68db      	ldr	r3, [r3, #12]
 800eebc:	f000 fc74 	bl	800f7a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	689a      	ldr	r2, [r3, #8]
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	681b      	ldr	r3, [r3, #0]
 800eeca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800eece:	609a      	str	r2, [r3, #8]
      break;
 800eed0:	e03c      	b.n	800ef4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6818      	ldr	r0, [r3, #0]
 800eed6:	683b      	ldr	r3, [r7, #0]
 800eed8:	6859      	ldr	r1, [r3, #4]
 800eeda:	683b      	ldr	r3, [r7, #0]
 800eedc:	68db      	ldr	r3, [r3, #12]
 800eede:	461a      	mov	r2, r3
 800eee0:	f000 fbe4 	bl	800f6ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2150      	movs	r1, #80	; 0x50
 800eeea:	4618      	mov	r0, r3
 800eeec:	f000 fc3e 	bl	800f76c <TIM_ITRx_SetConfig>
      break;
 800eef0:	e02c      	b.n	800ef4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	6818      	ldr	r0, [r3, #0]
 800eef6:	683b      	ldr	r3, [r7, #0]
 800eef8:	6859      	ldr	r1, [r3, #4]
 800eefa:	683b      	ldr	r3, [r7, #0]
 800eefc:	68db      	ldr	r3, [r3, #12]
 800eefe:	461a      	mov	r2, r3
 800ef00:	f000 fc03 	bl	800f70a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	681b      	ldr	r3, [r3, #0]
 800ef08:	2160      	movs	r1, #96	; 0x60
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	f000 fc2e 	bl	800f76c <TIM_ITRx_SetConfig>
      break;
 800ef10:	e01c      	b.n	800ef4c <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	6818      	ldr	r0, [r3, #0]
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	6859      	ldr	r1, [r3, #4]
 800ef1a:	683b      	ldr	r3, [r7, #0]
 800ef1c:	68db      	ldr	r3, [r3, #12]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	f000 fbc4 	bl	800f6ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	2140      	movs	r1, #64	; 0x40
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f000 fc1e 	bl	800f76c <TIM_ITRx_SetConfig>
      break;
 800ef30:	e00c      	b.n	800ef4c <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681a      	ldr	r2, [r3, #0]
 800ef36:	683b      	ldr	r3, [r7, #0]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	4619      	mov	r1, r3
 800ef3c:	4610      	mov	r0, r2
 800ef3e:	f000 fc15 	bl	800f76c <TIM_ITRx_SetConfig>
      break;
 800ef42:	e003      	b.n	800ef4c <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800ef44:	2301      	movs	r3, #1
 800ef46:	73fb      	strb	r3, [r7, #15]
      break;
 800ef48:	e000      	b.n	800ef4c <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800ef4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	2201      	movs	r2, #1
 800ef50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	2200      	movs	r2, #0
 800ef58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800ef5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef5e:	4618      	mov	r0, r3
 800ef60:	3710      	adds	r7, #16
 800ef62:	46bd      	mov	sp, r7
 800ef64:	bd80      	pop	{r7, pc}
 800ef66:	bf00      	nop
 800ef68:	ffceff88 	.word	0xffceff88
 800ef6c:	00100040 	.word	0x00100040
 800ef70:	00100030 	.word	0x00100030
 800ef74:	00100020 	.word	0x00100020

0800ef78 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ef78:	b480      	push	{r7}
 800ef7a:	b083      	sub	sp, #12
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ef80:	bf00      	nop
 800ef82:	370c      	adds	r7, #12
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ef94:	bf00      	nop
 800ef96:	370c      	adds	r7, #12
 800ef98:	46bd      	mov	sp, r7
 800ef9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9e:	4770      	bx	lr

0800efa0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800efa0:	b480      	push	{r7}
 800efa2:	b083      	sub	sp, #12
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800efa8:	bf00      	nop
 800efaa:	370c      	adds	r7, #12
 800efac:	46bd      	mov	sp, r7
 800efae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb2:	4770      	bx	lr

0800efb4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b085      	sub	sp, #20
 800efb8:	af00      	add	r7, sp, #0
 800efba:	6078      	str	r0, [r7, #4]
 800efbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800efc4:	687b      	ldr	r3, [r7, #4]
 800efc6:	4a46      	ldr	r2, [pc, #280]	; (800f0e0 <TIM_Base_SetConfig+0x12c>)
 800efc8:	4293      	cmp	r3, r2
 800efca:	d013      	beq.n	800eff4 <TIM_Base_SetConfig+0x40>
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800efd2:	d00f      	beq.n	800eff4 <TIM_Base_SetConfig+0x40>
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	4a43      	ldr	r2, [pc, #268]	; (800f0e4 <TIM_Base_SetConfig+0x130>)
 800efd8:	4293      	cmp	r3, r2
 800efda:	d00b      	beq.n	800eff4 <TIM_Base_SetConfig+0x40>
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	4a42      	ldr	r2, [pc, #264]	; (800f0e8 <TIM_Base_SetConfig+0x134>)
 800efe0:	4293      	cmp	r3, r2
 800efe2:	d007      	beq.n	800eff4 <TIM_Base_SetConfig+0x40>
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	4a41      	ldr	r2, [pc, #260]	; (800f0ec <TIM_Base_SetConfig+0x138>)
 800efe8:	4293      	cmp	r3, r2
 800efea:	d003      	beq.n	800eff4 <TIM_Base_SetConfig+0x40>
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	4a40      	ldr	r2, [pc, #256]	; (800f0f0 <TIM_Base_SetConfig+0x13c>)
 800eff0:	4293      	cmp	r3, r2
 800eff2:	d108      	bne.n	800f006 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800effa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800effc:	683b      	ldr	r3, [r7, #0]
 800effe:	685b      	ldr	r3, [r3, #4]
 800f000:	68fa      	ldr	r2, [r7, #12]
 800f002:	4313      	orrs	r3, r2
 800f004:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	4a35      	ldr	r2, [pc, #212]	; (800f0e0 <TIM_Base_SetConfig+0x12c>)
 800f00a:	4293      	cmp	r3, r2
 800f00c:	d01f      	beq.n	800f04e <TIM_Base_SetConfig+0x9a>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f014:	d01b      	beq.n	800f04e <TIM_Base_SetConfig+0x9a>
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	4a32      	ldr	r2, [pc, #200]	; (800f0e4 <TIM_Base_SetConfig+0x130>)
 800f01a:	4293      	cmp	r3, r2
 800f01c:	d017      	beq.n	800f04e <TIM_Base_SetConfig+0x9a>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4a31      	ldr	r2, [pc, #196]	; (800f0e8 <TIM_Base_SetConfig+0x134>)
 800f022:	4293      	cmp	r3, r2
 800f024:	d013      	beq.n	800f04e <TIM_Base_SetConfig+0x9a>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4a30      	ldr	r2, [pc, #192]	; (800f0ec <TIM_Base_SetConfig+0x138>)
 800f02a:	4293      	cmp	r3, r2
 800f02c:	d00f      	beq.n	800f04e <TIM_Base_SetConfig+0x9a>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	4a2f      	ldr	r2, [pc, #188]	; (800f0f0 <TIM_Base_SetConfig+0x13c>)
 800f032:	4293      	cmp	r3, r2
 800f034:	d00b      	beq.n	800f04e <TIM_Base_SetConfig+0x9a>
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	4a2e      	ldr	r2, [pc, #184]	; (800f0f4 <TIM_Base_SetConfig+0x140>)
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d007      	beq.n	800f04e <TIM_Base_SetConfig+0x9a>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	4a2d      	ldr	r2, [pc, #180]	; (800f0f8 <TIM_Base_SetConfig+0x144>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d003      	beq.n	800f04e <TIM_Base_SetConfig+0x9a>
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	4a2c      	ldr	r2, [pc, #176]	; (800f0fc <TIM_Base_SetConfig+0x148>)
 800f04a:	4293      	cmp	r3, r2
 800f04c:	d108      	bne.n	800f060 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f056:	683b      	ldr	r3, [r7, #0]
 800f058:	68db      	ldr	r3, [r3, #12]
 800f05a:	68fa      	ldr	r2, [r7, #12]
 800f05c:	4313      	orrs	r3, r2
 800f05e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f066:	683b      	ldr	r3, [r7, #0]
 800f068:	695b      	ldr	r3, [r3, #20]
 800f06a:	4313      	orrs	r3, r2
 800f06c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	68fa      	ldr	r2, [r7, #12]
 800f072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f074:	683b      	ldr	r3, [r7, #0]
 800f076:	689a      	ldr	r2, [r3, #8]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f07c:	683b      	ldr	r3, [r7, #0]
 800f07e:	681a      	ldr	r2, [r3, #0]
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	4a16      	ldr	r2, [pc, #88]	; (800f0e0 <TIM_Base_SetConfig+0x12c>)
 800f088:	4293      	cmp	r3, r2
 800f08a:	d00f      	beq.n	800f0ac <TIM_Base_SetConfig+0xf8>
 800f08c:	687b      	ldr	r3, [r7, #4]
 800f08e:	4a18      	ldr	r2, [pc, #96]	; (800f0f0 <TIM_Base_SetConfig+0x13c>)
 800f090:	4293      	cmp	r3, r2
 800f092:	d00b      	beq.n	800f0ac <TIM_Base_SetConfig+0xf8>
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	4a17      	ldr	r2, [pc, #92]	; (800f0f4 <TIM_Base_SetConfig+0x140>)
 800f098:	4293      	cmp	r3, r2
 800f09a:	d007      	beq.n	800f0ac <TIM_Base_SetConfig+0xf8>
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	4a16      	ldr	r2, [pc, #88]	; (800f0f8 <TIM_Base_SetConfig+0x144>)
 800f0a0:	4293      	cmp	r3, r2
 800f0a2:	d003      	beq.n	800f0ac <TIM_Base_SetConfig+0xf8>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	4a15      	ldr	r2, [pc, #84]	; (800f0fc <TIM_Base_SetConfig+0x148>)
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d103      	bne.n	800f0b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f0ac:	683b      	ldr	r3, [r7, #0]
 800f0ae:	691a      	ldr	r2, [r3, #16]
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2201      	movs	r2, #1
 800f0b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	691b      	ldr	r3, [r3, #16]
 800f0be:	f003 0301 	and.w	r3, r3, #1
 800f0c2:	2b01      	cmp	r3, #1
 800f0c4:	d105      	bne.n	800f0d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	691b      	ldr	r3, [r3, #16]
 800f0ca:	f023 0201 	bic.w	r2, r3, #1
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	611a      	str	r2, [r3, #16]
  }
}
 800f0d2:	bf00      	nop
 800f0d4:	3714      	adds	r7, #20
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0dc:	4770      	bx	lr
 800f0de:	bf00      	nop
 800f0e0:	40010000 	.word	0x40010000
 800f0e4:	40000400 	.word	0x40000400
 800f0e8:	40000800 	.word	0x40000800
 800f0ec:	40000c00 	.word	0x40000c00
 800f0f0:	40010400 	.word	0x40010400
 800f0f4:	40014000 	.word	0x40014000
 800f0f8:	40014400 	.word	0x40014400
 800f0fc:	40014800 	.word	0x40014800

0800f100 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f100:	b480      	push	{r7}
 800f102:	b087      	sub	sp, #28
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
 800f108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6a1b      	ldr	r3, [r3, #32]
 800f10e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	6a1b      	ldr	r3, [r3, #32]
 800f114:	f023 0201 	bic.w	r2, r3, #1
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	685b      	ldr	r3, [r3, #4]
 800f120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	699b      	ldr	r3, [r3, #24]
 800f126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f128:	68fa      	ldr	r2, [r7, #12]
 800f12a:	4b37      	ldr	r3, [pc, #220]	; (800f208 <TIM_OC1_SetConfig+0x108>)
 800f12c:	4013      	ands	r3, r2
 800f12e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	f023 0303 	bic.w	r3, r3, #3
 800f136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f138:	683b      	ldr	r3, [r7, #0]
 800f13a:	681b      	ldr	r3, [r3, #0]
 800f13c:	68fa      	ldr	r2, [r7, #12]
 800f13e:	4313      	orrs	r3, r2
 800f140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800f142:	697b      	ldr	r3, [r7, #20]
 800f144:	f023 0302 	bic.w	r3, r3, #2
 800f148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	689b      	ldr	r3, [r3, #8]
 800f14e:	697a      	ldr	r2, [r7, #20]
 800f150:	4313      	orrs	r3, r2
 800f152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	4a2d      	ldr	r2, [pc, #180]	; (800f20c <TIM_OC1_SetConfig+0x10c>)
 800f158:	4293      	cmp	r3, r2
 800f15a:	d00f      	beq.n	800f17c <TIM_OC1_SetConfig+0x7c>
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4a2c      	ldr	r2, [pc, #176]	; (800f210 <TIM_OC1_SetConfig+0x110>)
 800f160:	4293      	cmp	r3, r2
 800f162:	d00b      	beq.n	800f17c <TIM_OC1_SetConfig+0x7c>
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	4a2b      	ldr	r2, [pc, #172]	; (800f214 <TIM_OC1_SetConfig+0x114>)
 800f168:	4293      	cmp	r3, r2
 800f16a:	d007      	beq.n	800f17c <TIM_OC1_SetConfig+0x7c>
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	4a2a      	ldr	r2, [pc, #168]	; (800f218 <TIM_OC1_SetConfig+0x118>)
 800f170:	4293      	cmp	r3, r2
 800f172:	d003      	beq.n	800f17c <TIM_OC1_SetConfig+0x7c>
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	4a29      	ldr	r2, [pc, #164]	; (800f21c <TIM_OC1_SetConfig+0x11c>)
 800f178:	4293      	cmp	r3, r2
 800f17a:	d10c      	bne.n	800f196 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800f17c:	697b      	ldr	r3, [r7, #20]
 800f17e:	f023 0308 	bic.w	r3, r3, #8
 800f182:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800f184:	683b      	ldr	r3, [r7, #0]
 800f186:	68db      	ldr	r3, [r3, #12]
 800f188:	697a      	ldr	r2, [r7, #20]
 800f18a:	4313      	orrs	r3, r2
 800f18c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	f023 0304 	bic.w	r3, r3, #4
 800f194:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4a1c      	ldr	r2, [pc, #112]	; (800f20c <TIM_OC1_SetConfig+0x10c>)
 800f19a:	4293      	cmp	r3, r2
 800f19c:	d00f      	beq.n	800f1be <TIM_OC1_SetConfig+0xbe>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	4a1b      	ldr	r2, [pc, #108]	; (800f210 <TIM_OC1_SetConfig+0x110>)
 800f1a2:	4293      	cmp	r3, r2
 800f1a4:	d00b      	beq.n	800f1be <TIM_OC1_SetConfig+0xbe>
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	4a1a      	ldr	r2, [pc, #104]	; (800f214 <TIM_OC1_SetConfig+0x114>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d007      	beq.n	800f1be <TIM_OC1_SetConfig+0xbe>
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	4a19      	ldr	r2, [pc, #100]	; (800f218 <TIM_OC1_SetConfig+0x118>)
 800f1b2:	4293      	cmp	r3, r2
 800f1b4:	d003      	beq.n	800f1be <TIM_OC1_SetConfig+0xbe>
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	4a18      	ldr	r2, [pc, #96]	; (800f21c <TIM_OC1_SetConfig+0x11c>)
 800f1ba:	4293      	cmp	r3, r2
 800f1bc:	d111      	bne.n	800f1e2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800f1be:	693b      	ldr	r3, [r7, #16]
 800f1c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f1c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800f1c6:	693b      	ldr	r3, [r7, #16]
 800f1c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f1cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800f1ce:	683b      	ldr	r3, [r7, #0]
 800f1d0:	695b      	ldr	r3, [r3, #20]
 800f1d2:	693a      	ldr	r2, [r7, #16]
 800f1d4:	4313      	orrs	r3, r2
 800f1d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800f1d8:	683b      	ldr	r3, [r7, #0]
 800f1da:	699b      	ldr	r3, [r3, #24]
 800f1dc:	693a      	ldr	r2, [r7, #16]
 800f1de:	4313      	orrs	r3, r2
 800f1e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	693a      	ldr	r2, [r7, #16]
 800f1e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	68fa      	ldr	r2, [r7, #12]
 800f1ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800f1ee:	683b      	ldr	r3, [r7, #0]
 800f1f0:	685a      	ldr	r2, [r3, #4]
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	697a      	ldr	r2, [r7, #20]
 800f1fa:	621a      	str	r2, [r3, #32]
}
 800f1fc:	bf00      	nop
 800f1fe:	371c      	adds	r7, #28
 800f200:	46bd      	mov	sp, r7
 800f202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f206:	4770      	bx	lr
 800f208:	fffeff8f 	.word	0xfffeff8f
 800f20c:	40010000 	.word	0x40010000
 800f210:	40010400 	.word	0x40010400
 800f214:	40014000 	.word	0x40014000
 800f218:	40014400 	.word	0x40014400
 800f21c:	40014800 	.word	0x40014800

0800f220 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f220:	b480      	push	{r7}
 800f222:	b087      	sub	sp, #28
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	6a1b      	ldr	r3, [r3, #32]
 800f22e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	6a1b      	ldr	r3, [r3, #32]
 800f234:	f023 0210 	bic.w	r2, r3, #16
 800f238:	687b      	ldr	r3, [r7, #4]
 800f23a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	685b      	ldr	r3, [r3, #4]
 800f240:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	699b      	ldr	r3, [r3, #24]
 800f246:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800f248:	68fa      	ldr	r2, [r7, #12]
 800f24a:	4b34      	ldr	r3, [pc, #208]	; (800f31c <TIM_OC2_SetConfig+0xfc>)
 800f24c:	4013      	ands	r3, r2
 800f24e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800f250:	68fb      	ldr	r3, [r7, #12]
 800f252:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f256:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f258:	683b      	ldr	r3, [r7, #0]
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	021b      	lsls	r3, r3, #8
 800f25e:	68fa      	ldr	r2, [r7, #12]
 800f260:	4313      	orrs	r3, r2
 800f262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800f264:	697b      	ldr	r3, [r7, #20]
 800f266:	f023 0320 	bic.w	r3, r3, #32
 800f26a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800f26c:	683b      	ldr	r3, [r7, #0]
 800f26e:	689b      	ldr	r3, [r3, #8]
 800f270:	011b      	lsls	r3, r3, #4
 800f272:	697a      	ldr	r2, [r7, #20]
 800f274:	4313      	orrs	r3, r2
 800f276:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4a29      	ldr	r2, [pc, #164]	; (800f320 <TIM_OC2_SetConfig+0x100>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d003      	beq.n	800f288 <TIM_OC2_SetConfig+0x68>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4a28      	ldr	r2, [pc, #160]	; (800f324 <TIM_OC2_SetConfig+0x104>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d10d      	bne.n	800f2a4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800f288:	697b      	ldr	r3, [r7, #20]
 800f28a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f28e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	68db      	ldr	r3, [r3, #12]
 800f294:	011b      	lsls	r3, r3, #4
 800f296:	697a      	ldr	r2, [r7, #20]
 800f298:	4313      	orrs	r3, r2
 800f29a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f2a2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	4a1e      	ldr	r2, [pc, #120]	; (800f320 <TIM_OC2_SetConfig+0x100>)
 800f2a8:	4293      	cmp	r3, r2
 800f2aa:	d00f      	beq.n	800f2cc <TIM_OC2_SetConfig+0xac>
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4a1d      	ldr	r2, [pc, #116]	; (800f324 <TIM_OC2_SetConfig+0x104>)
 800f2b0:	4293      	cmp	r3, r2
 800f2b2:	d00b      	beq.n	800f2cc <TIM_OC2_SetConfig+0xac>
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	4a1c      	ldr	r2, [pc, #112]	; (800f328 <TIM_OC2_SetConfig+0x108>)
 800f2b8:	4293      	cmp	r3, r2
 800f2ba:	d007      	beq.n	800f2cc <TIM_OC2_SetConfig+0xac>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	4a1b      	ldr	r2, [pc, #108]	; (800f32c <TIM_OC2_SetConfig+0x10c>)
 800f2c0:	4293      	cmp	r3, r2
 800f2c2:	d003      	beq.n	800f2cc <TIM_OC2_SetConfig+0xac>
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	4a1a      	ldr	r2, [pc, #104]	; (800f330 <TIM_OC2_SetConfig+0x110>)
 800f2c8:	4293      	cmp	r3, r2
 800f2ca:	d113      	bne.n	800f2f4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f2cc:	693b      	ldr	r3, [r7, #16]
 800f2ce:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f2d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f2d4:	693b      	ldr	r3, [r7, #16]
 800f2d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	695b      	ldr	r3, [r3, #20]
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	693a      	ldr	r2, [r7, #16]
 800f2e4:	4313      	orrs	r3, r2
 800f2e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	699b      	ldr	r3, [r3, #24]
 800f2ec:	009b      	lsls	r3, r3, #2
 800f2ee:	693a      	ldr	r2, [r7, #16]
 800f2f0:	4313      	orrs	r3, r2
 800f2f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	693a      	ldr	r2, [r7, #16]
 800f2f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	68fa      	ldr	r2, [r7, #12]
 800f2fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f300:	683b      	ldr	r3, [r7, #0]
 800f302:	685a      	ldr	r2, [r3, #4]
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	697a      	ldr	r2, [r7, #20]
 800f30c:	621a      	str	r2, [r3, #32]
}
 800f30e:	bf00      	nop
 800f310:	371c      	adds	r7, #28
 800f312:	46bd      	mov	sp, r7
 800f314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f318:	4770      	bx	lr
 800f31a:	bf00      	nop
 800f31c:	feff8fff 	.word	0xfeff8fff
 800f320:	40010000 	.word	0x40010000
 800f324:	40010400 	.word	0x40010400
 800f328:	40014000 	.word	0x40014000
 800f32c:	40014400 	.word	0x40014400
 800f330:	40014800 	.word	0x40014800

0800f334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f334:	b480      	push	{r7}
 800f336:	b087      	sub	sp, #28
 800f338:	af00      	add	r7, sp, #0
 800f33a:	6078      	str	r0, [r7, #4]
 800f33c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6a1b      	ldr	r3, [r3, #32]
 800f342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6a1b      	ldr	r3, [r3, #32]
 800f348:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	685b      	ldr	r3, [r3, #4]
 800f354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	69db      	ldr	r3, [r3, #28]
 800f35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f35c:	68fa      	ldr	r2, [r7, #12]
 800f35e:	4b33      	ldr	r3, [pc, #204]	; (800f42c <TIM_OC3_SetConfig+0xf8>)
 800f360:	4013      	ands	r3, r2
 800f362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f364:	68fb      	ldr	r3, [r7, #12]
 800f366:	f023 0303 	bic.w	r3, r3, #3
 800f36a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	681b      	ldr	r3, [r3, #0]
 800f370:	68fa      	ldr	r2, [r7, #12]
 800f372:	4313      	orrs	r3, r2
 800f374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f37c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	689b      	ldr	r3, [r3, #8]
 800f382:	021b      	lsls	r3, r3, #8
 800f384:	697a      	ldr	r2, [r7, #20]
 800f386:	4313      	orrs	r3, r2
 800f388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	4a28      	ldr	r2, [pc, #160]	; (800f430 <TIM_OC3_SetConfig+0xfc>)
 800f38e:	4293      	cmp	r3, r2
 800f390:	d003      	beq.n	800f39a <TIM_OC3_SetConfig+0x66>
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	4a27      	ldr	r2, [pc, #156]	; (800f434 <TIM_OC3_SetConfig+0x100>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d10d      	bne.n	800f3b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f39a:	697b      	ldr	r3, [r7, #20]
 800f39c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f3a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	021b      	lsls	r3, r3, #8
 800f3a8:	697a      	ldr	r2, [r7, #20]
 800f3aa:	4313      	orrs	r3, r2
 800f3ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f3ae:	697b      	ldr	r3, [r7, #20]
 800f3b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f3b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	4a1d      	ldr	r2, [pc, #116]	; (800f430 <TIM_OC3_SetConfig+0xfc>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d00f      	beq.n	800f3de <TIM_OC3_SetConfig+0xaa>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4a1c      	ldr	r2, [pc, #112]	; (800f434 <TIM_OC3_SetConfig+0x100>)
 800f3c2:	4293      	cmp	r3, r2
 800f3c4:	d00b      	beq.n	800f3de <TIM_OC3_SetConfig+0xaa>
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	4a1b      	ldr	r2, [pc, #108]	; (800f438 <TIM_OC3_SetConfig+0x104>)
 800f3ca:	4293      	cmp	r3, r2
 800f3cc:	d007      	beq.n	800f3de <TIM_OC3_SetConfig+0xaa>
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	4a1a      	ldr	r2, [pc, #104]	; (800f43c <TIM_OC3_SetConfig+0x108>)
 800f3d2:	4293      	cmp	r3, r2
 800f3d4:	d003      	beq.n	800f3de <TIM_OC3_SetConfig+0xaa>
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	4a19      	ldr	r2, [pc, #100]	; (800f440 <TIM_OC3_SetConfig+0x10c>)
 800f3da:	4293      	cmp	r3, r2
 800f3dc:	d113      	bne.n	800f406 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f3de:	693b      	ldr	r3, [r7, #16]
 800f3e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f3e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f3e6:	693b      	ldr	r3, [r7, #16]
 800f3e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f3ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f3ee:	683b      	ldr	r3, [r7, #0]
 800f3f0:	695b      	ldr	r3, [r3, #20]
 800f3f2:	011b      	lsls	r3, r3, #4
 800f3f4:	693a      	ldr	r2, [r7, #16]
 800f3f6:	4313      	orrs	r3, r2
 800f3f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f3fa:	683b      	ldr	r3, [r7, #0]
 800f3fc:	699b      	ldr	r3, [r3, #24]
 800f3fe:	011b      	lsls	r3, r3, #4
 800f400:	693a      	ldr	r2, [r7, #16]
 800f402:	4313      	orrs	r3, r2
 800f404:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	693a      	ldr	r2, [r7, #16]
 800f40a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	68fa      	ldr	r2, [r7, #12]
 800f410:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	685a      	ldr	r2, [r3, #4]
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f41a:	687b      	ldr	r3, [r7, #4]
 800f41c:	697a      	ldr	r2, [r7, #20]
 800f41e:	621a      	str	r2, [r3, #32]
}
 800f420:	bf00      	nop
 800f422:	371c      	adds	r7, #28
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr
 800f42c:	fffeff8f 	.word	0xfffeff8f
 800f430:	40010000 	.word	0x40010000
 800f434:	40010400 	.word	0x40010400
 800f438:	40014000 	.word	0x40014000
 800f43c:	40014400 	.word	0x40014400
 800f440:	40014800 	.word	0x40014800

0800f444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f444:	b480      	push	{r7}
 800f446:	b087      	sub	sp, #28
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	6a1b      	ldr	r3, [r3, #32]
 800f452:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	6a1b      	ldr	r3, [r3, #32]
 800f458:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	685b      	ldr	r3, [r3, #4]
 800f464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	69db      	ldr	r3, [r3, #28]
 800f46a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f46c:	68fa      	ldr	r2, [r7, #12]
 800f46e:	4b24      	ldr	r3, [pc, #144]	; (800f500 <TIM_OC4_SetConfig+0xbc>)
 800f470:	4013      	ands	r3, r2
 800f472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f47a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	021b      	lsls	r3, r3, #8
 800f482:	68fa      	ldr	r2, [r7, #12]
 800f484:	4313      	orrs	r3, r2
 800f486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f488:	693b      	ldr	r3, [r7, #16]
 800f48a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f48e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f490:	683b      	ldr	r3, [r7, #0]
 800f492:	689b      	ldr	r3, [r3, #8]
 800f494:	031b      	lsls	r3, r3, #12
 800f496:	693a      	ldr	r2, [r7, #16]
 800f498:	4313      	orrs	r3, r2
 800f49a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4a19      	ldr	r2, [pc, #100]	; (800f504 <TIM_OC4_SetConfig+0xc0>)
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d00f      	beq.n	800f4c4 <TIM_OC4_SetConfig+0x80>
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	4a18      	ldr	r2, [pc, #96]	; (800f508 <TIM_OC4_SetConfig+0xc4>)
 800f4a8:	4293      	cmp	r3, r2
 800f4aa:	d00b      	beq.n	800f4c4 <TIM_OC4_SetConfig+0x80>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	4a17      	ldr	r2, [pc, #92]	; (800f50c <TIM_OC4_SetConfig+0xc8>)
 800f4b0:	4293      	cmp	r3, r2
 800f4b2:	d007      	beq.n	800f4c4 <TIM_OC4_SetConfig+0x80>
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	4a16      	ldr	r2, [pc, #88]	; (800f510 <TIM_OC4_SetConfig+0xcc>)
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d003      	beq.n	800f4c4 <TIM_OC4_SetConfig+0x80>
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	4a15      	ldr	r2, [pc, #84]	; (800f514 <TIM_OC4_SetConfig+0xd0>)
 800f4c0:	4293      	cmp	r3, r2
 800f4c2:	d109      	bne.n	800f4d8 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f4ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f4cc:	683b      	ldr	r3, [r7, #0]
 800f4ce:	695b      	ldr	r3, [r3, #20]
 800f4d0:	019b      	lsls	r3, r3, #6
 800f4d2:	697a      	ldr	r2, [r7, #20]
 800f4d4:	4313      	orrs	r3, r2
 800f4d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	68fa      	ldr	r2, [r7, #12]
 800f4e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	685a      	ldr	r2, [r3, #4]
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	693a      	ldr	r2, [r7, #16]
 800f4f0:	621a      	str	r2, [r3, #32]
}
 800f4f2:	bf00      	nop
 800f4f4:	371c      	adds	r7, #28
 800f4f6:	46bd      	mov	sp, r7
 800f4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fc:	4770      	bx	lr
 800f4fe:	bf00      	nop
 800f500:	feff8fff 	.word	0xfeff8fff
 800f504:	40010000 	.word	0x40010000
 800f508:	40010400 	.word	0x40010400
 800f50c:	40014000 	.word	0x40014000
 800f510:	40014400 	.word	0x40014400
 800f514:	40014800 	.word	0x40014800

0800f518 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f518:	b480      	push	{r7}
 800f51a:	b087      	sub	sp, #28
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a1b      	ldr	r3, [r3, #32]
 800f526:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	6a1b      	ldr	r3, [r3, #32]
 800f52c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f53e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f540:	68fa      	ldr	r2, [r7, #12]
 800f542:	4b21      	ldr	r3, [pc, #132]	; (800f5c8 <TIM_OC5_SetConfig+0xb0>)
 800f544:	4013      	ands	r3, r2
 800f546:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	68fa      	ldr	r2, [r7, #12]
 800f54e:	4313      	orrs	r3, r2
 800f550:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f552:	693b      	ldr	r3, [r7, #16]
 800f554:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f558:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f55a:	683b      	ldr	r3, [r7, #0]
 800f55c:	689b      	ldr	r3, [r3, #8]
 800f55e:	041b      	lsls	r3, r3, #16
 800f560:	693a      	ldr	r2, [r7, #16]
 800f562:	4313      	orrs	r3, r2
 800f564:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a18      	ldr	r2, [pc, #96]	; (800f5cc <TIM_OC5_SetConfig+0xb4>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d00f      	beq.n	800f58e <TIM_OC5_SetConfig+0x76>
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	4a17      	ldr	r2, [pc, #92]	; (800f5d0 <TIM_OC5_SetConfig+0xb8>)
 800f572:	4293      	cmp	r3, r2
 800f574:	d00b      	beq.n	800f58e <TIM_OC5_SetConfig+0x76>
 800f576:	687b      	ldr	r3, [r7, #4]
 800f578:	4a16      	ldr	r2, [pc, #88]	; (800f5d4 <TIM_OC5_SetConfig+0xbc>)
 800f57a:	4293      	cmp	r3, r2
 800f57c:	d007      	beq.n	800f58e <TIM_OC5_SetConfig+0x76>
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	4a15      	ldr	r2, [pc, #84]	; (800f5d8 <TIM_OC5_SetConfig+0xc0>)
 800f582:	4293      	cmp	r3, r2
 800f584:	d003      	beq.n	800f58e <TIM_OC5_SetConfig+0x76>
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4a14      	ldr	r2, [pc, #80]	; (800f5dc <TIM_OC5_SetConfig+0xc4>)
 800f58a:	4293      	cmp	r3, r2
 800f58c:	d109      	bne.n	800f5a2 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f58e:	697b      	ldr	r3, [r7, #20]
 800f590:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f594:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	695b      	ldr	r3, [r3, #20]
 800f59a:	021b      	lsls	r3, r3, #8
 800f59c:	697a      	ldr	r2, [r7, #20]
 800f59e:	4313      	orrs	r3, r2
 800f5a0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	697a      	ldr	r2, [r7, #20]
 800f5a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	68fa      	ldr	r2, [r7, #12]
 800f5ac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f5ae:	683b      	ldr	r3, [r7, #0]
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	693a      	ldr	r2, [r7, #16]
 800f5ba:	621a      	str	r2, [r3, #32]
}
 800f5bc:	bf00      	nop
 800f5be:	371c      	adds	r7, #28
 800f5c0:	46bd      	mov	sp, r7
 800f5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5c6:	4770      	bx	lr
 800f5c8:	fffeff8f 	.word	0xfffeff8f
 800f5cc:	40010000 	.word	0x40010000
 800f5d0:	40010400 	.word	0x40010400
 800f5d4:	40014000 	.word	0x40014000
 800f5d8:	40014400 	.word	0x40014400
 800f5dc:	40014800 	.word	0x40014800

0800f5e0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800f5e0:	b480      	push	{r7}
 800f5e2:	b087      	sub	sp, #28
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	6a1b      	ldr	r3, [r3, #32]
 800f5ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f5f0:	687b      	ldr	r3, [r7, #4]
 800f5f2:	6a1b      	ldr	r3, [r3, #32]
 800f5f4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	685b      	ldr	r3, [r3, #4]
 800f600:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f608:	68fa      	ldr	r2, [r7, #12]
 800f60a:	4b22      	ldr	r3, [pc, #136]	; (800f694 <TIM_OC6_SetConfig+0xb4>)
 800f60c:	4013      	ands	r3, r2
 800f60e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f610:	683b      	ldr	r3, [r7, #0]
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	021b      	lsls	r3, r3, #8
 800f616:	68fa      	ldr	r2, [r7, #12]
 800f618:	4313      	orrs	r3, r2
 800f61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f61c:	693b      	ldr	r3, [r7, #16]
 800f61e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f624:	683b      	ldr	r3, [r7, #0]
 800f626:	689b      	ldr	r3, [r3, #8]
 800f628:	051b      	lsls	r3, r3, #20
 800f62a:	693a      	ldr	r2, [r7, #16]
 800f62c:	4313      	orrs	r3, r2
 800f62e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	4a19      	ldr	r2, [pc, #100]	; (800f698 <TIM_OC6_SetConfig+0xb8>)
 800f634:	4293      	cmp	r3, r2
 800f636:	d00f      	beq.n	800f658 <TIM_OC6_SetConfig+0x78>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	4a18      	ldr	r2, [pc, #96]	; (800f69c <TIM_OC6_SetConfig+0xbc>)
 800f63c:	4293      	cmp	r3, r2
 800f63e:	d00b      	beq.n	800f658 <TIM_OC6_SetConfig+0x78>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	4a17      	ldr	r2, [pc, #92]	; (800f6a0 <TIM_OC6_SetConfig+0xc0>)
 800f644:	4293      	cmp	r3, r2
 800f646:	d007      	beq.n	800f658 <TIM_OC6_SetConfig+0x78>
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	4a16      	ldr	r2, [pc, #88]	; (800f6a4 <TIM_OC6_SetConfig+0xc4>)
 800f64c:	4293      	cmp	r3, r2
 800f64e:	d003      	beq.n	800f658 <TIM_OC6_SetConfig+0x78>
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	4a15      	ldr	r2, [pc, #84]	; (800f6a8 <TIM_OC6_SetConfig+0xc8>)
 800f654:	4293      	cmp	r3, r2
 800f656:	d109      	bne.n	800f66c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f65e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f660:	683b      	ldr	r3, [r7, #0]
 800f662:	695b      	ldr	r3, [r3, #20]
 800f664:	029b      	lsls	r3, r3, #10
 800f666:	697a      	ldr	r2, [r7, #20]
 800f668:	4313      	orrs	r3, r2
 800f66a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	685a      	ldr	r2, [r3, #4]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	693a      	ldr	r2, [r7, #16]
 800f684:	621a      	str	r2, [r3, #32]
}
 800f686:	bf00      	nop
 800f688:	371c      	adds	r7, #28
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr
 800f692:	bf00      	nop
 800f694:	feff8fff 	.word	0xfeff8fff
 800f698:	40010000 	.word	0x40010000
 800f69c:	40010400 	.word	0x40010400
 800f6a0:	40014000 	.word	0x40014000
 800f6a4:	40014400 	.word	0x40014400
 800f6a8:	40014800 	.word	0x40014800

0800f6ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b087      	sub	sp, #28
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	6a1b      	ldr	r3, [r3, #32]
 800f6bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	6a1b      	ldr	r3, [r3, #32]
 800f6c2:	f023 0201 	bic.w	r2, r3, #1
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	699b      	ldr	r3, [r3, #24]
 800f6ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f6d0:	693b      	ldr	r3, [r7, #16]
 800f6d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f6d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	011b      	lsls	r3, r3, #4
 800f6dc:	693a      	ldr	r2, [r7, #16]
 800f6de:	4313      	orrs	r3, r2
 800f6e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6e2:	697b      	ldr	r3, [r7, #20]
 800f6e4:	f023 030a 	bic.w	r3, r3, #10
 800f6e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f6ea:	697a      	ldr	r2, [r7, #20]
 800f6ec:	68bb      	ldr	r3, [r7, #8]
 800f6ee:	4313      	orrs	r3, r2
 800f6f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f6f2:	68fb      	ldr	r3, [r7, #12]
 800f6f4:	693a      	ldr	r2, [r7, #16]
 800f6f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	697a      	ldr	r2, [r7, #20]
 800f6fc:	621a      	str	r2, [r3, #32]
}
 800f6fe:	bf00      	nop
 800f700:	371c      	adds	r7, #28
 800f702:	46bd      	mov	sp, r7
 800f704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f708:	4770      	bx	lr

0800f70a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f70a:	b480      	push	{r7}
 800f70c:	b087      	sub	sp, #28
 800f70e:	af00      	add	r7, sp, #0
 800f710:	60f8      	str	r0, [r7, #12]
 800f712:	60b9      	str	r1, [r7, #8]
 800f714:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	6a1b      	ldr	r3, [r3, #32]
 800f71a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6a1b      	ldr	r3, [r3, #32]
 800f720:	f023 0210 	bic.w	r2, r3, #16
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	699b      	ldr	r3, [r3, #24]
 800f72c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f72e:	693b      	ldr	r3, [r7, #16]
 800f730:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f734:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	031b      	lsls	r3, r3, #12
 800f73a:	693a      	ldr	r2, [r7, #16]
 800f73c:	4313      	orrs	r3, r2
 800f73e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f740:	697b      	ldr	r3, [r7, #20]
 800f742:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f746:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	011b      	lsls	r3, r3, #4
 800f74c:	697a      	ldr	r2, [r7, #20]
 800f74e:	4313      	orrs	r3, r2
 800f750:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f752:	68fb      	ldr	r3, [r7, #12]
 800f754:	693a      	ldr	r2, [r7, #16]
 800f756:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	697a      	ldr	r2, [r7, #20]
 800f75c:	621a      	str	r2, [r3, #32]
}
 800f75e:	bf00      	nop
 800f760:	371c      	adds	r7, #28
 800f762:	46bd      	mov	sp, r7
 800f764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f768:	4770      	bx	lr
	...

0800f76c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f76c:	b480      	push	{r7}
 800f76e:	b085      	sub	sp, #20
 800f770:	af00      	add	r7, sp, #0
 800f772:	6078      	str	r0, [r7, #4]
 800f774:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	689b      	ldr	r3, [r3, #8]
 800f77a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f77c:	68fa      	ldr	r2, [r7, #12]
 800f77e:	4b09      	ldr	r3, [pc, #36]	; (800f7a4 <TIM_ITRx_SetConfig+0x38>)
 800f780:	4013      	ands	r3, r2
 800f782:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f784:	683a      	ldr	r2, [r7, #0]
 800f786:	68fb      	ldr	r3, [r7, #12]
 800f788:	4313      	orrs	r3, r2
 800f78a:	f043 0307 	orr.w	r3, r3, #7
 800f78e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	68fa      	ldr	r2, [r7, #12]
 800f794:	609a      	str	r2, [r3, #8]
}
 800f796:	bf00      	nop
 800f798:	3714      	adds	r7, #20
 800f79a:	46bd      	mov	sp, r7
 800f79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a0:	4770      	bx	lr
 800f7a2:	bf00      	nop
 800f7a4:	ffcfff8f 	.word	0xffcfff8f

0800f7a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f7a8:	b480      	push	{r7}
 800f7aa:	b087      	sub	sp, #28
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	60f8      	str	r0, [r7, #12]
 800f7b0:	60b9      	str	r1, [r7, #8]
 800f7b2:	607a      	str	r2, [r7, #4]
 800f7b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	689b      	ldr	r3, [r3, #8]
 800f7ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f7bc:	697b      	ldr	r3, [r7, #20]
 800f7be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f7c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f7c4:	683b      	ldr	r3, [r7, #0]
 800f7c6:	021a      	lsls	r2, r3, #8
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	431a      	orrs	r2, r3
 800f7cc:	68bb      	ldr	r3, [r7, #8]
 800f7ce:	4313      	orrs	r3, r2
 800f7d0:	697a      	ldr	r2, [r7, #20]
 800f7d2:	4313      	orrs	r3, r2
 800f7d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	697a      	ldr	r2, [r7, #20]
 800f7da:	609a      	str	r2, [r3, #8]
}
 800f7dc:	bf00      	nop
 800f7de:	371c      	adds	r7, #28
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7e6:	4770      	bx	lr

0800f7e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b087      	sub	sp, #28
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f7f4:	68bb      	ldr	r3, [r7, #8]
 800f7f6:	f003 031f 	and.w	r3, r3, #31
 800f7fa:	2201      	movs	r2, #1
 800f7fc:	fa02 f303 	lsl.w	r3, r2, r3
 800f800:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	6a1a      	ldr	r2, [r3, #32]
 800f806:	697b      	ldr	r3, [r7, #20]
 800f808:	43db      	mvns	r3, r3
 800f80a:	401a      	ands	r2, r3
 800f80c:	68fb      	ldr	r3, [r7, #12]
 800f80e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	6a1a      	ldr	r2, [r3, #32]
 800f814:	68bb      	ldr	r3, [r7, #8]
 800f816:	f003 031f 	and.w	r3, r3, #31
 800f81a:	6879      	ldr	r1, [r7, #4]
 800f81c:	fa01 f303 	lsl.w	r3, r1, r3
 800f820:	431a      	orrs	r2, r3
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	621a      	str	r2, [r3, #32]
}
 800f826:	bf00      	nop
 800f828:	371c      	adds	r7, #28
 800f82a:	46bd      	mov	sp, r7
 800f82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f830:	4770      	bx	lr
	...

0800f834 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f834:	b480      	push	{r7}
 800f836:	b085      	sub	sp, #20
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f844:	2b01      	cmp	r3, #1
 800f846:	d101      	bne.n	800f84c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f848:	2302      	movs	r3, #2
 800f84a:	e06d      	b.n	800f928 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	2201      	movs	r2, #1
 800f850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2202      	movs	r2, #2
 800f858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	681b      	ldr	r3, [r3, #0]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	689b      	ldr	r3, [r3, #8]
 800f86a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	681b      	ldr	r3, [r3, #0]
 800f870:	4a30      	ldr	r2, [pc, #192]	; (800f934 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f872:	4293      	cmp	r3, r2
 800f874:	d004      	beq.n	800f880 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	681b      	ldr	r3, [r3, #0]
 800f87a:	4a2f      	ldr	r2, [pc, #188]	; (800f938 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f87c:	4293      	cmp	r3, r2
 800f87e:	d108      	bne.n	800f892 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f886:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f888:	683b      	ldr	r3, [r7, #0]
 800f88a:	685b      	ldr	r3, [r3, #4]
 800f88c:	68fa      	ldr	r2, [r7, #12]
 800f88e:	4313      	orrs	r3, r2
 800f890:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f898:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f89a:	683b      	ldr	r3, [r7, #0]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	68fa      	ldr	r2, [r7, #12]
 800f8a0:	4313      	orrs	r3, r2
 800f8a2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	681b      	ldr	r3, [r3, #0]
 800f8a8:	68fa      	ldr	r2, [r7, #12]
 800f8aa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	681b      	ldr	r3, [r3, #0]
 800f8b0:	4a20      	ldr	r2, [pc, #128]	; (800f934 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f8b2:	4293      	cmp	r3, r2
 800f8b4:	d022      	beq.n	800f8fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f8be:	d01d      	beq.n	800f8fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	4a1d      	ldr	r2, [pc, #116]	; (800f93c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f8c6:	4293      	cmp	r3, r2
 800f8c8:	d018      	beq.n	800f8fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	681b      	ldr	r3, [r3, #0]
 800f8ce:	4a1c      	ldr	r2, [pc, #112]	; (800f940 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f8d0:	4293      	cmp	r3, r2
 800f8d2:	d013      	beq.n	800f8fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	4a1a      	ldr	r2, [pc, #104]	; (800f944 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f8da:	4293      	cmp	r3, r2
 800f8dc:	d00e      	beq.n	800f8fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	4a15      	ldr	r2, [pc, #84]	; (800f938 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f8e4:	4293      	cmp	r3, r2
 800f8e6:	d009      	beq.n	800f8fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a16      	ldr	r2, [pc, #88]	; (800f948 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f8ee:	4293      	cmp	r3, r2
 800f8f0:	d004      	beq.n	800f8fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	681b      	ldr	r3, [r3, #0]
 800f8f6:	4a15      	ldr	r2, [pc, #84]	; (800f94c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f8f8:	4293      	cmp	r3, r2
 800f8fa:	d10c      	bne.n	800f916 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f902:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f904:	683b      	ldr	r3, [r7, #0]
 800f906:	689b      	ldr	r3, [r3, #8]
 800f908:	68ba      	ldr	r2, [r7, #8]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	68ba      	ldr	r2, [r7, #8]
 800f914:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2201      	movs	r2, #1
 800f91a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2200      	movs	r2, #0
 800f922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f926:	2300      	movs	r3, #0
}
 800f928:	4618      	mov	r0, r3
 800f92a:	3714      	adds	r7, #20
 800f92c:	46bd      	mov	sp, r7
 800f92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f932:	4770      	bx	lr
 800f934:	40010000 	.word	0x40010000
 800f938:	40010400 	.word	0x40010400
 800f93c:	40000400 	.word	0x40000400
 800f940:	40000800 	.word	0x40000800
 800f944:	40000c00 	.word	0x40000c00
 800f948:	40001800 	.word	0x40001800
 800f94c:	40014000 	.word	0x40014000

0800f950 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800f950:	b480      	push	{r7}
 800f952:	b085      	sub	sp, #20
 800f954:	af00      	add	r7, sp, #0
 800f956:	6078      	str	r0, [r7, #4]
 800f958:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800f95a:	2300      	movs	r3, #0
 800f95c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f964:	2b01      	cmp	r3, #1
 800f966:	d101      	bne.n	800f96c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800f968:	2302      	movs	r3, #2
 800f96a:	e065      	b.n	800fa38 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	2201      	movs	r2, #1
 800f970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800f974:	68fb      	ldr	r3, [r7, #12]
 800f976:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800f97a:	683b      	ldr	r3, [r7, #0]
 800f97c:	68db      	ldr	r3, [r3, #12]
 800f97e:	4313      	orrs	r3, r2
 800f980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	689b      	ldr	r3, [r3, #8]
 800f98c:	4313      	orrs	r3, r2
 800f98e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800f990:	68fb      	ldr	r3, [r7, #12]
 800f992:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	4313      	orrs	r3, r2
 800f99c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800f9a4:	683b      	ldr	r3, [r7, #0]
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	4313      	orrs	r3, r2
 800f9aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f9b2:	683b      	ldr	r3, [r7, #0]
 800f9b4:	691b      	ldr	r3, [r3, #16]
 800f9b6:	4313      	orrs	r3, r2
 800f9b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800f9c0:	683b      	ldr	r3, [r7, #0]
 800f9c2:	695b      	ldr	r3, [r3, #20]
 800f9c4:	4313      	orrs	r3, r2
 800f9c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800f9ce:	683b      	ldr	r3, [r7, #0]
 800f9d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f9d2:	4313      	orrs	r3, r2
 800f9d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800f9dc:	683b      	ldr	r3, [r7, #0]
 800f9de:	699b      	ldr	r3, [r3, #24]
 800f9e0:	041b      	lsls	r3, r3, #16
 800f9e2:	4313      	orrs	r3, r2
 800f9e4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	4a16      	ldr	r2, [pc, #88]	; (800fa44 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d004      	beq.n	800f9fa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	4a14      	ldr	r2, [pc, #80]	; (800fa48 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800f9f6:	4293      	cmp	r3, r2
 800f9f8:	d115      	bne.n	800fa26 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa04:	051b      	lsls	r3, r3, #20
 800fa06:	4313      	orrs	r3, r2
 800fa08:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fa0a:	68fb      	ldr	r3, [r7, #12]
 800fa0c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	69db      	ldr	r3, [r3, #28]
 800fa14:	4313      	orrs	r3, r2
 800fa16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fa18:	68fb      	ldr	r3, [r7, #12]
 800fa1a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fa1e:	683b      	ldr	r3, [r7, #0]
 800fa20:	6a1b      	ldr	r3, [r3, #32]
 800fa22:	4313      	orrs	r3, r2
 800fa24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	681b      	ldr	r3, [r3, #0]
 800fa2a:	68fa      	ldr	r2, [r7, #12]
 800fa2c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	2200      	movs	r2, #0
 800fa32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fa36:	2300      	movs	r3, #0
}
 800fa38:	4618      	mov	r0, r3
 800fa3a:	3714      	adds	r7, #20
 800fa3c:	46bd      	mov	sp, r7
 800fa3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa42:	4770      	bx	lr
 800fa44:	40010000 	.word	0x40010000
 800fa48:	40010400 	.word	0x40010400

0800fa4c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fa4c:	b480      	push	{r7}
 800fa4e:	b083      	sub	sp, #12
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fa54:	bf00      	nop
 800fa56:	370c      	adds	r7, #12
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa5e:	4770      	bx	lr

0800fa60 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b083      	sub	sp, #12
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fa68:	bf00      	nop
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr

0800fa74 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fa74:	b480      	push	{r7}
 800fa76:	b083      	sub	sp, #12
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fa7c:	bf00      	nop
 800fa7e:	370c      	adds	r7, #12
 800fa80:	46bd      	mov	sp, r7
 800fa82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa86:	4770      	bx	lr

0800fa88 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b082      	sub	sp, #8
 800fa8c:	af00      	add	r7, sp, #0
 800fa8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d101      	bne.n	800fa9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fa96:	2301      	movs	r3, #1
 800fa98:	e042      	b.n	800fb20 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	d106      	bne.n	800fab2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	2200      	movs	r2, #0
 800faa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800faac:	6878      	ldr	r0, [r7, #4]
 800faae:	f7f3 fc49 	bl	8003344 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	2224      	movs	r2, #36	; 0x24
 800fab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	681a      	ldr	r2, [r3, #0]
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	f022 0201 	bic.w	r2, r2, #1
 800fac8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800fad2:	6878      	ldr	r0, [r7, #4]
 800fad4:	f001 fb8c 	bl	80111f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fad8:	6878      	ldr	r0, [r7, #4]
 800fada:	f000 fe21 	bl	8010720 <UART_SetConfig>
 800fade:	4603      	mov	r3, r0
 800fae0:	2b01      	cmp	r3, #1
 800fae2:	d101      	bne.n	800fae8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800fae4:	2301      	movs	r3, #1
 800fae6:	e01b      	b.n	800fb20 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	685a      	ldr	r2, [r3, #4]
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	681b      	ldr	r3, [r3, #0]
 800faf2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800faf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	689a      	ldr	r2, [r3, #8]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	681b      	ldr	r3, [r3, #0]
 800fb02:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	681a      	ldr	r2, [r3, #0]
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	f042 0201 	orr.w	r2, r2, #1
 800fb16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f001 fc0b 	bl	8011334 <UART_CheckIdleState>
 800fb1e:	4603      	mov	r3, r0
}
 800fb20:	4618      	mov	r0, r3
 800fb22:	3708      	adds	r7, #8
 800fb24:	46bd      	mov	sp, r7
 800fb26:	bd80      	pop	{r7, pc}

0800fb28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08a      	sub	sp, #40	; 0x28
 800fb2c:	af02      	add	r7, sp, #8
 800fb2e:	60f8      	str	r0, [r7, #12]
 800fb30:	60b9      	str	r1, [r7, #8]
 800fb32:	603b      	str	r3, [r7, #0]
 800fb34:	4613      	mov	r3, r2
 800fb36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb38:	68fb      	ldr	r3, [r7, #12]
 800fb3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fb3e:	2b20      	cmp	r3, #32
 800fb40:	d17b      	bne.n	800fc3a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb42:	68bb      	ldr	r3, [r7, #8]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d002      	beq.n	800fb4e <HAL_UART_Transmit+0x26>
 800fb48:	88fb      	ldrh	r3, [r7, #6]
 800fb4a:	2b00      	cmp	r3, #0
 800fb4c:	d101      	bne.n	800fb52 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800fb4e:	2301      	movs	r3, #1
 800fb50:	e074      	b.n	800fc3c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	2200      	movs	r2, #0
 800fb56:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	2221      	movs	r2, #33	; 0x21
 800fb5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fb62:	f7f3 ff63 	bl	8003a2c <HAL_GetTick>
 800fb66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	88fa      	ldrh	r2, [r7, #6]
 800fb6c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	88fa      	ldrh	r2, [r7, #6]
 800fb74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb78:	68fb      	ldr	r3, [r7, #12]
 800fb7a:	689b      	ldr	r3, [r3, #8]
 800fb7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fb80:	d108      	bne.n	800fb94 <HAL_UART_Transmit+0x6c>
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	691b      	ldr	r3, [r3, #16]
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	d104      	bne.n	800fb94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fb8e:	68bb      	ldr	r3, [r7, #8]
 800fb90:	61bb      	str	r3, [r7, #24]
 800fb92:	e003      	b.n	800fb9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800fb94:	68bb      	ldr	r3, [r7, #8]
 800fb96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fb98:	2300      	movs	r3, #0
 800fb9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fb9c:	e030      	b.n	800fc00 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fb9e:	683b      	ldr	r3, [r7, #0]
 800fba0:	9300      	str	r3, [sp, #0]
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	2200      	movs	r2, #0
 800fba6:	2180      	movs	r1, #128	; 0x80
 800fba8:	68f8      	ldr	r0, [r7, #12]
 800fbaa:	f001 fc6d 	bl	8011488 <UART_WaitOnFlagUntilTimeout>
 800fbae:	4603      	mov	r3, r0
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d005      	beq.n	800fbc0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	2220      	movs	r2, #32
 800fbb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800fbbc:	2303      	movs	r3, #3
 800fbbe:	e03d      	b.n	800fc3c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800fbc0:	69fb      	ldr	r3, [r7, #28]
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d10b      	bne.n	800fbde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	881b      	ldrh	r3, [r3, #0]
 800fbca:	461a      	mov	r2, r3
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fbd4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fbd6:	69bb      	ldr	r3, [r7, #24]
 800fbd8:	3302      	adds	r3, #2
 800fbda:	61bb      	str	r3, [r7, #24]
 800fbdc:	e007      	b.n	800fbee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fbde:	69fb      	ldr	r3, [r7, #28]
 800fbe0:	781a      	ldrb	r2, [r3, #0]
 800fbe2:	68fb      	ldr	r3, [r7, #12]
 800fbe4:	681b      	ldr	r3, [r3, #0]
 800fbe6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	3301      	adds	r3, #1
 800fbec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fbf4:	b29b      	uxth	r3, r3
 800fbf6:	3b01      	subs	r3, #1
 800fbf8:	b29a      	uxth	r2, r3
 800fbfa:	68fb      	ldr	r3, [r7, #12]
 800fbfc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc06:	b29b      	uxth	r3, r3
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d1c8      	bne.n	800fb9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fc0c:	683b      	ldr	r3, [r7, #0]
 800fc0e:	9300      	str	r3, [sp, #0]
 800fc10:	697b      	ldr	r3, [r7, #20]
 800fc12:	2200      	movs	r2, #0
 800fc14:	2140      	movs	r1, #64	; 0x40
 800fc16:	68f8      	ldr	r0, [r7, #12]
 800fc18:	f001 fc36 	bl	8011488 <UART_WaitOnFlagUntilTimeout>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	2b00      	cmp	r3, #0
 800fc20:	d005      	beq.n	800fc2e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	2220      	movs	r2, #32
 800fc26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800fc2a:	2303      	movs	r3, #3
 800fc2c:	e006      	b.n	800fc3c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc2e:	68fb      	ldr	r3, [r7, #12]
 800fc30:	2220      	movs	r2, #32
 800fc32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800fc36:	2300      	movs	r3, #0
 800fc38:	e000      	b.n	800fc3c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800fc3a:	2302      	movs	r3, #2
  }
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3720      	adds	r7, #32
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}

0800fc44 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fc44:	b580      	push	{r7, lr}
 800fc46:	b08a      	sub	sp, #40	; 0x28
 800fc48:	af02      	add	r7, sp, #8
 800fc4a:	60f8      	str	r0, [r7, #12]
 800fc4c:	60b9      	str	r1, [r7, #8]
 800fc4e:	603b      	str	r3, [r7, #0]
 800fc50:	4613      	mov	r3, r2
 800fc52:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fc5a:	2b20      	cmp	r3, #32
 800fc5c:	f040 80b5 	bne.w	800fdca <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc60:	68bb      	ldr	r3, [r7, #8]
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d002      	beq.n	800fc6c <HAL_UART_Receive+0x28>
 800fc66:	88fb      	ldrh	r3, [r7, #6]
 800fc68:	2b00      	cmp	r3, #0
 800fc6a:	d101      	bne.n	800fc70 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800fc6c:	2301      	movs	r3, #1
 800fc6e:	e0ad      	b.n	800fdcc <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2200      	movs	r2, #0
 800fc74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fc78:	68fb      	ldr	r3, [r7, #12]
 800fc7a:	2222      	movs	r2, #34	; 0x22
 800fc7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	2200      	movs	r2, #0
 800fc84:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fc86:	f7f3 fed1 	bl	8003a2c <HAL_GetTick>
 800fc8a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	88fa      	ldrh	r2, [r7, #6]
 800fc90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800fc94:	68fb      	ldr	r3, [r7, #12]
 800fc96:	88fa      	ldrh	r2, [r7, #6]
 800fc98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fca4:	d10e      	bne.n	800fcc4 <HAL_UART_Receive+0x80>
 800fca6:	68fb      	ldr	r3, [r7, #12]
 800fca8:	691b      	ldr	r3, [r3, #16]
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d105      	bne.n	800fcba <HAL_UART_Receive+0x76>
 800fcae:	68fb      	ldr	r3, [r7, #12]
 800fcb0:	f240 12ff 	movw	r2, #511	; 0x1ff
 800fcb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcb8:	e02d      	b.n	800fd16 <HAL_UART_Receive+0xd2>
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	22ff      	movs	r2, #255	; 0xff
 800fcbe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcc2:	e028      	b.n	800fd16 <HAL_UART_Receive+0xd2>
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	689b      	ldr	r3, [r3, #8]
 800fcc8:	2b00      	cmp	r3, #0
 800fcca:	d10d      	bne.n	800fce8 <HAL_UART_Receive+0xa4>
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	691b      	ldr	r3, [r3, #16]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d104      	bne.n	800fcde <HAL_UART_Receive+0x9a>
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	22ff      	movs	r2, #255	; 0xff
 800fcd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fcdc:	e01b      	b.n	800fd16 <HAL_UART_Receive+0xd2>
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	227f      	movs	r2, #127	; 0x7f
 800fce2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fce6:	e016      	b.n	800fd16 <HAL_UART_Receive+0xd2>
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	689b      	ldr	r3, [r3, #8]
 800fcec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800fcf0:	d10d      	bne.n	800fd0e <HAL_UART_Receive+0xca>
 800fcf2:	68fb      	ldr	r3, [r7, #12]
 800fcf4:	691b      	ldr	r3, [r3, #16]
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	d104      	bne.n	800fd04 <HAL_UART_Receive+0xc0>
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	227f      	movs	r2, #127	; 0x7f
 800fcfe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd02:	e008      	b.n	800fd16 <HAL_UART_Receive+0xd2>
 800fd04:	68fb      	ldr	r3, [r7, #12]
 800fd06:	223f      	movs	r2, #63	; 0x3f
 800fd08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800fd0c:	e003      	b.n	800fd16 <HAL_UART_Receive+0xd2>
 800fd0e:	68fb      	ldr	r3, [r7, #12]
 800fd10:	2200      	movs	r2, #0
 800fd12:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800fd16:	68fb      	ldr	r3, [r7, #12]
 800fd18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd1c:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	689b      	ldr	r3, [r3, #8]
 800fd22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fd26:	d108      	bne.n	800fd3a <HAL_UART_Receive+0xf6>
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	691b      	ldr	r3, [r3, #16]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d104      	bne.n	800fd3a <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800fd30:	2300      	movs	r3, #0
 800fd32:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	61bb      	str	r3, [r7, #24]
 800fd38:	e003      	b.n	800fd42 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800fd3a:	68bb      	ldr	r3, [r7, #8]
 800fd3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800fd42:	e036      	b.n	800fdb2 <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800fd44:	683b      	ldr	r3, [r7, #0]
 800fd46:	9300      	str	r3, [sp, #0]
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	2120      	movs	r1, #32
 800fd4e:	68f8      	ldr	r0, [r7, #12]
 800fd50:	f001 fb9a 	bl	8011488 <UART_WaitOnFlagUntilTimeout>
 800fd54:	4603      	mov	r3, r0
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d005      	beq.n	800fd66 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800fd5a:	68fb      	ldr	r3, [r7, #12]
 800fd5c:	2220      	movs	r2, #32
 800fd5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800fd62:	2303      	movs	r3, #3
 800fd64:	e032      	b.n	800fdcc <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800fd66:	69fb      	ldr	r3, [r7, #28]
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d10c      	bne.n	800fd86 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	8a7b      	ldrh	r3, [r7, #18]
 800fd76:	4013      	ands	r3, r2
 800fd78:	b29a      	uxth	r2, r3
 800fd7a:	69bb      	ldr	r3, [r7, #24]
 800fd7c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800fd7e:	69bb      	ldr	r3, [r7, #24]
 800fd80:	3302      	adds	r3, #2
 800fd82:	61bb      	str	r3, [r7, #24]
 800fd84:	e00c      	b.n	800fda0 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	681b      	ldr	r3, [r3, #0]
 800fd8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd8c:	b2da      	uxtb	r2, r3
 800fd8e:	8a7b      	ldrh	r3, [r7, #18]
 800fd90:	b2db      	uxtb	r3, r3
 800fd92:	4013      	ands	r3, r2
 800fd94:	b2da      	uxtb	r2, r3
 800fd96:	69fb      	ldr	r3, [r7, #28]
 800fd98:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800fd9a:	69fb      	ldr	r3, [r7, #28]
 800fd9c:	3301      	adds	r3, #1
 800fd9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fda6:	b29b      	uxth	r3, r3
 800fda8:	3b01      	subs	r3, #1
 800fdaa:	b29a      	uxth	r2, r3
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800fdb2:	68fb      	ldr	r3, [r7, #12]
 800fdb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800fdb8:	b29b      	uxth	r3, r3
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d1c2      	bne.n	800fd44 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	2220      	movs	r2, #32
 800fdc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	e000      	b.n	800fdcc <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 800fdca:	2302      	movs	r3, #2
  }
}
 800fdcc:	4618      	mov	r0, r3
 800fdce:	3720      	adds	r7, #32
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	bd80      	pop	{r7, pc}

0800fdd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b08a      	sub	sp, #40	; 0x28
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	60f8      	str	r0, [r7, #12]
 800fddc:	60b9      	str	r1, [r7, #8]
 800fdde:	4613      	mov	r3, r2
 800fde0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fde2:	68fb      	ldr	r3, [r7, #12]
 800fde4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800fde8:	2b20      	cmp	r3, #32
 800fdea:	d137      	bne.n	800fe5c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdec:	68bb      	ldr	r3, [r7, #8]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d002      	beq.n	800fdf8 <HAL_UART_Receive_IT+0x24>
 800fdf2:	88fb      	ldrh	r3, [r7, #6]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d101      	bne.n	800fdfc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800fdf8:	2301      	movs	r3, #1
 800fdfa:	e030      	b.n	800fe5e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fdfc:	68fb      	ldr	r3, [r7, #12]
 800fdfe:	2200      	movs	r2, #0
 800fe00:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800fe02:	68fb      	ldr	r3, [r7, #12]
 800fe04:	681b      	ldr	r3, [r3, #0]
 800fe06:	4a18      	ldr	r2, [pc, #96]	; (800fe68 <HAL_UART_Receive_IT+0x94>)
 800fe08:	4293      	cmp	r3, r2
 800fe0a:	d01f      	beq.n	800fe4c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800fe0c:	68fb      	ldr	r3, [r7, #12]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	685b      	ldr	r3, [r3, #4]
 800fe12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	d018      	beq.n	800fe4c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800fe1a:	68fb      	ldr	r3, [r7, #12]
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe20:	697b      	ldr	r3, [r7, #20]
 800fe22:	e853 3f00 	ldrex	r3, [r3]
 800fe26:	613b      	str	r3, [r7, #16]
   return(result);
 800fe28:	693b      	ldr	r3, [r7, #16]
 800fe2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800fe2e:	627b      	str	r3, [r7, #36]	; 0x24
 800fe30:	68fb      	ldr	r3, [r7, #12]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	461a      	mov	r2, r3
 800fe36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe38:	623b      	str	r3, [r7, #32]
 800fe3a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe3c:	69f9      	ldr	r1, [r7, #28]
 800fe3e:	6a3a      	ldr	r2, [r7, #32]
 800fe40:	e841 2300 	strex	r3, r2, [r1]
 800fe44:	61bb      	str	r3, [r7, #24]
   return(result);
 800fe46:	69bb      	ldr	r3, [r7, #24]
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d1e6      	bne.n	800fe1a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800fe4c:	88fb      	ldrh	r3, [r7, #6]
 800fe4e:	461a      	mov	r2, r3
 800fe50:	68b9      	ldr	r1, [r7, #8]
 800fe52:	68f8      	ldr	r0, [r7, #12]
 800fe54:	f001 fb86 	bl	8011564 <UART_Start_Receive_IT>
 800fe58:	4603      	mov	r3, r0
 800fe5a:	e000      	b.n	800fe5e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800fe5c:	2302      	movs	r3, #2
  }
}
 800fe5e:	4618      	mov	r0, r3
 800fe60:	3728      	adds	r7, #40	; 0x28
 800fe62:	46bd      	mov	sp, r7
 800fe64:	bd80      	pop	{r7, pc}
 800fe66:	bf00      	nop
 800fe68:	58000c00 	.word	0x58000c00

0800fe6c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800fe6c:	b580      	push	{r7, lr}
 800fe6e:	b08a      	sub	sp, #40	; 0x28
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	60f8      	str	r0, [r7, #12]
 800fe74:	60b9      	str	r1, [r7, #8]
 800fe76:	4613      	mov	r3, r2
 800fe78:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fe7a:	68fb      	ldr	r3, [r7, #12]
 800fe7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800fe80:	2b20      	cmp	r3, #32
 800fe82:	d167      	bne.n	800ff54 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800fe84:	68bb      	ldr	r3, [r7, #8]
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d002      	beq.n	800fe90 <HAL_UART_Transmit_DMA+0x24>
 800fe8a:	88fb      	ldrh	r3, [r7, #6]
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d101      	bne.n	800fe94 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800fe90:	2301      	movs	r3, #1
 800fe92:	e060      	b.n	800ff56 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 800fe94:	68fb      	ldr	r3, [r7, #12]
 800fe96:	68ba      	ldr	r2, [r7, #8]
 800fe98:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800fe9a:	68fb      	ldr	r3, [r7, #12]
 800fe9c:	88fa      	ldrh	r2, [r7, #6]
 800fe9e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	88fa      	ldrh	r2, [r7, #6]
 800fea6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	2200      	movs	r2, #0
 800feae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	2221      	movs	r2, #33	; 0x21
 800feb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800feba:	68fb      	ldr	r3, [r7, #12]
 800febc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d028      	beq.n	800ff14 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fec6:	4a26      	ldr	r2, [pc, #152]	; (800ff60 <HAL_UART_Transmit_DMA+0xf4>)
 800fec8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800feca:	68fb      	ldr	r3, [r7, #12]
 800fecc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fece:	4a25      	ldr	r2, [pc, #148]	; (800ff64 <HAL_UART_Transmit_DMA+0xf8>)
 800fed0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800fed2:	68fb      	ldr	r3, [r7, #12]
 800fed4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fed6:	4a24      	ldr	r2, [pc, #144]	; (800ff68 <HAL_UART_Transmit_DMA+0xfc>)
 800fed8:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800fede:	2200      	movs	r2, #0
 800fee0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800fee6:	68fb      	ldr	r3, [r7, #12]
 800fee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800feea:	4619      	mov	r1, r3
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	3328      	adds	r3, #40	; 0x28
 800fef2:	461a      	mov	r2, r3
 800fef4:	88fb      	ldrh	r3, [r7, #6]
 800fef6:	f7f6 fa1d 	bl	8006334 <HAL_DMA_Start_IT>
 800fefa:	4603      	mov	r3, r0
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d009      	beq.n	800ff14 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ff00:	68fb      	ldr	r3, [r7, #12]
 800ff02:	2210      	movs	r2, #16
 800ff04:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2220      	movs	r2, #32
 800ff0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 800ff10:	2301      	movs	r3, #1
 800ff12:	e020      	b.n	800ff56 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ff14:	68fb      	ldr	r3, [r7, #12]
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	2240      	movs	r2, #64	; 0x40
 800ff1a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ff1c:	68fb      	ldr	r3, [r7, #12]
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	3308      	adds	r3, #8
 800ff22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	e853 3f00 	ldrex	r3, [r3]
 800ff2a:	613b      	str	r3, [r7, #16]
   return(result);
 800ff2c:	693b      	ldr	r3, [r7, #16]
 800ff2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff32:	627b      	str	r3, [r7, #36]	; 0x24
 800ff34:	68fb      	ldr	r3, [r7, #12]
 800ff36:	681b      	ldr	r3, [r3, #0]
 800ff38:	3308      	adds	r3, #8
 800ff3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff3c:	623a      	str	r2, [r7, #32]
 800ff3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ff40:	69f9      	ldr	r1, [r7, #28]
 800ff42:	6a3a      	ldr	r2, [r7, #32]
 800ff44:	e841 2300 	strex	r3, r2, [r1]
 800ff48:	61bb      	str	r3, [r7, #24]
   return(result);
 800ff4a:	69bb      	ldr	r3, [r7, #24]
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d1e5      	bne.n	800ff1c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800ff50:	2300      	movs	r3, #0
 800ff52:	e000      	b.n	800ff56 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800ff54:	2302      	movs	r3, #2
  }
}
 800ff56:	4618      	mov	r0, r3
 800ff58:	3728      	adds	r7, #40	; 0x28
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	bd80      	pop	{r7, pc}
 800ff5e:	bf00      	nop
 800ff60:	080118f9 	.word	0x080118f9
 800ff64:	0801198f 	.word	0x0801198f
 800ff68:	080119ab 	.word	0x080119ab

0800ff6c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b0ba      	sub	sp, #232	; 0xe8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	681b      	ldr	r3, [r3, #0]
 800ff78:	69db      	ldr	r3, [r3, #28]
 800ff7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	681b      	ldr	r3, [r3, #0]
 800ff84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	689b      	ldr	r3, [r3, #8]
 800ff8e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ff92:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ff96:	f640 030f 	movw	r3, #2063	; 0x80f
 800ff9a:	4013      	ands	r3, r2
 800ff9c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ffa0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d11b      	bne.n	800ffe0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ffa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ffac:	f003 0320 	and.w	r3, r3, #32
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d015      	beq.n	800ffe0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ffb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ffb8:	f003 0320 	and.w	r3, r3, #32
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d105      	bne.n	800ffcc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ffc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ffc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d009      	beq.n	800ffe0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffd0:	2b00      	cmp	r3, #0
 800ffd2:	f000 8377 	beq.w	80106c4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffda:	6878      	ldr	r0, [r7, #4]
 800ffdc:	4798      	blx	r3
      }
      return;
 800ffde:	e371      	b.n	80106c4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ffe0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	f000 8123 	beq.w	8010230 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ffea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ffee:	4b8d      	ldr	r3, [pc, #564]	; (8010224 <HAL_UART_IRQHandler+0x2b8>)
 800fff0:	4013      	ands	r3, r2
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d106      	bne.n	8010004 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800fff6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800fffa:	4b8b      	ldr	r3, [pc, #556]	; (8010228 <HAL_UART_IRQHandler+0x2bc>)
 800fffc:	4013      	ands	r3, r2
 800fffe:	2b00      	cmp	r3, #0
 8010000:	f000 8116 	beq.w	8010230 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010008:	f003 0301 	and.w	r3, r3, #1
 801000c:	2b00      	cmp	r3, #0
 801000e:	d011      	beq.n	8010034 <HAL_UART_IRQHandler+0xc8>
 8010010:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010018:	2b00      	cmp	r3, #0
 801001a:	d00b      	beq.n	8010034 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	681b      	ldr	r3, [r3, #0]
 8010020:	2201      	movs	r2, #1
 8010022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801002a:	f043 0201 	orr.w	r2, r3, #1
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010038:	f003 0302 	and.w	r3, r3, #2
 801003c:	2b00      	cmp	r3, #0
 801003e:	d011      	beq.n	8010064 <HAL_UART_IRQHandler+0xf8>
 8010040:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010044:	f003 0301 	and.w	r3, r3, #1
 8010048:	2b00      	cmp	r3, #0
 801004a:	d00b      	beq.n	8010064 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	2202      	movs	r2, #2
 8010052:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801005a:	f043 0204 	orr.w	r2, r3, #4
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8010064:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010068:	f003 0304 	and.w	r3, r3, #4
 801006c:	2b00      	cmp	r3, #0
 801006e:	d011      	beq.n	8010094 <HAL_UART_IRQHandler+0x128>
 8010070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010074:	f003 0301 	and.w	r3, r3, #1
 8010078:	2b00      	cmp	r3, #0
 801007a:	d00b      	beq.n	8010094 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	2204      	movs	r2, #4
 8010082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801008a:	f043 0202 	orr.w	r2, r3, #2
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8010094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010098:	f003 0308 	and.w	r3, r3, #8
 801009c:	2b00      	cmp	r3, #0
 801009e:	d017      	beq.n	80100d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80100a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100a4:	f003 0320 	and.w	r3, r3, #32
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d105      	bne.n	80100b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80100ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80100b0:	4b5c      	ldr	r3, [pc, #368]	; (8010224 <HAL_UART_IRQHandler+0x2b8>)
 80100b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d00b      	beq.n	80100d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	2208      	movs	r2, #8
 80100be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100c6:	f043 0208 	orr.w	r2, r3, #8
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80100d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80100d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80100d8:	2b00      	cmp	r3, #0
 80100da:	d012      	beq.n	8010102 <HAL_UART_IRQHandler+0x196>
 80100dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80100e0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d00c      	beq.n	8010102 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	681b      	ldr	r3, [r3, #0]
 80100ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80100f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100f8:	f043 0220 	orr.w	r2, r3, #32
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010108:	2b00      	cmp	r3, #0
 801010a:	f000 82dd 	beq.w	80106c8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801010e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010112:	f003 0320 	and.w	r3, r3, #32
 8010116:	2b00      	cmp	r3, #0
 8010118:	d013      	beq.n	8010142 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801011a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801011e:	f003 0320 	and.w	r3, r3, #32
 8010122:	2b00      	cmp	r3, #0
 8010124:	d105      	bne.n	8010132 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8010126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801012a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801012e:	2b00      	cmp	r3, #0
 8010130:	d007      	beq.n	8010142 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010136:	2b00      	cmp	r3, #0
 8010138:	d003      	beq.n	8010142 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801013e:	6878      	ldr	r0, [r7, #4]
 8010140:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010148:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	681b      	ldr	r3, [r3, #0]
 8010150:	689b      	ldr	r3, [r3, #8]
 8010152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010156:	2b40      	cmp	r3, #64	; 0x40
 8010158:	d005      	beq.n	8010166 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801015a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801015e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8010162:	2b00      	cmp	r3, #0
 8010164:	d054      	beq.n	8010210 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8010166:	6878      	ldr	r0, [r7, #4]
 8010168:	f001 fb60 	bl	801182c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801016c:	687b      	ldr	r3, [r7, #4]
 801016e:	681b      	ldr	r3, [r3, #0]
 8010170:	689b      	ldr	r3, [r3, #8]
 8010172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010176:	2b40      	cmp	r3, #64	; 0x40
 8010178:	d146      	bne.n	8010208 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	3308      	adds	r3, #8
 8010180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010188:	e853 3f00 	ldrex	r3, [r3]
 801018c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8010190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	3308      	adds	r3, #8
 80101a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80101a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80101aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80101ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80101b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80101b6:	e841 2300 	strex	r3, r2, [r1]
 80101ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80101be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d1d9      	bne.n	801017a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d017      	beq.n	8010200 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101d6:	4a15      	ldr	r2, [pc, #84]	; (801022c <HAL_UART_IRQHandler+0x2c0>)
 80101d8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101e0:	4618      	mov	r0, r3
 80101e2:	f7f6 fe2f 	bl	8006e44 <HAL_DMA_Abort_IT>
 80101e6:	4603      	mov	r3, r0
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d019      	beq.n	8010220 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80101f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80101f4:	687a      	ldr	r2, [r7, #4]
 80101f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80101fa:	4610      	mov	r0, r2
 80101fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80101fe:	e00f      	b.n	8010220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8010200:	6878      	ldr	r0, [r7, #4]
 8010202:	f000 fa77 	bl	80106f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010206:	e00b      	b.n	8010220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8010208:	6878      	ldr	r0, [r7, #4]
 801020a:	f000 fa73 	bl	80106f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801020e:	e007      	b.n	8010220 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8010210:	6878      	ldr	r0, [r7, #4]
 8010212:	f000 fa6f 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	2200      	movs	r2, #0
 801021a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 801021e:	e253      	b.n	80106c8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010220:	bf00      	nop
    return;
 8010222:	e251      	b.n	80106c8 <HAL_UART_IRQHandler+0x75c>
 8010224:	10000001 	.word	0x10000001
 8010228:	04000120 	.word	0x04000120
 801022c:	08011a2b 	.word	0x08011a2b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010234:	2b01      	cmp	r3, #1
 8010236:	f040 81e7 	bne.w	8010608 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801023a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801023e:	f003 0310 	and.w	r3, r3, #16
 8010242:	2b00      	cmp	r3, #0
 8010244:	f000 81e0 	beq.w	8010608 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8010248:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801024c:	f003 0310 	and.w	r3, r3, #16
 8010250:	2b00      	cmp	r3, #0
 8010252:	f000 81d9 	beq.w	8010608 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	681b      	ldr	r3, [r3, #0]
 801025a:	2210      	movs	r2, #16
 801025c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	681b      	ldr	r3, [r3, #0]
 8010262:	689b      	ldr	r3, [r3, #8]
 8010264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010268:	2b40      	cmp	r3, #64	; 0x40
 801026a:	f040 8151 	bne.w	8010510 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	4a96      	ldr	r2, [pc, #600]	; (80104d0 <HAL_UART_IRQHandler+0x564>)
 8010278:	4293      	cmp	r3, r2
 801027a:	d068      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010282:	681b      	ldr	r3, [r3, #0]
 8010284:	4a93      	ldr	r2, [pc, #588]	; (80104d4 <HAL_UART_IRQHandler+0x568>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d061      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 801028a:	687b      	ldr	r3, [r7, #4]
 801028c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	4a91      	ldr	r2, [pc, #580]	; (80104d8 <HAL_UART_IRQHandler+0x56c>)
 8010294:	4293      	cmp	r3, r2
 8010296:	d05a      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 8010298:	687b      	ldr	r3, [r7, #4]
 801029a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801029e:	681b      	ldr	r3, [r3, #0]
 80102a0:	4a8e      	ldr	r2, [pc, #568]	; (80104dc <HAL_UART_IRQHandler+0x570>)
 80102a2:	4293      	cmp	r3, r2
 80102a4:	d053      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	4a8c      	ldr	r2, [pc, #560]	; (80104e0 <HAL_UART_IRQHandler+0x574>)
 80102b0:	4293      	cmp	r3, r2
 80102b2:	d04c      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102ba:	681b      	ldr	r3, [r3, #0]
 80102bc:	4a89      	ldr	r2, [pc, #548]	; (80104e4 <HAL_UART_IRQHandler+0x578>)
 80102be:	4293      	cmp	r3, r2
 80102c0:	d045      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102c8:	681b      	ldr	r3, [r3, #0]
 80102ca:	4a87      	ldr	r2, [pc, #540]	; (80104e8 <HAL_UART_IRQHandler+0x57c>)
 80102cc:	4293      	cmp	r3, r2
 80102ce:	d03e      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 80102d0:	687b      	ldr	r3, [r7, #4]
 80102d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	4a84      	ldr	r2, [pc, #528]	; (80104ec <HAL_UART_IRQHandler+0x580>)
 80102da:	4293      	cmp	r3, r2
 80102dc:	d037      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	4a82      	ldr	r2, [pc, #520]	; (80104f0 <HAL_UART_IRQHandler+0x584>)
 80102e8:	4293      	cmp	r3, r2
 80102ea:	d030      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	4a7f      	ldr	r2, [pc, #508]	; (80104f4 <HAL_UART_IRQHandler+0x588>)
 80102f6:	4293      	cmp	r3, r2
 80102f8:	d029      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010300:	681b      	ldr	r3, [r3, #0]
 8010302:	4a7d      	ldr	r2, [pc, #500]	; (80104f8 <HAL_UART_IRQHandler+0x58c>)
 8010304:	4293      	cmp	r3, r2
 8010306:	d022      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 8010308:	687b      	ldr	r3, [r7, #4]
 801030a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801030e:	681b      	ldr	r3, [r3, #0]
 8010310:	4a7a      	ldr	r2, [pc, #488]	; (80104fc <HAL_UART_IRQHandler+0x590>)
 8010312:	4293      	cmp	r3, r2
 8010314:	d01b      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	4a78      	ldr	r2, [pc, #480]	; (8010500 <HAL_UART_IRQHandler+0x594>)
 8010320:	4293      	cmp	r3, r2
 8010322:	d014      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	4a75      	ldr	r2, [pc, #468]	; (8010504 <HAL_UART_IRQHandler+0x598>)
 801032e:	4293      	cmp	r3, r2
 8010330:	d00d      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	4a73      	ldr	r2, [pc, #460]	; (8010508 <HAL_UART_IRQHandler+0x59c>)
 801033c:	4293      	cmp	r3, r2
 801033e:	d006      	beq.n	801034e <HAL_UART_IRQHandler+0x3e2>
 8010340:	687b      	ldr	r3, [r7, #4]
 8010342:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010346:	681b      	ldr	r3, [r3, #0]
 8010348:	4a70      	ldr	r2, [pc, #448]	; (801050c <HAL_UART_IRQHandler+0x5a0>)
 801034a:	4293      	cmp	r3, r2
 801034c:	d106      	bne.n	801035c <HAL_UART_IRQHandler+0x3f0>
 801034e:	687b      	ldr	r3, [r7, #4]
 8010350:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	685b      	ldr	r3, [r3, #4]
 8010358:	b29b      	uxth	r3, r3
 801035a:	e005      	b.n	8010368 <HAL_UART_IRQHandler+0x3fc>
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	685b      	ldr	r3, [r3, #4]
 8010366:	b29b      	uxth	r3, r3
 8010368:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801036c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8010370:	2b00      	cmp	r3, #0
 8010372:	f000 81ab 	beq.w	80106cc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801037c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8010380:	429a      	cmp	r2, r3
 8010382:	f080 81a3 	bcs.w	80106cc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801038c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010396:	69db      	ldr	r3, [r3, #28]
 8010398:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801039c:	f000 8087 	beq.w	80104ae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103a0:	687b      	ldr	r3, [r7, #4]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80103ac:	e853 3f00 	ldrex	r3, [r3]
 80103b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80103b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80103b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80103bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	461a      	mov	r2, r3
 80103c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80103ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80103d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80103d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80103da:	e841 2300 	strex	r3, r2, [r1]
 80103de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80103e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80103e6:	2b00      	cmp	r3, #0
 80103e8:	d1da      	bne.n	80103a0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80103ea:	687b      	ldr	r3, [r7, #4]
 80103ec:	681b      	ldr	r3, [r3, #0]
 80103ee:	3308      	adds	r3, #8
 80103f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80103f4:	e853 3f00 	ldrex	r3, [r3]
 80103f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80103fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80103fc:	f023 0301 	bic.w	r3, r3, #1
 8010400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	3308      	adds	r3, #8
 801040a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801040e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8010412:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8010416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801041a:	e841 2300 	strex	r3, r2, [r1]
 801041e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8010420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010422:	2b00      	cmp	r3, #0
 8010424:	d1e1      	bne.n	80103ea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	3308      	adds	r3, #8
 801042c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801042e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010430:	e853 3f00 	ldrex	r3, [r3]
 8010434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8010436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801043c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	3308      	adds	r3, #8
 8010446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801044a:	66fa      	str	r2, [r7, #108]	; 0x6c
 801044c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801044e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8010450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8010452:	e841 2300 	strex	r3, r2, [r1]
 8010456:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8010458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801045a:	2b00      	cmp	r3, #0
 801045c:	d1e3      	bne.n	8010426 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	2220      	movs	r2, #32
 8010462:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2200      	movs	r2, #0
 801046a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010472:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010474:	e853 3f00 	ldrex	r3, [r3]
 8010478:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801047a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801047c:	f023 0310 	bic.w	r3, r3, #16
 8010480:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	461a      	mov	r2, r3
 801048a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801048e:	65bb      	str	r3, [r7, #88]	; 0x58
 8010490:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010492:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010494:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010496:	e841 2300 	strex	r3, r2, [r1]
 801049a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801049c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d1e4      	bne.n	801046c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80104a8:	4618      	mov	r0, r3
 80104aa:	f7f6 f9ad 	bl	8006808 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	2202      	movs	r2, #2
 80104b2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80104c0:	b29b      	uxth	r3, r3
 80104c2:	1ad3      	subs	r3, r2, r3
 80104c4:	b29b      	uxth	r3, r3
 80104c6:	4619      	mov	r1, r3
 80104c8:	6878      	ldr	r0, [r7, #4]
 80104ca:	f000 f91d 	bl	8010708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80104ce:	e0fd      	b.n	80106cc <HAL_UART_IRQHandler+0x760>
 80104d0:	40020010 	.word	0x40020010
 80104d4:	40020028 	.word	0x40020028
 80104d8:	40020040 	.word	0x40020040
 80104dc:	40020058 	.word	0x40020058
 80104e0:	40020070 	.word	0x40020070
 80104e4:	40020088 	.word	0x40020088
 80104e8:	400200a0 	.word	0x400200a0
 80104ec:	400200b8 	.word	0x400200b8
 80104f0:	40020410 	.word	0x40020410
 80104f4:	40020428 	.word	0x40020428
 80104f8:	40020440 	.word	0x40020440
 80104fc:	40020458 	.word	0x40020458
 8010500:	40020470 	.word	0x40020470
 8010504:	40020488 	.word	0x40020488
 8010508:	400204a0 	.word	0x400204a0
 801050c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801051c:	b29b      	uxth	r3, r3
 801051e:	1ad3      	subs	r3, r2, r3
 8010520:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801052a:	b29b      	uxth	r3, r3
 801052c:	2b00      	cmp	r3, #0
 801052e:	f000 80cf 	beq.w	80106d0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8010532:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8010536:	2b00      	cmp	r3, #0
 8010538:	f000 80ca 	beq.w	80106d0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	681b      	ldr	r3, [r3, #0]
 8010540:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010544:	e853 3f00 	ldrex	r3, [r3]
 8010548:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801054a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801054c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010550:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	681b      	ldr	r3, [r3, #0]
 8010558:	461a      	mov	r2, r3
 801055a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801055e:	647b      	str	r3, [r7, #68]	; 0x44
 8010560:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010562:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010564:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010566:	e841 2300 	strex	r3, r2, [r1]
 801056a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801056c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801056e:	2b00      	cmp	r3, #0
 8010570:	d1e4      	bne.n	801053c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	3308      	adds	r3, #8
 8010578:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801057a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801057c:	e853 3f00 	ldrex	r3, [r3]
 8010580:	623b      	str	r3, [r7, #32]
   return(result);
 8010582:	6a3a      	ldr	r2, [r7, #32]
 8010584:	4b55      	ldr	r3, [pc, #340]	; (80106dc <HAL_UART_IRQHandler+0x770>)
 8010586:	4013      	ands	r3, r2
 8010588:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	3308      	adds	r3, #8
 8010592:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010596:	633a      	str	r2, [r7, #48]	; 0x30
 8010598:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801059a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801059c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801059e:	e841 2300 	strex	r3, r2, [r1]
 80105a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80105a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d1e3      	bne.n	8010572 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	2220      	movs	r2, #32
 80105ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2200      	movs	r2, #0
 80105b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	2200      	movs	r2, #0
 80105bc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	681b      	ldr	r3, [r3, #0]
 80105c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105c4:	693b      	ldr	r3, [r7, #16]
 80105c6:	e853 3f00 	ldrex	r3, [r3]
 80105ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	f023 0310 	bic.w	r3, r3, #16
 80105d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	461a      	mov	r2, r3
 80105dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80105e0:	61fb      	str	r3, [r7, #28]
 80105e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105e4:	69b9      	ldr	r1, [r7, #24]
 80105e6:	69fa      	ldr	r2, [r7, #28]
 80105e8:	e841 2300 	strex	r3, r2, [r1]
 80105ec:	617b      	str	r3, [r7, #20]
   return(result);
 80105ee:	697b      	ldr	r3, [r7, #20]
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d1e4      	bne.n	80105be <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2202      	movs	r2, #2
 80105f8:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80105fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80105fe:	4619      	mov	r1, r3
 8010600:	6878      	ldr	r0, [r7, #4]
 8010602:	f000 f881 	bl	8010708 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010606:	e063      	b.n	80106d0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8010608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801060c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010610:	2b00      	cmp	r3, #0
 8010612:	d00e      	beq.n	8010632 <HAL_UART_IRQHandler+0x6c6>
 8010614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801061c:	2b00      	cmp	r3, #0
 801061e:	d008      	beq.n	8010632 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	681b      	ldr	r3, [r3, #0]
 8010624:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8010628:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801062a:	6878      	ldr	r0, [r7, #4]
 801062c:	f001 ff5a 	bl	80124e4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8010630:	e051      	b.n	80106d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8010632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8010636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801063a:	2b00      	cmp	r3, #0
 801063c:	d014      	beq.n	8010668 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801063e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010646:	2b00      	cmp	r3, #0
 8010648:	d105      	bne.n	8010656 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801064a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801064e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010652:	2b00      	cmp	r3, #0
 8010654:	d008      	beq.n	8010668 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801065a:	2b00      	cmp	r3, #0
 801065c:	d03a      	beq.n	80106d4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010662:	6878      	ldr	r0, [r7, #4]
 8010664:	4798      	blx	r3
    }
    return;
 8010666:	e035      	b.n	80106d4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8010668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801066c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010670:	2b00      	cmp	r3, #0
 8010672:	d009      	beq.n	8010688 <HAL_UART_IRQHandler+0x71c>
 8010674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801067c:	2b00      	cmp	r3, #0
 801067e:	d003      	beq.n	8010688 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8010680:	6878      	ldr	r0, [r7, #4]
 8010682:	f001 f9e8 	bl	8011a56 <UART_EndTransmit_IT>
    return;
 8010686:	e026      	b.n	80106d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8010688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801068c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8010690:	2b00      	cmp	r3, #0
 8010692:	d009      	beq.n	80106a8 <HAL_UART_IRQHandler+0x73c>
 8010694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010698:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801069c:	2b00      	cmp	r3, #0
 801069e:	d003      	beq.n	80106a8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80106a0:	6878      	ldr	r0, [r7, #4]
 80106a2:	f001 ff33 	bl	801250c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106a6:	e016      	b.n	80106d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80106a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80106ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d010      	beq.n	80106d6 <HAL_UART_IRQHandler+0x76a>
 80106b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	da0c      	bge.n	80106d6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f001 ff1b 	bl	80124f8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80106c2:	e008      	b.n	80106d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80106c4:	bf00      	nop
 80106c6:	e006      	b.n	80106d6 <HAL_UART_IRQHandler+0x76a>
    return;
 80106c8:	bf00      	nop
 80106ca:	e004      	b.n	80106d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80106cc:	bf00      	nop
 80106ce:	e002      	b.n	80106d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80106d0:	bf00      	nop
 80106d2:	e000      	b.n	80106d6 <HAL_UART_IRQHandler+0x76a>
    return;
 80106d4:	bf00      	nop
  }
}
 80106d6:	37e8      	adds	r7, #232	; 0xe8
 80106d8:	46bd      	mov	sp, r7
 80106da:	bd80      	pop	{r7, pc}
 80106dc:	effffffe 	.word	0xeffffffe

080106e0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106e0:	b480      	push	{r7}
 80106e2:	b083      	sub	sp, #12
 80106e4:	af00      	add	r7, sp, #0
 80106e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80106e8:	bf00      	nop
 80106ea:	370c      	adds	r7, #12
 80106ec:	46bd      	mov	sp, r7
 80106ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f2:	4770      	bx	lr

080106f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80106f4:	b480      	push	{r7}
 80106f6:	b083      	sub	sp, #12
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80106fc:	bf00      	nop
 80106fe:	370c      	adds	r7, #12
 8010700:	46bd      	mov	sp, r7
 8010702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010706:	4770      	bx	lr

08010708 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8010708:	b480      	push	{r7}
 801070a:	b083      	sub	sp, #12
 801070c:	af00      	add	r7, sp, #0
 801070e:	6078      	str	r0, [r7, #4]
 8010710:	460b      	mov	r3, r1
 8010712:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8010714:	bf00      	nop
 8010716:	370c      	adds	r7, #12
 8010718:	46bd      	mov	sp, r7
 801071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801071e:	4770      	bx	lr

08010720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010720:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010724:	b092      	sub	sp, #72	; 0x48
 8010726:	af00      	add	r7, sp, #0
 8010728:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801072a:	2300      	movs	r3, #0
 801072c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010730:	697b      	ldr	r3, [r7, #20]
 8010732:	689a      	ldr	r2, [r3, #8]
 8010734:	697b      	ldr	r3, [r7, #20]
 8010736:	691b      	ldr	r3, [r3, #16]
 8010738:	431a      	orrs	r2, r3
 801073a:	697b      	ldr	r3, [r7, #20]
 801073c:	695b      	ldr	r3, [r3, #20]
 801073e:	431a      	orrs	r2, r3
 8010740:	697b      	ldr	r3, [r7, #20]
 8010742:	69db      	ldr	r3, [r3, #28]
 8010744:	4313      	orrs	r3, r2
 8010746:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	681a      	ldr	r2, [r3, #0]
 801074e:	4bbe      	ldr	r3, [pc, #760]	; (8010a48 <UART_SetConfig+0x328>)
 8010750:	4013      	ands	r3, r2
 8010752:	697a      	ldr	r2, [r7, #20]
 8010754:	6812      	ldr	r2, [r2, #0]
 8010756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010758:	430b      	orrs	r3, r1
 801075a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801075c:	697b      	ldr	r3, [r7, #20]
 801075e:	681b      	ldr	r3, [r3, #0]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010766:	697b      	ldr	r3, [r7, #20]
 8010768:	68da      	ldr	r2, [r3, #12]
 801076a:	697b      	ldr	r3, [r7, #20]
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	430a      	orrs	r2, r1
 8010770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010772:	697b      	ldr	r3, [r7, #20]
 8010774:	699b      	ldr	r3, [r3, #24]
 8010776:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8010778:	697b      	ldr	r3, [r7, #20]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	4ab3      	ldr	r2, [pc, #716]	; (8010a4c <UART_SetConfig+0x32c>)
 801077e:	4293      	cmp	r3, r2
 8010780:	d004      	beq.n	801078c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	6a1b      	ldr	r3, [r3, #32]
 8010786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010788:	4313      	orrs	r3, r2
 801078a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801078c:	697b      	ldr	r3, [r7, #20]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	689a      	ldr	r2, [r3, #8]
 8010792:	4baf      	ldr	r3, [pc, #700]	; (8010a50 <UART_SetConfig+0x330>)
 8010794:	4013      	ands	r3, r2
 8010796:	697a      	ldr	r2, [r7, #20]
 8010798:	6812      	ldr	r2, [r2, #0]
 801079a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801079c:	430b      	orrs	r3, r1
 801079e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80107a0:	697b      	ldr	r3, [r7, #20]
 80107a2:	681b      	ldr	r3, [r3, #0]
 80107a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a6:	f023 010f 	bic.w	r1, r3, #15
 80107aa:	697b      	ldr	r3, [r7, #20]
 80107ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	430a      	orrs	r2, r1
 80107b4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80107b6:	697b      	ldr	r3, [r7, #20]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	4aa6      	ldr	r2, [pc, #664]	; (8010a54 <UART_SetConfig+0x334>)
 80107bc:	4293      	cmp	r3, r2
 80107be:	d177      	bne.n	80108b0 <UART_SetConfig+0x190>
 80107c0:	4ba5      	ldr	r3, [pc, #660]	; (8010a58 <UART_SetConfig+0x338>)
 80107c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107c4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80107c8:	2b28      	cmp	r3, #40	; 0x28
 80107ca:	d86d      	bhi.n	80108a8 <UART_SetConfig+0x188>
 80107cc:	a201      	add	r2, pc, #4	; (adr r2, 80107d4 <UART_SetConfig+0xb4>)
 80107ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107d2:	bf00      	nop
 80107d4:	08010879 	.word	0x08010879
 80107d8:	080108a9 	.word	0x080108a9
 80107dc:	080108a9 	.word	0x080108a9
 80107e0:	080108a9 	.word	0x080108a9
 80107e4:	080108a9 	.word	0x080108a9
 80107e8:	080108a9 	.word	0x080108a9
 80107ec:	080108a9 	.word	0x080108a9
 80107f0:	080108a9 	.word	0x080108a9
 80107f4:	08010881 	.word	0x08010881
 80107f8:	080108a9 	.word	0x080108a9
 80107fc:	080108a9 	.word	0x080108a9
 8010800:	080108a9 	.word	0x080108a9
 8010804:	080108a9 	.word	0x080108a9
 8010808:	080108a9 	.word	0x080108a9
 801080c:	080108a9 	.word	0x080108a9
 8010810:	080108a9 	.word	0x080108a9
 8010814:	08010889 	.word	0x08010889
 8010818:	080108a9 	.word	0x080108a9
 801081c:	080108a9 	.word	0x080108a9
 8010820:	080108a9 	.word	0x080108a9
 8010824:	080108a9 	.word	0x080108a9
 8010828:	080108a9 	.word	0x080108a9
 801082c:	080108a9 	.word	0x080108a9
 8010830:	080108a9 	.word	0x080108a9
 8010834:	08010891 	.word	0x08010891
 8010838:	080108a9 	.word	0x080108a9
 801083c:	080108a9 	.word	0x080108a9
 8010840:	080108a9 	.word	0x080108a9
 8010844:	080108a9 	.word	0x080108a9
 8010848:	080108a9 	.word	0x080108a9
 801084c:	080108a9 	.word	0x080108a9
 8010850:	080108a9 	.word	0x080108a9
 8010854:	08010899 	.word	0x08010899
 8010858:	080108a9 	.word	0x080108a9
 801085c:	080108a9 	.word	0x080108a9
 8010860:	080108a9 	.word	0x080108a9
 8010864:	080108a9 	.word	0x080108a9
 8010868:	080108a9 	.word	0x080108a9
 801086c:	080108a9 	.word	0x080108a9
 8010870:	080108a9 	.word	0x080108a9
 8010874:	080108a1 	.word	0x080108a1
 8010878:	2301      	movs	r3, #1
 801087a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801087e:	e222      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010880:	2304      	movs	r3, #4
 8010882:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010886:	e21e      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010888:	2308      	movs	r3, #8
 801088a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801088e:	e21a      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010890:	2310      	movs	r3, #16
 8010892:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010896:	e216      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010898:	2320      	movs	r3, #32
 801089a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801089e:	e212      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80108a0:	2340      	movs	r3, #64	; 0x40
 80108a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108a6:	e20e      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80108a8:	2380      	movs	r3, #128	; 0x80
 80108aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ae:	e20a      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80108b0:	697b      	ldr	r3, [r7, #20]
 80108b2:	681b      	ldr	r3, [r3, #0]
 80108b4:	4a69      	ldr	r2, [pc, #420]	; (8010a5c <UART_SetConfig+0x33c>)
 80108b6:	4293      	cmp	r3, r2
 80108b8:	d130      	bne.n	801091c <UART_SetConfig+0x1fc>
 80108ba:	4b67      	ldr	r3, [pc, #412]	; (8010a58 <UART_SetConfig+0x338>)
 80108bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108be:	f003 0307 	and.w	r3, r3, #7
 80108c2:	2b05      	cmp	r3, #5
 80108c4:	d826      	bhi.n	8010914 <UART_SetConfig+0x1f4>
 80108c6:	a201      	add	r2, pc, #4	; (adr r2, 80108cc <UART_SetConfig+0x1ac>)
 80108c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108cc:	080108e5 	.word	0x080108e5
 80108d0:	080108ed 	.word	0x080108ed
 80108d4:	080108f5 	.word	0x080108f5
 80108d8:	080108fd 	.word	0x080108fd
 80108dc:	08010905 	.word	0x08010905
 80108e0:	0801090d 	.word	0x0801090d
 80108e4:	2300      	movs	r3, #0
 80108e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108ea:	e1ec      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80108ec:	2304      	movs	r3, #4
 80108ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108f2:	e1e8      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80108f4:	2308      	movs	r3, #8
 80108f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80108fa:	e1e4      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80108fc:	2310      	movs	r3, #16
 80108fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010902:	e1e0      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010904:	2320      	movs	r3, #32
 8010906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801090a:	e1dc      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 801090c:	2340      	movs	r3, #64	; 0x40
 801090e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010912:	e1d8      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010914:	2380      	movs	r3, #128	; 0x80
 8010916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801091a:	e1d4      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 801091c:	697b      	ldr	r3, [r7, #20]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4a4f      	ldr	r2, [pc, #316]	; (8010a60 <UART_SetConfig+0x340>)
 8010922:	4293      	cmp	r3, r2
 8010924:	d130      	bne.n	8010988 <UART_SetConfig+0x268>
 8010926:	4b4c      	ldr	r3, [pc, #304]	; (8010a58 <UART_SetConfig+0x338>)
 8010928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801092a:	f003 0307 	and.w	r3, r3, #7
 801092e:	2b05      	cmp	r3, #5
 8010930:	d826      	bhi.n	8010980 <UART_SetConfig+0x260>
 8010932:	a201      	add	r2, pc, #4	; (adr r2, 8010938 <UART_SetConfig+0x218>)
 8010934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010938:	08010951 	.word	0x08010951
 801093c:	08010959 	.word	0x08010959
 8010940:	08010961 	.word	0x08010961
 8010944:	08010969 	.word	0x08010969
 8010948:	08010971 	.word	0x08010971
 801094c:	08010979 	.word	0x08010979
 8010950:	2300      	movs	r3, #0
 8010952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010956:	e1b6      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010958:	2304      	movs	r3, #4
 801095a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801095e:	e1b2      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010960:	2308      	movs	r3, #8
 8010962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010966:	e1ae      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010968:	2310      	movs	r3, #16
 801096a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801096e:	e1aa      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010970:	2320      	movs	r3, #32
 8010972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010976:	e1a6      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010978:	2340      	movs	r3, #64	; 0x40
 801097a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801097e:	e1a2      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010980:	2380      	movs	r3, #128	; 0x80
 8010982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010986:	e19e      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010988:	697b      	ldr	r3, [r7, #20]
 801098a:	681b      	ldr	r3, [r3, #0]
 801098c:	4a35      	ldr	r2, [pc, #212]	; (8010a64 <UART_SetConfig+0x344>)
 801098e:	4293      	cmp	r3, r2
 8010990:	d130      	bne.n	80109f4 <UART_SetConfig+0x2d4>
 8010992:	4b31      	ldr	r3, [pc, #196]	; (8010a58 <UART_SetConfig+0x338>)
 8010994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010996:	f003 0307 	and.w	r3, r3, #7
 801099a:	2b05      	cmp	r3, #5
 801099c:	d826      	bhi.n	80109ec <UART_SetConfig+0x2cc>
 801099e:	a201      	add	r2, pc, #4	; (adr r2, 80109a4 <UART_SetConfig+0x284>)
 80109a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109a4:	080109bd 	.word	0x080109bd
 80109a8:	080109c5 	.word	0x080109c5
 80109ac:	080109cd 	.word	0x080109cd
 80109b0:	080109d5 	.word	0x080109d5
 80109b4:	080109dd 	.word	0x080109dd
 80109b8:	080109e5 	.word	0x080109e5
 80109bc:	2300      	movs	r3, #0
 80109be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109c2:	e180      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80109c4:	2304      	movs	r3, #4
 80109c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ca:	e17c      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80109cc:	2308      	movs	r3, #8
 80109ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109d2:	e178      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80109d4:	2310      	movs	r3, #16
 80109d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109da:	e174      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80109dc:	2320      	movs	r3, #32
 80109de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109e2:	e170      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80109e4:	2340      	movs	r3, #64	; 0x40
 80109e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109ea:	e16c      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80109ec:	2380      	movs	r3, #128	; 0x80
 80109ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80109f2:	e168      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	4a1b      	ldr	r2, [pc, #108]	; (8010a68 <UART_SetConfig+0x348>)
 80109fa:	4293      	cmp	r3, r2
 80109fc:	d142      	bne.n	8010a84 <UART_SetConfig+0x364>
 80109fe:	4b16      	ldr	r3, [pc, #88]	; (8010a58 <UART_SetConfig+0x338>)
 8010a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a02:	f003 0307 	and.w	r3, r3, #7
 8010a06:	2b05      	cmp	r3, #5
 8010a08:	d838      	bhi.n	8010a7c <UART_SetConfig+0x35c>
 8010a0a:	a201      	add	r2, pc, #4	; (adr r2, 8010a10 <UART_SetConfig+0x2f0>)
 8010a0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a10:	08010a29 	.word	0x08010a29
 8010a14:	08010a31 	.word	0x08010a31
 8010a18:	08010a39 	.word	0x08010a39
 8010a1c:	08010a41 	.word	0x08010a41
 8010a20:	08010a6d 	.word	0x08010a6d
 8010a24:	08010a75 	.word	0x08010a75
 8010a28:	2300      	movs	r3, #0
 8010a2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a2e:	e14a      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010a30:	2304      	movs	r3, #4
 8010a32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a36:	e146      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010a38:	2308      	movs	r3, #8
 8010a3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a3e:	e142      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010a40:	2310      	movs	r3, #16
 8010a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a46:	e13e      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010a48:	cfff69f3 	.word	0xcfff69f3
 8010a4c:	58000c00 	.word	0x58000c00
 8010a50:	11fff4ff 	.word	0x11fff4ff
 8010a54:	40011000 	.word	0x40011000
 8010a58:	58024400 	.word	0x58024400
 8010a5c:	40004400 	.word	0x40004400
 8010a60:	40004800 	.word	0x40004800
 8010a64:	40004c00 	.word	0x40004c00
 8010a68:	40005000 	.word	0x40005000
 8010a6c:	2320      	movs	r3, #32
 8010a6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a72:	e128      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010a74:	2340      	movs	r3, #64	; 0x40
 8010a76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a7a:	e124      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010a7c:	2380      	movs	r3, #128	; 0x80
 8010a7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010a82:	e120      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010a84:	697b      	ldr	r3, [r7, #20]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	4acb      	ldr	r2, [pc, #812]	; (8010db8 <UART_SetConfig+0x698>)
 8010a8a:	4293      	cmp	r3, r2
 8010a8c:	d176      	bne.n	8010b7c <UART_SetConfig+0x45c>
 8010a8e:	4bcb      	ldr	r3, [pc, #812]	; (8010dbc <UART_SetConfig+0x69c>)
 8010a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010a92:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010a96:	2b28      	cmp	r3, #40	; 0x28
 8010a98:	d86c      	bhi.n	8010b74 <UART_SetConfig+0x454>
 8010a9a:	a201      	add	r2, pc, #4	; (adr r2, 8010aa0 <UART_SetConfig+0x380>)
 8010a9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aa0:	08010b45 	.word	0x08010b45
 8010aa4:	08010b75 	.word	0x08010b75
 8010aa8:	08010b75 	.word	0x08010b75
 8010aac:	08010b75 	.word	0x08010b75
 8010ab0:	08010b75 	.word	0x08010b75
 8010ab4:	08010b75 	.word	0x08010b75
 8010ab8:	08010b75 	.word	0x08010b75
 8010abc:	08010b75 	.word	0x08010b75
 8010ac0:	08010b4d 	.word	0x08010b4d
 8010ac4:	08010b75 	.word	0x08010b75
 8010ac8:	08010b75 	.word	0x08010b75
 8010acc:	08010b75 	.word	0x08010b75
 8010ad0:	08010b75 	.word	0x08010b75
 8010ad4:	08010b75 	.word	0x08010b75
 8010ad8:	08010b75 	.word	0x08010b75
 8010adc:	08010b75 	.word	0x08010b75
 8010ae0:	08010b55 	.word	0x08010b55
 8010ae4:	08010b75 	.word	0x08010b75
 8010ae8:	08010b75 	.word	0x08010b75
 8010aec:	08010b75 	.word	0x08010b75
 8010af0:	08010b75 	.word	0x08010b75
 8010af4:	08010b75 	.word	0x08010b75
 8010af8:	08010b75 	.word	0x08010b75
 8010afc:	08010b75 	.word	0x08010b75
 8010b00:	08010b5d 	.word	0x08010b5d
 8010b04:	08010b75 	.word	0x08010b75
 8010b08:	08010b75 	.word	0x08010b75
 8010b0c:	08010b75 	.word	0x08010b75
 8010b10:	08010b75 	.word	0x08010b75
 8010b14:	08010b75 	.word	0x08010b75
 8010b18:	08010b75 	.word	0x08010b75
 8010b1c:	08010b75 	.word	0x08010b75
 8010b20:	08010b65 	.word	0x08010b65
 8010b24:	08010b75 	.word	0x08010b75
 8010b28:	08010b75 	.word	0x08010b75
 8010b2c:	08010b75 	.word	0x08010b75
 8010b30:	08010b75 	.word	0x08010b75
 8010b34:	08010b75 	.word	0x08010b75
 8010b38:	08010b75 	.word	0x08010b75
 8010b3c:	08010b75 	.word	0x08010b75
 8010b40:	08010b6d 	.word	0x08010b6d
 8010b44:	2301      	movs	r3, #1
 8010b46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b4a:	e0bc      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010b4c:	2304      	movs	r3, #4
 8010b4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b52:	e0b8      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010b54:	2308      	movs	r3, #8
 8010b56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b5a:	e0b4      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010b5c:	2310      	movs	r3, #16
 8010b5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b62:	e0b0      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010b64:	2320      	movs	r3, #32
 8010b66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b6a:	e0ac      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010b6c:	2340      	movs	r3, #64	; 0x40
 8010b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b72:	e0a8      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010b74:	2380      	movs	r3, #128	; 0x80
 8010b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010b7a:	e0a4      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010b7c:	697b      	ldr	r3, [r7, #20]
 8010b7e:	681b      	ldr	r3, [r3, #0]
 8010b80:	4a8f      	ldr	r2, [pc, #572]	; (8010dc0 <UART_SetConfig+0x6a0>)
 8010b82:	4293      	cmp	r3, r2
 8010b84:	d130      	bne.n	8010be8 <UART_SetConfig+0x4c8>
 8010b86:	4b8d      	ldr	r3, [pc, #564]	; (8010dbc <UART_SetConfig+0x69c>)
 8010b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b8a:	f003 0307 	and.w	r3, r3, #7
 8010b8e:	2b05      	cmp	r3, #5
 8010b90:	d826      	bhi.n	8010be0 <UART_SetConfig+0x4c0>
 8010b92:	a201      	add	r2, pc, #4	; (adr r2, 8010b98 <UART_SetConfig+0x478>)
 8010b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b98:	08010bb1 	.word	0x08010bb1
 8010b9c:	08010bb9 	.word	0x08010bb9
 8010ba0:	08010bc1 	.word	0x08010bc1
 8010ba4:	08010bc9 	.word	0x08010bc9
 8010ba8:	08010bd1 	.word	0x08010bd1
 8010bac:	08010bd9 	.word	0x08010bd9
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bb6:	e086      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010bb8:	2304      	movs	r3, #4
 8010bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bbe:	e082      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010bc0:	2308      	movs	r3, #8
 8010bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bc6:	e07e      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010bc8:	2310      	movs	r3, #16
 8010bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bce:	e07a      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010bd0:	2320      	movs	r3, #32
 8010bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bd6:	e076      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010bd8:	2340      	movs	r3, #64	; 0x40
 8010bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010bde:	e072      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010be0:	2380      	movs	r3, #128	; 0x80
 8010be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010be6:	e06e      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010be8:	697b      	ldr	r3, [r7, #20]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	4a75      	ldr	r2, [pc, #468]	; (8010dc4 <UART_SetConfig+0x6a4>)
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	d130      	bne.n	8010c54 <UART_SetConfig+0x534>
 8010bf2:	4b72      	ldr	r3, [pc, #456]	; (8010dbc <UART_SetConfig+0x69c>)
 8010bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bf6:	f003 0307 	and.w	r3, r3, #7
 8010bfa:	2b05      	cmp	r3, #5
 8010bfc:	d826      	bhi.n	8010c4c <UART_SetConfig+0x52c>
 8010bfe:	a201      	add	r2, pc, #4	; (adr r2, 8010c04 <UART_SetConfig+0x4e4>)
 8010c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c04:	08010c1d 	.word	0x08010c1d
 8010c08:	08010c25 	.word	0x08010c25
 8010c0c:	08010c2d 	.word	0x08010c2d
 8010c10:	08010c35 	.word	0x08010c35
 8010c14:	08010c3d 	.word	0x08010c3d
 8010c18:	08010c45 	.word	0x08010c45
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c22:	e050      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010c24:	2304      	movs	r3, #4
 8010c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c2a:	e04c      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010c2c:	2308      	movs	r3, #8
 8010c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c32:	e048      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010c34:	2310      	movs	r3, #16
 8010c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c3a:	e044      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010c3c:	2320      	movs	r3, #32
 8010c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c42:	e040      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010c44:	2340      	movs	r3, #64	; 0x40
 8010c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c4a:	e03c      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010c4c:	2380      	movs	r3, #128	; 0x80
 8010c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c52:	e038      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010c54:	697b      	ldr	r3, [r7, #20]
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	4a5b      	ldr	r2, [pc, #364]	; (8010dc8 <UART_SetConfig+0x6a8>)
 8010c5a:	4293      	cmp	r3, r2
 8010c5c:	d130      	bne.n	8010cc0 <UART_SetConfig+0x5a0>
 8010c5e:	4b57      	ldr	r3, [pc, #348]	; (8010dbc <UART_SetConfig+0x69c>)
 8010c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c62:	f003 0307 	and.w	r3, r3, #7
 8010c66:	2b05      	cmp	r3, #5
 8010c68:	d826      	bhi.n	8010cb8 <UART_SetConfig+0x598>
 8010c6a:	a201      	add	r2, pc, #4	; (adr r2, 8010c70 <UART_SetConfig+0x550>)
 8010c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c70:	08010c89 	.word	0x08010c89
 8010c74:	08010c91 	.word	0x08010c91
 8010c78:	08010c99 	.word	0x08010c99
 8010c7c:	08010ca1 	.word	0x08010ca1
 8010c80:	08010ca9 	.word	0x08010ca9
 8010c84:	08010cb1 	.word	0x08010cb1
 8010c88:	2302      	movs	r3, #2
 8010c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c8e:	e01a      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010c90:	2304      	movs	r3, #4
 8010c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c96:	e016      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010c98:	2308      	movs	r3, #8
 8010c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010c9e:	e012      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010ca0:	2310      	movs	r3, #16
 8010ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010ca6:	e00e      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010ca8:	2320      	movs	r3, #32
 8010caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cae:	e00a      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010cb0:	2340      	movs	r3, #64	; 0x40
 8010cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cb6:	e006      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010cb8:	2380      	movs	r3, #128	; 0x80
 8010cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8010cbe:	e002      	b.n	8010cc6 <UART_SetConfig+0x5a6>
 8010cc0:	2380      	movs	r3, #128	; 0x80
 8010cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010cc6:	697b      	ldr	r3, [r7, #20]
 8010cc8:	681b      	ldr	r3, [r3, #0]
 8010cca:	4a3f      	ldr	r2, [pc, #252]	; (8010dc8 <UART_SetConfig+0x6a8>)
 8010ccc:	4293      	cmp	r3, r2
 8010cce:	f040 80f8 	bne.w	8010ec2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010cd2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010cd6:	2b20      	cmp	r3, #32
 8010cd8:	dc46      	bgt.n	8010d68 <UART_SetConfig+0x648>
 8010cda:	2b02      	cmp	r3, #2
 8010cdc:	f2c0 8082 	blt.w	8010de4 <UART_SetConfig+0x6c4>
 8010ce0:	3b02      	subs	r3, #2
 8010ce2:	2b1e      	cmp	r3, #30
 8010ce4:	d87e      	bhi.n	8010de4 <UART_SetConfig+0x6c4>
 8010ce6:	a201      	add	r2, pc, #4	; (adr r2, 8010cec <UART_SetConfig+0x5cc>)
 8010ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010cec:	08010d6f 	.word	0x08010d6f
 8010cf0:	08010de5 	.word	0x08010de5
 8010cf4:	08010d77 	.word	0x08010d77
 8010cf8:	08010de5 	.word	0x08010de5
 8010cfc:	08010de5 	.word	0x08010de5
 8010d00:	08010de5 	.word	0x08010de5
 8010d04:	08010d87 	.word	0x08010d87
 8010d08:	08010de5 	.word	0x08010de5
 8010d0c:	08010de5 	.word	0x08010de5
 8010d10:	08010de5 	.word	0x08010de5
 8010d14:	08010de5 	.word	0x08010de5
 8010d18:	08010de5 	.word	0x08010de5
 8010d1c:	08010de5 	.word	0x08010de5
 8010d20:	08010de5 	.word	0x08010de5
 8010d24:	08010d97 	.word	0x08010d97
 8010d28:	08010de5 	.word	0x08010de5
 8010d2c:	08010de5 	.word	0x08010de5
 8010d30:	08010de5 	.word	0x08010de5
 8010d34:	08010de5 	.word	0x08010de5
 8010d38:	08010de5 	.word	0x08010de5
 8010d3c:	08010de5 	.word	0x08010de5
 8010d40:	08010de5 	.word	0x08010de5
 8010d44:	08010de5 	.word	0x08010de5
 8010d48:	08010de5 	.word	0x08010de5
 8010d4c:	08010de5 	.word	0x08010de5
 8010d50:	08010de5 	.word	0x08010de5
 8010d54:	08010de5 	.word	0x08010de5
 8010d58:	08010de5 	.word	0x08010de5
 8010d5c:	08010de5 	.word	0x08010de5
 8010d60:	08010de5 	.word	0x08010de5
 8010d64:	08010dd7 	.word	0x08010dd7
 8010d68:	2b40      	cmp	r3, #64	; 0x40
 8010d6a:	d037      	beq.n	8010ddc <UART_SetConfig+0x6bc>
 8010d6c:	e03a      	b.n	8010de4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010d6e:	f7fb fd9b 	bl	800c8a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8010d72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010d74:	e03c      	b.n	8010df0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f7fb fdaa 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d84:	e034      	b.n	8010df0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010d86:	f107 0318 	add.w	r3, r7, #24
 8010d8a:	4618      	mov	r0, r3
 8010d8c:	f7fb fef6 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010d90:	69fb      	ldr	r3, [r7, #28]
 8010d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010d94:	e02c      	b.n	8010df0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010d96:	4b09      	ldr	r3, [pc, #36]	; (8010dbc <UART_SetConfig+0x69c>)
 8010d98:	681b      	ldr	r3, [r3, #0]
 8010d9a:	f003 0320 	and.w	r3, r3, #32
 8010d9e:	2b00      	cmp	r3, #0
 8010da0:	d016      	beq.n	8010dd0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010da2:	4b06      	ldr	r3, [pc, #24]	; (8010dbc <UART_SetConfig+0x69c>)
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	08db      	lsrs	r3, r3, #3
 8010da8:	f003 0303 	and.w	r3, r3, #3
 8010dac:	4a07      	ldr	r2, [pc, #28]	; (8010dcc <UART_SetConfig+0x6ac>)
 8010dae:	fa22 f303 	lsr.w	r3, r2, r3
 8010db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010db4:	e01c      	b.n	8010df0 <UART_SetConfig+0x6d0>
 8010db6:	bf00      	nop
 8010db8:	40011400 	.word	0x40011400
 8010dbc:	58024400 	.word	0x58024400
 8010dc0:	40007800 	.word	0x40007800
 8010dc4:	40007c00 	.word	0x40007c00
 8010dc8:	58000c00 	.word	0x58000c00
 8010dcc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8010dd0:	4b9d      	ldr	r3, [pc, #628]	; (8011048 <UART_SetConfig+0x928>)
 8010dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dd4:	e00c      	b.n	8010df0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010dd6:	4b9d      	ldr	r3, [pc, #628]	; (801104c <UART_SetConfig+0x92c>)
 8010dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010dda:	e009      	b.n	8010df0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ddc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010de0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010de2:	e005      	b.n	8010df0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8010de4:	2300      	movs	r3, #0
 8010de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010de8:	2301      	movs	r3, #1
 8010dea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010dee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010df0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f000 81de 	beq.w	80111b4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010df8:	697b      	ldr	r3, [r7, #20]
 8010dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010dfc:	4a94      	ldr	r2, [pc, #592]	; (8011050 <UART_SetConfig+0x930>)
 8010dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e02:	461a      	mov	r2, r3
 8010e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e06:	fbb3 f3f2 	udiv	r3, r3, r2
 8010e0a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e0c:	697b      	ldr	r3, [r7, #20]
 8010e0e:	685a      	ldr	r2, [r3, #4]
 8010e10:	4613      	mov	r3, r2
 8010e12:	005b      	lsls	r3, r3, #1
 8010e14:	4413      	add	r3, r2
 8010e16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e18:	429a      	cmp	r2, r3
 8010e1a:	d305      	bcc.n	8010e28 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010e1c:	697b      	ldr	r3, [r7, #20]
 8010e1e:	685b      	ldr	r3, [r3, #4]
 8010e20:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010e22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010e24:	429a      	cmp	r2, r3
 8010e26:	d903      	bls.n	8010e30 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8010e28:	2301      	movs	r3, #1
 8010e2a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010e2e:	e1c1      	b.n	80111b4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010e30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010e32:	2200      	movs	r2, #0
 8010e34:	60bb      	str	r3, [r7, #8]
 8010e36:	60fa      	str	r2, [r7, #12]
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e3c:	4a84      	ldr	r2, [pc, #528]	; (8011050 <UART_SetConfig+0x930>)
 8010e3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010e42:	b29b      	uxth	r3, r3
 8010e44:	2200      	movs	r2, #0
 8010e46:	603b      	str	r3, [r7, #0]
 8010e48:	607a      	str	r2, [r7, #4]
 8010e4a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010e4e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8010e52:	f7ef fa45 	bl	80002e0 <__aeabi_uldivmod>
 8010e56:	4602      	mov	r2, r0
 8010e58:	460b      	mov	r3, r1
 8010e5a:	4610      	mov	r0, r2
 8010e5c:	4619      	mov	r1, r3
 8010e5e:	f04f 0200 	mov.w	r2, #0
 8010e62:	f04f 0300 	mov.w	r3, #0
 8010e66:	020b      	lsls	r3, r1, #8
 8010e68:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8010e6c:	0202      	lsls	r2, r0, #8
 8010e6e:	6979      	ldr	r1, [r7, #20]
 8010e70:	6849      	ldr	r1, [r1, #4]
 8010e72:	0849      	lsrs	r1, r1, #1
 8010e74:	2000      	movs	r0, #0
 8010e76:	460c      	mov	r4, r1
 8010e78:	4605      	mov	r5, r0
 8010e7a:	eb12 0804 	adds.w	r8, r2, r4
 8010e7e:	eb43 0905 	adc.w	r9, r3, r5
 8010e82:	697b      	ldr	r3, [r7, #20]
 8010e84:	685b      	ldr	r3, [r3, #4]
 8010e86:	2200      	movs	r2, #0
 8010e88:	469a      	mov	sl, r3
 8010e8a:	4693      	mov	fp, r2
 8010e8c:	4652      	mov	r2, sl
 8010e8e:	465b      	mov	r3, fp
 8010e90:	4640      	mov	r0, r8
 8010e92:	4649      	mov	r1, r9
 8010e94:	f7ef fa24 	bl	80002e0 <__aeabi_uldivmod>
 8010e98:	4602      	mov	r2, r0
 8010e9a:	460b      	mov	r3, r1
 8010e9c:	4613      	mov	r3, r2
 8010e9e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010ea6:	d308      	bcc.n	8010eba <UART_SetConfig+0x79a>
 8010ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010eae:	d204      	bcs.n	8010eba <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8010eb0:	697b      	ldr	r3, [r7, #20]
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010eb6:	60da      	str	r2, [r3, #12]
 8010eb8:	e17c      	b.n	80111b4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8010eba:	2301      	movs	r3, #1
 8010ebc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8010ec0:	e178      	b.n	80111b4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010ec2:	697b      	ldr	r3, [r7, #20]
 8010ec4:	69db      	ldr	r3, [r3, #28]
 8010ec6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010eca:	f040 80c5 	bne.w	8011058 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8010ece:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010ed2:	2b20      	cmp	r3, #32
 8010ed4:	dc48      	bgt.n	8010f68 <UART_SetConfig+0x848>
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	db7b      	blt.n	8010fd2 <UART_SetConfig+0x8b2>
 8010eda:	2b20      	cmp	r3, #32
 8010edc:	d879      	bhi.n	8010fd2 <UART_SetConfig+0x8b2>
 8010ede:	a201      	add	r2, pc, #4	; (adr r2, 8010ee4 <UART_SetConfig+0x7c4>)
 8010ee0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010ee4:	08010f6f 	.word	0x08010f6f
 8010ee8:	08010f77 	.word	0x08010f77
 8010eec:	08010fd3 	.word	0x08010fd3
 8010ef0:	08010fd3 	.word	0x08010fd3
 8010ef4:	08010f7f 	.word	0x08010f7f
 8010ef8:	08010fd3 	.word	0x08010fd3
 8010efc:	08010fd3 	.word	0x08010fd3
 8010f00:	08010fd3 	.word	0x08010fd3
 8010f04:	08010f8f 	.word	0x08010f8f
 8010f08:	08010fd3 	.word	0x08010fd3
 8010f0c:	08010fd3 	.word	0x08010fd3
 8010f10:	08010fd3 	.word	0x08010fd3
 8010f14:	08010fd3 	.word	0x08010fd3
 8010f18:	08010fd3 	.word	0x08010fd3
 8010f1c:	08010fd3 	.word	0x08010fd3
 8010f20:	08010fd3 	.word	0x08010fd3
 8010f24:	08010f9f 	.word	0x08010f9f
 8010f28:	08010fd3 	.word	0x08010fd3
 8010f2c:	08010fd3 	.word	0x08010fd3
 8010f30:	08010fd3 	.word	0x08010fd3
 8010f34:	08010fd3 	.word	0x08010fd3
 8010f38:	08010fd3 	.word	0x08010fd3
 8010f3c:	08010fd3 	.word	0x08010fd3
 8010f40:	08010fd3 	.word	0x08010fd3
 8010f44:	08010fd3 	.word	0x08010fd3
 8010f48:	08010fd3 	.word	0x08010fd3
 8010f4c:	08010fd3 	.word	0x08010fd3
 8010f50:	08010fd3 	.word	0x08010fd3
 8010f54:	08010fd3 	.word	0x08010fd3
 8010f58:	08010fd3 	.word	0x08010fd3
 8010f5c:	08010fd3 	.word	0x08010fd3
 8010f60:	08010fd3 	.word	0x08010fd3
 8010f64:	08010fc5 	.word	0x08010fc5
 8010f68:	2b40      	cmp	r3, #64	; 0x40
 8010f6a:	d02e      	beq.n	8010fca <UART_SetConfig+0x8aa>
 8010f6c:	e031      	b.n	8010fd2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010f6e:	f7f9 fca3 	bl	800a8b8 <HAL_RCC_GetPCLK1Freq>
 8010f72:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f74:	e033      	b.n	8010fde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010f76:	f7f9 fcb5 	bl	800a8e4 <HAL_RCC_GetPCLK2Freq>
 8010f7a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8010f7c:	e02f      	b.n	8010fde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fb fca6 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f8c:	e027      	b.n	8010fde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010f8e:	f107 0318 	add.w	r3, r7, #24
 8010f92:	4618      	mov	r0, r3
 8010f94:	f7fb fdf2 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010f98:	69fb      	ldr	r3, [r7, #28]
 8010f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010f9c:	e01f      	b.n	8010fde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010f9e:	4b2d      	ldr	r3, [pc, #180]	; (8011054 <UART_SetConfig+0x934>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	f003 0320 	and.w	r3, r3, #32
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d009      	beq.n	8010fbe <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010faa:	4b2a      	ldr	r3, [pc, #168]	; (8011054 <UART_SetConfig+0x934>)
 8010fac:	681b      	ldr	r3, [r3, #0]
 8010fae:	08db      	lsrs	r3, r3, #3
 8010fb0:	f003 0303 	and.w	r3, r3, #3
 8010fb4:	4a24      	ldr	r2, [pc, #144]	; (8011048 <UART_SetConfig+0x928>)
 8010fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8010fba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010fbc:	e00f      	b.n	8010fde <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8010fbe:	4b22      	ldr	r3, [pc, #136]	; (8011048 <UART_SetConfig+0x928>)
 8010fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fc2:	e00c      	b.n	8010fde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010fc4:	4b21      	ldr	r3, [pc, #132]	; (801104c <UART_SetConfig+0x92c>)
 8010fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fc8:	e009      	b.n	8010fde <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010fce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8010fd0:	e005      	b.n	8010fde <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8010fd2:	2300      	movs	r3, #0
 8010fd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8010fd6:	2301      	movs	r3, #1
 8010fd8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8010fdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010fde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	f000 80e7 	beq.w	80111b4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fea:	4a19      	ldr	r2, [pc, #100]	; (8011050 <UART_SetConfig+0x930>)
 8010fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010ff0:	461a      	mov	r2, r3
 8010ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ff8:	005a      	lsls	r2, r3, #1
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	085b      	lsrs	r3, r3, #1
 8011000:	441a      	add	r2, r3
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	685b      	ldr	r3, [r3, #4]
 8011006:	fbb2 f3f3 	udiv	r3, r2, r3
 801100a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801100c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801100e:	2b0f      	cmp	r3, #15
 8011010:	d916      	bls.n	8011040 <UART_SetConfig+0x920>
 8011012:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011018:	d212      	bcs.n	8011040 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801101a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801101c:	b29b      	uxth	r3, r3
 801101e:	f023 030f 	bic.w	r3, r3, #15
 8011022:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8011024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011026:	085b      	lsrs	r3, r3, #1
 8011028:	b29b      	uxth	r3, r3
 801102a:	f003 0307 	and.w	r3, r3, #7
 801102e:	b29a      	uxth	r2, r3
 8011030:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8011032:	4313      	orrs	r3, r2
 8011034:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8011036:	697b      	ldr	r3, [r7, #20]
 8011038:	681b      	ldr	r3, [r3, #0]
 801103a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801103c:	60da      	str	r2, [r3, #12]
 801103e:	e0b9      	b.n	80111b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8011040:	2301      	movs	r3, #1
 8011042:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8011046:	e0b5      	b.n	80111b4 <UART_SetConfig+0xa94>
 8011048:	03d09000 	.word	0x03d09000
 801104c:	003d0900 	.word	0x003d0900
 8011050:	08016e78 	.word	0x08016e78
 8011054:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8011058:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801105c:	2b20      	cmp	r3, #32
 801105e:	dc49      	bgt.n	80110f4 <UART_SetConfig+0x9d4>
 8011060:	2b00      	cmp	r3, #0
 8011062:	db7c      	blt.n	801115e <UART_SetConfig+0xa3e>
 8011064:	2b20      	cmp	r3, #32
 8011066:	d87a      	bhi.n	801115e <UART_SetConfig+0xa3e>
 8011068:	a201      	add	r2, pc, #4	; (adr r2, 8011070 <UART_SetConfig+0x950>)
 801106a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801106e:	bf00      	nop
 8011070:	080110fb 	.word	0x080110fb
 8011074:	08011103 	.word	0x08011103
 8011078:	0801115f 	.word	0x0801115f
 801107c:	0801115f 	.word	0x0801115f
 8011080:	0801110b 	.word	0x0801110b
 8011084:	0801115f 	.word	0x0801115f
 8011088:	0801115f 	.word	0x0801115f
 801108c:	0801115f 	.word	0x0801115f
 8011090:	0801111b 	.word	0x0801111b
 8011094:	0801115f 	.word	0x0801115f
 8011098:	0801115f 	.word	0x0801115f
 801109c:	0801115f 	.word	0x0801115f
 80110a0:	0801115f 	.word	0x0801115f
 80110a4:	0801115f 	.word	0x0801115f
 80110a8:	0801115f 	.word	0x0801115f
 80110ac:	0801115f 	.word	0x0801115f
 80110b0:	0801112b 	.word	0x0801112b
 80110b4:	0801115f 	.word	0x0801115f
 80110b8:	0801115f 	.word	0x0801115f
 80110bc:	0801115f 	.word	0x0801115f
 80110c0:	0801115f 	.word	0x0801115f
 80110c4:	0801115f 	.word	0x0801115f
 80110c8:	0801115f 	.word	0x0801115f
 80110cc:	0801115f 	.word	0x0801115f
 80110d0:	0801115f 	.word	0x0801115f
 80110d4:	0801115f 	.word	0x0801115f
 80110d8:	0801115f 	.word	0x0801115f
 80110dc:	0801115f 	.word	0x0801115f
 80110e0:	0801115f 	.word	0x0801115f
 80110e4:	0801115f 	.word	0x0801115f
 80110e8:	0801115f 	.word	0x0801115f
 80110ec:	0801115f 	.word	0x0801115f
 80110f0:	08011151 	.word	0x08011151
 80110f4:	2b40      	cmp	r3, #64	; 0x40
 80110f6:	d02e      	beq.n	8011156 <UART_SetConfig+0xa36>
 80110f8:	e031      	b.n	801115e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80110fa:	f7f9 fbdd 	bl	800a8b8 <HAL_RCC_GetPCLK1Freq>
 80110fe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011100:	e033      	b.n	801116a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8011102:	f7f9 fbef 	bl	800a8e4 <HAL_RCC_GetPCLK2Freq>
 8011106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8011108:	e02f      	b.n	801116a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801110a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801110e:	4618      	mov	r0, r3
 8011110:	f7fb fbe0 	bl	800c8d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8011114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011118:	e027      	b.n	801116a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801111a:	f107 0318 	add.w	r3, r7, #24
 801111e:	4618      	mov	r0, r3
 8011120:	f7fb fd2c 	bl	800cb7c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011128:	e01f      	b.n	801116a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801112a:	4b2d      	ldr	r3, [pc, #180]	; (80111e0 <UART_SetConfig+0xac0>)
 801112c:	681b      	ldr	r3, [r3, #0]
 801112e:	f003 0320 	and.w	r3, r3, #32
 8011132:	2b00      	cmp	r3, #0
 8011134:	d009      	beq.n	801114a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8011136:	4b2a      	ldr	r3, [pc, #168]	; (80111e0 <UART_SetConfig+0xac0>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	08db      	lsrs	r3, r3, #3
 801113c:	f003 0303 	and.w	r3, r3, #3
 8011140:	4a28      	ldr	r2, [pc, #160]	; (80111e4 <UART_SetConfig+0xac4>)
 8011142:	fa22 f303 	lsr.w	r3, r2, r3
 8011146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8011148:	e00f      	b.n	801116a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801114a:	4b26      	ldr	r3, [pc, #152]	; (80111e4 <UART_SetConfig+0xac4>)
 801114c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801114e:	e00c      	b.n	801116a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8011150:	4b25      	ldr	r3, [pc, #148]	; (80111e8 <UART_SetConfig+0xac8>)
 8011152:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8011154:	e009      	b.n	801116a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8011156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801115a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801115c:	e005      	b.n	801116a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801115e:	2300      	movs	r3, #0
 8011160:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8011162:	2301      	movs	r3, #1
 8011164:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8011168:	bf00      	nop
    }

    if (pclk != 0U)
 801116a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801116c:	2b00      	cmp	r3, #0
 801116e:	d021      	beq.n	80111b4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8011170:	697b      	ldr	r3, [r7, #20]
 8011172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011174:	4a1d      	ldr	r2, [pc, #116]	; (80111ec <UART_SetConfig+0xacc>)
 8011176:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801117a:	461a      	mov	r2, r3
 801117c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801117e:	fbb3 f2f2 	udiv	r2, r3, r2
 8011182:	697b      	ldr	r3, [r7, #20]
 8011184:	685b      	ldr	r3, [r3, #4]
 8011186:	085b      	lsrs	r3, r3, #1
 8011188:	441a      	add	r2, r3
 801118a:	697b      	ldr	r3, [r7, #20]
 801118c:	685b      	ldr	r3, [r3, #4]
 801118e:	fbb2 f3f3 	udiv	r3, r2, r3
 8011192:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011196:	2b0f      	cmp	r3, #15
 8011198:	d909      	bls.n	80111ae <UART_SetConfig+0xa8e>
 801119a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801119c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80111a0:	d205      	bcs.n	80111ae <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	b29a      	uxth	r2, r3
 80111a6:	697b      	ldr	r3, [r7, #20]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	60da      	str	r2, [r3, #12]
 80111ac:	e002      	b.n	80111b4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80111ae:	2301      	movs	r3, #1
 80111b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80111b4:	697b      	ldr	r3, [r7, #20]
 80111b6:	2201      	movs	r2, #1
 80111b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80111bc:	697b      	ldr	r3, [r7, #20]
 80111be:	2201      	movs	r2, #1
 80111c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80111c4:	697b      	ldr	r3, [r7, #20]
 80111c6:	2200      	movs	r2, #0
 80111c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80111ca:	697b      	ldr	r3, [r7, #20]
 80111cc:	2200      	movs	r2, #0
 80111ce:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80111d0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80111d4:	4618      	mov	r0, r3
 80111d6:	3748      	adds	r7, #72	; 0x48
 80111d8:	46bd      	mov	sp, r7
 80111da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80111de:	bf00      	nop
 80111e0:	58024400 	.word	0x58024400
 80111e4:	03d09000 	.word	0x03d09000
 80111e8:	003d0900 	.word	0x003d0900
 80111ec:	08016e78 	.word	0x08016e78

080111f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80111f0:	b480      	push	{r7}
 80111f2:	b083      	sub	sp, #12
 80111f4:	af00      	add	r7, sp, #0
 80111f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111fc:	f003 0308 	and.w	r3, r3, #8
 8011200:	2b00      	cmp	r3, #0
 8011202:	d00a      	beq.n	801121a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8011204:	687b      	ldr	r3, [r7, #4]
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	685b      	ldr	r3, [r3, #4]
 801120a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011212:	687b      	ldr	r3, [r7, #4]
 8011214:	681b      	ldr	r3, [r3, #0]
 8011216:	430a      	orrs	r2, r1
 8011218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801121a:	687b      	ldr	r3, [r7, #4]
 801121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801121e:	f003 0301 	and.w	r3, r3, #1
 8011222:	2b00      	cmp	r3, #0
 8011224:	d00a      	beq.n	801123c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	681b      	ldr	r3, [r3, #0]
 801122a:	685b      	ldr	r3, [r3, #4]
 801122c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	430a      	orrs	r2, r1
 801123a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011240:	f003 0302 	and.w	r3, r3, #2
 8011244:	2b00      	cmp	r3, #0
 8011246:	d00a      	beq.n	801125e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8011248:	687b      	ldr	r3, [r7, #4]
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	685b      	ldr	r3, [r3, #4]
 801124e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011252:	687b      	ldr	r3, [r7, #4]
 8011254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011256:	687b      	ldr	r3, [r7, #4]
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	430a      	orrs	r2, r1
 801125c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801125e:	687b      	ldr	r3, [r7, #4]
 8011260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011262:	f003 0304 	and.w	r3, r3, #4
 8011266:	2b00      	cmp	r3, #0
 8011268:	d00a      	beq.n	8011280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801126a:	687b      	ldr	r3, [r7, #4]
 801126c:	681b      	ldr	r3, [r3, #0]
 801126e:	685b      	ldr	r3, [r3, #4]
 8011270:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	430a      	orrs	r2, r1
 801127e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011284:	f003 0310 	and.w	r3, r3, #16
 8011288:	2b00      	cmp	r3, #0
 801128a:	d00a      	beq.n	80112a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	681b      	ldr	r3, [r3, #0]
 8011290:	689b      	ldr	r3, [r3, #8]
 8011292:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	430a      	orrs	r2, r1
 80112a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112a6:	f003 0320 	and.w	r3, r3, #32
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d00a      	beq.n	80112c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	689b      	ldr	r3, [r3, #8]
 80112b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	681b      	ldr	r3, [r3, #0]
 80112c0:	430a      	orrs	r2, r1
 80112c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80112c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d01a      	beq.n	8011306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	681b      	ldr	r3, [r3, #0]
 80112d4:	685b      	ldr	r3, [r3, #4]
 80112d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	430a      	orrs	r2, r1
 80112e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80112e6:	687b      	ldr	r3, [r7, #4]
 80112e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80112ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80112ee:	d10a      	bne.n	8011306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	685b      	ldr	r3, [r3, #4]
 80112f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	430a      	orrs	r2, r1
 8011304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8011306:	687b      	ldr	r3, [r7, #4]
 8011308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801130e:	2b00      	cmp	r3, #0
 8011310:	d00a      	beq.n	8011328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	685b      	ldr	r3, [r3, #4]
 8011318:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801131c:	687b      	ldr	r3, [r7, #4]
 801131e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011320:	687b      	ldr	r3, [r7, #4]
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	430a      	orrs	r2, r1
 8011326:	605a      	str	r2, [r3, #4]
  }
}
 8011328:	bf00      	nop
 801132a:	370c      	adds	r7, #12
 801132c:	46bd      	mov	sp, r7
 801132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011332:	4770      	bx	lr

08011334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b098      	sub	sp, #96	; 0x60
 8011338:	af02      	add	r7, sp, #8
 801133a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801133c:	687b      	ldr	r3, [r7, #4]
 801133e:	2200      	movs	r2, #0
 8011340:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8011344:	f7f2 fb72 	bl	8003a2c <HAL_GetTick>
 8011348:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801134a:	687b      	ldr	r3, [r7, #4]
 801134c:	681b      	ldr	r3, [r3, #0]
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	f003 0308 	and.w	r3, r3, #8
 8011354:	2b08      	cmp	r3, #8
 8011356:	d12f      	bne.n	80113b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8011358:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801135c:	9300      	str	r3, [sp, #0]
 801135e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011360:	2200      	movs	r2, #0
 8011362:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011366:	6878      	ldr	r0, [r7, #4]
 8011368:	f000 f88e 	bl	8011488 <UART_WaitOnFlagUntilTimeout>
 801136c:	4603      	mov	r3, r0
 801136e:	2b00      	cmp	r3, #0
 8011370:	d022      	beq.n	80113b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8011372:	687b      	ldr	r3, [r7, #4]
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801137a:	e853 3f00 	ldrex	r3, [r3]
 801137e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011380:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011386:	653b      	str	r3, [r7, #80]	; 0x50
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	461a      	mov	r2, r3
 801138e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011390:	647b      	str	r3, [r7, #68]	; 0x44
 8011392:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011394:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011396:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011398:	e841 2300 	strex	r3, r2, [r1]
 801139c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801139e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80113a0:	2b00      	cmp	r3, #0
 80113a2:	d1e6      	bne.n	8011372 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	2220      	movs	r2, #32
 80113a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80113b4:	2303      	movs	r3, #3
 80113b6:	e063      	b.n	8011480 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f003 0304 	and.w	r3, r3, #4
 80113c2:	2b04      	cmp	r3, #4
 80113c4:	d149      	bne.n	801145a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80113c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80113ca:	9300      	str	r3, [sp, #0]
 80113cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80113ce:	2200      	movs	r2, #0
 80113d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80113d4:	6878      	ldr	r0, [r7, #4]
 80113d6:	f000 f857 	bl	8011488 <UART_WaitOnFlagUntilTimeout>
 80113da:	4603      	mov	r3, r0
 80113dc:	2b00      	cmp	r3, #0
 80113de:	d03c      	beq.n	801145a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80113e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113e8:	e853 3f00 	ldrex	r3, [r3]
 80113ec:	623b      	str	r3, [r7, #32]
   return(result);
 80113ee:	6a3b      	ldr	r3, [r7, #32]
 80113f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80113f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80113f6:	687b      	ldr	r3, [r7, #4]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	461a      	mov	r2, r3
 80113fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113fe:	633b      	str	r3, [r7, #48]	; 0x30
 8011400:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011402:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011404:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011406:	e841 2300 	strex	r3, r2, [r1]
 801140a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801140c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140e:	2b00      	cmp	r3, #0
 8011410:	d1e6      	bne.n	80113e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	681b      	ldr	r3, [r3, #0]
 8011416:	3308      	adds	r3, #8
 8011418:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801141a:	693b      	ldr	r3, [r7, #16]
 801141c:	e853 3f00 	ldrex	r3, [r3]
 8011420:	60fb      	str	r3, [r7, #12]
   return(result);
 8011422:	68fb      	ldr	r3, [r7, #12]
 8011424:	f023 0301 	bic.w	r3, r3, #1
 8011428:	64bb      	str	r3, [r7, #72]	; 0x48
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	681b      	ldr	r3, [r3, #0]
 801142e:	3308      	adds	r3, #8
 8011430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011432:	61fa      	str	r2, [r7, #28]
 8011434:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011436:	69b9      	ldr	r1, [r7, #24]
 8011438:	69fa      	ldr	r2, [r7, #28]
 801143a:	e841 2300 	strex	r3, r2, [r1]
 801143e:	617b      	str	r3, [r7, #20]
   return(result);
 8011440:	697b      	ldr	r3, [r7, #20]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d1e5      	bne.n	8011412 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8011446:	687b      	ldr	r3, [r7, #4]
 8011448:	2220      	movs	r2, #32
 801144a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	2200      	movs	r2, #0
 8011452:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011456:	2303      	movs	r3, #3
 8011458:	e012      	b.n	8011480 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	2220      	movs	r2, #32
 801145e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	2220      	movs	r2, #32
 8011466:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	2200      	movs	r2, #0
 801146e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	2200      	movs	r2, #0
 8011474:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	2200      	movs	r2, #0
 801147a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 801147e:	2300      	movs	r3, #0
}
 8011480:	4618      	mov	r0, r3
 8011482:	3758      	adds	r7, #88	; 0x58
 8011484:	46bd      	mov	sp, r7
 8011486:	bd80      	pop	{r7, pc}

08011488 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b084      	sub	sp, #16
 801148c:	af00      	add	r7, sp, #0
 801148e:	60f8      	str	r0, [r7, #12]
 8011490:	60b9      	str	r1, [r7, #8]
 8011492:	603b      	str	r3, [r7, #0]
 8011494:	4613      	mov	r3, r2
 8011496:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011498:	e04f      	b.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801149a:	69bb      	ldr	r3, [r7, #24]
 801149c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80114a0:	d04b      	beq.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80114a2:	f7f2 fac3 	bl	8003a2c <HAL_GetTick>
 80114a6:	4602      	mov	r2, r0
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	1ad3      	subs	r3, r2, r3
 80114ac:	69ba      	ldr	r2, [r7, #24]
 80114ae:	429a      	cmp	r2, r3
 80114b0:	d302      	bcc.n	80114b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80114b2:	69bb      	ldr	r3, [r7, #24]
 80114b4:	2b00      	cmp	r3, #0
 80114b6:	d101      	bne.n	80114bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80114b8:	2303      	movs	r3, #3
 80114ba:	e04e      	b.n	801155a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	681b      	ldr	r3, [r3, #0]
 80114c2:	f003 0304 	and.w	r3, r3, #4
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d037      	beq.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	2b80      	cmp	r3, #128	; 0x80
 80114ce:	d034      	beq.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
 80114d0:	68bb      	ldr	r3, [r7, #8]
 80114d2:	2b40      	cmp	r3, #64	; 0x40
 80114d4:	d031      	beq.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	681b      	ldr	r3, [r3, #0]
 80114da:	69db      	ldr	r3, [r3, #28]
 80114dc:	f003 0308 	and.w	r3, r3, #8
 80114e0:	2b08      	cmp	r3, #8
 80114e2:	d110      	bne.n	8011506 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	681b      	ldr	r3, [r3, #0]
 80114e8:	2208      	movs	r2, #8
 80114ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80114ec:	68f8      	ldr	r0, [r7, #12]
 80114ee:	f000 f99d 	bl	801182c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	2208      	movs	r2, #8
 80114f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	2200      	movs	r2, #0
 80114fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8011502:	2301      	movs	r3, #1
 8011504:	e029      	b.n	801155a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	69db      	ldr	r3, [r3, #28]
 801150c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011510:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011514:	d111      	bne.n	801153a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801151e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8011520:	68f8      	ldr	r0, [r7, #12]
 8011522:	f000 f983 	bl	801182c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	2220      	movs	r2, #32
 801152a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	2200      	movs	r2, #0
 8011532:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8011536:	2303      	movs	r3, #3
 8011538:	e00f      	b.n	801155a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	681b      	ldr	r3, [r3, #0]
 801153e:	69da      	ldr	r2, [r3, #28]
 8011540:	68bb      	ldr	r3, [r7, #8]
 8011542:	4013      	ands	r3, r2
 8011544:	68ba      	ldr	r2, [r7, #8]
 8011546:	429a      	cmp	r2, r3
 8011548:	bf0c      	ite	eq
 801154a:	2301      	moveq	r3, #1
 801154c:	2300      	movne	r3, #0
 801154e:	b2db      	uxtb	r3, r3
 8011550:	461a      	mov	r2, r3
 8011552:	79fb      	ldrb	r3, [r7, #7]
 8011554:	429a      	cmp	r2, r3
 8011556:	d0a0      	beq.n	801149a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011558:	2300      	movs	r3, #0
}
 801155a:	4618      	mov	r0, r3
 801155c:	3710      	adds	r7, #16
 801155e:	46bd      	mov	sp, r7
 8011560:	bd80      	pop	{r7, pc}
	...

08011564 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011564:	b480      	push	{r7}
 8011566:	b0a3      	sub	sp, #140	; 0x8c
 8011568:	af00      	add	r7, sp, #0
 801156a:	60f8      	str	r0, [r7, #12]
 801156c:	60b9      	str	r1, [r7, #8]
 801156e:	4613      	mov	r3, r2
 8011570:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	68ba      	ldr	r2, [r7, #8]
 8011576:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	88fa      	ldrh	r2, [r7, #6]
 801157c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	88fa      	ldrh	r2, [r7, #6]
 8011584:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8011588:	68fb      	ldr	r3, [r7, #12]
 801158a:	2200      	movs	r2, #0
 801158c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801158e:	68fb      	ldr	r3, [r7, #12]
 8011590:	689b      	ldr	r3, [r3, #8]
 8011592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011596:	d10e      	bne.n	80115b6 <UART_Start_Receive_IT+0x52>
 8011598:	68fb      	ldr	r3, [r7, #12]
 801159a:	691b      	ldr	r3, [r3, #16]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d105      	bne.n	80115ac <UART_Start_Receive_IT+0x48>
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80115a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115aa:	e02d      	b.n	8011608 <UART_Start_Receive_IT+0xa4>
 80115ac:	68fb      	ldr	r3, [r7, #12]
 80115ae:	22ff      	movs	r2, #255	; 0xff
 80115b0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115b4:	e028      	b.n	8011608 <UART_Start_Receive_IT+0xa4>
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	689b      	ldr	r3, [r3, #8]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d10d      	bne.n	80115da <UART_Start_Receive_IT+0x76>
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	691b      	ldr	r3, [r3, #16]
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	d104      	bne.n	80115d0 <UART_Start_Receive_IT+0x6c>
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	22ff      	movs	r2, #255	; 0xff
 80115ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115ce:	e01b      	b.n	8011608 <UART_Start_Receive_IT+0xa4>
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	227f      	movs	r2, #127	; 0x7f
 80115d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115d8:	e016      	b.n	8011608 <UART_Start_Receive_IT+0xa4>
 80115da:	68fb      	ldr	r3, [r7, #12]
 80115dc:	689b      	ldr	r3, [r3, #8]
 80115de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80115e2:	d10d      	bne.n	8011600 <UART_Start_Receive_IT+0x9c>
 80115e4:	68fb      	ldr	r3, [r7, #12]
 80115e6:	691b      	ldr	r3, [r3, #16]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d104      	bne.n	80115f6 <UART_Start_Receive_IT+0x92>
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	227f      	movs	r2, #127	; 0x7f
 80115f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115f4:	e008      	b.n	8011608 <UART_Start_Receive_IT+0xa4>
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	223f      	movs	r2, #63	; 0x3f
 80115fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80115fe:	e003      	b.n	8011608 <UART_Start_Receive_IT+0xa4>
 8011600:	68fb      	ldr	r3, [r7, #12]
 8011602:	2200      	movs	r2, #0
 8011604:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011608:	68fb      	ldr	r3, [r7, #12]
 801160a:	2200      	movs	r2, #0
 801160c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	2222      	movs	r2, #34	; 0x22
 8011614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	3308      	adds	r3, #8
 801161e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011620:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011622:	e853 3f00 	ldrex	r3, [r3]
 8011626:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011628:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801162a:	f043 0301 	orr.w	r3, r3, #1
 801162e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	681b      	ldr	r3, [r3, #0]
 8011636:	3308      	adds	r3, #8
 8011638:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801163c:	673a      	str	r2, [r7, #112]	; 0x70
 801163e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011640:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8011642:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011644:	e841 2300 	strex	r3, r2, [r1]
 8011648:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 801164a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801164c:	2b00      	cmp	r3, #0
 801164e:	d1e3      	bne.n	8011618 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011654:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011658:	d14f      	bne.n	80116fa <UART_Start_Receive_IT+0x196>
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011660:	88fa      	ldrh	r2, [r7, #6]
 8011662:	429a      	cmp	r2, r3
 8011664:	d349      	bcc.n	80116fa <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	689b      	ldr	r3, [r3, #8]
 801166a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801166e:	d107      	bne.n	8011680 <UART_Start_Receive_IT+0x11c>
 8011670:	68fb      	ldr	r3, [r7, #12]
 8011672:	691b      	ldr	r3, [r3, #16]
 8011674:	2b00      	cmp	r3, #0
 8011676:	d103      	bne.n	8011680 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	4a47      	ldr	r2, [pc, #284]	; (8011798 <UART_Start_Receive_IT+0x234>)
 801167c:	675a      	str	r2, [r3, #116]	; 0x74
 801167e:	e002      	b.n	8011686 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	4a46      	ldr	r2, [pc, #280]	; (801179c <UART_Start_Receive_IT+0x238>)
 8011684:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8011686:	68fb      	ldr	r3, [r7, #12]
 8011688:	691b      	ldr	r3, [r3, #16]
 801168a:	2b00      	cmp	r3, #0
 801168c:	d01a      	beq.n	80116c4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801168e:	68fb      	ldr	r3, [r7, #12]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011696:	e853 3f00 	ldrex	r3, [r3]
 801169a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801169c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801169e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80116a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	681b      	ldr	r3, [r3, #0]
 80116aa:	461a      	mov	r2, r3
 80116ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80116b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80116b2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80116b6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80116b8:	e841 2300 	strex	r3, r2, [r1]
 80116bc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80116be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116c0:	2b00      	cmp	r3, #0
 80116c2:	d1e4      	bne.n	801168e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	681b      	ldr	r3, [r3, #0]
 80116c8:	3308      	adds	r3, #8
 80116ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80116cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80116ce:	e853 3f00 	ldrex	r3, [r3]
 80116d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80116d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80116da:	67fb      	str	r3, [r7, #124]	; 0x7c
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	681b      	ldr	r3, [r3, #0]
 80116e0:	3308      	adds	r3, #8
 80116e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80116e4:	64ba      	str	r2, [r7, #72]	; 0x48
 80116e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80116e8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80116ec:	e841 2300 	strex	r3, r2, [r1]
 80116f0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80116f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116f4:	2b00      	cmp	r3, #0
 80116f6:	d1e5      	bne.n	80116c4 <UART_Start_Receive_IT+0x160>
 80116f8:	e046      	b.n	8011788 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80116fa:	68fb      	ldr	r3, [r7, #12]
 80116fc:	689b      	ldr	r3, [r3, #8]
 80116fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011702:	d107      	bne.n	8011714 <UART_Start_Receive_IT+0x1b0>
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	691b      	ldr	r3, [r3, #16]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d103      	bne.n	8011714 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801170c:	68fb      	ldr	r3, [r7, #12]
 801170e:	4a24      	ldr	r2, [pc, #144]	; (80117a0 <UART_Start_Receive_IT+0x23c>)
 8011710:	675a      	str	r2, [r3, #116]	; 0x74
 8011712:	e002      	b.n	801171a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8011714:	68fb      	ldr	r3, [r7, #12]
 8011716:	4a23      	ldr	r2, [pc, #140]	; (80117a4 <UART_Start_Receive_IT+0x240>)
 8011718:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	691b      	ldr	r3, [r3, #16]
 801171e:	2b00      	cmp	r3, #0
 8011720:	d019      	beq.n	8011756 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8011722:	68fb      	ldr	r3, [r7, #12]
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801172a:	e853 3f00 	ldrex	r3, [r3]
 801172e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011732:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8011736:	677b      	str	r3, [r7, #116]	; 0x74
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	681b      	ldr	r3, [r3, #0]
 801173c:	461a      	mov	r2, r3
 801173e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011740:	637b      	str	r3, [r7, #52]	; 0x34
 8011742:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011744:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011748:	e841 2300 	strex	r3, r2, [r1]
 801174c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801174e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011750:	2b00      	cmp	r3, #0
 8011752:	d1e6      	bne.n	8011722 <UART_Start_Receive_IT+0x1be>
 8011754:	e018      	b.n	8011788 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8011756:	68fb      	ldr	r3, [r7, #12]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801175c:	697b      	ldr	r3, [r7, #20]
 801175e:	e853 3f00 	ldrex	r3, [r3]
 8011762:	613b      	str	r3, [r7, #16]
   return(result);
 8011764:	693b      	ldr	r3, [r7, #16]
 8011766:	f043 0320 	orr.w	r3, r3, #32
 801176a:	67bb      	str	r3, [r7, #120]	; 0x78
 801176c:	68fb      	ldr	r3, [r7, #12]
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	461a      	mov	r2, r3
 8011772:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011774:	623b      	str	r3, [r7, #32]
 8011776:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011778:	69f9      	ldr	r1, [r7, #28]
 801177a:	6a3a      	ldr	r2, [r7, #32]
 801177c:	e841 2300 	strex	r3, r2, [r1]
 8011780:	61bb      	str	r3, [r7, #24]
   return(result);
 8011782:	69bb      	ldr	r3, [r7, #24]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d1e6      	bne.n	8011756 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8011788:	2300      	movs	r3, #0
}
 801178a:	4618      	mov	r0, r3
 801178c:	378c      	adds	r7, #140	; 0x8c
 801178e:	46bd      	mov	sp, r7
 8011790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011794:	4770      	bx	lr
 8011796:	bf00      	nop
 8011798:	0801217d 	.word	0x0801217d
 801179c:	08011e1d 	.word	0x08011e1d
 80117a0:	08011c65 	.word	0x08011c65
 80117a4:	08011aad 	.word	0x08011aad

080117a8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80117a8:	b480      	push	{r7}
 80117aa:	b08f      	sub	sp, #60	; 0x3c
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80117b0:	687b      	ldr	r3, [r7, #4]
 80117b2:	681b      	ldr	r3, [r3, #0]
 80117b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117b6:	6a3b      	ldr	r3, [r7, #32]
 80117b8:	e853 3f00 	ldrex	r3, [r3]
 80117bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80117be:	69fb      	ldr	r3, [r7, #28]
 80117c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80117c4:	637b      	str	r3, [r7, #52]	; 0x34
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	461a      	mov	r2, r3
 80117cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80117ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80117d0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80117d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80117d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117d6:	e841 2300 	strex	r3, r2, [r1]
 80117da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80117dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1e6      	bne.n	80117b0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	681b      	ldr	r3, [r3, #0]
 80117e6:	3308      	adds	r3, #8
 80117e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	e853 3f00 	ldrex	r3, [r3]
 80117f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80117f2:	68bb      	ldr	r3, [r7, #8]
 80117f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80117f8:	633b      	str	r3, [r7, #48]	; 0x30
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	681b      	ldr	r3, [r3, #0]
 80117fe:	3308      	adds	r3, #8
 8011800:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011802:	61ba      	str	r2, [r7, #24]
 8011804:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011806:	6979      	ldr	r1, [r7, #20]
 8011808:	69ba      	ldr	r2, [r7, #24]
 801180a:	e841 2300 	strex	r3, r2, [r1]
 801180e:	613b      	str	r3, [r7, #16]
   return(result);
 8011810:	693b      	ldr	r3, [r7, #16]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d1e5      	bne.n	80117e2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	2220      	movs	r2, #32
 801181a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 801181e:	bf00      	nop
 8011820:	373c      	adds	r7, #60	; 0x3c
 8011822:	46bd      	mov	sp, r7
 8011824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011828:	4770      	bx	lr
	...

0801182c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801182c:	b480      	push	{r7}
 801182e:	b095      	sub	sp, #84	; 0x54
 8011830:	af00      	add	r7, sp, #0
 8011832:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011834:	687b      	ldr	r3, [r7, #4]
 8011836:	681b      	ldr	r3, [r3, #0]
 8011838:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801183a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801183c:	e853 3f00 	ldrex	r3, [r3]
 8011840:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011844:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011848:	64fb      	str	r3, [r7, #76]	; 0x4c
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	461a      	mov	r2, r3
 8011850:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011852:	643b      	str	r3, [r7, #64]	; 0x40
 8011854:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011856:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011858:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801185a:	e841 2300 	strex	r3, r2, [r1]
 801185e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011862:	2b00      	cmp	r3, #0
 8011864:	d1e6      	bne.n	8011834 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	3308      	adds	r3, #8
 801186c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801186e:	6a3b      	ldr	r3, [r7, #32]
 8011870:	e853 3f00 	ldrex	r3, [r3]
 8011874:	61fb      	str	r3, [r7, #28]
   return(result);
 8011876:	69fa      	ldr	r2, [r7, #28]
 8011878:	4b1e      	ldr	r3, [pc, #120]	; (80118f4 <UART_EndRxTransfer+0xc8>)
 801187a:	4013      	ands	r3, r2
 801187c:	64bb      	str	r3, [r7, #72]	; 0x48
 801187e:	687b      	ldr	r3, [r7, #4]
 8011880:	681b      	ldr	r3, [r3, #0]
 8011882:	3308      	adds	r3, #8
 8011884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8011888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801188a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801188c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801188e:	e841 2300 	strex	r3, r2, [r1]
 8011892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011896:	2b00      	cmp	r3, #0
 8011898:	d1e5      	bne.n	8011866 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801189e:	2b01      	cmp	r3, #1
 80118a0:	d118      	bne.n	80118d4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	e853 3f00 	ldrex	r3, [r3]
 80118ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80118b0:	68bb      	ldr	r3, [r7, #8]
 80118b2:	f023 0310 	bic.w	r3, r3, #16
 80118b6:	647b      	str	r3, [r7, #68]	; 0x44
 80118b8:	687b      	ldr	r3, [r7, #4]
 80118ba:	681b      	ldr	r3, [r3, #0]
 80118bc:	461a      	mov	r2, r3
 80118be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118c0:	61bb      	str	r3, [r7, #24]
 80118c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80118c4:	6979      	ldr	r1, [r7, #20]
 80118c6:	69ba      	ldr	r2, [r7, #24]
 80118c8:	e841 2300 	strex	r3, r2, [r1]
 80118cc:	613b      	str	r3, [r7, #16]
   return(result);
 80118ce:	693b      	ldr	r3, [r7, #16]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d1e6      	bne.n	80118a2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	2220      	movs	r2, #32
 80118d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2200      	movs	r2, #0
 80118e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	2200      	movs	r2, #0
 80118e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 80118e8:	bf00      	nop
 80118ea:	3754      	adds	r7, #84	; 0x54
 80118ec:	46bd      	mov	sp, r7
 80118ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118f2:	4770      	bx	lr
 80118f4:	effffffe 	.word	0xeffffffe

080118f8 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80118f8:	b580      	push	{r7, lr}
 80118fa:	b090      	sub	sp, #64	; 0x40
 80118fc:	af00      	add	r7, sp, #0
 80118fe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011904:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	69db      	ldr	r3, [r3, #28]
 801190a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801190e:	d037      	beq.n	8011980 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8011910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011912:	2200      	movs	r2, #0
 8011914:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8011918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801191a:	681b      	ldr	r3, [r3, #0]
 801191c:	3308      	adds	r3, #8
 801191e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011922:	e853 3f00 	ldrex	r3, [r3]
 8011926:	623b      	str	r3, [r7, #32]
   return(result);
 8011928:	6a3b      	ldr	r3, [r7, #32]
 801192a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801192e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011932:	681b      	ldr	r3, [r3, #0]
 8011934:	3308      	adds	r3, #8
 8011936:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011938:	633a      	str	r2, [r7, #48]	; 0x30
 801193a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801193c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801193e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011940:	e841 2300 	strex	r3, r2, [r1]
 8011944:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011948:	2b00      	cmp	r3, #0
 801194a:	d1e5      	bne.n	8011918 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801194c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011952:	693b      	ldr	r3, [r7, #16]
 8011954:	e853 3f00 	ldrex	r3, [r3]
 8011958:	60fb      	str	r3, [r7, #12]
   return(result);
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011960:	637b      	str	r3, [r7, #52]	; 0x34
 8011962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011964:	681b      	ldr	r3, [r3, #0]
 8011966:	461a      	mov	r2, r3
 8011968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801196a:	61fb      	str	r3, [r7, #28]
 801196c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801196e:	69b9      	ldr	r1, [r7, #24]
 8011970:	69fa      	ldr	r2, [r7, #28]
 8011972:	e841 2300 	strex	r3, r2, [r1]
 8011976:	617b      	str	r3, [r7, #20]
   return(result);
 8011978:	697b      	ldr	r3, [r7, #20]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d1e6      	bne.n	801194c <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801197e:	e002      	b.n	8011986 <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8011980:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8011982:	f7f0 fac5 	bl	8001f10 <HAL_UART_TxCpltCallback>
}
 8011986:	bf00      	nop
 8011988:	3740      	adds	r7, #64	; 0x40
 801198a:	46bd      	mov	sp, r7
 801198c:	bd80      	pop	{r7, pc}

0801198e <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801198e:	b580      	push	{r7, lr}
 8011990:	b084      	sub	sp, #16
 8011992:	af00      	add	r7, sp, #0
 8011994:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801199a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 801199c:	68f8      	ldr	r0, [r7, #12]
 801199e:	f7fe fe9f 	bl	80106e0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80119a2:	bf00      	nop
 80119a4:	3710      	adds	r7, #16
 80119a6:	46bd      	mov	sp, r7
 80119a8:	bd80      	pop	{r7, pc}

080119aa <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80119aa:	b580      	push	{r7, lr}
 80119ac:	b086      	sub	sp, #24
 80119ae:	af00      	add	r7, sp, #0
 80119b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80119b6:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80119b8:	697b      	ldr	r3, [r7, #20]
 80119ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80119be:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80119c0:	697b      	ldr	r3, [r7, #20]
 80119c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80119c6:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80119c8:	697b      	ldr	r3, [r7, #20]
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	689b      	ldr	r3, [r3, #8]
 80119ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80119d2:	2b80      	cmp	r3, #128	; 0x80
 80119d4:	d109      	bne.n	80119ea <UART_DMAError+0x40>
 80119d6:	693b      	ldr	r3, [r7, #16]
 80119d8:	2b21      	cmp	r3, #33	; 0x21
 80119da:	d106      	bne.n	80119ea <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80119dc:	697b      	ldr	r3, [r7, #20]
 80119de:	2200      	movs	r2, #0
 80119e0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80119e4:	6978      	ldr	r0, [r7, #20]
 80119e6:	f7ff fedf 	bl	80117a8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80119ea:	697b      	ldr	r3, [r7, #20]
 80119ec:	681b      	ldr	r3, [r3, #0]
 80119ee:	689b      	ldr	r3, [r3, #8]
 80119f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80119f4:	2b40      	cmp	r3, #64	; 0x40
 80119f6:	d109      	bne.n	8011a0c <UART_DMAError+0x62>
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	2b22      	cmp	r3, #34	; 0x22
 80119fc:	d106      	bne.n	8011a0c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	2200      	movs	r2, #0
 8011a02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8011a06:	6978      	ldr	r0, [r7, #20]
 8011a08:	f7ff ff10 	bl	801182c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011a0c:	697b      	ldr	r3, [r7, #20]
 8011a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011a12:	f043 0210 	orr.w	r2, r3, #16
 8011a16:	697b      	ldr	r3, [r7, #20]
 8011a18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a1c:	6978      	ldr	r0, [r7, #20]
 8011a1e:	f7fe fe69 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a22:	bf00      	nop
 8011a24:	3718      	adds	r7, #24
 8011a26:	46bd      	mov	sp, r7
 8011a28:	bd80      	pop	{r7, pc}

08011a2a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8011a2a:	b580      	push	{r7, lr}
 8011a2c:	b084      	sub	sp, #16
 8011a2e:	af00      	add	r7, sp, #0
 8011a30:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a36:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8011a38:	68fb      	ldr	r3, [r7, #12]
 8011a3a:	2200      	movs	r2, #0
 8011a3c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2200      	movs	r2, #0
 8011a44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8011a48:	68f8      	ldr	r0, [r7, #12]
 8011a4a:	f7fe fe53 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011a4e:	bf00      	nop
 8011a50:	3710      	adds	r7, #16
 8011a52:	46bd      	mov	sp, r7
 8011a54:	bd80      	pop	{r7, pc}

08011a56 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8011a56:	b580      	push	{r7, lr}
 8011a58:	b088      	sub	sp, #32
 8011a5a:	af00      	add	r7, sp, #0
 8011a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	e853 3f00 	ldrex	r3, [r3]
 8011a6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8011a6c:	68bb      	ldr	r3, [r7, #8]
 8011a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011a72:	61fb      	str	r3, [r7, #28]
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	461a      	mov	r2, r3
 8011a7a:	69fb      	ldr	r3, [r7, #28]
 8011a7c:	61bb      	str	r3, [r7, #24]
 8011a7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011a80:	6979      	ldr	r1, [r7, #20]
 8011a82:	69ba      	ldr	r2, [r7, #24]
 8011a84:	e841 2300 	strex	r3, r2, [r1]
 8011a88:	613b      	str	r3, [r7, #16]
   return(result);
 8011a8a:	693b      	ldr	r3, [r7, #16]
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d1e6      	bne.n	8011a5e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2220      	movs	r2, #32
 8011a94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	2200      	movs	r2, #0
 8011a9c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8011a9e:	6878      	ldr	r0, [r7, #4]
 8011aa0:	f7f0 fa36 	bl	8001f10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8011aa4:	bf00      	nop
 8011aa6:	3720      	adds	r7, #32
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	bd80      	pop	{r7, pc}

08011aac <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8011aac:	b580      	push	{r7, lr}
 8011aae:	b09c      	sub	sp, #112	; 0x70
 8011ab0:	af00      	add	r7, sp, #0
 8011ab2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011aba:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011ac4:	2b22      	cmp	r3, #34	; 0x22
 8011ac6:	f040 80be 	bne.w	8011c46 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011aca:	687b      	ldr	r3, [r7, #4]
 8011acc:	681b      	ldr	r3, [r3, #0]
 8011ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011ad0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011ad4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8011ad8:	b2d9      	uxtb	r1, r3
 8011ada:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011ade:	b2da      	uxtb	r2, r3
 8011ae0:	687b      	ldr	r3, [r7, #4]
 8011ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ae4:	400a      	ands	r2, r1
 8011ae6:	b2d2      	uxtb	r2, r2
 8011ae8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011aee:	1c5a      	adds	r2, r3, #1
 8011af0:	687b      	ldr	r3, [r7, #4]
 8011af2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011af4:	687b      	ldr	r3, [r7, #4]
 8011af6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011afa:	b29b      	uxth	r3, r3
 8011afc:	3b01      	subs	r3, #1
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011b06:	687b      	ldr	r3, [r7, #4]
 8011b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	2b00      	cmp	r3, #0
 8011b10:	f040 80a1 	bne.w	8011c56 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011b14:	687b      	ldr	r3, [r7, #4]
 8011b16:	681b      	ldr	r3, [r3, #0]
 8011b18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b1c:	e853 3f00 	ldrex	r3, [r3]
 8011b20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8011b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b24:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011b28:	66bb      	str	r3, [r7, #104]	; 0x68
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	461a      	mov	r2, r3
 8011b30:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b32:	65bb      	str	r3, [r7, #88]	; 0x58
 8011b34:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b36:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011b38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011b3a:	e841 2300 	strex	r3, r2, [r1]
 8011b3e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8011b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d1e6      	bne.n	8011b14 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	3308      	adds	r3, #8
 8011b4c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011b4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b50:	e853 3f00 	ldrex	r3, [r3]
 8011b54:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8011b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b58:	f023 0301 	bic.w	r3, r3, #1
 8011b5c:	667b      	str	r3, [r7, #100]	; 0x64
 8011b5e:	687b      	ldr	r3, [r7, #4]
 8011b60:	681b      	ldr	r3, [r3, #0]
 8011b62:	3308      	adds	r3, #8
 8011b64:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011b66:	647a      	str	r2, [r7, #68]	; 0x44
 8011b68:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011b6a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011b6c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011b6e:	e841 2300 	strex	r3, r2, [r1]
 8011b72:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8011b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011b76:	2b00      	cmp	r3, #0
 8011b78:	d1e5      	bne.n	8011b46 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011b7a:	687b      	ldr	r3, [r7, #4]
 8011b7c:	2220      	movs	r2, #32
 8011b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011b82:	687b      	ldr	r3, [r7, #4]
 8011b84:	2200      	movs	r2, #0
 8011b86:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	2200      	movs	r2, #0
 8011b8c:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011b8e:	687b      	ldr	r3, [r7, #4]
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	4a33      	ldr	r2, [pc, #204]	; (8011c60 <UART_RxISR_8BIT+0x1b4>)
 8011b94:	4293      	cmp	r3, r2
 8011b96:	d01f      	beq.n	8011bd8 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011b98:	687b      	ldr	r3, [r7, #4]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	685b      	ldr	r3, [r3, #4]
 8011b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d018      	beq.n	8011bd8 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	681b      	ldr	r3, [r3, #0]
 8011baa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bae:	e853 3f00 	ldrex	r3, [r3]
 8011bb2:	623b      	str	r3, [r7, #32]
   return(result);
 8011bb4:	6a3b      	ldr	r3, [r7, #32]
 8011bb6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011bba:	663b      	str	r3, [r7, #96]	; 0x60
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	681b      	ldr	r3, [r3, #0]
 8011bc0:	461a      	mov	r2, r3
 8011bc2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8011bc6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011bc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011bca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011bcc:	e841 2300 	strex	r3, r2, [r1]
 8011bd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8011bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d1e6      	bne.n	8011ba6 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bdc:	2b01      	cmp	r3, #1
 8011bde:	d12e      	bne.n	8011c3e <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	2200      	movs	r2, #0
 8011be4:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	681b      	ldr	r3, [r3, #0]
 8011bea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011bec:	693b      	ldr	r3, [r7, #16]
 8011bee:	e853 3f00 	ldrex	r3, [r3]
 8011bf2:	60fb      	str	r3, [r7, #12]
   return(result);
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	f023 0310 	bic.w	r3, r3, #16
 8011bfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	461a      	mov	r2, r3
 8011c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c04:	61fb      	str	r3, [r7, #28]
 8011c06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011c08:	69b9      	ldr	r1, [r7, #24]
 8011c0a:	69fa      	ldr	r2, [r7, #28]
 8011c0c:	e841 2300 	strex	r3, r2, [r1]
 8011c10:	617b      	str	r3, [r7, #20]
   return(result);
 8011c12:	697b      	ldr	r3, [r7, #20]
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d1e6      	bne.n	8011be6 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	681b      	ldr	r3, [r3, #0]
 8011c1c:	69db      	ldr	r3, [r3, #28]
 8011c1e:	f003 0310 	and.w	r3, r3, #16
 8011c22:	2b10      	cmp	r3, #16
 8011c24:	d103      	bne.n	8011c2e <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	681b      	ldr	r3, [r3, #0]
 8011c2a:	2210      	movs	r2, #16
 8011c2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011c34:	4619      	mov	r1, r3
 8011c36:	6878      	ldr	r0, [r7, #4]
 8011c38:	f7fe fd66 	bl	8010708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011c3c:	e00b      	b.n	8011c56 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011c3e:	6878      	ldr	r0, [r7, #4]
 8011c40:	f7ee fd06 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011c44:	e007      	b.n	8011c56 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	681b      	ldr	r3, [r3, #0]
 8011c4a:	699a      	ldr	r2, [r3, #24]
 8011c4c:	687b      	ldr	r3, [r7, #4]
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	f042 0208 	orr.w	r2, r2, #8
 8011c54:	619a      	str	r2, [r3, #24]
}
 8011c56:	bf00      	nop
 8011c58:	3770      	adds	r7, #112	; 0x70
 8011c5a:	46bd      	mov	sp, r7
 8011c5c:	bd80      	pop	{r7, pc}
 8011c5e:	bf00      	nop
 8011c60:	58000c00 	.word	0x58000c00

08011c64 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b09c      	sub	sp, #112	; 0x70
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8011c6c:	687b      	ldr	r3, [r7, #4]
 8011c6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011c72:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011c76:	687b      	ldr	r3, [r7, #4]
 8011c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011c7c:	2b22      	cmp	r3, #34	; 0x22
 8011c7e:	f040 80be 	bne.w	8011dfe <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011c82:	687b      	ldr	r3, [r7, #4]
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c88:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8011c8c:	687b      	ldr	r3, [r7, #4]
 8011c8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011c90:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8011c92:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8011c96:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8011c9a:	4013      	ands	r3, r2
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011ca0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011ca6:	1c9a      	adds	r2, r3, #2
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8011cac:	687b      	ldr	r3, [r7, #4]
 8011cae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011cb2:	b29b      	uxth	r3, r3
 8011cb4:	3b01      	subs	r3, #1
 8011cb6:	b29a      	uxth	r2, r3
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011cc4:	b29b      	uxth	r3, r3
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f040 80a1 	bne.w	8011e0e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011cd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011cd4:	e853 3f00 	ldrex	r3, [r3]
 8011cd8:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8011cda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011cdc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8011ce0:	667b      	str	r3, [r7, #100]	; 0x64
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	461a      	mov	r2, r3
 8011ce8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011cea:	657b      	str	r3, [r7, #84]	; 0x54
 8011cec:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011cee:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011cf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8011cf2:	e841 2300 	strex	r3, r2, [r1]
 8011cf6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8011cf8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d1e6      	bne.n	8011ccc <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011cfe:	687b      	ldr	r3, [r7, #4]
 8011d00:	681b      	ldr	r3, [r3, #0]
 8011d02:	3308      	adds	r3, #8
 8011d04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011d08:	e853 3f00 	ldrex	r3, [r3]
 8011d0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8011d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d10:	f023 0301 	bic.w	r3, r3, #1
 8011d14:	663b      	str	r3, [r7, #96]	; 0x60
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	681b      	ldr	r3, [r3, #0]
 8011d1a:	3308      	adds	r3, #8
 8011d1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011d1e:	643a      	str	r2, [r7, #64]	; 0x40
 8011d20:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8011d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8011d26:	e841 2300 	strex	r3, r2, [r1]
 8011d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8011d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011d2e:	2b00      	cmp	r3, #0
 8011d30:	d1e5      	bne.n	8011cfe <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	2220      	movs	r2, #32
 8011d36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8011d3a:	687b      	ldr	r3, [r7, #4]
 8011d3c:	2200      	movs	r2, #0
 8011d3e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011d40:	687b      	ldr	r3, [r7, #4]
 8011d42:	2200      	movs	r2, #0
 8011d44:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	4a33      	ldr	r2, [pc, #204]	; (8011e18 <UART_RxISR_16BIT+0x1b4>)
 8011d4c:	4293      	cmp	r3, r2
 8011d4e:	d01f      	beq.n	8011d90 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	681b      	ldr	r3, [r3, #0]
 8011d54:	685b      	ldr	r3, [r3, #4]
 8011d56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d018      	beq.n	8011d90 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8011d5e:	687b      	ldr	r3, [r7, #4]
 8011d60:	681b      	ldr	r3, [r3, #0]
 8011d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011d64:	6a3b      	ldr	r3, [r7, #32]
 8011d66:	e853 3f00 	ldrex	r3, [r3]
 8011d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8011d6c:	69fb      	ldr	r3, [r7, #28]
 8011d6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8011d72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	461a      	mov	r2, r3
 8011d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d7e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011d84:	e841 2300 	strex	r3, r2, [r1]
 8011d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8011d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d8c:	2b00      	cmp	r3, #0
 8011d8e:	d1e6      	bne.n	8011d5e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d12e      	bne.n	8011df6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8011d98:	687b      	ldr	r3, [r7, #4]
 8011d9a:	2200      	movs	r2, #0
 8011d9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011da4:	68fb      	ldr	r3, [r7, #12]
 8011da6:	e853 3f00 	ldrex	r3, [r3]
 8011daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	f023 0310 	bic.w	r3, r3, #16
 8011db2:	65bb      	str	r3, [r7, #88]	; 0x58
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	681b      	ldr	r3, [r3, #0]
 8011db8:	461a      	mov	r2, r3
 8011dba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011dbc:	61bb      	str	r3, [r7, #24]
 8011dbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011dc0:	6979      	ldr	r1, [r7, #20]
 8011dc2:	69ba      	ldr	r2, [r7, #24]
 8011dc4:	e841 2300 	strex	r3, r2, [r1]
 8011dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8011dca:	693b      	ldr	r3, [r7, #16]
 8011dcc:	2b00      	cmp	r3, #0
 8011dce:	d1e6      	bne.n	8011d9e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	69db      	ldr	r3, [r3, #28]
 8011dd6:	f003 0310 	and.w	r3, r3, #16
 8011dda:	2b10      	cmp	r3, #16
 8011ddc:	d103      	bne.n	8011de6 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8011dde:	687b      	ldr	r3, [r7, #4]
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	2210      	movs	r2, #16
 8011de4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011dec:	4619      	mov	r1, r3
 8011dee:	6878      	ldr	r0, [r7, #4]
 8011df0:	f7fe fc8a 	bl	8010708 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8011df4:	e00b      	b.n	8011e0e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8011df6:	6878      	ldr	r0, [r7, #4]
 8011df8:	f7ee fc2a 	bl	8000650 <HAL_UART_RxCpltCallback>
}
 8011dfc:	e007      	b.n	8011e0e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	681b      	ldr	r3, [r3, #0]
 8011e02:	699a      	ldr	r2, [r3, #24]
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	681b      	ldr	r3, [r3, #0]
 8011e08:	f042 0208 	orr.w	r2, r2, #8
 8011e0c:	619a      	str	r2, [r3, #24]
}
 8011e0e:	bf00      	nop
 8011e10:	3770      	adds	r7, #112	; 0x70
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	58000c00 	.word	0x58000c00

08011e1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8011e1c:	b580      	push	{r7, lr}
 8011e1e:	b0ac      	sub	sp, #176	; 0xb0
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011e2a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8011e2e:	687b      	ldr	r3, [r7, #4]
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	69db      	ldr	r3, [r3, #28]
 8011e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	681b      	ldr	r3, [r3, #0]
 8011e46:	689b      	ldr	r3, [r3, #8]
 8011e48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8011e4c:	687b      	ldr	r3, [r7, #4]
 8011e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011e52:	2b22      	cmp	r3, #34	; 0x22
 8011e54:	f040 8180 	bne.w	8012158 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011e5e:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8011e62:	e123      	b.n	80120ac <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011e6a:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8011e6e:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8011e72:	b2d9      	uxtb	r1, r3
 8011e74:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8011e78:	b2da      	uxtb	r2, r3
 8011e7a:	687b      	ldr	r3, [r7, #4]
 8011e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e7e:	400a      	ands	r2, r1
 8011e80:	b2d2      	uxtb	r2, r2
 8011e82:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8011e84:	687b      	ldr	r3, [r7, #4]
 8011e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8011e88:	1c5a      	adds	r2, r3, #1
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011e94:	b29b      	uxth	r3, r3
 8011e96:	3b01      	subs	r3, #1
 8011e98:	b29a      	uxth	r2, r3
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	69db      	ldr	r3, [r3, #28]
 8011ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8011eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011eae:	f003 0307 	and.w	r3, r3, #7
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d053      	beq.n	8011f5e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8011eb6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011eba:	f003 0301 	and.w	r3, r3, #1
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d011      	beq.n	8011ee6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8011ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d00b      	beq.n	8011ee6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8011ece:	687b      	ldr	r3, [r7, #4]
 8011ed0:	681b      	ldr	r3, [r3, #0]
 8011ed2:	2201      	movs	r2, #1
 8011ed4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011edc:	f043 0201 	orr.w	r2, r3, #1
 8011ee0:	687b      	ldr	r3, [r7, #4]
 8011ee2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011ee6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011eea:	f003 0302 	and.w	r3, r3, #2
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d011      	beq.n	8011f16 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8011ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011ef6:	f003 0301 	and.w	r3, r3, #1
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d00b      	beq.n	8011f16 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	681b      	ldr	r3, [r3, #0]
 8011f02:	2202      	movs	r2, #2
 8011f04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f0c:	f043 0204 	orr.w	r2, r3, #4
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8011f16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011f1a:	f003 0304 	and.w	r3, r3, #4
 8011f1e:	2b00      	cmp	r3, #0
 8011f20:	d011      	beq.n	8011f46 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8011f22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011f26:	f003 0301 	and.w	r3, r3, #1
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d00b      	beq.n	8011f46 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	2204      	movs	r2, #4
 8011f34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f3c:	f043 0202 	orr.w	r2, r3, #2
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d006      	beq.n	8011f5e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8011f50:	6878      	ldr	r0, [r7, #4]
 8011f52:	f7fe fbcf 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8011f56:	687b      	ldr	r3, [r7, #4]
 8011f58:	2200      	movs	r2, #0
 8011f5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8011f64:	b29b      	uxth	r3, r3
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	f040 80a0 	bne.w	80120ac <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	681b      	ldr	r3, [r3, #0]
 8011f70:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011f74:	e853 3f00 	ldrex	r3, [r3]
 8011f78:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8011f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011f7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8011f80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011f84:	687b      	ldr	r3, [r7, #4]
 8011f86:	681b      	ldr	r3, [r3, #0]
 8011f88:	461a      	mov	r2, r3
 8011f8a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011f8e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011f90:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011f92:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011f94:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011f96:	e841 2300 	strex	r3, r2, [r1]
 8011f9a:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8011f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d1e4      	bne.n	8011f6c <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8011fa2:	687b      	ldr	r3, [r7, #4]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	3308      	adds	r3, #8
 8011fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8011faa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011fac:	e853 3f00 	ldrex	r3, [r3]
 8011fb0:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8011fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011fb4:	4b6e      	ldr	r3, [pc, #440]	; (8012170 <UART_RxISR_8BIT_FIFOEN+0x354>)
 8011fb6:	4013      	ands	r3, r2
 8011fb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	3308      	adds	r3, #8
 8011fc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011fc6:	66ba      	str	r2, [r7, #104]	; 0x68
 8011fc8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8011fca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8011fcc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011fce:	e841 2300 	strex	r3, r2, [r1]
 8011fd2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8011fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d1e3      	bne.n	8011fa2 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8011fda:	687b      	ldr	r3, [r7, #4]
 8011fdc:	2220      	movs	r2, #32
 8011fde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	2200      	movs	r2, #0
 8011fe6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8011fe8:	687b      	ldr	r3, [r7, #4]
 8011fea:	2200      	movs	r2, #0
 8011fec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8011fee:	687b      	ldr	r3, [r7, #4]
 8011ff0:	681b      	ldr	r3, [r3, #0]
 8011ff2:	4a60      	ldr	r2, [pc, #384]	; (8012174 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8011ff4:	4293      	cmp	r3, r2
 8011ff6:	d021      	beq.n	801203c <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	681b      	ldr	r3, [r3, #0]
 8011ffc:	685b      	ldr	r3, [r3, #4]
 8011ffe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012002:	2b00      	cmp	r3, #0
 8012004:	d01a      	beq.n	801203c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801200c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801200e:	e853 3f00 	ldrex	r3, [r3]
 8012012:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8012014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012016:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 801201a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801201e:	687b      	ldr	r3, [r7, #4]
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	461a      	mov	r2, r3
 8012024:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8012028:	657b      	str	r3, [r7, #84]	; 0x54
 801202a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801202c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801202e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012030:	e841 2300 	strex	r3, r2, [r1]
 8012034:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8012036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1e4      	bne.n	8012006 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012040:	2b01      	cmp	r3, #1
 8012042:	d130      	bne.n	80120a6 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	2200      	movs	r2, #0
 8012048:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801204a:	687b      	ldr	r3, [r7, #4]
 801204c:	681b      	ldr	r3, [r3, #0]
 801204e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012052:	e853 3f00 	ldrex	r3, [r3]
 8012056:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8012058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801205a:	f023 0310 	bic.w	r3, r3, #16
 801205e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	681b      	ldr	r3, [r3, #0]
 8012066:	461a      	mov	r2, r3
 8012068:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801206c:	643b      	str	r3, [r7, #64]	; 0x40
 801206e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012070:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012072:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012074:	e841 2300 	strex	r3, r2, [r1]
 8012078:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801207a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801207c:	2b00      	cmp	r3, #0
 801207e:	d1e4      	bne.n	801204a <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	69db      	ldr	r3, [r3, #28]
 8012086:	f003 0310 	and.w	r3, r3, #16
 801208a:	2b10      	cmp	r3, #16
 801208c:	d103      	bne.n	8012096 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	2210      	movs	r2, #16
 8012094:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801209c:	4619      	mov	r1, r3
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f7fe fb32 	bl	8010708 <HAL_UARTEx_RxEventCallback>
 80120a4:	e002      	b.n	80120ac <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f7ee fad2 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80120ac:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80120b0:	2b00      	cmp	r3, #0
 80120b2:	d006      	beq.n	80120c2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80120b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80120b8:	f003 0320 	and.w	r3, r3, #32
 80120bc:	2b00      	cmp	r3, #0
 80120be:	f47f aed1 	bne.w	8011e64 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80120c2:	687b      	ldr	r3, [r7, #4]
 80120c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80120c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80120cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d049      	beq.n	8012168 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80120da:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80120de:	429a      	cmp	r2, r3
 80120e0:	d242      	bcs.n	8012168 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	3308      	adds	r3, #8
 80120e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80120ea:	6a3b      	ldr	r3, [r7, #32]
 80120ec:	e853 3f00 	ldrex	r3, [r3]
 80120f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80120f2:	69fb      	ldr	r3, [r7, #28]
 80120f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80120f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	3308      	adds	r3, #8
 8012102:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8012106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8012108:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801210a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801210c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801210e:	e841 2300 	strex	r3, r2, [r1]
 8012112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012116:	2b00      	cmp	r3, #0
 8012118:	d1e3      	bne.n	80120e2 <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801211a:	687b      	ldr	r3, [r7, #4]
 801211c:	4a16      	ldr	r2, [pc, #88]	; (8012178 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801211e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012120:	687b      	ldr	r3, [r7, #4]
 8012122:	681b      	ldr	r3, [r3, #0]
 8012124:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012126:	68fb      	ldr	r3, [r7, #12]
 8012128:	e853 3f00 	ldrex	r3, [r3]
 801212c:	60bb      	str	r3, [r7, #8]
   return(result);
 801212e:	68bb      	ldr	r3, [r7, #8]
 8012130:	f043 0320 	orr.w	r3, r3, #32
 8012134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8012138:	687b      	ldr	r3, [r7, #4]
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	461a      	mov	r2, r3
 801213e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8012142:	61bb      	str	r3, [r7, #24]
 8012144:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012146:	6979      	ldr	r1, [r7, #20]
 8012148:	69ba      	ldr	r2, [r7, #24]
 801214a:	e841 2300 	strex	r3, r2, [r1]
 801214e:	613b      	str	r3, [r7, #16]
   return(result);
 8012150:	693b      	ldr	r3, [r7, #16]
 8012152:	2b00      	cmp	r3, #0
 8012154:	d1e4      	bne.n	8012120 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8012156:	e007      	b.n	8012168 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	699a      	ldr	r2, [r3, #24]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	f042 0208 	orr.w	r2, r2, #8
 8012166:	619a      	str	r2, [r3, #24]
}
 8012168:	bf00      	nop
 801216a:	37b0      	adds	r7, #176	; 0xb0
 801216c:	46bd      	mov	sp, r7
 801216e:	bd80      	pop	{r7, pc}
 8012170:	effffffe 	.word	0xeffffffe
 8012174:	58000c00 	.word	0x58000c00
 8012178:	08011aad 	.word	0x08011aad

0801217c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	b0ae      	sub	sp, #184	; 0xb8
 8012180:	af00      	add	r7, sp, #0
 8012182:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8012184:	687b      	ldr	r3, [r7, #4]
 8012186:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801218a:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	69db      	ldr	r3, [r3, #28]
 8012194:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	689b      	ldr	r3, [r3, #8]
 80121a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80121b2:	2b22      	cmp	r3, #34	; 0x22
 80121b4:	f040 8184 	bne.w	80124c0 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80121be:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80121c2:	e127      	b.n	8012414 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80121c4:	687b      	ldr	r3, [r7, #4]
 80121c6:	681b      	ldr	r3, [r3, #0]
 80121c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ca:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80121d6:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80121da:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80121de:	4013      	ands	r3, r2
 80121e0:	b29a      	uxth	r2, r3
 80121e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80121e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80121ec:	1c9a      	adds	r2, r3, #2
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80121f8:	b29b      	uxth	r3, r3
 80121fa:	3b01      	subs	r3, #1
 80121fc:	b29a      	uxth	r2, r3
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	681b      	ldr	r3, [r3, #0]
 8012208:	69db      	ldr	r3, [r3, #28]
 801220a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801220e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012212:	f003 0307 	and.w	r3, r3, #7
 8012216:	2b00      	cmp	r3, #0
 8012218:	d053      	beq.n	80122c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801221a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801221e:	f003 0301 	and.w	r3, r3, #1
 8012222:	2b00      	cmp	r3, #0
 8012224:	d011      	beq.n	801224a <UART_RxISR_16BIT_FIFOEN+0xce>
 8012226:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801222a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801222e:	2b00      	cmp	r3, #0
 8012230:	d00b      	beq.n	801224a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	681b      	ldr	r3, [r3, #0]
 8012236:	2201      	movs	r2, #1
 8012238:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801223a:	687b      	ldr	r3, [r7, #4]
 801223c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012240:	f043 0201 	orr.w	r2, r3, #1
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801224a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801224e:	f003 0302 	and.w	r3, r3, #2
 8012252:	2b00      	cmp	r3, #0
 8012254:	d011      	beq.n	801227a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8012256:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801225a:	f003 0301 	and.w	r3, r3, #1
 801225e:	2b00      	cmp	r3, #0
 8012260:	d00b      	beq.n	801227a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8012262:	687b      	ldr	r3, [r7, #4]
 8012264:	681b      	ldr	r3, [r3, #0]
 8012266:	2202      	movs	r2, #2
 8012268:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012270:	f043 0204 	orr.w	r2, r3, #4
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801227a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 801227e:	f003 0304 	and.w	r3, r3, #4
 8012282:	2b00      	cmp	r3, #0
 8012284:	d011      	beq.n	80122aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8012286:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801228a:	f003 0301 	and.w	r3, r3, #1
 801228e:	2b00      	cmp	r3, #0
 8012290:	d00b      	beq.n	80122aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8012292:	687b      	ldr	r3, [r7, #4]
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	2204      	movs	r2, #4
 8012298:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801229a:	687b      	ldr	r3, [r7, #4]
 801229c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122a0:	f043 0202 	orr.w	r2, r3, #2
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d006      	beq.n	80122c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80122b4:	6878      	ldr	r0, [r7, #4]
 80122b6:	f7fe fa1d 	bl	80106f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	2200      	movs	r2, #0
 80122be:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80122c8:	b29b      	uxth	r3, r3
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f040 80a2 	bne.w	8012414 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80122d0:	687b      	ldr	r3, [r7, #4]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80122d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80122d8:	e853 3f00 	ldrex	r3, [r3]
 80122dc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80122de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80122e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80122e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80122e8:	687b      	ldr	r3, [r7, #4]
 80122ea:	681b      	ldr	r3, [r3, #0]
 80122ec:	461a      	mov	r2, r3
 80122ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80122f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80122f6:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80122f8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80122fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80122fe:	e841 2300 	strex	r3, r2, [r1]
 8012302:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8012304:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8012306:	2b00      	cmp	r3, #0
 8012308:	d1e2      	bne.n	80122d0 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	681b      	ldr	r3, [r3, #0]
 801230e:	3308      	adds	r3, #8
 8012310:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012312:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012314:	e853 3f00 	ldrex	r3, [r3]
 8012318:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801231a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801231c:	4b6e      	ldr	r3, [pc, #440]	; (80124d8 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 801231e:	4013      	ands	r3, r2
 8012320:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	3308      	adds	r3, #8
 801232a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801232e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8012330:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012332:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8012334:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012336:	e841 2300 	strex	r3, r2, [r1]
 801233a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801233c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801233e:	2b00      	cmp	r3, #0
 8012340:	d1e3      	bne.n	801230a <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8012342:	687b      	ldr	r3, [r7, #4]
 8012344:	2220      	movs	r2, #32
 8012346:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	2200      	movs	r2, #0
 801234e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	4a60      	ldr	r2, [pc, #384]	; (80124dc <UART_RxISR_16BIT_FIFOEN+0x360>)
 801235c:	4293      	cmp	r3, r2
 801235e:	d021      	beq.n	80123a4 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	681b      	ldr	r3, [r3, #0]
 8012364:	685b      	ldr	r3, [r3, #4]
 8012366:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801236a:	2b00      	cmp	r3, #0
 801236c:	d01a      	beq.n	80123a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012376:	e853 3f00 	ldrex	r3, [r3]
 801237a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801237c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801237e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012382:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	461a      	mov	r2, r3
 801238c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8012390:	65bb      	str	r3, [r7, #88]	; 0x58
 8012392:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8012396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012398:	e841 2300 	strex	r3, r2, [r1]
 801239c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801239e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d1e4      	bne.n	801236e <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123a8:	2b01      	cmp	r3, #1
 80123aa:	d130      	bne.n	801240e <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80123ac:	687b      	ldr	r3, [r7, #4]
 80123ae:	2200      	movs	r2, #0
 80123b0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80123b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80123ba:	e853 3f00 	ldrex	r3, [r3]
 80123be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80123c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123c2:	f023 0310 	bic.w	r3, r3, #16
 80123c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	461a      	mov	r2, r3
 80123d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80123d4:	647b      	str	r3, [r7, #68]	; 0x44
 80123d6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80123d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80123da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80123dc:	e841 2300 	strex	r3, r2, [r1]
 80123e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80123e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80123e4:	2b00      	cmp	r3, #0
 80123e6:	d1e4      	bne.n	80123b2 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	69db      	ldr	r3, [r3, #28]
 80123ee:	f003 0310 	and.w	r3, r3, #16
 80123f2:	2b10      	cmp	r3, #16
 80123f4:	d103      	bne.n	80123fe <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	681b      	ldr	r3, [r3, #0]
 80123fa:	2210      	movs	r2, #16
 80123fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8012404:	4619      	mov	r1, r3
 8012406:	6878      	ldr	r0, [r7, #4]
 8012408:	f7fe f97e 	bl	8010708 <HAL_UARTEx_RxEventCallback>
 801240c:	e002      	b.n	8012414 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801240e:	6878      	ldr	r0, [r7, #4]
 8012410:	f7ee f91e 	bl	8000650 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8012414:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8012418:	2b00      	cmp	r3, #0
 801241a:	d006      	beq.n	801242a <UART_RxISR_16BIT_FIFOEN+0x2ae>
 801241c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8012420:	f003 0320 	and.w	r3, r3, #32
 8012424:	2b00      	cmp	r3, #0
 8012426:	f47f aecd 	bne.w	80121c4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8012430:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8012434:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8012438:	2b00      	cmp	r3, #0
 801243a:	d049      	beq.n	80124d0 <UART_RxISR_16BIT_FIFOEN+0x354>
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012442:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8012446:	429a      	cmp	r2, r3
 8012448:	d242      	bcs.n	80124d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	681b      	ldr	r3, [r3, #0]
 801244e:	3308      	adds	r3, #8
 8012450:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012454:	e853 3f00 	ldrex	r3, [r3]
 8012458:	623b      	str	r3, [r7, #32]
   return(result);
 801245a:	6a3b      	ldr	r3, [r7, #32]
 801245c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012460:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	3308      	adds	r3, #8
 801246a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801246e:	633a      	str	r2, [r7, #48]	; 0x30
 8012470:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012472:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012474:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012476:	e841 2300 	strex	r3, r2, [r1]
 801247a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801247c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801247e:	2b00      	cmp	r3, #0
 8012480:	d1e3      	bne.n	801244a <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	4a16      	ldr	r2, [pc, #88]	; (80124e0 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8012486:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8012488:	687b      	ldr	r3, [r7, #4]
 801248a:	681b      	ldr	r3, [r3, #0]
 801248c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801248e:	693b      	ldr	r3, [r7, #16]
 8012490:	e853 3f00 	ldrex	r3, [r3]
 8012494:	60fb      	str	r3, [r7, #12]
   return(result);
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	f043 0320 	orr.w	r3, r3, #32
 801249c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	461a      	mov	r2, r3
 80124a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80124aa:	61fb      	str	r3, [r7, #28]
 80124ac:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80124ae:	69b9      	ldr	r1, [r7, #24]
 80124b0:	69fa      	ldr	r2, [r7, #28]
 80124b2:	e841 2300 	strex	r3, r2, [r1]
 80124b6:	617b      	str	r3, [r7, #20]
   return(result);
 80124b8:	697b      	ldr	r3, [r7, #20]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d1e4      	bne.n	8012488 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80124be:	e007      	b.n	80124d0 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	681b      	ldr	r3, [r3, #0]
 80124c4:	699a      	ldr	r2, [r3, #24]
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	681b      	ldr	r3, [r3, #0]
 80124ca:	f042 0208 	orr.w	r2, r2, #8
 80124ce:	619a      	str	r2, [r3, #24]
}
 80124d0:	bf00      	nop
 80124d2:	37b8      	adds	r7, #184	; 0xb8
 80124d4:	46bd      	mov	sp, r7
 80124d6:	bd80      	pop	{r7, pc}
 80124d8:	effffffe 	.word	0xeffffffe
 80124dc:	58000c00 	.word	0x58000c00
 80124e0:	08011c65 	.word	0x08011c65

080124e4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80124e4:	b480      	push	{r7}
 80124e6:	b083      	sub	sp, #12
 80124e8:	af00      	add	r7, sp, #0
 80124ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80124ec:	bf00      	nop
 80124ee:	370c      	adds	r7, #12
 80124f0:	46bd      	mov	sp, r7
 80124f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124f6:	4770      	bx	lr

080124f8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80124f8:	b480      	push	{r7}
 80124fa:	b083      	sub	sp, #12
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8012500:	bf00      	nop
 8012502:	370c      	adds	r7, #12
 8012504:	46bd      	mov	sp, r7
 8012506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801250a:	4770      	bx	lr

0801250c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801250c:	b480      	push	{r7}
 801250e:	b083      	sub	sp, #12
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8012514:	bf00      	nop
 8012516:	370c      	adds	r7, #12
 8012518:	46bd      	mov	sp, r7
 801251a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801251e:	4770      	bx	lr

08012520 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8012520:	b480      	push	{r7}
 8012522:	b085      	sub	sp, #20
 8012524:	af00      	add	r7, sp, #0
 8012526:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801252e:	2b01      	cmp	r3, #1
 8012530:	d101      	bne.n	8012536 <HAL_UARTEx_DisableFifoMode+0x16>
 8012532:	2302      	movs	r3, #2
 8012534:	e027      	b.n	8012586 <HAL_UARTEx_DisableFifoMode+0x66>
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2201      	movs	r2, #1
 801253a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	2224      	movs	r2, #36	; 0x24
 8012542:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012546:	687b      	ldr	r3, [r7, #4]
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	681b      	ldr	r3, [r3, #0]
 801254c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801254e:	687b      	ldr	r3, [r7, #4]
 8012550:	681b      	ldr	r3, [r3, #0]
 8012552:	681a      	ldr	r2, [r3, #0]
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	681b      	ldr	r3, [r3, #0]
 8012558:	f022 0201 	bic.w	r2, r2, #1
 801255c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801255e:	68fb      	ldr	r3, [r7, #12]
 8012560:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8012564:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	2200      	movs	r2, #0
 801256a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	681b      	ldr	r3, [r3, #0]
 8012570:	68fa      	ldr	r2, [r7, #12]
 8012572:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	2220      	movs	r2, #32
 8012578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801257c:	687b      	ldr	r3, [r7, #4]
 801257e:	2200      	movs	r2, #0
 8012580:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012584:	2300      	movs	r3, #0
}
 8012586:	4618      	mov	r0, r3
 8012588:	3714      	adds	r7, #20
 801258a:	46bd      	mov	sp, r7
 801258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012590:	4770      	bx	lr

08012592 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8012592:	b580      	push	{r7, lr}
 8012594:	b084      	sub	sp, #16
 8012596:	af00      	add	r7, sp, #0
 8012598:	6078      	str	r0, [r7, #4]
 801259a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80125a2:	2b01      	cmp	r3, #1
 80125a4:	d101      	bne.n	80125aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80125a6:	2302      	movs	r3, #2
 80125a8:	e02d      	b.n	8012606 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2201      	movs	r2, #1
 80125ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	2224      	movs	r2, #36	; 0x24
 80125b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	681b      	ldr	r3, [r3, #0]
 80125be:	681b      	ldr	r3, [r3, #0]
 80125c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	681a      	ldr	r2, [r3, #0]
 80125c8:	687b      	ldr	r3, [r7, #4]
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	f022 0201 	bic.w	r2, r2, #1
 80125d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	689b      	ldr	r3, [r3, #8]
 80125d8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80125dc:	687b      	ldr	r3, [r7, #4]
 80125de:	681b      	ldr	r3, [r3, #0]
 80125e0:	683a      	ldr	r2, [r7, #0]
 80125e2:	430a      	orrs	r2, r1
 80125e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80125e6:	6878      	ldr	r0, [r7, #4]
 80125e8:	f000 f850 	bl	801268c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	68fa      	ldr	r2, [r7, #12]
 80125f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2220      	movs	r2, #32
 80125f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	2200      	movs	r2, #0
 8012600:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012604:	2300      	movs	r3, #0
}
 8012606:	4618      	mov	r0, r3
 8012608:	3710      	adds	r7, #16
 801260a:	46bd      	mov	sp, r7
 801260c:	bd80      	pop	{r7, pc}

0801260e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801260e:	b580      	push	{r7, lr}
 8012610:	b084      	sub	sp, #16
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
 8012616:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 801261e:	2b01      	cmp	r3, #1
 8012620:	d101      	bne.n	8012626 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8012622:	2302      	movs	r3, #2
 8012624:	e02d      	b.n	8012682 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8012626:	687b      	ldr	r3, [r7, #4]
 8012628:	2201      	movs	r2, #1
 801262a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	2224      	movs	r2, #36	; 0x24
 8012632:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	681b      	ldr	r3, [r3, #0]
 8012642:	681a      	ldr	r2, [r3, #0]
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	f022 0201 	bic.w	r2, r2, #1
 801264c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	689b      	ldr	r3, [r3, #8]
 8012654:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	683a      	ldr	r2, [r7, #0]
 801265e:	430a      	orrs	r2, r1
 8012660:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8012662:	6878      	ldr	r0, [r7, #4]
 8012664:	f000 f812 	bl	801268c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	68fa      	ldr	r2, [r7, #12]
 801266e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	2220      	movs	r2, #32
 8012674:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	2200      	movs	r2, #0
 801267c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8012680:	2300      	movs	r3, #0
}
 8012682:	4618      	mov	r0, r3
 8012684:	3710      	adds	r7, #16
 8012686:	46bd      	mov	sp, r7
 8012688:	bd80      	pop	{r7, pc}
	...

0801268c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801268c:	b480      	push	{r7}
 801268e:	b085      	sub	sp, #20
 8012690:	af00      	add	r7, sp, #0
 8012692:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8012698:	2b00      	cmp	r3, #0
 801269a:	d108      	bne.n	80126ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	2201      	movs	r2, #1
 80126a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2201      	movs	r2, #1
 80126a8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80126ac:	e031      	b.n	8012712 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80126ae:	2310      	movs	r3, #16
 80126b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80126b2:	2310      	movs	r3, #16
 80126b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80126b6:	687b      	ldr	r3, [r7, #4]
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	689b      	ldr	r3, [r3, #8]
 80126bc:	0e5b      	lsrs	r3, r3, #25
 80126be:	b2db      	uxtb	r3, r3
 80126c0:	f003 0307 	and.w	r3, r3, #7
 80126c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	681b      	ldr	r3, [r3, #0]
 80126ca:	689b      	ldr	r3, [r3, #8]
 80126cc:	0f5b      	lsrs	r3, r3, #29
 80126ce:	b2db      	uxtb	r3, r3
 80126d0:	f003 0307 	and.w	r3, r3, #7
 80126d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80126d6:	7bbb      	ldrb	r3, [r7, #14]
 80126d8:	7b3a      	ldrb	r2, [r7, #12]
 80126da:	4911      	ldr	r1, [pc, #68]	; (8012720 <UARTEx_SetNbDataToProcess+0x94>)
 80126dc:	5c8a      	ldrb	r2, [r1, r2]
 80126de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80126e2:	7b3a      	ldrb	r2, [r7, #12]
 80126e4:	490f      	ldr	r1, [pc, #60]	; (8012724 <UARTEx_SetNbDataToProcess+0x98>)
 80126e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80126e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80126ec:	b29a      	uxth	r2, r3
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80126f4:	7bfb      	ldrb	r3, [r7, #15]
 80126f6:	7b7a      	ldrb	r2, [r7, #13]
 80126f8:	4909      	ldr	r1, [pc, #36]	; (8012720 <UARTEx_SetNbDataToProcess+0x94>)
 80126fa:	5c8a      	ldrb	r2, [r1, r2]
 80126fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8012700:	7b7a      	ldrb	r2, [r7, #13]
 8012702:	4908      	ldr	r1, [pc, #32]	; (8012724 <UARTEx_SetNbDataToProcess+0x98>)
 8012704:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8012706:	fb93 f3f2 	sdiv	r3, r3, r2
 801270a:	b29a      	uxth	r2, r3
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8012712:	bf00      	nop
 8012714:	3714      	adds	r7, #20
 8012716:	46bd      	mov	sp, r7
 8012718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801271c:	4770      	bx	lr
 801271e:	bf00      	nop
 8012720:	08016e90 	.word	0x08016e90
 8012724:	08016e98 	.word	0x08016e98

08012728 <__NVIC_SetPriority>:
{
 8012728:	b480      	push	{r7}
 801272a:	b083      	sub	sp, #12
 801272c:	af00      	add	r7, sp, #0
 801272e:	4603      	mov	r3, r0
 8012730:	6039      	str	r1, [r7, #0]
 8012732:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012734:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012738:	2b00      	cmp	r3, #0
 801273a:	db0a      	blt.n	8012752 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801273c:	683b      	ldr	r3, [r7, #0]
 801273e:	b2da      	uxtb	r2, r3
 8012740:	490c      	ldr	r1, [pc, #48]	; (8012774 <__NVIC_SetPriority+0x4c>)
 8012742:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012746:	0112      	lsls	r2, r2, #4
 8012748:	b2d2      	uxtb	r2, r2
 801274a:	440b      	add	r3, r1
 801274c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8012750:	e00a      	b.n	8012768 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012752:	683b      	ldr	r3, [r7, #0]
 8012754:	b2da      	uxtb	r2, r3
 8012756:	4908      	ldr	r1, [pc, #32]	; (8012778 <__NVIC_SetPriority+0x50>)
 8012758:	88fb      	ldrh	r3, [r7, #6]
 801275a:	f003 030f 	and.w	r3, r3, #15
 801275e:	3b04      	subs	r3, #4
 8012760:	0112      	lsls	r2, r2, #4
 8012762:	b2d2      	uxtb	r2, r2
 8012764:	440b      	add	r3, r1
 8012766:	761a      	strb	r2, [r3, #24]
}
 8012768:	bf00      	nop
 801276a:	370c      	adds	r7, #12
 801276c:	46bd      	mov	sp, r7
 801276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012772:	4770      	bx	lr
 8012774:	e000e100 	.word	0xe000e100
 8012778:	e000ed00 	.word	0xe000ed00

0801277c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 801277c:	b580      	push	{r7, lr}
 801277e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8012780:	4b05      	ldr	r3, [pc, #20]	; (8012798 <SysTick_Handler+0x1c>)
 8012782:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8012784:	f002 fbba 	bl	8014efc <xTaskGetSchedulerState>
 8012788:	4603      	mov	r3, r0
 801278a:	2b01      	cmp	r3, #1
 801278c:	d001      	beq.n	8012792 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 801278e:	f003 f9db 	bl	8015b48 <xPortSysTickHandler>
  }
}
 8012792:	bf00      	nop
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	e000e010 	.word	0xe000e010

0801279c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 801279c:	b580      	push	{r7, lr}
 801279e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80127a0:	2100      	movs	r1, #0
 80127a2:	f06f 0004 	mvn.w	r0, #4
 80127a6:	f7ff ffbf 	bl	8012728 <__NVIC_SetPriority>
#endif
}
 80127aa:	bf00      	nop
 80127ac:	bd80      	pop	{r7, pc}
	...

080127b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80127b0:	b480      	push	{r7}
 80127b2:	b083      	sub	sp, #12
 80127b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127b6:	f3ef 8305 	mrs	r3, IPSR
 80127ba:	603b      	str	r3, [r7, #0]
  return(result);
 80127bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d003      	beq.n	80127ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80127c2:	f06f 0305 	mvn.w	r3, #5
 80127c6:	607b      	str	r3, [r7, #4]
 80127c8:	e00c      	b.n	80127e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80127ca:	4b0a      	ldr	r3, [pc, #40]	; (80127f4 <osKernelInitialize+0x44>)
 80127cc:	681b      	ldr	r3, [r3, #0]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d105      	bne.n	80127de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80127d2:	4b08      	ldr	r3, [pc, #32]	; (80127f4 <osKernelInitialize+0x44>)
 80127d4:	2201      	movs	r2, #1
 80127d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80127d8:	2300      	movs	r3, #0
 80127da:	607b      	str	r3, [r7, #4]
 80127dc:	e002      	b.n	80127e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80127de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80127e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80127e4:	687b      	ldr	r3, [r7, #4]
}
 80127e6:	4618      	mov	r0, r3
 80127e8:	370c      	adds	r7, #12
 80127ea:	46bd      	mov	sp, r7
 80127ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f0:	4770      	bx	lr
 80127f2:	bf00      	nop
 80127f4:	240010ac 	.word	0x240010ac

080127f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80127f8:	b580      	push	{r7, lr}
 80127fa:	b082      	sub	sp, #8
 80127fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80127fe:	f3ef 8305 	mrs	r3, IPSR
 8012802:	603b      	str	r3, [r7, #0]
  return(result);
 8012804:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012806:	2b00      	cmp	r3, #0
 8012808:	d003      	beq.n	8012812 <osKernelStart+0x1a>
    stat = osErrorISR;
 801280a:	f06f 0305 	mvn.w	r3, #5
 801280e:	607b      	str	r3, [r7, #4]
 8012810:	e010      	b.n	8012834 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8012812:	4b0b      	ldr	r3, [pc, #44]	; (8012840 <osKernelStart+0x48>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	2b01      	cmp	r3, #1
 8012818:	d109      	bne.n	801282e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 801281a:	f7ff ffbf 	bl	801279c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 801281e:	4b08      	ldr	r3, [pc, #32]	; (8012840 <osKernelStart+0x48>)
 8012820:	2202      	movs	r2, #2
 8012822:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8012824:	f001 fe84 	bl	8014530 <vTaskStartScheduler>
      stat = osOK;
 8012828:	2300      	movs	r3, #0
 801282a:	607b      	str	r3, [r7, #4]
 801282c:	e002      	b.n	8012834 <osKernelStart+0x3c>
    } else {
      stat = osError;
 801282e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8012834:	687b      	ldr	r3, [r7, #4]
}
 8012836:	4618      	mov	r0, r3
 8012838:	3708      	adds	r7, #8
 801283a:	46bd      	mov	sp, r7
 801283c:	bd80      	pop	{r7, pc}
 801283e:	bf00      	nop
 8012840:	240010ac 	.word	0x240010ac

08012844 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8012844:	b580      	push	{r7, lr}
 8012846:	b08e      	sub	sp, #56	; 0x38
 8012848:	af04      	add	r7, sp, #16
 801284a:	60f8      	str	r0, [r7, #12]
 801284c:	60b9      	str	r1, [r7, #8]
 801284e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8012850:	2300      	movs	r3, #0
 8012852:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012854:	f3ef 8305 	mrs	r3, IPSR
 8012858:	617b      	str	r3, [r7, #20]
  return(result);
 801285a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 801285c:	2b00      	cmp	r3, #0
 801285e:	d17e      	bne.n	801295e <osThreadNew+0x11a>
 8012860:	68fb      	ldr	r3, [r7, #12]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d07b      	beq.n	801295e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8012866:	2380      	movs	r3, #128	; 0x80
 8012868:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 801286a:	2318      	movs	r3, #24
 801286c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 801286e:	2300      	movs	r3, #0
 8012870:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8012872:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012876:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d045      	beq.n	801290a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 801287e:	687b      	ldr	r3, [r7, #4]
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d002      	beq.n	801288c <osThreadNew+0x48>
        name = attr->name;
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	699b      	ldr	r3, [r3, #24]
 8012890:	2b00      	cmp	r3, #0
 8012892:	d002      	beq.n	801289a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	699b      	ldr	r3, [r3, #24]
 8012898:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 801289a:	69fb      	ldr	r3, [r7, #28]
 801289c:	2b00      	cmp	r3, #0
 801289e:	d008      	beq.n	80128b2 <osThreadNew+0x6e>
 80128a0:	69fb      	ldr	r3, [r7, #28]
 80128a2:	2b38      	cmp	r3, #56	; 0x38
 80128a4:	d805      	bhi.n	80128b2 <osThreadNew+0x6e>
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	685b      	ldr	r3, [r3, #4]
 80128aa:	f003 0301 	and.w	r3, r3, #1
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d001      	beq.n	80128b6 <osThreadNew+0x72>
        return (NULL);
 80128b2:	2300      	movs	r3, #0
 80128b4:	e054      	b.n	8012960 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80128b6:	687b      	ldr	r3, [r7, #4]
 80128b8:	695b      	ldr	r3, [r3, #20]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d003      	beq.n	80128c6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	695b      	ldr	r3, [r3, #20]
 80128c2:	089b      	lsrs	r3, r3, #2
 80128c4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80128c6:	687b      	ldr	r3, [r7, #4]
 80128c8:	689b      	ldr	r3, [r3, #8]
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d00e      	beq.n	80128ec <osThreadNew+0xa8>
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	68db      	ldr	r3, [r3, #12]
 80128d2:	2b5b      	cmp	r3, #91	; 0x5b
 80128d4:	d90a      	bls.n	80128ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d006      	beq.n	80128ec <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	695b      	ldr	r3, [r3, #20]
 80128e2:	2b00      	cmp	r3, #0
 80128e4:	d002      	beq.n	80128ec <osThreadNew+0xa8>
        mem = 1;
 80128e6:	2301      	movs	r3, #1
 80128e8:	61bb      	str	r3, [r7, #24]
 80128ea:	e010      	b.n	801290e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	689b      	ldr	r3, [r3, #8]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d10c      	bne.n	801290e <osThreadNew+0xca>
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	68db      	ldr	r3, [r3, #12]
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d108      	bne.n	801290e <osThreadNew+0xca>
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	691b      	ldr	r3, [r3, #16]
 8012900:	2b00      	cmp	r3, #0
 8012902:	d104      	bne.n	801290e <osThreadNew+0xca>
          mem = 0;
 8012904:	2300      	movs	r3, #0
 8012906:	61bb      	str	r3, [r7, #24]
 8012908:	e001      	b.n	801290e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 801290a:	2300      	movs	r3, #0
 801290c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 801290e:	69bb      	ldr	r3, [r7, #24]
 8012910:	2b01      	cmp	r3, #1
 8012912:	d110      	bne.n	8012936 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8012918:	687a      	ldr	r2, [r7, #4]
 801291a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 801291c:	9202      	str	r2, [sp, #8]
 801291e:	9301      	str	r3, [sp, #4]
 8012920:	69fb      	ldr	r3, [r7, #28]
 8012922:	9300      	str	r3, [sp, #0]
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	6a3a      	ldr	r2, [r7, #32]
 8012928:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801292a:	68f8      	ldr	r0, [r7, #12]
 801292c:	f001 fb10 	bl	8013f50 <xTaskCreateStatic>
 8012930:	4603      	mov	r3, r0
 8012932:	613b      	str	r3, [r7, #16]
 8012934:	e013      	b.n	801295e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8012936:	69bb      	ldr	r3, [r7, #24]
 8012938:	2b00      	cmp	r3, #0
 801293a:	d110      	bne.n	801295e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 801293c:	6a3b      	ldr	r3, [r7, #32]
 801293e:	b29a      	uxth	r2, r3
 8012940:	f107 0310 	add.w	r3, r7, #16
 8012944:	9301      	str	r3, [sp, #4]
 8012946:	69fb      	ldr	r3, [r7, #28]
 8012948:	9300      	str	r3, [sp, #0]
 801294a:	68bb      	ldr	r3, [r7, #8]
 801294c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801294e:	68f8      	ldr	r0, [r7, #12]
 8012950:	f001 fb5b 	bl	801400a <xTaskCreate>
 8012954:	4603      	mov	r3, r0
 8012956:	2b01      	cmp	r3, #1
 8012958:	d001      	beq.n	801295e <osThreadNew+0x11a>
            hTask = NULL;
 801295a:	2300      	movs	r3, #0
 801295c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 801295e:	693b      	ldr	r3, [r7, #16]
}
 8012960:	4618      	mov	r0, r3
 8012962:	3728      	adds	r7, #40	; 0x28
 8012964:	46bd      	mov	sp, r7
 8012966:	bd80      	pop	{r7, pc}

08012968 <osThreadYield>:
  }

  return (prio);
}

osStatus_t osThreadYield (void) {
 8012968:	b480      	push	{r7}
 801296a:	b083      	sub	sp, #12
 801296c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801296e:	f3ef 8305 	mrs	r3, IPSR
 8012972:	603b      	str	r3, [r7, #0]
  return(result);
 8012974:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8012976:	2b00      	cmp	r3, #0
 8012978:	d003      	beq.n	8012982 <osThreadYield+0x1a>
    stat = osErrorISR;
 801297a:	f06f 0305 	mvn.w	r3, #5
 801297e:	607b      	str	r3, [r7, #4]
 8012980:	e009      	b.n	8012996 <osThreadYield+0x2e>
  } else {
    stat = osOK;
 8012982:	2300      	movs	r3, #0
 8012984:	607b      	str	r3, [r7, #4]
    taskYIELD();
 8012986:	4b07      	ldr	r3, [pc, #28]	; (80129a4 <osThreadYield+0x3c>)
 8012988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801298c:	601a      	str	r2, [r3, #0]
 801298e:	f3bf 8f4f 	dsb	sy
 8012992:	f3bf 8f6f 	isb	sy
  }

  return (stat);
 8012996:	687b      	ldr	r3, [r7, #4]
}
 8012998:	4618      	mov	r0, r3
 801299a:	370c      	adds	r7, #12
 801299c:	46bd      	mov	sp, r7
 801299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a2:	4770      	bx	lr
 80129a4:	e000ed04 	.word	0xe000ed04

080129a8 <osThreadSuspend>:

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b086      	sub	sp, #24
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129b4:	f3ef 8305 	mrs	r3, IPSR
 80129b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80129ba:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d003      	beq.n	80129c8 <osThreadSuspend+0x20>
    stat = osErrorISR;
 80129c0:	f06f 0305 	mvn.w	r3, #5
 80129c4:	617b      	str	r3, [r7, #20]
 80129c6:	e00b      	b.n	80129e0 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 80129c8:	693b      	ldr	r3, [r7, #16]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d103      	bne.n	80129d6 <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 80129ce:	f06f 0303 	mvn.w	r3, #3
 80129d2:	617b      	str	r3, [r7, #20]
 80129d4:	e004      	b.n	80129e0 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 80129d6:	2300      	movs	r3, #0
 80129d8:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 80129da:	6938      	ldr	r0, [r7, #16]
 80129dc:	f001 fc8e 	bl	80142fc <vTaskSuspend>
  }

  return (stat);
 80129e0:	697b      	ldr	r3, [r7, #20]
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3718      	adds	r7, #24
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}

080129ea <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80129ea:	b580      	push	{r7, lr}
 80129ec:	b084      	sub	sp, #16
 80129ee:	af00      	add	r7, sp, #0
 80129f0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80129f2:	f3ef 8305 	mrs	r3, IPSR
 80129f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80129f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d003      	beq.n	8012a06 <osDelay+0x1c>
    stat = osErrorISR;
 80129fe:	f06f 0305 	mvn.w	r3, #5
 8012a02:	60fb      	str	r3, [r7, #12]
 8012a04:	e007      	b.n	8012a16 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8012a06:	2300      	movs	r3, #0
 8012a08:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	2b00      	cmp	r3, #0
 8012a0e:	d002      	beq.n	8012a16 <osDelay+0x2c>
      vTaskDelay(ticks);
 8012a10:	6878      	ldr	r0, [r7, #4]
 8012a12:	f001 fc3f 	bl	8014294 <vTaskDelay>
    }
  }

  return (stat);
 8012a16:	68fb      	ldr	r3, [r7, #12]
}
 8012a18:	4618      	mov	r0, r3
 8012a1a:	3710      	adds	r7, #16
 8012a1c:	46bd      	mov	sp, r7
 8012a1e:	bd80      	pop	{r7, pc}

08012a20 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b086      	sub	sp, #24
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8012a28:	2300      	movs	r3, #0
 8012a2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012a2c:	f3ef 8305 	mrs	r3, IPSR
 8012a30:	60fb      	str	r3, [r7, #12]
  return(result);
 8012a32:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8012a34:	2b00      	cmp	r3, #0
 8012a36:	d12d      	bne.n	8012a94 <osEventFlagsNew+0x74>
    mem = -1;
 8012a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a3c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d015      	beq.n	8012a70 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8012a44:	687b      	ldr	r3, [r7, #4]
 8012a46:	689b      	ldr	r3, [r3, #8]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d006      	beq.n	8012a5a <osEventFlagsNew+0x3a>
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	68db      	ldr	r3, [r3, #12]
 8012a50:	2b1f      	cmp	r3, #31
 8012a52:	d902      	bls.n	8012a5a <osEventFlagsNew+0x3a>
        mem = 1;
 8012a54:	2301      	movs	r3, #1
 8012a56:	613b      	str	r3, [r7, #16]
 8012a58:	e00c      	b.n	8012a74 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8012a5a:	687b      	ldr	r3, [r7, #4]
 8012a5c:	689b      	ldr	r3, [r3, #8]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	d108      	bne.n	8012a74 <osEventFlagsNew+0x54>
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d104      	bne.n	8012a74 <osEventFlagsNew+0x54>
          mem = 0;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	613b      	str	r3, [r7, #16]
 8012a6e:	e001      	b.n	8012a74 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8012a70:	2300      	movs	r3, #0
 8012a72:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8012a74:	693b      	ldr	r3, [r7, #16]
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d106      	bne.n	8012a88 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	689b      	ldr	r3, [r3, #8]
 8012a7e:	4618      	mov	r0, r3
 8012a80:	f000 fa1e 	bl	8012ec0 <xEventGroupCreateStatic>
 8012a84:	6178      	str	r0, [r7, #20]
 8012a86:	e005      	b.n	8012a94 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8012a88:	693b      	ldr	r3, [r7, #16]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d102      	bne.n	8012a94 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8012a8e:	f000 fa4e 	bl	8012f2e <xEventGroupCreate>
 8012a92:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8012a94:	697b      	ldr	r3, [r7, #20]
}
 8012a96:	4618      	mov	r0, r3
 8012a98:	3718      	adds	r7, #24
 8012a9a:	46bd      	mov	sp, r7
 8012a9c:	bd80      	pop	{r7, pc}
	...

08012aa0 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8012aa0:	b580      	push	{r7, lr}
 8012aa2:	b086      	sub	sp, #24
 8012aa4:	af00      	add	r7, sp, #0
 8012aa6:	6078      	str	r0, [r7, #4]
 8012aa8:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012aae:	693b      	ldr	r3, [r7, #16]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d004      	beq.n	8012abe <osEventFlagsSet+0x1e>
 8012ab4:	683b      	ldr	r3, [r7, #0]
 8012ab6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d003      	beq.n	8012ac6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8012abe:	f06f 0303 	mvn.w	r3, #3
 8012ac2:	617b      	str	r3, [r7, #20]
 8012ac4:	e028      	b.n	8012b18 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012ac6:	f3ef 8305 	mrs	r3, IPSR
 8012aca:	60fb      	str	r3, [r7, #12]
  return(result);
 8012acc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8012ace:	2b00      	cmp	r3, #0
 8012ad0:	d01d      	beq.n	8012b0e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8012ad2:	2300      	movs	r3, #0
 8012ad4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8012ad6:	f107 0308 	add.w	r3, r7, #8
 8012ada:	461a      	mov	r2, r3
 8012adc:	6839      	ldr	r1, [r7, #0]
 8012ade:	6938      	ldr	r0, [r7, #16]
 8012ae0:	f000 fbc8 	bl	8013274 <xEventGroupSetBitsFromISR>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d103      	bne.n	8012af2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8012aea:	f06f 0302 	mvn.w	r3, #2
 8012aee:	617b      	str	r3, [r7, #20]
 8012af0:	e012      	b.n	8012b18 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8012af2:	683b      	ldr	r3, [r7, #0]
 8012af4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d00d      	beq.n	8012b18 <osEventFlagsSet+0x78>
 8012afc:	4b09      	ldr	r3, [pc, #36]	; (8012b24 <osEventFlagsSet+0x84>)
 8012afe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012b02:	601a      	str	r2, [r3, #0]
 8012b04:	f3bf 8f4f 	dsb	sy
 8012b08:	f3bf 8f6f 	isb	sy
 8012b0c:	e004      	b.n	8012b18 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8012b0e:	6839      	ldr	r1, [r7, #0]
 8012b10:	6938      	ldr	r0, [r7, #16]
 8012b12:	f000 faf5 	bl	8013100 <xEventGroupSetBits>
 8012b16:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8012b18:	697b      	ldr	r3, [r7, #20]
}
 8012b1a:	4618      	mov	r0, r3
 8012b1c:	3718      	adds	r7, #24
 8012b1e:	46bd      	mov	sp, r7
 8012b20:	bd80      	pop	{r7, pc}
 8012b22:	bf00      	nop
 8012b24:	e000ed04 	.word	0xe000ed04

08012b28 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8012b28:	b580      	push	{r7, lr}
 8012b2a:	b08c      	sub	sp, #48	; 0x30
 8012b2c:	af02      	add	r7, sp, #8
 8012b2e:	60f8      	str	r0, [r7, #12]
 8012b30:	60b9      	str	r1, [r7, #8]
 8012b32:	607a      	str	r2, [r7, #4]
 8012b34:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8012b36:	68fb      	ldr	r3, [r7, #12]
 8012b38:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8012b3a:	69bb      	ldr	r3, [r7, #24]
 8012b3c:	2b00      	cmp	r3, #0
 8012b3e:	d004      	beq.n	8012b4a <osEventFlagsWait+0x22>
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	d003      	beq.n	8012b52 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8012b4a:	f06f 0303 	mvn.w	r3, #3
 8012b4e:	61fb      	str	r3, [r7, #28]
 8012b50:	e04b      	b.n	8012bea <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012b52:	f3ef 8305 	mrs	r3, IPSR
 8012b56:	617b      	str	r3, [r7, #20]
  return(result);
 8012b58:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d003      	beq.n	8012b66 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8012b5e:	f06f 0305 	mvn.w	r3, #5
 8012b62:	61fb      	str	r3, [r7, #28]
 8012b64:	e041      	b.n	8012bea <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	f003 0301 	and.w	r3, r3, #1
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d002      	beq.n	8012b76 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8012b70:	2301      	movs	r3, #1
 8012b72:	627b      	str	r3, [r7, #36]	; 0x24
 8012b74:	e001      	b.n	8012b7a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8012b76:	2300      	movs	r3, #0
 8012b78:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	f003 0302 	and.w	r3, r3, #2
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d002      	beq.n	8012b8a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8012b84:	2300      	movs	r3, #0
 8012b86:	623b      	str	r3, [r7, #32]
 8012b88:	e001      	b.n	8012b8e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8012b8e:	683b      	ldr	r3, [r7, #0]
 8012b90:	9300      	str	r3, [sp, #0]
 8012b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b94:	6a3a      	ldr	r2, [r7, #32]
 8012b96:	68b9      	ldr	r1, [r7, #8]
 8012b98:	69b8      	ldr	r0, [r7, #24]
 8012b9a:	f000 f9e3 	bl	8012f64 <xEventGroupWaitBits>
 8012b9e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f003 0301 	and.w	r3, r3, #1
 8012ba6:	2b00      	cmp	r3, #0
 8012ba8:	d010      	beq.n	8012bcc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8012baa:	68ba      	ldr	r2, [r7, #8]
 8012bac:	69fb      	ldr	r3, [r7, #28]
 8012bae:	4013      	ands	r3, r2
 8012bb0:	68ba      	ldr	r2, [r7, #8]
 8012bb2:	429a      	cmp	r2, r3
 8012bb4:	d019      	beq.n	8012bea <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012bb6:	683b      	ldr	r3, [r7, #0]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d003      	beq.n	8012bc4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8012bbc:	f06f 0301 	mvn.w	r3, #1
 8012bc0:	61fb      	str	r3, [r7, #28]
 8012bc2:	e012      	b.n	8012bea <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012bc4:	f06f 0302 	mvn.w	r3, #2
 8012bc8:	61fb      	str	r3, [r7, #28]
 8012bca:	e00e      	b.n	8012bea <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8012bcc:	68ba      	ldr	r2, [r7, #8]
 8012bce:	69fb      	ldr	r3, [r7, #28]
 8012bd0:	4013      	ands	r3, r2
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d109      	bne.n	8012bea <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8012bd6:	683b      	ldr	r3, [r7, #0]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d003      	beq.n	8012be4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8012bdc:	f06f 0301 	mvn.w	r3, #1
 8012be0:	61fb      	str	r3, [r7, #28]
 8012be2:	e002      	b.n	8012bea <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8012be4:	f06f 0302 	mvn.w	r3, #2
 8012be8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8012bea:	69fb      	ldr	r3, [r7, #28]
}
 8012bec:	4618      	mov	r0, r3
 8012bee:	3728      	adds	r7, #40	; 0x28
 8012bf0:	46bd      	mov	sp, r7
 8012bf2:	bd80      	pop	{r7, pc}

08012bf4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8012bf4:	b580      	push	{r7, lr}
 8012bf6:	b08a      	sub	sp, #40	; 0x28
 8012bf8:	af02      	add	r7, sp, #8
 8012bfa:	60f8      	str	r0, [r7, #12]
 8012bfc:	60b9      	str	r1, [r7, #8]
 8012bfe:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8012c00:	2300      	movs	r3, #0
 8012c02:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012c04:	f3ef 8305 	mrs	r3, IPSR
 8012c08:	613b      	str	r3, [r7, #16]
  return(result);
 8012c0a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d15f      	bne.n	8012cd0 <osMessageQueueNew+0xdc>
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d05c      	beq.n	8012cd0 <osMessageQueueNew+0xdc>
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	2b00      	cmp	r3, #0
 8012c1a:	d059      	beq.n	8012cd0 <osMessageQueueNew+0xdc>
    mem = -1;
 8012c1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012c20:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8012c22:	687b      	ldr	r3, [r7, #4]
 8012c24:	2b00      	cmp	r3, #0
 8012c26:	d029      	beq.n	8012c7c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	689b      	ldr	r3, [r3, #8]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d012      	beq.n	8012c56 <osMessageQueueNew+0x62>
 8012c30:	687b      	ldr	r3, [r7, #4]
 8012c32:	68db      	ldr	r3, [r3, #12]
 8012c34:	2b4f      	cmp	r3, #79	; 0x4f
 8012c36:	d90e      	bls.n	8012c56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8012c3c:	2b00      	cmp	r3, #0
 8012c3e:	d00a      	beq.n	8012c56 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	695a      	ldr	r2, [r3, #20]
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	68b9      	ldr	r1, [r7, #8]
 8012c48:	fb01 f303 	mul.w	r3, r1, r3
 8012c4c:	429a      	cmp	r2, r3
 8012c4e:	d302      	bcc.n	8012c56 <osMessageQueueNew+0x62>
        mem = 1;
 8012c50:	2301      	movs	r3, #1
 8012c52:	61bb      	str	r3, [r7, #24]
 8012c54:	e014      	b.n	8012c80 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c56:	687b      	ldr	r3, [r7, #4]
 8012c58:	689b      	ldr	r3, [r3, #8]
 8012c5a:	2b00      	cmp	r3, #0
 8012c5c:	d110      	bne.n	8012c80 <osMessageQueueNew+0x8c>
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	68db      	ldr	r3, [r3, #12]
 8012c62:	2b00      	cmp	r3, #0
 8012c64:	d10c      	bne.n	8012c80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8012c6a:	2b00      	cmp	r3, #0
 8012c6c:	d108      	bne.n	8012c80 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	695b      	ldr	r3, [r3, #20]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d104      	bne.n	8012c80 <osMessageQueueNew+0x8c>
          mem = 0;
 8012c76:	2300      	movs	r3, #0
 8012c78:	61bb      	str	r3, [r7, #24]
 8012c7a:	e001      	b.n	8012c80 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8012c7c:	2300      	movs	r3, #0
 8012c7e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8012c80:	69bb      	ldr	r3, [r7, #24]
 8012c82:	2b01      	cmp	r3, #1
 8012c84:	d10b      	bne.n	8012c9e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8012c86:	687b      	ldr	r3, [r7, #4]
 8012c88:	691a      	ldr	r2, [r3, #16]
 8012c8a:	687b      	ldr	r3, [r7, #4]
 8012c8c:	689b      	ldr	r3, [r3, #8]
 8012c8e:	2100      	movs	r1, #0
 8012c90:	9100      	str	r1, [sp, #0]
 8012c92:	68b9      	ldr	r1, [r7, #8]
 8012c94:	68f8      	ldr	r0, [r7, #12]
 8012c96:	f000 fc1d 	bl	80134d4 <xQueueGenericCreateStatic>
 8012c9a:	61f8      	str	r0, [r7, #28]
 8012c9c:	e008      	b.n	8012cb0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d105      	bne.n	8012cb0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	68b9      	ldr	r1, [r7, #8]
 8012ca8:	68f8      	ldr	r0, [r7, #12]
 8012caa:	f000 fc8b 	bl	80135c4 <xQueueGenericCreate>
 8012cae:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8012cb0:	69fb      	ldr	r3, [r7, #28]
 8012cb2:	2b00      	cmp	r3, #0
 8012cb4:	d00c      	beq.n	8012cd0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8012cb6:	687b      	ldr	r3, [r7, #4]
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d003      	beq.n	8012cc4 <osMessageQueueNew+0xd0>
        name = attr->name;
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	617b      	str	r3, [r7, #20]
 8012cc2:	e001      	b.n	8012cc8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8012cc4:	2300      	movs	r3, #0
 8012cc6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8012cc8:	6979      	ldr	r1, [r7, #20]
 8012cca:	69f8      	ldr	r0, [r7, #28]
 8012ccc:	f001 f8e2 	bl	8013e94 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8012cd0:	69fb      	ldr	r3, [r7, #28]
}
 8012cd2:	4618      	mov	r0, r3
 8012cd4:	3720      	adds	r7, #32
 8012cd6:	46bd      	mov	sp, r7
 8012cd8:	bd80      	pop	{r7, pc}
	...

08012cdc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8012cdc:	b580      	push	{r7, lr}
 8012cde:	b088      	sub	sp, #32
 8012ce0:	af00      	add	r7, sp, #0
 8012ce2:	60f8      	str	r0, [r7, #12]
 8012ce4:	60b9      	str	r1, [r7, #8]
 8012ce6:	603b      	str	r3, [r7, #0]
 8012ce8:	4613      	mov	r3, r2
 8012cea:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012cec:	68fb      	ldr	r3, [r7, #12]
 8012cee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012cf0:	2300      	movs	r3, #0
 8012cf2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012cf4:	f3ef 8305 	mrs	r3, IPSR
 8012cf8:	617b      	str	r3, [r7, #20]
  return(result);
 8012cfa:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d028      	beq.n	8012d52 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012d00:	69bb      	ldr	r3, [r7, #24]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d005      	beq.n	8012d12 <osMessageQueuePut+0x36>
 8012d06:	68bb      	ldr	r3, [r7, #8]
 8012d08:	2b00      	cmp	r3, #0
 8012d0a:	d002      	beq.n	8012d12 <osMessageQueuePut+0x36>
 8012d0c:	683b      	ldr	r3, [r7, #0]
 8012d0e:	2b00      	cmp	r3, #0
 8012d10:	d003      	beq.n	8012d1a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8012d12:	f06f 0303 	mvn.w	r3, #3
 8012d16:	61fb      	str	r3, [r7, #28]
 8012d18:	e038      	b.n	8012d8c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8012d1e:	f107 0210 	add.w	r2, r7, #16
 8012d22:	2300      	movs	r3, #0
 8012d24:	68b9      	ldr	r1, [r7, #8]
 8012d26:	69b8      	ldr	r0, [r7, #24]
 8012d28:	f000 fda8 	bl	801387c <xQueueGenericSendFromISR>
 8012d2c:	4603      	mov	r3, r0
 8012d2e:	2b01      	cmp	r3, #1
 8012d30:	d003      	beq.n	8012d3a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8012d32:	f06f 0302 	mvn.w	r3, #2
 8012d36:	61fb      	str	r3, [r7, #28]
 8012d38:	e028      	b.n	8012d8c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	2b00      	cmp	r3, #0
 8012d3e:	d025      	beq.n	8012d8c <osMessageQueuePut+0xb0>
 8012d40:	4b15      	ldr	r3, [pc, #84]	; (8012d98 <osMessageQueuePut+0xbc>)
 8012d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d46:	601a      	str	r2, [r3, #0]
 8012d48:	f3bf 8f4f 	dsb	sy
 8012d4c:	f3bf 8f6f 	isb	sy
 8012d50:	e01c      	b.n	8012d8c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012d52:	69bb      	ldr	r3, [r7, #24]
 8012d54:	2b00      	cmp	r3, #0
 8012d56:	d002      	beq.n	8012d5e <osMessageQueuePut+0x82>
 8012d58:	68bb      	ldr	r3, [r7, #8]
 8012d5a:	2b00      	cmp	r3, #0
 8012d5c:	d103      	bne.n	8012d66 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8012d5e:	f06f 0303 	mvn.w	r3, #3
 8012d62:	61fb      	str	r3, [r7, #28]
 8012d64:	e012      	b.n	8012d8c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012d66:	2300      	movs	r3, #0
 8012d68:	683a      	ldr	r2, [r7, #0]
 8012d6a:	68b9      	ldr	r1, [r7, #8]
 8012d6c:	69b8      	ldr	r0, [r7, #24]
 8012d6e:	f000 fc87 	bl	8013680 <xQueueGenericSend>
 8012d72:	4603      	mov	r3, r0
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d009      	beq.n	8012d8c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8012d78:	683b      	ldr	r3, [r7, #0]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d003      	beq.n	8012d86 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8012d7e:	f06f 0301 	mvn.w	r3, #1
 8012d82:	61fb      	str	r3, [r7, #28]
 8012d84:	e002      	b.n	8012d8c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8012d86:	f06f 0302 	mvn.w	r3, #2
 8012d8a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012d8c:	69fb      	ldr	r3, [r7, #28]
}
 8012d8e:	4618      	mov	r0, r3
 8012d90:	3720      	adds	r7, #32
 8012d92:	46bd      	mov	sp, r7
 8012d94:	bd80      	pop	{r7, pc}
 8012d96:	bf00      	nop
 8012d98:	e000ed04 	.word	0xe000ed04

08012d9c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8012d9c:	b580      	push	{r7, lr}
 8012d9e:	b088      	sub	sp, #32
 8012da0:	af00      	add	r7, sp, #0
 8012da2:	60f8      	str	r0, [r7, #12]
 8012da4:	60b9      	str	r1, [r7, #8]
 8012da6:	607a      	str	r2, [r7, #4]
 8012da8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8012daa:	68fb      	ldr	r3, [r7, #12]
 8012dac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8012dae:	2300      	movs	r3, #0
 8012db0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8012db2:	f3ef 8305 	mrs	r3, IPSR
 8012db6:	617b      	str	r3, [r7, #20]
  return(result);
 8012db8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d028      	beq.n	8012e10 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8012dbe:	69bb      	ldr	r3, [r7, #24]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d005      	beq.n	8012dd0 <osMessageQueueGet+0x34>
 8012dc4:	68bb      	ldr	r3, [r7, #8]
 8012dc6:	2b00      	cmp	r3, #0
 8012dc8:	d002      	beq.n	8012dd0 <osMessageQueueGet+0x34>
 8012dca:	683b      	ldr	r3, [r7, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d003      	beq.n	8012dd8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8012dd0:	f06f 0303 	mvn.w	r3, #3
 8012dd4:	61fb      	str	r3, [r7, #28]
 8012dd6:	e037      	b.n	8012e48 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8012dd8:	2300      	movs	r3, #0
 8012dda:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8012ddc:	f107 0310 	add.w	r3, r7, #16
 8012de0:	461a      	mov	r2, r3
 8012de2:	68b9      	ldr	r1, [r7, #8]
 8012de4:	69b8      	ldr	r0, [r7, #24]
 8012de6:	f000 fec5 	bl	8013b74 <xQueueReceiveFromISR>
 8012dea:	4603      	mov	r3, r0
 8012dec:	2b01      	cmp	r3, #1
 8012dee:	d003      	beq.n	8012df8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8012df0:	f06f 0302 	mvn.w	r3, #2
 8012df4:	61fb      	str	r3, [r7, #28]
 8012df6:	e027      	b.n	8012e48 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	2b00      	cmp	r3, #0
 8012dfc:	d024      	beq.n	8012e48 <osMessageQueueGet+0xac>
 8012dfe:	4b15      	ldr	r3, [pc, #84]	; (8012e54 <osMessageQueueGet+0xb8>)
 8012e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012e04:	601a      	str	r2, [r3, #0]
 8012e06:	f3bf 8f4f 	dsb	sy
 8012e0a:	f3bf 8f6f 	isb	sy
 8012e0e:	e01b      	b.n	8012e48 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8012e10:	69bb      	ldr	r3, [r7, #24]
 8012e12:	2b00      	cmp	r3, #0
 8012e14:	d002      	beq.n	8012e1c <osMessageQueueGet+0x80>
 8012e16:	68bb      	ldr	r3, [r7, #8]
 8012e18:	2b00      	cmp	r3, #0
 8012e1a:	d103      	bne.n	8012e24 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8012e1c:	f06f 0303 	mvn.w	r3, #3
 8012e20:	61fb      	str	r3, [r7, #28]
 8012e22:	e011      	b.n	8012e48 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8012e24:	683a      	ldr	r2, [r7, #0]
 8012e26:	68b9      	ldr	r1, [r7, #8]
 8012e28:	69b8      	ldr	r0, [r7, #24]
 8012e2a:	f000 fdc3 	bl	80139b4 <xQueueReceive>
 8012e2e:	4603      	mov	r3, r0
 8012e30:	2b01      	cmp	r3, #1
 8012e32:	d009      	beq.n	8012e48 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8012e34:	683b      	ldr	r3, [r7, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d003      	beq.n	8012e42 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8012e3a:	f06f 0301 	mvn.w	r3, #1
 8012e3e:	61fb      	str	r3, [r7, #28]
 8012e40:	e002      	b.n	8012e48 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8012e42:	f06f 0302 	mvn.w	r3, #2
 8012e46:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8012e48:	69fb      	ldr	r3, [r7, #28]
}
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	3720      	adds	r7, #32
 8012e4e:	46bd      	mov	sp, r7
 8012e50:	bd80      	pop	{r7, pc}
 8012e52:	bf00      	nop
 8012e54:	e000ed04 	.word	0xe000ed04

08012e58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8012e58:	b480      	push	{r7}
 8012e5a:	b085      	sub	sp, #20
 8012e5c:	af00      	add	r7, sp, #0
 8012e5e:	60f8      	str	r0, [r7, #12]
 8012e60:	60b9      	str	r1, [r7, #8]
 8012e62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	4a07      	ldr	r2, [pc, #28]	; (8012e84 <vApplicationGetIdleTaskMemory+0x2c>)
 8012e68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8012e6a:	68bb      	ldr	r3, [r7, #8]
 8012e6c:	4a06      	ldr	r2, [pc, #24]	; (8012e88 <vApplicationGetIdleTaskMemory+0x30>)
 8012e6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2280      	movs	r2, #128	; 0x80
 8012e74:	601a      	str	r2, [r3, #0]
}
 8012e76:	bf00      	nop
 8012e78:	3714      	adds	r7, #20
 8012e7a:	46bd      	mov	sp, r7
 8012e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e80:	4770      	bx	lr
 8012e82:	bf00      	nop
 8012e84:	240010b0 	.word	0x240010b0
 8012e88:	2400110c 	.word	0x2400110c

08012e8c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8012e8c:	b480      	push	{r7}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	4a07      	ldr	r2, [pc, #28]	; (8012eb8 <vApplicationGetTimerTaskMemory+0x2c>)
 8012e9c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8012e9e:	68bb      	ldr	r3, [r7, #8]
 8012ea0:	4a06      	ldr	r2, [pc, #24]	; (8012ebc <vApplicationGetTimerTaskMemory+0x30>)
 8012ea2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012eaa:	601a      	str	r2, [r3, #0]
}
 8012eac:	bf00      	nop
 8012eae:	3714      	adds	r7, #20
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eb6:	4770      	bx	lr
 8012eb8:	2400130c 	.word	0x2400130c
 8012ebc:	24001368 	.word	0x24001368

08012ec0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8012ec0:	b580      	push	{r7, lr}
 8012ec2:	b086      	sub	sp, #24
 8012ec4:	af00      	add	r7, sp, #0
 8012ec6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	2b00      	cmp	r3, #0
 8012ecc:	d10a      	bne.n	8012ee4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8012ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed2:	f383 8811 	msr	BASEPRI, r3
 8012ed6:	f3bf 8f6f 	isb	sy
 8012eda:	f3bf 8f4f 	dsb	sy
 8012ede:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8012ee0:	bf00      	nop
 8012ee2:	e7fe      	b.n	8012ee2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8012ee4:	2320      	movs	r3, #32
 8012ee6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8012ee8:	68bb      	ldr	r3, [r7, #8]
 8012eea:	2b20      	cmp	r3, #32
 8012eec:	d00a      	beq.n	8012f04 <xEventGroupCreateStatic+0x44>
	__asm volatile
 8012eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef2:	f383 8811 	msr	BASEPRI, r3
 8012ef6:	f3bf 8f6f 	isb	sy
 8012efa:	f3bf 8f4f 	dsb	sy
 8012efe:	60fb      	str	r3, [r7, #12]
}
 8012f00:	bf00      	nop
 8012f02:	e7fe      	b.n	8012f02 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8012f08:	697b      	ldr	r3, [r7, #20]
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d00a      	beq.n	8012f24 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 8012f0e:	697b      	ldr	r3, [r7, #20]
 8012f10:	2200      	movs	r2, #0
 8012f12:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012f14:	697b      	ldr	r3, [r7, #20]
 8012f16:	3304      	adds	r3, #4
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f000 f9bf 	bl	801329c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8012f1e:	697b      	ldr	r3, [r7, #20]
 8012f20:	2201      	movs	r2, #1
 8012f22:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8012f24:	697b      	ldr	r3, [r7, #20]
	}
 8012f26:	4618      	mov	r0, r3
 8012f28:	3718      	adds	r7, #24
 8012f2a:	46bd      	mov	sp, r7
 8012f2c:	bd80      	pop	{r7, pc}

08012f2e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8012f2e:	b580      	push	{r7, lr}
 8012f30:	b082      	sub	sp, #8
 8012f32:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8012f34:	2020      	movs	r0, #32
 8012f36:	f002 fe97 	bl	8015c68 <pvPortMalloc>
 8012f3a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d00a      	beq.n	8012f58 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8012f42:	687b      	ldr	r3, [r7, #4]
 8012f44:	2200      	movs	r2, #0
 8012f46:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8012f48:	687b      	ldr	r3, [r7, #4]
 8012f4a:	3304      	adds	r3, #4
 8012f4c:	4618      	mov	r0, r3
 8012f4e:	f000 f9a5 	bl	801329c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2200      	movs	r2, #0
 8012f56:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8012f58:	687b      	ldr	r3, [r7, #4]
	}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3708      	adds	r7, #8
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
	...

08012f64 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b090      	sub	sp, #64	; 0x40
 8012f68:	af00      	add	r7, sp, #0
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
 8012f70:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8012f76:	2300      	movs	r3, #0
 8012f78:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8012f7a:	2300      	movs	r3, #0
 8012f7c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	2b00      	cmp	r3, #0
 8012f82:	d10a      	bne.n	8012f9a <xEventGroupWaitBits+0x36>
	__asm volatile
 8012f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f88:	f383 8811 	msr	BASEPRI, r3
 8012f8c:	f3bf 8f6f 	isb	sy
 8012f90:	f3bf 8f4f 	dsb	sy
 8012f94:	623b      	str	r3, [r7, #32]
}
 8012f96:	bf00      	nop
 8012f98:	e7fe      	b.n	8012f98 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8012f9a:	68bb      	ldr	r3, [r7, #8]
 8012f9c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8012fa0:	2b00      	cmp	r3, #0
 8012fa2:	d00a      	beq.n	8012fba <xEventGroupWaitBits+0x56>
	__asm volatile
 8012fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fa8:	f383 8811 	msr	BASEPRI, r3
 8012fac:	f3bf 8f6f 	isb	sy
 8012fb0:	f3bf 8f4f 	dsb	sy
 8012fb4:	61fb      	str	r3, [r7, #28]
}
 8012fb6:	bf00      	nop
 8012fb8:	e7fe      	b.n	8012fb8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8012fba:	68bb      	ldr	r3, [r7, #8]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	d10a      	bne.n	8012fd6 <xEventGroupWaitBits+0x72>
	__asm volatile
 8012fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fc4:	f383 8811 	msr	BASEPRI, r3
 8012fc8:	f3bf 8f6f 	isb	sy
 8012fcc:	f3bf 8f4f 	dsb	sy
 8012fd0:	61bb      	str	r3, [r7, #24]
}
 8012fd2:	bf00      	nop
 8012fd4:	e7fe      	b.n	8012fd4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012fd6:	f001 ff91 	bl	8014efc <xTaskGetSchedulerState>
 8012fda:	4603      	mov	r3, r0
 8012fdc:	2b00      	cmp	r3, #0
 8012fde:	d102      	bne.n	8012fe6 <xEventGroupWaitBits+0x82>
 8012fe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fe2:	2b00      	cmp	r3, #0
 8012fe4:	d101      	bne.n	8012fea <xEventGroupWaitBits+0x86>
 8012fe6:	2301      	movs	r3, #1
 8012fe8:	e000      	b.n	8012fec <xEventGroupWaitBits+0x88>
 8012fea:	2300      	movs	r3, #0
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10a      	bne.n	8013006 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8012ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ff4:	f383 8811 	msr	BASEPRI, r3
 8012ff8:	f3bf 8f6f 	isb	sy
 8012ffc:	f3bf 8f4f 	dsb	sy
 8013000:	617b      	str	r3, [r7, #20]
}
 8013002:	bf00      	nop
 8013004:	e7fe      	b.n	8013004 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8013006:	f001 faf9 	bl	80145fc <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 801300a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801300c:	681b      	ldr	r3, [r3, #0]
 801300e:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8013010:	683a      	ldr	r2, [r7, #0]
 8013012:	68b9      	ldr	r1, [r7, #8]
 8013014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8013016:	f000 f90b 	bl	8013230 <prvTestWaitCondition>
 801301a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 801301c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801301e:	2b00      	cmp	r3, #0
 8013020:	d00e      	beq.n	8013040 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8013022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013024:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8013026:	2300      	movs	r3, #0
 8013028:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	2b00      	cmp	r3, #0
 801302e:	d028      	beq.n	8013082 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8013030:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	43db      	mvns	r3, r3
 8013038:	401a      	ands	r2, r3
 801303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801303c:	601a      	str	r2, [r3, #0]
 801303e:	e020      	b.n	8013082 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8013040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013042:	2b00      	cmp	r3, #0
 8013044:	d104      	bne.n	8013050 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8013046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013048:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 801304a:	2301      	movs	r3, #1
 801304c:	633b      	str	r3, [r7, #48]	; 0x30
 801304e:	e018      	b.n	8013082 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d003      	beq.n	801305e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8013056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013058:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801305c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 801305e:	683b      	ldr	r3, [r7, #0]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d003      	beq.n	801306c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8013064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013066:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801306a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 801306c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801306e:	1d18      	adds	r0, r3, #4
 8013070:	68ba      	ldr	r2, [r7, #8]
 8013072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013074:	4313      	orrs	r3, r2
 8013076:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013078:	4619      	mov	r1, r3
 801307a:	f001 fcb7 	bl	80149ec <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 801307e:	2300      	movs	r3, #0
 8013080:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8013082:	f001 fac9 	bl	8014618 <xTaskResumeAll>
 8013086:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8013088:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801308a:	2b00      	cmp	r3, #0
 801308c:	d031      	beq.n	80130f2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 801308e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013090:	2b00      	cmp	r3, #0
 8013092:	d107      	bne.n	80130a4 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8013094:	4b19      	ldr	r3, [pc, #100]	; (80130fc <xEventGroupWaitBits+0x198>)
 8013096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801309a:	601a      	str	r2, [r3, #0]
 801309c:	f3bf 8f4f 	dsb	sy
 80130a0:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80130a4:	f001 ffb6 	bl	8015014 <uxTaskResetEventItemValue>
 80130a8:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80130aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d11a      	bne.n	80130ea <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80130b4:	f002 fcb6 	bl	8015a24 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80130b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80130be:	683a      	ldr	r2, [r7, #0]
 80130c0:	68b9      	ldr	r1, [r7, #8]
 80130c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80130c4:	f000 f8b4 	bl	8013230 <prvTestWaitCondition>
 80130c8:	4603      	mov	r3, r0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d009      	beq.n	80130e2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d006      	beq.n	80130e2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80130d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130d6:	681a      	ldr	r2, [r3, #0]
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	43db      	mvns	r3, r3
 80130dc:	401a      	ands	r2, r3
 80130de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80130e0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80130e2:	2301      	movs	r3, #1
 80130e4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80130e6:	f002 fccd 	bl	8015a84 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80130ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80130ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80130f0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80130f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3740      	adds	r7, #64	; 0x40
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	e000ed04 	.word	0xe000ed04

08013100 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8013100:	b580      	push	{r7, lr}
 8013102:	b08e      	sub	sp, #56	; 0x38
 8013104:	af00      	add	r7, sp, #0
 8013106:	6078      	str	r0, [r7, #4]
 8013108:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 801310a:	2300      	movs	r3, #0
 801310c:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 801310e:	687b      	ldr	r3, [r7, #4]
 8013110:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8013112:	2300      	movs	r3, #0
 8013114:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d10a      	bne.n	8013132 <xEventGroupSetBits+0x32>
	__asm volatile
 801311c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013120:	f383 8811 	msr	BASEPRI, r3
 8013124:	f3bf 8f6f 	isb	sy
 8013128:	f3bf 8f4f 	dsb	sy
 801312c:	613b      	str	r3, [r7, #16]
}
 801312e:	bf00      	nop
 8013130:	e7fe      	b.n	8013130 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8013132:	683b      	ldr	r3, [r7, #0]
 8013134:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8013138:	2b00      	cmp	r3, #0
 801313a:	d00a      	beq.n	8013152 <xEventGroupSetBits+0x52>
	__asm volatile
 801313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013140:	f383 8811 	msr	BASEPRI, r3
 8013144:	f3bf 8f6f 	isb	sy
 8013148:	f3bf 8f4f 	dsb	sy
 801314c:	60fb      	str	r3, [r7, #12]
}
 801314e:	bf00      	nop
 8013150:	e7fe      	b.n	8013150 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8013152:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013154:	3304      	adds	r3, #4
 8013156:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	3308      	adds	r3, #8
 801315c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 801315e:	f001 fa4d 	bl	80145fc <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8013162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013164:	68db      	ldr	r3, [r3, #12]
 8013166:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8013168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801316a:	681a      	ldr	r2, [r3, #0]
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	431a      	orrs	r2, r3
 8013170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013172:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8013174:	e03c      	b.n	80131f0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8013176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013178:	685b      	ldr	r3, [r3, #4]
 801317a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 801317c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801317e:	681b      	ldr	r3, [r3, #0]
 8013180:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8013182:	2300      	movs	r3, #0
 8013184:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8013186:	69bb      	ldr	r3, [r7, #24]
 8013188:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 801318c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 801318e:	69bb      	ldr	r3, [r7, #24]
 8013190:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013194:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8013196:	697b      	ldr	r3, [r7, #20]
 8013198:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801319c:	2b00      	cmp	r3, #0
 801319e:	d108      	bne.n	80131b2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80131a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131a2:	681a      	ldr	r2, [r3, #0]
 80131a4:	69bb      	ldr	r3, [r7, #24]
 80131a6:	4013      	ands	r3, r2
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d00b      	beq.n	80131c4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80131ac:	2301      	movs	r3, #1
 80131ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80131b0:	e008      	b.n	80131c4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80131b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b4:	681a      	ldr	r2, [r3, #0]
 80131b6:	69bb      	ldr	r3, [r7, #24]
 80131b8:	4013      	ands	r3, r2
 80131ba:	69ba      	ldr	r2, [r7, #24]
 80131bc:	429a      	cmp	r2, r3
 80131be:	d101      	bne.n	80131c4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80131c0:	2301      	movs	r3, #1
 80131c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80131c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d010      	beq.n	80131ec <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d003      	beq.n	80131dc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80131d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80131d6:	69bb      	ldr	r3, [r7, #24]
 80131d8:	4313      	orrs	r3, r2
 80131da:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80131dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131de:	681b      	ldr	r3, [r3, #0]
 80131e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80131e4:	4619      	mov	r1, r3
 80131e6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80131e8:	f001 fccc 	bl	8014b84 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80131ec:	69fb      	ldr	r3, [r7, #28]
 80131ee:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80131f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80131f2:	6a3b      	ldr	r3, [r7, #32]
 80131f4:	429a      	cmp	r2, r3
 80131f6:	d1be      	bne.n	8013176 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80131f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131fa:	681a      	ldr	r2, [r3, #0]
 80131fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131fe:	43db      	mvns	r3, r3
 8013200:	401a      	ands	r2, r3
 8013202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013204:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8013206:	f001 fa07 	bl	8014618 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 801320a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801320c:	681b      	ldr	r3, [r3, #0]
}
 801320e:	4618      	mov	r0, r3
 8013210:	3738      	adds	r7, #56	; 0x38
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}

08013216 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8013216:	b580      	push	{r7, lr}
 8013218:	b082      	sub	sp, #8
 801321a:	af00      	add	r7, sp, #0
 801321c:	6078      	str	r0, [r7, #4]
 801321e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8013220:	6839      	ldr	r1, [r7, #0]
 8013222:	6878      	ldr	r0, [r7, #4]
 8013224:	f7ff ff6c 	bl	8013100 <xEventGroupSetBits>
}
 8013228:	bf00      	nop
 801322a:	3708      	adds	r7, #8
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}

08013230 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8013230:	b480      	push	{r7}
 8013232:	b087      	sub	sp, #28
 8013234:	af00      	add	r7, sp, #0
 8013236:	60f8      	str	r0, [r7, #12]
 8013238:	60b9      	str	r1, [r7, #8]
 801323a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 801323c:	2300      	movs	r3, #0
 801323e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d107      	bne.n	8013256 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8013246:	68fa      	ldr	r2, [r7, #12]
 8013248:	68bb      	ldr	r3, [r7, #8]
 801324a:	4013      	ands	r3, r2
 801324c:	2b00      	cmp	r3, #0
 801324e:	d00a      	beq.n	8013266 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013250:	2301      	movs	r3, #1
 8013252:	617b      	str	r3, [r7, #20]
 8013254:	e007      	b.n	8013266 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8013256:	68fa      	ldr	r2, [r7, #12]
 8013258:	68bb      	ldr	r3, [r7, #8]
 801325a:	4013      	ands	r3, r2
 801325c:	68ba      	ldr	r2, [r7, #8]
 801325e:	429a      	cmp	r2, r3
 8013260:	d101      	bne.n	8013266 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8013262:	2301      	movs	r3, #1
 8013264:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8013266:	697b      	ldr	r3, [r7, #20]
}
 8013268:	4618      	mov	r0, r3
 801326a:	371c      	adds	r7, #28
 801326c:	46bd      	mov	sp, r7
 801326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013272:	4770      	bx	lr

08013274 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8013274:	b580      	push	{r7, lr}
 8013276:	b086      	sub	sp, #24
 8013278:	af00      	add	r7, sp, #0
 801327a:	60f8      	str	r0, [r7, #12]
 801327c:	60b9      	str	r1, [r7, #8]
 801327e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	68ba      	ldr	r2, [r7, #8]
 8013284:	68f9      	ldr	r1, [r7, #12]
 8013286:	4804      	ldr	r0, [pc, #16]	; (8013298 <xEventGroupSetBitsFromISR+0x24>)
 8013288:	f002 fa7e 	bl	8015788 <xTimerPendFunctionCallFromISR>
 801328c:	6178      	str	r0, [r7, #20]

		return xReturn;
 801328e:	697b      	ldr	r3, [r7, #20]
	}
 8013290:	4618      	mov	r0, r3
 8013292:	3718      	adds	r7, #24
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}
 8013298:	08013217 	.word	0x08013217

0801329c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801329c:	b480      	push	{r7}
 801329e:	b083      	sub	sp, #12
 80132a0:	af00      	add	r7, sp, #0
 80132a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	f103 0208 	add.w	r2, r3, #8
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80132b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	f103 0208 	add.w	r2, r3, #8
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	f103 0208 	add.w	r2, r3, #8
 80132c6:	687b      	ldr	r3, [r7, #4]
 80132c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2200      	movs	r2, #0
 80132ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80132d0:	bf00      	nop
 80132d2:	370c      	adds	r7, #12
 80132d4:	46bd      	mov	sp, r7
 80132d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132da:	4770      	bx	lr

080132dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80132dc:	b480      	push	{r7}
 80132de:	b083      	sub	sp, #12
 80132e0:	af00      	add	r7, sp, #0
 80132e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2200      	movs	r2, #0
 80132e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80132ea:	bf00      	nop
 80132ec:	370c      	adds	r7, #12
 80132ee:	46bd      	mov	sp, r7
 80132f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132f4:	4770      	bx	lr

080132f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80132f6:	b480      	push	{r7}
 80132f8:	b085      	sub	sp, #20
 80132fa:	af00      	add	r7, sp, #0
 80132fc:	6078      	str	r0, [r7, #4]
 80132fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8013300:	687b      	ldr	r3, [r7, #4]
 8013302:	685b      	ldr	r3, [r3, #4]
 8013304:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8013306:	683b      	ldr	r3, [r7, #0]
 8013308:	68fa      	ldr	r2, [r7, #12]
 801330a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801330c:	68fb      	ldr	r3, [r7, #12]
 801330e:	689a      	ldr	r2, [r3, #8]
 8013310:	683b      	ldr	r3, [r7, #0]
 8013312:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8013314:	68fb      	ldr	r3, [r7, #12]
 8013316:	689b      	ldr	r3, [r3, #8]
 8013318:	683a      	ldr	r2, [r7, #0]
 801331a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	683a      	ldr	r2, [r7, #0]
 8013320:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8013322:	683b      	ldr	r3, [r7, #0]
 8013324:	687a      	ldr	r2, [r7, #4]
 8013326:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	1c5a      	adds	r2, r3, #1
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	601a      	str	r2, [r3, #0]
}
 8013332:	bf00      	nop
 8013334:	3714      	adds	r7, #20
 8013336:	46bd      	mov	sp, r7
 8013338:	f85d 7b04 	ldr.w	r7, [sp], #4
 801333c:	4770      	bx	lr

0801333e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801333e:	b480      	push	{r7}
 8013340:	b085      	sub	sp, #20
 8013342:	af00      	add	r7, sp, #0
 8013344:	6078      	str	r0, [r7, #4]
 8013346:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8013348:	683b      	ldr	r3, [r7, #0]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013354:	d103      	bne.n	801335e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	691b      	ldr	r3, [r3, #16]
 801335a:	60fb      	str	r3, [r7, #12]
 801335c:	e00c      	b.n	8013378 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	3308      	adds	r3, #8
 8013362:	60fb      	str	r3, [r7, #12]
 8013364:	e002      	b.n	801336c <vListInsert+0x2e>
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	685b      	ldr	r3, [r3, #4]
 801336a:	60fb      	str	r3, [r7, #12]
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	685b      	ldr	r3, [r3, #4]
 8013370:	681b      	ldr	r3, [r3, #0]
 8013372:	68ba      	ldr	r2, [r7, #8]
 8013374:	429a      	cmp	r2, r3
 8013376:	d2f6      	bcs.n	8013366 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	685a      	ldr	r2, [r3, #4]
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	685b      	ldr	r3, [r3, #4]
 8013384:	683a      	ldr	r2, [r7, #0]
 8013386:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8013388:	683b      	ldr	r3, [r7, #0]
 801338a:	68fa      	ldr	r2, [r7, #12]
 801338c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801338e:	68fb      	ldr	r3, [r7, #12]
 8013390:	683a      	ldr	r2, [r7, #0]
 8013392:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8013394:	683b      	ldr	r3, [r7, #0]
 8013396:	687a      	ldr	r2, [r7, #4]
 8013398:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	1c5a      	adds	r2, r3, #1
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	601a      	str	r2, [r3, #0]
}
 80133a4:	bf00      	nop
 80133a6:	3714      	adds	r7, #20
 80133a8:	46bd      	mov	sp, r7
 80133aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ae:	4770      	bx	lr

080133b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80133b0:	b480      	push	{r7}
 80133b2:	b085      	sub	sp, #20
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80133b8:	687b      	ldr	r3, [r7, #4]
 80133ba:	691b      	ldr	r3, [r3, #16]
 80133bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80133be:	687b      	ldr	r3, [r7, #4]
 80133c0:	685b      	ldr	r3, [r3, #4]
 80133c2:	687a      	ldr	r2, [r7, #4]
 80133c4:	6892      	ldr	r2, [r2, #8]
 80133c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	689b      	ldr	r3, [r3, #8]
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	6852      	ldr	r2, [r2, #4]
 80133d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	685b      	ldr	r3, [r3, #4]
 80133d6:	687a      	ldr	r2, [r7, #4]
 80133d8:	429a      	cmp	r2, r3
 80133da:	d103      	bne.n	80133e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	689a      	ldr	r2, [r3, #8]
 80133e0:	68fb      	ldr	r3, [r7, #12]
 80133e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	2200      	movs	r2, #0
 80133e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80133ea:	68fb      	ldr	r3, [r7, #12]
 80133ec:	681b      	ldr	r3, [r3, #0]
 80133ee:	1e5a      	subs	r2, r3, #1
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	681b      	ldr	r3, [r3, #0]
}
 80133f8:	4618      	mov	r0, r3
 80133fa:	3714      	adds	r7, #20
 80133fc:	46bd      	mov	sp, r7
 80133fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013402:	4770      	bx	lr

08013404 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b084      	sub	sp, #16
 8013408:	af00      	add	r7, sp, #0
 801340a:	6078      	str	r0, [r7, #4]
 801340c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 801340e:	687b      	ldr	r3, [r7, #4]
 8013410:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013412:	68fb      	ldr	r3, [r7, #12]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d10a      	bne.n	801342e <xQueueGenericReset+0x2a>
	__asm volatile
 8013418:	f04f 0350 	mov.w	r3, #80	; 0x50
 801341c:	f383 8811 	msr	BASEPRI, r3
 8013420:	f3bf 8f6f 	isb	sy
 8013424:	f3bf 8f4f 	dsb	sy
 8013428:	60bb      	str	r3, [r7, #8]
}
 801342a:	bf00      	nop
 801342c:	e7fe      	b.n	801342c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 801342e:	f002 faf9 	bl	8015a24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013432:	68fb      	ldr	r3, [r7, #12]
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	68fb      	ldr	r3, [r7, #12]
 8013438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801343a:	68f9      	ldr	r1, [r7, #12]
 801343c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 801343e:	fb01 f303 	mul.w	r3, r1, r3
 8013442:	441a      	add	r2, r3
 8013444:	68fb      	ldr	r3, [r7, #12]
 8013446:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8013448:	68fb      	ldr	r3, [r7, #12]
 801344a:	2200      	movs	r2, #0
 801344c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	681a      	ldr	r2, [r3, #0]
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	681a      	ldr	r2, [r3, #0]
 801345a:	68fb      	ldr	r3, [r7, #12]
 801345c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801345e:	3b01      	subs	r3, #1
 8013460:	68f9      	ldr	r1, [r7, #12]
 8013462:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8013464:	fb01 f303 	mul.w	r3, r1, r3
 8013468:	441a      	add	r2, r3
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	22ff      	movs	r2, #255	; 0xff
 8013472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8013476:	68fb      	ldr	r3, [r7, #12]
 8013478:	22ff      	movs	r2, #255	; 0xff
 801347a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d114      	bne.n	80134ae <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013484:	68fb      	ldr	r3, [r7, #12]
 8013486:	691b      	ldr	r3, [r3, #16]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d01a      	beq.n	80134c2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801348c:	68fb      	ldr	r3, [r7, #12]
 801348e:	3310      	adds	r3, #16
 8013490:	4618      	mov	r0, r3
 8013492:	f001 fb13 	bl	8014abc <xTaskRemoveFromEventList>
 8013496:	4603      	mov	r3, r0
 8013498:	2b00      	cmp	r3, #0
 801349a:	d012      	beq.n	80134c2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 801349c:	4b0c      	ldr	r3, [pc, #48]	; (80134d0 <xQueueGenericReset+0xcc>)
 801349e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80134a2:	601a      	str	r2, [r3, #0]
 80134a4:	f3bf 8f4f 	dsb	sy
 80134a8:	f3bf 8f6f 	isb	sy
 80134ac:	e009      	b.n	80134c2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	3310      	adds	r3, #16
 80134b2:	4618      	mov	r0, r3
 80134b4:	f7ff fef2 	bl	801329c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80134b8:	68fb      	ldr	r3, [r7, #12]
 80134ba:	3324      	adds	r3, #36	; 0x24
 80134bc:	4618      	mov	r0, r3
 80134be:	f7ff feed 	bl	801329c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80134c2:	f002 fadf 	bl	8015a84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80134c6:	2301      	movs	r3, #1
}
 80134c8:	4618      	mov	r0, r3
 80134ca:	3710      	adds	r7, #16
 80134cc:	46bd      	mov	sp, r7
 80134ce:	bd80      	pop	{r7, pc}
 80134d0:	e000ed04 	.word	0xe000ed04

080134d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b08e      	sub	sp, #56	; 0x38
 80134d8:	af02      	add	r7, sp, #8
 80134da:	60f8      	str	r0, [r7, #12]
 80134dc:	60b9      	str	r1, [r7, #8]
 80134de:	607a      	str	r2, [r7, #4]
 80134e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80134e2:	68fb      	ldr	r3, [r7, #12]
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d10a      	bne.n	80134fe <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80134e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ec:	f383 8811 	msr	BASEPRI, r3
 80134f0:	f3bf 8f6f 	isb	sy
 80134f4:	f3bf 8f4f 	dsb	sy
 80134f8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80134fa:	bf00      	nop
 80134fc:	e7fe      	b.n	80134fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80134fe:	683b      	ldr	r3, [r7, #0]
 8013500:	2b00      	cmp	r3, #0
 8013502:	d10a      	bne.n	801351a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8013504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013508:	f383 8811 	msr	BASEPRI, r3
 801350c:	f3bf 8f6f 	isb	sy
 8013510:	f3bf 8f4f 	dsb	sy
 8013514:	627b      	str	r3, [r7, #36]	; 0x24
}
 8013516:	bf00      	nop
 8013518:	e7fe      	b.n	8013518 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	2b00      	cmp	r3, #0
 801351e:	d002      	beq.n	8013526 <xQueueGenericCreateStatic+0x52>
 8013520:	68bb      	ldr	r3, [r7, #8]
 8013522:	2b00      	cmp	r3, #0
 8013524:	d001      	beq.n	801352a <xQueueGenericCreateStatic+0x56>
 8013526:	2301      	movs	r3, #1
 8013528:	e000      	b.n	801352c <xQueueGenericCreateStatic+0x58>
 801352a:	2300      	movs	r3, #0
 801352c:	2b00      	cmp	r3, #0
 801352e:	d10a      	bne.n	8013546 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8013530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013534:	f383 8811 	msr	BASEPRI, r3
 8013538:	f3bf 8f6f 	isb	sy
 801353c:	f3bf 8f4f 	dsb	sy
 8013540:	623b      	str	r3, [r7, #32]
}
 8013542:	bf00      	nop
 8013544:	e7fe      	b.n	8013544 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d102      	bne.n	8013552 <xQueueGenericCreateStatic+0x7e>
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d101      	bne.n	8013556 <xQueueGenericCreateStatic+0x82>
 8013552:	2301      	movs	r3, #1
 8013554:	e000      	b.n	8013558 <xQueueGenericCreateStatic+0x84>
 8013556:	2300      	movs	r3, #0
 8013558:	2b00      	cmp	r3, #0
 801355a:	d10a      	bne.n	8013572 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 801355c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013560:	f383 8811 	msr	BASEPRI, r3
 8013564:	f3bf 8f6f 	isb	sy
 8013568:	f3bf 8f4f 	dsb	sy
 801356c:	61fb      	str	r3, [r7, #28]
}
 801356e:	bf00      	nop
 8013570:	e7fe      	b.n	8013570 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8013572:	2350      	movs	r3, #80	; 0x50
 8013574:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8013576:	697b      	ldr	r3, [r7, #20]
 8013578:	2b50      	cmp	r3, #80	; 0x50
 801357a:	d00a      	beq.n	8013592 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 801357c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013580:	f383 8811 	msr	BASEPRI, r3
 8013584:	f3bf 8f6f 	isb	sy
 8013588:	f3bf 8f4f 	dsb	sy
 801358c:	61bb      	str	r3, [r7, #24]
}
 801358e:	bf00      	nop
 8013590:	e7fe      	b.n	8013590 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8013592:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013594:	683b      	ldr	r3, [r7, #0]
 8013596:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8013598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359a:	2b00      	cmp	r3, #0
 801359c:	d00d      	beq.n	80135ba <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801359e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135a0:	2201      	movs	r2, #1
 80135a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80135a6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80135aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ac:	9300      	str	r3, [sp, #0]
 80135ae:	4613      	mov	r3, r2
 80135b0:	687a      	ldr	r2, [r7, #4]
 80135b2:	68b9      	ldr	r1, [r7, #8]
 80135b4:	68f8      	ldr	r0, [r7, #12]
 80135b6:	f000 f83f 	bl	8013638 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80135ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80135bc:	4618      	mov	r0, r3
 80135be:	3730      	adds	r7, #48	; 0x30
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b08a      	sub	sp, #40	; 0x28
 80135c8:	af02      	add	r7, sp, #8
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	4613      	mov	r3, r2
 80135d0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	2b00      	cmp	r3, #0
 80135d6:	d10a      	bne.n	80135ee <xQueueGenericCreate+0x2a>
	__asm volatile
 80135d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135dc:	f383 8811 	msr	BASEPRI, r3
 80135e0:	f3bf 8f6f 	isb	sy
 80135e4:	f3bf 8f4f 	dsb	sy
 80135e8:	613b      	str	r3, [r7, #16]
}
 80135ea:	bf00      	nop
 80135ec:	e7fe      	b.n	80135ec <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	68ba      	ldr	r2, [r7, #8]
 80135f2:	fb02 f303 	mul.w	r3, r2, r3
 80135f6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80135f8:	69fb      	ldr	r3, [r7, #28]
 80135fa:	3350      	adds	r3, #80	; 0x50
 80135fc:	4618      	mov	r0, r3
 80135fe:	f002 fb33 	bl	8015c68 <pvPortMalloc>
 8013602:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8013604:	69bb      	ldr	r3, [r7, #24]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d011      	beq.n	801362e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 801360a:	69bb      	ldr	r3, [r7, #24]
 801360c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801360e:	697b      	ldr	r3, [r7, #20]
 8013610:	3350      	adds	r3, #80	; 0x50
 8013612:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8013614:	69bb      	ldr	r3, [r7, #24]
 8013616:	2200      	movs	r2, #0
 8013618:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 801361c:	79fa      	ldrb	r2, [r7, #7]
 801361e:	69bb      	ldr	r3, [r7, #24]
 8013620:	9300      	str	r3, [sp, #0]
 8013622:	4613      	mov	r3, r2
 8013624:	697a      	ldr	r2, [r7, #20]
 8013626:	68b9      	ldr	r1, [r7, #8]
 8013628:	68f8      	ldr	r0, [r7, #12]
 801362a:	f000 f805 	bl	8013638 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 801362e:	69bb      	ldr	r3, [r7, #24]
	}
 8013630:	4618      	mov	r0, r3
 8013632:	3720      	adds	r7, #32
 8013634:	46bd      	mov	sp, r7
 8013636:	bd80      	pop	{r7, pc}

08013638 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8013638:	b580      	push	{r7, lr}
 801363a:	b084      	sub	sp, #16
 801363c:	af00      	add	r7, sp, #0
 801363e:	60f8      	str	r0, [r7, #12]
 8013640:	60b9      	str	r1, [r7, #8]
 8013642:	607a      	str	r2, [r7, #4]
 8013644:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8013646:	68bb      	ldr	r3, [r7, #8]
 8013648:	2b00      	cmp	r3, #0
 801364a:	d103      	bne.n	8013654 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 801364c:	69bb      	ldr	r3, [r7, #24]
 801364e:	69ba      	ldr	r2, [r7, #24]
 8013650:	601a      	str	r2, [r3, #0]
 8013652:	e002      	b.n	801365a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8013654:	69bb      	ldr	r3, [r7, #24]
 8013656:	687a      	ldr	r2, [r7, #4]
 8013658:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 801365a:	69bb      	ldr	r3, [r7, #24]
 801365c:	68fa      	ldr	r2, [r7, #12]
 801365e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8013660:	69bb      	ldr	r3, [r7, #24]
 8013662:	68ba      	ldr	r2, [r7, #8]
 8013664:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8013666:	2101      	movs	r1, #1
 8013668:	69b8      	ldr	r0, [r7, #24]
 801366a:	f7ff fecb 	bl	8013404 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 801366e:	69bb      	ldr	r3, [r7, #24]
 8013670:	78fa      	ldrb	r2, [r7, #3]
 8013672:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8013676:	bf00      	nop
 8013678:	3710      	adds	r7, #16
 801367a:	46bd      	mov	sp, r7
 801367c:	bd80      	pop	{r7, pc}
	...

08013680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b08e      	sub	sp, #56	; 0x38
 8013684:	af00      	add	r7, sp, #0
 8013686:	60f8      	str	r0, [r7, #12]
 8013688:	60b9      	str	r1, [r7, #8]
 801368a:	607a      	str	r2, [r7, #4]
 801368c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801368e:	2300      	movs	r3, #0
 8013690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8013692:	68fb      	ldr	r3, [r7, #12]
 8013694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013698:	2b00      	cmp	r3, #0
 801369a:	d10a      	bne.n	80136b2 <xQueueGenericSend+0x32>
	__asm volatile
 801369c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136a0:	f383 8811 	msr	BASEPRI, r3
 80136a4:	f3bf 8f6f 	isb	sy
 80136a8:	f3bf 8f4f 	dsb	sy
 80136ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80136ae:	bf00      	nop
 80136b0:	e7fe      	b.n	80136b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80136b2:	68bb      	ldr	r3, [r7, #8]
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d103      	bne.n	80136c0 <xQueueGenericSend+0x40>
 80136b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d101      	bne.n	80136c4 <xQueueGenericSend+0x44>
 80136c0:	2301      	movs	r3, #1
 80136c2:	e000      	b.n	80136c6 <xQueueGenericSend+0x46>
 80136c4:	2300      	movs	r3, #0
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d10a      	bne.n	80136e0 <xQueueGenericSend+0x60>
	__asm volatile
 80136ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136ce:	f383 8811 	msr	BASEPRI, r3
 80136d2:	f3bf 8f6f 	isb	sy
 80136d6:	f3bf 8f4f 	dsb	sy
 80136da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80136dc:	bf00      	nop
 80136de:	e7fe      	b.n	80136de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80136e0:	683b      	ldr	r3, [r7, #0]
 80136e2:	2b02      	cmp	r3, #2
 80136e4:	d103      	bne.n	80136ee <xQueueGenericSend+0x6e>
 80136e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80136ea:	2b01      	cmp	r3, #1
 80136ec:	d101      	bne.n	80136f2 <xQueueGenericSend+0x72>
 80136ee:	2301      	movs	r3, #1
 80136f0:	e000      	b.n	80136f4 <xQueueGenericSend+0x74>
 80136f2:	2300      	movs	r3, #0
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d10a      	bne.n	801370e <xQueueGenericSend+0x8e>
	__asm volatile
 80136f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80136fc:	f383 8811 	msr	BASEPRI, r3
 8013700:	f3bf 8f6f 	isb	sy
 8013704:	f3bf 8f4f 	dsb	sy
 8013708:	623b      	str	r3, [r7, #32]
}
 801370a:	bf00      	nop
 801370c:	e7fe      	b.n	801370c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801370e:	f001 fbf5 	bl	8014efc <xTaskGetSchedulerState>
 8013712:	4603      	mov	r3, r0
 8013714:	2b00      	cmp	r3, #0
 8013716:	d102      	bne.n	801371e <xQueueGenericSend+0x9e>
 8013718:	687b      	ldr	r3, [r7, #4]
 801371a:	2b00      	cmp	r3, #0
 801371c:	d101      	bne.n	8013722 <xQueueGenericSend+0xa2>
 801371e:	2301      	movs	r3, #1
 8013720:	e000      	b.n	8013724 <xQueueGenericSend+0xa4>
 8013722:	2300      	movs	r3, #0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d10a      	bne.n	801373e <xQueueGenericSend+0xbe>
	__asm volatile
 8013728:	f04f 0350 	mov.w	r3, #80	; 0x50
 801372c:	f383 8811 	msr	BASEPRI, r3
 8013730:	f3bf 8f6f 	isb	sy
 8013734:	f3bf 8f4f 	dsb	sy
 8013738:	61fb      	str	r3, [r7, #28]
}
 801373a:	bf00      	nop
 801373c:	e7fe      	b.n	801373c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801373e:	f002 f971 	bl	8015a24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801374a:	429a      	cmp	r2, r3
 801374c:	d302      	bcc.n	8013754 <xQueueGenericSend+0xd4>
 801374e:	683b      	ldr	r3, [r7, #0]
 8013750:	2b02      	cmp	r3, #2
 8013752:	d129      	bne.n	80137a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013754:	683a      	ldr	r2, [r7, #0]
 8013756:	68b9      	ldr	r1, [r7, #8]
 8013758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801375a:	f000 fa8b 	bl	8013c74 <prvCopyDataToQueue>
 801375e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013764:	2b00      	cmp	r3, #0
 8013766:	d010      	beq.n	801378a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801376a:	3324      	adds	r3, #36	; 0x24
 801376c:	4618      	mov	r0, r3
 801376e:	f001 f9a5 	bl	8014abc <xTaskRemoveFromEventList>
 8013772:	4603      	mov	r3, r0
 8013774:	2b00      	cmp	r3, #0
 8013776:	d013      	beq.n	80137a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8013778:	4b3f      	ldr	r3, [pc, #252]	; (8013878 <xQueueGenericSend+0x1f8>)
 801377a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801377e:	601a      	str	r2, [r3, #0]
 8013780:	f3bf 8f4f 	dsb	sy
 8013784:	f3bf 8f6f 	isb	sy
 8013788:	e00a      	b.n	80137a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 801378a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801378c:	2b00      	cmp	r3, #0
 801378e:	d007      	beq.n	80137a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8013790:	4b39      	ldr	r3, [pc, #228]	; (8013878 <xQueueGenericSend+0x1f8>)
 8013792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013796:	601a      	str	r2, [r3, #0]
 8013798:	f3bf 8f4f 	dsb	sy
 801379c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80137a0:	f002 f970 	bl	8015a84 <vPortExitCritical>
				return pdPASS;
 80137a4:	2301      	movs	r3, #1
 80137a6:	e063      	b.n	8013870 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	2b00      	cmp	r3, #0
 80137ac:	d103      	bne.n	80137b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80137ae:	f002 f969 	bl	8015a84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80137b2:	2300      	movs	r3, #0
 80137b4:	e05c      	b.n	8013870 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80137b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80137b8:	2b00      	cmp	r3, #0
 80137ba:	d106      	bne.n	80137ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80137bc:	f107 0314 	add.w	r3, r7, #20
 80137c0:	4618      	mov	r0, r3
 80137c2:	f001 fa41 	bl	8014c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80137c6:	2301      	movs	r3, #1
 80137c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80137ca:	f002 f95b 	bl	8015a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80137ce:	f000 ff15 	bl	80145fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80137d2:	f002 f927 	bl	8015a24 <vPortEnterCritical>
 80137d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80137dc:	b25b      	sxtb	r3, r3
 80137de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137e2:	d103      	bne.n	80137ec <xQueueGenericSend+0x16c>
 80137e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137e6:	2200      	movs	r2, #0
 80137e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80137ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80137f2:	b25b      	sxtb	r3, r3
 80137f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137f8:	d103      	bne.n	8013802 <xQueueGenericSend+0x182>
 80137fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137fc:	2200      	movs	r2, #0
 80137fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013802:	f002 f93f 	bl	8015a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013806:	1d3a      	adds	r2, r7, #4
 8013808:	f107 0314 	add.w	r3, r7, #20
 801380c:	4611      	mov	r1, r2
 801380e:	4618      	mov	r0, r3
 8013810:	f001 fa30 	bl	8014c74 <xTaskCheckForTimeOut>
 8013814:	4603      	mov	r3, r0
 8013816:	2b00      	cmp	r3, #0
 8013818:	d124      	bne.n	8013864 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801381a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801381c:	f000 fb22 	bl	8013e64 <prvIsQueueFull>
 8013820:	4603      	mov	r3, r0
 8013822:	2b00      	cmp	r3, #0
 8013824:	d018      	beq.n	8013858 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	3310      	adds	r3, #16
 801382a:	687a      	ldr	r2, [r7, #4]
 801382c:	4611      	mov	r1, r2
 801382e:	4618      	mov	r0, r3
 8013830:	f001 f8b8 	bl	80149a4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8013834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013836:	f000 faad 	bl	8013d94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801383a:	f000 feed 	bl	8014618 <xTaskResumeAll>
 801383e:	4603      	mov	r3, r0
 8013840:	2b00      	cmp	r3, #0
 8013842:	f47f af7c 	bne.w	801373e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8013846:	4b0c      	ldr	r3, [pc, #48]	; (8013878 <xQueueGenericSend+0x1f8>)
 8013848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801384c:	601a      	str	r2, [r3, #0]
 801384e:	f3bf 8f4f 	dsb	sy
 8013852:	f3bf 8f6f 	isb	sy
 8013856:	e772      	b.n	801373e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8013858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801385a:	f000 fa9b 	bl	8013d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801385e:	f000 fedb 	bl	8014618 <xTaskResumeAll>
 8013862:	e76c      	b.n	801373e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8013864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013866:	f000 fa95 	bl	8013d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801386a:	f000 fed5 	bl	8014618 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801386e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8013870:	4618      	mov	r0, r3
 8013872:	3738      	adds	r7, #56	; 0x38
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}
 8013878:	e000ed04 	.word	0xe000ed04

0801387c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b090      	sub	sp, #64	; 0x40
 8013880:	af00      	add	r7, sp, #0
 8013882:	60f8      	str	r0, [r7, #12]
 8013884:	60b9      	str	r1, [r7, #8]
 8013886:	607a      	str	r2, [r7, #4]
 8013888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 801388a:	68fb      	ldr	r3, [r7, #12]
 801388c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 801388e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013890:	2b00      	cmp	r3, #0
 8013892:	d10a      	bne.n	80138aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8013894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013898:	f383 8811 	msr	BASEPRI, r3
 801389c:	f3bf 8f6f 	isb	sy
 80138a0:	f3bf 8f4f 	dsb	sy
 80138a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80138a6:	bf00      	nop
 80138a8:	e7fe      	b.n	80138a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80138aa:	68bb      	ldr	r3, [r7, #8]
 80138ac:	2b00      	cmp	r3, #0
 80138ae:	d103      	bne.n	80138b8 <xQueueGenericSendFromISR+0x3c>
 80138b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d101      	bne.n	80138bc <xQueueGenericSendFromISR+0x40>
 80138b8:	2301      	movs	r3, #1
 80138ba:	e000      	b.n	80138be <xQueueGenericSendFromISR+0x42>
 80138bc:	2300      	movs	r3, #0
 80138be:	2b00      	cmp	r3, #0
 80138c0:	d10a      	bne.n	80138d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80138c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138c6:	f383 8811 	msr	BASEPRI, r3
 80138ca:	f3bf 8f6f 	isb	sy
 80138ce:	f3bf 8f4f 	dsb	sy
 80138d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80138d4:	bf00      	nop
 80138d6:	e7fe      	b.n	80138d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80138d8:	683b      	ldr	r3, [r7, #0]
 80138da:	2b02      	cmp	r3, #2
 80138dc:	d103      	bne.n	80138e6 <xQueueGenericSendFromISR+0x6a>
 80138de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80138e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80138e2:	2b01      	cmp	r3, #1
 80138e4:	d101      	bne.n	80138ea <xQueueGenericSendFromISR+0x6e>
 80138e6:	2301      	movs	r3, #1
 80138e8:	e000      	b.n	80138ec <xQueueGenericSendFromISR+0x70>
 80138ea:	2300      	movs	r3, #0
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d10a      	bne.n	8013906 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80138f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138f4:	f383 8811 	msr	BASEPRI, r3
 80138f8:	f3bf 8f6f 	isb	sy
 80138fc:	f3bf 8f4f 	dsb	sy
 8013900:	623b      	str	r3, [r7, #32]
}
 8013902:	bf00      	nop
 8013904:	e7fe      	b.n	8013904 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013906:	f002 f96f 	bl	8015be8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 801390a:	f3ef 8211 	mrs	r2, BASEPRI
 801390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013912:	f383 8811 	msr	BASEPRI, r3
 8013916:	f3bf 8f6f 	isb	sy
 801391a:	f3bf 8f4f 	dsb	sy
 801391e:	61fa      	str	r2, [r7, #28]
 8013920:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8013922:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013924:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8013926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801392a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801392e:	429a      	cmp	r2, r3
 8013930:	d302      	bcc.n	8013938 <xQueueGenericSendFromISR+0xbc>
 8013932:	683b      	ldr	r3, [r7, #0]
 8013934:	2b02      	cmp	r3, #2
 8013936:	d12f      	bne.n	8013998 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8013938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801393a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801393e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013946:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8013948:	683a      	ldr	r2, [r7, #0]
 801394a:	68b9      	ldr	r1, [r7, #8]
 801394c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801394e:	f000 f991 	bl	8013c74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8013952:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8013956:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801395a:	d112      	bne.n	8013982 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801395c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013960:	2b00      	cmp	r3, #0
 8013962:	d016      	beq.n	8013992 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013966:	3324      	adds	r3, #36	; 0x24
 8013968:	4618      	mov	r0, r3
 801396a:	f001 f8a7 	bl	8014abc <xTaskRemoveFromEventList>
 801396e:	4603      	mov	r3, r0
 8013970:	2b00      	cmp	r3, #0
 8013972:	d00e      	beq.n	8013992 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	2b00      	cmp	r3, #0
 8013978:	d00b      	beq.n	8013992 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	2201      	movs	r2, #1
 801397e:	601a      	str	r2, [r3, #0]
 8013980:	e007      	b.n	8013992 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8013982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8013986:	3301      	adds	r3, #1
 8013988:	b2db      	uxtb	r3, r3
 801398a:	b25a      	sxtb	r2, r3
 801398c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801398e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8013992:	2301      	movs	r3, #1
 8013994:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8013996:	e001      	b.n	801399c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8013998:	2300      	movs	r3, #0
 801399a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801399c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801399e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80139a0:	697b      	ldr	r3, [r7, #20]
 80139a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80139a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80139a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80139aa:	4618      	mov	r0, r3
 80139ac:	3740      	adds	r7, #64	; 0x40
 80139ae:	46bd      	mov	sp, r7
 80139b0:	bd80      	pop	{r7, pc}
	...

080139b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80139b4:	b580      	push	{r7, lr}
 80139b6:	b08c      	sub	sp, #48	; 0x30
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	60f8      	str	r0, [r7, #12]
 80139bc:	60b9      	str	r1, [r7, #8]
 80139be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80139c0:	2300      	movs	r3, #0
 80139c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80139c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d10a      	bne.n	80139e4 <xQueueReceive+0x30>
	__asm volatile
 80139ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d2:	f383 8811 	msr	BASEPRI, r3
 80139d6:	f3bf 8f6f 	isb	sy
 80139da:	f3bf 8f4f 	dsb	sy
 80139de:	623b      	str	r3, [r7, #32]
}
 80139e0:	bf00      	nop
 80139e2:	e7fe      	b.n	80139e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80139e4:	68bb      	ldr	r3, [r7, #8]
 80139e6:	2b00      	cmp	r3, #0
 80139e8:	d103      	bne.n	80139f2 <xQueueReceive+0x3e>
 80139ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d101      	bne.n	80139f6 <xQueueReceive+0x42>
 80139f2:	2301      	movs	r3, #1
 80139f4:	e000      	b.n	80139f8 <xQueueReceive+0x44>
 80139f6:	2300      	movs	r3, #0
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d10a      	bne.n	8013a12 <xQueueReceive+0x5e>
	__asm volatile
 80139fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a00:	f383 8811 	msr	BASEPRI, r3
 8013a04:	f3bf 8f6f 	isb	sy
 8013a08:	f3bf 8f4f 	dsb	sy
 8013a0c:	61fb      	str	r3, [r7, #28]
}
 8013a0e:	bf00      	nop
 8013a10:	e7fe      	b.n	8013a10 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8013a12:	f001 fa73 	bl	8014efc <xTaskGetSchedulerState>
 8013a16:	4603      	mov	r3, r0
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d102      	bne.n	8013a22 <xQueueReceive+0x6e>
 8013a1c:	687b      	ldr	r3, [r7, #4]
 8013a1e:	2b00      	cmp	r3, #0
 8013a20:	d101      	bne.n	8013a26 <xQueueReceive+0x72>
 8013a22:	2301      	movs	r3, #1
 8013a24:	e000      	b.n	8013a28 <xQueueReceive+0x74>
 8013a26:	2300      	movs	r3, #0
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d10a      	bne.n	8013a42 <xQueueReceive+0x8e>
	__asm volatile
 8013a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a30:	f383 8811 	msr	BASEPRI, r3
 8013a34:	f3bf 8f6f 	isb	sy
 8013a38:	f3bf 8f4f 	dsb	sy
 8013a3c:	61bb      	str	r3, [r7, #24]
}
 8013a3e:	bf00      	nop
 8013a40:	e7fe      	b.n	8013a40 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8013a42:	f001 ffef 	bl	8015a24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013a4a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d01f      	beq.n	8013a92 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013a52:	68b9      	ldr	r1, [r7, #8]
 8013a54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013a56:	f000 f977 	bl	8013d48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5c:	1e5a      	subs	r2, r3, #1
 8013a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a60:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a64:	691b      	ldr	r3, [r3, #16]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d00f      	beq.n	8013a8a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013a6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a6c:	3310      	adds	r3, #16
 8013a6e:	4618      	mov	r0, r3
 8013a70:	f001 f824 	bl	8014abc <xTaskRemoveFromEventList>
 8013a74:	4603      	mov	r3, r0
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d007      	beq.n	8013a8a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8013a7a:	4b3d      	ldr	r3, [pc, #244]	; (8013b70 <xQueueReceive+0x1bc>)
 8013a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a80:	601a      	str	r2, [r3, #0]
 8013a82:	f3bf 8f4f 	dsb	sy
 8013a86:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8013a8a:	f001 fffb 	bl	8015a84 <vPortExitCritical>
				return pdPASS;
 8013a8e:	2301      	movs	r3, #1
 8013a90:	e069      	b.n	8013b66 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8013a92:	687b      	ldr	r3, [r7, #4]
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d103      	bne.n	8013aa0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8013a98:	f001 fff4 	bl	8015a84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8013a9c:	2300      	movs	r3, #0
 8013a9e:	e062      	b.n	8013b66 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8013aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d106      	bne.n	8013ab4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8013aa6:	f107 0310 	add.w	r3, r7, #16
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f001 f8cc 	bl	8014c48 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8013ab0:	2301      	movs	r3, #1
 8013ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8013ab4:	f001 ffe6 	bl	8015a84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8013ab8:	f000 fda0 	bl	80145fc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8013abc:	f001 ffb2 	bl	8015a24 <vPortEnterCritical>
 8013ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013ac6:	b25b      	sxtb	r3, r3
 8013ac8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013acc:	d103      	bne.n	8013ad6 <xQueueReceive+0x122>
 8013ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ad8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013adc:	b25b      	sxtb	r3, r3
 8013ade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013ae2:	d103      	bne.n	8013aec <xQueueReceive+0x138>
 8013ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013aec:	f001 ffca 	bl	8015a84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8013af0:	1d3a      	adds	r2, r7, #4
 8013af2:	f107 0310 	add.w	r3, r7, #16
 8013af6:	4611      	mov	r1, r2
 8013af8:	4618      	mov	r0, r3
 8013afa:	f001 f8bb 	bl	8014c74 <xTaskCheckForTimeOut>
 8013afe:	4603      	mov	r3, r0
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d123      	bne.n	8013b4c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b06:	f000 f997 	bl	8013e38 <prvIsQueueEmpty>
 8013b0a:	4603      	mov	r3, r0
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d017      	beq.n	8013b40 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8013b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013b12:	3324      	adds	r3, #36	; 0x24
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	4611      	mov	r1, r2
 8013b18:	4618      	mov	r0, r3
 8013b1a:	f000 ff43 	bl	80149a4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8013b1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b20:	f000 f938 	bl	8013d94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8013b24:	f000 fd78 	bl	8014618 <xTaskResumeAll>
 8013b28:	4603      	mov	r3, r0
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d189      	bne.n	8013a42 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8013b2e:	4b10      	ldr	r3, [pc, #64]	; (8013b70 <xQueueReceive+0x1bc>)
 8013b30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013b34:	601a      	str	r2, [r3, #0]
 8013b36:	f3bf 8f4f 	dsb	sy
 8013b3a:	f3bf 8f6f 	isb	sy
 8013b3e:	e780      	b.n	8013a42 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8013b40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b42:	f000 f927 	bl	8013d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8013b46:	f000 fd67 	bl	8014618 <xTaskResumeAll>
 8013b4a:	e77a      	b.n	8013a42 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8013b4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b4e:	f000 f921 	bl	8013d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8013b52:	f000 fd61 	bl	8014618 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8013b56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013b58:	f000 f96e 	bl	8013e38 <prvIsQueueEmpty>
 8013b5c:	4603      	mov	r3, r0
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	f43f af6f 	beq.w	8013a42 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8013b64:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8013b66:	4618      	mov	r0, r3
 8013b68:	3730      	adds	r7, #48	; 0x30
 8013b6a:	46bd      	mov	sp, r7
 8013b6c:	bd80      	pop	{r7, pc}
 8013b6e:	bf00      	nop
 8013b70:	e000ed04 	.word	0xe000ed04

08013b74 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8013b74:	b580      	push	{r7, lr}
 8013b76:	b08e      	sub	sp, #56	; 0x38
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	60f8      	str	r0, [r7, #12]
 8013b7c:	60b9      	str	r1, [r7, #8]
 8013b7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	d10a      	bne.n	8013ba0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8013b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b8e:	f383 8811 	msr	BASEPRI, r3
 8013b92:	f3bf 8f6f 	isb	sy
 8013b96:	f3bf 8f4f 	dsb	sy
 8013b9a:	623b      	str	r3, [r7, #32]
}
 8013b9c:	bf00      	nop
 8013b9e:	e7fe      	b.n	8013b9e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013ba0:	68bb      	ldr	r3, [r7, #8]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d103      	bne.n	8013bae <xQueueReceiveFromISR+0x3a>
 8013ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d101      	bne.n	8013bb2 <xQueueReceiveFromISR+0x3e>
 8013bae:	2301      	movs	r3, #1
 8013bb0:	e000      	b.n	8013bb4 <xQueueReceiveFromISR+0x40>
 8013bb2:	2300      	movs	r3, #0
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d10a      	bne.n	8013bce <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8013bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bbc:	f383 8811 	msr	BASEPRI, r3
 8013bc0:	f3bf 8f6f 	isb	sy
 8013bc4:	f3bf 8f4f 	dsb	sy
 8013bc8:	61fb      	str	r3, [r7, #28]
}
 8013bca:	bf00      	nop
 8013bcc:	e7fe      	b.n	8013bcc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013bce:	f002 f80b 	bl	8015be8 <vPortValidateInterruptPriority>
	__asm volatile
 8013bd2:	f3ef 8211 	mrs	r2, BASEPRI
 8013bd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bda:	f383 8811 	msr	BASEPRI, r3
 8013bde:	f3bf 8f6f 	isb	sy
 8013be2:	f3bf 8f4f 	dsb	sy
 8013be6:	61ba      	str	r2, [r7, #24]
 8013be8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8013bea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8013bec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013bf2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013bf6:	2b00      	cmp	r3, #0
 8013bf8:	d02f      	beq.n	8013c5a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8013bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bfc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013c04:	68b9      	ldr	r1, [r7, #8]
 8013c06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013c08:	f000 f89e 	bl	8013d48 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8013c0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013c0e:	1e5a      	subs	r2, r3, #1
 8013c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c12:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8013c14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8013c18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013c1c:	d112      	bne.n	8013c44 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c20:	691b      	ldr	r3, [r3, #16]
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d016      	beq.n	8013c54 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c28:	3310      	adds	r3, #16
 8013c2a:	4618      	mov	r0, r3
 8013c2c:	f000 ff46 	bl	8014abc <xTaskRemoveFromEventList>
 8013c30:	4603      	mov	r3, r0
 8013c32:	2b00      	cmp	r3, #0
 8013c34:	d00e      	beq.n	8013c54 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8013c36:	687b      	ldr	r3, [r7, #4]
 8013c38:	2b00      	cmp	r3, #0
 8013c3a:	d00b      	beq.n	8013c54 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8013c3c:	687b      	ldr	r3, [r7, #4]
 8013c3e:	2201      	movs	r2, #1
 8013c40:	601a      	str	r2, [r3, #0]
 8013c42:	e007      	b.n	8013c54 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8013c44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013c48:	3301      	adds	r3, #1
 8013c4a:	b2db      	uxtb	r3, r3
 8013c4c:	b25a      	sxtb	r2, r3
 8013c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8013c54:	2301      	movs	r3, #1
 8013c56:	637b      	str	r3, [r7, #52]	; 0x34
 8013c58:	e001      	b.n	8013c5e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8013c5a:	2300      	movs	r3, #0
 8013c5c:	637b      	str	r3, [r7, #52]	; 0x34
 8013c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013c60:	613b      	str	r3, [r7, #16]
	__asm volatile
 8013c62:	693b      	ldr	r3, [r7, #16]
 8013c64:	f383 8811 	msr	BASEPRI, r3
}
 8013c68:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	3738      	adds	r7, #56	; 0x38
 8013c70:	46bd      	mov	sp, r7
 8013c72:	bd80      	pop	{r7, pc}

08013c74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8013c74:	b580      	push	{r7, lr}
 8013c76:	b086      	sub	sp, #24
 8013c78:	af00      	add	r7, sp, #0
 8013c7a:	60f8      	str	r0, [r7, #12]
 8013c7c:	60b9      	str	r1, [r7, #8]
 8013c7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8013c80:	2300      	movs	r3, #0
 8013c82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013c88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013c8e:	2b00      	cmp	r3, #0
 8013c90:	d10d      	bne.n	8013cae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	681b      	ldr	r3, [r3, #0]
 8013c96:	2b00      	cmp	r3, #0
 8013c98:	d14d      	bne.n	8013d36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	689b      	ldr	r3, [r3, #8]
 8013c9e:	4618      	mov	r0, r3
 8013ca0:	f001 f94a 	bl	8014f38 <xTaskPriorityDisinherit>
 8013ca4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	609a      	str	r2, [r3, #8]
 8013cac:	e043      	b.n	8013d36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	d119      	bne.n	8013ce8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	6858      	ldr	r0, [r3, #4]
 8013cb8:	68fb      	ldr	r3, [r7, #12]
 8013cba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cbc:	461a      	mov	r2, r3
 8013cbe:	68b9      	ldr	r1, [r7, #8]
 8013cc0:	f002 f9f6 	bl	80160b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	685a      	ldr	r2, [r3, #4]
 8013cc8:	68fb      	ldr	r3, [r7, #12]
 8013cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ccc:	441a      	add	r2, r3
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	685a      	ldr	r2, [r3, #4]
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	689b      	ldr	r3, [r3, #8]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d32b      	bcc.n	8013d36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013cde:	68fb      	ldr	r3, [r7, #12]
 8013ce0:	681a      	ldr	r2, [r3, #0]
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	605a      	str	r2, [r3, #4]
 8013ce6:	e026      	b.n	8013d36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013ce8:	68fb      	ldr	r3, [r7, #12]
 8013cea:	68d8      	ldr	r0, [r3, #12]
 8013cec:	68fb      	ldr	r3, [r7, #12]
 8013cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013cf0:	461a      	mov	r2, r3
 8013cf2:	68b9      	ldr	r1, [r7, #8]
 8013cf4:	f002 f9dc 	bl	80160b0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	68da      	ldr	r2, [r3, #12]
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d00:	425b      	negs	r3, r3
 8013d02:	441a      	add	r2, r3
 8013d04:	68fb      	ldr	r3, [r7, #12]
 8013d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	68da      	ldr	r2, [r3, #12]
 8013d0c:	68fb      	ldr	r3, [r7, #12]
 8013d0e:	681b      	ldr	r3, [r3, #0]
 8013d10:	429a      	cmp	r2, r3
 8013d12:	d207      	bcs.n	8013d24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8013d14:	68fb      	ldr	r3, [r7, #12]
 8013d16:	689a      	ldr	r2, [r3, #8]
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d1c:	425b      	negs	r3, r3
 8013d1e:	441a      	add	r2, r3
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8013d24:	687b      	ldr	r3, [r7, #4]
 8013d26:	2b02      	cmp	r3, #2
 8013d28:	d105      	bne.n	8013d36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013d2a:	693b      	ldr	r3, [r7, #16]
 8013d2c:	2b00      	cmp	r3, #0
 8013d2e:	d002      	beq.n	8013d36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8013d30:	693b      	ldr	r3, [r7, #16]
 8013d32:	3b01      	subs	r3, #1
 8013d34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8013d36:	693b      	ldr	r3, [r7, #16]
 8013d38:	1c5a      	adds	r2, r3, #1
 8013d3a:	68fb      	ldr	r3, [r7, #12]
 8013d3c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8013d3e:	697b      	ldr	r3, [r7, #20]
}
 8013d40:	4618      	mov	r0, r3
 8013d42:	3718      	adds	r7, #24
 8013d44:	46bd      	mov	sp, r7
 8013d46:	bd80      	pop	{r7, pc}

08013d48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8013d48:	b580      	push	{r7, lr}
 8013d4a:	b082      	sub	sp, #8
 8013d4c:	af00      	add	r7, sp, #0
 8013d4e:	6078      	str	r0, [r7, #4]
 8013d50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d018      	beq.n	8013d8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	68da      	ldr	r2, [r3, #12]
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d62:	441a      	add	r2, r3
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	68da      	ldr	r2, [r3, #12]
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	689b      	ldr	r3, [r3, #8]
 8013d70:	429a      	cmp	r2, r3
 8013d72:	d303      	bcc.n	8013d7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8013d74:	687b      	ldr	r3, [r7, #4]
 8013d76:	681a      	ldr	r2, [r3, #0]
 8013d78:	687b      	ldr	r3, [r7, #4]
 8013d7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	68d9      	ldr	r1, [r3, #12]
 8013d80:	687b      	ldr	r3, [r7, #4]
 8013d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013d84:	461a      	mov	r2, r3
 8013d86:	6838      	ldr	r0, [r7, #0]
 8013d88:	f002 f992 	bl	80160b0 <memcpy>
	}
}
 8013d8c:	bf00      	nop
 8013d8e:	3708      	adds	r7, #8
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}

08013d94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8013d94:	b580      	push	{r7, lr}
 8013d96:	b084      	sub	sp, #16
 8013d98:	af00      	add	r7, sp, #0
 8013d9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013d9c:	f001 fe42 	bl	8015a24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013da6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013da8:	e011      	b.n	8013dce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d012      	beq.n	8013dd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8013db2:	687b      	ldr	r3, [r7, #4]
 8013db4:	3324      	adds	r3, #36	; 0x24
 8013db6:	4618      	mov	r0, r3
 8013db8:	f000 fe80 	bl	8014abc <xTaskRemoveFromEventList>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d001      	beq.n	8013dc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8013dc2:	f000 ffb9 	bl	8014d38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013dc6:	7bfb      	ldrb	r3, [r7, #15]
 8013dc8:	3b01      	subs	r3, #1
 8013dca:	b2db      	uxtb	r3, r3
 8013dcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	dce9      	bgt.n	8013daa <prvUnlockQueue+0x16>
 8013dd6:	e000      	b.n	8013dda <prvUnlockQueue+0x46>
					break;
 8013dd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	22ff      	movs	r2, #255	; 0xff
 8013dde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8013de2:	f001 fe4f 	bl	8015a84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013de6:	f001 fe1d 	bl	8015a24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013df0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013df2:	e011      	b.n	8013e18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8013df4:	687b      	ldr	r3, [r7, #4]
 8013df6:	691b      	ldr	r3, [r3, #16]
 8013df8:	2b00      	cmp	r3, #0
 8013dfa:	d012      	beq.n	8013e22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	3310      	adds	r3, #16
 8013e00:	4618      	mov	r0, r3
 8013e02:	f000 fe5b 	bl	8014abc <xTaskRemoveFromEventList>
 8013e06:	4603      	mov	r3, r0
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d001      	beq.n	8013e10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013e0c:	f000 ff94 	bl	8014d38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8013e10:	7bbb      	ldrb	r3, [r7, #14]
 8013e12:	3b01      	subs	r3, #1
 8013e14:	b2db      	uxtb	r3, r3
 8013e16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8013e18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8013e1c:	2b00      	cmp	r3, #0
 8013e1e:	dce9      	bgt.n	8013df4 <prvUnlockQueue+0x60>
 8013e20:	e000      	b.n	8013e24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8013e22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8013e24:	687b      	ldr	r3, [r7, #4]
 8013e26:	22ff      	movs	r2, #255	; 0xff
 8013e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8013e2c:	f001 fe2a 	bl	8015a84 <vPortExitCritical>
}
 8013e30:	bf00      	nop
 8013e32:	3710      	adds	r7, #16
 8013e34:	46bd      	mov	sp, r7
 8013e36:	bd80      	pop	{r7, pc}

08013e38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b084      	sub	sp, #16
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e40:	f001 fdf0 	bl	8015a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013e48:	2b00      	cmp	r3, #0
 8013e4a:	d102      	bne.n	8013e52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	60fb      	str	r3, [r7, #12]
 8013e50:	e001      	b.n	8013e56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8013e52:	2300      	movs	r3, #0
 8013e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013e56:	f001 fe15 	bl	8015a84 <vPortExitCritical>

	return xReturn;
 8013e5a:	68fb      	ldr	r3, [r7, #12]
}
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	3710      	adds	r7, #16
 8013e60:	46bd      	mov	sp, r7
 8013e62:	bd80      	pop	{r7, pc}

08013e64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8013e64:	b580      	push	{r7, lr}
 8013e66:	b084      	sub	sp, #16
 8013e68:	af00      	add	r7, sp, #0
 8013e6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8013e6c:	f001 fdda 	bl	8015a24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013e78:	429a      	cmp	r2, r3
 8013e7a:	d102      	bne.n	8013e82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	60fb      	str	r3, [r7, #12]
 8013e80:	e001      	b.n	8013e86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8013e82:	2300      	movs	r3, #0
 8013e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013e86:	f001 fdfd 	bl	8015a84 <vPortExitCritical>

	return xReturn;
 8013e8a:	68fb      	ldr	r3, [r7, #12]
}
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	3710      	adds	r7, #16
 8013e90:	46bd      	mov	sp, r7
 8013e92:	bd80      	pop	{r7, pc}

08013e94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8013e94:	b480      	push	{r7}
 8013e96:	b085      	sub	sp, #20
 8013e98:	af00      	add	r7, sp, #0
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	60fb      	str	r3, [r7, #12]
 8013ea2:	e014      	b.n	8013ece <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8013ea4:	4a0f      	ldr	r2, [pc, #60]	; (8013ee4 <vQueueAddToRegistry+0x50>)
 8013ea6:	68fb      	ldr	r3, [r7, #12]
 8013ea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8013eac:	2b00      	cmp	r3, #0
 8013eae:	d10b      	bne.n	8013ec8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8013eb0:	490c      	ldr	r1, [pc, #48]	; (8013ee4 <vQueueAddToRegistry+0x50>)
 8013eb2:	68fb      	ldr	r3, [r7, #12]
 8013eb4:	683a      	ldr	r2, [r7, #0]
 8013eb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8013eba:	4a0a      	ldr	r2, [pc, #40]	; (8013ee4 <vQueueAddToRegistry+0x50>)
 8013ebc:	68fb      	ldr	r3, [r7, #12]
 8013ebe:	00db      	lsls	r3, r3, #3
 8013ec0:	4413      	add	r3, r2
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8013ec6:	e006      	b.n	8013ed6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013ec8:	68fb      	ldr	r3, [r7, #12]
 8013eca:	3301      	adds	r3, #1
 8013ecc:	60fb      	str	r3, [r7, #12]
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	2b07      	cmp	r3, #7
 8013ed2:	d9e7      	bls.n	8013ea4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8013ed4:	bf00      	nop
 8013ed6:	bf00      	nop
 8013ed8:	3714      	adds	r7, #20
 8013eda:	46bd      	mov	sp, r7
 8013edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ee0:	4770      	bx	lr
 8013ee2:	bf00      	nop
 8013ee4:	24001768 	.word	0x24001768

08013ee8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8013ee8:	b580      	push	{r7, lr}
 8013eea:	b086      	sub	sp, #24
 8013eec:	af00      	add	r7, sp, #0
 8013eee:	60f8      	str	r0, [r7, #12]
 8013ef0:	60b9      	str	r1, [r7, #8]
 8013ef2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8013ef4:	68fb      	ldr	r3, [r7, #12]
 8013ef6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8013ef8:	f001 fd94 	bl	8015a24 <vPortEnterCritical>
 8013efc:	697b      	ldr	r3, [r7, #20]
 8013efe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013f02:	b25b      	sxtb	r3, r3
 8013f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f08:	d103      	bne.n	8013f12 <vQueueWaitForMessageRestricted+0x2a>
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	2200      	movs	r2, #0
 8013f0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8013f12:	697b      	ldr	r3, [r7, #20]
 8013f14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f18:	b25b      	sxtb	r3, r3
 8013f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013f1e:	d103      	bne.n	8013f28 <vQueueWaitForMessageRestricted+0x40>
 8013f20:	697b      	ldr	r3, [r7, #20]
 8013f22:	2200      	movs	r2, #0
 8013f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8013f28:	f001 fdac 	bl	8015a84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8013f2c:	697b      	ldr	r3, [r7, #20]
 8013f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d106      	bne.n	8013f42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8013f34:	697b      	ldr	r3, [r7, #20]
 8013f36:	3324      	adds	r3, #36	; 0x24
 8013f38:	687a      	ldr	r2, [r7, #4]
 8013f3a:	68b9      	ldr	r1, [r7, #8]
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	f000 fd91 	bl	8014a64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8013f42:	6978      	ldr	r0, [r7, #20]
 8013f44:	f7ff ff26 	bl	8013d94 <prvUnlockQueue>
	}
 8013f48:	bf00      	nop
 8013f4a:	3718      	adds	r7, #24
 8013f4c:	46bd      	mov	sp, r7
 8013f4e:	bd80      	pop	{r7, pc}

08013f50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b08e      	sub	sp, #56	; 0x38
 8013f54:	af04      	add	r7, sp, #16
 8013f56:	60f8      	str	r0, [r7, #12]
 8013f58:	60b9      	str	r1, [r7, #8]
 8013f5a:	607a      	str	r2, [r7, #4]
 8013f5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013f5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	d10a      	bne.n	8013f7a <xTaskCreateStatic+0x2a>
	__asm volatile
 8013f64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f68:	f383 8811 	msr	BASEPRI, r3
 8013f6c:	f3bf 8f6f 	isb	sy
 8013f70:	f3bf 8f4f 	dsb	sy
 8013f74:	623b      	str	r3, [r7, #32]
}
 8013f76:	bf00      	nop
 8013f78:	e7fe      	b.n	8013f78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8013f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f7c:	2b00      	cmp	r3, #0
 8013f7e:	d10a      	bne.n	8013f96 <xTaskCreateStatic+0x46>
	__asm volatile
 8013f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f84:	f383 8811 	msr	BASEPRI, r3
 8013f88:	f3bf 8f6f 	isb	sy
 8013f8c:	f3bf 8f4f 	dsb	sy
 8013f90:	61fb      	str	r3, [r7, #28]
}
 8013f92:	bf00      	nop
 8013f94:	e7fe      	b.n	8013f94 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8013f96:	235c      	movs	r3, #92	; 0x5c
 8013f98:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8013f9a:	693b      	ldr	r3, [r7, #16]
 8013f9c:	2b5c      	cmp	r3, #92	; 0x5c
 8013f9e:	d00a      	beq.n	8013fb6 <xTaskCreateStatic+0x66>
	__asm volatile
 8013fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013fa4:	f383 8811 	msr	BASEPRI, r3
 8013fa8:	f3bf 8f6f 	isb	sy
 8013fac:	f3bf 8f4f 	dsb	sy
 8013fb0:	61bb      	str	r3, [r7, #24]
}
 8013fb2:	bf00      	nop
 8013fb4:	e7fe      	b.n	8013fb4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8013fb6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8013fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fba:	2b00      	cmp	r3, #0
 8013fbc:	d01e      	beq.n	8013ffc <xTaskCreateStatic+0xac>
 8013fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013fc0:	2b00      	cmp	r3, #0
 8013fc2:	d01b      	beq.n	8013ffc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8013fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fc6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8013fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013fcc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8013fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fd0:	2202      	movs	r2, #2
 8013fd2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013fd6:	2300      	movs	r3, #0
 8013fd8:	9303      	str	r3, [sp, #12]
 8013fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013fdc:	9302      	str	r3, [sp, #8]
 8013fde:	f107 0314 	add.w	r3, r7, #20
 8013fe2:	9301      	str	r3, [sp, #4]
 8013fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013fe6:	9300      	str	r3, [sp, #0]
 8013fe8:	683b      	ldr	r3, [r7, #0]
 8013fea:	687a      	ldr	r2, [r7, #4]
 8013fec:	68b9      	ldr	r1, [r7, #8]
 8013fee:	68f8      	ldr	r0, [r7, #12]
 8013ff0:	f000 f850 	bl	8014094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013ff4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ff6:	f000 f8dd 	bl	80141b4 <prvAddNewTaskToReadyList>
 8013ffa:	e001      	b.n	8014000 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8013ffc:	2300      	movs	r3, #0
 8013ffe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8014000:	697b      	ldr	r3, [r7, #20]
	}
 8014002:	4618      	mov	r0, r3
 8014004:	3728      	adds	r7, #40	; 0x28
 8014006:	46bd      	mov	sp, r7
 8014008:	bd80      	pop	{r7, pc}

0801400a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801400a:	b580      	push	{r7, lr}
 801400c:	b08c      	sub	sp, #48	; 0x30
 801400e:	af04      	add	r7, sp, #16
 8014010:	60f8      	str	r0, [r7, #12]
 8014012:	60b9      	str	r1, [r7, #8]
 8014014:	603b      	str	r3, [r7, #0]
 8014016:	4613      	mov	r3, r2
 8014018:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801401a:	88fb      	ldrh	r3, [r7, #6]
 801401c:	009b      	lsls	r3, r3, #2
 801401e:	4618      	mov	r0, r3
 8014020:	f001 fe22 	bl	8015c68 <pvPortMalloc>
 8014024:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	2b00      	cmp	r3, #0
 801402a:	d00e      	beq.n	801404a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801402c:	205c      	movs	r0, #92	; 0x5c
 801402e:	f001 fe1b 	bl	8015c68 <pvPortMalloc>
 8014032:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8014034:	69fb      	ldr	r3, [r7, #28]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d003      	beq.n	8014042 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801403a:	69fb      	ldr	r3, [r7, #28]
 801403c:	697a      	ldr	r2, [r7, #20]
 801403e:	631a      	str	r2, [r3, #48]	; 0x30
 8014040:	e005      	b.n	801404e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8014042:	6978      	ldr	r0, [r7, #20]
 8014044:	f001 fedc 	bl	8015e00 <vPortFree>
 8014048:	e001      	b.n	801404e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801404a:	2300      	movs	r3, #0
 801404c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801404e:	69fb      	ldr	r3, [r7, #28]
 8014050:	2b00      	cmp	r3, #0
 8014052:	d017      	beq.n	8014084 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8014054:	69fb      	ldr	r3, [r7, #28]
 8014056:	2200      	movs	r2, #0
 8014058:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801405c:	88fa      	ldrh	r2, [r7, #6]
 801405e:	2300      	movs	r3, #0
 8014060:	9303      	str	r3, [sp, #12]
 8014062:	69fb      	ldr	r3, [r7, #28]
 8014064:	9302      	str	r3, [sp, #8]
 8014066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014068:	9301      	str	r3, [sp, #4]
 801406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801406c:	9300      	str	r3, [sp, #0]
 801406e:	683b      	ldr	r3, [r7, #0]
 8014070:	68b9      	ldr	r1, [r7, #8]
 8014072:	68f8      	ldr	r0, [r7, #12]
 8014074:	f000 f80e 	bl	8014094 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8014078:	69f8      	ldr	r0, [r7, #28]
 801407a:	f000 f89b 	bl	80141b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801407e:	2301      	movs	r3, #1
 8014080:	61bb      	str	r3, [r7, #24]
 8014082:	e002      	b.n	801408a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8014084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014088:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801408a:	69bb      	ldr	r3, [r7, #24]
	}
 801408c:	4618      	mov	r0, r3
 801408e:	3720      	adds	r7, #32
 8014090:	46bd      	mov	sp, r7
 8014092:	bd80      	pop	{r7, pc}

08014094 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8014094:	b580      	push	{r7, lr}
 8014096:	b088      	sub	sp, #32
 8014098:	af00      	add	r7, sp, #0
 801409a:	60f8      	str	r0, [r7, #12]
 801409c:	60b9      	str	r1, [r7, #8]
 801409e:	607a      	str	r2, [r7, #4]
 80140a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80140a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	009b      	lsls	r3, r3, #2
 80140aa:	461a      	mov	r2, r3
 80140ac:	21a5      	movs	r1, #165	; 0xa5
 80140ae:	f002 f80d 	bl	80160cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80140b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80140b6:	6879      	ldr	r1, [r7, #4]
 80140b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80140bc:	440b      	add	r3, r1
 80140be:	009b      	lsls	r3, r3, #2
 80140c0:	4413      	add	r3, r2
 80140c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80140c4:	69bb      	ldr	r3, [r7, #24]
 80140c6:	f023 0307 	bic.w	r3, r3, #7
 80140ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80140cc:	69bb      	ldr	r3, [r7, #24]
 80140ce:	f003 0307 	and.w	r3, r3, #7
 80140d2:	2b00      	cmp	r3, #0
 80140d4:	d00a      	beq.n	80140ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80140d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80140da:	f383 8811 	msr	BASEPRI, r3
 80140de:	f3bf 8f6f 	isb	sy
 80140e2:	f3bf 8f4f 	dsb	sy
 80140e6:	617b      	str	r3, [r7, #20]
}
 80140e8:	bf00      	nop
 80140ea:	e7fe      	b.n	80140ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80140ec:	68bb      	ldr	r3, [r7, #8]
 80140ee:	2b00      	cmp	r3, #0
 80140f0:	d01f      	beq.n	8014132 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80140f2:	2300      	movs	r3, #0
 80140f4:	61fb      	str	r3, [r7, #28]
 80140f6:	e012      	b.n	801411e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80140f8:	68ba      	ldr	r2, [r7, #8]
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	4413      	add	r3, r2
 80140fe:	7819      	ldrb	r1, [r3, #0]
 8014100:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014102:	69fb      	ldr	r3, [r7, #28]
 8014104:	4413      	add	r3, r2
 8014106:	3334      	adds	r3, #52	; 0x34
 8014108:	460a      	mov	r2, r1
 801410a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801410c:	68ba      	ldr	r2, [r7, #8]
 801410e:	69fb      	ldr	r3, [r7, #28]
 8014110:	4413      	add	r3, r2
 8014112:	781b      	ldrb	r3, [r3, #0]
 8014114:	2b00      	cmp	r3, #0
 8014116:	d006      	beq.n	8014126 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8014118:	69fb      	ldr	r3, [r7, #28]
 801411a:	3301      	adds	r3, #1
 801411c:	61fb      	str	r3, [r7, #28]
 801411e:	69fb      	ldr	r3, [r7, #28]
 8014120:	2b0f      	cmp	r3, #15
 8014122:	d9e9      	bls.n	80140f8 <prvInitialiseNewTask+0x64>
 8014124:	e000      	b.n	8014128 <prvInitialiseNewTask+0x94>
			{
				break;
 8014126:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8014128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801412a:	2200      	movs	r2, #0
 801412c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014130:	e003      	b.n	801413a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8014132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014134:	2200      	movs	r2, #0
 8014136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801413a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801413c:	2b37      	cmp	r3, #55	; 0x37
 801413e:	d901      	bls.n	8014144 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8014140:	2337      	movs	r3, #55	; 0x37
 8014142:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8014144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014146:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014148:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801414a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801414c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801414e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8014150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014152:	2200      	movs	r2, #0
 8014154:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8014156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014158:	3304      	adds	r3, #4
 801415a:	4618      	mov	r0, r3
 801415c:	f7ff f8be 	bl	80132dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8014160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014162:	3318      	adds	r3, #24
 8014164:	4618      	mov	r0, r3
 8014166:	f7ff f8b9 	bl	80132dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801416a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801416c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801416e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014172:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014178:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801417c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801417e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8014180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014182:	2200      	movs	r2, #0
 8014184:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8014186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014188:	2200      	movs	r2, #0
 801418a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801418e:	683a      	ldr	r2, [r7, #0]
 8014190:	68f9      	ldr	r1, [r7, #12]
 8014192:	69b8      	ldr	r0, [r7, #24]
 8014194:	f001 fb18 	bl	80157c8 <pxPortInitialiseStack>
 8014198:	4602      	mov	r2, r0
 801419a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801419c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801419e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a0:	2b00      	cmp	r3, #0
 80141a2:	d002      	beq.n	80141aa <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80141a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80141a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80141aa:	bf00      	nop
 80141ac:	3720      	adds	r7, #32
 80141ae:	46bd      	mov	sp, r7
 80141b0:	bd80      	pop	{r7, pc}
	...

080141b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80141b4:	b580      	push	{r7, lr}
 80141b6:	b082      	sub	sp, #8
 80141b8:	af00      	add	r7, sp, #0
 80141ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80141bc:	f001 fc32 	bl	8015a24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80141c0:	4b2d      	ldr	r3, [pc, #180]	; (8014278 <prvAddNewTaskToReadyList+0xc4>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	3301      	adds	r3, #1
 80141c6:	4a2c      	ldr	r2, [pc, #176]	; (8014278 <prvAddNewTaskToReadyList+0xc4>)
 80141c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80141ca:	4b2c      	ldr	r3, [pc, #176]	; (801427c <prvAddNewTaskToReadyList+0xc8>)
 80141cc:	681b      	ldr	r3, [r3, #0]
 80141ce:	2b00      	cmp	r3, #0
 80141d0:	d109      	bne.n	80141e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80141d2:	4a2a      	ldr	r2, [pc, #168]	; (801427c <prvAddNewTaskToReadyList+0xc8>)
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80141d8:	4b27      	ldr	r3, [pc, #156]	; (8014278 <prvAddNewTaskToReadyList+0xc4>)
 80141da:	681b      	ldr	r3, [r3, #0]
 80141dc:	2b01      	cmp	r3, #1
 80141de:	d110      	bne.n	8014202 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80141e0:	f000 fdce 	bl	8014d80 <prvInitialiseTaskLists>
 80141e4:	e00d      	b.n	8014202 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80141e6:	4b26      	ldr	r3, [pc, #152]	; (8014280 <prvAddNewTaskToReadyList+0xcc>)
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d109      	bne.n	8014202 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80141ee:	4b23      	ldr	r3, [pc, #140]	; (801427c <prvAddNewTaskToReadyList+0xc8>)
 80141f0:	681b      	ldr	r3, [r3, #0]
 80141f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80141f8:	429a      	cmp	r2, r3
 80141fa:	d802      	bhi.n	8014202 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80141fc:	4a1f      	ldr	r2, [pc, #124]	; (801427c <prvAddNewTaskToReadyList+0xc8>)
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8014202:	4b20      	ldr	r3, [pc, #128]	; (8014284 <prvAddNewTaskToReadyList+0xd0>)
 8014204:	681b      	ldr	r3, [r3, #0]
 8014206:	3301      	adds	r3, #1
 8014208:	4a1e      	ldr	r2, [pc, #120]	; (8014284 <prvAddNewTaskToReadyList+0xd0>)
 801420a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 801420c:	4b1d      	ldr	r3, [pc, #116]	; (8014284 <prvAddNewTaskToReadyList+0xd0>)
 801420e:	681a      	ldr	r2, [r3, #0]
 8014210:	687b      	ldr	r3, [r7, #4]
 8014212:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014218:	4b1b      	ldr	r3, [pc, #108]	; (8014288 <prvAddNewTaskToReadyList+0xd4>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	429a      	cmp	r2, r3
 801421e:	d903      	bls.n	8014228 <prvAddNewTaskToReadyList+0x74>
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014224:	4a18      	ldr	r2, [pc, #96]	; (8014288 <prvAddNewTaskToReadyList+0xd4>)
 8014226:	6013      	str	r3, [r2, #0]
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801422c:	4613      	mov	r3, r2
 801422e:	009b      	lsls	r3, r3, #2
 8014230:	4413      	add	r3, r2
 8014232:	009b      	lsls	r3, r3, #2
 8014234:	4a15      	ldr	r2, [pc, #84]	; (801428c <prvAddNewTaskToReadyList+0xd8>)
 8014236:	441a      	add	r2, r3
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	3304      	adds	r3, #4
 801423c:	4619      	mov	r1, r3
 801423e:	4610      	mov	r0, r2
 8014240:	f7ff f859 	bl	80132f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8014244:	f001 fc1e 	bl	8015a84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8014248:	4b0d      	ldr	r3, [pc, #52]	; (8014280 <prvAddNewTaskToReadyList+0xcc>)
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d00e      	beq.n	801426e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8014250:	4b0a      	ldr	r3, [pc, #40]	; (801427c <prvAddNewTaskToReadyList+0xc8>)
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801425a:	429a      	cmp	r2, r3
 801425c:	d207      	bcs.n	801426e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801425e:	4b0c      	ldr	r3, [pc, #48]	; (8014290 <prvAddNewTaskToReadyList+0xdc>)
 8014260:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014264:	601a      	str	r2, [r3, #0]
 8014266:	f3bf 8f4f 	dsb	sy
 801426a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801426e:	bf00      	nop
 8014270:	3708      	adds	r7, #8
 8014272:	46bd      	mov	sp, r7
 8014274:	bd80      	pop	{r7, pc}
 8014276:	bf00      	nop
 8014278:	24001c7c 	.word	0x24001c7c
 801427c:	240017a8 	.word	0x240017a8
 8014280:	24001c88 	.word	0x24001c88
 8014284:	24001c98 	.word	0x24001c98
 8014288:	24001c84 	.word	0x24001c84
 801428c:	240017ac 	.word	0x240017ac
 8014290:	e000ed04 	.word	0xe000ed04

08014294 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8014294:	b580      	push	{r7, lr}
 8014296:	b084      	sub	sp, #16
 8014298:	af00      	add	r7, sp, #0
 801429a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801429c:	2300      	movs	r3, #0
 801429e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	2b00      	cmp	r3, #0
 80142a4:	d017      	beq.n	80142d6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80142a6:	4b13      	ldr	r3, [pc, #76]	; (80142f4 <vTaskDelay+0x60>)
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d00a      	beq.n	80142c4 <vTaskDelay+0x30>
	__asm volatile
 80142ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142b2:	f383 8811 	msr	BASEPRI, r3
 80142b6:	f3bf 8f6f 	isb	sy
 80142ba:	f3bf 8f4f 	dsb	sy
 80142be:	60bb      	str	r3, [r7, #8]
}
 80142c0:	bf00      	nop
 80142c2:	e7fe      	b.n	80142c2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80142c4:	f000 f99a 	bl	80145fc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80142c8:	2100      	movs	r1, #0
 80142ca:	6878      	ldr	r0, [r7, #4]
 80142cc:	f000 feba 	bl	8015044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80142d0:	f000 f9a2 	bl	8014618 <xTaskResumeAll>
 80142d4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80142d6:	68fb      	ldr	r3, [r7, #12]
 80142d8:	2b00      	cmp	r3, #0
 80142da:	d107      	bne.n	80142ec <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80142dc:	4b06      	ldr	r3, [pc, #24]	; (80142f8 <vTaskDelay+0x64>)
 80142de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80142e2:	601a      	str	r2, [r3, #0]
 80142e4:	f3bf 8f4f 	dsb	sy
 80142e8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80142ec:	bf00      	nop
 80142ee:	3710      	adds	r7, #16
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	24001ca4 	.word	0x24001ca4
 80142f8:	e000ed04 	.word	0xe000ed04

080142fc <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80142fc:	b580      	push	{r7, lr}
 80142fe:	b084      	sub	sp, #16
 8014300:	af00      	add	r7, sp, #0
 8014302:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8014304:	f001 fb8e 	bl	8015a24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d102      	bne.n	8014314 <vTaskSuspend+0x18>
 801430e:	4b30      	ldr	r3, [pc, #192]	; (80143d0 <vTaskSuspend+0xd4>)
 8014310:	681b      	ldr	r3, [r3, #0]
 8014312:	e000      	b.n	8014316 <vTaskSuspend+0x1a>
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	3304      	adds	r3, #4
 801431c:	4618      	mov	r0, r3
 801431e:	f7ff f847 	bl	80133b0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014326:	2b00      	cmp	r3, #0
 8014328:	d004      	beq.n	8014334 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801432a:	68fb      	ldr	r3, [r7, #12]
 801432c:	3318      	adds	r3, #24
 801432e:	4618      	mov	r0, r3
 8014330:	f7ff f83e 	bl	80133b0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8014334:	68fb      	ldr	r3, [r7, #12]
 8014336:	3304      	adds	r3, #4
 8014338:	4619      	mov	r1, r3
 801433a:	4826      	ldr	r0, [pc, #152]	; (80143d4 <vTaskSuspend+0xd8>)
 801433c:	f7fe ffdb 	bl	80132f6 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8014340:	68fb      	ldr	r3, [r7, #12]
 8014342:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8014346:	b2db      	uxtb	r3, r3
 8014348:	2b01      	cmp	r3, #1
 801434a:	d103      	bne.n	8014354 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801434c:	68fb      	ldr	r3, [r7, #12]
 801434e:	2200      	movs	r2, #0
 8014350:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8014354:	f001 fb96 	bl	8015a84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8014358:	4b1f      	ldr	r3, [pc, #124]	; (80143d8 <vTaskSuspend+0xdc>)
 801435a:	681b      	ldr	r3, [r3, #0]
 801435c:	2b00      	cmp	r3, #0
 801435e:	d005      	beq.n	801436c <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8014360:	f001 fb60 	bl	8015a24 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8014364:	f000 fdaa 	bl	8014ebc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8014368:	f001 fb8c 	bl	8015a84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 801436c:	4b18      	ldr	r3, [pc, #96]	; (80143d0 <vTaskSuspend+0xd4>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	68fa      	ldr	r2, [r7, #12]
 8014372:	429a      	cmp	r2, r3
 8014374:	d127      	bne.n	80143c6 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8014376:	4b18      	ldr	r3, [pc, #96]	; (80143d8 <vTaskSuspend+0xdc>)
 8014378:	681b      	ldr	r3, [r3, #0]
 801437a:	2b00      	cmp	r3, #0
 801437c:	d017      	beq.n	80143ae <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 801437e:	4b17      	ldr	r3, [pc, #92]	; (80143dc <vTaskSuspend+0xe0>)
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	2b00      	cmp	r3, #0
 8014384:	d00a      	beq.n	801439c <vTaskSuspend+0xa0>
	__asm volatile
 8014386:	f04f 0350 	mov.w	r3, #80	; 0x50
 801438a:	f383 8811 	msr	BASEPRI, r3
 801438e:	f3bf 8f6f 	isb	sy
 8014392:	f3bf 8f4f 	dsb	sy
 8014396:	60bb      	str	r3, [r7, #8]
}
 8014398:	bf00      	nop
 801439a:	e7fe      	b.n	801439a <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 801439c:	4b10      	ldr	r3, [pc, #64]	; (80143e0 <vTaskSuspend+0xe4>)
 801439e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80143a2:	601a      	str	r2, [r3, #0]
 80143a4:	f3bf 8f4f 	dsb	sy
 80143a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80143ac:	e00b      	b.n	80143c6 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80143ae:	4b09      	ldr	r3, [pc, #36]	; (80143d4 <vTaskSuspend+0xd8>)
 80143b0:	681a      	ldr	r2, [r3, #0]
 80143b2:	4b0c      	ldr	r3, [pc, #48]	; (80143e4 <vTaskSuspend+0xe8>)
 80143b4:	681b      	ldr	r3, [r3, #0]
 80143b6:	429a      	cmp	r2, r3
 80143b8:	d103      	bne.n	80143c2 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80143ba:	4b05      	ldr	r3, [pc, #20]	; (80143d0 <vTaskSuspend+0xd4>)
 80143bc:	2200      	movs	r2, #0
 80143be:	601a      	str	r2, [r3, #0]
	}
 80143c0:	e001      	b.n	80143c6 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80143c2:	f000 fa91 	bl	80148e8 <vTaskSwitchContext>
	}
 80143c6:	bf00      	nop
 80143c8:	3710      	adds	r7, #16
 80143ca:	46bd      	mov	sp, r7
 80143cc:	bd80      	pop	{r7, pc}
 80143ce:	bf00      	nop
 80143d0:	240017a8 	.word	0x240017a8
 80143d4:	24001c68 	.word	0x24001c68
 80143d8:	24001c88 	.word	0x24001c88
 80143dc:	24001ca4 	.word	0x24001ca4
 80143e0:	e000ed04 	.word	0xe000ed04
 80143e4:	24001c7c 	.word	0x24001c7c

080143e8 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80143e8:	b480      	push	{r7}
 80143ea:	b087      	sub	sp, #28
 80143ec:	af00      	add	r7, sp, #0
 80143ee:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80143f0:	2300      	movs	r3, #0
 80143f2:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80143f4:	687b      	ldr	r3, [r7, #4]
 80143f6:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d10a      	bne.n	8014414 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80143fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014402:	f383 8811 	msr	BASEPRI, r3
 8014406:	f3bf 8f6f 	isb	sy
 801440a:	f3bf 8f4f 	dsb	sy
 801440e:	60fb      	str	r3, [r7, #12]
}
 8014410:	bf00      	nop
 8014412:	e7fe      	b.n	8014412 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	695b      	ldr	r3, [r3, #20]
 8014418:	4a0a      	ldr	r2, [pc, #40]	; (8014444 <prvTaskIsTaskSuspended+0x5c>)
 801441a:	4293      	cmp	r3, r2
 801441c:	d10a      	bne.n	8014434 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014422:	4a09      	ldr	r2, [pc, #36]	; (8014448 <prvTaskIsTaskSuspended+0x60>)
 8014424:	4293      	cmp	r3, r2
 8014426:	d005      	beq.n	8014434 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8014428:	693b      	ldr	r3, [r7, #16]
 801442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801442c:	2b00      	cmp	r3, #0
 801442e:	d101      	bne.n	8014434 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8014430:	2301      	movs	r3, #1
 8014432:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014434:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8014436:	4618      	mov	r0, r3
 8014438:	371c      	adds	r7, #28
 801443a:	46bd      	mov	sp, r7
 801443c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014440:	4770      	bx	lr
 8014442:	bf00      	nop
 8014444:	24001c68 	.word	0x24001c68
 8014448:	24001c3c 	.word	0x24001c3c

0801444c <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 801444c:	b580      	push	{r7, lr}
 801444e:	b08a      	sub	sp, #40	; 0x28
 8014450:	af00      	add	r7, sp, #0
 8014452:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 8014454:	2300      	movs	r3, #0
 8014456:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	2b00      	cmp	r3, #0
 8014460:	d10a      	bne.n	8014478 <xTaskResumeFromISR+0x2c>
	__asm volatile
 8014462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014466:	f383 8811 	msr	BASEPRI, r3
 801446a:	f3bf 8f6f 	isb	sy
 801446e:	f3bf 8f4f 	dsb	sy
 8014472:	61bb      	str	r3, [r7, #24]
}
 8014474:	bf00      	nop
 8014476:	e7fe      	b.n	8014476 <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8014478:	f001 fbb6 	bl	8015be8 <vPortValidateInterruptPriority>
	__asm volatile
 801447c:	f3ef 8211 	mrs	r2, BASEPRI
 8014480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014484:	f383 8811 	msr	BASEPRI, r3
 8014488:	f3bf 8f6f 	isb	sy
 801448c:	f3bf 8f4f 	dsb	sy
 8014490:	617a      	str	r2, [r7, #20]
 8014492:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8014494:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8014496:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8014498:	6a38      	ldr	r0, [r7, #32]
 801449a:	f7ff ffa5 	bl	80143e8 <prvTaskIsTaskSuspended>
 801449e:	4603      	mov	r3, r0
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d030      	beq.n	8014506 <xTaskResumeFromISR+0xba>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80144a4:	4b1d      	ldr	r3, [pc, #116]	; (801451c <xTaskResumeFromISR+0xd0>)
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d126      	bne.n	80144fa <xTaskResumeFromISR+0xae>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80144ac:	6a3b      	ldr	r3, [r7, #32]
 80144ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144b0:	4b1b      	ldr	r3, [pc, #108]	; (8014520 <xTaskResumeFromISR+0xd4>)
 80144b2:	681b      	ldr	r3, [r3, #0]
 80144b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144b6:	429a      	cmp	r2, r3
 80144b8:	d301      	bcc.n	80144be <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 80144ba:	2301      	movs	r3, #1
 80144bc:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80144be:	6a3b      	ldr	r3, [r7, #32]
 80144c0:	3304      	adds	r3, #4
 80144c2:	4618      	mov	r0, r3
 80144c4:	f7fe ff74 	bl	80133b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80144c8:	6a3b      	ldr	r3, [r7, #32]
 80144ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144cc:	4b15      	ldr	r3, [pc, #84]	; (8014524 <xTaskResumeFromISR+0xd8>)
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	429a      	cmp	r2, r3
 80144d2:	d903      	bls.n	80144dc <xTaskResumeFromISR+0x90>
 80144d4:	6a3b      	ldr	r3, [r7, #32]
 80144d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144d8:	4a12      	ldr	r2, [pc, #72]	; (8014524 <xTaskResumeFromISR+0xd8>)
 80144da:	6013      	str	r3, [r2, #0]
 80144dc:	6a3b      	ldr	r3, [r7, #32]
 80144de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144e0:	4613      	mov	r3, r2
 80144e2:	009b      	lsls	r3, r3, #2
 80144e4:	4413      	add	r3, r2
 80144e6:	009b      	lsls	r3, r3, #2
 80144e8:	4a0f      	ldr	r2, [pc, #60]	; (8014528 <xTaskResumeFromISR+0xdc>)
 80144ea:	441a      	add	r2, r3
 80144ec:	6a3b      	ldr	r3, [r7, #32]
 80144ee:	3304      	adds	r3, #4
 80144f0:	4619      	mov	r1, r3
 80144f2:	4610      	mov	r0, r2
 80144f4:	f7fe feff 	bl	80132f6 <vListInsertEnd>
 80144f8:	e005      	b.n	8014506 <xTaskResumeFromISR+0xba>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80144fa:	6a3b      	ldr	r3, [r7, #32]
 80144fc:	3318      	adds	r3, #24
 80144fe:	4619      	mov	r1, r3
 8014500:	480a      	ldr	r0, [pc, #40]	; (801452c <xTaskResumeFromISR+0xe0>)
 8014502:	f7fe fef8 	bl	80132f6 <vListInsertEnd>
 8014506:	69fb      	ldr	r3, [r7, #28]
 8014508:	60fb      	str	r3, [r7, #12]
	__asm volatile
 801450a:	68fb      	ldr	r3, [r7, #12]
 801450c:	f383 8811 	msr	BASEPRI, r3
}
 8014510:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 8014512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8014514:	4618      	mov	r0, r3
 8014516:	3728      	adds	r7, #40	; 0x28
 8014518:	46bd      	mov	sp, r7
 801451a:	bd80      	pop	{r7, pc}
 801451c:	24001ca4 	.word	0x24001ca4
 8014520:	240017a8 	.word	0x240017a8
 8014524:	24001c84 	.word	0x24001c84
 8014528:	240017ac 	.word	0x240017ac
 801452c:	24001c3c 	.word	0x24001c3c

08014530 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8014530:	b580      	push	{r7, lr}
 8014532:	b08a      	sub	sp, #40	; 0x28
 8014534:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8014536:	2300      	movs	r3, #0
 8014538:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 801453a:	2300      	movs	r3, #0
 801453c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801453e:	463a      	mov	r2, r7
 8014540:	1d39      	adds	r1, r7, #4
 8014542:	f107 0308 	add.w	r3, r7, #8
 8014546:	4618      	mov	r0, r3
 8014548:	f7fe fc86 	bl	8012e58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 801454c:	6839      	ldr	r1, [r7, #0]
 801454e:	687b      	ldr	r3, [r7, #4]
 8014550:	68ba      	ldr	r2, [r7, #8]
 8014552:	9202      	str	r2, [sp, #8]
 8014554:	9301      	str	r3, [sp, #4]
 8014556:	2300      	movs	r3, #0
 8014558:	9300      	str	r3, [sp, #0]
 801455a:	2300      	movs	r3, #0
 801455c:	460a      	mov	r2, r1
 801455e:	4921      	ldr	r1, [pc, #132]	; (80145e4 <vTaskStartScheduler+0xb4>)
 8014560:	4821      	ldr	r0, [pc, #132]	; (80145e8 <vTaskStartScheduler+0xb8>)
 8014562:	f7ff fcf5 	bl	8013f50 <xTaskCreateStatic>
 8014566:	4603      	mov	r3, r0
 8014568:	4a20      	ldr	r2, [pc, #128]	; (80145ec <vTaskStartScheduler+0xbc>)
 801456a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 801456c:	4b1f      	ldr	r3, [pc, #124]	; (80145ec <vTaskStartScheduler+0xbc>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	2b00      	cmp	r3, #0
 8014572:	d002      	beq.n	801457a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8014574:	2301      	movs	r3, #1
 8014576:	617b      	str	r3, [r7, #20]
 8014578:	e001      	b.n	801457e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 801457a:	2300      	movs	r3, #0
 801457c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	2b01      	cmp	r3, #1
 8014582:	d102      	bne.n	801458a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8014584:	f000 fdb2 	bl	80150ec <xTimerCreateTimerTask>
 8014588:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	2b01      	cmp	r3, #1
 801458e:	d116      	bne.n	80145be <vTaskStartScheduler+0x8e>
	__asm volatile
 8014590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014594:	f383 8811 	msr	BASEPRI, r3
 8014598:	f3bf 8f6f 	isb	sy
 801459c:	f3bf 8f4f 	dsb	sy
 80145a0:	613b      	str	r3, [r7, #16]
}
 80145a2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80145a4:	4b12      	ldr	r3, [pc, #72]	; (80145f0 <vTaskStartScheduler+0xc0>)
 80145a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80145aa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80145ac:	4b11      	ldr	r3, [pc, #68]	; (80145f4 <vTaskStartScheduler+0xc4>)
 80145ae:	2201      	movs	r2, #1
 80145b0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80145b2:	4b11      	ldr	r3, [pc, #68]	; (80145f8 <vTaskStartScheduler+0xc8>)
 80145b4:	2200      	movs	r2, #0
 80145b6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80145b8:	f001 f992 	bl	80158e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80145bc:	e00e      	b.n	80145dc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80145be:	697b      	ldr	r3, [r7, #20]
 80145c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80145c4:	d10a      	bne.n	80145dc <vTaskStartScheduler+0xac>
	__asm volatile
 80145c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145ca:	f383 8811 	msr	BASEPRI, r3
 80145ce:	f3bf 8f6f 	isb	sy
 80145d2:	f3bf 8f4f 	dsb	sy
 80145d6:	60fb      	str	r3, [r7, #12]
}
 80145d8:	bf00      	nop
 80145da:	e7fe      	b.n	80145da <vTaskStartScheduler+0xaa>
}
 80145dc:	bf00      	nop
 80145de:	3718      	adds	r7, #24
 80145e0:	46bd      	mov	sp, r7
 80145e2:	bd80      	pop	{r7, pc}
 80145e4:	08016d4c 	.word	0x08016d4c
 80145e8:	08014d51 	.word	0x08014d51
 80145ec:	24001ca0 	.word	0x24001ca0
 80145f0:	24001c9c 	.word	0x24001c9c
 80145f4:	24001c88 	.word	0x24001c88
 80145f8:	24001c80 	.word	0x24001c80

080145fc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80145fc:	b480      	push	{r7}
 80145fe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8014600:	4b04      	ldr	r3, [pc, #16]	; (8014614 <vTaskSuspendAll+0x18>)
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	3301      	adds	r3, #1
 8014606:	4a03      	ldr	r2, [pc, #12]	; (8014614 <vTaskSuspendAll+0x18>)
 8014608:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801460a:	bf00      	nop
 801460c:	46bd      	mov	sp, r7
 801460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014612:	4770      	bx	lr
 8014614:	24001ca4 	.word	0x24001ca4

08014618 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8014618:	b580      	push	{r7, lr}
 801461a:	b084      	sub	sp, #16
 801461c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801461e:	2300      	movs	r3, #0
 8014620:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8014622:	2300      	movs	r3, #0
 8014624:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8014626:	4b42      	ldr	r3, [pc, #264]	; (8014730 <xTaskResumeAll+0x118>)
 8014628:	681b      	ldr	r3, [r3, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d10a      	bne.n	8014644 <xTaskResumeAll+0x2c>
	__asm volatile
 801462e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014632:	f383 8811 	msr	BASEPRI, r3
 8014636:	f3bf 8f6f 	isb	sy
 801463a:	f3bf 8f4f 	dsb	sy
 801463e:	603b      	str	r3, [r7, #0]
}
 8014640:	bf00      	nop
 8014642:	e7fe      	b.n	8014642 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8014644:	f001 f9ee 	bl	8015a24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8014648:	4b39      	ldr	r3, [pc, #228]	; (8014730 <xTaskResumeAll+0x118>)
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	3b01      	subs	r3, #1
 801464e:	4a38      	ldr	r2, [pc, #224]	; (8014730 <xTaskResumeAll+0x118>)
 8014650:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014652:	4b37      	ldr	r3, [pc, #220]	; (8014730 <xTaskResumeAll+0x118>)
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d162      	bne.n	8014720 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801465a:	4b36      	ldr	r3, [pc, #216]	; (8014734 <xTaskResumeAll+0x11c>)
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	2b00      	cmp	r3, #0
 8014660:	d05e      	beq.n	8014720 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8014662:	e02f      	b.n	80146c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014664:	4b34      	ldr	r3, [pc, #208]	; (8014738 <xTaskResumeAll+0x120>)
 8014666:	68db      	ldr	r3, [r3, #12]
 8014668:	68db      	ldr	r3, [r3, #12]
 801466a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801466c:	68fb      	ldr	r3, [r7, #12]
 801466e:	3318      	adds	r3, #24
 8014670:	4618      	mov	r0, r3
 8014672:	f7fe fe9d 	bl	80133b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	3304      	adds	r3, #4
 801467a:	4618      	mov	r0, r3
 801467c:	f7fe fe98 	bl	80133b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8014680:	68fb      	ldr	r3, [r7, #12]
 8014682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014684:	4b2d      	ldr	r3, [pc, #180]	; (801473c <xTaskResumeAll+0x124>)
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	429a      	cmp	r2, r3
 801468a:	d903      	bls.n	8014694 <xTaskResumeAll+0x7c>
 801468c:	68fb      	ldr	r3, [r7, #12]
 801468e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014690:	4a2a      	ldr	r2, [pc, #168]	; (801473c <xTaskResumeAll+0x124>)
 8014692:	6013      	str	r3, [r2, #0]
 8014694:	68fb      	ldr	r3, [r7, #12]
 8014696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014698:	4613      	mov	r3, r2
 801469a:	009b      	lsls	r3, r3, #2
 801469c:	4413      	add	r3, r2
 801469e:	009b      	lsls	r3, r3, #2
 80146a0:	4a27      	ldr	r2, [pc, #156]	; (8014740 <xTaskResumeAll+0x128>)
 80146a2:	441a      	add	r2, r3
 80146a4:	68fb      	ldr	r3, [r7, #12]
 80146a6:	3304      	adds	r3, #4
 80146a8:	4619      	mov	r1, r3
 80146aa:	4610      	mov	r0, r2
 80146ac:	f7fe fe23 	bl	80132f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80146b0:	68fb      	ldr	r3, [r7, #12]
 80146b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80146b4:	4b23      	ldr	r3, [pc, #140]	; (8014744 <xTaskResumeAll+0x12c>)
 80146b6:	681b      	ldr	r3, [r3, #0]
 80146b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146ba:	429a      	cmp	r2, r3
 80146bc:	d302      	bcc.n	80146c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80146be:	4b22      	ldr	r3, [pc, #136]	; (8014748 <xTaskResumeAll+0x130>)
 80146c0:	2201      	movs	r2, #1
 80146c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80146c4:	4b1c      	ldr	r3, [pc, #112]	; (8014738 <xTaskResumeAll+0x120>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	2b00      	cmp	r3, #0
 80146ca:	d1cb      	bne.n	8014664 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80146cc:	68fb      	ldr	r3, [r7, #12]
 80146ce:	2b00      	cmp	r3, #0
 80146d0:	d001      	beq.n	80146d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80146d2:	f000 fbf3 	bl	8014ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80146d6:	4b1d      	ldr	r3, [pc, #116]	; (801474c <xTaskResumeAll+0x134>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	2b00      	cmp	r3, #0
 80146e0:	d010      	beq.n	8014704 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80146e2:	f000 f847 	bl	8014774 <xTaskIncrementTick>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d002      	beq.n	80146f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80146ec:	4b16      	ldr	r3, [pc, #88]	; (8014748 <xTaskResumeAll+0x130>)
 80146ee:	2201      	movs	r2, #1
 80146f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	3b01      	subs	r3, #1
 80146f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	2b00      	cmp	r3, #0
 80146fc:	d1f1      	bne.n	80146e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80146fe:	4b13      	ldr	r3, [pc, #76]	; (801474c <xTaskResumeAll+0x134>)
 8014700:	2200      	movs	r2, #0
 8014702:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8014704:	4b10      	ldr	r3, [pc, #64]	; (8014748 <xTaskResumeAll+0x130>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d009      	beq.n	8014720 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801470c:	2301      	movs	r3, #1
 801470e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8014710:	4b0f      	ldr	r3, [pc, #60]	; (8014750 <xTaskResumeAll+0x138>)
 8014712:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014716:	601a      	str	r2, [r3, #0]
 8014718:	f3bf 8f4f 	dsb	sy
 801471c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8014720:	f001 f9b0 	bl	8015a84 <vPortExitCritical>

	return xAlreadyYielded;
 8014724:	68bb      	ldr	r3, [r7, #8]
}
 8014726:	4618      	mov	r0, r3
 8014728:	3710      	adds	r7, #16
 801472a:	46bd      	mov	sp, r7
 801472c:	bd80      	pop	{r7, pc}
 801472e:	bf00      	nop
 8014730:	24001ca4 	.word	0x24001ca4
 8014734:	24001c7c 	.word	0x24001c7c
 8014738:	24001c3c 	.word	0x24001c3c
 801473c:	24001c84 	.word	0x24001c84
 8014740:	240017ac 	.word	0x240017ac
 8014744:	240017a8 	.word	0x240017a8
 8014748:	24001c90 	.word	0x24001c90
 801474c:	24001c8c 	.word	0x24001c8c
 8014750:	e000ed04 	.word	0xe000ed04

08014754 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8014754:	b480      	push	{r7}
 8014756:	b083      	sub	sp, #12
 8014758:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801475a:	4b05      	ldr	r3, [pc, #20]	; (8014770 <xTaskGetTickCount+0x1c>)
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8014760:	687b      	ldr	r3, [r7, #4]
}
 8014762:	4618      	mov	r0, r3
 8014764:	370c      	adds	r7, #12
 8014766:	46bd      	mov	sp, r7
 8014768:	f85d 7b04 	ldr.w	r7, [sp], #4
 801476c:	4770      	bx	lr
 801476e:	bf00      	nop
 8014770:	24001c80 	.word	0x24001c80

08014774 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8014774:	b580      	push	{r7, lr}
 8014776:	b086      	sub	sp, #24
 8014778:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801477a:	2300      	movs	r3, #0
 801477c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801477e:	4b4f      	ldr	r3, [pc, #316]	; (80148bc <xTaskIncrementTick+0x148>)
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	2b00      	cmp	r3, #0
 8014784:	f040 808f 	bne.w	80148a6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8014788:	4b4d      	ldr	r3, [pc, #308]	; (80148c0 <xTaskIncrementTick+0x14c>)
 801478a:	681b      	ldr	r3, [r3, #0]
 801478c:	3301      	adds	r3, #1
 801478e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8014790:	4a4b      	ldr	r2, [pc, #300]	; (80148c0 <xTaskIncrementTick+0x14c>)
 8014792:	693b      	ldr	r3, [r7, #16]
 8014794:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8014796:	693b      	ldr	r3, [r7, #16]
 8014798:	2b00      	cmp	r3, #0
 801479a:	d120      	bne.n	80147de <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 801479c:	4b49      	ldr	r3, [pc, #292]	; (80148c4 <xTaskIncrementTick+0x150>)
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d00a      	beq.n	80147bc <xTaskIncrementTick+0x48>
	__asm volatile
 80147a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80147aa:	f383 8811 	msr	BASEPRI, r3
 80147ae:	f3bf 8f6f 	isb	sy
 80147b2:	f3bf 8f4f 	dsb	sy
 80147b6:	603b      	str	r3, [r7, #0]
}
 80147b8:	bf00      	nop
 80147ba:	e7fe      	b.n	80147ba <xTaskIncrementTick+0x46>
 80147bc:	4b41      	ldr	r3, [pc, #260]	; (80148c4 <xTaskIncrementTick+0x150>)
 80147be:	681b      	ldr	r3, [r3, #0]
 80147c0:	60fb      	str	r3, [r7, #12]
 80147c2:	4b41      	ldr	r3, [pc, #260]	; (80148c8 <xTaskIncrementTick+0x154>)
 80147c4:	681b      	ldr	r3, [r3, #0]
 80147c6:	4a3f      	ldr	r2, [pc, #252]	; (80148c4 <xTaskIncrementTick+0x150>)
 80147c8:	6013      	str	r3, [r2, #0]
 80147ca:	4a3f      	ldr	r2, [pc, #252]	; (80148c8 <xTaskIncrementTick+0x154>)
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	6013      	str	r3, [r2, #0]
 80147d0:	4b3e      	ldr	r3, [pc, #248]	; (80148cc <xTaskIncrementTick+0x158>)
 80147d2:	681b      	ldr	r3, [r3, #0]
 80147d4:	3301      	adds	r3, #1
 80147d6:	4a3d      	ldr	r2, [pc, #244]	; (80148cc <xTaskIncrementTick+0x158>)
 80147d8:	6013      	str	r3, [r2, #0]
 80147da:	f000 fb6f 	bl	8014ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80147de:	4b3c      	ldr	r3, [pc, #240]	; (80148d0 <xTaskIncrementTick+0x15c>)
 80147e0:	681b      	ldr	r3, [r3, #0]
 80147e2:	693a      	ldr	r2, [r7, #16]
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d349      	bcc.n	801487c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80147e8:	4b36      	ldr	r3, [pc, #216]	; (80148c4 <xTaskIncrementTick+0x150>)
 80147ea:	681b      	ldr	r3, [r3, #0]
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d104      	bne.n	80147fc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80147f2:	4b37      	ldr	r3, [pc, #220]	; (80148d0 <xTaskIncrementTick+0x15c>)
 80147f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80147f8:	601a      	str	r2, [r3, #0]
					break;
 80147fa:	e03f      	b.n	801487c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80147fc:	4b31      	ldr	r3, [pc, #196]	; (80148c4 <xTaskIncrementTick+0x150>)
 80147fe:	681b      	ldr	r3, [r3, #0]
 8014800:	68db      	ldr	r3, [r3, #12]
 8014802:	68db      	ldr	r3, [r3, #12]
 8014804:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	685b      	ldr	r3, [r3, #4]
 801480a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801480c:	693a      	ldr	r2, [r7, #16]
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	429a      	cmp	r2, r3
 8014812:	d203      	bcs.n	801481c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8014814:	4a2e      	ldr	r2, [pc, #184]	; (80148d0 <xTaskIncrementTick+0x15c>)
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801481a:	e02f      	b.n	801487c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801481c:	68bb      	ldr	r3, [r7, #8]
 801481e:	3304      	adds	r3, #4
 8014820:	4618      	mov	r0, r3
 8014822:	f7fe fdc5 	bl	80133b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8014826:	68bb      	ldr	r3, [r7, #8]
 8014828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801482a:	2b00      	cmp	r3, #0
 801482c:	d004      	beq.n	8014838 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801482e:	68bb      	ldr	r3, [r7, #8]
 8014830:	3318      	adds	r3, #24
 8014832:	4618      	mov	r0, r3
 8014834:	f7fe fdbc 	bl	80133b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801483c:	4b25      	ldr	r3, [pc, #148]	; (80148d4 <xTaskIncrementTick+0x160>)
 801483e:	681b      	ldr	r3, [r3, #0]
 8014840:	429a      	cmp	r2, r3
 8014842:	d903      	bls.n	801484c <xTaskIncrementTick+0xd8>
 8014844:	68bb      	ldr	r3, [r7, #8]
 8014846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014848:	4a22      	ldr	r2, [pc, #136]	; (80148d4 <xTaskIncrementTick+0x160>)
 801484a:	6013      	str	r3, [r2, #0]
 801484c:	68bb      	ldr	r3, [r7, #8]
 801484e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014850:	4613      	mov	r3, r2
 8014852:	009b      	lsls	r3, r3, #2
 8014854:	4413      	add	r3, r2
 8014856:	009b      	lsls	r3, r3, #2
 8014858:	4a1f      	ldr	r2, [pc, #124]	; (80148d8 <xTaskIncrementTick+0x164>)
 801485a:	441a      	add	r2, r3
 801485c:	68bb      	ldr	r3, [r7, #8]
 801485e:	3304      	adds	r3, #4
 8014860:	4619      	mov	r1, r3
 8014862:	4610      	mov	r0, r2
 8014864:	f7fe fd47 	bl	80132f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8014868:	68bb      	ldr	r3, [r7, #8]
 801486a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801486c:	4b1b      	ldr	r3, [pc, #108]	; (80148dc <xTaskIncrementTick+0x168>)
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014872:	429a      	cmp	r2, r3
 8014874:	d3b8      	bcc.n	80147e8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8014876:	2301      	movs	r3, #1
 8014878:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801487a:	e7b5      	b.n	80147e8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801487c:	4b17      	ldr	r3, [pc, #92]	; (80148dc <xTaskIncrementTick+0x168>)
 801487e:	681b      	ldr	r3, [r3, #0]
 8014880:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014882:	4915      	ldr	r1, [pc, #84]	; (80148d8 <xTaskIncrementTick+0x164>)
 8014884:	4613      	mov	r3, r2
 8014886:	009b      	lsls	r3, r3, #2
 8014888:	4413      	add	r3, r2
 801488a:	009b      	lsls	r3, r3, #2
 801488c:	440b      	add	r3, r1
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	2b01      	cmp	r3, #1
 8014892:	d901      	bls.n	8014898 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8014894:	2301      	movs	r3, #1
 8014896:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8014898:	4b11      	ldr	r3, [pc, #68]	; (80148e0 <xTaskIncrementTick+0x16c>)
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	2b00      	cmp	r3, #0
 801489e:	d007      	beq.n	80148b0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80148a0:	2301      	movs	r3, #1
 80148a2:	617b      	str	r3, [r7, #20]
 80148a4:	e004      	b.n	80148b0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80148a6:	4b0f      	ldr	r3, [pc, #60]	; (80148e4 <xTaskIncrementTick+0x170>)
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	3301      	adds	r3, #1
 80148ac:	4a0d      	ldr	r2, [pc, #52]	; (80148e4 <xTaskIncrementTick+0x170>)
 80148ae:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80148b0:	697b      	ldr	r3, [r7, #20]
}
 80148b2:	4618      	mov	r0, r3
 80148b4:	3718      	adds	r7, #24
 80148b6:	46bd      	mov	sp, r7
 80148b8:	bd80      	pop	{r7, pc}
 80148ba:	bf00      	nop
 80148bc:	24001ca4 	.word	0x24001ca4
 80148c0:	24001c80 	.word	0x24001c80
 80148c4:	24001c34 	.word	0x24001c34
 80148c8:	24001c38 	.word	0x24001c38
 80148cc:	24001c94 	.word	0x24001c94
 80148d0:	24001c9c 	.word	0x24001c9c
 80148d4:	24001c84 	.word	0x24001c84
 80148d8:	240017ac 	.word	0x240017ac
 80148dc:	240017a8 	.word	0x240017a8
 80148e0:	24001c90 	.word	0x24001c90
 80148e4:	24001c8c 	.word	0x24001c8c

080148e8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80148e8:	b480      	push	{r7}
 80148ea:	b085      	sub	sp, #20
 80148ec:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80148ee:	4b28      	ldr	r3, [pc, #160]	; (8014990 <vTaskSwitchContext+0xa8>)
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d003      	beq.n	80148fe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80148f6:	4b27      	ldr	r3, [pc, #156]	; (8014994 <vTaskSwitchContext+0xac>)
 80148f8:	2201      	movs	r2, #1
 80148fa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80148fc:	e041      	b.n	8014982 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80148fe:	4b25      	ldr	r3, [pc, #148]	; (8014994 <vTaskSwitchContext+0xac>)
 8014900:	2200      	movs	r2, #0
 8014902:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014904:	4b24      	ldr	r3, [pc, #144]	; (8014998 <vTaskSwitchContext+0xb0>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	60fb      	str	r3, [r7, #12]
 801490a:	e010      	b.n	801492e <vTaskSwitchContext+0x46>
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	2b00      	cmp	r3, #0
 8014910:	d10a      	bne.n	8014928 <vTaskSwitchContext+0x40>
	__asm volatile
 8014912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014916:	f383 8811 	msr	BASEPRI, r3
 801491a:	f3bf 8f6f 	isb	sy
 801491e:	f3bf 8f4f 	dsb	sy
 8014922:	607b      	str	r3, [r7, #4]
}
 8014924:	bf00      	nop
 8014926:	e7fe      	b.n	8014926 <vTaskSwitchContext+0x3e>
 8014928:	68fb      	ldr	r3, [r7, #12]
 801492a:	3b01      	subs	r3, #1
 801492c:	60fb      	str	r3, [r7, #12]
 801492e:	491b      	ldr	r1, [pc, #108]	; (801499c <vTaskSwitchContext+0xb4>)
 8014930:	68fa      	ldr	r2, [r7, #12]
 8014932:	4613      	mov	r3, r2
 8014934:	009b      	lsls	r3, r3, #2
 8014936:	4413      	add	r3, r2
 8014938:	009b      	lsls	r3, r3, #2
 801493a:	440b      	add	r3, r1
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	2b00      	cmp	r3, #0
 8014940:	d0e4      	beq.n	801490c <vTaskSwitchContext+0x24>
 8014942:	68fa      	ldr	r2, [r7, #12]
 8014944:	4613      	mov	r3, r2
 8014946:	009b      	lsls	r3, r3, #2
 8014948:	4413      	add	r3, r2
 801494a:	009b      	lsls	r3, r3, #2
 801494c:	4a13      	ldr	r2, [pc, #76]	; (801499c <vTaskSwitchContext+0xb4>)
 801494e:	4413      	add	r3, r2
 8014950:	60bb      	str	r3, [r7, #8]
 8014952:	68bb      	ldr	r3, [r7, #8]
 8014954:	685b      	ldr	r3, [r3, #4]
 8014956:	685a      	ldr	r2, [r3, #4]
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	605a      	str	r2, [r3, #4]
 801495c:	68bb      	ldr	r3, [r7, #8]
 801495e:	685a      	ldr	r2, [r3, #4]
 8014960:	68bb      	ldr	r3, [r7, #8]
 8014962:	3308      	adds	r3, #8
 8014964:	429a      	cmp	r2, r3
 8014966:	d104      	bne.n	8014972 <vTaskSwitchContext+0x8a>
 8014968:	68bb      	ldr	r3, [r7, #8]
 801496a:	685b      	ldr	r3, [r3, #4]
 801496c:	685a      	ldr	r2, [r3, #4]
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	605a      	str	r2, [r3, #4]
 8014972:	68bb      	ldr	r3, [r7, #8]
 8014974:	685b      	ldr	r3, [r3, #4]
 8014976:	68db      	ldr	r3, [r3, #12]
 8014978:	4a09      	ldr	r2, [pc, #36]	; (80149a0 <vTaskSwitchContext+0xb8>)
 801497a:	6013      	str	r3, [r2, #0]
 801497c:	4a06      	ldr	r2, [pc, #24]	; (8014998 <vTaskSwitchContext+0xb0>)
 801497e:	68fb      	ldr	r3, [r7, #12]
 8014980:	6013      	str	r3, [r2, #0]
}
 8014982:	bf00      	nop
 8014984:	3714      	adds	r7, #20
 8014986:	46bd      	mov	sp, r7
 8014988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801498c:	4770      	bx	lr
 801498e:	bf00      	nop
 8014990:	24001ca4 	.word	0x24001ca4
 8014994:	24001c90 	.word	0x24001c90
 8014998:	24001c84 	.word	0x24001c84
 801499c:	240017ac 	.word	0x240017ac
 80149a0:	240017a8 	.word	0x240017a8

080149a4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80149a4:	b580      	push	{r7, lr}
 80149a6:	b084      	sub	sp, #16
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d10a      	bne.n	80149ca <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80149b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149b8:	f383 8811 	msr	BASEPRI, r3
 80149bc:	f3bf 8f6f 	isb	sy
 80149c0:	f3bf 8f4f 	dsb	sy
 80149c4:	60fb      	str	r3, [r7, #12]
}
 80149c6:	bf00      	nop
 80149c8:	e7fe      	b.n	80149c8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80149ca:	4b07      	ldr	r3, [pc, #28]	; (80149e8 <vTaskPlaceOnEventList+0x44>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	3318      	adds	r3, #24
 80149d0:	4619      	mov	r1, r3
 80149d2:	6878      	ldr	r0, [r7, #4]
 80149d4:	f7fe fcb3 	bl	801333e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80149d8:	2101      	movs	r1, #1
 80149da:	6838      	ldr	r0, [r7, #0]
 80149dc:	f000 fb32 	bl	8015044 <prvAddCurrentTaskToDelayedList>
}
 80149e0:	bf00      	nop
 80149e2:	3710      	adds	r7, #16
 80149e4:	46bd      	mov	sp, r7
 80149e6:	bd80      	pop	{r7, pc}
 80149e8:	240017a8 	.word	0x240017a8

080149ec <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80149ec:	b580      	push	{r7, lr}
 80149ee:	b086      	sub	sp, #24
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	60b9      	str	r1, [r7, #8]
 80149f6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	d10a      	bne.n	8014a14 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 80149fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a02:	f383 8811 	msr	BASEPRI, r3
 8014a06:	f3bf 8f6f 	isb	sy
 8014a0a:	f3bf 8f4f 	dsb	sy
 8014a0e:	617b      	str	r3, [r7, #20]
}
 8014a10:	bf00      	nop
 8014a12:	e7fe      	b.n	8014a12 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8014a14:	4b11      	ldr	r3, [pc, #68]	; (8014a5c <vTaskPlaceOnUnorderedEventList+0x70>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	2b00      	cmp	r3, #0
 8014a1a:	d10a      	bne.n	8014a32 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8014a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a20:	f383 8811 	msr	BASEPRI, r3
 8014a24:	f3bf 8f6f 	isb	sy
 8014a28:	f3bf 8f4f 	dsb	sy
 8014a2c:	613b      	str	r3, [r7, #16]
}
 8014a2e:	bf00      	nop
 8014a30:	e7fe      	b.n	8014a30 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014a32:	4b0b      	ldr	r3, [pc, #44]	; (8014a60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014a34:	681b      	ldr	r3, [r3, #0]
 8014a36:	68ba      	ldr	r2, [r7, #8]
 8014a38:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8014a3c:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014a3e:	4b08      	ldr	r3, [pc, #32]	; (8014a60 <vTaskPlaceOnUnorderedEventList+0x74>)
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	3318      	adds	r3, #24
 8014a44:	4619      	mov	r1, r3
 8014a46:	68f8      	ldr	r0, [r7, #12]
 8014a48:	f7fe fc55 	bl	80132f6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8014a4c:	2101      	movs	r1, #1
 8014a4e:	6878      	ldr	r0, [r7, #4]
 8014a50:	f000 faf8 	bl	8015044 <prvAddCurrentTaskToDelayedList>
}
 8014a54:	bf00      	nop
 8014a56:	3718      	adds	r7, #24
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}
 8014a5c:	24001ca4 	.word	0x24001ca4
 8014a60:	240017a8 	.word	0x240017a8

08014a64 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8014a64:	b580      	push	{r7, lr}
 8014a66:	b086      	sub	sp, #24
 8014a68:	af00      	add	r7, sp, #0
 8014a6a:	60f8      	str	r0, [r7, #12]
 8014a6c:	60b9      	str	r1, [r7, #8]
 8014a6e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	2b00      	cmp	r3, #0
 8014a74:	d10a      	bne.n	8014a8c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8014a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a7a:	f383 8811 	msr	BASEPRI, r3
 8014a7e:	f3bf 8f6f 	isb	sy
 8014a82:	f3bf 8f4f 	dsb	sy
 8014a86:	617b      	str	r3, [r7, #20]
}
 8014a88:	bf00      	nop
 8014a8a:	e7fe      	b.n	8014a8a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8014a8c:	4b0a      	ldr	r3, [pc, #40]	; (8014ab8 <vTaskPlaceOnEventListRestricted+0x54>)
 8014a8e:	681b      	ldr	r3, [r3, #0]
 8014a90:	3318      	adds	r3, #24
 8014a92:	4619      	mov	r1, r3
 8014a94:	68f8      	ldr	r0, [r7, #12]
 8014a96:	f7fe fc2e 	bl	80132f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	2b00      	cmp	r3, #0
 8014a9e:	d002      	beq.n	8014aa6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8014aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014aa4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8014aa6:	6879      	ldr	r1, [r7, #4]
 8014aa8:	68b8      	ldr	r0, [r7, #8]
 8014aaa:	f000 facb 	bl	8015044 <prvAddCurrentTaskToDelayedList>
	}
 8014aae:	bf00      	nop
 8014ab0:	3718      	adds	r7, #24
 8014ab2:	46bd      	mov	sp, r7
 8014ab4:	bd80      	pop	{r7, pc}
 8014ab6:	bf00      	nop
 8014ab8:	240017a8 	.word	0x240017a8

08014abc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8014abc:	b580      	push	{r7, lr}
 8014abe:	b086      	sub	sp, #24
 8014ac0:	af00      	add	r7, sp, #0
 8014ac2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	68db      	ldr	r3, [r3, #12]
 8014ac8:	68db      	ldr	r3, [r3, #12]
 8014aca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8014acc:	693b      	ldr	r3, [r7, #16]
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d10a      	bne.n	8014ae8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8014ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad6:	f383 8811 	msr	BASEPRI, r3
 8014ada:	f3bf 8f6f 	isb	sy
 8014ade:	f3bf 8f4f 	dsb	sy
 8014ae2:	60fb      	str	r3, [r7, #12]
}
 8014ae4:	bf00      	nop
 8014ae6:	e7fe      	b.n	8014ae6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8014ae8:	693b      	ldr	r3, [r7, #16]
 8014aea:	3318      	adds	r3, #24
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7fe fc5f 	bl	80133b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014af2:	4b1e      	ldr	r3, [pc, #120]	; (8014b6c <xTaskRemoveFromEventList+0xb0>)
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d11d      	bne.n	8014b36 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014afa:	693b      	ldr	r3, [r7, #16]
 8014afc:	3304      	adds	r3, #4
 8014afe:	4618      	mov	r0, r3
 8014b00:	f7fe fc56 	bl	80133b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8014b04:	693b      	ldr	r3, [r7, #16]
 8014b06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b08:	4b19      	ldr	r3, [pc, #100]	; (8014b70 <xTaskRemoveFromEventList+0xb4>)
 8014b0a:	681b      	ldr	r3, [r3, #0]
 8014b0c:	429a      	cmp	r2, r3
 8014b0e:	d903      	bls.n	8014b18 <xTaskRemoveFromEventList+0x5c>
 8014b10:	693b      	ldr	r3, [r7, #16]
 8014b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b14:	4a16      	ldr	r2, [pc, #88]	; (8014b70 <xTaskRemoveFromEventList+0xb4>)
 8014b16:	6013      	str	r3, [r2, #0]
 8014b18:	693b      	ldr	r3, [r7, #16]
 8014b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b1c:	4613      	mov	r3, r2
 8014b1e:	009b      	lsls	r3, r3, #2
 8014b20:	4413      	add	r3, r2
 8014b22:	009b      	lsls	r3, r3, #2
 8014b24:	4a13      	ldr	r2, [pc, #76]	; (8014b74 <xTaskRemoveFromEventList+0xb8>)
 8014b26:	441a      	add	r2, r3
 8014b28:	693b      	ldr	r3, [r7, #16]
 8014b2a:	3304      	adds	r3, #4
 8014b2c:	4619      	mov	r1, r3
 8014b2e:	4610      	mov	r0, r2
 8014b30:	f7fe fbe1 	bl	80132f6 <vListInsertEnd>
 8014b34:	e005      	b.n	8014b42 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8014b36:	693b      	ldr	r3, [r7, #16]
 8014b38:	3318      	adds	r3, #24
 8014b3a:	4619      	mov	r1, r3
 8014b3c:	480e      	ldr	r0, [pc, #56]	; (8014b78 <xTaskRemoveFromEventList+0xbc>)
 8014b3e:	f7fe fbda 	bl	80132f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014b42:	693b      	ldr	r3, [r7, #16]
 8014b44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014b46:	4b0d      	ldr	r3, [pc, #52]	; (8014b7c <xTaskRemoveFromEventList+0xc0>)
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014b4c:	429a      	cmp	r2, r3
 8014b4e:	d905      	bls.n	8014b5c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014b50:	2301      	movs	r3, #1
 8014b52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8014b54:	4b0a      	ldr	r3, [pc, #40]	; (8014b80 <xTaskRemoveFromEventList+0xc4>)
 8014b56:	2201      	movs	r2, #1
 8014b58:	601a      	str	r2, [r3, #0]
 8014b5a:	e001      	b.n	8014b60 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8014b5c:	2300      	movs	r3, #0
 8014b5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014b60:	697b      	ldr	r3, [r7, #20]
}
 8014b62:	4618      	mov	r0, r3
 8014b64:	3718      	adds	r7, #24
 8014b66:	46bd      	mov	sp, r7
 8014b68:	bd80      	pop	{r7, pc}
 8014b6a:	bf00      	nop
 8014b6c:	24001ca4 	.word	0x24001ca4
 8014b70:	24001c84 	.word	0x24001c84
 8014b74:	240017ac 	.word	0x240017ac
 8014b78:	24001c3c 	.word	0x24001c3c
 8014b7c:	240017a8 	.word	0x240017a8
 8014b80:	24001c90 	.word	0x24001c90

08014b84 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8014b84:	b580      	push	{r7, lr}
 8014b86:	b086      	sub	sp, #24
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	6078      	str	r0, [r7, #4]
 8014b8c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8014b8e:	4b29      	ldr	r3, [pc, #164]	; (8014c34 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d10a      	bne.n	8014bac <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8014b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b9a:	f383 8811 	msr	BASEPRI, r3
 8014b9e:	f3bf 8f6f 	isb	sy
 8014ba2:	f3bf 8f4f 	dsb	sy
 8014ba6:	613b      	str	r3, [r7, #16]
}
 8014ba8:	bf00      	nop
 8014baa:	e7fe      	b.n	8014baa <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8014bac:	683b      	ldr	r3, [r7, #0]
 8014bae:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8014bbc:	697b      	ldr	r3, [r7, #20]
 8014bbe:	2b00      	cmp	r3, #0
 8014bc0:	d10a      	bne.n	8014bd8 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8014bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc6:	f383 8811 	msr	BASEPRI, r3
 8014bca:	f3bf 8f6f 	isb	sy
 8014bce:	f3bf 8f4f 	dsb	sy
 8014bd2:	60fb      	str	r3, [r7, #12]
}
 8014bd4:	bf00      	nop
 8014bd6:	e7fe      	b.n	8014bd6 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8014bd8:	6878      	ldr	r0, [r7, #4]
 8014bda:	f7fe fbe9 	bl	80133b0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8014bde:	697b      	ldr	r3, [r7, #20]
 8014be0:	3304      	adds	r3, #4
 8014be2:	4618      	mov	r0, r3
 8014be4:	f7fe fbe4 	bl	80133b0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8014be8:	697b      	ldr	r3, [r7, #20]
 8014bea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014bec:	4b12      	ldr	r3, [pc, #72]	; (8014c38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014bee:	681b      	ldr	r3, [r3, #0]
 8014bf0:	429a      	cmp	r2, r3
 8014bf2:	d903      	bls.n	8014bfc <vTaskRemoveFromUnorderedEventList+0x78>
 8014bf4:	697b      	ldr	r3, [r7, #20]
 8014bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014bf8:	4a0f      	ldr	r2, [pc, #60]	; (8014c38 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8014bfa:	6013      	str	r3, [r2, #0]
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c00:	4613      	mov	r3, r2
 8014c02:	009b      	lsls	r3, r3, #2
 8014c04:	4413      	add	r3, r2
 8014c06:	009b      	lsls	r3, r3, #2
 8014c08:	4a0c      	ldr	r2, [pc, #48]	; (8014c3c <vTaskRemoveFromUnorderedEventList+0xb8>)
 8014c0a:	441a      	add	r2, r3
 8014c0c:	697b      	ldr	r3, [r7, #20]
 8014c0e:	3304      	adds	r3, #4
 8014c10:	4619      	mov	r1, r3
 8014c12:	4610      	mov	r0, r2
 8014c14:	f7fe fb6f 	bl	80132f6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8014c18:	697b      	ldr	r3, [r7, #20]
 8014c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014c1c:	4b08      	ldr	r3, [pc, #32]	; (8014c40 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8014c1e:	681b      	ldr	r3, [r3, #0]
 8014c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014c22:	429a      	cmp	r2, r3
 8014c24:	d902      	bls.n	8014c2c <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8014c26:	4b07      	ldr	r3, [pc, #28]	; (8014c44 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8014c28:	2201      	movs	r2, #1
 8014c2a:	601a      	str	r2, [r3, #0]
	}
}
 8014c2c:	bf00      	nop
 8014c2e:	3718      	adds	r7, #24
 8014c30:	46bd      	mov	sp, r7
 8014c32:	bd80      	pop	{r7, pc}
 8014c34:	24001ca4 	.word	0x24001ca4
 8014c38:	24001c84 	.word	0x24001c84
 8014c3c:	240017ac 	.word	0x240017ac
 8014c40:	240017a8 	.word	0x240017a8
 8014c44:	24001c90 	.word	0x24001c90

08014c48 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014c50:	4b06      	ldr	r3, [pc, #24]	; (8014c6c <vTaskInternalSetTimeOutState+0x24>)
 8014c52:	681a      	ldr	r2, [r3, #0]
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014c58:	4b05      	ldr	r3, [pc, #20]	; (8014c70 <vTaskInternalSetTimeOutState+0x28>)
 8014c5a:	681a      	ldr	r2, [r3, #0]
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	605a      	str	r2, [r3, #4]
}
 8014c60:	bf00      	nop
 8014c62:	370c      	adds	r7, #12
 8014c64:	46bd      	mov	sp, r7
 8014c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c6a:	4770      	bx	lr
 8014c6c:	24001c94 	.word	0x24001c94
 8014c70:	24001c80 	.word	0x24001c80

08014c74 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014c74:	b580      	push	{r7, lr}
 8014c76:	b088      	sub	sp, #32
 8014c78:	af00      	add	r7, sp, #0
 8014c7a:	6078      	str	r0, [r7, #4]
 8014c7c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	2b00      	cmp	r3, #0
 8014c82:	d10a      	bne.n	8014c9a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8014c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014c88:	f383 8811 	msr	BASEPRI, r3
 8014c8c:	f3bf 8f6f 	isb	sy
 8014c90:	f3bf 8f4f 	dsb	sy
 8014c94:	613b      	str	r3, [r7, #16]
}
 8014c96:	bf00      	nop
 8014c98:	e7fe      	b.n	8014c98 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8014c9a:	683b      	ldr	r3, [r7, #0]
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d10a      	bne.n	8014cb6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8014ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ca4:	f383 8811 	msr	BASEPRI, r3
 8014ca8:	f3bf 8f6f 	isb	sy
 8014cac:	f3bf 8f4f 	dsb	sy
 8014cb0:	60fb      	str	r3, [r7, #12]
}
 8014cb2:	bf00      	nop
 8014cb4:	e7fe      	b.n	8014cb4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8014cb6:	f000 feb5 	bl	8015a24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8014cba:	4b1d      	ldr	r3, [pc, #116]	; (8014d30 <xTaskCheckForTimeOut+0xbc>)
 8014cbc:	681b      	ldr	r3, [r3, #0]
 8014cbe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	685b      	ldr	r3, [r3, #4]
 8014cc4:	69ba      	ldr	r2, [r7, #24]
 8014cc6:	1ad3      	subs	r3, r2, r3
 8014cc8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8014cca:	683b      	ldr	r3, [r7, #0]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014cd2:	d102      	bne.n	8014cda <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8014cd4:	2300      	movs	r3, #0
 8014cd6:	61fb      	str	r3, [r7, #28]
 8014cd8:	e023      	b.n	8014d22 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681a      	ldr	r2, [r3, #0]
 8014cde:	4b15      	ldr	r3, [pc, #84]	; (8014d34 <xTaskCheckForTimeOut+0xc0>)
 8014ce0:	681b      	ldr	r3, [r3, #0]
 8014ce2:	429a      	cmp	r2, r3
 8014ce4:	d007      	beq.n	8014cf6 <xTaskCheckForTimeOut+0x82>
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	685b      	ldr	r3, [r3, #4]
 8014cea:	69ba      	ldr	r2, [r7, #24]
 8014cec:	429a      	cmp	r2, r3
 8014cee:	d302      	bcc.n	8014cf6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8014cf0:	2301      	movs	r3, #1
 8014cf2:	61fb      	str	r3, [r7, #28]
 8014cf4:	e015      	b.n	8014d22 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8014cf6:	683b      	ldr	r3, [r7, #0]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	697a      	ldr	r2, [r7, #20]
 8014cfc:	429a      	cmp	r2, r3
 8014cfe:	d20b      	bcs.n	8014d18 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	681a      	ldr	r2, [r3, #0]
 8014d04:	697b      	ldr	r3, [r7, #20]
 8014d06:	1ad2      	subs	r2, r2, r3
 8014d08:	683b      	ldr	r3, [r7, #0]
 8014d0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014d0c:	6878      	ldr	r0, [r7, #4]
 8014d0e:	f7ff ff9b 	bl	8014c48 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8014d12:	2300      	movs	r3, #0
 8014d14:	61fb      	str	r3, [r7, #28]
 8014d16:	e004      	b.n	8014d22 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8014d18:	683b      	ldr	r3, [r7, #0]
 8014d1a:	2200      	movs	r2, #0
 8014d1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014d1e:	2301      	movs	r3, #1
 8014d20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8014d22:	f000 feaf 	bl	8015a84 <vPortExitCritical>

	return xReturn;
 8014d26:	69fb      	ldr	r3, [r7, #28]
}
 8014d28:	4618      	mov	r0, r3
 8014d2a:	3720      	adds	r7, #32
 8014d2c:	46bd      	mov	sp, r7
 8014d2e:	bd80      	pop	{r7, pc}
 8014d30:	24001c80 	.word	0x24001c80
 8014d34:	24001c94 	.word	0x24001c94

08014d38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014d38:	b480      	push	{r7}
 8014d3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014d3c:	4b03      	ldr	r3, [pc, #12]	; (8014d4c <vTaskMissedYield+0x14>)
 8014d3e:	2201      	movs	r2, #1
 8014d40:	601a      	str	r2, [r3, #0]
}
 8014d42:	bf00      	nop
 8014d44:	46bd      	mov	sp, r7
 8014d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d4a:	4770      	bx	lr
 8014d4c:	24001c90 	.word	0x24001c90

08014d50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b082      	sub	sp, #8
 8014d54:	af00      	add	r7, sp, #0
 8014d56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014d58:	f000 f852 	bl	8014e00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014d5c:	4b06      	ldr	r3, [pc, #24]	; (8014d78 <prvIdleTask+0x28>)
 8014d5e:	681b      	ldr	r3, [r3, #0]
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	d9f9      	bls.n	8014d58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8014d64:	4b05      	ldr	r3, [pc, #20]	; (8014d7c <prvIdleTask+0x2c>)
 8014d66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014d6a:	601a      	str	r2, [r3, #0]
 8014d6c:	f3bf 8f4f 	dsb	sy
 8014d70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8014d74:	e7f0      	b.n	8014d58 <prvIdleTask+0x8>
 8014d76:	bf00      	nop
 8014d78:	240017ac 	.word	0x240017ac
 8014d7c:	e000ed04 	.word	0xe000ed04

08014d80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014d80:	b580      	push	{r7, lr}
 8014d82:	b082      	sub	sp, #8
 8014d84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014d86:	2300      	movs	r3, #0
 8014d88:	607b      	str	r3, [r7, #4]
 8014d8a:	e00c      	b.n	8014da6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014d8c:	687a      	ldr	r2, [r7, #4]
 8014d8e:	4613      	mov	r3, r2
 8014d90:	009b      	lsls	r3, r3, #2
 8014d92:	4413      	add	r3, r2
 8014d94:	009b      	lsls	r3, r3, #2
 8014d96:	4a12      	ldr	r2, [pc, #72]	; (8014de0 <prvInitialiseTaskLists+0x60>)
 8014d98:	4413      	add	r3, r2
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	f7fe fa7e 	bl	801329c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	3301      	adds	r3, #1
 8014da4:	607b      	str	r3, [r7, #4]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	2b37      	cmp	r3, #55	; 0x37
 8014daa:	d9ef      	bls.n	8014d8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8014dac:	480d      	ldr	r0, [pc, #52]	; (8014de4 <prvInitialiseTaskLists+0x64>)
 8014dae:	f7fe fa75 	bl	801329c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8014db2:	480d      	ldr	r0, [pc, #52]	; (8014de8 <prvInitialiseTaskLists+0x68>)
 8014db4:	f7fe fa72 	bl	801329c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8014db8:	480c      	ldr	r0, [pc, #48]	; (8014dec <prvInitialiseTaskLists+0x6c>)
 8014dba:	f7fe fa6f 	bl	801329c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8014dbe:	480c      	ldr	r0, [pc, #48]	; (8014df0 <prvInitialiseTaskLists+0x70>)
 8014dc0:	f7fe fa6c 	bl	801329c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8014dc4:	480b      	ldr	r0, [pc, #44]	; (8014df4 <prvInitialiseTaskLists+0x74>)
 8014dc6:	f7fe fa69 	bl	801329c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8014dca:	4b0b      	ldr	r3, [pc, #44]	; (8014df8 <prvInitialiseTaskLists+0x78>)
 8014dcc:	4a05      	ldr	r2, [pc, #20]	; (8014de4 <prvInitialiseTaskLists+0x64>)
 8014dce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8014dd0:	4b0a      	ldr	r3, [pc, #40]	; (8014dfc <prvInitialiseTaskLists+0x7c>)
 8014dd2:	4a05      	ldr	r2, [pc, #20]	; (8014de8 <prvInitialiseTaskLists+0x68>)
 8014dd4:	601a      	str	r2, [r3, #0]
}
 8014dd6:	bf00      	nop
 8014dd8:	3708      	adds	r7, #8
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	bd80      	pop	{r7, pc}
 8014dde:	bf00      	nop
 8014de0:	240017ac 	.word	0x240017ac
 8014de4:	24001c0c 	.word	0x24001c0c
 8014de8:	24001c20 	.word	0x24001c20
 8014dec:	24001c3c 	.word	0x24001c3c
 8014df0:	24001c50 	.word	0x24001c50
 8014df4:	24001c68 	.word	0x24001c68
 8014df8:	24001c34 	.word	0x24001c34
 8014dfc:	24001c38 	.word	0x24001c38

08014e00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b082      	sub	sp, #8
 8014e04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014e06:	e019      	b.n	8014e3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014e08:	f000 fe0c 	bl	8015a24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014e0c:	4b10      	ldr	r3, [pc, #64]	; (8014e50 <prvCheckTasksWaitingTermination+0x50>)
 8014e0e:	68db      	ldr	r3, [r3, #12]
 8014e10:	68db      	ldr	r3, [r3, #12]
 8014e12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	3304      	adds	r3, #4
 8014e18:	4618      	mov	r0, r3
 8014e1a:	f7fe fac9 	bl	80133b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014e1e:	4b0d      	ldr	r3, [pc, #52]	; (8014e54 <prvCheckTasksWaitingTermination+0x54>)
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	3b01      	subs	r3, #1
 8014e24:	4a0b      	ldr	r2, [pc, #44]	; (8014e54 <prvCheckTasksWaitingTermination+0x54>)
 8014e26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014e28:	4b0b      	ldr	r3, [pc, #44]	; (8014e58 <prvCheckTasksWaitingTermination+0x58>)
 8014e2a:	681b      	ldr	r3, [r3, #0]
 8014e2c:	3b01      	subs	r3, #1
 8014e2e:	4a0a      	ldr	r2, [pc, #40]	; (8014e58 <prvCheckTasksWaitingTermination+0x58>)
 8014e30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8014e32:	f000 fe27 	bl	8015a84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8014e36:	6878      	ldr	r0, [r7, #4]
 8014e38:	f000 f810 	bl	8014e5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014e3c:	4b06      	ldr	r3, [pc, #24]	; (8014e58 <prvCheckTasksWaitingTermination+0x58>)
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d1e1      	bne.n	8014e08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8014e44:	bf00      	nop
 8014e46:	bf00      	nop
 8014e48:	3708      	adds	r7, #8
 8014e4a:	46bd      	mov	sp, r7
 8014e4c:	bd80      	pop	{r7, pc}
 8014e4e:	bf00      	nop
 8014e50:	24001c50 	.word	0x24001c50
 8014e54:	24001c7c 	.word	0x24001c7c
 8014e58:	24001c64 	.word	0x24001c64

08014e5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014e5c:	b580      	push	{r7, lr}
 8014e5e:	b084      	sub	sp, #16
 8014e60:	af00      	add	r7, sp, #0
 8014e62:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014e6a:	2b00      	cmp	r3, #0
 8014e6c:	d108      	bne.n	8014e80 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e72:	4618      	mov	r0, r3
 8014e74:	f000 ffc4 	bl	8015e00 <vPortFree>
				vPortFree( pxTCB );
 8014e78:	6878      	ldr	r0, [r7, #4]
 8014e7a:	f000 ffc1 	bl	8015e00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014e7e:	e018      	b.n	8014eb2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014e86:	2b01      	cmp	r3, #1
 8014e88:	d103      	bne.n	8014e92 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8014e8a:	6878      	ldr	r0, [r7, #4]
 8014e8c:	f000 ffb8 	bl	8015e00 <vPortFree>
	}
 8014e90:	e00f      	b.n	8014eb2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8014e98:	2b02      	cmp	r3, #2
 8014e9a:	d00a      	beq.n	8014eb2 <prvDeleteTCB+0x56>
	__asm volatile
 8014e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ea0:	f383 8811 	msr	BASEPRI, r3
 8014ea4:	f3bf 8f6f 	isb	sy
 8014ea8:	f3bf 8f4f 	dsb	sy
 8014eac:	60fb      	str	r3, [r7, #12]
}
 8014eae:	bf00      	nop
 8014eb0:	e7fe      	b.n	8014eb0 <prvDeleteTCB+0x54>
	}
 8014eb2:	bf00      	nop
 8014eb4:	3710      	adds	r7, #16
 8014eb6:	46bd      	mov	sp, r7
 8014eb8:	bd80      	pop	{r7, pc}
	...

08014ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8014ebc:	b480      	push	{r7}
 8014ebe:	b083      	sub	sp, #12
 8014ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8014ec2:	4b0c      	ldr	r3, [pc, #48]	; (8014ef4 <prvResetNextTaskUnblockTime+0x38>)
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	681b      	ldr	r3, [r3, #0]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d104      	bne.n	8014ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8014ecc:	4b0a      	ldr	r3, [pc, #40]	; (8014ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8014ece:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8014ed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8014ed4:	e008      	b.n	8014ee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014ed6:	4b07      	ldr	r3, [pc, #28]	; (8014ef4 <prvResetNextTaskUnblockTime+0x38>)
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	68db      	ldr	r3, [r3, #12]
 8014edc:	68db      	ldr	r3, [r3, #12]
 8014ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8014ee0:	687b      	ldr	r3, [r7, #4]
 8014ee2:	685b      	ldr	r3, [r3, #4]
 8014ee4:	4a04      	ldr	r2, [pc, #16]	; (8014ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8014ee6:	6013      	str	r3, [r2, #0]
}
 8014ee8:	bf00      	nop
 8014eea:	370c      	adds	r7, #12
 8014eec:	46bd      	mov	sp, r7
 8014eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef2:	4770      	bx	lr
 8014ef4:	24001c34 	.word	0x24001c34
 8014ef8:	24001c9c 	.word	0x24001c9c

08014efc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014efc:	b480      	push	{r7}
 8014efe:	b083      	sub	sp, #12
 8014f00:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014f02:	4b0b      	ldr	r3, [pc, #44]	; (8014f30 <xTaskGetSchedulerState+0x34>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	2b00      	cmp	r3, #0
 8014f08:	d102      	bne.n	8014f10 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	607b      	str	r3, [r7, #4]
 8014f0e:	e008      	b.n	8014f22 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014f10:	4b08      	ldr	r3, [pc, #32]	; (8014f34 <xTaskGetSchedulerState+0x38>)
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	2b00      	cmp	r3, #0
 8014f16:	d102      	bne.n	8014f1e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8014f18:	2302      	movs	r3, #2
 8014f1a:	607b      	str	r3, [r7, #4]
 8014f1c:	e001      	b.n	8014f22 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014f1e:	2300      	movs	r3, #0
 8014f20:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014f22:	687b      	ldr	r3, [r7, #4]
	}
 8014f24:	4618      	mov	r0, r3
 8014f26:	370c      	adds	r7, #12
 8014f28:	46bd      	mov	sp, r7
 8014f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f2e:	4770      	bx	lr
 8014f30:	24001c88 	.word	0x24001c88
 8014f34:	24001ca4 	.word	0x24001ca4

08014f38 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8014f38:	b580      	push	{r7, lr}
 8014f3a:	b086      	sub	sp, #24
 8014f3c:	af00      	add	r7, sp, #0
 8014f3e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014f44:	2300      	movs	r3, #0
 8014f46:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	2b00      	cmp	r3, #0
 8014f4c:	d056      	beq.n	8014ffc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014f4e:	4b2e      	ldr	r3, [pc, #184]	; (8015008 <xTaskPriorityDisinherit+0xd0>)
 8014f50:	681b      	ldr	r3, [r3, #0]
 8014f52:	693a      	ldr	r2, [r7, #16]
 8014f54:	429a      	cmp	r2, r3
 8014f56:	d00a      	beq.n	8014f6e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8014f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f5c:	f383 8811 	msr	BASEPRI, r3
 8014f60:	f3bf 8f6f 	isb	sy
 8014f64:	f3bf 8f4f 	dsb	sy
 8014f68:	60fb      	str	r3, [r7, #12]
}
 8014f6a:	bf00      	nop
 8014f6c:	e7fe      	b.n	8014f6c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8014f6e:	693b      	ldr	r3, [r7, #16]
 8014f70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d10a      	bne.n	8014f8c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8014f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014f7a:	f383 8811 	msr	BASEPRI, r3
 8014f7e:	f3bf 8f6f 	isb	sy
 8014f82:	f3bf 8f4f 	dsb	sy
 8014f86:	60bb      	str	r3, [r7, #8]
}
 8014f88:	bf00      	nop
 8014f8a:	e7fe      	b.n	8014f8a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8014f8c:	693b      	ldr	r3, [r7, #16]
 8014f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014f90:	1e5a      	subs	r2, r3, #1
 8014f92:	693b      	ldr	r3, [r7, #16]
 8014f94:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8014f96:	693b      	ldr	r3, [r7, #16]
 8014f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014f9a:	693b      	ldr	r3, [r7, #16]
 8014f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014f9e:	429a      	cmp	r2, r3
 8014fa0:	d02c      	beq.n	8014ffc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8014fa2:	693b      	ldr	r3, [r7, #16]
 8014fa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014fa6:	2b00      	cmp	r3, #0
 8014fa8:	d128      	bne.n	8014ffc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8014faa:	693b      	ldr	r3, [r7, #16]
 8014fac:	3304      	adds	r3, #4
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f7fe f9fe 	bl	80133b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8014fb4:	693b      	ldr	r3, [r7, #16]
 8014fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014fb8:	693b      	ldr	r3, [r7, #16]
 8014fba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014fbc:	693b      	ldr	r3, [r7, #16]
 8014fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fc0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8014fc4:	693b      	ldr	r3, [r7, #16]
 8014fc6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014fc8:	693b      	ldr	r3, [r7, #16]
 8014fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fcc:	4b0f      	ldr	r3, [pc, #60]	; (801500c <xTaskPriorityDisinherit+0xd4>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	429a      	cmp	r2, r3
 8014fd2:	d903      	bls.n	8014fdc <xTaskPriorityDisinherit+0xa4>
 8014fd4:	693b      	ldr	r3, [r7, #16]
 8014fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014fd8:	4a0c      	ldr	r2, [pc, #48]	; (801500c <xTaskPriorityDisinherit+0xd4>)
 8014fda:	6013      	str	r3, [r2, #0]
 8014fdc:	693b      	ldr	r3, [r7, #16]
 8014fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014fe0:	4613      	mov	r3, r2
 8014fe2:	009b      	lsls	r3, r3, #2
 8014fe4:	4413      	add	r3, r2
 8014fe6:	009b      	lsls	r3, r3, #2
 8014fe8:	4a09      	ldr	r2, [pc, #36]	; (8015010 <xTaskPriorityDisinherit+0xd8>)
 8014fea:	441a      	add	r2, r3
 8014fec:	693b      	ldr	r3, [r7, #16]
 8014fee:	3304      	adds	r3, #4
 8014ff0:	4619      	mov	r1, r3
 8014ff2:	4610      	mov	r0, r2
 8014ff4:	f7fe f97f 	bl	80132f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014ff8:	2301      	movs	r3, #1
 8014ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014ffc:	697b      	ldr	r3, [r7, #20]
	}
 8014ffe:	4618      	mov	r0, r3
 8015000:	3718      	adds	r7, #24
 8015002:	46bd      	mov	sp, r7
 8015004:	bd80      	pop	{r7, pc}
 8015006:	bf00      	nop
 8015008:	240017a8 	.word	0x240017a8
 801500c:	24001c84 	.word	0x24001c84
 8015010:	240017ac 	.word	0x240017ac

08015014 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8015014:	b480      	push	{r7}
 8015016:	b083      	sub	sp, #12
 8015018:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 801501a:	4b09      	ldr	r3, [pc, #36]	; (8015040 <uxTaskResetEventItemValue+0x2c>)
 801501c:	681b      	ldr	r3, [r3, #0]
 801501e:	699b      	ldr	r3, [r3, #24]
 8015020:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8015022:	4b07      	ldr	r3, [pc, #28]	; (8015040 <uxTaskResetEventItemValue+0x2c>)
 8015024:	681b      	ldr	r3, [r3, #0]
 8015026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8015028:	4b05      	ldr	r3, [pc, #20]	; (8015040 <uxTaskResetEventItemValue+0x2c>)
 801502a:	681b      	ldr	r3, [r3, #0]
 801502c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8015030:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8015032:	687b      	ldr	r3, [r7, #4]
}
 8015034:	4618      	mov	r0, r3
 8015036:	370c      	adds	r7, #12
 8015038:	46bd      	mov	sp, r7
 801503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801503e:	4770      	bx	lr
 8015040:	240017a8 	.word	0x240017a8

08015044 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8015044:	b580      	push	{r7, lr}
 8015046:	b084      	sub	sp, #16
 8015048:	af00      	add	r7, sp, #0
 801504a:	6078      	str	r0, [r7, #4]
 801504c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801504e:	4b21      	ldr	r3, [pc, #132]	; (80150d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8015050:	681b      	ldr	r3, [r3, #0]
 8015052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8015054:	4b20      	ldr	r3, [pc, #128]	; (80150d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	3304      	adds	r3, #4
 801505a:	4618      	mov	r0, r3
 801505c:	f7fe f9a8 	bl	80133b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015066:	d10a      	bne.n	801507e <prvAddCurrentTaskToDelayedList+0x3a>
 8015068:	683b      	ldr	r3, [r7, #0]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d007      	beq.n	801507e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801506e:	4b1a      	ldr	r3, [pc, #104]	; (80150d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015070:	681b      	ldr	r3, [r3, #0]
 8015072:	3304      	adds	r3, #4
 8015074:	4619      	mov	r1, r3
 8015076:	4819      	ldr	r0, [pc, #100]	; (80150dc <prvAddCurrentTaskToDelayedList+0x98>)
 8015078:	f7fe f93d 	bl	80132f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801507c:	e026      	b.n	80150cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801507e:	68fa      	ldr	r2, [r7, #12]
 8015080:	687b      	ldr	r3, [r7, #4]
 8015082:	4413      	add	r3, r2
 8015084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8015086:	4b14      	ldr	r3, [pc, #80]	; (80150d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8015088:	681b      	ldr	r3, [r3, #0]
 801508a:	68ba      	ldr	r2, [r7, #8]
 801508c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801508e:	68ba      	ldr	r2, [r7, #8]
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	429a      	cmp	r2, r3
 8015094:	d209      	bcs.n	80150aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8015096:	4b12      	ldr	r3, [pc, #72]	; (80150e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8015098:	681a      	ldr	r2, [r3, #0]
 801509a:	4b0f      	ldr	r3, [pc, #60]	; (80150d8 <prvAddCurrentTaskToDelayedList+0x94>)
 801509c:	681b      	ldr	r3, [r3, #0]
 801509e:	3304      	adds	r3, #4
 80150a0:	4619      	mov	r1, r3
 80150a2:	4610      	mov	r0, r2
 80150a4:	f7fe f94b 	bl	801333e <vListInsert>
}
 80150a8:	e010      	b.n	80150cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80150aa:	4b0e      	ldr	r3, [pc, #56]	; (80150e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80150ac:	681a      	ldr	r2, [r3, #0]
 80150ae:	4b0a      	ldr	r3, [pc, #40]	; (80150d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	3304      	adds	r3, #4
 80150b4:	4619      	mov	r1, r3
 80150b6:	4610      	mov	r0, r2
 80150b8:	f7fe f941 	bl	801333e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80150bc:	4b0a      	ldr	r3, [pc, #40]	; (80150e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	68ba      	ldr	r2, [r7, #8]
 80150c2:	429a      	cmp	r2, r3
 80150c4:	d202      	bcs.n	80150cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80150c6:	4a08      	ldr	r2, [pc, #32]	; (80150e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80150c8:	68bb      	ldr	r3, [r7, #8]
 80150ca:	6013      	str	r3, [r2, #0]
}
 80150cc:	bf00      	nop
 80150ce:	3710      	adds	r7, #16
 80150d0:	46bd      	mov	sp, r7
 80150d2:	bd80      	pop	{r7, pc}
 80150d4:	24001c80 	.word	0x24001c80
 80150d8:	240017a8 	.word	0x240017a8
 80150dc:	24001c68 	.word	0x24001c68
 80150e0:	24001c38 	.word	0x24001c38
 80150e4:	24001c34 	.word	0x24001c34
 80150e8:	24001c9c 	.word	0x24001c9c

080150ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b08a      	sub	sp, #40	; 0x28
 80150f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80150f2:	2300      	movs	r3, #0
 80150f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80150f6:	f000 fb07 	bl	8015708 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80150fa:	4b1c      	ldr	r3, [pc, #112]	; (801516c <xTimerCreateTimerTask+0x80>)
 80150fc:	681b      	ldr	r3, [r3, #0]
 80150fe:	2b00      	cmp	r3, #0
 8015100:	d021      	beq.n	8015146 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8015102:	2300      	movs	r3, #0
 8015104:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8015106:	2300      	movs	r3, #0
 8015108:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801510a:	1d3a      	adds	r2, r7, #4
 801510c:	f107 0108 	add.w	r1, r7, #8
 8015110:	f107 030c 	add.w	r3, r7, #12
 8015114:	4618      	mov	r0, r3
 8015116:	f7fd feb9 	bl	8012e8c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801511a:	6879      	ldr	r1, [r7, #4]
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	68fa      	ldr	r2, [r7, #12]
 8015120:	9202      	str	r2, [sp, #8]
 8015122:	9301      	str	r3, [sp, #4]
 8015124:	2302      	movs	r3, #2
 8015126:	9300      	str	r3, [sp, #0]
 8015128:	2300      	movs	r3, #0
 801512a:	460a      	mov	r2, r1
 801512c:	4910      	ldr	r1, [pc, #64]	; (8015170 <xTimerCreateTimerTask+0x84>)
 801512e:	4811      	ldr	r0, [pc, #68]	; (8015174 <xTimerCreateTimerTask+0x88>)
 8015130:	f7fe ff0e 	bl	8013f50 <xTaskCreateStatic>
 8015134:	4603      	mov	r3, r0
 8015136:	4a10      	ldr	r2, [pc, #64]	; (8015178 <xTimerCreateTimerTask+0x8c>)
 8015138:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801513a:	4b0f      	ldr	r3, [pc, #60]	; (8015178 <xTimerCreateTimerTask+0x8c>)
 801513c:	681b      	ldr	r3, [r3, #0]
 801513e:	2b00      	cmp	r3, #0
 8015140:	d001      	beq.n	8015146 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8015142:	2301      	movs	r3, #1
 8015144:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8015146:	697b      	ldr	r3, [r7, #20]
 8015148:	2b00      	cmp	r3, #0
 801514a:	d10a      	bne.n	8015162 <xTimerCreateTimerTask+0x76>
	__asm volatile
 801514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015150:	f383 8811 	msr	BASEPRI, r3
 8015154:	f3bf 8f6f 	isb	sy
 8015158:	f3bf 8f4f 	dsb	sy
 801515c:	613b      	str	r3, [r7, #16]
}
 801515e:	bf00      	nop
 8015160:	e7fe      	b.n	8015160 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8015162:	697b      	ldr	r3, [r7, #20]
}
 8015164:	4618      	mov	r0, r3
 8015166:	3718      	adds	r7, #24
 8015168:	46bd      	mov	sp, r7
 801516a:	bd80      	pop	{r7, pc}
 801516c:	24001cd8 	.word	0x24001cd8
 8015170:	08016d54 	.word	0x08016d54
 8015174:	080152b1 	.word	0x080152b1
 8015178:	24001cdc 	.word	0x24001cdc

0801517c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801517c:	b580      	push	{r7, lr}
 801517e:	b08a      	sub	sp, #40	; 0x28
 8015180:	af00      	add	r7, sp, #0
 8015182:	60f8      	str	r0, [r7, #12]
 8015184:	60b9      	str	r1, [r7, #8]
 8015186:	607a      	str	r2, [r7, #4]
 8015188:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801518a:	2300      	movs	r3, #0
 801518c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	2b00      	cmp	r3, #0
 8015192:	d10a      	bne.n	80151aa <xTimerGenericCommand+0x2e>
	__asm volatile
 8015194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015198:	f383 8811 	msr	BASEPRI, r3
 801519c:	f3bf 8f6f 	isb	sy
 80151a0:	f3bf 8f4f 	dsb	sy
 80151a4:	623b      	str	r3, [r7, #32]
}
 80151a6:	bf00      	nop
 80151a8:	e7fe      	b.n	80151a8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80151aa:	4b1a      	ldr	r3, [pc, #104]	; (8015214 <xTimerGenericCommand+0x98>)
 80151ac:	681b      	ldr	r3, [r3, #0]
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d02a      	beq.n	8015208 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80151b2:	68bb      	ldr	r3, [r7, #8]
 80151b4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80151be:	68bb      	ldr	r3, [r7, #8]
 80151c0:	2b05      	cmp	r3, #5
 80151c2:	dc18      	bgt.n	80151f6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80151c4:	f7ff fe9a 	bl	8014efc <xTaskGetSchedulerState>
 80151c8:	4603      	mov	r3, r0
 80151ca:	2b02      	cmp	r3, #2
 80151cc:	d109      	bne.n	80151e2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80151ce:	4b11      	ldr	r3, [pc, #68]	; (8015214 <xTimerGenericCommand+0x98>)
 80151d0:	6818      	ldr	r0, [r3, #0]
 80151d2:	f107 0110 	add.w	r1, r7, #16
 80151d6:	2300      	movs	r3, #0
 80151d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80151da:	f7fe fa51 	bl	8013680 <xQueueGenericSend>
 80151de:	6278      	str	r0, [r7, #36]	; 0x24
 80151e0:	e012      	b.n	8015208 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80151e2:	4b0c      	ldr	r3, [pc, #48]	; (8015214 <xTimerGenericCommand+0x98>)
 80151e4:	6818      	ldr	r0, [r3, #0]
 80151e6:	f107 0110 	add.w	r1, r7, #16
 80151ea:	2300      	movs	r3, #0
 80151ec:	2200      	movs	r2, #0
 80151ee:	f7fe fa47 	bl	8013680 <xQueueGenericSend>
 80151f2:	6278      	str	r0, [r7, #36]	; 0x24
 80151f4:	e008      	b.n	8015208 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80151f6:	4b07      	ldr	r3, [pc, #28]	; (8015214 <xTimerGenericCommand+0x98>)
 80151f8:	6818      	ldr	r0, [r3, #0]
 80151fa:	f107 0110 	add.w	r1, r7, #16
 80151fe:	2300      	movs	r3, #0
 8015200:	683a      	ldr	r2, [r7, #0]
 8015202:	f7fe fb3b 	bl	801387c <xQueueGenericSendFromISR>
 8015206:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8015208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801520a:	4618      	mov	r0, r3
 801520c:	3728      	adds	r7, #40	; 0x28
 801520e:	46bd      	mov	sp, r7
 8015210:	bd80      	pop	{r7, pc}
 8015212:	bf00      	nop
 8015214:	24001cd8 	.word	0x24001cd8

08015218 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b088      	sub	sp, #32
 801521c:	af02      	add	r7, sp, #8
 801521e:	6078      	str	r0, [r7, #4]
 8015220:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015222:	4b22      	ldr	r3, [pc, #136]	; (80152ac <prvProcessExpiredTimer+0x94>)
 8015224:	681b      	ldr	r3, [r3, #0]
 8015226:	68db      	ldr	r3, [r3, #12]
 8015228:	68db      	ldr	r3, [r3, #12]
 801522a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801522c:	697b      	ldr	r3, [r7, #20]
 801522e:	3304      	adds	r3, #4
 8015230:	4618      	mov	r0, r3
 8015232:	f7fe f8bd 	bl	80133b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8015236:	697b      	ldr	r3, [r7, #20]
 8015238:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801523c:	f003 0304 	and.w	r3, r3, #4
 8015240:	2b00      	cmp	r3, #0
 8015242:	d022      	beq.n	801528a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8015244:	697b      	ldr	r3, [r7, #20]
 8015246:	699a      	ldr	r2, [r3, #24]
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	18d1      	adds	r1, r2, r3
 801524c:	687b      	ldr	r3, [r7, #4]
 801524e:	683a      	ldr	r2, [r7, #0]
 8015250:	6978      	ldr	r0, [r7, #20]
 8015252:	f000 f8d1 	bl	80153f8 <prvInsertTimerInActiveList>
 8015256:	4603      	mov	r3, r0
 8015258:	2b00      	cmp	r3, #0
 801525a:	d01f      	beq.n	801529c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 801525c:	2300      	movs	r3, #0
 801525e:	9300      	str	r3, [sp, #0]
 8015260:	2300      	movs	r3, #0
 8015262:	687a      	ldr	r2, [r7, #4]
 8015264:	2100      	movs	r1, #0
 8015266:	6978      	ldr	r0, [r7, #20]
 8015268:	f7ff ff88 	bl	801517c <xTimerGenericCommand>
 801526c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801526e:	693b      	ldr	r3, [r7, #16]
 8015270:	2b00      	cmp	r3, #0
 8015272:	d113      	bne.n	801529c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8015274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015278:	f383 8811 	msr	BASEPRI, r3
 801527c:	f3bf 8f6f 	isb	sy
 8015280:	f3bf 8f4f 	dsb	sy
 8015284:	60fb      	str	r3, [r7, #12]
}
 8015286:	bf00      	nop
 8015288:	e7fe      	b.n	8015288 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015290:	f023 0301 	bic.w	r3, r3, #1
 8015294:	b2da      	uxtb	r2, r3
 8015296:	697b      	ldr	r3, [r7, #20]
 8015298:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801529c:	697b      	ldr	r3, [r7, #20]
 801529e:	6a1b      	ldr	r3, [r3, #32]
 80152a0:	6978      	ldr	r0, [r7, #20]
 80152a2:	4798      	blx	r3
}
 80152a4:	bf00      	nop
 80152a6:	3718      	adds	r7, #24
 80152a8:	46bd      	mov	sp, r7
 80152aa:	bd80      	pop	{r7, pc}
 80152ac:	24001cd0 	.word	0x24001cd0

080152b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80152b8:	f107 0308 	add.w	r3, r7, #8
 80152bc:	4618      	mov	r0, r3
 80152be:	f000 f857 	bl	8015370 <prvGetNextExpireTime>
 80152c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80152c4:	68bb      	ldr	r3, [r7, #8]
 80152c6:	4619      	mov	r1, r3
 80152c8:	68f8      	ldr	r0, [r7, #12]
 80152ca:	f000 f803 	bl	80152d4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80152ce:	f000 f8d5 	bl	801547c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80152d2:	e7f1      	b.n	80152b8 <prvTimerTask+0x8>

080152d4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80152de:	f7ff f98d 	bl	80145fc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80152e2:	f107 0308 	add.w	r3, r7, #8
 80152e6:	4618      	mov	r0, r3
 80152e8:	f000 f866 	bl	80153b8 <prvSampleTimeNow>
 80152ec:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80152ee:	68bb      	ldr	r3, [r7, #8]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d130      	bne.n	8015356 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80152f4:	683b      	ldr	r3, [r7, #0]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d10a      	bne.n	8015310 <prvProcessTimerOrBlockTask+0x3c>
 80152fa:	687a      	ldr	r2, [r7, #4]
 80152fc:	68fb      	ldr	r3, [r7, #12]
 80152fe:	429a      	cmp	r2, r3
 8015300:	d806      	bhi.n	8015310 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8015302:	f7ff f989 	bl	8014618 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8015306:	68f9      	ldr	r1, [r7, #12]
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f7ff ff85 	bl	8015218 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801530e:	e024      	b.n	801535a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8015310:	683b      	ldr	r3, [r7, #0]
 8015312:	2b00      	cmp	r3, #0
 8015314:	d008      	beq.n	8015328 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8015316:	4b13      	ldr	r3, [pc, #76]	; (8015364 <prvProcessTimerOrBlockTask+0x90>)
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d101      	bne.n	8015324 <prvProcessTimerOrBlockTask+0x50>
 8015320:	2301      	movs	r3, #1
 8015322:	e000      	b.n	8015326 <prvProcessTimerOrBlockTask+0x52>
 8015324:	2300      	movs	r3, #0
 8015326:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8015328:	4b0f      	ldr	r3, [pc, #60]	; (8015368 <prvProcessTimerOrBlockTask+0x94>)
 801532a:	6818      	ldr	r0, [r3, #0]
 801532c:	687a      	ldr	r2, [r7, #4]
 801532e:	68fb      	ldr	r3, [r7, #12]
 8015330:	1ad3      	subs	r3, r2, r3
 8015332:	683a      	ldr	r2, [r7, #0]
 8015334:	4619      	mov	r1, r3
 8015336:	f7fe fdd7 	bl	8013ee8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 801533a:	f7ff f96d 	bl	8014618 <xTaskResumeAll>
 801533e:	4603      	mov	r3, r0
 8015340:	2b00      	cmp	r3, #0
 8015342:	d10a      	bne.n	801535a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8015344:	4b09      	ldr	r3, [pc, #36]	; (801536c <prvProcessTimerOrBlockTask+0x98>)
 8015346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801534a:	601a      	str	r2, [r3, #0]
 801534c:	f3bf 8f4f 	dsb	sy
 8015350:	f3bf 8f6f 	isb	sy
}
 8015354:	e001      	b.n	801535a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8015356:	f7ff f95f 	bl	8014618 <xTaskResumeAll>
}
 801535a:	bf00      	nop
 801535c:	3710      	adds	r7, #16
 801535e:	46bd      	mov	sp, r7
 8015360:	bd80      	pop	{r7, pc}
 8015362:	bf00      	nop
 8015364:	24001cd4 	.word	0x24001cd4
 8015368:	24001cd8 	.word	0x24001cd8
 801536c:	e000ed04 	.word	0xe000ed04

08015370 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8015370:	b480      	push	{r7}
 8015372:	b085      	sub	sp, #20
 8015374:	af00      	add	r7, sp, #0
 8015376:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8015378:	4b0e      	ldr	r3, [pc, #56]	; (80153b4 <prvGetNextExpireTime+0x44>)
 801537a:	681b      	ldr	r3, [r3, #0]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d101      	bne.n	8015386 <prvGetNextExpireTime+0x16>
 8015382:	2201      	movs	r2, #1
 8015384:	e000      	b.n	8015388 <prvGetNextExpireTime+0x18>
 8015386:	2200      	movs	r2, #0
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	2b00      	cmp	r3, #0
 8015392:	d105      	bne.n	80153a0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015394:	4b07      	ldr	r3, [pc, #28]	; (80153b4 <prvGetNextExpireTime+0x44>)
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	68db      	ldr	r3, [r3, #12]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	60fb      	str	r3, [r7, #12]
 801539e:	e001      	b.n	80153a4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80153a0:	2300      	movs	r3, #0
 80153a2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80153a4:	68fb      	ldr	r3, [r7, #12]
}
 80153a6:	4618      	mov	r0, r3
 80153a8:	3714      	adds	r7, #20
 80153aa:	46bd      	mov	sp, r7
 80153ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b0:	4770      	bx	lr
 80153b2:	bf00      	nop
 80153b4:	24001cd0 	.word	0x24001cd0

080153b8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b084      	sub	sp, #16
 80153bc:	af00      	add	r7, sp, #0
 80153be:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80153c0:	f7ff f9c8 	bl	8014754 <xTaskGetTickCount>
 80153c4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80153c6:	4b0b      	ldr	r3, [pc, #44]	; (80153f4 <prvSampleTimeNow+0x3c>)
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	68fa      	ldr	r2, [r7, #12]
 80153cc:	429a      	cmp	r2, r3
 80153ce:	d205      	bcs.n	80153dc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80153d0:	f000 f936 	bl	8015640 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	2201      	movs	r2, #1
 80153d8:	601a      	str	r2, [r3, #0]
 80153da:	e002      	b.n	80153e2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80153dc:	687b      	ldr	r3, [r7, #4]
 80153de:	2200      	movs	r2, #0
 80153e0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80153e2:	4a04      	ldr	r2, [pc, #16]	; (80153f4 <prvSampleTimeNow+0x3c>)
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80153e8:	68fb      	ldr	r3, [r7, #12]
}
 80153ea:	4618      	mov	r0, r3
 80153ec:	3710      	adds	r7, #16
 80153ee:	46bd      	mov	sp, r7
 80153f0:	bd80      	pop	{r7, pc}
 80153f2:	bf00      	nop
 80153f4:	24001ce0 	.word	0x24001ce0

080153f8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80153f8:	b580      	push	{r7, lr}
 80153fa:	b086      	sub	sp, #24
 80153fc:	af00      	add	r7, sp, #0
 80153fe:	60f8      	str	r0, [r7, #12]
 8015400:	60b9      	str	r1, [r7, #8]
 8015402:	607a      	str	r2, [r7, #4]
 8015404:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8015406:	2300      	movs	r3, #0
 8015408:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 801540a:	68fb      	ldr	r3, [r7, #12]
 801540c:	68ba      	ldr	r2, [r7, #8]
 801540e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015410:	68fb      	ldr	r3, [r7, #12]
 8015412:	68fa      	ldr	r2, [r7, #12]
 8015414:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8015416:	68ba      	ldr	r2, [r7, #8]
 8015418:	687b      	ldr	r3, [r7, #4]
 801541a:	429a      	cmp	r2, r3
 801541c:	d812      	bhi.n	8015444 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801541e:	687a      	ldr	r2, [r7, #4]
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	1ad2      	subs	r2, r2, r3
 8015424:	68fb      	ldr	r3, [r7, #12]
 8015426:	699b      	ldr	r3, [r3, #24]
 8015428:	429a      	cmp	r2, r3
 801542a:	d302      	bcc.n	8015432 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 801542c:	2301      	movs	r3, #1
 801542e:	617b      	str	r3, [r7, #20]
 8015430:	e01b      	b.n	801546a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8015432:	4b10      	ldr	r3, [pc, #64]	; (8015474 <prvInsertTimerInActiveList+0x7c>)
 8015434:	681a      	ldr	r2, [r3, #0]
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	3304      	adds	r3, #4
 801543a:	4619      	mov	r1, r3
 801543c:	4610      	mov	r0, r2
 801543e:	f7fd ff7e 	bl	801333e <vListInsert>
 8015442:	e012      	b.n	801546a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8015444:	687a      	ldr	r2, [r7, #4]
 8015446:	683b      	ldr	r3, [r7, #0]
 8015448:	429a      	cmp	r2, r3
 801544a:	d206      	bcs.n	801545a <prvInsertTimerInActiveList+0x62>
 801544c:	68ba      	ldr	r2, [r7, #8]
 801544e:	683b      	ldr	r3, [r7, #0]
 8015450:	429a      	cmp	r2, r3
 8015452:	d302      	bcc.n	801545a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8015454:	2301      	movs	r3, #1
 8015456:	617b      	str	r3, [r7, #20]
 8015458:	e007      	b.n	801546a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801545a:	4b07      	ldr	r3, [pc, #28]	; (8015478 <prvInsertTimerInActiveList+0x80>)
 801545c:	681a      	ldr	r2, [r3, #0]
 801545e:	68fb      	ldr	r3, [r7, #12]
 8015460:	3304      	adds	r3, #4
 8015462:	4619      	mov	r1, r3
 8015464:	4610      	mov	r0, r2
 8015466:	f7fd ff6a 	bl	801333e <vListInsert>
		}
	}

	return xProcessTimerNow;
 801546a:	697b      	ldr	r3, [r7, #20]
}
 801546c:	4618      	mov	r0, r3
 801546e:	3718      	adds	r7, #24
 8015470:	46bd      	mov	sp, r7
 8015472:	bd80      	pop	{r7, pc}
 8015474:	24001cd4 	.word	0x24001cd4
 8015478:	24001cd0 	.word	0x24001cd0

0801547c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b08e      	sub	sp, #56	; 0x38
 8015480:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8015482:	e0ca      	b.n	801561a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	2b00      	cmp	r3, #0
 8015488:	da18      	bge.n	80154bc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 801548a:	1d3b      	adds	r3, r7, #4
 801548c:	3304      	adds	r3, #4
 801548e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8015490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015492:	2b00      	cmp	r3, #0
 8015494:	d10a      	bne.n	80154ac <prvProcessReceivedCommands+0x30>
	__asm volatile
 8015496:	f04f 0350 	mov.w	r3, #80	; 0x50
 801549a:	f383 8811 	msr	BASEPRI, r3
 801549e:	f3bf 8f6f 	isb	sy
 80154a2:	f3bf 8f4f 	dsb	sy
 80154a6:	61fb      	str	r3, [r7, #28]
}
 80154a8:	bf00      	nop
 80154aa:	e7fe      	b.n	80154aa <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80154ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154ae:	681b      	ldr	r3, [r3, #0]
 80154b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154b2:	6850      	ldr	r0, [r2, #4]
 80154b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80154b6:	6892      	ldr	r2, [r2, #8]
 80154b8:	4611      	mov	r1, r2
 80154ba:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	f2c0 80aa 	blt.w	8015618 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80154c4:	68fb      	ldr	r3, [r7, #12]
 80154c6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80154c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154ca:	695b      	ldr	r3, [r3, #20]
 80154cc:	2b00      	cmp	r3, #0
 80154ce:	d004      	beq.n	80154da <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80154d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80154d2:	3304      	adds	r3, #4
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7fd ff6b 	bl	80133b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80154da:	463b      	mov	r3, r7
 80154dc:	4618      	mov	r0, r3
 80154de:	f7ff ff6b 	bl	80153b8 <prvSampleTimeNow>
 80154e2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	2b09      	cmp	r3, #9
 80154e8:	f200 8097 	bhi.w	801561a <prvProcessReceivedCommands+0x19e>
 80154ec:	a201      	add	r2, pc, #4	; (adr r2, 80154f4 <prvProcessReceivedCommands+0x78>)
 80154ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80154f2:	bf00      	nop
 80154f4:	0801551d 	.word	0x0801551d
 80154f8:	0801551d 	.word	0x0801551d
 80154fc:	0801551d 	.word	0x0801551d
 8015500:	08015591 	.word	0x08015591
 8015504:	080155a5 	.word	0x080155a5
 8015508:	080155ef 	.word	0x080155ef
 801550c:	0801551d 	.word	0x0801551d
 8015510:	0801551d 	.word	0x0801551d
 8015514:	08015591 	.word	0x08015591
 8015518:	080155a5 	.word	0x080155a5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801551e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015522:	f043 0301 	orr.w	r3, r3, #1
 8015526:	b2da      	uxtb	r2, r3
 8015528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801552a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801552e:	68ba      	ldr	r2, [r7, #8]
 8015530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015532:	699b      	ldr	r3, [r3, #24]
 8015534:	18d1      	adds	r1, r2, r3
 8015536:	68bb      	ldr	r3, [r7, #8]
 8015538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801553a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801553c:	f7ff ff5c 	bl	80153f8 <prvInsertTimerInActiveList>
 8015540:	4603      	mov	r3, r0
 8015542:	2b00      	cmp	r3, #0
 8015544:	d069      	beq.n	801561a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015548:	6a1b      	ldr	r3, [r3, #32]
 801554a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801554c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801554e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015550:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015554:	f003 0304 	and.w	r3, r3, #4
 8015558:	2b00      	cmp	r3, #0
 801555a:	d05e      	beq.n	801561a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801555c:	68ba      	ldr	r2, [r7, #8]
 801555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015560:	699b      	ldr	r3, [r3, #24]
 8015562:	441a      	add	r2, r3
 8015564:	2300      	movs	r3, #0
 8015566:	9300      	str	r3, [sp, #0]
 8015568:	2300      	movs	r3, #0
 801556a:	2100      	movs	r1, #0
 801556c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801556e:	f7ff fe05 	bl	801517c <xTimerGenericCommand>
 8015572:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8015574:	6a3b      	ldr	r3, [r7, #32]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d14f      	bne.n	801561a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 801557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801557e:	f383 8811 	msr	BASEPRI, r3
 8015582:	f3bf 8f6f 	isb	sy
 8015586:	f3bf 8f4f 	dsb	sy
 801558a:	61bb      	str	r3, [r7, #24]
}
 801558c:	bf00      	nop
 801558e:	e7fe      	b.n	801558e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015592:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015596:	f023 0301 	bic.w	r3, r3, #1
 801559a:	b2da      	uxtb	r2, r3
 801559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801559e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80155a2:	e03a      	b.n	801561a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80155a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155aa:	f043 0301 	orr.w	r3, r3, #1
 80155ae:	b2da      	uxtb	r2, r3
 80155b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80155b6:	68ba      	ldr	r2, [r7, #8]
 80155b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155ba:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80155bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155be:	699b      	ldr	r3, [r3, #24]
 80155c0:	2b00      	cmp	r3, #0
 80155c2:	d10a      	bne.n	80155da <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80155c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80155c8:	f383 8811 	msr	BASEPRI, r3
 80155cc:	f3bf 8f6f 	isb	sy
 80155d0:	f3bf 8f4f 	dsb	sy
 80155d4:	617b      	str	r3, [r7, #20]
}
 80155d6:	bf00      	nop
 80155d8:	e7fe      	b.n	80155d8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80155da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155dc:	699a      	ldr	r2, [r3, #24]
 80155de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e0:	18d1      	adds	r1, r2, r3
 80155e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80155e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80155e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155e8:	f7ff ff06 	bl	80153f8 <prvInsertTimerInActiveList>
					break;
 80155ec:	e015      	b.n	801561a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80155ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80155f4:	f003 0302 	and.w	r3, r3, #2
 80155f8:	2b00      	cmp	r3, #0
 80155fa:	d103      	bne.n	8015604 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80155fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80155fe:	f000 fbff 	bl	8015e00 <vPortFree>
 8015602:	e00a      	b.n	801561a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8015604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801560a:	f023 0301 	bic.w	r3, r3, #1
 801560e:	b2da      	uxtb	r2, r3
 8015610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8015616:	e000      	b.n	801561a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8015618:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 801561a:	4b08      	ldr	r3, [pc, #32]	; (801563c <prvProcessReceivedCommands+0x1c0>)
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	1d39      	adds	r1, r7, #4
 8015620:	2200      	movs	r2, #0
 8015622:	4618      	mov	r0, r3
 8015624:	f7fe f9c6 	bl	80139b4 <xQueueReceive>
 8015628:	4603      	mov	r3, r0
 801562a:	2b00      	cmp	r3, #0
 801562c:	f47f af2a 	bne.w	8015484 <prvProcessReceivedCommands+0x8>
	}
}
 8015630:	bf00      	nop
 8015632:	bf00      	nop
 8015634:	3730      	adds	r7, #48	; 0x30
 8015636:	46bd      	mov	sp, r7
 8015638:	bd80      	pop	{r7, pc}
 801563a:	bf00      	nop
 801563c:	24001cd8 	.word	0x24001cd8

08015640 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b088      	sub	sp, #32
 8015644:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8015646:	e048      	b.n	80156da <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8015648:	4b2d      	ldr	r3, [pc, #180]	; (8015700 <prvSwitchTimerLists+0xc0>)
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	68db      	ldr	r3, [r3, #12]
 801564e:	681b      	ldr	r3, [r3, #0]
 8015650:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8015652:	4b2b      	ldr	r3, [pc, #172]	; (8015700 <prvSwitchTimerLists+0xc0>)
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	68db      	ldr	r3, [r3, #12]
 8015658:	68db      	ldr	r3, [r3, #12]
 801565a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	3304      	adds	r3, #4
 8015660:	4618      	mov	r0, r3
 8015662:	f7fd fea5 	bl	80133b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	6a1b      	ldr	r3, [r3, #32]
 801566a:	68f8      	ldr	r0, [r7, #12]
 801566c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801566e:	68fb      	ldr	r3, [r7, #12]
 8015670:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015674:	f003 0304 	and.w	r3, r3, #4
 8015678:	2b00      	cmp	r3, #0
 801567a:	d02e      	beq.n	80156da <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	699b      	ldr	r3, [r3, #24]
 8015680:	693a      	ldr	r2, [r7, #16]
 8015682:	4413      	add	r3, r2
 8015684:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8015686:	68ba      	ldr	r2, [r7, #8]
 8015688:	693b      	ldr	r3, [r7, #16]
 801568a:	429a      	cmp	r2, r3
 801568c:	d90e      	bls.n	80156ac <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 801568e:	68fb      	ldr	r3, [r7, #12]
 8015690:	68ba      	ldr	r2, [r7, #8]
 8015692:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	68fa      	ldr	r2, [r7, #12]
 8015698:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 801569a:	4b19      	ldr	r3, [pc, #100]	; (8015700 <prvSwitchTimerLists+0xc0>)
 801569c:	681a      	ldr	r2, [r3, #0]
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	3304      	adds	r3, #4
 80156a2:	4619      	mov	r1, r3
 80156a4:	4610      	mov	r0, r2
 80156a6:	f7fd fe4a 	bl	801333e <vListInsert>
 80156aa:	e016      	b.n	80156da <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80156ac:	2300      	movs	r3, #0
 80156ae:	9300      	str	r3, [sp, #0]
 80156b0:	2300      	movs	r3, #0
 80156b2:	693a      	ldr	r2, [r7, #16]
 80156b4:	2100      	movs	r1, #0
 80156b6:	68f8      	ldr	r0, [r7, #12]
 80156b8:	f7ff fd60 	bl	801517c <xTimerGenericCommand>
 80156bc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80156be:	687b      	ldr	r3, [r7, #4]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d10a      	bne.n	80156da <prvSwitchTimerLists+0x9a>
	__asm volatile
 80156c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80156c8:	f383 8811 	msr	BASEPRI, r3
 80156cc:	f3bf 8f6f 	isb	sy
 80156d0:	f3bf 8f4f 	dsb	sy
 80156d4:	603b      	str	r3, [r7, #0]
}
 80156d6:	bf00      	nop
 80156d8:	e7fe      	b.n	80156d8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80156da:	4b09      	ldr	r3, [pc, #36]	; (8015700 <prvSwitchTimerLists+0xc0>)
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	2b00      	cmp	r3, #0
 80156e2:	d1b1      	bne.n	8015648 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80156e4:	4b06      	ldr	r3, [pc, #24]	; (8015700 <prvSwitchTimerLists+0xc0>)
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80156ea:	4b06      	ldr	r3, [pc, #24]	; (8015704 <prvSwitchTimerLists+0xc4>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	4a04      	ldr	r2, [pc, #16]	; (8015700 <prvSwitchTimerLists+0xc0>)
 80156f0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80156f2:	4a04      	ldr	r2, [pc, #16]	; (8015704 <prvSwitchTimerLists+0xc4>)
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	6013      	str	r3, [r2, #0]
}
 80156f8:	bf00      	nop
 80156fa:	3718      	adds	r7, #24
 80156fc:	46bd      	mov	sp, r7
 80156fe:	bd80      	pop	{r7, pc}
 8015700:	24001cd0 	.word	0x24001cd0
 8015704:	24001cd4 	.word	0x24001cd4

08015708 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8015708:	b580      	push	{r7, lr}
 801570a:	b082      	sub	sp, #8
 801570c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801570e:	f000 f989 	bl	8015a24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8015712:	4b15      	ldr	r3, [pc, #84]	; (8015768 <prvCheckForValidListAndQueue+0x60>)
 8015714:	681b      	ldr	r3, [r3, #0]
 8015716:	2b00      	cmp	r3, #0
 8015718:	d120      	bne.n	801575c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 801571a:	4814      	ldr	r0, [pc, #80]	; (801576c <prvCheckForValidListAndQueue+0x64>)
 801571c:	f7fd fdbe 	bl	801329c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8015720:	4813      	ldr	r0, [pc, #76]	; (8015770 <prvCheckForValidListAndQueue+0x68>)
 8015722:	f7fd fdbb 	bl	801329c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8015726:	4b13      	ldr	r3, [pc, #76]	; (8015774 <prvCheckForValidListAndQueue+0x6c>)
 8015728:	4a10      	ldr	r2, [pc, #64]	; (801576c <prvCheckForValidListAndQueue+0x64>)
 801572a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 801572c:	4b12      	ldr	r3, [pc, #72]	; (8015778 <prvCheckForValidListAndQueue+0x70>)
 801572e:	4a10      	ldr	r2, [pc, #64]	; (8015770 <prvCheckForValidListAndQueue+0x68>)
 8015730:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8015732:	2300      	movs	r3, #0
 8015734:	9300      	str	r3, [sp, #0]
 8015736:	4b11      	ldr	r3, [pc, #68]	; (801577c <prvCheckForValidListAndQueue+0x74>)
 8015738:	4a11      	ldr	r2, [pc, #68]	; (8015780 <prvCheckForValidListAndQueue+0x78>)
 801573a:	2110      	movs	r1, #16
 801573c:	200a      	movs	r0, #10
 801573e:	f7fd fec9 	bl	80134d4 <xQueueGenericCreateStatic>
 8015742:	4603      	mov	r3, r0
 8015744:	4a08      	ldr	r2, [pc, #32]	; (8015768 <prvCheckForValidListAndQueue+0x60>)
 8015746:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8015748:	4b07      	ldr	r3, [pc, #28]	; (8015768 <prvCheckForValidListAndQueue+0x60>)
 801574a:	681b      	ldr	r3, [r3, #0]
 801574c:	2b00      	cmp	r3, #0
 801574e:	d005      	beq.n	801575c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8015750:	4b05      	ldr	r3, [pc, #20]	; (8015768 <prvCheckForValidListAndQueue+0x60>)
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	490b      	ldr	r1, [pc, #44]	; (8015784 <prvCheckForValidListAndQueue+0x7c>)
 8015756:	4618      	mov	r0, r3
 8015758:	f7fe fb9c 	bl	8013e94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801575c:	f000 f992 	bl	8015a84 <vPortExitCritical>
}
 8015760:	bf00      	nop
 8015762:	46bd      	mov	sp, r7
 8015764:	bd80      	pop	{r7, pc}
 8015766:	bf00      	nop
 8015768:	24001cd8 	.word	0x24001cd8
 801576c:	24001ca8 	.word	0x24001ca8
 8015770:	24001cbc 	.word	0x24001cbc
 8015774:	24001cd0 	.word	0x24001cd0
 8015778:	24001cd4 	.word	0x24001cd4
 801577c:	24001d84 	.word	0x24001d84
 8015780:	24001ce4 	.word	0x24001ce4
 8015784:	08016d5c 	.word	0x08016d5c

08015788 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8015788:	b580      	push	{r7, lr}
 801578a:	b08a      	sub	sp, #40	; 0x28
 801578c:	af00      	add	r7, sp, #0
 801578e:	60f8      	str	r0, [r7, #12]
 8015790:	60b9      	str	r1, [r7, #8]
 8015792:	607a      	str	r2, [r7, #4]
 8015794:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8015796:	f06f 0301 	mvn.w	r3, #1
 801579a:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 801579c:	68fb      	ldr	r3, [r7, #12]
 801579e:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 80157a0:	68bb      	ldr	r3, [r7, #8]
 80157a2:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80157a8:	4b06      	ldr	r3, [pc, #24]	; (80157c4 <xTimerPendFunctionCallFromISR+0x3c>)
 80157aa:	6818      	ldr	r0, [r3, #0]
 80157ac:	f107 0114 	add.w	r1, r7, #20
 80157b0:	2300      	movs	r3, #0
 80157b2:	683a      	ldr	r2, [r7, #0]
 80157b4:	f7fe f862 	bl	801387c <xQueueGenericSendFromISR>
 80157b8:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 80157ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80157bc:	4618      	mov	r0, r3
 80157be:	3728      	adds	r7, #40	; 0x28
 80157c0:	46bd      	mov	sp, r7
 80157c2:	bd80      	pop	{r7, pc}
 80157c4:	24001cd8 	.word	0x24001cd8

080157c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80157c8:	b480      	push	{r7}
 80157ca:	b085      	sub	sp, #20
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	60f8      	str	r0, [r7, #12]
 80157d0:	60b9      	str	r1, [r7, #8]
 80157d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	3b04      	subs	r3, #4
 80157d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80157e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	3b04      	subs	r3, #4
 80157e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80157e8:	68bb      	ldr	r3, [r7, #8]
 80157ea:	f023 0201 	bic.w	r2, r3, #1
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	3b04      	subs	r3, #4
 80157f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80157f8:	4a0c      	ldr	r2, [pc, #48]	; (801582c <pxPortInitialiseStack+0x64>)
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80157fe:	68fb      	ldr	r3, [r7, #12]
 8015800:	3b14      	subs	r3, #20
 8015802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8015804:	687a      	ldr	r2, [r7, #4]
 8015806:	68fb      	ldr	r3, [r7, #12]
 8015808:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801580a:	68fb      	ldr	r3, [r7, #12]
 801580c:	3b04      	subs	r3, #4
 801580e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8015810:	68fb      	ldr	r3, [r7, #12]
 8015812:	f06f 0202 	mvn.w	r2, #2
 8015816:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8015818:	68fb      	ldr	r3, [r7, #12]
 801581a:	3b20      	subs	r3, #32
 801581c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801581e:	68fb      	ldr	r3, [r7, #12]
}
 8015820:	4618      	mov	r0, r3
 8015822:	3714      	adds	r7, #20
 8015824:	46bd      	mov	sp, r7
 8015826:	f85d 7b04 	ldr.w	r7, [sp], #4
 801582a:	4770      	bx	lr
 801582c:	08015831 	.word	0x08015831

08015830 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8015830:	b480      	push	{r7}
 8015832:	b085      	sub	sp, #20
 8015834:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8015836:	2300      	movs	r3, #0
 8015838:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801583a:	4b12      	ldr	r3, [pc, #72]	; (8015884 <prvTaskExitError+0x54>)
 801583c:	681b      	ldr	r3, [r3, #0]
 801583e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8015842:	d00a      	beq.n	801585a <prvTaskExitError+0x2a>
	__asm volatile
 8015844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015848:	f383 8811 	msr	BASEPRI, r3
 801584c:	f3bf 8f6f 	isb	sy
 8015850:	f3bf 8f4f 	dsb	sy
 8015854:	60fb      	str	r3, [r7, #12]
}
 8015856:	bf00      	nop
 8015858:	e7fe      	b.n	8015858 <prvTaskExitError+0x28>
	__asm volatile
 801585a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801585e:	f383 8811 	msr	BASEPRI, r3
 8015862:	f3bf 8f6f 	isb	sy
 8015866:	f3bf 8f4f 	dsb	sy
 801586a:	60bb      	str	r3, [r7, #8]
}
 801586c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801586e:	bf00      	nop
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	2b00      	cmp	r3, #0
 8015874:	d0fc      	beq.n	8015870 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8015876:	bf00      	nop
 8015878:	bf00      	nop
 801587a:	3714      	adds	r7, #20
 801587c:	46bd      	mov	sp, r7
 801587e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015882:	4770      	bx	lr
 8015884:	240000a0 	.word	0x240000a0
	...

08015890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8015890:	4b07      	ldr	r3, [pc, #28]	; (80158b0 <pxCurrentTCBConst2>)
 8015892:	6819      	ldr	r1, [r3, #0]
 8015894:	6808      	ldr	r0, [r1, #0]
 8015896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801589a:	f380 8809 	msr	PSP, r0
 801589e:	f3bf 8f6f 	isb	sy
 80158a2:	f04f 0000 	mov.w	r0, #0
 80158a6:	f380 8811 	msr	BASEPRI, r0
 80158aa:	4770      	bx	lr
 80158ac:	f3af 8000 	nop.w

080158b0 <pxCurrentTCBConst2>:
 80158b0:	240017a8 	.word	0x240017a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80158b4:	bf00      	nop
 80158b6:	bf00      	nop

080158b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80158b8:	4808      	ldr	r0, [pc, #32]	; (80158dc <prvPortStartFirstTask+0x24>)
 80158ba:	6800      	ldr	r0, [r0, #0]
 80158bc:	6800      	ldr	r0, [r0, #0]
 80158be:	f380 8808 	msr	MSP, r0
 80158c2:	f04f 0000 	mov.w	r0, #0
 80158c6:	f380 8814 	msr	CONTROL, r0
 80158ca:	b662      	cpsie	i
 80158cc:	b661      	cpsie	f
 80158ce:	f3bf 8f4f 	dsb	sy
 80158d2:	f3bf 8f6f 	isb	sy
 80158d6:	df00      	svc	0
 80158d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80158da:	bf00      	nop
 80158dc:	e000ed08 	.word	0xe000ed08

080158e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80158e0:	b580      	push	{r7, lr}
 80158e2:	b086      	sub	sp, #24
 80158e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80158e6:	4b46      	ldr	r3, [pc, #280]	; (8015a00 <xPortStartScheduler+0x120>)
 80158e8:	681b      	ldr	r3, [r3, #0]
 80158ea:	4a46      	ldr	r2, [pc, #280]	; (8015a04 <xPortStartScheduler+0x124>)
 80158ec:	4293      	cmp	r3, r2
 80158ee:	d10a      	bne.n	8015906 <xPortStartScheduler+0x26>
	__asm volatile
 80158f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80158f4:	f383 8811 	msr	BASEPRI, r3
 80158f8:	f3bf 8f6f 	isb	sy
 80158fc:	f3bf 8f4f 	dsb	sy
 8015900:	613b      	str	r3, [r7, #16]
}
 8015902:	bf00      	nop
 8015904:	e7fe      	b.n	8015904 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8015906:	4b3e      	ldr	r3, [pc, #248]	; (8015a00 <xPortStartScheduler+0x120>)
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	4a3f      	ldr	r2, [pc, #252]	; (8015a08 <xPortStartScheduler+0x128>)
 801590c:	4293      	cmp	r3, r2
 801590e:	d10a      	bne.n	8015926 <xPortStartScheduler+0x46>
	__asm volatile
 8015910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015914:	f383 8811 	msr	BASEPRI, r3
 8015918:	f3bf 8f6f 	isb	sy
 801591c:	f3bf 8f4f 	dsb	sy
 8015920:	60fb      	str	r3, [r7, #12]
}
 8015922:	bf00      	nop
 8015924:	e7fe      	b.n	8015924 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8015926:	4b39      	ldr	r3, [pc, #228]	; (8015a0c <xPortStartScheduler+0x12c>)
 8015928:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	781b      	ldrb	r3, [r3, #0]
 801592e:	b2db      	uxtb	r3, r3
 8015930:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8015932:	697b      	ldr	r3, [r7, #20]
 8015934:	22ff      	movs	r2, #255	; 0xff
 8015936:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8015938:	697b      	ldr	r3, [r7, #20]
 801593a:	781b      	ldrb	r3, [r3, #0]
 801593c:	b2db      	uxtb	r3, r3
 801593e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8015940:	78fb      	ldrb	r3, [r7, #3]
 8015942:	b2db      	uxtb	r3, r3
 8015944:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8015948:	b2da      	uxtb	r2, r3
 801594a:	4b31      	ldr	r3, [pc, #196]	; (8015a10 <xPortStartScheduler+0x130>)
 801594c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801594e:	4b31      	ldr	r3, [pc, #196]	; (8015a14 <xPortStartScheduler+0x134>)
 8015950:	2207      	movs	r2, #7
 8015952:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8015954:	e009      	b.n	801596a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8015956:	4b2f      	ldr	r3, [pc, #188]	; (8015a14 <xPortStartScheduler+0x134>)
 8015958:	681b      	ldr	r3, [r3, #0]
 801595a:	3b01      	subs	r3, #1
 801595c:	4a2d      	ldr	r2, [pc, #180]	; (8015a14 <xPortStartScheduler+0x134>)
 801595e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8015960:	78fb      	ldrb	r3, [r7, #3]
 8015962:	b2db      	uxtb	r3, r3
 8015964:	005b      	lsls	r3, r3, #1
 8015966:	b2db      	uxtb	r3, r3
 8015968:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801596a:	78fb      	ldrb	r3, [r7, #3]
 801596c:	b2db      	uxtb	r3, r3
 801596e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015972:	2b80      	cmp	r3, #128	; 0x80
 8015974:	d0ef      	beq.n	8015956 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8015976:	4b27      	ldr	r3, [pc, #156]	; (8015a14 <xPortStartScheduler+0x134>)
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	f1c3 0307 	rsb	r3, r3, #7
 801597e:	2b04      	cmp	r3, #4
 8015980:	d00a      	beq.n	8015998 <xPortStartScheduler+0xb8>
	__asm volatile
 8015982:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015986:	f383 8811 	msr	BASEPRI, r3
 801598a:	f3bf 8f6f 	isb	sy
 801598e:	f3bf 8f4f 	dsb	sy
 8015992:	60bb      	str	r3, [r7, #8]
}
 8015994:	bf00      	nop
 8015996:	e7fe      	b.n	8015996 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8015998:	4b1e      	ldr	r3, [pc, #120]	; (8015a14 <xPortStartScheduler+0x134>)
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	021b      	lsls	r3, r3, #8
 801599e:	4a1d      	ldr	r2, [pc, #116]	; (8015a14 <xPortStartScheduler+0x134>)
 80159a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80159a2:	4b1c      	ldr	r3, [pc, #112]	; (8015a14 <xPortStartScheduler+0x134>)
 80159a4:	681b      	ldr	r3, [r3, #0]
 80159a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80159aa:	4a1a      	ldr	r2, [pc, #104]	; (8015a14 <xPortStartScheduler+0x134>)
 80159ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	b2da      	uxtb	r2, r3
 80159b2:	697b      	ldr	r3, [r7, #20]
 80159b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80159b6:	4b18      	ldr	r3, [pc, #96]	; (8015a18 <xPortStartScheduler+0x138>)
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	4a17      	ldr	r2, [pc, #92]	; (8015a18 <xPortStartScheduler+0x138>)
 80159bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80159c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80159c2:	4b15      	ldr	r3, [pc, #84]	; (8015a18 <xPortStartScheduler+0x138>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	4a14      	ldr	r2, [pc, #80]	; (8015a18 <xPortStartScheduler+0x138>)
 80159c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80159cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80159ce:	f000 f8dd 	bl	8015b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80159d2:	4b12      	ldr	r3, [pc, #72]	; (8015a1c <xPortStartScheduler+0x13c>)
 80159d4:	2200      	movs	r2, #0
 80159d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80159d8:	f000 f8fc 	bl	8015bd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80159dc:	4b10      	ldr	r3, [pc, #64]	; (8015a20 <xPortStartScheduler+0x140>)
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	4a0f      	ldr	r2, [pc, #60]	; (8015a20 <xPortStartScheduler+0x140>)
 80159e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80159e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80159e8:	f7ff ff66 	bl	80158b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80159ec:	f7fe ff7c 	bl	80148e8 <vTaskSwitchContext>
	prvTaskExitError();
 80159f0:	f7ff ff1e 	bl	8015830 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80159f4:	2300      	movs	r3, #0
}
 80159f6:	4618      	mov	r0, r3
 80159f8:	3718      	adds	r7, #24
 80159fa:	46bd      	mov	sp, r7
 80159fc:	bd80      	pop	{r7, pc}
 80159fe:	bf00      	nop
 8015a00:	e000ed00 	.word	0xe000ed00
 8015a04:	410fc271 	.word	0x410fc271
 8015a08:	410fc270 	.word	0x410fc270
 8015a0c:	e000e400 	.word	0xe000e400
 8015a10:	24001dd4 	.word	0x24001dd4
 8015a14:	24001dd8 	.word	0x24001dd8
 8015a18:	e000ed20 	.word	0xe000ed20
 8015a1c:	240000a0 	.word	0x240000a0
 8015a20:	e000ef34 	.word	0xe000ef34

08015a24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8015a24:	b480      	push	{r7}
 8015a26:	b083      	sub	sp, #12
 8015a28:	af00      	add	r7, sp, #0
	__asm volatile
 8015a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a2e:	f383 8811 	msr	BASEPRI, r3
 8015a32:	f3bf 8f6f 	isb	sy
 8015a36:	f3bf 8f4f 	dsb	sy
 8015a3a:	607b      	str	r3, [r7, #4]
}
 8015a3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8015a3e:	4b0f      	ldr	r3, [pc, #60]	; (8015a7c <vPortEnterCritical+0x58>)
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	3301      	adds	r3, #1
 8015a44:	4a0d      	ldr	r2, [pc, #52]	; (8015a7c <vPortEnterCritical+0x58>)
 8015a46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8015a48:	4b0c      	ldr	r3, [pc, #48]	; (8015a7c <vPortEnterCritical+0x58>)
 8015a4a:	681b      	ldr	r3, [r3, #0]
 8015a4c:	2b01      	cmp	r3, #1
 8015a4e:	d10f      	bne.n	8015a70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8015a50:	4b0b      	ldr	r3, [pc, #44]	; (8015a80 <vPortEnterCritical+0x5c>)
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	b2db      	uxtb	r3, r3
 8015a56:	2b00      	cmp	r3, #0
 8015a58:	d00a      	beq.n	8015a70 <vPortEnterCritical+0x4c>
	__asm volatile
 8015a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a5e:	f383 8811 	msr	BASEPRI, r3
 8015a62:	f3bf 8f6f 	isb	sy
 8015a66:	f3bf 8f4f 	dsb	sy
 8015a6a:	603b      	str	r3, [r7, #0]
}
 8015a6c:	bf00      	nop
 8015a6e:	e7fe      	b.n	8015a6e <vPortEnterCritical+0x4a>
	}
}
 8015a70:	bf00      	nop
 8015a72:	370c      	adds	r7, #12
 8015a74:	46bd      	mov	sp, r7
 8015a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7a:	4770      	bx	lr
 8015a7c:	240000a0 	.word	0x240000a0
 8015a80:	e000ed04 	.word	0xe000ed04

08015a84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8015a84:	b480      	push	{r7}
 8015a86:	b083      	sub	sp, #12
 8015a88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8015a8a:	4b12      	ldr	r3, [pc, #72]	; (8015ad4 <vPortExitCritical+0x50>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	2b00      	cmp	r3, #0
 8015a90:	d10a      	bne.n	8015aa8 <vPortExitCritical+0x24>
	__asm volatile
 8015a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015a96:	f383 8811 	msr	BASEPRI, r3
 8015a9a:	f3bf 8f6f 	isb	sy
 8015a9e:	f3bf 8f4f 	dsb	sy
 8015aa2:	607b      	str	r3, [r7, #4]
}
 8015aa4:	bf00      	nop
 8015aa6:	e7fe      	b.n	8015aa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8015aa8:	4b0a      	ldr	r3, [pc, #40]	; (8015ad4 <vPortExitCritical+0x50>)
 8015aaa:	681b      	ldr	r3, [r3, #0]
 8015aac:	3b01      	subs	r3, #1
 8015aae:	4a09      	ldr	r2, [pc, #36]	; (8015ad4 <vPortExitCritical+0x50>)
 8015ab0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8015ab2:	4b08      	ldr	r3, [pc, #32]	; (8015ad4 <vPortExitCritical+0x50>)
 8015ab4:	681b      	ldr	r3, [r3, #0]
 8015ab6:	2b00      	cmp	r3, #0
 8015ab8:	d105      	bne.n	8015ac6 <vPortExitCritical+0x42>
 8015aba:	2300      	movs	r3, #0
 8015abc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015abe:	683b      	ldr	r3, [r7, #0]
 8015ac0:	f383 8811 	msr	BASEPRI, r3
}
 8015ac4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8015ac6:	bf00      	nop
 8015ac8:	370c      	adds	r7, #12
 8015aca:	46bd      	mov	sp, r7
 8015acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad0:	4770      	bx	lr
 8015ad2:	bf00      	nop
 8015ad4:	240000a0 	.word	0x240000a0
	...

08015ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8015ae0:	f3ef 8009 	mrs	r0, PSP
 8015ae4:	f3bf 8f6f 	isb	sy
 8015ae8:	4b15      	ldr	r3, [pc, #84]	; (8015b40 <pxCurrentTCBConst>)
 8015aea:	681a      	ldr	r2, [r3, #0]
 8015aec:	f01e 0f10 	tst.w	lr, #16
 8015af0:	bf08      	it	eq
 8015af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8015af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015afa:	6010      	str	r0, [r2, #0]
 8015afc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8015b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8015b04:	f380 8811 	msr	BASEPRI, r0
 8015b08:	f3bf 8f4f 	dsb	sy
 8015b0c:	f3bf 8f6f 	isb	sy
 8015b10:	f7fe feea 	bl	80148e8 <vTaskSwitchContext>
 8015b14:	f04f 0000 	mov.w	r0, #0
 8015b18:	f380 8811 	msr	BASEPRI, r0
 8015b1c:	bc09      	pop	{r0, r3}
 8015b1e:	6819      	ldr	r1, [r3, #0]
 8015b20:	6808      	ldr	r0, [r1, #0]
 8015b22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015b26:	f01e 0f10 	tst.w	lr, #16
 8015b2a:	bf08      	it	eq
 8015b2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8015b30:	f380 8809 	msr	PSP, r0
 8015b34:	f3bf 8f6f 	isb	sy
 8015b38:	4770      	bx	lr
 8015b3a:	bf00      	nop
 8015b3c:	f3af 8000 	nop.w

08015b40 <pxCurrentTCBConst>:
 8015b40:	240017a8 	.word	0x240017a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8015b44:	bf00      	nop
 8015b46:	bf00      	nop

08015b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8015b48:	b580      	push	{r7, lr}
 8015b4a:	b082      	sub	sp, #8
 8015b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8015b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015b52:	f383 8811 	msr	BASEPRI, r3
 8015b56:	f3bf 8f6f 	isb	sy
 8015b5a:	f3bf 8f4f 	dsb	sy
 8015b5e:	607b      	str	r3, [r7, #4]
}
 8015b60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8015b62:	f7fe fe07 	bl	8014774 <xTaskIncrementTick>
 8015b66:	4603      	mov	r3, r0
 8015b68:	2b00      	cmp	r3, #0
 8015b6a:	d003      	beq.n	8015b74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8015b6c:	4b06      	ldr	r3, [pc, #24]	; (8015b88 <xPortSysTickHandler+0x40>)
 8015b6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8015b72:	601a      	str	r2, [r3, #0]
 8015b74:	2300      	movs	r3, #0
 8015b76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8015b78:	683b      	ldr	r3, [r7, #0]
 8015b7a:	f383 8811 	msr	BASEPRI, r3
}
 8015b7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8015b80:	bf00      	nop
 8015b82:	3708      	adds	r7, #8
 8015b84:	46bd      	mov	sp, r7
 8015b86:	bd80      	pop	{r7, pc}
 8015b88:	e000ed04 	.word	0xe000ed04

08015b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8015b8c:	b480      	push	{r7}
 8015b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8015b90:	4b0b      	ldr	r3, [pc, #44]	; (8015bc0 <vPortSetupTimerInterrupt+0x34>)
 8015b92:	2200      	movs	r2, #0
 8015b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8015b96:	4b0b      	ldr	r3, [pc, #44]	; (8015bc4 <vPortSetupTimerInterrupt+0x38>)
 8015b98:	2200      	movs	r2, #0
 8015b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8015b9c:	4b0a      	ldr	r3, [pc, #40]	; (8015bc8 <vPortSetupTimerInterrupt+0x3c>)
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	4a0a      	ldr	r2, [pc, #40]	; (8015bcc <vPortSetupTimerInterrupt+0x40>)
 8015ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8015ba6:	099b      	lsrs	r3, r3, #6
 8015ba8:	4a09      	ldr	r2, [pc, #36]	; (8015bd0 <vPortSetupTimerInterrupt+0x44>)
 8015baa:	3b01      	subs	r3, #1
 8015bac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8015bae:	4b04      	ldr	r3, [pc, #16]	; (8015bc0 <vPortSetupTimerInterrupt+0x34>)
 8015bb0:	2207      	movs	r2, #7
 8015bb2:	601a      	str	r2, [r3, #0]
}
 8015bb4:	bf00      	nop
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bbc:	4770      	bx	lr
 8015bbe:	bf00      	nop
 8015bc0:	e000e010 	.word	0xe000e010
 8015bc4:	e000e018 	.word	0xe000e018
 8015bc8:	24000090 	.word	0x24000090
 8015bcc:	10624dd3 	.word	0x10624dd3
 8015bd0:	e000e014 	.word	0xe000e014

08015bd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8015bd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8015be4 <vPortEnableVFP+0x10>
 8015bd8:	6801      	ldr	r1, [r0, #0]
 8015bda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8015bde:	6001      	str	r1, [r0, #0]
 8015be0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8015be2:	bf00      	nop
 8015be4:	e000ed88 	.word	0xe000ed88

08015be8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8015be8:	b480      	push	{r7}
 8015bea:	b085      	sub	sp, #20
 8015bec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8015bee:	f3ef 8305 	mrs	r3, IPSR
 8015bf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8015bf4:	68fb      	ldr	r3, [r7, #12]
 8015bf6:	2b0f      	cmp	r3, #15
 8015bf8:	d914      	bls.n	8015c24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8015bfa:	4a17      	ldr	r2, [pc, #92]	; (8015c58 <vPortValidateInterruptPriority+0x70>)
 8015bfc:	68fb      	ldr	r3, [r7, #12]
 8015bfe:	4413      	add	r3, r2
 8015c00:	781b      	ldrb	r3, [r3, #0]
 8015c02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8015c04:	4b15      	ldr	r3, [pc, #84]	; (8015c5c <vPortValidateInterruptPriority+0x74>)
 8015c06:	781b      	ldrb	r3, [r3, #0]
 8015c08:	7afa      	ldrb	r2, [r7, #11]
 8015c0a:	429a      	cmp	r2, r3
 8015c0c:	d20a      	bcs.n	8015c24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8015c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c12:	f383 8811 	msr	BASEPRI, r3
 8015c16:	f3bf 8f6f 	isb	sy
 8015c1a:	f3bf 8f4f 	dsb	sy
 8015c1e:	607b      	str	r3, [r7, #4]
}
 8015c20:	bf00      	nop
 8015c22:	e7fe      	b.n	8015c22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8015c24:	4b0e      	ldr	r3, [pc, #56]	; (8015c60 <vPortValidateInterruptPriority+0x78>)
 8015c26:	681b      	ldr	r3, [r3, #0]
 8015c28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8015c2c:	4b0d      	ldr	r3, [pc, #52]	; (8015c64 <vPortValidateInterruptPriority+0x7c>)
 8015c2e:	681b      	ldr	r3, [r3, #0]
 8015c30:	429a      	cmp	r2, r3
 8015c32:	d90a      	bls.n	8015c4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8015c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015c38:	f383 8811 	msr	BASEPRI, r3
 8015c3c:	f3bf 8f6f 	isb	sy
 8015c40:	f3bf 8f4f 	dsb	sy
 8015c44:	603b      	str	r3, [r7, #0]
}
 8015c46:	bf00      	nop
 8015c48:	e7fe      	b.n	8015c48 <vPortValidateInterruptPriority+0x60>
	}
 8015c4a:	bf00      	nop
 8015c4c:	3714      	adds	r7, #20
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c54:	4770      	bx	lr
 8015c56:	bf00      	nop
 8015c58:	e000e3f0 	.word	0xe000e3f0
 8015c5c:	24001dd4 	.word	0x24001dd4
 8015c60:	e000ed0c 	.word	0xe000ed0c
 8015c64:	24001dd8 	.word	0x24001dd8

08015c68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8015c68:	b580      	push	{r7, lr}
 8015c6a:	b08a      	sub	sp, #40	; 0x28
 8015c6c:	af00      	add	r7, sp, #0
 8015c6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8015c70:	2300      	movs	r3, #0
 8015c72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8015c74:	f7fe fcc2 	bl	80145fc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8015c78:	4b5b      	ldr	r3, [pc, #364]	; (8015de8 <pvPortMalloc+0x180>)
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d101      	bne.n	8015c84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8015c80:	f000 f920 	bl	8015ec4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8015c84:	4b59      	ldr	r3, [pc, #356]	; (8015dec <pvPortMalloc+0x184>)
 8015c86:	681a      	ldr	r2, [r3, #0]
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	4013      	ands	r3, r2
 8015c8c:	2b00      	cmp	r3, #0
 8015c8e:	f040 8093 	bne.w	8015db8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	2b00      	cmp	r3, #0
 8015c96:	d01d      	beq.n	8015cd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8015c98:	2208      	movs	r2, #8
 8015c9a:	687b      	ldr	r3, [r7, #4]
 8015c9c:	4413      	add	r3, r2
 8015c9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f003 0307 	and.w	r3, r3, #7
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d014      	beq.n	8015cd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	f023 0307 	bic.w	r3, r3, #7
 8015cb0:	3308      	adds	r3, #8
 8015cb2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f003 0307 	and.w	r3, r3, #7
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d00a      	beq.n	8015cd4 <pvPortMalloc+0x6c>
	__asm volatile
 8015cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015cc2:	f383 8811 	msr	BASEPRI, r3
 8015cc6:	f3bf 8f6f 	isb	sy
 8015cca:	f3bf 8f4f 	dsb	sy
 8015cce:	617b      	str	r3, [r7, #20]
}
 8015cd0:	bf00      	nop
 8015cd2:	e7fe      	b.n	8015cd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	2b00      	cmp	r3, #0
 8015cd8:	d06e      	beq.n	8015db8 <pvPortMalloc+0x150>
 8015cda:	4b45      	ldr	r3, [pc, #276]	; (8015df0 <pvPortMalloc+0x188>)
 8015cdc:	681b      	ldr	r3, [r3, #0]
 8015cde:	687a      	ldr	r2, [r7, #4]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d869      	bhi.n	8015db8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8015ce4:	4b43      	ldr	r3, [pc, #268]	; (8015df4 <pvPortMalloc+0x18c>)
 8015ce6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8015ce8:	4b42      	ldr	r3, [pc, #264]	; (8015df4 <pvPortMalloc+0x18c>)
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015cee:	e004      	b.n	8015cfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8015cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8015cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8015cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfc:	685b      	ldr	r3, [r3, #4]
 8015cfe:	687a      	ldr	r2, [r7, #4]
 8015d00:	429a      	cmp	r2, r3
 8015d02:	d903      	bls.n	8015d0c <pvPortMalloc+0xa4>
 8015d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d1f1      	bne.n	8015cf0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8015d0c:	4b36      	ldr	r3, [pc, #216]	; (8015de8 <pvPortMalloc+0x180>)
 8015d0e:	681b      	ldr	r3, [r3, #0]
 8015d10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d12:	429a      	cmp	r2, r3
 8015d14:	d050      	beq.n	8015db8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8015d16:	6a3b      	ldr	r3, [r7, #32]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	2208      	movs	r2, #8
 8015d1c:	4413      	add	r3, r2
 8015d1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8015d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d22:	681a      	ldr	r2, [r3, #0]
 8015d24:	6a3b      	ldr	r3, [r7, #32]
 8015d26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8015d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d2a:	685a      	ldr	r2, [r3, #4]
 8015d2c:	687b      	ldr	r3, [r7, #4]
 8015d2e:	1ad2      	subs	r2, r2, r3
 8015d30:	2308      	movs	r3, #8
 8015d32:	005b      	lsls	r3, r3, #1
 8015d34:	429a      	cmp	r2, r3
 8015d36:	d91f      	bls.n	8015d78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8015d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	4413      	add	r3, r2
 8015d3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8015d40:	69bb      	ldr	r3, [r7, #24]
 8015d42:	f003 0307 	and.w	r3, r3, #7
 8015d46:	2b00      	cmp	r3, #0
 8015d48:	d00a      	beq.n	8015d60 <pvPortMalloc+0xf8>
	__asm volatile
 8015d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015d4e:	f383 8811 	msr	BASEPRI, r3
 8015d52:	f3bf 8f6f 	isb	sy
 8015d56:	f3bf 8f4f 	dsb	sy
 8015d5a:	613b      	str	r3, [r7, #16]
}
 8015d5c:	bf00      	nop
 8015d5e:	e7fe      	b.n	8015d5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8015d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d62:	685a      	ldr	r2, [r3, #4]
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	1ad2      	subs	r2, r2, r3
 8015d68:	69bb      	ldr	r3, [r7, #24]
 8015d6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8015d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d6e:	687a      	ldr	r2, [r7, #4]
 8015d70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8015d72:	69b8      	ldr	r0, [r7, #24]
 8015d74:	f000 f908 	bl	8015f88 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8015d78:	4b1d      	ldr	r3, [pc, #116]	; (8015df0 <pvPortMalloc+0x188>)
 8015d7a:	681a      	ldr	r2, [r3, #0]
 8015d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7e:	685b      	ldr	r3, [r3, #4]
 8015d80:	1ad3      	subs	r3, r2, r3
 8015d82:	4a1b      	ldr	r2, [pc, #108]	; (8015df0 <pvPortMalloc+0x188>)
 8015d84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8015d86:	4b1a      	ldr	r3, [pc, #104]	; (8015df0 <pvPortMalloc+0x188>)
 8015d88:	681a      	ldr	r2, [r3, #0]
 8015d8a:	4b1b      	ldr	r3, [pc, #108]	; (8015df8 <pvPortMalloc+0x190>)
 8015d8c:	681b      	ldr	r3, [r3, #0]
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d203      	bcs.n	8015d9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8015d92:	4b17      	ldr	r3, [pc, #92]	; (8015df0 <pvPortMalloc+0x188>)
 8015d94:	681b      	ldr	r3, [r3, #0]
 8015d96:	4a18      	ldr	r2, [pc, #96]	; (8015df8 <pvPortMalloc+0x190>)
 8015d98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8015d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d9c:	685a      	ldr	r2, [r3, #4]
 8015d9e:	4b13      	ldr	r3, [pc, #76]	; (8015dec <pvPortMalloc+0x184>)
 8015da0:	681b      	ldr	r3, [r3, #0]
 8015da2:	431a      	orrs	r2, r3
 8015da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8015da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015daa:	2200      	movs	r2, #0
 8015dac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8015dae:	4b13      	ldr	r3, [pc, #76]	; (8015dfc <pvPortMalloc+0x194>)
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	3301      	adds	r3, #1
 8015db4:	4a11      	ldr	r2, [pc, #68]	; (8015dfc <pvPortMalloc+0x194>)
 8015db6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8015db8:	f7fe fc2e 	bl	8014618 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8015dbc:	69fb      	ldr	r3, [r7, #28]
 8015dbe:	f003 0307 	and.w	r3, r3, #7
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d00a      	beq.n	8015ddc <pvPortMalloc+0x174>
	__asm volatile
 8015dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015dca:	f383 8811 	msr	BASEPRI, r3
 8015dce:	f3bf 8f6f 	isb	sy
 8015dd2:	f3bf 8f4f 	dsb	sy
 8015dd6:	60fb      	str	r3, [r7, #12]
}
 8015dd8:	bf00      	nop
 8015dda:	e7fe      	b.n	8015dda <pvPortMalloc+0x172>
	return pvReturn;
 8015ddc:	69fb      	ldr	r3, [r7, #28]
}
 8015dde:	4618      	mov	r0, r3
 8015de0:	3728      	adds	r7, #40	; 0x28
 8015de2:	46bd      	mov	sp, r7
 8015de4:	bd80      	pop	{r7, pc}
 8015de6:	bf00      	nop
 8015de8:	240059e4 	.word	0x240059e4
 8015dec:	240059f8 	.word	0x240059f8
 8015df0:	240059e8 	.word	0x240059e8
 8015df4:	240059dc 	.word	0x240059dc
 8015df8:	240059ec 	.word	0x240059ec
 8015dfc:	240059f0 	.word	0x240059f0

08015e00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8015e00:	b580      	push	{r7, lr}
 8015e02:	b086      	sub	sp, #24
 8015e04:	af00      	add	r7, sp, #0
 8015e06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8015e08:	687b      	ldr	r3, [r7, #4]
 8015e0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d04d      	beq.n	8015eae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8015e12:	2308      	movs	r3, #8
 8015e14:	425b      	negs	r3, r3
 8015e16:	697a      	ldr	r2, [r7, #20]
 8015e18:	4413      	add	r3, r2
 8015e1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	685a      	ldr	r2, [r3, #4]
 8015e24:	4b24      	ldr	r3, [pc, #144]	; (8015eb8 <vPortFree+0xb8>)
 8015e26:	681b      	ldr	r3, [r3, #0]
 8015e28:	4013      	ands	r3, r2
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d10a      	bne.n	8015e44 <vPortFree+0x44>
	__asm volatile
 8015e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e32:	f383 8811 	msr	BASEPRI, r3
 8015e36:	f3bf 8f6f 	isb	sy
 8015e3a:	f3bf 8f4f 	dsb	sy
 8015e3e:	60fb      	str	r3, [r7, #12]
}
 8015e40:	bf00      	nop
 8015e42:	e7fe      	b.n	8015e42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8015e44:	693b      	ldr	r3, [r7, #16]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d00a      	beq.n	8015e62 <vPortFree+0x62>
	__asm volatile
 8015e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8015e50:	f383 8811 	msr	BASEPRI, r3
 8015e54:	f3bf 8f6f 	isb	sy
 8015e58:	f3bf 8f4f 	dsb	sy
 8015e5c:	60bb      	str	r3, [r7, #8]
}
 8015e5e:	bf00      	nop
 8015e60:	e7fe      	b.n	8015e60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8015e62:	693b      	ldr	r3, [r7, #16]
 8015e64:	685a      	ldr	r2, [r3, #4]
 8015e66:	4b14      	ldr	r3, [pc, #80]	; (8015eb8 <vPortFree+0xb8>)
 8015e68:	681b      	ldr	r3, [r3, #0]
 8015e6a:	4013      	ands	r3, r2
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d01e      	beq.n	8015eae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8015e70:	693b      	ldr	r3, [r7, #16]
 8015e72:	681b      	ldr	r3, [r3, #0]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d11a      	bne.n	8015eae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8015e78:	693b      	ldr	r3, [r7, #16]
 8015e7a:	685a      	ldr	r2, [r3, #4]
 8015e7c:	4b0e      	ldr	r3, [pc, #56]	; (8015eb8 <vPortFree+0xb8>)
 8015e7e:	681b      	ldr	r3, [r3, #0]
 8015e80:	43db      	mvns	r3, r3
 8015e82:	401a      	ands	r2, r3
 8015e84:	693b      	ldr	r3, [r7, #16]
 8015e86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8015e88:	f7fe fbb8 	bl	80145fc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8015e8c:	693b      	ldr	r3, [r7, #16]
 8015e8e:	685a      	ldr	r2, [r3, #4]
 8015e90:	4b0a      	ldr	r3, [pc, #40]	; (8015ebc <vPortFree+0xbc>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	4413      	add	r3, r2
 8015e96:	4a09      	ldr	r2, [pc, #36]	; (8015ebc <vPortFree+0xbc>)
 8015e98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8015e9a:	6938      	ldr	r0, [r7, #16]
 8015e9c:	f000 f874 	bl	8015f88 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8015ea0:	4b07      	ldr	r3, [pc, #28]	; (8015ec0 <vPortFree+0xc0>)
 8015ea2:	681b      	ldr	r3, [r3, #0]
 8015ea4:	3301      	adds	r3, #1
 8015ea6:	4a06      	ldr	r2, [pc, #24]	; (8015ec0 <vPortFree+0xc0>)
 8015ea8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8015eaa:	f7fe fbb5 	bl	8014618 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8015eae:	bf00      	nop
 8015eb0:	3718      	adds	r7, #24
 8015eb2:	46bd      	mov	sp, r7
 8015eb4:	bd80      	pop	{r7, pc}
 8015eb6:	bf00      	nop
 8015eb8:	240059f8 	.word	0x240059f8
 8015ebc:	240059e8 	.word	0x240059e8
 8015ec0:	240059f4 	.word	0x240059f4

08015ec4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8015ec4:	b480      	push	{r7}
 8015ec6:	b085      	sub	sp, #20
 8015ec8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8015eca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8015ece:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8015ed0:	4b27      	ldr	r3, [pc, #156]	; (8015f70 <prvHeapInit+0xac>)
 8015ed2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8015ed4:	68fb      	ldr	r3, [r7, #12]
 8015ed6:	f003 0307 	and.w	r3, r3, #7
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d00c      	beq.n	8015ef8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8015ede:	68fb      	ldr	r3, [r7, #12]
 8015ee0:	3307      	adds	r3, #7
 8015ee2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015ee4:	68fb      	ldr	r3, [r7, #12]
 8015ee6:	f023 0307 	bic.w	r3, r3, #7
 8015eea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8015eec:	68ba      	ldr	r2, [r7, #8]
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	1ad3      	subs	r3, r2, r3
 8015ef2:	4a1f      	ldr	r2, [pc, #124]	; (8015f70 <prvHeapInit+0xac>)
 8015ef4:	4413      	add	r3, r2
 8015ef6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8015efc:	4a1d      	ldr	r2, [pc, #116]	; (8015f74 <prvHeapInit+0xb0>)
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8015f02:	4b1c      	ldr	r3, [pc, #112]	; (8015f74 <prvHeapInit+0xb0>)
 8015f04:	2200      	movs	r2, #0
 8015f06:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	68ba      	ldr	r2, [r7, #8]
 8015f0c:	4413      	add	r3, r2
 8015f0e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8015f10:	2208      	movs	r2, #8
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	1a9b      	subs	r3, r3, r2
 8015f16:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8015f18:	68fb      	ldr	r3, [r7, #12]
 8015f1a:	f023 0307 	bic.w	r3, r3, #7
 8015f1e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8015f20:	68fb      	ldr	r3, [r7, #12]
 8015f22:	4a15      	ldr	r2, [pc, #84]	; (8015f78 <prvHeapInit+0xb4>)
 8015f24:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8015f26:	4b14      	ldr	r3, [pc, #80]	; (8015f78 <prvHeapInit+0xb4>)
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	2200      	movs	r2, #0
 8015f2c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8015f2e:	4b12      	ldr	r3, [pc, #72]	; (8015f78 <prvHeapInit+0xb4>)
 8015f30:	681b      	ldr	r3, [r3, #0]
 8015f32:	2200      	movs	r2, #0
 8015f34:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8015f3a:	683b      	ldr	r3, [r7, #0]
 8015f3c:	68fa      	ldr	r2, [r7, #12]
 8015f3e:	1ad2      	subs	r2, r2, r3
 8015f40:	683b      	ldr	r3, [r7, #0]
 8015f42:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8015f44:	4b0c      	ldr	r3, [pc, #48]	; (8015f78 <prvHeapInit+0xb4>)
 8015f46:	681a      	ldr	r2, [r3, #0]
 8015f48:	683b      	ldr	r3, [r7, #0]
 8015f4a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015f4c:	683b      	ldr	r3, [r7, #0]
 8015f4e:	685b      	ldr	r3, [r3, #4]
 8015f50:	4a0a      	ldr	r2, [pc, #40]	; (8015f7c <prvHeapInit+0xb8>)
 8015f52:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8015f54:	683b      	ldr	r3, [r7, #0]
 8015f56:	685b      	ldr	r3, [r3, #4]
 8015f58:	4a09      	ldr	r2, [pc, #36]	; (8015f80 <prvHeapInit+0xbc>)
 8015f5a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8015f5c:	4b09      	ldr	r3, [pc, #36]	; (8015f84 <prvHeapInit+0xc0>)
 8015f5e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8015f62:	601a      	str	r2, [r3, #0]
}
 8015f64:	bf00      	nop
 8015f66:	3714      	adds	r7, #20
 8015f68:	46bd      	mov	sp, r7
 8015f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f6e:	4770      	bx	lr
 8015f70:	24001ddc 	.word	0x24001ddc
 8015f74:	240059dc 	.word	0x240059dc
 8015f78:	240059e4 	.word	0x240059e4
 8015f7c:	240059ec 	.word	0x240059ec
 8015f80:	240059e8 	.word	0x240059e8
 8015f84:	240059f8 	.word	0x240059f8

08015f88 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b085      	sub	sp, #20
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8015f90:	4b28      	ldr	r3, [pc, #160]	; (8016034 <prvInsertBlockIntoFreeList+0xac>)
 8015f92:	60fb      	str	r3, [r7, #12]
 8015f94:	e002      	b.n	8015f9c <prvInsertBlockIntoFreeList+0x14>
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	60fb      	str	r3, [r7, #12]
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	687a      	ldr	r2, [r7, #4]
 8015fa2:	429a      	cmp	r2, r3
 8015fa4:	d8f7      	bhi.n	8015f96 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	685b      	ldr	r3, [r3, #4]
 8015fae:	68ba      	ldr	r2, [r7, #8]
 8015fb0:	4413      	add	r3, r2
 8015fb2:	687a      	ldr	r2, [r7, #4]
 8015fb4:	429a      	cmp	r2, r3
 8015fb6:	d108      	bne.n	8015fca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	685a      	ldr	r2, [r3, #4]
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	685b      	ldr	r3, [r3, #4]
 8015fc0:	441a      	add	r2, r3
 8015fc2:	68fb      	ldr	r3, [r7, #12]
 8015fc4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8015fc6:	68fb      	ldr	r3, [r7, #12]
 8015fc8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8015fca:	687b      	ldr	r3, [r7, #4]
 8015fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8015fce:	687b      	ldr	r3, [r7, #4]
 8015fd0:	685b      	ldr	r3, [r3, #4]
 8015fd2:	68ba      	ldr	r2, [r7, #8]
 8015fd4:	441a      	add	r2, r3
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	429a      	cmp	r2, r3
 8015fdc:	d118      	bne.n	8016010 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681a      	ldr	r2, [r3, #0]
 8015fe2:	4b15      	ldr	r3, [pc, #84]	; (8016038 <prvInsertBlockIntoFreeList+0xb0>)
 8015fe4:	681b      	ldr	r3, [r3, #0]
 8015fe6:	429a      	cmp	r2, r3
 8015fe8:	d00d      	beq.n	8016006 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	685a      	ldr	r2, [r3, #4]
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	685b      	ldr	r3, [r3, #4]
 8015ff4:	441a      	add	r2, r3
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	681b      	ldr	r3, [r3, #0]
 8015ffe:	681a      	ldr	r2, [r3, #0]
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	601a      	str	r2, [r3, #0]
 8016004:	e008      	b.n	8016018 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8016006:	4b0c      	ldr	r3, [pc, #48]	; (8016038 <prvInsertBlockIntoFreeList+0xb0>)
 8016008:	681a      	ldr	r2, [r3, #0]
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	601a      	str	r2, [r3, #0]
 801600e:	e003      	b.n	8016018 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8016010:	68fb      	ldr	r3, [r7, #12]
 8016012:	681a      	ldr	r2, [r3, #0]
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8016018:	68fa      	ldr	r2, [r7, #12]
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	429a      	cmp	r2, r3
 801601e:	d002      	beq.n	8016026 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	687a      	ldr	r2, [r7, #4]
 8016024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8016026:	bf00      	nop
 8016028:	3714      	adds	r7, #20
 801602a:	46bd      	mov	sp, r7
 801602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016030:	4770      	bx	lr
 8016032:	bf00      	nop
 8016034:	240059dc 	.word	0x240059dc
 8016038:	240059e4 	.word	0x240059e4

0801603c <__errno>:
 801603c:	4b01      	ldr	r3, [pc, #4]	; (8016044 <__errno+0x8>)
 801603e:	6818      	ldr	r0, [r3, #0]
 8016040:	4770      	bx	lr
 8016042:	bf00      	nop
 8016044:	240000a4 	.word	0x240000a4

08016048 <__libc_init_array>:
 8016048:	b570      	push	{r4, r5, r6, lr}
 801604a:	4d0d      	ldr	r5, [pc, #52]	; (8016080 <__libc_init_array+0x38>)
 801604c:	4c0d      	ldr	r4, [pc, #52]	; (8016084 <__libc_init_array+0x3c>)
 801604e:	1b64      	subs	r4, r4, r5
 8016050:	10a4      	asrs	r4, r4, #2
 8016052:	2600      	movs	r6, #0
 8016054:	42a6      	cmp	r6, r4
 8016056:	d109      	bne.n	801606c <__libc_init_array+0x24>
 8016058:	4d0b      	ldr	r5, [pc, #44]	; (8016088 <__libc_init_array+0x40>)
 801605a:	4c0c      	ldr	r4, [pc, #48]	; (801608c <__libc_init_array+0x44>)
 801605c:	f000 fd3c 	bl	8016ad8 <_init>
 8016060:	1b64      	subs	r4, r4, r5
 8016062:	10a4      	asrs	r4, r4, #2
 8016064:	2600      	movs	r6, #0
 8016066:	42a6      	cmp	r6, r4
 8016068:	d105      	bne.n	8016076 <__libc_init_array+0x2e>
 801606a:	bd70      	pop	{r4, r5, r6, pc}
 801606c:	f855 3b04 	ldr.w	r3, [r5], #4
 8016070:	4798      	blx	r3
 8016072:	3601      	adds	r6, #1
 8016074:	e7ee      	b.n	8016054 <__libc_init_array+0xc>
 8016076:	f855 3b04 	ldr.w	r3, [r5], #4
 801607a:	4798      	blx	r3
 801607c:	3601      	adds	r6, #1
 801607e:	e7f2      	b.n	8016066 <__libc_init_array+0x1e>
 8016080:	08016f0c 	.word	0x08016f0c
 8016084:	08016f0c 	.word	0x08016f0c
 8016088:	08016f0c 	.word	0x08016f0c
 801608c:	08016f10 	.word	0x08016f10

08016090 <malloc>:
 8016090:	4b02      	ldr	r3, [pc, #8]	; (801609c <malloc+0xc>)
 8016092:	4601      	mov	r1, r0
 8016094:	6818      	ldr	r0, [r3, #0]
 8016096:	f000 b88d 	b.w	80161b4 <_malloc_r>
 801609a:	bf00      	nop
 801609c:	240000a4 	.word	0x240000a4

080160a0 <free>:
 80160a0:	4b02      	ldr	r3, [pc, #8]	; (80160ac <free+0xc>)
 80160a2:	4601      	mov	r1, r0
 80160a4:	6818      	ldr	r0, [r3, #0]
 80160a6:	f000 b819 	b.w	80160dc <_free_r>
 80160aa:	bf00      	nop
 80160ac:	240000a4 	.word	0x240000a4

080160b0 <memcpy>:
 80160b0:	440a      	add	r2, r1
 80160b2:	4291      	cmp	r1, r2
 80160b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80160b8:	d100      	bne.n	80160bc <memcpy+0xc>
 80160ba:	4770      	bx	lr
 80160bc:	b510      	push	{r4, lr}
 80160be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80160c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80160c6:	4291      	cmp	r1, r2
 80160c8:	d1f9      	bne.n	80160be <memcpy+0xe>
 80160ca:	bd10      	pop	{r4, pc}

080160cc <memset>:
 80160cc:	4402      	add	r2, r0
 80160ce:	4603      	mov	r3, r0
 80160d0:	4293      	cmp	r3, r2
 80160d2:	d100      	bne.n	80160d6 <memset+0xa>
 80160d4:	4770      	bx	lr
 80160d6:	f803 1b01 	strb.w	r1, [r3], #1
 80160da:	e7f9      	b.n	80160d0 <memset+0x4>

080160dc <_free_r>:
 80160dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80160de:	2900      	cmp	r1, #0
 80160e0:	d044      	beq.n	801616c <_free_r+0x90>
 80160e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80160e6:	9001      	str	r0, [sp, #4]
 80160e8:	2b00      	cmp	r3, #0
 80160ea:	f1a1 0404 	sub.w	r4, r1, #4
 80160ee:	bfb8      	it	lt
 80160f0:	18e4      	addlt	r4, r4, r3
 80160f2:	f000 fc39 	bl	8016968 <__malloc_lock>
 80160f6:	4a1e      	ldr	r2, [pc, #120]	; (8016170 <_free_r+0x94>)
 80160f8:	9801      	ldr	r0, [sp, #4]
 80160fa:	6813      	ldr	r3, [r2, #0]
 80160fc:	b933      	cbnz	r3, 801610c <_free_r+0x30>
 80160fe:	6063      	str	r3, [r4, #4]
 8016100:	6014      	str	r4, [r2, #0]
 8016102:	b003      	add	sp, #12
 8016104:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016108:	f000 bc34 	b.w	8016974 <__malloc_unlock>
 801610c:	42a3      	cmp	r3, r4
 801610e:	d908      	bls.n	8016122 <_free_r+0x46>
 8016110:	6825      	ldr	r5, [r4, #0]
 8016112:	1961      	adds	r1, r4, r5
 8016114:	428b      	cmp	r3, r1
 8016116:	bf01      	itttt	eq
 8016118:	6819      	ldreq	r1, [r3, #0]
 801611a:	685b      	ldreq	r3, [r3, #4]
 801611c:	1949      	addeq	r1, r1, r5
 801611e:	6021      	streq	r1, [r4, #0]
 8016120:	e7ed      	b.n	80160fe <_free_r+0x22>
 8016122:	461a      	mov	r2, r3
 8016124:	685b      	ldr	r3, [r3, #4]
 8016126:	b10b      	cbz	r3, 801612c <_free_r+0x50>
 8016128:	42a3      	cmp	r3, r4
 801612a:	d9fa      	bls.n	8016122 <_free_r+0x46>
 801612c:	6811      	ldr	r1, [r2, #0]
 801612e:	1855      	adds	r5, r2, r1
 8016130:	42a5      	cmp	r5, r4
 8016132:	d10b      	bne.n	801614c <_free_r+0x70>
 8016134:	6824      	ldr	r4, [r4, #0]
 8016136:	4421      	add	r1, r4
 8016138:	1854      	adds	r4, r2, r1
 801613a:	42a3      	cmp	r3, r4
 801613c:	6011      	str	r1, [r2, #0]
 801613e:	d1e0      	bne.n	8016102 <_free_r+0x26>
 8016140:	681c      	ldr	r4, [r3, #0]
 8016142:	685b      	ldr	r3, [r3, #4]
 8016144:	6053      	str	r3, [r2, #4]
 8016146:	4421      	add	r1, r4
 8016148:	6011      	str	r1, [r2, #0]
 801614a:	e7da      	b.n	8016102 <_free_r+0x26>
 801614c:	d902      	bls.n	8016154 <_free_r+0x78>
 801614e:	230c      	movs	r3, #12
 8016150:	6003      	str	r3, [r0, #0]
 8016152:	e7d6      	b.n	8016102 <_free_r+0x26>
 8016154:	6825      	ldr	r5, [r4, #0]
 8016156:	1961      	adds	r1, r4, r5
 8016158:	428b      	cmp	r3, r1
 801615a:	bf04      	itt	eq
 801615c:	6819      	ldreq	r1, [r3, #0]
 801615e:	685b      	ldreq	r3, [r3, #4]
 8016160:	6063      	str	r3, [r4, #4]
 8016162:	bf04      	itt	eq
 8016164:	1949      	addeq	r1, r1, r5
 8016166:	6021      	streq	r1, [r4, #0]
 8016168:	6054      	str	r4, [r2, #4]
 801616a:	e7ca      	b.n	8016102 <_free_r+0x26>
 801616c:	b003      	add	sp, #12
 801616e:	bd30      	pop	{r4, r5, pc}
 8016170:	240059fc 	.word	0x240059fc

08016174 <sbrk_aligned>:
 8016174:	b570      	push	{r4, r5, r6, lr}
 8016176:	4e0e      	ldr	r6, [pc, #56]	; (80161b0 <sbrk_aligned+0x3c>)
 8016178:	460c      	mov	r4, r1
 801617a:	6831      	ldr	r1, [r6, #0]
 801617c:	4605      	mov	r5, r0
 801617e:	b911      	cbnz	r1, 8016186 <sbrk_aligned+0x12>
 8016180:	f000 f902 	bl	8016388 <_sbrk_r>
 8016184:	6030      	str	r0, [r6, #0]
 8016186:	4621      	mov	r1, r4
 8016188:	4628      	mov	r0, r5
 801618a:	f000 f8fd 	bl	8016388 <_sbrk_r>
 801618e:	1c43      	adds	r3, r0, #1
 8016190:	d00a      	beq.n	80161a8 <sbrk_aligned+0x34>
 8016192:	1cc4      	adds	r4, r0, #3
 8016194:	f024 0403 	bic.w	r4, r4, #3
 8016198:	42a0      	cmp	r0, r4
 801619a:	d007      	beq.n	80161ac <sbrk_aligned+0x38>
 801619c:	1a21      	subs	r1, r4, r0
 801619e:	4628      	mov	r0, r5
 80161a0:	f000 f8f2 	bl	8016388 <_sbrk_r>
 80161a4:	3001      	adds	r0, #1
 80161a6:	d101      	bne.n	80161ac <sbrk_aligned+0x38>
 80161a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80161ac:	4620      	mov	r0, r4
 80161ae:	bd70      	pop	{r4, r5, r6, pc}
 80161b0:	24005a00 	.word	0x24005a00

080161b4 <_malloc_r>:
 80161b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80161b8:	1ccd      	adds	r5, r1, #3
 80161ba:	f025 0503 	bic.w	r5, r5, #3
 80161be:	3508      	adds	r5, #8
 80161c0:	2d0c      	cmp	r5, #12
 80161c2:	bf38      	it	cc
 80161c4:	250c      	movcc	r5, #12
 80161c6:	2d00      	cmp	r5, #0
 80161c8:	4607      	mov	r7, r0
 80161ca:	db01      	blt.n	80161d0 <_malloc_r+0x1c>
 80161cc:	42a9      	cmp	r1, r5
 80161ce:	d905      	bls.n	80161dc <_malloc_r+0x28>
 80161d0:	230c      	movs	r3, #12
 80161d2:	603b      	str	r3, [r7, #0]
 80161d4:	2600      	movs	r6, #0
 80161d6:	4630      	mov	r0, r6
 80161d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80161dc:	4e2e      	ldr	r6, [pc, #184]	; (8016298 <_malloc_r+0xe4>)
 80161de:	f000 fbc3 	bl	8016968 <__malloc_lock>
 80161e2:	6833      	ldr	r3, [r6, #0]
 80161e4:	461c      	mov	r4, r3
 80161e6:	bb34      	cbnz	r4, 8016236 <_malloc_r+0x82>
 80161e8:	4629      	mov	r1, r5
 80161ea:	4638      	mov	r0, r7
 80161ec:	f7ff ffc2 	bl	8016174 <sbrk_aligned>
 80161f0:	1c43      	adds	r3, r0, #1
 80161f2:	4604      	mov	r4, r0
 80161f4:	d14d      	bne.n	8016292 <_malloc_r+0xde>
 80161f6:	6834      	ldr	r4, [r6, #0]
 80161f8:	4626      	mov	r6, r4
 80161fa:	2e00      	cmp	r6, #0
 80161fc:	d140      	bne.n	8016280 <_malloc_r+0xcc>
 80161fe:	6823      	ldr	r3, [r4, #0]
 8016200:	4631      	mov	r1, r6
 8016202:	4638      	mov	r0, r7
 8016204:	eb04 0803 	add.w	r8, r4, r3
 8016208:	f000 f8be 	bl	8016388 <_sbrk_r>
 801620c:	4580      	cmp	r8, r0
 801620e:	d13a      	bne.n	8016286 <_malloc_r+0xd2>
 8016210:	6821      	ldr	r1, [r4, #0]
 8016212:	3503      	adds	r5, #3
 8016214:	1a6d      	subs	r5, r5, r1
 8016216:	f025 0503 	bic.w	r5, r5, #3
 801621a:	3508      	adds	r5, #8
 801621c:	2d0c      	cmp	r5, #12
 801621e:	bf38      	it	cc
 8016220:	250c      	movcc	r5, #12
 8016222:	4629      	mov	r1, r5
 8016224:	4638      	mov	r0, r7
 8016226:	f7ff ffa5 	bl	8016174 <sbrk_aligned>
 801622a:	3001      	adds	r0, #1
 801622c:	d02b      	beq.n	8016286 <_malloc_r+0xd2>
 801622e:	6823      	ldr	r3, [r4, #0]
 8016230:	442b      	add	r3, r5
 8016232:	6023      	str	r3, [r4, #0]
 8016234:	e00e      	b.n	8016254 <_malloc_r+0xa0>
 8016236:	6822      	ldr	r2, [r4, #0]
 8016238:	1b52      	subs	r2, r2, r5
 801623a:	d41e      	bmi.n	801627a <_malloc_r+0xc6>
 801623c:	2a0b      	cmp	r2, #11
 801623e:	d916      	bls.n	801626e <_malloc_r+0xba>
 8016240:	1961      	adds	r1, r4, r5
 8016242:	42a3      	cmp	r3, r4
 8016244:	6025      	str	r5, [r4, #0]
 8016246:	bf18      	it	ne
 8016248:	6059      	strne	r1, [r3, #4]
 801624a:	6863      	ldr	r3, [r4, #4]
 801624c:	bf08      	it	eq
 801624e:	6031      	streq	r1, [r6, #0]
 8016250:	5162      	str	r2, [r4, r5]
 8016252:	604b      	str	r3, [r1, #4]
 8016254:	4638      	mov	r0, r7
 8016256:	f104 060b 	add.w	r6, r4, #11
 801625a:	f000 fb8b 	bl	8016974 <__malloc_unlock>
 801625e:	f026 0607 	bic.w	r6, r6, #7
 8016262:	1d23      	adds	r3, r4, #4
 8016264:	1af2      	subs	r2, r6, r3
 8016266:	d0b6      	beq.n	80161d6 <_malloc_r+0x22>
 8016268:	1b9b      	subs	r3, r3, r6
 801626a:	50a3      	str	r3, [r4, r2]
 801626c:	e7b3      	b.n	80161d6 <_malloc_r+0x22>
 801626e:	6862      	ldr	r2, [r4, #4]
 8016270:	42a3      	cmp	r3, r4
 8016272:	bf0c      	ite	eq
 8016274:	6032      	streq	r2, [r6, #0]
 8016276:	605a      	strne	r2, [r3, #4]
 8016278:	e7ec      	b.n	8016254 <_malloc_r+0xa0>
 801627a:	4623      	mov	r3, r4
 801627c:	6864      	ldr	r4, [r4, #4]
 801627e:	e7b2      	b.n	80161e6 <_malloc_r+0x32>
 8016280:	4634      	mov	r4, r6
 8016282:	6876      	ldr	r6, [r6, #4]
 8016284:	e7b9      	b.n	80161fa <_malloc_r+0x46>
 8016286:	230c      	movs	r3, #12
 8016288:	603b      	str	r3, [r7, #0]
 801628a:	4638      	mov	r0, r7
 801628c:	f000 fb72 	bl	8016974 <__malloc_unlock>
 8016290:	e7a1      	b.n	80161d6 <_malloc_r+0x22>
 8016292:	6025      	str	r5, [r4, #0]
 8016294:	e7de      	b.n	8016254 <_malloc_r+0xa0>
 8016296:	bf00      	nop
 8016298:	240059fc 	.word	0x240059fc

0801629c <_puts_r>:
 801629c:	b570      	push	{r4, r5, r6, lr}
 801629e:	460e      	mov	r6, r1
 80162a0:	4605      	mov	r5, r0
 80162a2:	b118      	cbz	r0, 80162ac <_puts_r+0x10>
 80162a4:	6983      	ldr	r3, [r0, #24]
 80162a6:	b90b      	cbnz	r3, 80162ac <_puts_r+0x10>
 80162a8:	f000 fa58 	bl	801675c <__sinit>
 80162ac:	69ab      	ldr	r3, [r5, #24]
 80162ae:	68ac      	ldr	r4, [r5, #8]
 80162b0:	b913      	cbnz	r3, 80162b8 <_puts_r+0x1c>
 80162b2:	4628      	mov	r0, r5
 80162b4:	f000 fa52 	bl	801675c <__sinit>
 80162b8:	4b2c      	ldr	r3, [pc, #176]	; (801636c <_puts_r+0xd0>)
 80162ba:	429c      	cmp	r4, r3
 80162bc:	d120      	bne.n	8016300 <_puts_r+0x64>
 80162be:	686c      	ldr	r4, [r5, #4]
 80162c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80162c2:	07db      	lsls	r3, r3, #31
 80162c4:	d405      	bmi.n	80162d2 <_puts_r+0x36>
 80162c6:	89a3      	ldrh	r3, [r4, #12]
 80162c8:	0598      	lsls	r0, r3, #22
 80162ca:	d402      	bmi.n	80162d2 <_puts_r+0x36>
 80162cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80162ce:	f000 fae3 	bl	8016898 <__retarget_lock_acquire_recursive>
 80162d2:	89a3      	ldrh	r3, [r4, #12]
 80162d4:	0719      	lsls	r1, r3, #28
 80162d6:	d51d      	bpl.n	8016314 <_puts_r+0x78>
 80162d8:	6923      	ldr	r3, [r4, #16]
 80162da:	b1db      	cbz	r3, 8016314 <_puts_r+0x78>
 80162dc:	3e01      	subs	r6, #1
 80162de:	68a3      	ldr	r3, [r4, #8]
 80162e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80162e4:	3b01      	subs	r3, #1
 80162e6:	60a3      	str	r3, [r4, #8]
 80162e8:	bb39      	cbnz	r1, 801633a <_puts_r+0x9e>
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	da38      	bge.n	8016360 <_puts_r+0xc4>
 80162ee:	4622      	mov	r2, r4
 80162f0:	210a      	movs	r1, #10
 80162f2:	4628      	mov	r0, r5
 80162f4:	f000 f858 	bl	80163a8 <__swbuf_r>
 80162f8:	3001      	adds	r0, #1
 80162fa:	d011      	beq.n	8016320 <_puts_r+0x84>
 80162fc:	250a      	movs	r5, #10
 80162fe:	e011      	b.n	8016324 <_puts_r+0x88>
 8016300:	4b1b      	ldr	r3, [pc, #108]	; (8016370 <_puts_r+0xd4>)
 8016302:	429c      	cmp	r4, r3
 8016304:	d101      	bne.n	801630a <_puts_r+0x6e>
 8016306:	68ac      	ldr	r4, [r5, #8]
 8016308:	e7da      	b.n	80162c0 <_puts_r+0x24>
 801630a:	4b1a      	ldr	r3, [pc, #104]	; (8016374 <_puts_r+0xd8>)
 801630c:	429c      	cmp	r4, r3
 801630e:	bf08      	it	eq
 8016310:	68ec      	ldreq	r4, [r5, #12]
 8016312:	e7d5      	b.n	80162c0 <_puts_r+0x24>
 8016314:	4621      	mov	r1, r4
 8016316:	4628      	mov	r0, r5
 8016318:	f000 f898 	bl	801644c <__swsetup_r>
 801631c:	2800      	cmp	r0, #0
 801631e:	d0dd      	beq.n	80162dc <_puts_r+0x40>
 8016320:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8016324:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016326:	07da      	lsls	r2, r3, #31
 8016328:	d405      	bmi.n	8016336 <_puts_r+0x9a>
 801632a:	89a3      	ldrh	r3, [r4, #12]
 801632c:	059b      	lsls	r3, r3, #22
 801632e:	d402      	bmi.n	8016336 <_puts_r+0x9a>
 8016330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016332:	f000 fab2 	bl	801689a <__retarget_lock_release_recursive>
 8016336:	4628      	mov	r0, r5
 8016338:	bd70      	pop	{r4, r5, r6, pc}
 801633a:	2b00      	cmp	r3, #0
 801633c:	da04      	bge.n	8016348 <_puts_r+0xac>
 801633e:	69a2      	ldr	r2, [r4, #24]
 8016340:	429a      	cmp	r2, r3
 8016342:	dc06      	bgt.n	8016352 <_puts_r+0xb6>
 8016344:	290a      	cmp	r1, #10
 8016346:	d004      	beq.n	8016352 <_puts_r+0xb6>
 8016348:	6823      	ldr	r3, [r4, #0]
 801634a:	1c5a      	adds	r2, r3, #1
 801634c:	6022      	str	r2, [r4, #0]
 801634e:	7019      	strb	r1, [r3, #0]
 8016350:	e7c5      	b.n	80162de <_puts_r+0x42>
 8016352:	4622      	mov	r2, r4
 8016354:	4628      	mov	r0, r5
 8016356:	f000 f827 	bl	80163a8 <__swbuf_r>
 801635a:	3001      	adds	r0, #1
 801635c:	d1bf      	bne.n	80162de <_puts_r+0x42>
 801635e:	e7df      	b.n	8016320 <_puts_r+0x84>
 8016360:	6823      	ldr	r3, [r4, #0]
 8016362:	250a      	movs	r5, #10
 8016364:	1c5a      	adds	r2, r3, #1
 8016366:	6022      	str	r2, [r4, #0]
 8016368:	701d      	strb	r5, [r3, #0]
 801636a:	e7db      	b.n	8016324 <_puts_r+0x88>
 801636c:	08016ec4 	.word	0x08016ec4
 8016370:	08016ee4 	.word	0x08016ee4
 8016374:	08016ea4 	.word	0x08016ea4

08016378 <puts>:
 8016378:	4b02      	ldr	r3, [pc, #8]	; (8016384 <puts+0xc>)
 801637a:	4601      	mov	r1, r0
 801637c:	6818      	ldr	r0, [r3, #0]
 801637e:	f7ff bf8d 	b.w	801629c <_puts_r>
 8016382:	bf00      	nop
 8016384:	240000a4 	.word	0x240000a4

08016388 <_sbrk_r>:
 8016388:	b538      	push	{r3, r4, r5, lr}
 801638a:	4d06      	ldr	r5, [pc, #24]	; (80163a4 <_sbrk_r+0x1c>)
 801638c:	2300      	movs	r3, #0
 801638e:	4604      	mov	r4, r0
 8016390:	4608      	mov	r0, r1
 8016392:	602b      	str	r3, [r5, #0]
 8016394:	f7ed fa12 	bl	80037bc <_sbrk>
 8016398:	1c43      	adds	r3, r0, #1
 801639a:	d102      	bne.n	80163a2 <_sbrk_r+0x1a>
 801639c:	682b      	ldr	r3, [r5, #0]
 801639e:	b103      	cbz	r3, 80163a2 <_sbrk_r+0x1a>
 80163a0:	6023      	str	r3, [r4, #0]
 80163a2:	bd38      	pop	{r3, r4, r5, pc}
 80163a4:	24005a08 	.word	0x24005a08

080163a8 <__swbuf_r>:
 80163a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80163aa:	460e      	mov	r6, r1
 80163ac:	4614      	mov	r4, r2
 80163ae:	4605      	mov	r5, r0
 80163b0:	b118      	cbz	r0, 80163ba <__swbuf_r+0x12>
 80163b2:	6983      	ldr	r3, [r0, #24]
 80163b4:	b90b      	cbnz	r3, 80163ba <__swbuf_r+0x12>
 80163b6:	f000 f9d1 	bl	801675c <__sinit>
 80163ba:	4b21      	ldr	r3, [pc, #132]	; (8016440 <__swbuf_r+0x98>)
 80163bc:	429c      	cmp	r4, r3
 80163be:	d12b      	bne.n	8016418 <__swbuf_r+0x70>
 80163c0:	686c      	ldr	r4, [r5, #4]
 80163c2:	69a3      	ldr	r3, [r4, #24]
 80163c4:	60a3      	str	r3, [r4, #8]
 80163c6:	89a3      	ldrh	r3, [r4, #12]
 80163c8:	071a      	lsls	r2, r3, #28
 80163ca:	d52f      	bpl.n	801642c <__swbuf_r+0x84>
 80163cc:	6923      	ldr	r3, [r4, #16]
 80163ce:	b36b      	cbz	r3, 801642c <__swbuf_r+0x84>
 80163d0:	6923      	ldr	r3, [r4, #16]
 80163d2:	6820      	ldr	r0, [r4, #0]
 80163d4:	1ac0      	subs	r0, r0, r3
 80163d6:	6963      	ldr	r3, [r4, #20]
 80163d8:	b2f6      	uxtb	r6, r6
 80163da:	4283      	cmp	r3, r0
 80163dc:	4637      	mov	r7, r6
 80163de:	dc04      	bgt.n	80163ea <__swbuf_r+0x42>
 80163e0:	4621      	mov	r1, r4
 80163e2:	4628      	mov	r0, r5
 80163e4:	f000 f926 	bl	8016634 <_fflush_r>
 80163e8:	bb30      	cbnz	r0, 8016438 <__swbuf_r+0x90>
 80163ea:	68a3      	ldr	r3, [r4, #8]
 80163ec:	3b01      	subs	r3, #1
 80163ee:	60a3      	str	r3, [r4, #8]
 80163f0:	6823      	ldr	r3, [r4, #0]
 80163f2:	1c5a      	adds	r2, r3, #1
 80163f4:	6022      	str	r2, [r4, #0]
 80163f6:	701e      	strb	r6, [r3, #0]
 80163f8:	6963      	ldr	r3, [r4, #20]
 80163fa:	3001      	adds	r0, #1
 80163fc:	4283      	cmp	r3, r0
 80163fe:	d004      	beq.n	801640a <__swbuf_r+0x62>
 8016400:	89a3      	ldrh	r3, [r4, #12]
 8016402:	07db      	lsls	r3, r3, #31
 8016404:	d506      	bpl.n	8016414 <__swbuf_r+0x6c>
 8016406:	2e0a      	cmp	r6, #10
 8016408:	d104      	bne.n	8016414 <__swbuf_r+0x6c>
 801640a:	4621      	mov	r1, r4
 801640c:	4628      	mov	r0, r5
 801640e:	f000 f911 	bl	8016634 <_fflush_r>
 8016412:	b988      	cbnz	r0, 8016438 <__swbuf_r+0x90>
 8016414:	4638      	mov	r0, r7
 8016416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016418:	4b0a      	ldr	r3, [pc, #40]	; (8016444 <__swbuf_r+0x9c>)
 801641a:	429c      	cmp	r4, r3
 801641c:	d101      	bne.n	8016422 <__swbuf_r+0x7a>
 801641e:	68ac      	ldr	r4, [r5, #8]
 8016420:	e7cf      	b.n	80163c2 <__swbuf_r+0x1a>
 8016422:	4b09      	ldr	r3, [pc, #36]	; (8016448 <__swbuf_r+0xa0>)
 8016424:	429c      	cmp	r4, r3
 8016426:	bf08      	it	eq
 8016428:	68ec      	ldreq	r4, [r5, #12]
 801642a:	e7ca      	b.n	80163c2 <__swbuf_r+0x1a>
 801642c:	4621      	mov	r1, r4
 801642e:	4628      	mov	r0, r5
 8016430:	f000 f80c 	bl	801644c <__swsetup_r>
 8016434:	2800      	cmp	r0, #0
 8016436:	d0cb      	beq.n	80163d0 <__swbuf_r+0x28>
 8016438:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801643c:	e7ea      	b.n	8016414 <__swbuf_r+0x6c>
 801643e:	bf00      	nop
 8016440:	08016ec4 	.word	0x08016ec4
 8016444:	08016ee4 	.word	0x08016ee4
 8016448:	08016ea4 	.word	0x08016ea4

0801644c <__swsetup_r>:
 801644c:	4b32      	ldr	r3, [pc, #200]	; (8016518 <__swsetup_r+0xcc>)
 801644e:	b570      	push	{r4, r5, r6, lr}
 8016450:	681d      	ldr	r5, [r3, #0]
 8016452:	4606      	mov	r6, r0
 8016454:	460c      	mov	r4, r1
 8016456:	b125      	cbz	r5, 8016462 <__swsetup_r+0x16>
 8016458:	69ab      	ldr	r3, [r5, #24]
 801645a:	b913      	cbnz	r3, 8016462 <__swsetup_r+0x16>
 801645c:	4628      	mov	r0, r5
 801645e:	f000 f97d 	bl	801675c <__sinit>
 8016462:	4b2e      	ldr	r3, [pc, #184]	; (801651c <__swsetup_r+0xd0>)
 8016464:	429c      	cmp	r4, r3
 8016466:	d10f      	bne.n	8016488 <__swsetup_r+0x3c>
 8016468:	686c      	ldr	r4, [r5, #4]
 801646a:	89a3      	ldrh	r3, [r4, #12]
 801646c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016470:	0719      	lsls	r1, r3, #28
 8016472:	d42c      	bmi.n	80164ce <__swsetup_r+0x82>
 8016474:	06dd      	lsls	r5, r3, #27
 8016476:	d411      	bmi.n	801649c <__swsetup_r+0x50>
 8016478:	2309      	movs	r3, #9
 801647a:	6033      	str	r3, [r6, #0]
 801647c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016480:	81a3      	strh	r3, [r4, #12]
 8016482:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016486:	e03e      	b.n	8016506 <__swsetup_r+0xba>
 8016488:	4b25      	ldr	r3, [pc, #148]	; (8016520 <__swsetup_r+0xd4>)
 801648a:	429c      	cmp	r4, r3
 801648c:	d101      	bne.n	8016492 <__swsetup_r+0x46>
 801648e:	68ac      	ldr	r4, [r5, #8]
 8016490:	e7eb      	b.n	801646a <__swsetup_r+0x1e>
 8016492:	4b24      	ldr	r3, [pc, #144]	; (8016524 <__swsetup_r+0xd8>)
 8016494:	429c      	cmp	r4, r3
 8016496:	bf08      	it	eq
 8016498:	68ec      	ldreq	r4, [r5, #12]
 801649a:	e7e6      	b.n	801646a <__swsetup_r+0x1e>
 801649c:	0758      	lsls	r0, r3, #29
 801649e:	d512      	bpl.n	80164c6 <__swsetup_r+0x7a>
 80164a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80164a2:	b141      	cbz	r1, 80164b6 <__swsetup_r+0x6a>
 80164a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80164a8:	4299      	cmp	r1, r3
 80164aa:	d002      	beq.n	80164b2 <__swsetup_r+0x66>
 80164ac:	4630      	mov	r0, r6
 80164ae:	f7ff fe15 	bl	80160dc <_free_r>
 80164b2:	2300      	movs	r3, #0
 80164b4:	6363      	str	r3, [r4, #52]	; 0x34
 80164b6:	89a3      	ldrh	r3, [r4, #12]
 80164b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80164bc:	81a3      	strh	r3, [r4, #12]
 80164be:	2300      	movs	r3, #0
 80164c0:	6063      	str	r3, [r4, #4]
 80164c2:	6923      	ldr	r3, [r4, #16]
 80164c4:	6023      	str	r3, [r4, #0]
 80164c6:	89a3      	ldrh	r3, [r4, #12]
 80164c8:	f043 0308 	orr.w	r3, r3, #8
 80164cc:	81a3      	strh	r3, [r4, #12]
 80164ce:	6923      	ldr	r3, [r4, #16]
 80164d0:	b94b      	cbnz	r3, 80164e6 <__swsetup_r+0x9a>
 80164d2:	89a3      	ldrh	r3, [r4, #12]
 80164d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80164d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80164dc:	d003      	beq.n	80164e6 <__swsetup_r+0x9a>
 80164de:	4621      	mov	r1, r4
 80164e0:	4630      	mov	r0, r6
 80164e2:	f000 fa01 	bl	80168e8 <__smakebuf_r>
 80164e6:	89a0      	ldrh	r0, [r4, #12]
 80164e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80164ec:	f010 0301 	ands.w	r3, r0, #1
 80164f0:	d00a      	beq.n	8016508 <__swsetup_r+0xbc>
 80164f2:	2300      	movs	r3, #0
 80164f4:	60a3      	str	r3, [r4, #8]
 80164f6:	6963      	ldr	r3, [r4, #20]
 80164f8:	425b      	negs	r3, r3
 80164fa:	61a3      	str	r3, [r4, #24]
 80164fc:	6923      	ldr	r3, [r4, #16]
 80164fe:	b943      	cbnz	r3, 8016512 <__swsetup_r+0xc6>
 8016500:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8016504:	d1ba      	bne.n	801647c <__swsetup_r+0x30>
 8016506:	bd70      	pop	{r4, r5, r6, pc}
 8016508:	0781      	lsls	r1, r0, #30
 801650a:	bf58      	it	pl
 801650c:	6963      	ldrpl	r3, [r4, #20]
 801650e:	60a3      	str	r3, [r4, #8]
 8016510:	e7f4      	b.n	80164fc <__swsetup_r+0xb0>
 8016512:	2000      	movs	r0, #0
 8016514:	e7f7      	b.n	8016506 <__swsetup_r+0xba>
 8016516:	bf00      	nop
 8016518:	240000a4 	.word	0x240000a4
 801651c:	08016ec4 	.word	0x08016ec4
 8016520:	08016ee4 	.word	0x08016ee4
 8016524:	08016ea4 	.word	0x08016ea4

08016528 <__sflush_r>:
 8016528:	898a      	ldrh	r2, [r1, #12]
 801652a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801652e:	4605      	mov	r5, r0
 8016530:	0710      	lsls	r0, r2, #28
 8016532:	460c      	mov	r4, r1
 8016534:	d458      	bmi.n	80165e8 <__sflush_r+0xc0>
 8016536:	684b      	ldr	r3, [r1, #4]
 8016538:	2b00      	cmp	r3, #0
 801653a:	dc05      	bgt.n	8016548 <__sflush_r+0x20>
 801653c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801653e:	2b00      	cmp	r3, #0
 8016540:	dc02      	bgt.n	8016548 <__sflush_r+0x20>
 8016542:	2000      	movs	r0, #0
 8016544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016548:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801654a:	2e00      	cmp	r6, #0
 801654c:	d0f9      	beq.n	8016542 <__sflush_r+0x1a>
 801654e:	2300      	movs	r3, #0
 8016550:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016554:	682f      	ldr	r7, [r5, #0]
 8016556:	602b      	str	r3, [r5, #0]
 8016558:	d032      	beq.n	80165c0 <__sflush_r+0x98>
 801655a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801655c:	89a3      	ldrh	r3, [r4, #12]
 801655e:	075a      	lsls	r2, r3, #29
 8016560:	d505      	bpl.n	801656e <__sflush_r+0x46>
 8016562:	6863      	ldr	r3, [r4, #4]
 8016564:	1ac0      	subs	r0, r0, r3
 8016566:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016568:	b10b      	cbz	r3, 801656e <__sflush_r+0x46>
 801656a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801656c:	1ac0      	subs	r0, r0, r3
 801656e:	2300      	movs	r3, #0
 8016570:	4602      	mov	r2, r0
 8016572:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016574:	6a21      	ldr	r1, [r4, #32]
 8016576:	4628      	mov	r0, r5
 8016578:	47b0      	blx	r6
 801657a:	1c43      	adds	r3, r0, #1
 801657c:	89a3      	ldrh	r3, [r4, #12]
 801657e:	d106      	bne.n	801658e <__sflush_r+0x66>
 8016580:	6829      	ldr	r1, [r5, #0]
 8016582:	291d      	cmp	r1, #29
 8016584:	d82c      	bhi.n	80165e0 <__sflush_r+0xb8>
 8016586:	4a2a      	ldr	r2, [pc, #168]	; (8016630 <__sflush_r+0x108>)
 8016588:	40ca      	lsrs	r2, r1
 801658a:	07d6      	lsls	r6, r2, #31
 801658c:	d528      	bpl.n	80165e0 <__sflush_r+0xb8>
 801658e:	2200      	movs	r2, #0
 8016590:	6062      	str	r2, [r4, #4]
 8016592:	04d9      	lsls	r1, r3, #19
 8016594:	6922      	ldr	r2, [r4, #16]
 8016596:	6022      	str	r2, [r4, #0]
 8016598:	d504      	bpl.n	80165a4 <__sflush_r+0x7c>
 801659a:	1c42      	adds	r2, r0, #1
 801659c:	d101      	bne.n	80165a2 <__sflush_r+0x7a>
 801659e:	682b      	ldr	r3, [r5, #0]
 80165a0:	b903      	cbnz	r3, 80165a4 <__sflush_r+0x7c>
 80165a2:	6560      	str	r0, [r4, #84]	; 0x54
 80165a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80165a6:	602f      	str	r7, [r5, #0]
 80165a8:	2900      	cmp	r1, #0
 80165aa:	d0ca      	beq.n	8016542 <__sflush_r+0x1a>
 80165ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80165b0:	4299      	cmp	r1, r3
 80165b2:	d002      	beq.n	80165ba <__sflush_r+0x92>
 80165b4:	4628      	mov	r0, r5
 80165b6:	f7ff fd91 	bl	80160dc <_free_r>
 80165ba:	2000      	movs	r0, #0
 80165bc:	6360      	str	r0, [r4, #52]	; 0x34
 80165be:	e7c1      	b.n	8016544 <__sflush_r+0x1c>
 80165c0:	6a21      	ldr	r1, [r4, #32]
 80165c2:	2301      	movs	r3, #1
 80165c4:	4628      	mov	r0, r5
 80165c6:	47b0      	blx	r6
 80165c8:	1c41      	adds	r1, r0, #1
 80165ca:	d1c7      	bne.n	801655c <__sflush_r+0x34>
 80165cc:	682b      	ldr	r3, [r5, #0]
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	d0c4      	beq.n	801655c <__sflush_r+0x34>
 80165d2:	2b1d      	cmp	r3, #29
 80165d4:	d001      	beq.n	80165da <__sflush_r+0xb2>
 80165d6:	2b16      	cmp	r3, #22
 80165d8:	d101      	bne.n	80165de <__sflush_r+0xb6>
 80165da:	602f      	str	r7, [r5, #0]
 80165dc:	e7b1      	b.n	8016542 <__sflush_r+0x1a>
 80165de:	89a3      	ldrh	r3, [r4, #12]
 80165e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80165e4:	81a3      	strh	r3, [r4, #12]
 80165e6:	e7ad      	b.n	8016544 <__sflush_r+0x1c>
 80165e8:	690f      	ldr	r7, [r1, #16]
 80165ea:	2f00      	cmp	r7, #0
 80165ec:	d0a9      	beq.n	8016542 <__sflush_r+0x1a>
 80165ee:	0793      	lsls	r3, r2, #30
 80165f0:	680e      	ldr	r6, [r1, #0]
 80165f2:	bf08      	it	eq
 80165f4:	694b      	ldreq	r3, [r1, #20]
 80165f6:	600f      	str	r7, [r1, #0]
 80165f8:	bf18      	it	ne
 80165fa:	2300      	movne	r3, #0
 80165fc:	eba6 0807 	sub.w	r8, r6, r7
 8016600:	608b      	str	r3, [r1, #8]
 8016602:	f1b8 0f00 	cmp.w	r8, #0
 8016606:	dd9c      	ble.n	8016542 <__sflush_r+0x1a>
 8016608:	6a21      	ldr	r1, [r4, #32]
 801660a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801660c:	4643      	mov	r3, r8
 801660e:	463a      	mov	r2, r7
 8016610:	4628      	mov	r0, r5
 8016612:	47b0      	blx	r6
 8016614:	2800      	cmp	r0, #0
 8016616:	dc06      	bgt.n	8016626 <__sflush_r+0xfe>
 8016618:	89a3      	ldrh	r3, [r4, #12]
 801661a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801661e:	81a3      	strh	r3, [r4, #12]
 8016620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8016624:	e78e      	b.n	8016544 <__sflush_r+0x1c>
 8016626:	4407      	add	r7, r0
 8016628:	eba8 0800 	sub.w	r8, r8, r0
 801662c:	e7e9      	b.n	8016602 <__sflush_r+0xda>
 801662e:	bf00      	nop
 8016630:	20400001 	.word	0x20400001

08016634 <_fflush_r>:
 8016634:	b538      	push	{r3, r4, r5, lr}
 8016636:	690b      	ldr	r3, [r1, #16]
 8016638:	4605      	mov	r5, r0
 801663a:	460c      	mov	r4, r1
 801663c:	b913      	cbnz	r3, 8016644 <_fflush_r+0x10>
 801663e:	2500      	movs	r5, #0
 8016640:	4628      	mov	r0, r5
 8016642:	bd38      	pop	{r3, r4, r5, pc}
 8016644:	b118      	cbz	r0, 801664e <_fflush_r+0x1a>
 8016646:	6983      	ldr	r3, [r0, #24]
 8016648:	b90b      	cbnz	r3, 801664e <_fflush_r+0x1a>
 801664a:	f000 f887 	bl	801675c <__sinit>
 801664e:	4b14      	ldr	r3, [pc, #80]	; (80166a0 <_fflush_r+0x6c>)
 8016650:	429c      	cmp	r4, r3
 8016652:	d11b      	bne.n	801668c <_fflush_r+0x58>
 8016654:	686c      	ldr	r4, [r5, #4]
 8016656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d0ef      	beq.n	801663e <_fflush_r+0xa>
 801665e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016660:	07d0      	lsls	r0, r2, #31
 8016662:	d404      	bmi.n	801666e <_fflush_r+0x3a>
 8016664:	0599      	lsls	r1, r3, #22
 8016666:	d402      	bmi.n	801666e <_fflush_r+0x3a>
 8016668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801666a:	f000 f915 	bl	8016898 <__retarget_lock_acquire_recursive>
 801666e:	4628      	mov	r0, r5
 8016670:	4621      	mov	r1, r4
 8016672:	f7ff ff59 	bl	8016528 <__sflush_r>
 8016676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016678:	07da      	lsls	r2, r3, #31
 801667a:	4605      	mov	r5, r0
 801667c:	d4e0      	bmi.n	8016640 <_fflush_r+0xc>
 801667e:	89a3      	ldrh	r3, [r4, #12]
 8016680:	059b      	lsls	r3, r3, #22
 8016682:	d4dd      	bmi.n	8016640 <_fflush_r+0xc>
 8016684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016686:	f000 f908 	bl	801689a <__retarget_lock_release_recursive>
 801668a:	e7d9      	b.n	8016640 <_fflush_r+0xc>
 801668c:	4b05      	ldr	r3, [pc, #20]	; (80166a4 <_fflush_r+0x70>)
 801668e:	429c      	cmp	r4, r3
 8016690:	d101      	bne.n	8016696 <_fflush_r+0x62>
 8016692:	68ac      	ldr	r4, [r5, #8]
 8016694:	e7df      	b.n	8016656 <_fflush_r+0x22>
 8016696:	4b04      	ldr	r3, [pc, #16]	; (80166a8 <_fflush_r+0x74>)
 8016698:	429c      	cmp	r4, r3
 801669a:	bf08      	it	eq
 801669c:	68ec      	ldreq	r4, [r5, #12]
 801669e:	e7da      	b.n	8016656 <_fflush_r+0x22>
 80166a0:	08016ec4 	.word	0x08016ec4
 80166a4:	08016ee4 	.word	0x08016ee4
 80166a8:	08016ea4 	.word	0x08016ea4

080166ac <std>:
 80166ac:	2300      	movs	r3, #0
 80166ae:	b510      	push	{r4, lr}
 80166b0:	4604      	mov	r4, r0
 80166b2:	e9c0 3300 	strd	r3, r3, [r0]
 80166b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80166ba:	6083      	str	r3, [r0, #8]
 80166bc:	8181      	strh	r1, [r0, #12]
 80166be:	6643      	str	r3, [r0, #100]	; 0x64
 80166c0:	81c2      	strh	r2, [r0, #14]
 80166c2:	6183      	str	r3, [r0, #24]
 80166c4:	4619      	mov	r1, r3
 80166c6:	2208      	movs	r2, #8
 80166c8:	305c      	adds	r0, #92	; 0x5c
 80166ca:	f7ff fcff 	bl	80160cc <memset>
 80166ce:	4b05      	ldr	r3, [pc, #20]	; (80166e4 <std+0x38>)
 80166d0:	6263      	str	r3, [r4, #36]	; 0x24
 80166d2:	4b05      	ldr	r3, [pc, #20]	; (80166e8 <std+0x3c>)
 80166d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80166d6:	4b05      	ldr	r3, [pc, #20]	; (80166ec <std+0x40>)
 80166d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80166da:	4b05      	ldr	r3, [pc, #20]	; (80166f0 <std+0x44>)
 80166dc:	6224      	str	r4, [r4, #32]
 80166de:	6323      	str	r3, [r4, #48]	; 0x30
 80166e0:	bd10      	pop	{r4, pc}
 80166e2:	bf00      	nop
 80166e4:	08016981 	.word	0x08016981
 80166e8:	080169a3 	.word	0x080169a3
 80166ec:	080169db 	.word	0x080169db
 80166f0:	080169ff 	.word	0x080169ff

080166f4 <_cleanup_r>:
 80166f4:	4901      	ldr	r1, [pc, #4]	; (80166fc <_cleanup_r+0x8>)
 80166f6:	f000 b8af 	b.w	8016858 <_fwalk_reent>
 80166fa:	bf00      	nop
 80166fc:	08016635 	.word	0x08016635

08016700 <__sfmoreglue>:
 8016700:	b570      	push	{r4, r5, r6, lr}
 8016702:	2268      	movs	r2, #104	; 0x68
 8016704:	1e4d      	subs	r5, r1, #1
 8016706:	4355      	muls	r5, r2
 8016708:	460e      	mov	r6, r1
 801670a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801670e:	f7ff fd51 	bl	80161b4 <_malloc_r>
 8016712:	4604      	mov	r4, r0
 8016714:	b140      	cbz	r0, 8016728 <__sfmoreglue+0x28>
 8016716:	2100      	movs	r1, #0
 8016718:	e9c0 1600 	strd	r1, r6, [r0]
 801671c:	300c      	adds	r0, #12
 801671e:	60a0      	str	r0, [r4, #8]
 8016720:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016724:	f7ff fcd2 	bl	80160cc <memset>
 8016728:	4620      	mov	r0, r4
 801672a:	bd70      	pop	{r4, r5, r6, pc}

0801672c <__sfp_lock_acquire>:
 801672c:	4801      	ldr	r0, [pc, #4]	; (8016734 <__sfp_lock_acquire+0x8>)
 801672e:	f000 b8b3 	b.w	8016898 <__retarget_lock_acquire_recursive>
 8016732:	bf00      	nop
 8016734:	24005a05 	.word	0x24005a05

08016738 <__sfp_lock_release>:
 8016738:	4801      	ldr	r0, [pc, #4]	; (8016740 <__sfp_lock_release+0x8>)
 801673a:	f000 b8ae 	b.w	801689a <__retarget_lock_release_recursive>
 801673e:	bf00      	nop
 8016740:	24005a05 	.word	0x24005a05

08016744 <__sinit_lock_acquire>:
 8016744:	4801      	ldr	r0, [pc, #4]	; (801674c <__sinit_lock_acquire+0x8>)
 8016746:	f000 b8a7 	b.w	8016898 <__retarget_lock_acquire_recursive>
 801674a:	bf00      	nop
 801674c:	24005a06 	.word	0x24005a06

08016750 <__sinit_lock_release>:
 8016750:	4801      	ldr	r0, [pc, #4]	; (8016758 <__sinit_lock_release+0x8>)
 8016752:	f000 b8a2 	b.w	801689a <__retarget_lock_release_recursive>
 8016756:	bf00      	nop
 8016758:	24005a06 	.word	0x24005a06

0801675c <__sinit>:
 801675c:	b510      	push	{r4, lr}
 801675e:	4604      	mov	r4, r0
 8016760:	f7ff fff0 	bl	8016744 <__sinit_lock_acquire>
 8016764:	69a3      	ldr	r3, [r4, #24]
 8016766:	b11b      	cbz	r3, 8016770 <__sinit+0x14>
 8016768:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801676c:	f7ff bff0 	b.w	8016750 <__sinit_lock_release>
 8016770:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016774:	6523      	str	r3, [r4, #80]	; 0x50
 8016776:	4b13      	ldr	r3, [pc, #76]	; (80167c4 <__sinit+0x68>)
 8016778:	4a13      	ldr	r2, [pc, #76]	; (80167c8 <__sinit+0x6c>)
 801677a:	681b      	ldr	r3, [r3, #0]
 801677c:	62a2      	str	r2, [r4, #40]	; 0x28
 801677e:	42a3      	cmp	r3, r4
 8016780:	bf04      	itt	eq
 8016782:	2301      	moveq	r3, #1
 8016784:	61a3      	streq	r3, [r4, #24]
 8016786:	4620      	mov	r0, r4
 8016788:	f000 f820 	bl	80167cc <__sfp>
 801678c:	6060      	str	r0, [r4, #4]
 801678e:	4620      	mov	r0, r4
 8016790:	f000 f81c 	bl	80167cc <__sfp>
 8016794:	60a0      	str	r0, [r4, #8]
 8016796:	4620      	mov	r0, r4
 8016798:	f000 f818 	bl	80167cc <__sfp>
 801679c:	2200      	movs	r2, #0
 801679e:	60e0      	str	r0, [r4, #12]
 80167a0:	2104      	movs	r1, #4
 80167a2:	6860      	ldr	r0, [r4, #4]
 80167a4:	f7ff ff82 	bl	80166ac <std>
 80167a8:	68a0      	ldr	r0, [r4, #8]
 80167aa:	2201      	movs	r2, #1
 80167ac:	2109      	movs	r1, #9
 80167ae:	f7ff ff7d 	bl	80166ac <std>
 80167b2:	68e0      	ldr	r0, [r4, #12]
 80167b4:	2202      	movs	r2, #2
 80167b6:	2112      	movs	r1, #18
 80167b8:	f7ff ff78 	bl	80166ac <std>
 80167bc:	2301      	movs	r3, #1
 80167be:	61a3      	str	r3, [r4, #24]
 80167c0:	e7d2      	b.n	8016768 <__sinit+0xc>
 80167c2:	bf00      	nop
 80167c4:	08016ea0 	.word	0x08016ea0
 80167c8:	080166f5 	.word	0x080166f5

080167cc <__sfp>:
 80167cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80167ce:	4607      	mov	r7, r0
 80167d0:	f7ff ffac 	bl	801672c <__sfp_lock_acquire>
 80167d4:	4b1e      	ldr	r3, [pc, #120]	; (8016850 <__sfp+0x84>)
 80167d6:	681e      	ldr	r6, [r3, #0]
 80167d8:	69b3      	ldr	r3, [r6, #24]
 80167da:	b913      	cbnz	r3, 80167e2 <__sfp+0x16>
 80167dc:	4630      	mov	r0, r6
 80167de:	f7ff ffbd 	bl	801675c <__sinit>
 80167e2:	3648      	adds	r6, #72	; 0x48
 80167e4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80167e8:	3b01      	subs	r3, #1
 80167ea:	d503      	bpl.n	80167f4 <__sfp+0x28>
 80167ec:	6833      	ldr	r3, [r6, #0]
 80167ee:	b30b      	cbz	r3, 8016834 <__sfp+0x68>
 80167f0:	6836      	ldr	r6, [r6, #0]
 80167f2:	e7f7      	b.n	80167e4 <__sfp+0x18>
 80167f4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80167f8:	b9d5      	cbnz	r5, 8016830 <__sfp+0x64>
 80167fa:	4b16      	ldr	r3, [pc, #88]	; (8016854 <__sfp+0x88>)
 80167fc:	60e3      	str	r3, [r4, #12]
 80167fe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016802:	6665      	str	r5, [r4, #100]	; 0x64
 8016804:	f000 f847 	bl	8016896 <__retarget_lock_init_recursive>
 8016808:	f7ff ff96 	bl	8016738 <__sfp_lock_release>
 801680c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016810:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016814:	6025      	str	r5, [r4, #0]
 8016816:	61a5      	str	r5, [r4, #24]
 8016818:	2208      	movs	r2, #8
 801681a:	4629      	mov	r1, r5
 801681c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016820:	f7ff fc54 	bl	80160cc <memset>
 8016824:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016828:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801682c:	4620      	mov	r0, r4
 801682e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016830:	3468      	adds	r4, #104	; 0x68
 8016832:	e7d9      	b.n	80167e8 <__sfp+0x1c>
 8016834:	2104      	movs	r1, #4
 8016836:	4638      	mov	r0, r7
 8016838:	f7ff ff62 	bl	8016700 <__sfmoreglue>
 801683c:	4604      	mov	r4, r0
 801683e:	6030      	str	r0, [r6, #0]
 8016840:	2800      	cmp	r0, #0
 8016842:	d1d5      	bne.n	80167f0 <__sfp+0x24>
 8016844:	f7ff ff78 	bl	8016738 <__sfp_lock_release>
 8016848:	230c      	movs	r3, #12
 801684a:	603b      	str	r3, [r7, #0]
 801684c:	e7ee      	b.n	801682c <__sfp+0x60>
 801684e:	bf00      	nop
 8016850:	08016ea0 	.word	0x08016ea0
 8016854:	ffff0001 	.word	0xffff0001

08016858 <_fwalk_reent>:
 8016858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801685c:	4606      	mov	r6, r0
 801685e:	4688      	mov	r8, r1
 8016860:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016864:	2700      	movs	r7, #0
 8016866:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801686a:	f1b9 0901 	subs.w	r9, r9, #1
 801686e:	d505      	bpl.n	801687c <_fwalk_reent+0x24>
 8016870:	6824      	ldr	r4, [r4, #0]
 8016872:	2c00      	cmp	r4, #0
 8016874:	d1f7      	bne.n	8016866 <_fwalk_reent+0xe>
 8016876:	4638      	mov	r0, r7
 8016878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801687c:	89ab      	ldrh	r3, [r5, #12]
 801687e:	2b01      	cmp	r3, #1
 8016880:	d907      	bls.n	8016892 <_fwalk_reent+0x3a>
 8016882:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016886:	3301      	adds	r3, #1
 8016888:	d003      	beq.n	8016892 <_fwalk_reent+0x3a>
 801688a:	4629      	mov	r1, r5
 801688c:	4630      	mov	r0, r6
 801688e:	47c0      	blx	r8
 8016890:	4307      	orrs	r7, r0
 8016892:	3568      	adds	r5, #104	; 0x68
 8016894:	e7e9      	b.n	801686a <_fwalk_reent+0x12>

08016896 <__retarget_lock_init_recursive>:
 8016896:	4770      	bx	lr

08016898 <__retarget_lock_acquire_recursive>:
 8016898:	4770      	bx	lr

0801689a <__retarget_lock_release_recursive>:
 801689a:	4770      	bx	lr

0801689c <__swhatbuf_r>:
 801689c:	b570      	push	{r4, r5, r6, lr}
 801689e:	460e      	mov	r6, r1
 80168a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80168a4:	2900      	cmp	r1, #0
 80168a6:	b096      	sub	sp, #88	; 0x58
 80168a8:	4614      	mov	r4, r2
 80168aa:	461d      	mov	r5, r3
 80168ac:	da08      	bge.n	80168c0 <__swhatbuf_r+0x24>
 80168ae:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80168b2:	2200      	movs	r2, #0
 80168b4:	602a      	str	r2, [r5, #0]
 80168b6:	061a      	lsls	r2, r3, #24
 80168b8:	d410      	bmi.n	80168dc <__swhatbuf_r+0x40>
 80168ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80168be:	e00e      	b.n	80168de <__swhatbuf_r+0x42>
 80168c0:	466a      	mov	r2, sp
 80168c2:	f000 f8c3 	bl	8016a4c <_fstat_r>
 80168c6:	2800      	cmp	r0, #0
 80168c8:	dbf1      	blt.n	80168ae <__swhatbuf_r+0x12>
 80168ca:	9a01      	ldr	r2, [sp, #4]
 80168cc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80168d0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80168d4:	425a      	negs	r2, r3
 80168d6:	415a      	adcs	r2, r3
 80168d8:	602a      	str	r2, [r5, #0]
 80168da:	e7ee      	b.n	80168ba <__swhatbuf_r+0x1e>
 80168dc:	2340      	movs	r3, #64	; 0x40
 80168de:	2000      	movs	r0, #0
 80168e0:	6023      	str	r3, [r4, #0]
 80168e2:	b016      	add	sp, #88	; 0x58
 80168e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080168e8 <__smakebuf_r>:
 80168e8:	898b      	ldrh	r3, [r1, #12]
 80168ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80168ec:	079d      	lsls	r5, r3, #30
 80168ee:	4606      	mov	r6, r0
 80168f0:	460c      	mov	r4, r1
 80168f2:	d507      	bpl.n	8016904 <__smakebuf_r+0x1c>
 80168f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80168f8:	6023      	str	r3, [r4, #0]
 80168fa:	6123      	str	r3, [r4, #16]
 80168fc:	2301      	movs	r3, #1
 80168fe:	6163      	str	r3, [r4, #20]
 8016900:	b002      	add	sp, #8
 8016902:	bd70      	pop	{r4, r5, r6, pc}
 8016904:	ab01      	add	r3, sp, #4
 8016906:	466a      	mov	r2, sp
 8016908:	f7ff ffc8 	bl	801689c <__swhatbuf_r>
 801690c:	9900      	ldr	r1, [sp, #0]
 801690e:	4605      	mov	r5, r0
 8016910:	4630      	mov	r0, r6
 8016912:	f7ff fc4f 	bl	80161b4 <_malloc_r>
 8016916:	b948      	cbnz	r0, 801692c <__smakebuf_r+0x44>
 8016918:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801691c:	059a      	lsls	r2, r3, #22
 801691e:	d4ef      	bmi.n	8016900 <__smakebuf_r+0x18>
 8016920:	f023 0303 	bic.w	r3, r3, #3
 8016924:	f043 0302 	orr.w	r3, r3, #2
 8016928:	81a3      	strh	r3, [r4, #12]
 801692a:	e7e3      	b.n	80168f4 <__smakebuf_r+0xc>
 801692c:	4b0d      	ldr	r3, [pc, #52]	; (8016964 <__smakebuf_r+0x7c>)
 801692e:	62b3      	str	r3, [r6, #40]	; 0x28
 8016930:	89a3      	ldrh	r3, [r4, #12]
 8016932:	6020      	str	r0, [r4, #0]
 8016934:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016938:	81a3      	strh	r3, [r4, #12]
 801693a:	9b00      	ldr	r3, [sp, #0]
 801693c:	6163      	str	r3, [r4, #20]
 801693e:	9b01      	ldr	r3, [sp, #4]
 8016940:	6120      	str	r0, [r4, #16]
 8016942:	b15b      	cbz	r3, 801695c <__smakebuf_r+0x74>
 8016944:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016948:	4630      	mov	r0, r6
 801694a:	f000 f891 	bl	8016a70 <_isatty_r>
 801694e:	b128      	cbz	r0, 801695c <__smakebuf_r+0x74>
 8016950:	89a3      	ldrh	r3, [r4, #12]
 8016952:	f023 0303 	bic.w	r3, r3, #3
 8016956:	f043 0301 	orr.w	r3, r3, #1
 801695a:	81a3      	strh	r3, [r4, #12]
 801695c:	89a0      	ldrh	r0, [r4, #12]
 801695e:	4305      	orrs	r5, r0
 8016960:	81a5      	strh	r5, [r4, #12]
 8016962:	e7cd      	b.n	8016900 <__smakebuf_r+0x18>
 8016964:	080166f5 	.word	0x080166f5

08016968 <__malloc_lock>:
 8016968:	4801      	ldr	r0, [pc, #4]	; (8016970 <__malloc_lock+0x8>)
 801696a:	f7ff bf95 	b.w	8016898 <__retarget_lock_acquire_recursive>
 801696e:	bf00      	nop
 8016970:	24005a04 	.word	0x24005a04

08016974 <__malloc_unlock>:
 8016974:	4801      	ldr	r0, [pc, #4]	; (801697c <__malloc_unlock+0x8>)
 8016976:	f7ff bf90 	b.w	801689a <__retarget_lock_release_recursive>
 801697a:	bf00      	nop
 801697c:	24005a04 	.word	0x24005a04

08016980 <__sread>:
 8016980:	b510      	push	{r4, lr}
 8016982:	460c      	mov	r4, r1
 8016984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016988:	f000 f894 	bl	8016ab4 <_read_r>
 801698c:	2800      	cmp	r0, #0
 801698e:	bfab      	itete	ge
 8016990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016992:	89a3      	ldrhlt	r3, [r4, #12]
 8016994:	181b      	addge	r3, r3, r0
 8016996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801699a:	bfac      	ite	ge
 801699c:	6563      	strge	r3, [r4, #84]	; 0x54
 801699e:	81a3      	strhlt	r3, [r4, #12]
 80169a0:	bd10      	pop	{r4, pc}

080169a2 <__swrite>:
 80169a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80169a6:	461f      	mov	r7, r3
 80169a8:	898b      	ldrh	r3, [r1, #12]
 80169aa:	05db      	lsls	r3, r3, #23
 80169ac:	4605      	mov	r5, r0
 80169ae:	460c      	mov	r4, r1
 80169b0:	4616      	mov	r6, r2
 80169b2:	d505      	bpl.n	80169c0 <__swrite+0x1e>
 80169b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169b8:	2302      	movs	r3, #2
 80169ba:	2200      	movs	r2, #0
 80169bc:	f000 f868 	bl	8016a90 <_lseek_r>
 80169c0:	89a3      	ldrh	r3, [r4, #12]
 80169c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80169c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80169ca:	81a3      	strh	r3, [r4, #12]
 80169cc:	4632      	mov	r2, r6
 80169ce:	463b      	mov	r3, r7
 80169d0:	4628      	mov	r0, r5
 80169d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80169d6:	f000 b817 	b.w	8016a08 <_write_r>

080169da <__sseek>:
 80169da:	b510      	push	{r4, lr}
 80169dc:	460c      	mov	r4, r1
 80169de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169e2:	f000 f855 	bl	8016a90 <_lseek_r>
 80169e6:	1c43      	adds	r3, r0, #1
 80169e8:	89a3      	ldrh	r3, [r4, #12]
 80169ea:	bf15      	itete	ne
 80169ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80169ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80169f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80169f6:	81a3      	strheq	r3, [r4, #12]
 80169f8:	bf18      	it	ne
 80169fa:	81a3      	strhne	r3, [r4, #12]
 80169fc:	bd10      	pop	{r4, pc}

080169fe <__sclose>:
 80169fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a02:	f000 b813 	b.w	8016a2c <_close_r>
	...

08016a08 <_write_r>:
 8016a08:	b538      	push	{r3, r4, r5, lr}
 8016a0a:	4d07      	ldr	r5, [pc, #28]	; (8016a28 <_write_r+0x20>)
 8016a0c:	4604      	mov	r4, r0
 8016a0e:	4608      	mov	r0, r1
 8016a10:	4611      	mov	r1, r2
 8016a12:	2200      	movs	r2, #0
 8016a14:	602a      	str	r2, [r5, #0]
 8016a16:	461a      	mov	r2, r3
 8016a18:	f7ec fe7f 	bl	800371a <_write>
 8016a1c:	1c43      	adds	r3, r0, #1
 8016a1e:	d102      	bne.n	8016a26 <_write_r+0x1e>
 8016a20:	682b      	ldr	r3, [r5, #0]
 8016a22:	b103      	cbz	r3, 8016a26 <_write_r+0x1e>
 8016a24:	6023      	str	r3, [r4, #0]
 8016a26:	bd38      	pop	{r3, r4, r5, pc}
 8016a28:	24005a08 	.word	0x24005a08

08016a2c <_close_r>:
 8016a2c:	b538      	push	{r3, r4, r5, lr}
 8016a2e:	4d06      	ldr	r5, [pc, #24]	; (8016a48 <_close_r+0x1c>)
 8016a30:	2300      	movs	r3, #0
 8016a32:	4604      	mov	r4, r0
 8016a34:	4608      	mov	r0, r1
 8016a36:	602b      	str	r3, [r5, #0]
 8016a38:	f7ec fe8b 	bl	8003752 <_close>
 8016a3c:	1c43      	adds	r3, r0, #1
 8016a3e:	d102      	bne.n	8016a46 <_close_r+0x1a>
 8016a40:	682b      	ldr	r3, [r5, #0]
 8016a42:	b103      	cbz	r3, 8016a46 <_close_r+0x1a>
 8016a44:	6023      	str	r3, [r4, #0]
 8016a46:	bd38      	pop	{r3, r4, r5, pc}
 8016a48:	24005a08 	.word	0x24005a08

08016a4c <_fstat_r>:
 8016a4c:	b538      	push	{r3, r4, r5, lr}
 8016a4e:	4d07      	ldr	r5, [pc, #28]	; (8016a6c <_fstat_r+0x20>)
 8016a50:	2300      	movs	r3, #0
 8016a52:	4604      	mov	r4, r0
 8016a54:	4608      	mov	r0, r1
 8016a56:	4611      	mov	r1, r2
 8016a58:	602b      	str	r3, [r5, #0]
 8016a5a:	f7ec fe86 	bl	800376a <_fstat>
 8016a5e:	1c43      	adds	r3, r0, #1
 8016a60:	d102      	bne.n	8016a68 <_fstat_r+0x1c>
 8016a62:	682b      	ldr	r3, [r5, #0]
 8016a64:	b103      	cbz	r3, 8016a68 <_fstat_r+0x1c>
 8016a66:	6023      	str	r3, [r4, #0]
 8016a68:	bd38      	pop	{r3, r4, r5, pc}
 8016a6a:	bf00      	nop
 8016a6c:	24005a08 	.word	0x24005a08

08016a70 <_isatty_r>:
 8016a70:	b538      	push	{r3, r4, r5, lr}
 8016a72:	4d06      	ldr	r5, [pc, #24]	; (8016a8c <_isatty_r+0x1c>)
 8016a74:	2300      	movs	r3, #0
 8016a76:	4604      	mov	r4, r0
 8016a78:	4608      	mov	r0, r1
 8016a7a:	602b      	str	r3, [r5, #0]
 8016a7c:	f7ec fe85 	bl	800378a <_isatty>
 8016a80:	1c43      	adds	r3, r0, #1
 8016a82:	d102      	bne.n	8016a8a <_isatty_r+0x1a>
 8016a84:	682b      	ldr	r3, [r5, #0]
 8016a86:	b103      	cbz	r3, 8016a8a <_isatty_r+0x1a>
 8016a88:	6023      	str	r3, [r4, #0]
 8016a8a:	bd38      	pop	{r3, r4, r5, pc}
 8016a8c:	24005a08 	.word	0x24005a08

08016a90 <_lseek_r>:
 8016a90:	b538      	push	{r3, r4, r5, lr}
 8016a92:	4d07      	ldr	r5, [pc, #28]	; (8016ab0 <_lseek_r+0x20>)
 8016a94:	4604      	mov	r4, r0
 8016a96:	4608      	mov	r0, r1
 8016a98:	4611      	mov	r1, r2
 8016a9a:	2200      	movs	r2, #0
 8016a9c:	602a      	str	r2, [r5, #0]
 8016a9e:	461a      	mov	r2, r3
 8016aa0:	f7ec fe7e 	bl	80037a0 <_lseek>
 8016aa4:	1c43      	adds	r3, r0, #1
 8016aa6:	d102      	bne.n	8016aae <_lseek_r+0x1e>
 8016aa8:	682b      	ldr	r3, [r5, #0]
 8016aaa:	b103      	cbz	r3, 8016aae <_lseek_r+0x1e>
 8016aac:	6023      	str	r3, [r4, #0]
 8016aae:	bd38      	pop	{r3, r4, r5, pc}
 8016ab0:	24005a08 	.word	0x24005a08

08016ab4 <_read_r>:
 8016ab4:	b538      	push	{r3, r4, r5, lr}
 8016ab6:	4d07      	ldr	r5, [pc, #28]	; (8016ad4 <_read_r+0x20>)
 8016ab8:	4604      	mov	r4, r0
 8016aba:	4608      	mov	r0, r1
 8016abc:	4611      	mov	r1, r2
 8016abe:	2200      	movs	r2, #0
 8016ac0:	602a      	str	r2, [r5, #0]
 8016ac2:	461a      	mov	r2, r3
 8016ac4:	f7ec fe0c 	bl	80036e0 <_read>
 8016ac8:	1c43      	adds	r3, r0, #1
 8016aca:	d102      	bne.n	8016ad2 <_read_r+0x1e>
 8016acc:	682b      	ldr	r3, [r5, #0]
 8016ace:	b103      	cbz	r3, 8016ad2 <_read_r+0x1e>
 8016ad0:	6023      	str	r3, [r4, #0]
 8016ad2:	bd38      	pop	{r3, r4, r5, pc}
 8016ad4:	24005a08 	.word	0x24005a08

08016ad8 <_init>:
 8016ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ada:	bf00      	nop
 8016adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016ade:	bc08      	pop	{r3}
 8016ae0:	469e      	mov	lr, r3
 8016ae2:	4770      	bx	lr

08016ae4 <_fini>:
 8016ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016ae6:	bf00      	nop
 8016ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8016aea:	bc08      	pop	{r3}
 8016aec:	469e      	mov	lr, r3
 8016aee:	4770      	bx	lr
